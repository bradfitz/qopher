{
	"description": "go/build: handle and warn of duplicate GOPATH entries",
	"cc": [
		"golang-dev@googlegroups.com",
		"alex.brainman@gmail.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-01-06 04:09:16.250649",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5519050/diff/1/src/pkg/go/build/path.go\nFile src/pkg/go/build/path.go (right):\n\nhttp://codereview.appspot.com/5519050/diff/1/src/pkg/go/build/path.go#newcode173\nsrc/pkg/go/build/path.go:173: if t2.Path != t.Path {\nThis comparison is not good enough on windows, because windows paths could be either case. For example c:\\a and C:\\A refer to the same directory, but your comparison will treat them as different. I think, we should have appropriate function in filepath package to compare paths, like filepath.hasPrefix.",
			"disapproval": false,
			"date": "2012-01-06 06:19:09.632665",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/06 06:19:09, brainman wrote:\n> http://codereview.appspot.com/5519050/diff/1/src/pkg/go/build/path.go\n> File src/pkg/go/build/path.go (right):\n> \n> http://codereview.appspot.com/5519050/diff/1/src/pkg/go/build/path.go#newcode173\n> src/pkg/go/build/path.go:173: if t2.Path != t.Path {\n> This comparison is not good enough on windows, because windows paths could be\n> either case. For example c:\\a and C:\\A refer to the same directory, but your\n> comparison will treat them as different. I think, we should have appropriate\n> function in filepath package to compare paths, like filepath.hasPrefix.\n\nLet's address that in a separate CL. Perhaps filepath.Compare ?",
			"disapproval": false,
			"date": "2012-01-09 01:50:17.771659",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/09 01:50:17, adg wrote:\n> ...\n> Let's address that in a separate CL. Perhaps filepath.Compare ?\n\nfilepath.Compare sounds good to me. But I would like to wait for rsc before we go and extend filepath functionality. It was his baby, perhaps, he has better ideas.\n\nAlex",
			"disapproval": false,
			"date": "2012-01-09 01:55:23.748412",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9 January 2012 12:55,  <alex.brainman@gmail.com> wrote:\n> On 2012/01/09 01:50:17, adg wrote:\n>> Let's address that in a separate CL. Perhaps filepath.Compare ?\n>\n> filepath.Compare sounds good to me. But I would like to wait for rsc\n> before we go and extend filepath functionality. It was his baby,\n> perhaps, he has better ideas.\n\nI agree with that.\n\nI'd like to move ahead with this CL if anyone cares to review it.\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-01-09 01:59:45.633857",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why warn about duplicate entries in $GOPATH?\nIt is an ordered list; duplicates are silly but well-defined.\n",
			"disapproval": false,
			"date": "2012-01-09 18:54:09.580682",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I will submit windows changes in a separate CL.\n\nAlex",
			"disapproval": false,
			"date": "2012-01-09 02:13:18.775579",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=10cf6abf57ca ***\n\ngo/build: handle and warn of duplicate GOPATH entries\n\nR=golang-dev, alex.brainman\nCC=golang-dev\nhttp://codereview.appspot.com/5519050",
			"disapproval": false,
			"date": "2012-01-09 03:24:15.487579",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "just wondering, are the warnings really useful here?\n\ni currently have a script that does:\n\n  GOPATH=/home/rog/somedir:$GOPATH\n\nand now if GOPATH happens to contain /home/rog/somedir already,\ni'll get a warning.\n\ni think i'd prefer silent elimination of duplicates, as command line\nflags do, for example.\n\nOn 9 January 2012 03:24,  <adg@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=10cf6abf57ca ***\n>\n>\n> go/build: handle and warn of duplicate GOPATH entries\n>\n> R=golang-dev, alex.brainman\n> CC=golang-dev\n> http://codereview.appspot.com/5519050\n>\n>\n> http://codereview.appspot.com/5519050/\n",
			"disapproval": false,
			"date": "2012-01-09 14:11:45.917387",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5519050: go/build: handle and warn of duplicate GOPATH entries",
	"created": "2012-01-06 04:09:09.033267",
	"patchsets": [
		1,
		4002
	],
	"modified": "2012-01-09 18:54:09.630613",
	"closed": true,
	"issue": 5519050
}