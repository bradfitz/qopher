{
	"description": "encoding/xml: fix unmarshalling tags with namespace\n\nAdd a failing test: TestUnmarshalXmlTagWithNamespace and fixed\nunmarshal tags with namespace.\n\nxml.Unmarshal does not unmarshal tags like <sparkle:releaseNotesLink> for\n`xml:\"sparkel:releaseNotesLink\"`.\n\nfor example:\n\n        type Item struct {\n                        // ...\n                        SparkleReleaseNotesLink string `xml:\"sparkle:releaseNotesLink\"`\n        }\n\nThe above code does not work.\n\nIf we simply write:\n\n        type Item struct {\n                        // ...\n                        SparkleReleaseNotesLink string `xml:\"releaseNotesLink\"`\n        }\n\nthis works, but when encoding XML back, we still need the namespace.\n(encoding tags with namespace works fine currently)\n\nIn the unmarshal func in read.go, it replaces the namespace name with namespace value, so\nthat we can't compare the fieldinfo with the token.\n\nI did a minimal approach to solve this:\n\n1. Added a nsResolve map[string]string to resolve namespace quickly and\n   didn't change the original behavior of translating namespace name.\n\n2. When the field don't match with the token, check the token.Space\n   If the token.Space exists, resolve the namespace value and compare it (\"ns:field\")\n   with the field name.\n\nBy doing this, we can marshal the struct into into XML correctly,\nThe below XML is generated by xml.Unmarshal func (with this fix):\n\n    <channel>\n        <item>\n            <title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n            <sparkle:releaseNotesLink>http://you.com/app/2.0.html</sparkle:releaseNotesLink>\n            <enclosure url=\"http://you.com/app/Your Great App 2.0.zip\"\n                length=\"1623481\" sparkle:version=\"2.0\"\n                sparkle:dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\"></enclosure>\n        </item>\n    </channel>",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Weird , I have only one version Go installed (from hg), which is located at\r\n/usr/local/go\r\n\r\nI ran `all.bash`, `make.bash` for the changes in $GOROOT/src.\r\n\r\nthen build my external package from my GOPATH (/Users/c9s/go/src/\r\ngithub.com/go-appcast)\r\n\r\nThe build succeeded, but the test failed with the same test data in Go hg.\r\n\r\n\r\n\r\n\r\n\r\n2013/2/19 Dave Cheney <dave@cheney.net>\r\n\r\n> Without knowing the details of your system, I'd say you had two\r\n> versions of Go installed, once possibly from your os distro, the\r\n> other, trunk, from source. If this is the case, either uninstall the\r\n> distro one, or at least make sure $GOROOT/bin/go comes higher in the\r\n> path than one provided by your distro, but I strongly recommend the\r\n> first option.\r\n>\r\n> On Tue, Feb 19, 2013 at 3:15 PM,  <cornelius.howl@gmail.com> wrote:\r\n> >\r\n> >\r\n> > I have a question.\r\n> >\r\n> > the tests in the go repository are passed.\r\n> >\r\n> > but in my external package, it seems still compile with the old xml\r\n> > package when building,\r\n> >\r\n> > I've run  ./make.bash,   ./all.bash,\r\n> >\r\n> > Is there something I have not updated?\r\n> >\r\n> > how do I solve this problem?\r\n> >\r\n> > Thanks\r\n> >\r\n> >\r\n> > Cheers,\r\n> > c9s\r\n> >\r\n> >\r\n> >\r\n> >\r\n> > On 2013/02/19 04:09:42, c9s wrote:\r\n> >>\r\n> >> Hello\r\n> >\r\n> >\r\n> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com\r\n> ,\r\n> > https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=dave@cheney.net (cc:\r\n> >\r\n> >\r\n> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com\r\n> ),\r\n> >\r\n> >\r\n> >> Please take another look.\r\n> >\r\n> >\r\n> >\r\n> >\r\n> > https://codereview.appspot.com/7350048/\r\n>\r\n\r\n\r\n\r\n-- \r\nBest Regards,\r\n\r\nYo-An Lin\r\n",
			"disapproval": false,
			"date": "2013-02-19 06:42:23.503580",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry I guess I had some problem with hg.\n\nlet me do that.\n\nOn 2013/02/19 04:07:49, dfc wrote:\n> On 2013/02/19 03:44:20, c9s wrote:\n> > Hello mailto:golang-dev@googlegroups.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> > \n> > Please take another look.\n> \n> Hello,\n> \n> I'm not sure how you have done this but this CL is based off a revision,\n> 38271c4ce682 that does not appear in the tree. Can you please hg sync && hg mail\n> 7350048 again.",
			"disapproval": false,
			"date": "2013-02-19 04:09:18.544530",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Without knowing the details of your system, I'd say you had two\r\nversions of Go installed, once possibly from your os distro, the\r\nother, trunk, from source. If this is the case, either uninstall the\r\ndistro one, or at least make sure $GOROOT/bin/go comes higher in the\r\npath than one provided by your distro, but I strongly recommend the\r\nfirst option.\r\n\r\nOn Tue, Feb 19, 2013 at 3:15 PM,  <cornelius.howl@gmail.com> wrote:\r\n>\r\n>\r\n> I have a question.\r\n>\r\n> the tests in the go repository are passed.\r\n>\r\n> but in my external package, it seems still compile with the old xml\r\n> package when building,\r\n>\r\n> I've run  ./make.bash,   ./all.bash,\r\n>\r\n> Is there something I have not updated?\r\n>\r\n> how do I solve this problem?\r\n>\r\n> Thanks\r\n>\r\n>\r\n> Cheers,\r\n> c9s\r\n>\r\n>\r\n>\r\n>\r\n> On 2013/02/19 04:09:42, c9s wrote:\r\n>>\r\n>> Hello\r\n>\r\n> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com,\r\n> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=dave@cheney.net (cc:\r\n>\r\n> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com),\r\n>\r\n>\r\n>> Please take another look.\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/7350048/\r\n",
			"disapproval": false,
			"date": "2013-02-19 04:17:18.386430",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi dfc,\n\nI have a few questions about the XML namespace behavior.\n\n1. why do we translate the namespace tag to namespace url for a.Name.Space ?\n2. since we translated the namespace tags to urls, we can't compare the field info with the token..\n3. instead of replacing the .Space attribute, why don't we keep it ?\n\nCheers",
			"disapproval": false,
			"date": "2013-02-19 10:19:51.571470",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take a look",
			"disapproval": false,
			"date": "2013-02-18 17:40:18.919520",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-19 03:44:20.316290",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-19 04:09:42.242520",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-19 03:12:44.807770",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 03:44:20, c9s wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nHello,\n\nI'm not sure how you have done this but this CL is based off a revision, 38271c4ce682 that does not appear in the tree. Can you please hg sync && hg mail 7350048 again.",
			"disapproval": false,
			"date": "2013-02-19 04:07:49.053710",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have a question. \n\nthe tests in the go repository are passed.\n\nbut in my external package, it seems still compile with the old xml package when building,\n\nI've run  ./make.bash,   ./all.bash, \n\nIs there something I have not updated?\n\nhow do I solve this problem?\n\nThanks\n\n\nCheers,\nc9s\n\n\n\n\nOn 2013/02/19 04:09:42, c9s wrote:\n> Hello https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com, https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=dave@cheney.net (cc:\n> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com),\n> \n> Please take another look.",
			"disapproval": false,
			"date": "2013-02-19 04:15:04.243050",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, I have a symbol link from ~/src/go/go to /usr/local/go , does this\r\naffect ?\r\n\r\n\r\n2013/2/19 Lin Yo-An <cornelius.howl@gmail.com>\r\n\r\n>\r\n> Weird , I have only one version Go installed (from hg), which is located\r\n> at /usr/local/go\r\n>\r\n> I ran `all.bash`, `make.bash` for the changes in $GOROOT/src.\r\n>\r\n> then build my external package from my GOPATH (/Users/c9s/go/src/\r\n> github.com/go-appcast)\r\n>\r\n> The build succeeded, but the test failed with the same test data in Go hg.\r\n>\r\n>\r\n>\r\n>\r\n>\r\n> 2013/2/19 Dave Cheney <dave@cheney.net>\r\n>\r\n>> Without knowing the details of your system, I'd say you had two\r\n>> versions of Go installed, once possibly from your os distro, the\r\n>> other, trunk, from source. If this is the case, either uninstall the\r\n>> distro one, or at least make sure $GOROOT/bin/go comes higher in the\r\n>> path than one provided by your distro, but I strongly recommend the\r\n>> first option.\r\n>>\r\n>> On Tue, Feb 19, 2013 at 3:15 PM,  <cornelius.howl@gmail.com> wrote:\r\n>> >\r\n>> >\r\n>> > I have a question.\r\n>> >\r\n>> > the tests in the go repository are passed.\r\n>> >\r\n>> > but in my external package, it seems still compile with the old xml\r\n>> > package when building,\r\n>> >\r\n>> > I've run  ./make.bash,   ./all.bash,\r\n>> >\r\n>> > Is there something I have not updated?\r\n>> >\r\n>> > how do I solve this problem?\r\n>> >\r\n>> > Thanks\r\n>> >\r\n>> >\r\n>> > Cheers,\r\n>> > c9s\r\n>> >\r\n>> >\r\n>> >\r\n>> >\r\n>> > On 2013/02/19 04:09:42, c9s wrote:\r\n>> >>\r\n>> >> Hello\r\n>> >\r\n>> >\r\n>> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com\r\n>> ,\r\n>> > https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=dave@cheney.net (cc:\r\n>> >\r\n>> >\r\n>> https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=golang-dev@googlegroups.com\r\n>> ),\r\n>> >\r\n>> >\r\n>> >> Please take another look.\r\n>> >\r\n>> >\r\n>> >\r\n>> >\r\n>> > https://codereview.appspot.com/7350048/\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Best Regards,\r\n>\r\n> Yo-An Lin\r\n>\r\n\r\n\r\n\r\n-- \r\nBest Regards,\r\n\r\nYo-An Lin\r\n",
			"disapproval": false,
			"date": "2013-02-19 07:00:11.069460",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I just looked into the code, and found that getTypeInfo is actually taking \r\nnamespace information from the struct like:\r\n\r\n    type SparkleItem struct {\r\nTitle                   string `xml:\"title\"`\r\nSparkleReleaseNotesLink string `xml:\"sparkle releaseNotesLink\"`\r\nEnclosure SparkleEnclosureItem `xml:\"enclosure\"`\r\n    }\r\n\r\nand the Unmarshal does namespace translation in Decoder, which translate \r\nnamespace like \"sparkle\" into its namespace url.\r\n\r\nSo in the read.go:269,  a.Name.Space is actually the namespace URL, which \r\nis translated, and the unmarshalling works fine for this case.\r\n\r\n\r\n*But when marshalling this structure back to XML, it losts the namespace \r\ninformation. the \"<sparkle:releaseNotesLink>\" becomes \r\n\"<releaseNotesLink>...\"*\r\n\r\nWhich behavior is correct?\r\n\r\n\r\n\r\nThanks\r\n\r\ncorneli...@gmail.com\u65bc 2013\u5e742\u670819\u65e5\u661f\u671f\u4e8cUTC+8\u4e0b\u534812\u664209\u520618\u79d2\u5beb\u9053\uff1a\r\n>\r\n> Sorry I guess I had some problem with hg. \r\n>\r\n> let me do that. \r\n>\r\n> On 2013/02/19 04:07:49, dfc wrote: \r\n> > On 2013/02/19 03:44:20, c9s wrote: \r\n> > > Hello mailto:golang-dev@googlegroups.com (cc: \r\n> > mailto:golang-dev@googlegroups.com), \r\n> > > \r\n> > > Please take another look. \r\n>\r\n> > Hello, \r\n>\r\n> > I'm not sure how you have done this but this CL is based off a \r\n> revision, \r\n> > 38271c4ce682 that does not appear in the tree. Can you please hg sync \r\n> && hg mail \r\n> > 7350048 again. \r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/7350048/ \r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-19 09:51:50.809800",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take a look at the changes,\n\nI provided a xml test case for namespace parsing,\n\nWe got the XML like this:\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss version=\"2.0\" \nxmlns:sparkle=\"http://www.andymatuschak.org/xml-namespaces/sparkle\"  \nxmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n<channel>\n\t<item>\n\t\t<title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n\t\t<sparkle:releaseNotesLink>\n\t\t\thttp://you.com/app/2.0.html\n\t\t</sparkle:releaseNotesLink>\n\t\t<pubDate>Wed, 09 Jan 2006 19:20:11 +0000</pubDate>\n\t\t<enclosure \n\t\t\turl=\"http://you.com/app/Your Great App 2.0.zip\"\n\t\t\tsparkle:version=\"2.0\" length=\"1623481\"\n\t\t\ttype=\"application/octet-stream\"\n\t\t\tsparkle:dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\" />\n\t</item>\n</channel>\n</rss>\n\nBy using the struct:\n\n\n\n\ntype SparkleItem struct {\n\tTitle                   string `xml:\"title\"`\n\tSparkleReleaseNotesLink string `xml:\"sparkle releaseNotesLink\"`\n\tEnclosure SparkleEnclosureItem `xml:\"enclosure\"`\n}\n\ntype EnclosureItem struct {\n\tURL string `xml:\"url,attr\"`\n\tLength int `xml:\"length,attr\"`\n}\n\ntype SparkleEnclosureItem struct {\n\tEnclosureItem\n\tSparkleVersion string `xml:\"sparkle version,attr\"`\n\tSparkleDSASignature string `xml:\"sparkle dsaSignature,attr\"`\n}\n\ntype SparkleChannel struct {\n\tItems []SparkleItem `xml:\"item\"`\n}\n\ntype SparkleRSS struct {\n\tChannel SparkleChannel `xml:\"channel\"`\n}\n\n\nWe can unmarshal the XML into the object,\n\nBut when marshaling back to XML, we got this:\n\n<SparkleRSS>\n  <channel>\n    <item>\n      <title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n      <releaseNotesLink xmlns=\"sparkle\">&#xA;&#x9;&#x9;&#x9;http://you.com/app/2.0.html&#xA;&#x9;&#x9;</releaseNotesLink>\n      <enclosure url=\"http://you.com/app/Your Great App 2.0.zip\" length=\"1623481\" version=\"2.0\" dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\"></enclosure>\n    </item>\n  </channel>\n</SparkleRSS>",
			"disapproval": false,
			"date": "2013-02-19 09:59:09.546710",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-19 10:31:04.091610",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 07:36:11.876680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, I'm now done reviewing this for style.\n\nLeaving for Russ or somebody who knows encoding/xml.\n\nhttps://codereview.appspot.com/7350048/diff/23003/src/pkg/encoding/xml/read_test.go\nFile src/pkg/encoding/xml/read_test.go (right):\n\nhttps://codereview.appspot.com/7350048/diff/23003/src/pkg/encoding/xml/read_test.go#newcode456\nsrc/pkg/encoding/xml/read_test.go:456: t.Error(\"no items parsed.\")\nt.Fatal, not t.Error, otherwise you will crash at line 468 referencing [0]",
			"disapproval": false,
			"date": "2013-02-21 18:42:16.486530",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read.go#newcode142\nsrc/pkg/encoding/xml/read.go:142: \nremove this extra whitespace\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read.go#newcode241\nsrc/pkg/encoding/xml/read.go:241: \nand here\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read.go#newcode269\nsrc/pkg/encoding/xml/read.go:269: \nand here\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read.go#newcode275\nsrc/pkg/encoding/xml/read.go:275: // for attributes with namespace, we resovle the namespace url\ntypo: resolve.\nURL is capitalized (not a variable here)\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read.go#newcode276\nsrc/pkg/encoding/xml/read.go:276: if v, ok := p.nsResolve[ a.Name.Space ] ; ok && finfo.name == v + \":\" + a.Name.Local {\ngofmt this code.\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read.go#newcode469\nsrc/pkg/encoding/xml/read.go:469: if v, ok := p.nsResolve[ start.Name.Space ] ; ok && finfo.name == v + \":\" + start.Name.Local {\ngofmt\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read_test.go\nFile src/pkg/encoding/xml/read_test.go (right):\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read_test.go#newcode483\nsrc/pkg/encoding/xml/read_test.go:483: text , err := MarshalIndent(&rss,\"\",\"  \")\ngofmt\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read_test.go#newcode487\nsrc/pkg/encoding/xml/read_test.go:487: // fmt.Printf(\"%s\",text)\nremove\n\nhttps://codereview.appspot.com/7350048/diff/21001/src/pkg/encoding/xml/read_test.go#newcode488\nsrc/pkg/encoding/xml/read_test.go:488: _ = text\nremove",
			"disapproval": false,
			"date": "2013-02-21 15:40:58.607770",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 18:44:07.365380",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 17:28:23.178580",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 17:03:48.441950",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read.go#newcode271\nsrc/pkg/encoding/xml/read.go:271: // for attributes with namespace, we resovle the namespace URL\nstill a typo in \"resolve\"\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go\nFile src/pkg/encoding/xml/read_test.go (right):\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode448\nsrc/pkg/encoding/xml/read_test.go:448: func TestUnmarshalXmlWithNamespace(t *testing.T) {\nXML, not Xml (Go style is to not mix case of acronyms)\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode449\nsrc/pkg/encoding/xml/read_test.go:449: var rss = SparkleRSS{}\nvar rss SparkleRSS\n\n... is fine\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode452\nsrc/pkg/encoding/xml/read_test.go:452: t.Error(err)\nt.Fatal(err)\n\n(since you can't proceed)\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode456\nsrc/pkg/encoding/xml/read_test.go:456: t.Error(\"item parse failed.\")\nt.Fatal(\"no items parsed\")\n\n(the parse didn't fail.  it just didn't get what you wanted.\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode459\nsrc/pkg/encoding/xml/read_test.go:459: for _, i := range rss.Channel.Items {\ndon't use \"i\" for \"item\". looks like an index. use \"it\".\n\nI'd do:\n\nfor i, it := range ..\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode461\nsrc/pkg/encoding/xml/read_test.go:461: t.Error(\"title tag parse failed.\")\nt.Errorf(\"expected a title for item %d\", i)\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode464\nsrc/pkg/encoding/xml/read_test.go:464: t.Error(\"sparkle:releaseNotesLink parse failed.\")\nt.Errorf(\"expected a sparkle:releaseNotesLink for item %d\", i)\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode470\nsrc/pkg/encoding/xml/read_test.go:470: t.Error(\"can not parse attribute length\")\ns/can not parse/expected/, here and below.\n\nit did parse. something.\n\nhttps://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode481\nsrc/pkg/encoding/xml/read_test.go:481: text, err := MarshalIndent(&rss, \"\", \"  \")\nthese tests are kinda useless, since you don't look at the result of test at all.\n\nI would just all these MarshalIndent parts.",
			"disapproval": false,
			"date": "2013-02-21 18:29:53.910520",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 17:04:51.581020",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your patience. I've fixed them all. :-)\n\nOn 2013/02/21 18:29:53, bradfitz wrote:\n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read.go\n> File src/pkg/encoding/xml/read.go (right):\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read.go#newcode271\n> src/pkg/encoding/xml/read.go:271: // for attributes with namespace, we resovle\n> the namespace URL\n> still a typo in \"resolve\"\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go\n> File src/pkg/encoding/xml/read_test.go (right):\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode448\n> src/pkg/encoding/xml/read_test.go:448: func TestUnmarshalXmlWithNamespace(t\n> *testing.T) {\n> XML, not Xml (Go style is to not mix case of acronyms)\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode449\n> src/pkg/encoding/xml/read_test.go:449: var rss = SparkleRSS{}\n> var rss SparkleRSS\n> \n> ... is fine\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode452\n> src/pkg/encoding/xml/read_test.go:452: t.Error(err)\n> t.Fatal(err)\n> \n> (since you can't proceed)\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode456\n> src/pkg/encoding/xml/read_test.go:456: t.Error(\"item parse failed.\")\n> t.Fatal(\"no items parsed\")\n> \n> (the parse didn't fail.  it just didn't get what you wanted.\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode459\n> src/pkg/encoding/xml/read_test.go:459: for _, i := range rss.Channel.Items {\n> don't use \"i\" for \"item\". looks like an index. use \"it\".\n> \n> I'd do:\n> \n> for i, it := range ..\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode461\n> src/pkg/encoding/xml/read_test.go:461: t.Error(\"title tag parse failed.\")\n> t.Errorf(\"expected a title for item %d\", i)\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode464\n> src/pkg/encoding/xml/read_test.go:464: t.Error(\"sparkle:releaseNotesLink parse\n> failed.\")\n> t.Errorf(\"expected a sparkle:releaseNotesLink for item %d\", i)\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode470\n> src/pkg/encoding/xml/read_test.go:470: t.Error(\"can not parse attribute length\")\n> s/can not parse/expected/, here and below.\n> \n> it did parse. something.\n> \n> https://codereview.appspot.com/7350048/diff/33003/src/pkg/encoding/xml/read_test.go#newcode481\n> src/pkg/encoding/xml/read_test.go:481: text, err := MarshalIndent(&rss, \"\", \" \n> \")\n> these tests are kinda useless, since you don't look at the result of test at\n> all.\n> \n> I would just all these MarshalIndent parts.",
			"disapproval": false,
			"date": "2013-02-21 18:41:11.179170",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "First line of your commit message should be shorter.\n\nIt doesn't need to mention adding a test, because that's implicit.  You should always add a test when fixing something.\n\nJust make it:\n\nencoding/xml: fix unmarshalling tags with namespace\n\n(and then a blank line, and more information)\n\nhttps://codereview.appspot.com/7350048/diff/32001/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/7350048/diff/32001/src/pkg/encoding/xml/read.go#newcode463\nsrc/pkg/encoding/xml/read.go:463: // for element with namespace, we need to resovle the namespace URL\nstill misspelled",
			"disapproval": false,
			"date": "2013-02-21 17:21:40.710640",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Bradfitz, Thanks for reviewing this patch, I will fix this up soon.\n\n\nOn 2013/02/21 17:21:40, bradfitz wrote:\n> First line of your commit message should be shorter.\n> \n> It doesn't need to mention adding a test, because that's implicit.  You should\n> always add a test when fixing something.\n> \n> Just make it:\n> \n> encoding/xml: fix unmarshalling tags with namespace\n> \n> (and then a blank line, and more information)\n> \n> https://codereview.appspot.com/7350048/diff/32001/src/pkg/encoding/xml/read.go\n> File src/pkg/encoding/xml/read.go (right):\n> \n> https://codereview.appspot.com/7350048/diff/32001/src/pkg/encoding/xml/read.go#newcode463\n> src/pkg/encoding/xml/read.go:463: // for element with namespace, we need to\n> resovle the namespace URL\n> still misspelled",
			"disapproval": false,
			"date": "2013-02-21 17:23:15.767540",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 18:40:17.383450",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-23 08:45:44.271940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I missed this CL and fixed the attribute problem as part of cleaning up some other name space issues in CL 7227056. \n\nI looked at this to double-check what I'd done, and I don't see nsResolve defined anywhere in the current patch set, so I don't think it compiles.\n\nAlso, the test and therefore the code are not correct. They assume that the name space can be specified as \"sparkle\", but that's actually a local identifier in the XML that is not required. That is, this XML from the test:\n\n<rss version=\"2.0\"\n xmlns:sparkle=\"http://www.andymatuschak.org/xml-namespaces/sparkle\"\n xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n<channel>\n\t<item>\n\t\t<title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n\t\t<sparkle:releaseNotesLink>http://you.com/app/2.0.html</sparkle:releaseNotesLink>\n\t\t<pubDate>Wed, 09 Jan 2006 19:20:11 +0000</pubDate>\n\t\t<enclosure \n\t\t\turl=\"http://you.com/app/Your Great App 2.0.zip\"\n\t\t\tsparkle:version=\"2.0\" length=\"1623481\"\n\t\t\ttype=\"application/octet-stream\"\n\t\t\tsparkle:dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\" />\n\t</item>\n</channel>\n</rss>\n\nis completely equivalent to this alternate form:\n\n<rss version=\"2.0\"\n xmlns:GOPHERS=\"http://www.andymatuschak.org/xml-namespaces/sparkle\"\n xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n<channel>\n\t<item>\n\t\t<title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n\t\t<GOPHERS:releaseNotesLink>http://you.com/app/2.0.html</GOPHERS:releaseNotesLink>\n\t\t<pubDate>Wed, 09 Jan 2006 19:20:11 +0000</pubDate>\n\t\t<enclosure \n\t\t\turl=\"http://you.com/app/Your Great App 2.0.zip\"\n\t\t\tGOPHERS:version=\"2.0\" length=\"1623481\"\n\t\t\ttype=\"application/octet-stream\"\n\t\t\tGOPHERS:dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\" />\n\t</item>\n</channel>\n</rss>\n\nbut the CL does not accept that form because it expects \"sparkle\".\n\nIf I modify your test to use for example `xml:\"http://www.andymatuschak.org/xml-namespaces/sparkle releaseNotesLink\"` instead of `xml:\"sparkle:releaseNotesLink\"` then it does pass with my current CL.\n\nLet's go with CL 7227056 instead. Apologies for the duplicated effort.",
			"disapproval": false,
			"date": "2013-03-12 13:28:18.646580",
			"approval": false
		},
		{
			"sender": "cornelius.howl@gmail.com",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for reviewing this patch.\n\nlooking forward to see this namespace issue to be resolved in go1.1. \n\n\nOn 2013/03/12 13:28:18, rsc wrote:\n> Sorry, I missed this CL and fixed the attribute problem as part of cleaning up\n> some other name space issues in CL 7227056. \n> \n> I looked at this to double-check what I'd done, and I don't see nsResolve\n> defined anywhere in the current patch set, so I don't think it compiles.\n> \n> Also, the test and therefore the code are not correct. They assume that the name\n> space can be specified as \"sparkle\", but that's actually a local identifier in\n> the XML that is not required. That is, this XML from the test:\n> \n> <rss version=\"2.0\"\n>  xmlns:sparkle=\"http://www.andymatuschak.org/xml-namespaces/sparkle\"\n>  xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n> <channel>\n> \t<item>\n> \t\t<title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n> \t\t<sparkle:releaseNotesLink>http://you.com/app/2.0.html</sparkle:releaseNotesLink>\n> \t\t<pubDate>Wed, 09 Jan 2006 19:20:11 +0000</pubDate>\n> \t\t<enclosure \n> \t\t\turl=\"http://you.com/app/Your Great App 2.0.zip\"\n> \t\t\tsparkle:version=\"2.0\" length=\"1623481\"\n> \t\t\ttype=\"application/octet-stream\"\n> \t\t\tsparkle:dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\" />\n> \t</item>\n> </channel>\n> </rss>\n> \n> is completely equivalent to this alternate form:\n> \n> <rss version=\"2.0\"\n>  xmlns:GOPHERS=\"http://www.andymatuschak.org/xml-namespaces/sparkle\"\n>  xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n> <channel>\n> \t<item>\n> \t\t<title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n> \t\t<GOPHERS:releaseNotesLink>http://you.com/app/2.0.html</GOPHERS:releaseNotesLink>\n> \t\t<pubDate>Wed, 09 Jan 2006 19:20:11 +0000</pubDate>\n> \t\t<enclosure \n> \t\t\turl=\"http://you.com/app/Your Great App 2.0.zip\"\n> \t\t\tGOPHERS:version=\"2.0\" length=\"1623481\"\n> \t\t\ttype=\"application/octet-stream\"\n> \t\t\tGOPHERS:dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\" />\n> \t</item>\n> </channel>\n> </rss>\n> \n> but the CL does not accept that form because it expects \"sparkle\".\n> \n> If I modify your test to use for example\n> `xml:\"http://www.andymatuschak.org/xml-namespaces/sparkle releaseNotesLink\"`\n> instead of `xml:\"sparkle:releaseNotesLink\"` then it does pass with my current\n> CL.\n> \n> Let's go with CL 7227056 instead. Apologies for the duplicated effort.",
			"disapproval": false,
			"date": "2013-03-12 13:50:34.011630",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cornelius.howl@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close\n\nResolved as part of CL 7227056",
			"disapproval": false,
			"date": "2013-06-05 22:24:00.121560",
			"approval": false
		}
	],
	"owner_email": "cornelius.howl@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "c9s",
	"subject": "code review 7350048: encoding/xml: fix unmarshalling tags with namespace",
	"created": "2013-02-18 17:02:31.929640",
	"patchsets": [
		2001,
		10001,
		14001,
		10002,
		21001,
		28001,
		32001,
		33003,
		23003,
		28002,
		45001
	],
	"modified": "2013-06-05 22:24:00.505410",
	"closed": false,
	"issue": 7350048
}