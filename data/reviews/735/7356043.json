{
	"description": "cmd/godoc: show examples in text mode\n\nAdded the command line flag -ex to godoc to print examples in\ntext output.\n\nSamples from the generated output:\n\n$ godoc -ex strings Index\n...\nfunc Index(s, sep string) int\n    Index returns the index of the first instance of sep in s, or -1 if sep\n    is not present in s.\n\n    Example:\n        fmt.Println(strings.Index(\"chicken\", \"ken\"))\n        fmt.Println(strings.Index(\"chicken\", \"dmr\"))\n        // Output:\n        // 4\n        // -1\n...\n\n$ godoc -ex container/heap\n...\npackage heap\n    import \"container/heap\"\n\n    Package heap provides heap operations for any type that implements\n    heap.Interface. A heap is a tree with the property that each node is the\n    minimum-valued node in its subtree.\n\n    Example:\n        // This example demonstrates an integer heap built using the heap interface.\n        package heap_test\n\n        import (\n            \"container/heap\"\n            \"fmt\"\n        ...\n\n    Example:\n        // This example demonstrates a priority queue built using the heap interface.\n        package heap_test\n\n        import (\n            \"container/heap\"\n            \"fmt\"\n        )\n...\n\n\nFixes issue 3587.",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"adg@golang.org",
		"rsc@golang.org",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suggest that as much as possible godoc -ex should mimic godoc -src. That\r\nmeans that 'godoc -ex strings' should show all the examples in package\r\nstrings (both package examples and smaller examples), 'godoc -ex strings\r\nFields' shows just the example or examples for Fields, and there's no way\r\nto get just the package-level examples.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-19 16:22:10.831640",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7356043/diff/3/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/7356043/diff/3/src/cmd/godoc/godoc.go#newcode372\nsrc/cmd/godoc/godoc.go:372: header = fmt.Sprintf(\"\\t// ------ Example %s \", example_nameFunc(eg.Name))\nOn 2013/02/19 06:24:07, adg wrote:\n> can't we just use indentation to delineate the examples, as we do with all other\n> blocks of text or code in the text examples?\n\nWe can, I tried it. But it gets strange for\ncontainer/heap where two long package level examples\nhave to be presented.  If the code is just indented\nand the second example is separated only by a blank\nline then there is absolutely no visual clue that\nthis one large block of indented code is actually \ntwo examples. \n\nHow about: A visual separators of the form\n  // ---- Example <name> ------------ \nis used at the beginning of each example iff more than\none example has to be shown in one block.",
			"disapproval": false,
			"date": "2013-02-19 08:38:27.906490",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-18 14:19:36.506070",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As cmd/godoc already supports generating complete example code for its -play\r\nfeatures, i'm wondering if we can have a way to make godoc generate a\r\ncomplete\r\nGo source file for experimenting with a single example.\r\n\r\nFor example, I think \"godoc -ex regexp FindStringIndex\" could display this:\r\n\r\n$ godoc -ex regexp FindStringIndex\r\n// type Regexp struct {\r\n//     // contains filtered or unexported fields\r\n// }\r\n//     Regexp is the representation of a compiled regular expression. The\r\n//     public interface is entirely through methods. A Regexp is safe for\r\n//     concurrent use by multiple goroutines.\r\n//\r\n// func (re *Regexp) FindStringIndex(s string) (loc []int)\r\n//     FindStringIndex returns a two-element slice of integers defining the\r\n//     location of the leftmost match in s of the regular expression. The\r\nmatch\r\n//     itself is at s[loc[0]:loc[1]]. A return value of nil indicates no\r\nmatch.\r\n\r\npackage main\r\n\r\nimport (\r\n\"fmt\"\r\n \"regexp\"\r\n)\r\n\r\n// Example Regexp.FindStringIndex\r\nfunc main() {\r\n        re := regexp.MustCompile(\"ab?\")\r\n        fmt.Println(re.FindStringIndex(\"tablett\"))\r\n        fmt.Println(re.FindStringIndex(\"foo\") == nil)\r\n        // Output:\r\n        // [1 3]\r\n        // true\r\n}\r\n",
			"disapproval": false,
			"date": "2013-02-18 16:34:19.194300",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7356043/diff/3/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/7356043/diff/3/src/cmd/godoc/godoc.go#newcode372\nsrc/cmd/godoc/godoc.go:372: header = fmt.Sprintf(\"\\t// ------ Example %s \", example_nameFunc(eg.Name))\ncan't we just use indentation to delineate the examples, as we do with all other blocks of text or code in the text examples?",
			"disapproval": false,
			"date": "2013-02-19 06:24:07.232070",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That would be doable. One would have to decide what to output\r\nin the following cases:\r\n* $ godoc -ex strings\r\n   all examples in one main?\r\n* $ godoc -ex os\r\n   which contains no examples\r\n* $ godoc -ex container/heap\r\n  which contains two full examples\r\n* $ gdoc -ex regexp Match\r\n  no example here\r\n\r\nAdditionally it makes using text mode godoc awkward: Users\r\nhave to do a '$ godoc strings' first to see which functions are\r\nin package strings and in a second step run\r\n'$ godoc -ex strings ContainsAny' to see the example if the\r\nfunction's doc was not enlightening enough.\r\n\r\n\r\nOn Mon, Feb 18, 2013 at 5:33 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> As cmd/godoc already supports generating complete example code for its\r\n> -play\r\n> features, i'm wondering if we can have a way to make godoc generate a\r\n> complete\r\n> Go source file for experimenting with a single example.\r\n>\r\n> For example, I think \"godoc -ex regexp FindStringIndex\" could display\r\n> this:\r\n>\r\n> $ godoc -ex regexp FindStringIndex\r\n> // type Regexp struct {\r\n> //     // contains filtered or unexported fields\r\n> // }\r\n> //     Regexp is the representation of a compiled regular expression. The\r\n> //     public interface is entirely through methods. A Regexp is safe for\r\n> //     concurrent use by multiple goroutines.\r\n> //\r\n> // func (re *Regexp) FindStringIndex(s string) (loc []int)\r\n> //     FindStringIndex returns a two-element slice of integers defining the\r\n> //     location of the leftmost match in s of the regular expression. The\r\n> match\r\n> //     itself is at s[loc[0]:loc[1]]. A return value of nil indicates no\r\n> match.\r\n>\r\n> package main\r\n>\r\n> import (\r\n> \"fmt\"\r\n>  \"regexp\"\r\n> )\r\n>\r\n> // Example Regexp.FindStringIndex\r\n> func main() {\r\n>         re := regexp.MustCompile(\"ab?\")\r\n>         fmt.Println(re.FindStringIndex(\"tablett\"))\r\n>         fmt.Println(re.FindStringIndex(\"foo\") == nil)\r\n>         // Output:\r\n>         // [1 3]\r\n>         // true\r\n> }\r\n>\r\n>\r\n\r\n\r\n-- \r\nDr. Volker Dobler\r\n",
			"disapproval": false,
			"date": "2013-02-19 08:33:22.616610",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 19 February 2013 19:38, <dr.volker.dobler@gmail.com> wrote:\r\n\r\n> We can, I tried it. But it gets strange for\r\n> container/heap where two long package level examples\r\n> have to be presented.  If the code is just indented\r\n> and the second example is separated only by a blank\r\n> line then there is absolutely no visual clue that\r\n> this one large block of indented code is actually\r\n> two examples.\r\n>\r\n\r\nDon't the package-level examples have titles? Surely the title would\r\nseparate them, not just a blank line?\r\n",
			"disapproval": false,
			"date": "2013-02-19 23:39:02.463120",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 20, 2013 at 12:38 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n>\r\n> On 19 February 2013 19:38, <dr.volker.dobler@gmail.com> wrote:\r\n>\r\n>> We can, I tried it. But it gets strange for\r\n>> container/heap where two long package level examples\r\n>> have to be presented.  If the code is just indented\r\n>> and the second example is separated only by a blank\r\n>> line then there is absolutely no visual clue that\r\n>> this one large block of indented code is actually\r\n>> two examples.\r\n>>\r\n>\r\n> Don't the package-level examples have titles? Surely the title would\r\n> separate them, not just a blank line?\r\n>\r\n\r\nThey do, but the don't separate: Output of container heap would\r\nlook like below. IMHO the title\r\n  // Example Package (PriorityQueue)\r\ndoes not \"separate\" the two examples: If you do not examine each\r\nline you'll miss this separation very easily: The large block of code\r\nbelow looks like one large example.\r\n\r\nTwo very long package-level examples might be uncommon\r\nand not worth extra handling. If this visual separation is unwanted\r\nI'll remove it.\r\n\r\n$ godoc -ex container/heap\r\n\r\nPACKAGE\r\n\r\npackage heap\r\n    import \"container/heap\"\r\n\r\n    Package heap provides heap operations for any type that implements\r\n    heap.Interface. A heap is a tree with the property that each node is the\r\n    minimum-valued node in its subtree.\r\n\r\n    A heap is a common way to implement a priority queue. To build a\r\n    priority queue, implement the Heap interface with the (negative)\r\n    priority as the ordering for the Less method, so Push adds items while\r\n    Pop removes the highest-priority item from the queue. The Examples\r\n    include such an implementation; the file example_pq_test.go has the\r\n    complete source.\r\n\r\n        // Example Package (IntHeap)\r\n        // This example demonstrates an integer heap built using the heap\r\ninterface.\r\n        package heap_test\r\n\r\n        import (\r\n            \"container/heap\"\r\n            \"fmt\"\r\n        )\r\n\r\n        // An IntHeap is a min-heap of ints.\r\n        type IntHeap []int\r\n\r\n        func (h IntHeap) Len() int           { return len(h) }\r\n        func (h IntHeap) Less(i, j int) bool { return h[i] < h[j] }\r\n        func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\r\n\r\n        func (h *IntHeap) Push(x interface{}) {\r\n            // Push and Pop use pointer receivers because they modify the\r\nslice's length,\r\n            // not just its contents.\r\n            *h = append(*h, x.(int))\r\n        }\r\n\r\n        func (h *IntHeap) Pop() interface{} {\r\n            old := *h\r\n            n := len(old)\r\n            x := old[n-1]\r\n            *h = old[0 : n-1]\r\n            return x\r\n        }\r\n\r\n        // This example inserts several ints into an IntHeap and removes\r\nthem in order of priority.\r\n        func Example_intHeap() {\r\n            h := &IntHeap{2, 1, 5}\r\n            heap.Init(h)\r\n            heap.Push(h, 3)\r\n            for h.Len() > 0 {\r\n                fmt.Printf(\"%d \", heap.Pop(h))\r\n            }\r\n            // Output: 1 2 3 5\r\n        }\r\n\r\n        // Example Package (PriorityQueue)\r\n        // This example demonstrates a priority queue built using the heap\r\ninterface.\r\n        package heap_test\r\n\r\n        import (\r\n            \"container/heap\"\r\n            \"fmt\"\r\n        )\r\n       // An Item is something we manage in a priority queue.\r\n        type Item struct {\r\n            value    string // The value of the item; arbitrary.\r\n            priority int    // The priority of the item in the queue.\r\n            // The index is needed by update and is maintained by the\r\nheap.Interface methods.\r\n            index int // The index of the item in the heap.\r\n        }\r\n\r\n        // A PriorityQueue implements heap.Interface and holds Items.\r\n        type PriorityQueue []*Item\r\n\r\n        func (pq PriorityQueue) Len() int { return len(pq) }\r\n\r\n        func (pq PriorityQueue) Less(i, j int) bool {\r\n            // We want Pop to give us the highest, not lowest, priority so\r\nwe use greater than here.\r\n            return pq[i].priority > pq[j].priority\r\n        }\r\n\r\n        func (pq PriorityQueue) Swap(i, j int) {\r\n            pq[i], pq[j] = pq[j], pq[i]\r\n            pq[i].index = i\r\n            pq[j].index = j\r\n        }\r\n\r\n        func (pq *PriorityQueue) Push(x interface{}) {\r\n            n := len(*pq)\r\n            item := x.(*Item)\r\n            item.index = n\r\n            *pq = append(*pq, item)\r\n        }\r\n\r\n        func (pq *PriorityQueue) Pop() interface{} {\r\n            old := *pq\r\n            n := len(old)\r\n            item := old[n-1]\r\n            item.index = -1 // for safety\r\n            *pq = old[0 : n-1]\r\n            return item\r\n        }\r\n\r\n        // update modifies the priority and value of an Item in the queue.\r\n        func (pq *PriorityQueue) update(item *Item, value string, priority\r\nint) {\r\n            heap.Remove(pq, item.index)\r\n            item.value = value\r\n            item.priority = priority\r\n            heap.Push(pq, item)\r\n        }\r\n\r\n        // This example inserts some items into a PriorityQueue,\r\nmanipulates an item,\r\n        // and then removes the items in priority order.\r\n        func Example_priorityQueue() {\r\n            // Some items and their priorities.\r\n            items := map[string]int{\r\n                \"banana\": 3, \"apple\": 2, \"pear\": 4,\r\n            }\r\n\r\n            // Create a priority queue and put the items in it.\r\n            pq := &PriorityQueue{}\r\n            heap.Init(pq)\r\n            for value, priority := range items {\r\n                item := &Item{\r\n                    value:    value,\r\n                    priority: priority,\r\n                }\r\n                heap.Push(pq, item)\r\n            }\r\n\r\n            // Insert a new item and then modify its priority.\r\n            item := &Item{\r\n                value:    \"orange\",\r\n                priority: 1,\r\n            }\r\n            heap.Push(pq, item)\r\n            pq.update(item, item.value, 5)\r\n\r\n            // Take the items out; they arrive in decreasing priority order.\r\n            for pq.Len() > 0 {\r\n                item := heap.Pop(pq).(*Item)\r\n                fmt.Printf(\"%.2d:%s \", item.priority, item.value)\r\n            }\r\n            // Output:\r\n            // 05:orange 04:pear 03:banana 02:apple\r\n        }\r\n\r\nFUNCTIONS\r\n\r\nfunc Init(h Interface)\r\n    A heap must be initialized before any of the heap operations can be\r\n    used. Init is idempotent with respect to the heap invariants and may be\r\n    called whenever the heap invariants may have been invalidated. Its\r\n    complexity is O(n) where n = h.Len().\r\n[...]\r\n",
			"disapproval": false,
			"date": "2013-02-20 00:41:39.678770",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 20 February 2013 11:41, Volker Dobler <dr.volker.dobler@gmail.com> wrote:\r\n\r\n> They do, but the don't separate: Output of container heap would\r\n> look like below. IMHO the title\r\n>   // Example Package (PriorityQueue)\r\n> does not \"separate\" the two examples: If you do not examine each\r\n> line you'll miss this separation very easily: The large block of code\r\n> below looks like one large example.\r\n>\r\n\r\nWhat if we pulled out the package comment and displayed it one level\r\n\"outdented\"?\r\n",
			"disapproval": false,
			"date": "2013-02-20 00:46:41.069860",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nMy only concern here is that this ads yet another flag - thus increasing the number of different operation modes that each godoc change must be tested in. Presumably showing the examples always is blowing up the output too much in general?\n\nThat said, the added code is very self-contained (even the flag use), so maybe we should just see how it goes, as long as we keep in mind that it's harder to take a flag away once people got used to it...\n\nAndrew, please feel free to submit if you're happy.\nThanks.\n- gri\n\nhttps://codereview.appspot.com/7356043/diff/20001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/7356043/diff/20001/src/cmd/godoc/godoc.go#newcode346\nsrc/cmd/godoc/godoc.go:346: if first {\nif !first {\n   buf.Writestring(\"\\n\")\n}\nfirst = false\n\nis simpler (and likely produces less code)",
			"disapproval": false,
			"date": "2013-02-22 06:55:27.677190",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, but I'd like to wait for gri's signoff.",
			"disapproval": false,
			"date": "2013-02-21 03:10:00.806270",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This will have to wait for tomorrow.\r\n- gri\r\n\r\n\r\nOn Wed, Feb 20, 2013 at 7:10 PM, <adg@golang.org> wrote:\r\n\r\n> LGTM, but I'd like to wait for gri's signoff.\r\n>\r\n> https://codereview.appspot.**com/7356043/<https://codereview.appspot.com/7356043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-21 04:49:23.974300",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7356043/diff/20001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/7356043/diff/20001/src/cmd/godoc/godoc.go#newcode346\nsrc/cmd/godoc/godoc.go:346: if first {\nOn 2013/02/22 06:55:27, gri wrote:\n> if !first {\n>    buf.Writestring(\"\\n\")\n> }\n> first = false\n> \n> is simpler (and likely produces less code)\n\nDone.",
			"disapproval": false,
			"date": "2013-02-24 23:21:56.228700",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n> What if we pulled out the package comment and displayed\n> it one level \"outdented\"?\n\nThat looks really nice, but it is not suitable for\nthe function-, type- and method examples, I thus\ntried the following:\n\nEach example is prefixed by an outdented\n    Example:\nand the example name is dropped as it was not helpful.\nThe result is pretty and consistent over all examples.",
			"disapproval": false,
			"date": "2013-02-20 10:27:43.644350",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Will submit after this change:\n\nOn 2013/02/22 06:55:27, gri wrote:\n> https://codereview.appspot.com/7356043/diff/20001/src/cmd/godoc/godoc.go\n> File src/cmd/godoc/godoc.go (right):\n> \n> https://codereview.appspot.com/7356043/diff/20001/src/cmd/godoc/godoc.go#newcode346\n> src/cmd/godoc/godoc.go:346: if first {\n> if !first {\n>    buf.Writestring(\"\\n\")\n> }\n> first = false\n> \n> is simpler (and likely produces less code)",
			"disapproval": false,
			"date": "2013-02-24 22:43:58.989540",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=33d3e7bbd3ef ***\n\ncmd/godoc: show examples in text mode\n\nAdded the command line flag -ex to godoc to print examples in\ntext output.\n\nSamples from the generated output:\n\n$ godoc -ex strings Index\n...\nfunc Index(s, sep string) int\n    Index returns the index of the first instance of sep in s, or -1 if sep\n    is not present in s.\n\n    Example:\n        fmt.Println(strings.Index(\"chicken\", \"ken\"))\n        fmt.Println(strings.Index(\"chicken\", \"dmr\"))\n        // Output:\n        // 4\n        // -1\n...\n\n$ godoc -ex container/heap\n...\npackage heap\n    import \"container/heap\"\n\n    Package heap provides heap operations for any type that implements\n    heap.Interface. A heap is a tree with the property that each node is the\n    minimum-valued node in its subtree.\n\n    Example:\n        // This example demonstrates an integer heap built using the heap interface.\n        package heap_test\n\n        import (\n            \"container/heap\"\n            \"fmt\"\n        ...\n\n    Example:\n        // This example demonstrates a priority queue built using the heap interface.\n        package heap_test\n\n        import (\n            \"container/heap\"\n            \"fmt\"\n        )\n...\n\n\nFixes issue 3587.\n\nR=golang-dev, minux.ma, adg, rsc, gri\nCC=golang-dev\nhttps://codereview.appspot.com/7356043\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-02-24 23:37:40.997410",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 7356043: cmd/godoc: show examples in text mode",
	"created": "2013-02-18 14:16:57.335410",
	"patchsets": [
		1,
		2001,
		3,
		11001,
		17001,
		20001,
		29001
	],
	"modified": "2013-02-25 08:15:28.560920",
	"closed": true,
	"issue": 7356043
}