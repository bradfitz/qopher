{
	"description": "runtime: fix complex division benchmarks\nwe can't add the division result to n during iteration, because it might\nturn n into NaN or Inf.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"iant@google.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-05-04 18:31:49.946651",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c93b5846e97b ***\n\nruntime: fix complex division benchmarks\nwe can't add the division result to n during iteration, because it might\nturn n into NaN or Inf.\n\nR=golang-dev, rsc, iant, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6197045",
			"disapproval": false,
			"date": "2012-05-10 19:09:32.107123",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-05-04 20:08:49.241430",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-04 18:52:41.504666",
			"approval": true
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This inserts a global variable reference into the middle of the loop,\r\nwhich seems less than ideal for a micro-benchmark.  Can you use a local\r\nvariable instead, and assign it to result after the loop?\r\n\r\nAlso, how does this change the benchmark results?\r\n\r\nIan\r\n\r\nminux.ma@gmail.com writes:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> runtime: fix complex division benchmarks\r\n> we can't add the division result to n during iteration, because it might\r\n> turn n into NaN or Inf.\r\n>\r\n> Please review this at http://codereview.appspot.com/6197045/\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/complex_test.go\r\n>\r\n>\r\n> Index: src/pkg/runtime/complex_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/complex_test.go\r\n> +++ b/src/pkg/runtime/complex_test.go\r\n> @@ -14,44 +14,49 @@\r\n>  func BenchmarkComplex128DivNormal(b *testing.B) {\r\n>  \td := 15 + 2i\r\n>  \tn := 32 + 3i\r\n> +\tresult = 0\r\n>  \tfor i := 0; i < b.N; i++ {\r\n> -\t\tn += n / d\r\n> +\t\tn += 0.1i\r\n> +\t\tresult += n / d\r\n>  \t}\r\n> -\tresult = n\r\n>  }\r\n>\r\n>  func BenchmarkComplex128DivNisNaN(b *testing.B) {\r\n>  \td := cmplx.NaN()\r\n>  \tn := 32 + 3i\r\n> +\tresult = 0\r\n>  \tfor i := 0; i < b.N; i++ {\r\n> -\t\tn += n / d\r\n> +\t\tn += 0.1i\r\n> +\t\tresult += n / d\r\n>  \t}\r\n> -\tresult = n\r\n>  }\r\n>\r\n>  func BenchmarkComplex128DivDisNaN(b *testing.B) {\r\n>  \td := 15 + 2i\r\n>  \tn := cmplx.NaN()\r\n> +\tresult = 0\r\n>  \tfor i := 0; i < b.N; i++ {\r\n> -\t\tn += n / d\r\n> +\t\td += 0.1i\r\n> +\t\tresult += n / d\r\n>  \t}\r\n> -\tresult = n\r\n>  }\r\n>\r\n>  func BenchmarkComplex128DivNisInf(b *testing.B) {\r\n>  \td := 15 + 2i\r\n>  \tn := cmplx.Inf()\r\n> +\tresult = 0\r\n>  \tfor i := 0; i < b.N; i++ {\r\n> -\t\tn += n / d\r\n> +\t\td += 0.1i\r\n> +\t\tresult += n / d\r\n>  \t}\r\n> -\tresult = n\r\n>  }\r\n>\r\n>  func BenchmarkComplex128DivDisInf(b *testing.B) {\r\n>  \td := cmplx.Inf()\r\n>  \tn := 32 + 3i\r\n> +\tresult = 0\r\n>  \tfor i := 0; i < b.N; i++ {\r\n> -\t\tn += n / d\r\n> +\t\tn += 0.1i\r\n> +\t\tresult += n / d\r\n>  \t}\r\n> -\tresult = n\r\n>  }\r\n",
			"disapproval": false,
			"date": "2012-05-04 18:54:36.351448",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nOn Sat, May 5, 2012 at 2:54 AM, Ian Lance Taylor <iant@google.com> wrote:\r\n\r\n> This inserts a global variable reference into the middle of the loop,\r\n> which seems less than ideal for a micro-benchmark.  Can you use a local\r\n> variable instead, and assign it to result after the loop?\r\n>\r\nDone.\r\n\r\n>\r\n> Also, how does this change the benchmark results?\r\n>\r\nNot much. The reason behind this CL is this:\r\n\r\n> >  func BenchmarkComplex128DivNisNaN(b *testing.B) {\r\n> >       d := cmplx.NaN()\r\n> >       n := 32 + 3i\r\n> > +     result = 0\r\n> >       for i := 0; i < b.N; i++ {\r\n> > -             n += n / d\r\n> > +             n += 0.1i\r\n> > +             result += n / d\r\n>\r\nn / d is NaN, so the original test will change n to NaN after the first\r\niteration,\r\nwhich changes the test to do Nan/NaN afterwards.\r\n\r\n>  >       }\r\n> > -     result = n\r\n> >  }\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-04 19:09:18.154801",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6197045: runtime: fix complex division benchmarks",
	"created": "2012-05-04 18:26:56.851868",
	"patchsets": [
		1,
		2001,
		1002,
		4003,
		4004
	],
	"modified": "2012-05-10 20:21:03.073254",
	"closed": true,
	"issue": 6197045
}