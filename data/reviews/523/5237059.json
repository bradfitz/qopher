{
	"description": "html: handle more situations in parser\n\nFill in more cases in parser state machine.\nPass test 25 from tests1.dat.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"nigeltao@golang.org"
	],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 11 October 2011 14:39,  <andybalholm@gmail.com> wrote:\n> The test is only incidental to the change. I didn't even look at what\n> the test was. I just discovered that I could raise the loop limit by one\n> after I did the change.\n\nI'm not always a fan of test-driven development, but for the html\npackage, my approach has been:\n\n1. Increase the test loop limit by one.\n2. Make whatever changes to the parser/tokenizer (based on html5lib\nand the WHATWG spec) are needed for that new test to pass.\n3. Increase the test loop limit by as much as possible without any\nfurther code changes.\n4. Go through code review.\n5. Goto 1.\n\nSo far, this has kept the code reviews of managable size.\n",
			"disapproval": false,
			"date": "2011-10-11 03:57:20.363271",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Oct 10, 2011, at 1:23 PM, Rob 'Commander' Pike wrote:\n\n> two things.\n> \n> 1) have you discussed these changes before sending out a code review? i didn't see the discussion, but i might have just missed it.\n\nNo. The code is full of TODOs, and I'm doing some of them.\n\n> 2) the huge string switch is pretty code but can be slow: it's a linear scan.  simple trick: switch on the first byte, which is O(1), and then the linear scans will be much shorter. the switch won't dominate performance but it's so easy to be more efficient, why not?\n\nI was following the existing implementation, but that might be a good optimization.\n\nAndy",
			"disapproval": false,
			"date": "2011-10-10 20:26:45.924565",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, nigeltao@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-10 17:57:06.183009",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "two things.\n\n1) have you discussed these changes before sending out a code review? i didn't see the discussion, but i might have just missed it.\n\n2) the huge string switch is pretty code but can be slow: it's a linear scan.  simple trick: switch on the first byte, which is O(1), and then the linear scans will be much shorter. the switch won't dominate performance but it's so easy to be more efficient, why not?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-10 20:23:49.553839",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Again, this change is too large for me to review.\n\nIIRC, the test case is just \"<p><b><div><marquee></p></b></div>X\". Thus, your changes to the behavior of param, image, optgroup, caption, thead, article, figcaption, ul, form, pre, etc are all, as I see it, out of scope for this change.\n\nI'm happy that you're doing the work. I'm just asking that you serve it in managable sizes.\n\nhttp://codereview.appspot.com/5237059/diff/4001/src/pkg/html/parse.go\nFile src/pkg/html/parse.go (right):\n\nhttp://codereview.appspot.com/5237059/diff/4001/src/pkg/html/parse.go#newcode75\nsrc/pkg/html/parse.go:75: // indexOfElementInScope returns the index in p.oe of the highest element whose tag is in matchTags\n80 chars for doc comments.",
			"disapproval": false,
			"date": "2011-10-11 00:03:07.385811",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/11 00:03:07, nigeltao wrote:\n> Again, this change is too large for me to review.\n> \n> IIRC, the test case is just \"<p><b><div><marquee></p></b></div>X\". Thus, your\n> changes to the behavior of param, image, optgroup, caption, thead, article,\n> figcaption, ul, form, pre, etc are all, as I see it, out of scope for this\n> change.\n\nThe test is only incidental to the change. I didn't even look at what the test was. I just discovered that I could raise the loop limit by one after I did the change. \n\nI was doing a relatively straightforward transliteration of the WHATWG spec into Go, adding any cases that could be fairly easily expressed without major changes to the rest of the package.\n \n> I'm happy that you're doing the work. I'm just asking that you serve it in\n> managable sizes.\n\nThis change list is about half the work I've done on the parser so far. I was trying to keep it manageable. But there's a huge amount of work to be done yet, and I don't want to take all year. I guess I need to slow down a little and discuss what is the best way to go about it.",
			"disapproval": false,
			"date": "2011-10-11 03:39:48.724057",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/11 03:57:20, nigeltao wrote:\n> I'm not always a fan of test-driven development, but for the html\n> package, my approach has been:\n> \n> 1. Increase the test loop limit by one.\n> 2. Make whatever changes to the parser/tokenizer (based on html5lib\n> and the WHATWG spec) are needed for that new test to pass.\n> 3. Increase the test loop limit by as much as possible without any\n> further code changes.\n> 4. Go through code review.\n> 5. Goto 1.\n> \n> So far, this has kept the code reviews of managable size.\n\nI think we would end up with better-structured code if we worked more from the spec instead of trying to fix one problem at a time. Several of the tests were being parsed correctly, but for the wrong reasons. (I made one insertion mode more compliant to the spec and it broke them; then I did the same with the next insertion mode, and it fixed them again.)\n\nPerhaps I should work on one insertion mode at a time. That would keep the changelists manageable. But there's not much of a way to do automated testing based on the test suite.",
			"disapproval": false,
			"date": "2011-10-11 04:05:21.945233",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 11 October 2011 15:05,  <andybalholm@gmail.com> wrote:\n> I think we would end up with better-structured code if we worked more\n> from the spec instead of trying to fix one problem at a time. Several of\n> the tests were being parsed correctly, but for the wrong reasons. (I\n> made one insertion mode more compliant to the spec and it broke them;\n> then I did the same with the next insertion mode, and it fixed them\n> again.)\n>\n> Perhaps I should work on one insertion mode at a time. That would keep\n> the changelists manageable. But there's not much of a way to do\n> automated testing based on the test suite.\n\nI'm not sure if \"one insertion mode at a time\" is the right\ngranularity, since the in-body IM is so much larger than anything\nelse. I still think that one test case at a time is a better approach,\neven if it means touching more than one insertion mode each time.\n\nI repeat that I find this code review too big as it stands; it changes\ntoo much. Part of the reason why the Go standard package library is so\ngood is that every line of code in it has to be understood by someone\nwho didn't write it. Even if you have more code that hasn't been\nmailed yet, I still think that the fastest way to get it all submitted\nis to slice it finer.\n",
			"disapproval": false,
			"date": "2011-10-11 05:03:29.169011",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-11 22:59:52.337659",
			"approval": false
		}
	],
	"owner_email": "andybalholm@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andybalholm",
	"subject": "code review 5237059: html: handle more situations in parser",
	"created": "2011-10-10 17:56:36.181478",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2011-10-11 22:59:54.723550",
	"closed": true,
	"issue": 5237059
}