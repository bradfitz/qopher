{
	"description": "encoding/json: handle anonymous fields\n\nFixes issue 3069.",
	"cc": [
		"golang-dev@googlegroups.com",
		"n13m3y3r@gmail.com"
	],
	"reviewers": [
		"mt4swm@googlemail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-06 20:32:30.378390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+gustavo",
			"disapproval": false,
			"date": "2012-08-06 20:36:41.529700",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for handling this Russ. Just a couple of questions:\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/decode.go#newcode504\nsrc/pkg/encoding/json/decode.go:504: if strings.EqualFold(ff.name, key) {\nThis is now picking the last match rather than the first one. Is this ok?  No tests seem to cover this either.\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go#newcode89\nsrc/pkg/encoding/json/encode.go:89: // An anonymous struct field with a name given in its JSON tag is treated as\nThat's nice.\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go#newcode594\nsrc/pkg/encoding/json/encode.go:594: current, next = next, current[:0]\nClever reuse.\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go#newcode628\nsrc/pkg/encoding/json/encode.go:628: if count[f.typ] > 1 {\n// Force a name collision.\n\nIs that the idea?  The index information is of course not correct for the multiple fields, so it's a bit surprising on first sight.\n\nIt'd also be nice to have a test that breaks when this is commented out. Right now we can take all of the count logic out and tests still pass.\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go#newcode636\nsrc/pkg/encoding/json/encode.go:636: if ft.Name() == \"\" {\n// Must be a pointer.",
			"disapproval": false,
			"date": "2012-08-31 21:26:45.302440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a9fc9baa621b ***\n\nencoding/json: handle anonymous fields\n\nFixes issue 3069.\n\nR=golang-dev, n13m3y3r\nCC=golang-dev\nhttp://codereview.appspot.com/6460044",
			"disapproval": false,
			"date": "2012-09-11 03:31:46.482610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/decode.go#newcode504\nsrc/pkg/encoding/json/decode.go:504: if strings.EqualFold(ff.name, key) {\nOn 2012/08/31 21:26:45, niemeyer wrote:\n> This is now picking the last match rather than the first one. Is this ok?  No\n> tests seem to cover this either.\n\nFixed and added test.\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go#newcode628\nsrc/pkg/encoding/json/encode.go:628: if count[f.typ] > 1 {\nOn 2012/08/31 21:26:45, niemeyer wrote:\n> // Force a name collision.\n> \n> Is that the idea?  The index information is of course not correct for the\n> multiple fields, so it's a bit surprising on first sight.\n> \n> It'd also be nice to have a test that breaks when this is commented out. Right\n> now we can take all of the count logic out and tests still pass.\n\nDone.\n\nhttp://codereview.appspot.com/6460044/diff/4001/src/pkg/encoding/json/encode.go#newcode636\nsrc/pkg/encoding/json/encode.go:636: if ft.Name() == \"\" {\nOn 2012/08/31 21:26:45, niemeyer wrote:\n> // Must be a pointer.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-05 15:15:04.223590",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, thanks.",
			"disapproval": false,
			"date": "2012-09-11 02:21:59.982270",
			"approval": true
		},
		{
			"sender": "mt4swm@googlemail.com",
			"recipients": [
				"rsc@golang.org",
				"mt4swm@googlemail.com",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In case I want to encode a struct containing an anonymous\nfield based on a predeclared type, the encoder will panic\nin typeFields():\n\tpanic: reflect: NumField of non-struct type [recovered]\n\nIf the condition in line 621 of file encode.go,\n\n\t... || !sf.Anonymous,\n\nwould be relaxed to \n\n\tt := sf.Type\n\t... || !(sf.Anonymous && (t.Kind() == reflect.Struct || t.Kind() == reflect.Ptr && t.Elem().Kind() == reflect.Struct)),\n\nanonymous fields that have an underlying predeclared type could be\nencoded and decoded as well (and the above-mentioned panic would\nbe avoided).\n\nMichael\n\nFor an example program see: http://play.golang.org/p/XVWosi6Zhj\n\nhttps://codereview.appspot.com/6460044/diff/13002/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/6460044/diff/13002/src/pkg/encoding/json/encode.go#newcode621\nsrc/pkg/encoding/json/encode.go:621: if name != \"\" || !sf.Anonymous {\nThe THEN-block will be skipped not only for anonymous structs, but also in case sf is an anonymous field based on a predeclared type like uint16. This will result in a panic later, when NumField() is called on such an (anonymous) non-struct field.",
			"disapproval": false,
			"date": "2012-11-26 21:17:10.178760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 26, 2012 at 4:17 PM,  <mt4swm@googlemail.com> wrote:\r\n> In case I want to encode a struct containing an anonymous\r\n> field based on a predeclared type, the encoder will panic\r\n> in typeFields():\r\n>         panic: reflect: NumField of non-struct type [recovered]\r\n\r\nThanks. Looks like this is issue 4474.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-11 17:38:58.445230",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6460044: encoding/json: handle anonymous fields",
	"created": "2012-08-06 16:25:02.973200",
	"patchsets": [
		1,
		2001,
		4001,
		13001,
		13002
	],
	"modified": "2012-11-26 21:17:10.531460",
	"closed": true,
	"issue": 6460044
}