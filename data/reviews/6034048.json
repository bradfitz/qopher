{
	"description": "sync/atomic: fix 64-bit atomic cas for Linux/ARM\n    This is a follow-up to CL 5978051.\n    Use kernel cas64 helper if we can, fallback to LDREXD/STREXD if\n    we are on ARMv6 or higher, and to lock-emulated cas64 if on ARMv5.\n    A future CL will fix {Add,Load,Store}{Int,Uint}64 and issue 3331.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-04-15 20:08:20.131264",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "any thoughts on this CL and CL 5978051?\n\nanother way to get architecture information is by parsing /proc/cpuinfo,\nor SIGILL on unsupported instructions, I think neither of them is acceptable.",
			"disapproval": false,
			"date": "2012-04-19 19:22:43.334539",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's the concern about parsing /proc/cpuinfo?  Complexity or stability?\n It's Linux-specific, sure, but it's part of the stable interface provided\nto userspace.  I wouldn't worry about it changing, for instance.\n\nOn Thu, Apr 19, 2012 at 12:22 PM, <minux.ma@gmail.com> wrote:\n\n> any thoughts on this CL and CL 5978051?\n>\n> another way to get architecture information is by parsing /proc/cpuinfo,\n> or SIGILL on unsupported instructions, I think neither of them is\n> acceptable.\n>\n> http://codereview.appspot.com/**6034048/<http://codereview.appspot.com/6034048/>\n>\n",
			"disapproval": false,
			"date": "2012-04-19 19:33:53.577826",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 20, 2012 at 3:33 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n> What's the concern about parsing /proc/cpuinfo?  Complexity or stability?\n>  It's Linux-specific, sure, but it's part of the stable interface provided\n> to userspace.  I wouldn't worry about it changing, for instance.\n\nThe same info is already provided by AUXV in machine readable form.\nAT_PLATFORM and AT_HWCAP,\n(as shown by: 'LD_SHOW_AUXV=1 /bin/true')\nso I don't think we need to read a file and parse that ourselves.\n\nAlso note that the AUXV is stable interface too.\n",
			"disapproval": false,
			"date": "2012-04-19 19:42:08.160885",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6034048/diff/12001/src/pkg/sync/atomic/init_arm.go\nFile src/pkg/sync/atomic/init_arm.go (right):\n\nhttp://codereview.appspot.com/6034048/diff/12001/src/pkg/sync/atomic/init_arm.go#newcode9\nsrc/pkg/sync/atomic/init_arm.go:9: func init() {\nsync/atomic is imported by just about everything, transitively.\nHaving a func init here means that every package ends up with a func init (to call this one), and I'd really like to keep them more lightweight than that.  \n\nThe 64-bit detection code in asm_arm.s checks whether it can use the\n64-bit operations and caches the result, so that the fastCheck64 function\nonly executes 3 instructions on the common path.  Can we do something\nlike that here instead of a func init phase check?",
			"disapproval": false,
			"date": "2012-04-25 03:14:10.418445",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-25 08:25:55.751262",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6034048/diff/21003/src/pkg/sync/atomic/asm_linux_arm.s\nFile src/pkg/sync/atomic/asm_linux_arm.s (right):\n\nhttp://codereview.appspot.com/6034048/diff/21003/src/pkg/sync/atomic/asm_linux_arm.s#newcode113\nsrc/pkg/sync/atomic/asm_linux_arm.s:113: MOVB\truntime\u00b7armArch(SB), R0\nWhere is this symbol defined?",
			"disapproval": false,
			"date": "2012-05-03 21:47:43.538086",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/03 21:47:43, rsc wrote:\nhttp://codereview.appspot.com/6034048/diff/21003/src/pkg/sync/atomic/asm_linux_arm.s#newcode113\n> src/pkg/sync/atomic/asm_linux_arm.s:113: MOVB\truntime\u00b7armArch(SB), R0\n> Where is this symbol defined?\nIn CL 5978051, signal_linux_arm.c",
			"disapproval": false,
			"date": "2012-05-04 15:19:39.724907",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-04 15:20:28.291140",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f59dd827d8d9 ***\n\nsync/atomic: fix 64-bit atomic cas for Linux/ARM\n    This is a follow-up to CL 5978051.\n    Use kernel cas64 helper if we can, fallback to LDREXD/STREXD if\n    we are on ARMv6 or higher, and to lock-emulated cas64 if on ARMv5.\n    A future CL will fix {Add,Load,Store}{Int,Uint}64 and issue 3331.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6034048",
			"disapproval": false,
			"date": "2012-05-04 18:02:53.693941",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6034048: sync/atomic: fix 64-bit atomic cas for Linux/ARM",
	"created": "2012-04-15 19:32:11.636104",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		5003,
		12001,
		21003,
		27002
	],
	"modified": "2012-05-04 18:02:58.370396",
	"closed": true,
	"issue": 6034048
}