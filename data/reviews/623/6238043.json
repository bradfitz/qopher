{
	"description": "net/http: make client await response concurrently with writing request\n\nIf the server replies with an HTTP response before we're done\nwriting our body (for instance \"401 Unauthorized\" response), we\nwere previously ignoring that, since we returned our write\nerror (\"broken pipe\", etc) before ever reading the response.\nNow we read and write at the same time.\n\nFixes issue 3595",
	"cc": [
		"rsc@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-05-23 22:56:19.196516",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure, splitting them sounds good.\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:31:05.081877",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL (or a first look)\r\n\r\nThis CL now works, and is now updated with the server-side fix too.\r\n\r\n\r\nOn Wed, May 23, 2012 at 5:01 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6238043/<http://codereview.appspot.com/6238043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-24 00:02:44.908128",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-24 00:01:29.614412",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sad about how crufty the http code is getting. I realize that dealing with real servers is full of corner cases, but I wonder if it's an indication that the approach is not right.\n\nhttp://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttp://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/server.go#newcode580\nsrc/pkg/net/http/server.go:580: time.Sleep(250 * time.Millisecond)\nThis needs a comment.\n\nhttp://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/server.go#newcode680\nsrc/pkg/net/http/server.go:680: if w.requestBodyLimitHit {\nCall c.finalFlush here?\n\nhttp://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/transport.go#newcode653\nsrc/pkg/net/http/transport.go:653: // Write the request concurrently with waiting for a response,\nIt seems pretty heavy-weight to kick off a new goroutine to read every response, just to work around broken servers.  Can we avoid this?",
			"disapproval": false,
			"date": "2012-05-29 17:05:50.002391",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any alternative proposals?\r\n\r\nOn Tue, May 29, 2012 at 10:05 AM, <rsc@golang.org> wrote:\r\n\r\n> I'm sad about how crufty the http code is getting. I realize that\r\n> dealing with real servers is full of corner cases, but I wonder if it's\r\n> an indication that the approach is not right.\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6238043/diff/5002/src/pkg/net/**\r\n> http/server.go<http://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/server.go>\r\n> File src/pkg/net/http/server.go (right):\r\n>\r\n> http://codereview.appspot.com/**6238043/diff/5002/src/pkg/net/**\r\n> http/server.go#newcode580<http://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/server.go#newcode580>\r\n> src/pkg/net/http/server.go:**580: time.Sleep(250 * time.Millisecond)\r\n> This needs a comment.\r\n>\r\n> http://codereview.appspot.com/**6238043/diff/5002/src/pkg/net/**\r\n> http/server.go#newcode680<http://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/server.go#newcode680>\r\n> src/pkg/net/http/server.go:**680: if w.requestBodyLimitHit {\r\n> Call c.finalFlush here?\r\n>\r\n> http://codereview.appspot.com/**6238043/diff/5002/src/pkg/net/**\r\n> http/transport.go<http://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/transport.go>\r\n> File src/pkg/net/http/transport.go (right):\r\n>\r\n> http://codereview.appspot.com/**6238043/diff/5002/src/pkg/net/**\r\n> http/transport.go#newcode653<http://codereview.appspot.com/6238043/diff/5002/src/pkg/net/http/transport.go#newcode653>\r\n> src/pkg/net/http/transport.go:**653: // Write the request concurrently\r\n>\r\n> with waiting for a response,\r\n> It seems pretty heavy-weight to kick off a new goroutine to read every\r\n> response, just to work around broken servers.  Can we avoid this?\r\n>\r\n> http://codereview.appspot.com/**6238043/<http://codereview.appspot.com/6238043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:11:13.370621",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 1:11 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Any alternative proposals?\r\n\r\nDoes this case matter anymore, with the server changes?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:13:12.565347",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 1:12 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Does this case matter anymore, with the server changes?\r\n\r\nIf so, one possibility would be to have a persistent goroutine\r\nassociated with the connection whose only job is to write things. You\r\ncould send the write requests there. That would at least be a little\r\nnicer - especially more obviously serialized - than a new goroutine\r\neach time.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:17:01.605274",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 10:16 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Tue, May 29, 2012 at 1:12 PM, Russ Cox <rsc@golang.org> wrote:\r\n> > Does this case matter anymore, with the server changes?\r\n>\r\n> If so, one possibility would be to have a persistent goroutine\r\n> associated with the connection whose only job is to write things. You\r\n> could send the write requests there. That would at least be a little\r\n> nicer - especially more obviously serialized - than a new goroutine\r\n> each time.\r\n\r\n\r\nSure, that works.\r\n\r\nThe client change is required, even with the server part.\r\n\r\nI only did the server part in this CL because it's related and I needed to\r\ndo it in order to test the client.  But I could break out the server part\r\nseparately and submit that first if desired?\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:28:03.011459",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-29 21:48:55.323377",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-06-03 23:37:59.221880",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go#newcode625\nsrc/pkg/net/http/transport.go:625: wr.ch <- errors.New(\"http: can't write HTTP request on dead connection\")\ns/dead/broken/ ?",
			"disapproval": false,
			"date": "2012-06-18 15:39:42.903783",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure I really understand what's going on here anymore.\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go#newcode642\nsrc/pkg/net/http/transport.go:642: func (re responseAndError) ok() bool { return re.res != nil || re.err != nil }\nThis needs a comment. I would have expected that ok meant err == nil, for example. What is being tested here?",
			"disapproval": false,
			"date": "2012-06-19 04:13:38.293404",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go#newcode642\nsrc/pkg/net/http/transport.go:642: func (re responseAndError) ok() bool { return re.res != nil || re.err != nil }\nOn 2012/06/19 16:02:44, rsc wrote:\n> On 2012/06/19 04:38:40, adg wrote:\n> > On 2012/06/19 04:13:38, rsc wrote:\n> > > This needs a comment. I would have expected that ok meant err == nil, for\n> > > example. What is being tested here?\n> > \n> > Perhaps a better name is 'valid'. Although it might be clearer to just hoist\n> the\n> > function out into the for loop in which it is used. (it's not used anywhere\n> > else, is it?)\n> \n> maybe done?\n\nOr could invert it and named it like time.Time's IsZero().",
			"disapproval": false,
			"date": "2012-06-19 16:04:50.901723",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-19 16:16:50.955222",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go#newcode642\nsrc/pkg/net/http/transport.go:642: func (re responseAndError) ok() bool { return re.res != nil || re.err != nil }\nOn 2012/06/19 04:13:38, rsc wrote:\n> This needs a comment. I would have expected that ok meant err == nil, for\n> example. What is being tested here?\n\nPerhaps a better name is 'valid'. Although it might be clearer to just hoist the function out into the for loop in which it is used. (it's not used anywhere else, is it?)",
			"disapproval": false,
			"date": "2012-06-19 04:38:40.779425",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI understand this better on a big screen. :-)\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/6238043/diff/6005/src/pkg/net/http/transport.go#newcode642\nsrc/pkg/net/http/transport.go:642: func (re responseAndError) ok() bool { return re.res != nil || re.err != nil }\nOn 2012/06/19 04:38:40, adg wrote:\n> On 2012/06/19 04:13:38, rsc wrote:\n> > This needs a comment. I would have expected that ok meant err == nil, for\n> > example. What is being tested here?\n> \n> Perhaps a better name is 'valid'. Although it might be clearer to just hoist the\n> function out into the for loop in which it is used. (it's not used anywhere\n> else, is it?)\n\nmaybe done?",
			"disapproval": false,
			"date": "2012-06-19 16:02:44.706970",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-19 16:14:22.965785",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=305f67dc3f99 ***\n\nnet/http: make client await response concurrently with writing request\n\nIf the server replies with an HTTP response before we're done\nwriting our body (for instance \"401 Unauthorized\" response), we\nwere previously ignoring that, since we returned our write\nerror (\"broken pipe\", etc) before ever reading the response.\nNow we read and write at the same time.\n\nFixes issue 3595\n\nR=rsc, adg\nCC=golang-dev\nhttp://codereview.appspot.com/6238043",
			"disapproval": false,
			"date": "2012-06-19 16:20:46.129990",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6238043: net/http: make client await response concurrently with ...",
	"created": "2012-05-23 20:10:15.028735",
	"patchsets": [
		1,
		2001,
		5001,
		5002,
		6005,
		21001,
		24001,
		18002,
		26001
	],
	"modified": "2012-06-19 16:20:47.000566",
	"closed": true,
	"issue": 6238043
}