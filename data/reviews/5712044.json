{
	"description": "path/filepath: note that SplitList is different from strings.Split",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"bradfitz@golang.org",
		"gustavo@niemeyer.net"
	],
	"reviewers": [
		"r@google.com",
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-29 20:41:45.624900",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gustavo@niemeyer.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3ae1a805bc09 ***\n\npath/filepath: note that SplitList is different from strings.Split\n\nR=golang-dev, r, bradfitz, gustavo\nCC=golang-dev\nhttp://codereview.appspot.com/5712044",
			"disapproval": false,
			"date": "2012-02-29 20:50:49.430727",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 21:05,  <alex.brainman@gmail.com> wrote:\n> The reason behind of filepath.HasPrefix is that we can compare paths on\n> windows. Is file c:\\a\\b lives in directory C:\\a ? It does according to\n> Windows. We were using strings.HasPrefix before to answer that question,\n> and that was not acceptable. So I introduced filepath.HasPrefix so we\n> could do that check without care about GOOS.\n\nThat makes sense to me now; thanks.  As pointed out in the\nother CL, I think it works better to have a separate utility for\ncanonicalizing paths, so that instead of having special ops\nlike this one you can write\n\nstrings.HasPrefix(canonical(path1), canonical(path2))\n\nor even build more complex things, like HasSubdir.\n\nFor better or worse it appears that canonical is spelled EvalSymlinks.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-01 04:42:04.970912",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I started to write a comment about what it does that\nwould make clear when it makes sense to use\n(and equally important, when it doesn't), but I couldn't\ncome up with any times it makes sense.  Maybe we\nreally should delete it.\n\nThe strikes against it are:\n\n1. It does not take path boundaries into account.\n2. It assumes that Windows==case-insensitive file system\nand non-Windows==case-sensitive file system, neither of\nwhich is always true.\n3. Comparing ToLower against ToLower is not a correct\nimplementation of a case-insensitive string comparison.\n4. If it returns true on Windows you still don't know how long\nthe matching prefix is in bytes, so you can't compute what\nthe suffix is.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-29 20:59:11.111131",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 01/03/2012, at 7:50 AM, Russ Cox wrote:\n\n> I have no idea what the point of filepath.HasPrefix is.\n> If it was a month ago I would delete it.\n\nit could have a 'this is pointless' comment even now\n\n",
			"disapproval": false,
			"date": "2012-02-29 20:53:12.087606",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd never even noticed that function before.  My small vote says kill it.\n\nOn Wed, Feb 29, 2012 at 12:59 PM, Russ Cox <rsc@golang.org> wrote:\n\n> I started to write a comment about what it does that\n> would make clear when it makes sense to use\n> (and equally important, when it doesn't), but I couldn't\n> come up with any times it makes sense.  Maybe we\n> really should delete it.\n>\n> The strikes against it are:\n>\n> 1. It does not take path boundaries into account.\n> 2. It assumes that Windows==case-insensitive file system\n> and non-Windows==case-sensitive file system, neither of\n> which is always true.\n> 3. Comparing ToLower against ToLower is not a correct\n> implementation of a case-insensitive string comparison.\n> 4. If it returns true on Windows you still don't know how long\n> the matching prefix is in bytes, so you can't compute what\n> the suffix is.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2012-02-29 21:06:01.761294",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI guess asking for an Example here might not work too well with the \\-vs-/\ndifferences.\n\nOn Wed, Feb 29, 2012 at 12:35 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> path/filepath: note that SplitList is different from strings.Split\n>\n> Please review this at http://codereview.appspot.com/**5712044/<http://codereview.appspot.com/5712044/>\n>\n> Affected files:\n>  M src/pkg/path/filepath/path.go\n>\n>\n> Index: src/pkg/path/filepath/path.go\n> ==============================**==============================**=======\n> --- a/src/pkg/path/filepath/path.**go\n> +++ b/src/pkg/path/filepath/path.**go\n> @@ -139,6 +139,7 @@\n>\n>  // SplitList splits a list of paths joined by the OS-specific\n> ListSeparator,\n>  // usually found in PATH or GOPATH environment variables.\n> +// Unlike strings.Split, SplitList returns an empty slice when passed an\n> empty string.\n>  func SplitList(path string) []string {\n>        if path == \"\" {\n>                return []string{}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-29 20:42:19.875410",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have no idea what the point of filepath.HasPrefix is.\nIf it was a month ago I would delete it.\n",
			"disapproval": false,
			"date": "2012-02-29 20:50:16.672947",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-29 20:35:42.423592",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> path/filepath: note that SplitList is different from strings.Split\n\nOn a vaguely related note, is the behavior of filepath.HasPrefix\nintended?  I've been surprised before by the fact that it's just a\nwrapper for strings.HasPrefix in Linux/MacOS/etc. I was expecting\nsomething that took the path in consideration. For example, is\n\"/home/jo\" a file path prefix for \"/home/joe\"?  Is \"/home//joe\" not a\nprefix for \"/home/joe/src\"?  strings.HasPrefix felt counter-intuitive\nin both at first.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-02-29 20:43:42.559427",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 17:59, Russ Cox <rsc@golang.org> wrote:\n> I started to write a comment about what it does that\n> would make clear when it makes sense to use\n> (and equally important, when it doesn't), but I couldn't\n> come up with any times it makes sense. \u00a0Maybe we\n> really should delete it.\n\n+1.. its existence feels like a trap.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-02-29 21:07:35.669943",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"r@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gustavo@niemeyer.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/29 20:50:16, rsc wrote:\n> I have no idea what the point of filepath.HasPrefix is.\n\nThe reason behind of filepath.HasPrefix is that we can compare paths on windows. Is file c:\\a\\b lives in directory C:\\a ? It does according to Windows. We were using strings.HasPrefix before to answer that question, and that was not acceptable. So I introduced filepath.HasPrefix so we could do that check without care about GOOS.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-01 02:05:00.375732",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5712044: path/filepath: note that SplitList is different from st...",
	"created": "2012-02-29 20:35:31.204602",
	"patchsets": [
		1,
		1002,
		1003,
		7001
	],
	"modified": "2012-03-01 02:05:00.620046",
	"closed": true,
	"issue": 5712044
}