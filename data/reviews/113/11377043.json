{
	"description": "cmd/cgo: Fix issue with cgo cdefs\n\nThe problem is that the cdecl() function in cmd/cgo/godefs.go isn't\nproperly translating the Go array type to a C array type when an\nasterisk follows the [] in the array type declaration (it is perfectly\nlegal to put the asterisk on either side of the [] in go syntax,\ndepending on how you set up your pointers).\n\nThat said, the cdefs tool is only designed to translate from Go types\ngenerated using the cgo *godefs* tool -- where the godefs tool is\ndesigned to translate gcc-style C types into Go types. In essence, the\ncdefs tool translates from gcc-style C types to Go types (via the godefs\ntool), then back to kenc-style C types. Because of this, cdefs does not\nneed to know how to translate arbitraty Go types into C, just the ones\nproduced by godefs.\n\nThe problem is that during this translation process, the logic is\nslightly wrong when going from (e.g.):\n\nchar *array[10];\nto:\narray [10]*int8;\nback to:\nint8 *array[10];\n\nIn the current implementation of cdecl(), the translation from the Go\ntype declaration back to the kenc-style declaration looks for Go\ntypes of the form:\n\nname *[]type;\nrather than the actual generated Go type declaration of:\nname []*type;\n\nBoth are valid Go syntax, with slightly different semantics, but the\nlatter is the only one that can ever be generated by the godefs tools.\n(The semantics of the former are not directly expressible in a\nsingle C statement -- you would have to have to first typedef the array\ntype, then declare a pointer to that typedef'd type in a separate\nstatement).\n\nThis commit changes the logic of cdecl() to look properly for, and\ntranslate, Go type declarations of the form:\nname []*type;\n\nAdditionally, the original implementation only allowed for a single\nasterisk and a single sized aray (i.e. only a single level of pointer\nindirection, and only one set of []) on the type, whereas the patched\nversion allows for an arbitrary number of both.\n\nTests are included in misc/cgo/testcdefs and the all.bash script has been\nupdated to account for these.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "klueska@gmail.com",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: iant@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-16 18:52:29.853630",
			"approval": false
		},
		{
			"sender": "klueska@gmail.com",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/16 18:52:29, klueska wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:iant@golang.org),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nAdditionally, we should be looping over all the [x] elements as well in case of multi-dimensional arrays. Update submitted.\n\nKevin",
			"disapproval": false,
			"date": "2013-07-16 20:37:56.731660",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I guess cgo has no tests?\r\n\r\n\r\n\r\nOn Wed, Jul 17, 2013 at 4:52 AM, <klueska@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: iant@golang.org),\r\n>\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> cmd/cgo: Fix issue with cgo cdefs\r\n>\r\n> The problem is that the cdecl() function in cmd/cgo/godefs.go isn't\r\n> properly translating the Go array type to a C array type when an\r\n> asterisk follows the [] in the array type declaration (it is perfectly\r\n> legal to put the asterisk on either side of the [] in go syntax,\r\n> depending on how you set up your pointers).\r\n>\r\n> That said, the cdefs tool is only designed to translate from Go types\r\n> generated using the cgo *godefs* tool -- where the godefs tool is\r\n> designed to translate gcc-style C types into Go types. In essence, the\r\n> cdefs tool translates from gcc-style C types to Go types (via the godefs\r\n> tool), then back to kenc-style C types. Because of this, cdefs does not\r\n> need to know how to translate arbitraty Go types into C, just the ones\r\n> produced by godefs.\r\n>\r\n> The problem is that during this translation process, the logic is\r\n> slightly wrong when going from (e.g.):\r\n>\r\n> char *array[10];\r\n> to:\r\n> array [10]*int8;\r\n> back to:\r\n> int8 *array[10];\r\n>\r\n> In the current implementation of cdecl(), the translation from the Go\r\n> type declaration back to the kenc-style declaration looks for Go\r\n> types of the form:\r\n>\r\n> name *[]type;\r\n> rather than the actual generated Go type declaration of:\r\n> name []*type;\r\n>\r\n> Both are valid Go syntax, with slightly different semantics, but the\r\n> latter is the only one that can ever be generated by the godefs tools.\r\n> (The semantics of the former are not directly expressible in a\r\n> single C statement -- you would have to have to first typedef the array\r\n> type, then declare a pointer to that typedef'd type in a separate\r\n> statement).\r\n>\r\n> This commit changes the logic of cdecl() to look properly for, and\r\n> translate, Go type declarations of the form:\r\n> name []*type;\r\n>\r\n> Additionally, the original implementation only allowed for a single\r\n> asterisk (i.e. only a single level of pointer indirection) on the type,\r\n> whereas the patched version allows for an arbitrary number of\r\n> asterisks.\r\n>\r\n> Please review this at https://codereview.appspot.**com/11377043/<https://codereview.appspot.com/11377043/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/cgo/godefs.go\r\n>\r\n>\r\n> Index: src/cmd/cgo/godefs.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/cgo/godefs.go\r\n> +++ b/src/cmd/cgo/godefs.go\r\n> @@ -261,17 +261,17 @@\r\n>         if strings.HasPrefix(typ, \"*[0]\") {\r\n>                 typ = \"*void\"\r\n>         }\r\n> -       // X *byte -> *X byte\r\n> -       if strings.HasPrefix(typ, \"*\") {\r\n> -               name = \"*\" + name\r\n> -               typ = typ[1:]\r\n> -       }\r\n>         // X [4]byte -> X[4] byte\r\n>         if strings.HasPrefix(typ, \"[\") {\r\n>                 i := strings.Index(typ, \"]\") + 1\r\n>                 name = name + typ[:i]\r\n>                 typ = typ[i:]\r\n>         }\r\n> +       // X *byte -> *X byte\r\n> +       for strings.HasPrefix(typ, \"*\") {\r\n> +               name = \"*\" + name\r\n> +               typ = typ[1:]\r\n> +       }\r\n>         // X T -> T X\r\n>         // Handle the special case: 'unsafe.Pointer' is 'void *'\r\n>         if typ == \"unsafe.Pointer\" {\r\n>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-17 00:18:35.010200",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought we put the tests in misc/cgo/test\r\n\r\nOn Wed, Jul 17, 2013 at 10:18 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I guess cgo has no tests?\r\n>\r\n>\r\n>\r\n> On Wed, Jul 17, 2013 at 4:52 AM, <klueska@gmail.com> wrote:\r\n>>\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com (cc: iant@golang.org),\r\n>>\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> cmd/cgo: Fix issue with cgo cdefs\r\n>>\r\n>> The problem is that the cdecl() function in cmd/cgo/godefs.go isn't\r\n>> properly translating the Go array type to a C array type when an\r\n>> asterisk follows the [] in the array type declaration (it is perfectly\r\n>> legal to put the asterisk on either side of the [] in go syntax,\r\n>> depending on how you set up your pointers).\r\n>>\r\n>> That said, the cdefs tool is only designed to translate from Go types\r\n>> generated using the cgo *godefs* tool -- where the godefs tool is\r\n>> designed to translate gcc-style C types into Go types. In essence, the\r\n>> cdefs tool translates from gcc-style C types to Go types (via the godefs\r\n>> tool), then back to kenc-style C types. Because of this, cdefs does not\r\n>> need to know how to translate arbitraty Go types into C, just the ones\r\n>> produced by godefs.\r\n>>\r\n>> The problem is that during this translation process, the logic is\r\n>> slightly wrong when going from (e.g.):\r\n>>\r\n>> char *array[10];\r\n>> to:\r\n>> array [10]*int8;\r\n>> back to:\r\n>> int8 *array[10];\r\n>>\r\n>> In the current implementation of cdecl(), the translation from the Go\r\n>> type declaration back to the kenc-style declaration looks for Go\r\n>> types of the form:\r\n>>\r\n>> name *[]type;\r\n>> rather than the actual generated Go type declaration of:\r\n>> name []*type;\r\n>>\r\n>> Both are valid Go syntax, with slightly different semantics, but the\r\n>> latter is the only one that can ever be generated by the godefs tools.\r\n>> (The semantics of the former are not directly expressible in a\r\n>> single C statement -- you would have to have to first typedef the array\r\n>> type, then declare a pointer to that typedef'd type in a separate\r\n>> statement).\r\n>>\r\n>> This commit changes the logic of cdecl() to look properly for, and\r\n>> translate, Go type declarations of the form:\r\n>> name []*type;\r\n>>\r\n>> Additionally, the original implementation only allowed for a single\r\n>> asterisk (i.e. only a single level of pointer indirection) on the type,\r\n>> whereas the patched version allows for an arbitrary number of\r\n>> asterisks.\r\n>>\r\n>> Please review this at https://codereview.appspot.com/11377043/\r\n>>\r\n>> Affected files:\r\n>>   M src/cmd/cgo/godefs.go\r\n>>\r\n>>\r\n>> Index: src/cmd/cgo/godefs.go\r\n>> ===================================================================\r\n>> --- a/src/cmd/cgo/godefs.go\r\n>> +++ b/src/cmd/cgo/godefs.go\r\n>> @@ -261,17 +261,17 @@\r\n>>         if strings.HasPrefix(typ, \"*[0]\") {\r\n>>                 typ = \"*void\"\r\n>>         }\r\n>> -       // X *byte -> *X byte\r\n>> -       if strings.HasPrefix(typ, \"*\") {\r\n>> -               name = \"*\" + name\r\n>> -               typ = typ[1:]\r\n>> -       }\r\n>>         // X [4]byte -> X[4] byte\r\n>>         if strings.HasPrefix(typ, \"[\") {\r\n>>                 i := strings.Index(typ, \"]\") + 1\r\n>>                 name = name + typ[:i]\r\n>>                 typ = typ[i:]\r\n>>         }\r\n>> +       // X *byte -> *X byte\r\n>> +       for strings.HasPrefix(typ, \"*\") {\r\n>> +               name = \"*\" + name\r\n>> +               typ = typ[1:]\r\n>> +       }\r\n>>         // X T -> T X\r\n>>         // Handle the special case: 'unsafe.Pointer' is 'void *'\r\n>>         if typ == \"unsafe.Pointer\" {\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-17 00:48:33.034060",
			"approval": false
		},
		{
			"sender": "klueska@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There appear to be cgo tests in there, but nothing that tests the\r\noutput of the cdefs flag specifically\r\n(i.e. running 'grep -R cdefs ../misc/cgo/test/' returns nothing).\r\n\r\nKevin\r\n\r\nOn Tue, Jul 16, 2013 at 5:48 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> I thought we put the tests in misc/cgo/test\r\n>\r\n> On Wed, Jul 17, 2013 at 10:18 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>> I guess cgo has no tests?\r\n>>\r\n>>\r\n>>\r\n>> On Wed, Jul 17, 2013 at 4:52 AM, <klueska@gmail.com> wrote:\r\n>>>\r\n>>> Reviewers: golang-dev1,\r\n>>>\r\n>>> Message:\r\n>>> Hello golang-dev@googlegroups.com (cc: iant@golang.org),\r\n>>>\r\n>>>\r\n>>> I'd like you to review this change to\r\n>>> https://code.google.com/p/go\r\n>>>\r\n>>>\r\n>>> Description:\r\n>>> cmd/cgo: Fix issue with cgo cdefs\r\n>>>\r\n>>> The problem is that the cdecl() function in cmd/cgo/godefs.go isn't\r\n>>> properly translating the Go array type to a C array type when an\r\n>>> asterisk follows the [] in the array type declaration (it is perfectly\r\n>>> legal to put the asterisk on either side of the [] in go syntax,\r\n>>> depending on how you set up your pointers).\r\n>>>\r\n>>> That said, the cdefs tool is only designed to translate from Go types\r\n>>> generated using the cgo *godefs* tool -- where the godefs tool is\r\n>>> designed to translate gcc-style C types into Go types. In essence, the\r\n>>> cdefs tool translates from gcc-style C types to Go types (via the godefs\r\n>>> tool), then back to kenc-style C types. Because of this, cdefs does not\r\n>>> need to know how to translate arbitraty Go types into C, just the ones\r\n>>> produced by godefs.\r\n>>>\r\n>>> The problem is that during this translation process, the logic is\r\n>>> slightly wrong when going from (e.g.):\r\n>>>\r\n>>> char *array[10];\r\n>>> to:\r\n>>> array [10]*int8;\r\n>>> back to:\r\n>>> int8 *array[10];\r\n>>>\r\n>>> In the current implementation of cdecl(), the translation from the Go\r\n>>> type declaration back to the kenc-style declaration looks for Go\r\n>>> types of the form:\r\n>>>\r\n>>> name *[]type;\r\n>>> rather than the actual generated Go type declaration of:\r\n>>> name []*type;\r\n>>>\r\n>>> Both are valid Go syntax, with slightly different semantics, but the\r\n>>> latter is the only one that can ever be generated by the godefs tools.\r\n>>> (The semantics of the former are not directly expressible in a\r\n>>> single C statement -- you would have to have to first typedef the array\r\n>>> type, then declare a pointer to that typedef'd type in a separate\r\n>>> statement).\r\n>>>\r\n>>> This commit changes the logic of cdecl() to look properly for, and\r\n>>> translate, Go type declarations of the form:\r\n>>> name []*type;\r\n>>>\r\n>>> Additionally, the original implementation only allowed for a single\r\n>>> asterisk (i.e. only a single level of pointer indirection) on the type,\r\n>>> whereas the patched version allows for an arbitrary number of\r\n>>> asterisks.\r\n>>>\r\n>>> Please review this at https://codereview.appspot.com/11377043/\r\n>>>\r\n>>> Affected files:\r\n>>>   M src/cmd/cgo/godefs.go\r\n>>>\r\n>>>\r\n>>> Index: src/cmd/cgo/godefs.go\r\n>>> ===================================================================\r\n>>> --- a/src/cmd/cgo/godefs.go\r\n>>> +++ b/src/cmd/cgo/godefs.go\r\n>>> @@ -261,17 +261,17 @@\r\n>>>         if strings.HasPrefix(typ, \"*[0]\") {\r\n>>>                 typ = \"*void\"\r\n>>>         }\r\n>>> -       // X *byte -> *X byte\r\n>>> -       if strings.HasPrefix(typ, \"*\") {\r\n>>> -               name = \"*\" + name\r\n>>> -               typ = typ[1:]\r\n>>> -       }\r\n>>>         // X [4]byte -> X[4] byte\r\n>>>         if strings.HasPrefix(typ, \"[\") {\r\n>>>                 i := strings.Index(typ, \"]\") + 1\r\n>>>                 name = name + typ[:i]\r\n>>>                 typ = typ[i:]\r\n>>>         }\r\n>>> +       // X *byte -> *X byte\r\n>>> +       for strings.HasPrefix(typ, \"*\") {\r\n>>> +               name = \"*\" + name\r\n>>> +               typ = typ[1:]\r\n>>> +       }\r\n>>>         // X T -> T X\r\n>>>         // Handle the special case: 'unsafe.Pointer' is 'void *'\r\n>>>         if typ == \"unsafe.Pointer\" {\r\n>>>\r\n>>>\r\n>>>\r\n>>> --\r\n>>>\r\n>>> ---You received this message because you are subscribed to the Google\r\n>>> Groups \"golang-dev\" group.\r\n>>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>>\r\n>>>\r\n>>\r\n>> --\r\n>>\r\n>> ---\r\n>> You received this message because you are subscribed to the Google Groups\r\n>> \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n\r\n\r\n\r\n-- \r\n~Kevin\r\n",
			"disapproval": false,
			"date": "2013-07-17 00:52:13.773030",
			"approval": false
		},
		{
			"sender": "klueska@gmail.com",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've added some tests in misc/cgo/testcdefs that test this bug and verify it is fixed in the patch. I couldn't just add a new test case under misc/cgo/test because I need to manually run cgo with the -cdefs option and then test the output of that command by piping it to a file and including it in a c file before building.\n\nI tried to follow the style that the misc/cgo/testso folder uses in running a custom test script.  That said, I'm a first time contributor, so I may have done something non-conventional in terms of how things are normally done in this project.  If so, let me know, and I'm more than willing to fix it up.\n\nKevin\n\nOn 2013/07/17 00:52:13, klueska wrote:\n> There appear to be cgo tests in there, but nothing that tests the\n> output of the cdefs flag specifically\n> (i.e. running 'grep -R cdefs ../misc/cgo/test/' returns nothing).\n> \n> Kevin\n> \n> On Tue, Jul 16, 2013 at 5:48 PM, Dave Cheney <mailto:dave@cheney.net> wrote:\n> > I thought we put the tests in misc/cgo/test\n> >\n> > On Wed, Jul 17, 2013 at 10:18 AM, Brad Fitzpatrick <mailto:bradfitz@golang.org>\n> wrote:\n> >> I guess cgo has no tests?\n> >>\n> >>\n> >>\n> >> On Wed, Jul 17, 2013 at 4:52 AM, <mailto:klueska@gmail.com> wrote:\n> >>>\n> >>> Reviewers: golang-dev1,\n> >>>\n> >>> Message:\n> >>> Hello mailto:golang-dev@googlegroups.com (cc: mailto:iant@golang.org),\n> >>>\n> >>>\n> >>> I'd like you to review this change to\n> >>> https://code.google.com/p/go\n> >>>\n> >>>\n> >>> Description:\n> >>> cmd/cgo: Fix issue with cgo cdefs\n> >>>\n> >>> The problem is that the cdecl() function in cmd/cgo/godefs.go isn't\n> >>> properly translating the Go array type to a C array type when an\n> >>> asterisk follows the [] in the array type declaration (it is perfectly\n> >>> legal to put the asterisk on either side of the [] in go syntax,\n> >>> depending on how you set up your pointers).\n> >>>\n> >>> That said, the cdefs tool is only designed to translate from Go types\n> >>> generated using the cgo *godefs* tool -- where the godefs tool is\n> >>> designed to translate gcc-style C types into Go types. In essence, the\n> >>> cdefs tool translates from gcc-style C types to Go types (via the godefs\n> >>> tool), then back to kenc-style C types. Because of this, cdefs does not\n> >>> need to know how to translate arbitraty Go types into C, just the ones\n> >>> produced by godefs.\n> >>>\n> >>> The problem is that during this translation process, the logic is\n> >>> slightly wrong when going from (e.g.):\n> >>>\n> >>> char *array[10];\n> >>> to:\n> >>> array [10]*int8;\n> >>> back to:\n> >>> int8 *array[10];\n> >>>\n> >>> In the current implementation of cdecl(), the translation from the Go\n> >>> type declaration back to the kenc-style declaration looks for Go\n> >>> types of the form:\n> >>>\n> >>> name *[]type;\n> >>> rather than the actual generated Go type declaration of:\n> >>> name []*type;\n> >>>\n> >>> Both are valid Go syntax, with slightly different semantics, but the\n> >>> latter is the only one that can ever be generated by the godefs tools.\n> >>> (The semantics of the former are not directly expressible in a\n> >>> single C statement -- you would have to have to first typedef the array\n> >>> type, then declare a pointer to that typedef'd type in a separate\n> >>> statement).\n> >>>\n> >>> This commit changes the logic of cdecl() to look properly for, and\n> >>> translate, Go type declarations of the form:\n> >>> name []*type;\n> >>>\n> >>> Additionally, the original implementation only allowed for a single\n> >>> asterisk (i.e. only a single level of pointer indirection) on the type,\n> >>> whereas the patched version allows for an arbitrary number of\n> >>> asterisks.\n> >>>\n> >>> Please review this at https://codereview.appspot.com/11377043/\n> >>>\n> >>> Affected files:\n> >>>   M src/cmd/cgo/godefs.go\n> >>>\n> >>>\n> >>> Index: src/cmd/cgo/godefs.go\n> >>> ===================================================================\n> >>> --- a/src/cmd/cgo/godefs.go\n> >>> +++ b/src/cmd/cgo/godefs.go\n> >>> @@ -261,17 +261,17 @@\n> >>>         if strings.HasPrefix(typ, \"*[0]\") {\n> >>>                 typ = \"*void\"\n> >>>         }\n> >>> -       // X *byte -> *X byte\n> >>> -       if strings.HasPrefix(typ, \"*\") {\n> >>> -               name = \"*\" + name\n> >>> -               typ = typ[1:]\n> >>> -       }\n> >>>         // X [4]byte -> X[4] byte\n> >>>         if strings.HasPrefix(typ, \"[\") {\n> >>>                 i := strings.Index(typ, \"]\") + 1\n> >>>                 name = name + typ[:i]\n> >>>                 typ = typ[i:]\n> >>>         }\n> >>> +       // X *byte -> *X byte\n> >>> +       for strings.HasPrefix(typ, \"*\") {\n> >>> +               name = \"*\" + name\n> >>> +               typ = typ[1:]\n> >>> +       }\n> >>>         // X T -> T X\n> >>>         // Handle the special case: 'unsafe.Pointer' is 'void *'\n> >>>         if typ == \"unsafe.Pointer\" {\n> >>>\n> >>>\n> >>>\n> >>> --\n> >>>\n> >>> ---You received this message because you are subscribed to the Google\n> >>> Groups \"golang-dev\" group.\n> >>> To unsubscribe from this group and stop receiving emails from it, send an\n> >>> email to mailto:golang-dev+unsubscribe@googlegroups.com.\n> >>> For more options, visit https://groups.google.com/groups/opt_out.\n> >>>\n> >>>\n> >>\n> >> --\n> >>\n> >> ---\n> >> You received this message because you are subscribed to the Google Groups\n> >> \"golang-dev\" group.\n> >> To unsubscribe from this group and stop receiving emails from it, send an\n> >> email to mailto:golang-dev+unsubscribe@googlegroups.com.\n> >> For more options, visit https://groups.google.com/groups/opt_out.\n> >>\n> >>\n> \n> \n> \n> -- \n> ~Kevin",
			"disapproval": false,
			"date": "2013-07-17 21:28:23.071710",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=iant",
			"disapproval": false,
			"date": "2013-07-23 16:35:50.805000",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you verify that the generated files like pkg/runtime/defs_linux_amd64.h are not changed by this?\n\nhttps://codereview.appspot.com/11377043/diff/18001/misc/cgo/testcdefs/issue11377043.c\nFile misc/cgo/testcdefs/issue11377043.c (right):\n\nhttps://codereview.appspot.com/11377043/diff/18001/misc/cgo/testcdefs/issue11377043.c#newcode1\nmisc/cgo/testcdefs/issue11377043.c:1: // Copyright 2012 The Go Authors.  All rights reserved.\ns/2012/2013/\n\nhttps://codereview.appspot.com/11377043/diff/18001/misc/cgo/testcdefs/issue11377043.c#newcode6\nmisc/cgo/testcdefs/issue11377043.c:6: #include \"issue11377043.h\"\nThe issueNNNN naming refers to issue numbers at http://code.google.com/p/go/issues.  It doesn't make to use the same naming to revert to a CL number at http://codereview.appspot.com.",
			"disapproval": false,
			"date": "2013-07-24 18:54:38.951470",
			"approval": false
		},
		{
			"sender": "klueska@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have verified this for linux-386 and linux-amd64.  Running the\r\nfollowing script from $GOROOT/src returns nothing.\r\n\r\ncd pkg/runtime\r\ndiff <(GOARCH=amd64 ../../../bin/go tool cgo -cdefs defs_linux.go\r\ndefs1_linux.go) defs_linux_amd64.h\r\ndiff <(GOARCH=386 ../../../bin/go tool cgo -cdefs defs2_linux.go)\r\ndefs_linux_386.h\r\ncd - > /dev/null\r\n\r\nKevin\r\n\r\nOn Wed, Jul 24, 2013 at 11:54 AM,  <iant@golang.org> wrote:\r\n> Can you verify that the generated files like\r\n> pkg/runtime/defs_linux_amd64.h are not changed by this?\r\n>\r\n>\r\n> https://codereview.appspot.com/11377043/diff/18001/misc/cgo/testcdefs/issue11377043.c\r\n> File misc/cgo/testcdefs/issue11377043.c (right):\r\n>\r\n> https://codereview.appspot.com/11377043/diff/18001/misc/cgo/testcdefs/issue11377043.c#newcode1\r\n> misc/cgo/testcdefs/issue11377043.c:1: // Copyright 2012 The Go Authors.\r\n> All rights reserved.\r\n> s/2012/2013/\r\n>\r\n> https://codereview.appspot.com/11377043/diff/18001/misc/cgo/testcdefs/issue11377043.c#newcode6\r\n> misc/cgo/testcdefs/issue11377043.c:6: #include \"issue11377043.h\"\r\n> The issueNNNN naming refers to issue numbers at\r\n> http://code.google.com/p/go/issues.  It doesn't make to use the same\r\n> naming to revert to a CL number at http://codereview.appspot.com.\r\n>\r\n> https://codereview.appspot.com/11377043/\r\n\r\n\r\n\r\n--\r\n~Kevin\r\n",
			"disapproval": false,
			"date": "2013-07-24 21:04:11.725270",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good.  Have you signed at the CLA as described near the end of http://golang.org/doc/contribute.html ?",
			"disapproval": false,
			"date": "2013-07-24 22:37:03.233080",
			"approval": false
		},
		{
			"sender": "klueska@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I just signed and submitted the individual contributors form.\r\n\r\n\r\nOn Wed, Jul 24, 2013 at 3:37 PM,  <iant@golang.org> wrote:\r\n> Looks good.  Have you signed at the CLA as described near the end of\r\n> http://golang.org/doc/contribute.html ?\r\n>\r\n>\r\n> https://codereview.appspot.com/11377043/\r\n\r\n\r\n\r\n-- \r\n~Kevin\r\n",
			"disapproval": false,
			"date": "2013-07-24 23:09:59.215980",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-25 00:27:12.917000",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"klueska@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c8e02f321281 ***\n\ncmd/cgo: Fix issue with cgo cdefs\n\nThe problem is that the cdecl() function in cmd/cgo/godefs.go isn't\nproperly translating the Go array type to a C array type when an\nasterisk follows the [] in the array type declaration (it is perfectly\nlegal to put the asterisk on either side of the [] in go syntax,\ndepending on how you set up your pointers).\n\nThat said, the cdefs tool is only designed to translate from Go types\ngenerated using the cgo *godefs* tool -- where the godefs tool is\ndesigned to translate gcc-style C types into Go types. In essence, the\ncdefs tool translates from gcc-style C types to Go types (via the godefs\ntool), then back to kenc-style C types. Because of this, cdefs does not\nneed to know how to translate arbitraty Go types into C, just the ones\nproduced by godefs.\n\nThe problem is that during this translation process, the logic is\nslightly wrong when going from (e.g.):\n\nchar *array[10];\nto:\narray [10]*int8;\nback to:\nint8 *array[10];\n\nIn the current implementation of cdecl(), the translation from the Go\ntype declaration back to the kenc-style declaration looks for Go\ntypes of the form:\n\nname *[]type;\nrather than the actual generated Go type declaration of:\nname []*type;\n\nBoth are valid Go syntax, with slightly different semantics, but the\nlatter is the only one that can ever be generated by the godefs tools.\n(The semantics of the former are not directly expressible in a\nsingle C statement -- you would have to have to first typedef the array\ntype, then declare a pointer to that typedef'd type in a separate\nstatement).\n\nThis commit changes the logic of cdecl() to look properly for, and\ntranslate, Go type declarations of the form:\nname []*type;\n\nAdditionally, the original implementation only allowed for a single\nasterisk and a single sized aray (i.e. only a single level of pointer\nindirection, and only one set of []) on the type, whereas the patched\nversion allows for an arbitrary number of both.\n\nTests are included in misc/cgo/testcdefs and the all.bash script has been\nupdated to account for these.\n\nR=golang-dev, bradfitz, dave, iant\nCC=golang-dev\nhttps://codereview.appspot.com/11377043\n\nCommitter: Ian Lance Taylor <iant@golang.org>",
			"disapproval": false,
			"date": "2013-07-25 00:27:48.892340",
			"approval": false
		}
	],
	"owner_email": "klueska@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "klueska",
	"subject": "code review 11377043: cmd/cgo: Fix issue with cgo cdefs",
	"created": "2013-07-16 18:50:12.535860",
	"patchsets": [
		1,
		3001,
		5001,
		8001,
		18001,
		26001
	],
	"modified": "2013-07-25 00:27:49.209700",
	"closed": false,
	"issue": 11377043
}