{
	"description": "go.tools/go/types: Method sets for all types\n\n- fixed method set computation\n- lazily compute it for a type on demand\n- lazy allocation of various temporary maps\n\nAlso:\n- removed Interface.IsEmpty, Scope.IsEmpty\n  (these convenience functions didn't carry their weight)\n- cosmetic changes\n\nNext:\n- consolidate various lookup APIs\n- use lazily computed method sets for various checks\n  instead of individual lookups",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adonovan@google.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-16 23:07:15.364950",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-17 00:54:29.958930",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice, LGTM.\n\nYou'll need to use sync.Once when initializing the method-sets lazily to ensure that the (apparently) read-only accessors are thread-safe.\n\nI'll make the necessary SSA fixes tomorrow.\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go\nFile go/types/methodset.go (right):\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode17\ngo/types/methodset.go:17: // A Method represents a method of a method set.\nConcrete, abstract, or either?\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode26\ngo/types/methodset.go:26: // It always matches the type of the method set containing m.\nEven for interface methods?\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode29\ngo/types/methodset.go:29: // Index describes the path to the concrete (possibly embedded)\nFor an abstract method, what is the concrete function?  Is what SSA calls the \"interface method wrapper\"?\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode34\ngo/types/methodset.go:34: // Indirect reports whether any pointer indirections where\ns/where/were/\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode272\ngo/types/methodset.go:272: func isPtrRecv(f *Func) bool {\ns/is/has/ ?\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go#newcode17\ngo/types/types.go:17: // MethodSet returns the method set of a type.\nYou should specify what you can expect to find in the methof set for a concrete type vs. an interface.\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go#newcode378\ngo/types/types.go:378: t.mset = NewMethodSet(t)\nThis is not thread-safe.  Ditto below.",
			"disapproval": false,
			"date": "2013-07-17 01:42:09.847840",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go\nFile go/types/methodset.go (right):\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode17\ngo/types/methodset.go:17: // A Method represents a method of a method set.\nOn 2013/07/17 01:42:10, adonovan wrote:\n> Concrete, abstract, or either?\n\nEither for now. Need to think about whether it makes sense to split concrete and abstract (interface) methods.\n\nDocumented.\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode26\ngo/types/methodset.go:26: // It always matches the type of the method set containing m.\nOn 2013/07/17 01:42:10, adonovan wrote:\n> Even for interface methods?\n\nyes - for now\n\nclarified\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode29\ngo/types/methodset.go:29: // Index describes the path to the concrete (possibly embedded)\nOn 2013/07/17 01:42:10, adonovan wrote:\n> For an abstract method, what is the concrete function?  Is what SSA calls the\n> \"interface method wrapper\"?\n\nIt's the function in the interface. Documented.\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode34\ngo/types/methodset.go:34: // Indirect reports whether any pointer indirections where\nOn 2013/07/17 01:42:10, adonovan wrote:\n> s/where/were/\n\nDone.\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/methodset.go#newcode272\ngo/types/methodset.go:272: func isPtrRecv(f *Func) bool {\nOn 2013/07/17 01:42:10, adonovan wrote:\n> s/is/has/ ?\n\nfixed\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go#newcode17\ngo/types/types.go:17: // MethodSet returns the method set of a type.\nOn 2013/07/17 01:42:10, adonovan wrote:\n> You should specify what you can expect to find in the methof set for a concrete\n> type vs. an interface.\n\nDescribed in MethodSet. Eventually this deserves more commentary, but details may change for now.\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go#newcode378\ngo/types/types.go:378: t.mset = NewMethodSet(t)\nOn 2013/07/17 01:42:10, adonovan wrote:\n> This is not thread-safe.  Ditto below.\n\nwell, it kinda is... - it's unlikely that a pointer is not written atomically, and if there's a race between the if and the assignment, it doesn't matter (the method set will just be computed multiple times).\n\nbut yes, i added sync.",
			"disapproval": false,
			"date": "2013-07-17 05:14:41.897880",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4cf06e991bbd&repo=tools ***\n\ngo.tools/go/types: Method sets for all types\n\n- fixed method set computation\n- lazily compute it for a type on demand\n- lazy allocation of various temporary maps\n\nAlso:\n- removed Interface.IsEmpty, Scope.IsEmpty\n  (these convenience functions didn't carry their weight)\n- cosmetic changes\n\nNext:\n- consolidate various lookup APIs\n- use lazily computed method sets for various checks\n  instead of individual lookups\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/11385044",
			"disapproval": false,
			"date": "2013-07-17 05:18:18.223710",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11385044/diff/24001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go#newcode378\ngo/types/types.go:378: t.mset = NewMethodSet(t)\nOn 2013/07/17 05:14:42, gri wrote:\n> On 2013/07/17 01:42:10, adonovan wrote:\n> > This is not thread-safe.  Ditto below.\n> \n> well, it kinda is... - it's unlikely that a pointer is not written atomically,\n> and if there's a race between the if and the assignment, it doesn't matter (the\n> method set will just be computed multiple times).\n\nPointers are always written atomically, but that's not the danger: on an out-of-order architecture, there's no guarantee that the stores occurring inside NewMethodSet have completed before you publish the address of the new object.  So you need some kind of synchronization to ensure that they \"happen before\" another thread gets a pointer to them.",
			"disapproval": false,
			"date": "2013-07-17 12:39:46.202780",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11385044/diff/24001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/11385044/diff/24001/go/types/types.go#newcode378\ngo/types/types.go:378: t.mset = NewMethodSet(t)\nOn 2013/07/17 12:39:46, adonovan wrote:\n> On 2013/07/17 05:14:42, gri wrote:\n> > On 2013/07/17 01:42:10, adonovan wrote:\n> > > This is not thread-safe.  Ditto below.\n> > \n> > well, it kinda is... - it's unlikely that a pointer is not written atomically,\n> > and if there's a race between the if and the assignment, it doesn't matter\n> (the\n> > method set will just be computed multiple times).\n> \n> Pointers are always written atomically, but that's not the danger: on an\n> out-of-order architecture, there's no guarantee that the stores occurring inside\n> NewMethodSet have completed before you publish the address of the new object. \n> So you need some kind of synchronization to ensure that they \"happen before\"\n> another thread gets a pointer to them.\n\nFair enough but even less likely in practice, I suspect. Anyway, synchronization is now there.",
			"disapproval": false,
			"date": "2013-07-17 15:49:16.183750",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 17 July 2013 11:49, <gri@golang.org> wrote:\r\n\r\n> Fair enough but even less likely in practice, I suspect.\r\n>\r\n\r\nAll the more reason not to put data races in your code. :)\r\n",
			"disapproval": false,
			"date": "2013-07-17 16:22:26.675700",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11385044: go.tools/go/types: Method sets for all types",
	"created": "2013-07-16 21:38:12.264490",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		12001,
		16001,
		19001,
		20011,
		24001,
		34001,
		37001
	],
	"modified": "2013-07-17 16:22:26.716780",
	"closed": true,
	"issue": 11385044
}