{
	"description": "strconv: make malloc tests more reliable\n\nFixes issue 3495.\n\nI adapted fmt.TestCountMallocs to fix the\nexisting tests. As the resulting tests did not\nappear to belong to either itoa or ftoa I moved\nthem into their own file.",
	"cc": [
		"bradfitz@golang.org",
		"fullung@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-04-10 13:20:47.299919",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-10 13:18:34.738236",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fullung, would you be able to hit this with the old GOMAXPROC=62 and\nsee if anything shakes loose ?\n\nOn Tue, Apr 10, 2012 at 11:20 PM,  <bradfitz@golang.org> wrote:\n> LGTM\n>\n> http://codereview.appspot.com/5985072/\n",
			"disapproval": false,
			"date": "2012-04-10 13:24:47.835685",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-10 09:34:16.074000",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "could you keep the aspirational comments?\n\nOn Tue, Apr 10, 2012 at 2:34 AM, <dave@cheney.net> wrote:\n\n> Reviewers: bradfitz, albert.strasheim,\n>\n> Message:\n> Hello bradfitz@golang.org, fullung@gmail.com (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> strconv: make malloc tests more reliable\n>\n> Fixes issue 3495.\n>\n> I adapted fmt.TestCountMallocs to fix the\n> existing tests. As the resulting tests did not\n> appear to belong to either itoa or ftoa I moved\n> them into their own file.\n>\n> Please review this at http://codereview.appspot.com/**5985072/<http://codereview.appspot.com/5985072/>\n>\n> Affected files:\n>  M src/pkg/strconv/ftoa_test.go\n>  M src/pkg/strconv/itoa_test.go\n>  A src/pkg/strconv/strconv_test.**go\n>\n>\n> Index: src/pkg/strconv/ftoa_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/strconv/ftoa_test.go\n> +++ b/src/pkg/strconv/ftoa_test.go\n> @@ -173,23 +173,6 @@\n>        }\n>  }\n>\n> -func TestAppendFloatDoesntAllocate(**t *testing.T) {\n> -       n := numAllocations(func() {\n> -               var buf [64]byte\n> -               AppendFloat(buf[:0], 1.23, 'g', 5, 64)\n> -       })\n> -       want := 1 // TODO(bradfitz): this might be 0, once escape analysis\n> is better\n> -       if n != want {\n> -               t.Errorf(\"with local buffer, did %d allocations, want %d\",\n> n, want)\n> -       }\n> -       n = numAllocations(func() {\n> -               AppendFloat(globalBuf[:0], 1.23, 'g', 5, 64)\n> -       })\n> -       if n != 0 {\n> -               t.Errorf(\"with reused buffer, did %d allocations, want 0\",\n> n)\n> -       }\n> -}\n> -\n>  func BenchmarkFormatFloatDecimal(b *testing.B) {\n>        for i := 0; i < b.N; i++ {\n>                FormatFloat(33909, 'g', -1, 64)\n> Index: src/pkg/strconv/itoa_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/strconv/itoa_test.go\n> +++ b/src/pkg/strconv/itoa_test.go\n> @@ -5,7 +5,6 @@\n>  package strconv_test\n>\n>  import (\n> -       \"runtime\"\n>        . \"strconv\"\n>        \"testing\"\n>  )\n> @@ -126,35 +125,6 @@\n>        }\n>  }\n>\n> -func numAllocations(f func()) int {\n> -       runtime.GC()\n> -       memstats := new(runtime.MemStats)\n> -       runtime.ReadMemStats(memstats)\n> -       n0 := memstats.Mallocs\n> -       f()\n> -       runtime.ReadMemStats(memstats)\n> -       return int(memstats.Mallocs - n0)\n> -}\n> -\n> -var globalBuf [64]byte\n> -\n> -func TestAppendUintDoesntAllocate(t *testing.T) {\n> -       n := numAllocations(func() {\n> -               var buf [64]byte\n> -               AppendInt(buf[:0], 123, 10)\n> -       })\n> -       want := 1 // TODO(bradfitz): this might be 0, once escape analysis\n> is better\n> -       if n != want {\n> -               t.Errorf(\"with local buffer, did %d allocations, want %d\",\n> n, want)\n> -       }\n> -       n = numAllocations(func() {\n> -               AppendInt(globalBuf[:0], 123, 10)\n> -       })\n> -       if n != 0 {\n> -               t.Errorf(\"with reused buffer, did %d allocations, want 0\",\n> n)\n> -       }\n> -}\n> -\n>  func BenchmarkFormatInt(b *testing.B) {\n>        for i := 0; i < b.N; i++ {\n>                for _, test := range itob64tests {\n> Index: src/pkg/strconv/strconv_test.**go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/src/pkg/strconv/strconv_**test.go\n> @@ -0,0 +1,50 @@\n> +// Copyright 2012 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +package strconv_test\n> +\n> +import (\n> +       \"runtime\"\n> +       . \"strconv\"\n> +       \"testing\"\n> +)\n> +\n> +var (\n> +       globalBuf [64]byte\n> +\n> +       mallocTest = []struct {\n> +               count int\n> +               desc  string\n> +               fn    func()\n> +       }{\n> +               {1, `AppendInt(localBuf[:0], 123, 10)`, func() {\n> +                       var localBuf [64]byte\n> +                       AppendInt(localBuf[:0], 123, 10)\n> +               }},\n> +               {0, `AppendInt(globalBuf[:0], 123, 10)`, func() {\n> AppendInt(globalBuf[:0], 123, 10) }},\n> +\n> +               {1, `AppendFloat(localBuf[:0], 1.23, 'g', 5, 64)`, func() {\n> +                       var localBuf [64]byte\n> +                       AppendFloat(localBuf[:0], 1.23, 'g', 5, 64)\n> +               }},\n> +               {0, `AppendFloat(globalBuf[:0], 1.23, 'g', 5, 64)`, func()\n> { AppendFloat(globalBuf[:0], 1.23, 'g', 5, 64) }},\n> +       }\n> +)\n> +\n> +func TestCountMallocs(t *testing.T) {\n> +       for _, mt := range mallocTest {\n> +               const N = 100\n> +               memstats := new(runtime.MemStats)\n> +               runtime.ReadMemStats(memstats)\n> +               mallocs := 0 - memstats.Mallocs\n> +               for i := 0; i < N; i++ {\n> +                       mt.fn()\n> +               }\n> +               runtime.ReadMemStats(memstats)\n> +               mallocs += memstats.Mallocs\n> +               if mallocs/N > uint64(mt.count) {\n> +                       t.Errorf(\"%s: expected %d mallocs, got %d\",\n> mt.desc, mt.count, mallocs/N)\n> +               }\n> +       }\n> +}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-04-10 12:39:59.998532",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI gave it a bit of the ole\n\n#!/bin/bash\nset -xe\nwhile true; do\nGOMAXPROCS=$[ 1 + $[ RANDOM % 100 ]] ./strconv.test -test.v\nGOMAXPROCS=$[ 1 + $[ RANDOM % 100 ]] ./strconv.test -test.v -test.run=TestCountMallocs\ndone\n\nOn 2012/04/10 13:24:47, dfc wrote:\n> Fullung, would you be able to hit this with the old GOMAXPROC=62 and\n> see if anything shakes loose ?\n> \n> On Tue, Apr 10, 2012 at 11:20 PM,  <mailto:bradfitz@golang.org> wrote:\n> > LGTM\n> >\n> > http://codereview.appspot.com/5985072/",
			"disapproval": false,
			"date": "2012-04-10 14:43:56.470061",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0324cadd9b98 ***\n\nstrconv: make malloc tests more reliable\n\nFixes issue 3495.\n\nI adapted fmt.TestCountMallocs to fix the\nexisting tests. As the resulting tests did not\nappear to belong to either itoa or ftoa I moved\nthem into their own file.\n\nR=bradfitz, fullung\nCC=golang-dev\nhttp://codereview.appspot.com/5985072",
			"disapproval": false,
			"date": "2012-04-14 11:34:24.763292",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5985072: strconv: make malloc tests more reliable",
	"created": "2012-04-10 09:25:37.487116",
	"patchsets": [
		1,
		3,
		4001,
		3004,
		4004,
		5004,
		9001
	],
	"modified": "2012-04-17 09:05:05.333647",
	"closed": true,
	"issue": 5985072
}