{
	"description": "encoding/gob: consistently use unsafe.Pointer for pointer values\n\nFixes issue 5621.",
	"cc": [
		"golang-dev@googlegroups.com",
		"cshapiro@google.com",
		"r@golang.org",
		"fullung@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-04 00:01:42.216600",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure this fixes issue 5621, it needs testing.",
			"disapproval": false,
			"date": "2013-06-04 00:02:30.261310",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9988043/diff/1/src/pkg/encoding/gob/encode.go\nFile src/pkg/encoding/gob/encode.go (right):\n\nhttps://codereview.appspot.com/9988043/diff/1/src/pkg/encoding/gob/encode.go#newcode376\nsrc/pkg/encoding/gob/encode.go:376: func (enc *Encoder) encodeArray(b *bytes.Buffer, p uintptr, op encOp, elemWid uintptr, elemIndir int, length int) {\nI think p needs to be converted to an unsafe.Pointer as well.",
			"disapproval": false,
			"date": "2013-06-04 00:12:18.073710",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9988043/diff/1/src/pkg/encoding/gob/encode.go\nFile src/pkg/encoding/gob/encode.go (right):\n\nhttps://codereview.appspot.com/9988043/diff/1/src/pkg/encoding/gob/encode.go#newcode376\nsrc/pkg/encoding/gob/encode.go:376: func (enc *Encoder) encodeArray(b *bytes.Buffer, p uintptr, op encOp, elemWid uintptr, elemIndir int, length int) {\nOn 2013/06/04 00:12:18, cshapiro1 wrote:\n> I think p needs to be converted to an unsafe.Pointer as well.\n\ni think so too",
			"disapproval": false,
			"date": "2013-06-04 00:24:54.835370",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/04 00:12:18, cshapiro1 wrote:\n> https://codereview.appspot.com/9988043/diff/1/src/pkg/encoding/gob/encode.go\n> File src/pkg/encoding/gob/encode.go (right):\n> \n> https://codereview.appspot.com/9988043/diff/1/src/pkg/encoding/gob/encode.go#newcode376\n> src/pkg/encoding/gob/encode.go:376: func (enc *Encoder) encodeArray(b\n> *bytes.Buffer, p uintptr, op encOp, elemWid uintptr, elemIndir int, length int)\n> {\n> I think p needs to be converted to an unsafe.Pointer as well.\n\n\nDone.\n\nIan",
			"disapproval": false,
			"date": "2013-06-04 05:46:33.958290",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"r@golang.org",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn 2013/06/04 00:02:30, iant wrote:\n> I'm not sure this fixes issue 5621, it needs testing.\n\nTest passes with the latest patch.\n\nCould someone explain a bit more about what this bug is? If it happened in gob, I'm guessing we've made this mistake in at least one place in our codebase.\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2013-06-04 06:38:31.250410",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"r@golang.org",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-04 10:30:55.414940",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"r@golang.org",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/04 06:38:31, albert.strasheim wrote:\n> \n> Could someone explain a bit more about what this bug is? If it happened in gob,\n> I'm guessing we've made this mistake in at least one place in our codebase.\n\nThe bug arises because Carl has improved the GC so that it does precise tracking of function arguments.  That means that if there is a function pointer that holds a pointer value, but does not have a pointer type, that the GC will not see the reference to the memory.  The encoding/gob package was making this mistake: it was holding pointer values in function arguments with the type uintptr.  This patch changes those to unsafe.Pointer, so that the GC can see that they are pointers.\n\nSo this problem can arise in packages that import unsafe, use unsafe pointers, and then convert those unsafe pointers to uintptr and pass them around.\n\nIn later patches this is going to be come an issue with local variables as well.\n\nIan",
			"disapproval": false,
			"date": "2013-06-04 13:20:34.314110",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"r@golang.org",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=962719c554c4 ***\n\nencoding/gob: consistently use unsafe.Pointer for pointer values\n\nFixes issue 5621.\n\nR=golang-dev, cshapiro, r, fullung\nCC=golang-dev\nhttps://codereview.appspot.com/9988043",
			"disapproval": false,
			"date": "2013-06-04 13:21:03.152440",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 9988043: encoding/gob: consistently use unsafe.Pointer for point...",
	"created": "2013-06-04 00:01:30.479910",
	"patchsets": [
		1,
		7001,
		14001
	],
	"modified": "2013-06-04 13:21:05.217460",
	"closed": true,
	"issue": 9988043
}