{
	"description": "encoding/json: improve performance of Unmarshal on primitive types\n\nSkip most of the scanning and parsing logic for simple (non-object/array) JSON values.\n\nbenchmark                   old ns/op    new ns/op    delta\nBenchmarkUnmarshalInt             948          436  -54.01%\nBenchmarkUnmarshalUint            930          427  -54.09%\nBenchmarkUnmarshalString         1407          715  -49.18%\nBenchmarkUnmarshalFloat          1114          536  -51.89%\nBenchmarkUnmarshalBool            759          266  -64.95%\nBenchmarkUnmarshalStruct         8165         8181   +0.20%\n\nNo significant effects on the go1 benchmarks:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    9647362752   9596196417   -0.53%\nBenchmarkFannkuch11      5623613048   5518694872   -1.87%\nBenchmarkGobDecode         32944041     33165434   +0.67%\nBenchmarkGobEncode         21237482     21080554   -0.74%\nBenchmarkGzip             750955920    749861980   -0.15%\nBenchmarkGunzip           197369742    197886192   +0.26%\nBenchmarkJSONEncode        79274091     78891137   -0.48%\nBenchmarkJSONDecode       180257802    175280358   -2.76%\nBenchmarkMandelbrot200      7396666      7388266   -0.11%\nBenchmarkParse             11446460     11386550   -0.52%\nBenchmarkRevcomp         1605152523   1599512029   -0.35%\nBenchmarkTemplate         204538247    207765574   +1.58%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            23.30        23.14    0.99x\nBenchmarkGobEncode            36.14        36.41    1.01x\nBenchmarkGzip                 25.84        25.88    1.00x\nBenchmarkGunzip               98.32        98.06    1.00x\nBenchmarkJSONEncode           24.48        24.60    1.00x\nBenchmarkJSONDecode           10.76        11.07    1.03x\nBenchmarkParse                 5.06         5.09    1.01x\nBenchmarkRevcomp             158.34       158.90    1.00x\nBenchmarkTemplate              9.49         9.34    0.98x\n\nFixes issue 3949.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"bradfitz@golang.org",
		"timo@gatso-one.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-05 06:21:40.797880",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go#newcode60\nsrc/pkg/encoding/json/decode.go:60: if first > ' ' {\nAn error will still be created on line 687 (in literalStore) because the value is not a number. I ran a test with this case and it still failed with the same error as v1.0.\n\nOn 2013/01/09 23:16:39, bradfitz wrote:\n> this means you'll now accept this:\n> \n> \tvar v int\n> \terr := json.Unmarshal([]byte(\"\\x01 42\"), &v)\n> \n> which is currently rejected: http://play.golang.org/p/VGUk3tGr3K\n>",
			"disapproval": false,
			"date": "2013-01-10 00:25:56.129350",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks for the new tests.\n\nhttps://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go#newcode59\nsrc/pkg/encoding/json/decode.go:59: var c byte\ndrop this variable?",
			"disapproval": false,
			"date": "2013-01-10 20:36:05.430390",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Awesome, can you also run a before/after for $GOROOT/test/bench/go1 ?\n\nhttps://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go#newcode58\nsrc/pkg/encoding/json/decode.go:58: for i := 0; i < len(data); i++ {\nwhat about\n\nfor _, c := range data {\n    first = c\n    if first > ' ' { \n       break\n    }\n}\n\nto avoid the range check",
			"disapproval": false,
			"date": "2013-01-05 06:25:47.313260",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI did notice that cases with legitimate whitespace would throw an error and fixed that.\n\nI also added tests for ignoring whitespace and having errors on control characters.\n\nThanks.",
			"disapproval": false,
			"date": "2013-01-10 01:38:26.010960",
			"approval": false
		},
		{
			"sender": "timo@gatso-one.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"timo@gatso-one.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very sorry, left my computer unlocked with 14 yr old around ... will not happen again.\nDidn't mean to post to this thread at all, I am not involved with Go development.\n\nps suggestion is flawed (first should be c).",
			"disapproval": false,
			"date": "2013-01-10 22:25:21.280650",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"timo@gatso-one.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go#newcode59\nsrc/pkg/encoding/json/decode.go:59: var c byte\nOn 2013/01/10 20:36:05, bradfitz wrote:\n> drop this variable?\n\nDone.",
			"disapproval": false,
			"date": "2013-01-10 22:50:50.305180",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI updated the benchmark results and added go1 benchmarks to the description.\n\nhttps://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go#newcode58\nsrc/pkg/encoding/json/decode.go:58: for i := 0; i < len(data); i++ {\nOn 2013/01/05 06:25:47, dfc wrote:\n> what about\n> \n> for _, c := range data {\n>     first = c\n>     if first > ' ' { \n>        break\n>     }\n> }\n> \n> to avoid the range check\n\nDone",
			"disapproval": false,
			"date": "2013-01-05 15:40:55.304120",
			"approval": false
		},
		{
			"sender": "timo@gatso-one.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"timo@gatso-one.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> src/pkg/encoding/json/decode.go:59: var c byte\n> drop this variable?\n\nOr turn it around completely:\n\n\t// skip heavy processing for primitive values\n\tfor i, c := range data {\n\t\tif isSpace(rune(c)) {\n\t\t\tcontinue\n\t\t}\n\t\tif first == '{' || first == '[' {\n\t\t\tbreak\n\t\t}\n\t\trv := reflect.ValueOf(v)\n\t\tif rv.Kind() != reflect.Ptr || rv.IsNil() {\n\t\t\treturn &InvalidUnmarshalError{reflect.TypeOf(v)}\n\t\t}\n\t\tvar d decodeState\n\t\td.literalStore(data[i:], rv.Elem(), false)\n\t\treturn d.savedError\n\t}",
			"disapproval": false,
			"date": "2013-01-10 22:07:44.213540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7068043/diff/3001/src/pkg/encoding/json/decode.go#newcode60\nsrc/pkg/encoding/json/decode.go:60: if first > ' ' {\nthis means you'll now accept this:\n\n\tvar v int\n\terr := json.Unmarshal([]byte(\"\\x01 42\"), &v)\n\nwhich is currently rejected: http://play.golang.org/p/VGUk3tGr3K",
			"disapproval": false,
			"date": "2013-01-09 23:16:38.909530",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thu, Jan 10, 2013 at 2:50 PM, <rickarnoldjr@gmail.com> wrote:\r\n\r\n> PTAL\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7068043/diff/8/src/pkg/**\r\n> encoding/json/decode.go<https://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go>\r\n> File src/pkg/encoding/json/decode.**go (right):\r\n>\r\n> https://codereview.appspot.**com/7068043/diff/8/src/pkg/**\r\n> encoding/json/decode.go#**newcode59<https://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go#newcode59>\r\n> src/pkg/encoding/json/decode.**go:59: var c byte\r\n> On 2013/01/10 20:36:05, bradfitz wrote:\r\n>\r\n>> drop this variable?\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/7068043/<https://codereview.appspot.com/7068043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-11 01:49:12.909330",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(Submitted, but no email was sent?)\r\n\r\n\r\nOn Thu, Jan 10, 2013 at 5:49 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> LGTM\r\n>\r\n>\r\n> On Thu, Jan 10, 2013 at 2:50 PM, <rickarnoldjr@gmail.com> wrote:\r\n>\r\n>> PTAL\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/7068043/diff/8/src/pkg/**\r\n>> encoding/json/decode.go<https://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go>\r\n>> File src/pkg/encoding/json/decode.**go (right):\r\n>>\r\n>> https://codereview.appspot.**com/7068043/diff/8/src/pkg/**\r\n>> encoding/json/decode.go#**newcode59<https://codereview.appspot.com/7068043/diff/8/src/pkg/encoding/json/decode.go#newcode59>\r\n>>  src/pkg/encoding/json/decode.**go:59: var c byte\r\n>> On 2013/01/10 20:36:05, bradfitz wrote:\r\n>>\r\n>>> drop this variable?\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>> https://codereview.appspot.**com/7068043/<https://codereview.appspot.com/7068043/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-11 02:03:14.273650",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"timo@gatso-one.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/11 02:03:14, bradfitz wrote:\n> (Submitted, but no email was sent?)\n\nI did an \"hg sync\" and I'm getting this:\n\nCL 7068043 has no files; delete (abandon) with hg change -d 7068043\n\nBut it looks like my changes were applied in the source tree.",
			"disapproval": false,
			"date": "2013-01-11 03:14:07.321490",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Use -D despite the helpful message. Code review thinks the CL is owner by someone else. \r\n\r\nOn 11/01/2013, at 14:14, rickarnoldjr@gmail.com wrote:\r\n\r\n> On 2013/01/11 02:03:14, bradfitz wrote:\r\n>> (Submitted, but no email was sent?)\r\n> \r\n> I did an \"hg sync\" and I'm getting this:\r\n> \r\n> CL 7068043 has no files; delete (abandon) with hg change -d 7068043\r\n> \r\n> But it looks like my changes were applied in the source tree.\r\n> \r\n> \r\n> \r\n> https://codereview.appspot.com/7068043/\r\n",
			"disapproval": false,
			"date": "2013-01-11 03:18:17.239600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"timo@gatso-one.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This breaks unmarshaling of malformed data. I will roll it back and reopen the issue.",
			"disapproval": false,
			"date": "2013-01-29 21:08:48.683220",
			"approval": false
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 7068043: encoding/json: improve performance of Unmarshal on prim...",
	"created": "2013-01-05 06:19:48.211720",
	"patchsets": [
		1,
		1002,
		3001,
		7002,
		12002,
		8,
		6003
	],
	"modified": "2013-01-29 21:08:48.800670",
	"closed": true,
	"issue": 7068043
}