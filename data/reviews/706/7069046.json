{
	"description": "            time: standard time doc fix and format example\n\n      This fixes the incorrect unix timestamp of the standard time and adds\nan example for (Time) Format to clarify how timezones work in format strings.\n\n\nFixes issue 4364.",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"kevlar@google.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-07 05:55:26.842840",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add \"Fixes issue 4364\" in the CL description.\r\n",
			"disapproval": false,
			"date": "2013-01-07 07:52:16.865550",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go#newcode18\nsrc/pkg/time/format.go:18: // includes a timezone, do not perform timezone conversions on the standard\nOn 2013/01/07 19:33:40, cespare wrote:\n> You might think that 'writing what the standard time looks like formatted your\n> way' would involve changing the hour of the standard time (3pm) from MST to, for\n> example, UTC (if your format is intended to be a UTC time). See the issue for an\n> example.\n> \n> This is probably worded poorly; maybe someone has an idea of how to phrase it\n> more clearly and concisely.\n> \n> On 2013/01/07 19:23:48, kevlar wrote:\n> > I don't understand this.  How would you perform a timezone conversion on the\n> > standard time?\n> \n\nI don't think the issue involves attempting timezone correction on the standard time, it stemmed from confusion about the discrepancy between the unix time and the given long-form time.\n\nThe only thing that might bear adding is something that indicates that there are only a limited number of symbols accepted for variable representations of each field, but I'm not sure how to word that and I haven't really seen much confusion.",
			"disapproval": false,
			"date": "2013-01-08 21:40:32.988120",
			"approval": false
		},
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go#newcode18\nsrc/pkg/time/format.go:18: // includes a timezone, do not perform timezone conversions on the standard\nActually the confusion did involve attempting timezone correction on the standard time, but it was made worse by the unix time error.\n\nFWIW, I too was also initially tripped up when I first tried writing a time format. I tried converting the standard time to UTC but that doesn't work with (*Time) Format.\n\nThe reason I was confused is that I thought the standard time was a canonical *instant in time*.\n\nOn 2013/01/08 21:40:33, kevlar wrote:\n> On 2013/01/07 19:33:40, cespare wrote:\n> > You might think that 'writing what the standard time looks like formatted your\n> > way' would involve changing the hour of the standard time (3pm) from MST to,\n> for\n> > example, UTC (if your format is intended to be a UTC time). See the issue for\n> an\n> > example.\n> > \n> > This is probably worded poorly; maybe someone has an idea of how to phrase it\n> > more clearly and concisely.\n> > \n> > On 2013/01/07 19:23:48, kevlar wrote:\n> > > I don't understand this.  How would you perform a timezone conversion on the\n> > > standard time?\n> > \n> \n> I don't think the issue involves attempting timezone correction on the standard\n> time, it stemmed from confusion about the discrepancy between the unix time and\n> the given long-form time.\n> \n> The only thing that might bear adding is something that indicates that there are\n> only a limited number of symbols accepted for variable representations of each\n> field, but I'm not sure how to word that and I haven't really seen much\n> confusion.",
			"disapproval": false,
			"date": "2013-01-08 21:52:31.808410",
			"approval": false
		},
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-07 07:57:10.292640",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go#newcode18\nsrc/pkg/time/format.go:18: // includes a timezone, do not perform timezone conversions on the standard\nOn 2013/01/08 21:52:32, cespare wrote:\n> Actually the confusion did involve attempting timezone correction on the\n> standard time, but it was made worse by the unix time error.\n> \n> FWIW, I too was also initially tripped up when I first tried writing a time\n> format. I tried converting the standard time to UTC but that doesn't work with\n> (*Time) Format.\n> \n> The reason I was confused is that I thought the standard time was a canonical\n> *instant in time*.\n> \n> On 2013/01/08 21:40:33, kevlar wrote:\n> > On 2013/01/07 19:33:40, cespare wrote:\n> > > You might think that 'writing what the standard time looks like formatted\n> your\n> > > way' would involve changing the hour of the standard time (3pm) from MST to,\n> > for\n> > > example, UTC (if your format is intended to be a UTC time). See the issue\n> for\n> > an\n> > > example.\n> > > \n> > > This is probably worded poorly; maybe someone has an idea of how to phrase\n> it\n> > > more clearly and concisely.\n> > > \n> > > On 2013/01/07 19:23:48, kevlar wrote:\n> > > > I don't understand this.  How would you perform a timezone conversion on\n> the\n> > > > standard time?\n> > > \n> > \n> > I don't think the issue involves attempting timezone correction on the\n> standard\n> > time, it stemmed from confusion about the discrepancy between the unix time\n> and\n> > the given long-form time.\n> > \n> > The only thing that might bear adding is something that indicates that there\n> are\n> > only a limited number of symbols accepted for variable representations of each\n> > field, but I'm not sure how to word that and I haven't really seen much\n> > confusion.\n> \n\nAh, yes, I understand now.  Perhaps the whole comment should be adjusted a bit:\n\n// These are predetermined layouts for use in Time.Format.\n// The standard time used in the layouts is:\n//     ...\n// in which each part of the time corresponds to Unix time\n// xxxxxxxxx in America/Phoenix.  Given that America/Phoenix\n// (MST above format) is GMT-7, this standard time can be\n// thought of as\n//     ...\n// To define your own format, write down how the standard\n// time would look if each component of the standard time\n// were formatted to your liking.  Note that the timezone\n// in this format is aesthetic and does not affect how\n// the hour is written.  For examples of common formats\n// written in this way, see the values of ANSIC, StampMicro,\n// and Kitchen.",
			"disapproval": false,
			"date": "2013-01-08 22:16:25.757570",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/08 22:16:25, kevlar wrote:\n> // These are predetermined layouts for use in Time.Format.\n> // The standard time used in the layouts is:\n> //     ...\n> // in which each part of the time corresponds to Unix time\n> // xxxxxxxxx in America/Phoenix.  Given that America/Phoenix\n> // (MST above format) is GMT-7, this standard time can be\n> // thought of as\n> //     ...\n> // To define your own format, write down how the standard\n> // time would look if each component of the standard time\n> // were formatted to your liking.  Note that the timezone\n> // in this format is aesthetic and does not affect how\n> // the hour is written.  For examples of common formats\n> // written in this way, see the values of ANSIC, StampMicro,\n> // and Kitchen.\n\nproofreading fail.\n\n// These are predetermined layouts for use in Time.Format.\n// The standard time used in the layouts is:\n//     ...\n// in which each part of the layout corresponds to Unix time\n// xxxxxxxxx in America/Phoenix.  Given that America/Phoenix\n// (MST above) is GMT-7, this standard time can be\n// thought of as\n//     ...\n// To define your own format, write down how the standard\n// time would look if each component of the standard time\n// were formatted to your liking.  Note that the timezone\n// in this format is aesthetic and does not affect how\n// the hour is written.  For examples of common formats\n// written in this way, see the values of ANSIC, StampMicro,\n// and Kitchen.",
			"disapproval": false,
			"date": "2013-01-08 22:18:36.901020",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go#newcode18\nsrc/pkg/time/format.go:18: // includes a timezone, do not perform timezone conversions on the standard\nI don't understand this.  How would you perform a timezone conversion on the standard time?",
			"disapproval": false,
			"date": "2013-01-07 19:23:48.115570",
			"approval": false
		},
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go#newcode18\nsrc/pkg/time/format.go:18: // includes a timezone, do not perform timezone conversions on the standard\nYou might think that 'writing what the standard time looks like formatted your way' would involve changing the hour of the standard time (3pm) from MST to, for example, UTC (if your format is intended to be a UTC time). See the issue for an example.\n\nThis is probably worded poorly; maybe someone has an idea of how to phrase it more clearly and concisely.\n\nOn 2013/01/07 19:23:48, kevlar wrote:\n> I don't understand this.  How would you perform a timezone conversion on the\n> standard time?",
			"disapproval": false,
			"date": "2013-01-07 19:33:40.005340",
			"approval": false
		},
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/7069046/diff/4002/src/pkg/time/format.go#newcode18\nsrc/pkg/time/format.go:18: // includes a timezone, do not perform timezone conversions on the standard\nI'm not happy with this either. I don't think the distinction between America/Phoenix and MST adds anything, and also I don't think that \"aesthetic\" is the right word.\n\nI like your placement of the sentence \"Note that the timezone...\", though, more than my change.\n\nWhat about this?\n\n// To define your own format, write down how the standard time\n// would look if each component were formatted to your liking. \n// (The hour is written the same way regardless of the timezone.)\n// For examples of common formats written in this way, see the\n// values of ANSIC, StampMicro, and Kitchen.\n\nOn 2013/01/08 22:16:25, kevlar wrote:\n> On 2013/01/08 21:52:32, cespare wrote:\n> > Actually the confusion did involve attempting timezone correction on the\n> > standard time, but it was made worse by the unix time error.\n> > \n> > FWIW, I too was also initially tripped up when I first tried writing a time\n> > format. I tried converting the standard time to UTC but that doesn't work with\n> > (*Time) Format.\n> > \n> > The reason I was confused is that I thought the standard time was a canonical\n> > *instant in time*.\n> > \n> > On 2013/01/08 21:40:33, kevlar wrote:\n> > > On 2013/01/07 19:33:40, cespare wrote:\n> > > > You might think that 'writing what the standard time looks like formatted\n> > your\n> > > > way' would involve changing the hour of the standard time (3pm) from MST\n> to,\n> > > for\n> > > > example, UTC (if your format is intended to be a UTC time). See the issue\n> > for\n> > > an\n> > > > example.\n> > > > \n> > > > This is probably worded poorly; maybe someone has an idea of how to phrase\n> > it\n> > > > more clearly and concisely.\n> > > > \n> > > > On 2013/01/07 19:23:48, kevlar wrote:\n> > > > > I don't understand this.  How would you perform a timezone conversion on\n> > the\n> > > > > standard time?\n> > > > \n> > > \n> > > I don't think the issue involves attempting timezone correction on the\n> > standard\n> > > time, it stemmed from confusion about the discrepancy between the unix time\n> > and\n> > > the given long-form time.\n> > > \n> > > The only thing that might bear adding is something that indicates that there\n> > are\n> > > only a limited number of symbols accepted for variable representations of\n> each\n> > > field, but I'm not sure how to word that and I haven't really seen much\n> > > confusion.\n> > \n> \n> Ah, yes, I understand now.  Perhaps the whole comment should be adjusted a bit:\n> \n> // These are predetermined layouts for use in Time.Format.\n> // The standard time used in the layouts is:\n> //     ...\n> // in which each part of the time corresponds to Unix time\n> // xxxxxxxxx in America/Phoenix.  Given that America/Phoenix\n> // (MST above format) is GMT-7, this standard time can be\n> // thought of as\n> //     ...\n> // To define your own format, write down how the standard\n> // time would look if each component of the standard time\n> // were formatted to your liking.  Note that the timezone\n> // in this format is aesthetic and does not affect how\n> // the hour is written.  For examples of common formats\n> // written in this way, see the values of ANSIC, StampMicro,\n> // and Kitchen.",
			"disapproval": false,
			"date": "2013-01-18 21:19:47.552760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please fix the Unix time number and don't add other text. There's no agreement about what the text should say.\n\nPerhaps an example or two for Format, showing both UTC and not, would be useful.",
			"disapproval": false,
			"date": "2013-01-18 21:22:59.164300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(That is, a func ExampleTime_Format.)",
			"disapproval": false,
			"date": "2013-01-18 21:23:18.048530",
			"approval": false
		},
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI removed the extra doc changes and added a Format example.",
			"disapproval": false,
			"date": "2013-01-18 22:54:02.874900",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-22 19:44:20.778010",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cespare@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=86a58e67f6e6 ***\n\ntime: standard time doc fix and format example\n\nThis fixes the incorrect unix timestamp of the standard time and adds\nan example for (Time) Format to clarify how timezones work in format strings.\n\nFixes issue 4364.\n\nR=golang-dev, remyoudompheng, kevlar, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7069046\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-22 19:44:53.133180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-01-22 19:44:54.750020",
			"approval": true
		}
	],
	"owner_email": "cespare@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "cespare",
	"subject": "code review 7069046:             time: standard time doc fix and clarification",
	"created": "2013-01-07 05:54:44.512890",
	"patchsets": [
		1,
		2001,
		3001,
		4002,
		12002,
		15001
	],
	"modified": "2013-01-22 20:08:18.265820",
	"closed": true,
	"issue": 7069046
}