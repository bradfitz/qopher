{
	"description": "syscall: implement Pipe2 on Linux and use it in ForkExec\n\nFixes issue 2656.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"iant@golang.org",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, iant@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-10 14:41:30.661330",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have now.\n\nOn 2013/01/10 19:13:06, iant wrote:\n> Have you signed the contributor agreement as described at\n> http://golang.org/doc/contribute.html#copyright ?\n> \n> Thanks!",
			"disapproval": false,
			"date": "2013-01-10 19:26:00.739240",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This didn't upload properly.  Maybe it got interrupted.  Could you \"hg\r\nupload NNNNN\" again?\r\n\r\nOn Thu, Jan 10, 2013 at 10:15 AM, <guelfey@gmail.com> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, bradfitz@golang.org, iant@golang.org,\r\n> minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7062057/<https://codereview.appspot.com/7062057/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-10 18:35:13.613710",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done.\n\nOn 2013/01/10 18:35:13, bradfitz wrote:\n> This didn't upload properly.  Maybe it got interrupted.  Could you \"hg\n> upload NNNNN\" again?\n> \n> On Thu, Jan 10, 2013 at 10:15 AM, <mailto:guelfey@gmail.com> wrote:\n> \n> > Hello mailto:golang-dev@googlegroups.com, mailto:bradfitz@golang.org, mailto:iant@golang.org,\n> > mailto:minux.ma@gmail.com (cc: mailto:golang-dev@googlegroups.com),\n> >\n> > Please take another look.\n> >\n> >\n> >\n> https://codereview.appspot.**com/7062057/%3Chttps://codereview.appspot.com/7062057/>\n> >",
			"disapproval": false,
			"date": "2013-01-10 18:48:49.710690",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This change is a requirement for codereview 7065063 (https://codereview.appspot.com/7065063/), which fixes Go issue 2656 (http://code.google.com/p/go/issues/detail?id=2656). I'm sorry; I should have said this in the mail, but I only figured out how to change its text after I sent it.\n\nOn 2013/01/09 23:26:03, bradfitz wrote:\n> I'm surprised this wasn't used previously, but what motivates this?  Were\n> you actually seeing fd leaks from the lack of O_CLOEXEC not SetCloexec\n> elsewhere?\n> \n> On Wed, Jan 9, 2013 at 11:46 AM, <mailto:guelfey@gmail.com> wrote:\n> \n> > Reviewers: http://golang-dev_googlegroups.com,\n> >\n> > Message:\n> > Hello mailto:golang-dev@googlegroups.com,\n> >\n> > I'd like you to review this change to\n> > https://code.google.com/p/go\n> >\n> >\n> > Description:\n> > syscall: implement Pipe2 on Linux and use it in ForkExec\n> >\n> > Please review this at\n> https://codereview.appspot.**com/7062057/%3Chttps://codereview.appspot.com/7062057/>\n> >\n> > Affected files:\n> >   M src/pkg/syscall/exec_bsd.go\n> >   M src/pkg/syscall/exec_linux.go\n> >   M src/pkg/syscall/exec_unix.go\n> >   M src/pkg/syscall/syscall_linux.**go\n> >   M src/pkg/syscall/zsyscall_**linux_386.go\n> >   M src/pkg/syscall/zsyscall_**linux_amd64.go\n> >   M src/pkg/syscall/zsyscall_**linux_arm.go\n> >\n> >\n> > Index: src/pkg/syscall/exec_bsd.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/syscall/exec_bsd.go\n> > +++ b/src/pkg/syscall/exec_bsd.go\n> > @@ -221,3 +221,15 @@\n> >         // and this shuts up the compiler.\n> >         panic(\"unreached\")\n> >  }\n> > +\n> > +// Try to open a pipe with O_CLOEXEC set on both file descriptors.\n> > +func forkExecPipe(p []int) (err error) {\n> > +       if err = Pipe(p[0:]); err != nil {\n> > +               return\n> > +       }\n> > +       if _, err = fcntl(p[0], F_SETFD, FD_CLOEXEC); err != nil {\n> > +               return\n> > +       }\n> > +       _, err = fcntl(p[1], F_SETFD, FD_CLOEXEC)\n> > +       return\n> > +}\n> > Index: src/pkg/syscall/exec_linux.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/syscall/exec_linux.**go\n> > +++ b/src/pkg/syscall/exec_linux.**go\n> > @@ -233,3 +233,6 @@\n> >         // and this shuts up the compiler.\n> >         panic(\"unreached\")\n> >  }\n> > +\n> > +// Try to open a pipe with O_CLOEXEC set on both file descriptors.\n> > +func forkExecPipe(p []int) error { return Pipe2(p, O_CLOEXEC) }\n> > Index: src/pkg/syscall/exec_unix.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/syscall/exec_unix.go\n> > +++ b/src/pkg/syscall/exec_unix.go\n> > @@ -183,13 +183,7 @@\n> >         ForkLock.Lock()\n> >\n> >         // Allocate child status pipe close on exec.\n> > -       if err = Pipe(p[0:]); err != nil {\n> > -               goto error\n> > -       }\n> > -       if _, err = fcntl(p[0], F_SETFD, FD_CLOEXEC); err != nil {\n> > -               goto error\n> > -       }\n> > -       if _, err = fcntl(p[1], F_SETFD, FD_CLOEXEC); err != nil {\n> > +       if err = forkExecPipe(p[0:]); err != nil {\n> >                 goto error\n> >         }\n> >\n> > Index: src/pkg/syscall/syscall_linux.**go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/syscall/syscall_**linux.go\n> > +++ b/src/pkg/syscall/syscall_**linux.go\n> > @@ -39,6 +39,18 @@\n> >         return\n> >  }\n> >\n> > +//sysnb pipe2(p *[2]_C_int, flags int) (err error)\n> > +func Pipe2(p []int, flags int) (err error) {\n> > +       if len(p) != 2 {\n> > +               return EINVAL\n> > +       }\n> > +       var pp [2]_C_int\n> > +       err = pipe2(&pp, flags)\n> > +       p[0] = int(pp[0])\n> > +       p[1] = int(pp[1])\n> > +       return\n> > +}\n> > +\n> >  //sys  utimes(path string, times *[2]Timeval) (err error)\n> >  func Utimes(path string, tv []Timeval) (err error) {\n> >         if len(tv) != 2 {\n> > Index: src/pkg/syscall/zsyscall_**linux_386.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/syscall/zsyscall_**linux_386.go\n> > +++ b/src/pkg/syscall/zsyscall_**linux_386.go\n> > @@ -49,6 +49,16 @@\n> >\n> >  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n> >\n> > +func pipe2(p *[2]_C_int, flags int) (err error) {\n> > +       _, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)),\n> > uintptr(flags), 0)\n> > +       if e1 != 0 {\n> > +               err = e1\n> > +       }\n> > +       return\n> > +}\n> > +\n> > +// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n> > +\n> >  func utimes(path string, times *[2]Timeval) (err error) {\n> >         var _p0 *byte\n> >         _p0, err = BytePtrFromString(path)\n> > Index: src/pkg/syscall/zsyscall_**linux_amd64.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/syscall/zsyscall_**linux_amd64.go\n> > +++ b/src/pkg/syscall/zsyscall_**linux_amd64.go\n> > @@ -49,6 +49,16 @@\n> >\n> >  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n> >\n> > +func pipe2(p *[2]_C_int, flags int) (err error) {\n> > +       _, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)),\n> > uintptr(flags), 0)\n> > +       if e1 != 0 {\n> > +               err = e1\n> > +       }\n> > +       return\n> > +}\n> > +\n> > +// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n> > +\n> >  func utimes(path string, times *[2]Timeval) (err error) {\n> >         var _p0 *byte\n> >         _p0, err = BytePtrFromString(path)\n> > Index: src/pkg/syscall/zsyscall_**linux_arm.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/syscall/zsyscall_**linux_arm.go\n> > +++ b/src/pkg/syscall/zsyscall_**linux_arm.go\n> > @@ -49,6 +49,16 @@\n> >\n> >  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n> >\n> > +func pipe2(p *[2]_C_int, flags int) (err error) {\n> > +       _, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)),\n> > uintptr(flags), 0)\n> > +       if e1 != 0 {\n> > +               err = e1\n> > +       }\n> > +       return\n> > +}\n> > +\n> > +// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n> > +\n> >  func utimes(path string, times *[2]Timeval) (err error) {\n> >         var _p0 *byte\n> >         _p0, err = BytePtrFromString(path)\n> >\n> >\n> >",
			"disapproval": false,
			"date": "2013-01-10 06:03:46.775030",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/09 23:30:03, iant wrote:\n> pipe2 was added in 2.6.27.  Do we already require a kernel that new?  One\n> possibility would be to check for ENOSYS, and fall back to pipe if we get it. \n> E.g., that is how we handle epoll_create1 in the net package; epoll_create1 was\n> also added in 2.6.27.\n\nYou're right, the minimum kernel requirement is 2.6.23 as far as I know. I will fix this later today.",
			"disapproval": false,
			"date": "2013-01-10 06:07:42.808790",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7062057/diff/4001/src/pkg/syscall/exec_bsd.go\nFile src/pkg/syscall/exec_bsd.go (right):\n\nhttps://codereview.appspot.com/7062057/diff/4001/src/pkg/syscall/exec_bsd.go#newcode225\nsrc/pkg/syscall/exec_bsd.go:225: // Try to open a pipe with O_CLOEXEC set on both file descriptors.\n// forkExecPipe tries to ...\n\nhttps://codereview.appspot.com/7062057/diff/4001/src/pkg/syscall/exec_bsd.go#newcode227\nsrc/pkg/syscall/exec_bsd.go:227: if err = Pipe(p[0:]); err != nil {\nbecause p is already a slice, p[0:] is equivalent to just p.\n\nas you don't want to introduce new err variable at\nif-block level, i think this is clearer:\nerr = Pipe(p)\nif err != nil {\n   return\n}\n_, err = fcntl(p[0], F_SETFD, FD_CLOEXEC)\nif err != nil {\n   return\n}\nreturn fcntl(p[1], F_SETFD, FD_CLOEXEC)\n\nEven better, you can drop the name \"err\" in function signature\nbecause it adds little to the documentation.\n\nhttps://codereview.appspot.com/7062057/diff/4001/src/pkg/syscall/exec_linux.go\nFile src/pkg/syscall/exec_linux.go (right):\n\nhttps://codereview.appspot.com/7062057/diff/4001/src/pkg/syscall/exec_linux.go#newcode237\nsrc/pkg/syscall/exec_linux.go:237: // Try to open a pipe with O_CLOEXEC set on both file descriptors.\n// forkExecPipe tries to ...\n\nhttps://codereview.appspot.com/7062057/diff/4001/src/pkg/syscall/exec_unix.go\nFile src/pkg/syscall/exec_unix.go (right):\n\nhttps://codereview.appspot.com/7062057/diff/4001/src/pkg/syscall/exec_unix.go#newcode186\nsrc/pkg/syscall/exec_unix.go:186: if err = forkExecPipe(p[0:]); err != nil {\nhere p is of type [2]int, so you can use p[:] instead of\np[0:] (p[0:] is the old usage)",
			"disapproval": false,
			"date": "2013-01-10 14:53:09.003590",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-09 19:46:37.788300",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-10 19:11:56.127520",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm surprised this wasn't used previously, but what motivates this?  Were\r\nyou actually seeing fd leaks from the lack of O_CLOEXEC not SetCloexec\r\nelsewhere?\r\n\r\nOn Wed, Jan 9, 2013 at 11:46 AM, <guelfey@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> syscall: implement Pipe2 on Linux and use it in ForkExec\r\n>\r\n> Please review this at https://codereview.appspot.**com/7062057/<https://codereview.appspot.com/7062057/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/syscall/exec_bsd.go\r\n>   M src/pkg/syscall/exec_linux.go\r\n>   M src/pkg/syscall/exec_unix.go\r\n>   M src/pkg/syscall/syscall_linux.**go\r\n>   M src/pkg/syscall/zsyscall_**linux_386.go\r\n>   M src/pkg/syscall/zsyscall_**linux_amd64.go\r\n>   M src/pkg/syscall/zsyscall_**linux_arm.go\r\n>\r\n>\r\n> Index: src/pkg/syscall/exec_bsd.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/exec_bsd.go\r\n> +++ b/src/pkg/syscall/exec_bsd.go\r\n> @@ -221,3 +221,15 @@\r\n>         // and this shuts up the compiler.\r\n>         panic(\"unreached\")\r\n>  }\r\n> +\r\n> +// Try to open a pipe with O_CLOEXEC set on both file descriptors.\r\n> +func forkExecPipe(p []int) (err error) {\r\n> +       if err = Pipe(p[0:]); err != nil {\r\n> +               return\r\n> +       }\r\n> +       if _, err = fcntl(p[0], F_SETFD, FD_CLOEXEC); err != nil {\r\n> +               return\r\n> +       }\r\n> +       _, err = fcntl(p[1], F_SETFD, FD_CLOEXEC)\r\n> +       return\r\n> +}\r\n> Index: src/pkg/syscall/exec_linux.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/exec_linux.**go\r\n> +++ b/src/pkg/syscall/exec_linux.**go\r\n> @@ -233,3 +233,6 @@\r\n>         // and this shuts up the compiler.\r\n>         panic(\"unreached\")\r\n>  }\r\n> +\r\n> +// Try to open a pipe with O_CLOEXEC set on both file descriptors.\r\n> +func forkExecPipe(p []int) error { return Pipe2(p, O_CLOEXEC) }\r\n> Index: src/pkg/syscall/exec_unix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/exec_unix.go\r\n> +++ b/src/pkg/syscall/exec_unix.go\r\n> @@ -183,13 +183,7 @@\r\n>         ForkLock.Lock()\r\n>\r\n>         // Allocate child status pipe close on exec.\r\n> -       if err = Pipe(p[0:]); err != nil {\r\n> -               goto error\r\n> -       }\r\n> -       if _, err = fcntl(p[0], F_SETFD, FD_CLOEXEC); err != nil {\r\n> -               goto error\r\n> -       }\r\n> -       if _, err = fcntl(p[1], F_SETFD, FD_CLOEXEC); err != nil {\r\n> +       if err = forkExecPipe(p[0:]); err != nil {\r\n>                 goto error\r\n>         }\r\n>\r\n> Index: src/pkg/syscall/syscall_linux.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/syscall_**linux.go\r\n> +++ b/src/pkg/syscall/syscall_**linux.go\r\n> @@ -39,6 +39,18 @@\r\n>         return\r\n>  }\r\n>\r\n> +//sysnb pipe2(p *[2]_C_int, flags int) (err error)\r\n> +func Pipe2(p []int, flags int) (err error) {\r\n> +       if len(p) != 2 {\r\n> +               return EINVAL\r\n> +       }\r\n> +       var pp [2]_C_int\r\n> +       err = pipe2(&pp, flags)\r\n> +       p[0] = int(pp[0])\r\n> +       p[1] = int(pp[1])\r\n> +       return\r\n> +}\r\n> +\r\n>  //sys  utimes(path string, times *[2]Timeval) (err error)\r\n>  func Utimes(path string, tv []Timeval) (err error) {\r\n>         if len(tv) != 2 {\r\n> Index: src/pkg/syscall/zsyscall_**linux_386.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/zsyscall_**linux_386.go\r\n> +++ b/src/pkg/syscall/zsyscall_**linux_386.go\r\n> @@ -49,6 +49,16 @@\r\n>\r\n>  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> +func pipe2(p *[2]_C_int, flags int) (err error) {\r\n> +       _, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)),\r\n> uintptr(flags), 0)\r\n> +       if e1 != 0 {\r\n> +               err = e1\r\n> +       }\r\n> +       return\r\n> +}\r\n> +\r\n> +// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n> +\r\n>  func utimes(path string, times *[2]Timeval) (err error) {\r\n>         var _p0 *byte\r\n>         _p0, err = BytePtrFromString(path)\r\n> Index: src/pkg/syscall/zsyscall_**linux_amd64.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/zsyscall_**linux_amd64.go\r\n> +++ b/src/pkg/syscall/zsyscall_**linux_amd64.go\r\n> @@ -49,6 +49,16 @@\r\n>\r\n>  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> +func pipe2(p *[2]_C_int, flags int) (err error) {\r\n> +       _, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)),\r\n> uintptr(flags), 0)\r\n> +       if e1 != 0 {\r\n> +               err = e1\r\n> +       }\r\n> +       return\r\n> +}\r\n> +\r\n> +// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n> +\r\n>  func utimes(path string, times *[2]Timeval) (err error) {\r\n>         var _p0 *byte\r\n>         _p0, err = BytePtrFromString(path)\r\n> Index: src/pkg/syscall/zsyscall_**linux_arm.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/zsyscall_**linux_arm.go\r\n> +++ b/src/pkg/syscall/zsyscall_**linux_arm.go\r\n> @@ -49,6 +49,16 @@\r\n>\r\n>  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> +func pipe2(p *[2]_C_int, flags int) (err error) {\r\n> +       _, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)),\r\n> uintptr(flags), 0)\r\n> +       if e1 != 0 {\r\n> +               err = e1\r\n> +       }\r\n> +       return\r\n> +}\r\n> +\r\n> +// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n> +\r\n>  func utimes(path string, times *[2]Timeval) (err error) {\r\n>         var _p0 *byte\r\n>         _p0, err = BytePtrFromString(path)\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-09 23:26:03.070870",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, iant@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-10 15:27:18.211060",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/10 17:58:33, iant wrote:\n> https://codereview.appspot.com/7062057/diff/6002/src/pkg/syscall/exec_bsd.go\n> File src/pkg/syscall/exec_bsd.go (right):\n> \n> https://codereview.appspot.com/7062057/diff/6002/src/pkg/syscall/exec_bsd.go#newcode229\n> src/pkg/syscall/exec_bsd.go:229: return\n> This isn't going to compile--you need \"return err\" here and below.\n\nOf course; where do I have my mind these days...",
			"disapproval": false,
			"date": "2013-01-10 18:13:40.668160",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "pipe2 was added in 2.6.27.  Do we already require a kernel that new?  One possibility would be to check for ENOSYS, and fall back to pipe if we get it.  E.g., that is how we handle epoll_create1 in the net package; epoll_create1 was also added in 2.6.27.",
			"disapproval": false,
			"date": "2013-01-09 23:30:03.078780",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 10, 2013 at 2:03 PM, <guelfey@gmail.com> wrote:\r\n\r\n> This change is a requirement for codereview 7065063\r\n> (https://codereview.appspot.**com/7065063/<https://codereview.appspot.com/7065063/>),\r\n> which fixes Go issue 2656\r\n> (http://code.google.com/p/go/**issues/detail?id=2656<http://code.google.com/p/go/issues/detail?id=2656>).\r\n> I'm sorry; I should\r\n> have said this in the mail, but I only figured out how to change its\r\n> text after I sent it.\r\n>\r\nyou can use \"hg change 7062057\" to change the description text even after\r\nyou've mailed it out.\r\n\r\nplease add \"Fixes issue 2656.\" to the CL description.\r\n",
			"disapproval": false,
			"date": "2013-01-10 14:17:45.541580",
			"approval": false
		},
		{
			"sender": "guelfey@gmail.com",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, iant@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-10 18:15:06.853200",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Have you signed the contributor agreement as described at http://golang.org/doc/contribute.html#copyright ?\n\nThanks!",
			"disapproval": false,
			"date": "2013-01-10 19:13:06.758750",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7062057/diff/6002/src/pkg/syscall/exec_bsd.go\nFile src/pkg/syscall/exec_bsd.go (right):\n\nhttps://codereview.appspot.com/7062057/diff/6002/src/pkg/syscall/exec_bsd.go#newcode229\nsrc/pkg/syscall/exec_bsd.go:229: return\nThis isn't going to compile--you need \"return err\" here and below.",
			"disapproval": false,
			"date": "2013-01-10 17:58:33.697660",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"guelfey@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e59c2b6934af ***\n\nsyscall: implement Pipe2 on Linux and use it in ForkExec\n\nFixes issue 2656.\n\nR=golang-dev, bradfitz, iant, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7062057\n\nCommitter: Ian Lance Taylor <iant@golang.org>",
			"disapproval": false,
			"date": "2013-01-11 01:05:07.081190",
			"approval": false
		}
	],
	"owner_email": "guelfey@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "guelfey",
	"subject": "code review 7062057: syscall: implement Pipe2 on Linux and use it in ForkExec",
	"created": "2013-01-09 19:24:39.947370",
	"patchsets": [
		1,
		4001,
		9001,
		6002,
		8003,
		5024
	],
	"modified": "2013-01-11 12:54:30.416250",
	"closed": true,
	"issue": 7062057
}