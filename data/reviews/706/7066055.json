{
	"description": "cmd/6c: Improve peep hole optimization of rotate and shift instructions.\n\nUpdate issue 4629.\n\n$ cat shift2.c\nunsigned int\nshift(unsigned int x, unsigned int y)\n{\n        x = (x << 3);\n        y = (y << 5);\n        x = (x << 7);\n        y = (y << 9);\n        return x ^ y;\n}\n\n## BEFORE\n$ go tool 6c -S shift2.c\n(shift2.c:2)\tTEXT\tshift+0(SB),$0-8\n(shift2.c:4)\tMOVL\tx+0(FP),!!AX\n(shift2.c:4)\tSALL\t$3,!!AX\n(shift2.c:4)\tMOVL\tAX,!!DX\n(shift2.c:5)\tMOVL\ty+4(FP),!!AX\n(shift2.c:5)\tSALL\t$5,!!AX\n(shift2.c:5)\tMOVL\tAX,!!CX\n(shift2.c:6)\tMOVL\tDX,!!AX\n(shift2.c:6)\tSALL\t$7,!!AX\n(shift2.c:6)\tMOVL\tAX,!!DX\n(shift2.c:7)\tMOVL\tCX,!!AX\n(shift2.c:7)\tSALL\t$9,!!AX\n(shift2.c:7)\tMOVL\tAX,!!CX\n(shift2.c:8)\tMOVL\tDX,!!AX\n(shift2.c:8)\tXORL\tCX,!!AX\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tEND\t,!!\n\n## AFTER\n$ go tool 6c -S shift2.c\n(shift2.c:2)\tTEXT\tshift+0(SB),$0-8\n(shift2.c:4)\tMOVL\tx+0(FP),!!AX\n(shift2.c:4)\tSALL\t$3,!!AX\n(shift2.c:5)\tMOVL\ty+4(FP),!!CX\n(shift2.c:5)\tSALL\t$5,!!CX\n(shift2.c:6)\tSALL\t$7,!!AX\n(shift2.c:7)\tSALL\t$9,!!CX\n(shift2.c:8)\tXORL\tCX,!!AX\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tEND\t,!!",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"dave@cheney.net",
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c\nFile src/cmd/6c/peep.c (right):\n\nhttps://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c#newcode333\nsrc/cmd/6c/peep.c:333: \nThis matches 6g/peep.c like you asked, but is it intentional that AIMUL[LQW] instructions now check p->from.type == D_CONST too?",
			"disapproval": false,
			"date": "2013-01-09 21:08:09.541280",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 10, 2013 at 6:00 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Thoughts about doing this for 8c (if affected) ?\r\n\r\nI've been experimenting with a similar change to cmd/8c, and i confirm it's\r\naffected.\r\nhowever, go tool 8c -S x.c shows this:\r\n(x.c:2) TEXT    shift+0(SB),(gok(79))   //  why gok(79) here???\r\n(x.c:4) MOVL    x+0(FP),AX\r\n(x.c:4) SALL    $3,AX\r\n(x.c:5) MOVL    y+4(FP),CX\r\n(x.c:5) SALL    $5,CX\r\n(x.c:6) SALL    $7,AX\r\n(x.c:7) SALL    $9,CX\r\n(x.c:8) XORL    CX,AX\r\n(x.c:8) RET     ,\r\n(x.c:8) RET     ,\r\n(x.c:8) END     ,\r\n",
			"disapproval": false,
			"date": "2013-01-09 22:08:17.735790",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-09 21:06:44.036380",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In the CL description, s/Related to issue 4629./Update issue 4629./ and leave a blank line after it.\n\nhttp://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control",
			"disapproval": false,
			"date": "2013-01-10 00:58:44.662030",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "any before/after comparisons of '6c -S'?\n(please add to the description)",
			"disapproval": false,
			"date": "2013-01-09 21:11:02.240180",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, minux.ma@gmail.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-09 22:45:49.649400",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/10 00:58:44, nigeltao wrote:\n> In the CL description, s/Related to issue 4629./Update issue 4629./ and leave a\n> blank line after it.\n\nDone.\n\n> http://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control\n\nHadn't seen that, thanks!",
			"disapproval": false,
			"date": "2013-01-10 01:00:40.788090",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/09 21:11:02, minux wrote:\n> any before/after comparisons of '6c -S'?\n> (please add to the description)\n\n6c doesn't currently emit ROTL instructions, so no differences.\n\nHowever, if combined with https://codereview.appspot.com/7069056:\n\n$ cat rotate2.c\nunsigned int\nrotate(unsigned int x, unsigned int y)\n{\n\tx = (x << 3) | (x >> (sizeof(x) * 8 - 3));\n\ty = (y << 5) | (y >> (sizeof(y) * 8 - 5));\n\tx = (x << 7) | (x >> (sizeof(x) * 8 - 7));\n\ty = (y << 9) | (y >> (sizeof(y) * 8 - 9));\n\treturn x ^ y;\n}\n\n\n## BEFORE\n\n$ go tool 6c -S rotate2.c\n(rotate2.c:2)\tTEXT\trotate+0(SB),$0-8\n(rotate2.c:4)\tMOVL\tx+0(FP),!!AX\n(rotate2.c:4)\tROLL\t$3,!!AX\n(rotate2.c:4)\tMOVL\tAX,!!DX\n(rotate2.c:5)\tMOVL\ty+4(FP),!!AX\n(rotate2.c:5)\tROLL\t$5,!!AX\n(rotate2.c:5)\tMOVL\tAX,!!CX\n(rotate2.c:6)\tMOVL\tDX,!!AX\n(rotate2.c:6)\tROLL\t$7,!!AX\n(rotate2.c:6)\tMOVL\tAX,!!DX\n(rotate2.c:7)\tMOVL\tCX,!!AX\n(rotate2.c:7)\tROLL\t$9,!!AX\n(rotate2.c:7)\tMOVL\tAX,!!CX\n(rotate2.c:8)\tMOVL\tDX,!!AX\n(rotate2.c:8)\tXORL\tCX,!!AX\n(rotate2.c:8)\tRET\t,!!\n(rotate2.c:8)\tRET\t,!!\n(rotate2.c:8)\tEND\t,!!\n\n\n## AFTER\n\n$ go tool 6c -S rotate2.c\n(rotate2.c:2)\tTEXT\trotate+0(SB),$0-8\n(rotate2.c:4)\tMOVL\tx+0(FP),!!AX\n(rotate2.c:4)\tROLL\t$3,!!AX\n(rotate2.c:5)\tMOVL\ty+4(FP),!!CX\n(rotate2.c:5)\tROLL\t$5,!!CX\n(rotate2.c:6)\tROLL\t$7,!!AX\n(rotate2.c:7)\tROLL\t$9,!!CX\n(rotate2.c:8)\tXORL\tCX,!!AX\n(rotate2.c:8)\tRET\t,!!\n(rotate2.c:8)\tRET\t,!!\n(rotate2.c:8)\tEND\t,!!",
			"disapproval": false,
			"date": "2013-01-09 21:16:29.736780",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Er, I should point out the \"BEFORE\" there is with 7069056 applied.  The status quo is:\n\n## UNPATCHED\n\n$ go tool 6c -S rotate2.c\n(rotate2.c:2)\tTEXT\trotate+0(SB),$0-8\n(rotate2.c:2)\tMOVL\tx+0(FP),!!AX\n(rotate2.c:2)\tMOVL\ty+4(FP),!!DX\n(rotate2.c:4)\tMOVL\tAX,!!BX\n(rotate2.c:4)\tSALL\t$3,!!AX\n(rotate2.c:4)\tMOVL\tBX,!!CX\n(rotate2.c:4)\tSHRL\t$29,!!CX\n(rotate2.c:4)\tORL\tCX,!!AX\n(rotate2.c:4)\tMOVL\tAX,!!BX\n(rotate2.c:5)\tMOVL\tDX,!!AX\n(rotate2.c:5)\tSALL\t$5,!!AX\n(rotate2.c:5)\tMOVL\tDX,!!CX\n(rotate2.c:5)\tSHRL\t$27,!!CX\n(rotate2.c:5)\tORL\tCX,!!AX\n(rotate2.c:5)\tMOVL\tAX,!!DX\n(rotate2.c:6)\tMOVL\tBX,!!AX\n(rotate2.c:6)\tSALL\t$7,!!AX\n(rotate2.c:6)\tMOVL\tBX,!!CX\n(rotate2.c:6)\tSHRL\t$25,!!CX\n(rotate2.c:6)\tORL\tCX,!!AX\n(rotate2.c:6)\tMOVL\tAX,!!BX\n(rotate2.c:7)\tMOVL\tDX,!!AX\n(rotate2.c:7)\tSALL\t$9,!!AX\n(rotate2.c:7)\tMOVL\tDX,!!CX\n(rotate2.c:7)\tSHRL\t$23,!!CX\n(rotate2.c:7)\tORL\tCX,!!AX\n(rotate2.c:7)\tMOVL\tAX,!!CX\n(rotate2.c:8)\tMOVL\tBX,!!AX\n(rotate2.c:8)\tXORL\tCX,!!AX\n(rotate2.c:8)\tRET\t,!!\n(rotate2.c:8)\tRET\t,!!\n(rotate2.c:8)\tEND\t,!!",
			"disapproval": false,
			"date": "2013-01-09 21:18:29.397980",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh right, it helps shifts too. :) Updated the description to provide an example.\n\nhttps://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c\nFile src/cmd/6c/peep.c (right):\n\nhttps://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c#newcode333\nsrc/cmd/6c/peep.c:333: \nOn 2013/01/09 21:08:09, mdempsky wrote:\n> This matches 6g/peep.c like you asked, but is it intentional that AIMUL[LQW]\n> instructions now check p->from.type == D_CONST too?\n\nActually, this seems fine.  IMUL with \"to\" set to D_NONE means the output will be written to EDX:EAX, and that format instruction can't multiply by a constant anyway.",
			"disapproval": false,
			"date": "2013-01-09 21:24:17.326920",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/09 21:57:49, rsc wrote:\n> Could you add an explicit return 0; to the IMULW case in both 6c and 6g?\n\nI added a \"giveup:\" label and \"goto giveup;\" to the end of the imul and shift/rotate blocks.  This way the fall through is explicit, and in the case of 6g, the debug prints don't need to be duplicated.\n\nLet me know if you think \"return 0;\" would be better still.",
			"disapproval": false,
			"date": "2013-01-09 22:48:35.730180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nCould you add an explicit return 0; to the IMULW case in both 6c and 6g?\nThanks.\n\nhttps://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c\nFile src/cmd/6c/peep.c (right):\n\nhttps://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c#newcode333\nsrc/cmd/6c/peep.c:333: \nOn 2013/01/09 21:24:17, mdempsky wrote:\n> On 2013/01/09 21:08:09, mdempsky wrote:\n> > This matches 6g/peep.c like you asked, but is it intentional that AIMUL[LQW]\n> > instructions now check p->from.type == D_CONST too?\n> \n> Actually, this seems fine.  IMUL with \"to\" set to D_NONE means the output will\n> be written to EDX:EAX, and that format instruction can't multiply by a constant\n> anyway.\n\nI don't think I intended that when I fixed 6g, but yes it does work. :-)",
			"disapproval": false,
			"date": "2013-01-09 21:57:49.831510",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thoughts about doing this for 8c (if affected) ?\r\n\r\nOn Thu, Jan 10, 2013 at 8:57 AM,  <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n> Could you add an explicit return 0; to the IMULW case in both 6c and 6g?\r\n> Thanks.\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c\r\n> File src/cmd/6c/peep.c (right):\r\n>\r\n> https://codereview.appspot.com/7066055/diff/1003/src/cmd/6c/peep.c#newcode333\r\n> src/cmd/6c/peep.c:333:\r\n> On 2013/01/09 21:24:17, mdempsky wrote:\r\n>>\r\n>> On 2013/01/09 21:08:09, mdempsky wrote:\r\n>> > This matches 6g/peep.c like you asked, but is it intentional that\r\n>\r\n> AIMUL[LQW]\r\n>>\r\n>> > instructions now check p->from.type == D_CONST too?\r\n>\r\n>\r\n>> Actually, this seems fine.  IMUL with \"to\" set to D_NONE means the\r\n>\r\n> output will\r\n>>\r\n>> be written to EDX:EAX, and that format instruction can't multiply by a\r\n>\r\n> constant\r\n>>\r\n>> anyway.\r\n>\r\n>\r\n> I don't think I intended that when I fixed 6g, but yes it does work. :-)\r\n>\r\n> https://codereview.appspot.com/7066055/\r\n",
			"disapproval": false,
			"date": "2013-01-09 22:00:54.667670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8d1bf4554310 ***\n\ncmd/6c: Improve peep hole optimization of rotate and shift instructions.\n\nUpdate issue 4629.\n\n$ cat shift2.c\nunsigned int\nshift(unsigned int x, unsigned int y)\n{\n        x = (x << 3);\n        y = (y << 5);\n        x = (x << 7);\n        y = (y << 9);\n        return x ^ y;\n}\n\n## BEFORE\n$ go tool 6c -S shift2.c\n(shift2.c:2)\tTEXT\tshift+0(SB),$0-8\n(shift2.c:4)\tMOVL\tx+0(FP),!!AX\n(shift2.c:4)\tSALL\t$3,!!AX\n(shift2.c:4)\tMOVL\tAX,!!DX\n(shift2.c:5)\tMOVL\ty+4(FP),!!AX\n(shift2.c:5)\tSALL\t$5,!!AX\n(shift2.c:5)\tMOVL\tAX,!!CX\n(shift2.c:6)\tMOVL\tDX,!!AX\n(shift2.c:6)\tSALL\t$7,!!AX\n(shift2.c:6)\tMOVL\tAX,!!DX\n(shift2.c:7)\tMOVL\tCX,!!AX\n(shift2.c:7)\tSALL\t$9,!!AX\n(shift2.c:7)\tMOVL\tAX,!!CX\n(shift2.c:8)\tMOVL\tDX,!!AX\n(shift2.c:8)\tXORL\tCX,!!AX\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tEND\t,!!\n\n## AFTER\n$ go tool 6c -S shift2.c\n(shift2.c:2)\tTEXT\tshift+0(SB),$0-8\n(shift2.c:4)\tMOVL\tx+0(FP),!!AX\n(shift2.c:4)\tSALL\t$3,!!AX\n(shift2.c:5)\tMOVL\ty+4(FP),!!CX\n(shift2.c:5)\tSALL\t$5,!!CX\n(shift2.c:6)\tSALL\t$7,!!AX\n(shift2.c:7)\tSALL\t$9,!!CX\n(shift2.c:8)\tXORL\tCX,!!AX\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tRET\t,!!\n(shift2.c:8)\tEND\t,!!\n\nR=rsc, minux.ma, dave, nigeltao\nCC=golang-dev\nhttps://codereview.appspot.com/7066055\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-18 21:33:35.860260",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping?",
			"disapproval": false,
			"date": "2013-01-18 20:32:34.124080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-18 21:32:42.366530",
			"approval": true
		}
	],
	"owner_email": "mdempsky@google.com",
	"private": false,
	"base_url": "",
	"owner": "mdempsky",
	"subject": "code review 7066055: cmd/6c: Improve peep hole optimization of rotate and sh...",
	"created": "2013-01-08 20:21:48.440120",
	"patchsets": [
		1,
		1002,
		1003,
		4002,
		15001
	],
	"modified": "2013-01-18 21:34:03.530900",
	"closed": true,
	"issue": 7066055
}