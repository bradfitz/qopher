{
	"description": "cmd/ld: use native-endian symbol values in symbol table\n\nThe Plan 9 symbol table format defines big-endian symbol values\nfor portability, but we want to be able to generate an ELF object file\nand let the host linker link it, as part of the solution to issue 4069.\nThe symbol table itself, since it is loaded into memory at run time,\nmust be filled in by the final host linker, using relocation directives\nto set the symbol values. On a little-endian machine, the linker will\nonly fill in little-endian values during relocation, so we are forced\nto use little-endian symbol values.\n\nTo preserve most of the original portability of the symbol table\nformat, we make the table itself say whether it uses big- or\nlittle-endian values. If the table begins with the magic sequence\n        fe ff ff ff 00 00\nthen the actual table begins after those six bytes and contains\nlittle-endian symbol values. Otherwise, the table is in the original\nformat and contains big-endian symbol values. The magic sequence\nlooks like an \"end of table\" entry (the fifth byte is zero), so legacy\nreaders will see a little-endian table as an empty table.\n\nAll the gc architectures are little-endian today, so the practical\neffect of this CL is to make all the generated tables little-endian,\nbut if a big-endian system comes along, ld will not generate\nthe magic sequence, and the various readers will fall back to the\noriginal big-endian interpretation.",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-04 22:03:52.393720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8bbc0bdf832e ***\n\ncmd/ld: use native-endian symbol values in symbol table\n\nThe Plan 9 symbol table format defines big-endian symbol values\nfor portability, but we want to be able to generate an ELF object file\nand let the host linker link it, as part of the solution to issue 4069.\nThe symbol table itself, since it is loaded into memory at run time,\nmust be filled in by the final host linker, using relocation directives\nto set the symbol values. On a little-endian machine, the linker will\nonly fill in little-endian values during relocation, so we are forced\nto use little-endian symbol values.\n\nTo preserve most of the original portability of the symbol table\nformat, we make the table itself say whether it uses big- or\nlittle-endian values. If the table begins with the magic sequence\n        fe ff ff ff 00 00\nthen the actual table begins after those six bytes and contains\nlittle-endian symbol values. Otherwise, the table is in the original\nformat and contains big-endian symbol values. The magic sequence\nlooks like an \"end of table\" entry (the fifth byte is zero), so legacy\nreaders will see a little-endian table as an empty table.\n\nAll the gc architectures are little-endian today, so the practical\neffect of this CL is to make all the generated tables little-endian,\nbut if a big-endian system comes along, ld will not generate\nthe magic sequence, and the various readers will fall back to the\noriginal big-endian interpretation.\n\nR=ken2\nCC=golang-dev\nhttps://codereview.appspot.com/7066043",
			"disapproval": false,
			"date": "2013-01-04 22:04:04.001720",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7066043: cmd/ld: use native-endian symbol values in symbol table",
	"created": "2013-01-04 21:47:29.181300",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-01-04 22:04:06.346600",
	"closed": true,
	"issue": 7066043
}