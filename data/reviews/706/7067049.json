{
	"description": "path/filepath: add JoinList\n\nFor discussion, see https://groups.google.com/d/topic/golang-nuts/PXCr10DsRb4/discussion",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adg@golang.org",
		"kevlar@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 10 January 2013 18:48, <dave@cheney.net> wrote:\r\n\r\n> There is one case that I\r\n> could not solve, \"a\", \":\", \"b\" => \"a::b\", which is incorrect, because it\r\n> adds \".\" to the path.\r\n>\r\n\r\nJoinList([]string{\"a\", \":\", \"b\"}) == \"a:::b\"\r\nand that seems fine to me.\r\n\r\nWhy would someone put \":\" in there, anyway?\r\n",
			"disapproval": false,
			"date": "2013-01-10 22:58:14.095240",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7067049/diff/5001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7067049/diff/5001/src/pkg/path/filepath/path.go#newcode188\nsrc/pkg/path/filepath/path.go:188: func PathList(elem ...string) string {\nfilepath.PathList? ugh\n\nhttps://codereview.appspot.com/7067049/diff/5001/src/pkg/path/filepath/path.go#newcode189\nsrc/pkg/path/filepath/path.go:189: var result []byte\nwhy not just\nreturn strings.Join(path, string(ListSeparator))\n?!",
			"disapproval": false,
			"date": "2013-01-09 06:41:09.165610",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11 January 2013 08:49, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I think the bette solution is to resolve the ambiguity by expanding ^: ,\r\n> :$ and :: to .: :. And :.: respectively.\r\n\r\n\r\nI think we shouldn't mess with the data put in there by the user. If they\r\nwant to add :: to a path, so be it. We shouldn't assume they meant dot.\r\n",
			"disapproval": false,
			"date": "2013-01-10 22:58:43.862260",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After sleeping on it I think the bette solution is to resolve the ambiguity by expanding ^: , :$ and :: to .: :. And :.: respectively. This means round trips are no longer identical, but produce logically comparable results. \r\n\r\nOn 11/01/2013, at 7:47, kevlar@google.com wrote:\r\n\r\n> On 2013/01/10 07:48:40, dfc wrote:\r\n>> Please take another look.\r\n> \r\n>> If JoinList were as simple as strings.Join(..., ListSeparator) that\r\n> would be\r\n>> great, but the amount of code needed to pass all the test cases,\r\n> including round\r\n>> tripping, is worrying. There is one case that I could not solve, \"a\",\r\n> \":\", \"b\"\r\n>> => \"a::b\", which is incorrect, because it adds \".\" to the path.\r\n> \r\n> If join(\"a\", \":\") -> \"a:\" (which adds . to the path) then why is\r\n> join(\"a\", \":\", \"b\") -> \"a::b\" (or even \"a:::b\") not correct?  I would\r\n> expect join(join(x,y),z) <=> join(x,join(y,z)) <=> join(x,y,z) which is\r\n> already the case with `return strings.Join(elem, ListSeparator)`.  The\r\n> round trips will also be correct if my mental math is correct.\r\n> \r\n> https://codereview.appspot.com/7067049/\r\n",
			"disapproval": false,
			"date": "2013-01-10 22:01:44.478930",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks fine to me. I'd like to get API sign-off from rsc or iant before submitting though.\n\nhttps://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path.go#newcode187\nsrc/pkg/path/filepath/path.go:187: // ListSeperator  are split and recombined internally. Empty elements are\ns/  / /\n\nhttps://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttps://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path_test.go#newcode168\nsrc/pkg/path/filepath/path_test.go:168: var joinlisttests = []struct {\nI see no test for the :: case you called out in the discussion",
			"disapproval": false,
			"date": "2013-01-10 00:47:28.039840",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path.go#newcode193\nsrc/pkg/path/filepath/path.go:193: if l == \"\" {\nempty elements are valid path entries, it seems, so please change the behavior.\n\nalso i think now that this is the case, you might as well replace this function with\n\nif len(elem) == 0 {\n  return \"\"\n}\nreturn strings.Join(elem, string(ListSeparator))",
			"disapproval": false,
			"date": "2013-01-10 02:00:19.719660",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look. \n\nIf JoinList were as simple as strings.Join(..., ListSeparator) that would be great, but the amount of code needed to pass all the test cases, including round tripping, is worrying. There is one case that I could not solve, \"a\", \":\", \"b\" => \"a::b\", which is incorrect, because it adds \".\" to the path.\n\nhttps://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7067049/diff/4006/src/pkg/path/filepath/path.go#newcode187\nsrc/pkg/path/filepath/path.go:187: // ListSeperator  are split and recombined internally. Empty elements are\nOn 2013/01/10 00:47:28, adg wrote:\n> s/  / /\n\nDone.",
			"disapproval": false,
			"date": "2013-01-10 07:48:40.535320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments.\n\nhttps://codereview.appspot.com/7067049/diff/5001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7067049/diff/5001/src/pkg/path/filepath/path.go#newcode188\nsrc/pkg/path/filepath/path.go:188: func PathList(elem ...string) string {\nOn 2013/01/09 06:41:09, adg wrote:\n> filepath.PathList? ugh\n\nPathList was a previous suggestion, I have reverted to JoinList.\n\nhttps://codereview.appspot.com/7067049/diff/5001/src/pkg/path/filepath/path.go#newcode189\nsrc/pkg/path/filepath/path.go:189: var result []byte\nOn 2013/01/09 06:41:09, adg wrote:\n> why not just\n> return strings.Join(path, string(ListSeparator))\n> ?!\n\nWhile unix copes with lists like\n\nJAVA_CLASSPATH=/a:/b::\n\nI'm not sure that other operating systems with other separators do.\n\nHave a look at the test cases in path_test.go. If you think they are overkill, then I can make this function simpler.",
			"disapproval": false,
			"date": "2013-01-09 09:27:48.747200",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-09 09:33:22.339470",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Mail this to golang-dev.\r\n",
			"disapproval": false,
			"date": "2013-01-09 23:41:28.128940",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-10 00:29:31.950100",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 11, 2013 at 9:57 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n> On 10 January 2013 18:48, <dave@cheney.net> wrote:\r\n>>\r\n>> There is one case that I\r\n>> could not solve, \"a\", \":\", \"b\" => \"a::b\", which is incorrect, because it\r\n>> adds \".\" to the path.\r\n>\r\n>\r\n> JoinList([]string{\"a\", \":\", \"b\"}) == \"a:::b\"\r\n> and that seems fine to me.\r\n>\r\n> Why would someone put \":\" in there, anyway?\r\n\r\nBy mistake, this is something that filepath.Join guards against,\r\nhttp://play.golang.org/p/kNZXYQW8wH, so I think JoinList has to guard\r\nagainst it.\r\n\r\nPeterS / speter is right, JoinPath mustn't insert a cwd entry into the\r\npath while joining unless it was there already. If it does, then it is\r\nno better than strings.Join(..., ListSeparator), and should not be in\r\nthe std library.\r\n\r\nI'm going to take one more swing at this and if that dones't work out,\r\nabandon the idea. While I dont' like the idea of people hand rolling\r\ntheir own solution for this, we discourage string munging where\r\nfilepath.Join() is appropriate, if I can't come up with a correct\r\nJoinList implementation, it doesn't belong in the std lib.\r\n\r\nCheers\r\n\r\nDave\r\n",
			"disapproval": false,
			"date": "2013-01-10 23:08:21.172470",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/10 07:48:40, dfc wrote:\n> Please take another look. \n> \n> If JoinList were as simple as strings.Join(..., ListSeparator) that would be\n> great, but the amount of code needed to pass all the test cases, including round\n> tripping, is worrying. There is one case that I could not solve, \"a\", \":\", \"b\"\n> => \"a::b\", which is incorrect, because it adds \".\" to the path.\n\nIf join(\"a\", \":\") -> \"a:\" (which adds . to the path) then why is join(\"a\", \":\", \"b\") -> \"a::b\" (or even \"a:::b\") not correct?  I would expect join(join(x,y),z) <=> join(x,join(y,z)) <=> join(x,y,z) which is already the case with `return strings.Join(elem, ListSeparator)`.  The round trips will also be correct if my mental math is correct.",
			"disapproval": false,
			"date": "2013-01-10 20:47:02.385730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After sleeping on it I think the bette solution is to resolve the ambiguity by expanding ^: , :$ and :: to .: :. And :.: respectively. This means round trips are no longer identical, but produce logically comparable results. \r\n\r\nOn 11/01/2013, at 7:47, kevlar@google.com wrote:\r\n\r\n> On 2013/01/10 07:48:40, dfc wrote:\r\n>> Please take another look.\r\n> \r\n>> If JoinList were as simple as strings.Join(..., ListSeparator) that\r\n> would be\r\n>> great, but the amount of code needed to pass all the test cases,\r\n> including round\r\n>> tripping, is worrying. There is one case that I could not solve, \"a\",\r\n> \":\", \"b\"\r\n>> => \"a::b\", which is incorrect, because it adds \".\" to the path.\r\n> \r\n> If join(\"a\", \":\") -> \"a:\" (which adds . to the path) then why is\r\n> join(\"a\", \":\", \"b\") -> \"a::b\" (or even \"a:::b\") not correct?  I would\r\n> expect join(join(x,y),z) <=> join(x,join(y,z)) <=> join(x,y,z) which is\r\n> already the case with `return strings.Join(elem, ListSeparator)`.  The\r\n> round trips will also be correct if my mental math is correct.\r\n> \r\n> https://codereview.appspot.com/7067049/\r\n",
			"disapproval": false,
			"date": "2013-01-10 21:50:21.023090",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 10, 2013 at 6:08 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> On Fri, Jan 11, 2013 at 9:57 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n> >\r\n> > On 10 January 2013 18:48, <dave@cheney.net> wrote:\r\n> >>\r\n> >> There is one case that I\r\n> >> could not solve, \"a\", \":\", \"b\" => \"a::b\", which is incorrect, because it\r\n> >> adds \".\" to the path.\r\n> >\r\n> >\r\n> > JoinList([]string{\"a\", \":\", \"b\"}) == \"a:::b\"\r\n> > and that seems fine to me.\r\n> >\r\n> > Why would someone put \":\" in there, anyway?\r\n>\r\n> By mistake, this is something that filepath.Join guards against,\r\n> http://play.golang.org/p/kNZXYQW8wH, so I think JoinList has to guard\r\n> against it.\r\n>\r\n\r\nI think that's because a///b is a/b when you clean the path; a:::b is not\r\nequivalent to a:b.\r\n\r\n\r\n> PeterS / speter is right, JoinPath mustn't insert a cwd entry into the\r\n> path while joining unless it was there already. If it does, then it is\r\n> no better than strings.Join(..., ListSeparator), and should not be in\r\n> the std library.\r\n>\r\n> I'm going to take one more swing at this and if that dones't work out,\r\n> abandon the idea. While I dont' like the idea of people hand rolling\r\n> their own solution for this, we discourage string munging where\r\n> filepath.Join() is appropriate, if I can't come up with a correct\r\n> JoinList implementation, it doesn't belong in the std lib.\r\n>\r\n> Cheers\r\n>\r\n> Dave\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-11 18:51:30.491900",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11 January 2013 10:08, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> PeterS / speter is right, JoinPath mustn't insert a cwd entry into the\r\n> path while joining unless it was there already. If it does, then it is\r\n> no better than strings.Join(..., ListSeparator), and should not be in\r\n> the std library.\r\n>\r\n\r\nI'm confused by this argument.\r\n\r\n  strings.Join([]string{\"a:\", \"b\"}, ListSeparator)\r\n\r\ndoes not introduce a cwd entry. It's already there. In \"a:\", which is a\r\nlist of \"a\" and \"\" (cwd).\r\n\r\nI think we can just say \"JoinList joins a list of paths or path lists into\r\na single path list string, separated by ListSeparator.\" This means that\r\nlist elements containing the list separator should be considered lists\r\nthemselves.\r\n\r\nTrying to escape the list separator character is not worth our while, and\r\nwe have precedent: SplitList doesn't do it.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2013-01-14 00:29:20.223920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the delay. I was not able to work on this proposal today. I\r\nhope to have time tomorrow evening.\r\n\r\nOn Mon, Jan 14, 2013 at 11:28 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n> On 11 January 2013 10:08, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> PeterS / speter is right, JoinPath mustn't insert a cwd entry into the\r\n>> path while joining unless it was there already. If it does, then it is\r\n>> no better than strings.Join(..., ListSeparator), and should not be in\r\n>> the std library.\r\n>\r\n>\r\n> I'm confused by this argument.\r\n>\r\n>   strings.Join([]string{\"a:\", \"b\"}, ListSeparator)\r\n>\r\n> does not introduce a cwd entry. It's already there. In \"a:\", which is a list\r\n> of \"a\" and \"\" (cwd).\r\n>\r\n> I think we can just say \"JoinList joins a list of paths or path lists into a\r\n> single path list string, separated by ListSeparator.\" This means that list\r\n> elements containing the list separator should be considered lists\r\n> themselves.\r\n>\r\n> Trying to escape the list separator character is not worth our while, and we\r\n> have precedent: SplitList doesn't do it.\r\n>\r\n> Andrew\r\n",
			"disapproval": false,
			"date": "2013-01-14 11:44:35.235720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7067049/diff/7003/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7067049/diff/7003/src/pkg/path/filepath/path.go#newcode185\nsrc/pkg/path/filepath/path.go:185: // JoinList joins any number of list elements into a single list, adding an\nOn Unix, I think this should do:\n\nfunc JoinList(elem ...string) string {\n    return strings.Join(elem, string(ListSeparator))\n}\n\nTreating individual elem[i] as if they were implicit lists to be split and rejoined causes confusing ambiguity. Worse, on Windows we apparently have to deal with the fact that lists can have the separator, quoted, in an element. So SplitList is going to have to unquote and JoinList is going to have to requote.",
			"disapproval": false,
			"date": "2013-01-31 01:41:45.899670",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 7067049: path/filepath: add JoinList",
	"created": "2013-01-07 07:20:04.124870",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		2005,
		4006,
		7003
	],
	"modified": "2013-01-31 01:41:45.899670",
	"closed": false,
	"issue": 7067049
}