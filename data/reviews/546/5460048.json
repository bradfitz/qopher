{
	"description": "crypto/des: Speedup of encryption/decryption\n\n        Some optimizations increase the speed significantly:\n\n        The three-dimensional Sboxes are converted to an internal\n        one-dimensional array, where the access to a specific\n        element is not done with sbox[i][row][column] including a\n        lot of shifting and masking for the calculation of row\n        and column any more, but with a simpler access to\n        internalSbox[idx]. The shifting and masking is moved from\n        encryption/decryption time to initialization time. I left\n        the original Sboxes unmodified, so that it can easily be\n        checked for the correct Sbox coefficients.\n\n        In block.go, cryptBlock(), the former loop is unrolled. The\n        loop should not cost so much, but at least the check for\n        encryption or decryption should be moved out of the loop.\n\n        The general purpose permuteBlock() is replaced/added by\n        expandBlock() and pbox(), which do their job much faster\n        than the generic function. This is where where most of the\n        speed gain is coming from.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rogpeppe@gmail.com",
		"agl@golang.org"
	],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "can you post a benchmark comparison?\n\nOn 8 December 2011 10:31,  <nroos@webware-experts.de> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> crypto/des: Speedup of encryption/decryption\n>\n> \u00a0 \u00a0 \u00a0 \u00a0Some optimizations increase the speed significantly:\n>\n> \u00a0 \u00a0 \u00a0 \u00a0The three-dimensional Sboxes are converted to an internal\n> \u00a0 \u00a0 \u00a0 \u00a0one-dimensional array, where the access to a specific\n> \u00a0 \u00a0 \u00a0 \u00a0element is not done with sbox[i][row][column] including a\n> \u00a0 \u00a0 \u00a0 \u00a0lot of shifting and masking for the calculation of row\n> \u00a0 \u00a0 \u00a0 \u00a0and column any more, but with a simpler access to\n> \u00a0 \u00a0 \u00a0 \u00a0internalSbox[idx]. The shifting and masking is moved from\n> \u00a0 \u00a0 \u00a0 \u00a0encryption/decryption time to initialization time. I left\n> \u00a0 \u00a0 \u00a0 \u00a0the original Sboxes unmodified, so that it can easily be\n> \u00a0 \u00a0 \u00a0 \u00a0checked for the correct Sbox coefficients.\n>\n> \u00a0 \u00a0 \u00a0 \u00a0In block.go, cryptBlock(), the former loop is unrolled. The\n> \u00a0 \u00a0 \u00a0 \u00a0loop should not cost so much, but at least the check for\n> \u00a0 \u00a0 \u00a0 \u00a0encryption or decryption should be moved out of the loop.\n>\n> \u00a0 \u00a0 \u00a0 \u00a0The general purpose permuteBlock() is replaced/added by\n> \u00a0 \u00a0 \u00a0 \u00a0expandBlock() and pbox(), which do their job much faster\n> \u00a0 \u00a0 \u00a0 \u00a0than the generic function. This is where where most of the\n> \u00a0 \u00a0 \u00a0 \u00a0speed gain is coming from.\n>\n> Please review this at http://codereview.appspot.com/5460048/\n>\n> Affected files:\n> \u00a0M src/pkg/crypto/des/block.go\n> \u00a0M src/pkg/crypto/des/cipher.go\n>\n>\n",
			"disapproval": false,
			"date": "2011-12-08 11:43:10.726225",
			"approval": false
		},
		{
			"sender": "nroos@webware-experts.de",
			"recipients": [
				"nroos@webware-experts.de",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-08 10:31:28.310017",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"nroos@webware-experts.de",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The code is a little uglier, but the speedups are certainly nice. Apart from one loop unrolling I would probably favour landing this, however I don't see you in the CONTRIBUTORS file.\n\nPlease see http://golang.org/doc/contribute.html#copyright\n\nhttp://codereview.appspot.com/5460048/diff/4001/src/pkg/crypto/des/block.go\nFile src/pkg/crypto/des/block.go (right):\n\nhttp://codereview.appspot.com/5460048/diff/4001/src/pkg/crypto/des/block.go#newcode17\nsrc/pkg/crypto/des/block.go:17: left, right = right, left^feistel(right, subkeys[15])\nMoving the condition out of the loop makes sense but, unless it's a really big speedup (which I doubt), I would tend not to manually unroll the loop.",
			"disapproval": false,
			"date": "2011-12-08 15:54:32.789985",
			"approval": false
		}
	],
	"owner_email": "nroos@webware-experts.de",
	"private": false,
	"base_url": "",
	"owner": "nroos",
	"subject": "code review 5460048: crypto/des: Speedup of encryption/decryption",
	"created": "2011-12-08 09:58:09.595368",
	"patchsets": [
		1,
		1001,
		4001
	],
	"modified": "2011-12-08 15:54:32.789985",
	"closed": false,
	"issue": 5460048
}