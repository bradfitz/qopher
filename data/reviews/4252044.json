{
	"description": "path/filepath: new OS-specific path support\n\nThe path package now contains only functions which\ndeal with slashed paths, sensible for any OS when dealing\nwith network paths or URLs.  OS-specific functionality\nhas been moved into the new path/filepath package.\n\nThis also includes fixes for godoc, goinstall and other\npackages which were mixing slashed and OS-specific paths.",
	"cc": [
		"rsc@golang.org",
		"gri@golang.org",
		"mattn.jp@gmail.com",
		"alex.brainman@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@google.com"
	],
	"messages": [
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> I tried to apply this change but it has a circular\n> dependency: path/filepath -> io/ioutil -> path/filepath.\n\nOops, sorry.  Also had to change the test module name,\nsince there was another loop with testing.\n\nShould be good now.",
			"disapproval": false,
			"date": "2011-03-06 21:26:18.662864",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Mar 3, 2011 at 13:21,  <gri@golang.org> wrote:\n> FYI.\n>\n> I think the godoc changes look good so far. Of course we will find out\n> for sure once we run it...\n>\n>\n> http://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go\n> File src/cmd/godoc/mapping.go (right):\n>\n> http://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go#newcode164\n> src/cmd/godoc/mapping.go:164: prefix, tail := splitFirst(path)\n> On 2011/03/03 16:37:50, rsc wrote:\n>>\n>> if filepath.Separator != '/' {\n>> \u00a0 \u00a0 tail = strings.Replace(tail, \"/\", string(filepath.Separator), -1)\n>> }\n>\n> What if / is a legal character in a name? Perhaps not an issue in\n> practice?\n\nin practice / is treated as a separator on every system we use.\neven on windows while \\ is preferred / is recognized.\n",
			"disapproval": false,
			"date": "2011-03-03 19:07:22.141342",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> For instance, under Unix, the argument:\n\nDone.",
			"disapproval": false,
			"date": "2011-03-06 19:20:08.286403",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> How do we deal with paths like that:\n>\n> G:\\alex>gofmt -l c:\\tmp\\go\\src\\pkg\\path\\path.go\n>\n> G:\\alex>gofmt -l c:/tmp/go/src/pkg/path/path.go\n>\n> G:\\alex>\n>\n> ?\n\nThey should do the same thing, whatever that is.\nfilepath.Clean should convert / to \\ on Windows.\n\n> I think filepath.Separator is pretty pointless outside of filepath package.\n\nThat may be true.  Let's wait and see.\n\n> Another issue with Windows paths, they are non case-sensitive. These\n>\n> c:\\tmp\\alex.txt and C:\\tmp\\alex.txt and C:\\Tmp\\Alex.TXT\n>\n> are all the same file. So code like this (from godoc):\n>\n> func (m *Mapping) ToRelative(fpath string) string {\n> \u00a0 \u00a0 \u00a0 \u00a0for _, e := range m.list {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if strings.HasPrefix(fpath, e.path) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0spath := filepath.ToSlash(fpath)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// /absolute/prefix/foo -> prefix/foo\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return path.Join(e.prefix, spath[len(e.path):]) //\n> Join will remove\n> a trailing '/'\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0return \"\" // no match\n> }\n>\n> with strings.HasPrefix is not going to work.\n\nThat code should be okay, because it is only ever translating\npaths that it created itself using the prefixes it is looking for.\nBut in general you're right that that's something to watch out for.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-03-09 04:48:02.597146",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Have I better to merge in another CL for my windows patch?\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/dirtrees.go\nFile src/cmd/godoc/dirtrees.go (left):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/dirtrees.go#oldcode17\nsrc/cmd/godoc/dirtrees.go:17: pathutil \"path\"\n(For my note, I should change the part that checking '/' as path separator using fileutil.IsDirSep(). perhaps, include my CL: http://codereview.appspot.com/3989064/)",
			"disapproval": false,
			"date": "2011-03-01 00:19:27.388724",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4252044/diff/20038/src/cmd/godoc/mapping.go\nFile src/cmd/godoc/mapping.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/20038/src/cmd/godoc/mapping.go#newcode75\nsrc/cmd/godoc/mapping.go:75: // For instance, in a Linux OS, the argument:\nlet's not mention linux unless absolutely necessary.\n\nFor instance, under Unix, the argument:",
			"disapproval": false,
			"date": "2011-03-06 19:09:31.299631",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "If you copy the filepath files somewhere else and then\nremove them and hg remove them, you should be able\nto do\n\nhg cp path/match.go filepath/match.go\netc\n\nand then copy the real ones back, and we'll see more\nuseful diffs.\n\nPlease give that a shot.  It may not work (yay Mercurial)\nbut I think it is likely to work.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-03-01 05:01:03.247885",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "FYI.\n\nI think the godoc changes look good so far. Of course we will find out for sure once we run it...\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go\nFile src/cmd/godoc/mapping.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go#newcode164\nsrc/cmd/godoc/mapping.go:164: prefix, tail := splitFirst(path)\nOn 2011/03/03 16:37:50, rsc wrote:\n> if filepath.Separator != '/' {\n>     tail = strings.Replace(tail, \"/\", string(filepath.Separator), -1)\n> }\n\nWhat if / is a legal character in a name? Perhaps not an issue in practice?",
			"disapproval": false,
			"date": "2011-03-03 18:21:09.290368",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/03/03 19:07:22, rsc wrote:\n> \n> in practice / is treated as a separator on every system we use.\n> even on windows while \\ is preferred / is recognized.\n\nFrom what I've seen so far, all Windows API accept / in place of \\.\n\nBut this rule doesn't work when applied to individual programs. Passing file name with / instead of \\ will trick most of Windows programs. In fact / is often used as a start of optional parameters (unix equivalent of -). Here to demonstrate:\n\nC:\\>mkdir tt\n\nC:\\>echo > tt\\a.txt\n\nC:\\>dir tt\n Volume in drive C is Local Disk\n Volume Serial Number is C458-E628\n\n Directory of C:\\tt\n\n04/03/2011  09:28a      <DIR>          .\n04/03/2011  09:28a      <DIR>          ..\n04/03/2011  09:28a                  13 a.txt\n               1 File(s)             13 bytes\n               2 Dir(s)   5,175,754,752 bytes free\n\nC:\\>dir \\tt\n Volume in drive C is Local Disk\n Volume Serial Number is C458-E628\n\n Directory of C:\\tt\n\n04/03/2011  09:28a      <DIR>          .\n04/03/2011  09:28a      <DIR>          ..\n04/03/2011  09:28a                  13 a.txt\n               1 File(s)             13 bytes\n               2 Dir(s)   5,175,754,752 bytes free\n\nC:\\>dir /tt\nParameter format not correct - \"t\".\n\nC:\\>dir /?\nDisplays a list of files and subdirectories in a directory.\n\nDIR [drive:][path][filename] [/A[[:]attributes]] [/B] [/C] [/D] [/L] [/N]\n  [/O[[:]sortorder]] [/P] [/Q] [/S] [/T[[:]timefield]] [/W] [/X] [/4]\n\n  [drive:][path][filename]\n              Specifies drive, directory, and/or files to list.\n\n  /A          Displays files with specified attributes.\n  attributes   D  Directories                R  Read-only files\n               H  Hidden files               A  Files ready for archiving\n               S  System files               -  Prefix meaning not\n  /B          Uses bare format (no heading information or summary).\n  /C          Display the thousand separator in file sizes.  This is the\n              default.  Use /-C to disable display of separator.\n  /D          Same as wide but files are list sorted by column.\n  /L          Uses lowercase.\n  /N          New long list format where filenames are on the far right.\n  /O          List by files in sorted order.\n  sortorder    N  By name (alphabetic)       S  By size (smallest first)\n               E  By extension (alphabetic)  D  By date/time (oldest first)\n               G  Group directories first    -  Prefix to reverse order\n  /P          Pauses after each screenful of information.\n  /Q          Display the owner of the file.\n  /S          Displays files in specified directory and all subdirectories.\n  /T          Controls which time field displayed or used for sorting\n  timefield   C  Creation\n              A  Last Access\n              W  Last Written\n  /W          Uses wide list format.\n  /X          This displays the short names generated for non-8dot3 file\n              names.  The format is that of /N with the short name inserted\n              before the long name. If no short name is present, blanks are\n              displayed in its place.\n  /4          Displays four-digit years\n\nSwitches may be preset in the DIRCMD environment variable.  Override\npreset switches by prefixing any switch with - (hyphen)--for example, /-W.\n\nC:\\>\n\nAlex",
			"disapproval": false,
			"date": "2011-03-03 22:31:46.059747",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> i want separator to be a char not a string\n\nFeels much better.  PTAL",
			"disapproval": false,
			"date": "2011-03-02 23:40:09.144954",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-02-28 22:56:22.904478",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/03/01 22:14:06, niemeyer wrote:\n\n> > This won't work for filenames like \"tmp/test.txt\" on\n> > windows. I'm sure we want\n> \n> Is that a valid path on Windows?\n> \n\nIt sure works in some situations:\n\nC:\\TMP>mkdir tmp\n\nC:\\TMP>echo alex > tmp/test.txt\n\nC:\\TMP>dir tmp\n Volume in drive C is Local Disk\n Volume Serial Number is C458-E628\n\n Directory of C:\\TMP\\tmp\n\n02/03/2011  10:33a      <DIR>          .\n02/03/2011  10:33a      <DIR>          ..\n02/03/2011  10:33a                   7 test.txt\n               1 File(s)              7 bytes\n               2 Dir(s)   5,476,302,848 bytes free\n\nC:\\TMP>\n\nAlso, from http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx:\n\n\"... Note  File I/O functions in the Windows API convert \"/\" to \"\\\" as part of converting the name to an NT-style name ...\"\n\n> > The test fails on windows:\n> \n> Both Glob and Match were OS-specific, so they were (and continue to be) broken\n> on Windows.  A following CL should address this.\n> \n\nSure.\n\n> Should the test be disabled for the moment?\n\nI don't think test should be disabled for the moment.\nThese test work now. They should work after this CL is applied.\nAs Russ said, let's change nothing, let's just rearrange things (split path into path + filepath).\n\nAlex",
			"disapproval": false,
			"date": "2011-03-01 23:57:06.319197",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> That's done. PTAL\n\nBy the way, one alternative to having filepath.Separators\nbeing a set of separators would be having it as the default\nseparator only (Separator = \"\\\\\", for Windows) and then\nhaving a separate public or private variable with the full\nset to be used in Split, so that it can deal with slashed\npaths as well.\n\nHow do you feel about this?\n\nI still feel slightly awkward about the multiple conventions\nin Windows and having to have a list of chars in Separators,\nbut maybe it's still the surprise of mixed paths being\naccepted.",
			"disapproval": false,
			"date": "2011-03-02 21:46:41.594967",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Figuring some of the changes may be a bit less comfortable\ndue to the copying of the files.  If you want, there's a\ndetailed history with diffs of the individual changes at:\n\nhttps://github.com/niemeyer/golang/commits/4252044-filepath-split",
			"disapproval": false,
			"date": "2011-02-28 22:59:27.578516",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> It sure works in some situations:\n(...)\n> \"... Note  File I/O functions in the Windows API convert \"/\" to \"\\\" as part of\n> converting the name to an NT-style name ...\"\n\nInteresting, thanks for pointing that out.\n\nCan you please verify if the two separators can be mixed as well?\n\n> These test work now. They should work after this CL is applied.\n> As Russ said, let's change nothing\n\nThe test broke also because of the handling of slashes,\nso if slashed paths are supposed to be supported in\nWindows, I'll certainly fix that.\n \nEither way, don't worry too much about it.  These functions\nwere really broken on Windows before, and will continue to be.\nThe test passes just because of the paths selected for testing.\nLet's handle the splitting properly so that the real fixes for\nWindows can move on.",
			"disapproval": false,
			"date": "2011-03-02 10:41:17.863034",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> It looks like it does:\n\nThanks for checking that out.\n\n> C:\\Documents and Settings\\aa>echo alex > tmp\\tmp2\\/f\n\nUgh.. that's unfortunate.\n\nSeparators are now multiple entries again.  We'll have to\nestablish some kind of special role for the very first entry\nthere, for usage in Join and similar, but that should be\nalright.\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-03-02 19:45:24.601080",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> please drop the windows support in this CL.\n> just use path_unix.go for the windows build.\n> i want to keep windows separate.\n\nThat's done. PTAL",
			"disapproval": false,
			"date": "2011-03-02 20:03:43.922923",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> Sounds good. I'll handle these in my flight back home tomorrow.\n> Should be up for review on Monday.\n\nAlright, filepath now contains FromSlash, ToSlash, ListSeparator,\nand SplitList.  Also, godoc, goinstall, and ioutil/tempfile were\nchanged to make use of filepath.\n\nThis is getting rather large, so I suggest we try to focus on\npolishing the existing changes, and handle any other previously\nexisting issues in separate CLs.\n\nAgain, if you want a more fine grained sequential list of changes,\nthe following is up-to-date:\n\nhttps://github.com/niemeyer/golang/commits/4252044-filepath-split\n\nPTAL",
			"disapproval": false,
			"date": "2011-03-06 19:00:36.916306",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/03/02 10:41:17, niemeyer wrote:\n> Can you please verify if the two separators can be mixed as well?\n> \n\nIt looks like it does:\n\nC:\\Documents and Settings\\aa>mkdir tmp\n\nC:\\Documents and Settings\\aa>mkdir tmp\\tmp2\n\nC:\\Documents and Settings\\aa>echo alex > tmp/tmp2\\a\n\nC:\\Documents and Settings\\aa>echo alex > tmp\\tmp2/b\n\nC:\\Documents and Settings\\aa>echo alex > tmp/tmp2/c\n\nC:\\Documents and Settings\\aa>echo alex > tmp\\tmp2\\d\n\nC:\\Documents and Settings\\aa>echo alex > tmp\\tmp2\\\\e\n\nC:\\Documents and Settings\\aa>echo alex > tmp\\tmp2\\/f\n\nC:\\Documents and Settings\\aa>\n\nAlex",
			"disapproval": false,
			"date": "2011-03-02 11:18:49.484235",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "please drop the windows support in this CL.\njust use path_unix.go for the windows build.\ni want to keep windows separate.\n",
			"disapproval": false,
			"date": "2011-03-02 19:47:20.363773",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for doing this.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go#newcode16\nsrc/pkg/path/filepath/path.go:16: // BUG(niemeyer): Windows support is missing in Clean, Join, Ext, Walk, Base, IsAbs and Match.\ns/BUG/TODO/\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go#newcode36\nsrc/pkg/path/filepath/path.go:36: func Clean(path string) string {\nShouldn't you just call path.Clean instead?\nFor now these two are identical anyway.\nSame for many others.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go#newcode109\nsrc/pkg/path/filepath/path.go:109: const pathSeps = Separator + VolumeSeparator\nThis won't work for filenames like \"tmp/test.txt\" on windows. I'm sure we want to keep these working.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_test.go#newcode6\nsrc/pkg/path/filepath/path_test.go:6: \nThe test fails on windows:\n\n--- FAIL: filepath.TestGlob (0.0 seconds)\n\tGlob(`../*/match.go`) = []string{} want ../filepath/match.go\n--- FAIL: filepath.TestWalk (0.4 seconds)\n\t1. error expected, none found\n\tnode testdata/d/x mark = 2; expected 1\n\tnode testdata/d/y mark = 2; expected 1\n\tnode testdata/d/z mark = 2; expected 1\n\tnode testdata/d/z/u mark = 2; expected 1\n\tnode testdata/d/z/v mark = 2; expected 1\nFAIL\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/path.go\nFile src/pkg/path/path.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/path.go#newcode160\nsrc/pkg/path/path.go:160: // TODO: Add Windows support\nPlease, remove TODO.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/path.go#newcode161\nsrc/pkg/path/path.go:161: return strings.HasPrefix(path, \"/\")\nPerhaps, you could inline it:\nreturn len(path) > 0 && path[0] == '/'",
			"disapproval": false,
			"date": "2011-03-01 05:42:53.812099",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I'm happy with path and filepath\nmodulo the below minor comments.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/match.go#newcode213\nsrc/pkg/path/filepath/match.go:213: // /usr/*/bin/ed, assuming Separator is '/'.\n/usr/*/bin/ed (assuming the Separator is '/').\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode6\nsrc/pkg/path/filepath/path.go:6: // filename paths in a way compatible with the target operating\n// operating system-defined file paths.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode16\nsrc/pkg/path/filepath/path.go:16: // BUG(niemeyer): Windows support is missing in Clean, Join, Ext, Walk, Base, IsAbs and Match.\n// BUG(niemeyer): Package filepath does not yet work on Windows.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode111\nsrc/pkg/path/filepath/path.go:111: // In operating systems where VolumeSeparator is not empty and\ndelete this sentence\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode116\nsrc/pkg/path/filepath/path.go:116: func Split(path string) (base, file string) {\nwhy did this get renamed to base?\nit's very different than, say, filepath.Base.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode134\nsrc/pkg/path/filepath/path.go:134: // in the final Separator-partitioned element of path;\ns/Separator-partitioned //\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode193\nsrc/pkg/path/filepath/path.go:193: // Base returns the last path element of the Separator-partitioned name.\nrename name to path\n\n// Base returns the last element of path.\n// Trailing path separators are removed before extracting the last element.\n// If the path is empty, Base returns \".\".\n// If the path consists entirely of separators, Base returns a single separator.",
			"disapproval": false,
			"date": "2011-03-03 16:14:13.814088",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "FYI. Superficial stuff from cursory review.\n- gri\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/godoc.go#newcode250\nsrc/cmd/godoc/godoc.go:250: // BUG(niemeyer): Slashed and OS-specific paths are being mixed in several places.\nTo make this clean in general, there will be a need for a set of conversion functions that takes a path extracted from a URL and converts it into a file path, and vice versa. Explain and add a TODO.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/godoc.go#newcode726\nsrc/cmd/godoc/godoc.go:726: \nThe style in this file is two empty lines between functions.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/mapping.go\nFile src/cmd/godoc/mapping.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/mapping.go#newcode157\nsrc/cmd/godoc/mapping.go:157: \ntwo empty lines between functions please\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/Makefile\nFile src/pkg/path/filepath/Makefile (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/Makefile#newcode1\nsrc/pkg/path/filepath/Makefile:1: # Copyright 2009 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode1\nsrc/pkg/path/filepath/match.go:1: package filepath\nneeds a copyright notice\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode13\nsrc/pkg/path/filepath/match.go:13: // The syntax used by pattern is:\nThe pattern syntax is:\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode78\nsrc/pkg/path/filepath/match.go:78: // scanChunk gets the next section of pattern, which is a non-star string\nthe next chunk of pattern ?\n\n(or use \"segment\" instead of \"chunk\" ?)\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode95\nsrc/pkg/path/filepath/match.go:95: continue\nthis continue is superfluous\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode277\nsrc/pkg/path/filepath/match.go:277: return strings.IndexAny(path, \"*?[\") != -1\ns/!= -1/>= 0/\n\nno need to know that the failure value is -1\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode277\nsrc/pkg/path/filepath/match.go:277: return strings.IndexAny(path, \"*?[\") != -1\nthere seem to be more magic characters in the syntax\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match_test.go\nFile src/pkg/path/filepath/match_test.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match_test.go#newcode1\nsrc/pkg/path/filepath/match_test.go:1: // Copyright 2009 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go#newcode1\nsrc/pkg/path/filepath/path.go:1: // Copyright 2009 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_test.go#newcode1\nsrc/pkg/path/filepath/path_test.go:1: // Copyright 2009 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_unix.go\nFile src/pkg/path/filepath/path_unix.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_unix.go#newcode1\nsrc/pkg/path/filepath/path_unix.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_windows.go\nFile src/pkg/path/filepath/path_windows.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_windows.go#newcode1\nsrc/pkg/path/filepath/path_windows.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/match.go\nFile src/pkg/path/match.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/match.go#newcode1\nsrc/pkg/path/match.go:1: package path\nneeds a copyright notice",
			"disapproval": false,
			"date": "2011-02-28 23:54:43.595043",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Feb 28, 2011 at 19:19,  <mattn.jp@gmail.com> wrote:\n> Have I better to merge in another CL for my windows patch?\n\nWindows support is still a work in progress for all of Go.\nThis CL is about creating a filepath that works on Unix and\nupdating the various files that should use it.  A second CL\ncan fix the Windows support in filepath separately.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-03-01 04:58:50.796830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Mar 2, 2011 at 16:46,  <n13m3y3r@gmail.com> wrote:\n>> That's done. PTAL\n>\n> By the way, one alternative to having filepath.Separators\n> being a set of separators would be having it as the default\n> separator only (Separator = \"\\\\\", for Windows) and then\n> having a separate public or private variable with the full\n> set to be used in Split, so that it can deal with slashed\n> paths as well.\n>\n> How do you feel about this?\n\ni want separator to be a char not a string\n",
			"disapproval": false,
			"date": "2011-03-02 22:10:58.957572",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> Even though we are not doing Windows support for package filepath,\n> if we're going to go through path vs filepath we might as well make\n> the changes so that it will be correct once filepath does Windows.\n\nSounds good. I'll handle these in my flight back home tomorrow.\nShould be up for review on Monday.",
			"disapproval": false,
			"date": "2011-03-04 11:35:50.478449",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "All comments addressed and/or replied to.\n\nRuss, I've followed your suggestion (using hg cp --after), and that has indeed produced reasonable diffs.  Thanks.\n\nShould be ready for another look.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/godoc.go#newcode250\nsrc/cmd/godoc/godoc.go:250: // BUG(niemeyer): Slashed and OS-specific paths are being mixed in several places.\nChanged to a TODO and added those notes.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/godoc.go#newcode726\nsrc/cmd/godoc/godoc.go:726: \nSorry. Removed the space by mistake when taking a comment out.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/mapping.go\nFile src/cmd/godoc/mapping.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/cmd/godoc/mapping.go#newcode157\nsrc/cmd/godoc/mapping.go:157: \nFixed.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/Makefile\nFile src/pkg/path/filepath/Makefile (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/Makefile#newcode1\nsrc/pkg/path/filepath/Makefile:1: # Copyright 2009 The Go Authors. All rights reserved.\nI believe 2009 is right.  The content was just copied over.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode1\nsrc/pkg/path/filepath/match.go:1: package filepath\n> needs a copyright notice\n\nAdded a 2010 (original creation) notice on both path/match.go and filepath/match.go.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode13\nsrc/pkg/path/filepath/match.go:13: // The syntax used by pattern is:\n> The pattern syntax is:\n\nFixed all of these style issues in both filepath and path\nitself.  Please note that the content was just copied over\nin this and in the cases below.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/match.go#newcode277\nsrc/pkg/path/filepath/match.go:277: return strings.IndexAny(path, \"*?[\") != -1\n> there seem to be more magic characters in the syntax\n\nThat was also copied over, and it's a semantic change\nwhich requires a proper test in its own CL, so I've\njust added a comment for now.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go#newcode16\nsrc/pkg/path/filepath/path.go:16: // BUG(niemeyer): Windows support is missing in Clean, Join, Ext, Walk, Base, IsAbs and Match.\n> s/BUG/TODO/\n\nThis is really a bug IMO.  The filepath package now promises to be OS-specific, but cannot handle that specific OS.  Just yesterday we had a report about it in the mailing list.\n\nIt should be fixed very shortly, in a separate CL, but right now it's indeed a bug.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go#newcode36\nsrc/pkg/path/filepath/path.go:36: func Clean(path string) string {\n> Shouldn't you just call path.Clean instead?\n\nI pondered about it too, but the next CL which implements OS-specific logic will have to diverge.  I suggest waiting\nuntil this is made generic before dropping logic.\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path.go#newcode109\nsrc/pkg/path/filepath/path.go:109: const pathSeps = Separator + VolumeSeparator\n> This won't work for filenames like \"tmp/test.txt\" on\n> windows. I'm sure we want\n\nIs that a valid path on Windows?\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/filepath/path_test.go#newcode6\nsrc/pkg/path/filepath/path_test.go:6: \n> The test fails on windows:\n\nBoth Glob and Match were OS-specific, so they were (and continue to be) broken on Windows.  A following CL should address this.\n\nShould the test be disabled for the moment?\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/path.go\nFile src/pkg/path/path.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/1002/src/pkg/path/path.go#newcode161\nsrc/pkg/path/path.go:161: return strings.HasPrefix(path, \"/\")\nSounds good, thanks.",
			"disapproval": false,
			"date": "2011-03-01 22:14:06.677422",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "@gri: please read over the godoc changes.\n\nEven though we are not doing Windows support for package filepath,\nif we're going to go through path vs filepath we might as well make\nthe changes so that it will be correct once filepath does Windows.\n\nI think we should add the below functions, for godoc and probably\nothers to use:\n\npackage filepath\n\n// ToSlash returns the result of replacing each separator character\n// in path with a slash ('/') character.\nfunc ToSlash(path string) string\n\n// FromSlash returns the result of replacing each slash ('/') character\n// in path with a separator character.\nfunc FromSlash(path string) string\n\nI bet http's file server could make use of these too.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/godoc.go#newcode250\nsrc/cmd/godoc/godoc.go:250: // TODO(niemeyer): Slashed and OS-specific paths are being mixed in several places.\n// Absolute paths are file system paths (backslash-separated on Windows),\n// but relative paths are always slash-separated.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/godoc.go#newcode258\nsrc/cmd/godoc/godoc.go:258: abspath = filepath.Join(defaultRoot, path)\nneeds a conversion of path / to \\.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/godoc.go#newcode264\nsrc/cmd/godoc/godoc.go:264: func relativePath(path string) string {\nrelativeURL\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/godoc.go#newcode267\nsrc/cmd/godoc/godoc.go:267: // prefix must end in '/'\nneeds a conversion of \\ to /\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go\nFile src/cmd/godoc/mapping.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go#newcode84\nsrc/cmd/godoc/mapping.go:84: pathlist := canonicalizePaths(strings.Split(paths, \":\", -1), nil)\nI think we will need to introduce filepath.ListSeparator which would be ':' on Unix and ';' on Windows.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go#newcode159\nsrc/cmd/godoc/mapping.go:159: // ToAbsolute maps a relative filesystem path to an absolute filesystem\ns/relative filesystem path/slash-separated relative path/\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go#newcode164\nsrc/cmd/godoc/mapping.go:164: prefix, tail := splitFirst(path)\nif filepath.Separator != '/' {\n    tail = strings.Replace(tail, \"/\", string(filepath.Separator), -1)\n}\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go#newcode184\nsrc/cmd/godoc/mapping.go:184: // ToRelative maps an absolute filesystem path to a relative filesystem\ns2/filesystem/slash-separated/\n\n[s2 means replace second match]\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/godoc/mapping.go#newcode191\nsrc/cmd/godoc/mapping.go:191: // /absolute/prefix/foo -> prefix/foo\nconvert slashes here\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/goinstall/download.go\nFile src/cmd/goinstall/download.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/goinstall/download.go#newcode39\nsrc/cmd/goinstall/download.go:39: // BUG(niemeyer): Call sites of vcsCheckout mix slashed and OS-specific paths.\ns/BUG/TODO/\n\nBUG appears in godoc output, which has no business mentioning internal function names like vcsCheckout.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/goinstall/main.go\nFile src/cmd/goinstall/main.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/goinstall/main.go#newcode163\nsrc/cmd/goinstall/main.go:163: // BUG(niemeyer): Slashed path from package must be converted to OS-specific path.\ns/BUG/TODO/\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/goinstall/parse.go\nFile src/cmd/goinstall/parse.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/cmd/goinstall/parse.go#newcode10\nsrc/cmd/goinstall/parse.go:10: \"path/filepath\"\nwhile you are here, sort this list\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/patch/patch.go\nFile src/pkg/patch/patch.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/patch/patch.go#newcode115\nsrc/pkg/patch/patch.go:115: p.Dst = filepath.Clean(p.Dst)\nI don't know about this one.  \nIt depends on whether Mercurial and Git print \\ on Windows\nin their patches.  I am guessing probably not, and you didn't\nchange the lines that follow anyway, so let's put this one back\nto path.",
			"disapproval": false,
			"date": "2011-03-03 16:37:50.174807",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9fa1ce8c4404 ***\n\npath/filepath: new OS-specific path support\n\nThe path package now contains only functions which\ndeal with slashed paths, sensible for any OS when dealing\nwith network paths or URLs.  OS-specific functionality\nhas been moved into the new path/filepath package.\n\nThis also includes fixes for godoc, goinstall and other\npackages which were mixing slashed and OS-specific paths.\n\nR=rsc, gri, mattn, brainman\nCC=golang-dev\nhttp://codereview.appspot.com/4252044\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-03-06 22:33:29.163509",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "No.\n\npath_windows.go can do whatever it needs to do for Windows\nbut Separator is defined as the canonical separator character\nfor that operating system.  For Windows, that is \\.\n\nNormal code should call the path routines instead of\ntrying to recreate the functionality by looking at the\nSeparator.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-03-09 04:28:04.718357",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/03/03 18:21:09, gri wrote:\n> \n> What if / is a legal character in a name? ...\n\n/ is not legal character in a name on Windows.\n\nFrom http://msdn.microsoft.com/en-us/library/aa365247%28v=VS.85%29.aspx:\n\n\"... \n\nUse any character in the current code page for a name, including Unicode characters and characters in the extended character set (128\u2013255), except for the following:\n\n    *\n\n      The following reserved characters:\n          o < (less than)\n          o > (greater than)\n          o : (colon)\n          o \" (double quote)\n          o / (forward slash)\n          o \\ (backslash)\n          o | (vertical bar or pipe)\n          o ? (question mark)\n          o * (asterisk)\n\n...\"",
			"disapproval": false,
			"date": "2011-03-03 22:21:42.978045",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> From what I've seen so far, all Windows API accept / in place of \\.\n>\n> But this rule doesn't work when applied to individual programs. Passing\n> file name with / instead of \\ will trick most of Windows programs.\n\nfair enough, but command line parsing is always different.\nunix allows a file named \"-foo\" but you can't cat -foo.\n\nruss\n",
			"disapproval": false,
			"date": "2011-03-04 02:12:45.529587",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI tried to apply this change but it has a circular\ndependency: path/filepath -> io/ioutil -> path/filepath.\n\nFor now please just copy the implementation of\nioutil.ReadDir into filepath (as readDir) so that\nWalk can use it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-03-06 20:23:14.205443",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Uploaded fixes for the first review from Russ on path and filepath.  Notes follow.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/match.go#newcode213\nsrc/pkg/path/filepath/match.go:213: // /usr/*/bin/ed, assuming Separator is '/'.\nDone.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode111\nsrc/pkg/path/filepath/path.go:111: // In operating systems where VolumeSeparator is not empty and\n> delete this sentence\n\nDone.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode116\nsrc/pkg/path/filepath/path.go:116: func Split(path string) (base, file string) {\n> why did this get renamed to base?\n> it's very different than, say, filepath.Base.\n\nBecause \"C:\" is not a directory, and this used to split\nthe volume as well. Agreed it conflicts with\nfilepath.Base.  I reverted it for now.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode134\nsrc/pkg/path/filepath/path.go:134: // in the final Separator-partitioned element of path;\n> s/Separator-partitioned //\n\nDone.\n\nhttp://codereview.appspot.com/4252044/diff/21003/src/pkg/path/filepath/path.go#newcode193\nsrc/pkg/path/filepath/path.go:193: // Base returns the last path element of the Separator-partitioned name.\n> rename name to path\n> \n> // Base returns the last element of path.\n\nDone.  I've also made equivalent changes in the generic\n'path' package.",
			"disapproval": false,
			"date": "2011-03-04 11:22:20.870011",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 4252044: path/filepath: New OS-specific path support",
	"created": "2011-02-28 22:39:48.834648",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		12004,
		7035,
		17005,
		15005,
		35,
		21003,
		12010,
		20038,
		5114,
		15072,
		21008
	],
	"modified": "2011-09-23 18:15:20.356630",
	"closed": true,
	"issue": 4252044
}