{
	"description": "go/format: Package format implements standard formatting of Go source.\n\nPackage format is a utility package that takes care of\nparsing, sorting of imports, and formatting of .go source\nusing the canonical gofmt formatting parameters.\n\nUse go/format in various clients instead of the lower-level components.",
	"cc": [
		"r@golang.org",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"rogpeppe@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, bradfitz@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-21 02:18:58.303580",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-21 01:37:31.561240",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6852075/diff/11021/src/pkg/go/format/format.go\nFile src/pkg/go/format/format.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/11021/src/pkg/go/format/format.go#newcode56\nsrc/pkg/go/format/format.go:56: panic(\"unreachable\")\nsure? might as well just \"return err\".",
			"disapproval": false,
			"date": "2012-11-27 02:33:18.945740",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice.\r\n\r\nOn Tue, Nov 20, 2012 at 5:37 PM, <gri@golang.org> wrote:\r\n\r\n> Reviewers: r,\r\n>\r\n> Message:\r\n> Hello r (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> go/fmt: fmt implements standard formatting of Go surce\r\n>\r\n> Package fmt is a utility package that takes care of\r\n> parsing, sorting of imports, and formatting of .go\r\n> source files using the canonical gofmt formatting\r\n> parameters.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6852075/<http://codereview.appspot.com/6852075/>\r\n>\r\n> Affected files:\r\n>   A src/pkg/go/fmt/fmt.go\r\n>   A src/pkg/go/fmt/fmt_test.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-21 02:04:13.050690",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Mon, Nov 26, 2012 at 10:22 PM, <gri@golang.org> wrote:\r\n\r\n> PTAL.\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/11021/src/**\r\n> pkg/go/format/format.go<https://codereview.appspot.com/6852075/diff/11021/src/pkg/go/format/format.go>\r\n> File src/pkg/go/format/format.go (right):\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/11021/src/**\r\n> pkg/go/format/format.go#**newcode56<https://codereview.appspot.com/6852075/diff/11021/src/pkg/go/format/format.go#newcode56>\r\n> src/pkg/go/format/format.go:**56: panic(\"unreachable\")\r\n> On 2012/11/27 02:33:19, bradfitz wrote:\r\n>\r\n>> sure? might as well just \"return err\".\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/6852075/<https://codereview.appspot.com/6852075/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-27 06:27:35.978030",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "nit: please fix the typo in the CL description.\r\n\r\nOn Wed, Nov 21, 2012 at 1:04 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Nice.\r\n>\r\n>\r\n> On Tue, Nov 20, 2012 at 5:37 PM, <gri@golang.org> wrote:\r\n>>\r\n>> Reviewers: r,\r\n>>\r\n>> Message:\r\n>> Hello r (cc: golang-dev@googlegroups.com),\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> go/fmt: fmt implements standard formatting of Go surce\r\n>>\r\n>> Package fmt is a utility package that takes care of\r\n>> parsing, sorting of imports, and formatting of .go\r\n>> source files using the canonical gofmt formatting\r\n>> parameters.\r\n>>\r\n>> Please review this at http://codereview.appspot.com/6852075/\r\n>>\r\n>> Affected files:\r\n>>   A src/pkg/go/fmt/fmt.go\r\n>>   A src/pkg/go/fmt/fmt_test.go\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-21 02:04:54.140880",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, bradfitz@golang.org, dave@cheney.net, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-21 23:04:45.439030",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough. PTAL.\r\n- gri\r\n\r\nOn Mon, Nov 26, 2012 at 5:33 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> It doesn't seem worth distinguishing the two cases.  I'd write a tiny amount\r\n> of code and delete docs and confusion.\r\n>\r\n> I would just make format.Node check if it's an *ast.File and, if so, print\r\n> it all out to a []byte and re-parse it.  Then keep the docs that say \"Node\r\n> does not modify node\" but delete the part that says \"specifically, it does\r\n> not sort imports\".\r\n>\r\n> If the ast can ever have a more efficient clone we can switch the format\r\n> package to use that without changing the API.\r\n>\r\n>\r\n> On Mon, Nov 26, 2012 at 5:09 PM, Robert Griesemer <gri@golang.org> wrote:\r\n>>\r\n>> If you use format.Source it does sort imports and you don't have to\r\n>> know anything else.\r\n>>\r\n>> If you use format.Node is does not. I have looked into perhaps having\r\n>> a non-destructive import sorting, but it would require yet another ast\r\n>> entry point or a copy of some code of sorts in format. I've concluded\r\n>> that for now, this is fine. When you deal with the AST directly, you\r\n>> have to know more stuff anyway.\r\n>>\r\n>> On Mon, Nov 26, 2012 at 3:40 PM, Brad Fitzpatrick <bradfitz@golang.org>\r\n>> wrote:\r\n>> > I thought the whole point of this package was so callers didn't have to\r\n>> > know\r\n>> > the fmt rules or configuration.\r\n>> >\r\n>> > Yet this package doesn't sort imports.\r\n>> >\r\n>> > So I still have to know little details.  Doesn't seem to be any better\r\n>> > than\r\n>> > the status quo.\r\n>> >\r\n>> > I understand not wanting to mutate arguments, but I'd prefer a\r\n>> > behind-the-scenes clone+mutate rather than callers having to care about\r\n>> > details like import sorting.\r\n>> >\r\n>> >\r\n>> > On Mon, Nov 26, 2012 at 3:18 PM, <gri@golang.org> wrote:\r\n>> >>\r\n>> >> PTAL.\r\n>> >> Thanks.\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go\r\n>> >> File src/cmd/fix/main.go (left):\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go#oldcode114\r\n>> >> src/cmd/fix/main.go:114: ast.SortImports(fset, f)\r\n>> >> On 2012/11/25 15:35:13, rsc wrote:\r\n>> >>>\r\n>> >>> Where did this call go? I am worried about putting it in format.Node,\r\n>> >>\r\n>> >> because\r\n>> >>>\r\n>> >>> that means format.Node is mutating its argument. Maybe there should be\r\n>> >>\r\n>> >> a\r\n>> >>>\r\n>> >>> separate format.Rewrite that does the mutating if that's indeed where\r\n>> >>\r\n>> >> it went.\r\n>> >>\r\n>> >> Done.\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go\r\n>> >> File src/pkg/go/format/format.go (right):\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode31\r\n>> >> src/pkg/go/format/format.go:31: ast.SortImports(fset, file)\r\n>> >> On 2012/11/25 15:35:13, rsc wrote:\r\n>> >>>\r\n>> >>> This is problematic (see last comment).\r\n>> >>> I would be happy to just move SortImports calls out to the callers.\r\n>> >>\r\n>> >>\r\n>> >> Done.\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\r\n>> >> src/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte)\r\n>> >> error {\r\n>> >> On 2012/11/22 09:41:47, rog wrote:\r\n>> >>>\r\n>> >>> i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n>> >>\r\n>> >> Bytes to\r\n>> >>>\r\n>> >>> return []byte, not write some bytes to a Writer.\r\n>> >>\r\n>> >>\r\n>> >>> WriteTo would be more conventional.\r\n>> >>> or even just Format.\r\n>> >>\r\n>> >>\r\n>> >> ACK\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\r\n>> >> src/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte)\r\n>> >> error {\r\n>> >> On 2012/11/25 15:35:13, rsc wrote:\r\n>> >>>\r\n>> >>> On 2012/11/22 09:41:47, rog wrote:\r\n>> >>> > i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n>> >>\r\n>> >> Bytes to\r\n>> >>>\r\n>> >>> > return []byte, not write some bytes to a Writer.\r\n>> >>> >\r\n>> >>> > WriteTo would be more conventional.\r\n>> >>> > or even just Format.\r\n>> >>\r\n>> >>\r\n>> >>> I agree that the use of Bytes and String are unconventional here,\r\n>> >>\r\n>> >> although I do\r\n>> >>>\r\n>> >>> understand the reason for them. It also bothers me a little that Bytes\r\n>> >>\r\n>> >> and\r\n>> >>>\r\n>> >>> String have different signatures other than s/[]byte/string/. Perhaps\r\n>> >>\r\n>> >> we can\r\n>> >>>\r\n>> >>> solve both problems by merging the two functions into a single\r\n>> >>\r\n>> >>\r\n>> >>> func Source(in []byte) (out []byte, err error)\r\n>> >>\r\n>> >>\r\n>> >>> ?\r\n>> >>\r\n>> >>\r\n>> >> Done.\r\n>> >>\r\n>> >> https://codereview.appspot.com/6852075/\r\n>> >\r\n>> >\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-27 02:28:10.841040",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b8c822e083cf ***\n\ngo/format: Package format implements standard formatting of Go source.\n\nPackage format is a utility package that takes care of\nparsing, sorting of imports, and formatting of .go source\nusing the canonical gofmt formatting parameters.\n\nUse go/format in various clients instead of the lower-level components.\n\nR=r, bradfitz, dave, rogpeppe, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6852075",
			"disapproval": false,
			"date": "2012-11-27 18:29:56.577580",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6852075/diff/11021/src/pkg/go/format/format.go\nFile src/pkg/go/format/format.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/11021/src/pkg/go/format/format.go#newcode56\nsrc/pkg/go/format/format.go:56: panic(\"unreachable\")\nOn 2012/11/27 02:33:19, bradfitz wrote:\n> sure? might as well just \"return err\".\n\nDone.",
			"disapproval": false,
			"date": "2012-11-27 06:22:54.699380",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "nice.\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go\nFile src/pkg/go/fmt/fmt.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode36\nsrc/pkg/go/fmt/fmt.go:36: // an error. src is expected to be a syntactically correct Go source file.\nIt would be more useful if this implemented the same heuristics that gofmt does to allow formatting of more kinds of program elements.\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode38\nsrc/pkg/go/fmt/fmt.go:38: func String(src string) (string, error) {\nOn 2012/11/21 03:27:14, bradfitz wrote:\n> Could also make src be of type interface{}, like parser.ParseFile, which takes\n> []byte, string, or io.Reader.\n\npersonally I'm not keen on that kind of thing. given that ParseFile always reads into a []byte anyway, perhaps just:\n\nfunc Write(dst io.Writer, source []byte) error\n\nmight be good enough to replace both String and Copy here.\nthe following doesn't seem too much worse than format.String(s)\nto me:\n\n    var b bytes.Buffer\n    err := format.Write(&b, []byte(s))\n    use(b.String())\n\ndoesn't seem too much worse than using format.String\nto me.\n\nThe single entry point makes it obvious what the trade-offs are\ntoo.",
			"disapproval": false,
			"date": "2012-11-21 15:01:39.000700",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\nThanks.\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go\nFile src/cmd/fix/main.go (left):\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go#oldcode114\nsrc/cmd/fix/main.go:114: ast.SortImports(fset, f)\nOn 2012/11/25 15:35:13, rsc wrote:\n> Where did this call go? I am worried about putting it in format.Node, because\n> that means format.Node is mutating its argument. Maybe there should be a\n> separate format.Rewrite that does the mutating if that's indeed where it went.\n\nDone.\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go\nFile src/pkg/go/format/format.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode31\nsrc/pkg/go/format/format.go:31: ast.SortImports(fset, file)\nOn 2012/11/25 15:35:13, rsc wrote:\n> This is problematic (see last comment).\n> I would be happy to just move SortImports calls out to the callers.\n\nDone.\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\nsrc/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte) error {\nOn 2012/11/22 09:41:47, rog wrote:\n> i'm not entirely sure about Bytes as a name here. I'd usually expect Bytes to\n> return []byte, not write some bytes to a Writer.\n> \n> WriteTo would be more conventional.\n> or even just Format.\n\nACK\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\nsrc/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte) error {\nOn 2012/11/25 15:35:13, rsc wrote:\n> On 2012/11/22 09:41:47, rog wrote:\n> > i'm not entirely sure about Bytes as a name here. I'd usually expect Bytes to\n> > return []byte, not write some bytes to a Writer.\n> > \n> > WriteTo would be more conventional.\n> > or even just Format.\n> \n> I agree that the use of Bytes and String are unconventional here, although I do\n> understand the reason for them. It also bothers me a little that Bytes and\n> String have different signatures other than s/[]byte/string/. Perhaps we can\n> solve both problems by merging the two functions into a single\n> \n> func Source(in []byte) (out []byte, err error)\n> \n> ?\n\nDone.",
			"disapproval": false,
			"date": "2012-11-26 23:18:49.959840",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn 27 November 2012 15:06,  <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n> But please start on a CL that makes this more efficient.\r\n> We can do much better than 2x.\r\n\r\nagreed. an companion to ast.Walk that allowed selective\r\nmutation of the ast nodes would be a nice thing to have,\r\nassuming there's a nicely general way to implement it.\r\n",
			"disapproval": false,
			"date": "2012-11-27 15:21:23.754420",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go\nFile src/pkg/go/fmt/fmt.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode6\nsrc/pkg/go/fmt/fmt.go:6: package fmt\ns/surce/source/\nalso in CL description\n\nthis should be package format, not fmt. it will require a renamed import almost everywhere it's used.",
			"disapproval": false,
			"date": "2012-11-21 03:42:27.345440",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go\nFile src/pkg/go/fmt/fmt.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode6\nsrc/pkg/go/fmt/fmt.go:6: package fmt\nOn 2012/11/21 03:42:27, r wrote:\n> s/surce/source/\n> also in CL description\n> \n> this should be package format, not fmt. it will require a renamed import almost\n> everywhere it's used.\n\nDone.\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode32\nsrc/pkg/go/fmt/fmt.go:32: return (&printer.Config{Mode: printerMode, Tabwidth: tabWidth}).Fprint(dst, fset, node)\nOn 2012/11/21 03:27:14, bradfitz wrote:\n> this printer.Config could be a global variable.  \n\nDone.\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode36\nsrc/pkg/go/fmt/fmt.go:36: // an error. src is expected to be a syntactically correct Go source file.\nOn 2012/11/21 15:01:39, rog wrote:\n> It would be more useful if this implemented the same heuristics that gofmt does\n> to allow formatting of more kinds of program elements.\n\nAgreed.\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode38\nsrc/pkg/go/fmt/fmt.go:38: func String(src string) (string, error) {\nOn 2012/11/21 03:27:14, bradfitz wrote:\n> Could also make src be of type interface{}, like parser.ParseFile, which takes\n> []byte, string, or io.Reader.\n\nsee comment below\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode38\nsrc/pkg/go/fmt/fmt.go:38: func String(src string) (string, error) {\nOn 2012/11/21 15:01:39, rog wrote:\n> On 2012/11/21 03:27:14, bradfitz wrote:\n> > Could also make src be of type interface{}, like parser.ParseFile, which takes\n> > []byte, string, or io.Reader.\n> \n> personally I'm not keen on that kind of thing. given that ParseFile always reads\n> into a []byte anyway, perhaps just:\n> \n> func Write(dst io.Writer, source []byte) error\n> \n> might be good enough to replace both String and Copy here.\n> the following doesn't seem too much worse than format.String(s)\n> to me:\n> \n>     var b bytes.Buffer\n>     err := format.Write(&b, []byte(s))\n>     use(b.String())\n> \n> doesn't seem too much worse than using format.String\n> to me.\n> \n> The single entry point makes it obvious what the trade-offs are\n> too.\n\nAgreed. The interface{} argument for ParseFile was an experiment. It didn't fail, but it was also not providing an overwhelmingly strong benefit.\n\nI kept Bytes (as in format.Bytes) but now using io.Writer and a []byte argument.\n\nI kept String (as in format.String) as a convenience function, and it turns out, it is actually used in that form already.",
			"disapproval": false,
			"date": "2012-11-22 01:08:20.547910",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It doesn't seem worth distinguishing the two cases.  I'd write a tiny\r\namount of code and delete docs and confusion.\r\n\r\nI would just make format.Node check if it's an *ast.File and, if so, print\r\nit all out to a []byte and re-parse it.  Then keep the docs that say \"Node\r\ndoes not modify node\" but delete the part that says \"specifically, it does\r\nnot sort imports\".\r\n\r\nIf the ast can ever have a more efficient clone we can switch the format\r\npackage to use that without changing the API.\r\n\r\n\r\nOn Mon, Nov 26, 2012 at 5:09 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> If you use format.Source it does sort imports and you don't have to\r\n> know anything else.\r\n>\r\n> If you use format.Node is does not. I have looked into perhaps having\r\n> a non-destructive import sorting, but it would require yet another ast\r\n> entry point or a copy of some code of sorts in format. I've concluded\r\n> that for now, this is fine. When you deal with the AST directly, you\r\n> have to know more stuff anyway.\r\n>\r\n> On Mon, Nov 26, 2012 at 3:40 PM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > I thought the whole point of this package was so callers didn't have to\r\n> know\r\n> > the fmt rules or configuration.\r\n> >\r\n> > Yet this package doesn't sort imports.\r\n> >\r\n> > So I still have to know little details.  Doesn't seem to be any better\r\n> than\r\n> > the status quo.\r\n> >\r\n> > I understand not wanting to mutate arguments, but I'd prefer a\r\n> > behind-the-scenes clone+mutate rather than callers having to care about\r\n> > details like import sorting.\r\n> >\r\n> >\r\n> > On Mon, Nov 26, 2012 at 3:18 PM, <gri@golang.org> wrote:\r\n> >>\r\n> >> PTAL.\r\n> >> Thanks.\r\n> >>\r\n> >>\r\n> >>\r\n> >> https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go\r\n> >> File src/cmd/fix/main.go (left):\r\n> >>\r\n> >>\r\n> >>\r\n> https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go#oldcode114\r\n> >> src/cmd/fix/main.go:114: ast.SortImports(fset, f)\r\n> >> On 2012/11/25 15:35:13, rsc wrote:\r\n> >>>\r\n> >>> Where did this call go? I am worried about putting it in format.Node,\r\n> >>\r\n> >> because\r\n> >>>\r\n> >>> that means format.Node is mutating its argument. Maybe there should be\r\n> >>\r\n> >> a\r\n> >>>\r\n> >>> separate format.Rewrite that does the mutating if that's indeed where\r\n> >>\r\n> >> it went.\r\n> >>\r\n> >> Done.\r\n> >>\r\n> >>\r\n> >>\r\n> >>\r\n> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go\r\n> >> File src/pkg/go/format/format.go (right):\r\n> >>\r\n> >>\r\n> >>\r\n> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode31\r\n> >> src/pkg/go/format/format.go:31: ast.SortImports(fset, file)\r\n> >> On 2012/11/25 15:35:13, rsc wrote:\r\n> >>>\r\n> >>> This is problematic (see last comment).\r\n> >>> I would be happy to just move SortImports calls out to the callers.\r\n> >>\r\n> >>\r\n> >> Done.\r\n> >>\r\n> >>\r\n> >>\r\n> >>\r\n> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\r\n> >> src/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte)\r\n> >> error {\r\n> >> On 2012/11/22 09:41:47, rog wrote:\r\n> >>>\r\n> >>> i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n> >>\r\n> >> Bytes to\r\n> >>>\r\n> >>> return []byte, not write some bytes to a Writer.\r\n> >>\r\n> >>\r\n> >>> WriteTo would be more conventional.\r\n> >>> or even just Format.\r\n> >>\r\n> >>\r\n> >> ACK\r\n> >>\r\n> >>\r\n> >>\r\n> >>\r\n> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\r\n> >> src/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte)\r\n> >> error {\r\n> >> On 2012/11/25 15:35:13, rsc wrote:\r\n> >>>\r\n> >>> On 2012/11/22 09:41:47, rog wrote:\r\n> >>> > i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n> >>\r\n> >> Bytes to\r\n> >>>\r\n> >>> > return []byte, not write some bytes to a Writer.\r\n> >>> >\r\n> >>> > WriteTo would be more conventional.\r\n> >>> > or even just Format.\r\n> >>\r\n> >>\r\n> >>> I agree that the use of Bytes and String are unconventional here,\r\n> >>\r\n> >> although I do\r\n> >>>\r\n> >>> understand the reason for them. It also bothers me a little that Bytes\r\n> >>\r\n> >> and\r\n> >>>\r\n> >>> String have different signatures other than s/[]byte/string/. Perhaps\r\n> >>\r\n> >> we can\r\n> >>>\r\n> >>> solve both problems by merging the two functions into a single\r\n> >>\r\n> >>\r\n> >>> func Source(in []byte) (out []byte, err error)\r\n> >>\r\n> >>\r\n> >>> ?\r\n> >>\r\n> >>\r\n> >> Done.\r\n> >>\r\n> >> https://codereview.appspot.com/6852075/\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-27 01:33:59.455030",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with one thought about the name.\n\nAlso I wonder if you might want to consider applying the same indentation heuristics as gofmt (for source fragments,\nit applies the indentation found on the first line to all\nsubsequent lines).\n\nIt would be nice if format.String(s) would be the same as piping the string through gofmt. Then the comment at the top would be strictly accurate.\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go\nFile src/pkg/go/format/format.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\nsrc/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte) error {\ni'm not entirely sure about Bytes as a name here. I'd usually expect Bytes to return []byte, not write some bytes to a Writer.\n\nWriteTo would be more conventional.\nor even just Format.",
			"disapproval": false,
			"date": "2012-11-22 09:41:46.912190",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PS: Better (more usable, simpler) API suggestions welcome.\r\n- gri\r\n\r\nOn Tue, Nov 20, 2012 at 6:18 PM,  <gri@golang.org> wrote:\r\n> Hello r@golang.org, bradfitz@golang.org, dave@cheney.net (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/6852075/\r\n",
			"disapproval": false,
			"date": "2012-11-21 02:20:08.361730",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought the whole point of this package was so callers didn't have to\r\nknow the fmt rules or configuration.\r\n\r\nYet this package doesn't sort imports.\r\n\r\nSo I still have to know little details.  Doesn't seem to be any better than\r\nthe status quo.\r\n\r\nI understand not wanting to mutate arguments, but I'd prefer a\r\nbehind-the-scenes clone+mutate rather than callers having to care about\r\ndetails like import sorting.\r\n\r\n\r\nOn Mon, Nov 26, 2012 at 3:18 PM, <gri@golang.org> wrote:\r\n\r\n> PTAL.\r\n> Thanks.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/1007/src/cmd/**fix/main.go<https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go>\r\n> File src/cmd/fix/main.go (left):\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/1007/src/cmd/**\r\n> fix/main.go#oldcode114<https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go#oldcode114>\r\n> src/cmd/fix/main.go:114: ast.SortImports(fset, f)\r\n> On 2012/11/25 15:35:13, rsc wrote:\r\n>\r\n>> Where did this call go? I am worried about putting it in format.Node,\r\n>>\r\n> because\r\n>\r\n>> that means format.Node is mutating its argument. Maybe there should be\r\n>>\r\n> a\r\n>\r\n>> separate format.Rewrite that does the mutating if that's indeed where\r\n>>\r\n> it went.\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/1007/src/pkg/**\r\n> go/format/format.go<https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go>\r\n> File src/pkg/go/format/format.go (right):\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/1007/src/pkg/**\r\n> go/format/format.go#newcode31<https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode31>\r\n> src/pkg/go/format/format.go:**31: ast.SortImports(fset, file)\r\n> On 2012/11/25 15:35:13, rsc wrote:\r\n>\r\n>> This is problematic (see last comment).\r\n>> I would be happy to just move SortImports calls out to the callers.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/1007/src/pkg/**\r\n> go/format/format.go#newcode40<https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40>\r\n> src/pkg/go/format/format.go:**40: func Bytes(dst io.Writer, src []byte)\r\n> error {\r\n> On 2012/11/22 09:41:47, rog wrote:\r\n>\r\n>> i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n>>\r\n> Bytes to\r\n>\r\n>> return []byte, not write some bytes to a Writer.\r\n>>\r\n>\r\n>  WriteTo would be more conventional.\r\n>> or even just Format.\r\n>>\r\n>\r\n> ACK\r\n>\r\n>\r\n> https://codereview.appspot.**com/6852075/diff/1007/src/pkg/**\r\n> go/format/format.go#newcode40<https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40>\r\n> src/pkg/go/format/format.go:**40: func Bytes(dst io.Writer, src []byte)\r\n> error {\r\n> On 2012/11/25 15:35:13, rsc wrote:\r\n>\r\n>> On 2012/11/22 09:41:47, rog wrote:\r\n>> > i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n>>\r\n> Bytes to\r\n>\r\n>> > return []byte, not write some bytes to a Writer.\r\n>> >\r\n>> > WriteTo would be more conventional.\r\n>> > or even just Format.\r\n>>\r\n>\r\n>  I agree that the use of Bytes and String are unconventional here,\r\n>>\r\n> although I do\r\n>\r\n>> understand the reason for them. It also bothers me a little that Bytes\r\n>>\r\n> and\r\n>\r\n>> String have different signatures other than s/[]byte/string/. Perhaps\r\n>>\r\n> we can\r\n>\r\n>> solve both problems by merging the two functions into a single\r\n>>\r\n>\r\n>  func Source(in []byte) (out []byte, err error)\r\n>>\r\n>\r\n>  ?\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/6852075/<https://codereview.appspot.com/6852075/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 23:40:34.615020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nBut please start on a CL that makes this more efficient.\nWe can do much better than 2x.\nIt should be possible to do a shallow clone of the File, copying just these parts:\n\nDecls\n    GenDecl, only for token.IMPORT\n        Specs\n            ImportSpec\n                Name\n                Path\nComments\n    CommentGroup",
			"disapproval": false,
			"date": "2012-11-27 15:06:47.661740",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go\nFile src/pkg/go/fmt/fmt.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode32\nsrc/pkg/go/fmt/fmt.go:32: return (&printer.Config{Mode: printerMode, Tabwidth: tabWidth}).Fprint(dst, fset, node)\nthis printer.Config could be a global variable.\n\nhttps://codereview.appspot.com/6852075/diff/9001/src/pkg/go/fmt/fmt.go#newcode38\nsrc/pkg/go/fmt/fmt.go:38: func String(src string) (string, error) {\nCould also make src be of type interface{}, like parser.ParseFile, which takes []byte, string, or io.Reader.",
			"disapproval": false,
			"date": "2012-11-21 03:27:14.334140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks pretty good. I haven't read the whole conversation, but I like the new name go/format (as compared to go/fmt). Two minor API concerns.\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go\nFile src/cmd/fix/main.go (left):\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go#oldcode114\nsrc/cmd/fix/main.go:114: ast.SortImports(fset, f)\nWhere did this call go? I am worried about putting it in format.Node, because that means format.Node is mutating its argument. Maybe there should be a separate format.Rewrite that does the mutating if that's indeed where it went.\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go\nFile src/pkg/go/format/format.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode31\nsrc/pkg/go/format/format.go:31: ast.SortImports(fset, file)\nThis is problematic (see last comment).\nI would be happy to just move SortImports calls out to the callers.\n\nhttps://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\nsrc/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte) error {\nOn 2012/11/22 09:41:47, rog wrote:\n> i'm not entirely sure about Bytes as a name here. I'd usually expect Bytes to\n> return []byte, not write some bytes to a Writer.\n> \n> WriteTo would be more conventional.\n> or even just Format.\n\nI agree that the use of Bytes and String are unconventional here, although I do understand the reason for them. It also bothers me a little that Bytes and String have different signatures other than s/[]byte/string/. Perhaps we can solve both problems by merging the two functions into a single\n\nfunc Source(in []byte) (out []byte, err error)\n\n?",
			"disapproval": false,
			"date": "2012-11-25 15:35:12.948580",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6852075/diff/1004/src/pkg/go/format/format_test.go\nFile src/pkg/go/format/format_test.go (right):\n\nhttps://codereview.appspot.com/6852075/diff/1004/src/pkg/go/format/format_test.go#newcode86\nsrc/pkg/go/format/format_test.go:86: // TODO(gri) Test formatting of partial propgrams.\na partial propgram is called a program?",
			"disapproval": false,
			"date": "2012-11-22 00:31:42.576230",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you use format.Source it does sort imports and you don't have to\r\nknow anything else.\r\n\r\nIf you use format.Node is does not. I have looked into perhaps having\r\na non-destructive import sorting, but it would require yet another ast\r\nentry point or a copy of some code of sorts in format. I've concluded\r\nthat for now, this is fine. When you deal with the AST directly, you\r\nhave to know more stuff anyway.\r\n\r\nOn Mon, Nov 26, 2012 at 3:40 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I thought the whole point of this package was so callers didn't have to know\r\n> the fmt rules or configuration.\r\n>\r\n> Yet this package doesn't sort imports.\r\n>\r\n> So I still have to know little details.  Doesn't seem to be any better than\r\n> the status quo.\r\n>\r\n> I understand not wanting to mutate arguments, but I'd prefer a\r\n> behind-the-scenes clone+mutate rather than callers having to care about\r\n> details like import sorting.\r\n>\r\n>\r\n> On Mon, Nov 26, 2012 at 3:18 PM, <gri@golang.org> wrote:\r\n>>\r\n>> PTAL.\r\n>> Thanks.\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go\r\n>> File src/cmd/fix/main.go (left):\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6852075/diff/1007/src/cmd/fix/main.go#oldcode114\r\n>> src/cmd/fix/main.go:114: ast.SortImports(fset, f)\r\n>> On 2012/11/25 15:35:13, rsc wrote:\r\n>>>\r\n>>> Where did this call go? I am worried about putting it in format.Node,\r\n>>\r\n>> because\r\n>>>\r\n>>> that means format.Node is mutating its argument. Maybe there should be\r\n>>\r\n>> a\r\n>>>\r\n>>> separate format.Rewrite that does the mutating if that's indeed where\r\n>>\r\n>> it went.\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go\r\n>> File src/pkg/go/format/format.go (right):\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode31\r\n>> src/pkg/go/format/format.go:31: ast.SortImports(fset, file)\r\n>> On 2012/11/25 15:35:13, rsc wrote:\r\n>>>\r\n>>> This is problematic (see last comment).\r\n>>> I would be happy to just move SortImports calls out to the callers.\r\n>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\r\n>> src/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte)\r\n>> error {\r\n>> On 2012/11/22 09:41:47, rog wrote:\r\n>>>\r\n>>> i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n>>\r\n>> Bytes to\r\n>>>\r\n>>> return []byte, not write some bytes to a Writer.\r\n>>\r\n>>\r\n>>> WriteTo would be more conventional.\r\n>>> or even just Format.\r\n>>\r\n>>\r\n>> ACK\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6852075/diff/1007/src/pkg/go/format/format.go#newcode40\r\n>> src/pkg/go/format/format.go:40: func Bytes(dst io.Writer, src []byte)\r\n>> error {\r\n>> On 2012/11/25 15:35:13, rsc wrote:\r\n>>>\r\n>>> On 2012/11/22 09:41:47, rog wrote:\r\n>>> > i'm not entirely sure about Bytes as a name here. I'd usually expect\r\n>>\r\n>> Bytes to\r\n>>>\r\n>>> > return []byte, not write some bytes to a Writer.\r\n>>> >\r\n>>> > WriteTo would be more conventional.\r\n>>> > or even just Format.\r\n>>\r\n>>\r\n>>> I agree that the use of Bytes and String are unconventional here,\r\n>>\r\n>> although I do\r\n>>>\r\n>>> understand the reason for them. It also bothers me a little that Bytes\r\n>>\r\n>> and\r\n>>>\r\n>>> String have different signatures other than s/[]byte/string/. Perhaps\r\n>>\r\n>> we can\r\n>>>\r\n>>> solve both problems by merging the two functions into a single\r\n>>\r\n>>\r\n>>> func Source(in []byte) (out []byte, err error)\r\n>>\r\n>>\r\n>>> ?\r\n>>\r\n>>\r\n>> Done.\r\n>>\r\n>> https://codereview.appspot.com/6852075/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-27 01:09:26.562800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> agreed. an companion to ast.Walk that allowed selective\r\n> mutation of the ast nodes would be a nice thing to have,\r\n> assuming there's a nicely general way to implement it.\r\n\r\nmaybe but i'd rather write the 20 lines of code to fix the performance\r\nproblem here first\r\nand leave redesigning ast.Walk for another day.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-11-27 15:31:22.606810",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6852075: go/format: Package format implements standard formattin...",
	"created": "2012-11-21 01:37:27.227360",
	"patchsets": [
		1,
		2001,
		6001,
		9001,
		1004,
		1006,
		1007,
		4006,
		8032,
		10010,
		1008,
		11021,
		3024,
		6005
	],
	"modified": "2012-11-27 15:31:22.606810",
	"closed": true,
	"issue": 6852075
}