{
	"description": "go.crypto/sha3: new package\nAdded a pure Go implementation of SHA3 (Keccak) which implements the hash.Hash interface.\nA test file is included with performance benchmarks and standard test vectors.",
	"cc": [
		"agl@golang.org",
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jcb@google.com",
			"recipients": [
				"jcb@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-03-19 17:55:46.444730",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-03-19 17:49:02.230890",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "agl leads the go.crypto sub-repository, and https://groups.google.com/d/msg/golang-dev/clWZwaQz9cs/rJ5zORSKk20J suggests that he's not in favor of including SHA3 in go.crypto.\n\nYou are of course free to publish your SHA3 implementation somewhere \"go get\"table: bitbucket, github, code.google.com, etc.",
			"disapproval": false,
			"date": "2013-03-20 00:56:29.109890",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 19, 2013 at 8:56 PM,  <nigeltao@golang.org> wrote:\r\n> suggests that he's not in favor of including SHA3 in go.crypto.\r\n\r\nI do rather wish that SHA-3 would disappear, but this is nicely done.\r\nI'll try and take a better look tomorrow.\r\n\r\nOne thing that does give me pause is that NIST are still consulting on\r\nthe parameters for the different `official' hashes (the capacity etc).\r\nSo I don't think that SHA-3 is final yet.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2013-03-20 01:11:32.214190",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In general, your top-level // comment lines are uncomfortably long. I'd break it at somewhere between 80-100 bytes.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go\nFile sha3/sha3.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode1\nsha3/sha3.go:1: // Copyright 2012 The Go Authors. All rights reserved.\n2013, and similarly in the other files.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode13\nsha3/sha3.go:13: \nDelete the blank line, so that the comment above is recognized by godoc as a package doc comment.\n\nRun \"godoc code.google.com/p/go.crypto/sha3\" to check that your godoc output looks good.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode74\nsha3/sha3.go:74: func (d *digest) Capacity() int {\nRename Capacity to capacity unless there's a reason to export this method. Similarly for Rate.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode78\nsha3/sha3.go:78: // Rate returns number of bytes of the internal state which can be absorbed or squeezed in between calls to the permutation function.\n\"returns the number\"\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode80\nsha3/sha3.go:80: return (stateSize - d.Capacity())\nOuter parens are unnecessary.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode87\nsha3/sha3.go:87: for x := 0; x < numLanes; x++ {\nfor i := range d.a {\n  d.a[i] = 0\n}\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode92\nsha3/sha3.go:92: // BlockSize, required by the Digest interface, does not have a standard intepretation for a sponge-based construction like SHA3.\nWhat is the Digest interface?\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode206\nsha3/sha3.go:206: func (d *digest) dumpState() {\nIf this is just for debugging then move it to sha3_test.go or delete it entirely.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode222\nsha3/sha3.go:222: return &digest{outputSize: outputSize}\nI don't think this function is doing much (and \"new\" shadows a built-in function). Just inline it below:\n\nfunc New224() hash.Hash { &digest{outputSize: 224 / 8} }\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode225\nsha3/sha3.go:225: // The NewX() constructors enable initializing a hash in any of the four standard sizes of output, specified in bits.\nDrop the parens.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode232\nsha3/sha3.go:232: //Given no parameters, a new instance with the highest security level is provided.\nGo doc comments should begin with the name of the thing being commented upon. Thus:\n// New returns a new instance etc.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode5\nsha3/sha3_test.go:5: // This file implements test code for the SHA3 package.\nI'd drop this sentence. It's obvious from the file name.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode6\nsha3/sha3_test.go:6: // These tests are a subset of those provided by the Keccak web site: http://keccak.noekeon.org/\nPlace a file-level comment below the package clause, so that it's less likely to be confused for a package doc comment:\n--------\n// Copyright 2013 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage sha3\n\n// These tests are a subset of those provided by the Keccak web site: http://keccak.noekeon.org/\n\nimport (\n--------\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode29\nsha3/sha3_test.go:29: repeatCount     int  // If repeatCount is greater than 1, the input input is concatenated this many times.\n\"input input\"\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode36\nsha3/sha3_test.go:36: func (t *hashTest) Test(testDigests map[int]*digest) (bool, string) {\nThis should return error, not (bool, string), and the caller can test err != nil.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: switch t.inputHex {\nif t.inputHex {\n\nbut instead of an inputHex field, I'd make a top-level\n\nfunc decodeHex(s string) string {\n  b, err := hex.DecodeString(s)\n  if err != nil {\n    panic(err)\n  }\n  return string(b)\n}\n\nand make your test cases call that, instead of having this function do the hex-decoding.\n\nYou could then do the string to []byte conversion for t.input outside the loop, which for TestLongVectors would avoid 16777216-1 unnecessary pieces of garbage.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode58\nsha3/sha3_test.go:58: for size, expectedOutput := range t.expectedOutputs {\nThe usual Go language is got and want, not computedOutput and expectedOutput.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode70\nsha3/sha3_test.go:70: return false, fmt.Sprintf(\"SHA3[%d](%s) = %s want %s\", testDigests[size].Size()*8, errorInput, computedOutput, strings.ToLower(expectedOutput))\nUse fmt.Errorf instead of fmt.Sprintf to return an error.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode70\nsha3/sha3_test.go:70: return false, fmt.Sprintf(\"SHA3[%d](%s) = %s want %s\", testDigests[size].Size()*8, errorInput, computedOutput, strings.ToLower(expectedOutput))\nYou probably want %q instead of %s.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode80\nsha3/sha3_test.go:80: for i := 0; i < len(result); i++ {\nfor i := range result {\n  result[i] = byte(i)\n}\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode142\nsha3/sha3_test.go:142: // benchmarkBulkHashHelper tests the speed to hash a 16 kiB buffer.\nDrop the \"Helper\". The difference in \"Benchmark\" and \"benchmark\" is enough to distinguish these functions.\n\nSimilarly for testVectorHelper.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode158\nsha3/sha3_test.go:158: // benchmarkBulkHashSHA3_X test the speed to hash a 16 kiB buffer by calling benchmarkBulkHashHelper.\nkiB should be KiB.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode169\nsha3/sha3_test.go:169: repeatCount: 16777216,\n\"repeatCount: 16 * 1024 * 1024,\" might be clearer.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go\nFile sha3/sha3internal.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode1\nsha3/sha3internal.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nI'd rename the file from sha3internal.go to internal.go. We're already in the sha3 directory. There's no need to stutter.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode5\nsha3/sha3internal.go:5: // Package sha3internal implements the core Keccak permutation function necessary for computing SHA3.\nIt's not package sha3internal.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode14\nsha3/sha3internal.go:14: var RC = [...]uint64{\nRename RC to rc unless there's a reason to export these values. Similarly for R0.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode48\nsha3/sha3internal.go:48: return w<<i ^ w>>(64-i)\nThe compiler will optimize \"w<<i ^ w>>(64-i)\" as a rotate if i is constant, but not if i is a variable (or in this case, a function parameter).\n\nInstead of a rotateLeft function, it may be better to define r0_xx constants like so:\n\nconst (\n  r0_00 = 0\n  r0_01 = 36\n  r0_02 = 3\n  // etc\n)\n\nand below:\n\nd.b[0] = d.a[0]<<r0_00 ^ d.a[0]>>(64-r0_00)\nd.b[1] = d.a[6]<<r0_06 ^ d.a[6]>>(64-r0_06)\n// etc\n\nI filed https://code.google.com/p/go/issues/detail?id=5084 for the compiler bug.",
			"disapproval": false,
			"date": "2013-03-20 02:17:43.297000",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go\nFile sha3/sha3internal.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode1\nsha3/sha3internal.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> I'd rename the file from sha3internal.go to internal.go. \n\nOr, if the purpose of this file is to implement the Keccak-f function, I'd call it keccakf.go.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode124\nsha3/sha3internal.go:124: d.a[0] = d.b[0] ^ (^(d.b[1]) & d.b[2])\nThe inner-most parens are unnecessary.",
			"disapproval": false,
			"date": "2013-03-20 02:22:15.303400",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go\nFile sha3/sha3.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode39\nsha3/sha3.go:39: var padOpen = [laneSize]uint64{\nWas this the result of benchmarking? I'd assume that a shift would be faster than a memory access for this.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode57\nsha3/sha3.go:57: a             [numLanes]uint64  //main state of the hash\nspace after \"//\"\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode73\nsha3/sha3.go:73: // Capacity returns the number of bytes not touched by directly during squeezing or absorbing, but which are only being updated by the permutation function.\n\"by directly\" might be a typo.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode93\nsha3/sha3.go:93: // Currently we return the data rate, the number of bytes which can be absorbed per invocation of the permutation function.\nconsider s/,/:/, but up to you.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode96\nsha3/sha3.go:96: func (d *digest) BlockSize() int { return d.Rate() }\nYes, BlockSize is an unfortunate wart in the Hash interface that was added in order to support HMAC. I think your choice here is reasonable.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode107\nsha3/sha3.go:107: offset := (d.totalAbsorbed + absorbed) % d.Rate()\nI suspect this function could be simpler and faster with something like:\n\nvar t uint64\nfor i := len(p) - 1; i >= 0; i-- {\n  t |= p[i]\n  t <<= 8\n}\nt <<= 8*(offset%laneSize)\nd.a[lane] ^= t\n\n(There's probably a bug in there, just coding out loud.)\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode111\nsha3/sha3.go:111: copy(tempBuf[offset%laneSize:(offset%laneSize)+len(p)], p)\nI think the text between ':' and ']' can be omitted. copy will only copy the minimum of the length of the source and destination, so it will already only copy len(p) bytes.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode118\nsha3/sha3.go:118: // Since lanes are stored internall as type uin64, this requires converting the incoming bytes into uint64 using a little endian interpretation.\n'y' on the end of internally.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode118\nsha3/sha3.go:118: // Since lanes are stored internall as type uin64, this requires converting the incoming bytes into uint64 using a little endian interpretation.\ns/type uin64/uint64s/ and s/uint64/uint64s/ later on.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode122\nsha3/sha3.go:122: \nNo need for the blank line at the start of the function.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode136\nsha3/sha3.go:136: for absorbed < len(p)-7 {\nThis isn't really a problem, but this code doesn't look very canonical. Go code typically reslices when processing a []byte. i.e. lots of p = p[8:] and then testing len(p) > 0 etc.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode142\nsha3/sha3.go:142: //fmt.Println(lane, absorbed, absorbed+lane*laneSize)\nlooks like debugging left in.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode165\nsha3/sha3.go:165: // The padding is 10*1 with enough 0s to fill out an entire block.\n\"The padding starts and ends with a one bit, with one or more zero bits in between in order to fill out of entire block\"\n\n(I read \"10*1\" as \"ten times one\" for a while before figuring it out.)\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode175\nsha3/sha3.go:175: // Sum takes a (possibly nil) set of remaining bytes and \"squeezes\" out bytes from the state into an output buffer.\nSum takes a slice to which the hash is appended. The slice is not input data!\n\n(This allows one to avoid allocating for every hash computation.)\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode178\nsha3/sha3.go:178: \nBlank line not needed at start of function.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode191\nsha3/sha3.go:191: \nrm blank line.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode232\nsha3/sha3.go:232: //Given no parameters, a new instance with the highest security level is provided.\nI don't think we need this function. In other packages we have done something like this because the package is called, say, \"sha256\", therefore \"sha256.New\" is obvious. However, in this case, \"sha3.New512\" will be clear but \"sha3.New\" much less so.",
			"disapproval": false,
			"date": "2013-03-20 14:48:50.806750",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are fixes for the issues you brought up. With some of the optimizations suggested it's now about twice as fast, and about 75% as fast as SHA512.\n\nNote that I added a new test function to find bugs in the suggested changes to the absorption code, and slightly re-factored the sum including fixing the fact that I badly misinterpreted the interface to Sum()\n\nThanks!\n\nJoe\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go\nFile sha3/sha3.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode1\nsha3/sha3.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> 2013, and similarly in the other files.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode13\nsha3/sha3.go:13: \nDone. When I run godoc it picks up the Package doc okay but not most of the functions. Am I missing something?\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode39\nsha3/sha3.go:39: var padOpen = [laneSize]uint64{\nNot the result of benchmarking, but vestigal. I originally was going to pre-compute all padding blocks, before realizing that doesn't work since they may end up different lanes. Changed to a shift for padOpen.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode57\nsha3/sha3.go:57: a             [numLanes]uint64  //main state of the hash\nOn 2013/03/20 14:48:50, agl1 wrote:\n> space after \"//\"\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode73\nsha3/sha3.go:73: // Capacity returns the number of bytes not touched by directly during squeezing or absorbing, but which are only being updated by the permutation function.\nOn 2013/03/20 14:48:50, agl1 wrote:\n> \"by directly\" might be a typo.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode74\nsha3/sha3.go:74: func (d *digest) Capacity() int {\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Rename Capacity to capacity unless there's a reason to export this method.\n> Similarly for Rate.\n\nDone for now. It may be useful to some clients to expose direct access to the sponge function (including absorbing and squeezing data).\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode78\nsha3/sha3.go:78: // Rate returns number of bytes of the internal state which can be absorbed or squeezed in between calls to the permutation function.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> \"returns the number\"\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode80\nsha3/sha3.go:80: return (stateSize - d.Capacity())\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Outer parens are unnecessary.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode87\nsha3/sha3.go:87: for x := 0; x < numLanes; x++ {\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> for i := range d.a {\n>   d.a[i] = 0\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode92\nsha3/sha3.go:92: // BlockSize, required by the Digest interface, does not have a standard intepretation for a sponge-based construction like SHA3.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> What is the Digest interface?\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode93\nsha3/sha3.go:93: // Currently we return the data rate, the number of bytes which can be absorbed per invocation of the permutation function.\nOn 2013/03/20 14:48:50, agl1 wrote:\n> consider s/,/:/, but up to you.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode96\nsha3/sha3.go:96: func (d *digest) BlockSize() int { return d.Rate() }\nOn 2013/03/20 14:48:50, agl1 wrote:\n> Yes, BlockSize is an unfortunate wart in the Hash interface that was added in\n> order to support HMAC. I think your choice here is reasonable. \n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode107\nsha3/sha3.go:107: offset := (d.totalAbsorbed + absorbed) % d.Rate()\nYes, your approach is a little bit faster (~10% or so). There was a bug in your attempt, the two lines of the loop need to be swapped or else you shift the buffer an extra time.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode111\nsha3/sha3.go:111: copy(tempBuf[offset%laneSize:(offset%laneSize)+len(p)], p)\nOn 2013/03/20 14:48:50, agl1 wrote:\n> I think the text between ':' and ']' can be omitted. copy will only copy the\n> minimum of the length of the source and destination, so it will already only\n> copy len(p) bytes.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode118\nsha3/sha3.go:118: // Since lanes are stored internall as type uin64, this requires converting the incoming bytes into uint64 using a little endian interpretation.\nOn 2013/03/20 14:48:50, agl1 wrote:\n> 'y' on the end of internally.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode118\nsha3/sha3.go:118: // Since lanes are stored internall as type uin64, this requires converting the incoming bytes into uint64 using a little endian interpretation.\nOn 2013/03/20 14:48:50, agl1 wrote:\n> s/type uin64/uint64s/ and s/uint64/uint64s/ later on.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode122\nsha3/sha3.go:122: \nOn 2013/03/20 14:48:50, agl1 wrote:\n> No need for the blank line at the start of the function.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode136\nsha3/sha3.go:136: for absorbed < len(p)-7 {\nI re-wrote it in this idiom, it ended up cleaner.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode142\nsha3/sha3.go:142: //fmt.Println(lane, absorbed, absorbed+lane*laneSize)\nOn 2013/03/20 14:48:50, agl1 wrote:\n> looks like debugging left in.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode165\nsha3/sha3.go:165: // The padding is 10*1 with enough 0s to fill out an entire block.\nOn 2013/03/20 14:48:50, agl1 wrote:\n> \"The padding starts and ends with a one bit, with one or more zero bits in\n> between in order to fill out of entire block\"\n> \n> (I read \"10*1\" as \"ten times one\" for a while before figuring it out.)\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode175\nsha3/sha3.go:175: // Sum takes a (possibly nil) set of remaining bytes and \"squeezes\" out bytes from the state into an output buffer.\nYes, I interpreted the Interface very incorrectly. I reworked this and split the squeezing into a separate function-if necessary this could be exported to use SHA3 directly as a PRNG.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode178\nsha3/sha3.go:178: \nOn 2013/03/20 14:48:50, agl1 wrote:\n> Blank line not needed at start of function.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode191\nsha3/sha3.go:191: \nOn 2013/03/20 14:48:50, agl1 wrote:\n> rm blank line.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode206\nsha3/sha3.go:206: func (d *digest) dumpState() {\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> If this is just for debugging then move it to sha3_test.go or delete it\n> entirely.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode222\nsha3/sha3.go:222: return &digest{outputSize: outputSize}\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> I don't think this function is doing much (and \"new\" shadows a built-in\n> function). Just inline it below:\n> \n> func New224() hash.Hash { &digest{outputSize: 224 / 8} }\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode225\nsha3/sha3.go:225: // The NewX() constructors enable initializing a hash in any of the four standard sizes of output, specified in bits.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Drop the parens.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode232\nsha3/sha3.go:232: //Given no parameters, a new instance with the highest security level is provided.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Go doc comments should begin with the name of the thing being commented upon.\n> Thus:\n> // New returns a new instance etc.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3.go#newcode232\nsha3/sha3.go:232: //Given no parameters, a new instance with the highest security level is provided.\nOn 2013/03/20 14:48:50, agl1 wrote:\n> I don't think we need this function. In other packages we have done something\n> like this because the package is called, say, \"sha256\", therefore \"sha256.New\"\n> is obvious. However, in this case, \"sha3.New512\" will be clear but \"sha3.New\"\n> much less so.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode5\nsha3/sha3_test.go:5: // This file implements test code for the SHA3 package.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> I'd drop this sentence. It's obvious from the file name.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode6\nsha3/sha3_test.go:6: // These tests are a subset of those provided by the Keccak web site: http://keccak.noekeon.org/\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Place a file-level comment below the package clause, so that it's less likely to\n> be confused for a package doc comment:\n> --------\n> // Copyright 2013 The Go Authors. All rights reserved.\n> // Use of this source code is governed by a BSD-style\n> // license that can be found in the LICENSE file.\n> \n> package sha3\n> \n> // These tests are a subset of those provided by the Keccak web site:\n> http://keccak.noekeon.org/\n> \n> import (\n> --------\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode29\nsha3/sha3_test.go:29: repeatCount     int  // If repeatCount is greater than 1, the input input is concatenated this many times.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> \"input input\"\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode36\nsha3/sha3_test.go:36: func (t *hashTest) Test(testDigests map[int]*digest) (bool, string) {\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> This should return error, not (bool, string), and the caller can test err !=\n> nil.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: switch t.inputHex {\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> if t.inputHex {\n> \n> but instead of an inputHex field, I'd make a top-level\n> \n> func decodeHex(s string) string {\n>   b, err := hex.DecodeString(s)\n>   if err != nil {\n>     panic(err)\n>   }\n>   return string(b)\n> }\n> \n> and make your test cases call that, instead of having this function do the\n> hex-decoding.\n> \n> You could then do the string to []byte conversion for t.input outside the loop,\n> which for TestLongVectors would avoid 16777216-1 unnecessary pieces of garbage.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode58\nsha3/sha3_test.go:58: for size, expectedOutput := range t.expectedOutputs {\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> The usual Go language is got and want, not computedOutput and expectedOutput.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode70\nsha3/sha3_test.go:70: return false, fmt.Sprintf(\"SHA3[%d](%s) = %s want %s\", testDigests[size].Size()*8, errorInput, computedOutput, strings.ToLower(expectedOutput))\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> You probably want %q instead of %s.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode70\nsha3/sha3_test.go:70: return false, fmt.Sprintf(\"SHA3[%d](%s) = %s want %s\", testDigests[size].Size()*8, errorInput, computedOutput, strings.ToLower(expectedOutput))\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Use fmt.Errorf instead of fmt.Sprintf to return an error.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode80\nsha3/sha3_test.go:80: for i := 0; i < len(result); i++ {\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> for i := range result {\n>   result[i] = byte(i)\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode142\nsha3/sha3_test.go:142: // benchmarkBulkHashHelper tests the speed to hash a 16 kiB buffer.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Drop the \"Helper\". The difference in \"Benchmark\" and \"benchmark\" is enough to\n> distinguish these functions.\n> \n> Similarly for testVectorHelper.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode142\nsha3/sha3_test.go:142: // benchmarkBulkHashHelper tests the speed to hash a 16 kiB buffer.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Drop the \"Helper\". The difference in \"Benchmark\" and \"benchmark\" is enough to\n> distinguish these functions.\n> \n> Similarly for testVectorHelper.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode158\nsha3/sha3_test.go:158: // benchmarkBulkHashSHA3_X test the speed to hash a 16 kiB buffer by calling benchmarkBulkHashHelper.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> kiB should be KiB.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode169\nsha3/sha3_test.go:169: repeatCount: 16777216,\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> \"repeatCount: 16 * 1024 * 1024,\" might be clearer.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go\nFile sha3/sha3internal.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode1\nsha3/sha3internal.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nOn 2013/03/20 02:22:15, nigeltao wrote:\n> On 2013/03/20 02:17:43, nigeltao wrote:\n> > I'd rename the file from sha3internal.go to internal.go. \n> \n> Or, if the purpose of this file is to implement the Keccak-f function, I'd call\n> it keccakf.go.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode1\nsha3/sha3internal.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> I'd rename the file from sha3internal.go to internal.go. We're already in the\n> sha3 directory. There's no need to stutter.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode5\nsha3/sha3internal.go:5: // Package sha3internal implements the core Keccak permutation function necessary for computing SHA3.\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> It's not package sha3internal.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode14\nsha3/sha3internal.go:14: var RC = [...]uint64{\nOn 2013/03/20 02:17:43, nigeltao wrote:\n> Rename RC to rc unless there's a reason to export these values. Similarly for\n> R0.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode48\nsha3/sha3internal.go:48: return w<<i ^ w>>(64-i)\nGreat catch! This roughly doubled the speed of the benchmarks.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3internal.go#newcode124\nsha3/sha3internal.go:124: d.a[0] = d.b[0] ^ (^(d.b[1]) & d.b[2])\nOn 2013/03/20 02:22:15, nigeltao wrote:\n> The inner-most parens are unnecessary.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-20 23:36:15.965670",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: switch t.inputHex {\nOn 2013/03/20 23:36:16, jcb wrote:\n> On 2013/03/20 02:17:43, nigeltao wrote:\n> > if t.inputHex {\n> > \n> > but instead of an inputHex field, I'd make a top-level\n> > \n> > func decodeHex(s string) string {\n> >   b, err := hex.DecodeString(s)\n> >   if err != nil {\n> >     panic(err)\n> >   }\n> >   return string(b)\n> > }\n> > \n> > and make your test cases call that, instead of having this function do the\n> > hex-decoding.\n> > \n> > You could then do the string to []byte conversion for t.input outside the\n> loop,\n> > which for TestLongVectors would avoid 16777216-1 unnecessary pieces of\n> garbage.\n> \n> Done.\n\nNot (entirely) done? I would eliminate the t.inputHex field entirely.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go\nFile sha3/sha3.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode39\nsha3/sha3.go:39: const padOpen = 0x0000000000000001\nconst (\n    padOpen  = 0x0000000000000001\n    padClose = 0x8000000000000000\n)\n\nwill let gofmt align the RHSs.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode136\nsha3/sha3.go:136: lastLane := minInt(d.rate()/laneSize, firstLane+(len(p))/laneSize)\nUnnecessary parens around len(p).\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode205\nsha3/sha3.go:205: func (d_original *digest) Sum(in []byte) []byte {\nCall the method receiver d, and the new variable a few lines below dup.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode206\nsha3/sha3.go:206: \nDelete the blank line.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode29\nsha3/sha3_test.go:29: repeatCount     int  // input will be concatenated the input this many times.\nI would s/repeatCount/repeat/ and s/expectedOutputs/want/.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode44\nsha3/sha3_test.go:44: // It returns true or false based on the test passing, plus an error string for printing.\nThe comment needs updating.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode45\nsha3/sha3_test.go:45: func (t *hashTest) Test(testDigests map[int]*digest) error {\nRemove the argument, since it's always the global testDigests.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: \nDelete the blank line.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode60\nsha3/sha3_test.go:60: for i := 0; i < t.repeatCount || i == 0; i++ {\nWhen is t.repeatCount zero?\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode68\nsha3/sha3_test.go:68: got := strings.ToLower(hex.EncodeToString(testDigests[size].Sum(nil)))\nCall ToUpper instead of ToLower if want is always going to be upper case.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode70\nsha3/sha3_test.go:70: errorInput := t.input\nInstead of constructing an errorInput string, I'd add a desc field to hashTest, containing a short human-readable description of that test (including the \u00d7%d for the long test). For example, see http://golang.org/src/pkg/compress/zlib/reader_test.go\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode100\nsha3/sha3_test.go:100: for size := range testDigests {\nfor _, d := range testDigests {\n  d.Reset()\n  d.Write(buf)\n  etc\n}\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode106\nsha3/sha3_test.go:106: for i < len(buf) {\nfor i := 0; i < len(buf); {\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode117\nsha3/sha3_test.go:117: if !bytes.Equal(want, got) {\nThe usual Go order is got and want, not want and got. Similarly on the next line.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode118\nsha3/sha3_test.go:118: t.Fatalf(fmt.Sprintf(\"Unalighned SHA3[%d] = wanted %x, got %x\", testDigests[size].Size()*8, want, got))\nDrop the inner fmt.Sprintf. t.Fatalf is already an 'f' function.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode229\nsha3/sha3_test.go:229: func TestLongVectors(t *testing.T) {\nI'd just roll this together with TestShortVectors, and then inline the testVector helper function:\n\nfunc TestVectors(t *testing.T) {\n  testCases := append([]hashTest{}, shortTestVectors...)\n  if !testing.Short {\n    testCases = append(testCases, longTestVectors...)\n  }\nloop:\n  for _, tc := range testCases {\n    if err := tc.Test(); err != nil {\n      t.Errorf(\"%s: %v\", tc.desc, err)\n    }\n  }\n}\n\nOr remove the hashTest.Test method and just put that code inside the for loop above, replacing \"return fmt.Errorf(etc)\" with \"t.Errorf(etc); continue loop\".\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode286\nsha3/sha3_test.go:286: error := test.Test(testDigests)\ns/error/err/\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode288\nsha3/sha3_test.go:288: t.Fatalf(error.Error())\nt.Fatal(err), otherwise you'll print garbage if e.g. the error string contains \"%s\".\n\nAlso, change Fatal to Error. It's worth distinguishing whether all the vectors fail, or only the first one.",
			"disapproval": false,
			"date": "2013-03-21 02:36:49.997910",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also change the CL description opening line from:\nsha3/: new package\nto\ngo.crypto/sha3: new package.",
			"disapproval": false,
			"date": "2013-03-21 02:37:48.064250",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we're down to two issues of how the test vectors are stored-I think the current format is simplest but could be convinced otherwise.\n\nThanks again!\n\nJoe\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: switch t.inputHex {\nI don't follow what you're suggesting here. To support string and hex input (and the standard tests include both) we have to store somewhere how to interpret a string. Are you suggesting hard-coding it by having the test function call it for some test vectors and not others?\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go\nFile sha3/sha3.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode39\nsha3/sha3.go:39: const padOpen = 0x0000000000000001\nThinking about it further, abstracting these as named constants makes the code less readable so I inlined them. Their structure is straightforward and any change to the padding scheme would require changing the code anyways, there's no agility gained by abstracting them.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode136\nsha3/sha3.go:136: lastLane := minInt(d.rate()/laneSize, firstLane+(len(p))/laneSize)\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> Unnecessary parens around len(p).\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode205\nsha3/sha3.go:205: func (d_original *digest) Sum(in []byte) []byte {\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> Call the method receiver d, and the new variable a few lines below dup.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3.go#newcode206\nsha3/sha3.go:206: \nOn 2013/03/21 02:36:50, nigeltao wrote:\n> Delete the blank line.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode29\nsha3/sha3_test.go:29: repeatCount     int  // input will be concatenated the input this many times.\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> I would s/repeatCount/repeat/ and s/expectedOutputs/want/.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode44\nsha3/sha3_test.go:44: // It returns true or false based on the test passing, plus an error string for printing.\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> The comment needs updating.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode45\nsha3/sha3_test.go:45: func (t *hashTest) Test(testDigests map[int]*digest) error {\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> Remove the argument, since it's always the global testDigests.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: \nOn 2013/03/21 02:36:50, nigeltao wrote:\n> Delete the blank line.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode60\nsha3/sha3_test.go:60: for i := 0; i < t.repeatCount || i == 0; i++ {\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> When is t.repeatCount zero?\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode68\nsha3/sha3_test.go:68: got := strings.ToLower(hex.EncodeToString(testDigests[size].Sum(nil)))\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> Call ToUpper instead of ToLower if want is always going to be upper case.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode70\nsha3/sha3_test.go:70: errorInput := t.input\nI don't think this is helpful for test vectors like these which don't admit any short human-readable summary. They're just random, they don't exercise any specific functionality. Adding a fixed error string would just mean hard-coding what's produced here, which would mean specifying the data in two places.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode100\nsha3/sha3_test.go:100: for size := range testDigests {\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> for _, d := range testDigests {\n>   d.Reset()\n>   d.Write(buf)\n>   etc\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode106\nsha3/sha3_test.go:106: for i < len(buf) {\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> for i := 0; i < len(buf); {\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode117\nsha3/sha3_test.go:117: if !bytes.Equal(want, got) {\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> The usual Go order is got and want, not want and got. Similarly on the next\n> line.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode118\nsha3/sha3_test.go:118: t.Fatalf(fmt.Sprintf(\"Unalighned SHA3[%d] = wanted %x, got %x\", testDigests[size].Size()*8, want, got))\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> Drop the inner fmt.Sprintf. t.Fatalf is already an 'f' function.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode229\nsha3/sha3_test.go:229: func TestLongVectors(t *testing.T) {\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> I'd just roll this together with TestShortVectors, and then inline the\n> testVector helper function:\n> \n> func TestVectors(t *testing.T) {\n>   testCases := append([]hashTest{}, shortTestVectors...)\n>   if !testing.Short {\n>     testCases = append(testCases, longTestVectors...)\n>   }\n> loop:\n>   for _, tc := range testCases {\n>     if err := tc.Test(); err != nil {\n>       t.Errorf(\"%s: %v\", tc.desc, err)\n>     }\n>   }\n> }\n> \n> Or remove the hashTest.Test method and just put that code inside the for loop\n> above, replacing \"return fmt.Errorf(etc)\" with \"t.Errorf(etc); continue loop\".\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode286\nsha3/sha3_test.go:286: error := test.Test(testDigests)\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> s/error/err/\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/20001/sha3/sha3_test.go#newcode288\nsha3/sha3_test.go:288: t.Fatalf(error.Error())\nOn 2013/03/21 02:36:50, nigeltao wrote:\n> t.Fatal(err), otherwise you'll print garbage if e.g. the error string contains\n> \"%s\".\n> \n> Also, change Fatal to Error. It's worth distinguishing whether all the vectors\n> fail, or only the first one.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-21 19:06:25.823680",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with nits.\n\nIf Nigel says LGTM then I'll land it.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go\nFile sha3/sha3.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode20\nsha3/sha3.go:20: // Note that changing this to a size besides 8 requires using other than uint64 to store each lane.\n\"using a type other than a uint64\" or maybe \"using other than a uint64\".\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode23\nsha3/sha3.go:23: // sliceSize represent the dimensions of the internal state, a square matrix of\ns on the end of \"represent\"\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode24\nsha3/sha3.go:24: // sliceSize ** 2 lanes. This is both the size of \"rows\" and \"columns\" dimension in the\nmissing \"the\": \"size of the \"rows\" and ...\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode106\nsha3/sha3.go:106: // Track the total number of bytes absorbed and update the hash state at the end.\nI don't think you want this variable, although it's your call.\n\nIf you eliminate it, and just update d.totalAbsorbed, then you can remove an argument to unalignedAbsorb. You do need to change the += in the unaligned case to something like:\n\nn := d.unalignedAbsorb(...\np = p[n:]\nd.totalAbsorbed += n\n\nAlthough this does remove the += in the original code which makes the p[absorbed:] look wrong, until one notes that absorbed must be zero beforehand.\n\nIt also saves you lots of additions to d.totalAbsorbed.\n\nSince this function always processes the whole input, it can just have `total := len(p)` at the top to keep the value for the return.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode183\nsha3/sha3.go:183: var buf [8]byte\nI'd remove buf because the multiple appends make Sum(nil) a worst-case, as append probably allocates and moves multiple times.\n\nif cap(in) >= toSqueeze {\n  in = in[:toSqueeze]\n} else {\n  in = make([]byte, toSqueeze)\n}\n\nthen:\n\nbinary.LittleEndian.PutUint64(in, d.a[i/laneSize])\nin = in[laneSize:]\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode206\nsha3/sha3.go:206: // The NewX constructors enable initializing a hash in any of the four standard sizes.\nThese will probably need to be updated, right? NIST hasn't settled on the final capacities for the various sizes as I understand.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go#newcode26\nsha3/sha3_test.go:26: // hashTest represents a test vector inputs and expected outputs at multiple sizes.\ns/inputs/input/\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go#newcode109\nsha3/sha3_test.go:109: for size := range testDigests {\nfor _, digest := range testDigests {\n  digest.Reset()\n}\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go#newcode112\nsha3/sha3_test.go:112: // Convert input data to a byte array, decoding Hex if necessary\ns/decoding Hex/hex decoding/",
			"disapproval": false,
			"date": "2013-03-21 20:27:23.827740",
			"approval": true
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixed nits plus two substantial items:\n*Changed the squeeze() function to only allocate one or fewer times. Please confirm that this is a reasonable implementation.\n*To hedge against future standardization changes, changed the names from New512 to NewKeccak512, etc. Whatever they call the final variants (there's still debate about this, they might just be named like SHA3-512 by output size or they might be named something ghastly like SHA3-512_1024 to indicate the underlying capacity parameter. If we put Keccak in the name it should be clear this may not be the eventual standard.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go\nFile sha3/sha3.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode20\nsha3/sha3.go:20: // Note that changing this to a size besides 8 requires using other than uint64 to store each lane.\nOn 2013/03/21 20:27:23, agl1 wrote:\n> \"using a type other than a uint64\" or maybe \"using other than a uint64\".\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode23\nsha3/sha3.go:23: // sliceSize represent the dimensions of the internal state, a square matrix of\nOn 2013/03/21 20:27:23, agl1 wrote:\n> s on the end of \"represent\"\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode24\nsha3/sha3.go:24: // sliceSize ** 2 lanes. This is both the size of \"rows\" and \"columns\" dimension in the\nOn 2013/03/21 20:27:23, agl1 wrote:\n> missing \"the\": \"size of the \"rows\" and ...\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode106\nsha3/sha3.go:106: // Track the total number of bytes absorbed and update the hash state at the end.\nDone. This made the code cleaner.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode183\nsha3/sha3.go:183: var buf [8]byte\nI don't think your suggested code complies with the Hash interface, since the output needs to be appended to any input data (though I've mistaken the intention of this interface once already).\n\nPoint taken about not calling multiple appends though-please review my updated implementation which performs only a single memory allocation (if needed).\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3.go#newcode206\nsha3/sha3.go:206: // The NewX constructors enable initializing a hash in any of the four standard sizes.\nIndeed. To avoid issues later on, I changed the names from NewX to NewKeccakX, so that whatever the eventual standard SHA3 algorithm names won't be confused with these (which reflect the final Keccak proposal). They haven't settled on the final capacity/output combinations so I changed capacity to a free parameter.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go#newcode26\nsha3/sha3_test.go:26: // hashTest represents a test vector inputs and expected outputs at multiple sizes.\nOn 2013/03/21 20:27:23, agl1 wrote:\n> s/inputs/input/\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go#newcode109\nsha3/sha3_test.go:109: for size := range testDigests {\nThis might call extraneous Resets (not that they're very expensive) if a testCase doesn't use all available hash versions.\n\nhttps://codereview.appspot.com/7760044/diff/27001/sha3/sha3_test.go#newcode112\nsha3/sha3_test.go:112: // Convert input data to a byte array, decoding Hex if necessary\nOn 2013/03/21 20:27:23, agl1 wrote:\n> s/decoding Hex/hex decoding/\n\nDone.",
			"disapproval": false,
			"date": "2013-03-22 01:00:38.987030",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: switch t.inputHex {\nOn 2013/03/21 19:06:25, jcb wrote:\n> I don't follow what you're suggesting here.\n\nI'd write it like this:\n\n// testVector represents a test input and expected outputs from multiple algorithm variants.\ntype testVector struct {\n\tdesc   string\n\tinput  []byte\n\trepeat int // The input will be written this many times.\n\twant   map[string]string\n}\n\n// decodeHex converts an hex-encoded string into a raw byte string.\nfunc decodeHex(s string) []byte {\n\tb, err := hex.DecodeString(s)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn b\n}\n\n// shortTestVectors stores a series of short testVectors.\n// Inputs of 8, 248, and 264 bits from http://keccak.noekeon.org/ are included below.\n// The standard defines additional test inputs of all sizes between 0 and 2047 bits.\n// Because the current implementation can only handle an integral number of bytes,\n// most of the standard test inputs can't be used.\nvar shortKeccakTestVectors = []testVector{\n\t{\n\t\tdesc:   \"short8\",\n\t\tinput:  decodeHex(\"CC\"),\n\t\trepeat: 1,\n\t\twant: map[string]string{\n\t\t\t\"Keccak224\": \"A9CAB59EB40A10B246290F2D6086E32E3689FAF1D26B470C899F2802\",\n\t\t\t\"Keccak256\": \"EEAD6DBFC7340A56CAEDC044696A168870549A6A7F6F56961E84A54BD9970B8A\",\n\t\t\t\"Keccak384\": \"1B84E62A46E5A201861754AF5DC95C4A1A69CAF4A796AE405680161E29572641F5FA1E8641D7958336EE7B11C58F73E9\",\n\t\t\t\"Keccak512\": \"8630C13CBD066EA74BBE7FE468FEC1DEE10EDC1254FB4C1B7C5FD69B646E44160B8CE01D05A0908CA790DFB080F4B513BC3B6225ECE7A810371441A5AC666EB9\",\n\t\t},\n\t},\n\t{\n\t\tdesc:   \"short248\",\n\t\tinput:  decodeHex(\"84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29\"),\n\t\trepeat: 1,\n\t\twant: map[string]string{\n\t\t\t\"Keccak224\": \"81AF3A7A5BD4C1F948D6AF4B96F93C3B0CF9C0E7A6DA6FCD71EEC7F6\",\n\t\t\t\"Keccak256\": \"D477FB02CAAA95B3280EC8EE882C29D9E8A654B21EF178E0F97571BF9D4D3C1C\",\n\t\t\t\"Keccak384\": \"503DCAA4ADDA5A9420B2E436DD62D9AB2E0254295C2982EF67FCE40F117A2400AB492F7BD5D133C6EC2232268BC27B42\",\n\t\t\t\"Keccak512\": \"9D8098D8D6EDBBAA2BCFC6FB2F89C3EAC67FEC25CDFE75AA7BD570A648E8C8945FF2EC280F6DCF73386109155C5BBC444C707BB42EAB873F5F7476657B1BC1A8\",\n\t\t},\n\t},\n\t{\n\t\tdesc:   \"short264\",\n\t\tinput:  decodeHex(\"DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046\"),\n\t\trepeat: 1,\n\t\twant: map[string]string{\n\t\t\t\"Keccak224\": \"F217812E362EC64D4DC5EACFABC165184BFA456E5C32C2C7900253D0\",\n\t\t\t\"Keccak256\": \"E78C421E6213AFF8DE1F025759A4F2C943DB62BBDE359C8737E19B3776ED2DD2\",\n\t\t\t\"Keccak384\": \"CF38764973F1EC1C34B5433AE75A3AAD1AAEF6AB197850C56C8617BCD6A882F6666883AC17B2DCCDBAA647075D0972B5\",\n\t\t\t\"Keccak512\": \"9A7688E31AAF40C15575FC58C6B39267AAD3722E696E518A9945CF7F7C0FEA84CB3CB2E9F0384A6B5DC671ADE7FB4D2B27011173F3EEEAF17CB451CF26542031\",\n\t\t},\n\t},\n}\n\n// longTestVectors stores longer testVector (currently only one).\n// The computed test vector is about 413 MiB long, taken from http://keccak.noekeon.org/.\nvar longKeccakTestVectors = []testVector{\n\t{\n\t\tdesc:   \"long-abc\",\n\t\tinput:  []byte(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\"),\n\t\trepeat: 16 * 1024 * 1024,\n\t\twant: map[string]string{\n\t\t\t\"Keccak224\": \"C42E4AEE858E1A8AD2976896B9D23DD187F64436EE15969AFDBC68C5\",\n\t\t\t\"Keccak256\": \"5F313C39963DCF792B5470D4ADE9F3A356A3E4021748690A958372E2B06F82A4\",\n\t\t\t\"Keccak384\": \"9B7168B4494A80A86408E6B9DC4E5A1837C85DD8FF452ED410F2832959C08C8C0D040A892EB9A755776372D4A8732315\",\n\t\t\t\"Keccak512\": \"3E122EDAF37398231CFACA4C7C216C9D66D5B899EC1D7AC617C40C7261906A45FC01617A021E5DA3BD8D4182695B5CB785A28237CBB167590E34718E56D8AAB8\",\n\t\t},\n\t},\n}\n\n// TestKeccakVectors checks that correct output is produced for a set of known testVectors.\nfunc TestKeccakVectors(t *testing.T) {\n\ttestCases := append([]testVector{}, shortKeccakTestVectors...)\n\tif !testing.Short() {\n\t\ttestCases = append(testCases, longKeccakTestVectors...)\n\t}\n\tfor _, tc := range testCases {\n\t\tfor alg, want := range tc.want {\n\t\t\td := testDigests[alg]\n\t\t\td.Reset()\n\t\t\tfor i := 0; i < tc.repeat; i++ {\n\t\t\t\td.Write(tc.input)\n\t\t\t}\n\t\t\tgot := strings.ToUpper(hex.EncodeToString(d.Sum(nil)))\n\t\t\tif got != want {\n\t\t\t\tt.Errorf(\"%s, alg=%s\\ngot  %q\\nwant %q\", tc.desc, alg, got, want)\n\t\t\t\td.dumpState()\n\t\t\t}\n\t\t}\n\t}\n}\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode103\nsha3/sha3_test.go:103: // In short testing mode, the longer tests are skipped.\nI don't think this comment is adding much.\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode121\nsha3/sha3_test.go:121: for alg := range tc.want {\nI'd reverse the order of the loops, and avoid 64 million map lookups. After doing that, you're ranging over tc.want three times; you can collapse that.\n\nOn my workstation, that cuts the \"go test\" running time by 10%.\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode139\nsha3/sha3_test.go:139: t.Errorf(\"Test vector failed for %s(%s): got %q, wanted %q\", alg, errorInput, got, want)\ns/wanted/want/\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode179\nsha3/sha3_test.go:179: t.Errorf(\"Inconsistent output after unaligned writes to %s: got %x, wanted %x\", alg, got, want)\ns/wanted/want/",
			"disapproval": false,
			"date": "2013-03-22 04:21:21.720770",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Test code cleaned up.\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/7001/sha3/sha3_test.go#newcode46\nsha3/sha3_test.go:46: switch t.inputHex {\nOn 2013/03/22 04:21:21, nigeltao wrote:\n> On 2013/03/21 19:06:25, jcb wrote:\n> > I don't follow what you're suggesting here.\n> \n> I'd write it like this:\n> \n> // testVector represents a test input and expected outputs from multiple\n> algorithm variants.\n> type testVector struct {\n> \tdesc   string\n> \tinput  []byte\n> \trepeat int // The input will be written this many times.\n> \twant   map[string]string\n> }\n> \n> // decodeHex converts an hex-encoded string into a raw byte string.\n> func decodeHex(s string) []byte {\n> \tb, err := hex.DecodeString(s)\n> \tif err != nil {\n> \t\tpanic(err)\n> \t}\n> \treturn b\n> }\n> \n> // shortTestVectors stores a series of short testVectors.\n> // Inputs of 8, 248, and 264 bits from http://keccak.noekeon.org/ are included\n> below.\n> // The standard defines additional test inputs of all sizes between 0 and 2047\n> bits.\n> // Because the current implementation can only handle an integral number of\n> bytes,\n> // most of the standard test inputs can't be used.\n> var shortKeccakTestVectors = []testVector{\n> \t{\n> \t\tdesc:   \"short8\",\n> \t\tinput:  decodeHex(\"CC\"),\n> \t\trepeat: 1,\n> \t\twant: map[string]string{\n> \t\t\t\"Keccak224\": \"A9CAB59EB40A10B246290F2D6086E32E3689FAF1D26B470C899F2802\",\n> \t\t\t\"Keccak256\":\n> \"EEAD6DBFC7340A56CAEDC044696A168870549A6A7F6F56961E84A54BD9970B8A\",\n> \t\t\t\"Keccak384\":\n> \"1B84E62A46E5A201861754AF5DC95C4A1A69CAF4A796AE405680161E29572641F5FA1E8641D7958336EE7B11C58F73E9\",\n> \t\t\t\"Keccak512\":\n> \"8630C13CBD066EA74BBE7FE468FEC1DEE10EDC1254FB4C1B7C5FD69B646E44160B8CE01D05A0908CA790DFB080F4B513BC3B6225ECE7A810371441A5AC666EB9\",\n> \t\t},\n> \t},\n> \t{\n> \t\tdesc:   \"short248\",\n> \t\tinput: \n> decodeHex(\"84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29\"),\n> \t\trepeat: 1,\n> \t\twant: map[string]string{\n> \t\t\t\"Keccak224\": \"81AF3A7A5BD4C1F948D6AF4B96F93C3B0CF9C0E7A6DA6FCD71EEC7F6\",\n> \t\t\t\"Keccak256\":\n> \"D477FB02CAAA95B3280EC8EE882C29D9E8A654B21EF178E0F97571BF9D4D3C1C\",\n> \t\t\t\"Keccak384\":\n> \"503DCAA4ADDA5A9420B2E436DD62D9AB2E0254295C2982EF67FCE40F117A2400AB492F7BD5D133C6EC2232268BC27B42\",\n> \t\t\t\"Keccak512\":\n> \"9D8098D8D6EDBBAA2BCFC6FB2F89C3EAC67FEC25CDFE75AA7BD570A648E8C8945FF2EC280F6DCF73386109155C5BBC444C707BB42EAB873F5F7476657B1BC1A8\",\n> \t\t},\n> \t},\n> \t{\n> \t\tdesc:   \"short264\",\n> \t\tinput: \n> decodeHex(\"DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046\"),\n> \t\trepeat: 1,\n> \t\twant: map[string]string{\n> \t\t\t\"Keccak224\": \"F217812E362EC64D4DC5EACFABC165184BFA456E5C32C2C7900253D0\",\n> \t\t\t\"Keccak256\":\n> \"E78C421E6213AFF8DE1F025759A4F2C943DB62BBDE359C8737E19B3776ED2DD2\",\n> \t\t\t\"Keccak384\":\n> \"CF38764973F1EC1C34B5433AE75A3AAD1AAEF6AB197850C56C8617BCD6A882F6666883AC17B2DCCDBAA647075D0972B5\",\n> \t\t\t\"Keccak512\":\n> \"9A7688E31AAF40C15575FC58C6B39267AAD3722E696E518A9945CF7F7C0FEA84CB3CB2E9F0384A6B5DC671ADE7FB4D2B27011173F3EEEAF17CB451CF26542031\",\n> \t\t},\n> \t},\n> }\n> \n> // longTestVectors stores longer testVector (currently only one).\n> // The computed test vector is about 413 MiB long, taken from\n> http://keccak.noekeon.org/.\n> var longKeccakTestVectors = []testVector{\n> \t{\n> \t\tdesc:   \"long-abc\",\n> \t\tinput: \n> []byte(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\"),\n> \t\trepeat: 16 * 1024 * 1024,\n> \t\twant: map[string]string{\n> \t\t\t\"Keccak224\": \"C42E4AEE858E1A8AD2976896B9D23DD187F64436EE15969AFDBC68C5\",\n> \t\t\t\"Keccak256\":\n> \"5F313C39963DCF792B5470D4ADE9F3A356A3E4021748690A958372E2B06F82A4\",\n> \t\t\t\"Keccak384\":\n> \"9B7168B4494A80A86408E6B9DC4E5A1837C85DD8FF452ED410F2832959C08C8C0D040A892EB9A755776372D4A8732315\",\n> \t\t\t\"Keccak512\":\n> \"3E122EDAF37398231CFACA4C7C216C9D66D5B899EC1D7AC617C40C7261906A45FC01617A021E5DA3BD8D4182695B5CB785A28237CBB167590E34718E56D8AAB8\",\n> \t\t},\n> \t},\n> }\n> \n> // TestKeccakVectors checks that correct output is produced for a set of known\n> testVectors.\n> func TestKeccakVectors(t *testing.T) {\n> \ttestCases := append([]testVector{}, shortKeccakTestVectors...)\n> \tif !testing.Short() {\n> \t\ttestCases = append(testCases, longKeccakTestVectors...)\n> \t}\n> \tfor _, tc := range testCases {\n> \t\tfor alg, want := range tc.want {\n> \t\t\td := testDigests[alg]\n> \t\t\td.Reset()\n> \t\t\tfor i := 0; i < tc.repeat; i++ {\n> \t\t\t\td.Write(tc.input)\n> \t\t\t}\n> \t\t\tgot := strings.ToUpper(hex.EncodeToString(d.Sum(nil)))\n> \t\t\tif got != want {\n> \t\t\t\tt.Errorf(\"%s, alg=%s\\ngot  %q\\nwant %q\", tc.desc, alg, got, want)\n> \t\t\t\td.dumpState()\n> \t\t\t}\n> \t\t}\n> \t}\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go\nFile sha3/sha3_test.go (right):\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode103\nsha3/sha3_test.go:103: // In short testing mode, the longer tests are skipped.\nOn 2013/03/22 04:21:21, nigeltao wrote:\n> I don't think this comment is adding much.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode121\nsha3/sha3_test.go:121: for alg := range tc.want {\nOn 2013/03/22 04:21:21, nigeltao wrote:\n> I'd reverse the order of the loops, and avoid 64 million map lookups. After\n> doing that, you're ranging over tc.want three times; you can collapse that.\n> \n> On my workstation, that cuts the \"go test\" running time by 10%.\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode139\nsha3/sha3_test.go:139: t.Errorf(\"Test vector failed for %s(%s): got %q, wanted %q\", alg, errorInput, got, want)\nOn 2013/03/22 04:21:21, nigeltao wrote:\n> s/wanted/want/\n\nDone.\n\nhttps://codereview.appspot.com/7760044/diff/39001/sha3/sha3_test.go#newcode179\nsha3/sha3_test.go:179: t.Errorf(\"Inconsistent output after unaligned writes to %s: got %x, wanted %x\", alg, got, want)\nOn 2013/03/22 04:21:21, nigeltao wrote:\n> s/wanted/want/\n\nDone.",
			"disapproval": false,
			"date": "2013-03-22 16:15:51.992190",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hmmm, alternative is that there are upstream test vectors of up to 4KB, but\r\nthey are random. I'd say shipping those around is not worth the trouble\r\neither.\r\n\r\nI can cut the long vectors down to size and run them through the Python\r\nversion to cross-check.\r\n\r\n\r\nOn Fri, Mar 22, 2013 at 12:37 PM, Adam Langley <agl@golang.org> wrote:\r\n\r\n> On Fri, Mar 22, 2013 at 12:15 PM,  <jcb@google.com> wrote:\r\n> > Test code cleaned up.\r\n>\r\n> I was just about to submit but:\r\n>\r\n> a) I need to put you in CONTRIBUTORS first. I can take care of that.\r\n> b) the test is taking 70s to complete and I don't believe that it's\r\n> worth the time. By reducing the long test from 1GB to 64MB, the test\r\n> takes ~5 seconds to run, which is much more reasonable.\r\n>\r\n> Do you object to the latter? Obviously we're not taking values\r\n> directly from the upstream reference tables any longer, which is a\r\n> shame, but I think it's either that or delete the long test.\r\n>\r\n>\r\n> Cheers\r\n>\r\n> AGL\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-22 16:47:38.746410",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jcb@google.com",
				"agl@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=87c30004e36a&repo=crypto ***\n\ngo.crypto/sha3: new package\nAdded a pure Go implementation of SHA3 (Keccak) which implements the hash.Hash interface.\nA test file is included with performance benchmarks and standard test vectors.\n\nR=agl, nigeltao\nCC=golang-dev\nhttps://codereview.appspot.com/7760044\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2013-03-22 19:00:11.475270",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 22, 2013 at 12:15 PM,  <jcb@google.com> wrote:\r\n> Test code cleaned up.\r\n\r\nI was just about to submit but:\r\n\r\na) I need to put you in CONTRIBUTORS first. I can take care of that.\r\nb) the test is taking 70s to complete and I don't believe that it's\r\nworth the time. By reducing the long test from 1GB to 64MB, the test\r\ntakes ~5 seconds to run, which is much more reasonable.\r\n\r\nDo you object to the latter? Obviously we're not taking values\r\ndirectly from the upstream reference tables any longer, which is a\r\nshame, but I think it's either that or delete the long test.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2013-03-22 16:37:02.184390",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 22, 2013 at 12:47 PM, Joseph Bonneau <jcb@google.com> wrote:\r\n> Hmmm, alternative is that there are upstream test vectors of up to 4KB, but\r\n> they are random. I'd say shipping those around is not worth the trouble\r\n> either.\r\n>\r\n> I can cut the long vectors down to size and run them through the Python\r\n> version to cross-check.\r\n\r\nIf you can confirm this with the Python code then I'll land it:\r\n\r\nvar longKeccakTestVectors = []testVector{\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7{\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7desc:   \"long-1GiB\",\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7input:\r\n[]byte(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\"),\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7repeat: 1024 * 1024,\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7want: map[string]string{\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak224\":\r\n\"50E35E40980FEEFF1EA490957B0E970257F75EA0D410EE0F0B8A7A58\",\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak256\":\r\n\"5015A4935F0B51E091C6550A94DCD262C08998232CCAA22E7F0756DEAC0DC0D0\",\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak384\":\r\n\"7907A8D0FAA7BC6A90FE14C6C958C956A0877E751455D8F13ACDB96F144B5896E716C06EC0CB56557A94EF5C3355F6F3\",\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak512\":\r\n\"3EC327D6759F769DEB74E80CA70C831BC29CAB048A4BF4190E4A1DD5C6507CF2B4B58937FDE81D36014E7DFE1B1DD8B0F27CB7614F9A645FEC114F1DAAEFC056\",\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7},\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7},\r\n}\r\n\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2013-03-22 16:52:20.401780",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Took 30 min, but the Python code confirmed these.\r\n\r\n\r\nOn Fri, Mar 22, 2013 at 12:52 PM, Adam Langley <agl@golang.org> wrote:\r\n\r\n> On Fri, Mar 22, 2013 at 12:47 PM, Joseph Bonneau <jcb@google.com> wrote:\r\n> > Hmmm, alternative is that there are upstream test vectors of up to 4KB,\r\n> but\r\n> > they are random. I'd say shipping those around is not worth the trouble\r\n> > either.\r\n> >\r\n> > I can cut the long vectors down to size and run them through the Python\r\n> > version to cross-check.\r\n>\r\n> If you can confirm this with the Python code then I'll land it:\r\n>\r\n> var longKeccakTestVectors = []testVector{\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7{\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7desc:   \"long-1GiB\",\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7input:\r\n> []byte(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\"),\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7repeat: 1024 * 1024,\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7want: map[string]string{\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak224\":\r\n> \"50E35E40980FEEFF1EA490957B0E970257F75EA0D410EE0F0B8A7A58\",\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak256\":\r\n> \"5015A4935F0B51E091C6550A94DCD262C08998232CCAA22E7F0756DEAC0DC0D0\",\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak384\":\r\n>\r\n> \"7907A8D0FAA7BC6A90FE14C6C958C956A0877E751455D8F13ACDB96F144B5896E716C06EC0CB56557A94EF5C3355F6F3\",\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak512\":\r\n>\r\n> \"3EC327D6759F769DEB74E80CA70C831BC29CAB048A4BF4190E4A1DD5C6507CF2B4B58937FDE81D36014E7DFE1B1DD8B0F27CB7614F9A645FEC114F1DAAEFC056\",\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7},\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7},\r\n> }\r\n>\r\n>\r\n>\r\n> Cheers\r\n>\r\n> AGL\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-22 18:22:19.189050",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Uploaded a final CL with these test vectors\r\n\r\n\r\nOn Fri, Mar 22, 2013 at 2:22 PM, Joseph Bonneau <jcb@google.com> wrote:\r\n\r\n> Took 30 min, but the Python code confirmed these.\r\n>\r\n>\r\n> On Fri, Mar 22, 2013 at 12:52 PM, Adam Langley <agl@golang.org> wrote:\r\n>\r\n>> On Fri, Mar 22, 2013 at 12:47 PM, Joseph Bonneau <jcb@google.com> wrote:\r\n>> > Hmmm, alternative is that there are upstream test vectors of up to 4KB,\r\n>> but\r\n>> > they are random. I'd say shipping those around is not worth the trouble\r\n>> > either.\r\n>> >\r\n>> > I can cut the long vectors down to size and run them through the Python\r\n>> > version to cross-check.\r\n>>\r\n>> If you can confirm this with the Python code then I'll land it:\r\n>>\r\n>> var longKeccakTestVectors = []testVector{\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7{\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7desc:   \"long-1GiB\",\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7input:\r\n>>\r\n>> []byte(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\"),\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7repeat: 1024 * 1024,\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7want: map[string]string{\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak224\":\r\n>> \"50E35E40980FEEFF1EA490957B0E970257F75EA0D410EE0F0B8A7A58\",\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak256\":\r\n>> \"5015A4935F0B51E091C6550A94DCD262C08998232CCAA22E7F0756DEAC0DC0D0\",\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak384\":\r\n>>\r\n>> \"7907A8D0FAA7BC6A90FE14C6C958C956A0877E751455D8F13ACDB96F144B5896E716C06EC0CB56557A94EF5C3355F6F3\",\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\"Keccak512\":\r\n>>\r\n>> \"3EC327D6759F769DEB74E80CA70C831BC29CAB048A4BF4190E4A1DD5C6507CF2B4B58937FDE81D36014E7DFE1B1DD8B0F27CB7614F9A645FEC114F1DAAEFC056\",\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7},\r\n>> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7},\r\n>> }\r\n>>\r\n>>\r\n>>\r\n>> Cheers\r\n>>\r\n>> AGL\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-22 18:22:55.695590",
			"approval": false
		}
	],
	"owner_email": "jcb@google.com",
	"private": false,
	"base_url": "",
	"owner": "jcb",
	"subject": "go.crypto/sha3: new package",
	"created": "2013-03-19 17:41:30.220790",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		17001,
		20001,
		27001,
		34001,
		39001,
		48001,
		54001,
		56001
	],
	"modified": "2013-03-22 18:22:55.695590",
	"closed": false,
	"issue": 7760044
}