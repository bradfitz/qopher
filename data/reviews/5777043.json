{
	"description": "net, net/rpc, reflect, time: document concurrency guarantees\n\nFixes issue 1599.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5777043/diff/3001/src/pkg/net/net.go\nFile src/pkg/net/net.go (right):\n\nhttp://codereview.appspot.com/5777043/diff/3001/src/pkg/net/net.go#newcode144\nsrc/pkg/net/net.go:144: // SetReadDeadline sets the deadline for all Read calls to return.\n\"future\" here too?\n\nhttp://codereview.appspot.com/5777043/diff/3001/src/pkg/net/net.go#newcode150\nsrc/pkg/net/net.go:150: // SetWriteDeadline sets the deadline for all Write calls to return.\nand here?\n\nhttp://codereview.appspot.com/5777043/diff/3001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5777043/diff/3001/src/pkg/time/time.go#newcode16\nsrc/pkg/time/time.go:16: // type time.Time, not *time.Time.  A Time value can be used by\nThis seems misleading. Given that a time.Time *value* is immutable, this is implied already. This statement almost implies that it's mutable somehow.\n\nMaybe something like: \"Given that a Time value is immutable, blah blah blah\"",
			"disapproval": false,
			"date": "2012-03-07 19:00:37.480396",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-07 18:44:51.575161",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 7, 2012 at 14:00,  <bradfitz@golang.org> wrote:\n> This seems misleading. Given that a time.Time *value* is immutable, this\n> is implied already. This statement almost implies that it's mutable\n> somehow.\n>\n> Maybe something like: \"Given that a Time value is immutable, blah blah\n> blah\"\n\nI don't want to claim that all immutable values have this property.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-07 19:10:52.476149",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nApplied the net changes.\n",
			"disapproval": false,
			"date": "2012-03-07 19:11:48.649980",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 7, 2012 at 11:10 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Wed, Mar 7, 2012 at 14:00,  <bradfitz@golang.org> wrote:\n> > This seems misleading. Given that a time.Time *value* is immutable, this\n> > is implied already. This statement almost implies that it's mutable\n> > somehow.\n> >\n> > Maybe something like: \"Given that a Time value is immutable, blah blah\n> > blah\"\n>\n> I don't want to claim that all immutable values have this property.\n>\n\nDon't they?  Maybe we're talking about different things.\n\nOutside of (*Time).UnmarshalJSON, there are no pointer-receiver methods for\nTime.\n\nI'm not even sure what the sentence you've added is trying to say.  What's\nthe fear?  You don't document anywhere that two simultaneous goroutines can\nalso read an int, or a float64.  Why is time.Time special in this regard?\n",
			"disapproval": false,
			"date": "2012-03-07 19:36:32.801212",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 7, 2012 at 14:36, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I'm not even sure what the sentence you've added is trying to say. \u00a0What's\n> the fear? \u00a0You don't document anywhere that two\u00a0simultaneous\u00a0goroutines can\n> also read an int, or a float64.\n\nhttp://golang.org/doc/go_mem.html certainly does.\n\n> Why is time.Time special in this regard?\n\nMainly because it has methods, and there is no telling\nwhat those methods do.\n\nI suppose that since the methods are value methods\nit could go without saying, but even so I think it bears\nreinforcing.  The methods on reflect.Value are value\nmethods but they have different constraints.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-07 19:44:14.224241",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Wed, Mar 7, 2012 at 11:44 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Wed, Mar 7, 2012 at 14:36, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > I'm not even sure what the sentence you've added is trying to say.\n>  What's\n> > the fear?  You don't document anywhere that two simultaneous goroutines\n> can\n> > also read an int, or a float64.\n>\n> http://golang.org/doc/go_mem.html certainly does.\n>\n> > Why is time.Time special in this regard?\n>\n> Mainly because it has methods, and there is no telling\n> what those methods do.\n>\n> I suppose that since the methods are value methods\n> it could go without saying, but even so I think it bears\n> reinforcing.  The methods on reflect.Value are value\n> methods but they have different constraints.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2012-03-07 19:45:44.114571",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2a3fba1e4d21 ***\n\nnet, net/rpc, reflect, time: document concurrency guarantees\n\nFixes issue 1599.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5777043",
			"disapproval": false,
			"date": "2012-03-07 19:55:12.506293",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5777043: net, net/rpc, reflect, time: document concurrency guarantees",
	"created": "2012-03-07 18:44:40.909707",
	"patchsets": [
		1,
		3,
		3001,
		6001,
		11002
	],
	"modified": "2012-03-07 19:55:13.562882",
	"closed": true,
	"issue": 5777043
}