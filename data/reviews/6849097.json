{
	"description": "time: add Now()/UnixNano() malloc tests\n\nThe fix for issue 4403 may include more calls to time.Now().UnixNano(). I was concerned that if this function allocated it would cause additional garbage on the heap. It turns out that it doesn't, which is a nice surprise.\n\nAlso add benchmark for Now().UnixNano()",
	"cc": [
		"bradfitz@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Fri, Nov 23, 2012 at 9:35 PM, <dave@cheney.net> wrote:\r\n\r\n> PTAL. I removed some junk that leaked in from a previous change.\r\n>\r\n> https://codereview.appspot.**com/6849097/<https://codereview.appspot.com/6849097/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-24 05:37:33.721180",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "tested on windows/386.\nFYI: time.Now() will allocate only when stack split occurs.\n\nhttps://codereview.appspot.com/6849097/diff/9001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/6849097/diff/9001/src/pkg/time/time_test.go#newcode1055\nsrc/pkg/time/time_test.go:1055: func TestCountMallocs(t *testing.T) {\ni think you need to add this:\ndefer runtime.GOMAXPROCS(runtime.GOMAXPROCS(1))\n\nparallel malloc test is always unstable.",
			"disapproval": false,
			"date": "2012-11-24 08:15:37.486440",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=50a6b483af08 ***\n\ntime: add Now()/UnixNano() malloc tests\n\nThe fix for issue 4403 may include more calls to time.Now().UnixNano(). I was concerned that if this function allocated it would cause additional garbage on the heap. It turns out that it doesn't, which is a nice surprise.\n\nAlso add benchmark for Now().UnixNano()\n\nR=bradfitz, minux.ma\nCC=golang-dev\nhttp://codereview.appspot.com/6849097",
			"disapproval": false,
			"date": "2012-11-25 00:29:15.342480",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Fri, Nov 23, 2012 at 9:30 PM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: bradfitz, minux,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org, minux.ma@gmail.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> time: add Now()/UnixNano() malloc tests\r\n>\r\n> The fix for issue 4403 may include more calls to time.Now().UnixNano().\r\n> I was concerned that if this function allocated it would cause\r\n> additional garbage on the heap. It turns out that it doesn't, which is a\r\n> nice surprise.\r\n>\r\n> Also add benchmark for Now().UnixNano()\r\n>\r\n> Please review this at http://codereview.appspot.com/**6849097/<http://codereview.appspot.com/6849097/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/time/time_test.go\r\n>\r\n>\r\n> Index: src/pkg/time/time_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/time/time_test.go\r\n> +++ b/src/pkg/time/time_test.go\r\n> @@ -10,6 +10,7 @@\r\n>         \"encoding/json\"\r\n>         \"fmt\"\r\n>         \"math/rand\"\r\n> +       \"runtime\"\r\n>         \"strconv\"\r\n>         \"strings\"\r\n>         \"testing\"\r\n> @@ -228,7 +229,6 @@\r\n>         {\"RFC1123\", RFC1123, \"Wed, 04 Feb 2009 21:00:57 PST\"},\r\n>         {\"RFC1123Z\", RFC1123Z, \"Wed, 04 Feb 2009 21:00:57 -0800\"},\r\n>         {\"RFC3339\", RFC3339, \"2009-02-04T21:00:57-08:00\"},\r\n> -       {\"RFC3339Nano\", RFC3339Nano, \"2009-02-04T21:00:57.0123456-**\r\n> 08:00\"},\r\n>         {\"Kitchen\", Kitchen, \"9:00PM\"},\r\n>         {\"am/pm\", \"3pm\", \"9pm\"},\r\n>         {\"AM/PM\", \"3PM\", \"9PM\"},\r\n> @@ -310,6 +310,7 @@\r\n>         {\"RFC1123\", RFC1123, \"Thu, 04 Feb 2010 21:00:57.01234 PST\", true,\r\n> true, 1, 5},\r\n>         {\"RFC1123Z\", RFC1123Z, \"Thu, 04 Feb 2010 21:00:57.01234 -0800\",\r\n> true, true, 1, 5},\r\n>         {\"RFC3339\", RFC3339, \"2010-02-04T21:00:57.**012345678-08:00\",\r\n> true, false, 1, 9},\r\n> +       {\"RFC3339Nano\", RFC3339Nano, \"2010-02-04T21:00:57.**012345678-08:00\",\r\n> true, false, 1, 9},\r\n>         {\"custom: \\\"2006-01-02 15:04:05\\\"\", \"2006-01-02 15:04:05\",\r\n> \"2010-02-04 21:00:57.0\", false, false, 1, 0},\r\n>         // Amount of white space should not matter.\r\n>         {\"ANSIC\", ANSIC, \"Thu Feb 4 21:00:57 2010\", false, true, 1, 0},\r\n> @@ -1037,9 +1038,46 @@\r\n>         }\r\n>  }\r\n>\r\n> +var (\r\n> +       t Time\r\n> +       u int64\r\n> +)\r\n> +\r\n> +var mallocTest = []struct {\r\n> +       count int\r\n> +       desc  string\r\n> +       fn    func()\r\n> +}{\r\n> +       {0, `time.Now()`, func() { t = Now() }},\r\n> +       {0, `time.Now().UnixNano()`, func() { u = Now().UnixNano() }},\r\n> +}\r\n> +\r\n> +func TestCountMallocs(t *testing.T) {\r\n> +       for _, mt := range mallocTest {\r\n> +               const N = 100\r\n> +               memstats := new(runtime.MemStats)\r\n> +               runtime.ReadMemStats(memstats)\r\n> +               mallocs := 0 - memstats.Mallocs\r\n> +               for i := 0; i < N; i++ {\r\n> +                       mt.fn()\r\n> +               }\r\n> +               runtime.ReadMemStats(memstats)\r\n> +               mallocs += memstats.Mallocs\r\n> +               if mallocs/N > uint64(mt.count) {\r\n> +                       t.Errorf(\"%s: expected %d mallocs, got %d\",\r\n> mt.desc, mt.count, mallocs/N)\r\n> +               }\r\n> +       }\r\n> +}\r\n> +\r\n>  func BenchmarkNow(b *testing.B) {\r\n>         for i := 0; i < b.N; i++ {\r\n> -               Now()\r\n> +               t = Now()\r\n> +       }\r\n> +}\r\n> +\r\n> +func BenchmarkNowUnixNano(b *testing.B) {\r\n> +       for i := 0; i < b.N; i++ {\r\n> +               u = Now().UnixNano()\r\n>         }\r\n>  }\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-24 05:34:08.177830",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-24 05:30:24.972260",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I removed some junk that leaked in from a previous change.",
			"disapproval": false,
			"date": "2012-11-24 05:35:05.541400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. I'll submit this when we have a few more builders passing.\n\nhttps://codereview.appspot.com/6849097/diff/9001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/6849097/diff/9001/src/pkg/time/time_test.go#newcode1055\nsrc/pkg/time/time_test.go:1055: func TestCountMallocs(t *testing.T) {\nOn 2012/11/24 08:15:37, minux wrote:\n> i think you need to add this:\n> defer runtime.GOMAXPROCS(runtime.GOMAXPROCS(1))\n> \n> parallel malloc test is always unstable.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-24 08:18:44.871650",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6849097: time: add Now()/UnixNano() malloc tests",
	"created": "2012-11-24 05:19:55.821500",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		11003
	],
	"modified": "2012-11-25 00:29:17.509330",
	"closed": true,
	"issue": 6849097
}