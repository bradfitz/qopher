{
	"description": "syscall: fix 32-bit uid calls\n        16-bit uid calls are not always supported in newer kernels.",
	"cc": [
		"dave@cheney.net",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\nOn 2012/06/02 22:18:44, rsc wrote:\n> Thanks for doing this. Can you please revert zerrors_linux_arm.go? If\n> you think those changes are important too, please send them as a\n> separate CL. I'd like to include this fix (the syscalls) in Go 1.0.2\n> but the new constants are not important enough to be included.\nDone.",
			"disapproval": false,
			"date": "2012-06-02 22:36:28.557925",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Surely?\r\n\r\nDid Linux policy change? Syscalls are phased out now?\r\n On Jun 2, 2012 3:14 PM, \"minux\" <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Sun, Jun 3, 2012 at 6:08 AM, Dave Cheney <dave@cheney.net> wrote:\r\n>\r\n>> fixes issue building on Raspberry Pi under (insert distribution here) ?\r\n>\r\n> i think this is not specific to Raspberry Pi, new kernel will surely\r\n> remove support for\r\n> those 16-bit uid syscalls.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:21:40.705524",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6279047/diff/7002/src/pkg/syscall/syscall_linux_arm.go\nFile src/pkg/syscall/syscall_linux_arm.go (right):\n\nhttp://codereview.appspot.com/6279047/diff/7002/src/pkg/syscall/syscall_linux_arm.go#newcode45\nsrc/pkg/syscall/syscall_linux_arm.go:45: // (16-bit uid calls are no longer supported in newer kernels)\ns/no longer/not always/",
			"disapproval": false,
			"date": "2012-06-02 22:45:49.375516",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=31e36672e3df ***\n\nsyscall: fix 32-bit uid calls\n        16-bit uid calls are not always supported in newer kernels.\n\nR=dave, rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6279047",
			"disapproval": false,
			"date": "2012-06-02 22:50:17.155621",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 2, 2012 at 6:21 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Surely?\r\n> Did Linux policy change? Syscalls are phased out now?\r\n\r\nWhat kernel version added the 32-bit system calls?\r\n\r\nI assume they have been there nearly forever and that it is just a bug\r\nthat we didn't set the system calls to use them in the first place,\r\nbut I'd be happy to hear confirmation.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:24:45.298992",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-02 22:05:03.911273",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "fixes issue building on Raspberry Pi under (insert distribution here) ?\r\n\r\nOn Sun, Jun 3, 2012 at 8:05 AM,  <minux.ma@gmail.com> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> syscall: regen for Linux/ARM, fix 32-bit uid calls\r\n> \u00a0 \u00a0 \u00a0 \u00a016-bit uid calls are no longer supported in newer kernels.\r\n>\r\n> Please review this at http://codereview.appspot.com/6279047/\r\n>\r\n> Affected files:\r\n> \u00a0src/pkg/syscall/syscall_linux_arm.go\r\n> \u00a0M src/pkg/syscall/zerrors_linux_arm.go\r\n> \u00a0M src/pkg/syscall/zsyscall_linux_arm.go\r\n>\r\n>\r\n> Index: src/pkg/syscall/syscall_linux_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_linux_arm.go\r\n> +++ b/src/pkg/syscall/syscall_linux_arm.go\r\n> @@ -41,26 +41,28 @@\r\n> \u00a0//sys \u00a0recvmsg(s int, msg *Msghdr, flags int) (n int, err error)\r\n> \u00a0//sys \u00a0sendmsg(s int, msg *Msghdr, flags int) (err error)\r\n>\r\n> -//sys \u00a0Chown(path string, uid int, gid int) (err error)\r\n> -//sys \u00a0Fchown(fd int, uid int, gid int) (err error)\r\n> +// 64-bit file system and 32-bit uid calls\r\n> +// (16-bit uid calls are no longer supported in newer kernels)\r\n> +//sys \u00a0Chown(path string, uid int, gid int) (err error) = SYS_CHOWN32\r\n> +//sys \u00a0Fchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32\r\n> \u00a0//sys \u00a0Fstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\r\n> \u00a0//sys \u00a0Fstatfs(fd int, buf *Statfs_t) (err error) = SYS_FSTATFS64\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getegid() (egid int)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Geteuid() (euid int)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getgid() (gid int)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getuid() (uid int)\r\n> -//sys \u00a0Lchown(path string, uid int, gid int) (err error)\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getegid() (egid int) = SYS_GETEGID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Geteuid() (euid int) = SYS_GETEUID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getgid() (gid int) = SYS_GETGID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getuid() (uid int) = SYS_GETUID32\r\n> +//sys \u00a0Lchown(path string, uid int, gid int) (err error) = SYS_LCHOWN32\r\n> \u00a0//sys \u00a0Listen(s int, n int) (err error)\r\n> \u00a0//sys \u00a0Lstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\r\n> \u00a0//sys \u00a0Sendfile(outfd int, infd int, offset *int64, count int) (written\r\n> int, err error) = SYS_SENDFILE64\r\n> \u00a0//sys \u00a0Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n\r\n> int, err error) = SYS__NEWSELECT\r\n> -//sys \u00a0Setfsgid(gid int) (err error)\r\n> -//sys \u00a0Setfsuid(uid int) (err error)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setgid(gid int) (err error)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setregid(rgid int, egid int) (err error)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setresgid(rgid int, egid int, sgid int) (err error)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setresuid(ruid int, euid int, suid int) (err error)\r\n> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setreuid(ruid int, euid int) (err error)\r\n> +//sys \u00a0Setfsgid(gid int) (err error) = SYS_SETFSGID32\r\n> +//sys \u00a0Setfsuid(uid int) (err error) = SYS_SETFSUID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setgid(gid int) (err error) = SYS_SETGID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setregid(rgid int, egid int) (err error) = SYS_SETREGID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setresgid(rgid int, egid int, sgid int) (err error) =\r\n> SYS_SETRESGID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setresuid(ruid int, euid int, suid int) (err error) =\r\n> SYS_SETRESUID32\r\n> +//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setreuid(ruid int, euid int) (err error) = SYS_SETREUID32\r\n> \u00a0//sys \u00a0Shutdown(fd int, how int) (err error)\r\n> \u00a0//sys \u00a0Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags\r\n> int) (n int, err error)\r\n> \u00a0//sys \u00a0Stat(path string, stat *Stat_t) (err error) = SYS_STAT64\r\n> Index: src/pkg/syscall/zerrors_linux_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/zerrors_linux_arm.go\r\n> +++ b/src/pkg/syscall/zerrors_linux_arm.go\r\n> @@ -48,6 +48,7 @@\r\n> \u00a0 \u00a0 \u00a0 \u00a0AF_UNSPEC \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x0\r\n> \u00a0 \u00a0 \u00a0 \u00a0AF_WANPIPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x19\r\n> \u00a0 \u00a0 \u00a0 \u00a0AF_X25 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x9\r\n> + \u00a0 \u00a0 \u00a0 ARPD_FLUSH \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x3\r\n> \u00a0 \u00a0 \u00a0 \u00a0ARPHRD_ADAPT \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x108\r\n> \u00a0 \u00a0 \u00a0 \u00a0ARPHRD_APPLETLK \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x8\r\n> \u00a0 \u00a0 \u00a0 \u00a0ARPHRD_ARCNET \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x7\r\n> @@ -146,6 +147,11 @@\r\n> \u00a0 \u00a0 \u00a0 \u00a0BPF_TXA \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x80\r\n> \u00a0 \u00a0 \u00a0 \u00a0BPF_W \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x0\r\n> \u00a0 \u00a0 \u00a0 \u00a0BPF_X \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x8\r\n> + \u00a0 \u00a0 \u00a0 CFLUSH \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0xf\r\n> + \u00a0 \u00a0 \u00a0 CSTART \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x11\r\n> + \u00a0 \u00a0 \u00a0 CSTATUS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= '\\0'\r\n> + \u00a0 \u00a0 \u00a0 CSTOP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x13\r\n> + \u00a0 \u00a0 \u00a0 CSUSP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x1a\r\n> \u00a0 \u00a0 \u00a0 \u00a0DT_BLK \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x6\r\n> \u00a0 \u00a0 \u00a0 \u00a0DT_CHR \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x2\r\n> \u00a0 \u00a0 \u00a0 \u00a0DT_DIR \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x4\r\n> @@ -1068,6 +1074,7 @@\r\n> \u00a0 \u00a0 \u00a0 \u00a0S_IXGRP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x8\r\n> \u00a0 \u00a0 \u00a0 \u00a0S_IXOTH \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x1\r\n> \u00a0 \u00a0 \u00a0 \u00a0S_IXUSR \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0x40\r\n> + \u00a0 \u00a0 \u00a0 TCFLSH \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x540b\r\n> \u00a0 \u00a0 \u00a0 \u00a0TCP_CONGESTION \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0xd\r\n> \u00a0 \u00a0 \u00a0 \u00a0TCP_CORK \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x3\r\n> \u00a0 \u00a0 \u00a0 \u00a0TCP_DEFER_ACCEPT \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0x9\r\n> Index: src/pkg/syscall/zsyscall_linux_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/zsyscall_linux_arm.go\r\n> +++ b/src/pkg/syscall/zsyscall_linux_arm.go\r\n> @@ -1203,7 +1203,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Chown(path string, uid int, gid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_CHOWN,\r\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(uid), uintptr(gid))\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_CHOWN32,\r\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(uid), uintptr(gid))\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1213,7 +1213,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Fchown(fd int, uid int, gid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_FCHOWN, uintptr(fd), uintptr(uid),\r\n> uintptr(gid))\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_FCHOWN32, uintptr(fd), uintptr(uid),\r\n> uintptr(gid))\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1243,7 +1243,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Getegid() (egid int) {\r\n> - \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETEGID, 0, 0, 0)\r\n> + \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETEGID32, 0, 0, 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0egid = int(r0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0return\r\n> \u00a0}\r\n> @@ -1251,7 +1251,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Geteuid() (euid int) {\r\n> - \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETEUID, 0, 0, 0)\r\n> + \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETEUID32, 0, 0, 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0euid = int(r0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0return\r\n> \u00a0}\r\n> @@ -1259,7 +1259,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Getgid() (gid int) {\r\n> - \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETGID, 0, 0, 0)\r\n> + \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETGID32, 0, 0, 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0gid = int(r0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0return\r\n> \u00a0}\r\n> @@ -1267,7 +1267,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Getuid() (uid int) {\r\n> - \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETUID, 0, 0, 0)\r\n> + \u00a0 \u00a0 \u00a0 r0, _, _ := RawSyscall(SYS_GETUID32, 0, 0, 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0uid = int(r0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0return\r\n> \u00a0}\r\n> @@ -1275,7 +1275,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Lchown(path string, uid int, gid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_LCHOWN,\r\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(uid), uintptr(gid))\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_LCHOWN32,\r\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(uid), uintptr(gid))\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1327,7 +1327,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Setfsgid(gid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_SETFSGID, uintptr(gid), 0, 0)\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_SETFSGID32, uintptr(gid), 0, 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1337,7 +1337,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Setfsuid(uid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_SETFSUID, uintptr(uid), 0, 0)\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := Syscall(SYS_SETFSUID32, uintptr(uid), 0, 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1347,7 +1347,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Setgid(gid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETGID, uintptr(gid), 0, 0)\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETGID32, uintptr(gid), 0, 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1357,7 +1357,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Setregid(rgid int, egid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETREGID, uintptr(rgid), uintptr(egid),\r\n> 0)\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETREGID32, uintptr(rgid), uintptr(egid),\r\n> 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1367,7 +1367,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Setresgid(rgid int, egid int, sgid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETRESGID, uintptr(rgid), uintptr(egid),\r\n> uintptr(sgid))\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETRESGID32, uintptr(rgid),\r\n> uintptr(egid), uintptr(sgid))\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1377,7 +1377,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Setresuid(ruid int, euid int, suid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETRESUID, uintptr(ruid), uintptr(euid),\r\n> uintptr(suid))\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETRESUID32, uintptr(ruid),\r\n> uintptr(euid), uintptr(suid))\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n> @@ -1387,7 +1387,7 @@\r\n> \u00a0// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> \u00a0func Setreuid(ruid int, euid int) (err error) {\r\n> - \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETREUID, uintptr(ruid), uintptr(euid),\r\n> 0)\r\n> + \u00a0 \u00a0 \u00a0 _, _, e1 := RawSyscall(SYS_SETREUID32, uintptr(ruid), uintptr(euid),\r\n> 0)\r\n> \u00a0 \u00a0 \u00a0 \u00a0if e1 != 0 {\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = e1\r\n> \u00a0 \u00a0 \u00a0 \u00a0}\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:08:26.057590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for doing this. Can you please revert zerrors_linux_arm.go? If\r\nyou think those changes are important too, please send them as a\r\nseparate CL. I'd like to include this fix (the syscalls) in Go 1.0.2\r\nbut the new constants are not important enough to be included.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:18:44.824572",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 6:08 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> fixes issue building on Raspberry Pi under (insert distribution here) ?\r\n\r\ni think this is not specific to Raspberry Pi, new kernel will surely remove\r\nsupport for\r\nthose 16-bit uid syscalls.\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:13:58.404211",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 6:21 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Surely?\r\n>\r\n> Did Linux policy change? Syscalls are phased out now?\r\n>\r\nhttps://gist.github.com/2860253\r\nLinux raspberrypi 3.1.9+ #90 Wed Apr 18 18:23:05 BST 2012 armv6l GNU/Linux\r\n(from the recent Rasperry Pi discussion on golang-nuts list)\r\n\r\nthe 16-bit syscall is still there, but it will always return -ENOSYS in\r\nnewer kernels,\r\nand a failed getuid() will ruin everything because it is believed to always\r\nsucceed\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:33:46.825716",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 6:24 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Sat, Jun 2, 2012 at 6:21 PM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > Surely?\r\n> > Did Linux policy change? Syscalls are phased out now?\r\n>\r\n> What kernel version added the 32-bit system calls?\r\n>\r\nat least they are in 2.6.13.\r\n\r\n>\r\n> I assume they have been there nearly forever and that it is just a bug\r\n> that we didn't set the system calls to use them in the first place,\r\n> but I'd be happy to hear confirmation.\r\n\r\nyes, we have done the same for Linux/386, but not Linux/ARM.\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:39:25.775590",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A bit of Googling suggests this is a kernel compile option to support legacy 16bit UID syscalls. The Pi kernel must not have this enabled, whereas Ubuntu kernels do enable the option. \r\n\r\nI think it's a reasonable change to switch to the 32bit versions so we're not reliant on this flag. \r\n\r\nCheers\r\n\r\nDave\r\n\r\nOn 03/06/2012, at 8:33, minux <minux.ma@gmail.com> wrote:\r\n\r\n> \r\n> \r\n> On Sun, Jun 3, 2012 at 6:21 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Surely?\r\n> \r\n> Did Linux policy change? Syscalls are phased out now?\r\n> \r\n> https://gist.github.com/2860253\r\n> Linux raspberrypi 3.1.9+ #90 Wed Apr 18 18:23:05 BST 2012 armv6l GNU/Linux\r\n> (from the recent Rasperry Pi discussion on golang-nuts list)\r\n> \r\n> the 16-bit syscall is still there, but it will always return -ENOSYS in newer kernels,\r\n> and a failed getuid() will ruin everything because it is believed to always succeed\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:44:32.693710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 2, 2012 at 6:39 PM, minux <minux.ma@gmail.com> wrote:\r\n> at least they are in 2.6.13.\r\n\r\nthat was 2005, so good enough\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:45:33.771969",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "And we need a kernel with atomic helpers for ARM which is somewhere in the 2.6.mid twenties. \r\n\r\nOn 03/06/2012, at 8:45, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Sat, Jun 2, 2012 at 6:39 PM, minux <minux.ma@gmail.com> wrote:\r\n>> at least they are in 2.6.13.\r\n> \r\n> that was 2005, so good enough\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:48:16.090237",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6279047: syscall: regen for Linux/ARM, fix 32-bit uid calls",
	"created": "2012-06-02 21:59:19.780027",
	"patchsets": [
		1,
		2001,
		9001,
		7002,
		11004
	],
	"modified": "2012-06-02 22:50:21.165325",
	"closed": true,
	"issue": 6279047
}