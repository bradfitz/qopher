{
	"description": "runtime: prevent a panic from leaving the timer mutex held\n\nWhen deleting a timer, a panic due to nil deref\nwould leave a lock held, possibly leading to a deadlock\nin a defer. Instead return false on a nil timer.\n\nFixes issue 5745.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"dvyukov@google.com",
		"rsc@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is a proposed fix for \"Issue 5745:\tLockup in time.stopTimer\".\n\nFrom inspection, it seems like the same risk exists in addtimer. For example if malloc or newproc1 cause panics, then the timers mutex will be held during the defer and any addtimer/deltimer in the defer would deadlock. But it is a lot harder to see how to solve this risk compared to fixing deltimer.\n\nIdeas?",
			"disapproval": false,
			"date": "2013-06-21 08:31:11.288910",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM.\n\nThis introduces a race when deleting a timer that's currently being moved on the heap.\n\nEither insert a check for nil and panic or make stopping a nil timer into a no-op.",
			"disapproval": true,
			"date": "2013-06-21 08:57:32.807100",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, I would check for nil timer and return false.",
			"disapproval": false,
			"date": "2013-06-21 10:35:59.267720",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see the race. Assuming that mutex \"timer\" protects the integrity of the timer heap. You seem to be implying that the mutex also protects all accesses to struct Timer.i field as well. Is that the problem?\n\nThe reason I didn't fix it with a nil check is that I didn't want to make a behavior change. It seems correct to me that this is a segv-induced panic.",
			"disapproval": false,
			"date": "2013-06-21 11:46:36.932670",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/21 11:46:36, jeff.allen wrote:\n> I don't see the race. Assuming that mutex \"timer\" protects the integrity of the\n> timer heap. You seem to be implying that the mutex also protects all accesses to\n> struct Timer.i field as well. Is that the problem?\n\nYes.\n\n> The reason I didn't fix it with a nil check is that I didn't want to make a\n> behavior change. It seems correct to me that this is a segv-induced panic.\n\nIf you don't want to change the behavior, then you need to leave the deadlock there -- it is the current behavior.\nArguably stop of a non-started timer must just return false (the timer was not stopped):\n\nfunc (t *Timer) Stop() bool\n    Stop prevents the Timer from firing. It returns true if the call stops\n    the timer, false if the timer has already expired or been stopped. Stop\n    does not close the channel, to prevent a read from the channel\n    succeeding incorrectly.",
			"disapproval": false,
			"date": "2013-06-21 11:55:41.918090",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-21 13:30:51.504080",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep.go#newcode57\nsrc/pkg/time/sleep.go:57: if t == nil {\nit is not necessary nil\nconsider:\n\ntype X struct {\n  pad int\n  t Timer\n}\n\nvar x *X\n\nx.t.Stop()\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go\nFile src/pkg/time/sleep_test.go (right):\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go#newcode321\nsrc/pkg/time/sleep_test.go:321: ticker := NewTicker(Duration(10000) * Millisecond)\ns/Duration(10000) * Millisecond/Hour/?\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go#newcode328\nsrc/pkg/time/sleep_test.go:328: var tmr *Timer\ns/tmr/t/\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go#newcode329\nsrc/pkg/time/sleep_test.go:329: stopped := tmr.Stop()\nif tmr.Stop() {\n  ...\n}",
			"disapproval": false,
			"date": "2013-06-21 15:07:57.107510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep.go#newcode57\nsrc/pkg/time/sleep.go:57: if t == nil {\nOn 2013/06/21 15:07:57, dvyukov wrote:\n> it is not necessary nil\n> consider:\n> \n> type X struct {\n>   pad int\n>   t Timer\n> }\n> \n> var x *X\n> \n> x.t.Stop()\n\nDon't try to guard against that in this code.\nThat's a different bug that we should also fix for Go 1.2 (golang.org/issue/4238).",
			"disapproval": false,
			"date": "2013-06-21 18:39:32.474980",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/21 18:39:32, rsc wrote:\n> https://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep.go\n> File src/pkg/time/sleep.go (right):\n> \n> https://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep.go#newcode57\n> src/pkg/time/sleep.go:57: if t == nil {\n> On 2013/06/21 15:07:57, dvyukov wrote:\n> > it is not necessary nil\n> > consider:\n> > \n> > type X struct {\n> >   pad int\n> >   t Timer\n> > }\n> > \n> > var x *X\n> > \n> > x.t.Stop()\n> \n> Don't try to guard against that in this code.\n> That's a different bug that we should also fix for Go 1.2\n> (golang.org/issue/4238).\n\nt must be nil in the following case, right?\n\nvar x *X\nt := &x.t",
			"disapproval": false,
			"date": "2013-06-22 11:07:45.657420",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 22, 2013 at 4:07 AM,  <dvyukov@google.com> wrote:\r\n>\r\n> t must be nil in the following case, right?\r\n>\r\n> var x *X\r\n> t := &x.t\r\n\r\nhttp://golang.org/issue/4238\r\n",
			"disapproval": false,
			"date": "2013-06-22 14:41:03.211540",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go\nFile src/pkg/time/sleep_test.go (right):\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go#newcode321\nsrc/pkg/time/sleep_test.go:321: ticker := NewTicker(Duration(10000) * Millisecond)\nOn 2013/06/21 15:07:57, dvyukov wrote:\n> s/Duration(10000) * Millisecond/Hour/?\n\nDone.\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go#newcode328\nsrc/pkg/time/sleep_test.go:328: var tmr *Timer\nt is a *testing.T in this scope. So I dug deep in the vowel well and changed tmr to timer. :)\n\nhttps://codereview.appspot.com/10373047/diff/9002/src/pkg/time/sleep_test.go#newcode329\nsrc/pkg/time/sleep_test.go:329: stopped := tmr.Stop()\nOn 2013/06/21 15:07:57, dvyukov wrote:\n> if tmr.Stop() {\n>   ...\n> }\n\nDone.",
			"disapproval": false,
			"date": "2013-06-25 09:26:01.389000",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10373047/diff/23001/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/10373047/diff/23001/src/pkg/time/sleep.go#newcode83\nsrc/pkg/time/sleep.go:83: if t == nil {\nI can imagine how Stop() is useful with nil Timer. But Reset() with nil Timer seems different. It can't possibly do what user asks to do -- start a new timer. I think it needs to panic.",
			"disapproval": false,
			"date": "2013-06-25 10:28:43.584860",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10373047/diff/23001/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/10373047/diff/23001/src/pkg/time/sleep.go#newcode83\nsrc/pkg/time/sleep.go:83: if t == nil {\nOn 2013/06/25 10:28:43, dvyukov wrote:\n> I can imagine how Stop() is useful with nil Timer. But Reset() with nil Timer\n> seems different. It can't possibly do what user asks to do -- start a new timer.\n> I think it needs to panic.\n\nDone.",
			"disapproval": false,
			"date": "2013-06-25 14:58:37.718190",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good, but wait for Russ or Rob",
			"disapproval": false,
			"date": "2013-06-25 15:01:21.307720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think we should be defining the semantics of a nil *Timer. It's fine to panic, it just can't panic while the runtime is holding the timers lock. Could you try reverting the changes to time.go and applying this to runtime/time.goc instead?\n\ndiff -r b836ce280918 src/pkg/runtime/time.goc\n--- a/src/pkg/runtime/time.goc\tThu Jun 27 09:20:02 2013 -0700\n+++ b/src/pkg/runtime/time.goc\tThu Jun 27 12:29:33 2013 -0400\n@@ -131,12 +131,15 @@\n {\n \tint32 i;\n \n-\truntime\u00b7lock(&timers);\n-\n \t// t may not be registered anymore and may have\n \t// a bogus i (typically 0, if generated by Go).\n \t// Verify it before proceeding.\n+\t// Read i before acquiring lock on timers, so that\n+\t// if t is a bad pointer, the panic happens without\n+\t// the lock held.\n \ti = t->i;\n+\n+\truntime\u00b7lock(&timers);\n \tif(i < 0 || i >= timers.len || timers.t[i] != t) {\n \t\truntime\u00b7unlock(&timers);\n \t\treturn false;\n\nThen the nil Stop will panic as before, but a second one will also panic (not deadlock).\n\nRuss",
			"disapproval": false,
			"date": "2013-06-27 16:30:45.641300",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/27 16:30:45, rsc wrote:\n> I don't think we should be defining the semantics of a nil *Timer. It's fine to\n> panic, it just can't panic while the runtime is holding the timers lock. Could\n> you try reverting the changes to time.go and applying this to runtime/time.goc\n> instead?\n> \n> diff -r b836ce280918 src/pkg/runtime/time.goc\n> --- a/src/pkg/runtime/time.goc\tThu Jun 27 09:20:02 2013 -0700\n> +++ b/src/pkg/runtime/time.goc\tThu Jun 27 12:29:33 2013 -0400\n> @@ -131,12 +131,15 @@\n>  {\n>  \tint32 i;\n>  \n> -\truntime\u00b7lock(&timers);\n> -\n>  \t// t may not be registered anymore and may have\n>  \t// a bogus i (typically 0, if generated by Go).\n>  \t// Verify it before proceeding.\n> +\t// Read i before acquiring lock on timers, so that\n> +\t// if t is a bad pointer, the panic happens without\n> +\t// the lock held.\n>  \ti = t->i;\n> +\n> +\truntime\u00b7lock(&timers);\n>  \tif(i < 0 || i >= timers.len || timers.t[i] != t) {\n>  \t\truntime\u00b7unlock(&timers);\n>  \t\treturn false;\n> \n> Then the nil Stop will panic as before, but a second one will also panic (not\n> deadlock).\n> \n> Russ\n\nSee above:\nThis introduces a race when deleting a timer that's currently being moved on the heap.",
			"disapproval": false,
			"date": "2013-06-27 16:40:37.381600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Then do\r\n\r\n// Dereference t so that any panic happens here.\r\n// Discard result, because t might be moving in the heap.\r\ni = t->i;\r\nUSED(i);\r\n\r\nruntime.lock(&timers);\r\ni = t->i;\r\n",
			"disapproval": false,
			"date": "2013-06-27 17:10:31.817800",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com, dvyukov@google.com, rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-28 08:47:05.872850",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-02 01:22:58.117990",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=974a69ed9fcf ***\n\ntime: prevent a panic from leaving the timer mutex held\n\nWhen deleting a timer, a panic due to nil deref\nwould leave a lock held, possibly leading to a deadlock\nin a defer. Instead return false on a nil timer.\n\nFixes issue 5745.\n\nR=golang-dev, daniel.morsing, dvyukov, rsc, iant\nCC=golang-dev\nhttps://codereview.appspot.com/10373047\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-07-02 01:42:36.991540",
			"approval": false
		}
	],
	"owner_email": "jeff.allen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jeff.allen",
	"subject": "code review 10373047: runtime: prevent a panic from leaving the timer mutex held",
	"created": "2013-06-21 08:24:40.470410",
	"patchsets": [
		1,
		3001,
		11001,
		6003,
		9002,
		23001,
		30001,
		37001
	],
	"modified": "2013-07-17 08:34:41.949060",
	"closed": true,
	"issue": 10373047
}