{
	"description": "net/http: fix Transport races & deadlocks\n\nThanks to Dustin Sallings for exposing the most frustrating\nbug ever, and for providing repro cases (which formed the\nbasis of the new tests in this CL), and to Dave Cheney and\nDmitry Vyukov for help debugging and fixing.\n\nThis CL depends on submited pollster CLs ffd1e075c260 (Unix)\nand 14b544194509 (Windows), as well as unsubmitted 6852085.\nSome operating systems (OpenBSD, NetBSD, ?) may still require\nmore pollster work, fixing races (Issue 4434 and\nhttp://goo.gl/JXB6W).\n\nTested on linux-amd64 and darwin-amd64, both with GOMAXPROCS 1\nand 4 (all combinations of which previously failed differently)\n\nFixes Issue 4191\nUpdate Issue 4434 (related fallout from this bug)",
	"cc": [
		"dave@cheney.net",
		"bradfitz@golang.org",
		"dsallings@gmail.com",
		"rsc@golang.org",
		"fullung@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Whoops, I thought this would only mail Dave & Dustin.\r\n\r\nBut this more of the mystery, adding a net test (which is fine) and fixing\r\nthe server conn logging to have unique prefixes.  No other changes.\r\n\r\n\r\nOn Thu, Nov 22, 2012 at 7:15 AM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello dave@cheney.net, bradfitz@golang.org, dsallings@gmail.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> http://codereview.appspot.com/**6851061/<http://codereview.appspot.com/6851061/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-22 15:19:13.383620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\r\n\r\nThis is my pkg stress testing script\r\n\r\n% more ~/stress.bash\r\n#!/bin/bash\r\n\r\nset -e\r\ngo test -c\r\nPKG=$(basename $(pwd))\r\n\r\nwhile true ; do\r\n        export GOMAXPROCS=$[ 1 + $[ RANDOM % 128 ]]\r\n        ./$PKG.test $@ 2>&1\r\ndone\r\n\r\n\r\n% cd $PKG\r\n% bash ~/stress.bash $TEST_OPTIONS\r\n\r\nOn Mon, Nov 26, 2012 at 11:33 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> On Sun, Nov 25, 2012 at 4:25 PM, <dave@cheney.net> wrote:\r\n>>>\r\n>>> Done, even though I do like defers.\r\n>>\r\n>>\r\n>> So do I, but in this case the defer was interacting badly with the\r\n>> httptest.Server.Close() method.\r\n>\r\n>\r\n> Yeah.\r\n>\r\n>>\r\n>> LGTM.\r\n>\r\n>\r\n> Be sure to put LGTMs on the first line of replies, up at the top before any\r\n> quoted section, otherwise codereview.appspot.com and downstream tools don't\r\n> see it.\r\n>\r\n>> I'm not sure if you want to wait for a fix for 4434, this test\r\n>> will break eventually for people like fullung and his stress testing\r\n>> box.\r\n>\r\n>\r\n> I also plan to run all the Go unit tests on a ~bazillion machines with\r\n> varying GOMAXPROCS soonish here, since I'm also getting sick of flakiness.\r\n> So I'm fine committing this for now if you're cool with it (and want to give\r\n> me a top-line LGTM).  I also fixed Issue 4021 which should help fullung's\r\n> machine anyway, so net positive maybe?  :)\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 00:36:58.222790",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll wait on submitting this for a bit.  I'm still seeing the same GetToPut\r\nhang you did, if I run it in a loop for a bit.\r\n\r\nI'd like to see a test which makes that hang more reliable, too.\r\n\r\n\r\nOn Sun, Nov 25, 2012 at 4:46 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> LGTM. Very sorry, I had some leftover debugging in net/http/httptest.\r\n>\r\n> PASS\r\n> ok      net/http        8.499s\r\n>\r\n>\r\n> On Mon, Nov 26, 2012 at 11:44 AM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > On Sun, Nov 25, 2012 at 4:41 PM, <dave@cheney.net> wrote:\r\n> >>\r\n> >> NOT LGTM.\r\n> >>\r\n> >> Sorry, even simple tests in net/http are failing\r\n> >\r\n> >\r\n> > I can't reproduce any failures.\r\n> >\r\n> > Do you have any local modifications besides 03a6b8c9c396 + 6851061?\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 01:15:41.161140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM as long as dfc is happy",
			"disapproval": false,
			"date": "2012-11-26 20:32:18.255390",
			"approval": true
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nOn Monday, November 26, 2012 2:33:44 AM UTC+2, Brad Fitzpatrick wrote:\r\n>\r\n> I also plan to run all the Go unit tests on a ~bazillion machines with \r\n> varying GOMAXPROCS soonish here, since I'm also getting sick of flakiness. \r\n>  So I'm fine committing this for now if you're cool with it (and want to \r\n> give me a top-line LGTM).  I also fixed Issue 4021 which should help \r\n> fullung's machine anyway, so net positive maybe?  :)\r\n>\r\n\r\nI'm waiting for the dust to settle a bit before I start reporting on test \r\nresults from the infamous machine again.\r\n\r\nThere is a minor enhancement to the Go test options that might be useful \r\nfor a \"test-driven bug data mining\" effort:\r\n\r\nAllow some kind of random seed that is used to select a random subset of \r\nthe Test* functions matched by -run=... and run them in random order with a \r\nrandom number of repetitions, maybe varying GOMAXPROCS between runs too.\r\n\r\nSeed=0 can be the default, which gives the current behaviour of running \r\neverything that matches -test.run=... once. Seed<0 can mean choose a random \r\nseed, which should be printed if -test.v is specified, to allow easier \r\nreproduction in case of a failure.\r\n\r\nThis is especially useful if you farm out .test binaries to a big group of \r\nmachines. And you can farm out normal and -race versions.\r\n\r\nThere are a few tests that might bang into \"too many sockets in TIME_WAIT\" \r\ntype problems, but mostly it seems that tests should continue to pass under \r\nthis extended condition. Those that don't can probably be fixed.\r\n\r\nMy hope is that this can shake out issues like\r\n\r\nhttp://code.google.com/p/go/issues/detail?id=4423\r\n\r\nwhich I suspect has been lurking for quite a long time.\r\n\r\nCheers\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2012-11-26 21:09:32.994920",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I got the following failure during all.bash on linux/arm but could not\r\nreproduce by running go test -short net/http by hand. Maybe it\r\nhappened due to the high load during parallel testing of packages.\r\n\r\nR\u00e9my.\r\n\r\npanic: test timed out\r\n\r\ngoroutine 1108 [running]:\r\ntesting.alarm()\r\n\t/storage/remy/go/src/pkg/testing/testing.go:477 +0x60\r\ncreated by time.goFunc\r\n\t/storage/remy/go/src/pkg/time/sleep.go:96 +0x54\r\n\r\ngoroutine 1 [chan receive]:\r\ntesting.RunTests(0x10c00, 0x410b58, 0x81, 0x81, 0x10986501, ...)\r\n\t/storage/remy/go/src/pkg/testing/testing.go:378 +0x6ec\r\ntesting.Main(0x10c00, 0x410b58, 0x81, 0x81, 0x40be10, ...)\r\n\t/storage/remy/go/src/pkg/testing/testing.go:313 +0x68\r\nmain.main()\r\n\tnet/http/_test/_testmain.go:311 +0x94\r\n\r\ngoroutine 2 [runnable]:\r\ncreated by runtime.main\r\n\t/storage/remy/go/src/pkg/runtime/proc.c:225\r\n\r\ngoroutine 3 [timer goroutine (idle)]:\r\ncreated by addtimer\r\n\t/storage/remy/go/src/pkg/runtime/ztime_linux_arm.c:73\r\n\r\ngoroutine 74 [select]:\r\nnet/http.(*persistConn).writeLoop(0x109a95a0, 0x410c90)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 31 [syscall]:\r\nsyscall.Syscall6()\r\n\t/storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\nsyscall.EpollWait(0x7, 0x10989ea8, 0xa, 0xa, 0xffffffff, ...)\r\n\t/storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\nnet.(*pollster).WaitFD(0x10989ea0, 0x110c4620, 0x0, 0x0, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\nnet.(*pollServer).Run(0x110c4620, 0x0)\r\n\t/storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\ncreated by net.newPollServer\r\n\t/storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n\r\ngoroutine 58 [select]:\r\nnet/http.(*persistConn).writeLoop(0x10964eb0, 0x410ca8)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 89 [semacquire]:\r\nsync.runtime_Semacquire(0x110e3bd0, 0x110e3bd0)\r\n\t/storage/remy/go/src/pkg/runtime/zsema_linux_arm.c:165 +0x30\r\nsync.(*Cond).Wait(0x110ebec4, 0xb4ae0e3c)\r\n\t/storage/remy/go/src/pkg/sync/cond.go:73 +0xd0\r\nio.(*pipe).write(0x110ebe80, 0x109b8b90, 0x13, 0x50, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/io/pipe.go:90 +0x1e8\r\nio.(*PipeWriter).Write(0x110e3bb0, 0x109b8b90, 0x13, 0x50, 0x109b8b90, ...)\r\n\t/storage/remy/go/src/pkg/io/pipe.go:157 +0x54\r\nnet/http.(*populateResponse).Write(0x11110110, 0x109b8b90, 0x13, 0x50,\r\n0x50101, ...)\r\n\t/storage/remy/go/src/pkg/net/http/filetransport.go:122 +0xa0\r\nfmt.Fprintln(0x1110c6e0, 0x11110110, 0xb4ae0ea0, 0x1, 0x1, ...)\r\n\t/storage/remy/go/src/pkg/fmt/print.go:280 +0xb0\r\nnet/http.Error(0x1110c3e0, 0x11110110, 0x27c63c, 0x12, 0x194, ...)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:748 +0x15c\r\nnet/http.NotFound(0x1110c3e0, 0x11110110)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:752 +0x50\r\nnet/http.serveFile(0x1110c3e0, 0x11110110, 0x11100540, 0x1110c280,\r\n0x110e3d70, ...)\r\n\t/storage/remy/go/src/pkg/net/http/fs.go:327 +0x1a8\r\nnet/http.(*fileHandler).ServeHTTP(0x110e3b90, 0x1110c3e0, 0x11110110,\r\n0x11100540, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/http/fs.go:421 +0x1a4\r\nnet/http.func\u00b7003(0x110e3b90, 0x110e3ba0, 0x110e3b98, 0x410d2c)\r\n\t/storage/remy/go/src/pkg/net/http/filetransport.go:43 +0x74\r\ncreated by net/http.fileTransport.RoundTrip\r\n\t/storage/remy/go/src/pkg/net/http/filetransport.go:45 +0xd0\r\n\r\ngoroutine 48 [select]:\r\nnet/http.(*persistConn).writeLoop(0x109b8820, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 47 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x109b8820, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 83 [finalizer wait]:\r\ncreated by runtime.gc\r\n\t/storage/remy/go/src/pkg/runtime/mgc0.c:961\r\n\r\ngoroutine 194 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x109b8140, 0x410ea0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 57 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x10964eb0, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 73 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x109a95a0, 0x76)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 113 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x10e78320, 0x410d50)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 114 [select]:\r\nnet/http.(*persistConn).writeLoop(0x10e78320, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 122 [select]:\r\nnet/http.(*persistConn).writeLoop(0x10e78b90, 0x410d5c)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 132 [select]:\r\nnet/http.(*persistConn).writeLoop(0x10e78c80, 0x410d68)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 116 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x1111bc30, 0x109d4f18)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 117 [select]:\r\nnet/http.(*persistConn).writeLoop(0x1111bc30, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 121 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x10e78b90, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 131 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x10e78c80, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 222 [select]:\r\nnet/http.(*persistConn).writeLoop(0x10a52780, 0x109d49d0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 221 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x10a52780, 0x109d4468)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 195 [select]:\r\nnet/http.(*persistConn).writeLoop(0x109b8140, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 299 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x109a92d0, 0x410f48)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 273 [chan send]:\r\nnet/http.func\u00b7009(0x110e3908, 0x110e3920, 0x110e3910, 0x110e3918, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:1271 +0xc0\r\ncreated by net/http.(*timeoutHandler).ServeHTTP\r\n\t/storage/remy/go/src/pkg/net/http/server.go:1272 +0x124\r\n\r\ngoroutine 305 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x110bd690, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 306 [select]:\r\nnet/http.(*persistConn).writeLoop(0x110bd690, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 300 [select]:\r\nnet/http.(*persistConn).writeLoop(0x109a92d0, 0x410fa8)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 1100 [semacquire]:\r\nsync.runtime_Semacquire(0x13bf7aa0, 0x13bf7aa0)\r\n\t/storage/remy/go/src/pkg/runtime/zsema_linux_arm.c:165 +0x30\r\nsync.(*WaitGroup).Wait(0x14003768, 0x0)\r\n\t/storage/remy/go/src/pkg/sync/waitgroup.go:102 +0x11c\r\nnet/http/httptest.(*Server).Close(0x14003750, 0x13aed700)\r\n\t/storage/remy/go/src/pkg/net/http/httptest/server.go:157 +0x68\r\nnet/http_test.TestIssue4191_InfiniteGetToPutTimeout(0x147e4900, 0xe)\r\n\t/storage/remy/go/src/pkg/net/http/transport_test.go:1006 +0x348\r\ntesting.tRunner(0x147e4900, 0x411140, 0x0)\r\n\t/storage/remy/go/src/pkg/testing/testing.go:301 +0xa8\r\ncreated by testing.RunTests\r\n\t/storage/remy/go/src/pkg/testing/testing.go:377 +0x6cc\r\n\r\ngoroutine 597 [syscall]:\r\nsyscall.Syscall6()\r\n\t/storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\nsyscall.EpollWait(0x33, 0x14359008, 0xa, 0xa, 0xffffffff, ...)\r\n\t/storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\nnet.(*pollster).WaitFD(0x14359000, 0x147c18c0, 0x0, 0x0, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\nnet.(*pollServer).Run(0x147c18c0, 0x13923930)\r\n\t/storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\ncreated by net.newPollServer\r\n\t/storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n\r\ngoroutine 603 [syscall]:\r\nsyscall.Syscall6()\r\n\t/storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\nsyscall.EpollWait(0x35, 0x13d53008, 0xa, 0xa, 0xffffffff, ...)\r\n\t/storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\nnet.(*pollster).WaitFD(0x13d53000, 0x147da380, 0x0, 0x0, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\nnet.(*pollServer).Run(0x147da380, 0x13923930)\r\n\t/storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\ncreated by net.newPollServer\r\n\t/storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n\r\ngoroutine 1104 [select]:\r\nnet/http.(*persistConn).writeLoop(0x13bd7550, 0x13923930)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n\r\ngoroutine 1103 [chan receive]:\r\nnet/http.(*persistConn).readLoop(0x13bd7550, 0x13923930)\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\ncreated by net/http.(*Transport).getConn\r\n\t/storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n\r\ngoroutine 598 [syscall]:\r\nsyscall.Syscall6()\r\n\t/storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\nsyscall.EpollWait(0x34, 0x14064008, 0xa, 0xa, 0xffffffff, ...)\r\n\t/storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\nnet.(*pollster).WaitFD(0x14064000, 0x1482a5a0, 0x0, 0x0, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\nnet.(*pollServer).Run(0x1482a5a0, 0x0)\r\n\t/storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\ncreated by net.newPollServer\r\n\t/storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n\r\ngoroutine 1102 [chan receive]:\r\nnet.(*pollServer).WaitWrite(0x110c4620, 0x13d70070, 0x110c46e0, 0xb)\r\n\t/storage/remy/go/src/pkg/net/fd_unix.go:251 +0x68\r\nnet.(*netFD).Write(0x13d70070, 0x1408eff8, 0x7008, 0x7008, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/fd_unix.go:553 +0x48c\r\nnet.(*conn).Write(0x143f1670, 0x1408eff8, 0x7008, 0x7008, 0x10968000, ...)\r\n\t/storage/remy/go/src/pkg/net/net.go:129 +0xd0\r\nnet.(*TCPConn).Write(0x143f1670, 0x1408eff8, 0x7008, 0x7008, 0x8000, ...)\r\n\t/storage/remy/go/src/pkg/net/dial.go:0 +0x40\r\nbufio.(*Writer).Write(0x13d63ea0, 0x1408eff8, 0x7008, 0x7008, 0xff8, ...)\r\n\t/storage/remy/go/src/pkg/bufio/bufio.go:488 +0xd0\r\nnet/http.(*response).Write(0x14003840, 0x1408e000, 0x8000, 0x8000, 0x8000, ...)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:507 +0x468\r\nnet/http.(*writerOnly).Write(0x143f1a40, 0x1408e000, 0x8000, 0x8000,\r\n0x8000, ...)\r\n\t/storage/remy/go/src/pkg/net/http/chunked.go:0 +0x74\r\nio.Copy(0x109adb60, 0x143f1a40, 0x110c7500, 0x61, 0x3a8000, ...)\r\n\t/storage/remy/go/src/pkg/io/io.go:367 +0x25c\r\nnet/http.(*response).ReadFrom(0x14003840, 0x110c7500, 0x61, 0x0, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:167 +0x240\r\nio.Copy(0x110d8260, 0x14003840, 0x110c7500, 0x61, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/io/io.go:357 +0xa4\r\nnet/http_test.func\u00b7106(0x110d8220, 0x14003840)\r\n\t/storage/remy/go/src/pkg/net/http/transport_test.go:958 +0xa4\r\nnet/http.HandlerFunc.ServeHTTP(0xac6e8, 0x110d8220, 0x14003840,\r\n0x13aed620, 0x26948c, ...)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:739 +0x40\r\nnet/http.(*ServeMux).ServeHTTP(0x13d63e20, 0x110d8220, 0x14003840,\r\n0x13aed620, 0x110d8d60, ...)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:998 +0x74\r\nnet/http/httptest.(*waitGroupHandler).ServeHTTP(0x1464c7a0,\r\n0x110d8220, 0x14003840, 0x13aed620, 0x0, ...)\r\n\t/storage/remy/go/src/pkg/net/http/httptest/server.go:189 +0xd0\r\nnet/http.(*conn).serve(0x13ff42d0, 0x0)\r\n\t/storage/remy/go/src/pkg/net/http/server.go:702 +0x604\r\ncreated by net/http.(*Server).Serve\r\n\t/storage/remy/go/src/pkg/net/http/server.go:1126 +0x4cc\r\nFAIL\tnet/http\t120.229s\r\n",
			"disapproval": false,
			"date": "2012-11-26 22:34:58.554760",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The docs say that as a short way to say \"get to the end\". A read error\r\nshould work too and cause the conn to close.\r\n\r\nWhere do you think it's hanging? (I can see all the goroutines too and have\r\nstared at this for days, so I don't want to bias you with my debugging too\r\nmuch.)\r\nOn Nov 22, 2012 5:24 AM, \"Dave Cheney\" <dave@cheney.net> wrote:\r\n\r\n> The documentation says you always need to close the response body, I\r\n> think not doing this is causing the test to hang.\r\n>\r\n> On Fri, Nov 23, 2012 at 12:21 AM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > You shouldn't have to modify the test.  I believe the tests are all\r\n> valid Go\r\n> > code.\r\n> >\r\n> >\r\n> > On Thu, Nov 22, 2012 at 4:46 AM, <dave@cheney.net> wrote:\r\n> >>\r\n> >> I'm not sure if I fixed the problem, or just fixed the test, but with\r\n> >> this small change the test passes for me. However I was hacking a lot on\r\n> >> transport{,_test}.go so maybe it just works on my computer (tm)\r\n> >>\r\n> >>\r\n> >>\r\n> >>\r\n> https://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go\r\n> >> File src/pkg/net/http/transport_test.go (right):\r\n> >>\r\n> >>\r\n> >>\r\n> https://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go#newcode977\r\n> >> src/pkg/net/http/transport_test.go:977: }\r\n> >> sres.Body.Close()\r\n> >>\r\n> >> sometimes I wonder if there should be an (optional) finaliser on\r\n> >> response bodies that prints a warning if they fall out of scope without\r\n> >> being closed.\r\n> >>\r\n> >> https://codereview.appspot.com/6851061/\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-22 14:03:48.885590",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Done, even though I do like defers.\n\nSo do I, but in this case the defer was interacting badly with the httptest.Server.Close() method. \n\nLGTM. I'm not sure if you want to wait for a fix for 4434, this test will break eventually for people like fullung and his stress testing box.",
			"disapproval": false,
			"date": "2012-11-26 00:25:28.523300",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, bradfitz@golang.org, dsallings@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-25 17:54:42.368740",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM.\n\nSorry, even simple tests in net/http are failing\n\nlucky(~/go/src) % go test net/http\nWarning: intentional death for testing\n--- FAIL: TestHandlerPanic (5.00 seconds)\nserve_test.go:978:      expected an error\nserve_test.go:985:      expected server handler to log an error\nWarning: intentional death for testing\n--- FAIL: TestHandlerPanicWithHijack (5.00 seconds)\nserve_test.go:985:      expected server handler to log an error\nFAIL\nFAIL    net/http        18.997s",
			"disapproval": true,
			"date": "2012-11-26 00:41:23.947910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "=== RUN TestIssue4191_InfiniteGetTimeout-18\n--- PASS: TestIssue4191_InfiniteGetTimeout-18 (0.50 seconds)\n=== RUN TestIssue4191_InfiniteGetToPutTimeout-18\n\njams (also -15 on this machine), which may be related to issue 4434.\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode917\nsrc/pkg/net/http/transport_test.go:917: }()\nOr skip the defer and move ts.Close() to the end, then you get the full unabridged panic.\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode946\nsrc/pkg/net/http/transport_test.go:946: t.Errorf(\"Error issuing GET: %v\", err)\nbreak after t.Errorf\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode956\nsrc/pkg/net/http/transport_test.go:956: }\nts.Close()\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode976\nsrc/pkg/net/http/transport_test.go:976: }()\nSame as above",
			"disapproval": false,
			"date": "2012-11-26 00:08:30.872850",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Nov 25, 2012 at 4:25 PM, <dave@cheney.net> wrote:\r\n\r\n> Done, even though I do like defers.\r\n>>\r\n>\r\n> So do I, but in this case the defer was interacting badly with the\r\n> httptest.Server.Close() method.\r\n>\r\n\r\nYeah.\r\n\r\n\r\n> LGTM.\r\n\r\n\r\nBe sure to put LGTMs on the first line of replies, up at the top before any\r\nquoted section, otherwise codereview.appspot.com and downstream tools don't\r\nsee it.\r\n\r\nI'm not sure if you want to wait for a fix for 4434, this test\r\n> will break eventually for people like fullung and his stress testing\r\n> box.\r\n>\r\n\r\nI also plan to run all the Go unit tests on a ~bazillion machines with\r\nvarying GOMAXPROCS soonish here, since I'm also getting sick of flakiness.\r\n So I'm fine committing this for now if you're cool with it (and want to\r\ngive me a top-line LGTM).  I also fixed Issue 4021 which should help\r\nfullung's machine anyway, so net positive maybe?  :)\r\n",
			"disapproval": false,
			"date": "2012-11-26 00:33:42.945780",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What value of GOMAXPROCS? goroutine 1102 in the stacks below is the sign of\r\nthe expected failure for GOMAXPROCS > 1 until Issue 4434 is fixed.\r\n\r\nOn Mon, Nov 26, 2012 at 2:34 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> I got the following failure during all.bash on linux/arm but could not\r\n> reproduce by running go test -short net/http by hand. Maybe it\r\n> happened due to the high load during parallel testing of packages.\r\n>\r\n> R\u00e9my.\r\n>\r\n> panic: test timed out\r\n>\r\n> goroutine 1108 [running]:\r\n> testing.alarm()\r\n>         /storage/remy/go/src/pkg/testing/testing.go:477 +0x60\r\n> created by time.goFunc\r\n>         /storage/remy/go/src/pkg/time/sleep.go:96 +0x54\r\n>\r\n> goroutine 1 [chan receive]:\r\n> testing.RunTests(0x10c00, 0x410b58, 0x81, 0x81, 0x10986501, ...)\r\n>         /storage/remy/go/src/pkg/testing/testing.go:378 +0x6ec\r\n> testing.Main(0x10c00, 0x410b58, 0x81, 0x81, 0x40be10, ...)\r\n>         /storage/remy/go/src/pkg/testing/testing.go:313 +0x68\r\n> main.main()\r\n>         net/http/_test/_testmain.go:311 +0x94\r\n>\r\n> goroutine 2 [runnable]:\r\n> created by runtime.main\r\n>         /storage/remy/go/src/pkg/runtime/proc.c:225\r\n>\r\n> goroutine 3 [timer goroutine (idle)]:\r\n> created by addtimer\r\n>         /storage/remy/go/src/pkg/runtime/ztime_linux_arm.c:73\r\n>\r\n> goroutine 74 [select]:\r\n> net/http.(*persistConn).writeLoop(0x109a95a0, 0x410c90)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 31 [syscall]:\r\n> syscall.Syscall6()\r\n>         /storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\n> syscall.EpollWait(0x7, 0x10989ea8, 0xa, 0xa, 0xffffffff, ...)\r\n>         /storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\n> net.(*pollster).WaitFD(0x10989ea0, 0x110c4620, 0x0, 0x0, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\n> net.(*pollServer).Run(0x110c4620, 0x0)\r\n>         /storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\n> created by net.newPollServer\r\n>         /storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n>\r\n> goroutine 58 [select]:\r\n> net/http.(*persistConn).writeLoop(0x10964eb0, 0x410ca8)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 89 [semacquire]:\r\n> sync.runtime_Semacquire(0x110e3bd0, 0x110e3bd0)\r\n>         /storage/remy/go/src/pkg/runtime/zsema_linux_arm.c:165 +0x30\r\n> sync.(*Cond).Wait(0x110ebec4, 0xb4ae0e3c)\r\n>         /storage/remy/go/src/pkg/sync/cond.go:73 +0xd0\r\n> io.(*pipe).write(0x110ebe80, 0x109b8b90, 0x13, 0x50, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/io/pipe.go:90 +0x1e8\r\n> io.(*PipeWriter).Write(0x110e3bb0, 0x109b8b90, 0x13, 0x50, 0x109b8b90, ...)\r\n>         /storage/remy/go/src/pkg/io/pipe.go:157 +0x54\r\n> net/http.(*populateResponse).Write(0x11110110, 0x109b8b90, 0x13, 0x50,\r\n> 0x50101, ...)\r\n>         /storage/remy/go/src/pkg/net/http/filetransport.go:122 +0xa0\r\n> fmt.Fprintln(0x1110c6e0, 0x11110110, 0xb4ae0ea0, 0x1, 0x1, ...)\r\n>         /storage/remy/go/src/pkg/fmt/print.go:280 +0xb0\r\n> net/http.Error(0x1110c3e0, 0x11110110, 0x27c63c, 0x12, 0x194, ...)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:748 +0x15c\r\n> net/http.NotFound(0x1110c3e0, 0x11110110)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:752 +0x50\r\n> net/http.serveFile(0x1110c3e0, 0x11110110, 0x11100540, 0x1110c280,\r\n> 0x110e3d70, ...)\r\n>         /storage/remy/go/src/pkg/net/http/fs.go:327 +0x1a8\r\n> net/http.(*fileHandler).ServeHTTP(0x110e3b90, 0x1110c3e0, 0x11110110,\r\n> 0x11100540, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/http/fs.go:421 +0x1a4\r\n> net/http.func\u00b7003(0x110e3b90, 0x110e3ba0, 0x110e3b98, 0x410d2c)\r\n>         /storage/remy/go/src/pkg/net/http/filetransport.go:43 +0x74\r\n> created by net/http.fileTransport.RoundTrip\r\n>         /storage/remy/go/src/pkg/net/http/filetransport.go:45 +0xd0\r\n>\r\n> goroutine 48 [select]:\r\n> net/http.(*persistConn).writeLoop(0x109b8820, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 47 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x109b8820, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 83 [finalizer wait]:\r\n> created by runtime.gc\r\n>         /storage/remy/go/src/pkg/runtime/mgc0.c:961\r\n>\r\n> goroutine 194 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x109b8140, 0x410ea0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 57 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x10964eb0, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 73 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x109a95a0, 0x76)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 113 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x10e78320, 0x410d50)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 114 [select]:\r\n> net/http.(*persistConn).writeLoop(0x10e78320, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 122 [select]:\r\n> net/http.(*persistConn).writeLoop(0x10e78b90, 0x410d5c)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 132 [select]:\r\n> net/http.(*persistConn).writeLoop(0x10e78c80, 0x410d68)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 116 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x1111bc30, 0x109d4f18)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 117 [select]:\r\n> net/http.(*persistConn).writeLoop(0x1111bc30, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 121 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x10e78b90, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 131 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x10e78c80, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 222 [select]:\r\n> net/http.(*persistConn).writeLoop(0x10a52780, 0x109d49d0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 221 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x10a52780, 0x109d4468)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 195 [select]:\r\n> net/http.(*persistConn).writeLoop(0x109b8140, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 299 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x109a92d0, 0x410f48)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 273 [chan send]:\r\n> net/http.func\u00b7009(0x110e3908, 0x110e3920, 0x110e3910, 0x110e3918, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:1271 +0xc0\r\n> created by net/http.(*timeoutHandler).ServeHTTP\r\n>         /storage/remy/go/src/pkg/net/http/server.go:1272 +0x124\r\n>\r\n> goroutine 305 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x110bd690, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 306 [select]:\r\n> net/http.(*persistConn).writeLoop(0x110bd690, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 300 [select]:\r\n> net/http.(*persistConn).writeLoop(0x109a92d0, 0x410fa8)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 1100 [semacquire]:\r\n> sync.runtime_Semacquire(0x13bf7aa0, 0x13bf7aa0)\r\n>         /storage/remy/go/src/pkg/runtime/zsema_linux_arm.c:165 +0x30\r\n> sync.(*WaitGroup).Wait(0x14003768, 0x0)\r\n>         /storage/remy/go/src/pkg/sync/waitgroup.go:102 +0x11c\r\n> net/http/httptest.(*Server).Close(0x14003750, 0x13aed700)\r\n>         /storage/remy/go/src/pkg/net/http/httptest/server.go:157 +0x68\r\n> net/http_test.TestIssue4191_InfiniteGetToPutTimeout(0x147e4900, 0xe)\r\n>         /storage/remy/go/src/pkg/net/http/transport_test.go:1006 +0x348\r\n> testing.tRunner(0x147e4900, 0x411140, 0x0)\r\n>         /storage/remy/go/src/pkg/testing/testing.go:301 +0xa8\r\n> created by testing.RunTests\r\n>         /storage/remy/go/src/pkg/testing/testing.go:377 +0x6cc\r\n>\r\n> goroutine 597 [syscall]:\r\n> syscall.Syscall6()\r\n>         /storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\n> syscall.EpollWait(0x33, 0x14359008, 0xa, 0xa, 0xffffffff, ...)\r\n>         /storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\n> net.(*pollster).WaitFD(0x14359000, 0x147c18c0, 0x0, 0x0, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\n> net.(*pollServer).Run(0x147c18c0, 0x13923930)\r\n>         /storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\n> created by net.newPollServer\r\n>         /storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n>\r\n> goroutine 603 [syscall]:\r\n> syscall.Syscall6()\r\n>         /storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\n> syscall.EpollWait(0x35, 0x13d53008, 0xa, 0xa, 0xffffffff, ...)\r\n>         /storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\n> net.(*pollster).WaitFD(0x13d53000, 0x147da380, 0x0, 0x0, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\n> net.(*pollServer).Run(0x147da380, 0x13923930)\r\n>         /storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\n> created by net.newPollServer\r\n>         /storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n>\r\n> goroutine 1104 [select]:\r\n> net/http.(*persistConn).writeLoop(0x13bd7550, 0x13923930)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:661 +0x238\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:408 +0x5d8\r\n>\r\n> goroutine 1103 [chan receive]:\r\n> net/http.(*persistConn).readLoop(0x13bd7550, 0x13923930)\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:650 +0x5bc\r\n> created by net/http.(*Transport).getConn\r\n>         /storage/remy/go/src/pkg/net/http/transport.go:407 +0x5b0\r\n>\r\n> goroutine 598 [syscall]:\r\n> syscall.Syscall6()\r\n>         /storage/remy/go/src/pkg/syscall/asm_linux_arm.s:42 +0x8\r\n> syscall.EpollWait(0x34, 0x14064008, 0xa, 0xa, 0xffffffff, ...)\r\n>         /storage/remy/go/src/pkg/syscall/zsyscall_linux_arm.go:327 +0x90\r\n> net.(*pollster).WaitFD(0x14064000, 0x1482a5a0, 0x0, 0x0, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/fd_linux.go:146 +0x154\r\n> net.(*pollServer).Run(0x1482a5a0, 0x0)\r\n>         /storage/remy/go/src/pkg/net/fd_unix.go:211 +0x138\r\n> created by net.newPollServer\r\n>         /storage/remy/go/src/pkg/net/newpollserver_unix.go:33 +0x328\r\n>\r\n> goroutine 1102 [chan receive]:\r\n> net.(*pollServer).WaitWrite(0x110c4620, 0x13d70070, 0x110c46e0, 0xb)\r\n>         /storage/remy/go/src/pkg/net/fd_unix.go:251 +0x68\r\n> net.(*netFD).Write(0x13d70070, 0x1408eff8, 0x7008, 0x7008, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/fd_unix.go:553 +0x48c\r\n> net.(*conn).Write(0x143f1670, 0x1408eff8, 0x7008, 0x7008, 0x10968000, ...)\r\n>         /storage/remy/go/src/pkg/net/net.go:129 +0xd0\r\n> net.(*TCPConn).Write(0x143f1670, 0x1408eff8, 0x7008, 0x7008, 0x8000, ...)\r\n>         /storage/remy/go/src/pkg/net/dial.go:0 +0x40\r\n> bufio.(*Writer).Write(0x13d63ea0, 0x1408eff8, 0x7008, 0x7008, 0xff8, ...)\r\n>         /storage/remy/go/src/pkg/bufio/bufio.go:488 +0xd0\r\n> net/http.(*response).Write(0x14003840, 0x1408e000, 0x8000, 0x8000, 0x8000,\r\n> ...)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:507 +0x468\r\n> net/http.(*writerOnly).Write(0x143f1a40, 0x1408e000, 0x8000, 0x8000,\r\n> 0x8000, ...)\r\n>         /storage/remy/go/src/pkg/net/http/chunked.go:0 +0x74\r\n> io.Copy(0x109adb60, 0x143f1a40, 0x110c7500, 0x61, 0x3a8000, ...)\r\n>         /storage/remy/go/src/pkg/io/io.go:367 +0x25c\r\n> net/http.(*response).ReadFrom(0x14003840, 0x110c7500, 0x61, 0x0, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:167 +0x240\r\n> io.Copy(0x110d8260, 0x14003840, 0x110c7500, 0x61, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/io/io.go:357 +0xa4\r\n> net/http_test.func\u00b7106(0x110d8220, 0x14003840)\r\n>         /storage/remy/go/src/pkg/net/http/transport_test.go:958 +0xa4\r\n> net/http.HandlerFunc.ServeHTTP(0xac6e8, 0x110d8220, 0x14003840,\r\n> 0x13aed620, 0x26948c, ...)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:739 +0x40\r\n> net/http.(*ServeMux).ServeHTTP(0x13d63e20, 0x110d8220, 0x14003840,\r\n> 0x13aed620, 0x110d8d60, ...)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:998 +0x74\r\n> net/http/httptest.(*waitGroupHandler).ServeHTTP(0x1464c7a0,\r\n> 0x110d8220, 0x14003840, 0x13aed620, 0x0, ...)\r\n>         /storage/remy/go/src/pkg/net/http/httptest/server.go:189 +0xd0\r\n> net/http.(*conn).serve(0x13ff42d0, 0x0)\r\n>         /storage/remy/go/src/pkg/net/http/server.go:702 +0x604\r\n> created by net/http.(*Server).Serve\r\n>         /storage/remy/go/src/pkg/net/http/server.go:1126 +0x4cc\r\n> FAIL    net/http        120.229s\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 22:44:21.452930",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The documentation says you always need to close the response body, I\r\nthink not doing this is causing the test to hang.\r\n\r\nOn Fri, Nov 23, 2012 at 12:21 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> You shouldn't have to modify the test.  I believe the tests are all valid Go\r\n> code.\r\n>\r\n>\r\n> On Thu, Nov 22, 2012 at 4:46 AM, <dave@cheney.net> wrote:\r\n>>\r\n>> I'm not sure if I fixed the problem, or just fixed the test, but with\r\n>> this small change the test passes for me. However I was hacking a lot on\r\n>> transport{,_test}.go so maybe it just works on my computer (tm)\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go\r\n>> File src/pkg/net/http/transport_test.go (right):\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go#newcode977\r\n>> src/pkg/net/http/transport_test.go:977: }\r\n>> sres.Body.Close()\r\n>>\r\n>> sometimes I wonder if there should be an (optional) finaliser on\r\n>> response bodies that prints a warning if they fall out of scope without\r\n>> being closed.\r\n>>\r\n>> https://codereview.appspot.com/6851061/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-22 13:24:17.780470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yup, worse case the -test.timeout=120 will recover the builder.\r\n\r\nOn Tue, Nov 27, 2012 at 8:24 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Okay, I'll submit this now, since Albert is waiting on reporting high\r\n> GOMAXPROCS errors, dfc is working on the net deadline races and LGTMed, and\r\n> none of our builders run with high GOMAXPROCS.\r\n>\r\n> And this fixes a long-standing bug that was biting Dustin Sallings (who\r\n> reported Issue 4191).\r\n>\r\n> Forward progress....\r\n>\r\n>\r\n> On Mon, Nov 26, 2012 at 12:32 PM, <rsc@golang.org> wrote:\r\n>>\r\n>> LGTM as long as dfc is happy\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6851061/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 21:27:48.589710",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You shouldn't have to modify the test.  I believe the tests are all valid\r\nGo code.\r\n\r\n\r\nOn Thu, Nov 22, 2012 at 4:46 AM, <dave@cheney.net> wrote:\r\n\r\n> I'm not sure if I fixed the problem, or just fixed the test, but with\r\n> this small change the test passes for me. However I was hacking a lot on\r\n> transport{,_test}.go so maybe it just works on my computer (tm)\r\n>\r\n>\r\n> https://codereview.appspot.**com/6851061/diff/9002/src/pkg/**\r\n> net/http/transport_test.go<https://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go>\r\n> File src/pkg/net/http/transport_**test.go (right):\r\n>\r\n> https://codereview.appspot.**com/6851061/diff/9002/src/pkg/**\r\n> net/http/transport_test.go#**newcode977<https://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go#newcode977>\r\n> src/pkg/net/http/transport_**test.go:977: }\r\n> sres.Body.Close()\r\n>\r\n> sometimes I wonder if there should be an (optional) finaliser on\r\n> response bodies that prints a warning if they fall out of scope without\r\n> being closed.\r\n>\r\n> https://codereview.appspot.**com/6851061/<https://codereview.appspot.com/6851061/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-22 13:21:16.324250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, bradfitz@golang.org, dsallings@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-24 07:18:32.872290",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "goroutine 16 [semacquire]:\nsync.runtime_Semacquire(0xc2000bb3f8, 0xc2000bb3f8)\n        /home/dfc/go/src/pkg/runtime/zsema_linux_amd64.c:165 +0x2e\nsync.(*WaitGroup).Wait(0xc20010d0d0, 0x0)\n        /home/dfc/go/src/pkg/sync/waitgroup.go:102 +0xf2\nnet/http/httptest.(*Server).Close(0xc20010d0a0, 0x6cc8a0)\n        /home/dfc/go/src/pkg/net/http/httptest/server.go:157 +0x41\nnet/http_test.func\u00b7105(0x7ff0de2d2f38, 0x7ff0de2d2100)\n        /home/dfc/go/src/pkg/net/http/transport_test.go:916 +0x46\n----- stack segment boundary -----\nbufio.(*Reader).Read(0xc20015d1e0, 0xc2000dd920, 0x2, 0x2, 0xffffffffffffffff, ...)\n        /home/dfc/go/src/pkg/bufio/bufio.go:151 +0x303\nio.ReadAtLeast(0xc200129cf0, 0xc20015d1e0, 0xc2000dd920, 0x2, 0x2, ...)\n        /home/dfc/go/src/pkg/io/io.go:271 +0x102\nio.ReadFull(0xc200129cf0, 0xc20015d1e0, 0xc2000dd920, 0x2, 0x2, ...)\n        /home/dfc/go/src/pkg/io/io.go:290 +0x72\nnet/http.(*chunkedReader).Read(0xc2000dd900, 0xc200197000, 0x8000, 0x8000, 0x7008, ...)\n        /home/dfc/go/src/pkg/net/http/chunked.go:77 +0x1dd\nnet/http.(*body).Read(0xc2000f21c0, 0xc200197000, 0x8000, 0x8000, 0xff8, ...)\n        /home/dfc/go/src/pkg/net/http/transfer.go:538 +0x9a\nnet/http.(*bodyEOFSignal).Read(0xc2000dd930, 0xc200197000, 0x8000, 0x8000, 0xff8, ...)\n        /home/dfc/go/src/pkg/net/http/transport.go:837 +0x1b8\nio.Copy(0xc200088240, 0x0, 0xc200129090, 0xc2000dd930, 0x3f40ff8, ...)\n        /home/dfc/go/src/pkg/io/io.go:365 +0x1c5\nnet/http_test.TestIssue4191_InfiniteGetTimeout(0xc20017f000, 0xc21ccd09c5)\n        /home/dfc/go/src/pkg/net/http/transport_test.go:953 +0x35e\ntesting.tRunner(0xc20017f000, 0x8ee700, 0x0, 0x0)\n        /home/dfc/go/src/pkg/testing/testing.go:302 +0x6c\ncreated by testing.RunTests\n        /home/dfc/go/src/pkg/testing/testing.go:409 +0x87b\n\nThe stack segment boundary is the defer, the actual line that is panicing is bufio.Read, line 151",
			"disapproval": false,
			"date": "2012-11-24 14:29:24.583690",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure if I fixed the problem, or just fixed the test, but with this small change the test passes for me. However I was hacking a lot on transport{,_test}.go so maybe it just works on my computer (tm)\n\nhttps://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttps://codereview.appspot.com/6851061/diff/9002/src/pkg/net/http/transport_test.go#newcode977\nsrc/pkg/net/http/transport_test.go:977: }\nsres.Body.Close()\n\nsometimes I wonder if there should be an (optional) finaliser on response bodies that prints a warning if they fall out of scope without being closed.",
			"disapproval": false,
			"date": "2012-11-22 12:46:20.951780",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, bradfitz@golang.org, dsallings@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-22 15:15:30.268990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is now ready for review.\r\n\r\nIt just can't be submitted until Dave's -1 fix is in.\r\n On Nov 25, 2012 9:54 AM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello dave@cheney.net, bradfitz@golang.org, dsallings@gmail.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6851061/<http://codereview.appspot.com/6851061/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-25 18:15:23.733120",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, bradfitz@golang.org, dsallings@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-26 00:18:55.777110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI can't reproduce any hang with any number of GOMAXPROCS (1, 4, 20), but that's just on my quad-core laptop.\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode917\nsrc/pkg/net/http/transport_test.go:917: }()\nOn 2012/11/26 00:08:31, dfc wrote:\n> Or skip the defer and move ts.Close() to the end, then you get the full\n> unabridged panic.\n\nDone.\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode946\nsrc/pkg/net/http/transport_test.go:946: t.Errorf(\"Error issuing GET: %v\", err)\nOn 2012/11/26 00:08:31, dfc wrote:\n> break after t.Errorf\n\nDone, even though I do like defers.\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode951\nsrc/pkg/net/http/transport_test.go:951: t.Errorf(\"Unexpected successful copy\")\nand did a break here too.\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode956\nsrc/pkg/net/http/transport_test.go:956: }\nOn 2012/11/26 00:08:31, dfc wrote:\n> ts.Close()\n\nDone.\n\nhttps://codereview.appspot.com/6851061/diff/9010/src/pkg/net/http/transport_test.go#newcode976\nsrc/pkg/net/http/transport_test.go:976: }()\nOn 2012/11/26 00:08:31, dfc wrote:\n> Same as above\n\nDone.",
			"disapproval": false,
			"date": "2012-11-26 00:19:42.758610",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6851061/diff/8005/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttps://codereview.appspot.com/6851061/diff/8005/src/pkg/net/http/transport_test.go#newcode971\nsrc/pkg/net/http/transport_test.go:971: defer ts.Close()\nThere is a deadlock here, ts.Close calls wg.Wait() which waits for all the connections through this server to close, but they won't ever close because this defer is not being called during the exit of the function, but during a panic\n\nReplacing this line with\n\n                err := recover()\n                if err != nil {\n                        t.Fatalf(\"Panic: %v\", err)\n                }\n                ts.Close()\n        }()\n\nGives\n\n=== RUN TestIssue3644-29\n--- PASS: TestIssue3644-29 (0.01 seconds)\n=== RUN TestIssue3595-29\n--- PASS: TestIssue3595-29 (0.00 seconds)\n=== RUN TestIssue4191_InfiniteGetTimeout-29\nread tcp 127.0.0.1:46262: i/o timeout\nread tcp 127.0.0.1:46262: i/o timeout\n--- FAIL: TestIssue4191_InfiniteGetTimeout-29 (0.30 seconds)\ntransport_test.go:914:  Panic: runtime error: slice bounds out of range\n=== RUN TestIssue4191_InfiniteGetToPutTimeout-29\n--- FAIL: TestIssue4191_InfiniteGetToPutTimeout-29 (0.20 seconds)\ntransport_test.go:1016:         Unexpected successful PUT\ntransport_test.go:980:  Panic: runtime error: slice bounds out of range\n\nAnd the test always exits",
			"disapproval": false,
			"date": "2012-11-24 14:27:50.788790",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6851061/diff/6014/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttps://codereview.appspot.com/6851061/diff/6014/src/pkg/net/http/transport_test.go#newcode977\nsrc/pkg/net/http/transport_test.go:977: }\nHi Brad,\n\nJust to humor me, can you please add\n\nsres.Body.Close() here\n\nFor me, reapplying this patch cleanly, and making the change above it passes, _but_ you have to have a GOMAXPROCS > 1, which also implies a bug somewhere else.",
			"disapproval": false,
			"date": "2012-11-22 22:36:13.507190",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Very sorry, I had some leftover debugging in net/http/httptest.\r\n\r\nPASS\r\nok      net/http        8.499s\r\n\r\n\r\nOn Mon, Nov 26, 2012 at 11:44 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> On Sun, Nov 25, 2012 at 4:41 PM, <dave@cheney.net> wrote:\r\n>>\r\n>> NOT LGTM.\r\n>>\r\n>> Sorry, even simple tests in net/http are failing\r\n>\r\n>\r\n> I can't reproduce any failures.\r\n>\r\n> Do you have any local modifications besides 03a6b8c9c396 + 6851061?\r\n",
			"disapproval": false,
			"date": "2012-11-26 00:46:33.138240",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"dsallings@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=be4b8f195c96 ***\n\nnet/http: fix Transport races & deadlocks\n\nThanks to Dustin Sallings for exposing the most frustrating\nbug ever, and for providing repro cases (which formed the\nbasis of the new tests in this CL), and to Dave Cheney and\nDmitry Vyukov for help debugging and fixing.\n\nThis CL depends on submited pollster CLs ffd1e075c260 (Unix)\nand 14b544194509 (Windows), as well as unsubmitted 6852085.\nSome operating systems (OpenBSD, NetBSD, ?) may still require\nmore pollster work, fixing races (Issue 4434 and\nhttp://goo.gl/JXB6W).\n\nTested on linux-amd64 and darwin-amd64, both with GOMAXPROCS 1\nand 4 (all combinations of which previously failed differently)\n\nFixes Issue 4191\nUpdate Issue 4434 (related fallout from this bug)\n\nR=dave, bradfitz, dsallings, rsc, fullung\nCC=golang-dev\nhttp://codereview.appspot.com/6851061",
			"disapproval": false,
			"date": "2012-11-26 21:31:13.644670",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 26, 2012 at 2:47 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> On 2012/11/26 Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> > What value of GOMAXPROCS? goroutine 1102 in the stacks below is the sign\r\n> of\r\n> > the expected failure for GOMAXPROCS > 1 until Issue 4434 is fixed.\r\n>\r\n> I think it was GOMAXPROCS=1 since it was under all.bash and I don't\r\n> have particular environment variables.\r\n>\r\n\r\nIt's likely the bug still exists with GOMAXPROCS=1 but is just hard to\r\ntrigger on relatively fast machines, but your linux/arm triggers it more\r\neasily.\r\n\r\nFWIW, I couldn't reproduce that hang running the http tests in a loop on my\r\nlinux-amd64 laptop with GOMAXPROCS=1, but it would happen after awhile on\r\nwith GOMAXPROCS >1.\r\n\r\nI can disable the test if it's not fixed in the next day or so and is\r\ngetting annoying.\r\n",
			"disapproval": false,
			"date": "2012-11-26 22:50:16.625250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Nov 25, 2012 at 4:41 PM, <dave@cheney.net> wrote:\r\n\r\n> NOT LGTM.\r\n>\r\n> Sorry, even simple tests in net/http are failing\r\n>\r\n\r\nI can't reproduce any failures.\r\n\r\nDo you have any local modifications besides 03a6b8c9c396 + 6851061?\r\n",
			"disapproval": false,
			"date": "2012-11-26 00:44:50.156340",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, I'll submit this now, since Albert is waiting on reporting high\r\nGOMAXPROCS errors, dfc is working on the net deadline races and LGTMed, and\r\nnone of our builders run with high GOMAXPROCS.\r\n\r\nAnd this fixes a long-standing bug that was biting Dustin Sallings (who\r\nreported Issue 4191).\r\n\r\nForward progress....\r\n\r\n\r\nOn Mon, Nov 26, 2012 at 12:32 PM, <rsc@golang.org> wrote:\r\n\r\n> LGTM as long as dfc is happy\r\n>\r\n>\r\n> https://codereview.appspot.**com/6851061/<https://codereview.appspot.com/6851061/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 21:24:04.939660",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/26 Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> What value of GOMAXPROCS? goroutine 1102 in the stacks below is the sign of\r\n> the expected failure for GOMAXPROCS > 1 until Issue 4434 is fixed.\r\n\r\nI think it was GOMAXPROCS=1 since it was under all.bash and I don't\r\nhave particular environment variables.\r\n",
			"disapproval": false,
			"date": "2012-11-26 22:47:00.728580",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6851061: net/http: fix Transport races & deadlocks",
	"created": "2012-11-16 23:27:27.075580",
	"patchsets": [
		1,
		2001,
		3,
		6001,
		9001,
		9002,
		6014,
		8005,
		9010,
		12004,
		9011
	],
	"modified": "2012-11-26 22:34:58.656790",
	"closed": true,
	"issue": 6851061
}