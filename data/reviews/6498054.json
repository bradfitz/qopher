{
	"description": "syscall: extract an ExampleLoadLibrary from comment\n   while we are at it, fix some out-of-date comments.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-29 12:54:53.726220",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you for improving this.\r\nOn 29 Aug 2012 22:54, <minux.ma@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> syscall: extract an ExampleLoadLibrary from comment\r\n>    while we are at it, fix some out-of-date comments.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6498054/<http://codereview.appspot.com/6498054/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/syscall/asm_windows_**386.s\r\n>   M src/pkg/syscall/asm_windows_**amd64.s\r\n>   M src/pkg/syscall/syscall_**windows.go\r\n>   M src/pkg/syscall/syscall_**windows_test.go\r\n>\r\n>\r\n> Index: src/pkg/syscall/asm_windows_**386.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/asm_windows_**386.s\r\n> +++ b/src/pkg/syscall/asm_windows_**386.s\r\n> @@ -3,5 +3,5 @@\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n>  //\r\n> -// System calls for 386, Windows are implemented in\r\n> ../runtime/windows/syscall.goc\r\n> +// System calls for 386, Windows are implemented in\r\n> ../runtime/syscall_windows.goc\r\n>  //\r\n> Index: src/pkg/syscall/asm_windows_**amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/asm_windows_**amd64.s\r\n> +++ b/src/pkg/syscall/asm_windows_**amd64.s\r\n> @@ -3,5 +3,5 @@\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n>  //\r\n> -// System calls for amd64, Windows are implemented in\r\n> ../runtime/windows/syscall.goc\r\n> +// System calls for amd64, Windows are implemented in\r\n> ../runtime/syscall_windows.goc\r\n>  //\r\n> Index: src/pkg/syscall/syscall_**windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/syscall_**windows.go\r\n> +++ b/src/pkg/syscall/syscall_**windows.go\r\n> @@ -15,43 +15,6 @@\r\n>\r\n>  const InvalidHandle = ^Handle(0)\r\n>\r\n> -/*\r\n> -\r\n> -small demo to detect version of windows you are running:\r\n> -\r\n> -package main\r\n> -\r\n> -import (\r\n> -       \"syscall\"\r\n> -)\r\n> -\r\n> -func abort(funcname string, err error) {\r\n> -       panic(funcname + \" failed: \" + err.Error())\r\n> -}\r\n> -\r\n> -func print_version(v uint32) {\r\n> -       major := byte(v)\r\n> -       minor := uint8(v >> 8)\r\n> -       build := uint16(v >> 16)\r\n> -       print(\"windows version \", major, \".\", minor, \" (Build \", build,\r\n> \")\\n\")\r\n> -}\r\n> -\r\n> -func main() {\r\n> -       h, err := syscall.LoadLibrary(\"kernel32.**dll\")\r\n> -       if err != nil {\r\n> -               abort(\"LoadLibrary\", err)\r\n> -       }\r\n> -       defer syscall.FreeLibrary(h)\r\n> -       proc, err := syscall.GetProcAddress(h, \"GetVersion\")\r\n> -       if err != nil {\r\n> -               abort(\"GetProcAddress\", err)\r\n> -       }\r\n> -       r, _, _ := syscall.Syscall(uintptr(proc), 0, 0, 0, 0)\r\n> -       print_version(uint32(r))\r\n> -}\r\n> -\r\n> -*/\r\n> -\r\n>  // StringToUTF16 is deprecated. Use UTF16FromString instead.\r\n>  // If s contains a NUL byte this function panics instead of\r\n>  // returning an error.\r\n> @@ -142,7 +105,7 @@\r\n>  // Converts a Go function to a function pointer conforming\r\n>  // to the stdcall calling convention.  This is useful when\r\n>  // interoperating with Windows code requiring callbacks.\r\n> -// Implemented in ../runtime/windows/syscall.goc\r\n> +// Implemented in ../runtime/syscall_windows.goc\r\n>  func NewCallback(fn interface{}) uintptr\r\n>\r\n>  // windows api calls\r\n> Index: src/pkg/syscall/syscall_**windows_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/syscall_**windows_test.go\r\n> +++ b/src/pkg/syscall/syscall_**windows_test.go\r\n> @@ -49,3 +49,24 @@\r\n>                 t.Fatalf(\"memory corruption: want=%d got=%d\", want, x.got)\r\n>         }\r\n>  }\r\n> +\r\n> +func abort(funcname string, err error) {\r\n> +       panic(funcname + \" failed: \" + err.Error())\r\n> +}\r\n> +\r\n> +func ExampleLoadLibrary() {\r\n> +       h, err := syscall.LoadLibrary(\"kernel32.**dll\")\r\n> +       if err != nil {\r\n> +               abort(\"LoadLibrary\", err)\r\n> +       }\r\n> +       defer syscall.FreeLibrary(h)\r\n> +       proc, err := syscall.GetProcAddress(h, \"GetVersion\")\r\n> +       if err != nil {\r\n> +               abort(\"GetProcAddress\", err)\r\n> +       }\r\n> +       r, _, _ := syscall.Syscall(uintptr(proc), 0, 0, 0, 0)\r\n> +       major := byte(r)\r\n> +       minor := uint8(r >> 8)\r\n> +       build := uint16(r >> 16)\r\n> +       print(\"windows version \", major, \".\", minor, \" (Build \", build,\r\n> \")\\n\")\r\n> +}\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-29 13:28:02.834900",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-08-29 13:38:46.514180",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=80be10893a8b ***\n\nsyscall: extract an ExampleLoadLibrary from comment\n   while we are at it, fix some out-of-date comments.\n\nR=golang-dev, dave, r\nCC=golang-dev\nhttp://codereview.appspot.com/6498054",
			"disapproval": false,
			"date": "2012-08-29 13:45:28.502590",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6498054: syscall: extract an ExampleLoadLibrary from comment",
	"created": "2012-08-29 12:48:57.216280",
	"patchsets": [
		1,
		5001,
		8001,
		11001
	],
	"modified": "2012-08-29 13:45:40.087810",
	"closed": true,
	"issue": 6498054
}