{
	"description": "bufio: add ReadLineSlice() convenience method to Reader.\n\ntextproto.Reader has a non-exported readLineSlice method, which avoids\nthe issue of continued lines (isPrefix is true) in ReadLine. The fact\nthat this method exists shows that the ReadLine API has this weakness,\nand in my humble opinion, ReadLineSlice is much more useful than pure\nReadLine for reading a file line by line.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rogpeppe@gmail.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "generally i am in favour of this, because ReadLine is usually not what i want.\n\nnot sure about the name though, but i can't think of anything better.\n\nhttp://codereview.appspot.com/5435069/diff/3/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/5435069/diff/3/src/pkg/bufio/bufio.go#newcode334\nsrc/pkg/bufio/bufio.go:334: // read lines.\nThis needs to say, I think, that the returned line may or may not be overwritten on the next call. It should probably also explicitly state what it returns.",
			"disapproval": false,
			"date": "2011-11-24 20:11:17.573047",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-24 19:43:49.119653",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-24 20:50:10.207918",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 30, 2011 at 21:00, Russ Cox <rsc@golang.org> wrote:\n> i don't understand why you would not use ReadBytes('\\n').\n\nTo be honest, I am not sure that I understand the difference between\nReadBytes('\\n') and ReadLine. In the former case, what happens if the\nline is longer than the buffer, or does not fit into the remaining\nbuffer space? In the latter, what is the deeper purpose of the\nisPrefix handling?\n\nIn my opinion, ReadLine is a very confusing API. Maybe ReadLine should\nwork the way the proposed ReadLineSlice does?\n\n--Benny.\n",
			"disapproval": false,
			"date": "2011-11-30 20:54:04.530697",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5435069/diff/3/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/5435069/diff/3/src/pkg/bufio/bufio.go#newcode334\nsrc/pkg/bufio/bufio.go:334: // read lines.\nOn 2011/11/24 20:11:17, rog wrote:\n> This needs to say, I think, that the returned line may or may not be overwritten\n> on the next call. It should probably also explicitly state what it returns.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-24 20:50:50.612403",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping?\n",
			"disapproval": false,
			"date": "2011-11-29 18:36:24.338792",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm not too happy about this. not that what's there is necessarily good or bad, but if there's a problem with the API adding yet another line-reader is not the answer. the current design clearly isn't working.",
			"disapproval": false,
			"date": "2011-11-30 19:18:13.529331",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i don't understand why you would not use ReadBytes('\\n').\n",
			"disapproval": false,
			"date": "2011-11-30 20:00:33.692528",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 30, 2011 at 15:54, Benny Siegert <bsiegert@gmail.com> wrote:\n> To be honest, I am not sure that I understand the difference between\n> ReadBytes('\\n') and ReadLine. In the former case, what happens if the\n> line is longer than the buffer, or does not fit into the remaining\n> buffer space? In the latter, what is the deeper purpose of the\n> isPrefix handling?\n>\n> In my opinion, ReadLine is a very confusing API. Maybe ReadLine should\n> work the way the proposed ReadLineSlice does?\n\nThe easy answer is that if you don't have a reason to use ReadLine\nthen you should use ReadBytes or ReadString.  We should rename\nReadLine to something like ReadLineFragment and edit the doc\ncomment to point people at ReadBytes.\n\nReadBytes + ReadSlice both handle lines bigger than a buffer\njust fine.  ReadLineFragment is for where you care more about\nbuffering than you do about getting the whole line.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-30 20:56:44.621866",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The thing that is convenient about ReadLine is that it strips off the\ntrailing line terminator, and deals with \\r\\n too. It's not hard but it is\nannoying to do every time.\nOn 30 Nov 2011 20:56, \"Russ Cox\" <rsc@golang.org> wrote:\n\n> On Wed, Nov 30, 2011 at 15:54, Benny Siegert <bsiegert@gmail.com> wrote:\n> > To be honest, I am not sure that I understand the difference between\n> > ReadBytes('\\n') and ReadLine. In the former case, what happens if the\n> > line is longer than the buffer, or does not fit into the remaining\n> > buffer space? In the latter, what is the deeper purpose of the\n> > isPrefix handling?\n> >\n> > In my opinion, ReadLine is a very confusing API. Maybe ReadLine should\n> > work the way the proposed ReadLineSlice does?\n>\n> The easy answer is that if you don't have a reason to use ReadLine\n> then you should use ReadBytes or ReadString.  We should rename\n> ReadLine to something like ReadLineFragment and edit the doc\n> comment to point people at ReadBytes.\n>\n> ReadBytes + ReadSlice both handle lines bigger than a buffer\n> just fine.  ReadLineFragment is for where you care more about\n> buffering than you do about getting the whole line.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-30 21:08:53.094359",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-14 17:18:48.112387",
			"approval": false
		}
	],
	"owner_email": "bsiegert@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bsiegert",
	"subject": "code review 5435069: bufio: add ReadLineSlice() convenience method to Reader.",
	"created": "2011-11-24 19:42:28.511226",
	"patchsets": [
		1,
		2001,
		3,
		6
	],
	"modified": "2011-12-14 17:18:49.750345",
	"closed": true,
	"issue": 5435069
}