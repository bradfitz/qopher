{
	"description": "runtime: fix and speedup malloc stats\nCurrently per-sizeclass stats are lost for destroyed MCache's. This patch fixes this.\nAlso, only update mstats.heap_alloc on heap operations, because that's the only\nstat that needs to be promptly updated. Everything else needs to be up-to-date only in ReadMemStats().",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"dave@cheney.net",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-15 06:30:09.422350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-18 11:11:46.209580",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (left):\n\nhttps://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h#oldcode302\nsrc/pkg/runtime/malloc.h:302: int32 next_sample;\t// trigger heap sample after allocating this many bytes\nwhy did you move this to the top, on 64bit platforms will this leave a padding hole ?",
			"disapproval": false,
			"date": "2013-05-18 23:48:24.593130",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (left):\n\nhttps://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h#oldcode302\nsrc/pkg/runtime/malloc.h:302: int32 next_sample;\t// trigger heap sample after allocating this many bytes\nOn 2013/05/18 23:48:24, dfc wrote:\n> why did you move this to the top, on 64bit platforms will this leave a padding\n> hole ?\n\nI've added the comment that explains the purpose.\nThe hole is not that important as locality and shorter instructions (we have only 1 MCache per proc).",
			"disapproval": false,
			"date": "2013-05-20 07:41:15.592980",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h#newcode297\nsrc/pkg/runtime/malloc.h:297: // The rest is not accessed on every malloc.\nWhat about the local_objects field?",
			"disapproval": false,
			"date": "2013-05-22 17:57:15.365640",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/9207047/diff/4005/src/pkg/runtime/malloc.h#newcode297\nsrc/pkg/runtime/malloc.h:297: // The rest is not accessed on every malloc.\nOn 2013/05/22 17:57:15, iant wrote:\n> What about the local_objects field?\n\nlocal_objects will go away from fast path\nthere are too many stats updated now, some are just doubled, not saying about stats that are trivially derivable from others",
			"disapproval": false,
			"date": "2013-05-22 18:02:24.120180",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=469353116d53 ***\n\nruntime: fix and speedup malloc stats\nCurrently per-sizeclass stats are lost for destroyed MCache's. This patch fixes this.\nAlso, only update mstats.heap_alloc on heap operations, because that's the only\nstat that needs to be promptly updated. Everything else needs to be up-to-date only in ReadMemStats().\n\nR=golang-dev, remyoudompheng, dave, iant\nCC=golang-dev\nhttps://codereview.appspot.com/9207047",
			"disapproval": false,
			"date": "2013-05-22 18:23:07.367220",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9207047: runtime: fix and speedup malloc stats",
	"created": "2013-05-15 06:16:35.737200",
	"patchsets": [
		1,
		2001,
		5001,
		4005,
		16001,
		19001
	],
	"modified": "2013-05-22 18:23:07.367220",
	"closed": true,
	"issue": 9207047
}