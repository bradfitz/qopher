{
	"description": "spec: type assertions and type switches must be valid\n\nThe spec didn't preclude invalid type assertions and\ntype switches, i.e., cases where a concrete type doesn't\nimplement the interface type in the assertion in the first\nplace. Both, the gc and gccgo compiler exclude these cases.\nThis is documenting the status quo.\n\nAlso:\n- minor clean up of respective examples\n- added sentence about default case in select statements\n\nFixes issue 4472.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"r@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6869050/diff/9001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6869050/diff/9001/doc/go_spec.html#newcode4180\ndoc/go_spec.html:4180: x.(type)\nOn 2012/12/03 22:32:34, iant wrote:\n> This new example is a little tricky because this is not valid by itself.  I\n> think it's OK to omit the example.  But if you want to include it, I think it\n> ought to be something like\n>     switch x.(type) {\n>         // cases\n>     }\n\nDone.\n\nhttps://codereview.appspot.com/6869050/diff/9001/doc/go_spec.html#newcode4185\ndoc/go_spec.html:4185: expression <code>x</code>. As for type assertions, <code>x</code> must be of\nOn 2012/12/03 22:32:34, iant wrote:\n> s/for/with/\n\nDone.",
			"disapproval": false,
			"date": "2012-12-03 22:37:45.084230",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n- gri\n\nhttps://codereview.appspot.com/6869050/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6869050/diff/5001/doc/go_spec.html#newcode2673\ndoc/go_spec.html:2673: Type <code>T</code> must <a href=\"#Method_sets\">implement</a> the (interface) type of <code>x</code>,\nOn 2012/12/03 19:32:31, rsc wrote:\n> This is only true for concrete types.\n> Move up between lines 2670 and 2671?\n> \n> var y interface { m() }\n> r := y.(io.Reader)\n> \n> is fine. \n\nof course\n\nhttps://codereview.appspot.com/6869050/diff/5001/doc/go_spec.html#newcode4182\ndoc/go_spec.html:4182: <a href=\"#Interface_types\">interface type</a>, and each type <code>T</code>\nOn 2012/12/03 19:32:31, rsc wrote:\n> s/type/non-interface type/\n\nDone.",
			"disapproval": false,
			"date": "2012-12-03 22:06:23.322170",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org, r@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-03 18:31:25.200320",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6869050/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6869050/diff/5001/doc/go_spec.html#newcode2673\ndoc/go_spec.html:2673: Type <code>T</code> must <a href=\"#Method_sets\">implement</a> the (interface) type of <code>x</code>,\nThis is only true for concrete types.\nMove up between lines 2670 and 2671?\n\nvar y interface { m() }\nr := y.(io.Reader)\n\nis fine.\n\nhttps://codereview.appspot.com/6869050/diff/5001/doc/go_spec.html#newcode4182\ndoc/go_spec.html:4182: <a href=\"#Interface_types\">interface type</a>, and each type <code>T</code>\ns/type/non-interface type/",
			"disapproval": false,
			"date": "2012-12-03 19:32:31.315090",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6869050/diff/9001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6869050/diff/9001/doc/go_spec.html#newcode4180\ndoc/go_spec.html:4180: x.(type)\nThis new example is a little tricky because this is not valid by itself.  I think it's OK to omit the example.  But if you want to include it, I think it ought to be something like\n    switch x.(type) {\n        // cases\n    }\n\nhttps://codereview.appspot.com/6869050/diff/9001/doc/go_spec.html#newcode4185\ndoc/go_spec.html:4185: expression <code>x</code>. As for type assertions, <code>x</code> must be of\ns/for/with/",
			"disapproval": false,
			"date": "2012-12-03 22:32:33.926230",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html#newcode2671\ndoc/go_spec.html:2671: In this case, <code>T</code> must <a href=\"#Method_sets\">implement</a> the (interface) type of <code>x</code>,\ns/,/;/ at end of line\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html#newcode2673\ndoc/go_spec.html:2673: to store a value of type <code>T</code> in the first place.\ns/ in the first place//\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html#newcode4189\ndoc/go_spec.html:4189: <code>T</code> listed in each case must implement the type of <code>x</code>.\ns/each/a/",
			"disapproval": false,
			"date": "2012-12-06 03:37:03.359270",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI.\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html#newcode2671\ndoc/go_spec.html:2671: In this case, <code>T</code> must <a href=\"#Method_sets\">implement</a> the (interface) type of <code>x</code>,\nOn 2012/12/06 03:37:03, rsc wrote:\n> s/,/;/ at end of line\n> \n\nDone.\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html#newcode2673\ndoc/go_spec.html:2673: to store a value of type <code>T</code> in the first place.\nOn 2012/12/06 03:37:03, rsc wrote:\n> s/ in the first place//\n\nDone.\n\nhttps://codereview.appspot.com/6869050/diff/1004/doc/go_spec.html#newcode4189\ndoc/go_spec.html:4189: <code>T</code> listed in each case must implement the type of <code>x</code>.\nOn 2012/12/06 03:37:03, rsc wrote:\n> s/each/a/\n\nDone.",
			"disapproval": false,
			"date": "2012-12-06 17:07:16.045850",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1f28d9979753 ***\n\nspec: type assertions and type switches must be valid\n\nThe spec didn't preclude invalid type assertions and\ntype switches, i.e., cases where a concrete type doesn't\nimplement the interface type in the assertion in the first\nplace. Both, the gc and gccgo compiler exclude these cases.\nThis is documenting the status quo.\n\nAlso:\n- minor clean up of respective examples\n- added sentence about default case in select statements\n\nFixes issue 4472.\n\nR=rsc, iant, r, ken\nCC=golang-dev\nhttps://codereview.appspot.com/6869050",
			"disapproval": false,
			"date": "2012-12-06 17:17:44.486990",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6869050: spec: type assertions and type switches must be valid",
	"created": "2012-12-03 18:29:39.361890",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		9001,
		2004,
		1004,
		15001
	],
	"modified": "2012-12-07 17:43:04.420170",
	"closed": true,
	"issue": 6869050
}