{
	"description": "google-api-go-client: avoid reencoding parameters in the URL path\n\nSome APIs, such as cloud storage, need to use values that are being\nnow removed.\n'%2F' is replaced by '/' url.Parse, which is called by http.NewRequest.",
	"cc": [
		"bradfitz@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "does this break other APIs, though?\r\n\r\nI'm afraid you're only testing cloud storage.\r\n\r\n\r\n\r\nOn Wed, May 22, 2013 at 12:58 PM, <campoy@golang.org> wrote:\r\n\r\n> Reviewers: bradfitz, adg,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org, adg@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/**google-api-go-client<https://code.google.com/p/google-api-go-client>\r\n>\r\n>\r\n> Description:\r\n> google-api-go-client: avoid reencoding parameters in the URL path\r\n>\r\n> Some APIs, such as cloud storage, need to use values that are being\r\n> now removed.\r\n> '%2F' is replaced by '/' url.Parse, which is called by http.NewRequest.\r\n>\r\n> Please review this at https://codereview.appspot.**com/9671043/<https://codereview.appspot.com/9671043/>\r\n>\r\n> Affected files:\r\n>   M google-api-go-generator/gen.go\r\n>\r\n>\r\n> Index: google-api-go-generator/gen.go\r\n> ==============================**==============================**=======\r\n> --- a/google-api-go-generator/gen.**go\r\n> +++ b/google-api-go-generator/gen.**go\r\n> @@ -488,7 +488,6 @@\r\n>                 res.generateMethods()\r\n>         }\r\n>\r\n> -       pn(\"\\nfunc cleanPathString(s string) string { return\r\n> strings.Map(func(r rune) rune { if r >= 0x2d && r <= 0x7a || r == '~' {\r\n> return r }; return -1 }, s) }\")\r\n>         return nil\r\n>  }\r\n>\r\n> @@ -1137,9 +1136,6 @@\r\n>                 pn(`params.Set(\"uploadType\", \"multipart\")`)\r\n>                 pn(\"}\")\r\n>         }\r\n> -       for _, arg := range args.forLocation(\"path\") {\r\n> -               p(\"\\turls = strings.Replace(urls, \\\"{%s}\\\", %s, 1)\\n\",\r\n> arg.apiname, arg.cleanExpr(\"c.\"))\r\n> -       }\r\n>         pn(\"urls += \\\"?\\\" + params.Encode()\")\r\n>         if meth.supportsMedia() {\r\n>                 if !hasContentType { // Support mediaUpload but no ctype\r\n> set.\r\n> @@ -1150,6 +1146,14 @@\r\n>                 pn(\"contentLength_, hasMedia_ := googleapi.**\r\n> ConditionallyIncludeMedia(c.**media_, &body, &ctype)\")\r\n>         }\r\n>         pn(\"req, _ := http.NewRequest(%q, urls, body)\", jstr(meth.m,\r\n> \"httpMethod\"))\r\n> +       // Replace param values after NewRequest to avoid reencoding them.\r\n> +       // E.g. Cloud Storage API requires '%2F' in entity param to be\r\n> kept, but url.Parse replaces it by '/'.\r\n> +       for _, arg := range args.forLocation(\"path\") {\r\n> +               p(\"\\treq.URL.Path = strings.Replace(req.URL.Path,\r\n> \\\"{%s}\\\", %s, 1)\\n\", arg.apiname, arg.expr(\"c.\"))\r\n> +       }\r\n> +       // Set opaque to avoid encoding of the parameters in the URL path.\r\n> +       p(\"\\treq.URL.Opaque = req.URL.Path\\n\")\r\n> +\r\n>         if meth.supportsMedia() {\r\n>                 pn(\"if hasMedia_ { req.ContentLength = contentLength_ }\")\r\n>         }\r\n> @@ -1318,13 +1322,13 @@\r\n>         return a.goname + \" \" + a.gotype\r\n>  }\r\n>\r\n> -func (a *argument) cleanExpr(prefix string) string {\r\n> +func (a *argument) expr(prefix string) string {\r\n>         switch a.gotype {\r\n>         case \"[]string\":\r\n>                 log.Printf(\"TODO(bradfitz): only including the first\r\n> parameter in path query.\")\r\n> -               return \"cleanPathString(\" + prefix + a.goname + \"[0])\"\r\n> +               return prefix + a.goname + \"[0]\"\r\n>         case \"string\":\r\n> -               return \"cleanPathString(\" + prefix + a.goname + \")\"\r\n> +               return prefix + a.goname\r\n>         case \"integer\", \"int64\":\r\n>                 return \"strconv.FormatInt(\" + prefix + a.goname + \", 10)\"\r\n>         case \"uint64\":\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-22 20:08:07.212730",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/google-api-go-client",
			"disapproval": false,
			"date": "2013-05-22 19:58:37.398170",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 22, 2013 at 4:28 PM, <adg@golang.org> wrote:\r\n\r\n> I'd like to see all the changes to generated code in this CL, too. Not\r\n> sure if that's what brad has done in the past also.\r\n\r\n\r\nAgree.\r\n",
			"disapproval": false,
			"date": "2013-05-22 23:35:31.843200",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://golang.org/pkg/net/url/#QueryEscape ?",
			"disapproval": false,
			"date": "2013-05-22 23:24:45.144500",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 May 2013 09:45, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> is this really the right use of req.URL.Opaque?\r\n\r\n\r\nI don't think it is. Used in this way, would drop the host from the request\r\nURL:\r\n\r\nhttp://play.golang.org/p/xn0SO9y2mC\r\n",
			"disapproval": false,
			"date": "2013-05-22 23:52:00.042600",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9671043/diff/17001/google-api-go-generator/gen.go\nFile google-api-go-generator/gen.go (right):\n\nhttps://codereview.appspot.com/9671043/diff/17001/google-api-go-generator/gen.go#newcode1155\ngoogle-api-go-generator/gen.go:1155: pn(\"req.URL.Opaque = req.URL.Path\\n\")\nI think this should be \n\npn(`req.URL.Opaque = \"//\" + req.URL.Host + req.URL.Path`)",
			"disapproval": false,
			"date": "2013-05-23 00:27:58.962020",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm also testing other APIs (taskqueue, for instance) but I don't know if\r\nthere's a way to test all of them.\r\n\r\nAfter discussion with Fred Sauer, he says the best solution is  to URL\r\nencode all values using the equivalent to\r\nurllib.quote_plus<http://docs.python.org/2/library/urllib.html#urllib.quote_plus>\r\n\r\nThis means that when the value is \"foo/bar\" it will be encoded as\r\n\"foo%2Fbar\" which is what I'm actually looking for.\r\n\r\nDo you know if we have an equivalent to it in the standard library? I'm\r\nlooking for it and I can't find it\r\n\r\n\r\nOn Wed, May 22, 2013 at 1:08 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> does this break other APIs, though?\r\n>\r\n> I'm afraid you're only testing cloud storage.\r\n>\r\n>\r\n>\r\n> On Wed, May 22, 2013 at 12:58 PM, <campoy@golang.org> wrote:\r\n>\r\n>> Reviewers: bradfitz, adg,\r\n>>\r\n>> Message:\r\n>> Hello bradfitz@golang.org, adg@golang.org (cc:\r\n>> golang-dev@googlegroups.com),\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/**google-api-go-client<https://code.google.com/p/google-api-go-client>\r\n>>\r\n>>\r\n>> Description:\r\n>> google-api-go-client: avoid reencoding parameters in the URL path\r\n>>\r\n>> Some APIs, such as cloud storage, need to use values that are being\r\n>> now removed.\r\n>> '%2F' is replaced by '/' url.Parse, which is called by http.NewRequest.\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/9671043/<https://codereview.appspot.com/9671043/>\r\n>>\r\n>> Affected files:\r\n>>   M google-api-go-generator/gen.go\r\n>>\r\n>>\r\n>> Index: google-api-go-generator/gen.go\r\n>> ==============================**==============================**=======\r\n>> --- a/google-api-go-generator/gen.**go\r\n>> +++ b/google-api-go-generator/gen.**go\r\n>> @@ -488,7 +488,6 @@\r\n>>                 res.generateMethods()\r\n>>         }\r\n>>\r\n>> -       pn(\"\\nfunc cleanPathString(s string) string { return\r\n>> strings.Map(func(r rune) rune { if r >= 0x2d && r <= 0x7a || r == '~' {\r\n>> return r }; return -1 }, s) }\")\r\n>>         return nil\r\n>>  }\r\n>>\r\n>> @@ -1137,9 +1136,6 @@\r\n>>                 pn(`params.Set(\"uploadType\", \"multipart\")`)\r\n>>                 pn(\"}\")\r\n>>         }\r\n>> -       for _, arg := range args.forLocation(\"path\") {\r\n>> -               p(\"\\turls = strings.Replace(urls, \\\"{%s}\\\", %s, 1)\\n\",\r\n>> arg.apiname, arg.cleanExpr(\"c.\"))\r\n>> -       }\r\n>>         pn(\"urls += \\\"?\\\" + params.Encode()\")\r\n>>         if meth.supportsMedia() {\r\n>>                 if !hasContentType { // Support mediaUpload but no ctype\r\n>> set.\r\n>> @@ -1150,6 +1146,14 @@\r\n>>                 pn(\"contentLength_, hasMedia_ := googleapi.**\r\n>> ConditionallyIncludeMedia(c.**media_, &body, &ctype)\")\r\n>>         }\r\n>>         pn(\"req, _ := http.NewRequest(%q, urls, body)\", jstr(meth.m,\r\n>> \"httpMethod\"))\r\n>> +       // Replace param values after NewRequest to avoid reencoding them.\r\n>> +       // E.g. Cloud Storage API requires '%2F' in entity param to be\r\n>> kept, but url.Parse replaces it by '/'.\r\n>> +       for _, arg := range args.forLocation(\"path\") {\r\n>> +               p(\"\\treq.URL.Path = strings.Replace(req.URL.Path,\r\n>> \\\"{%s}\\\", %s, 1)\\n\", arg.apiname, arg.expr(\"c.\"))\r\n>> +       }\r\n>> +       // Set opaque to avoid encoding of the parameters in the URL path.\r\n>> +       p(\"\\treq.URL.Opaque = req.URL.Path\\n\")\r\n>> +\r\n>>         if meth.supportsMedia() {\r\n>>                 pn(\"if hasMedia_ { req.ContentLength = contentLength_ }\")\r\n>>         }\r\n>> @@ -1318,13 +1322,13 @@\r\n>>         return a.goname + \" \" + a.gotype\r\n>>  }\r\n>>\r\n>> -func (a *argument) cleanExpr(prefix string) string {\r\n>> +func (a *argument) expr(prefix string) string {\r\n>>         switch a.gotype {\r\n>>         case \"[]string\":\r\n>>                 log.Printf(\"TODO(bradfitz): only including the first\r\n>> parameter in path query.\")\r\n>> -               return \"cleanPathString(\" + prefix + a.goname + \"[0])\"\r\n>> +               return prefix + a.goname + \"[0]\"\r\n>>         case \"string\":\r\n>> -               return \"cleanPathString(\" + prefix + a.goname + \")\"\r\n>> +               return prefix + a.goname\r\n>>         case \"integer\", \"int64\":\r\n>>                 return \"strconv.FormatInt(\" + prefix + a.goname + \", 10)\"\r\n>>         case \"uint64\":\r\n>>\r\n>>\r\n>>\r\n>\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2013-05-22 20:31:52.973390",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/google-api-go-client/source/detail?r=49979a5f1445 ***\n\ngoogle-api-go-client: avoid reencoding parameters in the URL path\n\nSome APIs, such as cloud storage, need to use values that are being\nnow removed.\n'%2F' is replaced by '/' url.Parse, which is called by http.NewRequest.\n\nR=bradfitz, adg\nCC=golang-dev\nhttps://codereview.appspot.com/9671043",
			"disapproval": false,
			"date": "2013-05-23 21:18:29.185090",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I found url.QueryEscape that does exactly what I wanted.\n\nPTAL",
			"disapproval": false,
			"date": "2013-05-22 23:22:54.834170",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like to see all the changes to generated code in this CL, too. Not sure if that's what brad has done in the past also.\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go\nFile google-api-go-generator/gen.go (right):\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1150\ngoogle-api-go-generator/gen.go:1150: // E.g. Cloud Storage API requires '%2F' in entity param to be kept, but url.Parse replaces it by '/'.\ns/by/with/\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1152\ngoogle-api-go-generator/gen.go:1152: p(\"\\treq.URL.Path = strings.Replace(req.URL.Path, \\\"{%s}\\\", %s, 1)\\n\", arg.apiname, arg.cleanExpr(\"c.\"))\nuse pn(`req.URL ...`, ...)\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1155\ngoogle-api-go-generator/gen.go:1155: p(\"\\treq.URL.Opaque = req.URL.Path\\n\")\npn()",
			"disapproval": false,
			"date": "2013-05-22 23:28:55.665280",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All the changes are here: https://codereview.appspot.com/9672043/\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go\nFile google-api-go-generator/gen.go (right):\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1150\ngoogle-api-go-generator/gen.go:1150: // E.g. Cloud Storage API requires '%2F' in entity param to be kept, but url.Parse replaces it by '/'.\nOn 2013/05/22 23:28:55, adg wrote:\n> s/by/with/\n\nDone.\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1152\ngoogle-api-go-generator/gen.go:1152: p(\"\\treq.URL.Path = strings.Replace(req.URL.Path, \\\"{%s}\\\", %s, 1)\\n\", arg.apiname, arg.cleanExpr(\"c.\"))\nOn 2013/05/22 23:28:55, adg wrote:\n> use pn(`req.URL ...`, ...)\n\nDone.\n\nhttps://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1155\ngoogle-api-go-generator/gen.go:1155: p(\"\\treq.URL.Opaque = req.URL.Path\\n\")\nOn 2013/05/22 23:28:55, adg wrote:\n> pn()\n\nDone.",
			"disapproval": false,
			"date": "2013-05-22 23:39:13.969590",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "is this really the right use of req.URL.Opaque?\r\n\r\nI remember knowing this once, but it feels wrong and doesn't seem to match\r\nthe docs at http://golang.org/pkg/net/url/#URL\r\n\r\n\r\n\r\n\r\nOn Wed, May 22, 2013 at 4:39 PM, <campoy@golang.org> wrote:\r\n\r\n> All the changes are here: https://codereview.appspot.**com/9672043/<https://codereview.appspot.com/9672043/>\r\n>\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/9671043/diff/12001/google-**\r\n> api-go-generator/gen.go<https://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go>\r\n> File google-api-go-generator/gen.go (right):\r\n>\r\n> https://codereview.appspot.**com/9671043/diff/12001/google-**\r\n> api-go-generator/gen.go#**newcode1150<https://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1150>\r\n> google-api-go-generator/gen.**go:1150: // E.g. Cloud Storage API requires\r\n> '%2F' in entity param to be kept, but url.Parse replaces it by '/'.\r\n> On 2013/05/22 23:28:55, adg wrote:\r\n>\r\n>> s/by/with/\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/9671043/diff/12001/google-**\r\n> api-go-generator/gen.go#**newcode1152<https://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1152>\r\n> google-api-go-generator/gen.**go:1152: p(\"\\treq.URL.Path =\r\n> strings.Replace(req.URL.Path, \\\"{%s}\\\", %s, 1)\\n\", arg.apiname,\r\n> arg.cleanExpr(\"c.\"))\r\n> On 2013/05/22 23:28:55, adg wrote:\r\n>\r\n>> use pn(`req.URL ...`, ...)\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/9671043/diff/12001/google-**\r\n> api-go-generator/gen.go#**newcode1155<https://codereview.appspot.com/9671043/diff/12001/google-api-go-generator/gen.go#newcode1155>\r\n> google-api-go-generator/gen.**go:1155: p(\"\\treq.URL.Opaque =\r\n> req.URL.Path\\n\")\r\n> On 2013/05/22 23:28:55, adg wrote:\r\n>\r\n>> pn()\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/9671043/<https://codereview.appspot.com/9671043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-22 23:45:43.218280",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I tested and it works with your solution too.\n\nOpaque fields are opaque ...\n\nhttps://codereview.appspot.com/9671043/diff/17001/google-api-go-generator/gen.go\nFile google-api-go-generator/gen.go (right):\n\nhttps://codereview.appspot.com/9671043/diff/17001/google-api-go-generator/gen.go#newcode1155\ngoogle-api-go-generator/gen.go:1155: pn(\"req.URL.Opaque = req.URL.Path\\n\")\nOn 2013/05/23 00:27:59, adg wrote:\n> I think this should be \n> \n> pn(`req.URL.Opaque = \"//\" + req.URL.Host + req.URL.Path`)\n\nDone.",
			"disapproval": false,
			"date": "2013-05-23 00:41:35.132250",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm a bit worried about your tests if it worked before. The way you had it would have clobbered the hostname, making the url unusable.\n\nhttps://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go\nFile google-api-go-generator/gen.go (right):\n\nhttps://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go#newcode1152\ngoogle-api-go-generator/gen.go:1152: pn(\"req.URL.Path = strings.Replace(req.URL.Path, \\\"{%s}\\\", %s, 1)\\n\", arg.apiname, arg.cleanExpr(\"c.\"))\nAGAIN, please use `backtics`  to avoid the needless quoting\n\nhttps://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go#newcode1155\ngoogle-api-go-generator/gen.go:1155: pn(\"req.URL.Opaque =  \\\"//\\\" + req.URL.Host + req.URL.Path\\n\")\nditto",
			"disapproval": false,
			"date": "2013-05-23 00:45:36.230560",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go\nFile google-api-go-generator/gen.go (right):\n\nhttps://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go#newcode1152\ngoogle-api-go-generator/gen.go:1152: pn(\"req.URL.Path = strings.Replace(req.URL.Path, \\\"{%s}\\\", %s, 1)\\n\", arg.apiname, arg.cleanExpr(\"c.\"))\nOn 2013/05/23 00:45:36, adg wrote:\n> AGAIN, please use `backtics`  to avoid the needless quoting\n\nDone\nI was keeping it that way just to be consistent with the code around it.\n\nhttps://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go#newcode1155\ngoogle-api-go-generator/gen.go:1155: pn(\"req.URL.Opaque =  \\\"//\\\" + req.URL.Host + req.URL.Path\\n\")\nOn 2013/05/23 00:45:36, adg wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2013-05-23 00:53:23.167810",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks ok to me now, but wait for brad.\n\nhttps://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go\nFile google-api-go-generator/gen.go (right):\n\nhttps://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go#newcode1152\ngoogle-api-go-generator/gen.go:1152: pn(\"req.URL.Path = strings.Replace(req.URL.Path, \\\"{%s}\\\", %s, 1)\\n\", arg.apiname, arg.cleanExpr(\"c.\"))\nOn 2013/05/23 00:53:23, gocampoy wrote:\n> On 2013/05/23 00:45:36, adg wrote:\n> > AGAIN, please use `backtics`  to avoid the needless quoting\n> \n> Done\n> I was keeping it that way just to be consistent with the code around it.\n\nLook at the surrounding code. It uses backticks everywhere there are quotes inside the strings.",
			"disapproval": false,
			"date": "2013-05-23 02:31:38.752460",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Gentle ping for Brad\r\n\r\n\r\nOn Wed, May 22, 2013 at 7:31 PM, <adg@golang.org> wrote:\r\n\r\n> This looks ok to me now, but wait for brad.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/9671043/diff/19002/google-**\r\n> api-go-generator/gen.go<https://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go>\r\n> File google-api-go-generator/gen.go (right):\r\n>\r\n> https://codereview.appspot.**com/9671043/diff/19002/google-**\r\n> api-go-generator/gen.go#**newcode1152<https://codereview.appspot.com/9671043/diff/19002/google-api-go-generator/gen.go#newcode1152>\r\n> google-api-go-generator/gen.**go:1152: pn(\"req.URL.Path =\r\n> strings.Replace(req.URL.Path, \\\"{%s}\\\", %s, 1)\\n\", arg.apiname,\r\n> arg.cleanExpr(\"c.\"))\r\n> On 2013/05/23 00:53:23, gocampoy wrote:\r\n>\r\n>> On 2013/05/23 00:45:36, adg wrote:\r\n>> > AGAIN, please use `backtics`  to avoid the needless quoting\r\n>>\r\n>\r\n>  Done\r\n>> I was keeping it that way just to be consistent with the code around\r\n>>\r\n> it.\r\n>\r\n> Look at the surrounding code. It uses backticks everywhere there are\r\n> quotes inside the strings.\r\n>\r\n> https://codereview.appspot.**com/9671043/<https://codereview.appspot.com/9671043/>\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2013-05-23 17:35:14.266160",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"campoy@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI think.\n\nBe sure to ask people to test it go golang-nuts after you push out the generated changes.\n\nI'd also like to see some sample code / tests checked in at some point.",
			"disapproval": false,
			"date": "2013-05-23 21:15:47.612270",
			"approval": true
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 9671043: google-api-go-client: avoid reencoding parameters in th...",
	"created": "2013-05-22 19:53:36.563920",
	"patchsets": [
		1,
		3,
		4001,
		7001,
		10001,
		12001,
		17001,
		19002,
		24001,
		30001,
		21002
	],
	"modified": "2013-05-23 21:15:47.612270",
	"closed": true,
	"issue": 9671043
}