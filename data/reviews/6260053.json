{
	"description": "net/http: add new Server benchmark\n\nThe new BenchmarkServer avoids profiling the client code\nby running it in a child process.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-05-29 23:35:37.181155",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6260053/diff/2001/src/pkg/net/http/serve_test.go\nFile src/pkg/net/http/serve_test.go (right):\n\nhttp://codereview.appspot.com/6260053/diff/2001/src/pkg/net/http/serve_test.go#newcode1252\nsrc/pkg/net/http/serve_test.go:1252: ExportFormatTime(t)\nPut these benchmarks in one of the many *_test.go files that is in package http, and then you don't need the Export hack.",
			"disapproval": false,
			"date": "2012-06-03 03:43:44.676637",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is the custom format still worth having at all?\r\n",
			"disapproval": false,
			"date": "2012-06-03 19:55:23.956652",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7d28afbc8273 ***\n\nnet/http: add new Server benchmark\n\nThe new BenchmarkServer avoids profiling the client code\nby running it in a child process.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6260053",
			"disapproval": false,
			"date": "2012-06-04 15:06:08.866651",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 8:23 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I was planning on doing 2+% in 10 places.\r\n>\r\n> But I can see that might not fly.\r\n>\r\n> Also, the custom code was already written at the time this saved more than\r\n> 2%. \u00a0It doesn't affect the API.\r\n>\r\n> I'll re-send this CL with just the benchmark part.\r\n\r\nThanks. I don't mind 2% if it's fixing internal stuff, but 2% by\r\nrecreating the functionality already provided by the standard library\r\nseems like overkill. The difference between yours and package time\r\nright now is the latter's extra malloc for the byte buffer. Better\r\nescape analysis will fix that without any changes to the code, so I'd\r\nprefer to avoid installing the custom implementation. Just count on an\r\nextra 2% at some point down the road, likely soon (I've done the first\r\nhalf of the necessary changes already).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-04 14:17:45.080691",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-03 19:52:38.624575",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 12:55 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Is the custom format still worth having at all?\r\n>\r\n\r\nAre further Time.Format speed-ups coming?  Even with your latest changes,\r\nFormat still shows up at 3.5%, which feels awkwardly high for an optional\r\nresponse header that some servers don't include.\r\n",
			"disapproval": false,
			"date": "2012-06-03 23:36:50.769715",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-04 14:43:40.542774",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 7:36 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Are further Time.Format speed-ups coming?\r\n\r\nYes, eventually\r\n\r\n> Even with your latest changes,\r\n> Format still shows up at 3.5%, which feels awkwardly high for an optional\r\n> response header that some servers don't include.\r\n\r\nIs saving 2% worth custom code?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-03 23:53:13.510669",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 4:52 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Sun, Jun 3, 2012 at 7:36 PM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > Are further Time.Format speed-ups coming?\r\n>\r\n> Yes, eventually\r\n>\r\n> > Even with your latest changes,\r\n> > Format still shows up at 3.5%, which feels awkwardly high for an optional\r\n> > response header that some servers don't include.\r\n>\r\n> Is saving 2% worth custom code?\r\n>\r\n\r\nI was planning on doing 2+% in 10 places.\r\n\r\nBut I can see that might not fly.\r\n\r\nAlso, the custom code was already written at the time this saved more than\r\n2%.  It doesn't affect the API.\r\n\r\nI'll re-send this CL with just the benchmark part.\r\n",
			"disapproval": false,
			"date": "2012-06-04 00:23:04.798016",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-04 00:24:07.020776",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 4, 2012 at 7:17 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Sun, Jun 3, 2012 at 8:23 PM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > I was planning on doing 2+% in 10 places.\r\n> >\r\n> > But I can see that might not fly.\r\n> >\r\n> > Also, the custom code was already written at the time this saved more\r\n> than\r\n> > 2%.  It doesn't affect the API.\r\n> >\r\n> > I'll re-send this CL with just the benchmark part.\r\n>\r\n> Thanks. I don't mind 2% if it's fixing internal stuff, but 2% by\r\n> recreating the functionality already provided by the standard library\r\n> seems like overkill. The difference between yours and package time\r\n> right now is the latter's extra malloc for the byte buffer. Better\r\n> escape analysis will fix that without any changes to the code, so I'd\r\n> prefer to avoid installing the custom implementation. Just count on an\r\n> extra 2% at some point down the road, likely soon (I've done the first\r\n> half of the necessary changes already).\r\n>\r\n\r\n Cool. Is this benchmark-only CL fine then?\r\n",
			"disapproval": false,
			"date": "2012-06-04 14:32:48.289362",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6260053: net/http: add new Server benchmark",
	"created": "2012-05-29 23:35:01.384281",
	"patchsets": [
		1,
		2001,
		8001,
		7003,
		13003
	],
	"modified": "2012-06-04 15:06:52.005194",
	"closed": true,
	"issue": 6260053
}