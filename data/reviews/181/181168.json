{
	"description": "A rough first attempt at putting scopes into ast.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com, rsc),\n\nI'd like you to review the following change.",
			"disapproval": false,
			"date": "2010-01-07 09:52:16.836796",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "this is by way of illustration of my previous post, BTW.\ni imagine that you'll probably do it some other way,\nbut i'm hoping this might be a help.\n\nit was interesting to see some different\ncode failing as a result of the new redeclaration\nchecks. it might make sense to add a new\nflag to ignore redeclaration errors - so that it's\npossible to gofmt a file with redeclared variables, for\nexample.\n\n\n\n2010/1/7  <rogpeppe@gmail.com>:\n> Reviewers: gri,\n>\n> Message:\n> Hello gri (cc: golang-dev@googlegroups.com, rsc),\n>\n> I'd like you to review the following change.\n>\n>\n> Description:\n> A rough first attempt at putting scopes into ast.\n>\n> Please review this at http://codereview.appspot.com/181168\n>\n> Affected files:\n> \u00a0M src/cmd/gofmt/test.sh\n> \u00a0M src/pkg/exp/parser/parser.go\n> \u00a0M src/pkg/go/ast/ast.go\n> \u00a0M src/pkg/go/ast/scope.go\n> \u00a0M src/pkg/go/parser/interface.go\n> \u00a0M src/pkg/go/parser/parser.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2010-01-07 10:04:54.340312",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Jan 7, 2010 at 2:04 AM, roger peppe <rogpeppe@gmail.com> wrote:\n\n> this is by way of illustration of my previous post, BTW.\n> i imagine that you'll probably do it some other way,\n> but i'm hoping this might be a help.\n>\n\nThanks. This will take a while since I am deep in some hard gofmt issues at\nthe moment.\n\n>\n> it was interesting to see some different\n> code failing as a result of the new redeclaration\n> checks. it might make sense to add a new\n> flag to ignore redeclaration errors - so that it's\n> possible to gofmt a file with redeclared variables, for\n> example.\n>\n\nThere absolutely needs to be a way to run gofmt w/o any checks.\n- gri\n\n>\n>\n>\n> 2010/1/7  <rogpeppe@gmail.com>:\n> > Reviewers: gri,\n> >\n> > Message:\n> > Hello gri (cc: golang-dev@googlegroups.com, rsc),\n> >\n> > I'd like you to review the following change.\n> >\n> >\n> > Description:\n> > A rough first attempt at putting scopes into ast.\n> >\n> > Please review this at http://codereview.appspot.com/181168\n> >\n> > Affected files:\n> >  M src/cmd/gofmt/test.sh\n> >  M src/pkg/exp/parser/parser.go\n> >  M src/pkg/go/ast/ast.go\n> >  M src/pkg/go/ast/scope.go\n> >  M src/pkg/go/parser/interface.go\n> >  M src/pkg/go/parser/parser.go\n> >\n> >\n> >\n>\n",
			"disapproval": false,
			"date": "2010-01-08 23:54:25.662199",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/01/08 23:54:25, gri wrote:\n> There absolutely needs to be a way to run gofmt w/o any checks.\n\ni've updated things now so that the default is to run without\nchecks - the Declarations flag specifies that checks and declarations\nshould be done, and the Parse* functions have a scope argument\nso that parsing can be done in an existing scope.\n\namongst other things, i also changed ParseDir, so instead of bombing out on the first\nbad file, it accumulates the errors from all bad files in the directory,\nwhich seems to me both more predictable and more useful.",
			"disapproval": false,
			"date": "2010-01-11 10:06:38.117864",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "To be frank, I am not very excited about this CL. I do want proper identifier tracking in scopes in the AST (this was always the plan), but I don't like this particular approach. It seems too specific to the one goal of connecting a use with a declaration. Specifically:\n\n- there shouldn't be a need for a Scope and a declarations; they appear to have some overlapping and unclear semantics\n- there should be a separation between a declaration of a language entity (a package, const, var, type, function) which has a declaration position, name, type, and perhaps entity-specific information, and a reference to such an entity (which is now simply an identifier). The reference doesn't need to repeat the name once there is a declaration. I haven't looked carefully enough at the code to see if and how you resolve forward references.\n- lookup should be absolutely trivial after resolving forward refs\n- I am hoping to have a data structure representing types eventually (beyond their AST representation), types have a (method) scope which should be just a scope\n- imports need to be handled more fully (at least I'd like to see that), for much better godoc functionality\n\nIn a very early (and now defunct) prototype for Go I had much of this implemented (in C++). Thus I have some - albeit preconceived - notion of what I'd like to see.\n\nI propose that you put this on hold for the moment and I will come up with an alternative implementation that will permit the godoc functionality you are looking for.\n\nSome superficial comments below.\n\nhttp://codereview.appspot.com/181168/diff/3061/3072\nFile src/pkg/go/ast/scope.go (right):\n\nhttp://codereview.appspot.com/181168/diff/3061/3072#newcode26\nsrc/pkg/go/ast/scope.go:26: // of immutable declarations.\nIt is unclear to me why there needs to be a ScopeView and why a Scope is not a sufficient mechanism.\n\nhttp://codereview.appspot.com/181168/diff/3061/3072#newcode39\nsrc/pkg/go/ast/scope.go:39: type declarations struct {\ndeclarations and Scope seem to have overlapping functionality. For instance, a Scope has a pointer to declarations, and both the Scope and the declarations have a pointer to an outer Scope. Presumably this has to do with mutable and immutable views?\n\nIt should be sufficient to have an Outer link in the Scope.\n\nhttp://codereview.appspot.com/181168/diff/3061/3073\nFile src/pkg/go/parser/interface.go (right):\n\nhttp://codereview.appspot.com/181168/diff/3061/3073#newcode165\nsrc/pkg/go/parser/interface.go:165: func parsePkgFile(dir, file string, mode uint, pkgs map[string]*ast.Package) (err os.Error) {\nThis CL is not up to date. parsePkgFile doesn't exist anymore.\n\nhttp://codereview.appspot.com/181168/diff/3061/3074\nFile src/pkg/go/parser/parser.go (right):\n\nhttp://codereview.appspot.com/181168/diff/3061/3074#newcode311\nsrc/pkg/go/parser/parser.go:311: // methods are declared with receiver name prepended to identifier.\nmethods need to be declared in the scope of the type\n\nhttp://codereview.appspot.com/181168/diff/3061/3074#newcode1891\nsrc/pkg/go/parser/parser.go:1891: if info.values != nil && len(info.values) != len(idents) {\nuntil now we haven't done any semantic checks - this is too ad-hoc",
			"disapproval": false,
			"date": "2010-01-14 00:18:46.873655",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "yes, i see where you're coming from, i think, but\nthere are a few issues.\n\n> - there should be a separation between a declaration of a language\n> entity (a package, const, var, type, function) which has a declaration\n> position, name, type, and perhaps entity-specific information, and a\n> reference to such an entity (which is now simply an identifier).\n\nthe problem is that an identifier that's a reference also has its own\nidentity - for instance, an expression consisting of a single identifier\nshould have an accurate Pos(), otherwise some later code\nmight, for instance, generate an erroneous error message based on the\nposition of the expression. go/parser itself would need changing;\nfor instance this line in parseSimpleStatement\":\n\n\t\tp.Error(x[0].Pos(), \"only one expression allowed\")\n\ni've also been using the Position of the identifier as a way of uniquely\nspecifying an identifier within a source file. to allow \"show definition\nat a click\" functionality within an otherwise agnostic text editor\n(which godef currently does) it's difficult to see a decent alternative.\n\nthe former difficulty might be fixed by removing the Pos()\nmember from the Expr interface, making it evident that\nan identifier in an expression doesn't have its correct position.\n\nthe latter is harder, i think (and i really love having that functionality).\n\n> - there shouldn't be a need for a Scope and a declarations; they appear\n> to have some overlapping and unclear semantics\n\ni did things this way so that the interface to an identifier\nwas consistent whatever scope it was declared in - finding the\ndefinition of an identifier in an expression is always lazy,\nthus allowing forward declarations.\n\nunfortunately this complicated the scope interface, as you see.\n\nit would be nice to resolve identifiers at parse time,\nperhaps similarly to how gc does it, but this approach is made\ndifficult by the fact that\nyou don't know the identifier for an imported package\nuntil you actually import it.\n\nthis means that it's not possible to know in which scope\nto declare an unknown identifier. gc doesn't\nhave a problem here because it always resolves\nimports as they happen, so mkpackage() can clear\nout the imported identifiers only. maybe go/parser should\ndo that too, but it doesn't seem entirely appropriate\nbecause there's no definitive way to find imported packages.\n\nmaybe a suitable hook could be provided.\n\n> - lookup should be absolutely trivial after resolving forward refs\n> - I am hoping to have a data structure representing types eventually\n> (beyond their AST representation), types have a (method) scope which\n> should be just a scope\n\nthe lookup that the lookup package name refers to is the look up\nof method and structure names. which isn't hard, but i\nwouldn't call it absolutely trivial either.\n\nbefore i got your email, i'd decided that the lookup package\ninterface should change to something like this:\n\ntype Type struct {\n    node interface{}        // an AST node defining the type.\n}\n\nfunc TypeOf(id *ast.Ident) Type\n\nfunc (t Type) Member(name string) *ast.Ident\nfunc (t Type) Members() chan *ast.Ident\n\n> I propose that you put this on hold for the moment and I will come up\n> with an alternative implementation that will permit the godoc\n> functionality you are looking for.\n\ni look forward to it.\n\n> http://codereview.appspot.com/181168/diff/3061/3073#newcode165\n> src/pkg/go/parser/interface.go:165: func parsePkgFile(dir, file string,\n> mode uint, pkgs map[string]*ast.Package) (err os.Error) {\n> This CL is not up to date. parsePkgFile doesn't exist anymore.\n\nnote the uncapitalised name - it's a new local function with different\nfunctionality.\n\nthis is one change that's independent and worth keeping,\ni think - it's not great for ParseDir to stop on the first bad file.\n\n> http://codereview.appspot.com/181168/diff/3061/3074#newcode1891\n> src/pkg/go/parser/parser.go:1891: if info.values != nil &&\n> len(info.values) != len(idents) {\n> until now we haven't done any semantic checks - this is too ad-hoc\n\nit was just to avoid an array-bounds error when something like this\nwas encountered.\n\nconst (\n   a = iota\n   b, c\n)\n\nmy parser modifications declare each identifier with\nits appropriate type (and/or defining expression), as the Go syntax\nmakes it easy to do this without an extra pass.\n",
			"disapproval": false,
			"date": "2010-01-14 16:54:57.508867",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Jan 14, 2010 at 8:54 AM, roger peppe <rogpeppe@gmail.com> wrote:\n\n> yes, i see where you're coming from, i think, but\n> there are a few issues.\n\n\nI'm sure there are!\n\n> - there should be a separation between a declaration of a language\n> > entity (a package, const, var, type, function) which has a declaration\n> > position, name, type, and perhaps entity-specific information, and a\n> > reference to such an entity (which is now simply an identifier).\n>\n> the problem is that an identifier that's a reference also has its own\n> identity - for instance, an expression consisting of a single identifier\n> should have an accurate Pos(), otherwise some later code\n> might, for instance, generate an erroneous error message based on the\n> position of the expression. go/parser itself would need changing;\n> for instance this line in parseSimpleStatement\":\n>\n>                p.Error(x[0].Pos(), \"only one expression allowed\")\n>\n> i've also been using the Position of the identifier as a way of uniquely\n> specifying an identifier within a source file. to allow \"show definition\n> at a click\" functionality within an otherwise agnostic text editor\n> (which godef currently does) it's difficult to see a decent alternative.\n>\n> the former difficulty might be fixed by removing the Pos()\n> member from the Expr interface, making it evident that\n> an identifier in an expression doesn't have its correct position.\n>\n> the latter is harder, i think (and i really love having that\n> functionality).\n>\n\nSure. The specific position information for an identifier needs to stay.\n\n>\n> > - there shouldn't be a need for a Scope and a declarations; they appear\n> > to have some overlapping and unclear semantics\n>\n> i did things this way so that the interface to an identifier\n> was consistent whatever scope it was declared in - finding the\n> definition of an identifier in an expression is always lazy,\n> thus allowing forward declarations.\n>\n> unfortunately this complicated the scope interface, as you see.\n>\n> it would be nice to resolve identifiers at parse time,\n> perhaps similarly to how gc does it, but this approach is made\n> difficult by the fact that\n> you don't know the identifier for an imported package\n> until you actually import it.\n>\n\nYes, I am fully aware of that.\n\n>\n> this means that it's not possible to know in which scope\n> to declare an unknown identifier. gc doesn't\n> have a problem here because it always resolves\n> imports as they happen, so mkpackage() can clear\n> out the imported identifiers only. maybe go/parser should\n> do that too, but it doesn't seem entirely appropriate\n> because there's no definitive way to find imported packages.\n>\n\nNote that only package identifiers can be forward declared. The issue does\nexist, but not in full generality. As an aside, in Javascript, identifiers\ncan be forward-declared in any scope (I wrote the V8 scope resolution in my\npast life). Imports are more tricky.\n\n>\n> maybe a suitable hook could be provided.\n>\n> > - lookup should be absolutely trivial after resolving forward refs\n> > - I am hoping to have a data structure representing types eventually\n> > (beyond their AST representation), types have a (method) scope which\n> > should be just a scope\n>\n> the lookup that the lookup package name refers to is the look up\n> of method and structure names. which isn't hard, but i\n> wouldn't call it absolutely trivial either.\n>\n> before i got your email, i'd decided that the lookup package\n> interface should change to something like this:\n>\n> type Type struct {\n>    node interface{}        // an AST node defining the type.\n> }\n>\n> func TypeOf(id *ast.Ident) Type\n>\n> func (t Type) Member(name string) *ast.Ident\n> func (t Type) Members() chan *ast.Ident\n>\n> > I propose that you put this on hold for the moment and I will come up\n> > with an alternative implementation that will permit the godoc\n> > functionality you are looking for.\n>\n> i look forward to it.\n>\n> > http://codereview.appspot.com/181168/diff/3061/3073#newcode165\n> > src/pkg/go/parser/interface.go:165: func parsePkgFile(dir, file string,\n> > mode uint, pkgs map[string]*ast.Package) (err os.Error) {\n> > This CL is not up to date. parsePkgFile doesn't exist anymore.\n>\n> note the uncapitalised name - it's a new local function with different\n> functionality.\n>\n\nOk. Missed that.\n\n>\n> this is one change that's independent and worth keeping,\n> i think - it's not great for ParseDir to stop on the first bad file.\n>\n\nYes, I was thinking about that. Will reconsider.\n\n>\n> > http://codereview.appspot.com/181168/diff/3061/3074#newcode1891\n> > src/pkg/go/parser/parser.go:1891: if info.values != nil &&\n> > len(info.values) != len(idents) {\n> > until now we haven't done any semantic checks - this is too ad-hoc\n>\n> it was just to avoid an array-bounds error when something like this\n> was encountered.\n>\n> const (\n>   a = iota\n>   b, c\n> )\n>\n> my parser modifications declare each identifier with\n> its appropriate type (and/or defining expression), as the Go syntax\n> makes it easy to do this without an extra pass.\n>\n\nI am not saying it doesn't need to be done. But it seemed somewhat isolated\nw/o other semantic checks.\n\nAnyway, I am hoping to make some progress on this in the next couple of days\n- at least on the AST/parser side. I will be on vacation for much of next\nweek, and back after that.\n\nThanks for your input.\n- gri\n",
			"disapproval": false,
			"date": "2010-01-14 17:30:57.508076",
			"approval": false
		}
	],
	"owner_email": "rogpeppe@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rog",
	"subject": "code review 181168: A rough first attempt at putting scopes into ast.",
	"created": "2010-01-07 09:47:41.993683",
	"patchsets": [
		1,
		8,
		21,
		35,
		51,
		3001,
		2018,
		3030,
		3061
	],
	"modified": "2010-01-14 17:30:57.508076",
	"closed": false,
	"issue": 181168
}