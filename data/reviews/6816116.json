{
	"description": "net: support IPv6 scoped addressing zone\n\nThis CL provides IPv6 scoped addressing zone support as defined\nin RFC 4007 for internet protocol family connection setups.\n\nFollwoing types and functions allow a literal IPv6 address with\nzone identifer as theirs parameter.\n\npkg net, func Dial(string, string) (Conn, error)\npkg net, func DialOpt(string, ...DialOption) (Conn, error)\npkg net, func DialTimeout(string, string, time.Duration) (Conn, error)\npkg net, func Listen(string, string) (Listener, error)\npkg net, func ListenPacket(string, string) (PacketConn, error)\npkg net, func ResolveIPAddr(string, string) (*IPAddr, error)\npkg net, func ResolveTCPAddr(string, string) (*TCPAddr, error)\npkg net, func ResolveUDPAddr(string, string) (*UDPAddr, error)\npkg net, type IPAddr struct, Zone string\npkg net, type TCPAddr struct, Zone string\npkg net, type UDPAddr struct, Zone string\n\nAlso follwoing methods return a literal IPv6 address with zone\nidentifier string if possible.\n\npkg net, method (*IPAddr) String() string\npkg net, method (*TCPAddr) String() string\npkg net, method (*UDPAddr) String() string\n\nFixes issue 4234.\nFixes issue 4501.\nUpdate issue 5081.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I understand that we probably have to do this, but I'm not thrilled about it. It just seems to infect everything.\n\nThis is a lot to digest. Could you please split this into two CLs, one that does whatever code refactoring is necessary but does not introduce the %foo syntax, and then a second small CL that does introduce the %foo?\n\nThe IPAddr struct has until now been pure data and also purely just an IP address. Does it really need to have an unexported zoneID stuffed into it? If so it should probably be xported. But why is it an int and not a string? All the examples use strings like \"en0\". Is it just a quick hack to avoid larger internal changes? Better to make the internal changes than to add a new unexported field to an exported struct.\n\nWhy should ParseCIDR throw away the scope identifier?",
			"disapproval": false,
			"date": "2012-11-12 21:02:36.478360",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-12 15:38:04.363600",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 13, 2012 at 6:02 AM,  <rsc@golang.org> wrote:\r\n\r\n> This is a lot to digest. Could you please split this into two CLs, one\r\n> that does whatever code refactoring is necessary but does not introduce\r\n> the %foo syntax, and then a second small CL that does introduce the\r\n> %foo?\r\n\r\nSure, will do.\r\n\r\n> The IPAddr struct has until now been pure data and also purely just an\r\n> IP address. Does it really need to have an unexported zoneID stuffed\r\n> into it? If so it should probably be xported.\r\n\r\nWell, the kernel, BSD or Linux, I mean KAME and USAGI IPv6 stack inside,\r\ndoesn't notice that which IPv6 address in sockets belong to which zone. For\r\nexample, getsockname returns sockaddr_in6 but it doesn't contain zone id.\r\nIf we never mind what Addr/LocalAddr on Conn returns socket address without\r\nzone id, I will export that field.\r\n\r\n> But why is it an int and not a string? All the examples use strings like \"en0\".\r\n\r\nIt might be numeric or interface name for now. Hm, will change to string type.\r\n\r\n> Why should ParseCIDR throw away the scope identifier?\r\n\r\nCan we make an API change to IPNet struct? why not? sure, will do. ;)\r\n",
			"disapproval": false,
			"date": "2012-11-13 00:32:05.080480",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-01 07:13:19.278750",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-30 16:07:05.969120",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sad this has to happen at all but I understand that the internet says so.\n\nMy one requirement is that we never accept and then silently throw away %foo. If it's accepted it has to be returned. If there's no way to return it, it can't be accepted. So ParseIP needs to reject it, but ParseCIDR can accept it. Dial can accept it because if you look at the Conn's RemoteAddr you can get the zone back. And so on.\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip.go\nFile src/pkg/net/ip.go (right):\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip.go#newcode622\nsrc/pkg/net/ip.go:622: ip, _ := parseIPv6(s)\nSince we cannot return the %en0 from this function, I would like to reject it rather than silently discard it. That is, I would like to preserve the old behavior.\n\nCan you pass a flag into parseIPv6 specifying whether a zone is allowed?\nOr maybe, if the only place it's allowed is ParseCIDR, ParseCIDR could take care of the zone itself.\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip_test.go\nFile src/pkg/net/ip_test.go (right):\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip_test.go#newcode35\nsrc/pkg/net/ip_test.go:35: {\"2001:4860:0:2001::68%en0\", IP{0x20, 0x01, 0x48, 0x60, 0, 0, 0x20, 0x01, 0, 0, 0, 0, 0, 0, 0x00, 0x68}},\nI think this shoudl be , nil}",
			"disapproval": false,
			"date": "2012-12-06 04:43:41.023640",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, I get that. Thanks.\r\n\r\nStill, it seems wrong that net.ResolveTCPAddr + net.DialTCP should\r\naccept more or different strings than net.Dial does. I think if the\r\nprotocol-specific address resolvers accept zones, then Dial has to\r\naccept the zone too. Maybe we can remember the zone and stick it back\r\nin the TCPAddr (or IPAddr or UDPAddr) during RemoteAddr and LocalAddr?\r\n\r\nAnother option is to just say that there are no zones at all in\r\npackage net and make go.net/ipv6 have its own scoped everything\r\nroutines. I don't know how tenable that is. I suspect it is not good\r\nenough.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:18:59.253570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Well, I'm thinking of another option that go.net/ipv6 package\r\n> includes own Dial, Listen functions.\r\n>\r\n>   ipv6.Dial(\"both w/ or w/o ipv6 zone\")\r\n>   ipv6.Listen(\"both w/ or w/o ipv6 zone\")\r\n>   net.Dial(\"ip6\", \"non-scoped addr only\")\r\n>   net.Listen(\"ip6\", \"non-scoped addr only\")\r\n>\r\n> Even in this case, following functions and structs would accept IPv6\r\n> scoped address.\r\n>\r\n>   net.IPNet\r\n>   net.{TCP,UDP,IP}Addr\r\n>   net.Resolve{TCP,UDP,IP}Addr\r\n>   net.ParseCIDR\r\n>   net.Dial{TCP,UDP,IP}\r\n>   net.Listen{TCP,UDP,IP}\r\n>\r\n> Does this make sense to you?\r\n\r\nWhy does net.DialTCP accept a scoped addr but net.Dial would not?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:26:14.459890",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 6, 2012 at 3:02 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Still, it seems wrong that net.ResolveTCPAddr + net.DialTCP should\r\n> accept more or different strings than net.Dial does. I think if the\r\n> protocol-specific address resolvers accept zones, then Dial has to\r\n> accept the zone too. Maybe we can remember the zone and stick it back\r\n> in the TCPAddr (or IPAddr or UDPAddr) during RemoteAddr and LocalAddr?\r\n\r\nuh-oh, right.\r\n\r\n> Another option is to just say that there are no zones at all in\r\n> package net and make go.net/ipv6 have its own scoped everything\r\n> routines. I don't know how tenable that is. I suspect it is not good\r\n> enough.\r\n\r\nokay, thanks.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:27:01.408720",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 6, 2012 at 1:43 PM,  <rsc@golang.org> wrote:\r\n\r\n> I'm sad this has to happen at all but I understand that the internet\r\n> says so.\r\n\r\nWell, I'm thinking of another option that go.net/ipv6 package\r\nincludes own Dial, Listen functions.\r\n\r\n  ipv6.Dial(\"both w/ or w/o ipv6 zone\")\r\n  ipv6.Listen(\"both w/ or w/o ipv6 zone\")\r\n  net.Dial(\"ip6\", \"non-scoped addr only\")\r\n  net.Listen(\"ip6\", \"non-scoped addr only\")\r\n\r\nEven in this case, following functions and structs would accept IPv6\r\nscoped address.\r\n\r\n  net.IPNet\r\n  net.{TCP,UDP,IP}Addr\r\n  net.Resolve{TCP,UDP,IP}Addr\r\n  net.ParseCIDR\r\n  net.Dial{TCP,UDP,IP}\r\n  net.Listen{TCP,UDP,IP}\r\n\r\nDoes this make sense to you?\r\n\r\n> My one requirement is that we never accept and then silently throw away\r\n> %foo. If it's accepted it has to be returned. If there's no way to\r\n> return it, it can't be accepted. So ParseIP needs to reject it, but\r\n> ParseCIDR can accept it.\r\n\r\nYup, crystal clear and helpful for designing API.\r\n\r\n> Dial can accept it because if you look at the\r\n> Conn's RemoteAddr you can get the zone back. And so on.\r\n\r\nUnfortunately both Local/RemoteAddr on Conn/PacketConn never\r\nreturn the address with IPv6 zone at this moment. The kernel returns\r\nIPv6 scoped address only if the source of address belongs to IP control\r\nplane stuff, such as routing table.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:30:53.026200",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Why does net.DialTCP accept a scoped addr but net.Dial would not?\r\n\r\nBecause net.DialTCP doesn't care about IPv6 address textual\r\nrepresentation but Dial does.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:29:42.634950",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixed suggestions but waiting for a consensus.\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip.go\nFile src/pkg/net/ip.go (right):\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip.go#newcode622\nsrc/pkg/net/ip.go:622: ip, _ := parseIPv6(s)\nOn 2012/12/06 04:43:41, rsc wrote:\n> Since we cannot return the %en0 from this function, I would like to reject it\n> rather than silently discard it. That is, I would like to preserve the old\n> behavior.\n> \n> Can you pass a flag into parseIPv6 specifying whether a zone is allowed?\n> Or maybe, if the only place it's allowed is ParseCIDR, ParseCIDR could take care\n> of the zone itself.\n\nDone.\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip_test.go\nFile src/pkg/net/ip_test.go (right):\n\nhttps://codereview.appspot.com/6816116/diff/10068/src/pkg/net/ip_test.go#newcode35\nsrc/pkg/net/ip_test.go:35: {\"2001:4860:0:2001::68%en0\", IP{0x20, 0x01, 0x48, 0x60, 0, 0, 0x20, 0x01, 0, 0, 0, 0, 0, 0, 0x00, 0x68}},\nOn 2012/12/06 04:43:41, rsc wrote:\n> I think this shoudl be , nil}\n\nDone.",
			"disapproval": false,
			"date": "2012-12-11 03:28:18.013300",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-01-26 03:11:52.979840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The code seems okay. I'm still worried about whether we should do this at all though. It seems to infect everything.",
			"disapproval": false,
			"date": "2013-01-30 17:37:18.207250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please see my recent comments on golang.org/issue/4501. We should move ahead with this, and promptly. I agree with most of what is in this CL. The only part I don't understand is how IPNet should change. Perhaps we can leave the IPNet changes out of this CL and do them separately.\n\nIn addition to the changes listed here, you will need to add DialOpt. I imagine that by running hg sync and refreshing this CL, support in DialOpt would fall out naturally.\n\nThanks very much.",
			"disapproval": false,
			"date": "2013-03-15 04:38:49.796860",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 04:38:49, rsc wrote:\n\n> Please see my recent comments on golang.org/issue/4501.\n> We should move ahead with this, and promptly.\n\nyup, will look tonight.",
			"disapproval": false,
			"date": "2013-03-15 04:46:43.416490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How close is this? I'd like to get this in and then declare Zone done for\r\nGo 1.1.\r\n(That is, we'll omit it from IPNet for Go 1.1.)\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-21 17:49:38.308190",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-22 11:53:53.767230",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the delay, PTAL.\n\n> I'd like to get this in and then declare Zone done for Go 1.1.\n> (That is, we'll omit it from IPNet for Go 1.1.)\n\nFiled as Issue 5081.",
			"disapproval": false,
			"date": "2013-03-22 11:58:02.076520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThis fixes 4501.\nThanks very much.\n\nhttps://codereview.appspot.com/6816116/diff/106001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/6816116/diff/106001/src/pkg/net/dial.go#newcode192\nsrc/pkg/net/dial.go:192: // For Unix networks, the addr must be a filesystem pathname.\nnot enough spaces, and can drop name: file system path.",
			"disapproval": false,
			"date": "2013-03-22 14:24:53.129840",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=07ed29a4f9f5 ***\n\nnet: support IPv6 scoped addressing zone\n\nThis CL provides IPv6 scoped addressing zone support as defined\nin RFC 4007 for internet protocol family connection setups.\n\nFollwoing types and functions allow a literal IPv6 address with\nzone identifer as theirs parameter.\n\npkg net, func Dial(string, string) (Conn, error)\npkg net, func DialOpt(string, ...DialOption) (Conn, error)\npkg net, func DialTimeout(string, string, time.Duration) (Conn, error)\npkg net, func Listen(string, string) (Listener, error)\npkg net, func ListenPacket(string, string) (PacketConn, error)\npkg net, func ResolveIPAddr(string, string) (*IPAddr, error)\npkg net, func ResolveTCPAddr(string, string) (*TCPAddr, error)\npkg net, func ResolveUDPAddr(string, string) (*UDPAddr, error)\npkg net, type IPAddr struct, Zone string\npkg net, type TCPAddr struct, Zone string\npkg net, type UDPAddr struct, Zone string\n\nAlso follwoing methods return a literal IPv6 address with zone\nidentifier string if possible.\n\npkg net, method (*IPAddr) String() string\npkg net, method (*TCPAddr) String() string\npkg net, method (*UDPAddr) String() string\n\nFixes issue 4234.\nFixes issue 4501.\nUpdate issue 5081.\n\nR=rsc, iant\nCC=golang-dev\nhttps://codereview.appspot.com/6816116\n\nhttps://codereview.appspot.com/6816116/diff/106001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/6816116/diff/106001/src/pkg/net/dial.go#newcode192\nsrc/pkg/net/dial.go:192: // For Unix networks, the addr must be a filesystem pathname.\nOn 2013/03/22 14:24:53, rsc wrote:\n> not enough spaces, and can drop name: file system path.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-23 00:57:48.098330",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/23 00:57:48, mikio wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=07ed29a4f9f5 ***\n> net: support IPv6 scoped addressing zone\n\nA recent change to net seems to have broken tests with multiple -cpu values.\n\n--- FAIL: TestResolveIPAddr-2 (0.00 seconds)\nipraw_test.go:66: got &net.IPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Zone:\"\"}; expected &net.IPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Zone:\"lo\"}\n\n--- FAIL: TestResolveTCPAddr-2 (0.00 seconds)\ntcp_test.go:198: got &net.TCPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:3, Zone:\"\"}; expected &net.TCPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:3, Zone:\"lo\"}\n\n--- FAIL: TestResolveUDPAddr-2 (0.00 seconds)\nudp_test.go:62: got &net.UDPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:3, Zone:\"\"}; expected &net.UDPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:3, Zone:\"lo\"}\n\nGuessing it might be this one.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-03-25 07:28:50.089190",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Albert,\r\n\r\nOn Mon, Mar 25, 2013 at 4:28 PM,  <fullung@gmail.com> wrote:\r\n\r\n> A recent change to net seems to have broken tests with multiple -cpu\r\n> values.\r\n>\r\n> --- FAIL: TestResolveIPAddr-2 (0.00 seconds)\r\n> ipraw_test.go:66: got &net.IPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0,\r\n> 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Zone:\"\"};\r\n> expected &net.IPAddr{IP:net.IP{0xfe, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\r\n> 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Zone:\"lo\"}\r\n\r\nI failed to repro it but can you try https://codereview.appspot.com/8011043/ ?\r\nThanks.\r\n",
			"disapproval": false,
			"date": "2013-03-25 09:26:46.927320",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6816116: net: support IPv6 scoped addressing zone",
	"created": "2012-11-12 15:36:18.643590",
	"patchsets": [
		2001,
		3020,
		9001,
		16001,
		17040,
		10068,
		97012,
		106001,
		110001
	],
	"modified": "2013-03-25 09:26:46.927320",
	"closed": true,
	"issue": 6816116
}