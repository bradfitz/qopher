{
	"description": "Provide advice on using Mercurial Queues in conjunction with codreview",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-05-21 01:00:13.518515",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1238044/diff/2001/3001\nFile doc/contribute.html (right):\n\nhttp://codereview.appspot.com/1238044/diff/2001/3001#newcode106\ndoc/contribute.html:106: The Mercurial Queues  (<strong>MQ</strong>) extension provides a mechanism for\nwhy all the <strong>?\n\nhttp://codereview.appspot.com/1238044/diff/2001/3001#newcode110\ndoc/contribute.html:110: If you'r not using MQ these snippets can be safely ignored.\nspell check please.\nyou're\n\nhttp://codereview.appspot.com/1238044/diff/2001/3001#newcode133\ndoc/contribute.html:133: Pulling, pushing, updating and committing while MQ patches\nthe tone of this text is off.  also i  think the MQ stuff should simply be a different section; maybe even a different page, if it's necessary at all. do mq users really need to be handheld?\n\nhttp://codereview.appspot.com/1238044/diff/2001/3001#newcode137\ndoc/contribute.html:137: <code>$GOROOT/.hg/hgrc</code> file in order to prevent you accidently performing\naccidentally\n\nhttp://codereview.appspot.com/1238044/diff/2001/3001#newcode210\ndoc/contribute.html:210: <strong>[MQ:</strong> You should have all of the MQ patches relavent to your\nrelevant",
			"disapproval": false,
			"date": "2010-05-21 18:29:24.429626",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for writing all this down.\nPerhaps it makes sense as a separate section\nor even a separate page instead of being interlaced\nwith the rest of the page.  I think I'd lean toward\na separate page, linked from a rewrite of the\n\"Mercurial Power Users\" line.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-05-21 19:37:39.143437",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 22/05/10 04:29, r@golang.org wrote:\n>\n> http://codereview.appspot.com/1238044/diff/2001/3001\n> File doc/contribute.html (right):\n>\n> http://codereview.appspot.com/1238044/diff/2001/3001#newcode106\n> doc/contribute.html:106: The Mercurial Queues (<strong>MQ</strong>)\n> extension provides a mechanism for\n> why all the <strong>?\n\nJust trying to make it clear that the bits within the strong bits only \napply if your using MQ.\n\n>\n> http://codereview.appspot.com/1238044/diff/2001/3001#newcode110\n> doc/contribute.html:110: If you'r not using MQ these snippets can be\n> safely ignored.\n> spell check please.\n> you're\n\nYes, I should have turned spell checking on in my editor.\n\n>\n> http://codereview.appspot.com/1238044/diff/2001/3001#newcode133\n> doc/contribute.html:133: Pulling, pushing, updating and committing while\n> MQ patches\n> the tone of this text is off. also i think the MQ stuff should simply\n> be a different section; maybe even a different page, if it's necessary\n> at all. do mq users really need to be handheld?\n\nExperienced ones, probably not.  Newcomers, probably yes.\n\nI guess I was influenced by the (implied) request for instructions on \nhow to use MQ with codereview in the existing document.  I interpreted \nthis to mean the advice should be targeted at novices.\n\n>\n> http://codereview.appspot.com/1238044/diff/2001/3001#newcode137\n> doc/contribute.html:137: <code>$GOROOT/.hg/hgrc</code> file in order to\n> prevent you accidently performing\n> accidentally\n\nYes, see above.\n\n>\n> http://codereview.appspot.com/1238044/diff/2001/3001#newcode210\n> doc/contribute.html:210: <strong>[MQ:</strong> You should have all of\n> the MQ patches relavent to your\n> relevant\n>\n> http://codereview.appspot.com/1238044/show\n\nDitto.\n\nMore in reply to your other mail.\n\nPeter\n",
			"disapproval": false,
			"date": "2010-05-21 23:46:56.516460",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 22/05/10 05:37, Russ Cox wrote:\n> Thanks for writing all this down.\n> Perhaps it makes sense as a separate section\n> or even a separate page instead of being interlaced\n> with the rest of the page.\n\nOK.  I'm not wedded to my actual words or the way I interspersed them in \nthe document.  The main thing is the meaning of the advice.\n\n>  I think I'd lean toward\n> a separate page, linked from a rewrite of the\n> \"Mercurial Power Users\" line.\n\nOK.  I'll take that tack but I'll target the advice a Mercurial novices \nas experienced users can probably figure it out for themselves (I did).\n\nBTW I'm the author of the gwsmhg <http://gwsmhg.sourceforge.net/> PyGTK \nGUI wrapper for Mercurial and I'm looking at adding support for \ncodereview to it (to make things easier for myself if nobody else).  My \ncurrent thinking is to make this part of gwsmhg's MQ page and I've just \nmodified that page to support the use of MQ guards as I figure they're a \nvery useful mechanism when working on more than one change set in a \nsingle repository.  The next step will be codereview specific buttons \nand menus.\n\nThe main problem I'll face doing this is testing.  Is there a way I can \nset up a dummy code review site to test against?  I figure that I \nwouldn't be popular if I bombarded your site with test transactions as \nthere would be a lot of them.\n\nPeter\n",
			"disapproval": false,
			"date": "2010-05-22 00:06:11.502031",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> The main problem I'll face doing this is testing. \u00a0Is there a way I can set\n> up a dummy code review site to test against? \u00a0I figure that I wouldn't be\n> popular if I bombarded your site with test transactions as there would be a\n> lot of them.\n\nHow many is a lot?\n\ncodereview.appspot.com runs the code from http://code.google.com/p/rietveld.\nIf you download the App Engine SDK you can run a local copy.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-05-22 00:34:58.954234",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 22/05/10 10:34, Russ Cox wrote:\n>> The main problem I'll face doing this is testing.  Is there a way I can set\n>> up a dummy code review site to test against?  I figure that I wouldn't be\n>> popular if I bombarded your site with test transactions as there would be a\n>> lot of them.\n>\n> How many is a lot?\n\nWith GUIs I tend to get in a (code; test)* loop where each iteration can \nbe quite short so a lot is a lot. :-)\n\n>\n> codereview.appspot.com runs the code from http://code.google.com/p/rietveld.\n> If you download the App Engine SDK you can run a local copy.\n\nI was hoping that it would be that easy.\n\nThanks\nPeter\n\n",
			"disapproval": false,
			"date": "2010-05-22 00:57:04.620086",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, r (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-05-26 01:38:15.850360",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "If these actions are OK let me know and I'll send a revised patch.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001\nFile doc/codereview_with_mq.html (right):\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode27\ndoc/codereview_with_mq.html:27: hgext.mq=\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> This can just be\n> mq = \n> \n> The hgext. prefix is deprecated now.\n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode31\ndoc/codereview_with_mq.html:31: In addition, since pulling, pushing, updating and committing while <code>mq</code> patches\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> Shorter:\n> \n> Since pulling, pushing, updating and committing while <code>mq</code> patches\n> are applied can mangle your repository (or a remote one), add these lines to\n> prevent that case:\n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode45\ndoc/codereview_with_mq.html:45: preupdate.mq-no-update = ! hg qtop > /dev/null 2>&1\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> Will this catch hg sync?\n\nThe prechangegroup hook aborts \"hg sync\" according to my tests.\n\n> Should we edit hg sync to catch it instead?\n> \n\nShouldn't be necessary.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode80\ndoc/codereview_with_mq.html:80: for p in `hg qapplied`; do hg qguard $p +99999; done\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> use more readable $(hg qapplied)\n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode92\ndoc/codereview_with_mq.html:92: to the Go project</a> it is necessary to synchronize your repository, using\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> s/ it is/, it is/\n> s/, using/ using/\n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode94\ndoc/codereview_with_mq.html:94: As <code>hg sync</code> runs <code>hg pull -u</code>\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> s/As/Because/\n> s/$/,/\n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode95\ndoc/codereview_with_mq.html:95: it should not be run <code>hg sync</code> while <code>mq</code> patches are\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> s/it should not be run/you should not run/\n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode96\ndoc/codereview_with_mq.html:96: applied as it could lead to your repository becoming corrupted so you should\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> applied.  Instead, pop all your patches...\n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode102\ndoc/codereview_with_mq.html:102: Because the main Go repository is maintained as a single line of reviewed changes and you\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> might be able to shorten the entire paragraph to\n> \n> When reapplying the patches, you may need to resolve conflicts a described in\n> <a href...\n> \n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14002\nFile doc/contribute.html (right):\n\nhttp://codereview.appspot.com/1238044/diff/13001/14002#newcode106\ndoc/contribute.html:106: To allow Go contributors to take advantage of\nOn 2010/06/01 21:17:49, rsc1 wrote:\n> I'd like to keep the power users caveat.  It's super easy to screw up with mq.\n\nBut not that hard to fix :-) thanks to distributed nature of hg.\n\n> \n> Mercurial power users: if you prefer to use the Mercurial Queues extension,\n> see ...\n> \n\nDone.",
			"disapproval": false,
			"date": "2010-06-02 00:13:20.249747",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks pretty good; thanks for writing all this down\n(and getting it working!).\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001\nFile doc/codereview_with_mq.html (right):\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode27\ndoc/codereview_with_mq.html:27: hgext.mq=\nThis can just be\nmq = \n\nThe hgext. prefix is deprecated now.\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode31\ndoc/codereview_with_mq.html:31: In addition, since pulling, pushing, updating and committing while <code>mq</code> patches\nShorter:\n\nSince pulling, pushing, updating and committing while <code>mq</code> patches are applied can mangle your repository (or a remote one), add these lines to prevent that case:\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode45\ndoc/codereview_with_mq.html:45: preupdate.mq-no-update = ! hg qtop > /dev/null 2>&1\nWill this catch hg sync?\nShould we edit hg sync to catch it instead?\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode80\ndoc/codereview_with_mq.html:80: for p in `hg qapplied`; do hg qguard $p +99999; done\nuse more readable $(hg qapplied)\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode92\ndoc/codereview_with_mq.html:92: to the Go project</a> it is necessary to synchronize your repository, using\ns/ it is/, it is/\ns/, using/ using/\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode94\ndoc/codereview_with_mq.html:94: As <code>hg sync</code> runs <code>hg pull -u</code>\ns/As/Because/\ns/$/,/\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode95\ndoc/codereview_with_mq.html:95: it should not be run <code>hg sync</code> while <code>mq</code> patches are\ns/it should not be run/you should not run/\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode96\ndoc/codereview_with_mq.html:96: applied as it could lead to your repository becoming corrupted so you should\napplied.  Instead, pop all your patches...\n\nhttp://codereview.appspot.com/1238044/diff/13001/14001#newcode102\ndoc/codereview_with_mq.html:102: Because the main Go repository is maintained as a single line of reviewed changes and you\nmight be able to shorten the entire paragraph to\n\nWhen reapplying the patches, you may need to resolve conflicts a described in\n<a href...\n\nhttp://codereview.appspot.com/1238044/diff/13001/14002\nFile doc/contribute.html (right):\n\nhttp://codereview.appspot.com/1238044/diff/13001/14002#newcode106\ndoc/contribute.html:106: To allow Go contributors to take advantage of\nI'd like to keep the power users caveat.  It's super easy to screw up with mq.\n\nMercurial power users: if you prefer to use the Mercurial Queues extension,\nsee ...",
			"disapproval": false,
			"date": "2010-06-01 21:17:49.246703",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I can't see if they're OK unless you send a revised patch.  ;-)\n\nOn Tue, Jun 1, 2010 at 17:13,  <pwil3058@gmail.com> wrote:\n> If these actions are OK let me know and I'll send a revised patch.\n>\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001\n> File doc/codereview_with_mq.html (right):\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode27\n> doc/codereview_with_mq.html:27: hgext.mq=\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> This can just be\n>> mq =\n>\n>> The hgext. prefix is deprecated now.\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode31\n> doc/codereview_with_mq.html:31: In addition, since pulling, pushing,\n> updating and committing while <code>mq</code> patches\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> Shorter:\n>\n>> Since pulling, pushing, updating and committing while <code>mq</code>\n>\n> patches\n>>\n>> are applied can mangle your repository (or a remote one), add these\n>\n> lines to\n>>\n>> prevent that case:\n>\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode45\n> doc/codereview_with_mq.html:45: preupdate.mq-no-update = ! hg qtop >\n> /dev/null 2>&1\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> Will this catch hg sync?\n>\n> The prechangegroup hook aborts \"hg sync\" according to my tests.\n>\n>> Should we edit hg sync to catch it instead?\n>\n>\n> Shouldn't be necessary.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode80\n> doc/codereview_with_mq.html:80: for p in `hg qapplied`; do hg qguard $p\n> +99999; done\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> use more readable $(hg qapplied)\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode92\n> doc/codereview_with_mq.html:92: to the Go project</a> it is necessary to\n> synchronize your repository, using\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> s/ it is/, it is/\n>> s/, using/ using/\n>\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode94\n> doc/codereview_with_mq.html:94: As <code>hg sync</code> runs <code>hg\n> pull -u</code>\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> s/As/Because/\n>> s/$/,/\n>\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode95\n> doc/codereview_with_mq.html:95: it should not be run <code>hg\n> sync</code> while <code>mq</code> patches are\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> s/it should not be run/you should not run/\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode96\n> doc/codereview_with_mq.html:96: applied as it could lead to your\n> repository becoming corrupted so you should\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> applied. \u00a0Instead, pop all your patches...\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14001#newcode102\n> doc/codereview_with_mq.html:102: Because the main Go repository is\n> maintained as a single line of reviewed changes and you\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> might be able to shorten the entire paragraph to\n>\n>> When reapplying the patches, you may need to resolve conflicts a\n>\n> described in\n>>\n>> <a href...\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/diff/13001/14002\n> File doc/contribute.html (right):\n>\n> http://codereview.appspot.com/1238044/diff/13001/14002#newcode106\n> doc/contribute.html:106: To allow Go contributors to take advantage of\n> On 2010/06/01 21:17:49, rsc1 wrote:\n>>\n>> I'd like to keep the power users caveat. \u00a0It's super easy to screw up\n>\n> with mq.\n>\n> But not that hard to fix :-) thanks to distributed nature of hg.\n>\n>\n>> Mercurial power users: if you prefer to use the Mercurial Queues\n>\n> extension,\n>>\n>> see ...\n>\n>\n> Done.\n>\n> http://codereview.appspot.com/1238044/show\n>\n",
			"disapproval": false,
			"date": "2010-06-02 02:19:32.139454",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, r (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-02 04:24:59.840873",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "minor comments only. it's pretty good, if a bit repetitive, which is not a bad thing.\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001\nFile doc/codereview_with_mq.html (right):\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode21\ndoc/codereview_with_mq.html:21: To enable the <code>mq</code> edit either <code>$HOME/.hgrc</code> (to enable it\n\"enable the mq edit\" doesn't sound like english.  can you say this in a non-jargony way?  maybe \"enable Mercurial Queues\"?\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode32\ndoc/codereview_with_mq.html:32: are applied can mangle your repository (or a remote one), add these lines to\ndrop the parens. also s/mangle/damage/\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode43\ndoc/codereview_with_mq.html:43: preupdate.mq-no-update = ! hg qtop > /dev/null 2>&1\nwhy isn't there a line for committing?\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode49\ndoc/codereview_with_mq.html:49: The entire checked-out tree is writeable and you can use <code>mq</code>,\ns/writeable/writable/\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode52\ndoc/codereview_with_mq.html:52: of <a href=\"http://hgbook.red-bean.com/read/\">Mercurial: The Definitive Guide</a>,\nthe first time it's fine to use the full title. second and subsequent, a linkless \"The Guide\" will do.",
			"disapproval": false,
			"date": "2010-06-02 04:31:55.916343",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, r (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-02 05:33:32.387374",
			"approval": false
		},
		{
			"sender": "pwil3058@gmail.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1238044/diff/22001/23001\nFile doc/codereview_with_mq.html (right):\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode21\ndoc/codereview_with_mq.html:21: To enable the <code>mq</code> edit either <code>$HOME/.hgrc</code> (to enable it\nOn 2010/06/02 04:31:56, r wrote:\n> \"enable the mq edit\" doesn't sound like english.  can you say this in a\n> non-jargony way?  maybe \"enable Mercurial Queues\"?\n\nHow about I just remove the \"the\" in front of mq?  That's what's making it into gibberish.\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode32\ndoc/codereview_with_mq.html:32: are applied can mangle your repository (or a remote one), add these lines to\nOn 2010/06/02 04:31:56, r wrote:\n> drop the parens. also s/mangle/damage/\n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode43\ndoc/codereview_with_mq.html:43: preupdate.mq-no-update = ! hg qtop > /dev/null 2>&1\nOn 2010/06/02 04:31:56, r wrote:\n> why isn't there a line for committing?\n\nGood question.  It shouldn't be necessary as codereview disables commit.\n\nI don't have one in my normal hgrc whcih probably means commit hooks get in the way of qrefresh and qput which are commits under another name.\n\nI never have a problem because my GUI disables all the \"commit\" buttons whenever MQ patches are applied and I always use the GUI for hg stuff (because I'm too lazy to type).\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode49\ndoc/codereview_with_mq.html:49: The entire checked-out tree is writeable and you can use <code>mq</code>,\nOn 2010/06/02 04:31:56, r wrote:\n> s/writeable/writable/\n\nDone.\n\nhttp://codereview.appspot.com/1238044/diff/22001/23001#newcode52\ndoc/codereview_with_mq.html:52: of <a href=\"http://hgbook.red-bean.com/read/\">Mercurial: The Definitive Guide</a>,\nOn 2010/06/02 04:31:56, r wrote:\n> the first time it's fine to use the full title. second and subsequent, a\n> linkless \"The Guide\" will do.\n\nDone.",
			"disapproval": false,
			"date": "2010-06-02 05:37:32.341284",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2010-06-03 00:04:09.468790",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pwil3058@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=433cbad2f237 ***\n\ndoc: codereview + Mercurial Queues\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/1238044\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2010-06-03 00:11:55.458148",
			"approval": false
		}
	],
	"owner_email": "pwil3058@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "pwil3058",
	"subject": "code review 1238044: Provide advice on using Mercurial Queues in conjunction...",
	"created": "2010-05-21 00:57:37.649529",
	"patchsets": [
		1,
		2001,
		13001,
		22001,
		28001
	],
	"modified": "2010-06-03 00:11:55.458148",
	"closed": false,
	"issue": 1238044
}