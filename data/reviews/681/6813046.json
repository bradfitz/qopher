{
	"description": "net: use WriteNB on non-blocking sockets\n\nUpdate issue 3412.\n\nRequires: https://codereview.appspot.com/7126043/",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"mikioh.mikioh@gmail.com",
		"remyoudompheng@gmail.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com",
		"r@golang.org",
		"nightlyone@googlemail.com",
		"iant@golang.org",
		"dvyukov@google.com",
		"sebastien.paolacci@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "for such a small change, i think you can just manually generate\nzsyscall_GOOS_GOARCH.go files (just pay attention to the relative\norder).\n\nhttps://codereview.appspot.com/6813046/diff/4001/src/pkg/syscall/syscall_darwin.go\nFile src/pkg/syscall/syscall_darwin.go (right):\n\nhttps://codereview.appspot.com/6813046/diff/4001/src/pkg/syscall/syscall_darwin.go#newcode111\nsrc/pkg/syscall/syscall_darwin.go:111: func WriteNB(fd int, p []byte) (n int, err error) { return Write(fd, p) }\nplease provide docs for WriteNB.\nand stress the fact that it can only be used for non-blocking fds.",
			"disapproval": false,
			"date": "2012-10-28 16:56:46.386380",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can't find the numbers in that thread.  Or rather, there were a bunch of numbers, but I can't find which pair was before and after this CL.\n\nYou can't just run ab against localhost to measure this? I don't see why you'd need huge hardware.",
			"disapproval": false,
			"date": "2012-10-29 13:32:31.958270",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Could you elaborate?\r\n\r\nHe's not changing the semantics or implementation of syscall.Write.\r\n\r\nHe's just adding a new syscall function (\"WriteNB\") that calls the same\r\nsystem call but tells the go runtime that the file descriptor is already in\r\nnon-blocking mode, so scheduling isn't necessary.\r\n\r\nThis is a performance optimization only (and for all network operations,\r\nnot just http!), the same as the non-blocking system calls we already have\r\nSYSNB annotated for.\r\n\r\nI don't understand this particular objection.\r\n\r\n\r\nOn Sun, Oct 28, 2012 at 6:14 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> NOT LGTM\r\n>\r\n> the semantic change is disturbing. networks are used for things other\r\n> than http \"hello world\" benchmarks.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-28 17:20:17.448590",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would be happy to add this in a follow-up CL.\r\n\r\nIn the profiles that others have posted Write (and Accept to a smaller\r\ndegree) have been the biggest callers of syscall.Syscall, so I'm\r\ntackling those first.\r\n\r\nMy main concern is having to ask others to perform load tests as I\r\ndon't have a large enough test harness to generate a saturating load.\r\n\r\nOn Mon, Oct 29, 2012 at 6:42 AM,  <remyoudompheng@gmail.com> wrote:\r\n> I still don't see the corresponding ReadNB\r\n>\r\n> http://codereview.appspot.com/6813046/\r\n",
			"disapproval": false,
			"date": "2012-10-28 22:09:50.792980",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I still don't see the corresponding ReadNB",
			"disapproval": false,
			"date": "2012-10-28 19:42:05.195770",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-28 16:44:53.573560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Excellent, thanks for testing.\r\nOn 30 Oct 2012 07:58, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> LGTM\r\n>\r\n> it passes on freebsd/amd64.\r\n>\r\n> https://codereview.appspot.**com/6813046/<https://codereview.appspot.com/6813046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-30 07:05:13.671490",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Cross compilation tests pass on all OSs, but I don't have access to darwin for *bsd builders at the moment to test this change. \n\nAssistance from those with darwin or *bsd machines is much appreciated.",
			"disapproval": false,
			"date": "2012-10-28 16:46:28.148790",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, remyoudompheng@gmail.com, bradfitz@golang.org, minux.ma@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-28 17:46:37.276970",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6813046/diff/8020/src/pkg/syscall/syscall_unix.go\nFile src/pkg/syscall/syscall_unix.go (right):\n\nhttps://codereview.appspot.com/6813046/diff/8020/src/pkg/syscall/syscall_unix.go#newcode146\nsrc/pkg/syscall/syscall_unix.go:146: // WriteNB should only be called when it is known to not block the\nThis comment doesn't read quite right to me.  How about something more like:\n\nWriteNB does a write system call to a descriptor that has been set to non-blocking mode.  Do not call this with a descriptor in blocking mode.  Blocking mode is the default for all descriptors other than sockets opened by the net package.",
			"disapproval": false,
			"date": "2012-10-29 16:11:44.163530",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Oct 29, 2012 at 5:13 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> > WriteNB does a write system call to a descriptor that has been set to\r\n> > non-blocking mode.  Do not call this with a descriptor in blocking mode.\r\n> >  Blocking mode is the default for all descriptors other than sockets\r\n> > opened by the net package.\r\n>\r\n> SGTM, thank you.\r\n>\r\n> @bradfitz. I can do some basic testing with siege but I am concerned\r\n> my laptop doesn't have enough horsepower to drive siege and the server\r\n> process without interference. Hopefully some of the OPs will be able\r\n> to contribute test data from their machines.\r\n>\r\n\r\nFortunately it's very easy for us to A/B test later, ~1 line change.\r\n",
			"disapproval": false,
			"date": "2012-10-29 16:15:03.176420",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but you might want to wait for others.\r\n\r\nI don't see how this could break darwin.  (which, hah, means it probably\r\nwill)\r\n\r\nIt'd be nice if you could reproduce some benchmark numbers yourself and\r\ninclude them in the CL description, with repro instructions, or a pointer\r\nto them.  (perhaps in the bug if it's long).  As is it reads like hearsay.\r\n\r\n\r\nOn Sun, Oct 28, 2012 at 5:46 PM, <dave@cheney.net> wrote:\r\n\r\n> Cross compilation tests pass on all OSs, but I don't have access to\r\n> darwin for *bsd builders at the moment to test this change.\r\n>\r\n> Assistance from those with darwin or *bsd machines is much appreciated.\r\n>\r\n> http://codereview.appspot.com/**6813046/<http://codereview.appspot.com/6813046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-28 16:54:41.885550",
			"approval": true
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just verified it by looking at linux kernel code. Writing to non-blocking \r\nfile descriptors might trigger waiting for things \r\nlike allocating some control structures on system global heavy OOM \r\nconditions.\r\nThe you cannot continue anyway and adding more threads will fail due to \r\nOOM, too.\r\nBut it will not wait on socket memory, but give EAGAIN there, as expected.\r\n\r\nOn Sunday, October 28, 2012 6:20:19 PM UTC+1, Brad Fitzpatrick wrote:\r\n>\r\n> Could you elaborate?\r\n>\r\n> He's not changing the semantics or implementation of syscall.Write.\r\n>\r\n> He's just adding a new syscall function (\"WriteNB\") that calls the same \r\n> system call but tells the go runtime that the file descriptor is already in \r\n> non-blocking mode, so scheduling isn't necessary.\r\n>\r\n> This is a performance optimization only (and for all network operations, \r\n> not just http!), the same as the non-blocking system calls we already have \r\n> SYSNB annotated for.\r\n>\r\n> I don't understand this particular objection.\r\n>\r\n>\r\n> On Sun, Oct 28, 2012 at 6:14 PM, Rob Pike <r...@golang.org <javascript:>>wrote:\r\n>\r\n>> NOT LGTM\r\n>>\r\n>> the semantic change is disturbing. networks are used for things other\r\n>> than http \"hello world\" benchmarks.\r\n>>\r\n>> -rob\r\n>>\r\n>\r\n>",
			"disapproval": false,
			"date": "2012-10-28 18:11:10.793320",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 30, 2012 at 3:50 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> WriteNB takes its name from the sysnb annotation that mksyscall.pl consumes.\r\n> In this case I think it is OK as we aren't encouraging general use of this\r\n> function.\r\n\r\nmakes sense, thank you for explaining it.\r\n",
			"disapproval": false,
			"date": "2012-10-30 06:56:30.764560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> for such a small change, i think you can just manually generate\n> zsyscall_GOOS_GOARCH.go files (just pay attention to the relative\n> order).\n\nAre you suggesting adding\n\n// sys writeNB(...) = SYS_WRITE\n\nto darwin and *bsd and updating zsyscall*go rather than including these forwarding methods ?",
			"disapproval": false,
			"date": "2012-10-28 17:05:28.499990",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "WriteNB takes its name from the sysnb annotation that\r\nmksyscall.plconsumes. In this case I think it is OK as we aren't\r\nencouraging general\r\nuse of this function.\r\nOn 30 Oct 2012 07:36, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6813046/diff/11003/src/**\r\n> pkg/syscall/syscall_unix.go<https://codereview.appspot.com/6813046/diff/11003/src/pkg/syscall/syscall_unix.go>\r\n> File src/pkg/syscall/syscall_unix.**go (right):\r\n>\r\n> https://codereview.appspot.**com/6813046/diff/11003/src/**\r\n> pkg/syscall/syscall_unix.go#**newcode150<https://codereview.appspot.com/6813046/diff/11003/src/pkg/syscall/syscall_unix.go#newcode150>\r\n> src/pkg/syscall/syscall_unix.**go:150: func WriteNB(fd int, p []byte) (n\r\n> int, err error) {\r\n> WriteNB or WriteNonblock; we already have SetNonblock\r\n> so maybe the latter might be preferable?\r\n>\r\n> https://codereview.appspot.**com/6813046/<https://codereview.appspot.com/6813046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-30 06:50:58.843740",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\r\n\r\nthe semantic change is disturbing. networks are used for things other\r\nthan http \"hello world\" benchmarks.\r\n\r\n-rob\r\n",
			"disapproval": true,
			"date": "2012-10-28 17:14:19.103110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I misunderstood where the magic was happening. I withdraw my objection.\r\n\r\nAs usual, networking is too complicated but there's not much I can do\r\nabout that.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-28 17:27:48.637710",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6813046/diff/11003/src/pkg/syscall/syscall_unix.go\nFile src/pkg/syscall/syscall_unix.go (right):\n\nhttps://codereview.appspot.com/6813046/diff/11003/src/pkg/syscall/syscall_unix.go#newcode150\nsrc/pkg/syscall/syscall_unix.go:150: func WriteNB(fd int, p []byte) (n int, err error) {\nWriteNB or WriteNonblock; we already have SetNonblock\nso maybe the latter might be preferable?",
			"disapproval": false,
			"date": "2012-10-30 06:36:38.452880",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/28 17:05:28, dfc wrote:\n> Are you suggesting adding\n> \n> // sys writeNB(...) = SYS_WRITE\n//sysnb writeNB(...) = SYS_WRITE \n> to darwin and *bsd and updating zsyscall*go rather than including these\n> forwarding methods ?\nyeah.",
			"disapproval": false,
			"date": "2012-10-28 17:19:53.045570",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> WriteNB does a write system call to a descriptor that has been set to\r\n> non-blocking mode.  Do not call this with a descriptor in blocking mode.\r\n>  Blocking mode is the default for all descriptors other than sockets\r\n> opened by the net package.\r\n\r\nSGTM, thank you.\r\n\r\n@bradfitz. I can do some basic testing with siege but I am concerned\r\nmy laptop doesn't have enough horsepower to drive siege and the server\r\nprocess without interference. Hopefully some of the OPs will be able\r\nto contribute test data from their machines.\r\n",
			"disapproval": false,
			"date": "2012-10-29 16:13:57.451060",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nit passes on freebsd/amd64.",
			"disapproval": false,
			"date": "2012-10-30 06:58:52.439600",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you to those who reviewed this CL. I was traveling at the time so let this slip, which I apologise for. I will be doing final testing on this CL today and tomorrow and plan to submit soon after that.",
			"disapproval": false,
			"date": "2012-11-18 04:23:43.550610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any change with larger writes?  Those responses look quite small.\r\n\r\nPersonally I'm not concerned either way if this goes in now vs. later\r\n(after scheduler work).\r\n\r\n\r\nOn Tue, Nov 20, 2012 at 9:31 PM, <dave@cheney.net> wrote:\r\n\r\n> After (re)reading the siege documentation i've come up with some\r\n> interesting results.\r\n>\r\n> Test hardware, Lenovo x220, Core i5, 4Gb ram, Ubuntu 12.10, linux/amd64\r\n>\r\n> Baseline: hg id: 2a55e349097f\r\n>\r\n> Before, GOMAXPROCS unset:\r\n> % siege -b -t10s http://127.0.0.1:8080/\r\n> ** SIEGE 2.70\r\n> ** Preparing 15 concurrent users for battle.\r\n> The server is now under siege...\r\n> Lifting the server siege...      done.\r\n>                                                      Transactions:\r\n>            149320 hits\r\n> Availability:                 100.00 %\r\n> Elapsed time:                   9.23 secs\r\n> Data transferred:               1.85 MB\r\n> Response time:                  0.00 secs\r\n> Transaction rate:           16177.68 trans/sec\r\n> Throughput:                     0.20 MB/sec\r\n> Concurrency:                   14.77\r\n> Successful transactions:      149320\r\n> Failed transactions:               0\r\n> Longest transaction:            0.01\r\n> Shortest transaction:           0.00\r\n>\r\n> After:\r\n> % siege -b -t10s http://127.0.0.1:8080/\r\n> ** SIEGE 2.70\r\n> ** Preparing 15 concurrent users for battle.\r\n> The server is now under siege...\r\n> Lifting the server siege...      done.\r\n>                                                      Transactions:\r\n>             28436 hits\r\n> Availability:                 100.00 %\r\n> Elapsed time:                   9.08 secs\r\n> Data transferred:               0.35 MB\r\n> Response time:                  0.00 secs\r\n> Transaction rate:            3131.72 trans/sec\r\n> Throughput:                     0.04 MB/sec\r\n> Concurrency:                   14.74\r\n> Successful transactions:       28437\r\n> Failed transactions:               0\r\n> Longest transaction:            0.02\r\n> Shortest transaction:           0.00\r\n>\r\n> In summary, terrible.\r\n>\r\n> However,\r\n>\r\n> Before, GOMAXPROCS=4\r\n> % siege -b -t10s http://127.0.0.1:8080/\r\n> ** SIEGE 2.70\r\n> ** Preparing 15 concurrent users for battle.\r\n> The server is now under siege...\r\n> Lifting the server siege...      done.\r\n>                                                      Transactions:\r\n>            154166 hits\r\n> Availability:                 100.00 %\r\n> Elapsed time:                   9.29 secs\r\n> Data transferred:               1.91 MB\r\n> Response time:                  0.00 secs\r\n> Transaction rate:           16594.83 trans/sec\r\n> Throughput:                     0.21 MB/sec\r\n> Concurrency:                   14.76\r\n> Successful transactions:      154166\r\n> Failed transactions:               0\r\n> Longest transaction:            0.01\r\n> Shortest transaction:           0.00\r\n>\r\n> After:\r\n> % siege -b -t10s http://127.0.0.1:8080/\r\n> ** SIEGE 2.70\r\n> ** Preparing 15 concurrent users for battle.\r\n> The server is now under siege...\r\n> Lifting the server siege...      done.\r\n>                                                      Transactions:\r\n>            149329 hits\r\n> Availability:                 100.00 %\r\n> Elapsed time:                   9.76 secs\r\n> Data transferred:               1.85 MB\r\n> Response time:                  0.00 secs\r\n> Transaction rate:           15300.10 trans/sec\r\n> Throughput:                     0.19 MB/sec\r\n> Concurrency:                   14.76\r\n> Successful transactions:      149329\r\n> Failed transactions:               0\r\n> Longest transaction:            0.01\r\n> Shortest transaction:           0.00\r\n>\r\n> Now the numbers are comparable, it is possible that with a larger host,\r\n> say 8, 12 or 16 cores, more throughput could be obtained.\r\n>\r\n> pprof graphs show roughly half of the time spent in syscall.Syscall is\r\n> now allocated to syscall.Rawsyscall, as expected.\r\n>\r\n> However, given these results, I am unsure how to proceed as this CL does\r\n> not improve the throughput in the basic case, and can easily cause a\r\n> serious regression. Granted, this regression may be addressed by\r\n> GOMAXPROCS tweaking, but that runs contrary to the ideas of the runtime\r\n> doing the right thing out of the box.\r\n>\r\n> https://codereview.appspot.**com/6813046/<https://codereview.appspot.com/6813046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-21 06:18:02.719910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After (re)reading the siege documentation i've come up with some interesting results.\n\nTest hardware, Lenovo x220, Core i5, 4Gb ram, Ubuntu 12.10, linux/amd64\n\nBaseline: hg id: 2a55e349097f\n\nBefore, GOMAXPROCS unset:\n% siege -b -t10s http://127.0.0.1:8080/\n** SIEGE 2.70\n** Preparing 15 concurrent users for battle.\nThe server is now under siege...\nLifting the server siege...      done.                                                                                        Transactions:                  149320 hits\nAvailability:                 100.00 %\nElapsed time:                   9.23 secs\nData transferred:               1.85 MB\nResponse time:                  0.00 secs\nTransaction rate:           16177.68 trans/sec\nThroughput:                     0.20 MB/sec\nConcurrency:                   14.77\nSuccessful transactions:      149320\nFailed transactions:               0\nLongest transaction:            0.01\nShortest transaction:           0.00\n\nAfter:\n% siege -b -t10s http://127.0.0.1:8080/\n** SIEGE 2.70\n** Preparing 15 concurrent users for battle.\nThe server is now under siege...\nLifting the server siege...      done.                                                                                        Transactions:                   28436 hits\nAvailability:                 100.00 %\nElapsed time:                   9.08 secs\nData transferred:               0.35 MB\nResponse time:                  0.00 secs\nTransaction rate:            3131.72 trans/sec\nThroughput:                     0.04 MB/sec\nConcurrency:                   14.74\nSuccessful transactions:       28437\nFailed transactions:               0\nLongest transaction:            0.02\nShortest transaction:           0.00\n\nIn summary, terrible.\n\nHowever, \n\nBefore, GOMAXPROCS=4\n% siege -b -t10s http://127.0.0.1:8080/\n** SIEGE 2.70\n** Preparing 15 concurrent users for battle.\nThe server is now under siege...\nLifting the server siege...      done.                                                                                        Transactions:                  154166 hits\nAvailability:                 100.00 %\nElapsed time:                   9.29 secs\nData transferred:               1.91 MB\nResponse time:                  0.00 secs\nTransaction rate:           16594.83 trans/sec\nThroughput:                     0.21 MB/sec\nConcurrency:                   14.76\nSuccessful transactions:      154166\nFailed transactions:               0\nLongest transaction:            0.01\nShortest transaction:           0.00\n\nAfter:\n% siege -b -t10s http://127.0.0.1:8080/\n** SIEGE 2.70\n** Preparing 15 concurrent users for battle.\nThe server is now under siege...\nLifting the server siege...      done.                                                                                        Transactions:                  149329 hits\nAvailability:                 100.00 %\nElapsed time:                   9.76 secs\nData transferred:               1.85 MB\nResponse time:                  0.00 secs\nTransaction rate:           15300.10 trans/sec\nThroughput:                     0.19 MB/sec\nConcurrency:                   14.76\nSuccessful transactions:      149329\nFailed transactions:               0\nLongest transaction:            0.01\nShortest transaction:           0.00\n\nNow the numbers are comparable, it is possible that with a larger host, say 8, 12 or 16 cores, more throughput could be obtained.\n\npprof graphs show roughly half of the time spent in syscall.Syscall is now allocated to syscall.Rawsyscall, as expected.\n\nHowever, given these results, I am unsure how to proceed as this CL does not improve the throughput in the basic case, and can easily cause a serious regression. Granted, this regression may be addressed by GOMAXPROCS tweaking, but that runs contrary to the ideas of the runtime doing the right thing out of the box.",
			"disapproval": false,
			"date": "2012-11-21 05:31:12.681760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry I did not measure that. I was fighting at with running out\r\nof ephemeral ports so only running the test for a short amount of\r\ntime.\r\n\r\nI will investigate other metrics like CPU/thread usage, and using\r\nlarger response bodies tomorrow when I am back on mains power.\r\n\r\nOn Wed, Nov 21, 2012 at 6:43 PM,  <remyoudompheng@gmail.com> wrote:\r\n> On 2012/11/21 05:31:12, dfc wrote:\r\n>>\r\n>> After (re)reading the siege documentation i've come up with some\r\n>\r\n> interesting\r\n>>\r\n>> results.\r\n>\r\n>\r\n>> [...]\r\n>\r\n>\r\n>> pprof graphs show roughly half of the time spent in syscall.Syscall is\r\n>\r\n> now\r\n>>\r\n>> allocated to syscall.Rawsyscall, as expected.\r\n>\r\n>\r\n>> However, given these results, I am unsure how to proceed as this CL\r\n>\r\n> does not\r\n>>\r\n>> improve the throughput in the basic case, and can easily cause a\r\n>\r\n> serious\r\n>>\r\n>> regression. Granted, this regression may be addressed by GOMAXPROCS\r\n>\r\n> tweaking,\r\n>>\r\n>> but that runs contrary to the ideas of the runtime doing the right\r\n>\r\n> thing out of\r\n>>\r\n>> the box.\r\n>\r\n>\r\n> How many OS threads do you have before/after the patch ?\r\n>\r\n> https://codereview.appspot.com/6813046/\r\n",
			"disapproval": false,
			"date": "2012-11-21 07:56:56.112090",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/21 07:56:56, dfc wrote:\n> I'm sorry I did not measure that. I was fighting at with running out\n> of ephemeral ports so only running the test for a short amount of\n> time.\n\nYou may find it useful to tweak net.ipv4.tcp_tw_recycle and net.ipv4.tcp_tw_reuse if needed.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-11-21 21:53:03.550970",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/21 05:31:12, dfc wrote:\n> After (re)reading the siege documentation i've come up with some interesting\n> results.\n>\n> [...]\n> \n> pprof graphs show roughly half of the time spent in syscall.Syscall is now\n> allocated to syscall.Rawsyscall, as expected.\n> \n> However, given these results, I am unsure how to proceed as this CL does not\n> improve the throughput in the basic case, and can easily cause a serious\n> regression. Granted, this regression may be addressed by GOMAXPROCS tweaking,\n> but that runs contrary to the ideas of the runtime doing the right thing out of\n> the box.\n\nHow many OS threads do you have before/after the patch ?",
			"disapproval": false,
			"date": "2012-11-21 07:43:30.566700",
			"approval": false
		},
		{
			"sender": "sebastien.paolacci@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello Dmitriy / All,\r\n\r\nFew weeks ago I write and play with an edge triggered linux poll server.\r\n\r\nFor various reasons, having a stripped-down implementation, with a significantly reduced contention surface (and slightly less syscalls), made me hope for some performance improvements.. which happened to be almost just wrong (nothing on 1 core, ~5% on 4-8 cores in the TCPOneShot case and ~20% in the persistent one).\r\n\r\nI then blamed the way (supposedly) non-blocking syscalls were not handled, so I flagged accept/connect/write as non-blocking. End result was not better and even slightly worst, either because they did occasionally block (as separately suggested by Iant), or because it happened to adversely disturb the scheduler (by offering less/different resumption points), or because both of them, or because of whatever else.\r\n\r\nAfter few more investigations, what I learn was that even an almost naked poll server was still saturating on the scheduler side, and that the blocking vs non-blocking syscalls point was ultimately not a first order performance consideration.\r\n\r\nI incidentally didn't found any pollserver-side way to resorb the abrupt/ crazy slowdowns that still appear beyond 10-12 cores (cf. 6496054), and I still feel tempted by blaming the scheduler for that..\r\n\r\nMy bottom line would be: if the only remaining issue was to erroneously consider that `connect' (and/or its friends) can block, whilst they don't, then a very significant part of the scheduler would be quite slick... and I would be much more than happy with that situation alone ;).\r\n\r\nBest,\r\nSebastien\r\n\r\nOn Jan 15, 2013, at 9:19 PM, dvyukov@google.com wrote:\r\n\r\n> I am surprised that it provides only 10% speedup. Try net benchmarks\r\n> with GOMAXPROCS=1,2,4,8,16...\r\n> \r\n> https://codereview.appspot.com/6813046/\r\n\r\n",
			"disapproval": false,
			"date": "2013-01-15 22:55:50.560920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. This CL should apply cleanly now. I will try to find some time to make some new performance measurements. Assistance in doing so is greatly appreciated.",
			"disapproval": false,
			"date": "2013-01-15 06:12:36.535360",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 15, 2013 at 12:15 PM, <dvyukov@google.com> wrote:\r\n\r\n> Do we actually want to add public functions for that? It's irreversible\r\n> change and we will need to explain to users what is NB calls. Eventually\r\n> Go can have automatic handling of that...\r\n>\r\n\r\nThe syscall package is already a gross, scary, inconsistent, largely\r\nundocumented place.  Anybody treading in that direction would understand\r\nthe warning:\r\n\r\n// ReadNB is like Read, but does not cause a scheduling event.\r\n// The fd must already be in non-blocking mode or deadlocks may occur.\r\nfunc ReadNB(fd int, p []byte) (n int, err error)\r\n",
			"disapproval": false,
			"date": "2013-01-15 20:43:53.388830",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you're nervous about checking this in, I would at least be fine with you\r\nchecking in all the syscall bits first, so then this CL diff is one line\r\nand easier to maintain and cherry-pick into load-testing scenarios later.\r\n (I might be able to find some time to do some, even.)\r\n\r\nBut I can't imagine this making things worse, if Write in actually\r\nnon-blocking.  (per your darwin comment)  So I'm actually still fine with\r\nyou checking this in as-is.\r\n\r\n\r\nOn Mon, Jan 14, 2013 at 10:12 PM, <dave@cheney.net> wrote:\r\n\r\n> PTAL. This CL should apply cleanly now. I will try to find some time to\r\n> make some new performance measurements. Assistance in doing so is\r\n> greatly appreciated.\r\n>\r\n> https://codereview.appspot.**com/6813046/<https://codereview.appspot.com/6813046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-15 06:29:45.549510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Brad. I like the idea of splitting this into two diffs, I'll do that.\r\n\r\nOn Tue, Jan 15, 2013 at 5:29 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> If you're nervous about checking this in, I would at least be fine with you\r\n> checking in all the syscall bits first, so then this CL diff is one line and\r\n> easier to maintain and cherry-pick into load-testing scenarios later.  (I\r\n> might be able to find some time to do some, even.)\r\n>\r\n> But I can't imagine this making things worse, if Write in actually\r\n> non-blocking.  (per your darwin comment)  So I'm actually still fine with\r\n> you checking this in as-is.\r\n>\r\n>\r\n> On Mon, Jan 14, 2013 at 10:12 PM, <dave@cheney.net> wrote:\r\n>>\r\n>> PTAL. This CL should apply cleanly now. I will try to find some time to\r\n>> make some new performance measurements. Assistance in doing so is\r\n>> greatly appreciated.\r\n>>\r\n>> https://codereview.appspot.com/6813046/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-15 06:34:27.058460",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like we have dvyukov's opinion about the viability of this change.",
			"disapproval": false,
			"date": "2013-01-15 19:30:50.598810",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do we actually want to add public functions for that? It's irreversible change and we will need to explain to users what is NB calls. Eventually Go can have automatic handling of that...",
			"disapproval": false,
			"date": "2013-01-15 20:15:52.407810",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/15 20:15:52, dvyukov wrote:\n> Do we actually want to add public functions for that? It's irreversible change\n> and we will need to explain to users what is NB calls. Eventually Go can have\n> automatic handling of that...\n\nBut I support the idea of using nonblocking syscalls in net package.\nI think we also need connect/accept/close and what else is used during connection establishment, because some servers connect/accept connection and send only 1 packet over it.",
			"disapproval": false,
			"date": "2013-01-15 20:18:16.015470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/15 20:15:52, dvyukov wrote:\n> Do we actually want to add public functions for that? It's irreversible change\n> and we will need to explain to users what is NB calls. Eventually Go can have\n> automatic handling of that...\n\nAt Brad's suggestion I'm going to break this CL into several parts.\n\nThe first will add the WriteNB mechanics to syscall. We can argue about their usefulness then.\n\nThe second will be a small change to net, which switches to WriteNB. This will be easy to revert if it makes things worse.\n\nThen additional changes to enabled syscall.WriteNB to be non blocking on all platforms that support it.",
			"disapproval": false,
			"date": "2013-01-15 20:18:54.515670",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am surprised that it provides only 10% speedup. Try net benchmarks with GOMAXPROCS=1,2,4,8,16...",
			"disapproval": false,
			"date": "2013-01-15 20:19:18.371730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"sebastien.paolacci@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, remyoudompheng@gmail.com, bradfitz@golang.org, minux.ma@gmail.com, r@golang.org, nightlyone@googlemail.com, iant@golang.org, dvyukov@google.com, sebastien.paolacci@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-16 00:26:08.479970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"sebastien.paolacci@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\n\nI still believe that scheduler changes should make it possible to eliminate this distinction between blocking and non-blocking system calls. Let's not expose that wart in any more public API.",
			"disapproval": true,
			"date": "2013-01-30 16:33:48.638100",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"sebastien.paolacci@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 16:33:48, rsc wrote:\n> NOT LGTM\n> \n> I still believe that scheduler changes should make it possible to eliminate this\n> distinction between blocking and non-blocking system calls. Let's not expose\n> that wart in any more public API.\n\nRuss, what do you think about private api for net package?\nI need to do more prototyping, but the hypothesis is that it can significantly simplify initial scheduler implementation. If/when we solve the problem in the scheduler later, we can remove that apis. So I want to know whether I can count on non-blocking apis for net, and spent time prototyping scheduler that does not solve the syscall problem.\nMaybe it will not be required, if I find a way to deal with background polling thread (so that it does not consume CPU all time).",
			"disapproval": false,
			"date": "2013-01-30 16:42:50.150860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's wait and see how the scheduler work turns out, please.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-30 17:25:58.362820",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"sebastien.paolacci@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-01-30 23:48:55.232200",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"sebastien.paolacci@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 16:33:48, rsc wrote:\n> NOT LGTM\n> \n> I still believe that scheduler changes should make it possible to eliminate this\n> distinction between blocking and non-blocking system calls. Let's not expose\n> that wart in any more public API.\n\nsgtm. I think we've already implemented part of this with the accept4 CL. These WriteNB changes have not shown to make a constant improvement.",
			"disapproval": false,
			"date": "2013-01-30 23:50:05.706580",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6813046: net: use WriteNB on non-blocking sockets",
	"created": "2012-10-28 16:29:55.922720",
	"patchsets": [
		1,
		2001,
		4001,
		6002,
		2012,
		8020,
		11003,
		19001,
		25001,
		28001,
		25002,
		39001,
		42001
	],
	"modified": "2013-01-30 23:50:05.968150",
	"closed": true,
	"issue": 6813046
}