{
	"description": "cmd/gofmt: Slice expressions can now be simplified using \"gofmt -s\".\n\nslice of the form: b[0:n]\ncan be simplified to: b[:n]\n\nslice of the form: b[i:len(b)]\ncan be simplified to: b[i:]\n\nFixes issue 4314.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "r.eklind.87@gmail.com",
			"recipients": [
				"r.eklind.87@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-30 13:41:38.471810",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Could you add some tests?\r\n\r\nOn Tue, Oct 30, 2012 at 2:41 PM, <r.eklind.87@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> cmd/gofmt: Slice expressions can now be simplified using \"gofmt -s\".\r\n>\r\n> slice of the form: b[0:n]\r\n> can be simplified to: b[:n]\r\n>\r\n> slice of the form: b[i:len(b)]\r\n> can be simplified to: b[i:]\r\n>\r\n> Fixes issue 4314.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6813049/<http://codereview.appspot.com/6813049/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/gofmt/simplify.go\r\n>\r\n>\r\n> Index: src/cmd/gofmt/simplify.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/gofmt/simplify.go\r\n> +++ b/src/cmd/gofmt/simplify.go\r\n> @@ -8,6 +8,7 @@\r\n>         \"go/ast\"\r\n>         \"go/token\"\r\n>         \"reflect\"\r\n> +       \"strconv\"\r\n>  )\r\n>\r\n>  type simplifier struct{}\r\n> @@ -70,6 +71,32 @@\r\n>                                 n.Value = nil\r\n>                         }\r\n>                 }\r\n> +\r\n> +       case *ast.SliceExpr:\r\n> +               // slice of the form: b[0:n]\r\n> +               // can be simplified to: b[:n]\r\n> +               if low, ok := n.Low.(*ast.BasicLit); ok {\r\n> +                       if val, err := strconv.Atoi(low.Value); err == nil\r\n> {\r\n> +                               if val == 0 {\r\n> +                                       n.Low = nil\r\n> +                               }\r\n> +                       }\r\n> +               }\r\n> +\r\n> +               // slice of the form: b[i:len(b)]\r\n> +               // can be simplified to: b[i:]\r\n> +               if x, ok := n.X.(*ast.Ident); ok {\r\n> +                       if high, ok := n.High.(*ast.CallExpr); ok &&\r\n> len(high.Args) == 1 {\r\n> +                               if fun, ok := high.Fun.(*ast.Ident); ok &&\r\n> fun.Name == \"len\" && fun.Obj == nil {\r\n> +                                       // fun.Obj is nil for the builtin\r\n> len function.\r\n> +                                       if arg, ok :=\r\n> high.Args[0].(*ast.Ident); ok {\r\n> +                                               if x.Name == arg.Name {\r\n> +                                                       n.High = nil\r\n> +                                               }\r\n> +                                       }\r\n> +                               }\r\n> +                       }\r\n> +               }\r\n>         }\r\n>\r\n>         return s\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-30 15:57:35.056040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 30, 2012 at 5:11 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Does it simplify b[0:len(b)] to b[:] ? If so, is that a correct\r\n> simplification ?\r\n>\r\n\r\nAs opposed to just b?  Just b won't work if b is an array.\r\n",
			"disapproval": false,
			"date": "2012-10-30 16:16:01.825920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does it simplify b[0:len(b)] to b[:] ? If so, is that a correct simplification ?\r\n\r\nOn Wed, Oct 31, 2012 at 2:57 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Could you add some tests?\r\n>\r\n>\r\n> On Tue, Oct 30, 2012 at 2:41 PM, <r.eklind.87@gmail.com> wrote:\r\n>>\r\n>> Reviewers: golang-dev_googlegroups.com,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> cmd/gofmt: Slice expressions can now be simplified using \"gofmt -s\".\r\n>>\r\n>> slice of the form: b[0:n]\r\n>> can be simplified to: b[:n]\r\n>>\r\n>> slice of the form: b[i:len(b)]\r\n>> can be simplified to: b[i:]\r\n>>\r\n>> Fixes issue 4314.\r\n>>\r\n>> Please review this at http://codereview.appspot.com/6813049/\r\n>>\r\n>> Affected files:\r\n>>   M src/cmd/gofmt/simplify.go\r\n>>\r\n>>\r\n>> Index: src/cmd/gofmt/simplify.go\r\n>> ===================================================================\r\n>> --- a/src/cmd/gofmt/simplify.go\r\n>> +++ b/src/cmd/gofmt/simplify.go\r\n>> @@ -8,6 +8,7 @@\r\n>>         \"go/ast\"\r\n>>         \"go/token\"\r\n>>         \"reflect\"\r\n>> +       \"strconv\"\r\n>>  )\r\n>>\r\n>>  type simplifier struct{}\r\n>> @@ -70,6 +71,32 @@\r\n>>                                 n.Value = nil\r\n>>                         }\r\n>>                 }\r\n>> +\r\n>> +       case *ast.SliceExpr:\r\n>> +               // slice of the form: b[0:n]\r\n>> +               // can be simplified to: b[:n]\r\n>> +               if low, ok := n.Low.(*ast.BasicLit); ok {\r\n>> +                       if val, err := strconv.Atoi(low.Value); err == nil\r\n>> {\r\n>> +                               if val == 0 {\r\n>> +                                       n.Low = nil\r\n>> +                               }\r\n>> +                       }\r\n>> +               }\r\n>> +\r\n>> +               // slice of the form: b[i:len(b)]\r\n>> +               // can be simplified to: b[i:]\r\n>> +               if x, ok := n.X.(*ast.Ident); ok {\r\n>> +                       if high, ok := n.High.(*ast.CallExpr); ok &&\r\n>> len(high.Args) == 1 {\r\n>> +                               if fun, ok := high.Fun.(*ast.Ident); ok &&\r\n>> fun.Name == \"len\" && fun.Obj == nil {\r\n>> +                                       // fun.Obj is nil for the builtin\r\n>> len function.\r\n>> +                                       if arg, ok :=\r\n>> high.Args[0].(*ast.Ident); ok {\r\n>> +                                               if x.Name == arg.Name {\r\n>> +                                                       n.High = nil\r\n>> +                                               }\r\n>> +                                       }\r\n>> +                               }\r\n>> +                       }\r\n>> +               }\r\n>>         }\r\n>>\r\n>>         return s\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-30 16:11:39.478160",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Oct 31, 2012 at 12:11 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Does it simplify b[0:len(b)] to b[:] ? If so, is that a correct\r\n> simplification ?\r\n>\r\njust tried, it does; and i think it's correct. further simplification will\r\nneed typing\r\ninformation.\r\n",
			"disapproval": false,
			"date": "2012-10-30 16:40:04.630850",
			"approval": false
		},
		{
			"sender": "r.eklind.87@gmail.com",
			"recipients": [
				"r.eklind.87@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dave@cheney.net, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-30 22:47:39.129960",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r.eklind.87@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for spearheading this, but please abandon the CL in favor of: http://codereview.appspot.com/6822059/ . Thanks.\n\nhttps://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go\nFile src/cmd/gofmt/simplify.go (right):\n\nhttps://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode78\nsrc/cmd/gofmt/simplify.go:78: if low, ok := n.Low.(*ast.BasicLit); ok {\nI agree with rsc that we probably want to leave s[0:b] alone. For one, the 0 is not consuming much visual space, and sometimes people want to be explicit (I for one, often want to).\n\nhttps://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode91\nsrc/cmd/gofmt/simplify.go:91: // fun.Obj is nil for the builtin len function.\nWe cannot know this in the presence of dot imports.\n\nhttps://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode93\nsrc/cmd/gofmt/simplify.go:93: if x.Name == arg.Name {\nIt's safer to check that the objects are the same.",
			"disapproval": false,
			"date": "2012-10-31 18:34:41.580830",
			"approval": false
		},
		{
			"sender": "r.eklind.87@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 10/31/2012 07:34 PM, gri@golang.org wrote:\r\n> Thanks for spearheading this, but please abandon the CL in favor of:\r\n> http://codereview.appspot.com/6822059/ . Thanks.\r\n>\r\n>\r\n> https://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go \r\n>\r\n> File src/cmd/gofmt/simplify.go (right):\r\n>\r\n> https://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode78 \r\n>\r\n> src/cmd/gofmt/simplify.go:78: if low, ok := n.Low.(*ast.BasicLit); ok {\r\n> I agree with rsc that we probably want to leave s[0:b] alone. For one,\r\n> the 0 is not consuming much visual space, and sometimes people want to\r\n> be explicit (I for one, often want to).\r\n>\r\n> https://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode91 \r\n>\r\n> src/cmd/gofmt/simplify.go:91: // fun.Obj is nil for the builtin len\r\n> function.\r\n> We cannot know this in the presence of dot imports.\r\n>\r\n\r\nI have tried to replicate this, but have been unable to.\r\nhttp://play.golang.org/p/5Je8Bq56BU\r\nhttp://play.golang.org/p/PvuMPrmhYS\r\n\r\nNo matter which combinations I've tried fun.Obj is always nil for \r\nbuiltin len and non-nil for other functions with the name len. This \r\nincludes the use of \".\" imports.\r\n\r\nCould you provide a small example of where a function (other than the \r\nbuiltin) with the name \"len\" can have fun.Obj equal to nil?\r\n\r\nAnyways, thank you for all the help with this CL, and sorry for the very \r\nlate reply.\r\n\r\ncheers /robin\r\n\r\n> https://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode93 \r\n>\r\n> src/cmd/gofmt/simplify.go:93: if x.Name == arg.Name {\r\n> It's safer to check that the objects are the same.\r\n>\r\n> https://codereview.appspot.com/6813049/\r\n\r\n",
			"disapproval": false,
			"date": "2013-01-04 17:48:25.132160",
			"approval": false
		},
		{
			"sender": "r.eklind.87@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 01/05/2013 01:51 AM, r.eklind.87 wrote:\r\n> On 10/31/2012 07:34 PM, gri@golang.org wrote:\r\n>> Thanks for spearheading this, but please abandon the CL in favor of:\r\n>> http://codereview.appspot.com/6822059/ . Thanks.\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go \r\n>>\r\n>> File src/cmd/gofmt/simplify.go (right):\r\n>>\r\n>> https://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode78 \r\n>>\r\n>> src/cmd/gofmt/simplify.go:78: if low, ok := n.Low.(*ast.BasicLit); ok {\r\n>> I agree with rsc that we probably want to leave s[0:b] alone. For one,\r\n>> the 0 is not consuming much visual space, and sometimes people want to\r\n>> be explicit (I for one, often want to).\r\n>>\r\n>> https://codereview.appspot.com/6813049/diff/7002/src/cmd/gofmt/simplify.go#newcode91 \r\n>>\r\n>> src/cmd/gofmt/simplify.go:91: // fun.Obj is nil for the builtin len\r\n>> function.\r\n>> We cannot know this in the presence of dot imports.\r\n>>\r\n>\r\n> I have tried to replicate this, but have been unable to.\r\n> http://play.golang.org/p/5Je8Bq56BU\r\n> http://play.golang.org/p/PvuMPrmhYS\r\n>\r\n> No matter which combinations I've tried fun.Obj is always nil for \r\n> builtin len and non-nil for other functions with the name len. This \r\n> includes the use of \".\" imports.\r\n>\r\n\r\nThe information in my previous mail can be disregarded since it isn't up \r\nto date with regards to the new typechecker. Sorry for any confusion.\r\n\r\nWith the new typechecker information it should be possible to correctly \r\nidentify builtin vs local definitions of len.\r\n\r\nBelow follows some information about the different types as identified \r\nby the type checker.\r\n\r\n=== [ builtin len ] ===\r\n\r\n--- [ slice ] ---\r\n&ast.SliceExpr{\r\n     X:      (*ast.Ident)(0xc2000ca7c0),\r\n     Lbrack: 92,\r\n     Low:    ast.Expr(nil),\r\n     High:   (*ast.CallExpr)(0xc2000bd800),\r\n     Rbrack: 102,\r\n}\r\n\r\n--- [ high: ] ---\r\n&ast.CallExpr{\r\n     Fun:    (*ast.Ident)(0xc2000ca7e0),\r\n     Lparen: 97,\r\n     Args: []ast.Expr{\r\n         (*ast.Ident)(0xc2000ca800),\r\n     },\r\n     Ellipsis: 0,\r\n     Rparen:   101,\r\n}\r\n\r\n--- [ fun: ] ---\r\n&ast.Ident{\r\n     NamePos: 94,\r\n     Name:    \"len\",\r\n     Obj:     (*ast.Object)(0xc200099000),\r\n}\r\n\r\n--- [ obj: ] ---\r\n&ast.Object{\r\n     Kind: 5,\r\n     Name: \"len\",\r\n     Decl: (*ast.Scope)(0xc20006b520),\r\n     Data: interface{}(nil),\r\n     Type: (*types.builtin)(0x7533d0),\r\n}\r\n\r\n--- [ type: ] ---\r\n&types.builtin{\r\n     implementsType: types.implementsType{},\r\n     id:             7,\r\n     name:           \"len\",\r\n     nargs:          1,\r\n     isVariadic:     false,\r\n     isStatement:    false,\r\n}\r\n\r\n=== [ local len ] ===\r\n\r\n--- [ slice ] ---\r\n&ast.SliceExpr{\r\n     X:      (*ast.Ident)(0xc2000cb8e0),\r\n     Lbrack: 87,\r\n     Low:    ast.Expr(nil),\r\n     High:   (*ast.CallExpr)(0xc2000bc8c0),\r\n     Rbrack: 97,\r\n}\r\n\r\n--- [ high: ] ---\r\n&ast.CallExpr{\r\n     Fun:    (*ast.Ident)(0xc2000cb900),\r\n     Lparen: 92,\r\n     Args: []ast.Expr{\r\n         (*ast.Ident)(0xc2000cb920),\r\n     },\r\n     Ellipsis: 0,\r\n     Rparen:   96,\r\n}\r\n\r\n--- [ fun: ] ---\r\n&ast.Ident{\r\n     NamePos: 89,\r\n     Name:    \"len\",\r\n     Obj:     (*ast.Object)(0xc200098e60),\r\n}\r\n\r\n--- [ obj: ] ---\r\n&ast.Object{\r\n     Kind: 5,\r\n     Name: \"len\",\r\n     Decl: (*ast.FuncDecl)(0xc2000ccdb0),\r\n     Data: interface{}(nil),\r\n     Type: (*types.Signature)(0xc2000bcc40),\r\n}\r\n\r\n--- [ type: ] ---\r\n&types.Signature{\r\n     implementsType: types.implementsType{},\r\n     Recv:           (*types.Var)(nil),\r\n     Params: []*types.Var{\r\n         (*types.Var)(0xc2000cba20),\r\n     },\r\n     Results: []*types.Var{\r\n         (*types.Var)(0xc2000cba40),\r\n     },\r\n     IsVariadic: false,\r\n}\r\n\r\n=============\r\n\r\nBy using this information it should be possible to completely remove the \r\ncode which checks for \".\" imports. Btw, I'm really glad to follow the \r\nsteady progress of the typechecker. Thanks for all your hard work!\r\n\r\n/robin\r\n",
			"disapproval": false,
			"date": "2013-01-04 19:35:20.668440",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r.eklind.87@gmail.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close\n\nReplaced by https://codereview.appspot.com/6822059/",
			"disapproval": false,
			"date": "2013-06-17 21:36:19.293460",
			"approval": false
		}
	],
	"owner_email": "r.eklind.87@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "u",
	"subject": "code review 6813049: cmd/gofmt: Slice expressions can now be simplified usin...",
	"created": "2012-10-29 14:34:23.295890",
	"patchsets": [
		1,
		2001,
		4001,
		7002
	],
	"modified": "2013-06-17 21:36:19.472100",
	"closed": false,
	"issue": 6813049
}