{
	"description": "cmd/gc: turn race detector off for tail-call method wrapper functions\n\nIt was off in the old implementation (because there was no high-level\ndescription of the function at all). Maybe some day the race detector\nshould be fixed to handle the wrapper and then enabled for it, but there's\nno reason that has to be today.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-11 18:56:18.596350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ee3004c9d384 ***\n\ncmd/gc: turn race detector off for tail-call method wrapper functions\n\nIt was off in the old implementation (because there was no high-level\ndescription of the function at all). Maybe some day the race detector\nshould be fixed to handle the wrapper and then enabled for it, but there's\nno reason that has to be today.\n\nR=golang-dev\nTBR=dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/10037045",
			"disapproval": false,
			"date": "2013-06-12 02:37:11.468050",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nI guess tail calls make the race detector unhappy because it expects racefuncenter/racefuncexit to be paired.\nI don't think this function is interesting for race detector at all. It does not do any new memory accesses, right?",
			"disapproval": false,
			"date": "2013-06-12 11:09:39.946000",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 12, 2013 at 7:09 AM, <dvyukov@google.com> wrote:\r\n\r\n> LGTM\r\n> I guess tail calls make the race detector unhappy because it expects\r\n> racefuncenter/racefuncexit to be paired.\r\n> I don't think this function is interesting for race detector at all. It\r\n> does not do any new memory accesses, right?\r\n>\r\n\r\nThe function has always existed and never been tracked, so it's not \"new\"\r\nin that sense.\r\n\r\nThe function may do memory accesses that the race detector ideally would\r\nknow about. It comes up with things like:\r\n\r\ntype U struct {}\r\nfunc (u *U) M()\r\n\r\ntype T struct {\r\n    x int\r\n    U\r\n}\r\n\r\nThe generated function here is the implicit\r\n\r\nfunc (t *T) M() { (&t.U).M() }\r\n\r\nThere's no access here, just a +4 on the receiver and a jump, so no need\r\nfor the race detector to be involved. But another case is\r\n\r\ntype U struct {}\r\nfunc (u *U) M()\r\n\r\ntype T struct {\r\n    x int\r\n    *U\r\n}\r\n\r\nHere, the generated function here is the implicit\r\n\r\nfunc (t *T) M() { (t.U).M() }\r\n\r\nInstead of a +4, there's a pointer dereference on t to obtain the t.U\r\npointer field. The race detector should see that.\r\n\r\nAs I write this I realize there is a better fix: see\r\nhttps://codereview.appspot.com/10227043.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-12 11:29:59.681830",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 10037045: cmd/gc: turn race detector off for tail-call method wra...",
	"created": "2013-06-11 18:56:03.380870",
	"patchsets": [
		1,
		2001,
		4001,
		6001
	],
	"modified": "2013-06-12 11:29:59.725990",
	"closed": true,
	"issue": 10037045
}