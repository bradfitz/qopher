{
	"description": "cmd/8g: roll back the small integer constant optimizations introduced\nin 13416:67c0b8c8fb29 \"faster code, mainly for rotate\" [1]. The codegen\ncan run out of registers if there are too many small-int arithmetic ops.\n\nAn alternative approach is to copy 6g's sbop/abop codegen to 8g, but\nthis change is less risky.\n\nFixes issue 3835.\n\n[1] http://code.google.com/p/go/source/diff?spec=svn67c0b8c8fb29b1b7b6221977af6b89cae787b941&name=67c0b8c8fb29&r=67c0b8c8fb29b1b7b6221977af6b89cae787b941&format=side&path=/src/cmd/8g/cgen.c",
	"cc": [
		"rsc@golang.org",
		"remyoudompheng@gmail.com",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com, remyoudompheng@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-20 07:21:25.781080",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, can someone else have a look?",
			"disapproval": false,
			"date": "2012-08-22 21:13:19.601530",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThis is fine if you reopen the bug after submitting so that we remember to restore a working version of the code later.\n\nAlternately, I think this might fix it now:\n\nif(smallintconst(nr)) {\n    tempname(&n1, nl->type);\n    cgen(nl, &n1);\n    regalloc(&n2, nl->type, res);\n    gmove(&n1, &n2);\n    gins(a, nr, &n2);\n    regfree(&n2);\n}\n\nThe crummy thing about the 386 is that you really can't ever have a register allocated during a call to cgen.",
			"disapproval": false,
			"date": "2012-08-22 21:27:32.729290",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Generating code AND allocating registers? Forsooth! Albert, get my gun.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-08-22 21:30:35.184170",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/22 21:27:32, rsc wrote:\n> Alternately, I think this might fix it now:\n> \n> if(smallintconst(nr)) {\n>     tempname(&n1, nl->type);\n>     cgen(nl, &n1);\n>     regalloc(&n2, nl->type, res);\n>     gmove(&n1, &n2);\n>     gins(a, nr, &n2);\n>     regfree(&n2);\n> }\n>\n\nIt is what I was suggesting in CL 6450091 in an attempt to fix oother out of registers situations.",
			"disapproval": false,
			"date": "2012-08-22 21:38:58.540750",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f4f71c8c9f4d ***\n\ncmd/8g: roll back the small integer constant optimizations introduced\nin 13416:67c0b8c8fb29 \"faster code, mainly for rotate\" [1]. The codegen\ncan run out of registers if there are too many small-int arithmetic ops.\n\nAn alternative approach is to copy 6g's sbop/abop codegen to 8g, but\nthis change is less risky.\n\nFixes issue 3835.\n\n[1] http://code.google.com/p/go/source/diff?spec=svn67c0b8c8fb29b1b7b6221977af6b89cae787b941&name=67c0b8c8fb29&r=67c0b8c8fb29b1b7b6221977af6b89cae787b941&format=side&path=/src/cmd/8g/cgen.c\n\nR=rsc, remyoudompheng, r\nCC=golang-dev\nhttp://codereview.appspot.com/6450163",
			"disapproval": false,
			"date": "2012-08-23 06:17:36.712410",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 August 2012 07:27,  <rsc@golang.org> wrote:\r\n> if(smallintconst(nr)) {\r\n>     tempname(&n1, nl->type);\r\n>     cgen(nl, &n1);\r\n>     regalloc(&n2, nl->type, res);\r\n>     gmove(&n1, &n2);\r\n>     gins(a, nr, &n2);\r\n>     regfree(&n2);\r\n> }\r\n\r\nThis doesn't work, but I'm not thinking clearly enough to see why. For\r\nthis simple program:\r\n\r\n--------\r\npackage main\r\n\r\nvar a, b, c int\r\n\r\nfunc main() {\r\n    c = a + 2 + b\r\n}\r\n--------\r\n\r\nYour suggested patch generates this code:\r\n\r\n--- prog list \"main\" ---\r\n0000 (main.go:5) TEXT    main+0(SB),$4-0\r\n0001 (main.go:6) MOVL    a+0(SB),AX\r\n0002 (main.go:6) MOVL    AX,BX\r\n0003 (main.go:6) ADDL    $2,BX\r\n0004 (main.go:6) MOVL    autotmp_0000+-4(SP),BX\r\n0005 (main.go:6) ADDL    b+0(SB),BX\r\n0006 (main.go:6) MOVL    BX,c+0(SB)\r\n0007 (main.go:7) RET     ,\r\n\r\nNote that it's loading an uninitialized value from the stack. In\r\ncomparison, 8g at tip (given that the original CL that started this\r\nmail thread has been submitted) generates:\r\n\r\n--- prog list \"main\" ---\r\n0000 (main.go:5) TEXT    main+0(SB),$0-0\r\n0001 (main.go:6) MOVL    a+0(SB),AX\r\n0002 (main.go:6) ADDL    $2,AX\r\n0003 (main.go:6) MOVL    AX,BX\r\n0004 (main.go:6) ADDL    b+0(SB),BX\r\n0005 (main.go:6) MOVL    BX,c+0(SB)\r\n0006 (main.go:7) RET     ,\r\n\r\nThis isn't perfect (the BX's could become AX's and the \"MOVL AX, AX\"\r\nremoved), but isn't obviously worse, and doesn't require any stack for\r\nthe tempname. For this trivial program, 8g (at tip) actually generates\r\nthe same code as it did prior to the original CL, with the broken\r\nallocate-registers-upfront code.\r\n\r\nI could spend some more time debugging your proposal, but I'm not sure\r\nif the current codegen is so bad. Do you remember the original Go\r\nexpression that provoked the smallintconst change? Was it something in\r\nmd5/sha1?\r\n",
			"disapproval": false,
			"date": "2012-08-23 07:19:15.271440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It probably was md5/sha1. Don't worry much about it. I reopened the\r\nbug so we don't forget but it's not very high priority.\r\n",
			"disapproval": false,
			"date": "2012-08-31 16:55:16.956010",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6450163: cmd/8g: roll back the small integer constant optimizati...",
	"created": "2012-08-20 07:18:14.785480",
	"patchsets": [
		1,
		2001,
		5001,
		10001
	],
	"modified": "2012-08-23 06:17:38.974960",
	"closed": true,
	"issue": 6450163
}