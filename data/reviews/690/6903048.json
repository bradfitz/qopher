{
	"description": "spec: index and array/slice size constants must fit into an int",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-07 18:11:35.381780",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No changes but some feedback.\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode820\ndoc/go_spec.html:820: of type <code>int</code>.\nOn 2012/12/11 18:36:30, r wrote:\n> \"representable by a value of type int\" is sort of a category error. a value is a\n> value; it's not representing anything.  i think you mean stored in a variable of\n> type int, but that sounds wrong, and the same glitch occurs elsewhere. you've\n> added a lot more instances of this, so let's clean it up everywhere.\n> \n> since a type represents a range of values (we've used that idea when introducing\n> types), how about just 'representable by an int'? or maybe 'in the range of the\n> int type'?\n\nI am fine with changing this, but:\n\na) what you are suggesting is close to what I had at first, and iant objected;\nb) we are using the current phrase \"representable by a value of type T\" elsewhere fairly consistently (see Assignability, Conversions, Constant expressions, etc.).\n\n(The notions of \"representable as a value of type int\", \"integer value\", \"value of integer type\", and \"value of int type\" are all very similar in English, but they all mean different things in the spec. It's probably worthwhile making the nomenclature clear in the spec at some point but not in this CL).\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, the maximum size of an array type may be restricted by\nOn 2012/12/11 18:12:35, iant wrote:\n> But now you are back to not setting a lower bound.  That was my original\n> complaint, and rsc mentioned it also.\n\nquoting rsc: \"I think it would be fine not to set a lower bound and say...\"\n(what I have written now).\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, the maximum size of an array type may be restricted by\nOn 2012/12/11 18:36:30, r wrote:\n> what is this clause trying to achieve, exactly? a compile-time constraint? a\n> run-time-constraint? mere ass-covering?\n\nIt is a compile-time constraint currently implemented by 6g. The clause is merely permitting an implementation to have such a constraint (rather than having to resort to some other error - say out of memory, at run-time). So yes, \"ass-covering\"...",
			"disapproval": false,
			"date": "2012-12-11 19:32:55.633290",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=614c33a2ccd2 ***\n\nspec: index and array/slice size constants must fit into an int\n\nR=r, rsc, iant, ken\nCC=golang-dev\nhttps://codereview.appspot.com/6903048",
			"disapproval": false,
			"date": "2012-12-12 19:06:30.769430",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ian, do you have any suggestions on the lower bound? In general if the\r\nelement size is large enough the lower bound might be 1.\r\n",
			"disapproval": false,
			"date": "2012-12-11 18:27:44.748520",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I still think we should have a lower bound, as we do in our other implementation restrictions.\n\n\"Implementation restriction: an implementation may restrict the maximum permissible array length.  For instance, the maximum size of an array type may be restricted by the size of the target's virtual address space.  That said, every implementation must support arrays for which unsafe.Sizeof applied to a value of the array type will return less than 1073741824 (1G).\"",
			"disapproval": false,
			"date": "2012-12-11 18:35:30.343510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM except for array size bit\n\nhttps://codereview.appspot.com/6903048/diff/21003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/21003/doc/go_spec.html#newcode839\ndoc/go_spec.html:839: array length further, but it must always permit at least <code>int32</code> values.\nI am not sure about this. If it is an array of large things, 8g is not going to let you declare many of them. For example:\n\ntype T struct [ [1<<20]byte }\nvar x [1<<20]T\n\nis not okay.\n\nI think it would be fine not to set a lower bound and say\n\nAn implementation may restrict the maximum permissible array length.\nFor instance, the maximum size of an array type may be restricted by the\nsize of the target's virtual address space.\n\nhttps://codereview.appspot.com/6903048/diff/21003/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, on a 64bit platform, the maximum length may be restricted by the size\n64-bit",
			"disapproval": false,
			"date": "2012-12-11 15:53:08.245320",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode819\ndoc/go_spec.html:819: negative <a href=\"#Constants\">constant</a> representable by an <code>int</code> value.\nOn 2012/12/10 20:36:21, iant wrote:\n> Perhaps s/an int value/a value of type int/ ?\n\nDone.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode837\ndoc/go_spec.html:837: Implementation restriction: A compiler may restrict the maximum pemissible\nOn 2012/12/10 20:36:21, iant wrote:\n> s/A compiler/An implementation/\n> s/pemissible/permissible/\n\nDone.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode839\ndoc/go_spec.html:839: may be restricted by the size of the address space.\nOn 2012/12/10 20:36:21, iant wrote:\n> This restriction is too vague.  We can't simply say what we do not permit.  We\n> have to also say what we require, otherwise an implementation can only permit\n> arrays of size < 10.  For example, we could say that every implementation is\n> required to support arrays of length up to 1/2 of the maximum possible integer. \n> Or 1/4, or whatever.\n\nDone.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode2512\ndoc/go_spec.html:2512: <li>a <a href=\"#Constants\">constant</a> index must be representable by a non-negative <code>int</code> value\nOn 2012/12/10 20:36:21, iant wrote:\n> Perhaps \"must be non-negative and must be representable by a value of type int\"?\n\nDone.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode2516\ndoc/go_spec.html:2516: Additionally, for <code>a</code> of type <code>A</code> or <code>*A</code>\nOn 2012/12/10 20:36:21, iant wrote:\n> I don't think you want to say \"Additionally\" here.  It doesn't really work with\n> the fact that this list is not merely restrictions on the index, it also says\n> what a[x] actually means.\n\nDone.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode2646\ndoc/go_spec.html:2646: A <a href=\"#Constants\">constant</a> index must be representable by a non-negative <code>int</code> value.\nOn 2012/12/10 20:36:21, iant wrote:\n> Perhaps \"must be representable by a value of type int and must be non-negative.\"\n\nDone.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode4998\ndoc/go_spec.html:4998: non-negative <code>int</code> value.\nOn 2012/12/10 20:36:21, iant wrote:\n> Same change in wording.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-10 21:52:39.103320",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode820\ndoc/go_spec.html:820: of type <code>int</code>.\n\"representable by a value of type int\" is sort of a category error. a value is a value; it's not representing anything.  i think you mean stored in a variable of type int, but that sounds wrong, and the same glitch occurs elsewhere. you've added a lot more instances of this, so let's clean it up everywhere.\n\nsince a type represents a range of values (we've used that idea when introducing types), how about just 'representable by an int'? or maybe 'in the range of the int type'?\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, the maximum size of an array type may be restricted by\nwhat is this clause trying to achieve, exactly? a compile-time constraint? a run-time-constraint? mere ass-covering?",
			"disapproval": false,
			"date": "2012-12-11 18:36:30.613520",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nwe can do the wording pedantry separately\n\nhttps://codereview.appspot.com/6903048/diff/19004/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/19004/doc/go_spec.html#newcode820\ndoc/go_spec.html:820: of type <code>int</code>.\ni still prefer s/a value of// in this construction, throughout.\nbut if you'd prefer we can separate that debate from this CL.",
			"disapproval": false,
			"date": "2012-12-12 17:39:40.601120",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6903048/diff/21003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/21003/doc/go_spec.html#newcode839\ndoc/go_spec.html:839: array length further, but it must always permit at least <code>int32</code> values.\nOn 2012/12/11 15:53:08, rsc wrote:\n> I am not sure about this. If it is an array of large things, 8g is not going to\n> let you declare many of them. For example:\n> \n> type T struct [ [1<<20]byte }\n> var x [1<<20]T\n> \n> is not okay.\n> \n> I think it would be fine not to set a lower bound and say\n> \n> An implementation may restrict the maximum permissible array length.\n> For instance, the maximum size of an array type may be restricted by the\n> size of the target's virtual address space.\n\nThis is essentially what I had at first. Reverted.\n\nhttps://codereview.appspot.com/6903048/diff/21003/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, on a 64bit platform, the maximum length may be restricted by the size\nOn 2012/12/11 15:53:08, rsc wrote:\n> 64-bit\nACK",
			"disapproval": false,
			"date": "2012-12-11 17:49:31.549860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> what is this clause trying to achieve\r\n\r\nIan wants to make sure that implementations can reject\r\n[1<<20][1<<20][1<<20]byte (no current machine can store one of those\r\nin its virtual address space) but that they cannot reject\r\n[5][5][5]byte.\r\n",
			"disapproval": false,
			"date": "2012-12-11 18:49:54.972970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-10 20:24:45.699600",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think not setting a lower bound is fine. I added the restriction\r\nsuch that implementations are free to enforce sensible restrictions\r\n(such as gc does now) and don't have to resort to some kind of runtime\r\nerror. If an implementation interprets the absence of a lower bound as\r\n\"the maximum permitted size is 10 elements\" that's fine too - but\r\nnobody is going to take that compiler serious...\r\n\r\n- gri\r\n\r\nOn Tue, Dec 11, 2012 at 10:27 AM, Russ Cox <rsc@golang.org> wrote:\r\n> Ian, do you have any suggestions on the lower bound? In general if the\r\n> element size is large enough the lower bound might be 1.\r\n",
			"disapproval": false,
			"date": "2012-12-11 18:31:43.655170",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode819\ndoc/go_spec.html:819: negative <a href=\"#Constants\">constant</a> representable by an <code>int</code> value.\nPerhaps s/an int value/a value of type int/ ?\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode837\ndoc/go_spec.html:837: Implementation restriction: A compiler may restrict the maximum pemissible\ns/A compiler/An implementation/\ns/pemissible/permissible/\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode839\ndoc/go_spec.html:839: may be restricted by the size of the address space.\nThis restriction is too vague.  We can't simply say what we do not permit.  We have to also say what we require, otherwise an implementation can only permit arrays of size < 10.  For example, we could say that every implementation is required to support arrays of length up to 1/2 of the maximum possible integer.  Or 1/4, or whatever.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode2512\ndoc/go_spec.html:2512: <li>a <a href=\"#Constants\">constant</a> index must be representable by a non-negative <code>int</code> value\nPerhaps \"must be non-negative and must be representable by a value of type int\"?\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode2516\ndoc/go_spec.html:2516: Additionally, for <code>a</code> of type <code>A</code> or <code>*A</code>\nI don't think you want to say \"Additionally\" here.  It doesn't really work with the fact that this list is not merely restrictions on the index, it also says what a[x] actually means.\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode2646\ndoc/go_spec.html:2646: A <a href=\"#Constants\">constant</a> index must be representable by a non-negative <code>int</code> value.\nPerhaps \"must be representable by a value of type int and must be non-negative.\"\n\nhttps://codereview.appspot.com/6903048/diff/18001/doc/go_spec.html#newcode4998\ndoc/go_spec.html:4998: non-negative <code>int</code> value.\nSame change in wording.",
			"disapproval": false,
			"date": "2012-12-10 20:36:21.107360",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, the maximum size of an array type may be restricted by\nBut now you are back to not setting a lower bound.  That was my original complaint, and rsc mentioned it also.",
			"disapproval": false,
			"date": "2012-12-11 18:12:35.743450",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode820\ndoc/go_spec.html:820: of type <code>int</code>.\nOn 2012/12/11 19:32:55, gri wrote:\n> On 2012/12/11 18:36:30, r wrote:\n> > \"representable by a value of type int\" is sort of a category error. a value is\n> a\n> > value; it's not representing anything.  i think you mean stored in a variable\n> of\n> > type int, but that sounds wrong, and the same glitch occurs elsewhere. you've\n> > added a lot more instances of this, so let's clean it up everywhere.\n> > \n> > since a type represents a range of values (we've used that idea when\n> introducing\n> > types), how about just 'representable by an int'? or maybe 'in the range of\n> the\n> > int type'?\n> \n> I am fine with changing this, but:\n> \n> a) what you are suggesting is close to what I had at first, and iant objected;\n> b) we are using the current phrase \"representable by a value of type T\"\n> elsewhere fairly consistently (see Assignability, Conversions, Constant\n> expressions, etc.).\n> \n> (The notions of \"representable as a value of type int\", \"integer value\", \"value\n> of integer type\", and \"value of int type\" are all very similar in English, but\n> they all mean different things in the spec. It's probably worthwhile making the\n> nomenclature clear in the spec at some point but not in this CL).\n\nI objected mainly because of the inconsistency: I saw that other places in the spec used different wording to express the concept, and I thought that we should use that same wording in this CL.  If you change the rest of the spec to use some new wording, I'm OK with that.\n\nI would normally say something like \"the constant must be representable in the type int\" but I want the spec to be consistent in the words used for this concept.\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, the maximum size of an array type may be restricted by\nOn 2012/12/11 19:32:55, gri wrote:\n> On 2012/12/11 18:12:35, iant wrote:\n> > But now you are back to not setting a lower bound.  That was my original\n> > complaint, and rsc mentioned it also.\n> \n> quoting rsc: \"I think it would be fine not to set a lower bound and say...\"\n> (what I have written now).\n> \n\nSorry, you're quite right, I did misread rsc.\n\nBut if we permit the implementation to have an upper bound I still want a lower bound.",
			"disapproval": false,
			"date": "2012-12-11 19:50:27.744050",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-12 14:47:35.947030",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Specific wording aside, it sounds like everybody is ok with the actual\r\ncontent of the proposed change (array/slice sizes/indices must fit\r\ninto int). If so, I can update/remove some of the issues filed. I'll\r\ntake silence as a yes...\r\n\r\nApropos the implementation restriction: perhaps I should just remove it.\r\n- gri\r\n\r\n\r\nOn Tue, Dec 11, 2012 at 11:50 AM,  <iant@golang.org> wrote:\r\n> FYI\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html\r\n> File doc/go_spec.html (right):\r\n>\r\n> https://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode820\r\n> doc/go_spec.html:820: of type <code>int</code>.\r\n> On 2012/12/11 19:32:55, gri wrote:\r\n>>\r\n>> On 2012/12/11 18:36:30, r wrote:\r\n>> > \"representable by a value of type int\" is sort of a category error.\r\n>\r\n> a value is\r\n>>\r\n>> a\r\n>> > value; it's not representing anything.  i think you mean stored in a\r\n>\r\n> variable\r\n>>\r\n>> of\r\n>> > type int, but that sounds wrong, and the same glitch occurs\r\n>\r\n> elsewhere. you've\r\n>>\r\n>> > added a lot more instances of this, so let's clean it up everywhere.\r\n>> >\r\n>> > since a type represents a range of values (we've used that idea when\r\n>> introducing\r\n>> > types), how about just 'representable by an int'? or maybe 'in the\r\n>\r\n> range of\r\n>>\r\n>> the\r\n>> > int type'?\r\n>\r\n>\r\n>> I am fine with changing this, but:\r\n>\r\n>\r\n>> a) what you are suggesting is close to what I had at first, and iant\r\n>\r\n> objected;\r\n>>\r\n>> b) we are using the current phrase \"representable by a value of type\r\n>\r\n> T\"\r\n>>\r\n>> elsewhere fairly consistently (see Assignability, Conversions,\r\n>\r\n> Constant\r\n>>\r\n>> expressions, etc.).\r\n>\r\n>\r\n>> (The notions of \"representable as a value of type int\", \"integer\r\n>\r\n> value\", \"value\r\n>>\r\n>> of integer type\", and \"value of int type\" are all very similar in\r\n>\r\n> English, but\r\n>>\r\n>> they all mean different things in the spec. It's probably worthwhile\r\n>\r\n> making the\r\n>>\r\n>> nomenclature clear in the spec at some point but not in this CL).\r\n>\r\n>\r\n> I objected mainly because of the inconsistency: I saw that other places\r\n> in the spec used different wording to express the concept, and I thought\r\n> that we should use that same wording in this CL.  If you change the rest\r\n> of the spec to use some new wording, I'm OK with that.\r\n>\r\n> I would normally say something like \"the constant must be representable\r\n> in the type int\" but I want the spec to be consistent in the words used\r\n> for this concept.\r\n>\r\n>\r\n> https://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode840\r\n> doc/go_spec.html:840: For instance, the maximum size of an array type\r\n> may be restricted by\r\n> On 2012/12/11 19:32:55, gri wrote:\r\n>>\r\n>> On 2012/12/11 18:12:35, iant wrote:\r\n>> > But now you are back to not setting a lower bound.  That was my\r\n>\r\n> original\r\n>>\r\n>> > complaint, and rsc mentioned it also.\r\n>\r\n>\r\n>> quoting rsc: \"I think it would be fine not to set a lower bound and\r\n>\r\n> say...\"\r\n>>\r\n>> (what I have written now).\r\n>\r\n>\r\n>\r\n> Sorry, you're quite right, I did misread rsc.\r\n>\r\n> But if we permit the implementation to have an upper bound I still want\r\n> a lower bound.\r\n>\r\n> https://codereview.appspot.com/6903048/\r\n",
			"disapproval": false,
			"date": "2012-12-11 20:02:46.102730",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/18002/doc/go_spec.html#newcode840\ndoc/go_spec.html:840: For instance, the maximum size of an array type may be restricted by\nOn 2012/12/11 19:50:27, iant wrote:\n> On 2012/12/11 19:32:55, gri wrote:\n> > On 2012/12/11 18:12:35, iant wrote:\n> > > But now you are back to not setting a lower bound.  That was my original\n> > > complaint, and rsc mentioned it also.\n> > \n> > quoting rsc: \"I think it would be fine not to set a lower bound and say...\"\n> > (what I have written now).\n> > \n> \n> Sorry, you're quite right, I did misread rsc.\n> \n> But if we permit the implementation to have an upper bound I still want a lower\n> bound.\n\nI've left the restriction away now. If in doubt, leave it out. We can always add it later if we find an acceptable phrasing.\n\nHopefully we cannot mostly agree on this CL.",
			"disapproval": false,
			"date": "2012-12-12 06:46:05.356090",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6903048/diff/19004/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6903048/diff/19004/doc/go_spec.html#newcode820\ndoc/go_spec.html:820: of type <code>int</code>.\nOn 2012/12/12 17:39:40, r wrote:\n> i still prefer s/a value of// in this construction, throughout.\n> but if you'd prefer we can separate that debate from this CL.\n\nHappy to fix, but I like to get this CL in for now.\nI filed Issue 4532 so we don't forget this.",
			"disapproval": false,
			"date": "2012-12-12 19:02:45.760010",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6903048: spec: index and array/slice size constants must fit into int",
	"created": "2012-12-07 18:03:51.445320",
	"patchsets": [
		1,
		2001,
		4001,
		5002,
		9001,
		10002,
		12001,
		15001,
		15002,
		18001,
		14002,
		21003,
		18002,
		19004,
		28002
	],
	"modified": "2012-12-14 22:18:17.951520",
	"closed": true,
	"issue": 6903048
}