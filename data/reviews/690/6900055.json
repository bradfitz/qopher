{
	"description": "goauth2: Use content-type detection to select codec",
	"cc": [
		"adg@google.com",
		"adg@golang.org",
		"nightlyone@googlemail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "surma@surmair.de",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I apologize for somehow CC'ing golang-dev. I have no idea how that happend.",
			"disapproval": false,
			"date": "2012-12-08 20:58:38.784400",
			"approval": false
		},
		{
			"sender": "surma@surmair.de",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/goauth2/",
			"disapproval": false,
			"date": "2012-12-08 20:55:26.560000",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's entirely appropriate.\r\n\r\n\r\nOn 9 December 2012 07:58, <surma@surmair.de> wrote:\r\n\r\n> I apologize for somehow CC'ing golang-dev. I have no idea how that\r\n> happend.\r\n>\r\n> https://codereview.appspot.**com/6900055/<https://codereview.appspot.com/6900055/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-10 00:39:58.799340",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6900055/diff/11002/oauth/oauth.go\nFile oauth/oauth.go (right):\n\nhttps://codereview.appspot.com/6900055/diff/11002/oauth/oauth.go#newcode308\noauth/oauth.go:308: b.Access = vals.Get(\"access_token\")\nwhat about the refresh token?\n\nhttps://codereview.appspot.com/6900055/diff/11002/oauth/oauth_test.go\nFile oauth/oauth_test.go (right):\n\nhttps://codereview.appspot.com/6900055/diff/11002/oauth/oauth_test.go#newcode44\noauth/oauth_test.go:44: {path: \"/secure\", auth: \"Bearer token2\", body: \"second payload\"},\nPlease add a test for a urlencoded payload.",
			"disapproval": false,
			"date": "2012-12-12 02:22:41.859480",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go\nFile oauth/oauth.go (right):\n\nhttps://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go#newcode254\noauth/oauth.go:254: req.Header.Set(\"Authorization\", \"Bearer \"+t.AccessToken)\nI forgot about this header.\nDoes Facebook accept \"Bearer\" headers?",
			"disapproval": false,
			"date": "2012-12-11 06:32:22.264140",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go\nFile oauth/oauth.go (right):\n\nhttps://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go#newcode296\noauth/oauth.go:296: content := strings.Split(r.Header.Get(\"Content-Type\"), \";\")\ncontent := strings.Split(r.Header.Get(\"Content-Type\"), \";\")[0]\n\nhttps://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go#newcode297\noauth/oauth.go:297: switch content[0] {\nswitch content {\n\nhttps://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go#newcode298\noauth/oauth.go:298: case \"application/x-www-form-urlencoded\", \"text/plain\":\nwhy text/plain?",
			"disapproval": false,
			"date": "2012-12-11 06:33:33.240440",
			"approval": false
		},
		{
			"sender": "surma@surmair.de",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go\nFile oauth/oauth.go (right):\n\nhttps://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go#newcode254\noauth/oauth.go:254: req.Header.Set(\"Authorization\", \"Bearer \"+t.AccessToken)\n> Does Facebook accept \"Bearer\" headers?\nShort answer: Yes.\nLong answer: Yes, it is even the only header which is \na) in the official spec[1]\nb) supported by all of Google, GitHub and Facebook's OAuth providers\n[1]: http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-7.1\n\nhttps://codereview.appspot.com/6900055/diff/5001/oauth/oauth.go#newcode298\noauth/oauth.go:298: case \"application/x-www-form-urlencoded\", \"text/plain\":\nOn 2012/12/11 06:33:33, adg wrote:\n> why text/plain?\n\u201cBe liberal in what you accept\u201d, and more hilariously: Because Facebook doesn't seem to set the `Content-Type` header appropriately. They return urlencoded data with a `text/plain` content type. Defaulting to urlencode when getting `text/plain` seems appropriate after browsing the spec.",
			"disapproval": false,
			"date": "2012-12-11 13:13:39.439810",
			"approval": false
		},
		{
			"sender": "surma@surmair.de",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-11 13:12:43.364660",
			"approval": false
		},
		{
			"sender": "surma@surmair.de",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-13 13:18:18.515880",
			"approval": false
		},
		{
			"sender": "surma@surmair.de",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com, adg@golang.org, nightlyone@googlemail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-15 08:13:57.130490",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-14 01:23:23.726650",
			"approval": true
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-15 08:21:13.544780",
			"approval": true
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6900055/diff/18001/oauth/oauth.go\nFile oauth/oauth.go (right):\n\nhttps://codereview.appspot.com/6900055/diff/18001/oauth/oauth.go#newcode296\noauth/oauth.go:296: content := strings.Split(r.Header.Get(\"Content-Type\"), \";\")[0]\nWhat about using the ParseMediaType function from \"net/mime\" package here?",
			"disapproval": false,
			"date": "2012-12-15 02:36:51.176190",
			"approval": false
		},
		{
			"sender": "surma@surmair.de",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6900055/diff/18001/oauth/oauth.go\nFile oauth/oauth.go (right):\n\nhttps://codereview.appspot.com/6900055/diff/18001/oauth/oauth.go#newcode296\noauth/oauth.go:296: content := strings.Split(r.Header.Get(\"Content-Type\"), \";\")[0]\nOn 2012/12/15 02:36:51, ioe wrote:\n> What about using the ParseMediaType function from \"net/mime\" package here?\nGood point. Did not think of that package.",
			"disapproval": false,
			"date": "2012-12-15 08:13:27.076150",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"surma@surmair.de",
				"adg@google.com",
				"adg@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/goauth2/source/detail?r=f3b3146d6c91 ***\n\ngoauth2: Use content-type detection to select codec\n\nR=adg, adg, nightlyone\nCC=golang-dev\nhttps://codereview.appspot.com/6900055\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2012-12-16 22:12:06.868390",
			"approval": false
		}
	],
	"owner_email": "surma@surmair.de",
	"private": false,
	"base_url": "",
	"owner": "Surma",
	"subject": "code review 6900055: goauth2: Use content-type detection to select codec",
	"created": "2012-12-08 20:53:24.627090",
	"patchsets": [
		1,
		2001,
		5001,
		11002,
		18001,
		24002,
		25003
	],
	"modified": "2012-12-16 22:12:06.868390",
	"closed": false,
	"issue": 6900055
}