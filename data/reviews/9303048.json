{
	"description": "go.exp/go/types: more API tweaks\n\n- Expose some internal functionality via types.Type\n  per discussion: Builtins, Underlying, Deref.\n- Removed QualifiedIdent and relatives.\n- Document existing API better.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp",
			"disapproval": false,
			"date": "2013-05-15 23:04:14.420440",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9303048/diff/6016/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode12\ngo/types/types.go:12: // Underlying returns the underlying type of a type.\nExplain what this means?\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode15\ngo/types/types.go:15: // For a pointer type (or a named type denoting a pointer type),\n\"denoting\" isn't a spec word.  Is \"whose underlying type is a pointer\" too verbose?\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode25\ngo/types/types.go:25: // and some others. What is the design principle?\nPrefer not to add methods if they could in principle be external.  Also, avoid predicates like IsIdentical to avoid the binary method problem.\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode218\ngo/types/types.go:218: // TODO(gri): Do we keep ForEach or should we abandon it in favor or Len and At?\nI say abandon, for now.\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode287\ngo/types/types.go:287: type Builtin struct {\nThanks!\n\nhttps://codereview.appspot.com/9303048/diff/6016/ssa/util.go\nFile ssa/util.go (right):\n\nhttps://codereview.appspot.com/9303048/diff/6016/ssa/util.go#newcode49\nssa/util.go:49: func underlyingType(typ types.Type) types.Type {\nYou could delete this if you like.  Or leave that for me.\nDitto indirect() and deref() below.",
			"disapproval": false,
			"date": "2013-05-16 17:04:30.043190",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-16 17:04:46.681850",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode12\ngo/types/types.go:12: // Underlying returns the underlying type of a type.\nOn 2013/05/16 17:04:30, adonovan wrote:\n> Explain what this means?\n\nNah. This is a language term defined in the spec.\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode15\ngo/types/types.go:15: // For a pointer type (or a named type denoting a pointer type),\nOn 2013/05/16 17:04:30, adonovan wrote:\n> \"denoting\" isn't a spec word.  Is \"whose underlying type is a pointer\" too\n> verbose?\n\n\"denote\" is used on purpose in the spec, see e.g.: http://tip.golang.org/ref/spec#Declarations_and_scope\nA declaration is used to have an identifier denote a type.\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode25\ngo/types/types.go:25: // and some others. What is the design principle?\nOn 2013/05/16 17:04:30, adonovan wrote:\n> Prefer not to add methods if they could in principle be external.  Also, avoid\n> predicates like IsIdentical to avoid the binary method problem.\n\nACK.\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode218\ngo/types/types.go:218: // TODO(gri): Do we keep ForEach or should we abandon it in favor or Len and At?\nOn 2013/05/16 17:04:30, adonovan wrote:\n> I say abandon, for now.\n\nACK. Perhaps next CL.\n\nhttps://codereview.appspot.com/9303048/diff/6016/go/types/types.go#newcode287\ngo/types/types.go:287: type Builtin struct {\nOn 2013/05/16 17:04:30, adonovan wrote:\n> Thanks!\nACK.\n\nhttps://codereview.appspot.com/9303048/diff/6016/ssa/util.go\nFile ssa/util.go (right):\n\nhttps://codereview.appspot.com/9303048/diff/6016/ssa/util.go#newcode49\nssa/util.go:49: func underlyingType(typ types.Type) types.Type {\nOn 2013/05/16 17:04:30, adonovan wrote:\n> You could delete this if you like.  Or leave that for me.\n> Ditto indirect() and deref() below.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-16 23:27:23.715530",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nGreat!",
			"disapproval": false,
			"date": "2013-05-17 01:51:03.786460",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8633f918ffec&repo=exp ***\n\ngo.exp/go/types: more API tweaks\n\n- Expose some internal functionality via types.Type\n  per discussion: Builtins, Underlying, Deref.\n- Removed QualifiedIdent and relatives.\n- Document existing API better.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/9303048",
			"disapproval": false,
			"date": "2013-05-17 05:09:16.322560",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 9303048: go.exp/go/types: more API tweaks",
	"created": "2013-05-15 21:24:35.027160",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		9002,
		11001,
		11002,
		6016,
		18001,
		19029,
		3016,
		29001,
		22030
	],
	"modified": "2013-05-17 05:09:17.954380",
	"closed": true,
	"issue": 9303048
}