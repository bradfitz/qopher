{
	"description": "pkg: remove .String() from some print arguments\n\nI found these by adding a check to govet, but the check\nproduces far too many false positives to be useful.\nEven so, these few seem worth cleaning up.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"iant@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-27 19:23:47.740039",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nOn Oct 27, 2011 12:23 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> pkg: remove .String() from some print arguments\n>\n> I found these by adding a check to govet, but the check\n> produces far too many false positives to be useful.\n> Even so, these few seem worth cleaning up.\n>\n> Please review this at http://codereview.appspot.com/**5311067/<http://codereview.appspot.com/5311067/>\n>\n> Affected files:\n>  M src/pkg/crypto/bcrypt/bcrypt_**test.go\n>  M src/pkg/exp/gui/x11/conn.go\n>  M src/pkg/expvar/expvar.go\n>  M src/pkg/go/ast/print.go\n>  M src/pkg/go/scanner/errors.go\n>  M src/pkg/go/scanner/scanner_**test.go\n>  M src/pkg/gob/decode.go\n>  M src/pkg/gob/encode.go\n>  M src/pkg/smtp/smtp_test.go\n>  M src/pkg/strconv/fp_test.go\n>\n>\n> Index: src/pkg/crypto/bcrypt/bcrypt_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/bcrypt/**bcrypt_test.go\n> +++ b/src/pkg/crypto/bcrypt/**bcrypt_test.go\n> @@ -86,7 +86,7 @@\n>                        t.Errorf(\"%s: Should have returned an error\", name)\n>                }\n>                if err != nil && err != expected {\n> -                       t.Errorf(\"%s gave err %v but should have given\n> %v\", name, err.String(), expected.String())\n> +                       t.Errorf(\"%s gave err %v but should have given\n> %v\", name, err, expected)\n>                }\n>        }\n>        for _, iht := range invalidTests {\n> Index: src/pkg/exp/gui/x11/conn.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/gui/x11/conn.go\n> +++ b/src/pkg/exp/gui/x11/conn.go\n> @@ -87,7 +87,7 @@\n>                        setU32LE(c.flushBuf0[16:20], uint32(y<<16))\n>                        if _, err := c.w.Write(c.flushBuf0[:24]); err !=\n> nil {\n>                                if err != os.EOF {\n> -                                       log.Println(\"x11:\", err.String())\n> +                                       log.Println(\"x11:\", err)\n>                                }\n>                                return\n>                        }\n> @@ -106,7 +106,7 @@\n>                                x += nx\n>                                if _, err := c.w.Write(c.flushBuf1[:nx]);\n> err != nil {\n>                                        if err != os.EOF {\n> -                                               log.Println(\"x11:\",\n> err.String())\n> +                                               log.Println(\"x11:\", err)\n>                                        }\n>                                        return\n>                                }\n> @@ -114,7 +114,7 @@\n>                }\n>                if err := c.w.Flush(); err != nil {\n>                        if err != os.EOF {\n> -                               log.Println(\"x11:\", err.String())\n> +                               log.Println(\"x11:\", err)\n>                        }\n>                        return\n>                }\n> Index: src/pkg/expvar/expvar.go\n> ==============================**==============================**=======\n> --- a/src/pkg/expvar/expvar.go\n> +++ b/src/pkg/expvar/expvar.go\n> @@ -102,7 +102,7 @@\n>                if !first {\n>                        fmt.Fprintf(b, \", \")\n>                }\n> -               fmt.Fprintf(b, \"\\\"%s\\\": %v\", key, val.String())\n> +               fmt.Fprintf(b, \"\\\"%s\\\": %v\", key, val)\n>                first = false\n>        }\n>        fmt.Fprintf(b, \"}\")\n> Index: src/pkg/go/ast/print.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/ast/print.go\n> +++ b/src/pkg/go/ast/print.go\n> @@ -149,7 +149,7 @@\n>                p.print(x.Elem())\n>\n>        case reflect.Map:\n> -               p.printf(\"%s (len = %d) {\\n\", x.Type().String(), x.Len())\n> +               p.printf(\"%s (len = %d) {\\n\", x.Type(), x.Len())\n>                p.indent++\n>                for _, key := range x.MapKeys() {\n>                        p.print(key)\n> @@ -178,7 +178,7 @@\n>                        p.printf(\"%#q\", s)\n>                        return\n>                }\n> -               p.printf(\"%s (len = %d) {\\n\", x.Type().String(), x.Len())\n> +               p.printf(\"%s (len = %d) {\\n\", x.Type(), x.Len())\n>                p.indent++\n>                for i, n := 0, x.Len(); i < n; i++ {\n>                        p.printf(\"%d: \", i)\n> @@ -189,7 +189,7 @@\n>                p.printf(\"}\")\n>\n>        case reflect.Struct:\n> -               p.printf(\"%s {\\n\", x.Type().String())\n> +               p.printf(\"%s {\\n\", x.Type())\n>                p.indent++\n>                t := x.Type()\n>                for i, n := 0, t.NumField(); i < n; i++ {\n> Index: src/pkg/go/scanner/errors.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/scanner/errors.go\n> +++ b/src/pkg/go/scanner/errors.go\n> @@ -92,7 +92,7 @@\n>        case 1:\n>                return p[0].String()\n>        }\n> -       return fmt.Sprintf(\"%s (and %d more errors)\", p[0].String(),\n> len(p)-1)\n> +       return fmt.Sprintf(\"%s (and %d more errors)\", p[0], len(p)-1)\n>  }\n>\n>  // These constants control the construction of the ErrorList\n> Index: src/pkg/go/scanner/scanner_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/scanner/scanner_**test.go\n> +++ b/src/pkg/go/scanner/scanner_**test.go\n> @@ -237,7 +237,7 @@\n>                }\n>                checkPos(t, lit, pos, epos)\n>                if tok != e.tok {\n> -                       t.Errorf(\"bad token for %q: got %s, expected %s\",\n> lit, tok.String(), e.tok.String())\n> +                       t.Errorf(\"bad token for %q: got %s, expected %s\",\n> lit, tok, e.tok)\n>                }\n>                if e.tok.IsLiteral() && lit != e.lit {\n>                        t.Errorf(\"bad literal for %q: got %q, expected %q\",\n> lit, lit, e.lit)\n> @@ -286,7 +286,7 @@\n>                                }\n>                                checkPos(t, line, pos, semiPos)\n>                        } else {\n> -                               t.Errorf(\"bad token for %q: got %s,\n> expected ;\", line, tok.String())\n> +                               t.Errorf(\"bad token for %q: got %s,\n> expected ;\", line, tok)\n>                        }\n>                } else if tok == token.SEMICOLON {\n>                        t.Errorf(\"bad token for %q: got ;, expected no ;\",\n> line)\n> @@ -509,7 +509,7 @@\n>        s.Scan()              // true\n>        _, tok, _ := s.Scan() // {\n>        if tok != token.LBRACE {\n> -               t.Errorf(\"bad token: got %s, expected %s\", tok.String(),\n> token.LBRACE)\n> +               t.Errorf(\"bad token: got %s, expected %s\", tok,\n> token.LBRACE)\n>        }\n>\n>        // 2nd init\n> @@ -521,7 +521,7 @@\n>        }\n>        _, tok, _ = s.Scan() // go\n>        if tok != token.GO {\n> -               t.Errorf(\"bad token: got %s, expected %s\", tok.String(),\n> token.GO)\n> +               t.Errorf(\"bad token: got %s, expected %s\", tok, token.GO)\n>        }\n>\n>        if s.ErrorCount != 0 {\n> Index: src/pkg/gob/decode.go\n> ==============================**==============================**=======\n> --- a/src/pkg/gob/decode.go\n> +++ b/src/pkg/gob/decode.go\n> @@ -881,7 +881,7 @@\n>                }\n>        }\n>        if op == nil {\n> -               errorf(\"decode can't handle type %s\", rt.String())\n> +               errorf(\"decode can't handle type %s\", rt)\n>        }\n>        return &op, indir\n>  }\n> @@ -1110,7 +1110,7 @@\n>                wireStruct = wire.StructT\n>        }\n>        if wireStruct == nil {\n> -               errorf(\"type mismatch in decoder: want struct type %s; got\n> non-struct\", rt.String())\n> +               errorf(\"type mismatch in decoder: want struct type %s; got\n> non-struct\", rt)\n>        }\n>        engine = new(decEngine)\n>        engine.instr = make([]decInstr, len(wireStruct.Field))\n> Index: src/pkg/gob/encode.go\n> ==============================**==============================**=======\n> --- a/src/pkg/gob/encode.go\n> +++ b/src/pkg/gob/encode.go\n> @@ -610,7 +610,7 @@\n>                }\n>        }\n>        if op == nil {\n> -               errorf(\"can't happen: encode type %s\", rt.String())\n> +               errorf(\"can't happen: encode type %s\", rt)\n>        }\n>        return &op, indir\n>  }\n> Index: src/pkg/smtp/smtp_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/smtp/smtp_test.go\n> +++ b/src/pkg/smtp/smtp_test.go\n> @@ -37,14 +37,14 @@\n>                        t.Errorf(\"#%d got response %s, expected %s\", i,\n> resp, test.responses[0])\n>                }\n>                if err != nil {\n> -                       t.Errorf(\"#%d error: %s\", i, err.String())\n> +                       t.Errorf(\"#%d error: %s\", i, err)\n>                }\n>                for j := range test.challenges {\n>                        challenge := []byte(test.challenges[j])\n>                        expected := []byte(test.responses[j+1])\n>                        resp, err := test.auth.Next(challenge, true)\n>                        if err != nil {\n> -                               t.Errorf(\"#%d error: %s\", i, err.String())\n> +                               t.Errorf(\"#%d error: %s\", i, err)\n>                                continue testLoop\n>                        }\n>                        if !bytes.Equal(resp, expected) {\n> @@ -74,13 +74,13 @@\n>        c := &Client{Text: textproto.NewConn(fake)}\n>\n>        if err := c.helo(); err != nil {\n> -               t.Fatalf(\"HELO failed: %s\", err.String())\n> +               t.Fatalf(\"HELO failed: %s\", err)\n>        }\n>        if err := c.ehlo(); err == nil {\n>                t.Fatalf(\"Expected first EHLO to fail\")\n>        }\n>        if err := c.ehlo(); err != nil {\n> -               t.Fatalf(\"Second EHLO failed: %s\", err.String())\n> +               t.Fatalf(\"Second EHLO failed: %s\", err)\n>        }\n>\n>        if ok, args := c.Extension(\"aUtH\"); !ok || args != \"LOGIN PLAIN\" {\n> @@ -105,14 +105,14 @@\n>        c.tls = true\n>        c.serverName = \"smtp.google.com\"\n>        if err := c.Auth(PlainAuth(\"\", \"user\", \"pass\", \"smtp.google.com\"));\n> err != nil {\n> -               t.Fatalf(\"AUTH failed: %s\", err.String())\n> +               t.Fatalf(\"AUTH failed: %s\", err)\n>        }\n>\n>        if err := c.Mail(\"user@gmail.com\"); err != nil {\n> -               t.Fatalf(\"MAIL failed: %s\", err.String())\n> +               t.Fatalf(\"MAIL failed: %s\", err)\n>        }\n>        if err := c.Rcpt(\"golang-nuts@**googlegroups.com<golang-nuts@googlegroups.com>\");\n> err != nil {\n> -               t.Fatalf(\"RCPT failed: %s\", err.String())\n> +               t.Fatalf(\"RCPT failed: %s\", err)\n>        }\n>        msg := `From: user@gmail.com\n>  To: golang-nuts@googlegroups.com\n> @@ -123,17 +123,17 @@\n>  Goodbye.`\n>        w, err := c.Data()\n>        if err != nil {\n> -               t.Fatalf(\"DATA failed: %s\", err.String())\n> +               t.Fatalf(\"DATA failed: %s\", err)\n>        }\n>        if _, err := w.Write([]byte(msg)); err != nil {\n> -               t.Fatalf(\"Data write failed: %s\", err.String())\n> +               t.Fatalf(\"Data write failed: %s\", err)\n>        }\n>        if err := w.Close(); err != nil {\n> -               t.Fatalf(\"Bad data response: %s\", err.String())\n> +               t.Fatalf(\"Bad data response: %s\", err)\n>        }\n>\n>        if err := c.Quit(); err != nil {\n> -               t.Fatalf(\"QUIT failed: %s\", err.String())\n> +               t.Fatalf(\"QUIT failed: %s\", err)\n>        }\n>\n>        bcmdbuf.Flush()\n> Index: src/pkg/strconv/fp_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/strconv/fp_test.go\n> +++ b/src/pkg/strconv/fp_test.go\n> @@ -96,7 +96,7 @@\n>  func TestFp(t *testing.T) {\n>        f, err := os.Open(\"testfp.txt\")\n>        if err != nil {\n> -               t.Fatal(\"testfp: open testfp.txt:\", err.String())\n> +               t.Fatal(\"testfp: open testfp.txt:\", err)\n>        }\n>        defer f.Close()\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-27 19:28:59.447499",
			"approval": true
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nrsc@golang.org writes:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> pkg: remove .String() from some print arguments\n>\n> I found these by adding a check to govet, but the check\n> produces far too many false positives to be useful.\n> Even so, these few seem worth cleaning up.\n>\n> Please review this at http://codereview.appspot.com/5311067/\n>\n> Affected files:\n>   M src/pkg/crypto/bcrypt/bcrypt_test.go\n>   M src/pkg/exp/gui/x11/conn.go\n>   M src/pkg/expvar/expvar.go\n>   M src/pkg/go/ast/print.go\n>   M src/pkg/go/scanner/errors.go\n>   M src/pkg/go/scanner/scanner_test.go\n>   M src/pkg/gob/decode.go\n>   M src/pkg/gob/encode.go\n>   M src/pkg/smtp/smtp_test.go\n>   M src/pkg/strconv/fp_test.go\n>\n>\n> Index: src/pkg/crypto/bcrypt/bcrypt_test.go\n> ===================================================================\n> --- a/src/pkg/crypto/bcrypt/bcrypt_test.go\n> +++ b/src/pkg/crypto/bcrypt/bcrypt_test.go\n> @@ -86,7 +86,7 @@\n>  \t\t\tt.Errorf(\"%s: Should have returned an error\", name)\n>  \t\t}\n>  \t\tif err != nil && err != expected {\n> -\t\t\tt.Errorf(\"%s gave err %v but should have given\n> %v\", name, err.String(), expected.String())\n> +\t\t\tt.Errorf(\"%s gave err %v but should have given %v\", name, err, expected)\n>  \t\t}\n>  \t}\n>  \tfor _, iht := range invalidTests {\n> Index: src/pkg/exp/gui/x11/conn.go\n> ===================================================================\n> --- a/src/pkg/exp/gui/x11/conn.go\n> +++ b/src/pkg/exp/gui/x11/conn.go\n> @@ -87,7 +87,7 @@\n>  \t\t\tsetU32LE(c.flushBuf0[16:20], uint32(y<<16))\n>  \t\t\tif _, err := c.w.Write(c.flushBuf0[:24]); err != nil {\n>  \t\t\t\tif err != os.EOF {\n> -\t\t\t\t\tlog.Println(\"x11:\", err.String())\n> +\t\t\t\t\tlog.Println(\"x11:\", err)\n>  \t\t\t\t}\n>  \t\t\t\treturn\n>  \t\t\t}\n> @@ -106,7 +106,7 @@\n>  \t\t\t\tx += nx\n>  \t\t\t\tif _, err := c.w.Write(c.flushBuf1[:nx]); err != nil {\n>  \t\t\t\t\tif err != os.EOF {\n> -\t\t\t\t\t\tlog.Println(\"x11:\", err.String())\n> +\t\t\t\t\t\tlog.Println(\"x11:\", err)\n>  \t\t\t\t\t}\n>  \t\t\t\t\treturn\n>  \t\t\t\t}\n> @@ -114,7 +114,7 @@\n>  \t\t}\n>  \t\tif err := c.w.Flush(); err != nil {\n>  \t\t\tif err != os.EOF {\n> -\t\t\t\tlog.Println(\"x11:\", err.String())\n> +\t\t\t\tlog.Println(\"x11:\", err)\n>  \t\t\t}\n>  \t\t\treturn\n>  \t\t}\n> Index: src/pkg/expvar/expvar.go\n> ===================================================================\n> --- a/src/pkg/expvar/expvar.go\n> +++ b/src/pkg/expvar/expvar.go\n> @@ -102,7 +102,7 @@\n>  \t\tif !first {\n>  \t\t\tfmt.Fprintf(b, \", \")\n>  \t\t}\n> -\t\tfmt.Fprintf(b, \"\\\"%s\\\": %v\", key, val.String())\n> +\t\tfmt.Fprintf(b, \"\\\"%s\\\": %v\", key, val)\n>  \t\tfirst = false\n>  \t}\n>  \tfmt.Fprintf(b, \"}\")\n> Index: src/pkg/go/ast/print.go\n> ===================================================================\n> --- a/src/pkg/go/ast/print.go\n> +++ b/src/pkg/go/ast/print.go\n> @@ -149,7 +149,7 @@\n>  \t\tp.print(x.Elem())\n>\n>  \tcase reflect.Map:\n> -\t\tp.printf(\"%s (len = %d) {\\n\", x.Type().String(), x.Len())\n> +\t\tp.printf(\"%s (len = %d) {\\n\", x.Type(), x.Len())\n>  \t\tp.indent++\n>  \t\tfor _, key := range x.MapKeys() {\n>  \t\t\tp.print(key)\n> @@ -178,7 +178,7 @@\n>  \t\t\tp.printf(\"%#q\", s)\n>  \t\t\treturn\n>  \t\t}\n> -\t\tp.printf(\"%s (len = %d) {\\n\", x.Type().String(), x.Len())\n> +\t\tp.printf(\"%s (len = %d) {\\n\", x.Type(), x.Len())\n>  \t\tp.indent++\n>  \t\tfor i, n := 0, x.Len(); i < n; i++ {\n>  \t\t\tp.printf(\"%d: \", i)\n> @@ -189,7 +189,7 @@\n>  \t\tp.printf(\"}\")\n>\n>  \tcase reflect.Struct:\n> -\t\tp.printf(\"%s {\\n\", x.Type().String())\n> +\t\tp.printf(\"%s {\\n\", x.Type())\n>  \t\tp.indent++\n>  \t\tt := x.Type()\n>  \t\tfor i, n := 0, t.NumField(); i < n; i++ {\n> Index: src/pkg/go/scanner/errors.go\n> ===================================================================\n> --- a/src/pkg/go/scanner/errors.go\n> +++ b/src/pkg/go/scanner/errors.go\n> @@ -92,7 +92,7 @@\n>  \tcase 1:\n>  \t\treturn p[0].String()\n>  \t}\n> -\treturn fmt.Sprintf(\"%s (and %d more errors)\", p[0].String(), len(p)-1)\n> +\treturn fmt.Sprintf(\"%s (and %d more errors)\", p[0], len(p)-1)\n>  }\n>\n>  // These constants control the construction of the ErrorList\n> Index: src/pkg/go/scanner/scanner_test.go\n> ===================================================================\n> --- a/src/pkg/go/scanner/scanner_test.go\n> +++ b/src/pkg/go/scanner/scanner_test.go\n> @@ -237,7 +237,7 @@\n>  \t\t}\n>  \t\tcheckPos(t, lit, pos, epos)\n>  \t\tif tok != e.tok {\n> -\t\t\tt.Errorf(\"bad token for %q: got %s, expected\n> %s\", lit, tok.String(), e.tok.String())\n> +\t\t\tt.Errorf(\"bad token for %q: got %s, expected %s\", lit, tok, e.tok)\n>  \t\t}\n>  \t\tif e.tok.IsLiteral() && lit != e.lit {\n>  \t\t\tt.Errorf(\"bad literal for %q: got %q, expected %q\", lit, lit, e.lit)\n> @@ -286,7 +286,7 @@\n>  \t\t\t\t}\n>  \t\t\t\tcheckPos(t, line, pos, semiPos)\n>  \t\t\t} else {\n> -\t\t\t\tt.Errorf(\"bad token for %q: got %s, expected ;\", line, tok.String())\n> +\t\t\t\tt.Errorf(\"bad token for %q: got %s, expected ;\", line, tok)\n>  \t\t\t}\n>  \t\t} else if tok == token.SEMICOLON {\n>  \t\t\tt.Errorf(\"bad token for %q: got ;, expected no ;\", line)\n> @@ -509,7 +509,7 @@\n>  \ts.Scan()              // true\n>  \t_, tok, _ := s.Scan() // {\n>  \tif tok != token.LBRACE {\n> -\t\tt.Errorf(\"bad token: got %s, expected %s\", tok.String(), token.LBRACE)\n> +\t\tt.Errorf(\"bad token: got %s, expected %s\", tok, token.LBRACE)\n>  \t}\n>\n>  \t// 2nd init\n> @@ -521,7 +521,7 @@\n>  \t}\n>  \t_, tok, _ = s.Scan() // go\n>  \tif tok != token.GO {\n> -\t\tt.Errorf(\"bad token: got %s, expected %s\", tok.String(), token.GO)\n> +\t\tt.Errorf(\"bad token: got %s, expected %s\", tok, token.GO)\n>  \t}\n>\n>  \tif s.ErrorCount != 0 {\n> Index: src/pkg/gob/decode.go\n> ===================================================================\n> --- a/src/pkg/gob/decode.go\n> +++ b/src/pkg/gob/decode.go\n> @@ -881,7 +881,7 @@\n>  \t\t}\n>  \t}\n>  \tif op == nil {\n> -\t\terrorf(\"decode can't handle type %s\", rt.String())\n> +\t\terrorf(\"decode can't handle type %s\", rt)\n>  \t}\n>  \treturn &op, indir\n>  }\n> @@ -1110,7 +1110,7 @@\n>  \t\twireStruct = wire.StructT\n>  \t}\n>  \tif wireStruct == nil {\n> -\t\terrorf(\"type mismatch in decoder: want struct type %s;\n> got non-struct\", rt.String())\n> +\t\terrorf(\"type mismatch in decoder: want struct type %s;\n> got non-struct\", rt)\n>  \t}\n>  \tengine = new(decEngine)\n>  \tengine.instr = make([]decInstr, len(wireStruct.Field))\n> Index: src/pkg/gob/encode.go\n> ===================================================================\n> --- a/src/pkg/gob/encode.go\n> +++ b/src/pkg/gob/encode.go\n> @@ -610,7 +610,7 @@\n>  \t\t}\n>  \t}\n>  \tif op == nil {\n> -\t\terrorf(\"can't happen: encode type %s\", rt.String())\n> +\t\terrorf(\"can't happen: encode type %s\", rt)\n>  \t}\n>  \treturn &op, indir\n>  }\n> Index: src/pkg/smtp/smtp_test.go\n> ===================================================================\n> --- a/src/pkg/smtp/smtp_test.go\n> +++ b/src/pkg/smtp/smtp_test.go\n> @@ -37,14 +37,14 @@\n>  \t\t\tt.Errorf(\"#%d got response %s, expected %s\", i, resp, test.responses[0])\n>  \t\t}\n>  \t\tif err != nil {\n> -\t\t\tt.Errorf(\"#%d error: %s\", i, err.String())\n> +\t\t\tt.Errorf(\"#%d error: %s\", i, err)\n>  \t\t}\n>  \t\tfor j := range test.challenges {\n>  \t\t\tchallenge := []byte(test.challenges[j])\n>  \t\t\texpected := []byte(test.responses[j+1])\n>  \t\t\tresp, err := test.auth.Next(challenge, true)\n>  \t\t\tif err != nil {\n> -\t\t\t\tt.Errorf(\"#%d error: %s\", i, err.String())\n> +\t\t\t\tt.Errorf(\"#%d error: %s\", i, err)\n>  \t\t\t\tcontinue testLoop\n>  \t\t\t}\n>  \t\t\tif !bytes.Equal(resp, expected) {\n> @@ -74,13 +74,13 @@\n>  \tc := &Client{Text: textproto.NewConn(fake)}\n>\n>  \tif err := c.helo(); err != nil {\n> -\t\tt.Fatalf(\"HELO failed: %s\", err.String())\n> +\t\tt.Fatalf(\"HELO failed: %s\", err)\n>  \t}\n>  \tif err := c.ehlo(); err == nil {\n>  \t\tt.Fatalf(\"Expected first EHLO to fail\")\n>  \t}\n>  \tif err := c.ehlo(); err != nil {\n> -\t\tt.Fatalf(\"Second EHLO failed: %s\", err.String())\n> +\t\tt.Fatalf(\"Second EHLO failed: %s\", err)\n>  \t}\n>\n>  \tif ok, args := c.Extension(\"aUtH\"); !ok || args != \"LOGIN PLAIN\" {\n> @@ -105,14 +105,14 @@\n>  \tc.tls = true\n>  \tc.serverName = \"smtp.google.com\"\n>  \tif err := c.Auth(PlainAuth(\"\", \"user\", \"pass\",\n> \"smtp.google.com\")); err != nil {\n> -\t\tt.Fatalf(\"AUTH failed: %s\", err.String())\n> +\t\tt.Fatalf(\"AUTH failed: %s\", err)\n>  \t}\n>\n>  \tif err := c.Mail(\"user@gmail.com\"); err != nil {\n> -\t\tt.Fatalf(\"MAIL failed: %s\", err.String())\n> +\t\tt.Fatalf(\"MAIL failed: %s\", err)\n>  \t}\n>  \tif err := c.Rcpt(\"golang-nuts@googlegroups.com\"); err != nil {\n> -\t\tt.Fatalf(\"RCPT failed: %s\", err.String())\n> +\t\tt.Fatalf(\"RCPT failed: %s\", err)\n>  \t}\n>  \tmsg := `From: user@gmail.com\n>  To: golang-nuts@googlegroups.com\n> @@ -123,17 +123,17 @@\n>  Goodbye.`\n>  \tw, err := c.Data()\n>  \tif err != nil {\n> -\t\tt.Fatalf(\"DATA failed: %s\", err.String())\n> +\t\tt.Fatalf(\"DATA failed: %s\", err)\n>  \t}\n>  \tif _, err := w.Write([]byte(msg)); err != nil {\n> -\t\tt.Fatalf(\"Data write failed: %s\", err.String())\n> +\t\tt.Fatalf(\"Data write failed: %s\", err)\n>  \t}\n>  \tif err := w.Close(); err != nil {\n> -\t\tt.Fatalf(\"Bad data response: %s\", err.String())\n> +\t\tt.Fatalf(\"Bad data response: %s\", err)\n>  \t}\n>\n>  \tif err := c.Quit(); err != nil {\n> -\t\tt.Fatalf(\"QUIT failed: %s\", err.String())\n> +\t\tt.Fatalf(\"QUIT failed: %s\", err)\n>  \t}\n>\n>  \tbcmdbuf.Flush()\n> Index: src/pkg/strconv/fp_test.go\n> ===================================================================\n> --- a/src/pkg/strconv/fp_test.go\n> +++ b/src/pkg/strconv/fp_test.go\n> @@ -96,7 +96,7 @@\n>  func TestFp(t *testing.T) {\n>  \tf, err := os.Open(\"testfp.txt\")\n>  \tif err != nil {\n> -\t\tt.Fatal(\"testfp: open testfp.txt:\", err.String())\n> +\t\tt.Fatal(\"testfp: open testfp.txt:\", err)\n>  \t}\n>  \tdefer f.Close()\n",
			"disapproval": false,
			"date": "2011-10-27 19:42:27.648875",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=738f105abf75 ***\n\npkg: remove .String() from some print arguments\n\nI found these by adding a check to govet, but the check\nproduces far too many false positives to be useful.\nEven so, these few seem worth cleaning up.\n\nR=golang-dev, bradfitz, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5311067",
			"disapproval": false,
			"date": "2011-10-28 01:03:58.594483",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5311067: pkg: remove .String() from some print arguments",
	"created": "2011-10-27 19:14:26.439690",
	"patchsets": [
		1,
		2001,
		3021,
		9001
	],
	"modified": "2011-10-28 01:04:00.818586",
	"closed": true,
	"issue": 5311067
}