{
	"description": "runtime/*: deflake tests",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-04 20:36:25.239170",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/04 20:36:25, albert.strasheim wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nLooks good, but please describe what the problem is and wait for approval from somebody from core team, I don't know what the commit policy currently is.",
			"disapproval": false,
			"date": "2013-04-04 20:41:16.639320",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but put a comment above fixEnv which isn't the best-named function.\r\n On Apr 4, 2013 1:36 PM, <fullung@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> runtime, runtime/race: exclude GOGCTRACE from subprocess test\r\n> environment.\r\n>\r\n> Please review this at https://codereview.appspot.**com/8366044/<https://codereview.appspot.com/8366044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/crash_test.go\r\n>   M src/pkg/runtime/race/race_**test.go\r\n>\r\n>\r\n> Index: src/pkg/runtime/crash_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/crash_test.**go\r\n> +++ b/src/pkg/runtime/crash_test.**go\r\n> @@ -14,6 +14,16 @@\r\n>         \"text/template\"\r\n>  )\r\n>\r\n> +func fixEnv(cmd *exec.Cmd) *exec.Cmd {\r\n> +       for _, env := range os.Environ() {\r\n> +               if strings.HasPrefix(env, \"GOGCTRACE=\") {\r\n> +                       continue\r\n> +               }\r\n> +               cmd.Env = append(cmd.Env, env)\r\n> +       }\r\n> +       return cmd\r\n> +}\r\n> +\r\n>  func executeTest(t *testing.T, templ string, data interface{}) string {\r\n>         checkStaleRuntime(t)\r\n>\r\n> @@ -37,13 +47,13 @@\r\n>         }\r\n>         f.Close()\r\n>\r\n> -       got, _ := exec.Command(\"go\", \"run\", src).CombinedOutput()\r\n> +       got, _ := fixEnv(exec.Command(\"go\", \"run\", src)).CombinedOutput()\r\n>         return string(got)\r\n>  }\r\n>\r\n>  func checkStaleRuntime(t *testing.T) {\r\n>         // 'go run' uses the installed copy of runtime.a, which may be out\r\n> of date.\r\n> -       out, err := exec.Command(\"go\", \"list\", \"-f\", \"{{.Stale}}\",\r\n> \"runtime\").CombinedOutput()\r\n> +       out, err := fixEnv(exec.Command(\"go\", \"list\", \"-f\", \"{{.Stale}}\",\r\n> \"runtime\")).CombinedOutput()\r\n>         if err != nil {\r\n>                 t.Fatalf(\"failed to execute 'go list': %v\\n%v\", err,\r\n> string(out))\r\n>         }\r\n> Index: src/pkg/runtime/race/race_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/race/race_**test.go\r\n> +++ b/src/pkg/runtime/race/race_**test.go\r\n> @@ -147,7 +147,7 @@\r\n>         // It is required because the tests contain a lot of data races on\r\n> the same addresses\r\n>         // (the tests are simple and the memory is constantly reused).\r\n>         for _, env := range os.Environ() {\r\n> -               if strings.HasPrefix(env, \"GOMAXPROCS=\") {\r\n> +               if strings.HasPrefix(env, \"GOMAXPROCS=\") ||\r\n> strings.HasPrefix(env, \"GOGCTRACE=\") {\r\n>                         continue\r\n>                 }\r\n>                 cmd.Env = append(cmd.Env, env)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-04 20:45:35.031230",
			"approval": true
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nRenamed fixEnv to testEnv with a comment. I'm bad at naming stuff like this.\n\nI found another issue in TestReadGCStats: sometimes the garbage collector actually does run, although the test assumes it doesn't.\n\nThe best thing I could come up with was to skip the test in that case.",
			"disapproval": false,
			"date": "2013-04-05 08:36:45.925080",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8366044/diff/8001/src/pkg/runtime/crash_test.go\nFile src/pkg/runtime/crash_test.go (right):\n\nhttps://codereview.appspot.com/8366044/diff/8001/src/pkg/runtime/crash_test.go#newcode21\nsrc/pkg/runtime/crash_test.go:21: for _, env := range os.Environ() {\nif cmd.Env != nil {\n    panic(\"environment already set\")\n}\n\nbefore this\n\nhttps://codereview.appspot.com/8366044/diff/8001/src/pkg/runtime/debug/garbage_test.go\nFile src/pkg/runtime/debug/garbage_test.go (right):\n\nhttps://codereview.appspot.com/8366044/diff/8001/src/pkg/runtime/debug/garbage_test.go#newcode29\nsrc/pkg/runtime/debug/garbage_test.go:29: t.Skipf(\"skipping due to GC during ReadGCStats; stats.NumGC = %d, but mstats.NumGC = %d\", stats.NumGC, mstats.NumGC)\nthis is unrelated to this CL.  and also seems wrong.\n\nseems better to loop a few times until you get a ReadGCStats without a GC during it, or to just turn off the GC before it and restore it afterwards.\n\nbut not in this CL.",
			"disapproval": false,
			"date": "2013-04-05 16:24:38.904280",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/05 16:24:38, bradfitz wrote:\n> https://codereview.appspot.com/8366044/diff/8001/src/pkg/runtime/debug/garbage_test.go#newcode29\n> src/pkg/runtime/debug/garbage_test.go:29: t.Skipf(\"skipping due to GC during\n> ReadGCStats; stats.NumGC = %d, but mstats.NumGC = %d\", stats.NumGC,\n> mstats.NumGC)\n> this is unrelated to this CL.  and also seems wrong.\n> seems better to loop a few times until you get a ReadGCStats without a GC during\n> it, or to just turn off the GC before it and restore it afterwards.\n\nThe issue is that with GOGC=1 (or maybe it's GOGC=0, or both), you will always get a GC.\n\nIs there a way to disable GC at run time? I'm not familiar with such a toggle.\n\nThanks.\n\nAlbert",
			"disapproval": false,
			"date": "2013-04-05 17:34:17.199290",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 5, 2013 at 10:34 AM, <fullung@gmail.com> wrote:\r\n\r\n> On 2013/04/05 16:24:38, bradfitz wrote:\r\n>\r\n> https://codereview.appspot.**com/8366044/diff/8001/src/pkg/**\r\n> runtime/debug/garbage_test.go#**newcode29<https://codereview.appspot.com/8366044/diff/8001/src/pkg/runtime/debug/garbage_test.go#newcode29>\r\n>\r\n>> src/pkg/runtime/debug/garbage_**test.go:29: t.Skipf(\"skipping due to GC\r\n>>\r\n> during\r\n>\r\n>> ReadGCStats; stats.NumGC = %d, but mstats.NumGC = %d\", stats.NumGC,\r\n>> mstats.NumGC)\r\n>> this is unrelated to this CL.  and also seems wrong.\r\n>> seems better to loop a few times until you get a ReadGCStats without a\r\n>>\r\n> GC during\r\n>\r\n>> it, or to just turn off the GC before it and restore it afterwards.\r\n>>\r\n>\r\n> The issue is that with GOGC=1 (or maybe it's GOGC=0, or both), you will\r\n> always get a GC.\r\n>\r\n> Is there a way to disable GC at run time? I'm not familiar with such a\r\n> toggle.\r\n>\r\n\r\nhttp://tip.golang.org/pkg/runtime/debug/#SetGCPercent\r\n\r\n\"SetGCPercent sets the garbage collection target percentage: a collection\r\nis triggered when the ratio of freshly allocated data to live data\r\nremaining after the previous collection reaches this percentage.\r\nSetGCPercent returns the previous setting. The initial setting is the value\r\nof the GOGC environment variable at startup, or 100 if the variable is not\r\nset. A negative percentage disables garbage collection.\"\r\n",
			"disapproval": false,
			"date": "2013-04-07 18:00:47.927580",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nYou learn something new every day. Thanks.",
			"disapproval": false,
			"date": "2013-04-07 18:32:24.897870",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-07 18:33:26.262440",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3bec344c9c55 ***\n\nruntime, runtime/debug, runtime/race: deflake tests\n\nR=golang-dev, dvyukov, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8366044\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-04-07 18:37:41.459020",
			"approval": false
		}
	],
	"owner_email": "fullung@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "albert.strasheim",
	"subject": "code review 8366044: runtime/*: deflake tests",
	"created": "2013-04-04 20:35:02.357850",
	"patchsets": [
		1,
		1001,
		3001,
		8001,
		15001,
		19001,
		24001
	],
	"modified": "2013-04-07 18:38:35.008570",
	"closed": true,
	"issue": 8366044
}