{
	"description": "go.exp/locale: added scanner and parser for BCP47 identifiers.\nID has been modified to included the scanned results.\nNote that in the majority of cases, an ID will not have any variants\nor extensions. For this reason, ID contains a pointer to a string,\ninstead of an embedded string.\nlookup has been modified to use lookups on []byte instead of string.",
	"cc": [
		"r@golang.org",
		"mpvl@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp/",
			"disapproval": false,
			"date": "2013-04-04 17:32:01.961630",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-04 17:32:14.343730",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "there's a lot of allocation going on here, isn't there? how often will this be called? would it be better to use []byte at least under the covers?\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go\nFile locale/parse.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode15\nlocale/parse.go:15: return b > '9'\nthat does not feel like the right test. maybe the solution is better docs.\n// isAlpha ...\n// b is guaranteed to be ...\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode18\nlocale/parse.go:18: // isAlphaNum returns true if the string contains only of latin characters or digits.\ns/only of //\n\ns/latin characters/ASCII letters/\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode22\nlocale/parse.go:22: if !(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9') {\na quirk of mine: i like the condition to express visually the containment.\n\n'a' <= c && c <= 'z' etc.\n\nnote too that the arrows always point the same way\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode37\nlocale/parse.go:37: invalid bool\nisn't invalid just err!=nil?\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode68\nlocale/parse.go:68: // scan parses the next token of an BCP47 string.  Tokens that are larger\ns/an/a/\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode101\nlocale/parse.go:101: // It the end position of the last token consumed.\ncan't parse the second sentences. missing 'returns'?\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode131\nlocale/parse.go:131: return und, fmt.Errorf(\"locale: empty locale identifier\")\nthese constant errors should just be globals, perhaps exported (not required), and created at boot time with errors.New\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode216\nlocale/parse.go:216: // parseVariants scans tokens as long as it is a valid variant string.\ns/it/each token/\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode491\nlocale/parse.go:491: // to by p.\nat index p?",
			"disapproval": false,
			"date": "2013-04-08 19:11:47.176030",
			"approval": false
		},
		{
			"sender": "mpvl@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In the vast majority of cases there should be no allocation. Allocation\r\nshould only occur if:\r\n- the input identifier is not well-formed or needs to be rewritten in any\r\nway.\r\n- there is more than one type of extension (this is very rare)\r\nIt is true, though, that if allocation is needed, there may be more\r\nallocations than necessary. I thought about using []byte at first but\r\ndidn't see an easy way to deal with the []byte to string conversions\r\nwithout causing allocations and prefer to have more allocations in the\r\nuncommon case rather than have any in the common case. I'll look into using\r\nit while still allowing the fast majority of cases to allocation free.\r\nAlso, it may not be unthinkable we want to allow the API to take []byte (as\r\nwell), as an identifier will likely come from some source represented in\r\n[]byte. In that case, having at least some allocations seems\r\nmore unavoidable.\r\n\r\n\r\nOn Monday, April 8, 2013, wrote:\r\n\r\n> there's a lot of allocation going on here, isn't there? how often will\r\n> this be called? would it be better to use []byte at least under the\r\n> covers?\r\n>\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**parse.go<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go>\r\n> File locale/parse.go (right):\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode15<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode15>\r\n> locale/parse.go:15: return b > '9'\r\n> that does not feel like the right test. maybe the solution is better\r\n> docs.\r\n> // isAlpha ...\r\n> // b is guaranteed to be ...\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode18<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode18>\r\n> locale/parse.go:18: // isAlphaNum returns true if the string contains\r\n> only of latin characters or digits.\r\n> s/only of //\r\n>\r\n> s/latin characters/ASCII letters/\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode22<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode22>\r\n> locale/parse.go:22: if !(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' ||\r\n> c >= '0' && c <= '9') {\r\n> a quirk of mine: i like the condition to express visually the\r\n> containment.\r\n>\r\n> 'a' <= c && c <= 'z' etc.\r\n>\r\n> note too that the arrows always point the same way\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode37<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode37>\r\n> locale/parse.go:37: invalid bool\r\n> isn't invalid just err!=nil?\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode68<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode68>\r\n> locale/parse.go:68: // scan parses the next token of an BCP47 string.\r\n> Tokens that are larger\r\n> s/an/a/\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode101<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode101>\r\n> locale/parse.go:101: // It the end position of the last token consumed.\r\n> can't parse the second sentences. missing 'returns'?\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode131<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode131>\r\n> locale/parse.go:131: return und, fmt.Errorf(\"locale: empty locale\r\n> identifier\")\r\n> these constant errors should just be globals, perhaps exported (not\r\n> required), and created at boot time with errors.New\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode216<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode216>\r\n> locale/parse.go:216: // parseVariants scans tokens as long as it is a\r\n> valid variant string.\r\n> s/it/each token/\r\n>\r\n> https://codereview.appspot.**com/8368043/diff/9001/locale/**\r\n> parse.go#newcode491<https://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode491>\r\n> locale/parse.go:491: // to by p.\r\n> at index p?\r\n>\r\n> https://codereview.appspot.**com/8368043/<https://codereview.appspot.com/8368043/>\r\n>\r\n\r\n\r\n-- \r\nTrying this for a while: http://go/OnlyCheckEmailTwiceADay.\r\nMarcel van Lohuizen -- Google Switzerland GmbH -- Identifikationsnummer:\r\nCH-020.4.028.116-1\r\n",
			"disapproval": false,
			"date": "2013-04-09 09:32:27.967400",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've updated the parser scanner to operate on []byte instead of string.  Most strings will fit in the small buffer that is used in scanner, thus having no need for an alloc (just a small copy).  The buffer is modified along the way for small modifications.  In the fast majority of cases, there will few or no allocations.  This holds for lookups of both string and []byte.\n\nNote that the lookup code is now changed as well to do lookups of []byte instead of string.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go\nFile locale/parse.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode15\nlocale/parse.go:15: return b > '9'\nOn 2013/04/08 19:11:47, r wrote:\n> that does not feel like the right test. maybe the solution is better docs.\n> // isAlpha ...\n> // b is guaranteed to be ...\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode18\nlocale/parse.go:18: // isAlphaNum returns true if the string contains only of latin characters or digits.\nOn 2013/04/08 19:11:47, r wrote:\n> s/only of //\n> \n> s/latin characters/ASCII letters/\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode22\nlocale/parse.go:22: if !(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9') {\nOn 2013/04/08 19:11:47, r wrote:\n> a quirk of mine: i like the condition to express visually the containment.\n> \n> 'a' <= c && c <= 'z' etc.\n> \n> note too that the arrows always point the same way\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode37\nlocale/parse.go:37: invalid bool\nAn error can also mean an unknown value, even if the string is a valid BCP47 string.  This is currently not used, so I'll remove it.\n\nOn 2013/04/08 19:11:47, r wrote:\n> isn't invalid just err!=nil?\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode68\nlocale/parse.go:68: // scan parses the next token of an BCP47 string.  Tokens that are larger\nOn 2013/04/08 19:11:47, r wrote:\n> s/an/a/\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode101\nlocale/parse.go:101: // It the end position of the last token consumed.\nOn 2013/04/08 19:11:47, r wrote:\n> can't parse the second sentences. missing 'returns'?\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode131\nlocale/parse.go:131: return und, fmt.Errorf(\"locale: empty locale identifier\")\nOn 2013/04/08 19:11:47, r wrote:\n> these constant errors should just be globals, perhaps exported (not required),\n> and created at boot time with errors.New\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode216\nlocale/parse.go:216: // parseVariants scans tokens as long as it is a valid variant string.\nOn 2013/04/08 19:11:47, r wrote:\n> s/it/each token/\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/9001/locale/parse.go#newcode491\nlocale/parse.go:491: // to by p.\nno actually, changed accordingly.\n\nOn 2013/04/08 19:11:47, r wrote:\n> at index p?",
			"disapproval": false,
			"date": "2013-04-10 22:06:17.162100",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, mpvl@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-10 22:06:19.796840",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8368043/diff/21001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/locale.go#newcode10\nlocale/locale.go:10: Und   = und\nmaybe \"Undefined\" - it's a global symbol. at least it needs a comment here\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go\nFile locale/parse.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode37\nlocale/parse.go:37: return -1\nthis function is bytes.IndexByte.\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode51\nlocale/parse.go:51: start, end int // start and end of current token\nfor consistency,why not put these on two lines?\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode131\nlocale/parse.go:131: // It returns the end position fo the last token consumed.\ns/fo/of/\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode178\nlocale/parse.go:178: // It accepts identifiers in the BCP 47 format and extensions to this standard\nBCP 47 or BCP47? be consistent.\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode238\nlocale/parse.go:238: // It returns an ID and the position in the input that was parsed.\nposition at start or end?",
			"disapproval": false,
			"date": "2013-04-10 22:34:56.204470",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8368043/diff/21001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/locale.go#newcode10\nlocale/locale.go:10: Und   = und\nOn 2013/04/10 22:34:56, r wrote:\n> maybe \"Undefined\" - it's a global symbol. at least it needs a comment here\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go\nFile locale/parse.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode37\nlocale/parse.go:37: return -1\nOn 2013/04/10 22:34:56, r wrote:\n> this function is bytes.IndexByte.\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode51\nlocale/parse.go:51: start, end int // start and end of current token\nOn 2013/04/10 22:34:56, r wrote:\n> for consistency,why not put these on two lines?\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode131\nlocale/parse.go:131: // It returns the end position fo the last token consumed.\nOn 2013/04/10 22:34:56, r wrote:\n> s/fo/of/\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode178\nlocale/parse.go:178: // It accepts identifiers in the BCP 47 format and extensions to this standard\nWent for BCP 47.  Corrected elsewhere.\nOn 2013/04/10 22:34:56, r wrote:\n> BCP 47 or BCP47? be consistent.\n\nhttps://codereview.appspot.com/8368043/diff/21001/locale/parse.go#newcode238\nlocale/parse.go:238: // It returns an ID and the position in the input that was parsed.\nend added\nOn 2013/04/10 22:34:56, r wrote:\n> position at start or end?",
			"disapproval": false,
			"date": "2013-04-11 08:07:40.643700",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "almost\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/locale.go#newcode30\nlocale/locale.go:30: // ID represents a BCP 47 compliant locale identifier. It can be used to\ns/47 compliant/47-compliant/ (you're making an adjective)\n\nbut better might be just to drop the \"compliant\" and make it a noun phrase.\n\nID represents a BCP 47 locale identifier.\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/locale.go#newcode34\nlocale/locale.go:34: // In most cases, just lang, region and script will be needed.  In that case\nconsistency: s/that case/such cases/\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go\nFile locale/parse.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode16\nlocale/parse.go:16: // b must be an ASCII letter.\ns/letter/& or digit/\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode69\nlocale/parse.go:69: // restToLower converts the rest of the string to lower case.\ncomment out of date\ntoLower converts the string between start and end to lower case.\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode104\nlocale/parse.go:104: copy(s.b[s.start:], repl)\ni think this could be simpler and avoid some allocation. not tested, but something like\n\ns.b = append(s.b[s.start+len(repl):], s.b[s.end:]...)\ns.end = s.start + len(repl)\ncopy(s.b[s.start:s.end], repl)\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode112\nlocale/parse.go:112: s.end = s.start\nthis means s.end = 0",
			"disapproval": false,
			"date": "2013-04-11 17:42:04.804730",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8368043/diff/30001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/locale.go#newcode30\nlocale/locale.go:30: // ID represents a BCP 47 compliant locale identifier. It can be used to\nOn 2013/04/11 17:42:04, r wrote:\n> s/47 compliant/47-compliant/ (you're making an adjective)\n> \n> but better might be just to drop the \"compliant\" and make it a noun phrase.\n> \n> ID represents a BCP 47 locale identifier.\n> \n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/locale.go#newcode34\nlocale/locale.go:34: // In most cases, just lang, region and script will be needed.  In that case\nOn 2013/04/11 17:42:04, r wrote:\n> consistency: s/that case/such cases/\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go\nFile locale/parse.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode16\nlocale/parse.go:16: // b must be an ASCII letter.\nOn 2013/04/11 17:42:04, r wrote:\n> s/letter/& or digit/\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode69\nlocale/parse.go:69: // restToLower converts the rest of the string to lower case.\nOn 2013/04/11 17:42:04, r wrote:\n> comment out of date\n> toLower converts the string between start and end to lower case.\n\nDone.\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode104\nlocale/parse.go:104: copy(s.b[s.start:], repl)\nThat's what I had before (more or less).  The problem with this is the case where s.start+len(repl) > len(s.b).  This can happen in practice.  Note that there is no allocation if s.b has enough capacity to hold the replacement.\n\nOn 2013/04/11 17:42:04, r wrote:\n> i think this could be simpler and avoid some allocation. not tested, but\n> something like\n> \n> s.b = append(s.b[s.start+len(repl):], s.b[s.end:]...)\n> s.end = s.start + len(repl)\n> copy(s.b[s.start:s.end], repl)\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode112\nlocale/parse.go:112: s.end = s.start\ngood point, and equally so for the other references to s.start in that block. changed.\nOn 2013/04/11 17:42:04, r wrote:\n> this means s.end = 0",
			"disapproval": false,
			"date": "2013-04-12 12:08:08.966280",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go\nFile locale/parse.go (right):\n\nhttps://codereview.appspot.com/8368043/diff/30001/locale/parse.go#newcode104\nlocale/parse.go:104: copy(s.b[s.start:], repl)\nah yes, one more error case i missed.",
			"disapproval": false,
			"date": "2013-04-12 14:48:02.542860",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c2391d4719a3&repo=exp ***\n\ngo.exp/locale: added scanner and parser for BCP47 identifiers.\nID has been modified to included the scanned results.\nNote that in the majority of cases, an ID will not have any variants\nor extensions. For this reason, ID contains a pointer to a string,\ninstead of an embedded string.\nlookup has been modified to use lookups on []byte instead of string.\n\nR=r, mpvl\nCC=golang-dev\nhttps://codereview.appspot.com/8368043",
			"disapproval": false,
			"date": "2013-04-16 09:49:07.363670",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 8368043: go.exp/locale: added scanner and parser for BCP47 ident...",
	"created": "2013-04-04 14:53:00.899430",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		16001,
		19001,
		21001,
		30001,
		35001,
		47001
	],
	"modified": "2013-04-16 09:49:08.408760",
	"closed": true,
	"issue": 8368043
}