{
	"description": "reflect: use unsafe.Pointer in StringHeader and SliceHeader\n\nRelates to issue 5193.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dsymonds@golang.org",
		"remyoudompheng@gmail.com",
		"dvyukov@google.com",
		"max@mxcrypt.com",
		"dan.kortschak@adelaide.edu.au"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-07 21:03:54.719420",
			"approval": true
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-07 21:33:36.557530",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a3ce42f9748b ***\n\nreflect: use unsafe.Pointer in StringHeader and SliceHeader\n\nRelates to issue 5193.\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/8363045",
			"disapproval": false,
			"date": "2013-04-07 21:33:50.611300",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/4/7 David Symonds <dsymonds@golang.org> wrote:\r\n> Uh, waiting for a review of this probably would have been good. You\r\n> have changed the data type of some exported names; this probably\r\n> breaks backward compatibility.\r\n\r\n\r\nIndeed. Code using SliceHeader/StringHeader is quite common.\r\nAnd the build is broken.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-04-07 21:42:41.390640",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Uh, waiting for a review of this probably would have been good. You\r\nhave changed the data type of some exported names; this probably\r\nbreaks backward compatibility.\r\n",
			"disapproval": false,
			"date": "2013-04-07 21:36:01.420050",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh, I see https://codereview.appspot.com/8363045/ shows Rob's review.\r\n\r\nStill, my point stands. This is an exported API, and it's changing.\r\n",
			"disapproval": false,
			"date": "2013-04-07 21:42:24.210540",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/07 21:36:01, dsymonds wrote:\n> Uh, waiting for a review of this probably would have been good. You\n> have changed the data type of some exported names; this probably\n> breaks backward compatibility.\n\nThe comment says:\n\n// StringHeader is the runtime representation of a string.\n// It cannot be used safely or portably.\n\nI am curious what are real-world usage examples of this? If it is used only as local hacks on strings/slices, then probably we just need to make it clear in comments that \"you must hold original string/slice\", then String/SliceHeader is fine with uintptr, because the string/slice buffer is necessary referenced with normal string/slice var.\n\nAlso since it's *internal* runtime representation, probably we need to add a comment saying that backward compatibility is NOT provided for these type. Because we have some plans on changing strings/slices representation in runtime for the purposes of GC. It is bad if these types will prevent any potential changes to internal runtime representations.",
			"disapproval": false,
			"date": "2013-04-07 21:48:11.416640",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 8, 2013 at 7:48 AM,  <dvyukov@google.com> wrote:\r\n\r\n> Also since it's *internal* runtime representation, probably we need to\r\n> add a comment saying that backward compatibility is NOT provided for\r\n> these type. Because we have some plans on changing strings/slices\r\n> representation in runtime for the purposes of GC. It is bad if these\r\n> types will prevent any potential changes to internal runtime\r\n> representations.\r\n\r\nStill, this isn't a change in the internal representation, so it's an\r\nAPI change without that reason backing it. Plus it pushes \"unsafe\"\r\ninto a place where it once wasn't.\r\n",
			"disapproval": false,
			"date": "2013-04-07 21:56:38.424700",
			"approval": false
		},
		{
			"sender": "max@mxcrypt.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 7, 2013 at 5:48 PM,  <dvyukov@google.com> wrote:\r\n> On 2013/04/07 21:36:01, dsymonds wrote:\r\n>>\r\n>> Uh, waiting for a review of this probably would have been good. You\r\n>> have changed the data type of some exported names; this probably\r\n>> breaks backward compatibility.\r\n>\r\n>\r\n> The comment says:\r\n>\r\n> // StringHeader is the runtime representation of a string.\r\n> // It cannot be used safely or portably.\r\n>\r\n> I am curious what are real-world usage examples of this? If it is used\r\n> only as local hacks on strings/slices, then probably we just need to\r\n> make it clear in comments that \"you must hold original string/slice\",\r\n> then String/SliceHeader is fine with uintptr, because the string/slice\r\n> buffer is necessary referenced with normal string/slice var.\r\n>\r\n> Also since it's *internal* runtime representation, probably we need to\r\n> add a comment saying that backward compatibility is NOT provided for\r\n> these type. Because we have some plans on changing strings/slices\r\n> representation in runtime for the purposes of GC. It is bad if these\r\n> types will prevent any potential changes to internal runtime\r\n> representations.\r\n\r\nI'm using SliceHeader and StringHeader in my sqlite library to avoid\r\nseveral copy operations between Go and C. The provided C.CString and\r\nC.GoString are not always an option. For example, the BLOB I/O\r\ninterface is designed for storing and accessing values that could be\r\nhundreds of MB in size. The malloc/copy/free overhead to and from the\r\ndatabase for these operations would be significant. Here's the\r\nrelevant code:\r\n\r\nhttps://code.google.com/p/go-sqlite/source/browse/go1/sqlite3/io.go#98\r\nhttps://code.google.com/p/go-sqlite/source/browse/go1/sqlite3/util.go#267\r\n\r\nI can certainly change my code, but I can't do so in a way that\r\nmaintains compatibility with Go 1.0. Alternatively, you'll have people\r\ncopying the two struct definitions to their own code to keep the old\r\nuintptr type. This will work for a while, since the actual memory\r\nlayout hasn't changed, but will blow up later if/when those changes do\r\nhappen.\r\n\r\nI don't know what the best solution is, but there does need to be a\r\nway of getting direct access to slice and string memory, especially\r\nwhen cgo is involved. Furthermore, it would be better if these changes\r\nare announced ahead of time and not so close to a release.\r\n\r\n- Max\r\n",
			"disapproval": false,
			"date": "2013-04-07 22:09:11.624410",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is used a fair bit in cgo-dependent code. I think we are all wary because of the warnings associated with the types, but a change should be announced early and loud.\r\n\r\nOn 08/04/2013, at 7:39 AM, \"Maxim Khitrov\" <max@mxcrypt.com> wrote:\r\n\r\n> I don't know what the best solution is, but there does need to be a\r\n> way of getting direct access to slice and string memory, especially\r\n> when cgo is involved. Furthermore, it would be better if these changes\r\n> are announced ahead of time and not so close to a release.\r\n",
			"disapproval": false,
			"date": "2013-04-07 22:14:01.515030",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 7, 2013 at 3:08 PM, Maxim Khitrov <max@mxcrypt.com> wrote:\r\n> On Sun, Apr 7, 2013 at 5:48 PM,  <dvyukov@google.com> wrote:\r\n>> On 2013/04/07 21:36:01, dsymonds wrote:\r\n>>>\r\n>>> Uh, waiting for a review of this probably would have been good. You\r\n>>> have changed the data type of some exported names; this probably\r\n>>> breaks backward compatibility.\r\n>>\r\n>>\r\n>> The comment says:\r\n>>\r\n>> // StringHeader is the runtime representation of a string.\r\n>> // It cannot be used safely or portably.\r\n>>\r\n>> I am curious what are real-world usage examples of this? If it is used\r\n>> only as local hacks on strings/slices, then probably we just need to\r\n>> make it clear in comments that \"you must hold original string/slice\",\r\n>> then String/SliceHeader is fine with uintptr, because the string/slice\r\n>> buffer is necessary referenced with normal string/slice var.\r\n>>\r\n>> Also since it's *internal* runtime representation, probably we need to\r\n>> add a comment saying that backward compatibility is NOT provided for\r\n>> these type. Because we have some plans on changing strings/slices\r\n>> representation in runtime for the purposes of GC. It is bad if these\r\n>> types will prevent any potential changes to internal runtime\r\n>> representations.\r\n>\r\n> I'm using SliceHeader and StringHeader in my sqlite library to avoid\r\n> several copy operations between Go and C. The provided C.CString and\r\n> C.GoString are not always an option. For example, the BLOB I/O\r\n> interface is designed for storing and accessing values that could be\r\n> hundreds of MB in size. The malloc/copy/free overhead to and from the\r\n> database for these operations would be significant. Here's the\r\n> relevant code:\r\n>\r\n> https://code.google.com/p/go-sqlite/source/browse/go1/sqlite3/io.go#98\r\n> https://code.google.com/p/go-sqlite/source/browse/go1/sqlite3/util.go#267\r\n>\r\n> I can certainly change my code, but I can't do so in a way that\r\n> maintains compatibility with Go 1.0. Alternatively, you'll have people\r\n> copying the two struct definitions to their own code to keep the old\r\n> uintptr type. This will work for a while, since the actual memory\r\n> layout hasn't changed, but will blow up later if/when those changes do\r\n> happen.\r\n>\r\n> I don't know what the best solution is, but there does need to be a\r\n> way of getting direct access to slice and string memory, especially\r\n> when cgo is involved. Furthermore, it would be better if these changes\r\n> are announced ahead of time and not so close to a release.\r\n\r\n\r\nI see. Thanks!\r\n\r\nI think for such cases we can provide more abstract functions like\r\nExtractPointerFromString() and\r\nConstructStringObjectFromPtrAndSizeWithoutCopy().\r\n\r\nGo can also provide builtin build tags for releases (+build go1.2.0),\r\nthis would make changes at least solvable.\r\n",
			"disapproval": false,
			"date": "2013-04-07 22:16:33.004750",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"max@mxcrypt.com",
				"dan.kortschak@adelaide.edu.au",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Overall, I am worried that using uintptr instead of unsafe.Pointer may cause GC bugs. I haven't seen such bugs, but they are theoretically possible. It seems natural to programmers to treat uintptr as a type which appears equivalent to unsafe.Pointer. The precise GC implementation is assuming that uintptr isn't a pointer - this assumption may go against programmer intuition.\n\nThe above can be resolved by making uintptr equivalent to unsafe.Pointer in the GC implementation. This may in theory improve GC correctness, at the cost of making the GC slightly less precise.\n\nSome places in Go's packages seem to be making the assumption that uintptr is a pointer just like unsafe.Pointer.\n\nShould uintptr be made equivalent to unsafe.Pointer in the GC?\n\nOn 2013/04/07 21:48:11, dvyukov wrote:\n> On 2013/04/07 21:36:01, dsymonds wrote:\n> > Uh, waiting for a review of this probably would have been good. You\n> > have changed the data type of some exported names; this probably\n> > breaks backward compatibility.\n> \n> The comment says:\n> \n> // StringHeader is the runtime representation of a string.\n> // It cannot be used safely or portably.\n> \n> I am curious what are real-world usage examples of this? If it is used only as\n> local hacks on strings/slices, then probably we just need to make it clear in\n> comments that \"you must hold original string/slice\", then String/SliceHeader is\n> fine with uintptr, because the string/slice buffer is necessary referenced with\n> normal string/slice var.\n> \n> Also since it's *internal* runtime representation, probably we need to add a\n> comment saying that backward compatibility is NOT provided for these type.\n> Because we have some plans on changing strings/slices representation in runtime\n> for the purposes of GC. It is bad if these types will prevent any potential\n> changes to internal runtime representations.",
			"disapproval": false,
			"date": "2013-04-07 22:28:11.731980",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/4/8  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> Overall, I am worried that using uintptr instead of unsafe.Pointer may\r\n> cause GC bugs. I haven't seen such bugs, but they are theoretically\r\n> possible. It seems natural to programmers to treat uintptr as a type\r\n> which appears equivalent to unsafe.Pointer. The precise GC\r\n> implementation is assuming that uintptr isn't a pointer - this\r\n> assumption may go against programmer intuition.\r\n\r\nA uintptr cannot be a relevant pointer to actual data unless you have\r\nused unsafe. And by definition, using unsafe is unsafe and can cause\r\nbugs.\r\n\r\nOf course, we can limit the range of possible bugs, and I don't think\r\nthat treating uintptr as a pointer will make the GC much less precise.\r\n\r\nBut it doesn't look necessary to correctness either, to me.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-04-07 22:35:30.726890",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Actually we've already been here:\r\nhttps://codereview.appspot.com/5266050/\r\nhttps://codereview.appspot.com/5278048/\r\nand decided to not make uintptr treated as pointer.\r\n\r\nOn Sun, Apr 7, 2013 at 3:35 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> On 2013/4/8  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n>> Overall, I am worried that using uintptr instead of unsafe.Pointer may\r\n>> cause GC bugs. I haven't seen such bugs, but they are theoretically\r\n>> possible. It seems natural to programmers to treat uintptr as a type\r\n>> which appears equivalent to unsafe.Pointer. The precise GC\r\n>> implementation is assuming that uintptr isn't a pointer - this\r\n>> assumption may go against programmer intuition.\r\n>\r\n> A uintptr cannot be a relevant pointer to actual data unless you have\r\n> used unsafe. And by definition, using unsafe is unsafe and can cause\r\n> bugs.\r\n>\r\n> Of course, we can limit the range of possible bugs, and I don't think\r\n> that treating uintptr as a pointer will make the GC much less precise.\r\n>\r\n> But it doesn't look necessary to correctness either, to me.\r\n>\r\n> R\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-04-07 22:43:24.336290",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It was an error for me to LGTM this.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-08 01:08:58.615270",
			"approval": true
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 8363045: reflect: use unsafe.Pointer in StringHeader and SliceHeader",
	"created": "2013-04-05 20:37:02.243490",
	"patchsets": [
		1,
		2001,
		6001
	],
	"modified": "2013-04-07 22:28:12.095970",
	"closed": true,
	"issue": 8363045
}