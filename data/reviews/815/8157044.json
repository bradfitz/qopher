{
	"description": "bytes: document that Buffer.Write grows the buffer\nDo a little reformatting too.\nFixes issue 5152.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-29 21:01:15.867690",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "subject line: just /^bytes: /\r\n\r\nOn Fri, Mar 29, 2013 at 2:01 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> bytes.Buffer: document that Write grows the buffer\r\n> Do a little reformatting too.\r\n> Fixes issue 5152.\r\n>\r\n> Please review this at https://codereview.appspot.**com/8157044/<https://codereview.appspot.com/8157044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/bytes/buffer.go\r\n>\r\n>\r\n> Index: src/pkg/bytes/buffer.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/bytes/buffer.go\r\n> +++ b/src/pkg/bytes/buffer.go\r\n> @@ -119,20 +119,18 @@\r\n>         b.buf = b.buf[0:m]\r\n>  }\r\n>\r\n> -// Write appends the contents of p to the buffer.  The return\r\n> -// value n is the length of p; err is always nil.\r\n> -// If the buffer becomes too large, Write will panic with\r\n> -// ErrTooLarge.\r\n> +// Write appends the contents of p to the buffer, growing the buffer as\r\n> +// needed. The return value n is the length of p; err is always nil. If\r\n> the\r\n> +// buffer becomes too large, Write will panic with ErrTooLarge.\r\n>  func (b *Buffer) Write(p []byte) (n int, err error) {\r\n>         b.lastRead = opInvalid\r\n>         m := b.grow(len(p))\r\n>         return copy(b.buf[m:], p), nil\r\n>  }\r\n>\r\n> -// WriteString appends the contents of s to the buffer.  The return\r\n> -// value n is the length of s; err is always nil.\r\n> -// If the buffer becomes too large, WriteString will panic with\r\n> -// ErrTooLarge.\r\n> +// WriteString appends the contents of s to the buffer, growing the\r\n> buffer as\r\n> +// needed. The return value n is the length of s; err is always nil. If\r\n> the\r\n> +// buffer becomes too large, WriteString will panic with ErrTooLarge.\r\n>  func (b *Buffer) WriteString(s string) (n int, err error) {\r\n>         b.lastRead = opInvalid\r\n>         m := b.grow(len(s))\r\n> @@ -145,12 +143,10 @@\r\n>  // underlying buffer.\r\n>  const MinRead = 512\r\n>\r\n> -// ReadFrom reads data from r until EOF and appends it to the buffer.\r\n> -// The return value n is the number of bytes read.\r\n> -// Any error except io.EOF encountered during the read\r\n> -// is also returned.\r\n> -// If the buffer becomes too large, ReadFrom will panic with\r\n> -// ErrTooLarge.\r\n> +// ReadFrom reads data from r until EOF and appends it to the buffer,\r\n> growing\r\n> +// the buffer as needed. The return value n is the number of bytes read.\r\n> Any\r\n> +// error except io.EOF encountered during the read is also returned. If\r\n> the\r\n> +// buffer becomes too large, ReadFrom will panic with ErrTooLarge.\r\n>  func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error) {\r\n>         b.lastRead = opInvalid\r\n>         // If buffer is empty, reset to recover space.\r\n> @@ -195,10 +191,10 @@\r\n>         return make([]byte, n)\r\n>  }\r\n>\r\n> -// WriteTo writes data to w until the buffer is drained or an error\r\n> -// occurs. The return value n is the number of bytes written; it always\r\n> -// fits into an int, but it is int64 to match the io.WriterTo interface.\r\n> -// Any error encountered during the write is also returned.\r\n> +// WriteTo writes data to w until the buffer is drained or an error\r\n> occurs.\r\n> +// The return value n is the number of bytes written; it always fits into\r\n> an\r\n> +// int, but it is int64 to match the io.WriterTo interface. Any error\r\n> +// encountered during the write is also returned.\r\n>  func (b *Buffer) WriteTo(w io.Writer) (n int64, err error) {\r\n>         b.lastRead = opInvalid\r\n>         if b.off < len(b.buf) {\r\n> @@ -223,10 +219,9 @@\r\n>         return\r\n>  }\r\n>\r\n> -// WriteByte appends the byte c to the buffer.\r\n> -// The returned error is always nil, but is included\r\n> -// to match bufio.Writer's WriteByte.\r\n> -// If the buffer becomes too large, WriteByte will panic with\r\n> +// WriteByte appends the byte c to the buffer, growing the buffer as\r\n> needed.\r\n> +// The returned error is always nil, but is included to match\r\n> bufio.Writer's\r\n> +// WriteByte. If the buffer becomes too large, WriteByte will panic with\r\n>  // ErrTooLarge.\r\n>  func (b *Buffer) WriteByte(c byte) error {\r\n>         b.lastRead = opInvalid\r\n> @@ -235,12 +230,10 @@\r\n>         return nil\r\n>  }\r\n>\r\n> -// WriteRune appends the UTF-8 encoding of Unicode\r\n> -// code point r to the buffer, returning its length and\r\n> -// an error, which is always nil but is included\r\n> -// to match bufio.Writer's WriteRune.\r\n> -// If the buffer becomes too large, WriteRune will panic with\r\n> -// ErrTooLarge.\r\n> +// WriteRune appends the UTF-8 encoding of Unicode code point r to the\r\n> +// buffer, returning its length and an error, which is always nil but is\r\n> +// included to match bufio.Writer's WriteRune. The buffer is grown as\r\n> needed;\r\n> +// if it becomes too large, WriteRune will panic with ErrTooLarge.\r\n>  func (b *Buffer) WriteRune(r rune) (n int, err error) {\r\n>         if r < utf8.RuneSelf {\r\n>                 b.WriteByte(byte(r))\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 21:03:16.833460",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM otherwise\r\n\r\nOn Fri, Mar 29, 2013 at 2:03 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> subject line: just /^bytes: /\r\n>\r\n>\r\n> On Fri, Mar 29, 2013 at 2:01 PM, <r@golang.org> wrote:\r\n>\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> bytes.Buffer: document that Write grows the buffer\r\n>> Do a little reformatting too.\r\n>> Fixes issue 5152.\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/8157044/<https://codereview.appspot.com/8157044/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/bytes/buffer.go\r\n>>\r\n>>\r\n>> Index: src/pkg/bytes/buffer.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/bytes/buffer.go\r\n>> +++ b/src/pkg/bytes/buffer.go\r\n>> @@ -119,20 +119,18 @@\r\n>>         b.buf = b.buf[0:m]\r\n>>  }\r\n>>\r\n>> -// Write appends the contents of p to the buffer.  The return\r\n>> -// value n is the length of p; err is always nil.\r\n>> -// If the buffer becomes too large, Write will panic with\r\n>> -// ErrTooLarge.\r\n>> +// Write appends the contents of p to the buffer, growing the buffer as\r\n>> +// needed. The return value n is the length of p; err is always nil. If\r\n>> the\r\n>> +// buffer becomes too large, Write will panic with ErrTooLarge.\r\n>>  func (b *Buffer) Write(p []byte) (n int, err error) {\r\n>>         b.lastRead = opInvalid\r\n>>         m := b.grow(len(p))\r\n>>         return copy(b.buf[m:], p), nil\r\n>>  }\r\n>>\r\n>> -// WriteString appends the contents of s to the buffer.  The return\r\n>> -// value n is the length of s; err is always nil.\r\n>> -// If the buffer becomes too large, WriteString will panic with\r\n>> -// ErrTooLarge.\r\n>> +// WriteString appends the contents of s to the buffer, growing the\r\n>> buffer as\r\n>> +// needed. The return value n is the length of s; err is always nil. If\r\n>> the\r\n>> +// buffer becomes too large, WriteString will panic with ErrTooLarge.\r\n>>  func (b *Buffer) WriteString(s string) (n int, err error) {\r\n>>         b.lastRead = opInvalid\r\n>>         m := b.grow(len(s))\r\n>> @@ -145,12 +143,10 @@\r\n>>  // underlying buffer.\r\n>>  const MinRead = 512\r\n>>\r\n>> -// ReadFrom reads data from r until EOF and appends it to the buffer.\r\n>> -// The return value n is the number of bytes read.\r\n>> -// Any error except io.EOF encountered during the read\r\n>> -// is also returned.\r\n>> -// If the buffer becomes too large, ReadFrom will panic with\r\n>> -// ErrTooLarge.\r\n>> +// ReadFrom reads data from r until EOF and appends it to the buffer,\r\n>> growing\r\n>> +// the buffer as needed. The return value n is the number of bytes read.\r\n>> Any\r\n>> +// error except io.EOF encountered during the read is also returned. If\r\n>> the\r\n>> +// buffer becomes too large, ReadFrom will panic with ErrTooLarge.\r\n>>  func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error) {\r\n>>         b.lastRead = opInvalid\r\n>>         // If buffer is empty, reset to recover space.\r\n>> @@ -195,10 +191,10 @@\r\n>>         return make([]byte, n)\r\n>>  }\r\n>>\r\n>> -// WriteTo writes data to w until the buffer is drained or an error\r\n>> -// occurs. The return value n is the number of bytes written; it always\r\n>> -// fits into an int, but it is int64 to match the io.WriterTo interface.\r\n>> -// Any error encountered during the write is also returned.\r\n>> +// WriteTo writes data to w until the buffer is drained or an error\r\n>> occurs.\r\n>> +// The return value n is the number of bytes written; it always fits\r\n>> into an\r\n>> +// int, but it is int64 to match the io.WriterTo interface. Any error\r\n>> +// encountered during the write is also returned.\r\n>>  func (b *Buffer) WriteTo(w io.Writer) (n int64, err error) {\r\n>>         b.lastRead = opInvalid\r\n>>         if b.off < len(b.buf) {\r\n>> @@ -223,10 +219,9 @@\r\n>>         return\r\n>>  }\r\n>>\r\n>> -// WriteByte appends the byte c to the buffer.\r\n>> -// The returned error is always nil, but is included\r\n>> -// to match bufio.Writer's WriteByte.\r\n>> -// If the buffer becomes too large, WriteByte will panic with\r\n>> +// WriteByte appends the byte c to the buffer, growing the buffer as\r\n>> needed.\r\n>> +// The returned error is always nil, but is included to match\r\n>> bufio.Writer's\r\n>> +// WriteByte. If the buffer becomes too large, WriteByte will panic with\r\n>>  // ErrTooLarge.\r\n>>  func (b *Buffer) WriteByte(c byte) error {\r\n>>         b.lastRead = opInvalid\r\n>> @@ -235,12 +230,10 @@\r\n>>         return nil\r\n>>  }\r\n>>\r\n>> -// WriteRune appends the UTF-8 encoding of Unicode\r\n>> -// code point r to the buffer, returning its length and\r\n>> -// an error, which is always nil but is included\r\n>> -// to match bufio.Writer's WriteRune.\r\n>> -// If the buffer becomes too large, WriteRune will panic with\r\n>> -// ErrTooLarge.\r\n>> +// WriteRune appends the UTF-8 encoding of Unicode code point r to the\r\n>> +// buffer, returning its length and an error, which is always nil but is\r\n>> +// included to match bufio.Writer's WriteRune. The buffer is grown as\r\n>> needed;\r\n>> +// if it becomes too large, WriteRune will panic with ErrTooLarge.\r\n>>  func (b *Buffer) WriteRune(r rune) (n int, err error) {\r\n>>         if r < utf8.RuneSelf {\r\n>>                 b.WriteByte(byte(r))\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 21:04:38.071650",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-29 21:06:15.681140",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=fb49e2bb674a ***\n\nbytes: document that Buffer.Write grows the buffer\nDo a little reformatting too.\nFixes issue 5152.\n\nR=golang-dev, bradfitz, gri\nCC=golang-dev\nhttps://codereview.appspot.com/8157044",
			"disapproval": false,
			"date": "2013-03-29 21:09:34.173890",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 8157044: bytes.Buffer: document that Write grows the buffer",
	"created": "2013-03-29 21:01:12.160140",
	"patchsets": [
		1,
		6001
	],
	"modified": "2013-03-29 21:09:35.385820",
	"closed": true,
	"issue": 8157044
}