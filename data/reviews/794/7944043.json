{
	"description": "cmd/gc: recognize (a.b[0]<<1 | a.b[0]>>31) as a rotate, not just\n(x<<1 | x>>31).\n\nFixes issue 5084.\n\nOn the SHA3 benchmark proposals at\nhttps://codereview.appspot.com/7760044/\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkPermutationFunction         1288         1191   -7.53%\nBenchmarkSingleByteWrite             5795         5811   +0.28%\nBenchmarkBlockWrite512                178          179   +0.56%\nBenchmarkBlockWrite384                230          233   +1.30%\nBenchmarkBlockWrite256                282          286   +1.42%\nBenchmarkBlockWrite224                301          306   +1.66%\nBenchmarkBulkHashSHA3_512          326885       304548   -6.83%\nBenchmarkBulkHashSHA3_384          234839       220074   -6.29%\nBenchmarkBulkHashSHA3_256          186969       175790   -5.98%\nBenchmarkBulkHashSHA3_224          178133       167489   -5.98%\n\nFor a function like\n\nfunc g() {\n        x = a[3]<<20 | a[3]>>12\n}\n\nthe asm goes from\n\n0006 (main.go:10) TEXT    g+0(SB),$0-0\n0007 (main.go:10) MOVL    a+12(SB),BP\n0008 (main.go:10) LOCALS  ,$0\n0009 (main.go:11) MOVL    BP,BX\n0010 (main.go:11) SHLL    $20,BX\n0011 (main.go:11) SHRL    $12,BP\n0012 (main.go:11) ORL     BP,BX\n0013 (main.go:11) MOVL    BX,x+0(SB)\n0014 (main.go:12) RET     ,\n\nto\n\n0006 (main.go:10) TEXT    g+0(SB),$0-0\n0007 (main.go:10) LOCALS  ,$0\n0008 (main.go:11) MOVL    a+12(SB),BX\n0009 (main.go:11) ROLL    $20,BX\n0010 (main.go:11) MOVL    BX,x+0(SB)\n0011 (main.go:12) RET     ,",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com",
		"jcb@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, jcb@google.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-21 10:54:53.192350",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's been a while since I've written any cmd/gc code. I might be doing something quite unstylish.",
			"disapproval": false,
			"date": "2013-03-21 10:58:11.438050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2893\nsrc/cmd/gc/walk.c:2893: int rmatch;\nadd blank line after decls.\nyou can delete this variable anyway\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2894\nsrc/cmd/gc/walk.c:2894: while(a != N && b != N && (a->op == b->op)) {\nunnecessary inner parens\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2897\nsrc/cmd/gc/walk.c:2897: case ONAME:\ndefault:\n    return 0;\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2898\nsrc/cmd/gc/walk.c:2898: return (a == b) || (strcmp(a->sym->name, b->sym->name) == 0);\nreturn a == b;\n\nONAME nodes are one per named thing.\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2903\nsrc/cmd/gc/walk.c:2903: rmatch = (ar->op == ONAME) && (br->op == ONAME) &&\nif(ar->op != ONAME || ar != br)\n    return 0;\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2904\nsrc/cmd/gc/walk.c:2904: ((ar == br) || (strcmp(ar->sym->name, br->sym->name) == 0));\nunnecessary inner parens x 2\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2909\nsrc/cmd/gc/walk.c:2909: rmatch = smallintconst(ar) && smallintconst(br) &&\nif(!isconst(ar, CTINT) || !isconst(br, CTINT) || mpcmpfixfix(ar->val.u.xval, br->val.u.xval) != 0)\n    return 0;\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2913\nsrc/cmd/gc/walk.c:2913: if(rmatch == 0)\ndrop",
			"disapproval": false,
			"date": "2013-03-21 20:08:39.345250",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2898\nsrc/cmd/gc/walk.c:2898: return (a == b) || (strcmp(a->sym->name, b->sym->name) == 0);\nOn 2013/03/21 20:08:39, rsc wrote:\n> return a == b;\n> \n> ONAME nodes are one per named thing.\n\nHuh, that's not what I see. Is this a compiler bug?\n\nFrom a clean tree, if I replace samecheap with this:\n\nstatic int\nsamecheap(Node *a, Node *b)\n{\n\tNode *ar, *br;\n\n\tif(a == N || b == N || a->op != b->op)\n\t\treturn 0;\n\t\n\tswitch(a->op) {\n\tcase ONAME:\n\t\treturn a == b;\n\tcase ODOT:\n\t\tar = a->right;\n\t\tbr = b->right;\n\t\tprint(\"ar=%N (op=%O) %p\\n\", ar, ar->op, ar);\n\t\tprint(\"br=%N (op=%O) %p\\n\", br, br->op, br);\n\t}\n\treturn 0;\n}\n\nthen I see different node pointers for the \"y\"s:\n\n$ cat main.go\npackage main\n\nvar w uint32\nvar x struct {\n\ty uint32\n}\n\nfunc main() {\n\tw = x.y<<31 ^ x.y>>1\n}\n$ go tool 6g -o /dev/null main.go\nar=y (op=NAME) 7f68fcddd2f0\nbr=y (op=NAME) 7f68fcddd958",
			"disapproval": false,
			"date": "2013-03-21 23:38:23.709630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/7944043/diff/6002/src/cmd/gc/walk.c#newcode2898\nsrc/cmd/gc/walk.c:2898: return (a == b) || (strcmp(a->sym->name, b->sym->name) == 0);\nYou're right: my case for ODOT and ODOTPTR is wrong. The ONAME is one per declared variable, though. This case is testing ONAME as an expression, which must be a declared variable, so a == b is correct (like it was in the original).\n\nIn the ODOT and ODOTPTR you need to compare the symbols instead of the names:\n\ncase ODOT:\ncase ODOTPTR:\n    ar = a->right;\n    br = b->right;\n    if(ar->op != ONAME || br->op != ONAME || ar->sym != br->sym)\n        return 0;\n    break;\n\nIn general, use of strcmp for equality is always incorrect: you can have multiple variables with the same name in different scopes (the Node* with op ONAME is the identifying piece) and you can have multiple fields with the same unexported names in a single struct (the Sym* is one per name,package pair and is the identifying piece).",
			"disapproval": false,
			"date": "2013-03-22 01:21:42.833690",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2013-03-22 23:29:34.463810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-04-01 12:52:28.795480",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-01 22:55:09.235930",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"jcb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=fa935e01b0a7 ***\n\ncmd/gc: recognize (a.b[0]<<1 | a.b[0]>>31) as a rotate, not just\n(x<<1 | x>>31).\n\nFixes issue 5084.\n\nOn the SHA3 benchmark proposals at\nhttps://codereview.appspot.com/7760044/\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkPermutationFunction         1288         1191   -7.53%\nBenchmarkSingleByteWrite             5795         5811   +0.28%\nBenchmarkBlockWrite512                178          179   +0.56%\nBenchmarkBlockWrite384                230          233   +1.30%\nBenchmarkBlockWrite256                282          286   +1.42%\nBenchmarkBlockWrite224                301          306   +1.66%\nBenchmarkBulkHashSHA3_512          326885       304548   -6.83%\nBenchmarkBulkHashSHA3_384          234839       220074   -6.29%\nBenchmarkBulkHashSHA3_256          186969       175790   -5.98%\nBenchmarkBulkHashSHA3_224          178133       167489   -5.98%\n\nFor a function like\n\nfunc g() {\n        x = a[3]<<20 | a[3]>>12\n}\n\nthe asm goes from\n\n0006 (main.go:10) TEXT    g+0(SB),$0-0\n0007 (main.go:10) MOVL    a+12(SB),BP\n0008 (main.go:10) LOCALS  ,$0\n0009 (main.go:11) MOVL    BP,BX\n0010 (main.go:11) SHLL    $20,BX\n0011 (main.go:11) SHRL    $12,BP\n0012 (main.go:11) ORL     BP,BX\n0013 (main.go:11) MOVL    BX,x+0(SB)\n0014 (main.go:12) RET     ,\n\nto\n\n0006 (main.go:10) TEXT    g+0(SB),$0-0\n0007 (main.go:10) LOCALS  ,$0\n0008 (main.go:11) MOVL    a+12(SB),BX\n0009 (main.go:11) ROLL    $20,BX\n0010 (main.go:11) MOVL    BX,x+0(SB)\n0011 (main.go:12) RET     ,\n\nR=rsc, iant, remyoudompheng\nCC=golang-dev, jcb\nhttps://codereview.appspot.com/7944043",
			"disapproval": false,
			"date": "2013-04-02 10:14:47.058570",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 7944043: cmd/gc: recognize (a.b[0]<<1 | a.b[0]>>31) as a rotate,...",
	"created": "2013-03-21 10:53:36.301800",
	"patchsets": [
		1,
		3,
		4001,
		6002,
		14001,
		22001
	],
	"modified": "2013-04-02 10:14:50.575880",
	"closed": true,
	"issue": 7944043
}