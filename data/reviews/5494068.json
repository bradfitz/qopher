{
	"description": "strconv: implement faster parsing of decimal numbers.\n\nThe algorithm is the same as in the double-conversion library\nwhich also implements Florian Loitsch's fast printing algorithm.\nIt uses extended floats with a 64-bit mantissa, but cannot give\nan answer for all cases.\n\n                           old ns/op  new ns/op  speedup\nBenchmarkAtof64Decimal         332        322      1.0x\nBenchmarkAtof64Float           385        373      1.0x\nBenchmarkAtof64FloatExp       9777        419     23.3x\nBenchmarkAtof64Big            3934        691      5.7x\nBenchmarkAtof64RandomBits    34060        899     37.9x\nBenchmarkAtof64RandomFloats   1329        680      2.0x\n\nSee F. Loitsch, ``Printing Floating-Point Numbers Quickly and\nAccurately with Integers'', Proceedings of the ACM, 2010.",
	"cc": [
		"ality@pbrane.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-18 10:34:48.117275",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My understanding is that Grisu1 and Grisu2 give answers\nthat convert back to the same float64 but that are not the\nsame digits you'd get from an \"as accurate as possible\"\nconversion, so I don't think they can help in strconv.\nGrisu3 would be fine.\n\nWhich one is this?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-19 16:41:46.185331",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon 19 December 2011 at 11:41 -0500, Russ Cox wrote:\n> My understanding is that Grisu1 and Grisu2 give answers\n> that convert back to the same float64 but that are not the\n> same digits you'd get from an \"as accurate as possible\"\n> conversion, so I don't think they can help in strconv.\n> Grisu3 would be fine.\n> \n> Which one is this?\n> \n> Russ\n\nHello Russ,\n\nThe description may have been misleading, but this is actually none of\nthe Grisu algorithms. It is the parsing algorithm (\"Atof64\") which can\nbe found in the double-conversion library\n  http://code.google.com/p/double-conversion/\n\nIt shares data structures, constant tables and ideas with the Grisu\nalgorithms, but it's really a different thing. However, I may have\naccidentally left over some unused functions in the CL that can be\nused for the printing part.\n\nI do plan to write the FormatFloat part (which would be the actual Grisu\nalgorithms), but it's not done yet.\n\nAny comments are welcome.\n\nRegards,\n-- \nR\u00e9my.\n",
			"disapproval": false,
			"date": "2011-12-19 18:45:49.480808",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go\nFile src/pkg/strconv/atof_test.go (right):\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode204\nsrc/pkg/strconv/atof_test.go:204: func BenchmarkAtof64RandomBits(b *testing.B) {\nOn 2011/12/18 11:51:00, ality wrote:\n> Did you intend to benchmark the initialization\n> of the numbers slice?  If not, stop the timer\n> and then start it again right before the real\n> ParseFloat loop.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode206\nsrc/pkg/strconv/atof_test.go:206: numbers := make([]string, 1024)\nOn 2011/12/19 20:15:54, rsc wrote:\n> Even better, do this in an init function and leave it in a global.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode218\nsrc/pkg/strconv/atof_test.go:218: func BenchmarkAtof64RandomFloats(b *testing.B) {\nOn 2011/12/18 11:51:00, ality wrote:\n> Same as above.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode220\nsrc/pkg/strconv/atof_test.go:220: numbers := make([]string, 1024)\nOn 2011/12/19 20:15:54, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go\nFile src/pkg/strconv/extfloat.go (right):\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode9\nsrc/pkg/strconv/extfloat.go:9: // Extended floating point numbers. A structure representing floating-point\nOn 2011/12/19 20:15:54, rsc wrote:\n> Please make these comments match the Go style\n> http://golang.org/doc/effective_go.html#commentary\n> \n> // An extFloat represents an extended floating-point number,\n> // with more precision than float64....\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode126\nsrc/pkg/strconv/extfloat.go:126: // Convert to a regular double-precision float.\nOn 2011/12/19 20:15:54, rsc wrote:\n> // floatBits returns the float64 bits for f.\n> // Overflow is set to true if ...\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode180\nsrc/pkg/strconv/extfloat.go:180: // Initialize a normalized extended float with a usual double-precision\nOn 2011/12/19 20:15:54, rsc wrote:\n> // Assign sets f = x.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode192\nsrc/pkg/strconv/extfloat.go:192: // Normalize an extended float and returns the shift that was applied\nOn 2011/12/19 20:15:54, rsc wrote:\n> // Normalize normalizes f to be <description> and \n> // returns the shift that was applied to the mantissa.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode210\nsrc/pkg/strconv/extfloat.go:210: // Unnormalized multiplication.\nOn 2011/12/19 20:15:54, rsc wrote:\n> // Multiply sets f to f * g; the result is not normalized.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode229\nsrc/pkg/strconv/extfloat.go:229: // Normalizes an extended float by multiplying by some power of 10.\nOn 2011/12/19 20:15:54, rsc wrote:\n> // Frexp10 normalizes f to be <description>\n> // by multiplying by some power of 10.\n> // It returns exp such that the original f is approximately the new f * 10^exp.\n> \n\nRemoved from the CL. This function is not used for the parsing part and needs some care.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode266\nsrc/pkg/strconv/extfloat.go:266: // Loads a value from a decimal number. A boolean is returned\nOn 2011/12/19 20:15:54, rsc wrote:\n> // AssignDecimal sets f = d.\n> // It returns ok = false if the assignment <why it would fail>.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode289\nsrc/pkg/strconv/extfloat.go:289: adj_exp := (exp10 - firstPowerOfTen) % stepPowerOfTen\nOn 2011/12/19 20:15:54, rsc wrote:\n> adjExp\n> grep for _ and replace with camelCase.\n\nDone.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode329\nsrc/pkg/strconv/extfloat.go:329: mant_extra := f.mant & ((1 << extrabits) - 1)\nOn 2011/12/19 20:15:54, rsc wrote:\n> can drop the () around the << and then gofmt\n> should use (1<<extrabits - 1)\n\nDone.",
			"disapproval": false,
			"date": "2011-12-19 21:01:42.404197",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=561eb3ec7eb5 ***\n\nstrconv: implement faster parsing of decimal numbers.\n\nThe algorithm is the same as in the double-conversion library\nwhich also implements Florian Loitsch's fast printing algorithm.\nIt uses extended floats with a 64-bit mantissa, but cannot give\nan answer for all cases.\n\n                           old ns/op  new ns/op  speedup\nBenchmarkAtof64Decimal         332        322      1.0x\nBenchmarkAtof64Float           385        373      1.0x\nBenchmarkAtof64FloatExp       9777        419     23.3x\nBenchmarkAtof64Big            3934        691      5.7x\nBenchmarkAtof64RandomBits    34060        899     37.9x\nBenchmarkAtof64RandomFloats   1329        680      2.0x\n\nSee F. Loitsch, ``Printing Floating-Point Numbers Quickly and\nAccurately with Integers'', Proceedings of the ACM, 2010.\n\nR=ality, rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5494068\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-19 21:45:53.768079",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're right, of course,  It was too early when I read this.\n",
			"disapproval": false,
			"date": "2011-12-19 20:10:00.435296",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks great, and thanks.  Bunch of small things.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go\nFile src/pkg/strconv/atof_test.go (right):\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode206\nsrc/pkg/strconv/atof_test.go:206: numbers := make([]string, 1024)\nEven better, do this in an init function and leave it in a global.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode220\nsrc/pkg/strconv/atof_test.go:220: numbers := make([]string, 1024)\nSame.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go\nFile src/pkg/strconv/extfloat.go (right):\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode9\nsrc/pkg/strconv/extfloat.go:9: // Extended floating point numbers. A structure representing floating-point\nPlease make these comments match the Go style\nhttp://golang.org/doc/effective_go.html#commentary\n\n// An extFloat represents an extended floating-point number,\n// with more precision than float64....\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode126\nsrc/pkg/strconv/extfloat.go:126: // Convert to a regular double-precision float.\n// floatBits returns the float64 bits for f.\n// Overflow is set to true if ...\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode180\nsrc/pkg/strconv/extfloat.go:180: // Initialize a normalized extended float with a usual double-precision\n// Assign sets f = x.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode192\nsrc/pkg/strconv/extfloat.go:192: // Normalize an extended float and returns the shift that was applied\n// Normalize normalizes f to be <description> and \n// returns the shift that was applied to the mantissa.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode210\nsrc/pkg/strconv/extfloat.go:210: // Unnormalized multiplication.\n// Multiply sets f to f * g; the result is not normalized.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode229\nsrc/pkg/strconv/extfloat.go:229: // Normalizes an extended float by multiplying by some power of 10.\n// Frexp10 normalizes f to be <description>\n// by multiplying by some power of 10.\n// It returns exp such that the original f is approximately the new f * 10^exp.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode266\nsrc/pkg/strconv/extfloat.go:266: // Loads a value from a decimal number. A boolean is returned\n// AssignDecimal sets f = d.\n// It returns ok = false if the assignment <why it would fail>.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode289\nsrc/pkg/strconv/extfloat.go:289: adj_exp := (exp10 - firstPowerOfTen) % stepPowerOfTen\nadjExp\ngrep for _ and replace with camelCase.\n\nhttp://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/extfloat.go#newcode329\nsrc/pkg/strconv/extfloat.go:329: mant_extra := f.mant & ((1 << extrabits) - 1)\ncan drop the () around the << and then gofmt\nshould use (1<<extrabits - 1)",
			"disapproval": false,
			"date": "2011-12-19 20:15:53.752349",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-19 21:45:30.958688",
			"approval": true
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I haven't yet looked at the implementation\nbut noticed this in the benchmarks.\n\nhttps://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go\nFile src/pkg/strconv/atof_test.go (right):\n\nhttps://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode204\nsrc/pkg/strconv/atof_test.go:204: func BenchmarkAtof64RandomBits(b *testing.B) {\nDid you intend to benchmark the initialization\nof the numbers slice?  If not, stop the timer\nand then start it again right before the real\nParseFloat loop.\n\nhttps://codereview.appspot.com/5494068/diff/3005/src/pkg/strconv/atof_test.go#newcode218\nsrc/pkg/strconv/atof_test.go:218: func BenchmarkAtof64RandomFloats(b *testing.B) {\nSame as above.",
			"disapproval": false,
			"date": "2011-12-18 11:51:00.525970",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ality@pbrane.org, rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-19 21:01:04.085465",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5494068: strconv: implement faster parsing of decimal numbers.",
	"created": "2011-12-18 10:24:43.978498",
	"patchsets": [
		1,
		2001,
		3005,
		7003
	],
	"modified": "2011-12-19 21:54:59.484504",
	"closed": true,
	"issue": 5494068
}