{
	"description": "testing: Add support for running tests in parallel (t.Parallel API).\n\nSee discussion at https://groups.google.com/d/topic/golang-dev/RAKiqi44GEU/discussion",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dvyukov@google.com",
		"rogpeppe@gmail.com",
		"r@golang.org",
		"r@google.com",
		"borman@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-22 20:31:08.759113",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-09-21 00:15:19.943386",
			"approval": true
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-19 22:51:51.106328",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-22 01:53:10.784637",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/21 08:35:38, rog wrote:\n> http://codereview.appspot.com/5071044/diff/12001/src/pkg/testing/testing.go#newcode243\n> src/pkg/testing/testing.go:243: t := &T{ch: make(chan *T), pch: pch, name:\n> testName, wch: wch}\n> i don't think you need two channels here; you could just use the same channel\n> (store it in t.ch) throughout - no need to make a new one each time.\nCan you explain. I *think* you mean to move the creation of pch to the outer loop. If you mean having only t.ch, then I couldn't find a way to do it since t.Parallel is called after the test is being run.\n(Or do you mean as a closure?).",
			"disapproval": false,
			"date": "2011-09-21 19:10:36.101209",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go#newcode151\nsrc/pkg/testing/testing.go:151: // Signal that this test can be run in parallel to others.\nGo comments start with the name of the subject.\n\n// Parallel signals that ...\n\nAlso, rather than referring to mailing list threads in commit messages users won't see, you should elaborate here on the details.\n\nNotably, does this run it in parallel to any test, or only tests which were also marked Parallel?",
			"disapproval": false,
			"date": "2011-09-19 22:56:43.213566",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go#newcode155\nsrc/pkg/testing/testing.go:155: t.ch = t.pch\nSo parallel tests run in parallel with non-parallel ones. Am I missing something? We decided to not anything in parallel with sequential tests, so this function must include some blocking, and released only when all sequential tests have been completed.\n\nhttp://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go#newcode178\nsrc/pkg/testing/testing.go:178: println(\"--- PASS:\", t.name, tstr)\nIt will lead to intermixed output of test results. Isn't it going to be a complete mess? I am not sure what to do with it right now, but I think we must at least consider some alternatives.\nMaybe collect all test-related output to a separate buffer, and then output it at once?",
			"disapproval": false,
			"date": "2011-09-19 23:57:30.194524",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go#newcode151\nsrc/pkg/testing/testing.go:151: // Signal that this test can be run in parallel to others.\n> Go comments start with the name of the subject.\n> \n> // Parallel signals that ...\nOK\n \n> Also, rather than referring to mailing list threads in commit messages users\n> won't see, you should elaborate here on the details.\nOK, will do next time.\n\n> Notably, does this run it in parallel to any test, or only tests which were also\n> marked Parallel?\nIn parallel to all other tests, but this is going to be fixed.\n\nhttp://codereview.appspot.com/5071044/diff/4001/src/pkg/testing/testing.go#newcode155\nsrc/pkg/testing/testing.go:155: t.ch = t.pch\nOn 2011/09/19 23:57:30, dvyukov wrote:\n> So parallel tests run in parallel with non-parallel ones. Am I missing\n> something? We decided to not anything in parallel with sequential tests, so this\n> function must include some blocking, and released only when all sequential tests\n> have been completed.\nYou're right. Missed that one, will fix.",
			"disapproval": false,
			"date": "2011-09-20 17:26:44.018166",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i wonder whether it's right that all the parallel tests should run at once.\nit would be trivial to limit the number (GOMAXPROCS*2 ?) of tests\nrun at once.\n\nOn 21 September 2011 01:15,  <dvyukov@google.com> wrote:\n> LGTM\n>\n> http://codereview.appspot.com/5071044/\n>\n",
			"disapproval": false,
			"date": "2011-09-21 08:22:45.797464",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/21 08:22:45, rog wrote:\n> i wonder whether it's right that all the parallel tests should run at once.\n> it would be trivial to limit the number (GOMAXPROCS*2 ?) of tests\n> run at once.\nIMO it depends on the test scenario. In my case most of my tests wait on IO, so I'd like to run as much as possible in parallel. Probably a configuration option, but this can be done in a later step after we have some feedback from users.",
			"disapproval": false,
			"date": "2011-09-21 19:08:35.023351",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 21 September 2011 20:10,  <miki.tebeka@gmail.com> wrote:\n> On 2011/09/21 08:35:38, rog wrote:\n>\n> http://codereview.appspot.com/5071044/diff/12001/src/pkg/testing/testing.go#newcode243\n>>\n>> src/pkg/testing/testing.go:243: t := &T{ch: make(chan *T), pch: pch,\n>\n> name:\n>>\n>> testName, wch: wch}\n>> i don't think you need two channels here; you could just use the same\n>\n> channel\n>>\n>> (store it in t.ch) throughout - no need to make a new one each time.\n>\n> Can you explain. I *think* you mean to move the creation of pch to the\n> outer loop. If you mean having only t.ch, then I couldn't find a way to\n> do it since t.Parallel is called after the test is being run.\n> (Or do you mean as a closure?).\n\ni mean that you could store the same channel (created in the outer loop)\nin each T. there would be no contention for it because Parallel waits\nfor t.wch before using t.ch again.\n",
			"disapproval": false,
			"date": "2011-09-21 19:25:31.448241",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-20 17:27:53.271945",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-21 19:54:48.847389",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Any comments?\n",
			"disapproval": false,
			"date": "2011-09-20 23:18:46.615868",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/12001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/12001/src/pkg/testing/testing.go#newcode243\nsrc/pkg/testing/testing.go:243: t := &T{ch: make(chan *T), pch: pch, name: testName, wch: wch}\ni don't think you need two channels here; you could just use the same channel (store it in t.ch) throughout - no need to make a new one each time.\n\nhttp://codereview.appspot.com/5071044/diff/12001/src/pkg/testing/testing.go#newcode247\nsrc/pkg/testing/testing.go:247: numParallel += 1\nnumParallel++",
			"disapproval": false,
			"date": "2011-09-21 08:35:38.537597",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "i've tried to be a bit more explicit about what i mean here.\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go#newcode98\nsrc/pkg/testing/testing.go:98: pch      chan *T   // Output for parallel tests\nd\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go#newcode155\nsrc/pkg/testing/testing.go:155: t.parallel = true\nthis doesn't appear to be used. perhaps it should be, to make t.Parallel idempotent. as it is it'll deadlock if called twice.\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go#newcode157\nsrc/pkg/testing/testing.go:157: t.ch = t.pch\nd\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go#newcode209\nsrc/pkg/testing/testing.go:209: pch := make(chan *T)\ns/pch/ch/\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go#newcode229\nsrc/pkg/testing/testing.go:229: wch := make(chan bool)\ni'm not sure wch is a good name here. startParallel? (same in T)\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go#newcode243\nsrc/pkg/testing/testing.go:243: t := &T{ch: make(chan *T), pch: pch, name: testName, wch: wch}\nt := &T{ch: ch, name: testName, wch: wch}\n\nhttp://codereview.appspot.com/5071044/diff/6002/src/pkg/testing/testing.go#newcode255\nsrc/pkg/testing/testing.go:255: out := <-pch\ns/pch/ch/",
			"disapproval": false,
			"date": "2011-09-21 20:22:53.162463",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please ignore this patch, sorry\n",
			"disapproval": false,
			"date": "2011-09-22 01:57:16.859505",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-22 02:09:15.635521",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode212\nsrc/pkg/testing/testing.go:212: }()\ni don't think there's any need for this. there's no printing which is called concurrently. revert to println. actually, i can't see why println was used - given that fmt is a dependency anyway, it should probably use fmt.Printf or Fprintf(os.Stderr as appropriate, but that's probably fodder for another CL.\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode217\nsrc/pkg/testing/testing.go:217: PROCS:\nd\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode223\nsrc/pkg/testing/testing.go:223: break PROCS\ns/ PROCS//\nbut can this ever actually happen? the old code didn't bother checking\u00b8and the docs don't say that it GOMAXPROCS might not succeed.\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode226\nsrc/pkg/testing/testing.go:226: numParallel, startParallel := 0, make(chan bool)\ni think these would be better on two separate lines. they're not that closely related.\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode246\nsrc/pkg/testing/testing.go:246: } else {\nno need for the else. save an indentation level.",
			"disapproval": false,
			"date": "2011-09-22 08:13:20.606069",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode212\nsrc/pkg/testing/testing.go:212: }()\nOn 2011/09/22 08:13:20, rog wrote:\n> i don't think there's any need for this. there's no printing which is called\n> concurrently. revert to println. actually, i can't see why println was used -\n> given that fmt is a dependency anyway, it should probably use fmt.Printf or\n> Fprintf(os.Stderr as appropriate, but that's probably fodder for another CL.\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode217\nsrc/pkg/testing/testing.go:217: PROCS:\nOn 2011/09/22 08:13:20, rog wrote:\n> d\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode223\nsrc/pkg/testing/testing.go:223: break PROCS\nOn 2011/09/22 08:13:20, rog wrote:\n> s/ PROCS//\n> but can this ever actually happen? the old code didn't bother checking\u00b8and the\n> docs don't say that it GOMAXPROCS might not succeed.\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode226\nsrc/pkg/testing/testing.go:226: numParallel, startParallel := 0, make(chan bool)\nOn 2011/09/22 08:13:20, rog wrote:\n> i think these would be better on two separate lines. they're not that closely\n> related.\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/23001/src/pkg/testing/testing.go#newcode246\nsrc/pkg/testing/testing.go:246: } else {\nOn 2011/09/22 08:13:20, rog wrote:\n> no need for the else. save an indentation level.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-22 20:30:35.397459",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Any more comments? I'd really like to get this into a coming release.\n",
			"disapproval": false,
			"date": "2011-09-27 15:19:23.897799",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOn 27 September 2011 16:19, Miki Tebeka <miki.tebeka@gmail.com> wrote:\n> Any more comments? I'd really like to get this into a coming release.\n>\n",
			"disapproval": false,
			"date": "2011-09-27 15:56:55.448065",
			"approval": true
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\n>\n> that said, this is not acceptable. if i have 1000 parallel tests, it\n> will run them all at once. they need to be gated with at most GOMAXPROCS\n> at once. moreover, if you're running with procs not equal to the start\n> value of GOMAXPROCS, you shouldn't be doing this at all.\n>\n> --parallel should be for default parallel testing in the simplest case,\n> with GOMAXPROCS tests running at once. nothing else should happen.\n>\n I disagree with that. I don't think that GOMAXPROCS and number of parallel \ntests should be connected.\nAnd also since the default value of GOMAXPROCS is 1, it mean that by default \nyou will not get any parallelism even when you add t.Parallel() to your \ntests.\n\nAs said, I'm doing Selenium tests, and they mostly wait on IO from the \nserver. I *want* as many of them in parallel as possible.\nMaybe add GOMAXTESTS environment variable to control that? (by default be \nunbounded).\n",
			"disapproval": false,
			"date": "2011-09-29 17:03:15.368573",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This needs a rethink.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode95\nsrc/pkg/testing/testing.go:95: errors        string\ns/errors/error/\nadd\n// Error string from test.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode96\nsrc/pkg/testing/testing.go:96: failed        bool\n// Test has failed.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode97\nsrc/pkg/testing/testing.go:97: ch            chan *T   // Output for serial tests\ns/$/./ here and below\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode99\nsrc/pkg/testing/testing.go:99: name          string\n// Name of test.\n\nalso move this to the first entry\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode100\nsrc/pkg/testing/testing.go:100: ns            int64\n// Duration of test in nanoseconds.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode151\nsrc/pkg/testing/testing.go:151: // Parallel signal that this test can be run in parallel to other parallel tests.\ns/signal/signals/\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode152\nsrc/pkg/testing/testing.go:152: // This will block until all serial tests in this cpu group are done.\ns/This will block/It waits/\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode238\nsrc/pkg/testing/testing.go:238: close(startParallel) // Release parallel tests\ns/$/./\n\ncute trick. gross but cute.\n\nthat said, this is not acceptable. if i have 1000 parallel tests, it will run them all at once. they need to be gated with at most GOMAXPROCS at once. moreover, if you're running with procs not equal to the start value of GOMAXPROCS, you shouldn't be doing this at all.\n\n--parallel should be for default parallel testing in the simplest case, with GOMAXPROCS tests running at once. nothing else should happen.",
			"disapproval": false,
			"date": "2011-09-28 15:45:01.234507",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode238\nsrc/pkg/testing/testing.go:238: close(startParallel) // Release parallel tests\nOn 2011/09/28 15:45:01, r wrote:\n> s/$/./\n> \n> cute trick. gross but cute.\n> \n> that said, this is not acceptable. if i have 1000 parallel tests, it will run\n> them all at once. they need to be gated with at most GOMAXPROCS at once.\n> moreover, if you're running with procs not equal to the start value of\n> GOMAXPROCS, you shouldn't be doing this at all.\n> \n> --parallel should be for default parallel testing in the simplest case, with\n> GOMAXPROCS tests running at once. nothing else should happen.\n\ni mentioned this earlier and tend to agree. it's fairly trivial to do without changing anything other than these few lines of code, i think.\n\nsomething like this, perhaps:\n\nwaiting := numParallel\nrunning := 0\nfinished := 0\nfor finished < numParallel {\n    if running < GOMAXPROCS && waiting > 0 {\n        startParallel <- true\n        waiting--\n        running++\n        continue\n    }\n    t := <-ch\n    report(t)\n    ok = ok && !t.failed\n    running--\n    finished++\n}",
			"disapproval": false,
			"date": "2011-09-28 16:59:40.981449",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> that said, this is not acceptable. if i have 1000 parallel tests, it will run\n> them all at once.\n\nAnd... what is the problem with that?\n\n> they need to be gated with at most GOMAXPROCS at once.\n\nWhy?\n\n> moreover, if you're running with procs not equal to the start value of\n> GOMAXPROCS, you shouldn't be doing this at all.\n> \n> --parallel should be for default parallel testing in the simplest case, with\n> GOMAXPROCS tests running at once. nothing else should happen.\n\nRuntime will automatically gate number of simultaneously executing tests to GOMAXPROCS. If there are some inactive tests due to IO or timers, well, that's great, user will get substantial speedups.\n\nWould you limit number of concurrent requests in a server to GOMAXPROCS? Yeah, it's not a very good idea. Tests are exactly the same. It is the whole point of goroutines interleaved on limited number of threads.\n\nThe only reason to introduce some gating I see is to prevent total system resources over-subscription, but then is must be gated to something like 1000*GOMAXPROCS. And actually I do not see reason to do it now, when we have exactly 0 parallel tests out there.",
			"disapproval": false,
			"date": "2011-09-28 17:40:08.284514",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 28, 2011, at 10:40 AM, dvyukov@google.com wrote:\n\n>> that said, this is not acceptable. if i have 1000 parallel tests, it\n> will run\n>> them all at once.\n> \n> And... what is the problem with that?\n> \n>> they need to be gated with at most GOMAXPROCS at once.\n> \n> Why?\n\nIt's good design.\nIt's good citizenship.\nIt avoids oversubscription of resources.\nIt reduces cache pressure, so the whole job will run faster if CPU-bound.\nIt's easy.\n\n>> moreover, if you're running with procs not equal to the start value of\n>> GOMAXPROCS, you shouldn't be doing this at all.\n> \n>> --parallel should be for default parallel testing in the simplest\n> case, with\n>> GOMAXPROCS tests running at once. nothing else should happen.\n> \n> Runtime will automatically gate number of simultaneously executing tests\n> to GOMAXPROCS. If there are some inactive tests due to IO or timers,\n> well, that's great, user will get substantial speedups.\n> \n> Would you limit number of concurrent requests in a server to GOMAXPROCS?\n> Yeah, it's not a very good idea. Tests are exactly the same. It is the\n> whole point of goroutines interleaved on limited number of threads.\n> \n> The only reason to introduce some gating I see is to prevent total\n> system resources over-subscription, but then is must be gated to\n> something like 1000*GOMAXPROCS. And actually I do not see reason to do\n> it now, when we have exactly 0 parallel tests out there.\n\nWhen it's easy to do the right thing, there's no excuse not to.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-28 17:42:53.680437",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Sep 28, 2011 at 9:42 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n>\n> On Sep 28, 2011, at 10:40 AM, dvyukov@google.com wrote:\n>\n> >> that said, this is not acceptable. if i have 1000 parallel tests, it\n> > will run\n> >> them all at once.\n> >\n> > And... what is the problem with that?\n> >\n> >> they need to be gated with at most GOMAXPROCS at once.\n> >\n> > Why?\n>\n> It's good design.\n>\n\nIt's bad design, because it ties together unrelated things: GOMAXPROCS and\nnumber of concurrent requests/tests.\n\n\n> It's good citizenship.\n\nIt avoids oversubscription of resources.\n>\n\nIt's not the case. A lot of goroutines do not oversubscribe processors and\nlimited number of goroutines do not oversubscribe memory.\nMoreover, a single test can perfectly utilize all processors, and at the\nsame time GOMAXPROCS tests can easily totally under-utilize processors.\nIt's unrelated things.\n\n\nIt reduces cache pressure, so the whole job will run faster if CPU-bound.\n>\n\nIt's a common (not saying that it's the right thing) for a Go program to\nhave more gorotuines than threads. Then, efficient usage of system resources\nis the work for gorotuine scheduler. User programs should not limit number\nof gorotuines to GOMAXPROCS.\n\n\n> It's easy.\n\n\n> >> moreover, if you're running with procs not equal to the start value of\n> >> GOMAXPROCS, you shouldn't be doing this at all.\n> >\n> >> --parallel should be for default parallel testing in the simplest\n> > case, with\n> >> GOMAXPROCS tests running at once. nothing else should happen.\n> >\n> > Runtime will automatically gate number of simultaneously executing tests\n> > to GOMAXPROCS. If there are some inactive tests due to IO or timers,\n> > well, that's great, user will get substantial speedups.\n> >\n> > Would you limit number of concurrent requests in a server to GOMAXPROCS?\n> > Yeah, it's not a very good idea. Tests are exactly the same. It is the\n> > whole point of goroutines interleaved on limited number of threads.\n> >\n> > The only reason to introduce some gating I see is to prevent total\n> > system resources over-subscription, but then is must be gated to\n> > something like 1000*GOMAXPROCS. And actually I do not see reason to do\n> > it now, when we have exactly 0 parallel tests out there.\n>\n> When it's easy to do the right thing, there's no excuse not to.\n>\n>\nThe right thing to do is to limit number of concurrent tests to\nmin(K1*GOMAXPROCS, K2*SYSTEM_MEM, ...). The problem is that we don't know K1\nand K2, so it's not easy. And once again, it's the work for\nscheduler/runtime, not for user program.\n",
			"disapproval": false,
			"date": "2011-09-28 18:07:36.931424",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I tend to agree with Dmitry.  Given the foundations of Go, I think the\narguments that Rob is mostly point to implementation issues or mismatched\nexpectations.\n\nThrottling the number of goroutines that are runnable does not reduce the\nnumber of goroutines in this design, though it *might* reduce the memory\nresident set size.  If the goroutine scheduler is inefficient for large\nnumber of runnable goroutines (I don't believe this to be the case) then\nthrottling the number of goroutines fixes a symptom and not a the problem.\n Throttling the number of goroutines that are runnable will reduce the wall\nclock time for an individual test but may increase the wall clock time for\nthe sum of the tests.  In order for this throttling to make the total wall\nclock time to be reduced then at least one of the following would need to\nhappen:\n\n   1. Overcome inefficient scheduling/thrashing of multiple goroutines\n   2. Reduce the number of \"blocking\" threads started\n   3. Reduce the amount of time in synchronization (which reduces contention\n   time)\n   4. Reduce cache misses by reducing RSS\n   5. Some how keep affinity of memory to a a chip (or better, a core)\n\nThe first three would be addressing issues in the Go runtime.  I include 3\nin this case because in theory the tests themselves should have no\nsynchronization.  3 is probably a variant of 1.\n\n4 would require some benchmarking and will have different characteristics as\nthe capabilities of CPUs constantly changes.\n\n5 can actually have significant impact (which is why GOMAXPROCS=1 is often a\ngood idea).  Addressing 5 will require the Go runtime to assign processor\naffinity to the threads and goroutine affinity to the threads.  My work with\nrealtime multi-core scheduling for VxWorks demonstrated how huge of an\nimpact 5 has.\n\nAll of that said, I don't think this whole parallel idea is all that\nhelpful.  Rather than run multiple tests within a single test program in\nparallel, it would be more efficient to run multiple test programs in\nparallel where each one is running its tests in serial.  This was a big\nlesson learned when working with high performance super computing.  Use the\ncoarsest grain parallelism that will keep the resources busy.  It addresses\nall 5 above.\n\n    -Paul\n\nOn Wed, Sep 28, 2011 at 11:07 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\n\n> On Wed, Sep 28, 2011 at 9:42 PM, Rob 'Commander' Pike <r@google.com>wrote:\n>\n>>\n>> On Sep 28, 2011, at 10:40 AM, dvyukov@google.com wrote:\n>>\n>> >> that said, this is not acceptable. if i have 1000 parallel tests, it\n>> > will run\n>> >> them all at once.\n>> >\n>> > And... what is the problem with that?\n>> >\n>> >> they need to be gated with at most GOMAXPROCS at once.\n>> >\n>> > Why?\n>>\n>> It's good design.\n>>\n>\n> It's bad design, because it ties together unrelated things: GOMAXPROCS and\n> number of concurrent requests/tests.\n>\n>\n>> It's good citizenship.\n>\n> It avoids oversubscription of resources.\n>>\n>\n> It's not the case. A lot of goroutines do not oversubscribe processors and\n> limited number of goroutines do not oversubscribe memory.\n> Moreover, a single test can perfectly utilize all processors, and at the\n> same time GOMAXPROCS tests can easily totally under-utilize processors.\n> It's unrelated things.\n>\n>\n> It reduces cache pressure, so the whole job will run faster if CPU-bound.\n>>\n>\n> It's a common (not saying that it's the right thing) for a Go program to\n> have more gorotuines than threads. Then, efficient usage of system resources\n> is the work for gorotuine scheduler. User programs should not limit number\n> of gorotuines to GOMAXPROCS.\n>\n>\n>> It's easy.\n>\n>\n>> >> moreover, if you're running with procs not equal to the start value of\n>> >> GOMAXPROCS, you shouldn't be doing this at all.\n>> >\n>> >> --parallel should be for default parallel testing in the simplest\n>> > case, with\n>> >> GOMAXPROCS tests running at once. nothing else should happen.\n>> >\n>> > Runtime will automatically gate number of simultaneously executing tests\n>> > to GOMAXPROCS. If there are some inactive tests due to IO or timers,\n>> > well, that's great, user will get substantial speedups.\n>> >\n>> > Would you limit number of concurrent requests in a server to GOMAXPROCS?\n>> > Yeah, it's not a very good idea. Tests are exactly the same. It is the\n>> > whole point of goroutines interleaved on limited number of threads.\n>> >\n>> > The only reason to introduce some gating I see is to prevent total\n>> > system resources over-subscription, but then is must be gated to\n>> > something like 1000*GOMAXPROCS. And actually I do not see reason to do\n>> > it now, when we have exactly 0 parallel tests out there.\n>>\n>> When it's easy to do the right thing, there's no excuse not to.\n>>\n>>\n> The right thing to do is to limit number of concurrent tests to\n> min(K1*GOMAXPROCS, K2*SYSTEM_MEM, ...). The problem is that we don't know K1\n> and K2, so it's not easy. And once again, it's the work for\n> scheduler/runtime, not for user program.\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-28 18:59:24.498484",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Is there a way to move this forward?\n",
			"disapproval": false,
			"date": "2011-09-30 22:06:09.066488",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 30, 2011, at 3:06 PM, Miki Tebeka wrote:\n\n> Is there a way to move this forward?\n\nYes, address my comments.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-30 23:39:52.298902",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode97\nsrc/pkg/testing/testing.go:97: errors        string    // Accumlation of messages from Log calls.\nOn 2011/10/04 02:42:56, r wrote:\n> Even though it's not yours, you're there: please fix this comment. It's got a\n> spelling mistake anyway.\n> // Error string from test.\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode154\nsrc/pkg/testing/testing.go:154: // Note that only test.parallel tests will run at the same time.\nOn 2011/10/04 02:42:56, r wrote:\n> // Parallel signals that this test is to be run in parallel with (and only with)\n> // other parallel tests in this CPU group.\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode194\nsrc/pkg/testing/testing.go:194: print(fmt.Sprintf(format, \"PASS\", t.name, tstr, t.errors))\nOn 2011/10/04 02:42:56, r wrote:\n> we have fmt - why not use it?\n> fmt.Fprintf(os.Stderr, ....)\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode200\nsrc/pkg/testing/testing.go:200: println(\"testing: warning: no tests to run\")\nOn 2011/10/04 02:42:56, r wrote:\n> s/println/fmt.Println/\nprintln prints to os.Stderr, while fmt.Println prints to os.Stdout. Will change to fmt.Fprintln(os.Stderr ...)\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode243\nsrc/pkg/testing/testing.go:243: for finished < numParallel {\nOn 2011/10/04 02:42:56, r wrote:\n> you don't need finished. just count down numParallel.\n> for ; numParallel; numParallel-- {\n> }\nIt's not the same logic. \"finished\" makes sure we wait for all tests, otherwise the top level loop will exit before we wait on the final tests.\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode244\nsrc/pkg/testing/testing.go:244: if (running < *parallel) && (waiting > 0) {\nOn 2011/10/04 02:42:56, r wrote:\n> parens unnecessary\n\nDone.",
			"disapproval": false,
			"date": "2011-10-04 03:51:19.804066",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com, r@golang.org, r@google.com, borman@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-04 00:18:45.063952",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/40001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/40001/src/pkg/testing/testing.go#newcode253\nsrc/pkg/testing/testing.go:253: finished++\ni missed the continue. still, it's the same logic if you do numParallell-- here. you don't need all these variables",
			"disapproval": false,
			"date": "2011-10-04 03:53:03.979360",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode95\nsrc/pkg/testing/testing.go:95: errors        string\nOn 2011/09/28 15:45:01, r wrote:\n> s/errors/error/\n> add\n> // Error string from test.\nThis is not my doing. I'd like to focus the review on the issue I'm trying to get in. I already fixed several other issues that are not related to the problem solved here.\n\nAlso this is an accumulation of errors (what Log function does it append to this string). So the name looks ok to me, I'll add a comment.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode96\nsrc/pkg/testing/testing.go:96: failed        bool\nOn 2011/09/28 15:45:01, r wrote:\n> // Test has failed.\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode97\nsrc/pkg/testing/testing.go:97: ch            chan *T   // Output for serial tests\nOn 2011/09/28 15:45:01, r wrote:\n> s/$/./ here and below\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode99\nsrc/pkg/testing/testing.go:99: name          string\nOn 2011/09/28 15:45:01, r wrote:\n> // Name of test.\n> \n> also move this to the first entry\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode100\nsrc/pkg/testing/testing.go:100: ns            int64\nOn 2011/09/28 15:45:01, r wrote:\n> // Duration of test in nanoseconds.\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode151\nsrc/pkg/testing/testing.go:151: // Parallel signal that this test can be run in parallel to other parallel tests.\nOn 2011/09/28 15:45:01, r wrote:\n> s/signal/signals/\n\nDone.\n\nhttp://codereview.appspot.com/5071044/diff/26003/src/pkg/testing/testing.go#newcode152\nsrc/pkg/testing/testing.go:152: // This will block until all serial tests in this cpu group are done.\nOn 2011/09/28 15:45:01, r wrote:\n> s/This will block/It waits/\n\nDone.",
			"disapproval": false,
			"date": "2011-10-04 00:19:09.501099",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode97\nsrc/pkg/testing/testing.go:97: errors        string    // Accumlation of messages from Log calls.\nEven though it's not yours, you're there: please fix this comment. It's got a spelling mistake anyway.\n// Error string from test.\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode154\nsrc/pkg/testing/testing.go:154: // Note that only test.parallel tests will run at the same time.\n// Parallel signals that this test is to be run in parallel with (and only with)\n// other parallel tests in this CPU group.\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode194\nsrc/pkg/testing/testing.go:194: print(fmt.Sprintf(format, \"PASS\", t.name, tstr, t.errors))\nwe have fmt - why not use it?\nfmt.Fprintf(os.Stderr, ....)\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode200\nsrc/pkg/testing/testing.go:200: println(\"testing: warning: no tests to run\")\ns/println/fmt.Println/\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode243\nsrc/pkg/testing/testing.go:243: for finished < numParallel {\nyou don't need finished. just count down numParallel.\nfor ; numParallel; numParallel-- {\n}\n\nhttp://codereview.appspot.com/5071044/diff/35001/src/pkg/testing/testing.go#newcode244\nsrc/pkg/testing/testing.go:244: if (running < *parallel) && (waiting > 0) {\nparens unnecessary",
			"disapproval": false,
			"date": "2011-10-04 02:42:56.199538",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com, r@golang.org, r@google.com, borman@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-04 03:51:37.466852",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/40001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/40001/src/pkg/testing/testing.go#newcode253\nsrc/pkg/testing/testing.go:253: finished++\nOn 2011/10/04 03:53:04, r wrote:\n> i missed the continue. still, it's the same logic if you do numParallell-- here.\n> you don't need all these variables\n\n+1.\nbut i think perhaps the distinction between parallel and numParallel is confusing. i wonder if the flag would be better named \"maxprocs\", and then the association with GOMAXPROCS would be more obvious too.",
			"disapproval": false,
			"date": "2011-10-04 07:47:01.595086",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "the problem with that renaming is it decouples from the function call,\nParallel(). plus i think --parallel=10 is clear.\n\nbut i do take your point.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-10-04 14:19:39.543397",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com, r@golang.org, r@google.com, borman@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-06 02:04:21.619112",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2011-10-06 02:04:30.999670",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Now we're down to one keystroke :)\n\nAlso please fill in the CLA as described in contribute.html if you haven't already.\n\nhttp://codereview.appspot.com/5071044/diff/43001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/43001/src/pkg/testing/testing.go#newcode244\nsrc/pkg/testing/testing.go:244: numParallel --\ndid this run through gofmt? there's a space before the --\nplease fix.",
			"disapproval": false,
			"date": "2011-10-06 03:33:31.642611",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dvyukov@google.com, rogpeppe@gmail.com, r@golang.org, r@google.com, borman@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-06 16:49:08.260439",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5071044/diff/43001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5071044/diff/43001/src/pkg/testing/testing.go#newcode244\nsrc/pkg/testing/testing.go:244: numParallel --\nOn 2011/10/06 03:33:31, r wrote:\n> did this run through gofmt? there's a space before the --\n> please fix.\n\nDone.",
			"disapproval": false,
			"date": "2011-10-06 16:49:11.560867",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> Now we're down to one keystroke :)\nFinally, this has been a humbling experience. Thanks for all the help.\n>\n> Also please fill in the CLA as described in contribute.html if you haven't\n> already.\nCLA filled.",
			"disapproval": false,
			"date": "2011-10-06 16:52:44.264955",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9ef736cf7b93 ***\n\ntesting: Add support for running tests in parallel (t.Parallel API).\n\nSee discussion at https://groups.google.com/d/topic/golang-dev/RAKiqi44GEU/discussion\n\nR=golang-dev, bradfitz, dvyukov, rogpeppe, r, r, borman\nCC=golang-dev\nhttp://codereview.appspot.com/5071044\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2011-10-06 16:58:41.343672",
			"approval": false
		},
		{
			"sender": "miki.tebeka@gmail.com",
			"recipients": [
				"miki.tebeka@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"r@google.com",
				"borman@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-15 18:35:08.310523",
			"approval": false
		}
	],
	"owner_email": "miki.tebeka@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "tebeka",
	"subject": "code review 5071044: testing: Add support for running tests in parallel (t.P...",
	"created": "2011-09-19 21:44:20.064134",
	"patchsets": [
		1,
		2001,
		4001,
		12001,
		6002,
		12004,
		11004,
		23001,
		18003,
		26003,
		35001,
		40001,
		43001,
		50001
	],
	"modified": "2011-12-15 18:35:10.380455",
	"closed": true,
	"issue": 5071044
}