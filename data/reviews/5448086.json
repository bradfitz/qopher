{
	"description": "gofmt: handle &T in composite literal simplify",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 2, 2011 at 14:07, Robert Griesemer <gri@golang.org> wrote:\n> syntactically yes; semantically not really. the spec might be a bit\n> ambiguous here: is (0) the same valus as 0? i'm not saying we need to\n> address it.\n\ni think the spec is clear: the grammar for a composite\nliteral does not admit [][]int{ ({1,2,3}) }.  so this test is\njust checking that gofmt -s doesn't try to generate it.\n\ngofmt could arguably remove the ( ) in this one case, like\nit does for the parens in if(x) { ... }, but i am not sure\nit will come up in practice.\n\nruss\n",
			"disapproval": false,
			"date": "2011-12-02 19:10:11.707777",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 2, 2011 at 10:58 AM, Russ Cox <rsc@golang.org> wrote:\n>> src/cmd/gofmt/testdata/composites.golden:151: (&[]int{}),\n>> I guess we should also eliminate the ()'s - but that can be another CL.\n>\n> the () are significant here: they make the expression\n> not a nested composite literal, so it cannot be shortened.\n\nsyntactically yes; semantically not really. the spec might be a bit\nambiguous here: is (0) the same valus as 0? i'm not saying we need to\naddress it.\n- gri\n",
			"disapproval": false,
			"date": "2011-12-02 19:07:32.376354",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=90b1026581f1 ***\n\ngofmt: handle &T in composite literal simplify\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/5448086",
			"disapproval": false,
			"date": "2011-12-02 19:14:07.944960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-02 18:13:18.158438",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> src/cmd/gofmt/simplify.go:54: *px = inner // drop &\n> // drop &T\n\nchanged to\n\tinner.Type = nil  // drop T\n\t*px = inner // drop &\n\n> src/cmd/gofmt/testdata/composites.golden:151: (&[]int{}),\n> I guess we should also eliminate the ()'s - but that can be another CL.\n\nthe () are significant here: they make the expression\nnot a nested composite literal, so it cannot be shortened.\n\nruss\n",
			"disapproval": false,
			"date": "2011-12-02 18:58:52.626580",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5448086/diff/3001/src/cmd/gofmt/simplify.go\nFile src/cmd/gofmt/simplify.go (right):\n\nhttp://codereview.appspot.com/5448086/diff/3001/src/cmd/gofmt/simplify.go#newcode54\nsrc/cmd/gofmt/simplify.go:54: *px = inner // drop &\n// drop &T\n\nhttp://codereview.appspot.com/5448086/diff/3001/src/cmd/gofmt/testdata/composites.golden\nFile src/cmd/gofmt/testdata/composites.golden (right):\n\nhttp://codereview.appspot.com/5448086/diff/3001/src/cmd/gofmt/testdata/composites.golden#newcode151\nsrc/cmd/gofmt/testdata/composites.golden:151: (&[]int{}),\nI guess we should also eliminate the ()'s - but that can be another CL.",
			"disapproval": false,
			"date": "2011-12-02 18:56:14.315190",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5448086: gofmt: handle &T in composite literal simplify",
	"created": "2011-12-02 17:47:30.383763",
	"patchsets": [
		1,
		2001,
		3001,
		2002,
		7004
	],
	"modified": "2011-12-02 19:14:08.917912",
	"closed": true,
	"issue": 5448086
}