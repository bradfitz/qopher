{
	"description": "runtime: fix integer overflow in amd64 memmove.\n\nFixes issue 4981.",
	"cc": [
		"bradfitz@golang.org",
		"fullung@gmail.com",
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-06 23:03:43.901900",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test is disabled because I think using 2GB of RAM is a bit too much. Please advise on what to do.",
			"disapproval": false,
			"date": "2013-03-06 23:04:33.318770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "mmap two small contiguous pages with the latter not writable, then fake the\r\n2GB slice header w/ unsafe and catch the panic from writing to the second\r\npage, and then compare the first 11 bytes of the first page?\r\n\r\nOn Wed, Mar 6, 2013 at 3:04 PM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> The test is disabled because I think using 2GB of RAM is a bit too much.\r\n> Please advise on what to do.\r\n>\r\n> https://codereview.appspot.**com/7474047/<https://codereview.appspot.com/7474047/>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 23:32:59.843830",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/3/7 Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> mmap two small contiguous pages with the latter not writable, then fake the\r\n> 2GB slice header w/ unsafe and catch the panic from writing to the second\r\n> page, and then compare the first 11 bytes of the first page?\r\n\r\nI think the runtime throws \"unexpected fault address\" if you fault on\r\nsomething else then a null pointer.\r\nI also thought of mmap but was worried about making tests\r\nunnecessarily non-portable.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-03-06 23:38:48.272050",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 6, 2013 at 3:38 PM, R\u00e9my Oudompheng <remyoudompheng@gmail.com>wrote:\r\n\r\n> On 2013/3/7 Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> > mmap two small contiguous pages with the latter not writable, then fake\r\n> the\r\n> > 2GB slice header w/ unsafe and catch the panic from writing to the second\r\n> > page, and then compare the first 11 bytes of the first page?\r\n>\r\n> I think the runtime throws \"unexpected fault address\" if you fault on\r\n> something else then a null pointer.\r\n>\r\n\r\nRun it as a child process, with the first page of memory being shared with\r\nthe parent.  Then just let the child crash and then look at your 1 page of\r\npreviously-shared memory?  :-)\r\n\r\nI also thought of mmap but was worried about making tests\r\n> unnecessarily non-portable.\r\n\r\n\r\nlinux-only is fine.  As long as one of the builders would catch the\r\nregression, that's better than nothing.\r\n",
			"disapproval": false,
			"date": "2013-03-07 01:01:55.874970",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thursday, March 7, 2013 3:01:54 AM UTC+2, Brad Fitzpatrick wrote:\r\n\r\n> On Wed, Mar 6, 2013 at 3:38 PM, R\u00e9my Oudompheng <remyoud...@gmail.com<javascript:>\r\n> > wrote:\r\n>\r\n>> On 2013/3/7 Brad Fitzpatrick <brad...@golang.org <javascript:>> wrote:\r\n>> > mmap two small contiguous pages with the latter not writable, then fake \r\n>> the\r\n>> > 2GB slice header w/ unsafe and catch the panic from writing to the \r\n>> second\r\n>> > page, and then compare the first 11 bytes of the first page?\r\n>>\r\n>> I think the runtime throws \"unexpected fault address\" if you fault on\r\n>> something else then a null pointer.\r\n>>\r\n> Run it as a child process, with the first page of memory being shared with \r\n> the parent.  Then just let the child crash and then look at your 1 page of \r\n> previously-shared memory?  :-)\r\n>\r\n>> I also thought of mmap but was worried about making tests\r\n>> unnecessarily non-portable.\r\n>\r\n> linux-only is fine.  As long as one of the builders would catch the \r\n> regression, that's better than nothing.\r\n>\r\n\r\nMaybe something like:\r\n\r\n1. Create a file, maybe in /dev/shm\r\n2. Unlink it\r\n3. Truncate it to 4k\r\n\r\nTake a raw mmap function:\r\n\r\nfunc mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset \r\nint64) (xaddr uintptr, err error) {\r\n        r0, _, e1 := syscall.Syscall6(syscall.SYS_MMAP, addr, length, \r\nuintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset))\r\n        xaddr = uintptr(r0)\r\n        if e1 != 0 {\r\n                err = e1\r\n        }\r\n        return\r\n}\r\n\r\naddr = mmap(0, 2<<30+4096, ..., ..., fd, 0)\r\n\r\nUsing MAP_FIXED, create mappings of the same fd at addr+4k, addr+8k, ... \r\noverlapping the original mapping, each with length 4k.\r\n\r\nNow you have a mapping that is 2<<30+4096 big, but if you write to it, only \r\nuses up 4k.\r\n\r\nI think...\r\n",
			"disapproval": false,
			"date": "2013-03-07 01:41:13.149770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 6, 2013 at 5:41 PM, Albert Strasheim <fullung@gmail.com> wrote:\r\n\r\n> On Thursday, March 7, 2013 3:01:54 AM UTC+2, Brad Fitzpatrick wrote:\r\n>\r\n>> On Wed, Mar 6, 2013 at 3:38 PM, R\u00e9my Oudompheng <remyoud...@gmail.com>wrote:\r\n>>\r\n>> On 2013/3/7 Brad Fitzpatrick <brad...@golang.org> wrote:\r\n>>> > mmap two small contiguous pages with the latter not writable, then\r\n>>> fake the\r\n>>> > 2GB slice header w/ unsafe and catch the panic from writing to the\r\n>>> second\r\n>>> > page, and then compare the first 11 bytes of the first page?\r\n>>>\r\n>>> I think the runtime throws \"unexpected fault address\" if you fault on\r\n>>> something else then a null pointer.\r\n>>>\r\n>> Run it as a child process, with the first page of memory being shared\r\n>> with the parent.  Then just let the child crash and then look at your 1\r\n>> page of previously-shared memory?  :-)\r\n>>\r\n>>> I also thought of mmap but was worried about making tests\r\n>>> unnecessarily non-portable.\r\n>>\r\n>> linux-only is fine.  As long as one of the builders would catch the\r\n>> regression, that's better than nothing.\r\n>>\r\n>\r\n> Maybe something like:\r\n>\r\n> 1. Create a file, maybe in /dev/shm\r\n> 2. Unlink it\r\n> 3. Truncate it to 4k\r\n>\r\n> Take a raw mmap function:\r\n>\r\n> func mmap(addr uintptr, length uintptr, prot int, flags int, fd int,\r\n> offset int64) (xaddr uintptr, err error) {\r\n>         r0, _, e1 := syscall.Syscall6(syscall.SYS_MMAP, addr, length,\r\n> uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset))\r\n>         xaddr = uintptr(r0)\r\n>         if e1 != 0 {\r\n>                 err = e1\r\n>         }\r\n>         return\r\n> }\r\n>\r\n> addr = mmap(0, 2<<30+4096, ..., ..., fd, 0)\r\n>\r\n> Using MAP_FIXED, create mappings of the same fd at addr+4k, addr+8k, ...\r\n> overlapping the original mapping, each with length 4k.\r\n>\r\n> Now you have a mapping that is 2<<30+4096 big, but if you write to it,\r\n> only uses up 4k.\r\n>\r\n> I think...\r\n>\r\n\r\nNice. :-)\r\n",
			"disapproval": false,
			"date": "2013-03-07 03:07:41.194820",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-07 20:36:41.821150",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have done as suggested by fullung. The resulting check doesn't check correctness (the overlap logic doesn't when working on cyclic memory so I'm all confused).\n\nIt will also not work if people have set up a limit on address space (like me), or have less than 3GB of RAM and didn't enable overcommit (like me).\n\nIt fails without the patch, and interestingly uses more than 100% CPU:\n\n./runtime.test  13.58s user 1.56s system 166% cpu 9.124 total",
			"disapproval": false,
			"date": "2013-03-07 20:39:08.007380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-07 20:42:43.782360",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7474047/diff/11001/test/run.go\nFile test/run.go (right):\n\nhttps://codereview.appspot.com/7474047/diff/11001/test/run.go#newcode803\ntest/run.go:803: \"fixedbugs/issue4981.go\": true, // needs 2GB of RAM\nold?",
			"disapproval": false,
			"date": "2013-03-07 20:45:26.095080",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7474047/diff/19001/src/pkg/runtime/memmove_linux_amd64_test.go\nFile src/pkg/runtime/memmove_linux_amd64_test.go (right):\n\nhttps://codereview.appspot.com/7474047/diff/19001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode33\nsrc/pkg/runtime/memmove_linux_amd64_test.go:33: 0, 3<<30, syscall.PROT_READ|syscall.PROT_WRITE, syscall.MAP_PRIVATE|syscall.MAP_ANONYMOUS, ^uintptr(0), 0)\nif you reserve with prot == 0 it might not trigger memory\novercommit thing.\n\nhttps://codereview.appspot.com/7474047/diff/19001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode35\nsrc/pkg/runtime/memmove_linux_amd64_test.go:35: t.Fatalf(\"could not create memory mapping: %s\", errno)\njust skip this test in that case?",
			"disapproval": false,
			"date": "2013-03-07 20:52:17.767290",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7474047/diff/11001/test/run.go\nFile test/run.go (right):\n\nhttps://codereview.appspot.com/7474047/diff/11001/test/run.go#newcode803\ntest/run.go:803: \"fixedbugs/issue4981.go\": true, // needs 2GB of RAM\nOn 2013/03/07 20:45:26, bradfitz wrote:\n> old?\n\nsorry, removed.\n\nhttps://codereview.appspot.com/7474047/diff/19001/src/pkg/runtime/memmove_linux_amd64_test.go\nFile src/pkg/runtime/memmove_linux_amd64_test.go (right):\n\nhttps://codereview.appspot.com/7474047/diff/19001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode33\nsrc/pkg/runtime/memmove_linux_amd64_test.go:33: 0, 3<<30, syscall.PROT_READ|syscall.PROT_WRITE, syscall.MAP_PRIVATE|syscall.MAP_ANONYMOUS, ^uintptr(0), 0)\nOn 2013/03/07 20:52:17, minux wrote:\n> if you reserve with prot == 0 it might not trigger memory\n> overcommit thing.\n\nBut won't be able to map the below pages anyway, right?\n\nhttps://codereview.appspot.com/7474047/diff/19001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode33\nsrc/pkg/runtime/memmove_linux_amd64_test.go:33: 0, 3<<30, syscall.PROT_READ|syscall.PROT_WRITE, syscall.MAP_PRIVATE|syscall.MAP_ANONYMOUS, ^uintptr(0), 0)\nadded a hint to avoid conflicting with heap, I had weird issues\n\nhttps://codereview.appspot.com/7474047/diff/19001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode35\nsrc/pkg/runtime/memmove_linux_amd64_test.go:35: t.Fatalf(\"could not create memory mapping: %s\", errno)\nOn 2013/03/07 20:52:17, minux wrote:\n> just skip this test in that case?\n\nIt's a possibility, Done. What do you think?",
			"disapproval": false,
			"date": "2013-03-07 21:50:03.924530",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, fullung@gmail.com, rsc@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-07 21:50:05.522000",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7474047/diff/23001/src/pkg/runtime/memmove_linux_amd64_test.go\nFile src/pkg/runtime/memmove_linux_amd64_test.go (right):\n\nhttps://codereview.appspot.com/7474047/diff/23001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode45\nsrc/pkg/runtime/memmove_linux_amd64_test.go:45: defer syscall.Syscall(syscall.SYS_MUNMAP, base+off, 65536, 0)\nthat's a few defers. :)\n\nhttps://codereview.appspot.com/7474047/diff/23001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode53\nsrc/pkg/runtime/memmove_linux_amd64_test.go:53: copy(s[1:], s)\ncheck copy return values at least?",
			"disapproval": false,
			"date": "2013-03-07 21:52:43.372800",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=feca70ca7e83 ***\n\nruntime: fix integer overflow in amd64 memmove.\n\nFixes issue 4981.\n\nR=bradfitz, fullung, rsc, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7474047\n\nhttps://codereview.appspot.com/7474047/diff/23001/src/pkg/runtime/memmove_linux_amd64_test.go\nFile src/pkg/runtime/memmove_linux_amd64_test.go (right):\n\nhttps://codereview.appspot.com/7474047/diff/23001/src/pkg/runtime/memmove_linux_amd64_test.go#newcode53\nsrc/pkg/runtime/memmove_linux_amd64_test.go:53: copy(s[1:], s)\nOn 2013/03/07 21:52:43, bradfitz wrote:\n> check copy return values at least?\n\nDone.",
			"disapproval": false,
			"date": "2013-03-08 23:41:14.627120",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 9, 2013 at 7:41 AM,  <remyoudompheng@gmail.com> wrote:\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=feca70ca7e83 ***\r\nGreat! thank you for fixing this subtle problem.\r\n",
			"disapproval": false,
			"date": "2013-03-09 12:44:19.035670",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7474047: runtime: fix integer overflow in amd64 memmove.",
	"created": "2013-03-06 23:03:25.677290",
	"patchsets": [
		1,
		1001,
		3001,
		11001,
		19001,
		23001,
		29001,
		32001
	],
	"modified": "2013-03-08 23:41:16.632470",
	"closed": true,
	"issue": 7474047
}