{
	"description": "go/types: cleanup of assignment checks\n\nAlso:\n- cleaner handling of constants w/ unknown value\n- removed several TODOs",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-06 20:45:57.936720",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI confess I didn't follow all the details of the assign1to1 refactoring.\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/check.go\nFile src/pkg/go/types/check.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/check.go#newcode209\nsrc/pkg/go/types/check.go:209: // value of the constant (e.g.m, in: \"const x = float32(\"foo\")\" we\nrogue 'm'?\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/const.go\nFile src/pkg/go/types/const.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/const.go#newcode22\nsrc/pkg/go/types/const.go:22: // invalid  ->  nil (i.e., we don't know the constant value)\nIf it's an invariant that this never happens in well-typed programs, it would be good to state it.\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/objects.go\nFile src/pkg/go/types/objects.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/objects.go#newcode41\nsrc/pkg/go/types/objects.go:41: Val  interface{} // nil means unknown constant value\nHow about: \"nil means constant value unknown due to error\"?\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/stmt.go\nFile src/pkg/go/types/stmt.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/stmt.go#newcode44\nsrc/pkg/go/types/stmt.go:44: var obj Object\nHow about moving LL44-60 down, immediately after the assignment to obj?  This has better reading locality (and avoids some unnecessary deferred closures in the error and \"_ = x\" cases).",
			"disapproval": false,
			"date": "2013-03-06 22:11:08.320210",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/check.go\nFile src/pkg/go/types/check.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/check.go#newcode209\nsrc/pkg/go/types/check.go:209: // value of the constant (e.g.m, in: \"const x = float32(\"foo\")\" we\nOn 2013/03/06 22:11:09, adonovan wrote:\n> rogue 'm'?\n\nDone.\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/const.go\nFile src/pkg/go/types/const.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/const.go#newcode22\nsrc/pkg/go/types/const.go:22: // invalid  ->  nil (i.e., we don't know the constant value)\nOn 2013/03/06 22:11:09, adonovan wrote:\n> If it's an invariant that this never happens in well-typed programs, it would be\n> good to state it.\n\nDone.\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/objects.go\nFile src/pkg/go/types/objects.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/objects.go#newcode41\nsrc/pkg/go/types/objects.go:41: Val  interface{} // nil means unknown constant value\nOn 2013/03/06 22:11:09, adonovan wrote:\n> How about: \"nil means constant value unknown due to error\"? \n\nDone.\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/stmt.go\nFile src/pkg/go/types/stmt.go (right):\n\nhttps://codereview.appspot.com/7473043/diff/22001/src/pkg/go/types/stmt.go#newcode44\nsrc/pkg/go/types/stmt.go:44: var obj Object\nOn 2013/03/06 22:11:09, adonovan wrote:\n> How about moving LL44-60 down, immediately after the assignment to obj?  This\n> has better reading locality (and avoids some unnecessary deferred closures in\n> the error and \"_ = x\" cases).\n\nDone.",
			"disapproval": false,
			"date": "2013-03-06 23:45:55.393600",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a688fd4f607d ***\n\ngo/types: cleanup of assignment checks\n\nAlso:\n- cleaner handling of constants w/ unknown value\n- removed several TODOs\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/7473043",
			"disapproval": false,
			"date": "2013-03-07 00:14:30.147490",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7473043: go/types: cleanup of assignment checks",
	"created": "2013-03-05 07:30:19.305670",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		10001,
		13001,
		16001,
		14011,
		22001,
		30001
	],
	"modified": "2013-03-07 00:14:31.462930",
	"closed": true,
	"issue": 7473043
}