{
	"description": "hkdf: implemented hash based key derivation.\n\nDetailed description in RFC 5869.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"agl@chromium.org",
		"minux.ma@gmail.com",
		"agl@golang.org"
	],
	"messages": [
		{
			"sender": "peterke@gmail.com",
			"recipients": [
				"peterke@gmail.com",
				"agl@chromium.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2013-03-07 22:44:58.384150",
			"approval": false
		},
		{
			"sender": "peterke@gmail.com",
			"recipients": [
				"peterke@gmail.com",
				"agl@chromium.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Added a usage example to make the whole module nicer :)",
			"disapproval": false,
			"date": "2013-03-08 17:45:48.932880",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"peterke@gmail.com",
				"agl@chromium.org",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "At the high level, we've not exposed a KDF API before and it's unclear whether a Reader interface is the right one. The alternative would be to pass in a length, or a []byte to be filled, and have it be a one-shot operation.\n\nHowever, since one typically takes a number of outputs (a couple of keys and a couple of IVs) from a KDF, the Reader interface may save people having to manually split up a single output so I think I like it.\n\nHowever, the implementation itself allocates far more than is needed. I can fix this up before landing if you wish but I've pointed out a few cases in case you wish to iterate yourself.\n\n(p.s. have you signed the CLA?)\n\nhttps://codereview.appspot.com/7474049/diff/17001/hkdf/hkdf.go\nFile hkdf/hkdf.go (right):\n\nhttps://codereview.appspot.com/7474049/diff/17001/hkdf/hkdf.go#newcode44\nhkdf/hkdf.go:44: input := append(f.prev, append(f.info, f.counter)...)\nthis is better written as two, non-nested appends. The nested append is actually copying f.info into a new buffer just to append a single byte and returning it. input can also be reused between iterations.\n\nhttps://codereview.appspot.com/7474049/diff/17001/hkdf/hkdf.go#newcode46\nhkdf/hkdf.go:46: expander := hmac.New(f.hash, f.prk)\nthe HMAC from New can be passed in and Reset() rather than creating afresh each time.\n\nhttps://codereview.appspot.com/7474049/diff/17001/hkdf/hkdf.go#newcode48\nhkdf/hkdf.go:48: output := expander.Sum(nil)\nin the case where the full hash result fits in p, it could be written directly.\n\nhttps://codereview.appspot.com/7474049/diff/17001/hkdf/hkdf.go#newcode63\nhkdf/hkdf.go:63: func New(hash func() hash.Hash, master []byte, salt []byte, info []byte) io.Reader {\nargument names should either be commonly used, or match the RFC. Thus I would call \"master\" either \"secret\" or \"ikm\".\n\nhttps://codereview.appspot.com/7474049/diff/17001/hkdf/hkdf.go#newcode64\nhkdf/hkdf.go:64: extractor := hmac.New(hash, salt)\nIf a salt is not provided, hash.Size() zero bytes should be used.\n\nhttps://codereview.appspot.com/7474049/diff/17001/hkdf/hkdf.go#newcode67\nhkdf/hkdf.go:67: return &hkdf{hash, hash().Size(), extractor.Sum(nil), info, 1, []byte{}, []byte{}}\ns/[]byte{}/nil/",
			"disapproval": false,
			"date": "2013-03-12 15:12:15.622460",
			"approval": false
		},
		{
			"sender": "peterke@gmail.com",
			"recipients": [
				"peterke@gmail.com",
				"agl@chromium.org",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think I'll manage the fixes, I'll commit in a few hours, just let me finish up something first.\n\nBtw, there's one slight design change I've added since the review request: instead of passing in \"hash-maker\" functions, I've changed to the crypto.Hash enums:\n\nhkdf.New(sha1.New, ...) -> hkdf.New(crypto.SHA1, ...)\n\nWhich design do you prefer? The original or the crypto-enum one? (the latter is available at https://github.com/karalabe/iris/blob/master/crypto/hkdf/hkdf.go ).\n\nPS: Yes I've signed the CLA (at least the digital version)",
			"disapproval": false,
			"date": "2013-03-12 15:38:36.510390",
			"approval": false
		},
		{
			"sender": "agl@chromium.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 12, 2013 at 11:38 AM,  <peterke@gmail.com> wrote:\r\n> Btw, there's one slight design change I've added since the review\r\n> request: instead of passing in \"hash-maker\" functions, I've changed to\r\n> the crypto.Hash enums:\r\n\r\nPassing in the function is more canonical.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2013-03-12 15:45:40.806790",
			"approval": false
		},
		{
			"sender": "peterke@gmail.com",
			"recipients": [
				"peterke@gmail.com",
				"agl@chromium.org",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Issues should be resolved now, please check it again.",
			"disapproval": false,
			"date": "2013-03-12 17:10:55.809470",
			"approval": false
		},
		{
			"sender": "peterke@gmail.com",
			"recipients": [
				"peterke@gmail.com",
				"agl@chromium.org",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Added some benchmarks in the mean time.\n\nIntel(R) Core(TM) i7-2600 CPU @ 3.40GHz:\nBenchmark16ByteMd5Single      500000   3870 ns/op   4.13 MB/s\nBenchmark20ByteSha1Single     500000   4706 ns/op   4.25 MB/s\nBenchmark32ByteSha256Single   200000   8759 ns/op   3.65 MB/s\nBenchmark64ByteSha512Single   200000  11790 ns/op   5.43 MB/s\nBenchmark8ByteMd5Stream      5000000    720 ns/op  11.11 MB/s\nBenchmark16ByteMd5Stream     1000000   1403 ns/op  11.40 MB/s\nBenchmark8ByteSha1Stream     5000000    746 ns/op  10.71 MB/s\nBenchmark20ByteSha1Stream    1000000   1795 ns/op  11.14 MB/s\nBenchmark8ByteSha256Stream   2000000    897 ns/op   8.91 MB/s\nBenchmark32ByteSha256Stream   500000   3482 ns/op   9.19 MB/s\nBenchmark8ByteSha512Stream   5000000    626 ns/op  12.76 MB/s\nBenchmark64ByteSha512Stream   500000   4767 ns/op  13.42 MB/s",
			"disapproval": false,
			"date": "2013-04-09 15:35:46.763640",
			"approval": false
		}
	],
	"owner_email": "peterke@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "karalabe",
	"subject": "code review 7474049: hkdf: implemented hash based key derivation.",
	"created": "2013-03-07 22:38:29.242870",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		6003,
		14001,
		17001,
		25001,
		32001
	],
	"modified": "2013-04-09 15:35:46.763640",
	"closed": false,
	"issue": 7474049
}