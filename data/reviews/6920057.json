{
	"description": "spec: more explicit comments for constant expression examples\n\nFixes issue 3814.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-12 21:39:24.469220",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-12 22:04:14.243650",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-12 22:11:44.941760",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6920057/diff/3/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6920057/diff/3/doc/go_spec.html#newcode3738\ndoc/go_spec.html:3738: uint(-1)     // -1 overflows uint\nI think the \"cannot be represented as\" that you had before may be better here.\n\nhttps://codereview.appspot.com/6920057/diff/3/doc/go_spec.html#newcode3753\ndoc/go_spec.html:3753: uint8(^1)  // illegal: same as uint8(-2), -2 overflows uint8\nAgain I think \"out of range\" may be better.",
			"disapproval": false,
			"date": "2012-12-12 21:51:14.511380",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8b89b6326704 ***\n\nspec: more explicit comments for constant expression examples\n\nFixes issue 3814.\n\nR=rsc, iant\nCC=golang-dev\nhttps://codereview.appspot.com/6920057\n\nhttps://codereview.appspot.com/6920057/diff/3/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6920057/diff/3/doc/go_spec.html#newcode3738\ndoc/go_spec.html:3738: uint(-1)     // -1 overflows uint\nOn 2012/12/12 21:51:14, iant wrote:\n> I think the \"cannot be represented as\" that you had before may be better here.\n\nDone.\n\nhttps://codereview.appspot.com/6920057/diff/3/doc/go_spec.html#newcode3753\ndoc/go_spec.html:3753: uint8(^1)  // illegal: same as uint8(-2), -2 overflows uint8\nOn 2012/12/12 21:51:14, iant wrote:\n> Again I think \"out of range\" may be better.\n\nChanged to \"cannot be represented as\" to be consistent.\n\nPS: If \"out of range\" is better here, than \"out of range\" should also be better above (and \"out of range\" is closer to \"overflows\" than \"cannot be represented\". The \"cannot be represented\" does not say why, while the \"overflows\" or \"out of range\" comment does. Either way, changed back for consistent phrasing.",
			"disapproval": false,
			"date": "2012-12-12 22:25:46.818750",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6920057: spec: more explicit comments for constant expression ex...",
	"created": "2012-12-12 21:35:45.319440",
	"patchsets": [
		1,
		2001,
		4001,
		3,
		1003,
		9002,
		6003
	],
	"modified": "2012-12-12 22:25:47.992520",
	"closed": true,
	"issue": 6920057
}