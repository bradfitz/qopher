{
	"description": "testing: add Skip/Skipf\n\nThis proposal adds two methods to *testing.T, Skip(string) and Skipf(format, args...). The intent is to replace the existing log and return idiom which currently has 97 cases in the standard library. A simple example of Skip would be:\n\nfunc TestSomethingLong(t *testing.T) {\n        if testing.Short() {\n                t.Skip(\"skipping test in short mode.\")\n                // not reached\n        }\n        ... time consuming work\n}\n\nAdditionally tests can be skipped anywhere a *testing.T is present. An example adapted from the go.crypto/ssh/test package would be:\n\n// setup performs some before test action and returns a func()\n// which should be defered by the caller for cleanup.\nfunc setup(t *testing.T) func() {\n        ...\n        cmd := exec.Command(\"sshd\", \"-f\", configfile, \"-i\")\n        if err := cmd.Run(); err != nil {\n                t.Skipf(\"could not execute mock ssh server: %v\", err)\n        }\n        ...\n        return func() {\n                // stop subprocess and cleanup\n        }\n}\n\nfunc TestDialMockServer(t *testing.T) {\n        cleanup := setup(t)\n        defer cleanup()\n        ...\n}\n\nIn verbose mode tests that are skipped are now reported as a SKIP, rather than PASS.\n\nLink to discussion: https://groups.google.com/d/topic/golang-nuts/BqorNARzt4U/discussion",
	"cc": [
		"adg@golang.org",
		"rsc@golang.org",
		"r@golang.org",
		"n13m3y3r@gmail.com",
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-21 10:02:11.218070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you're going to add this function, please use it in the existing\r\ntests with the pattern.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-01-21 14:03:51.065960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6501094/diff/21001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttps://codereview.appspot.com/6501094/diff/21001/src/pkg/testing/testing.go#newcode373\nsrc/pkg/testing/testing.go:373: // Skipped returns whether the function was skipped.\ns/returns/reports/",
			"disapproval": false,
			"date": "2013-01-22 22:22:19.548680",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Will do, I will propose a follow up CL that uses it. I was following the pattern we use for api/next.txt whereby we don't add symbols and add to the file in the same CL. \r\n\r\nOn 22/01/2013, at 1:03, Rob Pike <r@golang.org> wrote:\r\n\r\n> If you're going to add this function, please use it in the existing\r\n> tests with the pattern.\r\n> \r\n> -rob\r\n",
			"disapproval": false,
			"date": "2013-01-21 18:53:05.306170",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I have updated the CL description and added an example of t.Skip() to the package documentation.",
			"disapproval": false,
			"date": "2013-01-22 01:06:46.349790",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 22, 2013 at 2:52 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Will do, I will propose a follow up CL that uses it. I was following the\r\n> pattern we use for api/next.txt whereby we don't add symbols and add to the\r\n> file in the same CL.\r\n\r\nI think Rob means that we need real-world usage examples of the proposed\r\nnew API to better\r\nevaluate its merit/drawback.\r\nI suggest we at least add a few use cases of the new API in this CL for\r\nbetter understanding of\r\nthe new API.\r\n\r\nThen we can decide what to do with the other potential use cases.\r\n",
			"disapproval": false,
			"date": "2013-01-21 18:57:55.462890",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's a great idea! ;)",
			"disapproval": false,
			"date": "2013-01-22 01:55:14.634040",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6501094/diff/5001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttps://codereview.appspot.com/6501094/diff/5001/src/pkg/testing/testing.go#newcode350\nsrc/pkg/testing/testing.go:350: func (t *T) SkipNow() {\ndocument skipnow?",
			"disapproval": false,
			"date": "2013-01-22 04:50:15.979400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> src/pkg/testing/testing.go:350: func (t *T) SkipNow() {\n> document skipnow?\n\nDone, and made unexported, 2 new symbols are sufficient.",
			"disapproval": false,
			"date": "2013-01-22 04:54:07.557780",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/22 04:54:07, dfc wrote:\n> > src/pkg/testing/testing.go:350: func (t *T) SkipNow() {\n> > document skipnow?\n> \n> Done, and made unexported, 2 new symbols are sufficient.\n\nDone, but SkipNow remains exported for the moment.",
			"disapproval": false,
			"date": "2013-01-22 04:58:01.090380",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, rsc@golang.org, r@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-22 04:57:54.118360",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0aa3f72c1c8b ***\n\ntesting: add Skip/Skipf\n\nThis proposal adds two methods to *testing.T, Skip(string) and Skipf(format, args...). The intent is to replace the existing log and return idiom which currently has 97 cases in the standard library. A simple example of Skip would be:\n\nfunc TestSomethingLong(t *testing.T) {\n        if testing.Short() {\n                t.Skip(\"skipping test in short mode.\")\n                // not reached\n        }\n        ... time consuming work\n}\n\nAdditionally tests can be skipped anywhere a *testing.T is present. An example adapted from the go.crypto/ssh/test package would be:\n\n// setup performs some before test action and returns a func()\n// which should be defered by the caller for cleanup.\nfunc setup(t *testing.T) func() {\n        ...\n        cmd := exec.Command(\"sshd\", \"-f\", configfile, \"-i\")\n        if err := cmd.Run(); err != nil {\n                t.Skipf(\"could not execute mock ssh server: %v\", err)\n        }\n        ...\n        return func() {\n                // stop subprocess and cleanup\n        }\n}\n\nfunc TestDialMockServer(t *testing.T) {\n        cleanup := setup(t)\n        defer cleanup()\n        ...\n}\n\nIn verbose mode tests that are skipped are now reported as a SKIP, rather than PASS.\n\nLink to discussion: https://groups.google.com/d/topic/golang-nuts/BqorNARzt4U/discussion\n\nR=adg, rsc, r, n13m3y3r\nCC=golang-dev, minux.ma\nhttps://codereview.appspot.com/6501094\n\nhttps://codereview.appspot.com/6501094/diff/21001/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttps://codereview.appspot.com/6501094/diff/21001/src/pkg/testing/testing.go#newcode373\nsrc/pkg/testing/testing.go:373: // Skipped returns whether the function was skipped.\nOn 2013/01/22 22:22:19, rsc wrote:\n> s/returns/reports/\n\nDone. I have also adjusted the docs for T.Failed().",
			"disapproval": false,
			"date": "2013-01-22 23:23:15.036760",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6501094: testing: add Skip/Skipf",
	"created": "2012-09-06 13:19:28.811550",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		11001,
		16001,
		21001,
		24001,
		27001,
		24002
	],
	"modified": "2013-01-22 23:28:54.750970",
	"closed": true,
	"issue": 6501094
}