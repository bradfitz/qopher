{
	"description": "cmd/gc: record argument size for all indirect function calls\nThis is required to properly unwind reflect.methodValueCall/makeFuncStub.\nFixes issue 5954.\nStats for 'go install std':\n61849 total INSTCALL\n24655 currently have ArgSize metadata\n27278 have ArgSize metadata with this change\ngodoc size before: 11351888, after: 11364288",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-31 13:21:16.875360",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "by \"anonymous\" I meant \"indirect\"\r\n\r\nOn Wed, Jul 31, 2013 at 5:21 PM,  <dvyukov@google.com> wrote:\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: record argument size for all anonymous function calls\r\n> This is required to properly unwind\r\n> reflect.methodValueCall/makeFuncStub.\r\n> Fixes issue 5954.\r\n> Stats for 'go install std':\r\n> 61849 total INSTCALL\r\n> 24655 currently have ArgSize metadata\r\n> 27278 have ArgSize metadata with this change\r\n> godoc size before: 11351888, after: 11364288\r\n>\r\n> Please review this at https://codereview.appspot.com/12163043/\r\n>\r\n> Affected files:\r\n>   M src/cmd/5g/ggen.c\r\n>   M src/cmd/6g/ggen.c\r\n>   M src/cmd/8g/ggen.c\r\n>   M src/pkg/reflect/asm_386.s\r\n>   M src/pkg/reflect/asm_amd64.s\r\n>   M src/pkg/reflect/asm_arm.s\r\n>   M src/pkg/runtime/traceback_arm.c\r\n>   M src/pkg/runtime/traceback_x86.c\r\n>\r\n>\r\n> Index: src/cmd/5g/ggen.c\r\n> ===================================================================\r\n> --- a/src/cmd/5g/ggen.c\r\n> +++ b/src/cmd/5g/ggen.c\r\n> @@ -81,7 +81,12 @@\r\n>                 setmaxarg(f->type);\r\n>\r\n>         arg = -1;\r\n> -       if(f->type != T && ((f->sym != S && f->sym->pkg == runtimepkg) ||\r\n> proc == 1 || proc == 2)) {\r\n> +       // Most functions have a fixed-size argument block, so traceback\r\n> uses that during unwind.\r\n> +       // Not all, though: there are some variadic functions in package\r\n> runtime,\r\n> +       // and for those we emit call-specific metadata recorded by caller.\r\n> +       // Reflect generates anonymous functions with variable argsize\r\n> (reflect.methodValueCall/makeFuncStub),\r\n> +       // so we do this for all anonymous functions as well.\r\n> +       if(f->type != T && (f->sym == S || (f->sym != S && f->sym->pkg ==\r\n> runtimepkg) || proc == 1 || proc == 2)) {\r\n>                 arg = f->type->argwid;\r\n>                 if(proc == 1 || proc == 2)\r\n>                         arg += 3*widthptr;\r\n> Index: src/cmd/6g/ggen.c\r\n> ===================================================================\r\n> --- a/src/cmd/6g/ggen.c\r\n> +++ b/src/cmd/6g/ggen.c\r\n> @@ -79,7 +79,12 @@\r\n>                 setmaxarg(f->type);\r\n>\r\n>         arg = -1;\r\n> -       if(f->type != T && ((f->sym != S && f->sym->pkg == runtimepkg) ||\r\n> proc == 1 || proc == 2)) {\r\n> +       // Most functions have a fixed-size argument block, so traceback\r\n> uses that during unwind.\r\n> +       // Not all, though: there are some variadic functions in package\r\n> runtime,\r\n> +       // and for those we emit call-specific metadata recorded by caller.\r\n> +       // Reflect generates anonymous functions with variable argsize\r\n> (reflect.methodValueCall/makeFuncStub),\r\n> +       // so we do this for all anonymous functions as well.\r\n> +       if(f->type != T && (f->sym == S || (f->sym != S && f->sym->pkg ==\r\n> runtimepkg) || proc == 1 || proc == 2)) {\r\n>                 arg = f->type->argwid;\r\n>                 if(proc == 1 || proc == 2)\r\n>                         arg += 2*widthptr;\r\n> Index: src/cmd/8g/ggen.c\r\n> ===================================================================\r\n> --- a/src/cmd/8g/ggen.c\r\n> +++ b/src/cmd/8g/ggen.c\r\n> @@ -123,7 +123,12 @@\r\n>                 setmaxarg(f->type);\r\n>\r\n>         arg = -1;\r\n> -       if(f->type != T && ((f->sym != S && f->sym->pkg == runtimepkg) ||\r\n> proc == 1 || proc == 2)) {\r\n> +       // Most functions have a fixed-size argument block, so traceback\r\n> uses that during unwind.\r\n> +       // Not all, though: there are some variadic functions in package\r\n> runtime,\r\n> +       // and for those we emit call-specific metadata recorded by caller.\r\n> +       // Reflect generates anonymous functions with variable argsize\r\n> (reflect.methodValueCall/makeFuncStub),\r\n> +       // so we do this for all anonymous functions as well.\r\n> +       if(f->type != T && (f->sym == S || (f->sym != S && f->sym->pkg ==\r\n> runtimepkg) || proc == 1 || proc == 2)) {\r\n>                 arg = f->type->argwid;\r\n>                 if(proc == 1 || proc == 2)\r\n>                         arg += 2*widthptr;\r\n> Index: src/pkg/reflect/asm_386.s\r\n> ===================================================================\r\n> --- a/src/pkg/reflect/asm_386.s\r\n> +++ b/src/pkg/reflect/asm_386.s\r\n> @@ -5,6 +5,7 @@\r\n>  // makeFuncStub is the code half of the function returned by MakeFunc.\r\n>  // See the comment on the declaration of makeFuncStub in makefunc.go\r\n>  // for more details.\r\n> +// No argsize here, gc generates argsize info at call site.\r\n>  TEXT \u00b7makeFuncStub(SB),7,$8\r\n>         MOVL    DX, 0(SP)\r\n>         LEAL    argframe+0(FP), CX\r\n> @@ -15,6 +16,7 @@\r\n>  // methodValueCall is the code half of the function returned by\r\n> makeMethodValue.\r\n>  // See the comment on the declaration of methodValueCall in makefunc.go\r\n>  // for more details.\r\n> +// No argsize here, gc generates argsize info at call site.\r\n>  TEXT \u00b7methodValueCall(SB),7,$8\r\n>         MOVL    DX, 0(SP)\r\n>         LEAL    argframe+0(FP), CX\r\n> Index: src/pkg/reflect/asm_amd64.s\r\n> ===================================================================\r\n> --- a/src/pkg/reflect/asm_amd64.s\r\n> +++ b/src/pkg/reflect/asm_amd64.s\r\n> @@ -5,6 +5,7 @@\r\n>  // makeFuncStub is the code half of the function returned by MakeFunc.\r\n>  // See the comment on the declaration of makeFuncStub in makefunc.go\r\n>  // for more details.\r\n> +// No argsize here, gc generates argsize info at call site.\r\n>  TEXT \u00b7makeFuncStub(SB),7,$16\r\n>         MOVQ    DX, 0(SP)\r\n>         LEAQ    argframe+0(FP), CX\r\n> @@ -15,6 +16,7 @@\r\n>  // methodValueCall is the code half of the function returned by\r\n> makeMethodValue.\r\n>  // See the comment on the declaration of methodValueCall in makefunc.go\r\n>  // for more details.\r\n> +// No argsize here, gc generates argsize info at call site.\r\n>  TEXT \u00b7methodValueCall(SB),7,$16\r\n>         MOVQ    DX, 0(SP)\r\n>         LEAQ    argframe+0(FP), CX\r\n> Index: src/pkg/reflect/asm_arm.s\r\n> ===================================================================\r\n> --- a/src/pkg/reflect/asm_arm.s\r\n> +++ b/src/pkg/reflect/asm_arm.s\r\n> @@ -5,6 +5,7 @@\r\n>  // makeFuncStub is jumped to by the code generated by MakeFunc.\r\n>  // See the comment on the declaration of makeFuncStub in makefunc.go\r\n>  // for more details.\r\n> +// No argsize here, gc generates argsize info at call site.\r\n>  TEXT \u00b7makeFuncStub(SB),7,$8\r\n>         MOVW    R7, 4(R13)\r\n>         MOVW    $argframe+0(FP), R1\r\n> @@ -15,6 +16,7 @@\r\n>  // methodValueCall is the code half of the function returned by\r\n> makeMethodValue.\r\n>  // See the comment on the declaration of methodValueCall in makefunc.go\r\n>  // for more details.\r\n> +// No argsize here, gc generates argsize info at call site.\r\n>  TEXT \u00b7methodValueCall(SB),7,$8\r\n>         MOVW    R7, 4(R13)\r\n>         MOVW    $argframe+0(FP), R1\r\n> Index: src/pkg/runtime/traceback_arm.c\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/traceback_arm.c\r\n> +++ b/src/pkg/runtime/traceback_arm.c\r\n> @@ -102,7 +102,7 @@\r\n>                 // Most functions have a fixed-size argument block,\r\n>                 // so we can use metadata about the function f.\r\n>                 // Not all, though: there are some variadic functions\r\n> -               // in package runtime, and for those we use call-specific\r\n> +               // in package runtime and reflect, and for those we use\r\n> call-specific\r\n>                 // metadata recorded by f's caller.\r\n>                 if(callback != nil || printing) {\r\n>                         frame.argp = (byte*)frame.fp + sizeof(uintptr);\r\n> Index: src/pkg/runtime/traceback_x86.c\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/traceback_x86.c\r\n> +++ b/src/pkg/runtime/traceback_x86.c\r\n> @@ -118,7 +118,7 @@\r\n>                 // Most functions have a fixed-size argument block,\r\n>                 // so we can use metadata about the function f.\r\n>                 // Not all, though: there are some variadic functions\r\n> -               // in package runtime, and for those we use call-specific\r\n> +               // in package runtime and reflect, and for those we use\r\n> call-specific\r\n>                 // metadata recorded by f's caller.\r\n>                 if(callback != nil || printing) {\r\n>                         frame.argp = (byte*)frame.fp;\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-31 14:03:06.980940",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-31 14:06:11.053950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nplease update the CL description and comments to say indirect\r\n",
			"disapproval": false,
			"date": "2013-07-31 15:20:44.242930",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/31 15:20:44, rsc wrote:\n> LGTM\n> \n> please update the CL description and comments to say indirect\n\nI've done this already 1 hour, 21 minutes ago",
			"disapproval": false,
			"date": "2013-07-31 15:24:58.687610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-07-31 15:26:37.584510",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a68db2ccc3cb ***\n\ncmd/gc: record argument size for all indirect function calls\nThis is required to properly unwind reflect.methodValueCall/makeFuncStub.\nFixes issue 5954.\nStats for 'go install std':\n61849 total INSTCALL\n24655 currently have ArgSize metadata\n27278 have ArgSize metadata with this change\ngodoc size before: 11351888, after: 11364288\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/12163043",
			"disapproval": false,
			"date": "2013-07-31 16:00:38.908420",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 12163043: cmd/gc: record argument size for all indirect function calls",
	"created": "2013-07-31 13:16:01.210390",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		14001,
		17001,
		23002
	],
	"modified": "2013-07-31 16:00:40.248780",
	"closed": true,
	"issue": 12163043
}