{
	"description": "runtime: rewrite map size test\n\nI don't know why the memstats code is flaky.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-31 12:35:38.531430",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d39481d8010a ***\n\nruntime: rewrite map size test\n\nI don't know why the memstats code is flaky.\n\nTBR=bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12160043",
			"disapproval": false,
			"date": "2013-07-31 12:35:47.927530",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThis is much simpler way to test the size :)",
			"disapproval": false,
			"date": "2013-07-31 12:48:46.172210",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThanks :)\r\nOn Jul 31, 2013 5:35 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: bradfitz,\r\n>\r\n> Message:\r\n> Hello bradfitz (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> runtime: rewrite map size test\r\n>\r\n> I don't know why the memstats code is flaky.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12160043/<https://codereview.appspot.com/12160043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/hashmap.c\r\n>   M src/pkg/runtime/map_test.go\r\n>\r\n>\r\n> Index: src/pkg/runtime/hashmap.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/hashmap.c\r\n> +++ b/src/pkg/runtime/hashmap.c\r\n> @@ -1112,6 +1112,9 @@\r\n>         Type *key;\r\n>\r\n>         key = typ->key;\r\n> +\r\n> +       if(sizeof(Hmap) > 48)\r\n> +               runtime\u00b7panicstring(\"hmap too large\");\r\n>\r\n>         if(hint < 0 || (int32)hint != hint)\r\n>                 runtime\u00b7panicstring(\"makemap: size out of range\");\r\n> Index: src/pkg/runtime/map_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/map_test.go\r\n> +++ b/src/pkg/runtime/map_test.go\r\n> @@ -371,44 +371,3 @@\r\n>                 }\r\n>         }\r\n>  }\r\n> -\r\n> -func TestMapSize(t *testing.T) {\r\n> -       if runtime.GOMAXPROCS(-1) != 1 {\r\n> -               t.Skip(\"gomaxprocs > 1 - not accurate\")\r\n> -       }\r\n> -       var m map[struct{}]struct{}\r\n> -       size := bytesPerRun(100, func() {\r\n> -               m = make(map[struct{}]struct{})\r\n> -       })\r\n> -       if size > 48 {\r\n> -               t.Errorf(\"size = %v; want <= 48\", size)\r\n> -       }\r\n> -}\r\n> -\r\n> -// like testing.AllocsPerRun, but for bytes of memory, not number of\r\n> allocations.\r\n> -func bytesPerRun(runs int, f func()) (avg float64) {\r\n> -       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n> -\r\n> -       // Warm up the function\r\n> -       f()\r\n> -\r\n> -       // Measure the starting statistics\r\n> -       var memstats runtime.MemStats\r\n> -       runtime.ReadMemStats(&**memstats)\r\n> -       sum := 0 - memstats.Alloc\r\n> -\r\n> -       // Run the function the specified number of times\r\n> -       for i := 0; i < runs; i++ {\r\n> -               f()\r\n> -       }\r\n> -\r\n> -       // Read the final statistics\r\n> -       runtime.ReadMemStats(&**memstats)\r\n> -       sum += memstats.Alloc\r\n> -\r\n> -       // Average the mallocs over the runs (not counting the warm-up).\r\n> -       // We are forced to return a float64 because the API is silly, but\r\n> do\r\n> -       // the division as integers so we can ask if AllocsPerRun()==1\r\n> -       // instead of AllocsPerRun()<2.\r\n> -       return float64(sum / uint64(runs))\r\n> -}\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-31 14:57:18.373760",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 12160043: runtime: rewrite map size test",
	"created": "2013-07-31 12:30:51.597460",
	"patchsets": [
		1,
		3001,
		2
	],
	"modified": "2013-07-31 14:57:18.422360",
	"closed": true,
	"issue": 12160043
}