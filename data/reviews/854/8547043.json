{
	"description": "net: add test for runtime.PollDesc leak\n\nSee 8318044",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is no issue number that I am aware of for this work. It probably\r\nwould have made this process easier if there were.\r\n\r\nOn Tue, Apr 9, 2013 at 11:08 AM,  <dave@cheney.net> wrote:\r\n> Reviewers: bradfitz,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: add test for runtime.PollDesc leak\r\n>\r\n> See 8318044\r\n>\r\n> Please review this at https://codereview.appspot.com/8547043/\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/dial_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/dial_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/dial_test.go\r\n> +++ b/src/pkg/net/dial_test.go\r\n> @@ -330,3 +330,45 @@\r\n>         // All tests using this should be skipped anyway, but:\r\n>         panic(\"numFDs not implemented on \" + runtime.GOOS)\r\n>  }\r\n> +\r\n> +// Assert that a failed Dial attempt does not leak\r\n> +// runtime.PollDesc structures\r\n> +func TestDialPollDescLeak(t *testing.T) {\r\n> +       // remove once CL 8318044 is submitted\r\n> +       t.Skip(\"Test skipped pending submission of CL 8318044\")\r\n> +\r\n> +       if testing.Short() {\r\n> +               t.Skip(\"skipping PollDesc leak test in -short mode\")\r\n> +       }\r\n> +\r\n> +       const loops = 10\r\n> +       const count = 20000\r\n> +       var old runtime.MemStats // used by sysdelta\r\n> +       runtime.ReadMemStats(&old)\r\n> +       sysdelta := func() uint64 {\r\n> +               var new runtime.MemStats\r\n> +               runtime.ReadMemStats(&new)\r\n> +               delta := old.Sys - new.Sys\r\n> +               old = new\r\n> +               return delta\r\n> +       }\r\n> +       failcount := 0\r\n> +       for i := 0; i < loops; i++ {\r\n> +               for i := 0; i < count; i++ {\r\n> +                       conn, err := Dial(\"tcp\", \"127.0.0.1:1\")\r\n> +                       if err == nil {\r\n> +                               t.Error(\"dial should not succeed\")\r\n> +                               conn.Close()\r\n> +                               t.FailNow()\r\n> +                       }\r\n> +               }\r\n> +               if delta := sysdelta(); delta > 0 {\r\n> +                       failcount++\r\n> +               }\r\n> +               // there are always some allocations on the first loop\r\n> +               if failcount > 3 {\r\n> +                       t.Error(\"net.Dial leaked memory\")\r\n> +                       t.FailNow()\r\n> +               }\r\n> +       }\r\n> +}\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 01:09:33.002360",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nUpdate CL description to say the word \"Issue\" before the number (\"Update Issue nnnnn\") and then add a t.Skip line at the top.  The fix commit later can remove the line.",
			"disapproval": false,
			"date": "2013-04-09 01:03:12.837910",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-09 01:08:50.593230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n On Apr 8, 2013 6:08 PM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: bradfitz,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: add test for runtime.PollDesc leak\r\n>\r\n> See 8318044\r\n>\r\n> Please review this at https://codereview.appspot.**com/8547043/<https://codereview.appspot.com/8547043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/dial_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/dial_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/dial_test.go\r\n> +++ b/src/pkg/net/dial_test.go\r\n> @@ -330,3 +330,45 @@\r\n>         // All tests using this should be skipped anyway, but:\r\n>         panic(\"numFDs not implemented on \" + runtime.GOOS)\r\n>  }\r\n> +\r\n> +// Assert that a failed Dial attempt does not leak\r\n> +// runtime.PollDesc structures\r\n> +func TestDialPollDescLeak(t *testing.T) {\r\n> +       // remove once CL 8318044 is submitted\r\n> +       t.Skip(\"Test skipped pending submission of CL 8318044\")\r\n> +\r\n> +       if testing.Short() {\r\n> +               t.Skip(\"skipping PollDesc leak test in -short mode\")\r\n> +       }\r\n> +\r\n> +       const loops = 10\r\n> +       const count = 20000\r\n> +       var old runtime.MemStats // used by sysdelta\r\n> +       runtime.ReadMemStats(&old)\r\n> +       sysdelta := func() uint64 {\r\n> +               var new runtime.MemStats\r\n> +               runtime.ReadMemStats(&new)\r\n> +               delta := old.Sys - new.Sys\r\n> +               old = new\r\n> +               return delta\r\n> +       }\r\n> +       failcount := 0\r\n> +       for i := 0; i < loops; i++ {\r\n> +               for i := 0; i < count; i++ {\r\n> +                       conn, err := Dial(\"tcp\", \"127.0.0.1:1\")\r\n> +                       if err == nil {\r\n> +                               t.Error(\"dial should not succeed\")\r\n> +                               conn.Close()\r\n> +                               t.FailNow()\r\n> +                       }\r\n> +               }\r\n> +               if delta := sysdelta(); delta > 0 {\r\n> +                       failcount++\r\n> +               }\r\n> +               // there are always some allocations on the first loop\r\n> +               if failcount > 3 {\r\n> +                       t.Error(\"net.Dial leaked memory\")\r\n> +                       t.FailNow()\r\n> +               }\r\n> +       }\r\n> +}\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 01:12:39.136150",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=72f34609fb25 ***\n\nnet: add test for runtime.PollDesc leak\n\nSee 8318044\n\nR=bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8547043",
			"disapproval": false,
			"date": "2013-04-09 01:14:33.577190",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 8547043: net: add test for runtime.PollDesc leak",
	"created": "2013-04-09 00:54:20.277870",
	"patchsets": [
		1,
		2001,
		4002,
		7001,
		11001
	],
	"modified": "2013-04-09 01:14:36.046620",
	"closed": true,
	"issue": 8547043
}