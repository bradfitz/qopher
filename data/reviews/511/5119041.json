{
	"description": "exp/template/html: handle custom attrs and HTML5 embedded elements.\n\nHTML5 allows embedded SVG and MathML.\nCode searches show SVG is used for graphing.\n\nThis changes transition to deal with constructs like\n   <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\">\nIt changes attr and clients to call a single function that combines\nthe name lookup and \"on\" prefix check to determine an attribute\nvalue type given an attribute name.\n\nThat function uses heuristics to recognize that\n     xlink:href and svg:href\nhave URL content, and that data-url is likely contains URL content,\nsince \"javascript:\" injection is such a problem.\n\nI did a code search over a closure templates codebase to determine\npatterns of custom attribute usage.  I did something like\n\n$ find . -name \\*.soy | \\\n    xargs egrep perl -ne 'while (s/\\b((data-|\\w+:)\\w+)\\s*=//) { print \"$1\\n\"; }' | \\\n    sort | uniq\n\nto produce the list at the bottom.\n\nFiltering that by egrep -i 'src|url|uri' produces\n\ndata-docConsumptionUri\ndata-docIconUrl\ndata-launchUrl\ndata-lazySrc\ndata-pageUrl\ndata-shareurl\ndata-suggestServerUrl\ndata-tweetUrl\ng:secondaryurls\ng:url\n\nwhich seem to match all the ones that are likely URL content.\nThere are some short words that match that heuristic, but I still think it decent since\nany custom attribute that has a numeric or enumerated keyword value will be unaffected by\nthe URL assumption.\nCounterexamples from /usr/share/dict:\nduring, hourly, maturity, nourish, purloin, security, surly\n\nCustom attributes present in existing closure templates codebase:\nbuzz:aid\ndata-a\ndata-action\ndata-actor\ndata-allowEqualityOps\ndata-analyticsId\ndata-bid\ndata-c\ndata-cartId\ndata-categoryId\ndata-cid\ndata-command\ndata-count\ndata-country\ndata-creativeId\ndata-cssToken\ndata-dest\ndata-docAttribution\ndata-docConsumptionUri\ndata-docCurrencyCode\ndata-docIconUrl\ndata-docId\ndata-docPrice\ndata-docPriceMicros\ndata-docTitle\ndata-docType\ndata-docid\ndata-email\ndata-entityid\ndata-errorindex\ndata-f\ndata-feature\ndata-fgid\ndata-filter\ndata-fireEvent\ndata-followable\ndata-followed\ndata-hashChange\ndata-height\ndata-hover\ndata-href\ndata-id\ndata-index\ndata-invitable\ndata-isFree\ndata-isPurchased\ndata-jid\ndata-jumpid\ndata-launchUrl\ndata-lazySrc\ndata-listType\ndata-maxVisiblePages\ndata-name\ndata-nid\ndata-nodeid\ndata-numItems\ndata-numPerPage\ndata-offerType\ndata-oid\ndata-opUsesEquality\ndata-overflowclass\ndata-packageName\ndata-pageId\ndata-pageUrl\ndata-pos\ndata-priceBrief\ndata-profileIds\ndata-query\ndata-rating\ndata-ref\ndata-rentalGrantPeriodDays\ndata-rentalactivePeriodHours\ndata-reviewId\ndata-role\ndata-score\ndata-shareurl\ndata-showGeLe\ndata-showLineInclude\ndata-size\ndata-sortval\ndata-suggestServerType\ndata-suggestServerUrl\ndata-suggestionIndex\ndata-tabBarId\ndata-tabBarIndex\ndata-tags\ndata-target\ndata-textColor\ndata-theme\ndata-title\ndata-toggletarget\ndata-tooltip\ndata-trailerId\ndata-transactionId\ndata-transition\ndata-ts\ndata-tweetContent\ndata-tweetUrl\ndata-type\ndata-useAjax\ndata-value\ndata-width\ndata-x\ndm:index\ndm:type\ng:aspects\ng:decorateusingsecondary\ng:em\ng:entity\ng:groups\ng:id\ng:istoplevel\ng:li\ng:numresults\ng:oid\ng:parentId\ng:pl\ng:pt\ng:rating_override\ng:secondaryurls\ng:sortby\ng:startindex\ng:target\ng:type\ng:url\ng:value\nga:barsize\nga:css\nga:expandAfterCharsExceed\nga:initialNumRows\nga:nocancelicon\nga:numRowsToExpandTo\nga:type\nga:unlockwhenrated\ngw:address\ngw:businessname\ngw:comment\ngw:phone\ngw:source\nng:controller\nxlink:href\nxml:lang\nxmlns:atom\nxmlns:dc\nxmlns:jstd\nxmlns:ng\nxmlns:og\nxmlns:webstore\nxmlns:xlink",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-23 20:19:53.554724",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/attr.go\nFile src/pkg/exp/template/html/attr.go (right):\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/attr.go#newcode94\nsrc/pkg/exp/template/html/attr.go:94: // since we have special handling in attrOfType.\ns/attrOfType/typeOfAttr/, but I'd call the function attrType, and the map variable attrTypeMap.\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/attr.go#newcode169\nsrc/pkg/exp/template/html/attr.go:169: if strings.Index(name, \"src\") != -1 ||\nUse strings.Contains instead of strings.Index.\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/escape_test.go#newcode1363\nsrc/pkg/exp/template/html/escape_test.go:1363: `<a g:url`,\nCan I get a test for `<a g:`?\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/transition.go\nFile src/pkg/exp/template/html/transition.go (right):\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/transition.go#newcode515\nsrc/pkg/exp/template/html/transition.go:515: func isASCIIDigit(c byte) bool {\nisASCIILetterOrDigit seems like a more useful function. You could also drop the \"is\", I'd name the functions \"asciiAlpha\" and \"asciiAlphaNum\".\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/transition.go#newcode520\nsrc/pkg/exp/template/html/transition.go:520: func eatTagName(s []byte, i int) (int, element) {\nI'd write the function body as:\n----\nif i == len(s) || !asciiAlpha(s[i]) {\n  return i, elementNone\n}\nj := i + 1\nfor j < len(s) {\n  x := s[j]\n  if asciiAlphaNum(x) {\n    j++\n    continue\n  }\n  // Allow \"x-y\" or \"x:y\" but not \"x-\", \"-y\", or \"x--y\".\n  if (x == ':' || x == '-') && j+1 < len(s) && asciiAlphaNum(s[j+1]) {\n    j += 2\n    continue\n  }\n  break\n}\nreturn j, elementNameMap[strings.ToLower(string(s[i:j]))]\n----",
			"disapproval": false,
			"date": "2011-09-25 09:03:13.157436",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/attr.go\nFile src/pkg/exp/template/html/attr.go (right):\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/attr.go#newcode94\nsrc/pkg/exp/template/html/attr.go:94: // since we have special handling in attrOfType.\nOn 2011/09/25 09:03:13, nigeltao wrote:\n> s/attrOfType/typeOfAttr/, but I'd call the function attrType, and the map\n> variable attrTypeMap.\n\nDone.\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/attr.go#newcode169\nsrc/pkg/exp/template/html/attr.go:169: if strings.Index(name, \"src\") != -1 ||\nOn 2011/09/25 09:03:13, nigeltao wrote:\n> Use strings.Contains instead of strings.Index.\n\nDone.\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/escape_test.go#newcode1363\nsrc/pkg/exp/template/html/escape_test.go:1363: `<a g:url`,\nOn 2011/09/25 09:03:13, nigeltao wrote:\n> Can I get a test for `<a g:`?\n\nDone.\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/transition.go\nFile src/pkg/exp/template/html/transition.go (right):\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/transition.go#newcode515\nsrc/pkg/exp/template/html/transition.go:515: func isASCIIDigit(c byte) bool {\nOn 2011/09/25 09:03:13, nigeltao wrote:\n> isASCIILetterOrDigit seems like a more useful function. You could also drop the\n> \"is\", I'd name the functions \"asciiAlpha\" and \"asciiAlphaNum\".\n\nRenamed.\n\nBefore this CL, tag names were defined as a letter followed by alphanums.  I didn't define an AlphaNum function so as not to allow tag names that start with digits.\n\nhttp://codereview.appspot.com/5119041/diff/2005/src/pkg/exp/template/html/transition.go#newcode520\nsrc/pkg/exp/template/html/transition.go:520: func eatTagName(s []byte, i int) (int, element) {\nOn 2011/09/25 09:03:13, nigeltao wrote:\n> I'd write the function body as:\n> ----\n> if i == len(s) || !asciiAlpha(s[i]) {\n>   return i, elementNone\n> }\n> j := i + 1\n> for j < len(s) {\n>   x := s[j]\n>   if asciiAlphaNum(x) {\n>     j++\n>     continue\n>   }\n>   // Allow \"x-y\" or \"x:y\" but not \"x-\", \"-y\", or \"x--y\".\n>   if (x == ':' || x == '-') && j+1 < len(s) && asciiAlphaNum(s[j+1]) {\n>     j += 2\n>     continue\n>   }\n>   break\n> }\n> return j, elementNameMap[strings.ToLower(string(s[i:j]))]\n> ----\n\nDone.",
			"disapproval": false,
			"date": "2011-09-26 11:50:32.963191",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=224c7e1777ed ***\n\nexp/template/html: handle custom attrs and HTML5 embedded elements.\n\nHTML5 allows embedded SVG and MathML.\nCode searches show SVG is used for graphing.\n\nThis changes transition to deal with constructs like\n   <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\">\nIt changes attr and clients to call a single function that combines\nthe name lookup and \"on\" prefix check to determine an attribute\nvalue type given an attribute name.\n\nThat function uses heuristics to recognize that\n     xlink:href and svg:href\nhave URL content, and that data-url is likely contains URL content,\nsince \"javascript:\" injection is such a problem.\n\nI did a code search over a closure templates codebase to determine\npatterns of custom attribute usage.  I did something like\n\n$ find . -name \\*.soy | \\\n    xargs egrep perl -ne 'while (s/\\b((data-|\\w+:)\\w+)\\s*=//) { print \"$1\\n\"; }' | \\\n    sort | uniq\n\nto produce the list at the bottom.\n\nFiltering that by egrep -i 'src|url|uri' produces\n\ndata-docConsumptionUri\ndata-docIconUrl\ndata-launchUrl\ndata-lazySrc\ndata-pageUrl\ndata-shareurl\ndata-suggestServerUrl\ndata-tweetUrl\ng:secondaryurls\ng:url\n\nwhich seem to match all the ones that are likely URL content.\nThere are some short words that match that heuristic, but I still think it decent since\nany custom attribute that has a numeric or enumerated keyword value will be unaffected by\nthe URL assumption.\nCounterexamples from /usr/share/dict:\nduring, hourly, maturity, nourish, purloin, security, surly\n\nCustom attributes present in existing closure templates codebase:\nbuzz:aid\ndata-a\ndata-action\ndata-actor\ndata-allowEqualityOps\ndata-analyticsId\ndata-bid\ndata-c\ndata-cartId\ndata-categoryId\ndata-cid\ndata-command\ndata-count\ndata-country\ndata-creativeId\ndata-cssToken\ndata-dest\ndata-docAttribution\ndata-docConsumptionUri\ndata-docCurrencyCode\ndata-docIconUrl\ndata-docId\ndata-docPrice\ndata-docPriceMicros\ndata-docTitle\ndata-docType\ndata-docid\ndata-email\ndata-entityid\ndata-errorindex\ndata-f\ndata-feature\ndata-fgid\ndata-filter\ndata-fireEvent\ndata-followable\ndata-followed\ndata-hashChange\ndata-height\ndata-hover\ndata-href\ndata-id\ndata-index\ndata-invitable\ndata-isFree\ndata-isPurchased\ndata-jid\ndata-jumpid\ndata-launchUrl\ndata-lazySrc\ndata-listType\ndata-maxVisiblePages\ndata-name\ndata-nid\ndata-nodeid\ndata-numItems\ndata-numPerPage\ndata-offerType\ndata-oid\ndata-opUsesEquality\ndata-overflowclass\ndata-packageName\ndata-pageId\ndata-pageUrl\ndata-pos\ndata-priceBrief\ndata-profileIds\ndata-query\ndata-rating\ndata-ref\ndata-rentalGrantPeriodDays\ndata-rentalactivePeriodHours\ndata-reviewId\ndata-role\ndata-score\ndata-shareurl\ndata-showGeLe\ndata-showLineInclude\ndata-size\ndata-sortval\ndata-suggestServerType\ndata-suggestServerUrl\ndata-suggestionIndex\ndata-tabBarId\ndata-tabBarIndex\ndata-tags\ndata-target\ndata-textColor\ndata-theme\ndata-title\ndata-toggletarget\ndata-tooltip\ndata-trailerId\ndata-transactionId\ndata-transition\ndata-ts\ndata-tweetContent\ndata-tweetUrl\ndata-type\ndata-useAjax\ndata-value\ndata-width\ndata-x\ndm:index\ndm:type\ng:aspects\ng:decorateusingsecondary\ng:em\ng:entity\ng:groups\ng:id\ng:istoplevel\ng:li\ng:numresults\ng:oid\ng:parentId\ng:pl\ng:pt\ng:rating_override\ng:secondaryurls\ng:sortby\ng:startindex\ng:target\ng:type\ng:url\ng:value\nga:barsize\nga:css\nga:expandAfterCharsExceed\nga:initialNumRows\nga:nocancelicon\nga:numRowsToExpandTo\nga:type\nga:unlockwhenrated\ngw:address\ngw:businessname\ngw:comment\ngw:phone\ngw:source\nng:controller\nxlink:href\nxml:lang\nxmlns:atom\nxmlns:dc\nxmlns:jstd\nxmlns:ng\nxmlns:og\nxmlns:webstore\nxmlns:xlink\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5119041",
			"disapproval": false,
			"date": "2011-09-28 21:07:52.783976",
			"approval": false
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 5119041: exp/template/html: handle custom attrs and HTML5 embedd...",
	"created": "2011-09-23 19:23:53.385367",
	"patchsets": [
		1,
		1001,
		4001,
		2005,
		13001,
		17001,
		20001,
		14005
	],
	"modified": "2011-09-28 21:07:54.398235",
	"closed": true,
	"issue": 5119041
}