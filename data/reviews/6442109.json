{
	"description": "runtime: arm: abort if hardware floating point missing\n\nFixes issue 3911.\n\nRequires CL 6449127.\n\ndfc@qnap:~$ ./runtime.test\nruntime: this CPU has no floating point hardware, so it cannot run\nthis GOARM=7 binary. Recompile using GOARM=5.",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-10 12:25:28.555510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "rsc: I have updated the error message in runtime.c, PTAL\r\n\r\nall: I think we can do both, print an error message on GOARM mismatch,\r\nand also stop using vmov imm (which restricts the range of GOARM\r\nvalues to 5 and 6) for the moment.\r\n\r\nOn Sun, Sep 2, 2012 at 12:00 AM, Russ Cox <rsc@golang.org> wrote:\r\n> I would still like to see a runtime check that can print:\r\n>\r\n> runtime: cannot run GOARM=%d binary on this system; need GOARM=%d\r\n>\r\n> because it is a common source of problems for people. Don't make any\r\n> reference to the \"ARM version\", just to the GOARM setting. That\r\n> definition is purely under our control.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-09-01 14:05:05.876550",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping. Would anyone else like to review this proposal ?",
			"disapproval": false,
			"date": "2012-09-07 02:09:23.801730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6442109/diff/9001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttp://codereview.appspot.com/6442109/diff/9001/src/pkg/runtime/runtime.c#newcode214\nsrc/pkg/runtime/runtime.c:214: if(runtime\u00b7armArch < runtime\u00b7goarm) {\nWhere is armArch being set?\n\nhttp://codereview.appspot.com/6442109/diff/9001/src/pkg/runtime/runtime.c#newcode215\nsrc/pkg/runtime/runtime.c:215: runtime\u00b7printf(\"This binary requires ARMv%d, this host is ARMv%d.\\n\",\n\"runtime: cannot run ARMv%d binary on ARMv%d system\\n\",",
			"disapproval": false,
			"date": "2012-08-30 14:46:44.373670",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i need to do some experiments regarding hard floating point\nand kernel software floating point emulation.\n\nmaybe we can make both GOARM=5 and GOARM=6 runnable\non most systems.\n(GOARM=5 obviously can be run on VFP systems, only slower.\ni think GOARM=6 might be able to run VFP-less systems, provided\nkernel softfp is enabled [it should be enabled by default on\nmost systems])\n\nif it's the case, our job is more difficult, but the life will be much\neasier for user:\nwe need to detect whether the kernel can actually run this binary\ncorrectly (maybe slow), and if it's, let it run. if it's not, give error\nand exit.\n\nhttp://codereview.appspot.com/6442109/diff/16007/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttp://codereview.appspot.com/6442109/diff/16007/src/pkg/runtime/runtime.c#newcode214\nsrc/pkg/runtime/runtime.c:214: if(runtime\u00b7armArch < runtime\u00b7goarm) {\nif we only differentiate GOARM=5 (soft float) and GOARM>5 (VFP),\ni think you'd better use runtime.hwcap & HWCAP_VFP instead.\n\nFYI, HWCAP_VFP is defined in /usr/include/asm/hwcap.h.",
			"disapproval": false,
			"date": "2012-09-02 19:19:24.200890",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I just managed hit this myself while testing this CL.\n\npkg/go/scanner\npkg/go/ast\npkg/go/parser\npkg/os/exec\npkg/net/url\npkg/text/template/parse\npkg/text/template\npkg/go/doc\npkg/go/build\ncmd/go\nruntime: this binary requires hardware floating point support. Recompile with GOARM=5.\n\nClearly I did not follow my own advice.",
			"disapproval": false,
			"date": "2012-09-04 23:37:04.686210",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you. I'll make that change before submitting.\r\n\r\nOn Fri, Sep 7, 2012 at 12:28 PM,  <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n>\r\n> http://codereview.appspot.com/6442109/diff/19006/src/pkg/runtime/signal_linux_arm.c\r\n> File src/pkg/runtime/signal_linux_arm.c (right):\r\n>\r\n> http://codereview.appspot.com/6442109/diff/19006/src/pkg/runtime/signal_linux_arm.c#newcode160\r\n> src/pkg/runtime/signal_linux_arm.c:160: runtime\u00b7printf(\"runtime: this\r\n> binary requires hardware floating point support. Recompile with\r\n> GOARM=5.\\n\");\r\n> I'd like this not to wrap. It would also be nice to say what the binary\r\n> is, if only for debugging. How about this (two lines):\r\n>\r\n> runtime: this CPU has no floating point hardware, so it cannot run\r\n> this GOARM=%d binary. Recompile using GOARM=%d.\r\n>\r\n> http://codereview.appspot.com/6442109/\r\n",
			"disapproval": false,
			"date": "2012-09-07 02:35:41.037520",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/30 14:46:44, rsc wrote:\nhttp://codereview.appspot.com/6442109/diff/9001/src/pkg/runtime/runtime.c#newcode214\n> src/pkg/runtime/runtime.c:214: if(runtime\u00b7armArch < runtime\u00b7goarm) {\n> Where is armArch being set?\nhttp://tip.golang.org/src/pkg/runtime/signal_linux_arm.c#L178\n\nRuss, could you please take a look at the corresponding golang-dev\ndiscussion?",
			"disapproval": false,
			"date": "2012-08-30 15:12:55.800300",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Sep 1, 2012 at 4:38 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> In the spirit of supporting the Pi by Go 1.1, I would support removing\r\n> vmov imm at this point and revisiting it later. I have a benchmark that\r\n> shows in the micro there is a significant cost on arm7  without vmov imm\r\n> for the math package, but it is hard to find a serious impact in the macro\r\n> go1 benchmarks.\r\n>\r\nvmov imm doesn't do much (it can only load a specific class of constant\r\nfloating\r\npoint numbers), i think maybe we can rewrite some code in the math package\r\nto\r\nsolve the performance issue.\r\n",
			"disapproval": false,
			"date": "2012-09-01 08:57:40.511900",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments, PTAL.\n\nhttp://codereview.appspot.com/6442109/diff/9001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttp://codereview.appspot.com/6442109/diff/9001/src/pkg/runtime/runtime.c#newcode214\nsrc/pkg/runtime/runtime.c:214: if(runtime\u00b7armArch < runtime\u00b7goarm) {\nOn 2012/08/30 14:46:44, rsc wrote:\n> Where is armArch being set?\n\nsignal_linux_arm.c +178\n\nI might be able to move them closer together if you would like.\n\nhttp://codereview.appspot.com/6442109/diff/9001/src/pkg/runtime/runtime.c#newcode215\nsrc/pkg/runtime/runtime.c:215: runtime\u00b7printf(\"This binary requires ARMv%d, this host is ARMv%d.\\n\",\nOn 2012/08/30 14:46:44, rsc wrote:\n> \"runtime: cannot run ARMv%d binary on ARMv%d system\\n\",\n\nDone.",
			"disapproval": false,
			"date": "2012-08-31 01:40:05.822960",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In the spirit of supporting the Pi by Go 1.1, I would support removing vmov imm at this point and revisiting it later. I have a benchmark that shows in the micro there is a significant cost on arm7  without vmov imm for the math package, but it is hard to find a serious impact in the macro go1 benchmarks. \r\n\r\nOn 01/09/2012, at 18:08, minux <minux.ma@gmail.com> wrote:\r\n\r\n> sorry, but i tend to oppose this approach now.\r\n> \r\n> as elaborated here: https://groups.google.com/d/topic/golang-dev/WqJuNnZr8pw/discussion\r\n> \r\n> i think this approach unnecessarily limit the scope of our binaries. this will make it\r\n> difficult for our developers to distribute pre-built binaries (either he must provide ARMv5\r\n> version and sacrifice floating point performance or he provide at least ARMv5 and ARMv6\r\n> versions, but user with VFP-less ARMv6 will have to use the ARMv5 version, which is\r\n> counter-intuitive at least);\r\n> \r\n> we've spend quite some effort in the runtime to auto detect architecture and use\r\n> the best available instructions for synchronization. I think we can do better for this case.\r\n> \r\n> our Go binary really only need two flavors, one with software floating point (undoubtedly could\r\n> be run on all supported machines), and one with VFPv1 hardware floating point.\r\n> \r\n> to sum up, i'd rather disable VFPv3-only vmov (imm) instruction entirely than this approach.\r\n> \r\n> ps:\r\n> $GOARM is somewhat misnamed, i think GOVFP would be much better.\r\n> if we can introduce GOVFP (or something similar), we can use this approach for it, because\r\n> it is less confusing to the users (our GOARM isn't really related to ARM Architecture).\r\n",
			"disapproval": false,
			"date": "2012-09-01 08:38:14.492600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6442109/diff/19006/src/pkg/runtime/signal_linux_arm.c\nFile src/pkg/runtime/signal_linux_arm.c (right):\n\nhttp://codereview.appspot.com/6442109/diff/19006/src/pkg/runtime/signal_linux_arm.c#newcode160\nsrc/pkg/runtime/signal_linux_arm.c:160: runtime\u00b7printf(\"runtime: this binary requires hardware floating point support. Recompile with GOARM=5.\\n\");\nI'd like this not to wrap. It would also be nice to say what the binary is, if only for debugging. How about this (two lines):\n\nruntime: this CPU has no floating point hardware, so it cannot run\nthis GOARM=%d binary. Recompile using GOARM=%d.",
			"disapproval": false,
			"date": "2012-09-07 02:28:26.366250",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 3, 2012 at 3:19 AM, <minux.ma@gmail.com> wrote:\r\n\r\n> i need to do some experiments regarding hard floating point\r\n> and kernel software floating point emulation.\r\n>\r\nunfortunately, the nwfpe software floating point facility in kernel is\r\nonly capable of emulating fpa (not vfp) instructions, so universal\r\narm binary is still not possible.\r\n",
			"disapproval": false,
			"date": "2012-09-03 16:52:24.059230",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sorry, but i tend to oppose this approach now.\r\n\r\nas elaborated here:\r\nhttps://groups.google.com/d/topic/golang-dev/WqJuNnZr8pw/discussion\r\n\r\ni think this approach unnecessarily limit the scope of our binaries. this\r\nwill make it\r\ndifficult for our developers to distribute pre-built binaries (either he\r\nmust provide ARMv5\r\nversion and sacrifice floating point performance or he provide at least\r\nARMv5 and ARMv6\r\nversions, but user with VFP-less ARMv6 will have to use the ARMv5 version,\r\nwhich is\r\ncounter-intuitive at least);\r\n\r\nwe've spend quite some effort in the runtime to auto detect architecture\r\nand use\r\nthe best available instructions for synchronization. I think we can do\r\nbetter for this case.\r\n\r\nour Go binary really only need two flavors, one with software floating\r\npoint (undoubtedly could\r\nbe run on all supported machines), and one with VFPv1 hardware floating\r\npoint.\r\n\r\nto sum up, i'd rather disable VFPv3-only vmov (imm) instruction entirely\r\nthan this approach.\r\n\r\nps:\r\n$GOARM is somewhat misnamed, i think GOVFP would be much better.\r\nif we can introduce GOVFP (or something similar), we can use this approach\r\nfor it, because\r\nit is less confusing to the users (our GOARM isn't really related to ARM\r\nArchitecture).\r\n",
			"disapproval": false,
			"date": "2012-09-01 08:08:35.804340",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. \r\n\r\nOn 01/09/2012, at 18:57, minux <minux.ma@gmail.com> wrote:\r\n\r\n> \r\n> On Sat, Sep 1, 2012 at 4:38 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> In the spirit of supporting the Pi by Go 1.1, I would support removing vmov imm at this point and revisiting it later. I have a benchmark that shows in the micro there is a significant cost on arm7  without vmov imm for the math package, but it is hard to find a serious impact in the macro go1 benchmarks. \r\n> vmov imm doesn't do much (it can only load a specific class of constant floating\r\n> point numbers), i think maybe we can rewrite some code in the math package to\r\n> solve the performance issue.\r\n",
			"disapproval": false,
			"date": "2012-09-01 09:12:58.685960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would still like to see a runtime check that can print:\r\n\r\nruntime: cannot run GOARM=%d binary on this system; need GOARM=%d\r\n\r\nbecause it is a common source of problems for people. Don't make any\r\nreference to the \"ARM version\", just to the GOARM setting. That\r\ndefinition is purely under our control.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-01 14:00:59.664110",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nwith this kind of test in place, we can go on to introduce\nGOARM=7 for VFPv3 systems (and make GOARM=6 the default).",
			"disapproval": false,
			"date": "2012-09-05 12:02:09.533280",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-04 20:43:30.314650",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I have updated the test logic to only consider hardware floating point and added a suggested fix. Thanks to minux for the suggestions.",
			"disapproval": false,
			"date": "2012-09-04 20:45:00.891030",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e4b20018f797 ***\n\nruntime: arm: abort if hardware floating point missing\n\nFixes issue 3911.\n\nRequires CL 6449127.\n\ndfc@qnap:~$ ./runtime.test\nruntime: this CPU has no floating point hardware, so it cannot run\nthis GOARM=7 binary. Recompile using GOARM=5.\n\nR=rsc, minux.ma\nCC=golang-dev\nhttp://codereview.appspot.com/6442109",
			"disapproval": false,
			"date": "2012-09-07 04:26:55.446320",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6442109: runtime: arm: abort if hardware floating point missing",
	"created": "2012-08-10 11:30:58.025150",
	"patchsets": [
		1,
		2001,
		5001,
		6005,
		6006,
		9001,
		14001,
		21002,
		16006,
		17006,
		16007,
		14004,
		20006,
		19006,
		15011,
		16010,
		17014
	],
	"modified": "2012-09-07 04:41:11.970680",
	"closed": true,
	"issue": 6442109
}