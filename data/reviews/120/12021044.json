{
	"description": "container/list: added MoveBefore and MoveAfter\n\nFixes issue 4940.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-31 18:33:42.338700",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=gri\r\n\r\n\r\n\r\nOn Wed, Jul 31, 2013 at 11:33 AM, <pieter@binky.org.uk> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> container/list: added MoveBefore and MoveAfter\r\n>\r\n> Fixes issue 4940.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12021044/<https://codereview.appspot.com/12021044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/container/list/list.go\r\n>   M src/pkg/container/list/list_**test.go\r\n>\r\n>\r\n> Index: src/pkg/container/list/list.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/container/list/list.**go\r\n> +++ b/src/pkg/container/list/list.**go\r\n> @@ -179,6 +179,24 @@\r\n>         l.insert(l.remove(e), l.root.prev)\r\n>  }\r\n>\r\n> +// MoveBefore moves element e to its new position before mark.\r\n> +// If e is not an element of l, or e == mark, the list is not modified.\r\n> +func (l *List) MoveBefore(e, mark *Element) {\r\n> +       if e.list != l || e == mark {\r\n> +               return\r\n> +       }\r\n> +       l.insert(l.remove(e), mark.prev)\r\n> +}\r\n> +\r\n> +// MoveAfter moves element e to its new position after mark.\r\n> +// If e is not an element of l, or e == mark, the list is not modified.\r\n> +func (l *List) MoveAfter(e, mark *Element) {\r\n> +       if e.list != l || e == mark {\r\n> +               return\r\n> +       }\r\n> +       l.insert(l.remove(e), mark)\r\n> +}\r\n> +\r\n>  // PushBackList inserts a copy of an other list at the back of list l.\r\n>  // The lists l and other may be the same.\r\n>  func (l *List) PushBackList(other *List) {\r\n> Index: src/pkg/container/list/list_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/container/list/list_**test.go\r\n> +++ b/src/pkg/container/list/list_**test.go\r\n> @@ -233,3 +233,37 @@\r\n>                 t.Errorf(\"l1.Len() = %d, want 3\", n)\r\n>         }\r\n>  }\r\n> +\r\n> +func TestMove(t *testing.T) {\r\n> +       l := New()\r\n> +       e1 := l.PushBack(1)\r\n> +       e2 := l.PushBack(2)\r\n> +       e3 := l.PushBack(3)\r\n> +       e4 := l.PushBack(4)\r\n> +\r\n> +       l.MoveAfter(e3, e3)\r\n> +       checkListPointers(t, l, []*Element{e1, e2, e3, e4})\r\n> +       l.MoveBefore(e2, e2)\r\n> +       checkListPointers(t, l, []*Element{e1, e2, e3, e4})\r\n> +\r\n> +       l.MoveAfter(e3, e2)\r\n> +       checkListPointers(t, l, []*Element{e1, e2, e3, e4})\r\n> +       l.MoveBefore(e2, e3)\r\n> +       checkListPointers(t, l, []*Element{e1, e2, e3, e4})\r\n> +\r\n> +       l.MoveBefore(e2, e4)\r\n> +       checkListPointers(t, l, []*Element{e1, e3, e2, e4})\r\n> +       e1, e2, e3, e4 = e1, e3, e2, e4\r\n> +\r\n> +       l.MoveBefore(e4, e1)\r\n> +       checkListPointers(t, l, []*Element{e4, e1, e2, e3})\r\n> +       e1, e2, e3, e4 = e4, e1, e2, e3\r\n> +\r\n> +       l.MoveAfter(e4, e1)\r\n> +       checkListPointers(t, l, []*Element{e1, e4, e2, e3})\r\n> +       e1, e2, e3, e4 = e1, e4, e2, e3\r\n> +\r\n> +       l.MoveAfter(e2, e3)\r\n> +       checkListPointers(t, l, []*Element{e1, e3, e2, e4})\r\n> +       e1, e2, e3, e4 = e1, e3, e2, e4\r\n> +}\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-31 19:44:19.096150",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\nthanks.",
			"disapproval": false,
			"date": "2013-07-31 20:39:13.102700",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4cd1a99ee4de ***\n\ncontainer/list: added MoveBefore and MoveAfter\n\nFixes issue 4940.\n\nR=golang-dev, bradfitz, gri\nCC=golang-dev\nhttps://codereview.appspot.com/12021044\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2013-07-31 21:11:28.784530",
			"approval": false
		}
	],
	"owner_email": "pieter@binky.org.uk",
	"private": false,
	"base_url": "",
	"owner": "peted",
	"subject": "code review 12021044: container/list: added MoveBefore and MoveAfter",
	"created": "2013-07-31 18:28:04.935730",
	"patchsets": [
		1,
		3001,
		6001,
		8001
	],
	"modified": "2013-08-01 06:31:28.562890",
	"closed": true,
	"issue": 12021044
}