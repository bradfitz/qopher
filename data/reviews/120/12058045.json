{
	"description": "go.tools/ssa: add debug info for x.f where Selection.Kind()==FieldVal.\n\nAlso:\n- Implement Program.FuncValue for interface methods (+ test).\n- go/types.Object.String(): don't package-qualify names unless\n  they are package level objects---otherwise you see \"main.x\" for\n  locals, struct fields, etc.\n- go/types.Func.String(): don't assume Type() is *Signature;\n  it could be *Builtin.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go#newcode87\ngo/types/objects.go:87: if obj.pkg != nil && obj.pkg.Scope().Lookup(obj.name) == obj {\nOn 2013/07/29 21:03:48, gri wrote:\n> obj.pkg.scope\n\nDone.\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go#newcode210\ngo/types/objects.go:210: if sig, ok := obj.typ.(*Signature); ok { // may be a *Builtin\nOn 2013/07/29 21:03:48, gri wrote:\n> please change to \n> \n> if sig, _ := obj.typ.(*Signature); sig != nil { ...\n\nDone.\n\nWhat's the rationale?  That it could be a nil *Signature?  Fewer variables is better?",
			"disapproval": false,
			"date": "2013-07-29 21:07:26.880660",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-29 20:59:02.316040",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go#newcode87\ngo/types/objects.go:87: if obj.pkg != nil && obj.pkg.Scope().Lookup(obj.name) == obj {\nobj.pkg.scope\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go#newcode210\ngo/types/objects.go:210: if sig, ok := obj.typ.(*Signature); ok { // may be a *Builtin\nplease change to \n\nif sig, _ := obj.typ.(*Signature); sig != nil { ...\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go#newcode236\ngo/types/objects.go:236: if sig, ok := obj.typ.(*Signature); ok {\nsame as above: sig != nil",
			"disapproval": false,
			"date": "2013-07-29 21:03:48.487540",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=dd1c35aec1c3&repo=tools ***\n\ngo.tools/ssa: add debug info for x.f where Selection.Kind()==FieldVal.\n\nAlso:\n- Implement Program.FuncValue for interface methods (+ test).\n- go/types.Object.String(): don't package-qualify names unless\n  they are package level objects---otherwise you see \"main.x\" for\n  locals, struct fields, etc.\n- go/types.Func.String(): don't assume Type() is *Signature;\n  it could be *Builtin.\n\nR=gri\nCC=golang-dev\nhttps://codereview.appspot.com/12058045",
			"disapproval": false,
			"date": "2013-07-29 21:10:13.630820",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12058045/diff/10001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/12058045/diff/10001/go/types/objects.go#newcode210\ngo/types/objects.go:210: if sig, ok := obj.typ.(*Signature); ok { // may be a *Builtin\nOn 2013/07/29 21:07:27, adonovan wrote:\n> On 2013/07/29 21:03:48, gri wrote:\n> > please change to \n> > \n> > if sig, _ := obj.typ.(*Signature); sig != nil { ...\n> \n> Done.\n> \n> What's the rationale?  That it could be a nil *Signature?  Fewer variables is\n> better?\n\nin no specific order:\n\n- fewer variables\n- be explicit that sig is not nil (more robust)\n- prevalent style in go/types\n\nI've been going back and forth, but for now that's the style I've been using. Perhaps it would be better to use the ok (and crash if there's an unexpected nil). Design decision that should be applied consequently.",
			"disapproval": false,
			"date": "2013-07-29 21:13:16.136720",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 12058045: go.tools/ssa: add debug info for x.f where Selection.Ki...",
	"created": "2013-07-29 20:29:20.712310",
	"patchsets": [
		1,
		3001,
		6001,
		8006,
		10001,
		15001
	],
	"modified": "2013-07-29 21:13:16.404010",
	"closed": true,
	"issue": 12058045
}