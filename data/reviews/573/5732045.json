{
	"description": "cmd/go: fix relative imports again\n\nI tried before to make relative imports work by simply\ninvoking the compiler in the right directory, so that\nan import of ./foo could be resolved by ./foo.a.\nThis required creating a separate tree of package binaries\nthat included the full path to the source directory, so that\n/home/gopher/bar.go would be compiled in\ntmpdir/work/local/home/gopher and perhaps find\na ./foo.a in that directory.\n\nThis model breaks on Windows because : appears in path\nnames but cannot be used in subdirectory names, and I\nmissed one or two places where it needed to be removed.\n\nThe model breaks more fundamentally when compiling\na test of a package that lives outside the Go path, because\nwe effectively use a ./ import in the generated testmain,\nbut there we want to be able to resolve the ./ import\nof the test package to one directory and all the other ./\nimports to a different directory.  Piggybacking on the compiler's\ncurrent working directory is then no longer possible.\n\nInstead, introduce a new compiler option -D prefix that\nmakes the compiler turn a ./ import into prefix+that,\nso that import \"./foo\" with -D a/b/c turns into import\n\"a/b/c/foo\".  Then we can invent a package hierarchy\n\"_/\" with subdirectories named for file system paths:\nimport \"./foo\" in the directory /home/gopher becomes\nimport \"_/home/gopher/foo\", and since that final path\nis just an ordinary import now, all the ordinary processing\nworks, without special cases.\n\nWe will have to change the name of the hierarchy if we\never decide to introduce a standard package with import\npath \"_\", but that seems unlikely, and the detail is known\nonly in temporary packages that get thrown away at the\nend of a build.\n\nFixes issue 3169.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-02 22:37:38.387297",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-02 22:27:38.282768",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 9dd9374109a9 ***\n\ncmd/go: fix relative imports again\n\nI tried before to make relative imports work by simply\ninvoking the compiler in the right directory, so that\nan import of ./foo could be resolved by ./foo.a.\nThis required creating a separate tree of package binaries\nthat included the full path to the source directory, so that\n/home/gopher/bar.go would be compiled in\ntmpdir/work/local/home/gopher and perhaps find\na ./foo.a in that directory.\n\nThis model breaks on Windows because : appears in path\nnames but cannot be used in subdirectory names, and I\nmissed one or two places where it needed to be removed.\n\nThe model breaks more fundamentally when compiling\na test of a package that lives outside the Go path, because\nwe effectively use a ./ import in the generated testmain,\nbut there we want to be able to resolve the ./ import\nof the test package to one directory and all the other ./\nimports to a different directory.  Piggybacking on the compiler's\ncurrent working directory is then no longer possible.\n\nInstead, introduce a new compiler option -D prefix that\nmakes the compiler turn a ./ import into prefix+that,\nso that import \"./foo\" with -D a/b/c turns into import\n\"a/b/c/foo\".  Then we can invent a package hierarchy\n\"_/\" with subdirectories named for file system paths:\nimport \"./foo\" in the directory /home/gopher becomes\nimport \"_/home/gopher/foo\", and since that final path\nis just an ordinary import now, all the ordinary processing\nworks, without special cases.\n\nWe will have to change the name of the hierarchy if we\never decide to introduce a standard package with import\npath \"_\", but that seems unlikely, and the detail is known\nonly in temporary packages that get thrown away at the\nend of a build.\n\nFixes issue 3169.\n\nR=golang-dev, r\nCC=golang-dev\nhttp://codereview.appspot.com/5732045",
			"disapproval": false,
			"date": "2012-03-03 03:16:06.381741",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5732045: cmd/go: fix relative imports again",
	"created": "2012-03-02 21:58:21.045907",
	"patchsets": [
		1,
		2001,
		3,
		4014,
		5
	],
	"modified": "2012-03-03 03:16:08.670827",
	"closed": true,
	"issue": 5732045
}