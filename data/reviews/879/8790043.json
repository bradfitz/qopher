{
	"description": "leveldb: track a version's compaction score.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2013-04-16 08:06:59.922550",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Tue, Apr 16, 2013 at 1:07 AM, <nigeltao@golang.org> wrote:\r\n\r\n> Reviewers: bradfitz,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/**leveldb-go<https://code.google.com/p/leveldb-go>\r\n>\r\n>\r\n> Description:\r\n> leveldb: track a version's compaction score.\r\n>\r\n> Please review this at https://codereview.appspot.**com/8790043/<https://codereview.appspot.com/8790043/>\r\n>\r\n> Affected files:\r\n>   M leveldb/leveldb.go\r\n>   M leveldb/version.go\r\n>   M leveldb/version_edit.go\r\n>   M leveldb/version_set.go\r\n>\r\n>\r\n> Index: leveldb/leveldb.go\r\n> ==============================**==============================**=======\r\n> --- a/leveldb/leveldb.go\r\n> +++ b/leveldb/leveldb.go\r\n> @@ -22,6 +22,12 @@\r\n>         \"code.google.com/p/leveldb-go/**leveldb/table<http://code.google.com/p/leveldb-go/leveldb/table>\r\n> \"\r\n>  )\r\n>\r\n> +const (\r\n> +       // l0CompactionTrigger is the number of files at which level-0\r\n> compaction\r\n> +       // starts.\r\n> +       l0CompactionTrigger = 4\r\n> +)\r\n> +\r\n>  // TODO: document DB.\r\n>  type DB struct {\r\n>         dirname string\r\n> Index: leveldb/version.go\r\n> ==============================**==============================**=======\r\n> --- a/leveldb/version.go\r\n> +++ b/leveldb/version.go\r\n> @@ -22,6 +22,13 @@\r\n>         smallest, largest internalKey\r\n>  }\r\n>\r\n> +func totalSize(f []fileMetadata) (size uint64) {\r\n> +       for _, x := range f {\r\n> +               size += x.size\r\n> +       }\r\n> +       return size\r\n> +}\r\n> +\r\n>  type byFileNum []fileMetadata\r\n>\r\n>  func (b byFileNum) Len() int           { return len(b) }\r\n> @@ -66,6 +73,38 @@\r\n>         // Every version is part of a circular doubly-linked list of\r\n> versions.\r\n>         // One of those versions is a versionSet.dummyVersion.\r\n>         prev, next *version\r\n> +\r\n> +       // These fields are the level that should be compacted next and its\r\n> +       // compaction score. A score < 1 means that compaction is not\r\n> strictly\r\n> +       // needed.\r\n> +       compactionScore float64\r\n> +       compactionLevel int\r\n> +}\r\n> +\r\n> +// updateCompactionScore updates v's compaction score and level.\r\n> +func (v *version) updateCompactionScore() {\r\n> +       // We treat level-0 specially by bounding the number of files\r\n> instead of\r\n> +       // number of bytes for two reasons:\r\n> +       //\r\n> +       // (1) With larger write-buffer sizes, it is nice not to do too\r\n> many\r\n> +       // level-0 compactions.\r\n> +       //\r\n> +       // (2) The files in level-0 are merged on every read and therefore\r\n> we\r\n> +       // wish to avoid too many files when the individual file size is\r\n> small\r\n> +       // (perhaps because of a small write-buffer setting, or very high\r\n> +       // compression ratios, or lots of overwrites/deletions).\r\n> +       v.compactionScore = float64(len(v.files[0])) / l0CompactionTrigger\r\n> +       v.compactionLevel = 0\r\n> +\r\n> +       maxBytes := float64(10 * 1024 * 1024)\r\n> +       for level := 1; level < numLevels-1; level++ {\r\n> +               score := float64(totalSize(v.files[**level])) / maxBytes\r\n> +               if score > v.compactionScore {\r\n> +                       v.compactionScore = score\r\n> +                       v.compactionLevel = level\r\n> +               }\r\n> +               maxBytes *= 10\r\n> +       }\r\n>  }\r\n>\r\n>  // checkOrdering checks that the files are consistent with respect to\r\n> Index: leveldb/version_edit.go\r\n> ==============================**==============================**=======\r\n> --- a/leveldb/version_edit.go\r\n> +++ b/leveldb/version_edit.go\r\n> @@ -359,5 +359,6 @@\r\n>         if err := v.checkOrdering(icmp); err != nil {\r\n>                 return nil, fmt.Errorf(\"leveldb: internal error: %v\", err)\r\n>         }\r\n> +       v.updateCompactionScore()\r\n>         return v, nil\r\n>  }\r\n> Index: leveldb/version_set.go\r\n> ==============================**==============================**=======\r\n> --- a/leveldb/version_set.go\r\n> +++ b/leveldb/version_set.go\r\n> @@ -128,9 +128,6 @@\r\n>                 return err\r\n>         }\r\n>         vs.append(newVersion)\r\n> -\r\n> -       // TODO: compute the compaction score. The C++ code calls this\r\n> VersionSet::Finalize.\r\n> -\r\n>         return nil\r\n>  }\r\n>\r\n> @@ -152,8 +149,6 @@\r\n>                 return err\r\n>         }\r\n>\r\n> -       // TODO: compute the compaction score. The C++ code calls this\r\n> VersionSet::Finalize.\r\n> -\r\n>         if vs.manifest == nil {\r\n>                 if err := vs.createManifest(dirname); err != nil {\r\n>                         return err\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-16 14:47:22.057340",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/leveldb-go/source/detail?r=24b5564d6f44 ***\n\nleveldb: track a version's compaction score.\n\nR=bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8790043",
			"disapproval": false,
			"date": "2013-04-16 23:58:15.121900",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 8790043: leveldb: track a version's compaction score.",
	"created": "2013-04-16 08:06:29.822250",
	"patchsets": [
		1,
		2001,
		5001,
		10001
	],
	"modified": "2013-04-16 23:58:17.665120",
	"closed": true,
	"issue": 8790043
}