{
	"description": "cmd/go: undo CL 8119049\n\nManual undo due to later changes in doc/go1.1.html; cmd/go/test.bash still passes.\n\nRationale, from CL 8119049 review log:\n\nThis makes the 'go run' command different from every other command.\nFor example, 'go test' does not mean 'go test *.go'.\n\nIf we were going to handle the no arguments case in 'go run', I would hope that\nit would scan the current directory to find a package just like 'go build' or\n'go test' would, and then it would require that package to be 'package main',\nand then it would run that package. This would make it match 'go test' and 'go\nbuild' and 'go install' and so on. It would mean that if you are working on a\ncommand in a directory that is 'go install'able, then 'go run' will run the\nbinary for you. The current CL does not accomplish that when build constraints\nor file name constraints are involved.\n\nFor example, if I am working on a program like:\n\n$ ls\nmain.go\nmain_386.s\nmain_arm.s\nmain_amd64.s\n$\n\nThen 'go run' will fail here because the .s files are ignored.\n\nIf instead I am working on a program like:\n\n$ ls\nmain.go\nmain_386.go\nmain_arm.go\nmain_amd64.go\n$\n\nthen 'go run' will fail because too many files are included.\n\nI would like to see this command implemented so that it is compatible with the\nother go subcommands. Since it is too late to do that for Go 1.1, I would like\nto see this CL reverted, to preserve the option to do it better later.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-29 19:04:15.761670",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease reopen issue 5164.",
			"disapproval": false,
			"date": "2013-04-29 19:12:03.534920",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-29 19:26:06.166290",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=dddf80567e0d ***\n\ncmd/go: undo CL 8119049\n\nManual undo due to later changes in doc/go1.1.html; cmd/go/test.bash still passes.\n\nRationale, from CL 8119049 review log:\n\nThis makes the 'go run' command different from every other command.\nFor example, 'go test' does not mean 'go test *.go'.\n\nIf we were going to handle the no arguments case in 'go run', I would hope that\nit would scan the current directory to find a package just like 'go build' or\n'go test' would, and then it would require that package to be 'package main',\nand then it would run that package. This would make it match 'go test' and 'go\nbuild' and 'go install' and so on. It would mean that if you are working on a\ncommand in a directory that is 'go install'able, then 'go run' will run the\nbinary for you. The current CL does not accomplish that when build constraints\nor file name constraints are involved.\n\nFor example, if I am working on a program like:\n\n$ ls\nmain.go\nmain_386.s\nmain_arm.s\nmain_amd64.s\n$\n\nThen 'go run' will fail here because the .s files are ignored.\n\nIf instead I am working on a program like:\n\n$ ls\nmain.go\nmain_386.go\nmain_arm.go\nmain_amd64.go\n$\n\nthen 'go run' will fail because too many files are included.\n\nI would like to see this command implemented so that it is compatible with the\nother go subcommands. Since it is too late to do that for Go 1.1, I would like\nto see this CL reverted, to preserve the option to do it better later.\n\nR=golang-dev, iant, r\nCC=golang-dev\nhttps://codereview.appspot.com/8797049",
			"disapproval": false,
			"date": "2013-04-30 21:05:01.660710",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 8797049: cmd/go: undo CL 8119049",
	"created": "2013-04-29 19:03:32.514180",
	"patchsets": [
		1,
		2001,
		5001,
		11001
	],
	"modified": "2013-04-30 21:05:03.645080",
	"closed": true,
	"issue": 8797049
}