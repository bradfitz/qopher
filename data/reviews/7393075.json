{
	"description": "strconv: Use Quote to escape the input string for failed conversion errors.\n\nThis reveals the presence of control and non-printable characters in the\nerrors returned by the Parse functions.  Also add unit tests for NumError.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"mdbrown@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7393075/diff/1001/src/pkg/strconv/atoi_test.go\nFile src/pkg/strconv/atoi_test.go (right):\n\nhttps://codereview.appspot.com/7393075/diff/1001/src/pkg/strconv/atoi_test.go#newcode192\nsrc/pkg/strconv/atoi_test.go:192: for _, c := range []struct{ Num, Want string }{\nthe other tests here don't use this style. please be consistent.",
			"disapproval": false,
			"date": "2013-02-27 21:32:47.810590",
			"approval": false
		},
		{
			"sender": "mdbrown@google.com",
			"recipients": [
				"mdbrown@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-27 21:08:04.538510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please call CanBackquote first and preserve the current `` quoting where\r\npossible.\r\n",
			"disapproval": false,
			"date": "2013-02-27 21:40:41.499520",
			"approval": false
		},
		{
			"sender": "mdbrown@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ, do you mean something like\r\n\r\n        if CanBackquote(e.Num) {\r\n                quoted = \"`\" + e.Num + \"`\"\r\n        } else {\r\n                quoted = Quote(e.Num)\r\n        }\r\n\r\n?\r\n\r\n\r\nOn Wed, Feb 27, 2013 at 1:40 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Please call CanBackquote first and preserve the current `` quoting where\r\n> possible.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-27 23:01:18.364600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, please. I think that will preserve the current string format except\r\nwhen there are backquotes or control characters.\r\n",
			"disapproval": false,
			"date": "2013-02-27 23:04:09.312020",
			"approval": false
		},
		{
			"sender": "mdbrown@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I may not be following correctly but I think it has somewhat the opposite\r\neffect. Simple strings can be back-quoted, yielding test failures from\r\nother packages like\r\n\r\n--- FAIL: TestNumberAccessors (0.00 seconds)\r\n        decode_test.go:515: Number(\"-1.23e1\").Int64() wanted error\r\n\"strconv.ParseInt: parsing \\\"-1.23e1\\\": invalid syntax\" but got:\r\nstrconv.ParseInt: parsing `-1.23e1`: invalid syntax\r\n        decode_test.go:515: Number(\"1e1000\").Int64() wanted error\r\n\"strconv.ParseInt: parsing \\\"1e1000\\\": invalid syntax\" but got:\r\nstrconv.ParseInt: parsing `1e1000`: invalid syntax\r\n        decode_test.go:520: Number(\"1e1000\").Float64() wanted error\r\n\"strconv.ParseFloat: parsing \\\"1e1000\\\": value out of range\" but got:\r\nstrconv.ParseFloat: parsing `1e1000`: value out of range\r\nFAIL\r\nFAIL    encoding/json   0.023s\r\n\r\n\r\nOn Wed, Feb 27, 2013 at 3:04 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Yes, please. I think that will preserve the current string format except\r\n> when there are backquotes or control characters.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-27 23:13:42.253160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My apologies for the wild goose chase. I misread this line:\r\n\r\n-       return \"strconv.\" + e.Func + \": \" + `parsing \"` + e.Num + `\": ` +\r\ne.Err.Error()\r\n",
			"disapproval": false,
			"date": "2013-02-28 03:18:17.121080",
			"approval": false
		},
		{
			"sender": "mdbrown@google.com",
			"recipients": [
				"mdbrown@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've changed back to using a single call to Quote.\n\nhttps://codereview.appspot.com/7393075/diff/1001/src/pkg/strconv/atoi_test.go\nFile src/pkg/strconv/atoi_test.go (right):\n\nhttps://codereview.appspot.com/7393075/diff/1001/src/pkg/strconv/atoi_test.go#newcode192\nsrc/pkg/strconv/atoi_test.go:192: for _, c := range []struct{ Num, Want string }{\nOn 2013/02/27 21:32:47, r wrote:\n> the other tests here don't use this style. please be consistent.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-28 16:55:01.516740",
			"approval": false
		},
		{
			"sender": "mdbrown@google.com",
			"recipients": [
				"mdbrown@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-28 16:55:24.982620",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mdbrown@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-28 18:00:53.707860",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mdbrown@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7e7041319c25 ***\n\nstrconv: use Quote to escape the input string for failed conversion errors\n\nThis reveals the presence of control and non-printable characters in the\nerrors returned by the Parse functions.  Also add unit tests for NumError.\n\nR=golang-dev, r, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7393075\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2013-02-28 18:08:07.838050",
			"approval": false
		}
	],
	"owner_email": "mdbrown@google.com",
	"private": false,
	"base_url": "",
	"owner": "mdbrown",
	"subject": "code review 7393075: strconv: Use Quote to escape the input string for faile...",
	"created": "2013-02-27 21:06:46.897190",
	"patchsets": [
		1,
		1001,
		12001
	],
	"modified": "2013-02-28 18:08:07.838050",
	"closed": false,
	"issue": 7393075
}