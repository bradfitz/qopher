{
	"description": "go/typechecker: 2nd step towards augmenting AST with full type information.\r\n\r\n- refine/define Scope, Object, and Type structures\r\n  (note: scope.go has the addition of types, the rest is only re-organized\r\n  for better readability)\r\n- implemented top-level of type checker:\r\n  resolve global type declarations (deal with double decls, cycles, etc.)\r\n- temporary hooks for checking of declarations, function/method bodies\r\n- test harness for fine-grained testing (exact error locations)\r\n  with initial set of tests\r\n\r\nThis is a subset of the code for easier review.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "accepted. these names are rarely used; i will make them clear in a\nsubsequent cl.\n- gri\n\nOn Thu, Aug 26, 2010 at 2:47 PM, Russ Cox <rsc@golang.org> wrote:\n\n> > Historical reasons. I always called the object's kind \"kind\", and the\n> > shape of a type its \"form\". At some point Kind was already used in the\n> > package; thus ObjKind. For symmetry I then went with TypeForm.\n> >\n> > 2nd Kind is gone. Changed to Kind and Form. I prefer this over ObjKind\n> > and TypeKind.\n>\n> I'm a little skeptical about this.  I'd have no idea what ast.Form meant\n> if I saw it in a program, whereas ast.TypeKind (or even ast.TypeForm)\n> is obvious.\n>\n",
			"disapproval": false,
			"date": "2010-08-26 21:50:07.547401",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1d7f27dbe79b ***\n\ngo/typechecker: 2nd step towards augmenting AST with full type information.\n\n- refine/define Scope, Object, and Type structures\n  (note: scope.go has the addition of types, the rest is only re-organized\n  for better readability)\n- implemented top-level of type checker:\n  resolve global type declarations (deal with double decls, cycles, etc.)\n- temporary hooks for checking of const/var declarations, function/method bodies\n- test harness for fine-grained testing (exact error locations)\n  with initial set of tests\n\nThis is a subset of the code for easier review.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/1967049\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2010-08-26 21:36:18.339724",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/1967049/diff/12001/13001\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13001#newcode444\nsrc/cmd/godoc/godoc.go:444: // quotescaper implements an io.Writer that escapes\nThere's more to creating a valid javascript string than escaping single quotes.\nThe comment should say more about the context in which this gets used,\nso that the reader can tell that it's correct in that limited context.\nAmong other things it is assuming that the caller is using single quotes\naround the output here, which makes it more of an aposescaper.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003\nFile src/pkg/go/ast/scope.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode5\nsrc/pkg/go/ast/scope.go:5: // This file implements scopes, the objects it contains,\ns/it contains/they contain/\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode36\nsrc/pkg/go/ast/scope.go:36: // Objects with _ name are never found (even though they\navoid passive\n\n// Lookup always returns nil if name is \"_\", even if the scope\n// contains objects with that name.\n\nalso:\n\n// Lookup does not consider outer scopes.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode52\nsrc/pkg/go/ast/scope.go:52: // If the scope does not contain an object with that name yet,\nsuggest mentioning _ here to shorten the comment.\n\n// ... name yet,\n// or if the object is named \"_\",\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode53\nsrc/pkg/go/ast/scope.go:53: // Insert inserts the object, and returns it. Otherwise, the\ns/,//\n\nOtherwise, Insert\nleaves the scope unchanged and returns ...\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode57\nsrc/pkg/go/ast/scope.go:57: // Objects with _ name can always be inserted (so that they\nthen can delete here\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode137\nsrc/pkg/go/ast/scope.go:137: // A Type is an internal and syntax-independent representation of a Go type.\nI'm not sure what you mean here.\n(If it's internal, why is it exported?)\nAnd what does syntax-independent mean?\nIt is the syntax, isn't it?\n\nCould dodge these with\n\n// A Type represents a Go type.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode139\nsrc/pkg/go/ast/scope.go:139: Form     TypeForm\ns/Form/Kind/ to match object?\nSeems odd to have a different word here.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode144\nsrc/pkg/go/ast/scope.go:144: Tuple    *Scope  // function (receiver, input and result) parameters, tuple expressions (results of function calls), or nil\nParam?\nThere are no tuples in Go at the moment\nand it would be good to avoid giving that impression.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13004\nFile src/pkg/go/typechecker/Makefile (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13004#newcode9\nsrc/pkg/go/typechecker/Makefile:9: typechecker.go\\\nsort\n\nhttp://codereview.appspot.com/1967049/diff/12001/13005\nFile src/pkg/go/typechecker/scope.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13005#newcode27\nsrc/pkg/go/typechecker/scope.go:27: // objPos computes the source position of an object name.\ns/of/of the declaration of/\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010\nFile src/pkg/go/typechecker/typechecker.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode27\nsrc/pkg/go/typechecker/typechecker.go:27: type Importer func(path string) []byte\nShould the Importer return ([]byte, os.Error)\nso that it can say why it failed?\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode181\nsrc/pkg/go/typechecker/typechecker.go:181: tc.Error(s.Pos(), \"explicit constant values expected\")\ni know the positon has the information\nbut it helps people without fancy editors\nto say what the name is too:\n\nmissing initializer for const X, Y\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode237\nsrc/pkg/go/typechecker/typechecker.go:237: tc.Errorf(name.Pos(), \"%s must be a locally declared type\", name.Name)\nthis error and the next should mention the word receiver\nand probably have a common structure, like: \n\ninvalid receiver: %s not declared\ninvalid receiver: %s is not a type\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode251\nsrc/pkg/go/typechecker/typechecker.go:251: scope = ast.NewScope(nil)\nDoes the scope have to be recorded somewhere?\nI see it gets used in declInScope but how does it get found\nwhen the typecheck of the method body happens?\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode261\nsrc/pkg/go/typechecker/typechecker.go:261: obj.Kind = ast.Bad\nThis will cause the \"invalid receiver: %s is not a type\" error\nfrom above to fire.  Maybe leave alone or disable that\nerror (and others) when Kind == Bad?\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode389\nsrc/pkg/go/typechecker/typechecker.go:389: if !ref {\nWhat if ref == true?  When does tc.resolve get run?\nI expected something like a queue of types to resolve later.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode428\nsrc/pkg/go/typechecker/typechecker.go:428: // (this may call resolve recursively)\nI think that's okay.  (The harder part is constant evaluation.)\n\nhttp://codereview.appspot.com/1967049/diff/12001/13012\nFile src/pkg/go/typechecker/universe.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13012#newcode15\nsrc/pkg/go/typechecker/universe.go:15: func def(obj *ast.Object) {\ninline at the one call site?",
			"disapproval": false,
			"date": "2010-08-26 18:37:00.845809",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-08-26 00:01:30.870743",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1967049/diff/12001/13001\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13001#newcode444\nsrc/cmd/godoc/godoc.go:444: // quotescaper implements an io.Writer that escapes\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> There's more to creating a valid javascript string than escaping single quotes.\n> The comment should say more about the context in which this gets used,\n> so that the reader can tell that it's correct in that limited context.\n> Among other things it is assuming that the caller is using single quotes\n> around the output here, which makes it more of an aposescaper.\n> \n\nRenamed and clarified comment.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003\nFile src/pkg/go/ast/scope.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode5\nsrc/pkg/go/ast/scope.go:5: // This file implements scopes, the objects it contains,\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> s/it contains/they contain/\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode36\nsrc/pkg/go/ast/scope.go:36: // Objects with _ name are never found (even though they\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> avoid passive\n> \n> // Lookup always returns nil if name is \"_\", even if the scope\n> // contains objects with that name.\n> \n> also:\n> \n> // Lookup does not consider outer scopes.\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode52\nsrc/pkg/go/ast/scope.go:52: // If the scope does not contain an object with that name yet,\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> suggest mentioning _ here to shorten the comment.\n> \n> // ... name yet,\n> // or if the object is named \"_\",\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode53\nsrc/pkg/go/ast/scope.go:53: // Insert inserts the object, and returns it. Otherwise, the\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> s/,//\n> \n> Otherwise, Insert\n> leaves the scope unchanged and returns ...\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode57\nsrc/pkg/go/ast/scope.go:57: // Objects with _ name can always be inserted (so that they\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> then can delete here\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode137\nsrc/pkg/go/ast/scope.go:137: // A Type is an internal and syntax-independent representation of a Go type.\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> I'm not sure what you mean here.\n> (If it's internal, why is it exported?)\n> And what does syntax-independent mean?\n> It is the syntax, isn't it?\n> \n> Could dodge these with\n> \n> // A Type represents a Go type.\n> \n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode139\nsrc/pkg/go/ast/scope.go:139: Form     TypeForm\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> s/Form/Kind/ to match object?\n> Seems odd to have a different word here.\n> \n\nHistorical reasons. I always called the object's kind \"kind\", and the shape of a type its \"form\". At some point Kind was already used in the package; thus ObjKind. For symmetry I then went with TypeForm.\n\n2nd Kind is gone. Changed to Kind and Form. I prefer this over ObjKind and TypeKind.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13003#newcode144\nsrc/pkg/go/ast/scope.go:144: Tuple    *Scope  // function (receiver, input and result) parameters, tuple expressions (results of function calls), or nil\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> Param?\n> There are no tuples in Go at the moment\n> and it would be good to avoid giving that impression.\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13004\nFile src/pkg/go/typechecker/Makefile (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13004#newcode9\nsrc/pkg/go/typechecker/Makefile:9: typechecker.go\\\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> sort\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13005\nFile src/pkg/go/typechecker/scope.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13005#newcode27\nsrc/pkg/go/typechecker/scope.go:27: // objPos computes the source position of an object name.\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> s/of/of the declaration of/\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010\nFile src/pkg/go/typechecker/typechecker.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode27\nsrc/pkg/go/typechecker/typechecker.go:27: type Importer func(path string) []byte\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> Should the Importer return ([]byte, os.Error)\n> so that it can say why it failed?\n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode181\nsrc/pkg/go/typechecker/typechecker.go:181: tc.Error(s.Pos(), \"explicit constant values expected\")\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> i know the positon has the information\n> but it helps people without fancy editors\n> to say what the name is too:\n> \n> missing initializer for const X, Y \n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode237\nsrc/pkg/go/typechecker/typechecker.go:237: tc.Errorf(name.Pos(), \"%s must be a locally declared type\", name.Name)\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> this error and the next should mention the word receiver\n> and probably have a common structure, like: \n> \n> invalid receiver: %s not declared\n> invalid receiver: %s is not a type\n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode251\nsrc/pkg/go/typechecker/typechecker.go:251: scope = ast.NewScope(nil)\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> Does the scope have to be recorded somewhere?\n> I see it gets used in declInScope but how does it get found\n> when the typecheck of the method body happens?\n> \n\nThis is an error case, so the receiver simply doesn't exist in the method body in this case. But perhaps this can be handled better. Added a TODO.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode261\nsrc/pkg/go/typechecker/typechecker.go:261: obj.Kind = ast.Bad\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> This will cause the \"invalid receiver: %s is not a type\" error\n> from above to fire.  Maybe leave alone or disable that\n> error (and others) when Kind == Bad?\n> \n\nYes. But it also helps avoiding reported repeated cycle errors. The idea of bad objects and types is that they shouldn't cause subsequent errors. I have not done this consistently. Added TODO.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode389\nsrc/pkg/go/typechecker/typechecker.go:389: if !ref {\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> What if ref == true?  When does tc.resolve get run?\n> I expected something like a queue of types to resolve later.\n> \n\nresolve is run for all unresolved global objects in the loop of phase 3. it doesn't matter if they are ignored here.\n\nhttp://codereview.appspot.com/1967049/diff/12001/13010#newcode428\nsrc/pkg/go/typechecker/typechecker.go:428: // (this may call resolve recursively)\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> I think that's okay.  (The harder part is constant evaluation.)\n> \nyes - just a reminder for me\n\nhttp://codereview.appspot.com/1967049/diff/12001/13012\nFile src/pkg/go/typechecker/universe.go (right):\n\nhttp://codereview.appspot.com/1967049/diff/12001/13012#newcode15\nsrc/pkg/go/typechecker/universe.go:15: func def(obj *ast.Object) {\nOn 2010/08/26 18:37:01, rsc1 wrote:\n> inline at the one call site?\n> \n\nThere are missing predefined objects which are likely to use this function. Will inline if there's only one use once this is finished.",
			"disapproval": false,
			"date": "2010-08-26 21:30:07.888016",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Historical reasons. I always called the object's kind \"kind\", and the\n> shape of a type its \"form\". At some point Kind was already used in the\n> package; thus ObjKind. For symmetry I then went with TypeForm.\n>\n> 2nd Kind is gone. Changed to Kind and Form. I prefer this over ObjKind\n> and TypeKind.\n\nI'm a little skeptical about this.  I'd have no idea what ast.Form meant\nif I saw it in a program, whereas ast.TypeKind (or even ast.TypeForm)\nis obvious.\n",
			"disapproval": false,
			"date": "2010-08-26 21:47:42.729085",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 1967049: go/typechecker: 2nd step towards augmenting AST with fu...",
	"created": "2010-08-25 23:50:50.960045",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		12001,
		12002
	],
	"modified": "2012-11-08 18:48:19.161150",
	"closed": true,
	"issue": 1967049
}