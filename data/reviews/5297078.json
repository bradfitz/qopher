{
	"description": "time: faster Nanoseconds call\n\nruntime knows how to get the time of day\nwithout allocating memory.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"dave@cheney.net",
		"hectorchu@gmail.com",
		"r@golang.org",
		"cw@f00f.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-02 21:33:06.202864",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This is a great improvement. It will remove one allocation in the fast\npath on net.Conn.Read/Write. Why is it necessary to FLUSH() the return\nvalue, can runtime.nanotime cause a scheduling event ?\n\nOn Thu, Nov 3, 2011 at 8:37 AM, David Symonds <dsymonds@golang.org> wrote:\n> LGTM\n>\n> Seems odd to put the C code for pkg time in the runtime dir, though.\n>\n",
			"disapproval": false,
			"date": "2011-11-02 21:46:26.869208",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nSeems odd to put the C code for pkg time in the runtime dir, though.\n",
			"disapproval": false,
			"date": "2011-11-02 21:37:57.525145",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5297078/diff/1001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttp://codereview.appspot.com/5297078/diff/1001/src/pkg/runtime/runtime.c#newcode670\nsrc/pkg/runtime/runtime.c:670: time\u00b7Nanoseconds(int64 ret)\ni'd be happier if this were in a different .c file, called time.c",
			"disapproval": false,
			"date": "2011-11-02 22:50:47.508535",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Hector, PTAL at the Windows changes.\n\nNow calling GetSystemTimeAsFileTime.\nThere's a name I haven't heard in a decade.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-03 19:33:02.526696",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 2, 2011 at 17:46, Dave Cheney <dave@cheney.net> wrote:\n> This is a great improvement. It will remove one allocation in the fast\n> path on net.Conn.Read/Write. Why is it necessary to FLUSH() the return\n> value, can runtime.nanotime cause a scheduling event ?\n\nFLUSH tricks the C compiler into writing the value\nto the slot on the stack where Go expects to find\nthe return value.\n",
			"disapproval": false,
			"date": "2011-11-02 21:49:24.191823",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for explanation, I was thinking that FLUSH caused a memory fence.\n\nOn Thu, Nov 3, 2011 at 8:49 AM, Russ Cox <rsc@golang.org> wrote:\n> On Wed, Nov 2, 2011 at 17:46, Dave Cheney <dave@cheney.net> wrote:\n>> This is a great improvement. It will remove one allocation in the fast\n>> path on net.Conn.Read/Write. Why is it necessary to FLUSH() the return\n>> value, can runtime.nanotime cause a scheduling event ?\n>\n> FLUSH tricks the C compiler into writing the value\n> to the slot on the stack where Go expects to find\n> the return value.\n>\n",
			"disapproval": false,
			"date": "2011-11-02 21:51:53.343634",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This won't work on Windows because gettime doesn't actually return the current time - it's only good for getting time deltas.",
			"disapproval": false,
			"date": "2011-11-02 22:48:26.610950",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"r@golang.org",
				"cw@f00f.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5297078/diff/5/src/pkg/runtime/plan9/386/signal.c\nFile src/pkg/runtime/plan9/386/signal.c (right):\n\nhttp://codereview.appspot.com/5297078/diff/5/src/pkg/runtime/plan9/386/signal.c#newcode10\nsrc/pkg/runtime/plan9/386/signal.c:10: return 0;\n// TODO?\n\nhttp://codereview.appspot.com/5297078/diff/5/src/pkg/runtime/windows/thread.c\nFile src/pkg/runtime/windows/thread.c (right):\n\nhttp://codereview.appspot.com/5297078/diff/5/src/pkg/runtime/windows/thread.c#newcode203\nsrc/pkg/runtime/windows/thread.c:203: return 0;\n// TODO?\n\nhttp://codereview.appspot.com/5297078/diff/5/src/pkg/time/sys.go\nFile src/pkg/time/sys.go (right):\n\nhttp://codereview.appspot.com/5297078/diff/5/src/pkg/time/sys.go#newcode13\nsrc/pkg/time/sys.go:13: // Nanoseconds is implemented by runtime\ns/runtime/package runtime./",
			"disapproval": false,
			"date": "2011-11-03 17:35:02.779734",
			"approval": true
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "GetSystemTimeAsFileTime is what currently provides the time to time.Nanoseconds.  The FileTime is then converted with func (ft *Filetime) Nanoseconds() int64 in syscall/ztypes_windows.go.",
			"disapproval": false,
			"date": "2011-11-03 16:56:13.511735",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nI moved the time stuff into time.goc, which is the\ncanonical way to provide some stuff for another package\nfrom runtime.\n\nI also dropped gettime and converted the assembly for\nDarwin, FreeBSD, Linux, and OpenBSD to be nanotime.\n\nI hope someone will tell me what Windows should look like.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-03 16:08:57.750694",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5297078/diff/5/src/pkg/runtime/windows/thread.c\nFile src/pkg/runtime/windows/thread.c (left):\n\nhttp://codereview.appspot.com/5297078/diff/5/src/pkg/runtime/windows/thread.c#oldcode205\nsrc/pkg/runtime/windows/thread.c:205: runtime\u00b7stdcall(runtime\u00b7QueryPerformanceCounter, 1, &count);\nReferences to QueryPerformanceCounter and QueryPerformanceFrequency should be removed from the top of this file.",
			"disapproval": false,
			"date": "2011-11-03 16:58:59.597792",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"r@golang.org",
				"cw@f00f.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Windows changes LGTM.",
			"disapproval": false,
			"date": "2011-11-03 20:14:08.130482",
			"approval": true
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"r@golang.org",
				"cw@f00f.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Before: 151 ns/call\nAfter: 44ns/call\n\nLGTM!",
			"disapproval": false,
			"date": "2011-11-03 17:06:44.343196",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"hectorchu@gmail.com",
				"r@golang.org",
				"cw@f00f.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c8c9ccd19020 ***\n\ntime: faster Nanoseconds call\n\nruntime knows how to get the time of day\nwithout allocating memory.\n\nR=golang-dev, dsymonds, dave, hectorchu, r, cw\nCC=golang-dev\nhttp://codereview.appspot.com/5297078",
			"disapproval": false,
			"date": "2011-11-03 21:35:32.467073",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5297078: time: faster Nanoseconds call",
	"created": "2011-11-02 21:29:24.038738",
	"patchsets": [
		1,
		1001,
		5,
		13001,
		17001
	],
	"modified": "2011-11-03 21:35:34.355859",
	"closed": true,
	"issue": 5297078
}