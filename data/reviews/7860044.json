{
	"description": "go.exp/locale/cldr: wrote tool for generating CLDR XML code.\nThis CL also contains the generated XML and two files with\nsupporting types:\n- base.go includes types common to many elements. The Common\n  type is used in the XML to avoid repetition of common elements\n  and attributes.\n- collate.go: some supportive types for collation. Most notably,\n  collation rules are recursive and need to be dealt with slightly\n  differently from all other elements.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp/",
			"disapproval": false,
			"date": "2013-03-15 21:04:52.142260",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go\nFile locale/cldr/base.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go#newcode5\nlocale/cldr/base.go:5: package cldr\npackage comment?\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go#newcode37\nlocale/cldr/base.go:37: // of a XML element.\ns/a/an/\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go#newcode81\nlocale/cldr/base.go:81: return e.enclosing_\ni don't like the trailing _ in go code. is there another way? if nothing else comes to mind, i'd use a leading _.\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go\nFile locale/cldr/collate.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go#newcode53\nlocale/cldr/collate.go:53: var tagRe = regexp.MustCompile(`<([a-z_]*)  */>`)\nis there no space permitted after '<'? and no upper case?\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go#newcode90\nlocale/cldr/collate.go:90: func (c Collation) Process(p RuleProcessor) error {\nwhere is Collation defined?\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go#newcode104\nlocale/cldr/collate.go:104: return fmt.Errorf(\"unknown level %q\", r.Before)\ncldr: unknown level\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/makexml.go\nFile locale/cldr/makexml.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/makexml.go#newcode10\nlocale/cldr/makexml.go:10: package main\nattach the comment to the package clause and godoc will show it.\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/makexml.go#newcode287\nlocale/cldr/makexml.go:287: fmt.Printf(f, x...)\nit may not matter, but if you used bufio it would certainly write faster.",
			"disapproval": false,
			"date": "2013-03-15 22:46:53.721440",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go\nFile locale/cldr/base.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go#newcode5\nlocale/cldr/base.go:5: package cldr\nThe package comments were in cldr.go, which is not included in this CL, but I copied them now (for now).\n\nOn 2013/03/15 22:46:53, r wrote:\n> package comment?\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go#newcode37\nlocale/cldr/base.go:37: // of a XML element.\nOn 2013/03/15 22:46:53, r wrote:\n> s/a/an/\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/base.go#newcode81\nlocale/cldr/base.go:81: return e.enclosing_\nreplaced with enclElem\n\nOn 2013/03/15 22:46:53, r wrote:\n> i don't like the trailing _ in go code. is there another way? if nothing else\n> comes to mind, i'd use a leading _.\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go\nFile locale/cldr/collate.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go#newcode53\nlocale/cldr/collate.go:53: var tagRe = regexp.MustCompile(`<([a-z_]*)  */>`)\nSpace does not occur, but is technically permitted, so I allowed for it.  The tags are case-sensitive and lower-case only, so no need to included upper case.\n\nOn 2013/03/15 22:46:53, r wrote:\n> is there no space permitted after '<'? and no upper case?\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go#newcode90\nlocale/cldr/collate.go:90: func (c Collation) Process(p RuleProcessor) error {\nCollation is one of the generated types in xml.go.  makexml.go defines a bunch of types that need to be included at top level and Collation is one of them.\n\nOn 2013/03/15 22:46:53, r wrote:\n> where is Collation defined?\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/collate.go#newcode104\nlocale/cldr/collate.go:104: return fmt.Errorf(\"unknown level %q\", r.Before)\nOn 2013/03/15 22:46:53, r wrote:\n> cldr: unknown level\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/makexml.go\nFile locale/cldr/makexml.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/makexml.go#newcode10\nlocale/cldr/makexml.go:10: package main\nOn 2013/03/15 22:46:53, r wrote:\n> attach the comment to the package clause and godoc will show it.\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/2001/locale/cldr/makexml.go#newcode287\nlocale/cldr/makexml.go:287: fmt.Printf(f, x...)\nGeneration is pretty much instant (using a local zip file), so no need for that I think.\n\nOn 2013/03/15 22:46:53, r wrote:\n> it may not matter, but if you used bufio it would certainly write faster.",
			"disapproval": false,
			"date": "2013-03-19 12:49:28.893120",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go\nFile locale/cldr/makexml.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode8\nlocale/cldr/makexml.go:8: // This tool is currently optimized for CLDR version 22.\ns/currently //\n(\"is\" means \"currently\")\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode123\nlocale/cldr/makexml.go:123: resolved bool\ncomment these fields please - there's a fair bit going on\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode159\nlocale/cldr/makexml.go:159: func (b *builder) parseDTD(r io.Reader) {\nthis one is easy, but many of these functions could use a 'doc' comment even though godoc won't show them. rather than decide which deserve them, comment them all at least a little.\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode173\nlocale/cldr/makexml.go:173: el, ok := b.index[ename]\nbecause 'ok' is used far from here, give it a better name; i suggest 'present' or maybe 'alreadyPresent' - consider how it reads where it's used.\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode385\nlocale/cldr/makexml.go:385: flag.Parse()\ncan you put main at the top? this isn't C so it doesn't need to be at the bottom, and at the top it acts as a kind of intro to the file.",
			"disapproval": false,
			"date": "2013-03-19 18:02:26.783000",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go\nFile locale/cldr/makexml.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode8\nlocale/cldr/makexml.go:8: // This tool is currently optimized for CLDR version 22.\nOn 2013/03/19 18:02:26, r wrote:\n> s/currently //\n> (\"is\" means \"currently\")\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode123\nlocale/cldr/makexml.go:123: resolved bool\nOn 2013/03/19 18:02:26, r wrote:\n> comment these fields please - there's a fair bit going on\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode159\nlocale/cldr/makexml.go:159: func (b *builder) parseDTD(r io.Reader) {\nOn 2013/03/19 18:02:26, r wrote:\n> this one is easy, but many of these functions could use a 'doc' comment even\n> though godoc won't show them. rather than decide which deserve them, comment\n> them all at least a little.\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode159\nlocale/cldr/makexml.go:159: func (b *builder) parseDTD(r io.Reader) {\nOn 2013/03/19 18:02:26, r wrote:\n> this one is easy, but many of these functions could use a 'doc' comment even\n> though godoc won't show them. rather than decide which deserve them, comment\n> them all at least a little.\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode173\nlocale/cldr/makexml.go:173: el, ok := b.index[ename]\nOn 2013/03/19 18:02:26, r wrote:\n> because 'ok' is used far from here, give it a better name; i suggest 'present'\n> or maybe 'alreadyPresent' - consider how it reads where it's used.\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/11001/locale/cldr/makexml.go#newcode385\nlocale/cldr/makexml.go:385: flag.Parse()\nOn 2013/03/19 18:02:26, r wrote:\n> can you put main at the top? this isn't C so it doesn't need to be at the\n> bottom, and at the top it acts as a kind of intro to the file.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-20 13:37:41.030570",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/base.go\nFile locale/cldr/base.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/base.go#newcode101\nlocale/cldr/base.go:101: // replaceUnicode convert hexadecimal Unicode codepoint notation to a rune.\ns/one-rune string/\n\nalso add:\n// It assumes the input string is correctly formatted.\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/collate.go\nFile locale/cldr/collate.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/collate.go#newcode22\nlocale/cldr/collate.go:22: // cldrIndex is a Unicode-reserved sentinel value used.\nused...?\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/collate.go#newcode66\nlocale/cldr/collate.go:66: switch l := name; l {\ni don't understand the need for the local variable l",
			"disapproval": false,
			"date": "2013-03-21 19:08:24.513800",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7860044/diff/16001/locale/cldr/base.go\nFile locale/cldr/base.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/base.go#newcode101\nlocale/cldr/base.go:101: // replaceUnicode convert hexadecimal Unicode codepoint notation to a rune.\nOn 2013/03/21 19:08:24, r wrote:\n> s/one-rune string/\n> \n> also add:\n> // It assumes the input string is correctly formatted.\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/collate.go\nFile locale/cldr/collate.go (right):\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/collate.go#newcode22\nlocale/cldr/collate.go:22: // cldrIndex is a Unicode-reserved sentinel value used.\nOn 2013/03/21 19:08:24, r wrote:\n> used...?\n\nDone.\n\nhttps://codereview.appspot.com/7860044/diff/16001/locale/cldr/collate.go#newcode66\nlocale/cldr/collate.go:66: switch l := name; l {\n\"legacy\", removed.\n\nOn 2013/03/21 19:08:24, r wrote:\n> i don't understand the need for the local variable l",
			"disapproval": false,
			"date": "2013-03-24 10:51:20.714130",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5d3dd3a7f904&repo=exp ***\n\ngo.exp/locale/cldr: wrote tool for generating CLDR XML code.\nThis CL also contains the generated XML and two files with\nsupporting types:\n- base.go includes types common to many elements. The Common\n  type is used in the XML to avoid repetition of common elements\n  and attributes.\n- collate.go: some supportive types for collation. Most notably,\n  collation rules are recursive and need to be dealt with slightly\n  differently from all other elements.\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/7860044",
			"disapproval": false,
			"date": "2013-03-25 19:10:20.114030",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 7860044: go.exp/locale/cldr: wrote tool for generating CLDR XML code.",
	"created": "2013-03-15 21:04:21.171870",
	"patchsets": [
		1,
		2001,
		11001,
		16001,
		24001,
		27001,
		30001,
		29005,
		34001,
		3005,
		40001,
		43001
	],
	"modified": "2013-03-25 19:10:21.815460",
	"closed": true,
	"issue": 7860044
}