{
	"description": "math: faster Gamma\n\nHaving the compiler count the number of array elements speeds up Gamma from 63.7 to 56.6 ns/op.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Very low priority, but if you are bored and looking\nfor something to do, I'd be interested to know if\nrewriting\n\nvar _P = [...]float64{\n    x,\n    y,\n    z,\n}\n\nto\n\nconst (\n    _P0 = x\n    _P1 = y\n    _P2 = z\n)\n\nand then replacing _P[j] with _Pj has any effect on runtime speed.\nIt may not, especially on the 386 where the constants have to\ncome out of memory one way or the other.  But it may on the\namd64, where I think the SSE instructions allow putting floating-point\nconstants directly into the instruction stream.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-07 16:52:47.465235",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-11-05 19:01:21.122260",
			"approval": true
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I'll do the tests, for both 386 and amd64, and report back. The\nspeedup for Lgamma was due to changing from constants to a fixed\narray; timing was for amd64.\n\n-- Charlie\n\nOn Mon, Nov 7, 2011 at 11:52 AM, Russ Cox <rsc@golang.org> wrote:\n> Very low priority, but if you are bored and looking\n> for something to do, I'd be interested to know if\n> rewriting\n>\n> var _P = [...]float64{\n> \u00a0 \u00a0x,\n> \u00a0 \u00a0y,\n> \u00a0 \u00a0z,\n> }\n>\n> to\n>\n> const (\n> \u00a0 \u00a0_P0 = x\n> \u00a0 \u00a0_P1 = y\n> \u00a0 \u00a0_P2 = z\n> )\n>\n> and then replacing _P[j] with _Pj has any effect on runtime speed.\n> It may not, especially on the 386 where the constants have to\n> come out of memory one way or the other. \u00a0But it may on the\n> amd64, where I think the SSE instructions allow putting floating-point\n> constants directly into the instruction stream.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-07 18:11:23.477986",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-05 17:02:32.476213",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=29ce507f2769 ***\n\nmath: faster Gamma\n\nHaving the compiler count the number of array elements speeds up Gamma from 63.7 to 56.6 ns/op.\n\nR=rsc, golang-dev, r\nCC=golang-dev\nhttp://codereview.appspot.com/5362043\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2011-11-05 19:25:49.818104",
			"approval": false
		}
	],
	"owner_email": "cldorian@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Charlie Dorian",
	"subject": "code review 5362043: math: faster Gamma",
	"created": "2011-11-05 17:02:02.580272",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2011-11-06 03:19:16.243405",
	"closed": true,
	"issue": 5362043
}