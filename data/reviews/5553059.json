{
	"description": "cmd/go: implement go get + bug fixes\n\nMove error information into Package struct, so that\na package can be returned even if a dependency failed\nto load or did not exist.  This makes it possible to run\n'go fix' or 'go fmt' on packages with broken dependencies\nor missing imports.  It also enables go get -fix.\nThe new go list -e flag lets go list process those package\nerrors as normal data.\n\nChange p.Doc to be first sentence of package doc, not\nentire package doc.  Makes go list -json or\ngo list -f '{{.ImportPath}} {{.Doc}}' much more reasonable.\n\nThe go tool now depends on http, which means also\nnet and crypto/tls, both of which use cgo.  Trying to\nmake the build scripts that build the go tool understand\nand handle cgo is too much work.  Instead, we build\na stripped down version of the go tool, compiled as go_bootstrap,\nthat substitutes an error stub for the usual HTTP code.\nThe buildscript builds go_bootstrap, go_bootstrap builds\nthe standard packages and commands, including the full\nincluding-HTTP-support go tool, and then go_bootstrap\ngets deleted.\n\nAlso handle the case where the buildscript needs updating\nduring all.bash: if it fails but a go command can be found on\nthe current $PATH, try to regenerate it.  This gracefully\nhandles situations like adding a new file to a package\nused by the go tool.",
	"cc": [
		"r@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"christoph@tux21b.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i didn't look at vcs or get\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/list.go\nFile src/cmd/go/list.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/list.go#newcode52\nsrc/cmd/go/list.go:52: Incomplete bool            // this package or its dependencies have errors\n'or' is singular. s/have/has/\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go\nFile src/cmd/go/pkg.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode83\nsrc/cmd/go/pkg.go:83: // shorterThan returns true if s is shorter than t.\ns/s/sp/\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode91\nsrc/cmd/go/pkg.go:91: // If they are the same length, settle ties by using string ordering.\ns/by //\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode221\nsrc/cmd/go/pkg.go:221: return string(b)\nvar i int\nfor i = 0; i < len(text); i++ {\n  if text[i] == '.' && (i == len(text)-1) || isSpaceByte(text[i+1]) {\n    return text[:i+1]\n  }\n}\nreturn text\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode384\nsrc/cmd/go/pkg.go:384: // cannot be loaded at all (the directory does not exist, etc),\ns/etc/etc./ or, better, /e.g./ or even better /for example/\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode386\nsrc/cmd/go/pkg.go:386: // package in the results.  However, if errors occur trying\ndo you care about two spaces?\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/make.bash\nFile src/make.bash (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/make.bash#newcode98\nsrc/make.bash:98: if !which go >/dev/null 2>&1; then\ncan you depend on 'which' being there? if it is, can you use which -s?\nanother solution would be to have the go command take a --bootstrap command to test its presence this way.\n\nbut really why not test -x \"$GOBIN/go\"?",
			"disapproval": false,
			"date": "2012-01-21 22:40:50.776355",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-01-21 06:13:01.198205",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLooking forward to the tests.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/get.go\nFile src/cmd/go/get.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/get.go#newcode26\nsrc/cmd/go/get.go:26: The -a, -n, -v, -x, and -p flags have the same meaning as in 'go build'\nPlease document -fix.",
			"disapproval": false,
			"date": "2012-01-23 02:26:42.828260",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM or rather LGEFN (looks good enough for now)\n\nhttp://codereview.appspot.com/5553059/diff/13001/src/cmd/go/pkg.go\nFile src/cmd/go/pkg.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/13001/src/cmd/go/pkg.go#newcode225\nsrc/cmd/go/pkg.go:225: }\nthis can stay, but for the record:\n1) i hate state machines implemented as loops. they're hard to understand and debug\n2) we have a strings library\n3) there are no tests for this tricky code\n4) there are no tests for any of this code\n\ni realize the urgency for progress, though",
			"disapproval": false,
			"date": "2012-01-23 18:34:29.124024",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5553059/diff/7033/src/cmd/go/get.go\nFile src/cmd/go/get.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/get.go#newcode26\nsrc/cmd/go/get.go:26: The -a, -n, -v, -x, and -p flags have the same meaning as in 'go build'\nOn 2012/01/23 02:26:43, adg wrote:\n> Please document -fix.\n\nDone.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/list.go\nFile src/cmd/go/list.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/list.go#newcode52\nsrc/cmd/go/list.go:52: Incomplete bool            // this package or its dependencies have errors\nOn 2012/01/21 22:40:50, r wrote:\n> 'or' is singular. s/have/has/\n\nDone.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go\nFile src/cmd/go/pkg.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode83\nsrc/cmd/go/pkg.go:83: // shorterThan returns true if s is shorter than t.\nOn 2012/01/21 22:40:50, r wrote:\n> s/s/sp/\n\nDone.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode91\nsrc/cmd/go/pkg.go:91: // If they are the same length, settle ties by using string ordering.\nOn 2012/01/21 22:40:50, r wrote:\n> s/by //\n\nDone.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode221\nsrc/cmd/go/pkg.go:221: return string(b)\nThe existing code is handling things like rewriting \\n and \\t \nto space and cutting runs of spaces into single spaces, just\nas godoc would.  I added that info to the comment.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode384\nsrc/cmd/go/pkg.go:384: // cannot be loaded at all (the directory does not exist, etc),\nOn 2012/01/21 22:40:50, r wrote:\n> s/etc/etc./ or, better, /e.g./ or even better /for example/\n\nDone.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/cmd/go/pkg.go#newcode386\nsrc/cmd/go/pkg.go:386: // package in the results.  However, if errors occur trying\nOn 2012/01/21 22:40:50, r wrote:\n> do you care about two spaces?\n\nnot really, no.  especially now that godoc fixes it.\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/make.bash\nFile src/make.bash (right):\n\nhttp://codereview.appspot.com/5553059/diff/7033/src/make.bash#newcode98\nsrc/make.bash:98: if !which go >/dev/null 2>&1; then\nOn 2012/01/21 22:40:50, r wrote:\n> can you depend on 'which' being there? if it is, can you use which -s?\n> another solution would be to have the go command take a --bootstrap command to\n> test its presence this way.\n> \n> but really why not test -x \"$GOBIN/go\"?\n\nDone.",
			"disapproval": false,
			"date": "2012-01-23 17:32:14.790708",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-23 17:31:58.753859",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=718dab80dcda ***\n\ncmd/go: implement go get + bug fixes\n\nMove error information into Package struct, so that\na package can be returned even if a dependency failed\nto load or did not exist.  This makes it possible to run\n'go fix' or 'go fmt' on packages with broken dependencies\nor missing imports.  It also enables go get -fix.\nThe new go list -e flag lets go list process those package\nerrors as normal data.\n\nChange p.Doc to be first sentence of package doc, not\nentire package doc.  Makes go list -json or\ngo list -f '{{.ImportPath}} {{.Doc}}' much more reasonable.\n\nThe go tool now depends on http, which means also\nnet and crypto/tls, both of which use cgo.  Trying to\nmake the build scripts that build the go tool understand\nand handle cgo is too much work.  Instead, we build\na stripped down version of the go tool, compiled as go_bootstrap,\nthat substitutes an error stub for the usual HTTP code.\nThe buildscript builds go_bootstrap, go_bootstrap builds\nthe standard packages and commands, including the full\nincluding-HTTP-support go tool, and then go_bootstrap\ngets deleted.\n\nAlso handle the case where the buildscript needs updating\nduring all.bash: if it fails but a go command can be found on\nthe current $PATH, try to regenerate it.  This gracefully\nhandles situations like adding a new file to a package\nused by the go tool.\n\nR=r, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5553059",
			"disapproval": false,
			"date": "2012-01-23 20:16:54.274704",
			"approval": false
		},
		{
			"sender": "christoph@tux21b.org",
			"recipients": [
				"rsc@golang.org",
				"christoph@tux21b.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5553059/diff/11002/src/cmd/go/vcs.go\nFile src/cmd/go/vcs.go (right):\n\nhttp://codereview.appspot.com/5553059/diff/11002/src/cmd/go/vcs.go#newcode290\nsrc/cmd/go/vcs.go:290: check:  noVCSSuffix,\nI think there is a vcs: \"git\" entry missing. At least I am unable to fetch any github repos at the moment.",
			"disapproval": false,
			"date": "2012-01-23 20:47:03.589196",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5553059: cmd/go: implement go get + bug fixes",
	"created": "2012-01-19 06:20:33.303320",
	"patchsets": [
		1,
		2001,
		2002,
		5001,
		4017,
		1027,
		7033,
		13001,
		11002
	],
	"modified": "2012-01-23 20:47:04.050039",
	"closed": true,
	"issue": 5553059
}