{
	"description": "math/big: correctly test for positive inputs in Int.GCD\n\nAlso: better GCD tests.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-13 20:28:39.915273",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hold on - there's more bugs in the GCD code\n- gri\n\nOn Wed, Jun 13, 2012 at 11:52 AM,  <gri@golang.org> wrote:\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> math/big: better GCD tests\n>\n> Please review this at http://codereview.appspot.com/6295076/\n>\n> Affected files:\n> \u00a0M src/pkg/math/big/int_test.go\n>\n>\n> Index: src/pkg/math/big/int_test.go\n> ===================================================================\n> --- a/src/pkg/math/big/int_test.go\n> +++ b/src/pkg/math/big/int_test.go\n> @@ -818,14 +818,12 @@\n> \u00a0}\n>\n> \u00a0func checkGcd(aBytes, bBytes []byte) bool {\n> + \u00a0 \u00a0 \u00a0 x := new(Int)\n> + \u00a0 \u00a0 \u00a0 y := new(Int)\n> \u00a0 \u00a0 \u00a0 \u00a0a := new(Int).SetBytes(aBytes)\n> \u00a0 \u00a0 \u00a0 \u00a0b := new(Int).SetBytes(bBytes)\n>\n> - \u00a0 \u00a0 \u00a0 x := new(Int)\n> - \u00a0 \u00a0 \u00a0 y := new(Int)\n> - \u00a0 \u00a0 \u00a0 d := new(Int)\n> -\n> - \u00a0 \u00a0 \u00a0 d.GCD(x, y, a, b)\n> + \u00a0 \u00a0 \u00a0 d := new(Int).GCD(x, y, a, b)\n> \u00a0 \u00a0 \u00a0 \u00a0x.Mul(x, a)\n> \u00a0 \u00a0 \u00a0 \u00a0y.Mul(y, b)\n> \u00a0 \u00a0 \u00a0 \u00a0x.Add(x, y)\n> @@ -834,39 +832,73 @@\n> \u00a0}\n>\n> \u00a0var gcdTests = []struct {\n> - \u00a0 \u00a0 \u00a0 a, b \u00a0 \u00a0int64\n> - \u00a0 \u00a0 \u00a0 d, x, y int64\n> + \u00a0 \u00a0 \u00a0 d, x, y, a, b string\n> \u00a0}{\n> - \u00a0 \u00a0 \u00a0 {120, 23, 1, -9, 47},\n> + \u00a0 \u00a0 \u00a0 // a < 0 || b < 0\n> + \u00a0 \u00a0 \u00a0 {\"0\", \"\", \"\", \"-77\", \"35\"},\n> + \u00a0 \u00a0 \u00a0 {\"0\", \"\", \"\", \"64515\", \"-24310\"},\n> + \u00a0 \u00a0 \u00a0 {\"0\", \"\", \"\", \"-64515\", \"-24310\"},\n> + \u00a0 \u00a0 \u00a0 {\"0\", \"\", \"0\", \"-77\", \"35\"},\n> + \u00a0 \u00a0 \u00a0 {\"0\", \"0\", \"\", \"64515\", \"-24310\"},\n> + \u00a0 \u00a0 \u00a0 {\"0\", \"0\", \"0\", \"-64515\", \"-24310\"},\n> +\n> + \u00a0 \u00a0 \u00a0 // x == nil && y == nil\n> + \u00a0 \u00a0 \u00a0 {\"7\", \"\", \"\", \"77\", \"35\"},\n> + \u00a0 \u00a0 \u00a0 {\"935\", \"\", \"\", \"64515\", \"24310\"},\n> + \u00a0 \u00a0 \u00a0 {\"935000000000000000\", \"\", \"\", \"64515000000000000000\",\n> \"24310000000000000000\"},\n> + \u00a0 \u00a0 \u00a0 {\"1\", \"\", \"\",\n> \"98920366548084643601728869055592650835572950932266967461790948584315647051443\",\n> \"991\"},\n> +\n> + \u00a0 \u00a0 \u00a0 // x == nil || y == nil\n> + \u00a0 \u00a0 \u00a0 {\"1\", \"\", \"47\", \"120\", \"23\"},\n> + \u00a0 \u00a0 \u00a0 {\"1\", \"-9\", \"\", \"120\", \"23\"},\n> +\n> + \u00a0 \u00a0 \u00a0 // x != nil && y != nil\n> + \u00a0 \u00a0 \u00a0 {\"1\", \"-9\", \"47\", \"120\", \"23\"},\n> + \u00a0 \u00a0 \u00a0 {\"7\", \"1\", \"-2\", \"77\", \"35\"},\n> + \u00a0 \u00a0 \u00a0 {\"935\", \"-3\", \"8\", \"64515\", \"24310\"},\n> + \u00a0 \u00a0 \u00a0 {\"935000000000000000\", \"-3\", \"8\", \"64515000000000000000\",\n> \"24310000000000000000\"},\n> +\n> + \u00a0 \u00a0 \u00a0 // test early exit (after one Euclidean iteration) in binaryGCD\n> + \u00a0 \u00a0 \u00a0 {\"1\", \"\", \"\", \"1\",\n> \"98920366548084643601728869055592650835572950932266967461790948584315647051443\"},\n> \u00a0}\n>\n> \u00a0func TestGcd(t *testing.T) {\n> - \u00a0 \u00a0 \u00a0 for i, test := range gcdTests {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a := NewInt(test.a)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b := NewInt(test.b)\n> + \u00a0 \u00a0 \u00a0 for _, test := range gcdTests {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d, _ := new(Int).SetString(test.d, 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x, _ := new(Int).SetString(test.x, 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 y, _ := new(Int).SetString(test.y, 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a, _ := new(Int).SetString(test.a, 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b, _ := new(Int).SetString(test.b, 0)\n>\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x := new(Int)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 y := new(Int)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d := new(Int)\n> -\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 expectedX := NewInt(test.x)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 expectedY := NewInt(test.y)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 expectedD := NewInt(test.d)\n> -\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d.GCD(x, y, a, b)\n> -\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if expectedX.Cmp(x) != 0 ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 expectedY.Cmp(y) != 0 ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 expectedD.Cmp(d) != 0 {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"#%d got (%s %s %s) want (%s %s %s)\", i, x,\n> y, d, expectedX, expectedY, expectedD)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var X *Int\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if x != nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 X = new(Int)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var Y *Int\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if y != nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Y = new(Int)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d.binaryGCD(a, b)\n> -\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if expectedD.Cmp(d) != 0 {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"#%d got (%s) want (%s)\", i, d, expectedD)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 D := new(Int).GCD(X, Y, a, b)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if D.Cmp(d) != 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"GCD(%s, %s): got d = %s, want %s\", a, b,\n> D, d)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if x != nil && X.Cmp(x) != 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"GCD(%s, %s): got x = %s, want %s\", a, b,\n> X, x)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if y != nil && Y.Cmp(y) != 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"GCD(%s, %s): got y = %s, want %s\", a, b,\n> Y, y)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // binaryGCD requires a > 0 && b > 0\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if a.Sign() < 0 || b.Sign() < 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 D.binaryGCD(a, b)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if D.Cmp(d) != 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"binaryGcd(%s, %s): got d = %s, want %s\",\n> a, b, D, d)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0quick.Check(checkGcd, nil)\n>\n>\n",
			"disapproval": false,
			"date": "2012-06-13 18:57:44.611647",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-13 18:58:30.962442",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=74d2ea85249e ***\n\nmath/big: correctly test for positive inputs in Int.GCD\n\nAlso: better GCD tests.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6295076",
			"disapproval": false,
			"date": "2012-06-13 20:54:48.249362",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One way to expand the tests would be to make the test table lines\r\ncomplete (no \"\") and then for every test try X,nil, nil,Y, X,Y, and\r\nnil,nil.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-13 18:59:47.660609",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-13 18:52:46.020944",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-13 20:46:17.668012",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6295076: math/big: correctly test for positive inputs in Int.GCD",
	"created": "2012-06-13 18:50:27.896012",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		6002,
		3005,
		4
	],
	"modified": "2012-06-13 20:54:48.847710",
	"closed": true,
	"issue": 6295076
}