{
	"description": "go.tools/cmd/cover: -register=P: cause instrumented file to register its counters with package P.\r\n\r\nThe previous implementation required that the build tool\r\n(e.g. 'go build') emit a test main file that registers the\r\ncoverage counter of every instrumented file, effectively\r\ncreating a dependency from that file to every other source\r\nfile in the program, and presenting a challenge for some other\r\nbuild systems in which enumerating the files may be difficult.\r\n\r\nThis CL (optionally) inverts the registration so that each\r\ninstrumented file registers itself at init time with a\r\nlow-level package specified on the command line.\r\n\r\nQuestions: how best to test this change?\r\n\r\nDetails:\r\n- generalize addImport over arbitrary package names\r\n  (was coupled to \"sync/atomic\").\r\n- split out addDummyAtomicRef.\r\n- preserve comments as other build tools may need \"// +build\" directives.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"iant@golang.org",
		"r@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-23 17:07:55.111190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The new registration package cannot have any dependencies, or else you\r\ncan't run coverage on them. Something must connect that package's\r\ninformation to package testing. I assume that would be main. So main would\r\nstill depend on the registration package and fetch the information and pass\r\nit to testing?\r\n\r\nThe best way to test this would be to make it the only way the coverage\r\ntool is used, even from cmd/go. To do that we could drop the generality and\r\ncreate a tiny package that is in the standard library (maybe\r\ntesting/coverinfo) and only used by this generated code. But I think we'd\r\nfirst want to agree that it's the way forward.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-23 18:34:39.590280",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 11710044: go.tools/cmd/cover: -register=P: cause instrumented file to reg...",
	"created": "2013-07-23 16:42:39.483580",
	"patchsets": [
		1,
		3001,
		6001,
		9001
	],
	"modified": "2013-07-23 18:34:39.635040",
	"closed": false,
	"issue": 11710044
}