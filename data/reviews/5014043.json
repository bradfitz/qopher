{
	"description": "path/filepath: new signature for Walk\nThis one uses a closure than an interface, and is much simpler to use.\nIt also enables a called function to return an error and (possibly)\nhalt processing.\n\nFixes issue 2237.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"rsc@golang.org",
		"r@google.com",
		"cw@f00f.org",
		"n13m3y3r@gmail.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com",
		"borman@google.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5014043/diff/15006/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/15006/src/pkg/path/filepath/path.go#newcode267\nsrc/pkg/path/filepath/path.go:267: // visited by Walk.  If there is a problem walking to the file or directory\ns/is/was/ ?",
			"disapproval": false,
			"date": "2011-09-14 00:46:38.514678",
			"approval": true
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5014043/diff/8002/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/8002/src/pkg/path/filepath/path.go#newcode274\nsrc/pkg/path/filepath/path.go:274: if errors != nil && errors != IgnoreWalkErrors {\ncan't we just have nil here to avoid need for IgnoreWalkErrors?",
			"disapproval": false,
			"date": "2011-09-13 22:55:52.117258",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-13 21:48:58.754760",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 13, 2011 at 04:29:01PM -0700, Rob 'Commander' Pike wrote:\n\n> What's wrong with using a closure?  See the tests in filepath for an example.\n\nIt's not clear to me how I have n of these in parallel using that\nmodel.  Naively I would think the state visible would be from the last\niteraton of the loop, not per-iteration state.\n\n\nWhat if Walk took na extra interface{} argument that was passed in for\nthose who care where they could type-cast it ans deal as needed?\n",
			"disapproval": false,
			"date": "2011-09-13 23:39:16.689883",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=15a61cdfd2db ***\n\npath/filepath: new signature for Walk\nThis one uses a closure than an interface, and is much simpler to use.\nIt also enables a called function to return an error and (possibly)\nhalt processing.\n\nFixes issue 2237.\n\nR=golang-dev, gri, rsc, r, cw, n13m3y3r\nCC=golang-dev\nhttp://codereview.appspot.com/5014043",
			"disapproval": false,
			"date": "2011-09-14 00:48:03.345624",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "the docs don't seem to mention that directory entries are walked\nin alphabetical order. perhaps they should - it's a useful\nproperty (e.g. when merging file trees).\n\nOn 14 September 2011 01:48,  <r@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=15a61cdfd2db ***\n>\n> path/filepath: new signature for Walk\n> This one uses a closure than an interface, and is much simpler to use.\n> It also enables a called function to return an error and (possibly)\n> halt processing.\n>\n> Fixes issue 2237.\n>\n> R=golang-dev, gri, rsc, r, cw, n13m3y3r\n> CC=golang-dev\n> http://codereview.appspot.com/5014043\n>\n>\n> http://codereview.appspot.com/5014043/\n>\n",
			"disapproval": false,
			"date": "2011-09-14 08:16:10.855719",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, rsc@golang.org, r@google.com, cw@f00f.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-13 23:35:57.446360",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, rsc@golang.org, r@google.com, cw@f00f.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-14 00:24:34.023271",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I have read the code. My question was not about the implementation but\nthe reason for the design, and I do understand the tradeoffs.\nSometimes sorting is necessary, sometimes it's not.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-14 17:28:04.332589",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> If people are processing such enormous\n> directories that sorting is prohibitive,\n> they can just not use Walk.\n\nok, that's very reasonable\n",
			"disapproval": false,
			"date": "2011-09-14 17:32:30.909023",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 13, 2011, at 4:32 PM, Russ Cox wrote:\n\n> On Tue, Sep 13, 2011 at 19:31,  <r@golang.org> wrote:\n>> because it means that that err!=nil only can occur in walkFn if it's a\n>> directory.\n>> one way or another, it's a special case. it seems if you can't even\n>> start the operation, that's a reasonable place to put the special case.\n> \n> Right, but I am worried about code like\n> \n> filepath.Walk(dir, func(..., err os.Error) os.Error {\n>    if err != nil {\n>        print(err)\n>    }\n>    return nil\n> })\n> \n> missing an error.  Except for that one case, a WalkFunc\n> like the one above would never have to look at the\n> return value from filepath.Walk, since it always comes\n> from the func, and the func returns nil.\n\nok\n\n",
			"disapproval": false,
			"date": "2011-09-13 23:33:23.597107",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5014043/diff/13001/src/cmd/gofix/main.go\nFile src/cmd/gofix/main.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/cmd/gofix/main.go#newcode211\nsrc/cmd/gofix/main.go:211: }\nif err == nil && isGoFile(f) {\n    err = processFile(path, false)\n}\nif err != nil {\n   report(err)\n}\nreturn nil\n\n?\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/cmd/gofmt/gofmt.go\nFile src/cmd/gofmt/gofmt.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/cmd/gofmt/gofmt.go#newcode153\nsrc/cmd/gofmt/gofmt.go:153: if err != nil {\nif err == nil && isGoFile(f) {\n    err = processFile(path, nil, os.Stdout, false)\n}\nif err != nil {\n   report(err)\n}\nreturn nil\n\n?\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/cmd/govet/govet.go\nFile src/cmd/govet/govet.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/cmd/govet/govet.go#newcode104\nsrc/cmd/govet/govet.go:104: var walkError os.Error\nis is this ever used?\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/pkg/path/filepath/path.go#newcode303\nsrc/pkg/path/filepath/path.go:303: // all errors are passed through walkFn.\ns/through/to/\n\n(walkFn may decide to not let anything pass \"through\")",
			"disapproval": false,
			"date": "2011-09-13 23:34:56.086457",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I think we should just document that\nWalk sorts and be done with it.\nIt makes the walk's output deterministic,\nwhich is very nice for most programs.\nIf people are processing such enormous\ndirectories that sorting is prohibitive,\nthey can just not use Walk.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-14 17:29:45.969578",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5014043/diff/1/src/cmd/govet/govet.go\nFile src/cmd/govet/govet.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/1/src/cmd/govet/govet.go#newcode105\nsrc/cmd/govet/govet.go:105: if f.IsRegular() && strings.HasSuffix(path, \".go\") {\nfyi: in gofmt we also check: !strings.HasPrefix(f.Name, \".\")\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode267\nsrc/pkg/path/filepath/path.go:267: var (\n()'s not needed here\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode279\nsrc/pkg/path/filepath/path.go:279: default:\na comment might be appropriate\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode285\nsrc/pkg/path/filepath/path.go:285: // walk recursively descends path, calling w.  If cont is false on return, all processing\nit's called stop now\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode288\nsrc/pkg/path/filepath/path.go:288: err = w(path, info)\ncombine with if?\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode320\nsrc/pkg/path/filepath/path.go:320: // errors occur.\nThis is also the case for the \"Otherwise...\" case (processing continues). I think this can be better phrased.\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode329\nsrc/pkg/path/filepath/path.go:329: errors <- err\nshouldn't this call handleWalkError?",
			"disapproval": false,
			"date": "2011-09-13 22:12:33.425791",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5014043/diff/13001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/pkg/path/filepath/path.go#newcode302\nsrc/pkg/path/filepath/path.go:302: // If root cannot be stat'ed, an error is returned immediately; otherwise\nOn 2011/09/13 23:27:15, rsc wrote:\n> Why the special case?  Because all the other errors are\n> passed through walkFn, you'd be able to do all the processing\n> in one place except for this.  return walkFn(root, nil, err)?\n\nbecause it means that that err!=nil only can occur in walkFn if it's a directory.\none way or another, it's a special case. it seems if you can't even start the operation, that's a reasonable place to put the special case.",
			"disapproval": false,
			"date": "2011-09-13 23:31:28.869731",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Seems to me you should be able to tell Walk if you want the directories\nsorted or not.  The traditional fts walker allows you to pass in an optional\ncompar function (probably should be an interface for Go).  If compar is NULL\nfiles are returned in the order they are read.\n\nThere are other handy features of fts as well, such as having directories\nreported pre- and post-order (pre-order so you can prepare for the entries\nshowing up and post-order so you can now process the completed directory).\n These latter could  be done by lexically by watching the path names that\ncome back.\n\nIt might be worth to take a look at the existing technologies for this.\n\nOn Wed, Sep 14, 2011 at 10:14 AM, Chris Wedgwood <cw@f00f.org> wrote:\n\n> > the docs don't seem to mention that directory entries are walked\n> > in alphabetical order. perhaps they should - it's a useful\n> > property (e.g. when merging file trees).\n>\n> i don't know that we should assume that\n>\n> i'm not even sure i like that\n>\n>\n> what if i have a directory with 1M files in it (yes, people do this\n> and it's reasonable) ... we should be able to get work from Walk(...)\n> before all the dirents are consumed\n>\n",
			"disapproval": false,
			"date": "2011-09-14 17:51:12.618285",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "What is the reason to use select?\nIt looks like it is guarding against broken callers\nat the cost of making it impossible to write\ncorrect callers.  I don't see any way to guarantee\nthat you get all the errors, short of using a very\nlarge channel buffer and hoping.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-13 22:24:42.583897",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, rsc@golang.org, r@google.com, cw@f00f.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-13 23:14:16.278959",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 13, 2011 at 19:31,  <r@golang.org> wrote:\n> because it means that that err!=nil only can occur in walkFn if it's a\n> directory.\n> one way or another, it's a special case. it seems if you can't even\n> start the operation, that's a reasonable place to put the special case.\n\nRight, but I am worried about code like\n\nfilepath.Walk(dir, func(..., err os.Error) os.Error {\n    if err != nil {\n        print(err)\n    }\n    return nil\n})\n\nmissing an error.  Except for that one case, a WalkFunc\nlike the one above would never have to look at the\nreturn value from filepath.Walk, since it always comes\nfrom the func, and the func returns nil.\n",
			"disapproval": false,
			"date": "2011-09-13 23:33:00.503415",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> the docs don't seem to mention that directory entries are walked\n> in alphabetical order. perhaps they should - it's a useful\n> property (e.g. when merging file trees).\n\ni don't know that we should assume that\n\ni'm not even sure i like that\n\n\nwhat if i have a directory with 1M files in it (yes, people do this\nand it's reasonable) ... we should be able to get work from Walk(...)\nbefore all the dirents are consumed\n",
			"disapproval": false,
			"date": "2011-09-14 17:14:27.168629",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 13, 2011, at 3:24 PM, Russ Cox wrote:\n\n> What is the reason to use select?\n> It looks like it is guarding against broken callers\n> at the cost of making it impossible to write\n> correct callers.  I don't see any way to guarantee\n> that you get all the errors, short of using a very\n> large channel buffer and hoping.\n\nthey're only errors; so what if one drops on the floor :)\n\nseriously, this whole fiasco started because the old code was leaving orphans. this code won't leave orphans.\n\nhttp://code.google.com/p/go/issues/detail?id=2237\n\ni should add a 'fixed 2237' to this CL, but i'll hold off for now.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-09-13 22:27:31.965904",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Sep 14, 2011 at 10:32 AM, Chris Wedgwood <cw@f00f.org> wrote:\n>> If people are processing such enormous\n>> directories that sorting is prohibitive,\n>> they can just not use Walk.\n>\n> ok, that's very reasonable\n>\n\nback to rog's point, though, i agree some documentation is required.  CL coming.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-14 17:33:10.958227",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode267\nsrc/pkg/path/filepath/path.go:267: var (\nOn 2011/09/13 22:12:33, gri wrote:\n> ()'s not needed here\n\nDone.\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode279\nsrc/pkg/path/filepath/path.go:279: default:\nOn 2011/09/13 22:12:33, gri wrote:\n> a comment might be appropriate\n\nDone.\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode285\nsrc/pkg/path/filepath/path.go:285: // walk recursively descends path, calling w.  If cont is false on return, all processing\nOn 2011/09/13 22:12:33, gri wrote:\n> it's called stop now\n\nDone.\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode288\nsrc/pkg/path/filepath/path.go:288: err = w(path, info)\nOn 2011/09/13 22:12:33, gri wrote:\n> combine with if?\n\nnah, i prefer it this way. w a small name for a big deal, and it parallels the structure below.\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode320\nsrc/pkg/path/filepath/path.go:320: // errors occur.\nOn 2011/09/13 22:12:33, gri wrote:\n> This is also the case for the \"Otherwise...\" case (processing continues). I\n> think this can be better phrased.\n\nDone.\n\nhttp://codereview.appspot.com/5014043/diff/1/src/pkg/path/filepath/path.go#newcode329\nsrc/pkg/path/filepath/path.go:329: errors <- err\nOn 2011/09/13 22:12:33, gri wrote:\n> shouldn't this call handleWalkError?\n\nyes, although it won't matter in practice",
			"disapproval": false,
			"date": "2011-09-13 22:27:53.271004",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, rsc@golang.org, r@google.com, cw@f00f.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-13 23:40:10.991973",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, rsc@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-13 22:28:08.718083",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "var crossdev bool\nvar mpdev uint64\n\nfilepath.Walk(root, func(path string, d *os.FileInfo, err os.Error) os.Error {\n\tif mpdev == 0 {\n\t\tmpdev = d.Dev\n\t}\n\tif !crossdev && d.Dev != mpdev {\n\t\treturn ErrSkipDirectory\n\t}\n\treturn nil\n})\n",
			"disapproval": false,
			"date": "2011-09-13 23:41:37.035834",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "never mind, API #4 coming up\n\n",
			"disapproval": false,
			"date": "2011-09-13 22:35:00.804485",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/pkg/path/filepath/path.go#newcode263\nsrc/pkg/path/filepath/path.go:263: // WalkFn is the type of the function called for each file or directory\ns/WalkFn/WalkFunc/ (matches whole tree)\n\nhttp://codereview.appspot.com/5014043/diff/13001/src/pkg/path/filepath/path.go#newcode302\nsrc/pkg/path/filepath/path.go:302: // If root cannot be stat'ed, an error is returned immediately; otherwise\nWhy the special case?  Because all the other errors are\npassed through walkFn, you'd be able to do all the processing\nin one place except for this.  return walkFn(root, nil, err)?",
			"disapproval": false,
			"date": "2011-09-13 23:27:15.559256",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Sep 14, 2011 at 10:14 AM, Chris Wedgwood <cw@f00f.org> wrote:\n>> the docs don't seem to mention that directory entries are walked\n>> in alphabetical order. perhaps they should - it's a useful\n>> property (e.g. when merging file trees).\n>\n> i don't know that we should assume that\n>\n> i'm not even sure i like that\n>\n>\n> what if i have a directory with 1M files in it (yes, people do this\n> and it's reasonable) ... we should be able to get work from Walk(...)\n> before all the dirents are consumed\n\ni admit to being surprised when i went in there that the files were\nsorted. there must be a reason for it (i didn't write the original).\n\nthinking continues.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-14 17:23:06.099511",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I like the ease of use of the new interface but it's not clear how I can store per-walker instance state (without a closure).\n\nI use that right now to avoid crossing mount-points.\n\n\n\n\ntype FileProcessor struct {\n        crossdev bool   // cross mount-points?\n        mpdev    uint64 // moint-point device\n}\n\nfunc (w *FileProcessor) VisitDir(path string, d *os.FileInfo) bool {\n        if w.crossdev {\n                return true\n        }\n        if w.mpdev == 0 { // record mount-point\n                w.mpdev = d.Dev\n        }\n        if w.mpdev != d.Dev { // crossed mount-point\n                return false\n        }\n        return true\n}",
			"disapproval": false,
			"date": "2011-09-13 23:27:48.488367",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I have read the code. My question was not about the implementation but\n> the reason for the design, and I do understand the tradeoffs.\n> Sometimes sorting is necessary, sometimes it's not.\n\nI can't comment on why it's done that way, but having done it other\nways I will point out if you process things incrementally you tend to\nkeep fd's open for the dirs and you descend down.\n\nSo for deep traversal to avoid eating too many fd's you have to close\nand recycle them, re-open, and recover --- which isn't guaranteed to\nbe robust.\n\nWhat we have now I'm fine with, it clearly works for just about\neverything people care about.\n\nI just would prefer when didn't promise to keep things sorted in the\nfuture.\n",
			"disapproval": false,
			"date": "2011-09-14 17:31:34.180927",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 13, 2011, at 4:27 PM, cw@f00f.org wrote:\n\n> I like the ease of use of the new interface but it's not clear how I can\n> store per-walker instance state (without a closure).\n> \n> I use that right now to avoid crossing mount-points.\n> \n> \n> \n> \n> type FileProcessor struct {\n>        crossdev bool   // cross mount-points?\n>        mpdev    uint64 // moint-point device\n> }\n> \n> func (w *FileProcessor) VisitDir(path string, d *os.FileInfo) bool {\n>        if w.crossdev {\n>                return true\n>        }\n>        if w.mpdev == 0 { // record mount-point\n>                w.mpdev = d.Dev\n>        }\n>        if w.mpdev != d.Dev { // crossed mount-point\n>                return false\n>        }\n>        return true\n> }\n> \n> \n> http://codereview.appspot.com/5014043/\n\nWhat's wrong with using a closure?  See the tests in filepath for an example.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-13 23:29:05.715221",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Sep 14, 2011 at 10:23:03AM -0700, Rob 'Commander' Pike wrote:\n\n> i admit to being surprised when i went in there that the files were\n> sorted. there must be a reason for it (i didn't write the original).\n> \n> thinking continues.\n\n  // readDir reads the directory named by dirname and returns\n  // a sorted list of directory entries.\n  // Copied from io/ioutil to avoid the circular import.\n  func readDir(dirname string) ([]*os.FileInfo, os.Error) {\n\t  f, err := os.Open(dirname)\n\t  if err != nil {\n\t\t  return nil, err\n\t  }\n\t  list, err := f.Readdir(-1)\n\t  f.Close()\n\t  if err != nil {\n\t\t  return nil, err\n\t  }\n\t  fi := make(fileInfoList, len(list))\n\t  for i := range list {\n\t\t  fi[i] = &list[i]\n\t  }\n\t  sort.Sort(fi)\n\t  return fi, nil\n  }\n\nit comes from there\n\nthe longer-term issue is that we have to consume all dirents and sort\nthem, i think we should be allowed to incrementally process things in\nthe future so we should NOT put sorting into the API\n\n",
			"disapproval": false,
			"date": "2011-09-14 17:25:54.975822",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 13, 2011, at 4:39 PM, Chris Wedgwood wrote:\n\n> On Tue, Sep 13, 2011 at 04:29:01PM -0700, Rob 'Commander' Pike wrote:\n> \n>> What's wrong with using a closure?  See the tests in filepath for an example.\n> \n> It's not clear to me how I have n of these in parallel using that\n> model.  Naively I would think the state visible would be from the last\n> iteraton of the loop, not per-iteration state.\n> \n> \n> What if Walk took na extra interface{} argument that was passed in for\n> those who care where they could type-cast it ans deal as needed?\n\nthat's what closures are for.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-13 23:40:51.516843",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> var crossdev bool\n> var mpdev uint64\n> \n> filepath.Walk(root, func(path string, d *os.FileInfo, err os.Error) os.Error {\n> \tif mpdev == 0 {\n> \t\tmpdev = d.Dev\n> \t}\n> \tif !crossdev && d.Dev != mpdev {\n> \t\treturn ErrSkipDirectory\n> \t}\n> \treturn nil\n> })\n\nSure.  The issue for me is that I do 10s of these in parallel (disk\nslow, cpu fast) on some systems ; where the walker had state I could\nuse that.\n\nNow that it has none, and I have a common function for the visitor,\nit's not clear when it's invoked who it's invoked for and what\nparameters it has.\n",
			"disapproval": false,
			"date": "2011-09-13 23:44:00.873098",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "If it helps, you can always define your type and use\n\nfilepath.Walk(dir, func(path, d *os.FileInfo, err os.Error) os.Error {\nreturn v.VisitFile(path, d, err) })\n\nor move that expression into a helper method:\n\nfunc (v *Visitor) walker() filepath.WalkFunc {\n    return func ...\n}\n\nfilepath.Walk(dir, v.walker())\n",
			"disapproval": false,
			"date": "2011-09-13 23:52:28.788589",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"cw@f00f.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "That's a very nice API Rob, thank you.\n\nAs a minor suggestion, it'd feel nicer to\n\n    return filepath.SkipDir\n\nThan to\n\n    return filepath.ErrSkipDirectory",
			"disapproval": false,
			"date": "2011-09-14 00:15:38.664447",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "There's always a tradeoff between feature-richness and smoothness in\ninterface design.\n\nI like the current tradeoff.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-14 18:05:40.251907",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5014043: path/filepath: new signature for Walk",
	"created": "2011-09-13 21:48:29.435195",
	"patchsets": [
		1,
		8002,
		13001,
		19001,
		12002,
		15006,
		18003,
		3004
	],
	"modified": "2011-09-14 17:51:12.696413",
	"closed": true,
	"issue": 5014043
}