{
	"description": "        Proxy support for http package\n\n        The change adds proxy support (with Basic authentication) for\n\tthe http package.\n        Might fix issue 3738041.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iru.muzgo@gmail.com",
			"recipients": [
				"iru.muzgo@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-12-30 14:21:43.353983",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "There's already a code review in progress to implement this:\n\nhttp://codereview.appspot.com/3794041/\n\n\nOn 31 December 2010 01:21,  <iru.muzgo@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change.\n>\n>\n> Description:\n> \u00a0 \u00a0 \u00a0 \u00a0Proxy support for http package\n>\n> \u00a0 \u00a0 \u00a0 \u00a0The change adds proxy support (with Basic authentication) for\n> \u00a0 \u00a0 \u00a0 \u00a0the http package.\n> \u00a0 \u00a0 \u00a0 \u00a0Might fix issue 3738041.\n>\n> Please review this at http://codereview.appspot.com/3783044/\n>\n> Affected files:\n> \u00a0M src/pkg/http/client.go\n> \u00a0M src/pkg/http/url.go\n>\n>\n> Index: src/pkg/http/client.go\n> ===================================================================\n> --- a/src/pkg/http/client.go\n> +++ b/src/pkg/http/client.go\n> @@ -42,9 +42,38 @@\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0addr := req.URL.Host\n> +\n> + \u00a0 \u00a0 \u00a0 eproxy := os.Getenv(\"http_proxy\")\n> + \u00a0 \u00a0 \u00a0 if eproxy != \"\" {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 i := strings.Index(eproxy, \"://\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if i != -1 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 eproxy = eproxy[i+3:]\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 i = strings.Index(eproxy, \"@\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 req.URL.ProxyHost = eproxy[i+1:]\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 req.URL.RawProxyUserinfo = eproxy[:i]\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // bug: For the effect of bypassing the proxy,\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // we only consider the host part of addr.\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // We could arrange for the whole host:port combination\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // to be checked, instead.\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enoproxy := os.Getenv(\"no_proxy\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a := addr\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 i = strings.Index(addr, \":\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if i != -1 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a = a[:i]\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if strings.Index(enoproxy, a) == -1 && req.URL.ProxyHost !=\n> \"\" {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 addr = req.URL.ProxyHost\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 }\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0if !hasPort(addr) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0addr += \":\" + req.URL.Scheme\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0info := req.URL.RawUserinfo\n> \u00a0 \u00a0 \u00a0 \u00a0if len(info) > 0 {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enc := base64.URLEncoding\n> @@ -56,6 +85,16 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0req.Header[\"Authorization\"] = \"Basic \" + string(encoded)\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> + \u00a0 \u00a0 \u00a0 if len(req.URL.RawProxyUserinfo) > 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enc := base64.URLEncoding\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 encoded := make([]byte,\n> enc.EncodedLen(len(req.URL.RawProxyUserinfo)))\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enc.Encode(encoded, []byte(req.URL.RawProxyUserinfo))\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if req.Header == nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 req.Header = make(map[string]string)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 req.Header[\"Proxy-Authorization\"] = \"Basic \" +\n> string(encoded)\n> + \u00a0 \u00a0 \u00a0 }\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0var conn io.ReadWriteCloser\n> \u00a0 \u00a0 \u00a0 \u00a0if req.URL.Scheme == \"http\" {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0conn, err = net.Dial(\"tcp\", \"\", addr)\n> Index: src/pkg/http/url.go\n> ===================================================================\n> --- a/src/pkg/http/url.go\n> +++ b/src/pkg/http/url.go\n> @@ -328,16 +328,18 @@\n> \u00a0// clients typically have to split them into pieces before further\n> \u00a0// decoding.\n> \u00a0type URL struct {\n> - \u00a0 \u00a0 \u00a0 Raw \u00a0 \u00a0 \u00a0 \u00a0 \u00a0string // the original string\n> - \u00a0 \u00a0 \u00a0 Scheme \u00a0 \u00a0 \u00a0 string // scheme\n> - \u00a0 \u00a0 \u00a0 RawAuthority string // [userinfo@]host\n> - \u00a0 \u00a0 \u00a0 RawUserinfo \u00a0string // userinfo\n> - \u00a0 \u00a0 \u00a0 Host \u00a0 \u00a0 \u00a0 \u00a0 string // host\n> - \u00a0 \u00a0 \u00a0 RawPath \u00a0 \u00a0 \u00a0string // /path[?query][#fragment]\n> - \u00a0 \u00a0 \u00a0 Path \u00a0 \u00a0 \u00a0 \u00a0 string // /path\n> - \u00a0 \u00a0 \u00a0 OpaquePath \u00a0 bool \u00a0 // path is opaque (unrooted when scheme is\n> present)\n> - \u00a0 \u00a0 \u00a0 RawQuery \u00a0 \u00a0 string // query\n> - \u00a0 \u00a0 \u00a0 Fragment \u00a0 \u00a0 string // fragment\n> + \u00a0 \u00a0 \u00a0 Raw \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0string // the original string\n> + \u00a0 \u00a0 \u00a0 Scheme \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string // scheme\n> + \u00a0 \u00a0 \u00a0 RawAuthority \u00a0 \u00a0 string // [userinfo@]host\n> + \u00a0 \u00a0 \u00a0 RawUserinfo \u00a0 \u00a0 \u00a0string // userinfo\n> + \u00a0 \u00a0 \u00a0 RawProxyUserinfo string // proxy userinfo\n> + \u00a0 \u00a0 \u00a0 ProxyHost \u00a0 \u00a0 \u00a0 \u00a0string // proxy host\n> + \u00a0 \u00a0 \u00a0 Host \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string // host\n> + \u00a0 \u00a0 \u00a0 RawPath \u00a0 \u00a0 \u00a0 \u00a0 \u00a0string // /path[?query][#fragment]\n> + \u00a0 \u00a0 \u00a0 Path \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string // /path\n> + \u00a0 \u00a0 \u00a0 OpaquePath \u00a0 \u00a0 \u00a0 bool \u00a0 // path is opaque (unrooted when scheme is\n> present)\n> + \u00a0 \u00a0 \u00a0 RawQuery \u00a0 \u00a0 \u00a0 \u00a0 string // query\n> + \u00a0 \u00a0 \u00a0 Fragment \u00a0 \u00a0 \u00a0 \u00a0 string // fragment\n> \u00a0}\n>\n> \u00a0// Maybe rawurl is of the form scheme:path.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-01-04 03:19:33.900064",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"iru.muzgo@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2011-01-04 06:23:40.096060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iru.muzgo@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "removing reviewers in preference to earlier CL",
			"disapproval": false,
			"date": "2011-01-04 17:00:40.576026",
			"approval": false
		}
	],
	"owner_email": "iru.muzgo@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "iru",
	"subject": "code review 3783044:         Proxy support for http package",
	"created": "2010-12-30 14:18:55.212772",
	"patchsets": [
		1,
		2001
	],
	"modified": "2011-01-04 17:00:40.673784",
	"closed": false,
	"issue": 3783044
}