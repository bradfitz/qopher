{
	"description": "runtime: Support for shared libraries (generic parts and linux/x64+arm only for now).\r\n\r\nAssembler changes to avoid assembler instructions that cannot use RIP-relative addressing.\r\nScheduler changes to allow the main go routine to exit cleanly and\r\nrelinquish control back to the main program.\r\n\r\nSee also:\r\nhttps://codereview.appspot.com/6926049\r\nhttps://codereview.appspot.com/7064048\r\n\r\nand\r\n\r\nhttps://groups.google.com/d/topic/golang-nuts/P05BDjLcQ5k/discussion",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"taruti@taruti.net",
		"minux.ma@gmail.com",
		"devon.odell@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-24 17:32:56.773830",
			"approval": false
		},
		{
			"sender": "taruti@taruti.net",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"taruti@taruti.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Will it be possible to use Go executables even after this in linux chroots without /proc?",
			"disapproval": false,
			"date": "2012-12-26 12:52:31.043930",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"taruti@taruti.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/26 12:52:31, taruti wrote:\n> Will it be possible to use Go executables even after this in linux chroots\n> without /proc?\n\nNo, it probably wouldn't, so I've updated the CL with a change that keeps the old method, and select between that and the /proc method depending on whether argc is > 0 (executable case).\n\nThanks for spotting that.",
			"disapproval": false,
			"date": "2012-12-27 17:12:59.261870",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, December 28, 2012, wrote:\r\n\r\n> On 2012/12/26 12:52:31, taruti wrote:\r\n>\r\n>> Will it be possible to use Go executables even after this in linux\r\n>>\r\n> chroots\r\n>\r\n>> without /proc?\r\n>\r\n> No, it probably wouldn't, so I've updated the CL with a change that\r\n> keeps the old method, and select between that and the /proc method\r\n> depending on whether argc is > 0 (executable case).\r\n>\r\nit's ok to depend on /proc, as it is also used by std. library\r\nin many cases. there are things that are not doable without /proc.\r\n",
			"disapproval": false,
			"date": "2012-12-28 07:01:48.276670",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe. I haven't looked at the changes very much, but I imagine this\r\nis going to require changes to FreeBSD (happy to look into that) and\r\nOS X (and other BSDs) at the least?\r\n\r\n--dho\r\n\r\n2012/12/28 minux <minux.ma@gmail.com>:\r\n>\r\n> On Friday, December 28, 2012, wrote:\r\n>>\r\n>> On 2012/12/26 12:52:31, taruti wrote:\r\n>>>\r\n>>> Will it be possible to use Go executables even after this in linux\r\n>>\r\n>> chroots\r\n>>>\r\n>>> without /proc?\r\n>>\r\n>> No, it probably wouldn't, so I've updated the CL with a change that\r\n>> keeps the old method, and select between that and the /proc method\r\n>> depending on whether argc is > 0 (executable case).\r\n>\r\n> it's ok to depend on /proc, as it is also used by std. library\r\n> in many cases. there are things that are not doable without /proc.\r\n",
			"disapproval": false,
			"date": "2012-12-28 07:42:44.549210",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"taruti@taruti.net",
				"minux.ma@gmail.com",
				"devon.odell@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/28 07:42:44, dho wrote:\n> Maybe. I haven't looked at the changes very much, but I imagine this\n> is going to require changes to FreeBSD (happy to look into that) and\n> OS X (and other BSDs) at the least?\n> \n> --dho\n> \n\nFor building go shared libraries on the BSDs and OS X (and the other archs and os'es), yes, changes are needed, though the work should be less since a fair amount of this CL is generic. I'm currently working on the linux/arm combo, though progress is slow since I only have an Android phone and no ARM assembler experience to work with.\n\n - elias",
			"disapproval": false,
			"date": "2012-12-28 15:46:27.538420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"taruti@taruti.net",
				"minux.ma@gmail.com",
				"devon.odell@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some low-level comments below. I apologize that we don't have gofmt for C code.\n\nI would like to understand a bit better what the model is that we want to provide when invoking Go code from a shared library. Can you write a paragraph or two (in email) about what users should expect? \n\nFor example:\n - It appears that os.Args will not be initialized. What other changes are there?\n - Can you load multiple Go shared objects or just one?\n - When does package initialization happen?\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s\nFile src/pkg/runtime/asm_amd64.s (right):\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s#newcode84\nsrc/pkg/runtime/asm_amd64.s:84: libret:\nelfret:\n    // ELF shared library return\n\nextra points for another comment with a link to the spec for this procedure\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s#newcode85\nsrc/pkg/runtime/asm_amd64.s:85: ADDQ\t$(4*8 + 16), SP\t\t// 2args 2auto\ndelete comment\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s#newcode177\nsrc/pkg/runtime/asm_amd64.s:177: CMPB\truntime\u00b7islibrary(SB), $1\nI don't understand this. mcall is not supposed to return in most of the contexts where it is called. Being in a library does not change all those contexts. Which context is supposed to expect the return? Perhaps we can put a flag in the m struct or something like that.\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/os_linux.h\nFile src/pkg/runtime/os_linux.h (right):\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/os_linux.h#newcode11\nsrc/pkg/runtime/os_linux.h:11: int32 runtime\u00b7open(uint8*, int32, int32);\ntabs, like the surrounding lines\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode15\nsrc/pkg/runtime/proc.c:15: bool \truntime\u00b7islibrary = 0;\n= 0 is redundant. remove.\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode250\nsrc/pkg/runtime/proc.c:250: if (!runtime\u00b7islibrary) {\nno space\nBut really this should be\n\nif(runtime.islibrary)\n    return;\n\nand then the rest of the function can be normal.\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode625\nsrc/pkg/runtime/proc.c:625: if (&m->g0->sched.pc == (void *)-1)\nNo space between if and (.\nAlso I think the new condition would be clearer as \n\nif(!runtime.islibrary)\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode768\nsrc/pkg/runtime/proc.c:768: static bool completed = 0;\ns/ = 0//\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode768\nsrc/pkg/runtime/proc.c:768: static bool completed = 0;\ns/ = 0//\ns/completed/m0done/\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode786\nsrc/pkg/runtime/proc.c:786: if (completed && m == &runtime\u00b7m0)\nno space\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode788\nsrc/pkg/runtime/proc.c:788: if (!runtime\u00b7islibrary)\nno space\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/rt0_linux_amd64.s\nFile src/pkg/runtime/rt0_linux_amd64.s (right):\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/rt0_linux_amd64.s#newcode13\nsrc/pkg/runtime/rt0_linux_amd64.s:13: SUBQ  \t$0x58, SP   /* keeps stack pointer 32-byte aligned */\nThis comment is unclear. (0x58 > 32)\n\nPerhaps instead of that new code in rt0_amd64, the JMP below can become a call, and then the restoring code can be done here instead of in rt0_amd64?\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/runtime.c#newcode100\nsrc/pkg/runtime/runtime.c:100: int32 i, n = 0;\nno initialization in variable declarations.\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/runtime.c#newcode102\nsrc/pkg/runtime/runtime.c:102: if (argc > 0)\nno space\n\nn = 0;\nif(argc > 0)\n   while(argv[argc+1+n] != 0)\n       n++;\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/symtab.c\nFile src/pkg/runtime/symtab.c (right):\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/symtab.c#newcode105\nsrc/pkg/runtime/symtab.c:105: if (runtime\u00b7strcmp((byte *)\"runtime.findfunc\", sym->name) == 0)\nno space between if and (\nno space between (byte and *)\n\nPerhaps the linker could define a variable at shared library 0 instead of needing to compute it this way?\n\nxdefine(\"reloffset\", SRODATA, 0);\n\nseems like it would work.\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c\nFile src/pkg/runtime/vdso_linux_amd64.c (right):\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode296\nsrc/pkg/runtime/vdso_linux_amd64.c:296: static uint64 runtime\u00b7atolhex(byte *s, uint32 count) {\n\\n before runtime\n\\n before {\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode302\nsrc/pkg/runtime/vdso_linux_amd64.c:302: if(*s >= '0' && *s <= '9')\ninsert n *= 16;\nand then you can use n += below\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode345\nsrc/pkg/runtime/vdso_linux_amd64.c:345: byte vdso_name[] = {'[', 'v', 'd', 's', 'o', ']'};\nmake this a global\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode346\nsrc/pkg/runtime/vdso_linux_amd64.c:346: int32 vdso_name_idx = 0, start_idx = 0;\nno initializations in declarations please\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode351\nsrc/pkg/runtime/vdso_linux_amd64.c:351: if (maps_fd < 0)\nno space. etc.\n\nhttps://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode360\nsrc/pkg/runtime/vdso_linux_amd64.c:360: case '\\n':\ndo not indent case statements. the words switch and case should be aligned.",
			"disapproval": false,
			"date": "2013-01-02 21:35:59.986190",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nThank you very much for the detailed review :)\r\n\r\nI've since added linux/arm support to this and the tools CL, so a look at\r\nthat would also be much appreciated!\r\n\r\nOn Wed, Jan 2, 2013 at 10:36 PM, <rsc@golang.org> wrote:\r\n\r\n> Some low-level comments below. I apologize that we don't have gofmt for\r\n> C code.\r\n>\r\n> I would like to understand a bit better what the model is that we want\r\n> to provide when invoking Go code from a shared library. Can you write a\r\n> paragraph or two (in email) about what users should expect?\r\n>\r\n> For example:\r\n>  - It appears that os.Args will not be initialized. What other changes\r\n> are there?\r\n>  - Can you load multiple Go shared objects or just one?\r\n>  - When does package initialization happen?\r\n\r\n\r\nI've changed as little as possible in the runtime, because I wanted to\r\nfocus on getting the low level details sorted first (PIC mostly). The\r\nresulting shared library is very similar to a cgo enabled (non static)\r\nexecutable, with a few user-visible differences:\r\n\r\n1. No os.Args\r\n2. Initialization and main.main is run on library init (DT_INIT) which\r\nhappens immediately after the dynamic linker loaded and initialized the\r\nlibrary. That means that main.main should be regarded as a \"dllmain\"\r\nroutine and should probably be empty or only perform additional\r\ninitialization. When main.main returns, the linker completes library load\r\nand return control to the main executable again.\r\n3. The main executable can call into go functions exported through cgo, but\r\nonly on the thread that initialized the library (typically the main\r\nthread). This restriction mirrors the cgo restriction where native shared\r\nlibraries loaded from a go program through cgo cannot create threads and\r\ncall into go on them.\r\n4. Multiple go shared libraries are not supported. It is theoretically\r\npossible, but changes would be needed to enable support. At the very least,\r\nall Go runtime symbols would need to be private to avoid name clashing. A\r\nmore advanced solution would share the Go runtime between libraries.\r\n\r\n\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/asm_amd64.s<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s>\r\n> File src/pkg/runtime/asm_amd64.s (right):\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/asm_amd64.s#**newcode84<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s#newcode84>\r\n> src/pkg/runtime/asm_amd64.s:**84: libret:\r\n> elfret:\r\n>     // ELF shared library return\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> extra points for another comment with a link to the spec for this\r\n> procedure\r\n>\r\n>\r\nI don't understand this point? The return is simply restoring registers\r\naccording to the ABI.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/asm_amd64.s#**newcode85<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s#newcode85>\r\n> src/pkg/runtime/asm_amd64.s:**85: ADDQ    $(4*8 + 16), SP         //\r\n> 2args 2auto\r\n> delete comment\r\n>\r\n>\r\nDone. I opted to save SP on the stack instead of computing it, since\r\nthe ANDQ    $~15, SP alignment ruins the reversability of SP.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/asm_amd64.s#**newcode177<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/asm_amd64.s#newcode177>\r\n> src/pkg/runtime/asm_amd64.s:**177: CMPB   runtime\u00b7islibrary(SB), $1\r\n> I don't understand this. mcall is not supposed to return in most of the\r\n> contexts where it is called. Being in a library does not change all\r\n> those contexts. Which context is supposed to expect the return? Perhaps\r\n> we can put a flag in the m struct or something like that.\r\n>\r\n>\r\nAfter initialization and main.main has run, control needs to be\r\nrelinquished to the dynamic linker/loader to allow the main executable to\r\ncontinue/start. The runtime\u00b7badmcall2 call would prevent that if not for\r\nthat check.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/os_linux.h<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/os_linux.h>\r\n> File src/pkg/runtime/os_linux.h (right):\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/os_linux.h#**newcode11<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/os_linux.h#newcode11>\r\n> src/pkg/runtime/os_linux.h:11: int32 runtime\u00b7open(uint8*, int32, int32);\r\n> tabs, like the surrounding lines\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c>\r\n> File src/pkg/runtime/proc.c (right):\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c#newcode15<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode15>\r\n> src/pkg/runtime/proc.c:15: bool         runtime\u00b7islibrary = 0;\r\n> = 0 is redundant. remove.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c#newcode250<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode250>\r\n> src/pkg/runtime/proc.c:250: if (!runtime\u00b7islibrary) {\r\n> no space\r\n> But really this should be\r\n>\r\n> if(runtime.islibrary)\r\n>     return;\r\n>\r\n> and then the rest of the function can be normal.\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c#newcode625<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode625>\r\n> src/pkg/runtime/proc.c:625: if (&m->g0->sched.pc == (void *)-1)\r\n> No space between if and (.\r\n> Also I think the new condition would be clearer as\r\n>\r\n> if(!runtime.islibrary)\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c#newcode768<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode768>\r\n> src/pkg/runtime/proc.c:768: static bool completed = 0;\r\n> s/ = 0//\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c#newcode768<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode768>\r\n> src/pkg/runtime/proc.c:768: static bool completed = 0;\r\n> s/ = 0//\r\n> s/completed/m0done/\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c#newcode786<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode786>\r\n> src/pkg/runtime/proc.c:786: if (completed && m == &runtime\u00b7m0)\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/proc.c#newcode788<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/proc.c#newcode788>\r\n> src/pkg/runtime/proc.c:788: if (!runtime\u00b7islibrary)\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/rt0_linux_amd64.s<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/rt0_linux_amd64.s>\r\n> File src/pkg/runtime/rt0_linux_**amd64.s (right):\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/rt0_linux_amd64.s#**newcode13<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/rt0_linux_amd64.s#newcode13>\r\n> src/pkg/runtime/rt0_linux_**amd64.s:13: SUBQ      $0x58, SP   /* keeps\r\n> stack\r\n> pointer 32-byte aligned */\r\n> This comment is unclear. (0x58 > 32)\r\n>\r\n>\r\nDone. TBH, I stole it from pkg/runtime/cgo/gcc_amd64.S since library init\r\nis conceptually the same as a C->Go cgo call.\r\n\r\n\r\n> Perhaps instead of that new code in rt0_amd64, the JMP below can become\r\n> a call, and then the restoring code can be done here instead of in\r\n> rt0_amd64?\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/runtime.c<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/runtime.c>\r\n> File src/pkg/runtime/runtime.c (right):\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/runtime.c#**newcode100<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/runtime.c#newcode100>\r\n> src/pkg/runtime/runtime.c:100: int32 i, n = 0;\r\n> no initialization in variable declarations.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/runtime.c#**newcode102<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/runtime.c#newcode102>\r\n> src/pkg/runtime/runtime.c:102: if (argc > 0)\r\n> no space\r\n>\r\n> n = 0;\r\n> if(argc > 0)\r\n>    while(argv[argc+1+n] != 0)\r\n>        n++;\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/symtab.c<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/symtab.c>\r\n> File src/pkg/runtime/symtab.c (right):\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/symtab.c#**newcode105<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/symtab.c#newcode105>\r\n> src/pkg/runtime/symtab.c:105: if (runtime\u00b7strcmp((byte\r\n> *)\"runtime.findfunc\", sym->name) == 0)\r\n> no space between if and (\r\n> no space between (byte and *)\r\n>\r\n> Perhaps the linker could define a variable at shared library 0 instead\r\n> of needing to compute it this way?\r\n>\r\n> xdefine(\"reloffset\", SRODATA, 0);\r\n>\r\n> seems like it would work.\r\n>\r\n>\r\nDone. It works, but I'm not sure why :)\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/vdso_linux_amd64.c<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c>\r\n> File src/pkg/runtime/vdso_linux_**amd64.c (right):\r\n>\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/vdso_linux_amd64.**c#newcode296<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode296>\r\n> src/pkg/runtime/vdso_linux_**amd64.c:296: static uint64\r\n> runtime\u00b7atolhex(byte *s, uint32 count) {\r\n> \\n before runtime\r\n> \\n before {\r\n>\r\n>\r\nDone. I took the liberty to reformat a few other functions in that file.\r\n\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/vdso_linux_amd64.**c#newcode302<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode302>\r\n> src/pkg/runtime/vdso_linux_**amd64.c:302: if(*s >= '0' && *s <= '9')\r\n> insert n *= 16;\r\n> and then you can use n += below\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/vdso_linux_amd64.**c#newcode345<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode345>\r\n> src/pkg/runtime/vdso_linux_**amd64.c:345: byte vdso_name[] = {'[', 'v',\r\n> 'd', 's', 'o', ']'};\r\n> make this a global\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/vdso_linux_amd64.**c#newcode346<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode346>\r\n> src/pkg/runtime/vdso_linux_**amd64.c:346: int32 vdso_name_idx = 0,\r\n> start_idx = 0;\r\n> no initializations in declarations please\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/vdso_linux_amd64.**c#newcode351<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode351>\r\n> src/pkg/runtime/vdso_linux_**amd64.c:351: if (maps_fd < 0)\r\n> no space. etc.\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/diff/15001/src/**\r\n> pkg/runtime/vdso_linux_amd64.**c#newcode360<https://codereview.appspot.com/6822078/diff/15001/src/pkg/runtime/vdso_linux_amd64.c#newcode360>\r\n> src/pkg/runtime/vdso_linux_**amd64.c:360: case '\\n':\r\n> do not indent case statements. the words switch and case should be\r\n> aligned.\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6822078/<https://codereview.appspot.com/6822078/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-06 04:16:52.068690",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"taruti@taruti.net",
				"minux.ma@gmail.com",
				"devon.odell@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've hg sync'ed and updated the linker to output relative offsets for the GC_CALL gc instruction, to avoid having to dynamically relocate .gcbss and .gcdata.",
			"disapproval": false,
			"date": "2013-01-19 13:58:23.330620",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"taruti@taruti.net",
				"minux.ma@gmail.com",
				"devon.odell@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hg sync'ed to tip, merged and restested.",
			"disapproval": false,
			"date": "2013-01-30 13:13:07.634270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"taruti@taruti.net",
				"minux.ma@gmail.com",
				"devon.odell@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please split the symtab and mgc0 changes, along with the needed change to ld/lib.c, into a separate CL. Those I'm comfortable with and we can get them submitted.\n\nThen please also split the auxv stuff into a separate CL. I'm not 100% sure about that - I am holding out hope that there is some way to find auxv without reading it from /proc - but it is certainly something we can do as a distinct step.\n\nThis CL will then contain only the new design decisions about this \"library\" mode. This is the part I am fundamentally unsure about. There are complications having to do with what happens when the m0 exits, how you handle multiple threads calling into Go simultaneously, why there is no os.Args, whether signal handlers should persist on return, whether other M's that are started during the call should be killed at return, and so on. But at least if we get the other mechanical details done we can have that conversation.\n\nThanks.",
			"disapproval": false,
			"date": "2013-01-31 01:30:17.995300",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"taruti@taruti.net",
				"minux.ma@gmail.com",
				"devon.odell@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 01:30:17, rsc wrote:\n> Please split the symtab and mgc0 changes, along with the needed change to\n> ld/lib.c, into a separate CL. Those I'm comfortable with and we can get them\n> submitted.\n> \n\nDone. https://codereview.appspot.com/7248048\n\n> Then please also split the auxv stuff into a separate CL. I'm not 100% sure\n> about that - I am holding out hope that there is some way to find auxv without\n> reading it from /proc - but it is certainly something we can do as a distinct\n> step.\n> \n\nDone. https://codereview.appspot.com/7221080/\n\nInstead of getting auxv from a different place, maybe we can lift the dependency on auxv altogether when in library mode.\nVDSO can be probably be handled by letting the dynamic linker link to the vdso library. Normal, statically linked executables will still need the auxv loader, of course.\nThat leaves the information go gets from auxv on arm, which might similarly be obtained elsewhere.\n\n> This CL will then contain only the new design decisions about this \"library\"\n> mode. This is the part I am fundamentally unsure about. There are complications\n> having to do with what happens when the m0 exits, how you handle multiple\n> threads calling into Go simultaneously, why there is no os.Args, whether signal\n> handlers should persist on return, whether other M's that are started during the\n> call should be killed at return, and so on. But at least if we get the other\n> mechanical details done we can have that conversation.\n> \n> Thanks.\n\nFYI: I'm working on the signal handler issue, and another issue that seems to involve assumptions about thread local storage. I'm not sure why you wouldn't persist the signal handlers? The go-implemented library is bound to be called into again from the main executable, so imho a way to call up through the signal handler chain should be devised.\n\nThank you for the reviews and help submitting this, it helps my further work to have the \"easy\", but extensive changes submitted and out of the way.",
			"disapproval": false,
			"date": "2013-01-31 18:43:20.446260",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"taruti@taruti.net",
				"minux.ma@gmail.com",
				"devon.odell@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Closed, superseded by https://codereview.appspot.com/9738047/",
			"disapproval": false,
			"date": "2013-06-24 15:24:53.041840",
			"approval": false
		}
	],
	"owner_email": "elias.naur@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "elias.naur",
	"subject": "code review 6822078: runtime: Support for shared libraries (generic parts an...",
	"created": "2012-11-03 16:24:12.463900",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		9009,
		15001,
		29001,
		32001,
		35001,
		39001,
		43001,
		46001,
		49001,
		51001,
		52001
	],
	"modified": "2013-06-24 15:24:53.175510",
	"closed": true,
	"issue": 6822078
}