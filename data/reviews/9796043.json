{
	"description": "runtime: fix signal handling on Plan 9\n\nThis CL does two things:\n\n1. Reorganizes the signal handling code in preparation for\n   changes which add support for os/signal on Plan 9.\n\n2. Fixes a regression introduced in revision 4cb93e2900d0.\n\n   That revision changed runtime\u00b7memmove to use SSE MOVOU\n   instructions for sizes between 17 and 256 bytes. We were\n   using memmove to save a copy of the note string during\n   the note handler. The Plan 9 kernel does not allow the\n   use of floating point in note handlers (which includes\n   MOVOU since it touches the XMM registers).\n\n   Arguably, runtime\u00b7memmove should not be using MOVOU when\n   GO386=387 but that wouldn't help us on amd64. It's very\n   important that we guard against any future changes so we\n   use a simple copy loop instead.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"ality@pbrane.org",
		"paurea@gmail.com",
		"lucio.dere@gmail.com",
		"seed@mail.nanosouffle.net",
		"r@golang.org",
		"cnielsen@pobox.com",
		"minux.ma@gmail.com",
		"jeremyjackins@gmail.com"
	],
	"messages": [
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the good work, Anthony, it is well beyond my abilities.  I'd like Gorka to inspect it, he's been working along these lines for a while, but I personally can't compare your efforts meaningfully.\n\nLucio.\n\nPS: There's a double blank line in os_plan9_386.c:36,37 that has been bugging me for a few months now, please remove one of them while you can :-)\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9.c\nFile src/pkg/runtime/os_plan9.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9.c#newcode328\nsrc/pkg/runtime/os_plan9.c:328: }\nCould we please use figurative constants for the switch cases? I would think the above would be clearer?  Also, we're losing the notesig message when we overwrite it, is that unavoidable and advisable?  In all other respects, I really think this is a welcome improvement.\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9_386.c\nFile src/pkg/runtime/os_plan9_386.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9_386.c#newcode25\nsrc/pkg/runtime/os_plan9_386.c:25: runtime\u00b7printf(\"gs\t%x\\n\", u->gs);\nI'd like to fix the format size to 8 hex digits, possible preceded by the conventional 0x (%#8.8x, if I'm not mistaken)?  There are many such inconsistencies, one less would be nice.",
			"disapproval": false,
			"date": "2013-05-27 04:39:34.098870",
			"approval": false
		},
		{
			"sender": "paurea@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 27, 2013 at 6:39 AM, <lucio.dere@gmail.com> wrote:\r\n\r\n> Thanks for the good work, Anthony, it is well beyond my abilities.  I'd\r\n> like Gorka to inspect it, he's been working along these lines for a\r\n> while, but I personally can't compare your efforts meaningfully.\r\n>\r\n> Lucio.\r\n>\r\n> PS: There's a double blank line in os_plan9_386.c:36,37 that has been\r\n> bugging me for a few months now, please remove one of them while you can\r\n> :-)\r\n>\r\n>\r\nAs far as I can see this has no real intersection (I mean other than\r\nmodifying the\r\nsame file and probably the same interfaces) with the things I was changing.\r\n\r\nThe things I was trying to fix where:\r\n\r\n1) not having a shared stack while forking and dealing having a note while\r\nforking\r\nin a clean way.\r\n2) using alarm for timeouts in http/net\r\n\r\nSome of my stuff will need mild rewrite, which is probably good to make it\r\nmore general,\r\nbut they are not earth shattering changes.\r\n\r\nDo you have a Raspberry Pi, Anthony?\r\n\r\nG.\r\n",
			"disapproval": false,
			"date": "2013-05-27 08:33:12.176130",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/runtime.c#newcode175\nsrc/pkg/runtime/runtime.c:175: n = n*16 + *p++ - 'a';\nYou've forgotten to add 10 for 'a' to 'f' (and 'A' to 'F' below).",
			"disapproval": false,
			"date": "2013-05-30 10:12:03.192440",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 6/2/13, Christopher Nielsen <cnielsen@pobox.com> wrote:\r\n> I'm with Anthony on changing memmove. Not only is it not a good idea,\r\n> I doubt it would be accepted.\r\n>\r\nOK, count me in too.  It is, after all, just three lines of code\r\ninstead of a function call.\r\n\r\nLucio.\r\n",
			"disapproval": false,
			"date": "2013-06-03 04:26:49.736360",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this will pass muster without a much clearer description.  But it is a critical update and we ought to get it approved as quickly as possible.\n\nI wish I could help, but this is still somewhat beyond my understanding of how things work.\n\nThanks, Anthony, I particularly like the case labels, they stand out as clearly as I could wish for.\n\nRegarding SSE2, I can't shrug off the feeling that we may want to look at a GOARCH=SSE2 instead of GOARCH=386 (which may then be clearer as GOARCH=387) + GO386=387.  It sounds a little excessive and doesn't entirely deal with the many ARM subspecies, but maybe there is a middle road further along.\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/os_plan9.c\nFile src/pkg/runtime/os_plan9.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/os_plan9.c#newcode310\nsrc/pkg/runtime/os_plan9.c:310: runtime\u00b7panicstring(\"call of nil func value\");\nThis is only invoked if g->sigpc == 0 _and_ g->sigcode1 < 0x1000.  In the original, g->sigpc == 0 sufficed.  I don't really understand the code, so I can't be sure, but I'd rather raise the question now than try to debug it later: is it deliberate or an oversight?\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/os_plan9_386.c\nFile src/pkg/runtime/os_plan9_386.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/os_plan9_386.c#newcode77\nsrc/pkg/runtime/os_plan9_386.c:77: // runtime\u00b7memmove here since it will use SSE instructions for big\nI know we need to move on here, but the final verdict on the right approach to SSE2 hasn't been passed yet.  Could you please change the comment and maybe even log an issue so we re-visit this once SSE2 is addressed?\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/runtime.c#newcode187\nsrc/pkg/runtime/runtime.c:187: if(f)\nAt minimum, I'd start with f = 1, change its value to -1 if we encounter a leading \"-\" (f *= -1) and skip this test.  But that may be just me.\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/signals_plan9.h\nFile src/pkg/runtime/signals_plan9.h (right):\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/signals_plan9.h#newcode8\nsrc/pkg/runtime/signals_plan9.h:8: #define D SigDefault\nGorka has added I -> SigIgnore and code to match, maybe we ought to include that here, now? There may be a need for further discussion?",
			"disapproval": false,
			"date": "2013-06-01 05:26:13.660140",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9.c\nFile src/pkg/runtime/os_plan9.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9.c#newcode328\nsrc/pkg/runtime/os_plan9.c:328: }\nOn 2013/05/27 04:39:34, lucio wrote:\n> Could we please use figurative constants for the switch cases? I would think the\n> above would be clearer?  Also, we're losing the notesig message when we\n> overwrite it, is that unavoidable and advisable?  In all other respects, I\n> really think this is a welcome improvement.\n\nDone.\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9_386.c\nFile src/pkg/runtime/os_plan9_386.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/os_plan9_386.c#newcode25\nsrc/pkg/runtime/os_plan9_386.c:25: runtime\u00b7printf(\"gs\t%x\\n\", u->gs);\nOn 2013/05/27 04:39:34, lucio wrote:\n> I'd like to fix the format size to 8 hex digits, possible preceded by the\n> conventional 0x (%#8.8x, if I'm not mistaken)?  There are many such\n> inconsistencies, one less would be nice.\n\nThe runtime\u00b7printf function is very simple; it doesn't accept any format\nflags. It will also add the \"0x\" prefix automatically for %x and %X.\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/5001/src/pkg/runtime/runtime.c#newcode175\nsrc/pkg/runtime/runtime.c:175: n = n*16 + *p++ - 'a';\nOn 2013/05/30 10:12:03, lucio wrote:\n> You've forgotten to add 10 for 'a' to 'f' (and 'A' to 'F' below).\n\nDone.",
			"disapproval": false,
			"date": "2013-05-31 22:26:54.858170",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 6/1/13, ality@pbrane.org <ality@pbrane.org> wrote:\r\n> Reviewers: ality, paurea, lucio,\r\n>\r\n...\r\n>\r\n> The runtime\u00b7printf function is very simple; it doesn't accept any format\r\n> flags. It will also add the \"0x\" prefix automatically for %x and %X.\r\n>\r\nOK, that makes it as consistent as I could ask for.  Thanks.\r\n\r\nLucio.\r\n",
			"disapproval": false,
			"date": "2013-06-01 05:26:57.747230",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the comments, Lucio!\n\nI'm going to write the CL description and\nthen send this out for review on golang-dev.\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/os_plan9.c\nFile src/pkg/runtime/os_plan9.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/os_plan9.c#newcode310\nsrc/pkg/runtime/os_plan9.c:310: runtime\u00b7panicstring(\"call of nil func value\");\nOn 2013/06/01 05:26:13, lucio wrote:\n> This is only invoked if g->sigpc == 0 _and_ g->sigcode1 < 0x1000.  In the\n> original, g->sigpc == 0 sufficed.  I don't really understand the code, so I\n> can't be sure, but I'd rather raise the question now than try to debug it later:\n> is it deliberate or an oversight?\n\nThis is deliberate. Go programs can recover from nil pointer\ndeferences including struct field accesses offset from nil\n(this is the sigcode1 < 0x1000 heuristic). The tests for this\nare in test/nilptr.go.\n\nOther faults cause the program to print a traceback and exit.\n\nIf g->sigpc == 0, the fault address (sigcode1) will also be\nzero. This only happens when the program calls a nil func,\nsimilar to doing the following in C:\n\nvoid\nmain(void)\n{\n    void (*f)(void);\n\n    f = (void (*)(void))0;\n    f();\n}\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/runtime.c#newcode187\nsrc/pkg/runtime/runtime.c:187: if(f)\nOn 2013/06/01 05:26:13, lucio wrote:\n> At minimum, I'd start with f = 1, change its value to -1 if we encounter a\n> leading \"-\" (f *= -1) and skip this test.  But that may be just me.\n\nYes, I would have wrote this a little differently also but\nI simply copied this function from cmd/ld/lib.c, changed the\nvariable name to p and swapped the first <= comparison in\neach if/while to match the idiom in the rest of the runtime.\n\nI think doing it this way (and pointing it out ahead of time)\nwill mean less overhead during review.\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/signals_plan9.h\nFile src/pkg/runtime/signals_plan9.h (right):\n\nhttps://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/signals_plan9.h#newcode8\nsrc/pkg/runtime/signals_plan9.h:8: #define D SigDefault\nOn 2013/06/01 05:26:13, lucio wrote:\n> Gorka has added I -> SigIgnore and code to match, maybe we ought to include that\n> here, now? There may be a need for further discussion?\n\nI think we can wait on this one. I want to start\nworking on the os/signal package once I get this\nCL submitted and that might lead to other similar\nchanges.",
			"disapproval": false,
			"date": "2013-06-01 16:53:54.623900",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ality@pbrane.org, paurea@gmail.com, lucio.dere@gmail.com, seed@mail.nanosouffle.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-01 17:58:24.786180",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Note that the atolwhex code is not new. It was copied from\r\ncmd/ld/lib.c with the variable s changed to p and the first\r\ncomparision in each if/while swapped to match the idiom of\r\nthe other runtime code.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-06-01 18:02:13.420760",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "atolwhex! my old friend.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-06-01 19:52:28.453050",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"seed@mail.nanosouffle.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c\nFile src/pkg/runtime/os_plan9_386.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode78\nsrc/pkg/runtime/os_plan9_386.c:78: // copies. The Plan 9 kernel doesn't allow floating point in note\nit really shouldn't do that. please file a bug and mark a TODO here. without that fixed, of course, what you're doing is fine.\n\nhttps://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode83\nsrc/pkg/runtime/os_plan9_386.c:83: m->notesig[i] = note[i];\ni think you miss the terminating '\\0'",
			"disapproval": false,
			"date": "2013-06-01 20:00:22.320060",
			"approval": false
		},
		{
			"sender": "paurea@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">\r\n> https://codereview.appspot.**com/9796043/diff/30010/src/**\r\n> pkg/runtime/signals_plan9.h#**newcode8<https://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/signals_plan9.h#newcode8>\r\n> src/pkg/runtime/signals_plan9.**h:8: #define D SigDefault\r\n> On 2013/06/01 05:26:13, lucio wrote:\r\n>\r\n>> Gorka has added I -> SigIgnore and code to match, maybe we ought to\r\n>>\r\n> include that\r\n>\r\n>> here, now? There may be a need for further discussion?\r\n>>\r\n>\r\n> I think we can wait on this one. I want to start\r\n> working on the os/signal package once I get this\r\n> CL submitted and that might lead to other similar\r\n> changes.\r\n>\r\n> https://codereview.appspot.**com/9796043/<https://codereview.appspot.com/9796043/>\r\n>\r\n\r\nThis Sigignore was added to be able to use alarm for timeouts. If a more\r\ncomprehensive\r\nos/signal is added, there may be a better way to deal with it. We do need\r\nto consider alarm\r\nthere, though, if we want to do timeouts using alarm.\r\n\r\n\r\nG.\r\n\r\n\r\nG.\r\n",
			"disapproval": false,
			"date": "2013-06-01 20:13:15.306690",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds we can agree to leave it for later, on condition that Anthony\r\ndoesn't have to re-invent a wheel Gorka has already constructed.  I've\r\nadded the SigIgnore in my testing so that I can synchronise with\r\nGorka, but it is proving a difficult process.\r\n\r\nIt helps that things seem to be converging and that my understanding\r\nis slowly improving.\r\n\r\nLucio.\r\n\r\nOn 6/1/13, Gorka Guardiola <paurea@gmail.com> wrote:\r\n>>\r\n>> https://codereview.appspot.**com/9796043/diff/30010/src/**\r\n>> pkg/runtime/signals_plan9.h#**newcode8<https://codereview.appspot.com/9796043/diff/30010/src/pkg/runtime/signals_plan9.h#newcode8>\r\n>> src/pkg/runtime/signals_plan9.**h:8: #define D SigDefault\r\n>> On 2013/06/01 05:26:13, lucio wrote:\r\n>>\r\n>>> Gorka has added I -> SigIgnore and code to match, maybe we ought to\r\n>>>\r\n>> include that\r\n>>\r\n>>> here, now? There may be a need for further discussion?\r\n>>>\r\n>>\r\n>> I think we can wait on this one. I want to start\r\n>> working on the os/signal package once I get this\r\n>> CL submitted and that might lead to other similar\r\n>> changes.\r\n>>\r\n>> https://codereview.appspot.**com/9796043/<https://codereview.appspot.com/9796043/>\r\n>>\r\n>\r\n> This Sigignore was added to be able to use alarm for timeouts. If a more\r\n> comprehensive\r\n> os/signal is added, there may be a better way to deal with it. We do need\r\n> to consider alarm\r\n> there, though, if we want to do timeouts using alarm.\r\n>\r\n>\r\n> G.\r\n>\r\n>\r\n> G.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-02 04:57:36.805660",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "See https://codereview.appspot.com/9788043/ for an attempt to address\r\nthe SSE2 issue.\r\n\r\nLucio.\r\n\r\n\r\nOn 6/1/13, r@golang.org <r@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c\r\n> File src/pkg/runtime/os_plan9_386.c (right):\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode78\r\n> src/pkg/runtime/os_plan9_386.c:78: // copies. The Plan 9 kernel doesn't\r\n> allow floating point in note\r\n> it really shouldn't do that. please file a bug and mark a TODO here.\r\n> without that fixed, of course, what you're doing is fine.\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode83\r\n> src/pkg/runtime/os_plan9_386.c:83: m->notesig[i] = note[i];\r\n> i think you miss the terminating '\\0'\r\n>\r\n> https://codereview.appspot.com/9796043/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-02 05:45:38.862080",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"seed@mail.nanosouffle.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nLucio,\n\nI don't think it's a good idea to change memmove\njust for Plan 9. IMO, it's better to work around\nit here in the note handler until the restriction\nin the kernel is removed.\n\nhttps://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c\nFile src/pkg/runtime/os_plan9_386.c (right):\n\nhttps://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode78\nsrc/pkg/runtime/os_plan9_386.c:78: // copies. The Plan 9 kernel doesn't allow floating point in note\nOn 2013/06/01 20:00:22, r wrote:\n> it really shouldn't do that. please file a bug and mark a TODO here. without\n> that fixed, of course, what you're doing is fine.\n\nI'll send a mail to 9fans. TODO added.\n\nhttps://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode83\nsrc/pkg/runtime/os_plan9_386.c:83: m->notesig[i] = note[i];\nOn 2013/06/01 20:00:22, r wrote:\n> i think you miss the terminating '\\0'\n\nDone.",
			"disapproval": false,
			"date": "2013-06-02 09:59:20.453820",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm neutral, although the presence of many invocations of\r\nruntime.memmove() in a Plan 9 context concerns me.\r\n\r\nActually, I take that back.  Plan 9 will need a memmove() without\r\nMOVOUs in note handlers for a while, let's make one up\r\n(runtime.9memmv(), perhaps) and use it whenever appropriate (just as\r\nyou did with the one in os_plan9_386.c) until we're ready to do\r\nbetter.  Then we can drop it.\r\n\r\nThat is not to say that we can't postpone this suggestion till after\r\nthis CL has been submitted.  I'll do the work, if others agree with\r\nit.\r\n\r\nLucio.\r\n\r\nPS: I have a feeling that lifting the floating point restriction in\r\nthe Plan 9 kernel will not be easy or quick.  Making a special case\r\nfor MOVOUs could be even more difficult.\r\n\r\nOn 6/2/13, ality@pbrane.org <ality@pbrane.org> wrote:\r\n> PTAL\r\n>\r\n> Lucio,\r\n>\r\n> I don't think it's a good idea to change memmove\r\n> just for Plan 9. IMO, it's better to work around\r\n> it here in the note handler until the restriction\r\n> in the kernel is removed.\r\n>\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c\r\n> File src/pkg/runtime/os_plan9_386.c (right):\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode78\r\n> src/pkg/runtime/os_plan9_386.c:78: // copies. The Plan 9 kernel doesn't\r\n> allow floating point in note\r\n> On 2013/06/01 20:00:22, r wrote:\r\n>> it really shouldn't do that. please file a bug and mark a TODO here.\r\n> without\r\n>> that fixed, of course, what you're doing is fine.\r\n>\r\n> I'll send a mail to 9fans. TODO added.\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode83\r\n> src/pkg/runtime/os_plan9_386.c:83: m->notesig[i] = note[i];\r\n> On 2013/06/01 20:00:22, r wrote:\r\n>> i think you miss the terminating '\\0'\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.com/9796043/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-02 11:16:29.283970",
			"approval": false
		},
		{
			"sender": "cnielsen@pobox.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm with Anthony on changing memmove. Not only is it not a good idea,\r\nI doubt it would be accepted.\r\n\r\nOn Sun, Jun 2, 2013 at 2:59 AM,  <ality@pbrane.org> wrote:\r\n> PTAL\r\n>\r\n> Lucio,\r\n>\r\n> I don't think it's a good idea to change memmove\r\n> just for Plan 9. IMO, it's better to work around\r\n> it here in the note handler until the restriction\r\n> in the kernel is removed.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c\r\n> File src/pkg/runtime/os_plan9_386.c (right):\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode78\r\n> src/pkg/runtime/os_plan9_386.c:78: // copies. The Plan 9 kernel doesn't\r\n> allow floating point in note\r\n> On 2013/06/01 20:00:22, r wrote:\r\n>>\r\n>> it really shouldn't do that. please file a bug and mark a TODO here.\r\n>\r\n> without\r\n>>\r\n>> that fixed, of course, what you're doing is fine.\r\n>\r\n>\r\n> I'll send a mail to 9fans. TODO added.\r\n>\r\n>\r\n> https://codereview.appspot.com/9796043/diff/48001/src/pkg/runtime/os_plan9_386.c#newcode83\r\n> src/pkg/runtime/os_plan9_386.c:83: m->notesig[i] = note[i];\r\n> On 2013/06/01 20:00:22, r wrote:\r\n>>\r\n>> i think you miss the terminating '\\0'\r\n>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.com/9796043/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n\r\n\r\n\r\n--\r\nChristopher Nielsen\r\n\"They who can give up essential liberty for temporary safety, deserve\r\nneither liberty nor safety.\" --Benjamin Franklin\r\n\"The tree of liberty must be refreshed from time to time with the\r\nblood of patriots & tyrants.\" --Thomas Jefferson\r\n",
			"disapproval": false,
			"date": "2013-06-02 19:30:46.799320",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 2, 2013 at 2:02 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n\r\n> Note that the atolwhex code is not new. It was copied from\r\n> cmd/ld/lib.c with the variable s changed to p and the first\r\n>\r\nactually, atolwhex is in cmd/[568]l/pass.c\r\ni wonder if we should consolidate those three copies into cmd/ld/lib.c?\r\n\r\n> comparision in each if/while swapped to match the idiom of\r\n> the other runtime code.\r\n>\r\n\r\nand note there is another private implementation of atolwhex (using strtol)\r\nin\r\nlib9/flag.c\r\n",
			"disapproval": false,
			"date": "2013-06-02 19:40:42.422470",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 6/2/13, minux <minux.ma@gmail.com> wrote:\r\n> actually, atolwhex is in cmd/[568]l/pass.c\r\n> i wonder if we should consolidate those three copies into cmd/ld/lib.c?\r\n>\r\nWon't do much for this CL, but it would be a simplification.\r\n\r\nLucio.\r\n",
			"disapproval": false,
			"date": "2013-06-03 04:38:10.037020",
			"approval": false
		},
		{
			"sender": "jeremyjackins@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"seed@mail.nanosouffle.net",
				"r@golang.org",
				"cnielsen@pobox.com",
				"minux.ma@gmail.com",
				"jeremyjackins@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do you guys have any thoughts on the following?\n\n% make.rc\n...\npkg/go/doc\npkg/go/build\ncmd/go\ngo_bootstrap 18145: bad sys call number 52 pc 53057\nsys: bad sys call pc=0x00053057\nPC=0x53057\n\n\ngoroutine 1 [syscall]:\nsyscall.Syscall()\n\t/usr/ec2/src/go/src/pkg/syscall/asm_plan9_386.s:17 +0x5\nsyscall.Stat(0x1, 0x0, 0x0, 0x1, 0x107a3ee0, ...)\n\t/usr/ec2/src/go/src/pkg/syscall/zsyscall_plan9_386.go:222 +0x91\nax\t0xffffffff\nbx\t0x30746f34\ncx\t0x10733640\ndx\t0xea60\ndi\t0x10760200\nsi\t0x2200\nbp\t0x2b1380\nsp\t0x30746f1c\npc\t0x53057\nflags\t0x10202\ncs\t0xe02b\nfs\t0xe033\ngs\t0xe033\n(hang)\n\nWithout this CL I just get:\n\n% make.rc\n...\npkg/go/doc\npkg/go/build\ncmd/go\nruntime: signal received on thread not created by Go.\n(hang)\n\nIt's probably related to my strange environment (xen kernel on Amazon EC2, cputype=386); if I copy over the binaries from my real plan9/386 machine which can run make.rc successfully, I can run go programs but I still see \"bad sys call\" messages:\n\n% go run hello.go \ngo 18746: bad sys call number 52 pc 58be7\ngo 18746: suicide: sys: bad sys call pc=0x00058be7\nhello 18754: bad sys call number 52 pc 17217\nhello, world\nhello 18754: suicide: sys: bad sys call pc=0x00017217\n%",
			"disapproval": false,
			"date": "2013-06-03 21:28:17.310170",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"seed@mail.nanosouffle.net",
				"r@golang.org",
				"cnielsen@pobox.com",
				"minux.ma@gmail.com",
				"jeremyjackins@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please hold on reviewing this. In my testing, I've found\nanother related bug and I'm working on a fix.\n\nOn 2013/06/03 21:28:17, jnj wrote:\n> Do you guys have any thoughts on the following?\n>\n> go_bootstrap 18145: bad sys call number 52 pc 53057\n> sys: bad sys call pc=0x00053057\n> PC=0x53057\n\nThat's curious. Can you send me the go_bootstrap binary?\n\nThanks,\n  Anthony",
			"disapproval": false,
			"date": "2013-06-03 23:09:19.524530",
			"approval": false
		},
		{
			"sender": "jeremyjackins@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"ality@pbrane.org",
				"paurea@gmail.com",
				"lucio.dere@gmail.com",
				"seed@mail.nanosouffle.net",
				"r@golang.org",
				"cnielsen@pobox.com",
				"minux.ma@gmail.com",
				"jeremyjackins@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 23:09:19, ality wrote:\n> Please hold on reviewing this. In my testing, I've found\n> another related bug and I'm working on a fix.\n> \n> On 2013/06/03 21:28:17, jnj wrote:\n> > Do you guys have any thoughts on the following?\n> >\n> > go_bootstrap 18145: bad sys call number 52 pc 53057\n> > sys: bad sys call pc=0x00053057\n> > PC=0x53057\n> \n> That's curious. Can you send me the go_bootstrap binary?\n> \n> Thanks,\n>   Anthony\n\nIs this CL still alive/relevant?",
			"disapproval": false,
			"date": "2013-08-04 21:33:24.116550",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 9796043: runtime: fix signal handling on Plan 9",
	"created": "2013-05-26 21:32:11.353830",
	"patchsets": [
		1,
		2001,
		5001,
		30010,
		48001,
		58001
	],
	"modified": "2013-08-04 21:33:24.842490",
	"closed": false,
	"issue": 9796043
}