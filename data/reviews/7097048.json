{
	"description": "cmd/vet: detect misuse of atomic.Add*\n\nRe-assigning the return value of an atomic operation to the same variable being operated is a common mistake:\n\nx = atomic.AddUint64(&x, 1)\n\nAdd this check to go vet.\n\nFixes issue 4065.",
	"cc": [
		"dvyukov@google.com",
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-12 11:50:39.130470",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-13 02:31:02.824130",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7097048/diff/2001/src/cmd/vet/main.go\nFile src/cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/7097048/diff/2001/src/cmd/vet/main.go#newcode210\nsrc/cmd/vet/main.go:210: // walkCall walks a call expression.\ncomment is wrong",
			"disapproval": false,
			"date": "2013-01-12 11:24:32.872470",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/12 11:24:40, divoxx wrote:\n> Hello mailto:dvyukov@google.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\nI am not a good reviewer for this code. I never worked with AST.",
			"disapproval": false,
			"date": "2013-01-12 11:28:08.745020",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7097048/diff/6001/src/cmd/vet/atomic.go\nFile src/cmd/vet/atomic.go (right):\n\nhttps://codereview.appspot.com/7097048/diff/6001/src/cmd/vet/atomic.go#newcode20\nsrc/cmd/vet/atomic.go:20: if call, ok := rexp.(*ast.CallExpr); ok {\nthe indentation level is crazy: you could say:\n\ncall, ok := rexp.(*ast.CallExpr)\nif !ok {\n  continue\n}\nsel, ok := ...\nif !ok {\n  continue\n}\netc.\n\nhttps://codereview.appspot.com/7097048/diff/6001/src/cmd/vet/atomic.go#newcode27\nsrc/cmd/vet/atomic.go:27: name := e.X.(*ast.Ident).Name\nthe type assertion should be sanitized\ne.Op should be checked for token.AND",
			"disapproval": false,
			"date": "2013-01-12 11:34:24.477600",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go\nFile src/cmd/vet/atomic.go (right):\n\nhttps://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go#newcode1\nsrc/cmd/vet/atomic.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nwe are now in 2013\n\nhttps://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go#newcode80\nsrc/cmd/vet/atomic.go:80: }\ncan you check your code works properly on:\n\nvar s struct { Counter uint64 }\nz := atomic.AddUint64(&s.Counter, 1)\np := &s.Counter\nvar u [2]uint64\nu[0] = atomic.AddUint64(p, 1)\n\nthanks.",
			"disapproval": false,
			"date": "2013-01-12 23:48:01.725720",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-13 06:00:13.821280",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-12 11:35:04.820870",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-12 23:28:31.424690",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-12 11:24:40.284150",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/13 02:31:02, divoxx wrote:\n> Hello mailto:dvyukov@google.com, mailto:golang-dev@googlegroups.com, mailto:remyoudompheng@gmail.com\n> (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nThe latest patch include support for checking of structs, pointer to structs, slices/arrays and slice/arrays of pointers.\n\nIt has been refactored to be more readable and easier to understand. New test cases included.",
			"disapproval": false,
			"date": "2013-01-13 02:36:37.629340",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/12 23:48:01, remyoudompheng wrote:\n> https://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go\n> File src/cmd/vet/atomic.go (right):\n> \n> https://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go#newcode1\n> src/cmd/vet/atomic.go:1: // Copyright 2012 The Go Authors. All rights reserved.\n> we are now in 2013\n> \n> https://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go#newcode80\n> src/cmd/vet/atomic.go:80: }\n> can you check your code works properly on:\n> \n> var s struct { Counter uint64 }\n> z := atomic.AddUint64(&s.Counter, 1)\n> p := &s.Counter\n> var u [2]uint64\n> u[0] = atomic.AddUint64(p, 1)\n> \n> thanks.\n\nUnless I'm missing something the code you posted should be fine, shouldn't it? You asking to make sure vet does not show the warning/err for this?",
			"disapproval": false,
			"date": "2013-01-12 23:51:20.590410",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No, the problem is that your code panicked on my examples because you\r\nhadn't addressed all comments.\r\n\r\nMy examples were not supposed to raise any warning, they look like proper\r\nusage.\r\nOn 13 Jan 2013 00:51, <divoxx@gmail.com> wrote:\r\n\r\n> On 2013/01/12 23:48:01, remyoudompheng wrote:\r\n>\r\n>> https://codereview.appspot.**com/7097048/diff/9002/src/cmd/**\r\n>> vet/atomic.go<https://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go>\r\n>> File src/cmd/vet/atomic.go (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7097048/diff/9002/src/cmd/**\r\n> vet/atomic.go#newcode1<https://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go#newcode1>\r\n>\r\n>> src/cmd/vet/atomic.go:1: // Copyright 2012 The Go Authors. All rights\r\n>>\r\n> reserved.\r\n>\r\n>> we are now in 2013\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7097048/diff/9002/src/cmd/**\r\n> vet/atomic.go#newcode80<https://codereview.appspot.com/7097048/diff/9002/src/cmd/vet/atomic.go#newcode80>\r\n>\r\n>> src/cmd/vet/atomic.go:80: }\r\n>> can you check your code works properly on:\r\n>>\r\n>\r\n>  var s struct { Counter uint64 }\r\n>> z := atomic.AddUint64(&s.Counter, 1)\r\n>> p := &s.Counter\r\n>> var u [2]uint64\r\n>> u[0] = atomic.AddUint64(p, 1)\r\n>>\r\n>\r\n>  thanks.\r\n>>\r\n>\r\n> Unless I'm missing something the code you posted should be fine,\r\n> shouldn't it? You asking to make sure vet does not show the warning/err\r\n> for this?\r\n>\r\n> https://codereview.appspot.**com/7097048/<https://codereview.appspot.com/7097048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-13 05:42:27.569980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Add this:\n\nfunc (f *File) gofmt(x ast.Expr) string {\n    f.buf.Reset()\n    printer.Fprint(&f.b, f.fset, x)\n    return f.String()\n}\n\nThen you can use it in the error message and the tester. Once you have\n\nlhs = atomic.AddXXX(&arg)\n\nyou can check if f.gofmt(lhs) == f.gofmt(arg).",
			"disapproval": false,
			"date": "2013-01-18 20:36:51.873450",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-21 16:42:52.378500",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ,\r\n\r\nI changed the implementation to do as you suggested. Let me know if that is what you meant.\r\n\r\nCheers\r\n\r\nOn Jan 18, 2013, at 12:36 PM, rsc@golang.org wrote:\r\n\r\n> Add this:\r\n> \r\n> func (f *File) gofmt(x ast.Expr) string {\r\n>    f.buf.Reset()\r\n>    printer.Fprint(&f.b, f.fset, x)\r\n>    return f.String()\r\n> }\r\n> \r\n> Then you can use it in the error message and the tester. Once you have\r\n> \r\n> lhs = atomic.AddXXX(&arg)\r\n> \r\n> you can check if f.gofmt(lhs) == f.gofmt(arg).\r\n> \r\n> https://codereview.appspot.com/7097048/\r\n\r\n",
			"disapproval": false,
			"date": "2013-01-21 16:44:15.076530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There should be a 'Fixes issue NNN.' at the bottom of the CL description, right?\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/atomic.go\nFile src/cmd/vet/atomic.go (right):\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/atomic.go#newcode19\nsrc/cmd/vet/atomic.go:19: \nif len(n.Lhs) != len(n.Rhs) {\n    return\n}\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/atomic.go#newcode20\nsrc/cmd/vet/atomic.go:20: for i, rexp := range n.Rhs {\ns/rexp/right/\ns/lhe/left/ below\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/atomic.go#newcode21\nsrc/cmd/vet/atomic.go:21: // Skip If the expr in the right side is not a method call\nCan tighten this up considerably just by spacing:\n\n// Look for call to atomic.AddXXX with at least one argument.\ncall, ok := right.(*ast.CallExpr)\nif !ok || len(call.Args) < 1 {\n    continue\n}\nsel, ok := call.Func.(*ast.SelectorExpr)\nif !ok {\n    continue\n}\nif pkg, ok := sel.X.(*ast.Ident); !ok || pkg.Name != \"atomic\" {\n    continue\n}\nswitch sel.Sel.Name {\ndefault:\n    continue\ncase \"AddInt32\", \"AddInt64\", ...:\n}\n\n// Check that return value is not assigned to atomic word.\nleft := n.Lhs[i]\narg := call.Args[0]\n<body from below here>\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/atomic.go#newcode48\nsrc/cmd/vet/atomic.go:48: func (f *File) checkAtomicAddAssignment(call *ast.CallExpr, lhe ast.Expr) {\nsuggest swapping the arguments to match program: left = call\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/atomic.go#newcode49\nsrc/cmd/vet/atomic.go:49: switch arg := call.Args[0].(type) {\n\narg := call.Args[0]\nbroken := false\nif uarg, ok := arg.(*ast.UnaryExpr); ok && uarg.Op == token.AND {\n    broken = gofmt(lhe) == gofmt(uarg.X)\n} else if star, ok := lhe.(*ast.StarExpr); ok {\n    broken = gofmt(star.X) == gofmt(arg)\n}\n\nif broken {\n    f.Warn(lhe.Pos(), \"direct assignment to atomic value\")\n}\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/atomic.go#newcode109\nsrc/cmd/vet/atomic.go:109: /* TEST CASE */\nNone of the other files have this comment. Drop.\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/main.go\nFile src/cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/7097048/diff/24001/src/cmd/vet/main.go#newcode272\nsrc/cmd/vet/main.go:272: // goFmt returns a string representation of the expression\nPlease call this plain gofmt not goFmt. It's confusing not to spell it like the command.",
			"disapproval": false,
			"date": "2013-01-23 03:20:24.644300",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-23 07:37:07.017870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-29 23:21:12.212090",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c8cd1f608cd2 ***\n\ncmd/vet: detect misuse of atomic.Add*\n\nRe-assigning the return value of an atomic operation to the same variable being operated is a common mistake:\n\nx = atomic.AddUint64(&x, 1)\n\nAdd this check to go vet.\n\nFixes issue 4065.\n\nR=dvyukov, golang-dev, remyoudompheng, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7097048\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-30 15:57:15.071820",
			"approval": false
		},
		{
			"sender": "divoxx@gmail.com",
			"recipients": [
				"divoxx@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-03-01 17:07:27.808350",
			"approval": false
		}
	],
	"owner_email": "divoxx@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "divoxx",
	"subject": "code review 7097048: cmd/vet: detect misuse of atomic.Add*",
	"created": "2013-01-12 11:12:22.625140",
	"patchsets": [
		1,
		2001,
		6001,
		10001,
		11004,
		15001,
		17001,
		9002,
		1006,
		9006,
		24001,
		30001
	],
	"modified": "2013-03-01 17:07:30.468530",
	"closed": true,
	"issue": 7097048
}