{
	"description": "encoding/json: faster encoding\n\nThe old code was caching per-type struct field info. Instead,\ncache type-specific encoding funcs, tailored for that\nparticular type to avoid unnecessary reflection at runtime.\nOnce the machine is built once, future encodings of that type\njust run the func.\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkCodeEncoder     48424939     36975320  -23.64%\n\nbenchmark                old MB/s     new MB/s  speedup\nBenchmarkCodeEncoder        40.07        52.48    1.31x\n\nAdditionally, the numbers seem stable now at ~52 MB/s, whereas\nthe numbers for the old code were all over the place: 11 MB/s,\n40 MB/s, 13 MB/s, 39 MB/s, etc.  In the benchmark above I compared\nagainst the best I saw the old code do.",
	"cc": [
		"rsc@golang.org",
		"adg@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-04 17:04:53.941740",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(obviously for after Go 1.1.  just getting off my laptop...)\r\n\r\n\r\n\r\nOn Sat, May 4, 2013 at 10:04 AM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> encoding/json: faster encoding\r\n>\r\n> The old code was caching per-type struct field info. Instead,\r\n> cache type-specific encoding funcs, tailored for that\r\n> particular type to avoid unnecessary reflection at runtime.\r\n> Once the machine is built once, future encodings of that type\r\n> just run the func.\r\n>\r\n> benchmark               old ns/op    new ns/op    delta\r\n> BenchmarkCodeEncoder     48424939     36975320  -23.64%\r\n>\r\n> benchmark                old MB/s     new MB/s  speedup\r\n> BenchmarkCodeEncoder        40.07        52.48    1.31x\r\n>\r\n> Additionally, the numbers seem stable now at ~52 MB/s, whereas\r\n> the numbers for the old code were all over the place: 11 MB/s,\r\n> 40 MB/s, 13 MB/s, 39 MB/s, etc.  In the benchmark above I compared\r\n> against the best I saw the old code do.\r\n>\r\n> Please review this at https://codereview.appspot.**com/9129044/<https://codereview.appspot.com/9129044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/encoding/json/decode_**test.go\r\n>   M src/pkg/encoding/json/encode.**go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-04 17:05:57.788000",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=r (assigned by bradfitz)",
			"disapproval": false,
			"date": "2013-05-14 22:15:03.264830",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by r)",
			"disapproval": false,
			"date": "2013-05-17 21:13:57.215130",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.\r\n\r\nThis CL is now 4 weeks old, without any feedback.\r\n\r\nI'll take a review from anybody, if encoding/json doesn't have an owner.\r\n\r\n\r\n\r\nOn Fri, May 17, 2013 at 2:13 PM, <gobot@golang.org> wrote:\r\n\r\n> R=rsc (assigned by r)\r\n>\r\n> https://codereview.appspot.**com/9129044/<https://codereview.appspot.com/9129044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:09:54.735620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Still having trouble getting through my inbox. How about this: I will\r\nreview this CL when the \"no more noise on golang-dev\" goes into effect.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:11:33.534080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I took a look at this CL. I understand that it is a bit like gob, in that\r\nit is using lots of closures, but I am not convinced that's a good thing.\r\nThe problem with closures is that they are opaque: you can't look at them,\r\nonly execute them. So they turn out to be difficult to debug. I've been\r\nthrough a few of those debugging sessions in gob and I don't want json to\r\nbecome like that. It is also telling that the code is using closures,\r\nmethod values, and ordinary functions. Too many mechanisms.\r\n\r\nI think the idea of precomputing the converter is fine, but can you do it\r\nwith an ordinary interface and type-specific implementations? It should\r\nboil down to the same thing, should be just as fast, and should be easy to\r\nconvert the current code to that form, but I think it will be easier to\r\nmaintain in the long run.\r\n\r\nAlso, can you move the code up where reflectValueQuoted was, in the same\r\norder that the switch did things, so that the common code snippets have a\r\nchance to be identified as common in the diffs?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-08-06 16:33:26.140330",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "also, gob needs a rewrite, now that we know how to write code like this.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-08-06 20:48:57.843960",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org (cc: gobot@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-07 16:35:44.014900",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nRearranged the code a bit to try to minimize patch size.  Not sure it\r\nhelped too much.\r\n\r\nAll closures gone now.  Looking at go tool pprof --svg, all the boxes have\r\nreadable names now.  I was concerned about this before too and was in the\r\nprocess of moving things to types (hence \"too many mechanisms\") but was\r\ntrying to keep the code smaller, hence some of the remaining closures.\r\n\r\n\r\n\r\n\r\nOn Wed, Aug 7, 2013 at 9:35 AM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello rsc@golang.org, adg@golang.org (cc: gobot@golang.org,\r\n> golang-dev@googlegroups.com, r@golang.org),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/9129044/<https://codereview.appspot.com/9129044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 16:37:30.412140",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5a51d54e34bb ***\n\nencoding/json: faster encoding\n\nThe old code was caching per-type struct field info. Instead,\ncache type-specific encoding funcs, tailored for that\nparticular type to avoid unnecessary reflection at runtime.\nOnce the machine is built once, future encodings of that type\njust run the func.\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkCodeEncoder     48424939     36975320  -23.64%\n\nbenchmark                old MB/s     new MB/s  speedup\nBenchmarkCodeEncoder        40.07        52.48    1.31x\n\nAdditionally, the numbers seem stable now at ~52 MB/s, whereas\nthe numbers for the old code were all over the place: 11 MB/s,\n40 MB/s, 13 MB/s, 39 MB/s, etc.  In the benchmark above I compared\nagainst the best I saw the old code do.\n\nR=rsc, adg\nCC=gobot, golang-dev, r\nhttps://codereview.appspot.com/9129044",
			"disapproval": false,
			"date": "2013-08-09 16:46:52.388920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9129044/diff/26001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/9129044/diff/26001/src/pkg/encoding/json/encode.go#newcode356\nsrc/pkg/encoding/json/encode.go:356: // buildTypeEncoder constructs an encoderFunc for a type.\ns/build/new/ throughout\n\nhttps://codereview.appspot.com/9129044/diff/26001/src/pkg/encoding/json/encode.go#newcode534\nsrc/pkg/encoding/json/encode.go:534: fieldFuncs []encoderFunc\nfieldEncs (match all the elemEnc)\n\nhttps://codereview.appspot.com/9129044/diff/26001/src/pkg/encoding/json/encode.go#newcode632\nsrc/pkg/encoding/json/encode.go:632: arrayEncoder encoderFunc\narrayEnc",
			"disapproval": false,
			"date": "2013-08-09 02:04:12.494430",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good.\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go#newcode233\nsrc/pkg/encoding/json/encode.go:233: if _, ok := r.(runtime.Error); ok {\nhow about\n\nswitch e := r.(type) {\ncase runtime.Error:\ncase error:\n  err = e\n  return\n}\npanic(r)\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go#newcode568\nsrc/pkg/encoding/json/encode.go:568: type encoderFunc func(e *encodeState, v reflect.Value, quoted bool)\na doc comment explaining what an encoderfunc should do would be nice\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go#newcode599\nsrc/pkg/encoding/json/encode.go:599: var wg sync.WaitGroup\nyou could also use \n\ndone := make(chan struct{})\n...\n  <-done\n...\nclose(done)\n\nwhich might be faster? I don't know.\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go#newcode608\nsrc/pkg/encoding/json/encode.go:608: // Might duplicate effort but won't hold other computations back.\nI don't think it will duplicate effort; you've already populated the cache with the wait func; any other encodings of this type will wait for you to build this f.\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go#newcode671\nsrc/pkg/encoding/json/encode.go:671: if v.Kind() == reflect.Ptr && v.IsNil() {\nshouldn't you let the marshaller implementation handle this case?\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go#newcode687\nsrc/pkg/encoding/json/encode.go:687: va := v.Addr()\nshouldn't the this func just be\n\nvalueIsMarshallerEncoder(e, v.Addr(), quoted)\n\n??\n\nhttps://codereview.appspot.com/9129044/diff/9001/src/pkg/encoding/json/encode.go#newcode757\nsrc/pkg/encoding/json/encode.go:757: float32Encoder = (floatEncoder(32)).encode\nvery nice",
			"disapproval": false,
			"date": "2013-07-03 00:09:01.271990",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 9129044: encoding/json: faster encoding",
	"created": "2013-05-04 16:50:59.840140",
	"patchsets": [
		1,
		2001,
		5001,
		3,
		9001,
		21001,
		23001,
		26001,
		33001
	],
	"modified": "2013-08-09 17:15:56.461450",
	"closed": true,
	"issue": 9129044
}