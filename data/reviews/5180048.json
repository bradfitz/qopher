{
	"description": "strings: init Replacer on first use\n\nRuss was concerned in an earlier CL about init-time\nwork.\n\nOnly somewhat related, there's Issue 2297 about reducing\ninit time load.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-04 20:52:42.712526",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks, but I don't think this is worth it.\nIf you are going to call a function, it might as\nwell do some work.\n\nThe big difference is between not calling a function\n(meaning the compiler can lay out the init in the\ndata segment with zero init-time cost, even discarding\nthe data when the variable being initialized isn't used)\nand calling a function (meaning the compiler always\ndoed the call during init, even if a program doesn't refer to\nthe variable being initialized).\n\nThe benefit in path/filepath was that the old way fell\ninto the 'zero cost'.  Once you're at non-zero cost you\nmight as well avoid the sync.Once.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-05 01:38:51.179175",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5180048: strings: init Replacer on first use",
	"created": "2011-10-04 20:52:13.044454",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2011-10-06 18:21:02.766624",
	"closed": true,
	"issue": 5180048
}