{
	"description": "syscall: correct Win32finddata definition\n\nFixes issue 3685.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"hcwfrichter@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's annoying, but I think we need to define new types and functions.\r\nSpecifically:\r\n\r\n1. Keep the old Win32finddata as is, but add a comment:\r\n// Win32finddata is an incorrect struct definition, preserved for\r\n// backwards compatibility. Use Win32finddata1 and the\r\n// FindFirstFile1 and FindNextFile1 functions instead.\r\ntype Win32finddata struct ...\r\n\r\n2. Add the correct definition as type Win32finddata1.\r\n\r\n3. Keep\r\nsyscall_windows.go:132: //sys\tFindFirstFile(name *uint16, data\r\n*Win32finddata) (handle Handle, err error) [failretval==InvalidHandle]\r\n= FindFirstFileW\r\nsyscall_windows.go:133: //sys\tFindNextFile(handle Handle, data\r\n*Win32finddata) (err error) = FindNextFileW\r\n\r\n4. Add two more lines for FindFirstFile1 and FindNextFile1, with the\r\nnew type for data.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-31 12:32:11.336051",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This breaks \"go api\" check, and I do not know what to do. Suggestions are welcome.\n\nAlex",
			"disapproval": false,
			"date": "2012-05-31 01:49:44.994670",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-31 01:49:23.662349",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-01 05:43:36.678038",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-02 16:51:49.043215",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=45d1063d8520 ***\n\nsyscall: correct Win32finddata definition\n\nFixes issue 3685.\n\nR=golang-dev, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6261053",
			"disapproval": false,
			"date": "2012-06-03 09:27:29.641381",
			"approval": false
		},
		{
			"sender": "hcwfrichter@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the 25th hour feedback.  I just noticed this CL is being considered for Go1.0.2, and I think that the approach here was wrong. \n\nI believe it violates the spirit of the \"go1\" promise \"Code that compiles in Go 1 should, with few exceptions, continue to compile and run throughout the lifetime of that version, even as we issue updates and bug fixes ...\"\n\nCode that used to compile and run (regardless of the potential for memory smashing) will now compile and NO LONGER run.  But the user won't know until runtime.\n\nCode that didn't run, still compiles and still won't work properly without a source code change that the user has no way to know is required until he gets a new runtime error.\n\nCode that does not yet exist could, in theory, try to use the still existing, but now \"disabled\" API (it will still show up in the docs won't it?), and then have to be changed again when it fails at runtime.\n\nNone of these seems intuitive or programmer friendly.\n\n\nAlex's original patch set 3 would appear to have been the proper choice for any of these cases; people will just recompile existing code and it would \"just work\".  Fix go1.txt to make the API checker happy with the actual Windows data structure.\n\nThis is not an API \"change\", it would just mean bringing go1.txt in line with reality for an OS specific data structure.\n\nOr perhaps I am missing some bigger issue?",
			"disapproval": false,
			"date": "2012-06-07 02:57:13.775636",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/07 04:23:18, rsc wrote:\n> \n> ... who wanted to be careful ...\n\nIsn't Go supposed to hold our hand here? It is very hard to think about bugs in your program, when you know that there are memory corruption issues in it.\n\n> ... That might still be worth doing.\n\nFair enough. But I still do not see how. Unless, you just want to honor \"you program will compile\" promise.\n\nAlex",
			"disapproval": false,
			"date": "2012-06-07 04:32:28.552530",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/07 04:44:21, rsc wrote:\n> You're right - the old struct is useless and would have caused crashes\n> (just mysterious ones). I misremembered the change. I thought it was\n> \n> [N]byte\n> [M]byte\n> \n> ->\n> \n> [N+1]byte\n> [M-1]byte\n> \n> but it is ->\n> \n> [N+1]byte\n> [M+1]byte\n> \n\nMajor cr...p, I know. I am all ashamed. :-)\n\nAlex",
			"disapproval": false,
			"date": "2012-06-07 04:46:42.094117",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You may be right. There is also CL 6244051. I'm going to talk to\r\nAndrew and others about it next week.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 04:01:29.430611",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/07 04:01:29, rsc wrote:\n> You may be right. ...\n\nI think he is. This case is broken any way you look at it:\n\n1) If you take my patch #3, then some old programs might not compile;\n\n2) If you take submitted change, then these programs will compile, but will certainly crash during execution.\n\nSo, it is a question of one out of 2 evils. I prefer 1).\n\nAlex",
			"disapproval": false,
			"date": "2012-06-07 04:17:34.383507",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 7, 2012 at 12:17 AM,  <alex.brainman@gmail.com> wrote:\r\n> 2) If you take submitted change, then these programs will compile, but\r\n> will certainly crash during execution.\r\n\r\nI would have preferred your change to leave the old behavior, so that\r\nsomeone who wanted to be careful could still write code that worked\r\nwith the original Go 1 structures (by interpreting the byte arrays\r\nthemselves). That might still be worth doing.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 04:23:18.759541",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're right - the old struct is useless and would have caused crashes\r\n(just mysterious ones). I misremembered the change. I thought it was\r\n\r\n[N]byte\r\n[M]byte\r\n\r\n->\r\n\r\n[N+1]byte\r\n[M-1]byte\r\n\r\nbut it is ->\r\n\r\n[N+1]byte\r\n[M+1]byte\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 04:44:21.947677",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 6, 2012 at 10:57 PM,  <hcwfrichter@gmail.com> wrote:\r\n> Sorry for the 25th hour feedback. \u00a0I just noticed this CL is being\r\n> considered for Go1.0.2, and I think that the approach here was wrong.\r\n\r\nIt's certainly true that we shouldn't do this for Go 1.0.2. Thank you\r\nfor reminding us.\r\n\r\nI have sent out CL 6298063, which hides the new system calls and\r\nstructures and implements the old ones using them. This avoids any\r\nvisible API change and still gives access to the 8.3 name. For Go 1.1,\r\nwe might do something to avoid the overhead of the translation.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-08 17:48:52.826084",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 6261053: syscall: correct Win32finddata definition",
	"created": "2012-05-31 01:43:29.895458",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		12001
	],
	"modified": "2012-06-07 04:46:42.279838",
	"closed": true,
	"issue": 6261053
}