{
	"description": "strings: better mean complexity for Count and Index.\n\nThe O(n+m) complexity is obtained probabilistically\nby using Rabin-Karp algorithm, which provides the needed complexity\nunless exceptional collisions occur, without memory allocation.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkIndexHard1         6532331      4045886  -38.06%\nBenchmarkIndexHard2         8178173      4038975  -50.61%\nBenchmarkIndexHard3         6973687      4042591  -42.03%\nBenchmarkCountHard1         6270864      4071090  -35.08%\nBenchmarkCountHard2         7838039      4072853  -48.04%\nBenchmarkCountHard3         6697828      4071964  -39.20%\nBenchmarkIndexTorture       2730546        28934  -98.94%\nBenchmarkCountTorture       2729622        29064  -98.94%\n\nFixes issue 4600.",
	"cc": [
		"rsc@golang.org",
		"donovanhide@gmail.com",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode59\nsrc/pkg/strings/strings.go:59: const Prime = 16777619\nOn 2013/02/14 02:44:07, rsc wrote:\n> // Rabin-Karp string matching.\n> const Prime = 16777619\n\ns/Prime/prime/ ?",
			"disapproval": false,
			"date": "2013-02-14 08:13:59.495060",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-14 00:01:22.416180",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would be interested in benchmark comparisons with, for example, KMP-like algorithms which I think were proposed last year to replace strings.Index",
			"disapproval": false,
			"date": "2013-02-14 00:02:33.641330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Regardless of how it compares to KMP, I think this is worth doing.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode45\nsrc/pkg/strings/strings.go:45: l := len(sep)\nThere's no benefit to this anymore, now that len(sep) registerizes, and it's confusing to remember what l is. Please change the code to use len(sep) everywhere.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode59\nsrc/pkg/strings/strings.go:59: const Prime = 16777619\n// Rabin-Karp string matching.\nconst Prime = 16777619\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode60\nsrc/pkg/strings/strings.go:60: // Hash sep.\nPull this into a function.\n\nseph, pow := hashstr(sep)\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode77\nsrc/pkg/strings/strings.go:77: h *= Prime\nthis will be easier to skim - since it appears multiple times - on one line\n\nh = h*Prime + uint32(s[i])\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode81\nsrc/pkg/strings/strings.go:81: for i := l; i < len(s); i++ {\nIf you rotate the termination condition into the body you can avoid the duplication after the loop.\n\nfor i := l;; i++ {\n    if h == seph && i-len(sep) >= lastmatch && s[i-len(sep):i] == sep {\n        n++\n        lastmatch = i\n    }\n    if i >= len(s) {\n        break;\n    }\n    h = h*Prime + uint32(s[i])\n    h -= pow*uint32(s[i-len(sep)])\n}\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode96\nsrc/pkg/strings/strings.go:96: if lastmatch <= len(s)-l && h == sephash && s[len(s)-l:] == sep {\ndrop",
			"disapproval": false,
			"date": "2013-02-14 02:44:07.106890",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-16 09:48:56.532200",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Somehow it was slowed down a bit by the changes: new benchcmp results\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkIndexHard1        6533916      4043108  -38.12%\nBenchmarkIndexHard2        8175214      4030707  -50.70%\nBenchmarkIndexHard3        6974282      4032687  -42.18%\nBenchmarkCountHard1        6271606      4862624  -22.47%\nBenchmarkCountHard2        7838938      4860459  -38.00%\nBenchmarkCountHard3        6701418      4876190  -27.24%\nBenchmarkIndexTorture      2731199        28922  -98.94%\nBenchmarkCountTorture      2729458        31309  -98.85%\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode45\nsrc/pkg/strings/strings.go:45: l := len(sep)\nOn 2013/02/14 02:44:07, rsc wrote:\n> There's no benefit to this anymore, now that len(sep) registerizes, and it's\n> confusing to remember what l is. Please change the code to use len(sep)\n> everywhere.\n\nDone.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode59\nsrc/pkg/strings/strings.go:59: const Prime = 16777619\nOn 2013/02/14 02:44:07, rsc wrote:\n> // Rabin-Karp string matching.\n> const Prime = 16777619\n\nDone.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode59\nsrc/pkg/strings/strings.go:59: const Prime = 16777619\nOn 2013/02/14 08:13:59, nigeltao wrote:\n> On 2013/02/14 02:44:07, rsc wrote:\n> > // Rabin-Karp string matching.\n> > const Prime = 16777619\n> \n> s/Prime/prime/ ?\n\nDone.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode60\nsrc/pkg/strings/strings.go:60: // Hash sep.\nOn 2013/02/14 02:44:07, rsc wrote:\n> Pull this into a function.\n> \n> seph, pow := hashstr(sep)\n> \n\nDone.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode77\nsrc/pkg/strings/strings.go:77: h *= Prime\nOn 2013/02/14 02:44:07, rsc wrote:\n> this will be easier to skim - since it appears multiple times - on one line\n> \n> h = h*Prime + uint32(s[i])\n\nDone.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode81\nsrc/pkg/strings/strings.go:81: for i := l; i < len(s); i++ {\nOn 2013/02/14 02:44:07, rsc wrote:\n> If you rotate the termination condition into the body you can avoid the\n> duplication after the loop.\n> \n> for i := l;; i++ {\n>     if h == seph && i-len(sep) >= lastmatch && s[i-len(sep):i] == sep {\n>         n++\n>         lastmatch = i\n>     }\n>     if i >= len(s) {\n>         break;\n>     }\n>     h = h*Prime + uint32(s[i])\n>     h -= pow*uint32(s[i-len(sep)])\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7314095/diff/5001/src/pkg/strings/strings.go#newcode96\nsrc/pkg/strings/strings.go:96: if lastmatch <= len(s)-l && h == sephash && s[len(s)-l:] == sep {\nOn 2013/02/14 02:44:07, rsc wrote:\n> drop\n\nDone.",
			"disapproval": false,
			"date": "2013-02-16 09:49:35.992350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nVery nice.",
			"disapproval": false,
			"date": "2013-02-16 13:43:36.631750",
			"approval": true
		},
		{
			"sender": "DonovanHide@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"donovanhide@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some possible to changes to improve performance on the Count function.\n\nWas intrigued to see this come up. I've applied the same algorithm for finding longest common substrings in another project:\n\nhttps://github.com/donovanhide/superfastmatch-go/blob/master/src/document/util.go#L100-L137\n\nThe (admittedly messy) Rabin Karp implementation hashes runes rather than bytes and returns unicode positions rather than byte positions. It does need to allocate a buffer though to store the previous hashes for the start rune subtraction...\n\nRolling hashes are great :-)\n\nhttps://codereview.appspot.com/7314095/diff/11001/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7314095/diff/11001/src/pkg/strings/strings.go#newcode87\nsrc/pkg/strings/strings.go:87: if lastmatch <= i-len(sep) && h == hashsep && s[i-len(sep):i] == sep {\nif h == hashsep && lastmatch <= i-len(sep) && s[i-len(sep):i] == sep \n\nGives a more likely short-curcuit evaluation\n\nhttps://codereview.appspot.com/7314095/diff/11001/src/pkg/strings/strings.go#newcode95\nsrc/pkg/strings/strings.go:95: h -= pow * uint32(s[i-len(sep)])\nReordered to:\n\n\t\th *= primeRK\n\t\tif i >= len(s) {\n\t\t\tbreak\n\t\t}\n\t\th += uint32(s[i])\n\t\th -= pow * uint32(s[i-len(sep)])\n\ngives better performance",
			"disapproval": false,
			"date": "2013-02-16 16:19:14.634830",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"donovanhide@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, donovanhide@gmail.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-17 12:00:19.407760",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"donovanhide@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkIndexHard1         6532331      4045886  -38.06%\nBenchmarkIndexHard2         8178173      4038975  -50.61%\nBenchmarkIndexHard3         6973687      4042591  -42.03%\nBenchmarkCountHard1         6270864      4071090  -35.08%\nBenchmarkCountHard2         7838039      4072853  -48.04%\nBenchmarkCountHard3         6697828      4071964  -39.20%\nBenchmarkIndexTorture       2730546        28934  -98.94%\nBenchmarkCountTorture       2729622        29064  -98.94%\n\n\nOn 2013/02/16 16:19:14, Donovan wrote:\n> Some possible to changes to improve performance on the Count function.\n> \n> Was intrigued to see this come up. I've applied the same algorithm for finding\n> longest common substrings in another project:\n> \n> https://github.com/donovanhide/superfastmatch-go/blob/master/src/document/util.go#L100-L137\n> \n> The (admittedly messy) Rabin Karp implementation hashes runes rather than bytes\n> and returns unicode positions rather than byte positions. It does need to\n> allocate a buffer though to store the previous hashes for the start rune\n> subtraction...\n> \n> Rolling hashes are great :-)\n\nGit also uses Rabin-like hashes for its delta encoding, I have written a Go implementation here: https://github.com/remyoudompheng/gigot/blob/master/gitdelta/diff.go\n\n> https://codereview.appspot.com/7314095/diff/11001/src/pkg/strings/strings.go\n> File src/pkg/strings/strings.go (right):\n> \n> https://codereview.appspot.com/7314095/diff/11001/src/pkg/strings/strings.go#newcode87\n> src/pkg/strings/strings.go:87: if lastmatch <= i-len(sep) && h == hashsep &&\n> s[i-len(sep):i] == sep {\n> if h == hashsep && lastmatch <= i-len(sep) && s[i-len(sep):i] == sep \n> \n> Gives a more likely short-curcuit evaluation\n\nDone.\n\n> https://codereview.appspot.com/7314095/diff/11001/src/pkg/strings/strings.go#newcode95\n> src/pkg/strings/strings.go:95: h -= pow * uint32(s[i-len(sep)])\n> Reordered to:\n> \n> \t\th *= primeRK\n> \t\tif i >= len(s) {\n> \t\t\tbreak\n> \t\t}\n> \t\th += uint32(s[i])\n> \t\th -= pow * uint32(s[i-len(sep)])\n> \n> gives better performance\n\nI did not observe a difference. If you did, I think the compiler should be improved to push back MUL instructions.",
			"disapproval": false,
			"date": "2013-02-17 12:05:59.488960",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"donovanhide@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6f23480a76e1 ***\n\nstrings: better mean complexity for Count and Index.\n\nThe O(n+m) complexity is obtained probabilistically\nby using Rabin-Karp algorithm, which provides the needed complexity\nunless exceptional collisions occur, without memory allocation.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkIndexHard1         6532331      4045886  -38.06%\nBenchmarkIndexHard2         8178173      4038975  -50.61%\nBenchmarkIndexHard3         6973687      4042591  -42.03%\nBenchmarkCountHard1         6270864      4071090  -35.08%\nBenchmarkCountHard2         7838039      4072853  -48.04%\nBenchmarkCountHard3         6697828      4071964  -39.20%\nBenchmarkIndexTorture       2730546        28934  -98.94%\nBenchmarkCountTorture       2729622        29064  -98.94%\n\nFixes issue 4600.\n\nR=rsc, donovanhide, remyoudompheng\nCC=golang-dev\nhttps://codereview.appspot.com/7314095",
			"disapproval": false,
			"date": "2013-02-17 12:21:13.281940",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7314095: strings: better mean complexity for Count and Index.",
	"created": "2013-02-14 00:01:02.474930",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		18001,
		16002
	],
	"modified": "2013-02-17 12:21:14.324760",
	"closed": true,
	"issue": 7314095
}