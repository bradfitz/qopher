{
	"description": "go/types: Pkg *Package field for all objects\n\nThe field is nil for predeclared (universe)\nobjects and parameter/result variables.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.  This is all very straightforward.\n\nhttps://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go\nFile src/pkg/go/types/objects.go (right):\n\nhttps://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go#newcode17\nsrc/pkg/go/types/objects.go:17: GetPkg() *Package\nUnder what circumstances is it nil?\n\nI would expect that for function-local 'const', 'var' and 'type' decls and for 'func' literals it would be nil.\n\nhttps://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go#newcode56\nsrc/pkg/go/types/objects.go:56: type Var struct {\nI wonder if it's worth defining a different type for the elements of a types.Signature, since half the space of a Var is unused in that case.",
			"disapproval": false,
			"date": "2013-02-13 04:57:57.991580",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's discuss this tomorrow in detail.\n- gri\n\nhttps://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go\nFile src/pkg/go/types/objects.go (right):\n\nhttps://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go#newcode17\nsrc/pkg/go/types/objects.go:17: GetPkg() *Package\nOn 2013/02/13 04:57:58, adonovan wrote:\n> Under what circumstances is it nil?\n> \n> I would expect that for function-local 'const', 'var' and 'type' decls and for\n> 'func' literals it would be nil.\n\nRight now it should only be nil for objects that are in no package (universe), and parameters/results.\n\nWe can define what we want - for instance we could only set it for top-level (package-level) objects. That would make a lot of sense. The invariant would be that for such an object obj we can always find it in obj.Pkg.Scope . Maybe that's the right definition.\n\nhttps://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go#newcode56\nsrc/pkg/go/types/objects.go:56: type Var struct {\nOn 2013/02/13 04:57:58, adonovan wrote:\n> I wonder if it's worth defining a different type for the elements of a\n> types.Signature, since half the space of a Var is unused in that case.\n\nYes, I have been wondering, too. It might clean up a few things.",
			"disapproval": false,
			"date": "2013-02-13 05:04:04.796970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-13 04:50:17.505470",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 13 February 2013 00:04, <gri@golang.org> wrote:\r\n\r\n> Let's discuss this tomorrow in detail.\r\n> - gri\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7312093/diff/6001/src/pkg/**\r\n> go/types/objects.go<https://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go>\r\n> File src/pkg/go/types/objects.go (right):\r\n>\r\n> https://codereview.appspot.**com/7312093/diff/6001/src/pkg/**\r\n> go/types/objects.go#newcode17<https://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go#newcode17>\r\n> src/pkg/go/types/objects.go:**17: GetPkg() *Package\r\n> On 2013/02/13 04:57:58, adonovan wrote:\r\n>\r\n>> Under what circumstances is it nil?\r\n>>\r\n>\r\n>  I would expect that for function-local 'const', 'var' and 'type' decls\r\n>>\r\n> and for\r\n>\r\n>> 'func' literals it would be nil.\r\n>>\r\n>\r\n> Right now it should only be nil for objects that are in no package\r\n> (universe), and parameters/results.\r\n>\r\n> We can define what we want - for instance we could only set it for\r\n> top-level (package-level) objects. That would make a lot of sense. The\r\n> invariant would be that for such an object obj we can always find it in\r\n> obj.Pkg.Scope . Maybe that's the right definition.\r\n\r\n\r\nYes, that's what makes most sense to me.  What you have here is progress\r\nthough.\r\n\r\n\r\n\r\n>\r\n>\r\n> https://codereview.appspot.**com/7312093/diff/6001/src/pkg/**\r\n> go/types/objects.go#newcode56<https://codereview.appspot.com/7312093/diff/6001/src/pkg/go/types/objects.go#newcode56>\r\n> src/pkg/go/types/objects.go:**56: type Var struct {\r\n> On 2013/02/13 04:57:58, adonovan wrote:\r\n>\r\n>> I wonder if it's worth defining a different type for the elements of a\r\n>> types.Signature, since half the space of a Var is unused in that case.\r\n>>\r\n>\r\n> Yes, I have been wondering, too. It might clean up a few things.\r\n>\r\n> https://codereview.appspot.**com/7312093/<https://codereview.appspot.com/7312093/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-13 05:06:35.522000",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c11d4d0da2ba ***\n\ngo/types: Pkg *Package field for all objects\n\nThe field is nil for predeclared (universe)\nobjects and parameter/result variables.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/7312093",
			"disapproval": false,
			"date": "2013-02-18 22:41:06.214360",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7312093: go/types: Pkg *Package field for all objects",
	"created": "2013-02-13 03:54:33.037950",
	"patchsets": [
		1,
		2001,
		3001,
		5001,
		6001,
		11001,
		9002
	],
	"modified": "2013-02-18 22:41:07.870890",
	"closed": true,
	"issue": 7312093
}