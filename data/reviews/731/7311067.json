{
	"description": "spec: reject duplicate constant int, float, and string constants in switch\n\nThis is new language in the spec but already implemented\nby both compilers, so it is not a backwards incompatibility.\n\nIn fact, the compilers are slightly stricter than this wording and\nneed to be relaxed somewhat (see issue 4781).\n\nFixes issue 4524.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7311067/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7311067/diff/5001/doc/go_spec.html#newcode4135\ndoc/go_spec.html:4135: constants with the same type and value.\nmaybe straying off topic, but is this legal according to the spec as written?\n\nswitch i := 3; i {\ncase 3:\ncase \"hi\":\n}\n\ngc rejects it, as i think it should, but i don't see the language here to make it illegal, since the equality test is never performed.\n\nthis example might argue for a rewrite of the rules, encompassing your change en passant.",
			"disapproval": false,
			"date": "2013-02-10 03:51:27.566710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nI added a note about type requirements. I think the constant requirements\r\nare still needed separately. I also added an example expansion of the\r\nexpression switch, like the type switch has a few paragraphs down.\r\n",
			"disapproval": false,
			"date": "2013-02-11 13:02:57.822210",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7311067/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7311067/diff/5001/doc/go_spec.html#newcode4135\ndoc/go_spec.html:4135: constants with the same type and value.\nhow could the type be different, other than through untyped constants or nils?",
			"disapproval": false,
			"date": "2013-02-09 21:16:04.221050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-09 19:02:58.057410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7311067/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7311067/diff/5001/doc/go_spec.html#newcode4135\ndoc/go_spec.html:4135: constants with the same type and value.\nOn 2013/02/09 21:16:04, r wrote:\n> how could the type be different, other than through untyped constants or nils?\n\ntype T int64\n\nvar x interface{}\nswitch x {\ncase int64(1):\ncase T(1):\ncase int(1):\n}",
			"disapproval": false,
			"date": "2013-02-09 22:55:22.420740",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-02-12 12:49:01.318370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7311067/diff/7002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7311067/diff/7002/doc/go_spec.html#newcode4136\ndoc/go_spec.html:4136: the switch expression is evaluated and\nmaybe \"evaluated, exactly once,\"\n\nhttps://codereview.appspot.com/7311067/diff/7002/doc/go_spec.html#newcode4138\ndoc/go_spec.html:4138: are evaluated left-to-right and top-to-bottom; the first one that equals the\ntop-to-bottom and left-to-right, since we do top to bottom first\n\nhttps://codereview.appspot.com/7311067/diff/7002/doc/go_spec.html#newcode4142\ndoc/go_spec.html:4142: The <code>==</code> operator must be defined for the switch expression,\nnot sure what defined means here. there's an official way to say this that is more correct. for instance, == is defined on functions but can we do\n\nswitch f {\ncase nil:\n}\n\ni think we can, because f==nil works. but you can't do case f because the issue is the comparison between expr and cases. you say that, but it could al be clearer.\n\nit might work better to define switch as an if-else chain, as you've used as explanation rather than definition below.\n\nhttps://codereview.appspot.com/7311067/diff/7002/doc/go_spec.html#newcode4197\ndoc/go_spec.html:4197: case, if present, corresponds to a final \"else\" clause.\nmaybe <code>else</code>",
			"disapproval": false,
			"date": "2013-02-11 14:28:18.735110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought this would be a one-line change. Leaving for gri.\r\n",
			"disapproval": false,
			"date": "2013-02-12 12:47:10.000070",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7311067: spec: reject duplicate constant int, float, and string ...",
	"created": "2013-02-09 19:02:28.732190",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		7002
	],
	"modified": "2013-02-12 12:49:02.125420",
	"closed": true,
	"issue": 7311067
}