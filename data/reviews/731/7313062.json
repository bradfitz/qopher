{
	"description": "exp/ssa/interp: (#6 of 5): test interpretation of SSA form of $GOROOT/test/*.go.\n\nThe interpreter's os.Exit now triggers a special panic rather\nthan kill the test process.  (It's semantically dubious, since\nit will run deferred routines.)  Interpret now returns its\nexit code rather than calling os.Exit.\n\nAlso:\n- disabled parts of a few $GOROOT/tests via os.Getenv(\"GOSSAINTERP\").\n- remove unnecessary 'slots' param to external functions; they\n  are never closures.\n\nMost of the tests are disabled until go/types supports shifts.\nThey can be reenabled if you patch this workaround:\nhttps://codereview.appspot.com/7312068",
	"cc": [
		"iant@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp.go\nFile src/pkg/exp/ssa/interp/interp.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp.go#newcode597\nsrc/pkg/exp/ssa/interp/interp.go:597: exitCode = 1\nOn 2013/02/11 16:56:55, iant wrote:\n> Looks to me like this will cause a panic: unexpected type: nil.\n\nGood catch.  I've changed the condition dominating the deferred func to exitCode != 2.\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go\nFile src/pkg/exp/ssa/interp/interp_test.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go#newcode14\nsrc/pkg/exp/ssa/interp/interp_test.go:14: red   = \"\\x1b[1;31m\"\nOn 2013/02/11 16:56:55, iant wrote:\n> This test is going to run as part of ordinary runs of make.bash.  It shouldn't\n> print ANSI terminal sequences, it should just call t.Error and so on.  You can\n> add an option to print those sequences if you want for use with this specific\n> package.\n\nI've put this behind a -color flag.\n\nFWIW, the color is not frivolous; it makes it immediately obvious when viewing a log of a test in progress whether it has failed.  The words PASS and FAIL by themselves don't leap off the page.\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go#newcode24\nsrc/pkg/exp/ssa/interp/interp_test.go:24: // the $GOROOT/test driver scripts, golden file checking, etc?\nOn 2013/02/11 16:56:55, iant wrote:\n> I would think it would make sense at some point.\n\nOk; reworded the TODO.\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go#newcode134\nsrc/pkg/exp/ssa/interp/interp_test.go:134: fmt.Printf(\"Input: %s\\n\", input)\nOn 2013/02/11 16:56:55, iant wrote:\n> Tests should normally use t.Log, not fmt.Print.  fmt.Print is not forbidden but\n> why not use t.Log?\n\nThe TestInterp function runs dozens of tests; t.Log isn't printed until after the last one (and not at all on success, of course).  During development I have found it a great saving of time to get immediate feedback about failing tests by printing to stdout like testing.T itself does when it heralds each new test function.\n\nhttps://codereview.appspot.com/7313062/diff/4/test/method.go\nFile test/method.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/method.go#newcode254\ntest/method.go:254: type A struct{ B }\nOn 2013/02/11 16:56:55, iant wrote:\n> This change doesn't seem related to the interpreter per se; can we split it out\n> into a different CL?\n\nMoved to https://codereview.appspot.com/7306087.\n\nhttps://codereview.appspot.com/7313062/diff/4/test/range.go\nFile test/range.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/range.go#newcode169\ntest/range.go:169: // Non-evaluation of the range expression is permitted for arrays.\nOn 2013/02/11 16:56:55, iant wrote:\n> We have to be clear about whether the range expression is evaluated or not. \n> There shouldn't be any \"is permitted\" for something like that.  Please break\n> this out into a separate CL, and let's test for precisely the number of\n> executions.\n\nChanges to the spec wording are being discussed in CL \nhttps://codereview.appspot.com/7307083/, and once the dust has settled that CL ought to add assertions to this test.  (Changes to the SSA builder may be necessary too.)\n\nI've moved the (non-semantic) println changes to https://codereview.appspot.com/7306087.\n\nhttps://codereview.appspot.com/7313062/diff/4/test/reorder.go\nFile test/reorder.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/reorder.go#newcode109\ntest/reorder.go:109: // See http://code.google.com/p/go/issues/detail?id=4627.\nOn 2013/02/11 16:56:55, iant wrote:\n> This comment makes sense as part of this CL but it does not make sense in the\n> context of the test.  I think it can simply be omitted.\n\nDone.\n\nhttps://codereview.appspot.com/7313062/diff/4/test/switch.go\nFile test/switch.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/switch.go#newcode331\ntest/switch.go:331: switch {\nOn 2013/02/11 16:56:55, iant wrote:\n> Again, additional testing should be a separate CL.\n\nMoved to https://codereview.appspot.com/7306087.",
			"disapproval": false,
			"date": "2013-02-11 20:59:19.949560",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313062/diff/27/test/cmplxdivide.go\nFile test/cmplxdivide.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/27/test/cmplxdivide.go#newcode49\ntest/cmplxdivide.go:49: panic(\"cmplxdivide failed.\")\nI thought these simple cleanups were moving to a different CL?",
			"disapproval": false,
			"date": "2013-02-12 00:40:58.734750",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry about this, but I don't think most of the changes to the test directory should be bundled together with interpreter changes.  Many of the test changes are straight cleanups--you can just put those in a single CL grouped together.  A couple of the test changes add additional tests--those should be in their own separate CLs with just those additional tests.\n\nThat leaves this CL with the interpreter changes and a few test changes to test the environment variable.  I'm still not really happy with the environment variable but I guess we can do it if we must.\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp.go\nFile src/pkg/exp/ssa/interp/interp.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp.go#newcode597\nsrc/pkg/exp/ssa/interp/interp.go:597: exitCode = 1\nLooks to me like this will cause a panic: unexpected type: nil.\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go\nFile src/pkg/exp/ssa/interp/interp_test.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go#newcode14\nsrc/pkg/exp/ssa/interp/interp_test.go:14: red   = \"\\x1b[1;31m\"\nThis test is going to run as part of ordinary runs of make.bash.  It shouldn't print ANSI terminal sequences, it should just call t.Error and so on.  You can add an option to print those sequences if you want for use with this specific package.\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go#newcode24\nsrc/pkg/exp/ssa/interp/interp_test.go:24: // the $GOROOT/test driver scripts, golden file checking, etc?\nI would think it would make sense at some point.\n\nhttps://codereview.appspot.com/7313062/diff/4/src/pkg/exp/ssa/interp/interp_test.go#newcode134\nsrc/pkg/exp/ssa/interp/interp_test.go:134: fmt.Printf(\"Input: %s\\n\", input)\nTests should normally use t.Log, not fmt.Print.  fmt.Print is not forbidden but why not use t.Log?\n\nhttps://codereview.appspot.com/7313062/diff/4/test/method.go\nFile test/method.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/method.go#newcode254\ntest/method.go:254: type A struct{ B }\nThis change doesn't seem related to the interpreter per se; can we split it out into a different CL?\n\nhttps://codereview.appspot.com/7313062/diff/4/test/range.go\nFile test/range.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/range.go#newcode169\ntest/range.go:169: // Non-evaluation of the range expression is permitted for arrays.\nWe have to be clear about whether the range expression is evaluated or not.  There shouldn't be any \"is permitted\" for something like that.  Please break this out into a separate CL, and let's test for precisely the number of executions.\n\nhttps://codereview.appspot.com/7313062/diff/4/test/reorder.go\nFile test/reorder.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/reorder.go#newcode109\ntest/reorder.go:109: // See http://code.google.com/p/go/issues/detail?id=4627.\nThis comment makes sense as part of this CL but it does not make sense in the context of the test.  I think it can simply be omitted.\n\nhttps://codereview.appspot.com/7313062/diff/4/test/switch.go\nFile test/switch.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/switch.go#newcode331\ntest/switch.go:331: switch {\nAgain, additional testing should be a separate CL.",
			"disapproval": false,
			"date": "2013-02-11 16:56:54.916220",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313062/diff/27/test/cmplxdivide.go\nFile test/cmplxdivide.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/27/test/cmplxdivide.go#newcode49\ntest/cmplxdivide.go:49: panic(\"cmplxdivide failed.\")\nOn 2013/02/12 00:40:58, iant wrote:\n> I thought these simple cleanups were moving to a different CL?\n\nThese simple cleanups are conceptually part of this change.\nThough they are not required for correctness of the tests run by make.bash, which checks the output against a golden file, they are required by exp/ssa/interp/interp_test.go which expects tests to exit 0 iff they are successful, thus all failing tests must exit nonzero or panic in addition to perhaps printing some error messages.\n\nThis isn't ideal since it means these tests must be written to conform to two slightly different sets of expectations, but it seems like a pragmatic compromise for the medium term.   Doing the \"right\" thing (integrating exp/ssa/interp into the scripts that drive the existing tests) would be a fair amount of work for diminishing returns, I think.",
			"disapproval": false,
			"date": "2013-02-12 03:23:16.615120",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 11, 2013 at 9:53 PM, <iant@golang.org> wrote:\r\n\r\n> We changed away from a golden file a while back.  The tests are now run\r\n> by test/run.go.\r\n\r\n\r\nThey're now _also_ ran by run.go.  But run.go and run (sh) are kept in sync.\r\n\r\n\r\n>  A test fails by exiting with a non-zero status.  If a\r\n> test exits with a zero status, it is counted as passing.\r\n\r\n\r\nUnless the test type is \"cmpout\", or is one of the \"error*\" types.\r\n",
			"disapproval": false,
			"date": "2013-02-12 06:09:45.514380",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/11 20:59:19, adonovan wrote:\n\n> src/pkg/exp/ssa/interp/interp_test.go:134: fmt.Printf(\"Input: %s\\n\", input)\n> On 2013/02/11 16:56:55, iant wrote:\n> > Tests should normally use t.Log, not fmt.Print.  fmt.Print is not forbidden\n> but\n> > why not use t.Log?\n> \n> The TestInterp function runs dozens of tests; t.Log isn't printed until after\n> the last one (and not at all on success, of course).  During development I have\n> found it a great saving of time to get immediate feedback about failing tests by\n> printing to stdout like testing.T itself does when it heralds each new test\n> function.\n\nI suppose the important thing is that \"bash all.bash\" should not dump any output when testing the directory.",
			"disapproval": false,
			"date": "2013-02-12 00:40:49.327380",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the clarifications; in that case I will make another CL to\r\nensure that all tests exit nonzero on failure.\r\n\r\n\r\n\r\n\r\nOn 12 February 2013 01:09, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> On Mon, Feb 11, 2013 at 9:53 PM, <iant@golang.org> wrote:\r\n>\r\n>> We changed away from a golden file a while back.  The tests are now run\r\n>> by test/run.go.\r\n>\r\n>\r\n> They're now _also_ ran by run.go.  But run.go and run (sh) are kept in\r\n> sync.\r\n>\r\n>\r\n>>  A test fails by exiting with a non-zero status.  If a\r\n>> test exits with a zero status, it is counted as passing.\r\n>\r\n>\r\n> Unless the test type is \"cmpout\", or is one of the \"error*\" types.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-12 16:26:05.712220",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(PTAL)\n\nOn 2013/02/12 16:26:05, adonovan wrote:\n> Thanks for the clarifications; in that case I will make another CL to\n> ensure that all tests exit nonzero on failure.\n> \n> \n> \n> \n> On 12 February 2013 01:09, Brad Fitzpatrick <mailto:bradfitz@golang.org> wrote:\n> \n> > On Mon, Feb 11, 2013 at 9:53 PM, <mailto:iant@golang.org> wrote:\n> >\n> >> We changed away from a golden file a while back.  The tests are now run\n> >> by test/run.go.\n> >\n> >\n> > They're now _also_ ran by run.go.  But run.go and run (sh) are kept in\n> > sync.\n> >\n> >\n> >>  A test fails by exiting with a non-zero status.  If a\n> >> test exits with a zero status, it is counted as passing.\n> >\n> >\n> > Unless the test type is \"cmpout\", or is one of the \"error*\" types.\n> >\n> >\n> >",
			"disapproval": false,
			"date": "2013-02-13 05:43:03.715570",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-13 06:03:20.946380",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313062/diff/4/test/blank.go\nFile test/blank.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/blank.go#newcode112\ntest/blank.go:112: if os.Getenv(\"GOSSAINTERP\") == \"\" {\nOn 2013/02/08 23:10:23, iant wrote:\n> I only looked at this test, but let's not do this.  One option: don't do it at\n> all, in the assumption that you will be able to fix these.  Another: the tests\n> all have an indicator at the top that indicates how to execute the test; we can\n> extend as appropriate to say that the test should not be run when using the\n> interpreter.\n\nI thought this was a reasonable compromise that allowed us to run the majority of $GOROOT/tests without modification.  There are only 5 occurrences of this check of which 3 will disappear in due course (and 2 likely never).  The test programs containing the 3 provide a great deal of coverage we don't get from elsewhere, hence my desire not to wait until the interpreter is perfect before including these tests.\n\nRuss thought this was a reasonable approach, FWIW.",
			"disapproval": false,
			"date": "2013-02-08 23:21:50.822130",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org (cc: golang-dev@googlegroups.com, gri@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-08 22:00:50.613150",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313062/diff/4/test/blank.go\nFile test/blank.go (right):\n\nhttps://codereview.appspot.com/7313062/diff/4/test/blank.go#newcode112\ntest/blank.go:112: if os.Getenv(\"GOSSAINTERP\") == \"\" {\nI only looked at this test, but let's not do this.  One option: don't do it at all, in the assumption that you will be able to fix these.  Another: the tests all have an indicator at the top that indicates how to execute the test; we can extend as appropriate to say that the test should not be run when using the interpreter.",
			"disapproval": false,
			"date": "2013-02-08 23:10:23.110200",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We changed away from a golden file a while back.  The tests are now run by test/run.go.  A test fails by exiting with a non-zero status.  If a test exits with a zero status, it is counted as passing.  So in fact the changes you are making to the tests, other than checking the environment variable, are corrections.  Those tests are broken, in the sense that they will not be correctly detected as failing if they do fail.  We don't notice because 1) they don't fail; 2) if they do fail, run.go won't pick it up.\n\nHence I think the changes to the tests other than the environment variable should be in a different CL.",
			"disapproval": false,
			"date": "2013-02-12 05:53:14.141770",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=577ba2d07b0b ***\n\nexp/ssa/interp: (#6 of 5): test interpretation of SSA form of $GOROOT/test/*.go.\n\nThe interpreter's os.Exit now triggers a special panic rather\nthan kill the test process.  (It's semantically dubious, since\nit will run deferred routines.)  Interpret now returns its\nexit code rather than calling os.Exit.\n\nAlso:\n- disabled parts of a few $GOROOT/tests via os.Getenv(\"GOSSAINTERP\").\n- remove unnecessary 'slots' param to external functions; they\n  are never closures.\n\nMost of the tests are disabled until go/types supports shifts.\nThey can be reenabled if you patch this workaround:\nhttps://codereview.appspot.com/7312068\n\nR=iant, bradfitz\nCC=golang-dev, gri\nhttps://codereview.appspot.com/7313062",
			"disapproval": false,
			"date": "2013-02-21 17:48:41.491070",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7313062: exp/ssa/interp: (#6 of 5): test interpretation of SSA f...",
	"created": "2013-02-08 19:08:59.152590",
	"patchsets": [
		1,
		2001,
		3006,
		6001,
		2010,
		4,
		27,
		15003,
		19001,
		22001,
		25001
	],
	"modified": "2013-02-21 17:48:42.707230",
	"closed": true,
	"issue": 7313062
}