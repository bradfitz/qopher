{
	"description": "net/http: add BenchmarkReadRequest\n\nAdd benchmark for request parsing. Fixture data is taken from https://github.com/felixge/node-http-perf\n\n% go version\ngo version devel +28966b7b2f0c Thu Feb 07 20:26:12 2013 -0800 linux/amd64\n\n% go test -run=nil -bench=ReadRequest -benchtime=10s\nPASS\nBenchmarkReadRequest     2000000   9900 ns/op   61.71 MB/s   3148 B/op   32 allocs/op\nok      net/http        12.180s",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com",
		"haimuiba@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go\nFile src/pkg/net/http/request_test.go (right):\n\nhttps://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode427\nsrc/pkg/net/http/request_test.go:427: r.offset += copy(b, r.buf[r.offset:n])\nthis (r.buf[r.offset:n]) seems wrong to me.\n\ni suggest this:\nn := copy(b, r.buf[r.offset:])\nr.offset = (r.offset + n) % len(r.buf)\nreturn n, nil\n\nhttps://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode441\nsrc/pkg/net/http/request_test.go:441: const request = \"GET / HTTP/1.1\\r\\n\" +\nthis string concatenation looks ugly to me.\nhow about using raw string + strings.Replace(s, \"\\n\", \"\\r\\n\", -1)?\n\ndoes this have license problems? i can't find any license info\non the node-http-perf page.",
			"disapproval": false,
			"date": "2013-02-08 07:16:51.696180",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-02-07 23:00:33.848700",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313048/diff/9001/src/pkg/net/http/request_test.go\nFile src/pkg/net/http/request_test.go (right):\n\nhttps://codereview.appspot.com/7313048/diff/9001/src/pkg/net/http/request_test.go#newcode406\nsrc/pkg/net/http/request_test.go:406: b.SetBytes(int64(len(request)))\nb.ReportAllocs()\n\nhttps://codereview.appspot.com/7313048/diff/9001/src/pkg/net/http/request_test.go#newcode407\nsrc/pkg/net/http/request_test.go:407: r := bufio.NewReader(&infiniteReader{buf: []byte(request)})\nb.ResetTimer()",
			"disapproval": false,
			"date": "2013-02-08 06:47:37.833020",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-06 08:25:55.431350",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We can add more, and in fact we should. That is why the current benchmark is over engineered. I have small patch to textproto that improves ReadRequest for that fixture by 10% but will probably be less effective with a wider sample size. \r\n\r\nOn 08/02/2013, at 20:09, Felix Geisendoerfer <haimuiba@gmail.com> wrote:\r\n\r\n>> using the same fixture surely helps in comparing performance.\r\n> \r\n> One thing about the fixture: It may not be the ideal fixture, as I suspect most benchmarking tools will include significantly less headers in their requests.\r\n> \r\n> I just picked it because I'd rather focus on reality, as far as this is possible with these vanity benchmarks : ).\r\n> \r\n> --fg\r\n> \r\n> On Friday, 8 February 2013 09:31:57 UTC+1, minux wrote:\r\n>> \r\n>> \r\n>> On Friday, February 8, 2013, haimuiba wrote:\r\n>>> \r\n>>> https://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode441\r\n>>> src/pkg/net/http/request_test.go:441: const request = \"GET /\r\n>>> HTTP/1.1\\r\\n\" +\r\n>>>> does this have license problems? i can't find any license info\r\n>>>> on the node-http-perf page.\r\n>>> \r\n>>> It's a capture of the default GET request issued by Chrome, so I'm not\r\n>>> sure if I could possibly claim copyright on that, but just in case:\r\n>>> \r\n>>> https://github.com/felixge/node-http-perf/commit/eface1ab82ce1fc7ef0dad60600b650b66397e00\r\n>> great. thanks for the prompt action.\r\n>> using the same fixture surely helps in comparing performance.\r\n",
			"disapproval": false,
			"date": "2013-02-08 10:42:36.490950",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"haimuiba@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, minux.ma@gmail.com, haimuiba@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-08 11:43:37.313540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It'd be nice if you could make an io.Reader which repeats a string n times,\r\nand then only make one bufio.Reader before the loop.\r\n\r\nThat would reflect reality more too, where TCP connections are re-used with\r\nmany requests (with one bufio per connection).\r\n\r\n\r\nOn Wed, Feb 6, 2013 at 12:25 AM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net/http: add BenchmarkReadRequest\r\n>\r\n> Add benchmark for request parsing. Fixture data is taken from\r\n> https://github.com/felixge/**node-http-perf<https://github.com/felixge/node-http-perf>\r\n>\r\n> % go version\r\n> go version devel +fceaf0ddea29 Tue Feb 05 15:39:55 2013 +1100\r\n> linux/amd64\r\n>\r\n> % go test -run=nil -bench=ReadRequest -benchmem -benchtime=10s\r\n> PASS\r\n> BenchmarkReadRequest     1000000             12041 ns/op          50.74\r\n> MB/s        7369 B/op         34 allocs/op\r\n> ok      net/http        12.180s\r\n>\r\n> Please review this at https://codereview.appspot.**com/7313048/<https://codereview.appspot.com/7313048/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/request_test.**go\r\n>\r\n>\r\n> Index: src/pkg/net/http/request_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/request_**test.go\r\n> +++ b/src/pkg/net/http/request_**test.go\r\n> @@ -401,3 +401,29 @@\r\n>  ` + textbValue + `\r\n>  --MyBoundary--\r\n>  `\r\n> +\r\n> +func benchmarkReadRequest(b *testing.B, buf []byte) {\r\n> +       b.SetBytes(int64(len(buf)))\r\n> +       r := bytes.NewReader(buf)\r\n> +       for i := 0; i < b.N; i++ {\r\n> +               r.Seek(0, 0) // reset\r\n> +               _, err := ReadRequest(bufio.NewReader(r)**)\r\n> +               if err != nil {\r\n> +                       b.Fatalf(\"failed to read request: %v\", err)\r\n> +               }\r\n> +       }\r\n> +}\r\n> +\r\n> +func BenchmarkReadRequest(b *testing.B) {\r\n> +       // taken from https://github.com/felixge/**\r\n> node-http-perf/blob/master/**fixtures/get.http<https://github.com/felixge/node-http-perf/blob/master/fixtures/get.http>\r\n> +       const fixture = \"GET / HTTP/1.1\\r\\n\" +\r\n> +               \"Host: localhost:8080\\r\\n\" +\r\n> +               \"Connection: keep-alive\\r\\n\" +\r\n> +               \"Accept: text/html,application/xhtml+**\r\n> xml,application/xml;q=0.9,*/*;**q=0.8\\r\\n\" +\r\n> +               \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X\r\n> 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.52\r\n> Safari/537.17\\r\\n\" +\r\n> +               \"Accept-Encoding: gzip,deflate,sdch\\r\\n\" +\r\n> +               \"Accept-Language: en-US,en;q=0.8\\r\\n\" +\r\n> +               \"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.**3\\r\\n\" +\r\n> +               \"Cookie: __utma=1.1978842379.**1323102373.1323102373.**1323102373.1;\r\n> EPi:NumberOfVisits=1,2012-02-**28T13:42:18; CrmSession=**\r\n> 5b707226b9563e1bc69084d07a107c**98; plushContainerWidth=100%25;\r\n> plushNoTopMenu=0; hudson_auto_refresh=false\\r\\n\\**r\\n\"\r\n> +       benchmarkReadRequest(b, []byte(fixture))\r\n> +}\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-08 00:27:49.243260",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure thing, will do. I was sad to see that ReadRequest takes a\r\n*bufio.Reader, not an io.Reader, but not much can be done about that\r\nnow.\r\n\r\nOn Fri, Feb 8, 2013 at 11:27 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> It'd be nice if you could make an io.Reader which repeats a string n times,\r\n> and then only make one bufio.Reader before the loop.\r\n>\r\n> That would reflect reality more too, where TCP connections are re-used with\r\n> many requests (with one bufio per connection).\r\n>\r\n>\r\n> On Wed, Feb 6, 2013 at 12:25 AM, <dave@cheney.net> wrote:\r\n>>\r\n>> Reviewers: golang-dev_googlegroups.com,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> net/http: add BenchmarkReadRequest\r\n>>\r\n>> Add benchmark for request parsing. Fixture data is taken from\r\n>> https://github.com/felixge/node-http-perf\r\n>>\r\n>> % go version\r\n>> go version devel +fceaf0ddea29 Tue Feb 05 15:39:55 2013 +1100\r\n>> linux/amd64\r\n>>\r\n>> % go test -run=nil -bench=ReadRequest -benchmem -benchtime=10s\r\n>> PASS\r\n>> BenchmarkReadRequest     1000000             12041 ns/op          50.74\r\n>> MB/s        7369 B/op         34 allocs/op\r\n>> ok      net/http        12.180s\r\n>>\r\n>> Please review this at https://codereview.appspot.com/7313048/\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/net/http/request_test.go\r\n>>\r\n>>\r\n>> Index: src/pkg/net/http/request_test.go\r\n>> ===================================================================\r\n>> --- a/src/pkg/net/http/request_test.go\r\n>> +++ b/src/pkg/net/http/request_test.go\r\n>> @@ -401,3 +401,29 @@\r\n>>  ` + textbValue + `\r\n>>  --MyBoundary--\r\n>>  `\r\n>> +\r\n>> +func benchmarkReadRequest(b *testing.B, buf []byte) {\r\n>> +       b.SetBytes(int64(len(buf)))\r\n>> +       r := bytes.NewReader(buf)\r\n>> +       for i := 0; i < b.N; i++ {\r\n>> +               r.Seek(0, 0) // reset\r\n>> +               _, err := ReadRequest(bufio.NewReader(r))\r\n>> +               if err != nil {\r\n>> +                       b.Fatalf(\"failed to read request: %v\", err)\r\n>> +               }\r\n>> +       }\r\n>> +}\r\n>> +\r\n>> +func BenchmarkReadRequest(b *testing.B) {\r\n>> +       // taken from\r\n>> https://github.com/felixge/node-http-perf/blob/master/fixtures/get.http\r\n>> +       const fixture = \"GET / HTTP/1.1\\r\\n\" +\r\n>> +               \"Host: localhost:8080\\r\\n\" +\r\n>> +               \"Connection: keep-alive\\r\\n\" +\r\n>> +               \"Accept:\r\n>> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n\" +\r\n>> +               \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X\r\n>> 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.52\r\n>> Safari/537.17\\r\\n\" +\r\n>> +               \"Accept-Encoding: gzip,deflate,sdch\\r\\n\" +\r\n>> +               \"Accept-Language: en-US,en;q=0.8\\r\\n\" +\r\n>> +               \"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\\r\\n\" +\r\n>> +               \"Cookie:\r\n>> __utma=1.1978842379.1323102373.1323102373.1323102373.1;\r\n>> EPi:NumberOfVisits=1,2012-02-28T13:42:18;\r\n>> CrmSession=5b707226b9563e1bc69084d07a107c98; plushContainerWidth=100%25;\r\n>> plushNoTopMenu=0; hudson_auto_refresh=false\\r\\n\\r\\n\"\r\n>> +       benchmarkReadRequest(b, []byte(fixture))\r\n>> +}\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-08 00:29:54.944580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, February 8, 2013, haimuiba wrote:\r\n>\r\n> https://codereview.appspot.**com/7313048/diff/6002/src/pkg/**\r\n> net/http/request_test.go#**newcode441<https://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode441>\r\n> src/pkg/net/http/request_test.**go:441: const request = \"GET /\r\n> HTTP/1.1\\r\\n\" +\r\n>\r\n>> does this have license problems? i can't find any license info\r\n>> on the node-http-perf page.\r\n>>\r\n>\r\n> It's a capture of the default GET request issued by Chrome, so I'm not\r\n> sure if I could possibly claim copyright on that, but just in case:\r\n>\r\n> https://github.com/felixge/**node-http-perf/commit/**\r\n> eface1ab82ce1fc7ef0dad60600b65**0b66397e00<https://github.com/felixge/node-http-perf/commit/eface1ab82ce1fc7ef0dad60600b650b66397e00>\r\n>\r\ngreat. thanks for the prompt action.\r\nusing the same fixture surely helps in comparing performance.\r\n",
			"disapproval": false,
			"date": "2013-02-08 08:31:57.801690",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. Ill fix my reader code and repurpose after dinner  \r\n\r\nOn 08/02/2013, at 19:31, minux <minux.ma@gmail.com> wrote:\r\n\r\n> \r\n> On Friday, February 8, 2013, haimuiba wrote:\r\n>> \r\n>> https://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode441\r\n>> src/pkg/net/http/request_test.go:441: const request = \"GET /\r\n>> HTTP/1.1\\r\\n\" +\r\n>>> does this have license problems? i can't find any license info\r\n>>> on the node-http-perf page.\r\n>> \r\n>> It's a capture of the default GET request issued by Chrome, so I'm not\r\n>> sure if I could possibly claim copyright on that, but just in case:\r\n>> \r\n>> https://github.com/felixge/node-http-perf/commit/eface1ab82ce1fc7ef0dad60600b650b66397e00\r\n> great. thanks for the prompt action.\r\n> using the same fixture surely helps in comparing performance.\r\n",
			"disapproval": false,
			"date": "2013-02-08 08:47:38.108500",
			"approval": false
		},
		{
			"sender": "haimuiba@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n>\r\n> using the same fixture surely helps in comparing performance.\r\n\r\n\r\nOne thing about the fixture: It may not be the ideal fixture, as I suspect \r\nmost benchmarking tools will include significantly less headers in their \r\nrequests.\r\n\r\nI just picked it because I'd rather focus on reality, as far as this is \r\npossible with these vanity benchmarks : ).\r\n\r\n--fg\r\n\r\nOn Friday, 8 February 2013 09:31:57 UTC+1, minux wrote:\r\n>\r\n>\r\n> On Friday, February 8, 2013, haimuiba wrote:\r\n>>\r\n>> https://codereview.appspot.**com/7313048/diff/6002/src/pkg/**\r\n>> net/http/request_test.go#**newcode441<https://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode441>\r\n>> src/pkg/net/http/request_test.**go:441: const request = \"GET /\r\n>> HTTP/1.1\\r\\n\" +\r\n>>\r\n>>> does this have license problems? i can't find any license info\r\n>>> on the node-http-perf page.\r\n>>>\r\n>>\r\n>> It's a capture of the default GET request issued by Chrome, so I'm not\r\n>> sure if I could possibly claim copyright on that, but just in case:\r\n>>\r\n>> https://github.com/felixge/**node-http-perf/commit/**\r\n>> eface1ab82ce1fc7ef0dad60600b65**0b66397e00<https://github.com/felixge/node-http-perf/commit/eface1ab82ce1fc7ef0dad60600b650b66397e00>\r\n>>\r\n> great. thanks for the prompt action.\r\n> using the same fixture surely helps in comparing performance.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-08 09:09:24.547290",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"haimuiba@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-08 15:42:42.685090",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-08 05:55:47.534620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your feedback. PTAL.\n\nhttps://codereview.appspot.com/7313048/diff/9001/src/pkg/net/http/request_test.go\nFile src/pkg/net/http/request_test.go (right):\n\nhttps://codereview.appspot.com/7313048/diff/9001/src/pkg/net/http/request_test.go#newcode406\nsrc/pkg/net/http/request_test.go:406: b.SetBytes(int64(len(request)))\nOn 2013/02/08 06:47:37, minux wrote:\n> b.ReportAllocs()\n\nDone.\n\nhttps://codereview.appspot.com/7313048/diff/9001/src/pkg/net/http/request_test.go#newcode407\nsrc/pkg/net/http/request_test.go:407: r := bufio.NewReader(&infiniteReader{buf: []byte(request)})\nOn 2013/02/08 06:47:37, minux wrote:\n> b.ResetTimer()\n\nDone.",
			"disapproval": false,
			"date": "2013-02-08 06:52:13.447400",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 8, 2013 at 5:09 PM, Felix Geisendoerfer <haimuiba@gmail.com>wrote:\r\n\r\n> using the same fixture surely helps in comparing performance.\r\n>\r\n>\r\n> One thing about the fixture: It may not be the ideal fixture, as I suspect\r\n> most benchmarking tools will include significantly less headers in their\r\n> requests.\r\n>\r\nbut this request is typical for a web server to expect so i think it's\r\nbetter.\r\n\r\n>\r\n> I just picked it because I'd rather focus on reality, as far as this is\r\n> possible with these vanity benchmarks : ).\r\n>\r\nseconded. i agree with using real-world requests for benchmarks.\r\noptimizing for trivial cases might not actually speed up the average case\r\n(as one can always special case those).\r\n\r\none of the reason i gave for not comparing Go by benchmarking hello world\r\nweb service\r\nis that: if it's that important, the Go team could implement a pattern\r\nmatching in the gc\r\ncompiler and rewrite that code into much simpler one to just give better\r\nbenchmark results.\r\n",
			"disapproval": false,
			"date": "2013-02-08 09:16:13.700540",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"haimuiba@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7dc9a98ddfcc ***\n\nnet/http: add BenchmarkReadRequest\n\nAdd benchmark for request parsing. Fixture data is taken from https://github.com/felixge/node-http-perf\n\n% go version\ngo version devel +28966b7b2f0c Thu Feb 07 20:26:12 2013 -0800 linux/amd64\n\n% go test -run=nil -bench=ReadRequest -benchtime=10s\nPASS\nBenchmarkReadRequest     2000000   9900 ns/op   61.71 MB/s   3148 B/op   32 allocs/op\nok      net/http        12.180s\n\nR=golang-dev, bradfitz, minux.ma, haimuiba\nCC=golang-dev\nhttps://codereview.appspot.com/7313048\n\nhttps://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go\nFile src/pkg/net/http/request_test.go (right):\n\nhttps://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode427\nsrc/pkg/net/http/request_test.go:427: r.offset += copy(b, r.buf[r.offset:n])\nOn 2013/02/08 07:16:51, minux wrote:\n> this (r.buf[r.offset:n]) seems wrong to me.\n> \n> i suggest this:\n> n := copy(b, r.buf[r.offset:])\n> r.offset = (r.offset + n) % len(r.buf)\n> return n, nil\n\nDone, thank you.\n\nhttps://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode441\nsrc/pkg/net/http/request_test.go:441: const request = \"GET / HTTP/1.1\\r\\n\" +\nOn 2013/02/08 07:16:51, minux wrote:\n> this string concatenation looks ugly to me.\n> how about using raw string + strings.Replace(s, \"\\n\", \"\\r\\n\", -1)?\n> \n> does this have license problems? i can't find any license info\n> on the node-http-perf page.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-08 20:04:20.235990",
			"approval": false
		},
		{
			"sender": "haimuiba@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"haimuiba@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go\nFile src/pkg/net/http/request_test.go (right):\n\nhttps://codereview.appspot.com/7313048/diff/6002/src/pkg/net/http/request_test.go#newcode441\nsrc/pkg/net/http/request_test.go:441: const request = \"GET / HTTP/1.1\\r\\n\" +\n> does this have license problems? i can't find any license info\n> on the node-http-perf page.\n\nIt's a capture of the default GET request issued by Chrome, so I'm not sure if I could possibly claim copyright on that, but just in case:\n\nhttps://github.com/felixge/node-http-perf/commit/eface1ab82ce1fc7ef0dad60600b650b66397e00",
			"disapproval": false,
			"date": "2013-02-08 08:28:15.119700",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 7313048: net/http: add BenchmarkReadRequest",
	"created": "2013-02-06 08:20:05.295960",
	"patchsets": [
		1,
		2001,
		1002,
		9001,
		6002,
		14002,
		2003
	],
	"modified": "2013-02-08 20:04:22.905490",
	"closed": true,
	"issue": 7313048
}