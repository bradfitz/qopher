{
	"description": "misc/emacs: Greatly improve go-mode for Emacs.\n\nThe original go-mode is plagued with odd behaviour, lack of\nbehaviour typical to modes in Emacs and bugs.\n\nThis change rewrites great parts of go-mode (basically only\nkeeping the gofmt and godoc functions).\n\nAdditionally it adds new features such as manipulating package\nimports.\n\nFor more information please see\nhttps://groups.google.com/group/golang-nuts/browse_frm/thread/3a9d6dae3369c0b5/1efe65e2f7afb190\n\nFixes issue 3618.\nFixes issue 4240.\nFixes issue 4322.\nFixes issue 4671.\nFixes issue 4726.",
	"cc": [
		"golang-dev@googlegroups.com",
		"fullung@gmail.com",
		"sameer@golang.org",
		"cw@f00f.org",
		"arthur@google.com",
		"proppy@gmail.com",
		"adonovan@google.com",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-16 18:10:03.288330",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/02/16 18:10:03, Dominik Honnef wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nSpotted two minor issues, don't know if they are supposed to work yet:\n\nM-x go-import-add prints the error \"Lisp nesting exceeds `max-lisp-eval-depth'\"\n\nM-x go-remove-unused-imports doesn't seem to successfully remove unused imports.\n\nRunning emacs-24.1-7.fc17.x86_64 here.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-02-17 18:54:51.431300",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/17 18:54:51, albert.strasheim wrote:\n> Spotted two minor issues, don't know if they are supposed to work yet:\n> \n> M-x go-import-add prints the error \"Lisp nesting exceeds `max-lisp-eval-depth'\"\n\nSomeone else reported the same issue. Either some kind of loop in the fs is messing it up, or people really have bigger and more nested workspaces than I was expecting. The current code uses a recursive lookup of directories. \n\n> M-x go-remove-unused-imports doesn't seem to successfully remove unused imports.\n\nThis has been reported as well, but I cannot reproduce nor comprehend it. Unfortunately the other person hasn't gotten back to me yet. Could you a) run \"M-: (go-unused-imports-lines)\" and tell me if it returns an empty list instead of the line numbers of unused imports? And if it does, can you run \"go build -o /dev/null file.go\" (with the current working directory being that containing file.go) from a terminal and tell me its output?\n\nAlso, is GOPATH set and exported correctly when starting Emacs?",
			"disapproval": false,
			"date": "2013-02-17 19:02:43.699530",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nOn Sun, Feb 17, 2013 at 9:02 PM,  <dominik.honnef@gmail.com> wrote:\r\n> On 2013/02/17 18:54:51, albert.strasheim wrote:\r\n>> Spotted two minor issues, don't know if they are supposed to work yet:\r\n>> M-x go-import-add prints the error \"Lisp nesting exceeds\r\n> `max-lisp-eval-depth'\"\r\n> Someone else reported the same issue. Either some kind of loop in the fs\r\n> is messing it up, or people really have bigger and more nested\r\n> workspaces than I was expecting. The current code uses a recursive\r\n> lookup of directories.\r\n\r\nI don't think we have loops. Our GOPATH is one project with about 450\r\nsubdirectories. The deepest/longest one is:\r\n\r\nsrc/code.google.com/p/gocc/example/example/scanner\r\n\r\nand it has friends.\r\n\r\n>> M-x go-remove-unused-imports doesn't seem to successfully remove\r\n>\r\n> unused imports.\r\n>\r\n> This has been reported as well, but I cannot reproduce nor comprehend\r\n> it. Unfortunately the other person hasn't gotten back to me yet. Could\r\n> you a) run \"M-: (go-unused-imports-lines)\" and tell me if it returns an\r\n> empty list instead of the line numbers of unused imports? And if it\r\n\r\nit seems to return nil\r\n\r\n> does, can you run \"go build -o /dev/null file.go\" (with the current\r\n> working directory being that containing file.go) from a terminal and\r\n> tell me its output?\r\n\r\n# command-line-arguments\r\n./foo.go:12: imported and not used: \"io\"\r\n\r\n> Also, is GOPATH set and exported correctly when starting Emacs?\r\n\r\nI can use $GOPATH in C-x C-f, so I think so.\r\n\r\nRegards\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2013-02-18 09:16:05.475140",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/16 18:10:03, Dominik Honnef wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nThis all looks great, but can we split this CL into the part that replaces existing behavior and the part(s) that adds new features?  I'd like to review the latter separately.\n\nAlso when I click Start Review, I get:\n  Can't parse the patch to chunks\nand nothing else.",
			"disapproval": false,
			"date": "2013-02-19 20:39:01.898860",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I will commit this and report anything I find as new issues.\r\n\r\nOn Tue, Feb 26, 2013 at 12:27 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Tue, Feb 26, 2013 at 12:25 PM, <dominik.honnef@gmail.com> wrote:\r\n>\r\n>> Then I am afraid you are not testing the go-mode.el from this CL.\r\n>>\r\n>\r\n> This is another reason we should submit this CL. People can get it\r\n> straight from hg, and it will be easier to read minor fixes as separate CLs.\r\n>\r\n> Russ\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 17:29:23.336080",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, fullung@gmail.com, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-20 05:05:11.547330",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6f89256bf255 ***\n\nmisc/emacs: Greatly improve go-mode for Emacs.\n\nThe original go-mode is plagued with odd behaviour, lack of\nbehaviour typical to modes in Emacs and bugs.\n\nThis change rewrites great parts of go-mode (basically only\nkeeping the gofmt and godoc functions).\n\nAdditionally it adds new features such as manipulating package\nimports.\n\nFor more information please see\nhttps://groups.google.com/group/golang-nuts/browse_frm/thread/3a9d6dae3369c0b5/1efe65e2f7afb190\n\nFixes issue 3618.\nFixes issue 4240.\nFixes issue 4322.\nFixes issue 4671.\nFixes issue 4726.\n\nR=golang-dev, fullung, sameer, cw, arthur, proppy, adonovan, rsc, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7314113\n\nCommitter: Sameer Ajmani <sameer@golang.org>",
			"disapproval": false,
			"date": "2013-02-26 18:49:29.272590",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The new patch set fixes go-import-add. I'll be working on go-remove-unused-imports with Albert Strasheim soon.",
			"disapproval": false,
			"date": "2013-02-20 05:06:54.720780",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks great so far.\n\nOne issue I had in 'dropping it in' to replace what I have is load vs loads.  For now I updated things here to assume loads but the previous elisp did load.\n\nhttps://codereview.appspot.com/7314113/diff/14001/misc/emacs/go-mode-load.el\nFile misc/emacs/go-mode-load.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/14001/misc/emacs/go-mode-load.el#newcode1\nmisc/emacs/go-mode-load.el:1: ;;; go-mode-load.el --- Major mode for the Go programming language\nload or loads here?\n\nhttps://codereview.appspot.com/7314113/diff/14001/misc/emacs/go-mode-load.el#newcode74\nmisc/emacs/go-mode-load.el:74: \nagain, load vs loads",
			"disapproval": false,
			"date": "2013-02-20 06:03:39.947590",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/26 17:18:41, Sameer Ajmani wrote:\n> This is happening with GNU Emacs, not Xemacs.\n\nThen I am afraid you are not testing the go-mode.el from this CL. Using the exact same patch in a vanilla GNU Emacs: http://stuff.fork-bomb.org/2013-02-26_18h-21m-52s.png\n\nThe bug of keywords being highlighted in identifiers is actually an (old) bug of the previous go-mode.el, but has been fixed there as well.",
			"disapproval": false,
			"date": "2013-02-26 17:25:30.858810",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nSo far it's working quite well for me.  Certainly better than what as there before (ie. it's not a regression).\n\nI would like to see this merged as-is and any remaining issues resolved as they are encountered.",
			"disapproval": false,
			"date": "2013-02-20 19:00:40.752970",
			"approval": true
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, fullung@gmail.com, sameer@golang.org, cw@f00f.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-20 07:32:35.015570",
			"approval": false
		},
		{
			"sender": "proppy@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode-load.el\nFile misc/emacs/go-mode-load.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode-load.el#oldcode7\nmisc/emacs/go-mode-load.el:7: ;;   (require 'go-mode-load)\nwould be nice to leave the instructions",
			"disapproval": false,
			"date": "2013-02-21 10:52:16.627400",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "okay, I'll try this out in xemacs. I'd appreciate any feedback from xemacs\r\nusers on this list.\r\nOn Feb 25, 2013 10:40 AM, <dominik.honnef@gmail.com> wrote:\r\n\r\n> On 2013/02/25 15:36:50, Sameer Ajmani wrote:\r\n>\r\n>> Dominik, do you know whether this go-mode should work equally well on\r\n>>\r\n> Gnu Emacs and X-Emacs?\r\n>\r\n> I have honestly no idea if it works in XEmacs. I was hoping for that to\r\n> be determined during the review. The handling of raw strings should work\r\n> in XEmacs, and I don't think I am using any GNU Emacs specific\r\n> functions.\r\n>\r\n> But personally I was only able to test in GNU Emacs.\r\n>\r\n> https://codereview.appspot.**com/7314113/<https://codereview.appspot.com/7314113/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-25 17:38:58.025360",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Changed references from -loads.el to -load.el and fixed go-remove-unused-imports",
			"disapproval": false,
			"date": "2013-02-20 07:33:03.103180",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It will probably happen with all keywords/language builtins, even though I have no idea why. It should work the same as in GNU Emacs, where it's working fine. I'll have to take a look at it in a couple days\n\nOn 2013/02/26 16:25:23, Sameer Ajmani wrote:\n> On 2013/02/25 22:17:55, Sameer Ajmani wrote:\n> > Syntax highlighting bug:\n> > In this code:\n> > const (\n> > \ttypeSingleton    = 0\n> > \ttypeFixedSize    = 1\n> > \ttypeVariableSize = 2\n> > )\n> > The \"type\" substrings are highlighed and shouldn't be.\n> \n> Seeing the same issue with the substring \"default\" in\n> var defaultBufferSize = 1 << 20\n> \n> \n> > On 2013/02/25 17:38:58, Sameer Ajmani wrote:\n> > > okay, I'll try this out in xemacs. I'd appreciate any feedback from xemacs\n> > > users on this list.\n> > > On Feb 25, 2013 10:40 AM, <mailto:dominik.honnef@gmail.com> wrote:\n> > > \n> > > > On 2013/02/25 15:36:50, Sameer Ajmani wrote:\n> > > >\n> > > >> Dominik, do you know whether this go-mode should work equally well on\n> > > >>\n> > > > Gnu Emacs and X-Emacs?\n> > > >\n> > > > I have honestly no idea if it works in XEmacs. I was hoping for that to\n> > > > be determined during the review. The handling of raw strings should work\n> > > > in XEmacs, and I don't think I am using any GNU Emacs specific\n> > > > functions.\n> > > >\n> > > > But personally I was only able to test in GNU Emacs.\n> > > >\n> > > >\n> > >\n> >\n> https://codereview.appspot.**com/7314113/%25253Chttps://codereview.appspot.com/7314113/>\n> > > >",
			"disapproval": false,
			"date": "2013-02-26 16:49:57.854220",
			"approval": false
		},
		{
			"sender": "arthur@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is great.  Thank you very much for doing this.  It will be great to have a mode that integrates better with standard Emacs mechanisms, and the other features are great, too.\n\nMany of my comments below are stylistic, but I did have some trouble getting some of the features to work.  I may have a configuration that is non-standard in some way, but I'm not sure.  I started with a fresh instance of GNU Emacs 24.2.1 with no other customizations, then installed the latest version from <https://github.com/dominikh/go-mode.el>.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#oldcode885\nmisc/emacs/go-mode.el:885: (defun godoc (query)\nI couldn't get this to work.  It failed silently.  Maybe there's some configuration I need to do.  Consider adding more documentation about the assumptions at the top of the file.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode17\nmisc/emacs/go-mode.el:17: (defconst go-func-meth-regexp (concat \"\\\\<func\\\\>\\\\s *\\\\(?:(\\\\s *\" go-identifier-regexp \"\\\\s +\" go-type-regexp \"\\\\s *)\\\\s *\\\\)?\\\\(\" go-identifier-regexp \"\\\\)(\"))\nIt would be nice to make `beginning-of-defun', etc. work with other top-level constructs, e.g. <type>.\n\nAlso, it's okay to have long lines, but sometimes it helps to wrap them to reveal their structure through indentation.    This line is an example.  See `go-mode-keywords' below for a nice example.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode73\nmisc/emacs/go-mode.el:73: )\nAvoid using closing parentheses on lines by themselves in Lisp.  Instead, move it up to the end of the previous line (before the comment, of course).\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode131\nmisc/emacs/go-mode.el:131: (defun go--backward-irrelevant (&optional stop-at-string)\nIt would be great to have short documentation strings for non-trivial functions like this.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode165\nmisc/emacs/go-mode.el:165: (setq group \"^[{(\"))\nIt would be better not to use assignment here and above.  Instead, put the `if' inside the `let'.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode264\nmisc/emacs/go-mode.el:264: proper parsing of the buffer content to allow features such as\n\"proper\" => \"and proper\"\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode268\nmisc/emacs/go-mode.el:268: Additionally to these core features, it offers various features to\n\"Additionally\" => \"In addition\"\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode291\nmisc/emacs/go-mode.el:291: recommended to look at goflymake\n\"to look\" => \"that you look\"\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode344\nmisc/emacs/go-mode.el:344: (defun gofmt ()\nWhen I run this, it works, but ends with the message \"Hunk applied.\"  It would be better to say something more helpful, or nothing at all.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode531\nmisc/emacs/go-mode.el:531: )\nMove these closing parentheses up.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode562\nmisc/emacs/go-mode.el:562: (defun go-download-play (url)\n`go-download-play' fails unless `url-request-data', `url-request-extra-headers', and `url-request-method' are set (e.g. to nil).\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode591\nmisc/emacs/go-mode.el:591: (defun go-import-add (arg import)\n`go-import-add' fails with this unhelpful error message unless GOPATH is set to a directory that contains \"pkg/\":\n\n  (file-error \"Opening directory\" \"no such file or directory\" \"/pkg/\")\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode650\nmisc/emacs/go-mode.el:650: ))\nTo match standard Lisp style, please move these closing parentheses up to the line with `mapconcat'.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode654\nmisc/emacs/go-mode.el:654: (go-root-and-paths))) 'string<))\nPlease break this line after the third closing parenthesis.  It's confusing to have the comparator at an indentation level different than its peer argument.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode659\nmisc/emacs/go-mode.el:659: (setq cmd \"go test -c\")\nIt would be better not to use assignment here and below.  Instead, put the `if' inside the `let'.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode675\nmisc/emacs/go-mode.el:675: (defun go-remove-unused-imports (arg)\n`go-unused-imports-lines' fails silently if <go build> or <go test> fails.",
			"disapproval": false,
			"date": "2013-02-21 00:29:28.989280",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/25 15:36:50, Sameer Ajmani wrote:\n> Dominik, do you know whether this go-mode should work equally well on Gnu Emacs and X-Emacs?\n\nI have honestly no idea if it works in XEmacs. I was hoping for that to be determined during the review. The handling of raw strings should work in XEmacs, and I don't think I am using any GNU Emacs specific functions. \n\nBut personally I was only able to test in GNU Emacs.",
			"disapproval": false,
			"date": "2013-02-25 15:40:43.211910",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/25 22:17:55, Sameer Ajmani wrote:\n> Syntax highlighting bug:\n> In this code:\n> const (\n> \ttypeSingleton    = 0\n> \ttypeFixedSize    = 1\n> \ttypeVariableSize = 2\n> )\n> The \"type\" substrings are highlighed and shouldn't be.\n\nSeeing the same issue with the substring \"default\" in\nvar defaultBufferSize = 1 << 20\n\n\n> On 2013/02/25 17:38:58, Sameer Ajmani wrote:\n> > okay, I'll try this out in xemacs. I'd appreciate any feedback from xemacs\n> > users on this list.\n> > On Feb 25, 2013 10:40 AM, <mailto:dominik.honnef@gmail.com> wrote:\n> > \n> > > On 2013/02/25 15:36:50, Sameer Ajmani wrote:\n> > >\n> > >> Dominik, do you know whether this go-mode should work equally well on\n> > >>\n> > > Gnu Emacs and X-Emacs?\n> > >\n> > > I have honestly no idea if it works in XEmacs. I was hoping for that to\n> > > be determined during the review. The handling of raw strings should work\n> > > in XEmacs, and I don't think I am using any GNU Emacs specific\n> > > functions.\n> > >\n> > > But personally I was only able to test in GNU Emacs.\n> > >\n> > >\n> >\n> https://codereview.appspot.**com/7314113/%253Chttps://codereview.appspot.com/7314113/>\n> > >",
			"disapproval": false,
			"date": "2013-02-26 16:25:23.660080",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThat's fine by me.\r\n\r\nOn 26 February 2013 12:11, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I propose that this has been going on long enough that we should just\r\n> submit the CL already. It will not break Go 1.0 users immediately, because\r\n> they are not using tip.\r\n>\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 17:20:11.208340",
			"approval": true
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#oldcode111\nmisc/emacs/go-mode.el:111: (define-key m \"}\" #'go-mode-insert-and-indent)\nOn 2013/02/21 19:14:40, adonovan wrote:\n> On 2013/02/21 19:08:34, Dominik Honnef wrote:\n> > On 2013/02/21 18:45:49, adonovan wrote:\n> > > Though #'foo is functionally equivalent to 'foo in Emacs Lisp if foo is a\n> > > function, I would still recommend the traditional #' as it both serves as\n> > > documentation and enables compiler optimisations (since it indicates that\n> the\n> > > name of the symbol isn't significant).\n> > \n> > I actually wasn't too sure about the meaning of #'. Last time I researched it,\n> > it was said that # causes the compiler to inline functions, which in my\n> opinion\n> > didn't make much sense for define-key. I'd really love some documentation on\n> #'\n> \n> Just as the reader expands 'x to (quote x), it expands #'x to the (function x). \n> In most dialects of Lisp, you have to use exactly one or the other: (quote x) to\n> get the name of the symbol, and (function x) to get the function associated with\n> the symbol.  Emacs Lisp's function application operator is slightly weird\n> though, so it works given either the \"name\" or the function value. \n\nAh. Thanks for explaining that, that cleared it up. \n\nLooking through the packages that come with GNU Emacs, I can see that there's no consensus on whether to use #' or not. I'll delay this until a future CL, for the same reason as before.\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode120\nmisc/emacs/go-mode.el:120: `(car (syntax-ppss)))\nOn 2013/02/21 19:14:40, adonovan wrote:\n> On 2013/02/21 19:08:34, Dominik Honnef wrote:\n> > On 2013/02/21 18:45:49, adonovan wrote:\n> > > Glad to see you're using ppss; I never understood why the old mode avoided\n> > just\n> > > about the most optimised C function in Emacs.\n> > \n> > Heh, two reasons, I'll start from the back: They ditched the syntax table\n> > completely to properly handle raw strings, which have no escape sequences. The\n> > syntax table can't handle that. My solution is limited to XEmacs and GNU Emacs\n> > 24.x and degrades gracefully on older versions.\n> > \n> > The other reason is: The authors of the old go-mode thought, and I quote, that\n> > emacs has no built-in way to tell you the current nesting in parentheses. Or\n> in\n> > other words, they probably didn't know syntax-ppss :)\n> \n> Ah.  And the reviewer was afraid to mention it after they'd reinvented the\n> wheel, I suppose.  :)\n\nWell, even the original version of the old mode implemented its own parser for some parts, so it was only made worse. There aren't that many gophers who use Emacs, and this CL already had more reviews than all other go-mode related CLs combined. Most of the previous changes just got accepted without a real review process.",
			"disapproval": false,
			"date": "2013-02-21 19:27:37.808090",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#oldcode111\nmisc/emacs/go-mode.el:111: (define-key m \"}\" #'go-mode-insert-and-indent)\nOn 2013/02/21 19:08:34, Dominik Honnef wrote:\n> On 2013/02/21 18:45:49, adonovan wrote:\n> > Though #'foo is functionally equivalent to 'foo in Emacs Lisp if foo is a\n> > function, I would still recommend the traditional #' as it both serves as\n> > documentation and enables compiler optimisations (since it indicates that the\n> > name of the symbol isn't significant).\n> \n> I actually wasn't too sure about the meaning of #'. Last time I researched it,\n> it was said that # causes the compiler to inline functions, which in my opinion\n> didn't make much sense for define-key. I'd really love some documentation on #'\n\nJust as the reader expands 'x to (quote x), it expands #'x to the (function x).  In most dialects of Lisp, you have to use exactly one or the other: (quote x) to get the name of the symbol, and (function x) to get the function associated with the symbol.  Emacs Lisp's function application operator is slightly weird though, so it works given either the \"name\" or the function value.\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode120\nmisc/emacs/go-mode.el:120: `(car (syntax-ppss)))\nOn 2013/02/21 19:08:34, Dominik Honnef wrote:\n> On 2013/02/21 18:45:49, adonovan wrote:\n> > Glad to see you're using ppss; I never understood why the old mode avoided\n> just\n> > about the most optimised C function in Emacs.\n> \n> Heh, two reasons, I'll start from the back: They ditched the syntax table\n> completely to properly handle raw strings, which have no escape sequences. The\n> syntax table can't handle that. My solution is limited to XEmacs and GNU Emacs\n> 24.x and degrades gracefully on older versions.\n> \n> The other reason is: The authors of the old go-mode thought, and I quote, that\n> emacs has no built-in way to tell you the current nesting in parentheses. Or in\n> other words, they probably didn't know syntax-ppss :)\n\nAh.  And the reviewer was afraid to mention it after they'd reinvented the wheel, I suppose.  :)",
			"disapproval": false,
			"date": "2013-02-21 19:14:40.569460",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314113/diff/14001/misc/emacs/go-mode-load.el\nFile misc/emacs/go-mode-load.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/14001/misc/emacs/go-mode-load.el#newcode1\nmisc/emacs/go-mode-load.el:1: ;;; go-mode-load.el --- Major mode for the Go programming language\nOn 2013/02/20 06:03:40, cw wrote:\n> load or loads here?\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/14001/misc/emacs/go-mode-load.el#newcode74\nmisc/emacs/go-mode-load.el:74: \nOn 2013/02/20 06:03:40, cw wrote:\n> again, load vs loads\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#oldcode885\nmisc/emacs/go-mode.el:885: (defun godoc (query)\nOn 2013/02/21 00:29:29, arthur wrote:\n> I couldn't get this to work.  It failed silently.  Maybe there's some\n> configuration I need to do.  Consider adding more documentation about the\n> assumptions at the top of the file.\n\nPretty much the only assumption is that it can run godoc, so PATH has to be set correctly. That's about it.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode17\nmisc/emacs/go-mode.el:17: (defconst go-func-meth-regexp (concat \"\\\\<func\\\\>\\\\s *\\\\(?:(\\\\s *\" go-identifier-regexp \"\\\\s +\" go-type-regexp \"\\\\s *)\\\\s *\\\\)?\\\\(\" go-identifier-regexp \"\\\\)(\"))\nOn 2013/02/21 00:29:29, arthur wrote:\n> It would be nice to make `beginning-of-defun', etc. work with other top-level\n> constructs, e.g. <type>.\n\nI did consider this, but first checked with other modes and they only worked on functions as well, or only sporadically on other structures. \n\nEither way, if at all, I'd rather do this in a separate CL to avoid introducing new changes in behavior that have to be reviewed.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode73\nmisc/emacs/go-mode.el:73: )\nOn 2013/02/21 00:29:29, arthur wrote:\n> Avoid using closing parentheses on lines by themselves in Lisp.  Instead, move\n> it up to the end of the previous line (before the comment, of course).\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode131\nmisc/emacs/go-mode.el:131: (defun go--backward-irrelevant (&optional stop-at-string)\nOn 2013/02/21 00:29:29, arthur wrote:\n> It would be great to have short documentation strings for non-trivial functions\n> like this.\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode165\nmisc/emacs/go-mode.el:165: (setq group \"^[{(\"))\nOn 2013/02/21 00:29:29, arthur wrote:\n> It would be better not to use assignment here and above.  Instead, put the `if'\n> inside the `let'.\n\nI wasn't sure having a case within an if within a function call was such a good idea, style-wise.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode264\nmisc/emacs/go-mode.el:264: proper parsing of the buffer content to allow features such as\nOn 2013/02/21 00:29:29, arthur wrote:\n> \"proper\" => \"and proper\"\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode268\nmisc/emacs/go-mode.el:268: Additionally to these core features, it offers various features to\nOn 2013/02/21 00:29:29, arthur wrote:\n> \"Additionally\" => \"In addition\"\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode291\nmisc/emacs/go-mode.el:291: recommended to look at goflymake\nOn 2013/02/21 00:29:29, arthur wrote:\n> \"to look\" => \"that you look\"\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode344\nmisc/emacs/go-mode.el:344: (defun gofmt ()\nOn 2013/02/21 00:29:29, arthur wrote:\n> When I run this, it works, but ends with the message \"Hunk applied.\"  It would\n> be better to say something more helpful, or nothing at all.\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode531\nmisc/emacs/go-mode.el:531: )\nOn 2013/02/21 00:29:29, arthur wrote:\n> Move these closing parentheses up.\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode562\nmisc/emacs/go-mode.el:562: (defun go-download-play (url)\nOn 2013/02/21 00:29:29, arthur wrote:\n> `go-download-play' fails unless `url-request-data', `url-request-extra-headers',\n> and `url-request-method' are set (e.g. to nil).\n\nOver here (main Emacs and Emacs with no site lisp/configuration loaded), it worked without, too. Is some other package (wrongly) setting these? I've seen other packages, including ELPA, fail before because of issues regarding the url-* variables.\n\nNevertheless, I'm setting them to proper values now.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode591\nmisc/emacs/go-mode.el:591: (defun go-import-add (arg import)\nOn 2013/02/21 00:29:29, arthur wrote:\n> `go-import-add' fails with this unhelpful error message unless GOPATH is set to\n> a directory that contains \"pkg/\":\n> \n>   (file-error \"Opening directory\" \"no such file or directory\" \"/pkg/\")\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode650\nmisc/emacs/go-mode.el:650: ))\nOn 2013/02/21 00:29:29, arthur wrote:\n> To match standard Lisp style, please move these closing parentheses up to the\n> line with `mapconcat'.\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode654\nmisc/emacs/go-mode.el:654: (go-root-and-paths))) 'string<))\nOn 2013/02/21 00:29:29, arthur wrote:\n> Please break this line after the third closing parenthesis.  It's confusing to\n> have the comparator at an indentation level different than its peer argument.\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode659\nmisc/emacs/go-mode.el:659: (setq cmd \"go test -c\")\nOn 2013/02/21 00:29:29, arthur wrote:\n> It would be better not to use assignment here and below.  Instead, put the `if'\n> inside the `let'.\n\nDone.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode675\nmisc/emacs/go-mode.el:675: (defun go-remove-unused-imports (arg)\nOn 2013/02/21 00:29:29, arthur wrote:\n> `go-unused-imports-lines' fails silently if <go build> or <go test> fails.\n\nTechnically, go build also fails when its doing its job of telling us about unused imports. So how do we tell that apart from real failure?",
			"disapproval": false,
			"date": "2013-02-21 16:57:29.225540",
			"approval": false
		},
		{
			"sender": "arthur@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for making these changes.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#oldcode885\nmisc/emacs/go-mode.el:885: (defun godoc (query)\nI've confirmed that the command is running, and that its exit value indicates success.\n\nOh, my mistake.  I'm a novice Go programmer, and I misunderstood what <godoc> was supposed to do.  I was trying it on things like \"make\" and \"map\", for which it returns no results.  When I give it a package name, it works.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode17\nmisc/emacs/go-mode.el:17: (defconst go-func-meth-regexp (concat \"\\\\<func\\\\>\\\\s *\\\\(?:(\\\\s *\" go-identifier-regexp \"\\\\s +\" go-type-regexp \"\\\\s *)\\\\s *\\\\)?\\\\(\" go-identifier-regexp \"\\\\)(\"))\nThat's fine.  I can always customize this by changing the regular expression.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode165\nmisc/emacs/go-mode.el:165: (setq group \"^[{(\"))\nIn general, functional code is better than side-effecting code, especially in simple cases like this.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode562\nmisc/emacs/go-mode.el:562: (defun go-download-play (url)\nStrange.  I'm running without any customizations or packages loaded other than \"go-mode.el\".  In any case, thanks for fixing this.\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#newcode675\nmisc/emacs/go-mode.el:675: (defun go-remove-unused-imports (arg)\nI see.  That's a good question.  It would be nice if <go build> offered you a way of calling it just for this purpose so that you could distinguish between the two cases.  Oh, well.  Maybe someone on the Go team has a suggestion.",
			"disapproval": false,
			"date": "2013-02-21 18:08:03.797910",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode-load.el\nFile misc/emacs/go-mode-load.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode-load.el#oldcode7\nmisc/emacs/go-mode-load.el:7: ;;   (require 'go-mode-load)\nOn 2013/02/21 10:52:16, proppy.gmail wrote:\n> would be nice to leave the instructions\n\nDone.",
			"disapproval": false,
			"date": "2013-02-21 20:29:01.854450",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've been using this version of go-mode for since last week and have had no problems.  I'm inclined to just get this submitted.  Alan's our resident emacs expert, so once he's happy, I'm willing to commit.\n\nDominik, do you know whether this go-mode should work equally well on Gnu Emacs and X-Emacs?\n\nAlan, when you LGTM, I'll submit this.\n\nS\n\n\nOn 2013/02/21 20:29:01, Dominik Honnef wrote:\n> https://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode-load.el\n> File misc/emacs/go-mode-load.el (left):\n> \n> https://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode-load.el#oldcode7\n> misc/emacs/go-mode-load.el:7: ;;   (require 'go-mode-load)\n> On 2013/02/21 10:52:16, proppy.gmail wrote:\n> > would be nice to leave the instructions\n> \n> Done.",
			"disapproval": false,
			"date": "2013-02-25 15:36:50.813070",
			"approval": true
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/32001/misc/emacs/go-mode.el#oldcode885\nmisc/emacs/go-mode.el:885: (defun godoc (query)\nOn 2013/02/21 18:08:03, arthur wrote:\n> I've confirmed that the command is running, and that its exit value indicates\n> success.\n> \n> Oh, my mistake.  I'm a novice Go programmer, and I misunderstood what <godoc>\n> was supposed to do.  I was trying it on things like \"make\" and \"map\", for which\n> it returns no results.  When I give it a package name, it works.\n\nHm, when I give it a name that doesn't exist (such as \"make\"), it prints a godoc error in the minibuffer; it doesn't fail silently.",
			"disapproval": false,
			"date": "2013-02-21 18:21:33.007290",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've been trying to add you, but our tools are broken.\r\n\r\nWill keep fighting it.\r\n\r\n2013/02/26 10:06:37 found I AGREE for dominik.honnef@gmail.com\r\ncreating CL ...\r\nEmail (login for uploading to codereview.appspot.com) [bradfitz@golang.org]:\r\n** unknown exception encountered, please report by visiting\r\n**  http://mercurial.selenic.com/wiki/BugTracker\r\n** Python 2.7.3 (default, Aug  1 2012, 05:14:39) [GCC 4.6.3]\r\n** Mercurial Distributed SCM (version 2.0.2)\r\n** Extensions loaded: codereview\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/hg\", line 38, in <module>\r\n    mercurial.dispatch.run()\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 27,\r\nin run\r\n    sys.exit(dispatch(request(sys.argv[1:])))\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 64,\r\nin dispatch\r\n    return _runcatch(req)\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 87,\r\nin _runcatch\r\n    return _dispatch(req)\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 684,\r\nin _dispatch\r\n    cmdpats, cmdoptions)\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 466,\r\nin runcommand\r\n    ret = _runcommand(ui, options, cmd, d)\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 738,\r\nin _runcommand\r\n    return checkargs()\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 692,\r\nin checkargs\r\n    return cmdfunc()\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/dispatch.py\", line 681,\r\nin <lambda>\r\n    d = lambda: util.checksignature(func)(ui, *args, **cmdoptions)\r\n  File \"/usr/lib/python2.7/dist-packages/mercurial/util.py\", line 458, in\r\ncheck\r\n    return func(*args, **kwargs)\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 1348, in\r\nchange\r\n    d.Flush(ui, repo)\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 282, in Flush\r\n    self.Upload(ui, repo, gofmt_just_warn=True, creating=True)\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 353, in Upload\r\n    response_body = MySend(\"/upload\", body, content_type=ctype)\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 2409, in\r\nMySend\r\n    return MySend1(request_path, payload, content_type, timeout,\r\nforce_auth, **kwargs)\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 2477, in\r\nMySend1\r\n    self._Authenticate()\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 2965, in\r\n_Authenticate\r\n    super(HttpRpcServer, self)._Authenticate()\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 2875, in\r\n_Authenticate\r\n    credentials = self.auth_function()\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 3025, in\r\nGetUserCredentials\r\n    email = GetEmail(\"Email (login for uploading to %s)\" % options.server)\r\n  File \"/home/bradfitz/go/lib/codereview/codereview.py\", line 2707, in\r\nGetEmail\r\n    email = raw_input(prompt + \": \").strip()\r\nEOFError: EOF when reading a line\r\n2013/02/26 10:06:38 exit status 1\r\n\r\n\r\nOn Tue, Feb 26, 2013 at 9:56 AM, <dominik.honnef@gmail.com> wrote:\r\n\r\n> I submitted an Individual CLA, using the electronic form, at the same\r\n> time I submitted this CL. I never received any confirmation from Google\r\n> though. How do I proceed?\r\n>\r\n> On 2013/02/26 17:54:28, Sameer Ajmani wrote:\r\n>\r\n>> warning: cannot find mailto:dominik.honnef@gmail.**com<dominik.honnef@gmail.com>in CONTRIBUTORS\r\n>>\r\n>\r\n>  Dominik, please complete a CLA as described at\r\n>> golang.org/doc/contribute.**html#copyright<http://golang.org/doc/contribute.html#copyright>\r\n>> .\r\n>>\r\n>\r\n>\r\n>\r\n>  On 2013/02/26 17:29:23, Sameer Ajmani wrote:\r\n>> > Ok, I will commit this and report anything I find as new issues.\r\n>> >\r\n>> > On Tue, Feb 26, 2013 at 12:27 PM, Russ Cox <mailto:rsc@golang.org>\r\n>>\r\n> wrote:\r\n>\r\n>> >\r\n>> > > On Tue, Feb 26, 2013 at 12:25 PM,\r\n>>\r\n> <mailto:dominik.honnef@gmail.**com <dominik.honnef@gmail.com>> wrote:\r\n>\r\n>> > >\r\n>> > >> Then I am afraid you are not testing the go-mode.el from this CL.\r\n>> > >>\r\n>> > >\r\n>> > > This is another reason we should submit this CL. People can get it\r\n>> > > straight from hg, and it will be easier to read minor fixes as\r\n>>\r\n> separate CLs.\r\n>\r\n>> > >\r\n>> > > Russ\r\n>> > >\r\n>> > >\r\n>>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7314113/<https://codereview.appspot.com/7314113/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 18:07:31.155160",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dominik, thanks for taking this on.  At one point I was tempted to switch go-mode.el to use syntax-ppss but I suspected that it was Atlas's trick on Hercules and I would be left maintaining this code forever.  So I'm glad to see you have stepped up. :)\n\nYour rewrite is quite complex so I'm not sure it's worth the effort to understand all the logic; my only code comments are trivial.  But I have been playing with it and it seems both more accurate and noticeably faster than the previous indentation algorithm.  It's also shorter.  Nice work!\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#oldcode111\nmisc/emacs/go-mode.el:111: (define-key m \"}\" #'go-mode-insert-and-indent)\nThough #'foo is functionally equivalent to 'foo in Emacs Lisp if foo is a function, I would still recommend the traditional #' as it both serves as documentation and enables compiler optimisations (since it indicates that the name of the symbol isn't significant).\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode120\nmisc/emacs/go-mode.el:120: `(car (syntax-ppss)))\nGlad to see you're using ppss; I never understood why the old mode avoided just about the most optimised C function in Emacs.\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode134\nmisc/emacs/go-mode.el:134: (defun go--backward-irrelevant (&optional stop-at-string)\nWhat's the significance of two dashes in go--foo?  (Private?)\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode654\nmisc/emacs/go-mode.el:654: (defun go-root-and-paths ()\nI recommend adding docstrings even for short internal functions.\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode679\nmisc/emacs/go-mode.el:679: ;; FIXME Technically, -o /dev/null fails in quite some cases (on\nPrefer \"TODO($USER): fix: ...\" to \"FIXME: ...\".",
			"disapproval": false,
			"date": "2013-02-21 18:45:49.438270",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#oldcode111\nmisc/emacs/go-mode.el:111: (define-key m \"}\" #'go-mode-insert-and-indent)\nOn 2013/02/21 18:45:49, adonovan wrote:\n> Though #'foo is functionally equivalent to 'foo in Emacs Lisp if foo is a\n> function, I would still recommend the traditional #' as it both serves as\n> documentation and enables compiler optimisations (since it indicates that the\n> name of the symbol isn't significant).\n\nI actually wasn't too sure about the meaning of #'. Last time I researched it, it was said that # causes the compiler to inline functions, which in my opinion didn't make much sense for define-key. I'd really love some documentation on #'\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode120\nmisc/emacs/go-mode.el:120: `(car (syntax-ppss)))\nOn 2013/02/21 18:45:49, adonovan wrote:\n> Glad to see you're using ppss; I never understood why the old mode avoided just\n> about the most optimised C function in Emacs.\n\nHeh, two reasons, I'll start from the back: They ditched the syntax table completely to properly handle raw strings, which have no escape sequences. The syntax table can't handle that. My solution is limited to XEmacs and GNU Emacs 24.x and degrades gracefully on older versions.\n\nThe other reason is: The authors of the old go-mode thought, and I quote, that emacs has no built-in way to tell you the current nesting in parentheses. Or in other words, they probably didn't know syntax-ppss :)\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode134\nmisc/emacs/go-mode.el:134: (defun go--backward-irrelevant (&optional stop-at-string)\nOn 2013/02/21 18:45:49, adonovan wrote:\n> What's the significance of two dashes in go--foo?  (Private?)\n\nYup, private.\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode654\nmisc/emacs/go-mode.el:654: (defun go-root-and-paths ()\nOn 2013/02/21 18:45:49, adonovan wrote:\n> I recommend adding docstrings even for short internal functions.\n\nI'll sneak that in in a future CL. I really want this CL to settle down so it can be accepted without needing constant reevaluation.\n\nhttps://codereview.appspot.com/7314113/diff/23002/misc/emacs/go-mode.el#newcode679\nmisc/emacs/go-mode.el:679: ;; FIXME Technically, -o /dev/null fails in quite some cases (on\nOn 2013/02/21 18:45:49, adonovan wrote:\n> Prefer \"TODO($USER): fix: ...\" to \"FIXME: ...\".\n\nSame as above, in a later CL.",
			"disapproval": false,
			"date": "2013-02-21 19:08:34.605610",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I submitted an Individual CLA, using the electronic form, at the same time I submitted this CL. I never received any confirmation from Google though. How do I proceed?\n\nOn 2013/02/26 17:54:28, Sameer Ajmani wrote:\n> warning: cannot find mailto:dominik.honnef@gmail.com in CONTRIBUTORS\n> \n> Dominik, please complete a CLA as described at\n> golang.org/doc/contribute.html#copyright.\n> \n> \n> \n> On 2013/02/26 17:29:23, Sameer Ajmani wrote:\n> > Ok, I will commit this and report anything I find as new issues.\n> > \n> > On Tue, Feb 26, 2013 at 12:27 PM, Russ Cox <mailto:rsc@golang.org> wrote:\n> > \n> > > On Tue, Feb 26, 2013 at 12:25 PM, <mailto:dominik.honnef@gmail.com> wrote:\n> > >\n> > >> Then I am afraid you are not testing the go-mode.el from this CL.\n> > >>\n> > >\n> > > This is another reason we should submit this CL. People can get it\n> > > straight from hg, and it will be easier to read minor fixes as separate CLs.\n> > >\n> > > Russ\n> > >\n> > >",
			"disapproval": false,
			"date": "2013-02-26 17:56:40.812100",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Syntax highlighting bug:\nIn this code:\nconst (\n\ttypeSingleton    = 0\n\ttypeFixedSize    = 1\n\ttypeVariableSize = 2\n)\nThe \"type\" substrings are highlighed and shouldn't be.\nOn 2013/02/25 17:38:58, Sameer Ajmani wrote:\n> okay, I'll try this out in xemacs. I'd appreciate any feedback from xemacs\n> users on this list.\n> On Feb 25, 2013 10:40 AM, <mailto:dominik.honnef@gmail.com> wrote:\n> \n> > On 2013/02/25 15:36:50, Sameer Ajmani wrote:\n> >\n> >> Dominik, do you know whether this go-mode should work equally well on\n> >>\n> > Gnu Emacs and X-Emacs?\n> >\n> > I have honestly no idea if it works in XEmacs. I was hoping for that to\n> > be determined during the review. The handling of raw strings should work\n> > in XEmacs, and I don't think I am using any GNU Emacs specific\n> > functions.\n> >\n> > But personally I was only able to test in GNU Emacs.\n> >\n> >\n> https://codereview.appspot.**com/7314113/%3Chttps://codereview.appspot.com/7314113/>\n> >",
			"disapproval": false,
			"date": "2013-02-25 22:17:55.949890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I propose that this has been going on long enough that we should just\r\nsubmit the CL already. It will not break Go 1.0 users immediately, because\r\nthey are not using tip.\r\n",
			"disapproval": false,
			"date": "2013-02-26 17:11:18.532480",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is happening with GNU Emacs, not Xemacs.\r\n\r\nOn Tue, Feb 26, 2013 at 11:49 AM, <dominik.honnef@gmail.com> wrote:\r\n\r\n> It will probably happen with all keywords/language builtins, even though\r\n> I have no idea why. It should work the same as in GNU Emacs, where it's\r\n> working fine. I'll have to take a look at it in a couple days\r\n>\r\n>\r\n> On 2013/02/26 16:25:23, Sameer Ajmani wrote:\r\n>\r\n>> On 2013/02/25 22:17:55, Sameer Ajmani wrote:\r\n>> > Syntax highlighting bug:\r\n>> > In this code:\r\n>> > const (\r\n>> >       typeSingleton    = 0\r\n>> >       typeFixedSize    = 1\r\n>> >       typeVariableSize = 2\r\n>> > )\r\n>> > The \"type\" substrings are highlighed and shouldn't be.\r\n>>\r\n>\r\n>  Seeing the same issue with the substring \"default\" in\r\n>> var defaultBufferSize = 1 << 20\r\n>>\r\n>\r\n>\r\n>  > On 2013/02/25 17:38:58, Sameer Ajmani wrote:\r\n>> > > okay, I'll try this out in xemacs. I'd appreciate any feedback\r\n>>\r\n> from xemacs\r\n>\r\n>> > > users on this list.\r\n>> > > On Feb 25, 2013 10:40 AM, <mailto:dominik.honnef@gmail.**com<dominik.honnef@gmail.com>>\r\n>> wrote:\r\n>> > >\r\n>> > > > On 2013/02/25 15:36:50, Sameer Ajmani wrote:\r\n>> > > >\r\n>> > > >> Dominik, do you know whether this go-mode should work equally\r\n>>\r\n> well on\r\n>\r\n>> > > >>\r\n>> > > > Gnu Emacs and X-Emacs?\r\n>> > > >\r\n>> > > > I have honestly no idea if it works in XEmacs. I was hoping for\r\n>>\r\n> that to\r\n>\r\n>> > > > be determined during the review. The handling of raw strings\r\n>>\r\n> should work\r\n>\r\n>> > > > in XEmacs, and I don't think I am using any GNU Emacs specific\r\n>> > > > functions.\r\n>> > > >\r\n>> > > > But personally I was only able to test in GNU Emacs.\r\n>> > > >\r\n>> > > >\r\n>> > >\r\n>> >\r\n>>\r\n>\r\n> https://codereview.appspot.****com/7314113/%25253Chttps://cod**\r\n> ereview.appspot.com/7314113/ <http://codereview.appspot.com/7314113/>>\r\n>\r\n>> > > >\r\n>>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7314113/<https://codereview.appspot.com/7314113/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 17:18:41.285370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 26, 2013 at 12:25 PM, <dominik.honnef@gmail.com> wrote:\r\n\r\n> Then I am afraid you are not testing the go-mode.el from this CL.\r\n>\r\n\r\nThis is another reason we should submit this CL. People can get it straight\r\nfrom hg, and it will be easier to read minor fixes as separate CLs.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-26 17:27:42.022520",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"sameer@golang.org",
				"cw@f00f.org",
				"arthur@google.com",
				"proppy@gmail.com",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "warning: cannot find dominik.honnef@gmail.com in CONTRIBUTORS\n\nDominik, please complete a CLA as described at\ngolang.org/doc/contribute.html#copyright.\n\n\n\nOn 2013/02/26 17:29:23, Sameer Ajmani wrote:\n> Ok, I will commit this and report anything I find as new issues.\n> \n> On Tue, Feb 26, 2013 at 12:27 PM, Russ Cox <mailto:rsc@golang.org> wrote:\n> \n> > On Tue, Feb 26, 2013 at 12:25 PM, <mailto:dominik.honnef@gmail.com> wrote:\n> >\n> >> Then I am afraid you are not testing the go-mode.el from this CL.\n> >>\n> >\n> > This is another reason we should submit this CL. People can get it\n> > straight from hg, and it will be easier to read minor fixes as separate CLs.\n> >\n> > Russ\n> >\n> >",
			"disapproval": false,
			"date": "2013-02-26 17:54:28.775130",
			"approval": false
		}
	],
	"owner_email": "dominik.honnef@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dominik Honnef",
	"subject": "code review 7314113: misc/emacs: Greatly improve go-mode for Emacs.",
	"created": "2013-02-16 18:07:40.541070",
	"patchsets": [
		1,
		2001,
		4001,
		14001,
		21001,
		15003,
		17002,
		32001,
		23002,
		27003,
		33004,
		19004
	],
	"modified": "2013-02-26 19:12:06.616670",
	"closed": true,
	"issue": 7314113
}