{
	"description": "runtime: Do not reserve huge amount of swap on 32 bit architectures.\n\nThe mmap() call which reserves the arena should have MAP_NORESERVE\nflag as in typical cases this memory will never be (fully) needed.\nThis matters in environments which do not do Linux style memory\novercommit, such as OpenIndiana/OpenSolaris/Solaris.\n\nThe MAP_NORESERVE flag does not exist on all operating systems\n(for example FreeBSD). Therefore we define it to zero value in\ncase it does not exist.\n\nFixes issue 21.",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"iant@golang.org",
		"dave@cheney.net",
		"gofrontend-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "snabb@epipe.com",
			"recipients": [
				"snabb@epipe.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/gofrontend/",
			"disapproval": false,
			"date": "2013-02-14 15:52:58.978080",
			"approval": false
		},
		{
			"sender": "snabb@epipe.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013-02-14 18:52, minux wrote:\r\n> please send gccgo CLs to the gofrontend-dev ML.\r\n\r\nOops, sorry. I did not know about this list. It is not mentioned at the\r\nrelevant page: http://golang.org/doc/gccgo_contribute.html\r\n\r\n> i think we'd better patch this to master Go runtime as it's not specific\r\n> to gccgo runtime.\r\n> \r\n> add the macro definition to pkg/runtime/defs_linux_{386,amd64,arm}.h and\r\n> pkg/runtime/defs_linux.go\r\n> and then use it in pkg/runtime/mem_linux.c.\r\n> \r\n> PS: if you're sure the value of the macro is uniform across all\r\n> architectures supported\r\n> by Linux, you could add the definition to os_linux.h instead of defs_linux*.\r\n\r\nI tried this out on 32 bit Linux and it did not solve any problem there\r\neven if running with \"vm.overcommit_memory=2\" (which should disable\r\nmemory overcommit).\r\n\r\nThe mmap() without MAP_NORESERVE does not seem to reserve the swap space\r\non Linux (which seems to contradict with the mmap(2) manual page). The\r\nflag makes no difference there. I am able to start a big amount of Go\r\nprogram processes even when the overcommit is disabled.\r\n\r\nThe virtual memory consumption number in ps output (VSZ) and the \"pmap\r\nPID\" output remains the same no matter if this flag is specified or not.\r\n\r\nTherefore I thought I should not suggest patching mem_linux.c.\r\n\r\n-- \r\nJanne Snabb / EPIPE Communications\r\nsnabb@epipe.com - http://epipe.com/\r\n",
			"disapproval": false,
			"date": "2013-02-14 17:16:08.788930",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please send gccgo CLs to the gofrontend-dev ML.\r\n\r\ni think we'd better patch this to master Go runtime as it's not specific to\r\ngccgo runtime.\r\n\r\nadd the macro definition to pkg/runtime/defs_linux_{386,amd64,arm}.h and\r\npkg/runtime/defs_linux.go\r\nand then use it in pkg/runtime/mem_linux.c.\r\n\r\nPS: if you're sure the value of the macro is uniform across all\r\narchitectures supported\r\nby Linux, you could add the definition to os_linux.h instead of defs_linux*.\r\n",
			"disapproval": false,
			"date": "2013-02-14 16:52:48.077060",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"snabb@epipe.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/14 17:16:08, snabb wrote:\n> \n> I tried this out on 32 bit Linux and it did not solve any problem there\n> even if running with \"vm.overcommit_memory=2\" (which should disable\n> memory overcommit).\n> \n> The mmap() without MAP_NORESERVE does not seem to reserve the swap space\n> on Linux (which seems to contradict with the mmap(2) manual page). The\n> flag makes no difference there. I am able to start a big amount of Go\n> program processes even when the overcommit is disabled.\n> \n> The virtual memory consumption number in ps output (VSZ) and the \"pmap\n> PID\" output remains the same no matter if this flag is specified or not.\n\nGiven that we don't need MAP_NORESERVE on GNU/Linux, I'm not sure we need to change the master mem_linux.c.  So I think it is OK to only patch the gofrontend file.  As far as I can see, adding MAP_NORESERVE can't hurt, but I'm not an expert; does anybody think it can?\n\nIan",
			"disapproval": false,
			"date": "2013-02-14 17:35:33.693770",
			"approval": false
		},
		{
			"sender": "snabb@epipe.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013-02-14 19:35, iant@golang.org wrote:\r\n> Given that we don't need MAP_NORESERVE on GNU/Linux, I'm not sure we\r\n> need to change the master mem_linux.c.\r\n\r\nIf the file was named mem_generic.c or something like that instead of\r\nmem_linux.c I would have probably suggested patching it :).\r\n\r\nBecause it is mem_linux.c I am thinking \"If it ain't broke, don't fix it\".\r\n\r\n\r\nI have some additional observations about Linux:\r\n\r\nI read the documentation about \"vm.overcommit_memory\" in\r\nDocumentation/vm/overcommit-accounting in Linux source tree. It states\r\nthe following:\r\n\r\n\"In mode 2 the MAP_NORESERVE flag is ignored.\"\r\n\r\nTherefore my previous testing on Linux was invalid (as I was using mode 2).\r\n\r\n\r\nIf the MAP_NORESERVE flag is put in pkg/runtime/mem_linux.c then the\r\nflag may not be defined in pkg/runtime/defs_linux.go but must be in the\r\narchitecture specified files in\r\npkg/runtime/defs_linux_{386,amd64,arm}.h. This is because the value of\r\nthe flag varies in the Linux uapi header files for different\r\narchitectures. It is 0x4000 in the \"generic\" version (which is\r\napparently used for 386, amd64 and arm) but in the alpha uapi it is\r\n0x10000, powerpc and sparc 0x40 and on mips, tile and extensa it is 0x400.\r\n\r\n\r\nI will do a bit more testing on 32 bit Linux and have a look at the\r\nLinux source code. I will get back if I find anything to add.\r\n\r\n-- \r\nJanne Snabb / EPIPE Communications\r\nsnabb@epipe.com - http://epipe.com/\r\n",
			"disapproval": false,
			"date": "2013-02-14 20:00:32.302720",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this CL has merit, the common problems with running Go or Java on\r\nVPSs like OpenVZ is the large reservation for the GC bitmap which will go\r\nunused. This is related to issue http://golang.org/issue/4447\r\nOn 15 Feb 2013 07:00, \"Janne Snabb\" <snabb@epipe.com> wrote:\r\n\r\n> On 2013-02-14 19:35, iant@golang.org wrote:\r\n> > Given that we don't need MAP_NORESERVE on GNU/Linux, I'm not sure we\r\n> > need to change the master mem_linux.c.\r\n>\r\n> If the file was named mem_generic.c or something like that instead of\r\n> mem_linux.c I would have probably suggested patching it :).\r\n>\r\n> Because it is mem_linux.c I am thinking \"If it ain't broke, don't fix it\".\r\n>\r\n>\r\n> I have some additional observations about Linux:\r\n>\r\n> I read the documentation about \"vm.overcommit_memory\" in\r\n> Documentation/vm/overcommit-accounting in Linux source tree. It states\r\n> the following:\r\n>\r\n> \"In mode 2 the MAP_NORESERVE flag is ignored.\"\r\n>\r\n> Therefore my previous testing on Linux was invalid (as I was using mode 2).\r\n>\r\n>\r\n> If the MAP_NORESERVE flag is put in pkg/runtime/mem_linux.c then the\r\n> flag may not be defined in pkg/runtime/defs_linux.go but must be in the\r\n> architecture specified files in\r\n> pkg/runtime/defs_linux_{386,amd64,arm}.h. This is because the value of\r\n> the flag varies in the Linux uapi header files for different\r\n> architectures. It is 0x4000 in the \"generic\" version (which is\r\n> apparently used for 386, amd64 and arm) but in the alpha uapi it is\r\n> 0x10000, powerpc and sparc 0x40 and on mips, tile and extensa it is 0x400.\r\n>\r\n>\r\n> I will do a bit more testing on 32 bit Linux and have a look at the\r\n> Linux source code. I will get back if I find anything to add.\r\n>\r\n> --\r\n> Janne Snabb / EPIPE Communications\r\n> snabb@epipe.com - http://epipe.com/\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-14 20:05:49.671800",
			"approval": false
		},
		{
			"sender": "snabb@epipe.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013-02-14 22:05, Dave Cheney wrote:\r\n> I think this CL has merit, the common problems with running Go or Java\r\n> on VPSs like OpenVZ is the large reservation for the GC bitmap which\r\n> will go unused. This is related to issue http://golang.org/issue/4447\r\n\r\nI tried to run OpenVZ (current version) on 32 and 64 bit configurations\r\nand created a VM with 128 MB of mem (\"vzctl set NNN --ram 128M --save\")\r\nbut I could not find any issues running simple Go programs with the\r\n\"tip\" Go. It would be useful to have the contents of\r\n\"/proc/user_beancounters\" and other relevant information to be able to\r\nreproduce the issues. I could not find this information in the thread\r\nabout the OpenVZ issues.\r\n\r\nThe most useful bit of related information that I encountered is the\r\naccountable_mapping() function in mm/mmap.c in Linux sources. It defines\r\nthat the memory usage of mappings which are writable and not shared and\r\nnot mapped with MAP_NORESERVE flag are accounted for (for whatever\r\naccounting purposes :).\r\n\r\nOn 32 bit Linux with Go \"tip\" a typical memory map of a small Go program\r\nlooks like this:\r\n\r\n08048000    252K r-x--  /home/foobar/foo\r\n08087000     12K rw---  /home/foobar/foo\r\n0808a000   4156K rw---    [ anon ]\r\n08500000 262016K -----    [ anon ]\r\n184e0000   1152K rwx--    [ anon ]\r\n18600000 523264K -----    [ anon ]\r\nb7621000   1608K rwx--    [ anon ]\r\nb77b3000      4K r-x--    [ anon ]\r\nbfe81000     84K rw---    [ stack ]\r\n total   792548K\r\n\r\nThe big chunks of 262016K + 523264K should not be accounted for by the\r\nkernel because they are not writable. No problems there.\r\n\r\nOn 64 bit Linux with Go \"tip\" a typical memory map looks like this:\r\n\r\n0000000000400000    316K r-x--  /home/snabb/foo\r\n000000000044f000     16K rw---  /home/snabb/foo\r\n0000000000453000 262232K rw---    [ anon ]\r\n000000c1ffff0000   1088K rwx--    [ anon ]\r\n00007f01ef84b000   1612K rwx--    [ anon ]\r\n00007fffe4c2c000    132K rw---    [ stack ]\r\n00007fffe4dd5000      4K r-x--    [ anon ]\r\nffffffffff600000      4K r-x--    [ anon ]\r\n total           265404K\r\n\r\nHere the big mapping of 262232K is writable which probably means that it\r\nis accounted for and could cause issues on environments which have some\r\nmemory related limit set at a low value.\r\n\r\nThis particular mapping is *not* done by calling mmap() in\r\nruntime/mem_linux.c but instead it is mapped by \".noptrbss\" section of\r\nthe ELF binary produced by Go toolchain ld. The space is already mapped\r\nby the kernel when the binary starts executing. Thus changing the\r\ncurrent mmap() calls in mem_linux.c will not change it.\r\n\r\nIt might be a good idea to map all big writable memory chunks which\r\nremain mostly unused with MAP_NORESERVE but in this case it is not\r\npossible. I suppose there is some reason for having this big section in\r\nthe ELF binary instead of mmap()ing it at runtime?\r\n\r\nI think the Linux OpenVZ issues are a separate issue from my OpenIndiana\r\nissues, although related. I propose patching the gofrontend mem.c to fix\r\nthe OpenIndiana/Solaris issues and leaving Go main repo mem_linux.c as\r\nit is until someone can give specifics for reproducing the OpenVZ\r\nproblem (and handle it as a separate issue -- if it seems still\r\nrelevant, looks like there are some recent changes in this regard in\r\nOpenVZ? I am not familiar with OpenVZ - this is the first time ever I\r\ntouched it.).\r\n\r\n\r\nFor reference, the interesting OpenVZ thread is here:\r\nhttps://groups.google.com/forum/?fromgroups=#!msg/golang-nuts/4Y-SO5QnGyY/BMefINfuH0gJ\r\n\r\nRelated issue: https://code.google.com/p/go/issues/detail?id=4447\r\n\r\n-- \r\nJanne Snabb / EPIPE Communications\r\nsnabb@epipe.com - http://epipe.com/\r\n",
			"disapproval": false,
			"date": "2013-02-15 04:23:13.525180",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"snabb@epipe.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-15 18:54:38.628620",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"snabb@epipe.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"gofrontend-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/gofrontend/source/detail?r=29b742a2ed37 ***\n\nruntime: Do not reserve huge amount of swap on 32 bit architectures.\n\nThe mmap() call which reserves the arena should have MAP_NORESERVE\nflag as in typical cases this memory will never be (fully) needed.\nThis matters in environments which do not do Linux style memory\novercommit, such as OpenIndiana/OpenSolaris/Solaris.\n\nThe MAP_NORESERVE flag does not exist on all operating systems\n(for example FreeBSD). Therefore we define it to zero value in\ncase it does not exist.\n\nFixes issue 21.\n\nR=golang-dev, minux.ma, iant, dave\nCC=gofrontend-dev, golang-dev\nhttps://codereview.appspot.com/7310094\n\nCommitter: Ian Lance Taylor <iant@golang.org>",
			"disapproval": false,
			"date": "2013-02-15 18:54:54.676550",
			"approval": false
		}
	],
	"owner_email": "snabb@epipe.com",
	"private": false,
	"base_url": "",
	"owner": "snabb",
	"subject": "code review 7310094: runtime: Do not reserve huge amount of swap on 32 bit a...",
	"created": "2013-02-14 15:48:46.218530",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-02-20 19:06:57.532470",
	"closed": true,
	"issue": 7310094
}