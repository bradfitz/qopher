{
	"description": "bufio: Optimize (*Writer).ReadFrom when the buffer is not empty",
	"cc": [
		"golang-dev@googlegroups.com",
		"nigeltao@golang.org"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "your additions to bufio_test do no fail against an unmodified bufio.go. Should they >",
			"disapproval": false,
			"date": "2012-11-21 01:47:54.442720",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go#newcode572\nsrc/pkg/bufio/bufio.go:572: //Want to call Write with the most amt of data possible, so\nSpace before \"Want\", write \"amount\" instead of \"amt\", etc.\n\nBut why is this comment up here?  It should be after the b.Buffered() != 0 check, right?\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go#newcode577\nsrc/pkg/bufio/bufio.go:577: //Have data, fill it up & then flush\nspace after //\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go#newcode581\nsrc/pkg/bufio/bufio.go:581: if err = b.Flush(); err1 != nil {\nthis is misleading.  if you really want this behavior, you'd put \"err = b.Flush()\" inside the if body, not in the initializer.  the idiom is you check the variable you declared in the condition, but here you don't.  you check err1 instead of err.\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go#newcode586\nsrc/pkg/bufio/bufio.go:586: //Don't care that we didn't read the entire buf, so\nspace after //\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go#newcode612\nsrc/pkg/bufio/bufio.go:612: if err == io.EOF || err == io.ErrUnexpectedEOF {\nwhy?\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio_test.go#newcode863\nsrc/pkg/bufio/bufio_test.go:863: //If we are returning an err this time, all future reads should fail completely\nspace after //\n\nhttps://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio_test.go#newcode873\nsrc/pkg/bufio/bufio_test.go:873: //If we are returning an err this time, all future writes should fail completely\nspace after //",
			"disapproval": false,
			"date": "2012-11-21 03:34:43.423090",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you add a test that demonstrates your change prevents the infinite loop in ReadAll ?\r\n\r\nOn 22/11/2012, at 13:40, mchaten@gmail.com wrote:\r\n\r\n> On 2012/11/21 02:01:09, dfc wrote:\r\n>> > They shouldn't fail on an unmodified version. The modifications make\r\n> it\r\n>> > so the test readers and writers behave properly after returning an\r\n> err.\r\n>> > Without those changes io.ReadAll never fails, causing an infinite\r\n> loop.\r\n> \r\n>> Is it possible to add a test for that condition ?\r\n> \r\n> Can you be more specific on the exact condition to test?\r\n> \r\n> https://codereview.appspot.com/6842078/\r\n",
			"disapproval": false,
			"date": "2012-11-22 03:12:20.527190",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/21 01:47:54, dfc wrote:\n> your additions to bufio_test do no fail against an unmodified bufio.go. Should\n> they >\nThey shouldn't fail on an unmodified version. The modifications make it so the test readers and writers behave properly after returning an err. Without those changes io.ReadAll never fails, causing an infinite loop.",
			"disapproval": false,
			"date": "2012-11-21 01:59:21.844050",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com, nigeltao@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-22 03:32:39.343350",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: nigeltao@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-21 01:42:54.314930",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> They shouldn't fail on an unmodified version. The modifications make it\r\n> so the test readers and writers behave properly after returning an err.\r\n> Without those changes io.ReadAll never fails, causing an infinite loop.\r\n\r\nIs it possible to add a test for that condition ?\r\n",
			"disapproval": false,
			"date": "2012-11-21 02:01:09.912370",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/21 02:01:09, dfc wrote:\n> > They shouldn't fail on an unmodified version. The modifications make it\n> > so the test readers and writers behave properly after returning an err.\n> > Without those changes io.ReadAll never fails, causing an infinite loop.\n> \n> Is it possible to add a test for that condition ?\n\nCan you be more specific on the exact condition to test?",
			"disapproval": false,
			"date": "2012-11-22 02:40:56.142550",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/21 03:34:43, bradfitz wrote:\n> But why is this comment up here?  It should be after the b.Buffered() != 0\n> check, right?\n\nDepends on how you look it. I view this comment as explaining the entire if block, not just the != 0 block, but I can easily see the opposite. \n\n> https://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go#newcode581\n> src/pkg/bufio/bufio.go:581: if err = b.Flush(); err1 != nil {\n> this is misleading.  if you really want this behavior, you'd put \"err =\n> b.Flush()\" inside the if body, not in the initializer.  the idiom is you check\n> the variable you declared in the condition, but here you don't.  you check err1\n> instead of err.\n\nThis is a bug that the tests are not catching. I'm adding tests for this section now. Thank you for catching this.\n\n\n> https://codereview.appspot.com/6842078/diff/5001/src/pkg/bufio/bufio.go#newcode612\n> src/pkg/bufio/bufio.go:612: if err == io.EOF || err == io.ErrUnexpectedEOF {\n> why?\n\nI touch on this earlier in the code, should I repeat the comment?",
			"disapproval": false,
			"date": "2012-11-22 02:06:45.496910",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com, nigeltao@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-22 04:00:50.378830",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For a CL about optimizing, you should probably include a BenchmarkFoo function.\n\nhttps://codereview.appspot.com/6842078/diff/7006/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6842078/diff/7006/src/pkg/bufio/bufio.go#newcode572\nsrc/pkg/bufio/bufio.go:572: fillFlush := func() error {\nI'd make this be a (private) method on *Writer instead, even if it has to take an explicit (rather than closed-over) io.Reader argument.\n\nThen you can also document its function and return values more, and also test it stand-alone easier.\n\nMaybe call it \"fillFrom\".",
			"disapproval": false,
			"date": "2012-11-26 02:58:22.203710",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close\n\nPlease reply with a PTAL if there's activity on this again.",
			"disapproval": false,
			"date": "2013-06-04 22:15:08.812980",
			"approval": false
		}
	],
	"owner_email": "mchaten@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "chaten",
	"subject": "code review 6842078: bufio: Optimize (*Writer).ReadFrom when the buffer is n...",
	"created": "2012-11-21 01:32:28.502670",
	"patchsets": [
		1,
		2001,
		5001,
		7004,
		7006
	],
	"modified": "2013-06-07 02:42:09.346720",
	"closed": true,
	"issue": 6842078
}