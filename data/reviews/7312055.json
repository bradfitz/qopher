{
	"description": "io: Simplify CopyN implementation by delegating to Copy.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [
		"adg@google.com"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi jeremy, have you signed the CLA as described here?\r\nhttp://golang.org/doc/contribute.html#copyright\r\n",
			"disapproval": false,
			"date": "2013-02-07 17:59:37.029900",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 7, 2013 at 10:00 PM, Andrew Gerrand <adg@google.com> wrote:\r\n\r\n> Won't this prevent http.ServeContent, which uses CopyN, from using the\r\n> sendfile syscall through the ReaderFrom interface?\r\n>\r\nThat's why I wrote that test.  I've broken that test several times myself.\r\n This CL didn't.\r\n",
			"disapproval": false,
			"date": "2013-02-08 06:48:00.071020",
			"approval": false
		},
		{
			"sender": "jeremy.schlatter@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I found a behavior change with this CL: http://play.golang.org/p/af1WtX_Vdg\r\n\r\nBefore this CL, it prints \"5 EOF\". After this CL, it prints \"5 <nil>\". I\r\ndon't see an obvious way to fix this. I thought of making an extra call to\r\nsrc.Read([]byte{}) to find out if it is at EOF, but (1) this is also a\r\nbehavior change and (2) strings.Reader (and perhaps other Readers) won't\r\nreturn EOF for a zero-length input buffer. I could also add an extra,\r\nunexported field to LimitedReader to record whether the underlying reader\r\nreturned EOF, but that seems hacky.\r\n",
			"disapproval": false,
			"date": "2013-02-08 09:42:17.087890",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jeremy.schlatter@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=28966b7b2f0c ***\n\nio: Simplify CopyN implementation by delegating to Copy.\n\nR=golang-dev, dave, minux.ma, bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7312055\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-02-08 04:26:20.303530",
			"approval": false
		},
		{
			"sender": "jeremy.schlatter@gmail.com",
			"recipients": [
				"jeremy.schlatter@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-07 06:54:34.991900",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 7, 2013 at 8:26 PM, <dave@cheney.net> wrote:\r\n\r\n> As a note, this CL raises the coverage for CopyN from 84% to 100%. Is\r\n> there any benchmark data to show there has not been a regression ?\r\n>\r\nFYI, CopyN is not widely used in the standard library.\r\n\r\npkg/archive/tar/reader.go: _, tr.err = io.CopyN(ioutil.Discard, tr.r, nr)\r\npkg/mime/multipart/formdata.go: n, err := io.CopyN(&b, p, maxValueBytes)\r\npkg/mime/multipart/formdata.go: n, err := io.CopyN(&b, p, maxMemory+1)\r\npkg/mime/multipart/multipart.go: if _, err := io.CopyN(p.buffer,\r\np.mr.bufReader, int64(nCopy)); err != nil {\r\npkg/net/http/fs.go: if _, err := io.CopyN(part, content, ra.length); err !=\r\nnil {\r\npkg/net/http/fs.go: io.CopyN(w, sendContent, sendSize)\r\npkg/net/http/server.go: n, _ := io.CopyN(ioutil.Discard, w.req.Body,\r\nmaxPostHandlerReadBytes+1)\r\n",
			"disapproval": false,
			"date": "2013-02-07 17:58:10.003300",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Won't this prevent http.ServeContent, which uses CopyN, from using the\r\nsendfile syscall through the ReaderFrom interface?\r\nOn 8 Feb 2013 16:02, <jeremy.schlatter@gmail.com> wrote:\r\n\r\n> On 2013/02/07 12:26:32, dfc wrote:\r\n>\r\n>> As a note, this CL raises the coverage for CopyN from 84% to 100%. Is\r\n>>\r\n> there any\r\n>\r\n>> benchmark data to show there has not been a regression ?\r\n>>\r\n>\r\n> The lines not covered in CopyN now are also not covered in Copy. I could\r\n> add unit tests for them.\r\n>\r\n> As for the regression question, I'm not sure if you're asking about\r\n> correctness or performance. I ran all.bash and all tests passed (and I\r\n> could add unit tests), but I haven't done any testing beyond that,\r\n> including performance benchmarks.\r\n>\r\n> https://codereview.appspot.**com/7312055/<https://codereview.appspot.com/7312055/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-08 06:00:59.236560",
			"approval": false
		},
		{
			"sender": "jeremy.schlatter@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Before:\r\n$ go test -bench=ClientServer net/http\r\nPASS\r\nBenchmarkClientServer    5000    417622 ns/op\r\nBenchmarkClientServerParallel4    5000    481290 ns/op\r\nBenchmarkClientServerParallel64    5000    483827 ns/op\r\nok   net/http 27.008s\r\n\r\nAfter:\r\n$ go test -bench=ClientServer net/http\r\nPASS\r\nBenchmarkClientServer   10000    420370 ns/op\r\nBenchmarkClientServerParallel4    5000    472584 ns/op\r\nBenchmarkClientServerParallel64    5000    468605 ns/op\r\nok   net/http 28.576s\r\n\r\nOn Thu, Feb 7, 2013 at 10:11 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Fri, Feb 8, 2013 at 2:00 PM, Andrew Gerrand <adg@google.com> wrote:\r\n>\r\n>> Won't this prevent http.ServeContent, which uses CopyN, from using the\r\n>> sendfile syscall through the ReaderFrom interface?\r\n>>\r\n> the old io.CopyN won't use ReadFrom either.\r\n>\r\n> And, as all sendfile(2) syscalls has support for length and offset,\r\n> perhaps we can\r\n> recognize LimitedReader in io.Copy (and introduce ReaderNFrom??)\r\n>\r\n\r\nI'm developing on a Linux machine and this passes TestLinuxSendfile. CopyN\r\ndoes use ReadFrom, it just doesn't use WriteTo. This CL doesn't change that\r\nbehavior. ReadFrom has to be defined on dst, which is passed through\r\ndirectly to Copy, and Copy uses ReadFrom.\r\n",
			"disapproval": false,
			"date": "2013-02-08 06:46:49.678310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 8, 2013 at 1:41 AM, Jeremy Schlatter <jeremy.schlatter@gmail.com\r\n> wrote:\r\n\r\n> I found a behavior change with this CL:\r\n> http://play.golang.org/p/af1WtX_Vdg\r\n>\r\n\r\nGuess we were missing a test.\r\n\r\n\r\n> Before this CL, it prints \"5 EOF\". After this CL, it prints \"5 <nil>\". I\r\n> don't see an obvious way to fix this. I thought of making an extra call to\r\n> src.Read([]byte{}) to find out if it is at EOF, but (1) this is also a\r\n> behavior change and (2) strings.Reader (and perhaps other Readers) won't\r\n> return EOF for a zero-length input buffer. I could also add an extra,\r\n> unexported field to LimitedReader to record whether the underlying reader\r\n> returned EOF, but that seems hacky.\r\n>\r\n\r\nOr an exported field. Maybe: LastErr error.\r\n\r\nOr here's an alternate idea which doesn't change any public-facing API:\r\nhttps://codereview.appspot.**com/7309063/<https://codereview.appspot.com/7309063/>\r\n",
			"disapproval": false,
			"date": "2013-02-08 16:32:30.682970",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"jeremy.schlatter@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/07 06:54:34, jschlatter wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nAs a note, this CL raises the coverage for CopyN from 84% to 100%. Is there any benchmark data to show there has not been a regression ?",
			"disapproval": false,
			"date": "2013-02-07 12:26:32.820960",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> As a note, this CL raises the coverage for CopyN from 84% to 100%. Is\r\n>\r\n> there any\r\n>>\r\n>> benchmark data to show there has not been a regression ?\r\n>\r\n>\r\n> The lines not covered in CopyN now are also not covered in Copy. I could\r\n> add unit tests for them.\r\n\r\nThat would be fantastic. You could do so in this CL, or a follow up.\r\n\r\n> As for the regression question, I'm not sure if you're asking about\r\n> correctness or performance. I ran all.bash and all tests passed (and I\r\n> could add unit tests), but I haven't done any testing beyond that,\r\n> including performance benchmarks.\r\n\r\nMainly performance, there were some concerns here,\r\nhttps://groups.google.com/d/topic/golang-nuts/ho1bw5eGJF8/discussion,\r\nwhich you addressed with David. I think\r\n\r\ngo test -bench=ClientServer net/http\r\n\r\nbefore and after should suffice as confirmation.\r\n\r\nCheers\r\n\r\nDave\r\n",
			"disapproval": false,
			"date": "2013-02-08 04:16:05.356940",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 8, 2013 at 2:00 PM, Andrew Gerrand <adg@google.com> wrote:\r\n\r\n> Won't this prevent http.ServeContent, which uses CopyN, from using the\r\n> sendfile syscall through the ReaderFrom interface?\r\n>\r\nthe old io.CopyN won't use ReadFrom either.\r\n\r\nAnd, as all sendfile(2) syscalls has support for length and offset, perhaps\r\nwe can\r\nrecognize LimitedReader in io.Copy (and introduce ReaderNFrom??)\r\n",
			"disapproval": false,
			"date": "2013-02-08 06:11:28.945700",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 8, 2013 at 2:46 PM, Jeremy Schlatter <jeremy.schlatter@gmail.com\r\n> wrote:\r\n\r\n> On Thu, Feb 7, 2013 at 10:11 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n>>\r\n>> On Fri, Feb 8, 2013 at 2:00 PM, Andrew Gerrand <adg@google.com> wrote:\r\n>>\r\n>>> Won't this prevent http.ServeContent, which uses CopyN, from using the\r\n>>> sendfile syscall through the ReaderFrom interface?\r\n>>>\r\n>> the old io.CopyN won't use ReadFrom either.\r\n>>\r\n>> And, as all sendfile(2) syscalls has support for length and offset,\r\n>> perhaps we can\r\n>> recognize LimitedReader in io.Copy (and introduce ReaderNFrom??)\r\n>>\r\n>\r\n> I'm developing on a Linux machine and this passes TestLinuxSendfile. CopyN\r\n> does use ReadFrom, it just doesn't use WriteTo. This CL doesn't change that\r\n> behavior. ReadFrom has to be defined on dst, which is passed through\r\n> directly to Copy, and Copy uses ReadFrom.\r\n>\r\nAha, we've already handled the case of io.LimitedReader-wrapper (*os.File)\r\nin pkg/net/sendfile_*.go\r\napologies for my uninformed comments.\r\n",
			"disapproval": false,
			"date": "2013-02-08 06:55:30.201610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "He's a Google employee. Just needs a CONTRIBUTORS entry.\r\n\r\nOn Thu, Feb 7, 2013 at 9:59 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> Hi jeremy, have you signed the CLA as described here?\r\n> http://golang.org/doc/contribute.html#copyright\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-08 00:40:17.569670",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jeremy.schlatter@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM at least. Anybody else have opinions?",
			"disapproval": false,
			"date": "2013-02-08 03:43:16.218030",
			"approval": true
		},
		{
			"sender": "jeremy.schlatter@gmail.com",
			"recipients": [
				"jeremy.schlatter@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/07 12:26:32, dfc wrote:\n> As a note, this CL raises the coverage for CopyN from 84% to 100%. Is there any\n> benchmark data to show there has not been a regression ?\n\nThe lines not covered in CopyN now are also not covered in Copy. I could add unit tests for them.\n\nAs for the regression question, I'm not sure if you're asking about correctness or performance. I ran all.bash and all tests passed (and I could add unit tests), but I haven't done any testing beyond that, including performance benchmarks.",
			"disapproval": false,
			"date": "2013-02-08 04:09:06.523420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Counter-proposal: document the new behavior and leave as is, just like we\r\ndid for io.ReadFull.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-08 17:03:14.503600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeremy.schlatter@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nleaving for brad to submit",
			"disapproval": false,
			"date": "2013-02-08 04:14:45.459050",
			"approval": true
		}
	],
	"owner_email": "jeremy.schlatter@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jschlatter",
	"subject": "code review 7312055: io: Simplify CopyN implementation by delegating to Copy.",
	"created": "2013-02-07 06:51:47.747210",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-02-08 04:14:45.459050",
	"closed": false,
	"issue": 7312055
}