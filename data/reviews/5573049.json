{
	"description": "net/http: parse CONNECT requests\n\nIn a CONNECT request, the resource specified on the first line is not\na URL. (It is normally a host:port, like www.google.com:443; the rpc\npackage uses it for something else.)\n\nInstead of trying and failing to parse it as a URL, store the text verbatim\nas the path in a url.URL structure.\n\nFixes issue 2755.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 24, 2012 at 9:32 AM,  <andybalholm@gmail.com> wrote:\n\n> That sounds like a better idea to me, but it won't be a simple fix.\n> We need to bring the people who work on the RPC package into the\n> discussion.\n\nThey're all on golang-dev.\n",
			"disapproval": false,
			"date": "2012-01-23 22:39:49.347736",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-24 00:53:11.656029",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "CONNECT *does* take a URL, it's just in the form of an \"authority\"\n(the RPC terminology). In the parlance of the net/url package, that\ncorresponds to the Host field, so that is what should be filled in.\n\nIf that breaks net/rpc, then we should fix net/rpc, not mangle\nnet/http or net/url.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-01-23 22:04:06.006126",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/23 22:04:06, dsymonds wrote:\n> CONNECT *does* take a URL, it's just in the form of an \"authority\"\n> (the RPC terminology). In the parlance of the net/url package, that\n> corresponds to the Host field, so that is what should be filled in.\n> \n> If that breaks net/rpc, then we should fix net/rpc, not mangle\n> net/http or net/url.\n\nThat sounds like a better idea to me, but it won't be a simple fix.\nWe need to bring the people who work on the RPC package into the discussion.",
			"disapproval": false,
			"date": "2012-01-23 22:32:36.510064",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-23 22:02:35.954245",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-23 21:58:12.423683",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 16:58,  <andybalholm@gmail.com> wrote:\n> // Store it in Path (rather than Host, where it really belongs)\n\ndrop the editorializing.\nno RFC says anything about where it really belongs.\n",
			"disapproval": false,
			"date": "2012-01-23 21:59:49.413767",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 24, 2012 at 10:55 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Mon, Jan 23, 2012 at 17:04, David Symonds <dsymonds@golang.org> wrote:\n>> CONNECT *does* take a URL, it's just in the form of an \"authority\"\n>> (the RPC terminology).\n>\n> Citation?\n\nThe thing being parsed here is the first line of the request, which is\nthe Request-Line element in RFC 2616. Request-Line contains a\nRequest-URI, which has this definition:\n  [http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2]\n  The Request-URI is a Uniform Resource Identifier (section 3.2) and\nidentifies the resource upon which to apply the request.\n\n         Request-URI    = \"*\" | absoluteURI | abs_path | authority\nIn that same section 5.1.2, it says \"The authority form is only used\nby the CONNECT method (section 9.9).\".\n\nRFC 2616 section 3.2.1 says\n  [http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.1]\n  For definitive information on\n   URL syntax and semantics, see \"Uniform Resource Identifiers (URI):\n   Generic Syntax and Semantics,\" RFC 2396 [42] (which replaces RFCs\n   1738 [4] and RFC 1808 [11]). This specification adopts the\n   definitions of \"URI-reference\", \"absoluteURI\", \"relativeURI\", \"port\",\n   \"host\",\"abs_path\", \"rel_path\", and \"authority\" from that\n   specification.\n\nThe \"authority\" element is thus defined in RFC 2396, which defines the\n\"generic URI\" syntax as\n  <scheme>://<authority><path>?<query>\nand\n  authority     = server | reg_name\nand\n  server        = [ [ userinfo \"@\" ] hostport ]\nreg_name is uninteresting here.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-01-24 00:37:34.361239",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 19:48, David Symonds <dsymonds@golang.org> wrote:\n> I propose that the net/http parser special-cases CONNECT, and\n> constructs a URL such that the host:port is in the Host field in the\n> first case, and the path is in the Path field in the second case. That\n> keeps the net/url data model consistent (e.g. the Host field is always\n> a hostname, plus an optional port), and keeps this special logic where\n> it belongs and restricted to just CONNECT.\n\nsgtm.  if the connect arg does not begin with /, then i think\nyou want to do\n\nx := \"http://\"+arg\nparseURL(arg)\nand then req.URL.Scheme = \"\"\n\nthat will handle the userinfo@ correctly.\n",
			"disapproval": false,
			"date": "2012-01-24 00:50:10.106705",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 17:04, David Symonds <dsymonds@golang.org> wrote:\n> CONNECT *does* take a URL, it's just in the form of an \"authority\"\n> (the RPC terminology).\n\nCitation?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-23 23:55:49.583841",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 24, 2012 at 11:50 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Mon, Jan 23, 2012 at 19:48, David Symonds <dsymonds@golang.org> wrote:\n>> I propose that the net/http parser special-cases CONNECT, and\n>> constructs a URL such that the host:port is in the Host field in the\n>> first case, and the path is in the Path field in the second case. That\n>> keeps the net/url data model consistent (e.g. the Host field is always\n>> a hostname, plus an optional port), and keeps this special logic where\n>> it belongs and restricted to just CONNECT.\n>\n> sgtm. \u00a0if the connect arg does not begin with /, then i think\n> you want to do\n>\n> x := \"http://\"+arg\n> parseURL(arg)\n> and then req.URL.Scheme = \"\"\n>\n> that will handle the userinfo@ correctly.\n\nYep, I was imagining something like that. Either distinguishing based\non leading \"/\", or the existence of a colon is fine with me.\n\nAndy, do you want to take a stab at this?\n",
			"disapproval": false,
			"date": "2012-01-24 00:51:33.933540",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've just read the other thread, and read the bug.\n\nCONNECT is special in a number of ways, so it seems to me that that\nshould be case handled specially. There's really only two relevant\ncases:\n  (1) The RFC case, where CONNECT receives a URL in authority form.\nThat boils down to a host:port, with maybe a leading \"userinfo@\".\n  (2) The RPC case, where CONNECT receives a path.\n\nI propose that the net/http parser special-cases CONNECT, and\nconstructs a URL such that the host:port is in the Host field in the\nfirst case, and the path is in the Path field in the second case. That\nkeeps the net/url data model consistent (e.g. the Host field is always\na hostname, plus an optional port), and keeps this special logic where\nit belongs and restricted to just CONNECT.\n",
			"disapproval": false,
			"date": "2012-01-24 00:48:58.381171",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 23, 2012, at 4:51 PM, David Symonds wrote:\n> \n> Andy, do you want to take a stab at this?\n\nSure.\n",
			"disapproval": false,
			"date": "2012-01-24 00:52:41.786892",
			"approval": false
		}
	],
	"owner_email": "andybalholm@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andybalholm",
	"subject": "code review 5573049: net/http: parse CONNECT requests",
	"created": "2012-01-23 21:57:46.174447",
	"patchsets": [
		1,
		1001,
		2003,
		3003
	],
	"modified": "2012-01-24 00:53:13.387667",
	"closed": true,
	"issue": 5573049
}