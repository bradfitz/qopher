{
	"description": "runtime: dump scheduler state if GODEBUG=schedtrace is set\nThe schedtrace value sets dump period in milliseconds.\nIn default mode the trace looks as follows:\nSCHED 0ms: gomaxprocs=4 idleprocs=0 threads=3 idlethreads=0 runqueue=0 [1 0 0 0]\nSCHED 1001ms: gomaxprocs=4 idleprocs=3 threads=6 idlethreads=3 runqueue=0 [0 0 0 0]\nSCHED 2008ms: gomaxprocs=4 idleprocs=1 threads=6 idlethreads=1 runqueue=0 [0 1 0 0]\nIf GODEBUG=scheddetail=1 is set as well, then the detailed trace is printed:\nSCHED 0ms: gomaxprocs=4 idleprocs=0 threads=3 idlethreads=0 runqueue=0 singleproc=0 gcwaiting=1 mlocked=0 nmspinning=0 stopwait=0 sysmonwait=0\n  P0: status=3 tick=1 m=0 runqsize=1/128 gfreecnt=0\n  P1: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  P2: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  P3: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  M2: p=-1 curg=-1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=-1\n  M1: p=-1 curg=-1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=-1\n  M0: p=0 curg=1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=1\n  G1: status=2() m=0 lockedm=0\n  G2: status=1() m=-1 lockedm=-1",
	"cc": [
		"golang-dev@googlegroups.com",
		"raggi@google.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-17 15:37:39.089780",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On high level this is what I used to debug most of the scheduler issues in the past, and this is the information I needed.\nI would expect the non-detailed trace is useful for advanced end users (just as gctrace).\nThe detailed online information about scheduler state is useful for debugging CPU underutilization or hangs/live-locks (when the scheduler does not crash/hang/deadlock, but just steadily works not the way it should work).\n\nI am open to suggestions about details and format of the trace.",
			"disapproval": false,
			"date": "2013-07-17 15:42:40.598620",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"raggi@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/17 15:42:40, dvyukov wrote:\n> On high level this is what I used to debug most of the scheduler issues in the\n> past, and this is the information I needed.\n> I would expect the non-detailed trace is useful for advanced end users (just as\n> gctrace).\n> The detailed online information about scheduler state is useful for debugging\n> CPU underutilization or hangs/live-locks (when the scheduler does not\n> crash/hang/deadlock, but just steadily works not the way it should work).\n> \n> I am open to suggestions about details and format of the trace.\n\nI think the format is easy enough to parse if that's the best way, but I can imagine someone wanting to plot this information to get a good view of the data over time / with a larger number of samples. There's also potential for making correlation with other debug output in some complex scenarios.\n\nIt might be easier to do that if the data could be consumed in a structured way. Are there significant complexities adding for example a channel that receives snapshots of these scheduler values at a certain frequency?",
			"disapproval": false,
			"date": "2013-07-23 21:01:26.832700",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"raggi@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/23 21:01:26, raggi wrote:\n> On 2013/07/17 15:42:40, dvyukov wrote:\n> > On high level this is what I used to debug most of the scheduler issues in the\n> > past, and this is the information I needed.\n> > I would expect the non-detailed trace is useful for advanced end users (just\n> as\n> > gctrace).\n> > The detailed online information about scheduler state is useful for debugging\n> > CPU underutilization or hangs/live-locks (when the scheduler does not\n> > crash/hang/deadlock, but just steadily works not the way it should work).\n> > \n> > I am open to suggestions about details and format of the trace.\n> \n> I think the format is easy enough to parse if that's the best way, but I can\n> imagine someone wanting to plot this information to get a good view of the data\n> over time / with a larger number of samples. There's also potential for making\n> correlation with other debug output in some complex scenarios.\n> \n> It might be easier to do that if the data could be consumed in a structured way.\n> Are there significant complexities adding for example a channel that receives\n> snapshots of these scheduler values at a certain frequency?\n\n\nWhat you describe is a different use case. For your use case a better solution would be to add runtime/debug.ReadSchedStats(). It's not difficult to add. But it is a public API, and it has problems with stability because it inherently exposes internal guts that are subject to change. Please send a separate proposal to golang-dev@.",
			"disapproval": false,
			"date": "2013-07-24 04:43:17.664460",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"raggi@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/24 04:43:17, dvyukov wrote:\n> On 2013/07/23 21:01:26, raggi wrote:\n> > On 2013/07/17 15:42:40, dvyukov wrote:\n> > > On high level this is what I used to debug most of the scheduler issues in\n> the\n> > > past, and this is the information I needed.\n> > > I would expect the non-detailed trace is useful for advanced end users (just\n> > as\n> > > gctrace).\n> > > The detailed online information about scheduler state is useful for\n> debugging\n> > > CPU underutilization or hangs/live-locks (when the scheduler does not\n> > > crash/hang/deadlock, but just steadily works not the way it should work).\n> > > \n> > > I am open to suggestions about details and format of the trace.\n> > \n> > I think the format is easy enough to parse if that's the best way, but I can\n> > imagine someone wanting to plot this information to get a good view of the\n> data\n> > over time / with a larger number of samples. There's also potential for making\n> > correlation with other debug output in some complex scenarios.\n> > \n> > It might be easier to do that if the data could be consumed in a structured\n> way.\n> > Are there significant complexities adding for example a channel that receives\n> > snapshots of these scheduler values at a certain frequency?\n> \n> \n> What you describe is a different use case. For your use case a better solution\n> would be to add runtime/debug.ReadSchedStats(). It's not difficult to add. But\n> it is a public API, and it has problems with stability because it inherently\n> exposes internal guts that are subject to change. Please send a separate\n> proposal to golang-dev@.\n\nping",
			"disapproval": false,
			"date": "2013-08-12 08:45:45.102160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"raggi@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11435044/diff/12001/src/pkg/runtime/extern.go\nFile src/pkg/runtime/extern.go (right):\n\nhttps://codereview.appspot.com/11435044/diff/12001/src/pkg/runtime/extern.go#newcode26\nsrc/pkg/runtime/extern.go:26: gctrace: setting gctrace=1 causes the garbage collector to emit a single line to standard\nThis is all going to get word-wrapped together. Please indent this line to the end of the paragraph with a tab, so that it ends up in a <pre> block, and then put blank lines before each of the new things (gctrace:, schedtrace:, scheddetail:).",
			"disapproval": false,
			"date": "2013-08-13 17:59:40.475840",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"raggi@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a128bb95c3bd ***\n\nruntime: dump scheduler state if GODEBUG=schedtrace is set\nThe schedtrace value sets dump period in milliseconds.\nIn default mode the trace looks as follows:\nSCHED 0ms: gomaxprocs=4 idleprocs=0 threads=3 idlethreads=0 runqueue=0 [1 0 0 0]\nSCHED 1001ms: gomaxprocs=4 idleprocs=3 threads=6 idlethreads=3 runqueue=0 [0 0 0 0]\nSCHED 2008ms: gomaxprocs=4 idleprocs=1 threads=6 idlethreads=1 runqueue=0 [0 1 0 0]\nIf GODEBUG=scheddetail=1 is set as well, then the detailed trace is printed:\nSCHED 0ms: gomaxprocs=4 idleprocs=0 threads=3 idlethreads=0 runqueue=0 singleproc=0 gcwaiting=1 mlocked=0 nmspinning=0 stopwait=0 sysmonwait=0\n  P0: status=3 tick=1 m=0 runqsize=1/128 gfreecnt=0\n  P1: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  P2: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  P3: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  M2: p=-1 curg=-1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=-1\n  M1: p=-1 curg=-1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=-1\n  M0: p=0 curg=1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=1\n  G1: status=2() m=0 lockedm=0\n  G2: status=1() m=-1 lockedm=-1\n\nR=golang-dev, raggi, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/11435044",
			"disapproval": false,
			"date": "2013-08-13 20:37:32.822040",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 11435044: runtime: dump scheduler state if GODEBUG=schedtrace is set",
	"created": "2013-07-17 15:18:34.877620",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		12001,
		18001,
		21001,
		24001
	],
	"modified": "2013-08-13 20:37:35.027760",
	"closed": true,
	"issue": 11435044
}