{
	"description": "Fixes issue 1371.\nTry closesocket() before CloseHandle()",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-12-30 10:29:19.779837",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for fixing it.\n\nhttp://codereview.appspot.com/3760044/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/3760044/diff/2001/src/pkg/syscall/syscall_windows.go#newcode151\nsrc/pkg/syscall/syscall_windows.go:151: //sys\tclosesocket(s int32) (ok bool, errno int) = wsock32.closesocket\nAs per doco, it returns SOCKET_ERROR(-1) if fails, therefore it should be:\n\n//sys closesocket(s int32) (errno int) [failretval==-1] = wsock32.closesocket\n\nAlso, please move it to where all socket related calls are, somewhere next to shutdown() would be good.\n\nhttp://codereview.appspot.com/3760044/diff/2001/src/pkg/syscall/syscall_windows.go#newcode295\nsrc/pkg/syscall/syscall_windows.go:295: ok, e = closesocket(int32(fd))\nThere are 3 reasons I don't like your solution:\n\n1) Users of syscall.CloseHandle() expect it to do what Windows CoseHandle() does. Not until looking at actual implementation, they will discover the truth.\n\n2) How can you be sure that closesocket() will return WSAENOTSOCK for every \"non-socket\" handle. Did you actually checked to see if it even works?\n\n3) Not as crucial as others, but there is some overhead calling 2 syscalls instead of one. I don't not how large it is, but.\n\nI would rather see the solution along your original lines. Perhaps, create closesocket() in net package with two distinct implementations for unix and windows. And use closesocket as required in net.",
			"disapproval": false,
			"date": "2010-12-30 23:33:26.506558",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/12/30 23:33:26, brainman wrote:\n> As per doco, it returns SOCKET_ERROR(-1) if fails, therefore it should be:\n> \n> //sys closesocket(s int32) (errno int) [failretval==-1] = wsock32.closesocket\n\nRight - I will change it.\nThough in this case it doesn't really matter, since it returns 0, if not -1.\n\n\n> Also, please move it to where all socket related calls are, somewhere next to\n> shutdown() would be good.\n\nYes sir. :)\n\n\n> 1) Users of syscall.CloseHandle() expect it to do what Windows CoseHandle()\n> does. Not until looking at actual implementation, they will discover the truth.\n\nYou assume that this is what the users expect...\nBut the fact is that some user had expected that syscall.CloseHandle() would also close a socket handle. While it didn't...\nAnd I just made his wishes came true :)\n\n\n> 2) How can you be sure that closesocket() will return WSAENOTSOCK for every\n> \"non-socket\" handle. Did you actually checked to see if it even works?\n\nOf course I checked if it worked.\nDid you actually checked to see if it even works?\n\n\n> 3) Not as crucial as others, but there is some overhead calling 2 syscalls\n> instead of one. I don't not how large it is, but.\n> \n> I would rather see the solution along your original lines. Perhaps, create\n> closesocket() in net package with two distinct implementations for unix and\n> windows. And use closesocket as required in net.\n\nI tried that, but there would be too many changes all around the source code - many more reasons for you to grumble about :)",
			"disapproval": false,
			"date": "2010-12-31 08:54:54.093925",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/3760044/diff/3004/src/pkg/os/file_windows.go\nFile src/pkg/os/file_windows.go (right):\n\nhttp://codereview.appspot.com/3760044/diff/3004/src/pkg/os/file_windows.go#newcode86\nsrc/pkg/os/file_windows.go:86: e = syscall.Closesocket(int32(file.fd))\nThere is one other thing that is bugging me.\n\nAt the moment all dlls are loaded on program startup by syscall. But I'm hopeful that one day we can change that, so we load only dlls we use, no more: os will load kernel32, net will load wsock32 and ws2_32 and so on.\n\nSince you propose to call closesocket() from os, that means wsock32 dll have to be loaded for every program that imports os package. What is a benefit to pay that price?",
			"disapproval": false,
			"date": "2011-01-06 22:53:26.323847",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, brainman (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-12-31 09:58:17.171002",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/12/31 08:54:54, PiotrN wrote:\n> On 2010/12/30 23:33:26, brainman wrote:\n> > As per doco, it returns SOCKET_ERROR(-1) if fails, therefore it should be:\n> > \n> > //sys closesocket(s int32) (errno int) [failretval==-1] = wsock32.closesocket\n> \n> Right - I will change it.\n> Though in this case it doesn't really matter...\n\nSorry, I am taking it back: it did matter - this was very wrong. \nI had verified that it fixed the leaking sockets issue, but didn't notice it created a leak in a non-socket handles.\n\nShould be fine now, with Patch Set 3. Thanks for letting me know.\n\n\nAnswering your concerns about if closesocket() may not return WSAENOTSOCK for a non-socket.\n\nSockets use different range of values so Windows has no problem to identify that e.g. a file handle is not a socket.\nThe same range as for sockets is used for pipes, but I made sure that calling closesocket() with a pipe handle does result in WSAENOTSOCK.\nIn fact my first idea was to use GetFileType() function and then call either closesocket() or CloseHandle() upon what it returned. But the problem was that the function returns the same value for sockets as for pipes so you'd still need one more syscall to distinguish between these two... And effectively you would need 2 or 3 calls to free a handle while now you need 1 or 2.\n\nI did try the solution where the upper layer decides if to call closesocket() or CloseHandle(), but I discarded it. This required me to change the code in a way to explicitly mark a file as \"socket\" while creating it. I did not like this so I decided that the benefits of saving one syscall while freeing a handle (only on Windows) is not worth complicating the current stable implementation for all the other OS'es.",
			"disapproval": false,
			"date": "2010-12-31 12:29:30.143368",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/12/31 08:54:54, PiotrN wrote:\n> ... I tried that, but there would be too many changes all around the source code ...\n\nHow about something like that:\n\nhttp://codereview.appspot.com/3834042/ ?\n\nAlex",
			"disapproval": false,
			"date": "2011-01-04 01:47:01.428865",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/04 01:47:01, brainman wrote:\n> On 2010/12/31 08:54:54, PiotrN wrote:\n> > ... I tried that, but there would be too many changes all around the source\n> code ...\n> \n> How about something like that:\n> \n> http://codereview.appspot.com/3834042/ ?\n\nThis should work.\nBut that's what I meant by \"too many changes all around the code\".",
			"disapproval": false,
			"date": "2011-01-04 08:13:06.520533",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/04 08:13:06, PiotrN wrote:\n> But that's what I meant by \"too many changes all around the code\".\n\nYour CL does not include any changes in sock.go, ipsock.go, tcpsock.go and unixsock.go where syscall.Close() is used to close socket descriptor. Please, change those, then we will compare \"amount of changes\".\n\nI don't like that your solution to net problem is hidden in os and syscall packages, while it could be easily implemented right in the net.\n\nYou also use the fact that syscall.closesocket api fails with WSAENOTSOCK for non-socket handles. I looked in closesocket doco (http://msdn.microsoft.com/en-us/library/ms737582%28v=vs.85%29.aspx) and can't find any references to that fact. Perhaps in some other situations, when unavoidable, trick like that might be useful, but here, I prefer to just call closesocket.\n\nPlease, let me know what you want to do. I'm quite happy to submit your CL, but if you make changes in line with my suggestions. You are the one who proposed the solution, you should get credit for it.\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2011-01-05 01:03:08.573729",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/05 01:03:08, brainman wrote:\n> On 2011/01/04 08:13:06, PiotrN wrote:\n> > But that's what I meant by \"too many changes all around the code\".\n> \n> Your CL does not include any changes in sock.go, ipsock.go, tcpsock.go and\n> unixsock.go where syscall.Close() is used to close socket descriptor. Please,\n> change those, then we will compare \"amount of changes\".\n\nMy CL does not need to have any changes in sock.go, ipsock.go, tcpsock.go and unixsock.go.\nThe solution makes syscall.Close() working fine also for sockets.\n\n\n> I don't like that your solution to net problem is hidden in os and syscall\n> packages, while it could be easily implemented right in the net.\n\nI don't like that your solution gets rid of the os.File that was representing an open socket.\nNot only because the Windows port is now even more different from the other ones. \nI think this file could become useful in some cases - i.e. it has a filename which describes what the socket does.\n\n\n> You also use the fact that syscall.closesocket api fails with WSAENOTSOCK for\n> non-socket handles. I looked in closesocket doco\n> (http://msdn.microsoft.com/en-us/library/ms737582%2528v=vs.85%2529.aspx) and can't\n> find any references to that fact. \n\nAccording to the doc I ahve the result of WSAENOTSOCK menas \"The descriptor is not a socket.\"\nPlus, if you try it, it actually does return WSAENOTSOCK  for non-sockets.\nHow much more do you need? \n\n\n> Please, let me know what you want to do. I'm quite happy to submit your CL, but\n> if you make changes in line with my suggestions. You are the one who proposed\n> the solution, you should get credit for it.\n\nYou have a bigger experience with this code, you are the boss and you should submit what you think is better.\nI am only a volunteer with some opinions.\nI don't care about credits for such a tiny thing, but I appreciate your concern - thanks.",
			"disapproval": false,
			"date": "2011-01-05 08:30:39.581170",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/05 08:30:39, PiotrN wrote:\n> My CL does not need to have any changes in sock.go, ipsock.go, tcpsock.go and\n> unixsock.go.\n\nI don't agree.\n\n> The solution makes syscall.Close() working fine also for sockets.\n\nI don't think so. This is from syscall package:\n\nfunc Close(fd int) (errno int) {\n\tif ok, e := CloseHandle(int32(fd)); !ok {\n\t\treturn e\n\t}\n\treturn 0\n}\n\nAren't we supposed to use closesocket api for sockets, not CloseHandle? Perhaps I'm missing something here?\n\n> I don't like that your solution gets rid of the os.File that was representing an\n> open socket.\n> Not only because the Windows port is now even more different from the other\n> ones. \n\nWindows net io implementation is very different from linux and others, because it uses very different os api. But that is OK as long as it fits go net package interface as best (simple, fast, ...) as possible.\n\n> I think this file could become useful in some cases - i.e. it has a filename\n> which describes what the socket does.\n\nPerhaps you're right about that. But I can't see any real use for it, especially since sysfile is private field of private struct (netFD). Maybe inside a debugger.\n\n> According to the doc I ahve the result of WSAENOTSOCK menas \"The descriptor is\n> not a socket.\"\n\nReading further:\n\n\"The closesocket function closes a socket. Use it to release the socket descriptor s so that further references to s fail with the error WSAENOTSOCK.\"\n\nI don't think this meaning for WSAENOTSOCK fits your use of it. I just don't want to even think about possible implications when there is a straight forward solution: call closesocket() for sockets, and call CloseHandle() for files.\n\n> Plus, if you try it, it actually does return WSAENOTSOCK  for non-sockets.\n\nI want to cover every single scenario, not a particular sample that you've tried.\n\n> How much more do you need? \n\nDoco that describe the process you've used will do for me.\n\n> ... you should\n> submit what you think is better.\n> I am only a volunteer with some opinions.\n\nI make mistakes all the times. I would like as many other opinions as I could get to satisfy myself I'm doing the right thing. Unless I can convince others, how can I be sure.\n\nAlex",
			"disapproval": false,
			"date": "2011-01-05 12:53:32.835843",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, brainman (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2011-01-05 14:20:18.904842",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/05 12:53:32, brainman wrote:\n> Aren't we supposed to use closesocket api for sockets, not CloseHandle? Perhaps\n> I'm missing something here?\n\nOh, sorry - you're right.\nI was thinking about my original fix when I changed the behaviour of CloseHandle...\nBut later I addedd the extra CloseSocketOrHandle() and this one would indeed need changes in the 4 other files.\n\n\n> I don't think this meaning for WSAENOTSOCK fits your use of it. I just don't\n> want to even think about possible implications when there is a straight forward\n> solution: call closesocket() for sockets, and call CloseHandle() for files.\n\nI agree that calling closesocket() for sockets and CloseHandle() for other handles seem to be a more proper solution.\n\nMy initial goal was to make as few changes as possible.\nOtherwise I would modify your patch a bit to get something like in the set 4.\n\n\n> I make mistakes all the times. I would like as many other opinions as I could\n> get to satisfy myself I'm doing the right thing. Unless I can convince others,\n> how can I be sure.\n\nAs I said, I think your patch is OK.\nThe only one thing I would eventually consider to change to to keep the sysfile. \nUnless it's really not needed there, but then: why was it implemented in the first place?",
			"disapproval": false,
			"date": "2011-01-05 14:31:25.039495",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> The only one thing I would eventually consider to change to to keep the sysfile.\n> \n> Unless it's really not needed there, but then: why was it implemented in the\n> first place?\n\nI don't know why it is there, but, I suspect, it was easy way to close sockets plus you would get all SetFinalizer logic for free.\n\nI don't see any point keeping sysfile. Let's remove it and see what others will say.\n\nAlex\n\nhttp://codereview.appspot.com/3760044/diff/3004/src/pkg/os/file.go\nFile src/pkg/os/file.go (right):\n\nhttp://codereview.appspot.com/3760044/diff/3004/src/pkg/os/file.go#newcode20\nsrc/pkg/os/file.go:20: Issock  bool\nI don't think it is OK to stick this new field in here. It is meaningless for unix, and making it public making it even worse. You don't need to touch os to fix net. Just look at my CL how you can change net without touching os.",
			"disapproval": false,
			"date": "2011-01-06 06:12:27.096228",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/06 06:12:27, brainman wrote:\n> I don't see any point keeping sysfile. Let's remove it and see what others will\n> say.\n\nI agree. \n\n\n> I don't think it is OK to stick this new field in here. It is meaningless for\n> unix, and making it public making it even worse.\n\nYes, I know it's not nice, but it was supposed to be fast & simple, not pretty :)\n\n\n> You don't need to touch os to\n> fix net. Just look at my CL how you can change net without touching os.\n\nI know we don't need to touch OS if we decided to get rid of the sysfile, and since we agreed that this would be a good way to go then I say: commit your other patch - mine wouldn't be anyhow better/different.",
			"disapproval": false,
			"date": "2011-01-06 08:08:39.721614",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/06 08:08:39, PiotrN wrote:\n> On 2011/01/06 06:12:27, brainman wrote:\n> > I don't see any point keeping sysfile. Let's remove it and see what others\n> will\n> > say.\n> \n> I agree. \n\nI think the sysfile is there so you could have the File() method in several objects:\n\"File returns a copy of the underlying os.File, set to blocking mode. It is the caller's responsibility to close f when finished. Closing c does not affect f, and closing f does not affect c.\"\n\nI know this method hasn't been quite implemented for windows yet, but IMO if you remove the sysfile you should as well remove the File() method from the API, because (ultimately) it's wrong to have some functionality implemented only for chosen ports.",
			"disapproval": false,
			"date": "2011-01-06 09:36:03.961750",
			"approval": false
		},
		{
			"sender": "piotrnar@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/06 22:53:26, brainman wrote:\n> http://codereview.appspot.com/3760044/diff/3004/src/pkg/os/file_windows.go\n> File src/pkg/os/file_windows.go (right):\n> \n> http://codereview.appspot.com/3760044/diff/3004/src/pkg/os/file_windows.go#newcode86\n> src/pkg/os/file_windows.go:86: e = syscall.Closesocket(int32(file.fd))\n> There is one other thing that is bugging me.\n> \n> At the moment all dlls are loaded on program startup by syscall. But I'm hopeful\n> that one day we can change that, so we load only dlls we use, no more: os will\n> load kernel32, net will load wsock32 and ws2_32 and so on.\n> \n> Since you propose to call closesocket() from os, that means wsock32 dll have to\n> be loaded for every program that imports os package. What is a benefit to pay\n> that price?\n\nI see your point but I am afraid there isn't much we can do about if if we want to keep the sysfile there.\nI think it needs to be closed in os since the File object is implemented only there.\nUnless there are some magic features of the language that I am now aware of. For example: we cannot replace the Close() method of a created File object, during a run time, can we?",
			"disapproval": false,
			"date": "2011-01-07 08:08:47.371859",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/07 08:08:47, PiotrN wrote:\n> ... there isn't much we can do about if if we want\n> to keep the sysfile there.\n\nNever mind. I'll mail my CL for review and we'll see what happens.\n\n> ... we cannot replace the Close() method of a created File object, during a\n> run time, can we?\n\nI don't know.\n\nAlex",
			"disapproval": false,
			"date": "2011-01-10 01:06:53.305652",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"piotrnar@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "removing reviewers",
			"disapproval": false,
			"date": "2011-01-19 19:18:52.083886",
			"approval": false
		}
	],
	"owner_email": "piotrnar@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "PiotrN",
	"subject": "code review 3760044: Fixes issue 1371.",
	"created": "2010-12-30 10:25:18.452204",
	"patchsets": [
		1,
		2001,
		9001,
		3004
	],
	"modified": "2011-01-19 19:18:52.153851",
	"closed": false,
	"issue": 3760044
}