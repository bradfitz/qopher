{
	"description": "cmd/gc: inline copy in frontend to call memmove directly.\n\nA new node type OSPTR is added to refer to the data pointer of\nstrings and slices in a simple way during walk(). It will be\nuseful for future work on simplification of slice arithmetic.\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCopy1Byte                10            4  -52.52%\nBenchmarkCopy2Byte                36           26  -28.02%\nBenchmarkCopy4Byte                74           55  -25.84%\nBenchmarkCopy8Byte                36           26  -27.75%\nBenchmarkCopy12Byte               74           55  -25.84%\nBenchmarkCopy16Byte               36           26  -28.02%\nBenchmarkCopy32Byte               36           26  -28.02%\nBenchmarkCopy128Byte              38           28  -24.61%\nBenchmarkCopy1024Byte            107           96  -10.28%\nBenchmarkCopy1String              27            4  -84.11%\nBenchmarkCopy2String              27           25   -4.44%\nBenchmarkCopy4String              56           54   -3.02%\nBenchmarkCopy8String              27           25   -4.81%\nBenchmarkCopy12String             56           54   -3.02%\nBenchmarkCopy16String             27           25   -4.44%\nBenchmarkCopy32String             27           25   -5.17%\nBenchmarkCopy128String            29           28   -4.05%\nBenchmarkCopy1024String           96           96   -0.41%\n\nbenchmark                   old MB/s     new MB/s  speedup\nBenchmarkCopy1Byte             96.75       204.34    2.11x\nBenchmarkCopy2Byte             54.91        76.35    1.39x\nBenchmarkCopy4Byte             53.58        72.26    1.35x\nBenchmarkCopy8Byte            219.74       304.05    1.38x\nBenchmarkCopy12Byte           160.72       216.76    1.35x\nBenchmarkCopy16Byte           439.27       611.25    1.39x\nBenchmarkCopy32Byte           879.09      1222.41    1.39x\nBenchmarkCopy128Byte         3354.53      4437.76    1.32x\nBenchmarkCopy1024Byte        9490.74     10670.42    1.12x\nBenchmarkCopy1String           36.99       233.05    6.30x\nBenchmarkCopy2String           73.98        77.52    1.05x\nBenchmarkCopy4String           71.16        73.40    1.03x\nBenchmarkCopy8String          295.92       310.71    1.05x\nBenchmarkCopy12String         213.49       220.17    1.03x\nBenchmarkCopy16String         591.64       620.20    1.05x\nBenchmarkCopy32String        1182.17      1242.93    1.05x\nBenchmarkCopy128String       4320.98      4507.24    1.04x\nBenchmarkCopy1024String     10591.94     10633.94    1.00x",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"cshapiro@google.com",
		"dave@cheney.net",
		"daniel.morsing@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-14 23:30:53.718520",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why does the memmove take uintptr instead of, say, *byte?\r\n\r\n\r\n\r\nOn Tue, May 14, 2013 at 4:30 PM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: inline copy in frontend to call memmove directly.\r\n>\r\n> A new node type OSPTR is added to refer to the data pointer of\r\n> strings and slices in a simple way during walk(). It will be\r\n> useful for future work on simplification of slice arithmetic.\r\n>\r\n> benchmark                  old ns/op    new ns/op    delta\r\n> BenchmarkCopy1Byte                10            4  -52.52%\r\n> BenchmarkCopy2Byte                36           26  -28.02%\r\n> BenchmarkCopy4Byte                74           55  -25.84%\r\n> BenchmarkCopy8Byte                36           26  -27.75%\r\n> BenchmarkCopy12Byte               74           55  -25.84%\r\n> BenchmarkCopy16Byte               36           26  -28.02%\r\n> BenchmarkCopy32Byte               36           26  -28.02%\r\n> BenchmarkCopy128Byte              38           28  -24.61%\r\n> BenchmarkCopy1024Byte            107           96  -10.28%\r\n> BenchmarkCopy1String              27            4  -84.11%\r\n> BenchmarkCopy2String              27           25   -4.44%\r\n> BenchmarkCopy4String              56           54   -3.02%\r\n> BenchmarkCopy8String              27           25   -4.81%\r\n> BenchmarkCopy12String             56           54   -3.02%\r\n> BenchmarkCopy16String             27           25   -4.44%\r\n> BenchmarkCopy32String             27           25   -5.17%\r\n> BenchmarkCopy128String            29           28   -4.05%\r\n> BenchmarkCopy1024String           96           96   -0.41%\r\n>\r\n> benchmark                   old MB/s     new MB/s  speedup\r\n> BenchmarkCopy1Byte             96.75       204.34    2.11x\r\n> BenchmarkCopy2Byte             54.91        76.35    1.39x\r\n> BenchmarkCopy4Byte             53.58        72.26    1.35x\r\n> BenchmarkCopy8Byte            219.74       304.05    1.38x\r\n> BenchmarkCopy12Byte           160.72       216.76    1.35x\r\n> BenchmarkCopy16Byte           439.27       611.25    1.39x\r\n> BenchmarkCopy32Byte           879.09      1222.41    1.39x\r\n> BenchmarkCopy128Byte         3354.53      4437.76    1.32x\r\n> BenchmarkCopy1024Byte        9490.74     10670.42    1.12x\r\n> BenchmarkCopy1String           36.99       233.05    6.30x\r\n> BenchmarkCopy2String           73.98        77.52    1.05x\r\n> BenchmarkCopy4String           71.16        73.40    1.03x\r\n> BenchmarkCopy8String          295.92       310.71    1.05x\r\n> BenchmarkCopy12String         213.49       220.17    1.03x\r\n> BenchmarkCopy16String         591.64       620.20    1.05x\r\n> BenchmarkCopy32String        1182.17      1242.93    1.05x\r\n> BenchmarkCopy128String       4320.98      4507.24    1.04x\r\n> BenchmarkCopy1024String     10591.94     10633.94    1.00x\r\n>\r\n> Please review this at https://codereview.appspot.**com/9101048/<https://codereview.appspot.com/9101048/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/5g/cgen.c\r\n>   M src/cmd/5g/gsubr.c\r\n>   M src/cmd/6g/cgen.c\r\n>   M src/cmd/6g/gsubr.c\r\n>   M src/cmd/8g/cgen.c\r\n>   M src/cmd/8g/gsubr.c\r\n>   M src/cmd/gc/builtin.c\r\n>   M src/cmd/gc/gen.c\r\n>   M src/cmd/gc/go.h\r\n>   M src/cmd/gc/racewalk.c\r\n>   M src/cmd/gc/runtime.go\r\n>   M src/cmd/gc/typecheck.c\r\n>   M src/cmd/gc/walk.c\r\n>   M src/pkg/runtime/append_test.go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-14 23:41:55.247200",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/14 23:41:55, bradfitz wrote:\n> Why does the memmove take uintptr instead of, say, *byte?\n\nI am somewhat concerned about this as well.  Unless a value is identified as a pointer the garbage collector will soon ignore it.",
			"disapproval": false,
			"date": "2013-05-14 23:47:49.929580",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/5/15 Brad Fitzpatrick <bradfitz@golang.org>:\r\n> Why does the memmove take uintptr instead of, say, *byte?\r\n\r\nThere's no particular reason (it's just less verbose for pointer\r\narithmetic), maybe byte* or unsafe.Pointer is better for precise GC?\r\n",
			"disapproval": false,
			"date": "2013-05-14 23:47:53.352640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes. Everybody needs to get into the habit now of never using uintptr for a\r\npointer, even if you think it should be safe.  It will become increasingly\r\nless safe.\r\n\r\n\r\n\r\nOn Tue, May 14, 2013 at 4:47 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> 2013/5/15 Brad Fitzpatrick <bradfitz@golang.org>:\r\n> > Why does the memmove take uintptr instead of, say, *byte?\r\n>\r\n> There's no particular reason (it's just less verbose for pointer\r\n> arithmetic), maybe byte* or unsafe.Pointer is better for precise GC?\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-14 23:49:57.686050",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/14 23:47:53, remyoudompheng wrote:\n> There's no particular reason (it's just less verbose for pointer\n> arithmetic), maybe byte* or unsafe.Pointer is better for precise GC?\n\nbyte* would be great, thanks.",
			"disapproval": false,
			"date": "2013-05-14 23:50:05.872890",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, cshapiro@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-16 06:39:37.887330",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice improvement on linux/arm (from pandaboard)\n\nalarm(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCopy1Byte                61           54  -11.67%\nBenchmarkCopy2Byte                84           57  -31.84%\nBenchmarkCopy4Byte               127           64  -49.53%\nBenchmarkCopy8Byte               118           69  -41.10%\nBenchmarkCopy12Byte              122           71  -41.48%\nBenchmarkCopy16Byte              125           75  -39.84%\nBenchmarkCopy32Byte              127           68  -45.75%\nBenchmarkCopy128Byte             130          121   -6.92%\nBenchmarkCopy1024Byte            468          437   -6.62%\nBenchmarkCopy1String              67           52  -22.19%\nBenchmarkCopy2String              71           57  -19.61%\nBenchmarkCopy4String              81           63  -22.41%\nBenchmarkCopy8String             130           67  -47.85%\nBenchmarkCopy12String            108           70  -34.81%\nBenchmarkCopy16String            111           74  -33.24%\nBenchmarkCopy32String             85           69  -19.01%\nBenchmarkCopy128String           117          121   +3.42%\nBenchmarkCopy1024String          455          437   -3.96%\n\nbenchmark                   old MB/s     new MB/s  speedup\nBenchmarkCopy1Byte             16.21        18.36    1.13x\nBenchmarkCopy2Byte             23.58        34.59    1.47x\nBenchmarkCopy4Byte             31.43        62.41    1.99x\nBenchmarkCopy8Byte             67.72       115.03    1.70x\nBenchmarkCopy12Byte            98.35       168.03    1.71x\nBenchmarkCopy16Byte           127.33       212.71    1.67x\nBenchmarkCopy32Byte           250.61       464.31    1.85x\nBenchmarkCopy128Byte          979.61      1053.71    1.08x\nBenchmarkCopy1024Byte        2185.20      2341.54    1.07x\nBenchmarkCopy1String           14.78        19.01    1.29x\nBenchmarkCopy2String           28.01        34.82    1.24x\nBenchmarkCopy4String           49.24        63.54    1.29x\nBenchmarkCopy8String           61.40       118.05    1.92x\nBenchmarkCopy12String         110.15       170.53    1.55x\nBenchmarkCopy16String         143.46       215.82    1.50x\nBenchmarkCopy32String         375.80       464.09    1.23x\nBenchmarkCopy128String       1086.87      1053.68    0.97x\nBenchmarkCopy1024String      2246.60      2340.10    1.04x\n\nalarm(~/go/src/pkg/runtime) % hg id\nbce231eb0fdd+ tip\n\nSo this is after 4cb93e2900d0 was committed.",
			"disapproval": false,
			"date": "2013-05-18 01:14:40.049350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/18 01:14:40, dfc wrote:\n> Nice improvement on linux/arm (from pandaboard)\n> \n> alarm(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\n> benchmark                  old ns/op    new ns/op    delta\n> BenchmarkCopy1Byte                61           54  -11.67%\n> BenchmarkCopy2Byte                84           57  -31.84%\n> BenchmarkCopy4Byte               127           64  -49.53%\n> BenchmarkCopy8Byte               118           69  -41.10%\n\nThanks, it looks as if function calls have a fixed cost of ~50ns.",
			"disapproval": false,
			"date": "2013-05-18 08:15:51.909380",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll try the same benchmark on my A15 chromebook later. Faster\r\nprocessor and memory, but longer pipeline, should be interesting.\r\n\r\nOn Sat, May 18, 2013 at 6:15 PM,  <remyoudompheng@gmail.com> wrote:\r\n> On 2013/05/18 01:14:40, dfc wrote:\r\n>>\r\n>> Nice improvement on linux/arm (from pandaboard)\r\n>\r\n>\r\n>> alarm(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\r\n>> benchmark                  old ns/op    new ns/op    delta\r\n>> BenchmarkCopy1Byte                61           54  -11.67%\r\n>> BenchmarkCopy2Byte                84           57  -31.84%\r\n>> BenchmarkCopy4Byte               127           64  -49.53%\r\n>> BenchmarkCopy8Byte               118           69  -41.10%\r\n>\r\n>\r\n> Thanks, it looks as if function calls have a fixed cost of ~50ns.\r\n>\r\n>\r\n> https://codereview.appspot.com/9101048/\r\n",
			"disapproval": false,
			"date": "2013-05-18 08:20:17.570150",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are results from linux/arm on a chromebook\n\nlocalhost(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCopy1Byte                21           19  -10.19%\nBenchmarkCopy2Byte                33           26  -19.39%\nBenchmarkCopy4Byte                30           19  -36.30%\nBenchmarkCopy8Byte                32           21  -33.85%\nBenchmarkCopy12Byte               33           23  -31.36%\nBenchmarkCopy16Byte               34           24  -28.03%\nBenchmarkCopy32Byte               35           22  -36.21%\nBenchmarkCopy128Byte              46           35  -22.94%\nBenchmarkCopy1024Byte            206          196   -4.85%\nBenchmarkCopy1String              25           17  -32.55%\nBenchmarkCopy2String              26           34  +30.04%\nBenchmarkCopy4String              25           19  -25.49%\nBenchmarkCopy8String              28           20  -26.07%\nBenchmarkCopy12String             29           22  -23.99%\nBenchmarkCopy16String             30           24  -19.27%\nBenchmarkCopy32String             30           22  -26.86%\nBenchmarkCopy128String            40           35  -13.37%\nBenchmarkCopy1024String          201          195   -2.99%\n\nbenchmark                   old MB/s     new MB/s  speedup\nBenchmarkCopy1Byte             46.28        51.64    1.12x\nBenchmarkCopy2Byte             60.55        75.12    1.24x\nBenchmarkCopy4Byte            131.88       207.16    1.57x\nBenchmarkCopy8Byte            248.44       374.98    1.51x\nBenchmarkCopy12Byte           355.25       517.70    1.46x\nBenchmarkCopy16Byte           462.87       643.53    1.39x\nBenchmarkCopy32Byte           891.13      1398.18    1.57x\nBenchmarkCopy128Byte         2769.83      3593.05    1.30x\nBenchmarkCopy1024Byte        4958.78      5204.99    1.05x\nBenchmarkCopy1String           39.24        58.15    1.48x\nBenchmarkCopy2String           76.10        58.42    0.77x\nBenchmarkCopy4String          156.78       210.55    1.34x\nBenchmarkCopy8String          285.38       386.19    1.35x\nBenchmarkCopy12String         405.38       533.18    1.32x\nBenchmarkCopy16String         531.86       659.42    1.24x\nBenchmarkCopy32String        1036.41      1415.81    1.37x\nBenchmarkCopy128String       3165.76      3657.31    1.16x\nBenchmarkCopy1024String      5094.03      5244.11    1.03x",
			"disapproval": false,
			"date": "2013-05-18 23:58:34.679300",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-05-24 08:11:42.074560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 08:11:42, dfc wrote:\n> ping\n\nping",
			"disapproval": false,
			"date": "2013-05-27 22:06:09.453690",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9101048/diff/13001/src/cmd/gc/typecheck.c\nFile src/cmd/gc/typecheck.c (right):\n\nhttps://codereview.appspot.com/9101048/diff/13001/src/cmd/gc/typecheck.c#newcode1576\nsrc/cmd/gc/typecheck.c:1576: n->type = types[TUNSAFEPTR];\nUse TUINTPTR here. Using unsafe means that app engine wont be able to compile anything using copy()",
			"disapproval": false,
			"date": "2013-05-28 15:37:20.664650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please use unsafe.Pointer. That's what it's for. If we need to add some more selective disabling of the u flag, that's fine.",
			"disapproval": false,
			"date": "2013-06-03 19:56:30.551920",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 19:56:30, rsc wrote:\n> Please use unsafe.Pointer. That's what it's for. If we need to add some more\n> selective disabling of the u flag, that's fine.\n\nI don't think we need to very selective. You could just disable it after typechecking of the top level functions.",
			"disapproval": false,
			"date": "2013-06-03 20:01:40.347510",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "So it's already unsafe.Pointer. Is it okay that memmove uses *byte?\n\nAlso, the node \"OSPTR\" is not strictly necessary for the patch, but it makes things easier to read and might be useful in other cases. It means S(lice|tring) PoinTeR but a better name could be used if needed.\n\nIn naddr (?g/gsubr.c), it's written TUINTPTR, it is used for stack pointer maps? I should change it to tptr to imitate what is done for ITAB.",
			"disapproval": false,
			"date": "2013-06-04 07:03:39.534180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good mostly. Using *byte is fine for now.\nIn general the compiler will need to be careful not to use TUINTPTR for a pointer. \n\nI'd like to know what's going on in gen.c though.\n\nhttps://codereview.appspot.com/9101048/diff/13001/src/cmd/gc/gen.c\nFile src/cmd/gc/gen.c (right):\n\nhttps://codereview.appspot.com/9101048/diff/13001/src/cmd/gc/gen.c#newcode299\nsrc/cmd/gc/gen.c:299: case OCONVNOP: // FIXME.\nThis needs an explanation.\n\nhttps://codereview.appspot.com/9101048/diff/13001/src/cmd/gc/typecheck.c\nFile src/cmd/gc/typecheck.c (right):\n\nhttps://codereview.appspot.com/9101048/diff/13001/src/cmd/gc/typecheck.c#newcode1576\nsrc/cmd/gc/typecheck.c:1576: n->type = types[TUNSAFEPTR];\nDoes types[tptr] work, or does it cause a crash because it has no ->elem?",
			"disapproval": false,
			"date": "2013-06-10 20:31:56.911090",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping?",
			"disapproval": false,
			"date": "2013-06-21 18:06:01.148210",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sorry, just overwhelmed by all the runtime stuff. will review tomorrow.\r\n",
			"disapproval": false,
			"date": "2013-06-27 03:17:54.468860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ha, this ping was for remy not for me. :-)",
			"disapproval": false,
			"date": "2013-06-27 15:41:36.048350",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Remy, ping.\n\nDo you plan to finish/submit this, or is it superseded by other CLs since?",
			"disapproval": false,
			"date": "2013-07-23 16:37:37.164360",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/23 16:37:37, bradfitz wrote:\n> Remy, ping.\n> \n> Do you plan to finish/submit this, or is it superseded by other CLs since?\n\nI still plan to finish this. I'll have a look at rsc's comments.",
			"disapproval": false,
			"date": "2013-07-28 16:32:35.675950",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 9101048: cmd/gc: inline copy in frontend to call memmove directly.",
	"created": "2013-05-14 23:29:04.271690",
	"patchsets": [
		1,
		2001,
		4001,
		13001
	],
	"modified": "2013-07-28 16:32:37.183540",
	"closed": false,
	"issue": 9101048
}