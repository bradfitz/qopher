{
	"description": "os/exec: make exec_test.go:TestExtraFilesFDShuffle portable.",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"fullung@gmail.com",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-05-02 17:26:51.913720",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nAlthough the fix alone might not be important enough to\nbe included Go 1.1, but this enables a test for a bug whose\nfix does include in Go 1.1, so IMHO we should enable that\ntest before release and hence accept this CL into Go 1.1.",
			"disapproval": false,
			"date": "2013-05-05 08:29:37.817480",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=600c5389c9d3 ***\n\nos/exec: make exec_test.go:TestExtraFilesFDShuffle portable.\n\nR=golang-dev, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/9103045\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-06-18 15:55:37.538960",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This might break OS X 10.6's builders.  If it does I'll make the test skip\r\non that platform.\r\n\r\n\r\n\r\nOn Tue, Jun 18, 2013 at 8:55 AM, <bradfitz@golang.org> wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=600c5389c9d3<https://code.google.com/p/go/source/detail?r=600c5389c9d3>***\r\n>\r\n> os/exec: make exec_test.go:**TestExtraFilesFDShuffle portable.\r\n>\r\n> R=golang-dev, minux.ma\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/9103045<https://codereview.appspot.com/9103045>\r\n>\r\n> Committer: Brad Fitzpatrick <bradfitz@golang.org>\r\n>\r\n>\r\n> https://codereview.appspot.**com/9103045/<https://codereview.appspot.com/9103045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-18 15:58:39.711100",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "go version devel +4298a713c372 Tue Jun 18 17:15:26 2013 -0700 linux/amd64\n\n$ go test os/exec -cpu=1,1\n--- FAIL: TestExtraFilesFDShuffle (0.01 seconds)\nexec_test.go:278: bad test value for stderr pipe\nFAIL\nFAIL\tos/exec\t0.545s",
			"disapproval": false,
			"date": "2013-06-19 12:40:14.041570",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is what I see on darwin/amd64, 10.7.5\r\n\r\n^C^Xodessa(~/go/src) % go test os/exec -v\r\n=== RUN TestEcho\r\n--- PASS: TestEcho (0.02 seconds)\r\n=== RUN TestCatStdin\r\n--- PASS: TestCatStdin (0.02 seconds)\r\n=== RUN TestCatGoodAndBadFile\r\n--- PASS: TestCatGoodAndBadFile (0.02 seconds)\r\n=== RUN TestNoExistBinary\r\n--- PASS: TestNoExistBinary (0.00 seconds)\r\n=== RUN TestExitStatus\r\n--- PASS: TestExitStatus (0.02 seconds)\r\n=== RUN TestPipes\r\n--- PASS: TestPipes (0.02 seconds)\r\n=== RUN TestPipeLookPathLeak\r\n--- PASS: TestPipeLookPathLeak (0.03 seconds)\r\n=== RUN TestExtraFilesFDShuffle\r\n--- PASS: TestExtraFilesFDShuffle (0.02 seconds)\r\n=== RUN TestExtraFiles\r\n--- PASS: TestExtraFiles (0.06 seconds)\r\n=== RUN TestExtraFilesRace\r\n--- PASS: TestExtraFilesRace (0.26 seconds)\r\n=== RUN TestHelperProcess\r\n--- PASS: TestHelperProcess (0.00 seconds)\r\n=== RUN TestLookPathNotFound\r\n--- PASS: TestLookPathNotFound (0.00 seconds)\r\n=== RUN TestLookPathUnixEmptyPath\r\n--- PASS: TestLookPathUnixEmptyPath (0.00 seconds)\r\nPASS\r\nok   os/exec 0.734s\r\nodessa(~/go/src) % go test os/exec -v -cpu=1,1\r\n=== RUN TestEcho\r\n--- PASS: TestEcho (0.02 seconds)\r\n=== RUN TestCatStdin\r\n--- PASS: TestCatStdin (0.02 seconds)\r\n=== RUN TestCatGoodAndBadFile\r\n--- PASS: TestCatGoodAndBadFile (0.02 seconds)\r\n=== RUN TestNoExistBinary\r\n--- PASS: TestNoExistBinary (0.00 seconds)\r\n=== RUN TestExitStatus\r\n--- PASS: TestExitStatus (0.02 seconds)\r\n=== RUN TestPipes\r\n--- PASS: TestPipes (0.02 seconds)\r\n=== RUN TestPipeLookPathLeak\r\n--- PASS: TestPipeLookPathLeak (0.02 seconds)\r\n=== RUN TestExtraFilesFDShuffle\r\n--- PASS: TestExtraFilesFDShuffle (0.02 seconds)\r\n=== RUN TestExtraFiles\r\n--- PASS: TestExtraFiles (0.07 seconds)\r\n=== RUN TestExtraFilesRace\r\n--- PASS: TestExtraFilesRace (0.26 seconds)\r\n=== RUN TestHelperProcess\r\n--- PASS: TestHelperProcess (0.00 seconds)\r\n=== RUN TestLookPathNotFound\r\n--- PASS: TestLookPathNotFound (0.00 seconds)\r\n=== RUN TestLookPathUnixEmptyPath\r\n--- PASS: TestLookPathUnixEmptyPath (0.00 seconds)\r\n=== RUN TestEcho\r\n--- PASS: TestEcho (0.02 seconds)\r\n=== RUN TestCatStdin\r\n--- PASS: TestCatStdin (0.02 seconds)\r\n=== RUN TestCatGoodAndBadFile\r\n--- PASS: TestCatGoodAndBadFile (0.02 seconds)\r\n=== RUN TestNoExistBinary\r\n--- PASS: TestNoExistBinary (0.00 seconds)\r\n=== RUN TestExitStatus\r\n--- PASS: TestExitStatus (0.02 seconds)\r\n=== RUN TestPipes\r\n--- PASS: TestPipes (0.02 seconds)\r\n=== RUN TestPipeLookPathLeak\r\n--- PASS: TestPipeLookPathLeak (0.03 seconds)\r\n=== RUN TestExtraFilesFDShuffle\r\nruntime: kevent on fd 4 failed with 9\r\n\r\nI do not know if -cpu=1,1 is an expected mode for this test.\r\n\r\nOn Wed, Jun 19, 2013 at 10:40 PM,  <fullung@gmail.com> wrote:\r\n> go version devel +4298a713c372 Tue Jun 18 17:15:26 2013 -0700\r\n> linux/amd64\r\n>\r\n> $ go test os/exec -cpu=1,1\r\n> --- FAIL: TestExtraFilesFDShuffle (0.01 seconds)\r\n> exec_test.go:278: bad test value for stderr pipe\r\n> FAIL\r\n> FAIL    os/exec 0.545s\r\n>\r\n>\r\n> https://codereview.appspot.com/9103045/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-19 12:43:55.554660",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/06/19 12:43:55, dfc wrote:\n> I do not know if -cpu=1,1 is an expected mode for this test.\n\nThe test.cpu flag seems useful, although run.bash currently only uses it in runtime and sync tests.\n\nSince I started running my tests, I think we've had less than 5 tests that broke when run with multiple test.cpu values.\n\nThe few times it happened, it got fixed. I think it's worth not letting the test suite decay along this axis.\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2013-06-19 12:51:13.632020",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 19, 2013 at 9:16 PM,  <fullung@gmail.com> wrote:\r\n> One option could be to add something along the lines of\r\n> trytobreakitbeforesubmittingacl.bash which does:\r\n>\r\n> for i in $*; do\r\n> go test -short $i\r\n> go test $i\r\n> go test -short -cpu=1,2,4,8,16,256 $i\r\n> go test -cpu=1,2,4,8,16,256 $i\r\n> for j in `seq 1 10`; do\r\n> GOMAXPROCS=$[1+$[RANDOM%256]] go test -short $i\r\n> GOMAXPROCS=$[1+$[RANDOM%256]] go test $i\r\n> done\r\n> done\r\n>\r\n> if you could convince people to run that for CLs that change packages\r\n> and/or add tests.\r\nI have a concern that if a test isn't run by the builder, people will\r\ntend to break\r\na test.\r\ni think catching bugs like this is precisely the reason why we set up\r\nthe builders.\r\n",
			"disapproval": false,
			"date": "2013-06-19 13:23:01.250580",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Albert,\r\n\r\nPlease don't interpret what I am saying as a criticism. I am extremely grateful for the work you do to ensure the std lib is of a high quality. \r\n\r\nMy point, if indeed I have one, is run.bash doesn't test the packages like this, so it is understandable that their authors may not consider this case. I certainly don't. \r\n\r\nI think that if -CPU=x,x is an expected gate for tests to pass then the should be enshrined in run.bash.\r\n\r\nCheers\r\n\r\nDave\r\n\r\n\r\n\r\nOn 19/06/2013, at 22:51, fullung@gmail.com wrote:\r\n\r\n> Hello\r\n> \r\n> On 2013/06/19 12:43:55, dfc wrote:\r\n>> I do not know if -cpu=1,1 is an expected mode for this test.\r\n> \r\n> The test.cpu flag seems useful, although run.bash currently only uses it\r\n> in runtime and sync tests.\r\n> \r\n> Since I started running my tests, I think we've had less than 5 tests\r\n> that broke when run with multiple test.cpu values.\r\n> \r\n> The few times it happened, it got fixed. I think it's worth not letting\r\n> the test suite decay along this axis.\r\n> \r\n> Regards\r\n> \r\n> Albert\r\n> \r\n> https://codereview.appspot.com/9103045/\r\n",
			"disapproval": false,
			"date": "2013-06-19 12:59:26.103950",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 19, 2013 at 8:59 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> I am extremely grateful for the work you do to ensure the std lib is of a high quality.\r\nMe too. Thank you Albert for your stress testing the std lib.\r\n> My point, if indeed I have one, is run.bash doesn't test the packages like this, so it is understandable that their authors may not consider this case. I certainly don't.\r\n> I think that if -CPU=x,x is an expected gate for tests to pass then the should be enshrined in run.bash.\r\nhowever this will make the test take twice the time on the builder,\r\ncan we afford that?\r\n\r\ntesting -test.cpu=1,1 essentially test that a test doesn't modify its\r\nglobal context.\r\ni don't think it's important for normal tests, however, if a test\r\ninvolves a mechanism\r\nin runtime that will:\r\n1. create new OS thread\r\n2. create new goroutine\r\n3. other implicit changes to the runtime\r\nwe should test that case explicitly that it doesn't \"ruin\" its own\r\ncontext/environment.\r\n\r\na concrete example is the goroutine leakage test in net/http (although\r\nit is not enabled\r\nin -short tests)\r\n",
			"disapproval": false,
			"date": "2013-06-19 13:15:14.737770",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/06/19 12:59:26, dfc wrote:\n> Please don't interpret what I am saying as a criticism. I am extremely grateful\n> for the work you do to ensure the std lib is of a high quality. \n\nSure, no problem.\n\n> My point, if indeed I have one, is run.bash doesn't test the packages like this,\n> so it is understandable that their authors may not consider this case. I\n> certainly don't. \n> I think that if -CPU=x,x is an expected gate for tests to pass then the should\n> be enshrined in run.bash.\n\nI think the reason it hasn't been enshrined there is that it is going to make run.bash take too long on the slow builders.\n\nOne option could be to add something along the lines of trytobreakitbeforesubmittingacl.bash which does:\n\nfor i in $*; do\ngo test -short $i\ngo test $i\ngo test -short -cpu=1,2,4,8,16,256 $i\ngo test -cpu=1,2,4,8,16,256 $i\nfor j in `seq 1 10`; do\nGOMAXPROCS=$[1+$[RANDOM%256]] go test -short $i\nGOMAXPROCS=$[1+$[RANDOM%256]] go test $i\ndone\ndone\n\nif you could convince people to run that for CLs that change packages and/or add tests.\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2013-06-19 13:16:40.740290",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nOn Wed, Jun 19, 2013 at 1:22 PM, minux <minux.ma@gmail.com> wrote:\r\n>> if you could convince people to run that for CLs that change packages\r\n>> and/or add tests.\r\n> I have a concern that if a test isn't run by the builder, people will\r\n> tend to break\r\n> a test.\r\n> i think catching bugs like this is precisely the reason why we set up\r\n> the builders.\r\n\r\nAgreed.\r\n\r\nCan we add a parameter to make.bash/run.bash that invokes extra tests\r\nlike these and have only fast builders use it?\r\n\r\nRegards\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2013-06-19 13:28:18.277580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 19, 2013 at 9:27 PM, Albert Strasheim <fullung@gmail.com> wrote:\r\n> On Wed, Jun 19, 2013 at 1:22 PM, minux <minux.ma@gmail.com> wrote:\r\n>>> if you could convince people to run that for CLs that change packages\r\n>>> and/or add tests.\r\n>> I have a concern that if a test isn't run by the builder, people will\r\n>> tend to break\r\n>> a test.\r\n>> i think catching bugs like this is precisely the reason why we set up\r\n>> the builders.\r\n>\r\n> Agreed.\r\n>\r\n> Can we add a parameter to make.bash/run.bash that invokes extra tests\r\n> like these and have only fast builders use it?\r\nthis is possible.\r\n\r\nwhat i have in mind is that we add some standard test to std lib that runs last\r\n(like pkg/net/http/z_last_test.go), and checks for cases like:\r\n1. remaining open fds (i.e. leaked fd)\r\n2. remaining goroutines\r\n3. broken net pollers (to catch the \"runtime: kevent on fd 4 failed\r\nwith 9\" error)\r\n\r\nand then we make sure all builder test this.\r\n",
			"disapproval": false,
			"date": "2013-06-19 13:37:51.983810",
			"approval": false
		}
	],
	"owner_email": "cnicolaou@google.com",
	"private": false,
	"base_url": "",
	"owner": "cnicolaou",
	"subject": "code review 9103045: os/exec: make exec_test.go:TestExtraFilesFDShuffle portable.",
	"created": "2013-05-02 17:06:06.282510",
	"patchsets": [
		1,
		2001,
		5001,
		8001
	],
	"modified": "2013-06-19 13:37:52.191230",
	"closed": false,
	"issue": 9103045
}