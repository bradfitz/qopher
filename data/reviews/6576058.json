{
	"description": "text/template: better error messages during execution,\nThey now show the correct name, the byte offset on the line, and context for the failed evaluation.\nBefore:\n        template: three:7: error calling index: index out of range: 5\nAfter:\n        template: top:7:20: executing \"three\" at <index \"hi\" $>: error calling index: index out of range: 5\nHere top is the template that was parsed to create the set, and the error appears with the action\nstarting at byte 20 of line 7 of \"top\", inside the template called \"three\", evaluating the expression\n<index \"hi\" $>.\n\nAlso fix a bug in index: it didn't work on strings. Ouch.\n\nAlso fix bug in error for index: was showing type of index not slice.\nThe real previous error was:\n        template: three:7: error calling index: can't index item of type int\nThe html/template package's errors can be improved by building on this;\nI'll do that in a separate pass.\n\nExtends the API for text/template/parse but only by addition of a field and method. The\nold API still works.\n\nFixes issue 3188.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-29 05:37:44.174760",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-02 12:50:45.580680",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The changes to text/template/parse/node.go give me pause for thought. On one hand the Line fields are \"deprecated\", but kept for compatibility, but on the other hand NilNode is changed from a bool to a struct. Both seem like relatively internal details (as is the whole parse package), and though the former change is much more likely to cause problems than the latter change it still seems like a technical compatibility breakage.\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/exec.go#newcode74\nsrc/pkg/text/template/exec.go:74: format = fmt.Sprintf(\"template: %s: %s\", s.tmpl.Name(), format)\nif template names can have format specifiers, this could run into problems. This would be safer as\n  format = \"template: %s: \" + format\n  args = append([]string{s.tmpl.Name()}, args...)\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/exec.go#newcode77\nsrc/pkg/text/template/exec.go:77: format = fmt.Sprintf(\"template: %s: executing %q at <%s>: %s\", location, s.tmpl.Name(), context, format)\nhere the context might be more likely to contain a %s, so even more cause to only do a single format\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/exec.go#newcode504\nsrc/pkg/text/template/exec.go:504: s.errorf(\"can't call method/function %q with %d results\", name, typ.NumOut())\nthis is still a little imprecise. This could say \"can't call method/function foo with 2 results\", which misses the nuance that the second return value may be an error type. I think to get a good error here goodFunc should return an error instead of a bool. That can wait to a different CL; add a TODO?\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/exec_test.go\nFile src/pkg/text/template/exec_test.go (right):\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/exec_test.go#newcode695\nsrc/pkg/text/template/exec_test.go:695: t.Error(\"expected error\")\nt.Fatal\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/parse/lex.go\nFile src/pkg/text/template/parse/lex.go (right):\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/parse/lex.go#newcode110\nsrc/pkg/text/template/parse/lex.go:110: var w int\nor just drop the name of the return arg, and make the next line :=\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/parse/node.go\nFile src/pkg/text/template/parse/node.go (right):\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/parse/node.go#newcode130\nsrc/pkg/text/template/parse/node.go:130: Line int             // The line number in the input (deprecated; kept for compatibility)\nwhat does \"deprecated\" mean here? It's still populated, but will eventually not be? That users should avoid using it?\n\nhttps://codereview.appspot.com/6576058/diff/5001/src/pkg/text/template/parse/node.go#newcode324\nsrc/pkg/text/template/parse/node.go:324: type NilNode struct {\nI guess this also counts as an API change if this package's API is part of go1.",
			"disapproval": false,
			"date": "2012-10-02 11:57:47.549900",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Deprecated means fix in Go 2 maybe.\r\n\r\nI'm not worried about the change to NilNode, since it went in after Go 1.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-02 12:48:57.585530",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI think concatenating the args is an easier way to avoid trouble with formatting, but I don't object to your approach here modulo handling context safely.\n\nhttps://codereview.appspot.com/6576058/diff/6009/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttps://codereview.appspot.com/6576058/diff/6009/src/pkg/text/template/exec.go#newcode82\nsrc/pkg/text/template/exec.go:82: format = fmt.Sprintf(\"template: %s: executing %q at <%s>: %s\", location, name, context, format)\ncontext can also have % signs, right?",
			"disapproval": false,
			"date": "2012-10-03 01:19:12.598830",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7cce71c4dfda ***\n\ntext/template: better error messages during execution,\nThey now show the correct name, the byte offset on the line, and context for the failed evaluation.\nBefore:\n        template: three:7: error calling index: index out of range: 5\nAfter:\n        template: top:7:20: executing \"three\" at <index \"hi\" $>: error calling index: index out of range: 5\nHere top is the template that was parsed to create the set, and the error appears with the action\nstarting at byte 20 of line 7 of \"top\", inside the template called \"three\", evaluating the expression\n<index \"hi\" $>.\n\nAlso fix a bug in index: it didn't work on strings. Ouch.\n\nAlso fix bug in error for index: was showing type of index not slice.\nThe real previous error was:\n        template: three:7: error calling index: can't index item of type int\nThe html/template package's errors can be improved by building on this;\nI'll do that in a separate pass.\n\nExtends the API for text/template/parse but only by addition of a field and method. The\nold API still works.\n\nFixes issue 3188.\n\nR=golang-dev, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/6576058",
			"disapproval": false,
			"date": "2012-10-03 02:02:33.473130",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6576058: text/template: better error messages during execution,",
	"created": "2012-09-28 07:22:59.312200",
	"patchsets": [
		1,
		2001,
		5001,
		6009,
		6010
	],
	"modified": "2012-10-03 02:02:35.961770",
	"closed": true,
	"issue": 6576058
}