{
	"description": "time: Add Millisecond() and Microsend() to Duration\n\nThe constants Microsecond and Millisecond are define, but not the getters\nfor Duration. When a developer (myself) sees that, tends to expect the\ngetters to be defined.\nFixes issue 5491.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"vova616@gmail.com",
		"google@julienschmidt.com",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "vova616@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think because we have time.Millisecond and time.Microsecond we should \r\nhave this methods, and yeah I also think they should be floats.\r\nI find myself using Millisecond a lot, never used Microsecond though.\r\n\r\nOn Friday, May 17, 2013 2:42:17 AM UTC+3, R\u00e9my wrote:\r\n>\r\n> On 2013/05/16 22:54:36, guillermo wrote: \r\n> > Hello mailto:golan...@googlegroups.com <javascript:>, \r\n>\r\n> > I'd like you to review this change to \r\n> > https://code.google.com/p/go \r\n>\r\n> why should they return an integer? don't we also expect to have \r\n> Picoseconds? Femtoseconds? where does it stop? \r\n>\r\n> Why did you need them? \r\n>\r\n> https://codereview.appspot.com/9337050/ \r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-16 23:51:17.649940",
			"approval": false
		},
		{
			"sender": "guillermo@cientifico.net",
			"recipients": [
				"guillermo@cientifico.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-05-16 22:54:36.146300",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"guillermo@cientifico.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/16 22:54:36, guillermo wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nwhy should they return an integer? don't we also expect to have Picoseconds? Femtoseconds? where does it stop?\n\nWhy did you need them?",
			"disapproval": false,
			"date": "2013-05-16 23:42:17.524400",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, May 17, 2013 1:51:16 AM UTC+2, Vova Niki wrote:\r\n\r\n> [...] we have time.Millisecond and time.Microsecond [...]\r\n\r\n\r\nDo we?\r\nhttp://tip.golang.org/pkg/time/ \r\n\r\nWe have nanosecond precision, so we also have micro- / millisecond \r\nprecision.\r\nI think \"d.Nanoseconds() / 1000\" / \"d.Nanoseconds() / 1000000\" is something \r\neveryone can write.\r\nLet's keep the API plain.\r\n",
			"disapproval": false,
			"date": "2013-05-17 01:28:15.759750",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh you meant these constants, right? http://golang.org/pkg/time/#Duration\r\nSorry, I thought you meant something like func (t Time) Microsecond() int<http://golang.org/pkg/time/#Time.Nanosecond>\r\n.\r\nBut I still don't think we need this methods.\r\n\r\nOn Friday, May 17, 2013 3:28:14 AM UTC+2, Julien Schmidt wrote:\r\n>\r\n> On Friday, May 17, 2013 1:51:16 AM UTC+2, Vova Niki wrote:\r\n>\r\n>> [...] we have time.Millisecond and time.Microsecond [...]\r\n>\r\n>\r\n> Do we?\r\n> http://tip.golang.org/pkg/time/ \r\n>\r\n> We have nanosecond precision, so we also have micro- / millisecond \r\n> precision.\r\n> I think \"d.Nanoseconds() / 1000\" / \"d.Nanoseconds() / 1000000\" is \r\n> something everyone can write.\r\n> Let's keep the API plain.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-17 01:39:42.224480",
			"approval": false
		},
		{
			"sender": "guillermo@cientifico.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch is about API predictability. API predictability\r\n\r\n* When you start learning a language (I start with go two weeks ago),\r\ntimers is one of the first things you learn (Sleep and related). On the\r\ndoc, the first thing you read to be able to pass args to the timer\r\nfunctions is Duration, and its constants.\r\n\r\nThen for duration one expects to have the same methods as the constants\r\ndefine used Duration.\r\n\r\n\r\n2013/5/17 <remyoudompheng@gmail.com>\r\n>\r\n> why should they return an integer?\r\n\r\n\r\nYou are right. Fixed to return a float64, and uploaded\r\n\r\ndon't we also expect to have\r\n> Picoseconds? Femtoseconds? where does it stop?\r\n>\r\n\r\nI recommend you to stop in the same place you stop while defining\r\nthe constants:\r\n\r\n   438\tconst (   439\t\tNanosecond  Duration = 1   440\t\tMicrosecond\r\n    = 1000 * Nanosecond   441\t\tMillisecond          = 1000 *\r\nMicrosecond   442\t\tSecond               = 1000 * Millisecond\r\n443\t\tMinute               = 60 * Second   444\t\tHour                 =\r\n60 * Minute   445\t)   446\r\n\r\nRight now you have implemented:\r\n\r\n* (d Duration) Nanosecond\r\n* ????\r\n* ????\r\n* (d Duration) Second\r\n* (d Duration) Minute\r\n* (d Duration) Hour\r\n\r\nI will say that adding Picoseconds and Femtoseconds is not a good idea, but\r\nI am not an expert. And having the full collection of constants will be the\r\nexpected api ( for Duration !! ).\r\n\r\n\r\n> Why did you need them?\r\n\r\nI has measuring http request time, and ms sounds like the common why\r\nto measure this kind of latency. On that case I didn't need to much\r\nprecision (the web server to measure have response time of 10 seconds :-P\r\n), so for that reason I went first by mistake to int64, while float64 is\r\nthe good approach.\r\n\r\n\r\n2013/5/17 Julien Schmidt <google@julienschmidt.com>\r\n\r\n> Oh you meant these constants, right? http://golang.org/pkg/time/#Duration\r\n\r\nRight.\r\n\r\n\r\n> Sorry, I thought you meant something like func (t Time) Microsecond() int<http://golang.org/pkg/time/#Time.Nanosecond>\r\n> .\r\n>\r\n\r\nNo. For time is more difficult, because when you ask for (Time)\r\nMilliseconds, you don't know if you are going to get seconds +\r\nmilliseconds, or just nanoseconds / 1000. For that reason I didn't went\r\ninto that direction. Will make the api more complex. The patch for duration\r\nfor me looks like an obvious hole in the api.\r\n\r\nBut I still don't think we need this methods.\r\n>\r\nMe neither, but on that case, please remove (Duration)\r\nSeconds/Minutes/Hours. Following that criteria: they are simple operations\r\nthat I can do my self, and it is weird to have just 50% of the methods.\r\n\r\nCheers\r\n\r\n-- \r\nGuillermo \u00c1lvarez\r\n",
			"disapproval": false,
			"date": "2013-05-17 07:40:57.738950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"guillermo@cientifico.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"vova616@gmail.com",
				"google@julienschmidt.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you, but no. I don't believe these are common enough to warrant growing the API; it's unclear whether they should return int64 or float64; and the implementations are incorrect (as described by the comment immediately following them).\n\nRuss",
			"disapproval": false,
			"date": "2013-05-24 18:40:02.248770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"guillermo@cientifico.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"vova616@gmail.com",
				"google@julienschmidt.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-06-20 18:20:38.364240",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"guillermo@cientifico.net",
				"golang-dev@googlegroups.com",
				"vova616@gmail.com",
				"google@julienschmidt.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:27:41.020620",
			"approval": false
		}
	],
	"owner_email": "guillermo@cientifico.net",
	"private": false,
	"base_url": "",
	"owner": "guillermo",
	"subject": "code review 9337050: time: Add Millisecond() and Microsend() to Duration",
	"created": "2013-05-16 22:51:53.974320",
	"patchsets": [
		1,
		2001,
		3,
		7001,
		13001
	],
	"modified": "2013-07-20 21:27:41.162350",
	"closed": false,
	"issue": 9337050
}