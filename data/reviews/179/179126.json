{
	"description": "Add http.CanonicalPath and tests for it. Remove BUG(rsc) from url.go.",
	"cc": [
		"rsc@golang.org",
		"imkrasin@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/179126/diff/10/11\nFile src/pkg/http/url.go (right):\n\nhttp://codereview.appspot.com/179126/diff/10/11#newcode84\nsrc/pkg/http/url.go:84: if out.Len() > 1 || out.Len() == 1 && out.Last() != \"\" {\nHere is a bug. It should be:\n\nif out.Len() == 0 || out.Last() == \"..\" || out.Len() == 1 && out.Last == \"\" {\n  out.Push(v)\n} else {\n  out.Pop()\n}",
			"disapproval": false,
			"date": "2009-12-22 17:05:57.681165",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "(I haven't looked at RFC 2396 in a while.\nIf there are examples there, please add\nthem to the test list.)\n\nhttp://codereview.appspot.com/179126/diff/10/11\nFile src/pkg/http/url.go (left):\n\nhttp://codereview.appspot.com/179126/diff/10/11#oldcode227\nsrc/pkg/http/url.go:227: // BUG(rsc): ParseURL should canonicalize the path,\nThis comment is wrong.\nParseURL should *not* canonicalize the path.\nThe usual behavior is to send redirects when a\nserver receives a non-canonicalized path, so\nit's important for the server to be able to see\nthe original path.\n\nI think ParseURL should remain unchanged, this\ncomment should be deleted, and the functionality\nshould be implemented for use by clients but not\nused in ParseURL.\n\nhttp://codereview.appspot.com/179126/diff/10/11\nFile src/pkg/http/url.go (right):\n\nhttp://codereview.appspot.com/179126/diff/10/11#newcode73\nsrc/pkg/http/url.go:73: // Avoid unnecessary memory allocations\nThanks for working on this.  I'm glad to see\nthis TODO addressed.\n\nThe function should be named CanonicalPath\nby analogy with CanonicalHeaderKey.\n(Canonicalize implies that it is changing\nits argument, which it doesn't.)\n\nThere are a lot of memory allocations implicit\nin the vector operations.  This should be done with\njust two: one call to strings.Bytes and a conversion\nback to string when done.  See the implementation\nof path.Clean for an example.\n\nAlso, \"as wget does\" is not a good specification.\nThis code should behave as specified in RFC 2396.\n\nhttp://codereview.appspot.com/179126/diff/10/11#newcode288\nsrc/pkg/http/url.go:288: path = CanonicalizePath(path)\ndelete\n\nhttp://codereview.appspot.com/179126/diff/10/12\nFile src/pkg/http/url_test.go (right):\n\nhttp://codereview.appspot.com/179126/diff/10/12#newcode147\nsrc/pkg/http/url_test.go:147: // path contains .. and .\ndelete\n\nhttp://codereview.appspot.com/179126/diff/10/12#newcode387\nsrc/pkg/http/url_test.go:387: CanonicalizePathTest{\nThese would be better as one line each,\nso that you can see the table columns.",
			"disapproval": false,
			"date": "2009-12-22 17:46:18.214850",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review the following change.",
			"disapproval": false,
			"date": "2009-12-22 16:22:56.996433",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Is it possible for two-byte UTF-8 symbol to have . or / as one of bytes?\n\nOn Wed, Dec 23, 2009 at 8:42 PM, Russ Cox <rsc@golang.org> wrote:\n>> Are you sure? I mean, it will probably work incorrect with UTF-8 encoded\n>> paths if I fall to bytes.\n>\n> I don't see why it would.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2009-12-23 18:08:34.803445",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Dec 23, 2009 at 10:08, Ivan Krasin <imkrasin@gmail.com> wrote:\n> Is it possible for two-byte UTF-8 symbol to have . or / as one of bytes?\n\nNo.  In UTF-8 multibyte sequences only\ncontain bytes >= 0x80.  Bytes < 0x80 always\nstand for themselves.\n\nRuss\n",
			"disapproval": false,
			"date": "2009-12-23 18:19:43.844358",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/179126/diff/10/11\nFile src/pkg/http/url.go (left):\n\nhttp://codereview.appspot.com/179126/diff/10/11#oldcode227\nsrc/pkg/http/url.go:227: // BUG(rsc): ParseURL should canonicalize the path,\nOn 2009/12/22 17:46:18, rsc wrote:\n> This comment is wrong.\n> ParseURL should *not* canonicalize the path.\n> The usual behavior is to send redirects when a\n> server receives a non-canonicalized path, so\n> it's important for the server to be able to see\n> the original path.\n> \n> I think ParseURL should remain unchanged, this\n> comment should be deleted, and the functionality\n> should be implemented for use by clients but not\n> used in ParseURL.\n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/179126/diff/10/11\nFile src/pkg/http/url.go (right):\n\nhttp://codereview.appspot.com/179126/diff/10/11#newcode73\nsrc/pkg/http/url.go:73: // Avoid unnecessary memory allocations\nOn 2009/12/22 17:46:18, rsc wrote:\n> Thanks for working on this.  I'm glad to see\n> this TODO addressed.\n> \n> The function should be named CanonicalPath\n> by analogy with CanonicalHeaderKey.\n> (Canonicalize implies that it is changing\n> its argument, which it doesn't.)\n> \n> There are a lot of memory allocations implicit\n> in the vector operations.  This should be done with\n> just two: one call to strings.Bytes and a conversion\n> back to string when done.  See the implementation\n> of path.Clean for an example.\nAre you sure? I mean, it will probably work incorrect with UTF-8 encoded paths if I fall to bytes.\nIs it OK to call split? If so, I could still work with strings but avoid memory allocations in vector.\n\n> \n> Also, \"as wget does\" is not a good specification.\n> This code should behave as specified in RFC 2396.\n>\n\nhttp://codereview.appspot.com/179126/diff/10/11#newcode84\nsrc/pkg/http/url.go:84: if out.Len() > 1 || out.Len() == 1 && out.Last() != \"\" {\nOn 2009/12/22 17:05:57, Ivan Krasin wrote:\n> Here is a bug. It should be:\n> \n> if out.Len() == 0 || out.Last() == \"..\" || out.Len() == 1 && out.Last == \"\" {\n>   out.Push(v)\n> } else {\n>   out.Pop()\n> }\n\nDone.\n\nhttp://codereview.appspot.com/179126/diff/10/11#newcode288\nsrc/pkg/http/url.go:288: path = CanonicalizePath(path)\nOn 2009/12/22 17:46:18, rsc wrote:\n> delete\n> \n\nDone.\n\nhttp://codereview.appspot.com/179126/diff/10/12\nFile src/pkg/http/url_test.go (right):\n\nhttp://codereview.appspot.com/179126/diff/10/12#newcode147\nsrc/pkg/http/url_test.go:147: // path contains .. and .\nOn 2009/12/22 17:46:18, rsc wrote:\n> delete\n\nDone.\n\nhttp://codereview.appspot.com/179126/diff/10/12#newcode387\nsrc/pkg/http/url_test.go:387: CanonicalizePathTest{\nOn 2009/12/22 17:46:18, rsc wrote:\n> These would be better as one line each,\n> so that you can see the table columns.\n> \n\nDone.",
			"disapproval": false,
			"date": "2009-12-23 17:39:21.486451",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Are you sure? I mean, it will probably work incorrect with UTF-8 encoded\n> paths if I fall to bytes.\n\nI don't see why it would.\n\nRuss\n",
			"disapproval": false,
			"date": "2009-12-23 17:42:19.022723",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2009/12/23 18:19:43, rsc wrote:\n> On Wed, Dec 23, 2009 at 10:08, Ivan Krasin <mailto:imkrasin@gmail.com> wrote:\n> > Is it possible for two-byte UTF-8 symbol to have . or / as one of bytes?\n> \n> No.  In UTF-8 multibyte sequences only\n> contain bytes >= 0x80.  Bytes < 0x80 always\n> stand for themselves.\nDone. Your turn.\n> \n> Russ\n>",
			"disapproval": false,
			"date": "2009-12-24 10:08:17.200013",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "looks pretty good.\n\nhttp://codereview.appspot.com/179126/diff/3010/3011\nFile src/pkg/http/url.go (right):\n\nhttp://codereview.appspot.com/179126/diff/3010/3011#newcode70\nsrc/pkg/http/url.go:70: // CanonicalPath removes unnecessary . and .. elements from the path.\n// CanonicalPath applies the algorithm specified in RFC 2396 to \n// simplify the path, removing unnecessary  . and .. elements.\n\nhttp://codereview.appspot.com/179126/diff/3010/3011#newcode74\nsrc/pkg/http/url.go:74: dots := 1\ncomment what this means.\ni see dots == 3 has meaning and\nyet ... is not a special path.",
			"disapproval": false,
			"date": "2010-01-05 21:49:42.290690",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I believe it's ready to submit.\n\nhttp://codereview.appspot.com/179126/diff/3010/3011\nFile src/pkg/http/url.go (right):\n\nhttp://codereview.appspot.com/179126/diff/3010/3011#newcode70\nsrc/pkg/http/url.go:70: // CanonicalPath removes unnecessary . and .. elements from the path.\nOn 2010/01/05 21:49:42, rsc wrote:\n> // CanonicalPath applies the algorithm specified in RFC 2396 to \n> // simplify the path, removing unnecessary  . and .. elements.\n> \n\nDone.\n\nhttp://codereview.appspot.com/179126/diff/3010/3011#newcode74\nsrc/pkg/http/url.go:74: dots := 1\ndots are actually state; not dots count; I renamed dots to state and put some comments.\nOn 2010/01/05 21:49:42, rsc wrote:\n> comment what this means.\n> i see dots == 3 has meaning and\n> yet ... is not a special path.\n>",
			"disapproval": false,
			"date": "2010-01-06 15:26:05.265535",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a10f0d69a50b ***\n\nAdd http.CanonicalPath and tests for it. Remove BUG(rsc) from url.go.\n\nR=rsc, imkrasin\nCC=golang-dev\nhttp://codereview.appspot.com/179126\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2010-01-06 15:47:51.842695",
			"approval": false
		}
	],
	"owner_email": "krasin@golang.org",
	"private": false,
	"base_url": "",
	"owner": "Ivan Krasin",
	"subject": "code review 179126: Add http.CanonicalPath and tests for it. Remove BUG(...",
	"created": "2009-12-22 16:17:44.602344",
	"patchsets": [
		1,
		6,
		7,
		10,
		2001,
		2004,
		2009,
		3010,
		2014
	],
	"modified": "2012-01-22 06:25:18.308743",
	"closed": true,
	"issue": 179126
}