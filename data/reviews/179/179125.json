{
	"description": "Propagate error to the caller in json.Marshal. Fixes issue 445.",
	"cc": [
		"rsc@golang.org",
		"imkrasin@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review the following change.",
			"disapproval": false,
			"date": "2009-12-22 10:12:33.636310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for fixing this.\nWhile you're here, let's allow interface{}\nwhen it contains types that can be marshalled.\nThere's a one-line fix to struct.go\nbelow, but please add a test for that case.\n\nhttp://codereview.appspot.com/179125/diff/6/7\nFile src/pkg/json/struct.go (right):\n\nhttp://codereview.appspot.com/179125/diff/6/7#newcode406\nsrc/pkg/json/struct.go:406: err = &MarshalError{val.Type()}\nerr = writeValue(w, v.Elem())\n\nhttp://codereview.appspot.com/179125/diff/6/8\nFile src/pkg/json/struct_test.go (right):\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode251\nsrc/pkg/json/struct_test.go:251: type Issue445Val1 struct {\nIssue445 won't mean anything to future\nreaders unless they go look up the issue.\nit's like calling it type Type12345.\nbetter to use a real name.\n\nmuch simpler case:\n\ntype ChanVal struct {\n    C chan int\n}\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode254\nsrc/pkg/json/struct_test.go:254: type Issue445Val2 struct {\ncan drop this\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode258\nsrc/pkg/json/struct_test.go:258: type Issue445 struct {\nno need for this struct.\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode262\nsrc/pkg/json/struct_test.go:262: func TestIssue445(t *testing.T) {\n// Issue 445\nfunc TestBadStructField(t *testing.T) {\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode265\nsrc/pkg/json/struct_test.go:265: obj.lookup = make(map[string]interface{})\nmuch simpler test case:\n\nvar c ChanVal\nerr := Marshal(&buf, c)\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode267\nsrc/pkg/json/struct_test.go:267: obj.lookup[\"b\"] = new(Issue445Val2)\ncan drop this",
			"disapproval": false,
			"date": "2009-12-22 17:15:55.455047",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Probably, the compiler should be enhanced to able to compile this:\n> case *reflect.InterfaceValue,\n> \u00a0 \u00a0 \u00a0 \u00a0*reflect.PtrValue:\n> \u00a0 \u00a0 \u00a0 \u00a0if v.IsNil() {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fmt.Fprint(w, \"null\")\n> \u00a0 \u00a0 \u00a0 \u00a0} else {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = writeValue(w, v.Elem())\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> Now it suppose that v is reflect.Value and reflect.Value does not have\n> IsNil() and Elem()\n>\n> Should I create an issue for this?\n\nSure.\nWe've been meaning to talk about doing that but it's\npretty far down on the list.\n",
			"disapproval": false,
			"date": "2009-12-23 16:48:28.029431",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2009/12/23 16:48:28, rsc wrote:\n> > Probably, the compiler should be enhanced to able to compile this:\n> > case *reflect.InterfaceValue,\n> > &nbsp; &nbsp; &nbsp; &nbsp;*reflect.PtrValue:\n> > &nbsp; &nbsp; &nbsp; &nbsp;if v.IsNil() {\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Fprint(w, \"null\")\n> > &nbsp; &nbsp; &nbsp; &nbsp;} else {\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;err = writeValue(w, v.Elem())\n> > &nbsp; &nbsp; &nbsp; &nbsp;}\n> > Now it suppose that v is reflect.Value and reflect.Value does not have\n> > IsNil() and Elem()\n> >\n> > Should I create an issue for this?\n> \n> Sure.\n> We've been meaning to talk about doing that but it's\n> pretty far down on the list.\nI have created an issue (feel free to mark it as Long Term). Anything else with this CL? or it is ready for submit?",
			"disapproval": false,
			"date": "2009-12-24 10:30:09.465852",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM \n\nbut you need to hg sync / hg upload before I can apply it.\nOne of the changes has already made it in.",
			"disapproval": false,
			"date": "2010-01-05 22:16:37.925583",
			"approval": true
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Done. I think you could submit it.\n\nOn 2010/01/05 22:16:37, rsc wrote:\n> LGTM \n> \n> but you need to hg sync / hg upload before I can apply it.\n> One of the changes has already made it in.",
			"disapproval": false,
			"date": "2010-01-06 15:15:04.007426",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/179125/diff/6/7\nFile src/pkg/json/struct.go (right):\n\nhttp://codereview.appspot.com/179125/diff/6/7#newcode406\nsrc/pkg/json/struct.go:406: err = &MarshalError{val.Type()}\nOn 2009/12/22 17:15:55, rsc wrote:\n> err = writeValue(w, v.Elem())\n> \nDone. Also I enabled handling *reflect.PtrValue and tests for it. I don't know why it was disabled before (please, correct me if I did a mistake)\n\nhttp://codereview.appspot.com/179125/diff/6/8\nFile src/pkg/json/struct_test.go (right):\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode251\nsrc/pkg/json/struct_test.go:251: type Issue445Val1 struct {\nOn 2009/12/22 17:15:55, rsc wrote:\n> Issue445 won't mean anything to future\n> readers unless they go look up the issue.\n> it's like calling it type Type12345.\n> better to use a real name.\n> \n> much simpler case:\n> \n> type ChanVal struct {\n>     C chan int\n> }\n> \n\nDone. Moved the test to marshalErrorTests array\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode254\nsrc/pkg/json/struct_test.go:254: type Issue445Val2 struct {\nOn 2009/12/22 17:15:55, rsc wrote:\n> can drop this\n> \n\nDone.\n\nhttp://codereview.appspot.com/179125/diff/6/8#newcode258\nsrc/pkg/json/struct_test.go:258: type Issue445 struct {\nOn 2009/12/22 17:15:55, rsc wrote:\n> no need for this struct.\n> \n\nDone.\n\nhttp://codereview.appspot.com/179125/diff/2001/3001\nFile src/pkg/json/struct.go (right):\n\nhttp://codereview.appspot.com/179125/diff/2001/3001#newcode408\nsrc/pkg/json/struct.go:408: case *reflect.PtrValue:\nProbably, the compiler should be enhanced to able to compile this:\ncase *reflect.InterfaceValue,\n        *reflect.PtrValue:\n        if v.IsNil() {\n                fmt.Fprint(w, \"null\")\n        } else {\n                err = writeValue(w, v.Elem())\n        }\nNow it suppose that v is reflect.Value and reflect.Value does not have IsNil() and Elem()\n\nShould I create an issue for this?",
			"disapproval": false,
			"date": "2009-12-23 16:12:55.678650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e29d95da0388 ***\n\nPropagate error to the caller in json.Marshal. Fixes issue 445.\n\nR=rsc, imkrasin\nCC=golang-dev\nhttp://codereview.appspot.com/179125\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2010-01-06 15:25:22.848636",
			"approval": false
		}
	],
	"owner_email": "krasin@golang.org",
	"private": false,
	"base_url": "",
	"owner": "Ivan Krasin",
	"subject": "code review 179125: Propagate error to the caller in json.Marshal. Fixes is...",
	"created": "2009-12-22 10:10:07.772203",
	"patchsets": [
		1,
		6,
		2001,
		2004,
		2009,
		2015
	],
	"modified": "2012-01-22 06:25:20.416363",
	"closed": true,
	"issue": 179125
}