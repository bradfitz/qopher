{
	"description": "faq: go does not have duck typing",
	"cc": [
		"golang-dev@googlegroups.com",
		"0xjnml@gmail.com",
		"iant@golang.org",
		"adonovan@google.com",
		"aram@mgk.ro"
	],
	"reviewers": [
		"rsc@golang.org",
		"Mortdeus@gocos2d.org"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6500092/diff/3001/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttps://codereview.appspot.com/6500092/diff/3001/doc/go_faq.html#newcode556\ndoc/go_faq.html:556: By the way, Go does not have \"duck typing\", which is a looser, more dynamic concept.\nI'm not entirely convinced we need this paragraph.",
			"disapproval": false,
			"date": "2012-09-07 20:06:11.602140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nHard to care much about precise definitions. If it quacks like duck\r\ntyping, it's duck typing.\r\n",
			"disapproval": false,
			"date": "2012-09-10 16:20:13.068150",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/07 20:51:21, adonovan wrote:\n> \n> I think duck typing more commonly refers to the idea of implicit\n> structural subtyping: you don't need to declare a relationship between\n> the impl and the interface when you define the impl, but if it has all\n> the right operations, you can use it.  By that definition, Go has it.\n> \n> C++ has (arguably) a form of duck typing in template instantiation:\n> the template imposes a set of constraints (a \"concept\") and a type may\n> \"model\" that concept, but you don't have to declare that the type\n> models the concept.  In fact the concept may be conceived after the\n> type has been shipped.\n\nI don't agree that you are describing duck typing.  I think that duck typing permits calling a method on a value without any prior arrangement at all.  Neither Go nor C++ permit that.  Both Go and C++ require a conversion to an appropriate type before calling the method.\n\n> All of which says to me that it's probably a phrase best avoided. ;)\n\nI agree with that.\n\nIan",
			"disapproval": false,
			"date": "2012-09-07 20:55:12.512350",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-07 18:50:57.385800",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI'm ambivalent.",
			"disapproval": false,
			"date": "2012-09-07 20:19:28.888020",
			"approval": true
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 7, 2012 at 8:50 PM,  <r@golang.org> wrote:\r\n\r\n'By the way, Go does not have \"duck typing\", ...'\r\n\r\nNice to see this has become finally officially sourced.\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-09-07 19:42:26.304280",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"adonovan@google.com",
				"aram@mgk.ro",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d3d3e0825dd2 ***\n\nfaq: go does not have duck typing\n\nR=golang-dev, 0xjnml, iant, adonovan, aram\nCC=golang-dev\nhttp://codereview.appspot.com/6500092",
			"disapproval": false,
			"date": "2012-09-07 21:01:06.632480",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I could drop it and keep just the s/duck/structural/. The reason I\r\nadded this paragraph was that it's commonly and incorrectly stated\r\nthat Go has duck typing and clearing that up seems a fine thing to do\r\nin the FAQ.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-07 20:17:58.769100",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 7 September 2012 16:28, Jan Mercl <0xjnml@gmail.com> wrote:\r\n> a := \"1\"\r\n> b := 2\r\n> c := a + b // just fine\r\n>\r\n> *is* duck typing.\r\n\r\nWell, duck typing has no official definition, but your code can be\r\nviewed as a type-overloaded + operator (in a typed language such as\r\nJava) or a dynamically dispatched + operator (in Python).  I wouldn't\r\ncall either duck typing.\r\n\r\nI think duck typing more commonly refers to the idea of implicit\r\nstructural subtyping: you don't need to declare a relationship between\r\nthe impl and the interface when you define the impl, but if it has all\r\nthe right operations, you can use it.  By that definition, Go has it.\r\n\r\nC++ has (arguably) a form of duck typing in template instantiation:\r\nthe template imposes a set of constraints (a \"concept\") and a type may\r\n\"model\" that concept, but you don't have to declare that the type\r\nmodels the concept.  In fact the concept may be conceived after the\r\ntype has been shipped.\r\n\r\nAll of which says to me that it's probably a phrase best avoided. ;)\r\n",
			"disapproval": false,
			"date": "2012-09-07 20:51:21.766050",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 7, 2012 at 1:19 PM,  <iant@golang.org> wrote:\r\n> LGTM\r\n>\r\n> I'm ambivalent.\r\n\r\nUnderstood. So am I. I'll hold off until others have a chance to reply.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-07 20:20:24.667220",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-07 20:55:30.698630",
			"approval": true
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 7, 2012 at 10:06 PM,  <iant@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/6500092/diff/3001/doc/go_faq.html\r\n> File doc/go_faq.html (right):\r\n>\r\n> https://codereview.appspot.com/6500092/diff/3001/doc/go_faq.html#newcode556\r\n> doc/go_faq.html:556: By the way, Go does not have \"duck typing\", which\r\n>\r\n> is a looser, more dynamic concept.\r\n> I'm not entirely convinced we need this paragraph.\r\n\r\na := \"1\"\r\nb := 2\r\nc := a + b // just fine\r\n\r\n*is* duck typing.\r\n\r\n...trying to convince you.\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-09-07 20:28:03.378640",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, 0xjnml@gmail.com, iant@golang.org, adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-07 20:53:18.150070",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 7, 2012 at 10:51 PM, Alan Donovan <adonovan@google.com> wrote:\r\n> On 7 September 2012 16:28, Jan Mercl <0xjnml@gmail.com> wrote:\r\n>> a := \"1\"\r\n>> b := 2\r\n>> c := a + b // just fine\r\n>>\r\n>> *is* duck typing.\r\n>\r\n> Well, duck typing has no official definition, but your code can be\r\n> viewed as a type-overloaded + operator (in a typed language such as\r\n> Java) or a dynamically dispatched + operator (in Python).  I wouldn't\r\n> call either duck typing.\r\n>\r\n> I think duck typing more commonly refers to the idea of implicit\r\n> structural subtyping: you don't need to declare a relationship between\r\n> the impl and the interface when you define the impl, but if it has all\r\n> the right operations, you can use it.  By that definition, Go has it.\r\n>\r\n> C++ has (arguably) a form of duck typing in template instantiation:\r\n> the template imposes a set of constraints (a \"concept\") and a type may\r\n> \"model\" that concept, but you don't have to declare that the type\r\n> models the concept.  In fact the concept may be conceived after the\r\n> type has been shipped.\r\n>\r\n> All of which says to me that it's probably a phrase best avoided. ;)\r\n\r\nIt looks like I was a bit too much concise...\r\n\r\nThe code in question is the hypothetically valid Go code (would Go\r\nhave duck typing). The point it tried to communicate was that both 'a'\r\nand 'b' do/easily may have statically determined types (== status\r\nquo), but 'c' wouldn't (unless resorted to 'interface{}, which is the\r\nonly case of \"anything\"' in Go, but still not \"duck typing\" as the '+'\r\n['-'/...] is not [duck \"typingly\"] working with 'interface{}')\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-09-07 21:06:00.571370",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"adonovan@google.com",
				"aram@mgk.ro",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nFinally. Thanks.",
			"disapproval": false,
			"date": "2012-09-07 21:00:09.909010",
			"approval": true
		},
		{
			"sender": "Mortdeus@gocos2d.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"Mortdeus@gocos2d.org",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"iant@golang.org",
				"adonovan@google.com",
				"aram@mgk.ro",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/10 16:20:13, rsc wrote:\n> LGTM\n> \n> Hard to care much about precise definitions. If it quacks like duck\n> typing, it's duck typing.\n\nThe difference between structural typing and duck typing is that duck typing observes the object being passed in as an argument at runtime.\n\nStructural typing is static and therefore very different when you consider things you cant do with go's interfaces. The primary example for python is monkey patching. I.E. hot patching python source further ahead in the path of your codes execution with a different type depending on which way the code's execution flows.\n\nSo in the perspective of the runtime, how you look at Go's interfaces, and python's duck type is alot different. Python's types look like a duck, walks like a duck, and quacks like a duck when its encountered, so ill assume its a duck. This is alot different than an interface with a big sign on it that says \"Certified 100% Authentic Duck -Gopher Type Introspective Association\". :)",
			"disapproval": false,
			"date": "2012-09-28 21:19:28.905610",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6500092: faq: go does not have duck typing",
	"created": "2012-09-07 18:50:53.839550",
	"patchsets": [
		1,
		3001,
		10001,
		6002
	],
	"modified": "2012-09-28 21:19:29.138860",
	"closed": true,
	"issue": 6500092
}