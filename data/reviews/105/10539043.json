{
	"description": "go.talks/pkg/present: include line numbers in output HTML\n\nAlso refactor HTML code generation to be line and template based.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10539043/diff/19001/pkg/present/code.go\nFile pkg/present/code.go (right):\n\nhttps://codereview.appspot.com/10539043/diff/19001/pkg/present/code.go#newcode173\npkg/present/code.go:173: startLine++\nhave you tested it for off-by-one bugs?\n\nhttps://codereview.appspot.com/10539043/diff/19001/pkg/present/code.go#newcode181\npkg/present/code.go:181: lines = append(lines, codeLine{B: s.Bytes(), N: n})\nyou need to copy s.Bytes() here\nit points into underlying scanner slice that will be overwritten",
			"disapproval": false,
			"date": "2013-06-25 11:02:16.139080",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good, but please wait for somebody else",
			"disapproval": false,
			"date": "2013-06-25 11:21:11.671240",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2013-06-25 10:48:16.535460",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10539043/diff/19001/pkg/present/code.go\nFile pkg/present/code.go (right):\n\nhttps://codereview.appspot.com/10539043/diff/19001/pkg/present/code.go#newcode173\npkg/present/code.go:173: startLine++\nOn 2013/06/25 11:02:16, dvyukov wrote:\n> have you tested it for off-by-one bugs?\n\nI've tested it. It works. Lines are 1-indexed.\n\nhttps://codereview.appspot.com/10539043/diff/19001/pkg/present/code.go#newcode181\npkg/present/code.go:181: lines = append(lines, codeLine{B: s.Bytes(), N: n})\nOn 2013/06/25 11:02:16, dvyukov wrote:\n> you need to copy s.Bytes() here\n> it points into underlying scanner slice that will be overwritten\n\noops! For some reason I had in mind that it was pulling it out of the underlying byte slice, which is impossible of course. Since I have to copy here, I'll just use strings anyway which is more succinct in other places.",
			"disapproval": false,
			"date": "2013-06-25 11:11:22.183370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10539043/diff/28001/pkg/present/code.go\nFile pkg/present/code.go (right):\n\nhttps://codereview.appspot.com/10539043/diff/28001/pkg/present/code.go#newcode150\npkg/present/code.go:150: `))\nthis really doesn't have to be one declaration. i can't see the forest for the trees.",
			"disapproval": false,
			"date": "2013-06-25 16:12:40.404480",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10539043/diff/28001/pkg/present/code.go\nFile pkg/present/code.go (right):\n\nhttps://codereview.appspot.com/10539043/diff/28001/pkg/present/code.go#newcode150\npkg/present/code.go:150: `))\nOn 2013/06/25 16:12:40, r wrote:\n> this really doesn't have to be one declaration. i can't see the forest for the\n> trees.\n\nDone.",
			"disapproval": false,
			"date": "2013-06-25 23:05:57.631550",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10539043/diff/33001/pkg/present/code.go\nFile pkg/present/code.go (right):\n\nhttps://codereview.appspot.com/10539043/diff/33001/pkg/present/code.go#newcode139\npkg/present/code.go:139: return \"\"\nleadingSpaceRE = regexp.MustCompile(\"^[ \\t]*\")\nreturn leadingSpaceRE.FindString(s)\n\nin any case you don't want unicode.IsSpace",
			"disapproval": false,
			"date": "2013-06-25 23:37:33.003380",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10539043/diff/33001/pkg/present/code.go\nFile pkg/present/code.go (right):\n\nhttps://codereview.appspot.com/10539043/diff/33001/pkg/present/code.go#newcode139\npkg/present/code.go:139: return \"\"\nOn 2013/06/25 23:37:33, r wrote:\n> leadingSpaceRE = regexp.MustCompile(\"^[ \\t]*\")\n> return leadingSpaceRE.FindString(s)\n> \n> in any case you don't want unicode.IsSpace\n\nDone.",
			"disapproval": false,
			"date": "2013-06-25 23:44:17.435140",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nmuch easier to read",
			"disapproval": false,
			"date": "2013-06-26 00:01:54.527790",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8068452134af&repo=talks ***\n\ngo.talks/pkg/present: include line numbers in output HTML\n\nAlso refactor HTML code generation to be line and template based.\n\nR=golang-dev, dvyukov, r\nCC=golang-dev\nhttps://codereview.appspot.com/10539043",
			"disapproval": false,
			"date": "2013-06-26 00:03:35.758790",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 10539043: go.talks/pkg/present: include line numbers in output HTML",
	"created": "2013-06-25 10:30:59.330220",
	"patchsets": [
		1,
		3001,
		1002,
		8001,
		10001,
		13001,
		16001,
		19001,
		23001,
		25001,
		14002,
		28001,
		33001,
		39001,
		43001,
		37002
	],
	"modified": "2013-06-26 00:03:38.465050",
	"closed": true,
	"issue": 10539043
}