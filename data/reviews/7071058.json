{
	"description": "exp/ssa: API and documentation.",
	"cc": [
		"gri@google.com",
		"iant@google.com",
		"crawshaw@google.com",
		"bradfitz@golang.org",
		"gri@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "some superficial comments - need to spend more time on this later (not today)\n- gri\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode14\nsrc/pkg/exp/ssa/ssa.go:14: type (\nOrganizational note: The type decls and comments are so large that I would do a new type decl for each one instead of having everything indented all the way.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode28\nsrc/pkg/exp/ssa/ssa.go:28: // more detail than files[*].Name.Name (a.k.a. p.Name).\nThis last part is odd - leave out. Package names are know to be not unique.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode32\nsrc/pkg/exp/ssa/ssa.go:32: AddPackage(importPath string, files map[string]*ast.File) (p *Package, err error)\nfyi: I am considering moving away from map[string]*ast.File to []*ast.File. The problem with the map is that it doesn't produce the same iteration order each time which is problematic for testing. As a consequence, now I always have to sort.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode56\nsrc/pkg/exp/ssa/ssa.go:56: // for the Universals scope.\nUniversals? It's the Universe scope.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode167\nsrc/pkg/exp/ssa/ssa.go:167: Insn interface {\nPlease find a different shortcut - Isns means everything and nothing.\n\nInstr seems pretty clear.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode224\nsrc/pkg/exp/ssa/ssa.go:224: Signature *types.Signature\ns/Signature/Type/ for the field name?\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode226\nsrc/pkg/exp/ssa/ssa.go:226: Position  token.Position // location of the definition\ns/Position/Pos/ for the field name?\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode228\nsrc/pkg/exp/ssa/ssa.go:228: Package   *Package       // enclosing package; nil for synthetic methods\ns/Package/Pkg/ for the field name?\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode235\nsrc/pkg/exp/ssa/ssa.go:235: recvfield    *ast.FieldList\ns/recvfield/recvField/ or just recv?\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode236\nsrc/pkg/exp/ssa/ssa.go:236: paramfields  *ast.FieldList\nditto, and below\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode259\nsrc/pkg/exp/ssa/ssa.go:259: Preds, Succs []*BasicBlock // predecessors and successors\nDo you need both directions?\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode279\nsrc/pkg/exp/ssa/ssa.go:279: typ   types.Type\ntypes.Pointer ?\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode298\nsrc/pkg/exp/ssa/ssa.go:298: typ  types.Type\ntypes.Pointer ?\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode420\nsrc/pkg/exp/ssa/ssa.go:420: // TODO(adonovan): consider dropping Edges[i].Block since\nah!",
			"disapproval": false,
			"date": "2013-01-09 22:55:00.936960",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Great comments---thanks.  All 'done' as suggested except where noted.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode14\nsrc/pkg/exp/ssa/ssa.go:14: type (\nOn 2013/01/09 22:55:01, gri wrote:\n> Organizational note: The type decls and comments are so large that I would do a\n> new type decl for each one instead of having everything indented all the way.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode28\nsrc/pkg/exp/ssa/ssa.go:28: // more detail than files[*].Name.Name (a.k.a. p.Name).\nOn 2013/01/09 22:55:01, gri wrote:\n> This last part is odd - leave out. Package names are know to be not unique.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode32\nsrc/pkg/exp/ssa/ssa.go:32: AddPackage(importPath string, files map[string]*ast.File) (p *Package, err error)\nOn 2013/01/09 22:55:01, gri wrote:\n> fyi: I am considering moving away from map[string]*ast.File to []*ast.File. The\n> problem with the map is that it doesn't produce the same iteration order each\n> time which is problematic for testing. As a consequence, now I always have to\n> sort.\n\nFine by me.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode56\nsrc/pkg/exp/ssa/ssa.go:56: // for the Universals scope.\nOn 2013/01/09 22:55:01, gri wrote:\n> Universals? It's the Universe scope.\n\nOops, a hangover from the terminology I used in GCLx.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode167\nsrc/pkg/exp/ssa/ssa.go:167: Insn interface {\nOn 2013/01/09 22:55:01, gri wrote:\n> Please find a different shortcut - Isns means everything and nothing.\n> \n> Instr seems pretty clear.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode224\nsrc/pkg/exp/ssa/ssa.go:224: Signature *types.Signature\nOn 2013/01/09 22:55:01, gri wrote:\n> s/Signature/Type/ for the field name?\n\nThis would conflict with the Type() method of the Value interface, which *Function implements.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode226\nsrc/pkg/exp/ssa/ssa.go:226: Position  token.Position // location of the definition\nOn 2013/01/09 22:55:01, gri wrote:\n> s/Position/Pos/ for the field name?\n\nI wanted to avoid the suggestion that this was a token.Pos, which is a different datatype, confusingly.\n\nIn any case, all the source position stuff is likely to change.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode228\nsrc/pkg/exp/ssa/ssa.go:228: Package   *Package       // enclosing package; nil for synthetic methods\nOn 2013/01/09 22:55:01, gri wrote:\n> s/Package/Pkg/ for the field name?\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode235\nsrc/pkg/exp/ssa/ssa.go:235: recvfield    *ast.FieldList\nOn 2013/01/09 22:55:01, gri wrote:\n> s/recvfield/recvField/ or just recv?\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode236\nsrc/pkg/exp/ssa/ssa.go:236: paramfields  *ast.FieldList\nOn 2013/01/09 22:55:01, gri wrote:\n> ditto, and below\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode259\nsrc/pkg/exp/ssa/ssa.go:259: Preds, Succs []*BasicBlock // predecessors and successors\nOn 2013/01/09 22:55:01, gri wrote:\n> Do you need both directions?\n\nYes.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode279\nsrc/pkg/exp/ssa/ssa.go:279: typ   types.Type\nOn 2013/01/09 22:55:01, gri wrote:\n> types.Pointer ?\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode298\nsrc/pkg/exp/ssa/ssa.go:298: typ  types.Type\nOn 2013/01/09 22:55:01, gri wrote:\n> types.Pointer ?\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/2001/src/pkg/exp/ssa/ssa.go#newcode420\nsrc/pkg/exp/ssa/ssa.go:420: // TODO(adonovan): consider dropping Edges[i].Block since\nOn 2013/01/09 22:55:01, gri wrote:\n> ah!\n\nDoes this answer your question about succs/preds above?   Or are you expressing an opinion about the TODO?  I'm confused.",
			"disapproval": false,
			"date": "2013-01-10 15:22:56.173480",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@google.com, iant@google.com, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-15 22:50:18.700050",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some more comments.\n\nI feel that the API is drowned out by documentation. I don't know how much needs to be spelled out in detail. For one, w/o an excellent understanding of Go and its semantics as well as SSA form, this is going to be difficult to use no matter how well documented it is.\n\nOn the other hand, for somebody familiar with all the details of Go and SSA, not that much documentation may be needed.\n\nMy fear is that the documentation is inaccurate (perhaps not now, but will be over time) because it's not checked.\n\nBut overall this looks reasonable to me.\n\nSome questions/observations:\n\n- does the Type() documentation have to be which each node? (godoc won't do the right thing)\n- there is duplication is CFG edges (end of a basic block and from last instruction in a basic block)\n- can it be done smaller?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go\nFile src/pkg/exp/ssa/doc.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode21\nsrc/pkg/exp/ssa/doc.go:21: // primitives in future to facilitate constant-time dispatch of switch\ns/in/in the/\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode35\nsrc/pkg/exp/ssa/doc.go:35: // is not yet implemented.\ns/is is/is/\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode51\nsrc/pkg/exp/ssa/doc.go:51: // Given a Go source package such as this:\nInstead of this lenghty - unchecked - comment, it would be better to have an example that shows actual code.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode536\nsrc/pkg/exp/ssa/ssa.go:536: // We can't use UnOp because there's no token for it.  TODO(adonovan):\nWhy can't you use \"x == nil\", i.e. a BinOp?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode637\nsrc/pkg/exp/ssa/ssa.go:637: Slots []Value\nI understand where Slots coming from, but I wonder if there's a better name. Context?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode674\nsrc/pkg/exp/ssa/ssa.go:674: // Type() returns a *types.Slice.\nthis should be with the method declaration\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode709\nsrc/pkg/exp/ssa/ssa.go:709: // Type() returns a *types.Pointer.\nthis should be with the method declaration\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode726\nsrc/pkg/exp/ssa/ssa.go:726: // package-local identifiers and permit compact representations.\nno need to explain the reasons for the numeric indices in the api\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode756\nsrc/pkg/exp/ssa/ssa.go:756: // Index yields a copy of the element at index Index of array X.\njust: element at Index of array X.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode853\nsrc/pkg/exp/ssa/ssa.go:853: // value (ok, k, v).  If the iterator is not exhausted, ok is true and\nshould ok be last, as would be the case in a comma-ok expression?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode928\nsrc/pkg/exp/ssa/ssa.go:928: Target *BasicBlock\nThis is the same as the successor in that basic block, isn't it? Does it need to be in both places?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode943\nsrc/pkg/exp/ssa/ssa.go:943: True, False *BasicBlock\nThese are the same as the successors in that basic block, isn't it? Do they need to be in both places?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1040\nsrc/pkg/exp/ssa/ssa.go:1040: // Embeddable mix-ins used for common parts of other structs. --------------------\nthey are not really mix-ins\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1042\nsrc/pkg/exp/ssa/ssa.go:1042: // Register is a mix-in embedded by all SSA values that are also\ns/mix-in/struct/\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1058\nsrc/pkg/exp/ssa/ssa.go:1058: // CallCommon is a mix-in embedded by Go, Defer and Call to hold the\ns/mix-in/struct/\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1102\nsrc/pkg/exp/ssa/ssa.go:1102: // TODO(adonovan): document copying of arguments and receiver.\nI suggest adding an empty // comment before the type to separate it better from the comment. Your comments are so long, it's hard to see where the declaration starts. Apply everywhere (except perhaps where the comment is short).",
			"disapproval": false,
			"date": "2013-01-18 01:58:14.508190",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minor comments.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/doc.go\nFile src/pkg/exp/ssa/doc.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/doc.go#newcode1\nsrc/pkg/exp/ssa/doc.go:1: // exp/ssa: SSA representation of Go programs\n// Package ssa ...\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode36\nsrc/pkg/exp/ssa/ssa.go:36: type Builder interface {\nI don't understand why this is an interface and not a struct. You may also want to consider a name like Program.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode89\nsrc/pkg/exp/ssa/ssa.go:89: // Package represents a single analyzed package, containing Members\ns/represents/is/\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode105\nsrc/pkg/exp/ssa/ssa.go:105: // Member represents a member of a package, implemented by *Literal,\ns/represents/is/\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode114\nsrc/pkg/exp/ssa/ssa.go:114: // An Id identifies the name of a field of a struct type, or the name\nID is more common.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode132\nsrc/pkg/exp/ssa/ssa.go:132: // A method set contains all the methods whose receiver is either T or\n// A MethodSet\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode213\nsrc/pkg/exp/ssa/ssa.go:213: type Instr interface {\nInstruction?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode270\nsrc/pkg/exp/ssa/ssa.go:270: Signature *types.Signature\nIn the types below you use Type_, is a Signature significantly different?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode387\nsrc/pkg/exp/ssa/ssa.go:387: // A named Value holding the address of a var defined inside a package\n// A Global is a named Value\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode787\nsrc/pkg/exp/ssa/ssa.go:787: // Helper for Select.\n// SelectState ...\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1034\nsrc/pkg/exp/ssa/ssa.go:1034: // Register is a mix-in embedded by all SSA values that are also\nOdd to see these described as mix-ins.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1046\nsrc/pkg/exp/ssa/ssa.go:1046: Num   int        // \"name\" of virtual register, e.g. \"t0\".  Not guaranteed unique.\nIf Num cannot safely be used to identify registers, why expose it? Isn't Name good enough for debugging?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1130\nsrc/pkg/exp/ssa/ssa.go:1130: // Returns the package-level function of the specified name, or nil\n// Func returns\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1137\nsrc/pkg/exp/ssa/ssa.go:1137: // Returns the package-level variable of the specified name, or nil\n// Var returns",
			"disapproval": false,
			"date": "2013-01-17 16:08:48.905130",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, all good comments.\nAll done, except the Builder/builder merge; will wait for gri's thoughts.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode36\nsrc/pkg/exp/ssa/ssa.go:36: type Builder interface {\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> I don't understand why this is an interface and not a struct. You may also want\n> to consider a name like Program.\n\nMy intention was not to expose the concrete builder type and to gather its interface together in once place; but perhaps this isn't idiomatic Go.  I'll wait to see what gri says before I start editing but I'm happy to make your change.\n\nAs to the name: the point is that the Builder can (and should) be thrown away once the Packages are created.  I think I may yet want something like Program which is a detachable container of the \"proof but not the lemmas\", so to speak: the Packages and MethodSets.  The Builder API is certain to change as we learn more.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode89\nsrc/pkg/exp/ssa/ssa.go:89: // Package represents a single analyzed package, containing Members\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> s/represents/is/\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode105\nsrc/pkg/exp/ssa/ssa.go:105: // Member represents a member of a package, implemented by *Literal,\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> s/represents/is/\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode114\nsrc/pkg/exp/ssa/ssa.go:114: // An Id identifies the name of a field of a struct type, or the name\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> ID is more common.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode132\nsrc/pkg/exp/ssa/ssa.go:132: // A method set contains all the methods whose receiver is either T or\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> // A MethodSet\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode213\nsrc/pkg/exp/ssa/ssa.go:213: type Instr interface {\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> Instruction?\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode270\nsrc/pkg/exp/ssa/ssa.go:270: Signature *types.Signature\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> In the types below you use Type_, is a Signature significantly different?\n\nA Signature is a kind of Type: the type of a function.\nI could have called the field Type_, but I was happy with this.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode387\nsrc/pkg/exp/ssa/ssa.go:387: // A named Value holding the address of a var defined inside a package\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> // A Global is a named Value\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode787\nsrc/pkg/exp/ssa/ssa.go:787: // Helper for Select.\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> // SelectState ...\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode787\nsrc/pkg/exp/ssa/ssa.go:787: // Helper for Select.\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> // SelectState ...\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1034\nsrc/pkg/exp/ssa/ssa.go:1034: // Register is a mix-in embedded by all SSA values that are also\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> Odd to see these described as mix-ins.\n\nIsn't that exactly what they are?\n\nI don't know of a canonical definition, but the Wikipedia definition seems as good as any, and couldn't be more applicable to this example:\n\n\"In object-oriented programming languages, a mixin is a class that provides a certain functionality to be inherited or just reused by a subclass, while not meant for instantiation (the generation of objects of that class).\n Inheriting from a mixin is not a form of specialization but is rather a means of collecting functionality. A class or object may \"inherit\" most or all of its functionality from one or more mixins, therefore mixins can be thought of as a mechanism of multiple inheritance.\"\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1046\nsrc/pkg/exp/ssa/ssa.go:1046: Num   int        // \"name\" of virtual register, e.g. \"t0\".  Not guaranteed unique.\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> If Num cannot safely be used to identify registers, why expose it? Isn't Name\n> good enough for debugging?\n\nIn publicising Register I was trying to avoid hiding fields that make it challenging for clients to construct instances of Instruction.  But I think in this case you are right.  Done.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1130\nsrc/pkg/exp/ssa/ssa.go:1130: // Returns the package-level function of the specified name, or nil\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> // Func returns\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode1137\nsrc/pkg/exp/ssa/ssa.go:1137: // Returns the package-level variable of the specified name, or nil\nOn 2013/01/17 16:08:49, crawshaw1 wrote:\n> // Var returns\n\nDone.",
			"disapproval": false,
			"date": "2013-01-17 17:26:28.721670",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "First round. More to come.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode36\nsrc/pkg/exp/ssa/ssa.go:36: type Builder interface {\nI'd agree with crawshaw1. Is there only one Builder or is the Builder creating new ones recursively? If the latter, using an interface makes sense if one wanted to use a different builder. But is that actually feasible? Or even desirable? If not, just export the concrete type but keep the methods.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode39\nsrc/pkg/exp/ssa/ssa.go:39: // Values for the package.  Returns a new SSA Package\ns/Returns a/The result is a/\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode49\nsrc/pkg/exp/ssa/ssa.go:49: // TODO(adonovan): not idempotent; perhaps a bad sign.\nwhat's the reason?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode56\nsrc/pkg/exp/ssa/ssa.go:56: // functions and init-blocks in package p and its\ninit blocks are functions - leave away\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode94\nsrc/pkg/exp/ssa/ssa.go:94: Types      *types.Package    // the type checker's package object for this package.\nI don't see a good reason for this field to be called Types.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode95\nsrc/pkg/exp/ssa/ssa.go:95: ImportPath string            // e.g. \"sync/atomic\"\nShouldn't this be the same as Types.Path?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode96\nsrc/pkg/exp/ssa/ssa.go:96: Position   token.Position    // position of an arbitrary file in the package [this will change]\nWhy is this exported?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode99\nsrc/pkg/exp/ssa/ssa.go:99: Init       *Function         // the package's init function\nA package can have multiple init() functions. Shouldn't this be []*Function?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode114\nsrc/pkg/exp/ssa/ssa.go:114: // An Id identifies the name of a field of a struct type, or the name\nOn 2013/01/17 17:26:28, adonovan wrote:\n> On 2013/01/17 16:08:49, crawshaw1 wrote:\n> > ID is more common.\n> \n> Done.\n\nI don't know that this is true. Personally, I'd chose Id.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode129\nsrc/pkg/exp/ssa/ssa.go:129: // instances returned by the type-checker do not have this property.)\nQualifiedNames must be compared with IsSame - which does have this property. But I agree that a value cannot be used directly.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode147\nsrc/pkg/exp/ssa/ssa.go:147: // interface types.  It contains methods for the pointer receiver\nThe last sentence sounds odd. I thought that this is already clear from MethodSet.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode158\nsrc/pkg/exp/ssa/ssa.go:158: // The following types are assignable to Value: Capture, Parameter,\nThis enumeration is likely to get out of sync over time because the comment is not updated.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode205\nsrc/pkg/exp/ssa/ssa.go:205: // The following types are assignable to Instr: If, Jump, Ret, Alloc\nThis enumeration is likely to get out of sync over time because the comment is\nnot updated. I would leave it away.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode244\nsrc/pkg/exp/ssa/ssa.go:244: // assignable.\nShould explain what a function assignment looks like.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode275\nsrc/pkg/exp/ssa/ssa.go:275: Params    []*Parameter   // inputs\nthese line comments are not adding information\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode276\nsrc/pkg/exp/ssa/ssa.go:276: Captures  []*Capture     // captures\ns/Captures/Context/ ?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode310\nsrc/pkg/exp/ssa/ssa.go:310: // The Outer field records the correspondence of the value as known to\nOuter is just the value in the context, isn't it? Seems a bit complicated a description.\n\nA line comment next to the field might suffice.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode314\nsrc/pkg/exp/ssa/ssa.go:314: // The referent of a capture is a Parameter, Alloc or another Capture\na line comment next to the field may be all that's needed\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode351\nsrc/pkg/exp/ssa/ssa.go:351: // interface, map, channel, pointer, slice, or function.\nwhat a bout nil (untyped nil)?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode353\nsrc/pkg/exp/ssa/ssa.go:353: // All source-level constant expressions are represented by a Literal\nThis would be enough comment.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode361\nsrc/pkg/exp/ssa/ssa.go:361: // constants.  The dynamic type of Value is the smallest type that can\nInstead of repeating this, just refer to the types package. If there's a change there, this comment may get out of date.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode390\nsrc/pkg/exp/ssa/ssa.go:390: // Global implements the Value interface.\nInstead of having this uncheckable comment, why not add an empty ImplementsValue() (or AValue) method? That's declaring the relationship explicitly. Apply everywhere.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode396\nsrc/pkg/exp/ssa/ssa.go:396: // Set transiently during building, then cleared.\nmake it a line comment\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode462\nsrc/pkg/exp/ssa/ssa.go:462: // dropping Edges[i].Block since block.Preds[i] should suffice.\nagreed, and then Edges can just be []Value\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode488\nsrc/pkg/exp/ssa/ssa.go:488: Register\nsurprisingly litte commentary here compared to elsewhere",
			"disapproval": false,
			"date": "2013-01-18 00:07:54.337500",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@google.com, iant@google.com, crawshaw@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-17 17:29:50.990860",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go\nFile src/pkg/exp/ssa/doc.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode1\nsrc/pkg/exp/ssa/doc.go:1: // exp/ssa: SSA representation of Go programs\ndrop this line\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode5\nsrc/pkg/exp/ssa/doc.go:5: // The package exp/ssa defines a representation of the elements of Go\n// Package ssa defines ...\n\nAnd make that the first line of the comment, so it's the summary.\n\nMove the ALL CAPS WARNING after the summary.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode3\nsrc/pkg/exp/ssa/ssa.go:3: // This package defines a high-level intermediate representation for\nyou already have doc.go.  drop this comment.",
			"disapproval": false,
			"date": "2013-01-17 19:12:50.086480",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go\nFile src/pkg/exp/ssa/doc.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode1\nsrc/pkg/exp/ssa/doc.go:1: // exp/ssa: SSA representation of Go programs\nOn 2013/01/17 19:12:50, bradfitz wrote:\n> drop this line\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode5\nsrc/pkg/exp/ssa/doc.go:5: // The package exp/ssa defines a representation of the elements of Go\nOn 2013/01/17 19:12:50, bradfitz wrote:\n> // Package ssa defines ...\n> \n> And make that the first line of the comment, so it's the summary.\n> \n> Move the ALL CAPS WARNING after the summary.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode3\nsrc/pkg/exp/ssa/ssa.go:3: // This package defines a high-level intermediate representation for\nOn 2013/01/17 19:12:50, bradfitz wrote:\n> you already have doc.go.  drop this comment.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-17 21:41:29.941100",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for all the comments; responses inline.\n\nPTAL.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode36\nsrc/pkg/exp/ssa/ssa.go:36: type Builder interface {\nOn 2013/01/18 00:07:54, gri wrote:\n> I'd agree with crawshaw1. Is there only one Builder or is the Builder creating\n> new ones recursively? If the latter, using an interface makes sense if one\n> wanted to use a different builder. But is that actually feasible? Or even\n> desirable? If not, just export the concrete type but keep the methods.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode39\nsrc/pkg/exp/ssa/ssa.go:39: // Values for the package.  Returns a new SSA Package\nOn 2013/01/18 00:07:54, gri wrote:\n> s/Returns a/The result is a/\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode49\nsrc/pkg/exp/ssa/ssa.go:49: // TODO(adonovan): not idempotent; perhaps a bad sign.\nOn 2013/01/18 00:07:54, gri wrote:\n> what's the reason?\n\nI've removed this comment; I no longer think it's a significant problem.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode56\nsrc/pkg/exp/ssa/ssa.go:56: // functions and init-blocks in package p and its\nOn 2013/01/18 00:07:54, gri wrote:\n> init blocks are functions - leave away\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode94\nsrc/pkg/exp/ssa/ssa.go:94: Types      *types.Package    // the type checker's package object for this package.\nOn 2013/01/18 00:07:54, gri wrote:\n> I don't see a good reason for this field to be called Types.\n\nAny suggestions for a better name?\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode95\nsrc/pkg/exp/ssa/ssa.go:95: ImportPath string            // e.g. \"sync/atomic\"\nOn 2013/01/18 00:07:54, gri wrote:\n> Shouldn't this be the same as Types.Path?\n\nYes, but see the assertion in builder.go's createPackageImpl.  Sometimes it's empty.  FWIW this is on the go/types wishlist.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode96\nsrc/pkg/exp/ssa/ssa.go:96: Position   token.Position    // position of an arbitrary file in the package [this will change]\nOn 2013/01/18 00:07:54, gri wrote:\n> Why is this exported?\n\nBecause the test interpreter needs it.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode99\nsrc/pkg/exp/ssa/ssa.go:99: Init       *Function         // the package's init function\nOn 2013/01/18 00:07:54, gri wrote:\n> A package can have multiple init() functions. Shouldn't this be []*Function?\n\nIn the SSA representation the init blocks are concatenated into a single function. \nI've changed the comment to \"... (concatenated) init function\".\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode114\nsrc/pkg/exp/ssa/ssa.go:114: // An Id identifies the name of a field of a struct type, or the name\nOn 2013/01/18 00:07:54, gri wrote:\n> On 2013/01/17 17:26:28, adonovan wrote:\n> > On 2013/01/17 16:08:49, crawshaw1 wrote:\n> > > ID is more common.\n> > \n> > Done.\n> \n> I don't know that this is true. Personally, I'd chose Id.\n\nUndone. :)\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode129\nsrc/pkg/exp/ssa/ssa.go:129: // instances returned by the type-checker do not have this property.)\nOn 2013/01/18 00:07:54, gri wrote:\n> QualifiedNames must be compared with IsSame - which does have this property. But\n> I agree that a value cannot be used directly.\n\nFor QualifiedName, IsSame has this property but == does not, so QualifiedNames are not suitable as map keys without additional effort.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode147\nsrc/pkg/exp/ssa/ssa.go:147: // interface types.  It contains methods for the pointer receiver\nOn 2013/01/18 00:07:54, gri wrote:\n> The last sentence sounds odd. I thought that this is already clear from\n> MethodSet.\n\nIndeed; removed.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode158\nsrc/pkg/exp/ssa/ssa.go:158: // The following types are assignable to Value: Capture, Parameter,\nOn 2013/01/18 00:07:54, gri wrote:\n> This enumeration is likely to get out of sync over time because the comment is\n> not updated.\n\nYes, but I don't see a satisfactory alternative.  Even the explicit declarations of dummy ImplementsValue() functions don't help the reader of the exp/ssa godoc to know which types are Values.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode205\nsrc/pkg/exp/ssa/ssa.go:205: // The following types are assignable to Instr: If, Jump, Ret, Alloc\nOn 2013/01/18 00:07:54, gri wrote:\n> This enumeration is likely to get out of sync over time because the comment is\n> not updated. I would leave it away.\n\n(Ditto)\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode244\nsrc/pkg/exp/ssa/ssa.go:244: // assignable.\nOn 2013/01/18 00:07:54, gri wrote:\n> Should explain what a function assignment looks like.\n\nChanged to:\n// Functions are immutable values; they do not have addresses.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode275\nsrc/pkg/exp/ssa/ssa.go:275: Params    []*Parameter   // inputs\nOn 2013/01/18 00:07:54, gri wrote:\n> these line comments are not adding information\n\n\nDeleted.  I was lured into adding them by gofmt, to keep things neatly aligned.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode276\nsrc/pkg/exp/ssa/ssa.go:276: Captures  []*Capture     // captures\nOn 2013/01/18 00:07:54, gri wrote:\n> s/Captures/Context/ ?\n\nI've never liked the name \"Context\"; how about Env, since these are environment bindings for the free variables?  (Changed to Env).\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode310\nsrc/pkg/exp/ssa/ssa.go:310: // The Outer field records the correspondence of the value as known to\nOn 2013/01/18 00:07:54, gri wrote:\n> Outer is just the value in the context, isn't it? Seems a bit complicated a\n> description.\n> \n> A line comment next to the field might suffice.\n\nYes, and done.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode314\nsrc/pkg/exp/ssa/ssa.go:314: // The referent of a capture is a Parameter, Alloc or another Capture\nOn 2013/01/18 00:07:54, gri wrote:\n> a line comment next to the field may be all that's needed\n\nI couldn't make it much more concise without making it opaque.  In any case I think this may change fairly soon when I implement fully pruned SSA.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode351\nsrc/pkg/exp/ssa/ssa.go:351: // interface, map, channel, pointer, slice, or function.\nOn 2013/01/18 00:07:54, gri wrote:\n> what a bout nil (untyped nil)?\n\nGood point; I've explicitly excluded it.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode353\nsrc/pkg/exp/ssa/ssa.go:353: // All source-level constant expressions are represented by a Literal\nOn 2013/01/18 00:07:54, gri wrote:\n> This would be enough comment.\n\nNot quite sure which part you intended me to delete.  Take another look.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode361\nsrc/pkg/exp/ssa/ssa.go:361: // constants.  The dynamic type of Value is the smallest type that can\nOn 2013/01/18 00:07:54, gri wrote:\n> Instead of repeating this, just refer to the types package. If there's a change\n> there, this comment may get out of date.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode390\nsrc/pkg/exp/ssa/ssa.go:390: // Global implements the Value interface.\nOn 2013/01/18 00:07:54, gri wrote:\n> Instead of having this uncheckable comment, why not add an empty\n> ImplementsValue() (or AValue) method? That's declaring the relationship\n> explicitly. Apply everywhere.\n\nDone.\n\nI think it's a shame that Go's \"duck\" typing doesn't provide a better mechanism than this to declare the \"implements\" relation when you want to do so.  This trick of adding a dummy method to the interface has the effect of forcing a change upon all implementations of the interface, thereby mostly nullifying the value of Go's implicit \"implements\" relation.  (In this specific case it's not so bad because the set of Value types is finite; but this probably not even the common case.)\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode396\nsrc/pkg/exp/ssa/ssa.go:396: // Set transiently during building, then cleared.\nOn 2013/01/18 00:07:54, gri wrote:\n> make it a line comment\n\nFor symmetry with other occurrences I've left it as-is.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode462\nsrc/pkg/exp/ssa/ssa.go:462: // dropping Edges[i].Block since block.Preds[i] should suffice.\nOn 2013/01/18 00:07:54, gri wrote:\n> agreed, and then Edges can just be []Value \n\nYes, I think this is probably for the best, but the downside is that the printed form (Name()) of a Phi node must either (a) elide the names of the basic blocks or (b) access them through some kind of context supplied to Name().  I think (b) makes sense since it solves other problems, e.g. printing qualified names of package-level vars only when crossing packages.  I've added this to the TODO.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode488\nsrc/pkg/exp/ssa/ssa.go:488: Register\nOn 2013/01/18 00:07:54, gri wrote:\n> surprisingly litte commentary here compared to elsewhere\n\nThis class is just the sum of two mix-ins.  Not sure what else to say.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go\nFile src/pkg/exp/ssa/doc.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode21\nsrc/pkg/exp/ssa/doc.go:21: // primitives in future to facilitate constant-time dispatch of switch\nOn 2013/01/18 01:58:14, gri wrote:\n> s/in/in the/\n\nGood catch.  Your English is better than mine. :)\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode35\nsrc/pkg/exp/ssa/doc.go:35: // is not yet implemented.\nOn 2013/01/18 01:58:14, gri wrote:\n> s/is is/is/\n\nGood catch--hiding behind the pesky newline.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/doc.go#newcode51\nsrc/pkg/exp/ssa/doc.go:51: // Given a Go source package such as this:\nOn 2013/01/18 01:58:14, gri wrote:\n> Instead of this lenghty - unchecked - comment, it would be better to have an\n> example that shows actual code.\n\nCan you be more specific about what \"actual code\" you have in mind?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode536\nsrc/pkg/exp/ssa/ssa.go:536: // We can't use UnOp because there's no token for it.  TODO(adonovan):\nOn 2013/01/18 01:58:14, gri wrote:\n> Why can't you use \"x == nil\", i.e. a BinOp?\n\nGood call; done.  This instruction dated from an earlier time when I misunderstood the nature of untyped nil.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode637\nsrc/pkg/exp/ssa/ssa.go:637: Slots []Value\nOn 2013/01/18 01:58:14, gri wrote:\n> I understand where Slots coming from, but I wonder if there's a better name.\n> Context?\n\nI dislike the name Context (almost anywhere); how about Bindings, since these are the bindings for each free variable in Fn.FreeVars?\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode674\nsrc/pkg/exp/ssa/ssa.go:674: // Type() returns a *types.Slice.\nOn 2013/01/18 01:58:14, gri wrote:\n> this should be with the method declaration\n\nAgreed, but the method is promoted from Register, so there's nowhere to put it.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode709\nsrc/pkg/exp/ssa/ssa.go:709: // Type() returns a *types.Pointer.\nOn 2013/01/18 01:58:14, gri wrote:\n> this should be with the method declaration\n\n(Ditto)\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode726\nsrc/pkg/exp/ssa/ssa.go:726: // package-local identifiers and permit compact representations.\nOn 2013/01/18 01:58:14, gri wrote:\n> no need to explain the reasons for the numeric indices in the api\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode756\nsrc/pkg/exp/ssa/ssa.go:756: // Index yields a copy of the element at index Index of array X.\nOn 2013/01/18 01:58:14, gri wrote:\n> just: element at Index of array X.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode853\nsrc/pkg/exp/ssa/ssa.go:853: // value (ok, k, v).  If the iterator is not exhausted, ok is true and\nOn 2013/01/18 01:58:14, gri wrote:\n> should ok be last, as would be the case in a comma-ok expression?\n\nI had that originally, but this seemed better since you absolutely have to access ok first--unlike in value,ok expressions.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode928\nsrc/pkg/exp/ssa/ssa.go:928: Target *BasicBlock\nOn 2013/01/18 01:58:14, gri wrote:\n> This is the same as the successor in that basic block, isn't it? Does it need to\n> be in both places?\n\n(See response to same comment at If.)\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode943\nsrc/pkg/exp/ssa/ssa.go:943: True, False *BasicBlock\nOn 2013/01/18 01:58:14, gri wrote:\n> These are the same as the successors in that basic block, isn't it? Do they need\n> to be in both places?\n\nIdeally no; but in practice the CFG is built from the If-statement, not the other way around.  Furthermore this would also necessitate that If.Name() can  access the CFG somehow so it can print intelligible block names.\n\nI think it's worth experimenting; I've added a TODO to try this in a follow-up.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1040\nsrc/pkg/exp/ssa/ssa.go:1040: // Embeddable mix-ins used for common parts of other structs. --------------------\nOn 2013/01/18 01:58:14, gri wrote:\n> they are not really mix-ins\n\nActually, they really are---see my response to crawshaw: the Wikipedia definition of \"mix-in\" couldn't be more appropriate.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1042\nsrc/pkg/exp/ssa/ssa.go:1042: // Register is a mix-in embedded by all SSA values that are also\nOn 2013/01/18 01:58:14, gri wrote:\n> s/mix-in/struct/\n\n(ditto)\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1058\nsrc/pkg/exp/ssa/ssa.go:1058: // CallCommon is a mix-in embedded by Go, Defer and Call to hold the\nOn 2013/01/18 01:58:14, gri wrote:\n> s/mix-in/struct/\n\n(ditto)\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode1102\nsrc/pkg/exp/ssa/ssa.go:1102: // TODO(adonovan): document copying of arguments and receiver.\nOn 2013/01/18 01:58:14, gri wrote:\n> I suggest adding an empty // comment before the type to separate it better from\n> the comment. Your comments are so long, it's hard to see where the declaration\n> starts. Apply everywhere (except perhaps where the comment is short).\n\nDone.",
			"disapproval": false,
			"date": "2013-01-22 04:37:54.413520",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've implemented the changed to Phi/Jump/If we discussed; it's much cleaner: more compact and with fewer opportunities for inconsistency.\n\nI had to add the Block and SetBlock methods to Instruction; we were always going to need them sooner or later.\n\nReady for another look.\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/16001/src/pkg/exp/ssa/ssa.go#newcode462\nsrc/pkg/exp/ssa/ssa.go:462: // dropping Edges[i].Block since block.Preds[i] should suffice.\nOn 2013/01/22 04:37:54, adonovan wrote:\n> On 2013/01/18 00:07:54, gri wrote:\n> > agreed, and then Edges can just be []Value \n> \n> Yes, I think this is probably for the best, but the downside is that the printed\n> form (Name()) of a Phi node must either (a) elide the names of the basic blocks\n> or (b) access them through some kind of context supplied to Name().  I think (b)\n> makes sense since it solves other problems, e.g. printing qualified names of\n> package-level vars only when crossing packages.  I've added this to the TODO.\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/14006/src/pkg/exp/ssa/ssa.go#newcode943\nsrc/pkg/exp/ssa/ssa.go:943: True, False *BasicBlock\nOn 2013/01/22 04:37:55, adonovan wrote:\n> On 2013/01/18 01:58:14, gri wrote:\n> > These are the same as the successors in that basic block, isn't it? Do they\n> need\n> > to be in both places?\n> \n> Ideally no; but in practice the CFG is built from the If-statement, not the\n> other way around.  Furthermore this would also necessitate that If.Name() can \n> access the CFG somehow so it can print intelligible block names.\n> \n> I think it's worth experimenting; I've added a TODO to try this in a follow-up.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-22 17:37:33.413400",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Updates since last snapshot:\n- new type Program: this is the toplevel container populated by Builder.\n- Builder interface replaced by concrete struct.\n- The If instruction now performs a traditional comparison-based conditional branch, instead of taking a reified boolean operand. \n- BinOp no longer accepts comparison operators, only arithmetic, bitwise and shifts.\n- Phi no longer duplicates the predecessor block list of the CFG, which is now accessible as Block().Preds.\n- token.Pos is now used instead of token.Position: it's more compact.  (It requires a token.FileSet to be meaningful; \u00a0Program has one.)",
			"disapproval": false,
			"date": "2013-01-23 20:44:21.002490",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode33\nsrc/pkg/exp/ssa/ssa.go:33: // A Package a single analyzed Go package, containing Members for all\ns/A package a/A package is a/\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode60\nsrc/pkg/exp/ssa/ssa.go:60: ImplementsMember() // dummy method to indicate the \"implements\" relation.\nIs there any reason to make ImplementsMember an exported method?\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode77\nsrc/pkg/exp/ssa/ssa.go:77: // relation == is consistent with identifier equality.  (QualifiedName\nYou say that QualifiedName returned by the type checker does not support identifier equality, but then you go ahead and use types.QualifiedName.  Something seems out of kilter.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode142\nsrc/pkg/exp/ssa/ssa.go:142: ImplementsValue()\nDoes this method need to be exported?\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode179\nsrc/pkg/exp/ssa/ssa.go:179: SetBlock(*BasicBlock)\nWhen would it be appropriate for a user of this package to call SetBlock?  Should this be an unexported method?\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode182\nsrc/pkg/exp/ssa/ssa.go:182: ImplementsInstruction()\nExported?\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode236\nsrc/pkg/exp/ssa/ssa.go:236: // control (If, Jump or Ret).\nWhat about panic?\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode261\nsrc/pkg/exp/ssa/ssa.go:261: Type_ *types.Pointer\nWhy do you need Name_ and Type_ fields here?  Can't you derive them from Outer?\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode273\nsrc/pkg/exp/ssa/ssa.go:273: // the stack frame of the owning function.  If the case where\nIt's not clear to me why you discuss \"the stack frame of the owning function.\"  In Go terms, calling a function always copies the arguments, just as with assignment.  The caller can't refer to the argument, so treating the parameter as a pointer to the caller's argument doesn't seem meaningful.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode286\nsrc/pkg/exp/ssa/ssa.go:286: // (integer, fraction or complex) value.\ns/fraction/float/ (I think).\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode544\nsrc/pkg/exp/ssa/ssa.go:544: // MakeSlice yields a slice of length Len backed by a newly allocated\nWhat are the values of Len and Cap if they are not specified in the program?\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode626\nsrc/pkg/exp/ssa/ssa.go:626: // TODO(adonovan): should we permit X to have type slice?\nI suppose I would permit X to have type slice.  It's not clear why this should not be permitted.  After all IndexAddr followed by Load would work for an array as well.",
			"disapproval": false,
			"date": "2013-01-23 23:41:41.031870",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the comments.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode33\nsrc/pkg/exp/ssa/ssa.go:33: // A Package a single analyzed Go package, containing Members for all\nOn 2013/01/23 23:41:41, iant wrote:\n> s/A package a/A package is a/\n\nDone.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode60\nsrc/pkg/exp/ssa/ssa.go:60: ImplementsMember() // dummy method to indicate the \"implements\" relation.\nOn 2013/01/23 23:41:41, iant wrote:\n> Is there any reason to make ImplementsMember an exported method?\n\nIt provides explicit documentation of the implements relation.\n\nAnother reason to expose the ImplementsFoo method (which doesn't apply in this case since interface Member is a \"closed\" type) is to permit clients to implement the interface.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode77\nsrc/pkg/exp/ssa/ssa.go:77: // relation == is consistent with identifier equality.  (QualifiedName\nOn 2013/01/23 23:41:41, iant wrote:\n> You say that QualifiedName returned by the type checker does not support\n> identifier equality, but then you go ahead and use types.QualifiedName. \n> Something seems out of kilter.\n\nAh, I see the confusion: nowhere in my code do I rely on Id and QN having structural equality; I was just being lazy and reusing the definition.  I have copied it out in full now.  I've removed all mention of QN.\n\nFYI: all instances of QN returned by the type checker have the Pkg field non-nil, which breaks the property described.  In constrast all instances of Id have the Pkg field non-nill iff the Name field is unexported.  At no point do I in fact convert between them.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode142\nsrc/pkg/exp/ssa/ssa.go:142: ImplementsValue()\nOn 2013/01/23 23:41:41, iant wrote:\n> Does this method need to be exported?\n\nYes, for documentation.  I think it's quite important for the reader to be able to see easily which types are assignable to the principal interfaces.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode179\nsrc/pkg/exp/ssa/ssa.go:179: SetBlock(*BasicBlock)\nOn 2013/01/23 23:41:41, iant wrote:\n> When would it be appropriate for a user of this package to call SetBlock? \n> Should this be an unexported method?\n\nAnyone doing code transformation will need this method, so it should be exported.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode182\nsrc/pkg/exp/ssa/ssa.go:182: ImplementsInstruction()\nOn 2013/01/23 23:41:41, iant wrote:\n> Exported?\n\n\nDitto.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode236\nsrc/pkg/exp/ssa/ssa.go:236: // control (If, Jump or Ret).\nOn 2013/01/23 23:41:41, iant wrote:\n> What about panic?\n\nCurrently panic is compiled in a for{} loop to ensure its successor is unreachable.\nPerhaps panic should have its own Instruction, but we can add that later.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode261\nsrc/pkg/exp/ssa/ssa.go:261: Type_ *types.Pointer\nOn 2013/01/23 23:41:41, iant wrote:\n> Why do you need Name_ and Type_ fields here?  Can't you derive them from Outer?\n\nGood point.  Done.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode273\nsrc/pkg/exp/ssa/ssa.go:273: // the stack frame of the owning function.  If the case where\nOn 2013/01/23 23:41:41, iant wrote:\n> It's not clear to me why you discuss \"the stack frame of the owning function.\" \n> In Go terms, calling a function always copies the arguments, just as with\n> assignment.  The caller can't refer to the argument, so treating the parameter\n> as a pointer to the caller's argument doesn't seem meaningful.\n\nAgreed, but I think you're misreading my (confusing) use of the word \"owning\" to mean \"calling\".  What I meant by owning was just the function in which this Parameter appears.  I've reworded it to:  \"pointers into the stack frame\" since it should be pretty obvious which function we mean.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode286\nsrc/pkg/exp/ssa/ssa.go:286: // (integer, fraction or complex) value.\nOn 2013/01/23 23:41:41, iant wrote:\n> s/fraction/float/ (I think).\n\nActually it can represent fractions exactly.   Rounding to machine datatypes occurs later.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode544\nsrc/pkg/exp/ssa/ssa.go:544: // MakeSlice yields a slice of length Len backed by a newly allocated\nOn 2013/01/23 23:41:41, iant wrote:\n> What are the values of Len and Cap if they are not specified in the program?\n\nMakeSlice corresponds to a call to the built-in function make([]T, Len) or make([]T, Len, Cap) in which Len is mandatory and Cap is assumed equal to Len if not explicitly provided.\n\nIn the MakeSlice instruction, both are mandatory.\n\nI've added:\n// Both Len and Cap must be non-nil Values of integer type.\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode626\nsrc/pkg/exp/ssa/ssa.go:626: // TODO(adonovan): should we permit X to have type slice?\nOn 2013/01/23 23:41:41, iant wrote:\n> I suppose I would permit X to have type slice.  It's not clear why this should\n> not be permitted.  After all IndexAddr followed by Load would work for an array\n> as well.\n\nFair enough.  I've removed the \"perhaps\" so this is a definite TODO, but not yet done.",
			"disapproval": false,
			"date": "2013-01-24 02:47:54.556760",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-24 21:17:33.240180",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Deltas since last review:\n- abandoned the multigraph formulation of the CFG; it's too hard to maintain.  If instructions must have distinct true and false targets.\n- moved comparisons back from If to BinOp.  If now requires a reified boolean.\n\nAlso: \n- eliminated Name/Type fields of Builtin; replaced by canonical *types.Func object.  This avoids the needs for name-based operations on built-ins.\n\nPTAL",
			"disapproval": false,
			"date": "2013-01-24 17:07:51.261890",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode60\nsrc/pkg/exp/ssa/ssa.go:60: ImplementsMember() // dummy method to indicate the \"implements\" relation.\nOn 2013/01/24 02:47:55, adonovan wrote:\n> On 2013/01/23 23:41:41, iant wrote:\n> > Is there any reason to make ImplementsMember an exported method?\n> \n> It provides explicit documentation of the implements relation.\n\nDo we have other methods that work that way?  I don't find that a particularly convincing reason.  The documentation is (or should be) clear, and the code can enforce the documentation, but I don't see a need for an exported method simply to add to the documentation.\n\n> Another reason to expose the ImplementsFoo method (which doesn't apply in this\n> case since interface Member is a \"closed\" type) is to permit clients to\n> implement the interface.\n\nRight, but as you say that doesn't apply in this case.",
			"disapproval": false,
			"date": "2013-01-24 18:05:54.589240",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go\nFile src/pkg/exp/ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/7071058/diff/17003/src/pkg/exp/ssa/ssa.go#newcode60\nsrc/pkg/exp/ssa/ssa.go:60: ImplementsMember() // dummy method to indicate the \"implements\" relation.\nOn 2013/01/24 18:05:54, iant wrote:\n> On 2013/01/24 02:47:55, adonovan wrote:\n> > On 2013/01/23 23:41:41, iant wrote:\n> > > Is there any reason to make ImplementsMember an exported method?\n> > \n> > It provides explicit documentation of the implements relation.\n> \n> Do we have other methods that work that way?  I don't find that a particularly\n> convincing reason.  The documentation is (or should be) clear, and the code can\n> enforce the documentation, but I don't see a need for an exported method simply\n> to add to the documentation.\n\nNot that I know of.  I agree the documentation should be clear, but I found that it was very hard to infer the implements relation from the godoc, so I wrote explicit comments for every interface and concrete type.  gri didn't like that because of the very real risk of it becoming stale and suggested I use a method instead.",
			"disapproval": false,
			"date": "2013-01-24 19:29:27.198310",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"crawshaw@google.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3ef1c4fabb5f ***\n\nexp/ssa: API and documentation.\n\nR=gri, iant, crawshaw, bradfitz, gri, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7071058",
			"disapproval": false,
			"date": "2013-01-24 22:21:52.964950",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7071058: exp/ssa: API and documentation.",
	"created": "2013-01-09 17:59:12.577820",
	"patchsets": [
		1,
		2001,
		7001,
		10001,
		14001,
		16001,
		14006,
		28001,
		32001,
		26002,
		17003,
		43001,
		49001
	],
	"modified": "2013-01-24 22:21:52.964950",
	"closed": true,
	"issue": 7071058
}