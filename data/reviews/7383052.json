{
	"description": "encoding/json: Unmarshal into existing map elements\n\nThis makes unmarshalling into a map with keys matching keys from the JSON\nobject use the concrete type for the respective map elements.\n\nFixes issue 4900.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"kevlar@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch proposes an API change. People that used to expect the old behaviour will be broken in subtle ways, so I don't think this is compatible with the Go 1 contract.\n\nAlso, your CL description uses three times the word \"keys\" with varying meaning so I'm not sure I understand what behaviour you want.",
			"disapproval": false,
			"date": "2013-02-24 23:23:13.560670",
			"approval": false
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/24 23:23:13, remyoudompheng wrote:\n> This patch proposes an API change. People that used to expect the old behaviour\n> will be broken in subtle ways, so I don't think this is compatible with the Go 1\n> contract.\n\nThe json.Unmarshal documentation states:\n\n  To unmarshal JSON into an interface value, Unmarshal unmarshals the JSON into the concrete value contained in the interface value.\n\nIf I understand this sentence correctly, the previous implementation has a bug in it, because the concrete values of existing map elements are not used. If this is the case, are we stuck with the bug?\n\n> Also, your CL description uses three times the word \"keys\" with varying meaning\n> so I'm not sure I understand what behaviour you want.\n\nI've clarified it a bit, I think the test makes the behavior I want quite clear. There is also some discussion at https://groups.google.com/forum/#!topic/golang-nuts/FZCgnNW301E",
			"disapproval": false,
			"date": "2013-02-24 23:38:52.026080",
			"approval": false
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-24 21:02:00.068650",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/24 23:38:52, titanous wrote:\n> On 2013/02/24 23:23:13, remyoudompheng wrote:\n> > This patch proposes an API change. People that used to expect the old\n> behaviour\n> > will be broken in subtle ways, so I don't think this is compatible with the Go\n> 1\n> > contract.\n> \n> The json.Unmarshal documentation states:\n> \n>   To unmarshal JSON into an interface value, Unmarshal unmarshals the JSON into\n> the concrete value contained in the interface value.\n> \n> If I understand this sentence correctly, the previous implementation has a bug\n> in it, because the concrete values of existing map elements are not used. If\n> this is the case, are we stuck with the bug?\n\nFor what my opinion is worth, I believe this is a bug :).  I have a vague recollection that it worked like this in the past, so it might even be a regression.\n\n> > Also, your CL description uses three times the word \"keys\" with varying\n> meaning\n> > so I'm not sure I understand what behaviour you want.\n> \n> I've clarified it a bit, I think the test makes the behavior I want quite clear.\n> There is also some discussion at\n> https://groups.google.com/forum/#%21topic/golang-nuts/FZCgnNW301E",
			"disapproval": false,
			"date": "2013-02-25 04:26:43.903590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry but I can't convince myself that these are the semantics we want.\r\nI'd rather live with the Go 1.0 bug than introduce a new Go 1.1 bug. Let's\r\nleave this for after Go 1.1.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-19 19:09:51.476560",
			"approval": false
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-03-26 14:42:33.129270",
			"approval": false
		}
	],
	"owner_email": "jonathan@titanous.com",
	"private": false,
	"base_url": "",
	"owner": "titanous",
	"subject": "code review 7383052: encoding/json: Unmarshal into existing map elements",
	"created": "2013-02-24 21:00:12.889980",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		10001,
		14001
	],
	"modified": "2013-03-26 14:42:35.119720",
	"closed": true,
	"issue": 7383052
}