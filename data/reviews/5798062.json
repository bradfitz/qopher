{
	"description": "os: make FileInfo.Size() portable (zero on non-regular files)\n\nThis behavior was different between operating systems and bit\nus when writing tar files.\n\nDefine the FileInfo.Size to be zero on non-regular files.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"aram@mgk.ro",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/12 17:07:30, rsc wrote:\n> I think we should not make promises about Size here.\n> Implementations will inevitably fail to honor them.\n> \n> Also, the fact that ls -l /dev/hda doesn't show me the\n> size of the disk on Linux is a bug anyway.  I don't want\n> to require this behavior.\n\nNote that Linux will also pretend most of files in /proc have zero size, although they are regular and return content indeed.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-03-12 18:35:56.336154",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 12, 2012 at 9:36 AM, Aram H\u0103v\u0103rneanu <aram@mgk.ro> wrote:\n\n> Brad Fitzpatrick wrote:\n>>\n>> Go already doesn't let you read directories' bytes, though:\n>>\n>> func main() {\n>> f, _ := os.Open(\".\")\n>>  buf, err := ioutil.ReadAll(f)\n>> fmt.Printf(\"read: %q, %v\\n\", buf, err)\n>> }\n>>\n>> read: \"\", read .: is a directory\n>>\n>\n> I believe that's Linux, not Go. There are some Unices where you can still\n> read directories, e.g. Solaris.\n>\n\nThat was on Go on a Mac.\n",
			"disapproval": false,
			"date": "2012-03-12 16:59:52.820247",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 12, 2012 at 10:27 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Mon, Mar 12, 2012 at 13:11, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > What about the one-liner documentation change I proposed as an\n> alternative\n> > then?\n>\n> Undefined makes it sound like I can return 42.\n>\n\nit can.  there's no documented meaning for it.\n\n\n> // length in bytes; system-dependent for device files, directories\n>\n\nsure.\n",
			"disapproval": false,
			"date": "2012-03-12 17:32:18.531920",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Where does this CL define that property? I see code but no definition.\nNor am I even convinced it's the correct thing to do. There may be\nsystems where directories have a valid non-zero size. There certainly\nused to be, Unix among them (although directories are made \"special\"\nthese days) and package os's purpose is not to hide every detail, just\nto provide a consistent interface. The operating system may do\ndifferent things with that interface, and often will. I don't see the\ncontract going all the way to defining the properties of directory\nstats. It may even be a dangerous precedent to overstep like that, by\narguing that package os will hide valid differences.\n\nTo be facetious, you had a bug; why take it out on os?\n\nI expect to be outvoted, but if this CL is going in, it needs\ndocumentation and justification.\n\n-rob\n",
			"disapproval": false,
			"date": "2012-03-12 07:08:54.227303",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad Fitzpatrick wrote:\n>\n> I believe that's Linux, not Go. There are some Unices where you can still \n>> read directories, e.g. Solaris.\n>>\n>\n> That was on Go on a Mac.\n>\n\nSure, s/Linux/Darwin kernel/. My point was that there (still) are some\nsystems where reading from directories is a valid operation :).\n\nI'm against this change for special files. For directories I have arguments\nboth for and against, so I don't really know what to say.\n",
			"disapproval": false,
			"date": "2012-03-12 17:11:44.586091",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about the one-liner documentation change I proposed as an alternative\nthen?\n\nOn Mon, Mar 12, 2012 at 10:07 AM, Russ Cox <rsc@golang.org> wrote:\n\n> I think we should not make promises about Size here.\n> Implementations will inevitably fail to honor them.\n>\n> Also, the fact that ls -l /dev/hda doesn't show me the\n> size of the disk on Linux is a bug anyway.  I don't want\n> to require this behavior.\n>\n> If this CL were requiring 0 size only for directories, I might\n> go along with it, but even then I think it is probably safer\n> to write code that doesn't depend on this assumption.\n> I know it sucks.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2012-03-12 17:11:52.402294",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad Fitzpatrick wrote:\n>\n> Go already doesn't let you read directories' bytes, though:\n>\n> func main() {\n> f, _ := os.Open(\".\")\n>  buf, err := ioutil.ReadAll(f)\n> fmt.Printf(\"read: %q, %v\\n\", buf, err)\n> }\n>\n> read: \"\", read .: is a directory\n>\n\nI believe that's Linux, not Go. There are some Unices where you can still \nread directories, e.g. Solaris.\n\n",
			"disapproval": false,
			"date": "2012-03-12 16:36:24.525542",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we should not make promises about Size here.\nImplementations will inevitably fail to honor them.\n\nAlso, the fact that ls -l /dev/hda doesn't show me the\nsize of the disk on Linux is a bug anyway.  I don't want\nto require this behavior.\n\nIf this CL were requiring 0 size only for directories, I might\ngo along with it, but even then I think it is probably safer\nto write code that doesn't depend on this assumption.\nI know it sucks.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-12 17:07:30.632582",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this is risky or tricky, but it *is* late.\n\nWaiting on more LGTMs.\n\nI do think pkg os is supposed to be portable, though.  If people want\n*syscall.Stat_t, they know where to find it.\n\n\nOn Sun, Mar 11, 2012 at 11:22 PM, <bradfitz@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> os: make FileInfo.Size() portable (zero on non-regular files)\n>\n> This behavior was different between operating systems and bit\n> us when writing tar files.\n>\n> Define the FileInfo.Size to be zero on non-regular files.\n>\n> Please review this at http://codereview.appspot.com/**5798062/<http://codereview.appspot.com/5798062/>\n>\n> Affected files:\n>  M src/pkg/os/os_test.go\n>  M src/pkg/os/stat_darwin.go\n>  M src/pkg/os/stat_freebsd.go\n>  M src/pkg/os/stat_linux.go\n>  M src/pkg/os/stat_netbsd.go\n>  M src/pkg/os/stat_openbsd.go\n>  M src/pkg/os/stat_plan9.go\n>  M src/pkg/os/stat_windows.go\n>  M src/pkg/os/types.go\n>\n>\n> Index: src/pkg/os/os_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/os_test.go\n> +++ b/src/pkg/os/os_test.go\n> @@ -1047,3 +1047,16 @@\n>                t.Errorf(\"files should be different\")\n>        }\n>  }\n> +\n> +func TestStatDirectorySizeZero(t *testing.T) {\n> +       fi, err := Stat(\".\")\n> +       if err != nil {\n> +               t.Fatal(err)\n> +       }\n> +       if !fi.IsDir() {\n> +               t.Fatal(\"expecting dir\")\n> +       }\n> +       if fi.Size() != 0 {\n> +               t.Fatalf(\"got directory size %d; want 0\", fi.Size())\n> +       }\n> +}\n> Index: src/pkg/os/stat_darwin.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/stat_darwin.go\n> +++ b/src/pkg/os/stat_darwin.go\n> @@ -18,7 +18,6 @@\n>  func fileInfoFromStat(st *syscall.Stat_t, name string) FileInfo {\n>        fs := &fileStat{\n>                name:    basename(name),\n> -               size:    int64(st.Size),\n>                modTime: timespecToTime(st.Mtimespec),\n>                sys:     st,\n>        }\n> @@ -35,7 +34,7 @@\n>        case syscall.S_IFLNK:\n>                fs.mode |= ModeSymlink\n>        case syscall.S_IFREG:\n> -               // nothing to do\n> +               fs.size = int64(st.Size)\n>        case syscall.S_IFSOCK:\n>                fs.mode |= ModeSocket\n>        }\n> Index: src/pkg/os/stat_freebsd.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/stat_freebsd.go\n> +++ b/src/pkg/os/stat_freebsd.go\n> @@ -18,7 +18,6 @@\n>  func fileInfoFromStat(st *syscall.Stat_t, name string) FileInfo {\n>        fs := &fileStat{\n>                name:    basename(name),\n> -               size:    int64(st.Size),\n>                modTime: timespecToTime(st.Mtimespec),\n>                sys:     st,\n>        }\n> @@ -35,7 +34,7 @@\n>        case syscall.S_IFLNK:\n>                fs.mode |= ModeSymlink\n>        case syscall.S_IFREG:\n> -               // nothing to do\n> +               fs.size = int64(st.Size)\n>        case syscall.S_IFSOCK:\n>                fs.mode |= ModeSocket\n>        }\n> Index: src/pkg/os/stat_linux.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/stat_linux.go\n> +++ b/src/pkg/os/stat_linux.go\n> @@ -18,7 +18,6 @@\n>  func fileInfoFromStat(st *syscall.Stat_t, name string) FileInfo {\n>        fs := &fileStat{\n>                name:    basename(name),\n> -               size:    int64(st.Size),\n>                modTime: timespecToTime(st.Mtim),\n>                sys:     st,\n>        }\n> @@ -35,7 +34,7 @@\n>        case syscall.S_IFLNK:\n>                fs.mode |= ModeSymlink\n>        case syscall.S_IFREG:\n> -               // nothing to do\n> +               fs.size = int64(st.Size)\n>        case syscall.S_IFSOCK:\n>                fs.mode |= ModeSocket\n>        }\n> Index: src/pkg/os/stat_netbsd.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/stat_netbsd.go\n> +++ b/src/pkg/os/stat_netbsd.go\n> @@ -18,7 +18,6 @@\n>  func fileInfoFromStat(st *syscall.Stat_t, name string) FileInfo {\n>        fs := &fileStat{\n>                name:    basename(name),\n> -               size:    int64(st.Size),\n>                modTime: timespecToTime(st.Mtim),\n>                sys:     st,\n>        }\n> @@ -35,7 +34,7 @@\n>        case syscall.S_IFLNK:\n>                fs.mode |= ModeSymlink\n>        case syscall.S_IFREG:\n> -               // nothing to do\n> +               fs.size = int64(st.Size)\n>        case syscall.S_IFSOCK:\n>                fs.mode |= ModeSocket\n>        }\n> Index: src/pkg/os/stat_openbsd.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/stat_openbsd.go\n> +++ b/src/pkg/os/stat_openbsd.go\n> @@ -18,7 +18,6 @@\n>  func fileInfoFromStat(st *syscall.Stat_t, name string) FileInfo {\n>        fs := &fileStat{\n>                name:    basename(name),\n> -               size:    int64(st.Size),\n>                modTime: timespecToTime(st.Mtim),\n>                sys:     st,\n>        }\n> @@ -35,7 +34,7 @@\n>        case syscall.S_IFLNK:\n>                fs.mode |= ModeSymlink\n>        case syscall.S_IFREG:\n> -               // nothing to do\n> +               fs.size = int64(st.Size)\n>        case syscall.S_IFSOCK:\n>                fs.mode |= ModeSocket\n>        }\n> Index: src/pkg/os/stat_plan9.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/stat_plan9.go\n> +++ b/src/pkg/os/stat_plan9.go\n> @@ -18,7 +18,6 @@\n>  func fileInfoFromStat(d *Dir) FileInfo {\n>        fs := &fileStat{\n>                name:    d.Name,\n> -               size:    int64(d.Length),\n>                modTime: time.Unix(int64(d.Mtime), 0),\n>                sys:     d,\n>        }\n> @@ -35,6 +34,9 @@\n>        if d.Mode&syscall.DMTMP != 0 {\n>                fs.mode |= ModeTemporary\n>        }\n> +       if fs.mode&ModeType == 0 {\n> +               fs.size = int64(d.Length)\n> +       }\n>        return fs\n>  }\n>\n> Index: src/pkg/os/stat_windows.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/stat_windows.go\n> +++ b/src/pkg/os/stat_windows.go\n> @@ -26,13 +26,17 @@\n>        if e != nil {\n>                return nil, &PathError{\"**GetFileInformationByHandle\",\n> file.name, e}\n>        }\n> -       return &fileStat{\n> +       fs := &fileStat{\n>                name:    basename(file.name),\n> -               size:    mkSize(d.FileSizeHigh, d.FileSizeLow),\n>                modTime: mkModTime(d.LastWriteTime),\n>                mode:    mkMode(d.FileAttributes),\n>                sys:     mkSysFromFI(&d),\n> -       }, nil\n> +       }\n> +       if fs.Mode()&ModeType == 0 {\n> +               // Only for regular files.\n> +               fs.size = mkSize(d.FileSizeHigh, d.FileSizeLow)\n> +       }\n> +       return fi, nil\n>  }\n>\n>  // Stat returns a FileInfo structure describing the named file.\n> Index: src/pkg/os/types.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/types.go\n> +++ b/src/pkg/os/types.go\n> @@ -15,7 +15,7 @@\n>  // A FileInfo describes a file and is returned by Stat and Lstat\n>  type FileInfo interface {\n>        Name() string       // base name of the file\n> -       Size() int64        // length in bytes\n> +       Size() int64        // length in bytes (0 if not a regular file)\n>        Mode() FileMode     // file mode bits\n>        ModTime() time.Time // modification time\n>        IsDir() bool        // abbreviation for Mode().IsDir()\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-12 06:29:52.333107",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Same thing for symbolic links. I am used to symbolic links size to be the length of the string they contain on Linux.\nWhat kind of system gives a zero size for directories and symlinks?",
			"disapproval": false,
			"date": "2012-03-12 07:27:17.103413",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-12 06:22:04.237288",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-03-12 06:24:51.401351",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 12, 2012 at 12:08 AM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> Where does this CL define that property? I see code but no definition.\n>\n\ntypes.go.\n\n\n> Nor am I even convinced it's the correct thing to do. There may be\n> systems where directories have a valid non-zero size. There certainly\n> used to be, Unix among them (although directories are made \"special\"\n> these days)\n\n\nGo already doesn't let you read directories' bytes, though:\n\nfunc main() {\nf, _ := os.Open(\".\")\nbuf, err := ioutil.ReadAll(f)\nfmt.Printf(\"read: %q, %v\\n\", buf, err)\n}\n\nread: \"\", read .: is a directory\n\nSo any Size() on them is misleading at best.  It's a size of something you\ncan't get at.\n\nand package os's purpose is not to hide every detail, just\n> to provide a consistent interface.\n\n\nI'm just trying to make it more consistent and more simple.\n\nI write a fair bit of backup/VFS code and I'd like it to be more defined.\n I argued for the current FileInfo.Sys docs saying that it may be nil, for\ninstance, as I was afraid of code that assume Sys() was non-nil or of a\ncertain type.  I likewise fear (irrationally?) that people will rely on\ndirectories having a Size() for some reason.\n\nRemy argued for symlink sizes too, but that's just len(ReadLink's result).\n There's no ReadLinkIntoBytes anyway, so no need to allocate the buffer\nyourself.\n\n\n> The operating system may do\n> different things with that interface, and often will. I don't see the\n> contract going all the way to defining the properties of directory\n> stats. It may even be a dangerous precedent to overstep like that, by\n> arguing that package os will hide valid differences.\n>\n\nPackage os already does.  We have the os.FileMode interface, os.FileMode\ntype, Windows permissions reduce down to 0777 (kinda?).\n\n\n> To be facetious, you had a bug; why take it out on os?\n>\n\nBecause it brought this to my attention.  I would've argued for this\nindependently, had I known.\n\n\n> I expect to be outvoted, but if this CL is going in, it needs\n> documentation and justification.\n\n\nI likewise expect to get outvoted, but here it is.\n\nAt the least, I propose the following one-line documentation change in\ntypes.go:\n\n type FileInfo interface {\n   ...\n   Size() int64   // length in bytes; undefined for non-regular files\n   ...\n}\n",
			"disapproval": false,
			"date": "2012-03-12 15:17:20.259450",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 12, 2012 at 13:11, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> What about the one-liner documentation change I proposed as an alternative\n> then?\n\nUndefined makes it sound like I can return 42.\n\n// length in bytes; system-dependent for device files, directories\n",
			"disapproval": false,
			"date": "2012-03-12 17:27:40.030217",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:47:17.234836",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5798062: os: make FileInfo.Size() portable (zero on non-regular ...",
	"created": "2012-03-12 06:21:48.059281",
	"patchsets": [
		1,
		3,
		4001
	],
	"modified": "2013-05-17 20:18:30.180130",
	"closed": true,
	"issue": 5798062
}