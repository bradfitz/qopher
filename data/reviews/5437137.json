{
	"description": "math: document special-cases behavior for Dim, Max and Min\n\nMax returns +Inf if x or y is +Inf; else it returns NaN if either x or y is NaN. Max(-0, -0) returns -0.\nMin returns -Inf if x or y is -Inf; else it returns NaN if either x or y is NaN. Min(+0, -0) returns -0.\nDim(+Inf, +Inf) = NaN, Dim(-Inf, -Inf) = NaN and Dim(NaN, anything) = NaN.\nAlso, change \"conditions\" to \"cases\" for Sin (missed it in previous CL).",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-12-07 19:52:13.768650",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I meant to add:\n\nOf the special cases I listed, which ones does SSE disagree on?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-05 23:16:38.670246",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Max/Min(x, y) = y if x and y are \u00b10 -- so, for example, Max(+0, -0) =\n-0, Min(-0, +0) = +0; but Max(-0, +0) = +0, etc.\nMax/Min(x, y) = y if x or y is NaN -- for example, Max(NaN, 0) = 0,\nMin(NaN, 0) = 0; but Max(0, NaN) = NaN, etc.\n\nSince Dim is not a single SSE instruction, we can rewrite the function\n(it'll be a little slower) and check for special cases.\n\n-- Charlie\n\n\nOn Mon, Dec 5, 2011 at 6:16 PM, Russ Cox <rsc@golang.org> wrote:\n> Sorry, I meant to add:\n>\n> Of the special cases I listed, which ones does SSE disagree on?\n>\n> Russ\n",
			"disapproval": false,
			"date": "2011-12-05 23:38:56.431645",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-06 03:43:13.639072",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ffedc748f48c ***\n\nmath: document special-cases behavior for Dim, Max and Min\n\nMax returns +Inf if x or y is +Inf; else it returns NaN if either x or y is NaN. Max(-0, -0) returns -0.\nMin returns -Inf if x or y is -Inf; else it returns NaN if either x or y is NaN. Min(+0, -0) returns -0.\nDim(+Inf, +Inf) = NaN, Dim(-Inf, -Inf) = NaN and Dim(NaN, anything) = NaN.\nAlso, change \"conditions\" to \"cases\" for Sin (missed it in previous CL).\n\nR=rsc, dave\nCC=golang-dev\nhttp://codereview.appspot.com/5437137\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-07 19:52:20.060966",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 5, 2011 at 17:02,  <cldorian@gmail.com> wrote:\n> I don't know. Does ARM even have have floating point MAX and MIN\n> instructions? The pure go code was written to behave as documented.\n\nI don't think we need to worry too much about the ARM.\n\n> There is no consensus, as far as I know, on whether a NaN should really\n> be a signal for a bad result or for a missing value. This leads to some\n> seemingly strange behavior -- Hypot(Inf, NaN) = Inf, for example.\n\nThat's not entirely true.  The Go library takes the (I believe common)\nview that if a function's result is uniquely determined by the non-NaN\ninputs, then that function can return a non-NaN result.  In this case,\nno matter what floating point value is substituted for the NaN in the\ncall to Hypot, you end up with sqrt(+Inf^2 + >=0) = +Inf.\nSimilarly, NaN is returned when there is not a unique value.\n\nBy that logic, I would expect\n    Max(x, y) = Max(y, x)\n    Max(+Inf, _) = +Inf\n    Max(x, NaN) = NaN\n    Max(+0, -0) = +0\n    Max(-0, -0) = -0\n\nand the reverse for Min.  Dim has more cases to work\nout but they all follow from the same logic.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-05 23:16:18.315143",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-07 01:29:56.162819",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-05 21:05:21.663940",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do these conditions also hold true on ARM? I'm not suggesting they don't, just wondering aloud if deferring to a particular silicon implementation isn't overly restrictive.\n\nSent from my iPhone\n\nOn 06/12/2011, at 8:05, cldorian@gmail.com wrote:\n\n> Reviewers: rsc, golang-dev_googlegroups.com,\n> \n> Message:\n> Hello rsc@golang.org, golang-dev@googlegroups.com (cc:\n> golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n> \n> \n> Description:\n> math: document special-cases behavior for Dim, Max and Min\n> \n> IEEE 754 is mute. Documented behavior follows Intel amd64 MAXSD and\n> MINSD instructions (where x and y are source and destination).\n> Also, change \"conditions\" to \"cases\" for Sin (missed it in previous CL).\n> \n> Please review this at http://codereview.appspot.com/5437137/\n> \n> Affected files:\n>  M src/pkg/math/all_test.go\n>  M src/pkg/math/dim.go\n>  M src/pkg/math/sin.go\n> \n> \n> Index: src/pkg/math/all_test.go\n> ===================================================================\n> --- a/src/pkg/math/all_test.go\n> +++ b/src/pkg/math/all_test.go\n> @@ -958,6 +958,67 @@\n>    NaN(),\n> }\n> \n> +var vffdimSC = [][2]float64{\n> +    {Inf(-1), Inf(-1)},\n> +    {Inf(-1), Inf(1)},\n> +    {Inf(-1), NaN()},\n> +    {Copysign(0, -1), 0},\n> +    {0, Copysign(0, -1)},\n> +    {Inf(1), Inf(-1)},\n> +    {Inf(1), Inf(1)},\n> +    {Inf(1), NaN()},\n> +    {NaN(), Inf(-1)},\n> +    {NaN(), Copysign(0, -1)},\n> +    {NaN(), 0},\n> +    {NaN(), Inf(1)},\n> +    {NaN(), NaN()},\n> +}\n> +var fdimSC = []float64{\n> +    0,\n> +    0,\n> +    0,\n> +    0,\n> +    0,\n> +    Inf(1),\n> +    0,\n> +    0,\n> +    0,\n> +    0,\n> +    0,\n> +    0,\n> +    0,\n> +}\n> +var fmaxSC = []float64{\n> +    Inf(-1),\n> +    Inf(1),\n> +    NaN(),\n> +    0,\n> +    Copysign(0, -1),\n> +    Inf(1),\n> +    Inf(1),\n> +    NaN(),\n> +    Inf(-1),\n> +    Copysign(0, -1),\n> +    0,\n> +    Inf(1),\n> +    NaN(),\n> +}\n> +var fminSC = []float64{\n> +    Inf(-1),\n> +    Inf(-1),\n> +    NaN(),\n> +    0,\n> +    Copysign(0, -1),\n> +    Inf(-1),\n> +    Inf(1),\n> +    NaN(),\n> +    Inf(-1),\n> +    Copysign(0, -1),\n> +    0,\n> +    Inf(1),\n> +    NaN(),\n> +}\n> +\n> var vffmodSC = [][2]float64{\n>    {Inf(-1), Inf(-1)},\n>    {Inf(-1), -Pi},\n> @@ -1875,6 +1936,11 @@\n>            t.Errorf(\"Dim(%g, %g) = %g, want %g\", vf[i], 0.0, f, fdim[i])\n>        }\n>    }\n> +    for i := 0; i < len(vffdimSC); i++ {\n> +        if f := Dim(vffdimSC[i][0], vffdimSC[i][1]); !alike(fdimSC[i], f) {\n> +            t.Errorf(\"Dim(%g, %g) = %g, want %g\", vffdimSC[i][0], vffdimSC[i][1], f, fdimSC[i])\n> +        }\n> +    }\n> }\n> \n> func TestFloor(t *testing.T) {\n> @@ -1896,6 +1962,11 @@\n>            t.Errorf(\"Max(%g, %g) = %g, want %g\", vf[i], ceil[i], f, ceil[i])\n>        }\n>    }\n> +    for i := 0; i < len(vffdimSC); i++ {\n> +        if f := Max(vffdimSC[i][0], vffdimSC[i][1]); !alike(fmaxSC[i], f) {\n> +            t.Errorf(\"Max(%g, %g) = %g, want %g\", vffdimSC[i][0], vffdimSC[i][1], f, fmaxSC[i])\n> +        }\n> +    }\n> }\n> \n> func TestMin(t *testing.T) {\n> @@ -1904,6 +1975,11 @@\n>            t.Errorf(\"Min(%g, %g) = %g, want %g\", vf[i], floor[i], f, floor[i])\n>        }\n>    }\n> +    for i := 0; i < len(vffdimSC); i++ {\n> +        if f := Min(vffdimSC[i][0], vffdimSC[i][1]); !alike(fminSC[i], f) {\n> +            t.Errorf(\"Min(%g, %g) = %g, want %g\", vffdimSC[i][0], vffdimSC[i][1], f, fminSC[i])\n> +        }\n> +    }\n> }\n> \n> func TestMod(t *testing.T) {\n> Index: src/pkg/math/dim.go\n> ===================================================================\n> --- a/src/pkg/math/dim.go\n> +++ b/src/pkg/math/dim.go\n> @@ -5,6 +5,9 @@\n> package math\n> \n> // Dim returns the maximum of x-y or 0.\n> +//\n> +// Special case:\n> +//    Dim(x, y) = 0 if x or y is NaN\n> func Dim(x, y float64) float64 {\n>    if x > y {\n>        return x - y\n> @@ -13,6 +16,10 @@\n> }\n> \n> // Max returns the larger of x or y.\n> +//\n> +// Special cases:\n> +//    Max(x, y) = y if x and y are \u00b10\n> +//    Max(x, y) = y if x or y is NaN\n> func Max(x, y float64) float64 {\n>    if x > y {\n>        return x\n> @@ -21,6 +28,10 @@\n> }\n> \n> // Min returns the smaller of x or y.\n> +//\n> +// Special cases:\n> +//    Min(x, y) = y if x and y are \u00b10\n> +//    Min(x, y) = y if x or y is NaN\n> func Min(x, y float64) float64 {\n>    if x < y {\n>        return x\n> Index: src/pkg/math/sin.go\n> ===================================================================\n> --- a/src/pkg/math/sin.go\n> +++ b/src/pkg/math/sin.go\n> @@ -166,7 +166,7 @@\n> \n> // Sin returns the sine of x.\n> //\n> -// Special conditions are:\n> +// Special cases are:\n> //    Sin(\u00b10) = \u00b10\n> //    Sin(\u00b1Inf) = NaN\n> //    Sin(NaN) = NaN\n> \n> \n",
			"disapproval": false,
			"date": "2011-12-05 21:17:53.486189",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That is the reasoning that IEEE 754 used for Hypot and it seems it\nshould be valid for Dim, Max and Min. I'll rework the functions.\nThanks for the input.\n\n-- Charlie\n\nOn Mon, Dec 5, 2011 at 6:16 PM, Russ Cox <rsc@golang.org> wrote:\n> On Mon, Dec 5, 2011 at 17:02, \u00a0<cldorian@gmail.com> wrote:\n>> I don't know. Does ARM even have have floating point MAX and MIN\n>> instructions? The pure go code was written to behave as documented.\n>\n> I don't think we need to worry too much about the ARM.\n>\n>> There is no consensus, as far as I know, on whether a NaN should really\n>> be a signal for a bad result or for a missing value. This leads to some\n>> seemingly strange behavior -- Hypot(Inf, NaN) = Inf, for example.\n>\n> That's not entirely true. \u00a0The Go library takes the (I believe common)\n> view that if a function's result is uniquely determined by the non-NaN\n> inputs, then that function can return a non-NaN result. \u00a0In this case,\n> no matter what floating point value is substituted for the NaN in the\n> call to Hypot, you end up with sqrt(+Inf^2 + >=0) = +Inf.\n> Similarly, NaN is returned when there is not a unique value.\n>\n> By that logic, I would expect\n> \u00a0 \u00a0Max(x, y) = Max(y, x)\n> \u00a0 \u00a0Max(+Inf, _) = +Inf\n> \u00a0 \u00a0Max(x, NaN) = NaN\n> \u00a0 \u00a0Max(+0, -0) = +0\n> \u00a0 \u00a0Max(-0, -0) = -0\n>\n> and the reverse for Min. \u00a0Dim has more cases to work\n> out but they all follow from the same logic.\n>\n> Russ\n",
			"disapproval": false,
			"date": "2011-12-05 23:26:16.170998",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the review.\n\nOn Wed, Dec 7, 2011 at 1:21 PM,  <rsc@golang.org> wrote:\n> looks good\n>\n> http://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim.go\n> File src/pkg/math/dim.go (right):\n>\n> http://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim.go#newcode22\n> src/pkg/math/dim.go:22: // \u00a0 \u00a0 \u00a0Max(\u00b10, \u22130) = +0\n> This is not completely clear to me. \u00a0How about\n>\n> // Max(x, +Inf) = Max(+Inf, x) = +Inf\n> // Max(x, NaN) = Max(NaN, x) = NaN\n> // Max(+0, \u00b10) = Max(\u00b10, +0) = +0\n> // Max(-0, -0) = -0\n>\n\nDone.\n\n> http://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim.go#newcode49\n> src/pkg/math/dim.go:49: // \u00a0 \u00a0 \u00a0Min(\u00b10, \u22130) = -0\n> Same rewrite.\n>\n\nDone.\n\n> http://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim_amd64.s\n> File src/pkg/math/dim_amd64.s (right):\n>\n> http://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim_amd64.s#newcode10\n> src/pkg/math/dim_amd64.s:10: TEXT \u00b7Dim(SB),7,$0\n> Have these stopped being faster?\n>\n\nThe assembly is still faster: Go is 7.5 ns/op; new asm is 5.5 ns/op;\nold asm (no special cases) was 3.5 ns/op.\n\n> http://codereview.appspot.com/5437137/\n",
			"disapproval": false,
			"date": "2011-12-07 19:55:31.874568",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't know. Does ARM even have have floating point MAX and MIN instructions? The pure go code was written to behave as documented.\n\nThere is no consensus, as far as I know, on whether a NaN should really be a signal for a bad result or for a missing value. This leads to some seemingly strange behavior -- Hypot(Inf, NaN) = Inf, for example. \n\nMy intent, in this CL, is to document the current special-cases behavior for Dim, Max and Min (I'm working to get rid of the BUG(rsc) in const.go). My justification is an appeal to authority -- if Intel does it, they probably had good reasons. In the future, we can always change it -- it's just software.\n\n-- Charlie\n\n\nOn 2011/12/05 21:17:53, dfc wrote:\n> Do these conditions also hold true on ARM? I'm not suggesting they don't, just\n> wondering aloud if deferring to a particular silicon implementation isn't overly\n> restrictive.\n>",
			"disapproval": false,
			"date": "2011-12-05 22:02:59.251165",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good\n\nhttp://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim.go\nFile src/pkg/math/dim.go (right):\n\nhttp://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim.go#newcode22\nsrc/pkg/math/dim.go:22: //\tMax(\u00b10, \u22130) = +0\nThis is not completely clear to me.  How about\n\n// Max(x, +Inf) = Max(+Inf, x) = +Inf\n// Max(x, NaN) = Max(NaN, x) = NaN\n// Max(+0, \u00b10) = Max(\u00b10, +0) = +0\n// Max(-0, -0) = -0\n\nhttp://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim.go#newcode49\nsrc/pkg/math/dim.go:49: //\tMin(\u00b10, \u22130) = -0\nSame rewrite.\n\nhttp://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim_amd64.s\nFile src/pkg/math/dim_amd64.s (right):\n\nhttp://codereview.appspot.com/5437137/diff/4003/src/pkg/math/dim_amd64.s#newcode10\nsrc/pkg/math/dim_amd64.s:10: TEXT \u00b7Dim(SB),7,$0\nHave these stopped being faster?",
			"disapproval": false,
			"date": "2011-12-07 18:21:00.800110",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-07 19:50:21.337915",
			"approval": false
		}
	],
	"owner_email": "cldorian@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Charlie Dorian",
	"subject": "code review 5437137: math: document special-cases behavior for Dim, Max and Min",
	"created": "2011-12-05 21:04:52.705219",
	"patchsets": [
		1,
		2001,
		4001,
		6002,
		4003,
		2003
	],
	"modified": "2011-12-07 20:02:44.507342",
	"closed": true,
	"issue": 5437137
}