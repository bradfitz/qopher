{
	"description": "encoding/json: fix type assertion in error path\n\nUpdate issue 4474.\nFixes issue 4222.\n\nNot all code calls panic(error), some code calls panic(string)",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"remyoudompheng@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-12-17 09:37:12.308820",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-15 11:16:46.363130",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think you should catch panic(string), issues 4222 and 4474 are programming errors in the package and should not be turned into errors that lose all the panic context.\n\nAlso, your new code loses the repanic on runtime.Error, and can lead to inscrutable errors like \"index out of range\" that are totally unhelpful (lost debugging abilities for stupid errors in user's UnmarshalJSON).",
			"disapproval": false,
			"date": "2012-12-15 11:48:35.992750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is too broad a fix. Let's fix the (apparently few) panics taking strings instead of panicking for everything.\n\nNote that the 'case error' in your switches covers case runtime.Error too, so this is squelching runtime.Errors that used to be panics.\n\nI only see one panic(\" in the tree that isn't unreachable:\nscanner.go:610: \t\tpanic(\"json: invalid use of scanner\")\n\nThe test cases in issues 4474 and 4222 are real bugs in the way json uses reflect: it shouldn't be asking reflect to do those things. We should fix those calls, not turn reflect's panics into returned errors.",
			"disapproval": false,
			"date": "2012-12-17 00:50:57.641550",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6938045: encoding/json: fix type assertion in error path",
	"created": "2012-12-13 11:29:03.717840",
	"patchsets": [
		1,
		2001,
		3,
		1002,
		5003,
		11001
	],
	"modified": "2012-12-17 09:37:16.168310",
	"closed": true,
	"issue": 6938045
}