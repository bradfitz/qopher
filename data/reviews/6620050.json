{
	"description": "runtime: update comment for the \"extern register\" variables g and m.",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"ality@pbrane.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's a bit more nuanced.\r\n\r\nFor x86 and amd64, extern registers are allocated\r\nby the compiler upwards from 0(GS). See:\r\n\r\n    cc/dcl.c:/^xdecl\r\n    6c/txt.c:/^exreg\r\n    6c/txt.c:/^naddr\r\n\r\nThe linker transforms these generic references\r\ninto OS-specific references. See:\r\n\r\n    6l/obj.c:/tlsoffset\r\n    6l/pass.c:/^patch\r\n\r\nYour new comment is wrong for Darwin, Windows, and Plan 9\r\n(essentially everything that isn't ELF). The assembly for\r\n64-bit Darwin would look something like:\r\n\r\nif(g)\r\n    mov  %gs:0x8a0,%rax\r\n\tcmp  %0x0,%rax\r\n\r\nif(m)\r\n    mov  %gs:0x8a8,%rax\r\n\tcmp  %0x0,%rax\r\n\r\nHope that helps.\r\n\r\nCheers,\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2012-10-05 17:54:32.174430",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Oct 5, 2012 1:17 PM, \"Nigel Tao\" <nigeltao@golang.org> wrote:\r\n> and the comment now says\r\n> [snip]\r\n>  * It may be an actual dedicated register such as R10, or a slot indexed\r\nby\r\n>  * a register such as 4(GS).\r\nthe details are still more subtle than this, there could be\r\ntwo indirections involved (and ld's possible rewrite just\r\ncomplicate it more).\r\nbut i can't find better ways to explain this, so lgtm,\r\nlet's wait for rsc.\r\n\r\ni suggest s/a register/a segment register/.\r\n",
			"disapproval": false,
			"date": "2012-10-05 05:39:38.811570",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: dave@cheney.net, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-05 01:59:56.786400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is correct, from 5g/gsubr.c ~ 308\r\n\r\n   308\tstatic\tint\tresvd[] =\r\n   309\t{\r\n   310\t\t9,\t// reserved for m\r\n   311\t\t10,\t// reserved for g\r\n   312\t};\r\n\r\nOn Fri, Oct 5, 2012 at 11:59 AM,  <nigeltao@golang.org> wrote:\r\n> Reviewers: rsc,\r\n>\r\n> Message:\r\n> Hello rsc@golang.org (cc: dave@cheney.net, golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> runtime: update comment for the \"extern register\" variables g and m.\r\n>\r\n> The locations were determined by disassembling (in gdb) the binaries\r\n> generated by 6g/8g. I don't know where in the C compiler they are\r\n> programatically determined.\r\n>\r\n>\r\n> on amd64, disassembling 6c code for \"if(g)\" and \"if(m)\" gives:\r\n>         mov    %fs:0xfffffffffffffff0,%rax\r\n>         cmp    $0x0,%rax\r\n> and\r\n>         mov    %fs:0xfffffffffffffff8,%rax\r\n>         cmp    $0x0,%rax\r\n>\r\n>\r\n> on 386, disassembling 8c code for \"if(g)\" and \"if(m)\" gives:\r\n>         mov    %gs:0x0,%eax\r\n>         mov    -0x8(%eax),%eax\r\n>         cmp    $0x0,%eax\r\n> and\r\n>         mov    %gs:0x0,%eax\r\n>         mov    -0x4(%eax),%eax\r\n>         cmp    $0x0,%eax\r\n>\r\n> I don't have an ARM system around to verify R10/R9. Dave Cheney, are\r\n> you able to verify this?\r\n>\r\n> Please review this at http://codereview.appspot.com/6620050/\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/runtime.h\r\n>\r\n>\r\n> Index: src/pkg/runtime/runtime.h\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/runtime.h\r\n> +++ b/src/pkg/runtime/runtime.h\r\n> @@ -84,17 +84,18 @@\r\n>  /*\r\n>   * per-cpu declaration.\r\n>   * \"extern register\" is a special storage class implemented by 6c, 8c, etc.\r\n> - * on machines with lots of registers, it allocates a register that will\r\n> not be\r\n> - * used in generated code.  on the x86, it allocates a slot indexed by a\r\n> - * segment register.\r\n>   *\r\n> - * amd64: allocated downwards from R15\r\n> - * x86: allocated upwards from 0(GS)\r\n> - * arm: allocated downwards from R10\r\n> + * On amd64 and x86, it allocates a slot indexed by a segment register.\r\n> + * On arm, it allocates a register that will not be used in generated code.\r\n>   *\r\n> - * every C file linked into a Go program must include runtime.h\r\n> - * so that the C compiler knows to avoid other uses of these registers.\r\n> - * the Go compilers know to avoid them.\r\n> + * On amd64: g is -16(FS) and m is -8(FS).\r\n> + * On x86:   g is  -8(GS) and m is -4(GS).\r\n> + * On arm:   g is     R10 and m is    R9.\r\n> + * TODO: verify arm registers.\r\n> + *\r\n> + * Every C file linked into a Go program must include runtime.h so that the\r\n> + * C compiler (6c, 8c, etc.) knows to avoid other uses of these registers.\r\n> + * The Go compiler (6g, 8g, etc.) knows to avoid them.\r\n>   */\r\n>  extern register        G*      g;\r\n>  extern register        M*      m;\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-05 02:09:48.069420",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 5 October 2012 14:43, minux <minux.ma@gmail.com> wrote:\r\n> i suggest we don't specify these details here.\r\n> because iirc, different OS use different segment register\r\n> and/or offset (the linker can rewrite these offset).\r\n\r\nOh, I see. Still, the previous comment \"amd64: allocated downwards\r\nfrom R15\" was misleading. I've updated the change description to just\r\nbe\r\n\r\nruntime: update comment for the \"extern register\" variables g and m.\r\n\r\nand the comment now says\r\n\r\n/*\r\n * Per-CPU declaration.\r\n *\r\n * \"extern register\" is a special storage class implemented by 6c, 8c, etc.\r\n * It may be an actual dedicated register such as R10, or a slot indexed by\r\n * a register such as 4(GS). The register and index used depends on the OS\r\n * and architecture: see zasmhdr in src/cmd/dist/buildruntime.c.\r\n *\r\n * Every C file linked into a Go program must include runtime.h so that the\r\n * C compiler (6c, 8c, etc.) knows to avoid other uses of these dedicated\r\n * registers. The Go compiler (6g, 8g, etc.) knows to avoid them.\r\n */\r\n\r\nWDYT?\r\n",
			"disapproval": false,
			"date": "2012-10-05 05:17:53.564800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6620050/diff/9002/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/6620050/diff/9002/src/pkg/runtime/runtime.h#newcode88\nsrc/pkg/runtime/runtime.h:88: * It may be an actual dedicated register such as R10, or a slot indexed by\n * On the ARM, it is an actual register; elsewhere it is a slot in thread-local storage\n * indexed by a segment register.\n *\n * Every C file...\n\nEven src/cmd/dist/buildruntime.c is not the full story. 0(GS) and 4(GS)/8(GS) are really even themselves pseudo-locations turned into real things by the linker. But let's not get into that here.\n\nhttps://codereview.appspot.com/6620050/diff/9002/src/pkg/runtime/runtime.h#newcode89\nsrc/pkg/runtime/runtime.h:89: * a register such as 4(GS). The register and index used depends on the OS\ns/register/segment register/",
			"disapproval": false,
			"date": "2012-10-06 21:59:41.637820",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i can't use rieltveld atm.\r\n\r\nOn Oct 5, 2012 9:59 AM, <nigeltao@golang.org> wrote:\r\n> - * the Go compilers know to avoid them.\r\n> + * On amd64: g is -16(FS) and m is -8(FS).\r\n> + * On x86:   g is  -8(GS) and m is -4(GS).\r\n> + * On arm:   g is     R10 and m is    R9.\r\ni suggest we don't specify these details here.\r\nbecause iirc, different OS use different segment register\r\nand/or offset (the linker can rewrite these offset).\r\n\r\nfor details, please refer to zasmhdr array in src/cmd/dist/buildruntime.c\r\nor src/pkg/runtime/zasm_$GOOS_$GOARCH.h.\r\n",
			"disapproval": false,
			"date": "2012-10-05 04:43:54.529300",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-10-12 08:06:44.369430",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2012-10-12 07:23:19.628160",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9ef1fd2b7e47 ***\n\nruntime: update comment for the \"extern register\" variables g and m.\n\nR=rsc, minux.ma, ality\nCC=dave, golang-dev\nhttp://codereview.appspot.com/6620050",
			"disapproval": false,
			"date": "2012-10-19 00:09:27.951650",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6620050: runtime: update comment for the \"extern register\" varia...",
	"created": "2012-10-05 01:59:24.628160",
	"patchsets": [
		1,
		2001,
		4002,
		7001,
		10001,
		9002,
		12001,
		15001
	],
	"modified": "2012-10-19 00:09:30.275200",
	"closed": true,
	"issue": 6620050
}