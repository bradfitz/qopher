{
	"description": "spec: define order of multiple assignment",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5240055/diff/9001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5240055/diff/9001/doc/go_spec.html#newcode3738\ndoc/go_spec.html:3738: <a href=\"#Order_of_evaluation\">the usual rules</a>.\n<a href=\"#Order_of_evaluation\">the usual rules of evaluation order</a>.\nor maybe\n\nare evaluated <href>in the usual order</a>\n\nand maybe\n\n... across the entire statement.\n\nthe \"and\" on line 3737 arguably implies an ordering itself.\nmaybe\ns/are evaluated/are all evaluated/ to clarify\n\nhttp://codereview.appspot.com/5240055/diff/9001/doc/go_spec.html#newcode3739\ndoc/go_spec.html:3739: Then the assignments are carried out in left-to-right order.\ns/Then/Second,/",
			"disapproval": false,
			"date": "2011-10-12 20:49:31.160203",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5240055/diff/9001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5240055/diff/9001/doc/go_spec.html#newcode2\ndoc/go_spec.html:2: <!-- subtitle Version of October 13, 2011 -->\nI guess we are submitting tomorrow :-)\n\nhttp://codereview.appspot.com/5240055/diff/9001/doc/go_spec.html#newcode3734\ndoc/go_spec.html:3734: First, the operands of <a href=\"#Indexes\">index expressions</a>,\nI think this is still a bit vague. Presumably, by operands of index expressions the \"index\" is meant, but technically, the syntax of an index expression doesn't have an \"Operand\" (only an Expression). Similarly for the others.\n\nIf I have:\n\na[f()] = g()\n\nf() and g() get evaluation from left to right. Say, i = f(). Is a[i] (the element address) evaluated before or after g() is called? (g may change the global variable a).\n\nDo we need the notion of an \"L-value\"? (I'd prefer not to, and I would call it a variable still). Or am I missing something?",
			"disapproval": false,
			"date": "2011-10-12 20:58:05.767490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-12 20:20:59.485833",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5240055/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5240055/diff/4001/doc/go_spec.html#newcode3734\ndoc/go_spec.html:3734: The expressions on the right and any sub-expressions on the left\nthis is the first appearance of the undefined term \"sub-expression\". you need a way to say this without using an undefined term. i don't know what it means, anyway:\n\nm[x] = f()\n\nwhat is the order of events if m is a map?",
			"disapproval": false,
			"date": "2011-10-12 20:23:54.498798",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5240055/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5240055/diff/4001/doc/go_spec.html#newcode2\ndoc/go_spec.html:2: <!-- subtitle Version of September 29, 2011 -->\nplease update the date\n\nhttp://codereview.appspot.com/5240055/diff/4001/doc/go_spec.html#newcode3736\ndoc/go_spec.html:3736: The assignments then proceed in left-to-right order.\nThe link to evaluation order is gone. I think we still need it, or some version of it.",
			"disapproval": false,
			"date": "2011-10-12 20:25:07.173041",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-12 20:35:00.679804",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Take 2:\n\n<p>\nIn the second form, the number of operands on the left must equal the number\nof expressions on the right, each of which must be single-valued, and the\n<i>n</i>th expression on the right is assigned to the <i>n</i>th\noperand on the left.  The assignment proceeds in two phases.\nFirst, the operands of <a href=\"#Indexes\">index expressions</a>,\n<a href=\"#Selectors\">selectors</a>, and\n<a href=\"#Address_operators\">pointer indirections</a> on the left\nand the expressions on the right are evaluated according to\n<a href=\"#Order_of_evaluation\">the usual rules</a>.\nThen the assignments are carried out in left-to-right order.\n</p>\n\n",
			"disapproval": false,
			"date": "2011-10-12 20:35:10.134664",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I think this is still a bit vague. Presumably, by operands of index\n> expressions the \"index\" is meant, but technically, the syntax of an\n> index expression doesn't have an \"Operand\" (only an Expression).\n> Similarly for the others.\n\nI meant for the operands of the index expression x[y] to be both x and y.\nI'm happy to take suggested alternate terminology.\n\n> If I have:\n> \n> a[f()] = g()\n> \n> f() and g() get evaluation from left to right. Say, i = f(). Is a[i]\n> (the element address) evaluated before or after g() is called? (g may\n> change the global variable a).\n\nThen the three things a, f(), and g() are evaluated before any\nassignments take place, and the ordering of those happen according\nto the usual rules.  The usual rules do not specify whether a is\nevaluated before or after the calls to f() and g(), and I wasn't\ntrying to specify that here.\n \n> Do we need the notion of an \"L-value\"? (I'd prefer not to, and I would\n> call it a variable still). Or am I missing something?\n\nI am not sure that l-value makes sense here.  In C it does,\nbecause the l-value is logically the location where the\nvalue will be stored.  For a map index operation, the\nlocation is a much murkier concept.  What does happen is\nthat if you have m[x], m[y] = z, w for arbitrary expressions\nm, x, y, z, w, then m, x, y, z, and w are all evaluated\n(following the usual rules) before any assignments occur.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-12 21:06:42.132515",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Done.\n\n<p>\nIn the second form, the number of operands on the left must equal the number\nof expressions on the right, each of which must be single-valued, and the\n<i>n</i>th expression on the right is assigned to the <i>n</i>th\noperand on the left.  The assignment proceeds in two phases.\nFirst, the operands of <a href=\"#Indexes\">index expressions</a>,\n<a href=\"#Selectors\">selectors</a>, and\n<a href=\"#Address_operators\">pointer indirections</a> on the left\nand the expressions on the right are all\n<a href=\"#Order_of_evaluation\">evaluated in the usual order</a>.\nSecond, the assignments are carried out in left-to-right order.\n</p>\n\n",
			"disapproval": false,
			"date": "2011-10-12 20:52:44.034779",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "+1\n\nand then LGTM\n\nOn Wed, Oct 12, 2011 at 4:54 PM,  <r@golang.org> wrote:\n> it would be nice to be clear that in\n>\n> f()[g()] = h()\n>\n> that if f() is a slice and g() is an index out of range, all functions\n> are called before the panic. we know that's what we mean, but it doesn't\n> quite say it. maybe all that's needed is that example.\n>\n> http://codereview.appspot.com/5240055/\n>\n",
			"disapproval": false,
			"date": "2011-10-12 23:55:33.953181",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-12 20:52:52.426073",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM but iant and gri should weigh in, at least",
			"disapproval": false,
			"date": "2011-10-12 20:55:42.148418",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "it would be nice to be clear that in\n\nf()[g()] = h()\n\nthat if f() is a slice and g() is an index out of range, all functions are called before the panic. we know that's what we mean, but it doesn't quite say it. maybe all that's needed is that example.",
			"disapproval": false,
			"date": "2011-10-12 23:54:55.834162",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM for now\nit would be nice to find a cleaner presentation but this will do",
			"disapproval": false,
			"date": "2011-10-13 18:26:45.596781",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I think the checks being delayed is implied by the fact that\nthey are part of the assignment.  They are not listed in the things\nthat happen in the first phase.\n\nI tried for a while but could not come up with a concise way to\nadd an explicit note.  However, I added these examples:\n\nx[1], x[3] = 4, 5 // set x[1] = 4, then panic setting x[3] = 5.\n\ntype Point struct { x, y int }\nvar p *Point\nx[2], p.x = 6, 7  // set x[2] = 6, then panic setting p.x = 7\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-13 16:02:06.636623",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI think the examples make it clear enough for now.",
			"disapproval": false,
			"date": "2011-10-13 18:16:58.561790",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2298c321b088 ***\n\nspec: define order of multiple assignment\n\nR=golang-dev, r, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5240055",
			"disapproval": false,
			"date": "2011-10-13 19:44:25.462460",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5240055: spec: define order of multiple assignment",
	"created": "2011-10-12 20:19:38.659991",
	"patchsets": [
		1,
		2001,
		4001,
		9001,
		15001,
		20001,
		24001
	],
	"modified": "2011-10-13 19:44:26.573544",
	"closed": true,
	"issue": 5240055
}