{
	"description": "Add Count, Cycle, ZipWith, GroupBy, Repeat, RepeatTimes, Unique to exp/iterable.\n\nModify iterFunc to take chan<- instead of just chan.",
	"cc": [
		"rsc@golang.org",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/160064/diff/8/9\nFile src/pkg/exp/iterable/iterable.go (right):\n\nhttp://codereview.appspot.com/160064/diff/8/9#newcode149\nsrc/pkg/exp/iterable/iterable.go:149: func Take(iter Iterable, n int) Iterable\t{ return Slice(iter, 0, n) }\nNice.\n\nhttp://codereview.appspot.com/160064/diff/8/9#newcode228\nsrc/pkg/exp/iterable/iterable.go:228: // Zip returns a stream of []interface{} consisting of the next element from each input Iterable.\ns/a stream/an Iterable/\n\nhttp://codereview.appspot.com/160064/diff/8/9#newcode257\nsrc/pkg/exp/iterable/iterable.go:257: fv, ok := reflect.NewValue(f).(*reflect.FuncValue);\nIt feels like a shame to bring in the reflect package to this package that is otherwise only dependent on some container packages.\n\nHow bad would it make this to do the same transformation with f as with args? If f is a func([]interface{}) then the caller can unpack it however they want easily enough.\n\nhttp://codereview.appspot.com/160064/diff/8/9#newcode327\nsrc/pkg/exp/iterable/iterable.go:327: return iterFunc(func(ch chan<- interface{}) {\nThis is equivalent to this, right?\n  return Cycle(iterFunc(func(ch chan<- interface{}) {\n    ch <- v\n  }\n\nProbably unnecessary, though.\n\nhttp://codereview.appspot.com/160064/diff/8/9#newcode360\nsrc/pkg/exp/iterable/iterable.go:360: if !reflect.DeepEqual(curkey, kv) {\nThis is another unfortunate reflect dependency. How would you feel about passing in a cmp function (takes two interface{}, returns bool)?",
			"disapproval": false,
			"date": "2009-11-25 23:18:53.403497",
			"approval": false
		},
		{
			"sender": "michael.elkins@gmail.com",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, dsymonds1,\n\nI'd like you to review the following change.",
			"disapproval": false,
			"date": "2009-11-25 04:25:07.330860",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/160064/diff/1001/1002\nFile src/pkg/exp/iterable/iterable.go (right):\n\nhttp://codereview.appspot.com/160064/diff/1001/1002#newcode214\nsrc/pkg/exp/iterable/iterable.go:214: // Count returns consecutive integers starting with n.\nThis seems like it could be generalised, and perhaps should not be a specific function itself. What about just a simple NaturalNumbers type to do this? It's what integerStream is in the test file, and users could just use Drop to skip the first few. Alternatively, expand integerStream to do this.\n\nhttp://codereview.appspot.com/160064/diff/1001/1002#newcode235\nsrc/pkg/exp/iterable/iterable.go:235: func Chain(args ...) Iterable {\nHow much of a loss would it be if the argument was []Iterable instead? That would simplify this function's code and make it catch type errors at compile time.\n\nhttp://codereview.appspot.com/160064/diff/1001/1002#newcode251\nsrc/pkg/exp/iterable/iterable.go:251: func ZipWith(f interface{}, args ...) Iterable {\nAgain, could this arg be []Iterable?\n\nAlso, this one feels like it could just be an adapter to be used with a generic Zip implementation.\n\nhttp://codereview.appspot.com/160064/diff/1001/1002#newcode310\nsrc/pkg/exp/iterable/iterable.go:310: // Slice returns an Iterable that contains elements in the range specified offset from the head of the input Iterable.\nCan Take be rewritten to call this?\n\nhttp://codereview.appspot.com/160064/diff/1001/1002#newcode339\nsrc/pkg/exp/iterable/iterable.go:339: // RepeatTimes generates a stream of n copies of v.\nSlice + Repeat?",
			"disapproval": false,
			"date": "2009-11-25 04:51:39.235183",
			"approval": false
		},
		{
			"sender": "michael.elkins@gmail.com",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\nOn 2009/11/25 04:51:39, dsymonds1 wrote:\n> http://codereview.appspot.com/160064/diff/1001/1002#newcode214\n> src/pkg/exp/iterable/iterable.go:214: // Count returns consecutive integers\n> starting with n.\n> This seems like it could be generalised, and perhaps should not be a specific\n> function itself. What about just a simple NaturalNumbers type to do this? It's\n> what integerStream is in the test file, and users could just use Drop to skip\n> the first few. Alternatively, expand integerStream to do this.\n\nI think this sounds like a good idea.  I will play around with it a bit.\n\n> http://codereview.appspot.com/160064/diff/1001/1002#newcode235\n> src/pkg/exp/iterable/iterable.go:235: func Chain(args ...) Iterable {\n> How much of a loss would it be if the argument was []Iterable instead? That\n> would simplify this function's code and make it catch type errors at compile\n> time.\n\nUpdated.  This works great.\n\n> http://codereview.appspot.com/160064/diff/1001/1002#newcode251\n> src/pkg/exp/iterable/iterable.go:251: func ZipWith(f interface{}, args ...)\n> Iterable {\n> Again, could this arg be []Iterable?\n\nDitto.\n\n> Also, this one feels like it could just be an adapter to be used with a generic\n> Zip implementation.\n\nYes.  I broke the function up into Zip() and Apply() and just made ZipWith() a\nMap() operation.\n\n> http://codereview.appspot.com/160064/diff/1001/1002#newcode310\n> src/pkg/exp/iterable/iterable.go:310: // Slice returns an Iterable that contains\n> elements in the range specified offset from the head of the input Iterable.\n> Can Take be rewritten to call this?\n\nDone.\n\n> http://codereview.appspot.com/160064/diff/1001/1002#newcode339\n> src/pkg/exp/iterable/iterable.go:339: // RepeatTimes generates a stream of n\n> copies of v.\n> Slice + Repeat?\n\nDone.\n\nI also rewrote Unique() to Map() over GroupBy() instead of an explicit loop.",
			"disapproval": false,
			"date": "2009-11-25 06:01:44.739621",
			"approval": false
		},
		{
			"sender": "michael.elkins@gmail.com",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2009/11/25 23:18:53, dsymonds1 wrote:\n> http://codereview.appspot.com/160064/diff/8/9#newcode257\n> src/pkg/exp/iterable/iterable.go:257: fv, ok :=\n> reflect.NewValue(f).(*reflect.FuncValue);\n> It feels like a shame to bring in the reflect package to this package that is\n> otherwise only dependent on some container packages.\n> \n> How bad would it make this to do the same transformation with f as with args? If\n> f is a func([]interface{}) then the caller can unpack it however they want\n> easily enough.\n\nWithout using reflection, the better way then is to just provide a ZipWith and ZipWith3 that take functions with 2 or 3 arguments, respectively.  This makes the user code uglier (see iterable_test.go) but you do get compile time errors instead of runtime.\n\nDisadvantges:\n- user function can only return a single value\n- user functions must take interface{} as args and use lots of type assertions\n\n> http://codereview.appspot.com/160064/diff/8/9#newcode360\n> src/pkg/exp/iterable/iterable.go:360: if !reflect.DeepEqual(curkey, kv) {\n> This is another unfortunate reflect dependency. How would you feel about passing\n> in a cmp function (takes two interface{}, returns bool)?\n\nI chose an alternative, which is to create a Key interface that provides two functions: Compute and Equal.\n\nThis also has the unfortunate effect of creating lots of boilerplate in the user code since it will be necessary to provide identity functions for each type in order to use the Unique() function.\n\nOther changes:\n- Removed Count()",
			"disapproval": false,
			"date": "2009-11-26 04:54:15.877726",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "A few comments.\n\nhttp://codereview.appspot.com/160064/diff/2002/2003\nFile src/pkg/exp/iterable/iterable.go (right):\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode206\nsrc/pkg/exp/iterable/iterable.go:206: // Chain returns an Iterable that concatentates all values from the specified Iterables.\nIs there a reason this is called Chain instead of Concat?\n(Is Chain a standard name?)\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode222\nsrc/pkg/exp/iterable/iterable.go:222: // handle case where there are zero args\ncomment only restates the next line (if len(args) == 0).\ncan delete comment.\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode243\nsrc/pkg/exp/iterable/iterable.go:243: // ZipWith returns an Iterable containing the result of executing f using arguments read from a and b.\nMaybe ZipWith and ZipWith3 should be rolled into a single\n\nfunc ZipWith(f func([]interface{}), []Iterable) Iterable\n\n?\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode259\nsrc/pkg/exp/iterable/iterable.go:259: // Slice returns an Iterable that contains elements in the range specified offset from the head of the input Iterable.\n// Slice returns an Iterable that contains the elements from iter\n// with indexes in [start, stop).\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode263\nsrc/pkg/exp/iterable/iterable.go:263: if start < 0 || stop < 0 || stop <= start {\t// require a positive, non-zero distance\nI think this can go away.\nThe tests below work without it,\nand it allows writing\n\nSlice(iter, 100, 100)\n\nto get an iterable that closes only\nafter the original iterable has produced\n100 elements.\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode290\nsrc/pkg/exp/iterable/iterable.go:290: return Slice(Repeat(v), 0, n)\nUsing Repeat this way generates a garbage goroutine\nthat will never be collected.  It would probably be better\nto spend the extra two lines of code and write the loop.\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode300\nsrc/pkg/exp/iterable/iterable.go:300: type Key interface {\ntype Grouper interface {\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode302\nsrc/pkg/exp/iterable/iterable.go:302: Compute(interface{}) interface{};\ns/Compute/Key/",
			"disapproval": false,
			"date": "2009-11-30 00:14:12.619009",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": ">> type Grouper interface {\n>\n> That's a better name, but I still think just passing in two functions\n> (or a struct with two function fields) would be simpler.\n\nLet's leave it at Grouper for now and see.\nPassing in multiple functions gets heavy pretty easily.\n",
			"disapproval": false,
			"date": "2009-11-30 01:07:54.926291",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nLooks fine overall. Over to rsc.\n\nhttp://codereview.appspot.com/160064/diff/2002/2003\nFile src/pkg/exp/iterable/iterable.go (right):\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode218\nsrc/pkg/exp/iterable/iterable.go:218: // Zip returns an Iterable of []interface{} consisting of the next element from each input Iterable.\nAdd a comment about the behaviour with Iterables of different lengths.\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode244\nsrc/pkg/exp/iterable/iterable.go:244: func ZipWith(f func(c, d interface{}) interface{}, a, b Iterable) Iterable {\nFor consistency I think this should be ZipWith2.\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode299\nsrc/pkg/exp/iterable/iterable.go:299: // Key defines the interface required by the GroupBy function.\nThis isn't really a \"Key\", per se. I can't think of a better name off-hand (perhaps rsc will have a good idea).\n\nI'm not sure an interface is all that useful here, either. What kind of objects would implement these stateless methods? What about just a struct here, since it's so easy to write struct literals in Go?",
			"disapproval": false,
			"date": "2009-11-26 23:40:50.489726",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/160064/diff/2002/2003\nFile src/pkg/exp/iterable/iterable.go (right):\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode206\nsrc/pkg/exp/iterable/iterable.go:206: // Chain returns an Iterable that concatentates all values from the specified Iterables.\nOn 2009/11/30 00:14:12, rsc wrote:\n> Is there a reason this is called Chain instead of Concat?\n> (Is Chain a standard name?)\n\nChain is pretty standard (think function chaining).\n\nhttp://codereview.appspot.com/160064/diff/2002/2003#newcode300\nsrc/pkg/exp/iterable/iterable.go:300: type Key interface {\nOn 2009/11/30 00:14:12, rsc wrote:\n> type Grouper interface {\n\nThat's a better name, but I still think just passing in two functions (or a struct with two function fields) would be simpler.",
			"disapproval": false,
			"date": "2009-11-30 00:54:29.866573",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "is this CL active?",
			"disapproval": false,
			"date": "2009-12-02 04:34:26.223699",
			"approval": false
		},
		{
			"sender": "michael.elkins@gmail.com",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2009/11/30 00:14:12, rsc wrote:\n> http://codereview.appspot.com/160064/diff/2002/2003#newcode243\n> src/pkg/exp/iterable/iterable.go:243: // ZipWith returns an Iterable containing\n> the result of executing f using arguments read from a and b.\n> Maybe ZipWith and ZipWith3 should be rolled into a single\n> \n> func ZipWith(f func([]interface{}), []Iterable) Iterable\n> \n> ?\n\nDave also made this suggestion.  However, I prefer having separate functions for the 2- and 3-argument cases so that a compiler error is generated if the passed function does not match the number of Iterables.  Otherwise it has to be a runtime error.\n\nI updated the patch with all the other suggestions.  Awaiting final word on the ZipWith issue.\n\nme",
			"disapproval": false,
			"date": "2009-12-02 04:36:45.306775",
			"approval": false
		},
		{
			"sender": "michael.elkins@gmail.com",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2009/12/02 04:34:26, r wrote:\n> is this CL active?\n\nHeh, missed it by >< that much.",
			"disapproval": false,
			"date": "2009-12-02 04:37:23.042051",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "looks good to me.\nplease make the one fix below \nand hg upload\n(and let us know)\nand i will submit it.\n\nhttp://codereview.appspot.com/160064/diff/4001/4002\nFile src/pkg/exp/iterable/iterable.go (right):\n\nhttp://codereview.appspot.com/160064/diff/4001/4002#newcode219\nsrc/pkg/exp/iterable/iterable.go:219: // Terminates when the end of the shortest Iterable is reached.\n// The length of the returned Iterable is the minimum\n// of the lengths of the input Iterables.",
			"disapproval": false,
			"date": "2009-12-03 21:00:18.303998",
			"approval": false
		},
		{
			"sender": "michael.elkins@gmail.com",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Updated comment for Zip.  PTAL.",
			"disapproval": false,
			"date": "2009-12-04 02:43:43.669364",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nthanks",
			"disapproval": false,
			"date": "2009-12-04 03:57:41.871613",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"michael.elkins@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=db8f28e4e8ac ***\n\nAdd Count, Cycle, ZipWith, GroupBy, Repeat, RepeatTimes, Unique to exp/iterable.\n\nModify iterFunc to take chan<- instead of just chan.\n\nR=rsc, dsymonds1\nCC=golang-dev, r\nhttp://codereview.appspot.com/160064\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2009-12-04 04:03:10.812415",
			"approval": false
		}
	],
	"owner_email": "michael.elkins@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "sigpipe",
	"subject": "code review 160064: Add Count, Cycle, ZipWith, GroupBy, Repeat, RepeatTimes...",
	"created": "2009-11-25 04:23:42.906036",
	"patchsets": [
		1,
		1001,
		8,
		2002,
		4001,
		6003
	],
	"modified": "2009-12-04 04:03:10.812415",
	"closed": false,
	"issue": 160064
}