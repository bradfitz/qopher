{
	"description": "go.crypto/ssh: fix locking and corruption issues with server.\nFixes issue 3204.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"agl@golang.org"
	],
	"messages": [
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-01 19:32:53.290279",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-03-31 21:52:12.976383",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I should talk to more people before mailing out a change set.  After writing out what didn't work, I realized what I could do to make it behave correctly.\n\nAs far as I know, this should take care of all of the known issues, as well as the two I listed below.  Sorry for all the noise in the meantime.\n\nRegarding the defaultWindowSize: currently set at 32768 byte, I noticed the openssh client has their's at ~2M byte.  Later maybe want a server option to set the window size?\n\nOn 2012/04/01 15:39:51, kardia wrote:\n> I would normally be ready to back you on this.  However, in this case I wasn't\n> adjusting the existing code; I rewrote the interface function by function, on\n> occasion taking snippets from the existing code.  I couldn't get the existing\n> code to fully work by just changing it.  So please ignore the delta and treat\n> this as new code (which it is).\n> \n> A few known issues here:\n> * We are adjusting the window every time we read.  For large batch sessions,\n> this could ok be but not optimal. For terminal sessions this is less ideal.\n> Attempts to fix this have not been met with success so far. This should be\n> addressed in a followup CL.\n> \n> * The defaultWindowSize const can be adjusted up to ~200000, but values greater\n> then that causes it to stop functioning correctly.  This is less of a critical\n> issue, but I think it should still be addressed.  This leads me to believe\n> something is still not quite right.\n> \n> On 2012/04/01 07:34:10, dfc wrote:\n> > Hello,\n> > \n> > Thank you for tackling this. The CL you have submitted is very large and it\n> > looks like it combines some source cleanups with some additions which is hard\n> > for me to follow. Could I encourage you to submit a cleanup CL first\n> (reordering\n> > functions, theirId -> remoteId), which will make this more complicated change\n> > easier to grok.\n> > \n> > Cheers\n> > \n> > Dave",
			"disapproval": false,
			"date": "2012-04-01 19:40:38.951724",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello again,\n\nSorry to be difficult. Could you please hg mail your CL again against the latest checkout.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-04-04 09:52:43.824228",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-04 15:03:12.359316",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-01 19:32:32.590850",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-31 22:10:01.301182",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nThank you for tackling this. The CL you have submitted is very large and it looks like it combines some source cleanups with some additions which is hard for me to follow. Could I encourage you to submit a cleanup CL first (reordering functions, theirId -> remoteId), which will make this more complicated change easier to grok.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-04-01 07:34:10.232203",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-01 15:30:08.299678",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would normally be ready to back you on this.  However, in this case I wasn't adjusting the existing code; I rewrote the interface function by function, on occasion taking snippets from the existing code.  I couldn't get the existing code to fully work by just changing it.  So please ignore the delta and treat this as new code (which it is).\n\nA few known issues here:\n* We are adjusting the window every time we read.  For large batch sessions, this could ok be but not optimal. For terminal sessions this is less ideal. Attempts to fix this have not been met with success so far. This should be addressed in a followup CL.\n\n* The defaultWindowSize const can be adjusted up to ~200000, but values greater then that causes it to stop functioning correctly.  This is less of a critical issue, but I think it should still be addressed.  This leads me to believe something is still not quite right.\n\nOn 2012/04/01 07:34:10, dfc wrote:\n> Hello,\n> \n> Thank you for tackling this. The CL you have submitted is very large and it\n> looks like it combines some source cleanups with some additions which is hard\n> for me to follow. Could I encourage you to submit a cleanup CL first (reordering\n> functions, theirId -> remoteId), which will make this more complicated change\n> easier to grok.\n> \n> Cheers\n> \n> Dave",
			"disapproval": false,
			"date": "2012-04-01 15:39:51.310343",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-31 22:10:17.910340",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-08 18:05:44.400426",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Re: myId, theirId, peersId, localId, remoteId, etc, etc. You make a good case that this needs to be rationalised. The original myId / peersId came from the RFC message format. Would anyone like to take a crack at submitting a CL that standardises on one pair throughout the package? I'm happy to tackle it if there is interest.",
			"disapproval": false,
			"date": "2012-04-09 01:51:23.847022",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/09 01:51:23, dfc wrote:\n> Re: myId, theirId, peersId, localId, remoteId, etc, etc. You make a good case\n> that this needs to be rationalised. The original myId / peersId came from the\n> RFC message format. Would anyone like to take a crack at submitting a CL that\n> standardises on one pair throughout the package? I'm happy to tackle it if there\n> is interest.\n\nI thinks standardizing on verbs would be nice.  I skimmed through the RFCs, didn't see my/peer verbs, I think it used recipient/sender, but I don't think that's general enough.  I like local/peer or local/remote myself. Regardless of what verbs are decided on, I think it's a good idea.",
			"disapproval": false,
			"date": "2012-04-09 03:20:56.695019",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-08 18:05:02.627106",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi, thank you for tackling this. I have a few comments below but I'd like to raise these two points.\n\n1. The circular buffer does a lot of copying, and ends up holding a large internal buffer while equally large buffers are passed in and out. I believe (I will confirm) that the buffer returned by transport.ReadPacket are not shared by anyone else, so it should be safe to construct a linked list of buffers rather than copying. Do you think this approach is worth investigating ?\n\n2. Referring to the comment on the other ssh CL, I would love to see more code shared between the client and server. It irks me that they are essentially separate implementations that share the same package.\n\nhttp://codereview.appspot.com/5970056/diff/4006/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/4006/ssh/channel.go#newcode257\nssh/channel.go:257: err := c.serverConn.writePacket(marshal(msgChannelOpenConfirm, confirm))\nreturn c.serverConn.writePacket(marshal(msgChannelOpenConfirm, confirm))\n\nhttp://codereview.appspot.com/5970056/diff/9002/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/9002/ssh/common.go#newcode281\nssh/common.go:281: \nMaybe just rename this buffer, go style encourages shorter names for unexported types.\n\nhttp://codereview.appspot.com/5970056/diff/9002/ssh/common.go#newcode284\nssh/common.go:284: lock         *sync.Mutex\nlock sync.Mutex, the zero value is usable without initialisation\n\nhttp://codereview.appspot.com/5970056/diff/9002/ssh/common.go#newcode291\nssh/common.go:291: lock:   new(sync.Mutex),\nDrop, see above",
			"disapproval": false,
			"date": "2012-04-09 01:32:14.321897",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-09 03:00:00.023695",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/09 01:32:14, dfc wrote:\n> Hi, thank you for tackling this. I have a few comments below but I'd like to\n> raise these two points.\n> \n> 1. The circular buffer does a lot of copying, and ends up holding a large\n> internal buffer while equally large buffers are passed in and out. I believe (I\n> will confirm) that the buffer returned by transport.ReadPacket are not shared by\n> anyone else, so it should be safe to construct a linked list of buffers rather\n> than copying. Do you think this approach is worth investigating ?\n\nYes, I think this is worth investigating.  From initial look, it doesn't appear to modify the packet.  But it might be worth documenting this reliance in transport and server.\n\nIn prep for this (possible) change, I removed buffer.Length and buffer.Free as they were not being used externally and made less sense in that context.\n\n> 2. Referring to the comment on the other ssh CL, I would love to see more code\n> shared between the client and server. It irks me that they are essentially\n> separate implementations that share the same package.\n> \n> http://codereview.appspot.com/5970056/diff/4006/ssh/channel.go\n> File ssh/channel.go (right):\n> \n> http://codereview.appspot.com/5970056/diff/4006/ssh/channel.go#newcode257\n> ssh/channel.go:257: err :=\n> c.serverConn.writePacket(marshal(msgChannelOpenConfirm, confirm))\n> return c.serverConn.writePacket(marshal(msgChannelOpenConfirm, confirm))\n\nDone.\n\n> http://codereview.appspot.com/5970056/diff/9002/ssh/common.go\n> File ssh/common.go (right):\n> \n> http://codereview.appspot.com/5970056/diff/9002/ssh/common.go#newcode281\n> ssh/common.go:281: \n> Maybe just rename this buffer, go style encourages shorter names for unexported\n> types.\n\nDone.\n\n> http://codereview.appspot.com/5970056/diff/9002/ssh/common.go#newcode284\n> ssh/common.go:284: lock         *sync.Mutex\n> lock sync.Mutex, the zero value is usable without initialisation\n> \n> http://codereview.appspot.com/5970056/diff/9002/ssh/common.go#newcode291\n> ssh/common.go:291: lock:   new(sync.Mutex),\n> Drop, see above\n\nDone.",
			"disapproval": false,
			"date": "2012-04-09 02:59:28.485973",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-11 07:21:21.129864",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the delay, I have some time this evening to review this CL. \n\nOn 11/04/2012, at 17:21, kardianos@gmail.com wrote:\n\n> Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org,\n> golang-dev@googlegroups.com),\n> \n> Please take another look.\n> \n> \n> http://codereview.appspot.com/5970056/\n",
			"disapproval": false,
			"date": "2012-04-11 07:29:53.647260",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-15 20:07:58.713161",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-14 15:07:59.389267",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think there is any locking order in the code. I just modified the CL to comment on what each lock protects.\n\nRegarding the current ssh channel code. In some situations it would lock and in some situations it would corrupt the data, so it may be more then just locking issues, unless the locking issues were corrupting the data. I did spend several weeks attempting to fix these issues, but each time not quite fixing it all the way.\n\nI'm not convinced all the current locking and waiting mechanisms are needed in this CL, but it appears to work and fixed my immediate need in a production system (OpenSSH and PUTTY clients).\n\nI don't think I will be able to fix the existing code, as I have already tried that without success. But let me know if this CL is useful or could be improved. If someone does work on the existing code, make sure you use the server_test.go in this CL as a test, also varying the defautlWindowSize const, as that can also help bring out problems.\n\n\nOn 2012/04/15 15:50:59, agl1 wrote:\n> This throws a lock of locking into the code without comments about what is\n> protecting what, nor the locking order.\n> \n> I can well believe that we have races if the server is reading and writing\n> concurrently. But I think it would be much more helpful if you point point out\n> the races (i.e. theirWindow looks like a real one), and they could be addressed\n> more cleanly.",
			"disapproval": false,
			"date": "2012-04-15 20:23:59.631549",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nI'm sorry it has taken so long to review this change. Could you please sync it against the latest commit and mail again.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-04-15 11:31:29.079099",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-15 15:38:41.690043",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This throws a lock of locking into the code without comments about what is protecting what, nor the locking order.\n\nI can well believe that we have races if the server is reading and writing concurrently. But I think it would be much more helpful if you point point out the races (i.e. theirWindow looks like a real one), and they could be addressed more cleanly.",
			"disapproval": false,
			"date": "2012-04-15 15:50:59.861734",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5970056/diff/31002/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/channel.go#newcode245\nssh/channel.go:245: c.windowLock.RLock()\nNo, just wasn't paying attention. Thanks.\n\nOn 2012/04/18 06:12:58, dfc wrote:\n> c.windowLock was unlocked the line above, is this to give other writers a chance\n> to run ?\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/common.go#newcode294\nssh/common.go:294: func (c *buffer) Write(data []byte) (n int, err error) {\nNo, it doesn't need to. I matched it because I wanted to verify the amount written anyway (see bottom if). Removed it for now.\n\nOn 2012/04/18 06:12:58, dfc wrote:\n> Does Write need to match the io.Writer contract ? It looks like n is either\n> len(data) or and 0 and an error. The only place that calls\n> incomingDataBuffer.Write discards the value of n anyway.\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/common.go#newcode343\nssh/common.go:343: }\nDone.\n\nOn 2012/04/18 06:12:58, dfc wrote:\n> Fill only appears to be used as a check to see if there is data available, ie,\n> the only check is \n> \n>         bufferFill := c.incomingDataBuffer.Fill()\n>         if bufferFill == 0 { ... }\n> \n> Could this be rewritten as a boolean, something like\n>  \n>         if c.incomingDataBuffer.IsEmpty()\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server.go\nFile ssh/server.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server.go#newcode557\nssh/server.go:557: c.incomingDataBuffer = newBuffer(int(defaultWindowSize))\nDone.\n\nOn 2012/04/18 06:12:58, dfc wrote:\n> defaultWindowSize is an ideal constant, the int conversion is unnecessary here.\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go\nFile ssh/server_test.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go#newcode188\nssh/server_test.go:188: //config.PublicKeyCallback = keyAuth\nDone.\n\nOn 2012/04/18 06:12:58, dfc wrote:\n> drop\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go#newcode245\nssh/server_test.go:245: for {\nWas there to handle \"exec\" or \"shell\" msgs on other clients, but as we are using internal client, not needed. Removed.\n\nOn 2012/04/18 06:12:58, dfc wrote:\n> I took this bit out and the test appeared to pass anyway, I'm not sure what it\n> is trying to do.",
			"disapproval": false,
			"date": "2012-04-18 07:10:26.598323",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nThank you for this CL, sorry it has taken so long to get through it. Some general comments.\n\n* window size, there is a scary amount of locking going on inside channel.write. Is it possible to borrow the window type from client.go (move it into common.go) to encapsulate some of that locking.\n\n* incomingDataBuffer. Last year I write this, http://codereview.appspot.com/5306079/, which is essentially a buffered io.Reader, io.Writer pair. Something like this might encapsulate the locking going on in read and write.\n\nI don't think I have a good understanding on what is going on inside channel.{read,write} yet.\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/channel.go#newcode245\nssh/channel.go:245: c.windowLock.RLock()\nc.windowLock was unlocked the line above, is this to give other writers a chance to run ?\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/common.go#newcode294\nssh/common.go:294: func (c *buffer) Write(data []byte) (n int, err error) {\nDoes Write need to match the io.Writer contract ? It looks like n is either len(data) or and 0 and an error. The only place that calls incomingDataBuffer.Write discards the value of n anyway.\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/common.go#newcode343\nssh/common.go:343: }\nFill only appears to be used as a check to see if there is data available, ie, the only check is \n\n        bufferFill := c.incomingDataBuffer.Fill()\n        if bufferFill == 0 { ... }\n\nCould this be rewritten as a boolean, something like\n \n        if c.incomingDataBuffer.IsEmpty()\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server.go\nFile ssh/server.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server.go#newcode557\nssh/server.go:557: c.incomingDataBuffer = newBuffer(int(defaultWindowSize))\ndefaultWindowSize is an ideal constant, the int conversion is unnecessary here.\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go\nFile ssh/server_test.go (right):\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go#newcode188\nssh/server_test.go:188: //config.PublicKeyCallback = keyAuth\ndrop\n\nhttp://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go#newcode245\nssh/server_test.go:245: for {\nI took this bit out and the test appeared to pass anyway, I'm not sure what it is trying to do.",
			"disapproval": false,
			"date": "2012-04-18 06:12:58.493498",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments. For now I've updated with comments and reposes to yours. Added comments to write and Read functions.\n\nI'll look into the window struct in client. Looks reasonable but would need to carefully test.\n\n\nOn 2012/04/18 06:12:58, dfc wrote:\n> Hello,\n> \n> Thank you for this CL, sorry it has taken so long to get through it. Some\n> general comments.\n> \n> * window size, there is a scary amount of locking going on inside channel.write.\n> Is it possible to borrow the window type from client.go (move it into common.go)\n> to encapsulate some of that locking.\n> \n> * incomingDataBuffer. Last year I write this,\n> http://codereview.appspot.com/5306079/, which is essentially a buffered\n> io.Reader, io.Writer pair. Something like this might encapsulate the locking\n> going on in read and write.\n> \n> I don't think I have a good understanding on what is going on inside\n> channel.{read,write} yet.\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/channel.go\n> File ssh/channel.go (right):\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/channel.go#newcode245\n> ssh/channel.go:245: c.windowLock.RLock()\n> c.windowLock was unlocked the line above, is this to give other writers a chance\n> to run ?\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/common.go\n> File ssh/common.go (right):\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/common.go#newcode294\n> ssh/common.go:294: func (c *buffer) Write(data []byte) (n int, err error) {\n> Does Write need to match the io.Writer contract ? It looks like n is either\n> len(data) or and 0 and an error. The only place that calls\n> incomingDataBuffer.Write discards the value of n anyway.\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/common.go#newcode343\n> ssh/common.go:343: }\n> Fill only appears to be used as a check to see if there is data available, ie,\n> the only check is \n> \n>         bufferFill := c.incomingDataBuffer.Fill()\n>         if bufferFill == 0 { ... }\n> \n> Could this be rewritten as a boolean, something like\n>  \n>         if c.incomingDataBuffer.IsEmpty()\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/server.go\n> File ssh/server.go (right):\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/server.go#newcode557\n> ssh/server.go:557: c.incomingDataBuffer = newBuffer(int(defaultWindowSize))\n> defaultWindowSize is an ideal constant, the int conversion is unnecessary here.\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go\n> File ssh/server_test.go (right):\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go#newcode188\n> ssh/server_test.go:188: //config.PublicKeyCallback = keyAuth\n> drop\n> \n> http://codereview.appspot.com/5970056/diff/31002/ssh/server_test.go#newcode245\n> ssh/server_test.go:245: for {\n> I took this bit out and the test appeared to pass anyway, I'm not sure what it\n> is trying to do.",
			"disapproval": false,
			"date": "2012-04-18 07:09:10.911472",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After reading the code I did http://codereview.appspot.com/6049050/\n\nI can import the test from this CL and it passes with that change.",
			"disapproval": false,
			"date": "2012-04-19 00:19:15.870865",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-18 07:10:16.578068",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm afraid that this is basically a NACK from me. I don't feel that this patch is identifying the problems. Rather it's rewriting stuff until it works.\n\nI'm going to review the ssh code and find the bugs manually. Hopefully making much smaller changes to fix them.\n\nHaving said that, submitting the test might be very worthwhile.",
			"disapproval": false,
			"date": "2012-04-18 22:15:30.453882",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-04-19 17:18:15.492542",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 5970056: go.crypto/ssh: fix locking and corruption issues with s...",
	"created": "2012-03-31 21:51:30.062918",
	"patchsets": [
		1,
		3,
		2005,
		6001,
		6002,
		5007,
		4006,
		9,
		9001,
		9002,
		9009,
		17001,
		23001,
		29001,
		31002,
		37002
	],
	"modified": "2012-04-19 17:18:18.218420",
	"closed": true,
	"issue": 5970056
}