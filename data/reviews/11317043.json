{
	"description": "go.tools/go/types: cleanup parameter passing\n\n- now represent ...T parameter type as []T (rather than T)\n- simplified call checking\n- added missing check and test for x... arguments (x must be slice)\n\nThis CL will temporarily break ssa and ssa/interp.",
	"cc": [
		"adonovan@google.com",
		"axwalk@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-16 02:20:12.976520",
			"approval": false
		},
		{
			"sender": "axwalk@gmail.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/16 02:20:12, gri wrote:\n> Hello mailto:adonovan@google.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go.tools\n\nI see now there's no copying of param objects now. Is it safe to assume this won't change back? Relying on them being the same internally and externally (to the function definition) will simplify my code.",
			"disapproval": false,
			"date": "2013-07-16 12:06:00.322090",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nFeel free to submit this and break ssa; I'll fix it.\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/call.go\nFile go/types/call.go (left):\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/call.go#oldcode123\ngo/types/call.go:123: // argument typechecks passing an argument arg (if arg != nil) or\nKeep docstring?\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/testdata/expr3.src\nFile go/types/testdata/expr3.src (right):\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/testdata/expr3.src#newcode299\ngo/types/testdata/expr3.src:299: func fv(x ...int) {}\nCan you add a test of a variadic method 'func (T) f(x...int)',\ncalling it as a function f(t, ...), as a method t.f(...), and dynamically via an interface?",
			"disapproval": false,
			"date": "2013-07-16 13:15:01.643070",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11317043/diff/6001/go/types/errors.go\nFile go/types/errors.go (right):\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/errors.go#newcode194\ngo/types/errors.go:194: typ = typ.(*Slice).elt\nIt would be good to specify and check (in NewSignature) the precondition that isVariadic => params.At(params.Len()-1).Type().(*types.Slice).\n\nAlso: specify whether a named slice type is acceptable.  (Obviously these don't arise from the type checker, but clients could create them, and in fact the Importer.BuiltinCallSignature might infer such a type for a call to append(namedslice, x, y, z).",
			"disapproval": false,
			"date": "2013-07-16 13:53:39.240250",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, I am hoping to leave this in this new form. This was requested from\r\nseveral parties.\r\n\r\nThe change in go/types turned out to be a wash (pros vs cons), but there's\r\none less allocation in this case.\r\n\r\n\r\nOn Tue, Jul 16, 2013 at 5:06 AM, <axwalk@gmail.com> wrote:\r\n\r\n> On 2013/07/16 02:20:12, gri wrote:\r\n>\r\n>> Hello mailto:adonovan@google.com (cc:\r\n>>\r\n> mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>),\r\n>\r\n>\r\n>  I'd like you to review this change to\r\n>> https://code.google.com/p/go.**tools <https://code.google.com/p/go.tools>\r\n>>\r\n>\r\n> I see now there's no copying of param objects now. Is it safe to assume\r\n> this won't change back? Relying on them being the same internally and\r\n> externally (to the function definition) will simplify my code.\r\n>\r\n> https://codereview.appspot.**com/11317043/<https://codereview.appspot.com/11317043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-16 15:50:26.019470",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11317043/diff/6001/go/types/call.go\nFile go/types/call.go (left):\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/call.go#oldcode123\ngo/types/call.go:123: // argument typechecks passing an argument arg (if arg != nil) or\nOn 2013/07/16 13:15:01, adonovan wrote:\n> Keep docstring?\n\nDone.\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/errors.go\nFile go/types/errors.go (right):\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/errors.go#newcode194\ngo/types/errors.go:194: typ = typ.(*Slice).elt\nOn 2013/07/16 13:53:40, adonovan wrote:\n> It would be good to specify and check (in NewSignature) the precondition that\n> isVariadic => params.At(params.Len()-1).Type().(*types.Slice).\n> \n> Also: specify whether a named slice type is acceptable.  (Obviously these don't\n> arise from the type checker, but clients could create them, and in fact the\n> Importer.BuiltinCallSignature might infer such a type for a call to\n> append(namedslice, x, y, z).\n\nAdded checks and I am not accepting a named slice.\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/testdata/expr3.src\nFile go/types/testdata/expr3.src (right):\n\nhttps://codereview.appspot.com/11317043/diff/6001/go/types/testdata/expr3.src#newcode299\ngo/types/testdata/expr3.src:299: func fv(x ...int) {}\nOn 2013/07/16 13:15:01, adonovan wrote:\n> Can you add a test of a variadic method 'func (T) f(x...int)',\n> calling it as a function f(t, ...), as a method t.f(...), and dynamically via an\n> interface?\n\nDone.",
			"disapproval": false,
			"date": "2013-07-16 16:10:54.710460",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4af97aa2c622&repo=tools ***\n\ngo.tools/go/types: cleanup parameter passing\n\n- now represent ...T parameter type as []T (rather than T)\n- simplified call checking\n- added missing check and test for x... arguments (x must be slice)\n\nThis CL will temporarily break ssa and ssa/interp.\n\nR=adonovan, axwalk\nCC=golang-dev\nhttps://codereview.appspot.com/11317043",
			"disapproval": false,
			"date": "2013-07-16 16:12:35.922380",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11317043: go.tools/go/types: cleanup parameter passing",
	"created": "2013-07-16 02:01:49.942390",
	"patchsets": [
		1,
		3001,
		6001,
		18001,
		21001
	],
	"modified": "2013-07-16 16:12:37.399920",
	"closed": true,
	"issue": 11317043
}