{
	"description": "cmd/go: get -m options from GOARCH when using gccgo",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-09 22:29:19.959560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Wed, Jan 9, 2013 at 2:29 PM, <iant@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> cmd/go: get -m options from GOARCH when using gccgo\r\n>\r\n> Please review this at https://codereview.appspot.**com/7057063/<https://codereview.appspot.com/7057063/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/go/build.go\r\n>\r\n>\r\n> Index: src/cmd/go/build.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/build.go\r\n> +++ b/src/cmd/go/build.go\r\n> @@ -1404,6 +1404,7 @@\r\n>         out := p.Name + \".o\"\r\n>         ofile = obj + out\r\n>         gcargs := []string{\"-g\"}\r\n> +       gcargs = append(gcargs, b.gccArchArgs()...)\r\n>         if pkgpath := gccgoPkgpath(p); pkgpath != \"\" {\r\n>                 gcargs = append(gcargs, \"-fgo-pkgpath=\"+pkgpath)\r\n>         }\r\n> @@ -1423,6 +1424,7 @@\r\n>         if pkgpath := gccgoCleanPkgpath(p); pkgpath != \"\" {\r\n>                 defs = append(defs, `-D`, `GOPKGPATH=\"`+pkgpath+`\"`)\r\n>         }\r\n> +       defs = append(defs, b.gccArchArgs()...)\r\n>         return b.run(p.Dir, p.ImportPath, \"gccgo\", \"-I\", obj, \"-o\", ofile,\r\n> defs, sfile)\r\n>  }\r\n>\r\n> @@ -1446,7 +1448,7 @@\r\n>         // and all LDFLAGS from cgo dependencies.\r\n>         afiles := make(map[*Package]string)\r\n>         sfiles := make(map[*Package][]string)\r\n> -       ldflags := []string{}\r\n> +       ldflags := b.gccArchArgs()\r\n>         cgoldflags := []string{}\r\n>         usesCgo := false\r\n>         for _, a := range allactions {\r\n> @@ -1487,6 +1489,7 @@\r\n>         inc := filepath.Join(goroot, \"pkg\", fmt.Sprintf(\"%s_%s\", goos,\r\n> goarch))\r\n>         cfile = mkAbs(p.Dir, cfile)\r\n>         defs := []string{\"-D\", \"GOOS_\" + goos, \"-D\", \"GOARCH_\" + goarch}\r\n> +       defs = append(defs, b.gccArchArgs()...)\r\n>         if pkgpath := gccgoCleanPkgpath(p); pkgpath != \"\" {\r\n>                 defs = append(defs, `-D`, `GOPKGPATH=\"`+pkgpath+`\"`)\r\n>         }\r\n> @@ -1547,14 +1550,7 @@\r\n>         if goos != \"windows\" {\r\n>                 a = append(a, \"-fPIC\")\r\n>         }\r\n> -       switch archChar {\r\n> -       case \"8\":\r\n> -               a = append(a, \"-m32\")\r\n> -       case \"6\":\r\n> -               a = append(a, \"-m64\")\r\n> -       case \"5\":\r\n> -               a = append(a, \"-marm\") // not thumb\r\n> -       }\r\n> +       a = append(a, b.gccArchArgs()...)\r\n>         // gcc-4.5 and beyond require explicit \"-pthread\" flag\r\n>         // for multithreading with pthread library.\r\n>         if buildContext.CgoEnabled {\r\n> @@ -1576,6 +1572,19 @@\r\n>         return a\r\n>  }\r\n>\r\n> +// gccArchArgs returns arguments to pass to gcc based on the architecture.\r\n> +func (b *builder) gccArchArgs() []string {\r\n> +       switch archChar {\r\n> +       case \"8\":\r\n> +               return []string{\"-m32\"}\r\n> +       case \"6\":\r\n> +               return []string{\"-m64\"}\r\n> +       case \"5\":\r\n> +               return []string{\"-marm\"} // not thumb\r\n> +       }\r\n> +       return nil\r\n> +}\r\n> +\r\n>  func envList(key string) []string {\r\n>         return strings.Fields(os.Getenv(key))\r\n>  }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-09 22:38:47.680570",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7057063/diff/1/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7057063/diff/1/src/cmd/go/build.go#newcode1583\nsrc/cmd/go/build.go:1583: return []string{\"-marm\"} // not thumb\ndoes gccgo require -marm for ARM?\n-marm is only necessary because 5l can't handle\nthumb library yet and i think this doesn't apply\nto gccgo.",
			"disapproval": false,
			"date": "2013-01-09 22:42:30.049420",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4254b351ee3c ***\n\ncmd/go: get -m options from GOARCH when using gccgo\n\nR=golang-dev, bradfitz, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7057063",
			"disapproval": false,
			"date": "2013-01-09 22:45:10.327010",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7057063/diff/1/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7057063/diff/1/src/cmd/go/build.go#newcode1583\nsrc/cmd/go/build.go:1583: return []string{\"-marm\"} // not thumb\nOn 2013/01/09 22:42:30, minux wrote:\n> does gccgo require -marm for ARM?\n> -marm is only necessary because 5l can't handle\n> thumb library yet and i think this doesn't apply\n> to gccgo.\n\nThat's a fair point but I think it does no harm and it keeps the code together.  In order to get thumb code you need to pass an explicit -mthumb, and if that worked before (using --gccgoflags) it should continue to work.  I don't know whether it works, but this shouldn't affect it.",
			"disapproval": false,
			"date": "2013-01-09 23:21:16.215850",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 7057063: cmd/go: get -m options from GOARCH when using gccgo",
	"created": "2013-01-09 22:29:14.535500",
	"patchsets": [
		1,
		4002
	],
	"modified": "2013-01-09 23:21:16.460760",
	"closed": true,
	"issue": 7057063
}