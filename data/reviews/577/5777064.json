{
	"description": "archive/tar: catch short writes.\n\nAlso make error messages consistent throughout.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer.go\nFile src/pkg/archive/tar/writer.go (right):\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer.go#newcode53\nsrc/pkg/archive/tar/writer.go:53: tw.err = fmt.Errorf(\"archive/tar: missed writing %d bytes\", tw.nb)\n\"I wouldn't say I've been missing it, Bob.\"\n\nThis error message sounds a bit weird.  I might say something more like:\n\n\"Header declared %d bytes, but only %d bytes were written.\"\n\n\nAlso, is a Write after a Flush an error?\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer.go#newcode200\nsrc/pkg/archive/tar/writer.go:200: tw.Flush()\nmight as well just look at the return value of Flush here, rather than hoping that Flush set tw.err\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer_test.go\nFile src/pkg/archive/tar/writer_test.go (right):\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer_test.go#newcode158\nsrc/pkg/archive/tar/writer_test.go:158: t.Logf(\"big: %v\", big)\nleftover debugging?",
			"disapproval": false,
			"date": "2012-03-12 06:27:08.126557",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-12 06:22:15.384258",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7dac9470d5d8 ***\n\narchive/tar: catch short writes.\n\nAlso make error messages consistent throughout.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5777064",
			"disapproval": false,
			"date": "2012-03-12 06:33:41.179079",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5777064/diff/5001/src/pkg/archive/tar/writer.go\nFile src/pkg/archive/tar/writer.go (right):\n\nhttp://codereview.appspot.com/5777064/diff/5001/src/pkg/archive/tar/writer.go#newcode53\nsrc/pkg/archive/tar/writer.go:53: tw.err = fmt.Errorf(\"archive/tar: missed writing %d bytes\", tw.nb)\nThis seems like a regression.  The code below was already correctly handling writing zeros if the written data was too short.  Now you are creating a usage error.  This is an API change.  The old code seems like it was fine.",
			"disapproval": false,
			"date": "2012-03-12 17:01:04.221557",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer.go\nFile src/pkg/archive/tar/writer.go (right):\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer.go#newcode53\nsrc/pkg/archive/tar/writer.go:53: tw.err = fmt.Errorf(\"archive/tar: missed writing %d bytes\", tw.nb)\nOn 2012/03/12 06:27:08, bradfitz wrote:\n> \"I wouldn't say I've been missing it, Bob.\"\n\n\"I have eight different bosses, Bob!\"\n\n> This error message sounds a bit weird.  I might say something more like:\n> \n> \"Header declared %d bytes, but only %d bytes were written.\"\n\nYeah, except we aren't tracking the length of the file. I could add that, but that's a bigger change than I really wanted to do at this stage. I'll get the fix in now, and we can wordsmith later.\n\n> Also, is a Write after a Flush an error?\n\nNot necessarily. An empty write is fine, for one.\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer.go#newcode200\nsrc/pkg/archive/tar/writer.go:200: tw.Flush()\nOn 2012/03/12 06:27:08, bradfitz wrote:\n> might as well just look at the return value of Flush here, rather than hoping\n> that Flush set tw.err\n\nOther parts already expect flush to set tw.err, and it's simpler to keep this consistent.\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer_test.go\nFile src/pkg/archive/tar/writer_test.go (right):\n\nhttp://codereview.appspot.com/5777064/diff/2004/src/pkg/archive/tar/writer_test.go#newcode158\nsrc/pkg/archive/tar/writer_test.go:158: t.Logf(\"big: %v\", big)\nOn 2012/03/12 06:27:08, bradfitz wrote:\n> leftover debugging?\n\noops, yes.",
			"disapproval": false,
			"date": "2012-03-12 06:33:16.357120",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5777064: archive/tar: catch short writes.",
	"created": "2012-03-12 06:21:42.552324",
	"patchsets": [
		1,
		3,
		2004,
		5001
	],
	"modified": "2012-03-12 17:01:04.414499",
	"closed": true,
	"issue": 5777064
}