{
	"description": "flag: add Getter interface; implement for all Value types\n\nFixes issue 5383.",
	"cc": [
		"golang-dev@googlegroups.com",
		"0xjnml@gmail.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-23 19:27:38.173880",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/23 19:27:38, rick wrote:\n\nI'm confused by the new Getter interface. What is it good for?\n\n    b := flag.Bool(\"foo\", false, \"\")\n    myVar := b.Get()\n\n    vs\n\n    b := flag.Bool(\"foo\", false, \"\")\n    myVar := interface{}(*b)\n\nAlso, is there an example why to put a typed flag value into 'interface{}'?",
			"disapproval": false,
			"date": "2013-06-23 19:42:13.031610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree it's a weak proposal. The issue doesn't explain the need,\r\nother than the unsupported claim that it is \"essential [for] working\r\nwith sub-commands\".\r\n\r\nWhat problem does this solve?\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-06-24 20:38:41.158180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have not looked at this CL, but speaking generally...\r\n\r\nThe issue that a Get method solves is that it provides access to the flag\r\nvalue when you're holding a flag.Value (perhaps obtained from a *flag.Flag\r\nduring Visit or Lookup). Without a Get method, all you have is type\r\nassertions, but you cannot write fv.(*flag.intValue) because that type is\r\nunexported. And in general, the type of value a flag stores is often\r\ndifferent from its implementation type. Get lets you translate the latter\r\nto the former. That is, for *flag.intValue, the Get method gives you a way\r\nto get a value of type interface{} holding int, which is something you\r\n_can_ do a type switch on.\r\n\r\nIn Go 2 I hope we can add Get to the Value interface. Until then I think a\r\nGetter interface implemented by all the standard flag implementations is\r\nthe best we can do.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-24 20:47:42.611590",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Perhaps, although I still find it unsatisfying.\r\n\r\nAnother approach would be to provide a richer interface with .Int and\r\n.Bool etc., a bit like we have in reflect; the cost there would be\r\nthat each implementation would need to fill in the blanks, although it\r\ncould be aided by an exported type in the flag package that stubs them\r\nall out. You could just embed that in your struct if you have one.\r\n\r\nThen instead of\r\n\r\n myFlag.Get().(int)\r\n\r\nyou could write\r\n\r\n  myFlag.Int()\r\n\r\nI'm not arguing that's better, just that I want to tread cautiously.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-06-24 20:56:50.855340",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this looks good but please add to this CL an update to doc/go1.2.txt",
			"disapproval": false,
			"date": "2013-06-27 04:25:58.462210",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "doc/go1.2.txt updated. PTAL",
			"disapproval": false,
			"date": "2013-06-27 11:52:31.084700",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10472043/diff/18001/src/pkg/flag/flag.go\nFile src/pkg/flag/flag.go (right):\n\nhttps://codereview.appspot.com/10472043/diff/18001/src/pkg/flag/flag.go#newcode241\nsrc/pkg/flag/flag.go:241: // Getter allows the contents of a Value to be retrieved. All Value types\nGetter is an interface that allows the contents of a Value to be retrieved. It wraps the Value interface, rather than being part of it, because it appeared after Go 1 and its compatibility rules.  All Value types....",
			"disapproval": false,
			"date": "2013-06-27 16:26:22.347560",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10472043/diff/18001/src/pkg/flag/flag.go\nFile src/pkg/flag/flag.go (right):\n\nhttps://codereview.appspot.com/10472043/diff/18001/src/pkg/flag/flag.go#newcode241\nsrc/pkg/flag/flag.go:241: // Getter allows the contents of a Value to be retrieved. All Value types\nOn 2013/06/27 16:26:22, r wrote:\n> Getter is an interface that allows the contents of a Value to be retrieved. It\n> wraps the Value interface, rather than being part of it, because it appeared\n> after Go 1 and its compatibility rules.  All Value types....\n\nDone.",
			"disapproval": false,
			"date": "2013-06-27 22:01:15.444610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthanks",
			"disapproval": false,
			"date": "2013-06-27 22:28:48.382310",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=fccd815ed3bb ***\n\nflag: add Getter interface; implement for all Value types\n\nFixes issue 5383.\n\nR=golang-dev, 0xjnml, r, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/10472043\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2013-06-27 22:30:48.980580",
			"approval": false
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 10472043: flag: add Getter interface; implement for all Value types",
	"created": "2013-06-23 19:27:13.861430",
	"patchsets": [
		1,
		3001,
		6001,
		15001,
		18001,
		23001
	],
	"modified": "2013-06-28 00:28:09.126370",
	"closed": true,
	"issue": 10472043
}