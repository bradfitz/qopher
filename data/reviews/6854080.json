{
	"description": "all: fix the the typos\nFixes issue 4420.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-21 18:36:59.171450",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=31a76ef7f321 ***\n\nall: fix the the typos\nFixes issue 4420.\n\nR=golang-dev, rsc, remyoudompheng\nCC=golang-dev\nhttp://codereview.appspot.com/6854080",
			"disapproval": false,
			"date": "2012-11-21 18:59:00.643500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-11-21 18:37:59.867770",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about about the CL title title ?\r\n\r\n2012/11/21, minux.ma@gmail.com <minux.ma@gmail.com>:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> all: fix the the typos\r\n> Fixes issue 4420.\r\n>\r\n> Please review this at http://codereview.appspot.com/6854080/\r\n>\r\n> Affected files:\r\n>    M src/pkg/container/ring/ring.go\r\n>    M src/pkg/encoding/binary/binary.go\r\n>    M src/pkg/encoding/csv/writer.go\r\n>    M src/pkg/exp/locale/collate/collate.go\r\n>    M src/pkg/go/printer/printer.go\r\n>    M src/pkg/html/template/js.go\r\n>    M src/pkg/image/jpeg/huffman.go\r\n>    M src/pkg/net/http/httptest/server.go\r\n>    M src/pkg/net/http/server.go\r\n>    M src/pkg/net/http/transport_test.go\r\n>    M src/pkg/reflect/type.go\r\n>\r\n>\r\n> Index: src/pkg/container/ring/ring.go\r\n> ===================================================================\r\n> --- a/src/pkg/container/ring/ring.go\r\n> +++ b/src/pkg/container/ring/ring.go\r\n> @@ -74,7 +74,7 @@\r\n>   \treturn r\r\n>   }\r\n>\r\n> -// Link connects ring r with with ring s such that r.Next()\r\n> +// Link connects ring r with ring s such that r.Next()\r\n>   // becomes s and returns the original value for r.Next().\r\n>   // r must not be empty.\r\n>   //\r\n> Index: src/pkg/encoding/binary/binary.go\r\n> ===================================================================\r\n> --- a/src/pkg/encoding/binary/binary.go\r\n> +++ b/src/pkg/encoding/binary/binary.go\r\n> @@ -184,7 +184,7 @@\r\n>   // values, or a pointer to such data.\r\n>   // Bytes written to w are encoded using the specified byte order\r\n>   // and read from successive fields of the data.\r\n> -// When writing structs, zero values are are written for fields\r\n> +// When writing structs, zero values are written for fields\r\n>   // with blank (_) field names.\r\n>   func Write(w io.Writer, order ByteOrder, data interface{}) error {\r\n>   \t// Fast path for basic types.\r\n> Index: src/pkg/encoding/csv/writer.go\r\n> ===================================================================\r\n> --- a/src/pkg/encoding/csv/writer.go\r\n> +++ b/src/pkg/encoding/csv/writer.go\r\n> @@ -22,7 +22,7 @@\r\n>   //\r\n>   // If UseCRLF is true, the Writer ends each record with \\r\\n instead of\r\n> \\n.\r\n>   type Writer struct {\r\n> -\tComma   rune // Field delimiter (set to to ',' by NewWriter)\r\n> +\tComma   rune // Field delimiter (set to ',' by NewWriter)\r\n>   \tUseCRLF bool // True to use \\r\\n as the line terminator\r\n>   \tw       *bufio.Writer\r\n>   }\r\n> Index: src/pkg/exp/locale/collate/collate.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/locale/collate/collate.go\r\n> +++ b/src/pkg/exp/locale/collate/collate.go\r\n> @@ -450,7 +450,7 @@\r\n>   \t\t}\r\n>   \t\t// Derive the quaternary weights from the options and other levels.\r\n>   \t\t// Note that we represent maxQuaternary as 0xFF. The first byte of the\r\n> -\t\t// representation of a a primary weight is always smaller than 0xFF,\r\n> +\t\t// representation of a primary weight is always smaller than 0xFF,\r\n>   \t\t// so using this single byte value will compare correctly.\r\n>   \t\tif Quaternary <= c.Strength && c.Alternate >= AltShifted {\r\n>   \t\t\tif c.Alternate == AltShiftTrimmed {\r\n> Index: src/pkg/go/printer/printer.go\r\n> ===================================================================\r\n> --- a/src/pkg/go/printer/printer.go\r\n> +++ b/src/pkg/go/printer/printer.go\r\n> @@ -452,7 +452,7 @@\r\n>\r\n>   // stripCommonPrefix removes a common prefix from /*-style comment lines\r\n>\r\n> (unless no\r\n>   // comment line is indented, all but the first line have some form of\r\n> space prefix).\r\n> -// The prefix is computed using heuristics such that is is likely that the\r\n>\r\n> comment\r\n> +// The prefix is computed using heuristics such that is likely that the\r\n> comment\r\n>   // contents are nicely laid out after re-printing each line using the\r\n> printer's\r\n>   // current indentation.\r\n>   //\r\n> Index: src/pkg/html/template/js.go\r\n> ===================================================================\r\n> --- a/src/pkg/html/template/js.go\r\n> +++ b/src/pkg/html/template/js.go\r\n> @@ -14,7 +14,7 @@\r\n>   )\r\n>\r\n>   // nextJSCtx returns the context that determines whether a slash after\r\n> the\r\n> -// given run of tokens tokens starts a regular expression instead of a\r\n> division\r\n> +// given run of tokens starts a regular expression instead of a division\r\n>   // operator: / or /=.\r\n>   //\r\n>   // This assumes that the token run does not include any string tokens,\r\n> comment\r\n> Index: src/pkg/image/jpeg/huffman.go\r\n> ===================================================================\r\n> --- a/src/pkg/image/jpeg/huffman.go\r\n> +++ b/src/pkg/image/jpeg/huffman.go\r\n> @@ -163,7 +163,7 @@\r\n>\r\n>   // Returns the next Huffman-coded value from the bit stream, decoded\r\n> according to h.\r\n>   // TODO(nigeltao): This decoding algorithm is simple, but slow. A\r\n> lookahead table, instead of always\r\n> -// peeling off only 1 bit at at time, ought to be faster.\r\n> +// peeling off only 1 bit at time, ought to be faster.\r\n>   func (d *decoder) decodeHuffman(h *huffman) (uint8, error) {\r\n>   \tif h.length == 0 {\r\n>   \t\treturn 0, FormatError(\"uninitialized Huffman table\")\r\n> Index: src/pkg/net/http/httptest/server.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/http/httptest/server.go\r\n> +++ b/src/pkg/net/http/httptest/server.go\r\n> @@ -21,7 +21,7 @@\r\n>   type Server struct {\r\n>   \tURL      string // base URL of form http://ipaddr:port with no trailing\r\n>\r\n> slash\r\n>   \tListener net.Listener\r\n> -\tTLS      *tls.Config // nil if not using using TLS\r\n> +\tTLS      *tls.Config // nil if not using TLS\r\n>\r\n>   \t// Config may be changed after calling NewUnstartedServer and\r\n>   \t// before Start or StartTLS.\r\n> Index: src/pkg/net/http/server.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/http/server.go\r\n> +++ b/src/pkg/net/http/server.go\r\n> @@ -127,7 +127,7 @@\r\n>\r\n>   \t// requestBodyLimitHit is set by requestTooLarge when\r\n>   \t// maxBytesReader hits its max size. It is checked in\r\n> -\t// WriteHeader, to make sure we don't consume the the\r\n> +\t// WriteHeader, to make sure we don't consume the\r\n>   \t// remaining request body to try to advance to the next HTTP\r\n>   \t// request. Instead, when this is set, we stop reading\r\n>   \t// subsequent requests on this connection and stop reading\r\n> Index: src/pkg/net/http/transport_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/http/transport_test.go\r\n> +++ b/src/pkg/net/http/transport_test.go\r\n> @@ -281,7 +281,7 @@\r\n>   \tc := &Client{Transport: tr}\r\n>\r\n>   \t// Start 3 outstanding requests and wait for the server to get them.\r\n> -\t// Their responses will hang until we we write to resch, though.\r\n> +\t// Their responses will hang until we write to resch, though.\r\n>   \tdonech := make(chan bool)\r\n>   \tdoReq := func() {\r\n>   \t\tresp, err := c.Get(ts.URL)\r\n> Index: src/pkg/reflect/type.go\r\n> ===================================================================\r\n> --- a/src/pkg/reflect/type.go\r\n> +++ b/src/pkg/reflect/type.go\r\n> @@ -1338,7 +1338,7 @@\r\n>   \treturn t\r\n>   }\r\n>\r\n> -// ChanOf returns the channel type with the given direction and and\r\n> element type.\r\n> +// ChanOf returns the channel type with the given direction and element\r\n> type.\r\n>   // For example, if t represents int, ChanOf(RecvDir, t) represents <-chan\r\n>\r\n> int.\r\n>   //\r\n>   // The gc runtime imposes a limit of 64 kB on channel element types.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-21 18:57:26.688670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 21, 2012 at 1:57 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> What about about the CL title title ?\r\n\r\nSeemed like the the perfect description to me.\r\n",
			"disapproval": false,
			"date": "2012-11-21 18:58:55.954920",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6854080: all: fix the the typos",
	"created": "2012-11-21 18:33:13.695410",
	"patchsets": [
		1,
		1002,
		4001,
		7001
	],
	"modified": "2012-11-21 18:59:11.250420",
	"closed": true,
	"issue": 6854080
}