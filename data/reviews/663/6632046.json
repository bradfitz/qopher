{
	"description": "bytes, strings: add (*Reader).WriteTo\n\nFixes issue 4031.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"remyoudompheng@gmail.com",
		"r@golang.org",
		"dave@cheney.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go\nFile src/pkg/strings/reader.go (right):\n\nhttp://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go#newcode130\nsrc/pkg/strings/reader.go:130: m, e := io.WriteString(w, s)\nOn 2012/10/10 02:39:21, r wrote:\n> But I agree that calling out to WriteString feels wrong here. However I think\n> Copy won't do it because it'll come right back to Reader.WriteTo, won't it?\n\nOne way or another I think it's important to call the Writer's WriteString method when available to avoid allocating.\n\nIt's possible to call back into io.Copy without recursing if we wrap the Reader in a struct that only has a Read method. net does something similar with its unexported writerOnly type.",
			"disapproval": false,
			"date": "2012-10-10 03:00:18.311180",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after nits\n\nWill give Rob a day or so for final comments before submitting (or anybody else can)\n\nhttps://codereview.appspot.com/6632046/diff/4007/src/pkg/bytes/reader_test.go\nFile src/pkg/bytes/reader_test.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/4007/src/pkg/bytes/reader_test.go#newcode103\nsrc/pkg/bytes/reader_test.go:103: t.Errorf(\"got string %v; want %v\", b.String(), s)\n%q for strings.  then you can see empty and gibberish.\n\nhttps://codereview.appspot.com/6632046/diff/4007/src/pkg/strings/reader_test.go\nFile src/pkg/strings/reader_test.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/4007/src/pkg/strings/reader_test.go#newcode105\nsrc/pkg/strings/reader_test.go:105: t.Errorf(\"got string %v; want %v\", b.String(), s)\n%q",
			"disapproval": false,
			"date": "2012-10-10 22:48:28.892260",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6632046/diff/9007/src/pkg/bytes/reader.go\nFile src/pkg/bytes/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/9007/src/pkg/bytes/reader.go#newcode125\nsrc/pkg/bytes/reader.go:125: func (r *Reader) WriteTo(w io.Writer) (n int64, err error) {\nOn 2012/10/10 23:51:52, dfc wrote:\n> I'm not a fan of the named return values here.\n\nIt's fine. It's better than fine, actually.  It's good because it's consistent with everything else in package io, like:\n\nhttp://golang.org/pkg/io/#Writer",
			"disapproval": false,
			"date": "2012-10-11 00:06:29.304090",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go\nFile src/pkg/bytes/reader.go (right):\n\nhttp://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go#newcode133\nsrc/pkg/bytes/reader.go:133: panic(\"bytes.Reader.WriteTo: invalid Write count\")\nit's the caller's error not an error from what this calls. i'm OK with panic",
			"disapproval": false,
			"date": "2012-10-10 03:16:22.098540",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, remyoudompheng@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-10 22:42:55.163680",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, remyoudompheng@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-10 22:50:44.989870",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-09 05:58:09.276690",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think WriteString is fine. Safer, less surprising default. And not\r\nchanging behavior.\r\n\r\nThoughts though on panic versus error?\r\nOn Oct 9, 2012 7:40 PM, \"Rob Pike\" <r@golang.org> wrote:\r\n\r\n> I guess that wasn't very helpful. Apologies for that.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-10 02:58:28.043920",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-08 21:58:12.351250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go\nFile src/pkg/bytes/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go#newcode133\nsrc/pkg/bytes/reader.go:133: panic(\"bytes.Reader.WriteTo: invalid Write count\")\nI'm not sure this is panic-worthy.  Why not just return an error here?\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go#newcode137\nsrc/pkg/bytes/reader.go:137: if err != nil {\ndelete these three lines, and\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go#newcode140\nsrc/pkg/bytes/reader.go:140: if m != len(b) {\nif err == nil && m != len(b) {\n    err = io.ErrShortWrite\n}\nreturn\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go#newcode143\nsrc/pkg/bytes/reader.go:143: return n, nil\njust return\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go\nFile src/pkg/strings/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go#newcode132\nsrc/pkg/strings/reader.go:132: panic(\"strings.Reader.WriteTo: invalid WriteString count\")\nsame comments from other file",
			"disapproval": false,
			"date": "2012-10-09 18:23:56.991380",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go\nFile src/pkg/strings/reader.go (right):\n\nhttp://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go#newcode130\nsrc/pkg/strings/reader.go:130: m, e := io.WriteString(w, s)\nI lean towards leaving io.WriteString alone at least for now.  Strings can be big but usually aren't, and it's nice to generate one syscall. Plus if you decide to break it up you need heuristics about what size is correct. Plus most of the guys where it really matters implement WriteString anyway.\n\nBut I'm not adamant and could be swayed.\n\nBut I agree that calling out to WriteString feels wrong here. However I think Copy won't do it because it'll come right back to Reader.WriteTo, won't it?",
			"disapproval": false,
			"date": "2012-10-10 02:39:21.059140",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6632046/diff/1002/src/pkg/bytes/reader.go\nFile src/pkg/bytes/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/1002/src/pkg/bytes/reader.go#newcode131\nsrc/pkg/bytes/reader.go:131: m, e := w.Write(b)\nI can see the advantage of this CL, but I'm a little nervous about this part.  It permits dumb or malicious Writers to manipulate my Reader's read-only state.\n\nBut I guess that's really a problem with the io.Writer interface taking a mutable argument.\n\nhttps://codereview.appspot.com/6632046/diff/1002/src/pkg/bytes/reader.go#newcode137\nsrc/pkg/bytes/reader.go:137: if e != nil {\njust use err instead of e\n\nhttps://codereview.appspot.com/6632046/diff/1002/src/pkg/strings/reader.go\nFile src/pkg/strings/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/1002/src/pkg/strings/reader.go#newcode13\nsrc/pkg/strings/reader.go:13: // A Reader implements the io.Reader, io.ReaderAt, io.Seeker,\nmention WriterTo?",
			"disapproval": false,
			"date": "2012-10-09 04:46:53.932490",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go\nFile src/pkg/strings/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go#newcode130\nsrc/pkg/strings/reader.go:130: m, e := io.WriteString(w, s)\nOn 2012/10/09 21:58:46, remyoudompheng wrote:\n> if the writer has no WriteString() method it will allocate a large bytestring\n> and copy the whole string contents to it, whereas io.Copy will allocate a fixed\n> size buffer and reuse it, hence creating less garbage if the underlying string\n> is larg, but probably more garbage in most cases (32kB).\n> \n> What do you think?\n\nIf we were to do such an optimization, why here instead of just fixing io.WriteString to do that if/when it makes sense?  Since WriteString and Copy are in the same package, that 32kB constant can remain package-private.\n\nBut--- we don't know whether it's cheaper to to make a copy of a 5MB string->[]byte or do a Write call.  What if the destination io.Writer is doing slow network round-trips and each Write is 350 ms.  In that case it might be better to just give it one large []byte and let it handle it.",
			"disapproval": false,
			"date": "2012-10-09 22:04:47.026350",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with some minor grumbling about unnecessary named return values.\n\nhttps://codereview.appspot.com/6632046/diff/9007/src/pkg/bytes/reader.go\nFile src/pkg/bytes/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/9007/src/pkg/bytes/reader.go#newcode125\nsrc/pkg/bytes/reader.go:125: func (r *Reader) WriteTo(w io.Writer) (n int64, err error) {\nI'm not a fan of the named return values here. I think the method would be clearer like this\n\n...\nn = int64(m)\nif m != len(b) { \n   return n, io.ErrShortWrite\n}\nreturn n, nil\n\nhttps://codereview.appspot.com/6632046/diff/9007/src/pkg/strings/reader.go\nFile src/pkg/strings/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/9007/src/pkg/strings/reader.go#newcode134\nsrc/pkg/strings/reader.go:134: r.i += m\nsee previous comments in bytes.WriteTo()",
			"disapproval": false,
			"date": "2012-10-10 23:51:52.512510",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough. Please ignore my comments.\r\nOn 11 Oct 2012 11:06, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6632046/diff/9007/src/pkg/**\r\n> bytes/reader.go<https://codereview.appspot.com/6632046/diff/9007/src/pkg/bytes/reader.go>\r\n> File src/pkg/bytes/reader.go (right):\r\n>\r\n> https://codereview.appspot.**com/6632046/diff/9007/src/pkg/**\r\n> bytes/reader.go#newcode125<https://codereview.appspot.com/6632046/diff/9007/src/pkg/bytes/reader.go#newcode125>\r\n> src/pkg/bytes/reader.go:125: func (r *Reader) WriteTo(w io.Writer) (n\r\n> int64, err error) {\r\n> On 2012/10/10 23:51:52, dfc wrote:\r\n>\r\n>> I'm not a fan of the named return values here.\r\n>>\r\n>\r\n> It's fine. It's better than fine, actually.  It's good because it's\r\n> consistent with everything else in package io, like:\r\n>\r\n> http://golang.org/pkg/io/#**Writer <http://golang.org/pkg/io/#Writer>\r\n>\r\n> https://codereview.appspot.**com/6632046/<https://codereview.appspot.com/6632046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-11 00:14:09.063390",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 9, 2012 at 11:27 AM, <chickencha@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6632046/diff/7002/src/pkg/**\r\n> bytes/reader.go<https://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go>\r\n> File src/pkg/bytes/reader.go (right):\r\n>\r\n> https://codereview.appspot.**com/6632046/diff/7002/src/pkg/**\r\n> bytes/reader.go#newcode133<https://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go#newcode133>\r\n> src/pkg/bytes/reader.go:133: panic(\"bytes.Reader.WriteTo: invalid Write\r\n> count\")\r\n> On 2012/10/09 18:23:57, bradfitz wrote:\r\n>\r\n>> I'm not sure this is panic-worthy.  Why not just return an error here?\r\n>>\r\n>\r\n> I agree, but I was following what happens in bytes.Buffer. Want to\r\n> change that one too?\r\n>\r\n\r\nLet's wait for others' opinions.\r\n",
			"disapproval": false,
			"date": "2012-10-09 18:31:34.925840",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go\nFile src/pkg/bytes/reader.go (right):\n\nhttps://codereview.appspot.com/6632046/diff/7002/src/pkg/bytes/reader.go#newcode133\nsrc/pkg/bytes/reader.go:133: panic(\"bytes.Reader.WriteTo: invalid Write count\")\nOn 2012/10/09 18:23:57, bradfitz wrote:\n> I'm not sure this is panic-worthy.  Why not just return an error here?\n\nI agree, but I was following what happens in bytes.Buffer. Want to change that one too?",
			"disapproval": false,
			"date": "2012-10-09 18:27:31.029120",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go\nFile src/pkg/strings/reader.go (right):\n\nhttp://codereview.appspot.com/6632046/diff/7002/src/pkg/strings/reader.go#newcode130\nsrc/pkg/strings/reader.go:130: m, e := io.WriteString(w, s)\nif the writer has no WriteString() method it will allocate a large bytestring and copy the whole string contents to it, whereas io.Copy will allocate a fixed size buffer and reuse it, hence creating less garbage if the underlying string is larg, but probably more garbage in most cases (32kB).\n\nWhat do you think?",
			"disapproval": false,
			"date": "2012-10-09 21:58:45.918520",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I guess that wasn't very helpful. Apologies for that.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-10 02:40:07.506650",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL breaks net/http.\r\n\r\n\r\n--- FAIL: TestHeadResponses (0.00 seconds)\r\nserve_test.go:548: \ton Copy, expected ErrBodyNotAllowed, got short write\r\n",
			"disapproval": false,
			"date": "2012-10-12 01:36:38.035910",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, remyoudompheng@gmail.com, r@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-12 01:45:13.443660",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nwill submit",
			"disapproval": false,
			"date": "2012-10-12 03:40:55.926680",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=67edfdb4413a ***\n\nbytes, strings: add (*Reader).WriteTo\n\nFixes issue 4031.\n\nR=golang-dev, bradfitz, remyoudompheng, r, dave\nCC=golang-dev\nhttp://codereview.appspot.com/6632046\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2012-10-12 03:43:57.903160",
			"approval": false
		}
	],
	"owner_email": "chickencha@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "eds",
	"subject": "code review 6632046: bytes, strings: add (*Reader).WriteTo",
	"created": "2012-10-08 21:55:37.838100",
	"patchsets": [
		1,
		1001,
		1002,
		7002,
		4007,
		9006,
		9007,
		15001
	],
	"modified": "2012-10-12 03:45:43.164360",
	"closed": true,
	"issue": 6632046
}