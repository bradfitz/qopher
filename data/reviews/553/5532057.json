{
	"description": "http: fix Transport deadlock\n\nThis patch intend to fix following issues.\nhttp://code.google.com/p/go/issues/detail?id=2616\n\nFixes issue 2616.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"nekotaroh@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "yoshiyuki.kanno@stoic.co.jp",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"nekotaroh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, nekotaroh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-21 13:15:44.782801",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, I've now processed your CLA, so this can be submitted once it's cleaned up.\n\nIn addition to the things below, can you add a test?  How do you reproduce this?  I'm guessing that it involves a lot of traffic with a server closing at some point?\n\nhttp://codereview.appspot.com/5532057/diff/2001/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/5532057/diff/2001/src/pkg/net/http/transport.go#newcode498\nsrc/pkg/net/http/transport.go:498: func (pc *persistConn) expectingResponseOrClose() (ret bool) {\ndon't name this result parameter.  (remove \"ret\")\n\nbut I don't like this part of the change, anyway:  you're combining an accessor with an action.\n\nI would just rewrite the caller to do the \"if\" condition.\n\nthat might involve just deleting this whole function.\n\nhttp://codereview.appspot.com/5532057/diff/2001/src/pkg/net/http/transport.go#newcode652\nsrc/pkg/net/http/transport.go:652: func (pc *persistConn) close(hasLock bool) {\nI don't like reading callsites with foo(false) and foo(true)... too hard to read.\n\nI would break this into two functions: close and closeLocked.  You can have close just be:\n\nfunc (pc *persistConn) close() {\n   pc.lk.Lock()\n   defer pc.lk.Unlock()\n   pc.closeLocked()\n}",
			"disapproval": false,
			"date": "2012-01-10 23:57:44.340452",
			"approval": false
		},
		{
			"sender": "yoshiyuki.kanno@stoic.co.jp",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> > In addition to the things below, can you add a test?  How do you\n> > reproduce this?  I'm guessing that it involves a lot of traffic with a\n> > server closing at some point?\nYes. So need to execute a stub http server for testing(be setting KeepAliveTimeout very low)\nFor now a reproducable program is here.\nhttps://github.com/mocchira/digestw/\n\nI can add a test and\nOther review points to me is LGTM.\nSo I'll do it (maybe this week end)\n\nThanks",
			"disapproval": false,
			"date": "2012-01-11 05:38:29.742265",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, let's change the first line of the CL description to:\n\nhttp: fix Transport deadlock\n\n\nOn Tue, Jan 10, 2012 at 3:57 PM, <bradfitz@golang.org> wrote:\n\n> Okay, I've now processed your CLA, so this can be submitted once it's\n> cleaned up.\n>\n> In addition to the things below, can you add a test?  How do you\n> reproduce this?  I'm guessing that it involves a lot of traffic with a\n> server closing at some point?\n>\n>\n>\n> http://codereview.appspot.com/**5532057/diff/2001/src/pkg/net/**\n> http/transport.go<http://codereview.appspot.com/5532057/diff/2001/src/pkg/net/http/transport.go>\n> File src/pkg/net/http/transport.go (right):\n>\n> http://codereview.appspot.com/**5532057/diff/2001/src/pkg/net/**\n> http/transport.go#newcode498<http://codereview.appspot.com/5532057/diff/2001/src/pkg/net/http/transport.go#newcode498>\n> src/pkg/net/http/transport.go:**498: func (pc *persistConn)\n> expectingResponseOrClose() (ret bool) {\n> don't name this result parameter.  (remove \"ret\")\n>\n> but I don't like this part of the change, anyway:  you're combining an\n> accessor with an action.\n>\n> I would just rewrite the caller to do the \"if\" condition.\n>\n> that might involve just deleting this whole function.\n>\n> http://codereview.appspot.com/**5532057/diff/2001/src/pkg/net/**\n> http/transport.go#newcode652<http://codereview.appspot.com/5532057/diff/2001/src/pkg/net/http/transport.go#newcode652>\n> src/pkg/net/http/transport.go:**652: func (pc *persistConn) close(hasLock\n> bool) {\n> I don't like reading callsites with foo(false) and foo(true)... too hard\n> to read.\n>\n> I would break this into two functions: close and closeLocked.  You can\n> have close just be:\n>\n> func (pc *persistConn) close() {\n>   pc.lk.Lock()\n>   defer pc.lk.Unlock()\n>   pc.closeLocked()\n> }\n>\n> http://codereview.appspot.com/**5532057/<http://codereview.appspot.com/5532057/>\n>\n",
			"disapproval": false,
			"date": "2012-01-10 23:59:11.567225",
			"approval": false
		},
		{
			"sender": "yoshiyuki.kanno@stoic.co.jp",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-15 08:09:05.243095",
			"approval": false
		},
		{
			"sender": "nekotaroh@gmail.com",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"nekotaroh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "summary\n1. request.go's bug was fixed for the last few days so it's removed\n2. previous review points was applied to transport.go\n3. modified server.go. To reproduce this bugs, server closing at some point will be needed, so I implemented 'MaxKeepAliveRequests' as other http daemons do. This probably will be discussed at an another Thread?\n4. added tests. Theare are three factors to reproduce this dead lock.\nFollowing values are specified.\n - MaxKeepAliveRequests (5)\n - Number of requests (1e5)\n - Timeout for detecting dead lock (30sec)\nThese suitable values might depend on environments...",
			"disapproval": false,
			"date": "2012-01-15 08:37:13.640310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The fix and tests look good.\n\nThe only part I don't like is adding MaxKeepAliveRequests, which I believe\nis just unnecessary complexity and implies that it needs to be set.  The\nnumber of requests per connection doesn't mean something in a Go world like\nit does in a child-process-per-connection Apache-style world.\n\nCan you make the tests still work without MaxKeepAliveRequests?\n\nAlso, the http.Server struct was modified in another CL, so that part of\nthe CL wouldn't apply cleanly anyway.  But let's try to do this without it.\n\n\nOn Sun, Jan 15, 2012 at 12:37 AM, <nekotaroh@gmail.com> wrote:\n\n> summary\n> 1. request.go's bug was fixed for the last few days so it's removed\n> 2. previous review points was applied to transport.go\n> 3. modified server.go. To reproduce this bugs, server closing at some\n> point will be needed, so I implemented 'MaxKeepAliveRequests' as other\n> http daemons do. This probably will be discussed at an another Thread?\n> 4. added tests. Theare are three factors to reproduce this dead lock.\n> Following values are specified.\n>  - MaxKeepAliveRequests (5)\n>  - Number of requests (1e5)\n>  - Timeout for detecting dead lock (30sec)\n> These suitable values might depend on environments...\n>\n> http://codereview.appspot.com/**5532057/<http://codereview.appspot.com/5532057/>\n>\n",
			"disapproval": false,
			"date": "2012-01-19 04:09:26.844357",
			"approval": false
		},
		{
			"sender": "nekotaroh@gmail.com",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"nekotaroh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> The only part I don't like is adding MaxKeepAliveRequests, which I believe\n> is just unnecessary complexity and implies that it needs to be set.  The\n> number of requests per connection doesn't mean something in a Go world like\n> it does in a child-process-per-connection Apache-style world.\nabsolutely.\nOne of this purpose is to protect a process against some kind of memory leaks, so there is no need to do this.\n\n> Can you make the tests still work without MaxKeepAliveRequests?\n> \n> Also, the http.Server struct was modified in another CL, so that part of\n> the CL wouldn't apply cleanly anyway.  But let's try to do this without it.\nI just realized it's time to use the Hijack... right?\n\nI'll do it tomorrow.\n\nThank you for your time!",
			"disapproval": false,
			"date": "2012-01-19 14:37:56.138763",
			"approval": false
		},
		{
			"sender": "yoshiyuki.kanno@stoic.co.jp",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"nekotaroh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, nekotaroh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-22 00:21:30.797272",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"nekotaroh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looking much better and simpler, thanks!  Almost there.\n\nFew more comments in the test....\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go\nFile src/pkg/net/http/client_test.go (right):\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go#newcode435\nsrc/pkg/net/http/client_test.go:435: transport_dl_close_probability = 25  // probability(0-100) of server side close\nno underscores in variable names.\n\nyou can also move this whole const ( .... ) block inside the TestClientTransportDeadline function, and then you can remove the \"transport_dl_\" prefix.\n\nconst (\n   closeProbability = 25 // ...\n   numRequests = 1e4  // ...\n   parallel = 8  // ...\n)\n\nvar (\n   timeout = 30 * time.Second\n   readTImeout = 100 * time.Millisecond\n)\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go#newcode442\nsrc/pkg/net/http/client_test.go:442: func TestClientTransportDeadlock(t *testing.T) {\ncan this test run for a long time?  It looks like it?  You'll probably want to skip this test in short mode.\n\nhttp://weekly.golang.org/pkg/testing/#Short\n\nif testing.Short() {\n    t.Logf(\"skipping in short mode\")\n    return\n}\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go#newcode443\nsrc/pkg/net/http/client_test.go:443: client := &Client{Transport: &Transport{MaxIdleConnsPerHost: transport_dl_parallel}}\nbreak this into multiple lines.\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go#newcode455\nsrc/pkg/net/http/client_test.go:455: conn, buf, _ := hijacker.Hijack()\nnice.  :-)\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go#newcode465\nsrc/pkg/net/http/client_test.go:465: timeout := func() <-chan time.Time {\ndelete this function.\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go#newcode481\nsrc/pkg/net/http/client_test.go:481: case <-timeout():\ncase <-time.After(timeout):\n\nhttp://codereview.appspot.com/5532057/diff/12001/src/pkg/net/http/client_test.go#newcode482\nsrc/pkg/net/http/client_test.go:482: panic(fmt.Sprintf(\"probably dead locked at %v  panic for stack trace\", idx))\nt.Fatalf(\"....\")\n\n(people debugging this later can change this to a panic if they want backtraces.",
			"disapproval": false,
			"date": "2012-01-21 16:39:23.940524",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Unfortunately the test doesn't pass on my machine.\n\nI'll take a look at writing a different test, but I'm pretty sure I'll take\nyour fix to the non-test part.\n\n\nOn Sat, Jan 21, 2012 at 4:21 PM, <yoshiyuki.kanno@stoic.co.jp> wrote:\n\n> Hello golang-dev@googlegroups.com, bradfitz@golang.org,\n> nekotaroh@gmail.com (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5532057/<http://codereview.appspot.com/5532057/>\n>\n",
			"disapproval": false,
			"date": "2012-01-24 05:46:16.195242",
			"approval": false
		},
		{
			"sender": "nekotaroh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oops.\nSince This new test is executed in parallel(default is 8), this behavior\nmight affect the failed result depends on num of core, GO_MAX_PLOCS, and so\non.  Previous one is equal to setting to 'parallel is 1' and 'numrequests\nis 1e5' .\n2012/01/24 14:46 \"Brad Fitzpatrick\" <bradfitz@golang.org>:\n>\n> Unfortunately the test doesn't pass on my machine.\n>\n> I'll take a look at writing a different test, but I'm pretty sure I'll\ntake your fix to the non-test part.\n>\n>\n> On Sat, Jan 21, 2012 at 4:21 PM, <yoshiyuki.kanno@stoic.co.jp> wrote:\n>>\n>> Hello golang-dev@googlegroups.com, bradfitz@golang.org,\n>> nekotaroh@gmail.com (cc: golang-dev@googlegroups.com),\n>>\n>> Please take another look.\n>>\n>>\n>> http://codereview.appspot.com/5532057/\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-24 07:13:00.297172",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI've submitted a more reliable test.  Submitting just the transport.go part\n(the actual fix) part of this CL.\n\nThanks again!\n\n\nOn Mon, Jan 23, 2012 at 11:13 PM, yoshiyuki kanno <nekotaroh@gmail.com>wrote:\n\n> Oops.\n> Since This new test is executed in parallel(default is 8), this behavior\n> might affect the failed result depends on num of core, GO_MAX_PLOCS, and so\n> on.  Previous one is equal to setting to 'parallel is 1' and 'numrequests\n> is 1e5' .\n> 2012/01/24 14:46 \"Brad Fitzpatrick\" <bradfitz@golang.org>:\n>\n> >\n> > Unfortunately the test doesn't pass on my machine.\n> >\n> > I'll take a look at writing a different test, but I'm pretty sure I'll\n> take your fix to the non-test part.\n> >\n> >\n> > On Sat, Jan 21, 2012 at 4:21 PM, <yoshiyuki.kanno@stoic.co.jp> wrote:\n> >>\n> >> Hello golang-dev@googlegroups.com, bradfitz@golang.org,\n> >> nekotaroh@gmail.com (cc: golang-dev@googlegroups.com),\n> >>\n> >> Please take another look.\n> >>\n> >>\n> >> http://codereview.appspot.com/5532057/\n> >\n> >\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-25 22:59:58.353781",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"yoshiyuki.kanno@stoic.co.jp",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"nekotaroh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f57165f82a11 ***\n\nnet/http: fix Transport deadlock\n\nThis patch intend to fix following issues.\nhttp://code.google.com/p/go/issues/detail?id=2616\n\nFixes issue 2616.\n\nR=golang-dev, bradfitz, nekotaroh\nCC=golang-dev\nhttp://codereview.appspot.com/5532057\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-01-25 23:00:44.904191",
			"approval": false
		}
	],
	"owner_email": "yoshiyuki.kanno@stoic.co.jp",
	"private": false,
	"base_url": "",
	"owner": "ykanno",
	"subject": "code review 5532057: http: fix Transport deadlock",
	"created": "2012-01-10 06:07:30.617651",
	"patchsets": [
		1,
		2001,
		6001,
		12001,
		6
	],
	"modified": "2012-01-25 23:00:44.904191",
	"closed": false,
	"issue": 5532057
}