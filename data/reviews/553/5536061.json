{
	"description": "godoc: support canonical Paths in HTML metadata\n\nRedirect to the canonical path when the old path is accessed.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nnice!\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/godoc.go#newcode1317\nsrc/cmd/godoc/godoc.go:1317: if end == -1 {\nend < 0\n\nthat way you don't rely on a specific return value, only on an index that is clearly invalid (also, the generated code is shorter)\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/godoc.go#newcode1377\nsrc/cmd/godoc/godoc.go:1377: var refreshMetadataSignal = make(chan bool, 1)\nadd a comment why this is buffered\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (right):\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/main.go#newcode340\nsrc/cmd/godoc/main.go:340: // Continuously refresh metadata.\ns/Continuously/Periodically/\n\n(it's not all the time)",
			"disapproval": false,
			"date": "2012-01-19 17:05:47.063149",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-01-19 02:16:41.132228",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode726\nsrc/cmd/godoc/godoc.go:726: n, meta, err := decodeMetadata(src)\nmeta, src, err := extractMeta(src)\n\n(see comment below)\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode730\nsrc/cmd/godoc/godoc.go:730: src = src[n:]\nget rid of this\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode745\nsrc/cmd/godoc/godoc.go:745: func decodeMetadata(b []byte) (n int, m Metadata, err error) {\nperhaps nicer to have this function do all the work:\n\n// extractMeta splits off any traling metadata from text and\n// returns that data and the rest of text.\nfunc extractMeta(text []byte) (meta Metadata, tail []byte, err error) ...\n\ni.e., it splits the text into the meta and the tail portion. No need to deal with the n for the caller.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode745\nsrc/cmd/godoc/godoc.go:745: func decodeMetadata(b []byte) (n int, m Metadata, err error) {\nalso: I would put this function above serveHTMLDoc - that's at least the convention for most code in this file. \n\nor better: put all the metadata related helper functions together as you have already started to below\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1327\nsrc/cmd/godoc/godoc.go:1327: // docMetadata() returns true if the doc paths are not older than any of\ns/docMetadata/docMetadataUpToDate/\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1341\nsrc/cmd/godoc/godoc.go:1341: var scan func(string)\nperhaps add comment for reader (explains why := doesn't work)\n\nvar scan func(string) // scan is recursive\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1345\nsrc/cmd/godoc/godoc.go:1345: log.Println(\"updateDocPaths:\", err)\n\"updateDocMetadata:\" ?\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1349\nsrc/cmd/godoc/godoc.go:1349: n := filepath.Join(dir, fi.Name())\ns/n/filename/\n\nI think of n as an int value\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1357\nsrc/cmd/godoc/godoc.go:1357: //\nincomplete comment\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1369\nsrc/cmd/godoc/godoc.go:1369: m.filePath = n[len(*goroot):]\nwe know that *goroot ends in / ?\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1386\nsrc/cmd/godoc/godoc.go:1386: func pathMetadata(p string) *Metadata {\nmetadataFor ?\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1386\nsrc/cmd/godoc/godoc.go:1386: func pathMetadata(p string) *Metadata {\ns/p/filename/ ?\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1388\nsrc/cmd/godoc/godoc.go:1388: if m, ok := paths.(map[string]*Metadata)[p]; ok {\nI think you can just return\n\npaths.(map[string]*Metadata)[p]\n\nhere. If it doesn't exist, it will be nil (perhaps add comment: // nil if not present)\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1497\nsrc/cmd/godoc/godoc.go:1497: if !docMetadataUpToDate() {\nCan we do this in a separate goroutine and leave the indexer code as is? This will make it easier to make independent changes. As is, this code becomes all connected.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (left):\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/main.go#oldcode341\nsrc/cmd/godoc/main.go:341: if *indexEnabled {\nI would prefer to leave this as is, and instead have a separate goroutine for the metadata.",
			"disapproval": false,
			"date": "2012-01-19 06:31:41.406358",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0903fe3ce2fa ***\n\ngodoc: support canonical Paths in HTML metadata\n\nRedirect to the canonical path when the old path is accessed.\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/5536061\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/godoc.go#newcode1317\nsrc/cmd/godoc/godoc.go:1317: if end == -1 {\nOn 2012/01/19 17:05:47, gri wrote:\n> end < 0\n> \n> that way you don't rely on a specific return value, only on an index that is\n> clearly invalid (also, the generated code is shorter)\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/godoc.go#newcode1377\nsrc/cmd/godoc/godoc.go:1377: var refreshMetadataSignal = make(chan bool, 1)\nOn 2012/01/19 17:05:47, gri wrote:\n> add a comment why this is buffered\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (right):\n\nhttp://codereview.appspot.com/5536061/diff/4006/src/cmd/godoc/main.go#newcode340\nsrc/cmd/godoc/main.go:340: // Continuously refresh metadata.\nOn 2012/01/19 17:05:47, gri wrote:\n> s/Continuously/Periodically/\n> \n> (it's not all the time)\n\nDone.",
			"disapproval": false,
			"date": "2012-01-19 20:37:45.441179",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode726\nsrc/cmd/godoc/godoc.go:726: n, meta, err := decodeMetadata(src)\nOn 2012/01/19 06:31:41, gri wrote:\n> meta, src, err := extractMeta(src)\n> \n> (see comment below)\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode730\nsrc/cmd/godoc/godoc.go:730: src = src[n:]\nOn 2012/01/19 06:31:41, gri wrote:\n> get rid of this\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode745\nsrc/cmd/godoc/godoc.go:745: func decodeMetadata(b []byte) (n int, m Metadata, err error) {\nOn 2012/01/19 06:31:41, gri wrote:\n> perhaps nicer to have this function do all the work:\n> \n> // extractMeta splits off any traling metadata from text and\n> // returns that data and the rest of text.\n> func extractMeta(text []byte) (meta Metadata, tail []byte, err error) ...\n> \n> i.e., it splits the text into the meta and the tail portion. No need to deal\n> with the n for the caller.\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode745\nsrc/cmd/godoc/godoc.go:745: func decodeMetadata(b []byte) (n int, m Metadata, err error) {\nOn 2012/01/19 06:31:41, gri wrote:\n> also: I would put this function above serveHTMLDoc - that's at least the\n> convention for most code in this file. \n> \n> or better: put all the metadata related helper functions together as you have\n> already started to below\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1327\nsrc/cmd/godoc/godoc.go:1327: // docMetadata() returns true if the doc paths are not older than any of\nOn 2012/01/19 06:31:41, gri wrote:\n> s/docMetadata/docMetadataUpToDate/\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1341\nsrc/cmd/godoc/godoc.go:1341: var scan func(string)\nOn 2012/01/19 06:31:41, gri wrote:\n> perhaps add comment for reader (explains why := doesn't work)\n> \n> var scan func(string) // scan is recursive\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1345\nsrc/cmd/godoc/godoc.go:1345: log.Println(\"updateDocPaths:\", err)\nOn 2012/01/19 06:31:41, gri wrote:\n> \"updateDocMetadata:\" ?\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1349\nsrc/cmd/godoc/godoc.go:1349: n := filepath.Join(dir, fi.Name())\nOn 2012/01/19 06:31:41, gri wrote:\n> s/n/filename/\n> \n> I think of n as an int value\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1357\nsrc/cmd/godoc/godoc.go:1357: //\nOn 2012/01/19 06:31:41, gri wrote:\n> incomplete comment\n\nFixed.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1369\nsrc/cmd/godoc/godoc.go:1369: m.filePath = n[len(*goroot):]\nOn 2012/01/19 06:31:41, gri wrote:\n> we know that *goroot ends in / ?\n\nActually, we rely on it _not_ beginning with /. Probably not a good idea. Will fix.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1386\nsrc/cmd/godoc/godoc.go:1386: func pathMetadata(p string) *Metadata {\nOn 2012/01/19 06:31:41, gri wrote:\n> metadataFor ?\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1386\nsrc/cmd/godoc/godoc.go:1386: func pathMetadata(p string) *Metadata {\nOn 2012/01/19 06:31:41, gri wrote:\n> s/p/filename/ ?\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1388\nsrc/cmd/godoc/godoc.go:1388: if m, ok := paths.(map[string]*Metadata)[p]; ok {\nOn 2012/01/19 06:31:41, gri wrote:\n> I think you can just return\n> \n> paths.(map[string]*Metadata)[p]\n> \n> here. If it doesn't exist, it will be nil (perhaps add comment: // nil if not\n> present)\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/godoc.go#newcode1497\nsrc/cmd/godoc/godoc.go:1497: if !docMetadataUpToDate() {\nOn 2012/01/19 06:31:41, gri wrote:\n> Can we do this in a separate goroutine and leave the indexer code as is? This\n> will make it easier to make independent changes. As is, this code becomes all\n> connected.\n\nDone.\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (left):\n\nhttp://codereview.appspot.com/5536061/diff/3001/src/cmd/godoc/main.go#oldcode341\nsrc/cmd/godoc/main.go:341: if *indexEnabled {\nOn 2012/01/19 06:31:41, gri wrote:\n> I would prefer to leave this as is, and instead have a separate goroutine for\n> the metadata.\n\nDone.",
			"disapproval": false,
			"date": "2012-01-19 08:40:04.647676",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5536061: godoc: support canonical Paths in HTML metadata",
	"created": "2012-01-19 02:09:33.955507",
	"patchsets": [
		1,
		2001,
		3001,
		4001,
		4006,
		1015
	],
	"modified": "2012-01-19 20:37:51.099003",
	"closed": true,
	"issue": 5536061
}