{
	"description": "libmach: cross compiling support\n        We already use GOHOSTOS to represent the host OS that the toolchain\n        will be run on, so no need to resort to uname(1) to get that (and\n        use uname(1) will make cross-compiling for another host impossible).",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-09 08:43:09.111122",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Gentle ping.\n\nIMHO, this CL make the libmach/Makefile's intent more clear and \nthe handling of $GOHOSTARCH more consistent.\n(Why only windows is a special case? Why disregard all the other \nvalues for $GOHOSTARCH?)\n\nThis CL certainly won't break anything, but it makes cross compiling \nGo distribution for another architecture possible (this capability \nis useful for low-powered architectures like ARM).\n\nAlso, I could provide an wiki entry explaining how to do this.\n(Also consider we don't have a Plan 9 builder, this could help if\nwe could make a Plan 9 cross compiler available [at least build\nwon't break on Plan 9].)",
			"disapproval": false,
			"date": "2012-01-20 12:12:10.799484",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-01-20 18:30:28.216225",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8fc7d691465c ***\n\nlibmach: cross compiling support\n        We already use GOHOSTOS to represent the host OS that the toolchain\n        will be run on, so no need to resort to uname(1) to get that (and\n        use uname(1) will make cross-compiling for another host impossible).\n\nR=rsc, golang-dev\nCC=golang-dev\nhttp://codereview.appspot.com/5530050\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-01-20 18:34:32.408344",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5530050: libmach: cross compiling support",
	"created": "2012-01-09 08:41:28.421275",
	"patchsets": [
		1,
		4001
	],
	"modified": "2012-01-22 18:09:39.449466",
	"closed": true,
	"issue": 5530050
}