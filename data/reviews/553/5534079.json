{
	"description": "gc: ordering guarantees for inlining\n\nFixes issue 2470.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-22 11:04:28.691702",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-18 15:42:43.105744",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 15:42:43, lvd wrote:\n> Hello mailto:rsc@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nactually, maybe i should split this in the fixes and the criteria changes, and ditch the -lll logic. \n\nsuggestions for better values for budget are welcome.  Ken told me his first one was \"less than 40 nodes\". \n\nnote also that -lll trips up errchk in escape2.go.  i'll fix that when we decide to switch this on by default.",
			"disapproval": false,
			"date": "2012-01-18 15:45:52.504500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please fix the ordering issues in a separate CL\nrather than adding to this one.  thanks.\n(maybe that was your plan all along.)\n",
			"disapproval": false,
			"date": "2012-01-19 19:24:35.894794",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/19 19:24:35, rsc wrote:\n> please fix the ordering issues in a separate CL\n> rather than adding to this one.  thanks.\n> (maybe that was your plan all along.)\n\ni renamed this CL and took out the softer criteria, so this is now just the ordering fixes.",
			"disapproval": false,
			"date": "2012-01-22 11:01:18.499326",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I reverted this to the state where i think it is the minimal fix for the problem introduced by inl.c.  \n\nOn 2012/01/23 16:27:33, rsc wrote:\n> http://codereview.appspot.com/5534079/diff/21002/src/cmd/gc/cplx.c\n> File src/cmd/gc/cplx.c (right):\n> \n> http://codereview.appspot.com/5534079/diff/21002/src/cmd/gc/cplx.c#newcode215\n> src/cmd/gc/cplx.c:215: case OSTMTEXPR:\n> I am scared of this.  How can this happen?\n\nthe OSTMTEXPR has to get past either cgen or agen and cgen jumps into complexgen before the switch for expressions of complext type.  so these 3 are the only places that need to handle it.  and esc.c of course.",
			"disapproval": false,
			"date": "2012-01-25 15:28:19.774817",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 25, 2012 at 17:17, Russ Cox <rsc@golang.org> wrote:\n> The problem with handling OSTMTEXPR in the back end\n> in places like agen is that calling gen on a stmt assumes\n> there are no registers allocated, while in a place like agen\n> there are almost certainly registers allocated, so a complex\n> enough program is likely to run out of registers or otherwise\n> mishandle them. \u00a0This belongs in the front end.\n>\n> I have a different ordering fix in progress that handles\n> problems beyond those turned up by inlining and will not\n> require telling the back ends about OSTMTEXPR.\n> In fact it may not require OSTMTEXPR at all.\n\nthats even more wonderful.\n\n\n>\n> Russ\n",
			"disapproval": false,
			"date": "2012-01-25 16:20:32.767847",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5534079/diff/21002/src/cmd/gc/cplx.c\nFile src/cmd/gc/cplx.c (right):\n\nhttp://codereview.appspot.com/5534079/diff/21002/src/cmd/gc/cplx.c#newcode215\nsrc/cmd/gc/cplx.c:215: case OSTMTEXPR:\nI am scared of this.  How can this happen?",
			"disapproval": false,
			"date": "2012-01-23 16:27:33.942474",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5534079/diff/13012/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/5534079/diff/13012/src/cmd/gc/go.h#newcode483\nsrc/cmd/gc/go.h:483: OSTMTEXPR,\t// an expression with an init statement list, as left behind by inlining.\nNot specific to inlining.\n\n// n->nbody; then evaluate n->left\n\nhttp://codereview.appspot.com/5534079/diff/13012/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5534079/diff/13012/src/cmd/gc/inl.c#newcode274\nsrc/cmd/gc/inl.c:274: utemp(Type *t)\ns/u/used/\n\nhttp://codereview.appspot.com/5534079/diff/13012/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttp://codereview.appspot.com/5534079/diff/13012/src/cmd/gc/walk.c#newcode760\nsrc/cmd/gc/walk.c:760: case OSTMTEXPR:\nThe walk function needs to append complex side effects\nlike statements to init in the order in which they are to be\nperformed.  This code leaves n->nbody alone but \nthen appends side effects of n->left to init, which will\ncause them to happen before n->nbody.\nRight now there are no side effects in the OSTMTEXPRs we\nhave created, but we should nonetheless get the ordering\nright.  They must come after n->nbody.\nThere are two possibilities:\n\n1.  Append the side effects to n->nbody.\nwalkstmtlist(n->nbody);\nwalkexpr(&n->left, &n->nbody);\ngoto ret;\n\n2.  Append n->nbody to init and get rid of n entirely.\nwalkstmtlist(n->nbody);\n*init = concat(*init, n->nbody);\nwalkexpr(&n->left, init);\nn = n->left;\ngoto ret;\n\nI lean toward #2, because you will then be able to remove the\nneed for a case OSTMTEXPR in the back end entirely.",
			"disapproval": false,
			"date": "2012-01-23 15:50:11.295125",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-23 16:18:07.342643",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The problem with handling OSTMTEXPR in the back end\nin places like agen is that calling gen on a stmt assumes\nthere are no registers allocated, while in a place like agen\nthere are almost certainly registers allocated, so a complex\nenough program is likely to run out of registers or otherwise\nmishandle them.  This belongs in the front end.\n\nI have a different ordering fix in progress that handles\nproblems beyond those turned up by inlining and will not\nrequire telling the back ends about OSTMTEXPR.\nIn fact it may not require OSTMTEXPR at all.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-25 16:17:55.266371",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-26 09:13:59.642009",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5534079: gc: ordering guarantees for inlining",
	"created": "2012-01-12 15:10:40.473672",
	"patchsets": [
		1,
		2001,
		4001,
		5002,
		8001,
		9003,
		10001,
		13003,
		15001,
		13006,
		3006,
		14002,
		11040,
		17001,
		18001,
		13012,
		21002,
		22002,
		23036,
		24003
	],
	"modified": "2012-01-26 09:14:00.789555",
	"closed": true,
	"issue": 5534079
}