{
	"description": "compress/flate: shrink decompressor struct for better performance\n\n    structs containining pointers get treated as sizeof(struct)/sizeof(void*)\n    potential pointers by the GC. Replacing embedded arrays with pointers to arrays\nshrinks the struct, reducing GC load.\n\n    Fixes issue 2703.",
	"cc": [
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5536078/diff/3001/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttp://codereview.appspot.com/5536078/diff/3001/src/pkg/compress/flate/inflate.go#newcode213\nsrc/pkg/compress/flate/inflate.go:213: bits     []int // size: maxLit + maxDist\nHas this change been tested on i386?",
			"disapproval": false,
			"date": "2012-01-20 10:37:38.798511",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/20 19:04:56, rsc wrote:\n> It is too close to Go 1 to be making fundamental changes\n> to core pieces of the runtime.\n> \n> What is calling ReadFrom?  That reads until EOF, so it\n> is easy to believe it would be an unbounded amount of\n> data.  It might not be a GC bug, just buggy Go code.\n> \n> Russ\n\nLocally, I implemented an experimental version of a GC that can (in many cases, not in all cases) track types of structs and arrays allocated on the heap.\n\nConclusions:\n\n1. The modified GC enables the ZIP decompression program (issue 2703) to run \"infinitely\" on i386. However, the RSS at which memory consumption stabilizes varies from run to run (such as: 180MB, 100MB, ...). The program may still run out of memory - but with a lower probability than in case of the unmodified GC.\n\n2. In the modified GC (as well as in the unmodified GC), large memory allocations (such as: make([]byte, 16*1e6)) have a very high probability of being referred to from integer values in the program's .data and .bss sections. This is caused by http://code.google.com/p/go/source/browse/src/pkg/runtime/mgc0.c?name=weekly.2012-01-20#635",
			"disapproval": false,
			"date": "2012-01-22 14:50:20.237897",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Woops, this doesn't work completely... It just slows the leak by about 15%. (I wasn't testing with large enough zip files)\n\nGopprof indicates that bytes.(*Buffer).ReadFrom (bytes/buffer.go:136) is the source of the memory that's eventually leaked. I'm not sure where the other false pointers are coming from.\n\nThe proper fix to this is making Go's GC precise.\n\nI know it's going to get replaced eventually, but it might not be a difficult change. Don't objects already carry type information for reflection? Could we put is-a-pointer member information into that?",
			"disapproval": false,
			"date": "2012-01-20 18:19:39.528189",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nI just tried this CL on darwin/386 using the OP's original test case without success.",
			"disapproval": false,
			"date": "2012-01-20 10:51:59.652984",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this change looks good, but could you please add\na test that both confirms the fix and makes sure we don't\nbreak it again in the future?\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-20 17:42:35.474534",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-20 10:09:47.684668",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5536078/diff/3001/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttp://codereview.appspot.com/5536078/diff/3001/src/pkg/compress/flate/inflate.go#newcode217\nsrc/pkg/compress/flate/inflate.go:217: hist  []byte // size: maxHist + maxDist\nsize: maxHist",
			"disapproval": false,
			"date": "2012-01-20 10:38:03.450723",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 20, 2012 at 06:07,  <0xE2.0x9A.0x9B@gmail.com> wrote:\n> I believe issue 2703 cannot be fixed without reprogramming the garbage\n> collector a bit. The first step would be to annotate memory allocations\n> with type information.\n\nThe garbage collector does skip over allocated blocks that do not\ncontain pointers.  Thus I would expect this change to have the desired\neffect.  Am I missing something?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-20 17:42:06.688887",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is too close to Go 1 to be making fundamental changes\nto core pieces of the runtime.\n\nWhat is calling ReadFrom?  That reads until EOF, so it\nis easy to believe it would be an unbounded amount of\ndata.  It might not be a GC bug, just buggy Go code.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-20 19:04:56.219781",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "wow.",
			"disapproval": false,
			"date": "2012-01-20 10:34:16.322625",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/20 10:51:59, dfc wrote:\n> Hello,\n> \n> I just tried this CL on darwin/386 using the OP's original test case without\n> success.\n\nI believe issue 2703 cannot be fixed without reprogramming the garbage collector a bit. The first step would be to annotate memory allocations with type information.",
			"disapproval": false,
			"date": "2012-01-20 11:07:35.639786",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jan 22, 2012 at 6:50 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\n\n> On 2012/01/20 19:04:56, rsc wrote:\n>\n>> It is too close to Go 1 to be making fundamental changes\n>> to core pieces of the runtime.\n>>\n>\n>  What is calling ReadFrom?  That reads until EOF, so it\n>> is easy to believe it would be an unbounded amount of\n>> data.  It might not be a GC bug, just buggy Go code.\n>>\n>\n>  Russ\n>>\n>\n> Locally, I implemented an experimental version of a GC that can (in many\n> cases, not in all cases) track types of structs and arrays allocated on\n> the heap.\n>\n> Conclusions:\n>\n> 1. The modified GC enables the ZIP decompression program (issue 2703) to\n> run \"infinitely\" on i386. However, the RSS at which memory consumption\n> stabilizes varies from run to run (such as: 180MB, 100MB, ...). The\n> program may still run out of memory - but with a lower probability than\n> in case of the unmodified GC.\n>\n> 2. In the modified GC (as well as in the unmodified GC), large memory\n> allocations (such as: make([]byte, 16*1e6)) have a very high probability\n> of being referred to from integer values in the program's .data and .bss\n> sections. This is caused by\n> http://code.google.com/p/go/**source/browse/src/pkg/runtime/**\n> mgc0.c?name=weekly.2012-01-20#**635<http://code.google.com/p/go/source/browse/src/pkg/runtime/mgc0.c?name=weekly.2012-01-20#635>\n>\n>\nIan Taylor proposed to split .data into 2 parts: one that has no pointers\n(like [1024]float64) and one that can potentially contain pointers. It\nshould improve situation:\nhttp://code.google.com/p/go/issues/detail?id=2297&q=386%20gc&colspec=ID%20Status%20Stars%20Priority%20Owner%20Reporter%20Summary\n\nHow does your patch affects performance? It should not considerably\nslowdown 64bit.\n",
			"disapproval": false,
			"date": "2012-01-23 06:40:19.346741",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/23 06:40:19, dvyukov wrote:\n> Ian Taylor proposed to split .data into 2 parts: one that has no pointers\n> (like [1024]float64) and one that can potentially contain pointers. It\n> should improve situation:\n> http://code.google.com/p/go/issues/detail?id=2297\n\nThat is an interesting idea. But it cannot handle structs containing pointers and integer values.\n\nIn my opinion, the right solution would be for the linker to emit an array of (offset,type) and put the array in .rodata section.\n\n> How does your patch affect performance?\n> It should not considerably slowdown 64bit.\n\nI didn't optimize it yet. It has O(N^2) time complexity if the type is a struct (N is the number of fields in the struct). Once optimized, performance should be comparable to the current implementation.\n\nA major problem is how would I publish the patch for inclusion in Go.",
			"disapproval": false,
			"date": "2012-01-23 11:50:54.810728",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 01:40, Dmitry Vyukov <dvyukov@google.com> wrote:\n> Ian Taylor proposed to split .data into 2 parts: one that has no pointers\n> (like [1024]float64) and one that can potentially contain pointers.\n\nThat only helps with static data, not allocated data.\n",
			"disapproval": false,
			"date": "2012-01-23 15:10:37.715125",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 3:50 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\n\n>\n> A major problem is how would I publish the patch for inclusion in Go.\n>\n\nhttp://golang.org/doc/contribute.html\n\nOr is the problem more from your employer's reservations?\n",
			"disapproval": false,
			"date": "2012-01-23 19:12:16.987477",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/23 19:12:16, bradfitz wrote:\n> On Mon, Jan 23, 2012 at 3:50 AM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> \n> >\n> > A major problem is how would I publish the patch for inclusion in Go.\n> >\n> \n> http://golang.org/doc/contribute.html\n\nI am unable to publish my name (psychological issues) for inclusion in the CONTRIBUTORS file.\n\n> Or is the problem more from your employer's reservations?\n\nWell, if I was employed I would be having a smaller number of psychological issues. I believe my first jobs were a lie.\n\nWorking for Google (country=Slovakia) to improve golang would be nice, but I believe/suspect it is impossible.",
			"disapproval": false,
			"date": "2012-01-24 13:16:06.258549",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"hitchmanr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:41:46.402349",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nAs you are now a contributor, would you be interested reviving this CL ?\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-07-06 10:44:24.604300",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nI just benchmarked this CL against tip (b855390a295f) and it provides substantial improvement. Do you plan to submit this CL ?\n\nCheers\n\nDave\n\npando(~/go/src/pkg/compress/flate) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkDecodeDigitsSpeed1e4         3384888      2974609  -12.12%\nBenchmarkDecodeDigitsSpeed1e5        26885680     23783570  -11.54%\nBenchmarkDecodeDigitsSpeed1e6       262377800    231668100  -11.70%\nBenchmarkDecodeDigitsDefault1e4       3263000      2858429  -12.40%\nBenchmarkDecodeDigitsDefault1e5      24915460     22427060   -9.99%\nBenchmarkDecodeDigitsDefault1e6     231527700    207492000  -10.38%\nBenchmarkDecodeDigitsCompress1e4      3126282      2861908   -8.46%\nBenchmarkDecodeDigitsCompress1e5     24910590     22414550  -10.02%\nBenchmarkDecodeDigitsCompress1e6    231784100    207601900  -10.43%\nBenchmarkDecodeTwainSpeed1e4          3254090      3028992   -6.92%\nBenchmarkDecodeTwainSpeed1e5         25270080     22948920   -9.19%\nBenchmarkDecodeTwainSpeed1e6        241912900    219360300   -9.32%\nBenchmarkDecodeTwainDefault1e4        2988098      2765716   -7.44%\nBenchmarkDecodeTwainDefault1e5       20900880     18910220   -9.52%\nBenchmarkDecodeTwainDefault1e6      194210800    177212500   -8.75%\nBenchmarkDecodeTwainCompress1e4       2987182      2671386  -10.57%\nBenchmarkDecodeTwainCompress1e5      20824580     18831790   -9.57%\nBenchmarkDecodeTwainCompress1e6     193365500    175839200   -9.06%\nBenchmarkEncodeDigitsSpeed1e4        12754820     11400760  -10.62%\nBenchmarkEncodeDigitsSpeed1e5        54029540     52534800   -2.77%\nBenchmarkEncodeDigitsSpeed1e6       475781400    471545400   -0.89%\nBenchmarkEncodeDigitsDefault1e4      14909680     13540340   -9.18%\nBenchmarkEncodeDigitsDefault1e5     195452900    192239400   -1.64%\nBenchmarkEncodeDigitsDefault1e6    2130768000   2127930000   -0.13%\nBenchmarkEncodeDigitsCompress1e4     14862670     13577580   -8.65%\nBenchmarkEncodeDigitsCompress1e5    195816100    192391900   -1.75%\nBenchmarkEncodeDigitsCompress1e6   2130616000   2127899000   -0.13%\nBenchmarkEncodeTwainSpeed1e4         12985530     11785880   -9.24%\nBenchmarkEncodeTwainSpeed1e5         47603160     46506960   -2.30%\nBenchmarkEncodeTwainSpeed1e6        397772200    392651400   -1.29%\nBenchmarkEncodeTwainDefault1e4       15671080     14472960   -7.65%\nBenchmarkEncodeTwainDefault1e5      161242700    158978300   -1.40%\nBenchmarkEncodeTwainDefault1e6     1661224000   1651611000   -0.58%\nBenchmarkEncodeTwainCompress1e4      15765990     14627990   -7.22%\nBenchmarkEncodeTwainCompress1e5     204476900    202880800   -0.78%\nBenchmarkEncodeTwainCompress1e6    2216370000   2210541000   -0.26%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkDecodeDigitsSpeed1e4            2.95         3.36    1.14x\nBenchmarkDecodeDigitsSpeed1e5            3.72         4.20    1.13x\nBenchmarkDecodeDigitsSpeed1e6            3.81         4.32    1.13x\nBenchmarkDecodeDigitsDefault1e4          3.06         3.50    1.14x\nBenchmarkDecodeDigitsDefault1e5          4.01         4.46    1.11x\nBenchmarkDecodeDigitsDefault1e6          4.32         4.82    1.12x\nBenchmarkDecodeDigitsCompress1e4         3.20         3.49    1.09x\nBenchmarkDecodeDigitsCompress1e5         4.01         4.46    1.11x\nBenchmarkDecodeDigitsCompress1e6         4.31         4.82    1.12x\nBenchmarkDecodeTwainSpeed1e4             3.07         3.30    1.07x\nBenchmarkDecodeTwainSpeed1e5             3.96         4.36    1.10x\nBenchmarkDecodeTwainSpeed1e6             4.13         4.56    1.10x\nBenchmarkDecodeTwainDefault1e4           3.35         3.62    1.08x\nBenchmarkDecodeTwainDefault1e5           4.78         5.29    1.11x\nBenchmarkDecodeTwainDefault1e6           5.15         5.64    1.10x\nBenchmarkDecodeTwainCompress1e4          3.35         3.74    1.12x\nBenchmarkDecodeTwainCompress1e5          4.80         5.31    1.11x\nBenchmarkDecodeTwainCompress1e6          5.17         5.69    1.10x\nBenchmarkEncodeDigitsSpeed1e4            0.78         0.88    1.13x\nBenchmarkEncodeDigitsSpeed1e5            1.85         1.90    1.03x\nBenchmarkEncodeDigitsSpeed1e6            2.10         2.12    1.01x\nBenchmarkEncodeDigitsDefault1e4          0.67         0.74    1.10x\nBenchmarkEncodeDigitsDefault1e5          0.51         0.52    1.02x\nBenchmarkEncodeDigitsDefault1e6          0.47         0.47    1.00x\nBenchmarkEncodeDigitsCompress1e4         0.67         0.74    1.10x\nBenchmarkEncodeDigitsCompress1e5         0.51         0.52    1.02x\nBenchmarkEncodeDigitsCompress1e6         0.47         0.47    1.00x\nBenchmarkEncodeTwainSpeed1e4             0.77         0.85    1.10x\nBenchmarkEncodeTwainSpeed1e5             2.10         2.15    1.02x\nBenchmarkEncodeTwainSpeed1e6             2.51         2.55    1.02x\nBenchmarkEncodeTwainDefault1e4           0.64         0.69    1.08x\nBenchmarkEncodeTwainDefault1e5           0.62         0.63    1.02x\nBenchmarkEncodeTwainDefault1e6           0.60         0.61    1.02x\nBenchmarkEncodeTwainCompress1e4          0.63         0.68    1.08x\nBenchmarkEncodeTwainCompress1e5          0.49         0.49    1.00x\nBenchmarkEncodeTwainCompress1e6          0.45         0.45    1.00x",
			"disapproval": false,
			"date": "2012-08-13 02:41:10.156250",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll submit the CL if desired. It's currently a bandage to hide how broken the GC is on x86, but might be okay with a \"TODO: reconsider this when we get a precise GC\"",
			"disapproval": false,
			"date": "2012-08-13 18:55:38.756420",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you please run hg mail again to bring this CL current with trunk.\r\n\r\nOn Tue, Aug 14, 2012 at 4:55 AM,  <hitchmanr@gmail.com> wrote:\r\n> I'll submit the CL if desired. It's currently a bandage to hide how\r\n> broken the GC is on x86, but might be okay with a \"TODO: reconsider this\r\n> when we get a precise GC\"\r\n>\r\n> http://codereview.appspot.com/5536078/\r\n",
			"disapproval": false,
			"date": "2012-08-13 23:11:13.718500",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you please run hg mail again to bring this CL current with trunk.",
			"disapproval": false,
			"date": "2012-10-22 05:00:48.572140",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "r14401 seems to have stolen most of the performance improvements, I'm seeing fractions of a percentage difference on x64, and ~1% speedup on ARM.\n\nCode to exhibit the pathological zip reading: http://play.golang.org/p/ujK9UdqNZt",
			"disapproval": false,
			"date": "2012-10-25 08:05:32.102620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/25 06:57:36, rmmh wrote:\n> Hello mailto:dave@cheney.net (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\npando(~/go/src/pkg/compress/flate) % go test -test.bench=. \n# compress/flate\n./inflate.go:12: imported and not used: \"fmt\"\nFAIL    compress/flate [build failed]",
			"disapproval": false,
			"date": "2012-10-25 07:26:17.742990",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-25 07:27:26.817140",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-25 06:57:36.324820",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-25 07:00:52.733480",
			"approval": false
		},
		{
			"sender": "hitchmanr@gmail.com",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry about the spam, keep forgetting how change/mail works.\n\nI don't know how to do benchmarks with deltas, or else I'd include that in the description.",
			"disapproval": false,
			"date": "2012-10-25 07:28:41.905560",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Oct 25, 2012 5:56 PM, <hitchmanr@gmail.com> wrote:\r\n> I don't know how to do benchmarks with deltas, or else I'd include that\r\n> in the description.\r\nsave two copies of benchmark output that you want to\r\ncompare, and feed them to misc/benchcmp script.\r\n",
			"disapproval": false,
			"date": "2012-10-25 10:04:09.051620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThanks.\r\n",
			"disapproval": false,
			"date": "2012-11-01 17:57:17.783460",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"hitchmanr@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d6e11ab78b7d ***\n\ncompress/flate: shrink decompressor struct for better performance\n\nHelps with issue 2703.\n\nR=dave, minux.ma, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5536078\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-11-01 17:57:31.808410",
			"approval": false
		}
	],
	"owner_email": "hitchmanr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rmmh",
	"subject": "code review 5536078: compress/flate: shrink decompressor struct for better p...",
	"created": "2012-01-20 10:09:01.146176",
	"patchsets": [
		1,
		3,
		3001,
		18001,
		23001,
		20005
	],
	"modified": "2012-11-09 22:12:16.477030",
	"closed": true,
	"issue": 5536078
}