{
	"description": "cmd/go: add -i to 'go test' for installing out-of-date packages\n        Fixes issue 2685.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rogpeppe@gmail.com",
		"r@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why not just run 'go install'? Why should the functionality of the commands be mixed like this?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-18 15:18:01.432681",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 11:20 PM, Russ Cox <rsc@golang.org> wrote:\n\n> I would like to address this, but probably not\n> in this way.  I haven't thought enough about it\n> yet.\n\nMaybe we just need to re-format the 'go test' warning so that it can be\ncopy & paste as a 'go install'\ncommand line? Or adopt the 'go install -t' proposal?\n\nIMHO, either we install the out-of-date packages in 'go test' or we make it\nvery easy to install them\nafter saw this warning.\n",
			"disapproval": false,
			"date": "2012-01-18 15:35:18.468138",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 18 January 2012 15:21, minux <minux.ma@gmail.com> wrote:\n>\n>\n> On Wed, Jan 18, 2012 at 10:51 PM, roger peppe <rogpeppe@gmail.com> wrote:\n>>\n>> i think i'd prefer to have an option to \"go install\"\n>> (-t?), and probably the same for \"go list\" too, which would ask for\n>> testing dependencies to be considered.\n>>\n>> \"go test\" works fine as it is IMHO.\n>\n> I'm mainly thinking about avoiding duplication of knowledge here. IMHO, how\n> to test a package\n> should only be known to 'go test'.\n\nwe talking not about how to test the package, but about evaluating the testing\ndependencies of a package.\n\ni don't see any particular duplication of knowledge there there - go test\nalready relies on knowledge of dependencies that other commands have\ntoo.\n\ni think it's perfectly reasonable for me to\nwant to do this: (assuming \"-t\" means include test dependencies):\n\ngo get -t somepackage\naudit somepackage and its dependencies for nasty things\ngo test somepackage\n",
			"disapproval": false,
			"date": "2012-01-18 15:54:50.028911",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please file an issue about this.\nI am not sure yet how we should fix it,\nbut I want to make sure that we do.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 16:32:51.531803",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i think i'd prefer to have an option to \"go install\"\n(-t?), and probably the same for \"go list\" too, which would ask for\ntesting dependencies to be considered.\n\n\"go test\" works fine as it is IMHO.\n\nOn 18 January 2012 13:54,  <minux.ma@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> cmd/go: add -i to 'go test' for installing out-of-date packages\n> \u00a0 \u00a0 \u00a0 \u00a0Fixes issue 2685.\n>\n> Please review this at http://codereview.appspot.com/5532087/\n>\n> Affected files:\n> \u00a0M src/cmd/go/test.go\n> \u00a0M src/cmd/go/testflag.go\n>\n>\n> Index: src/cmd/go/test.go\n> ===================================================================\n> --- a/src/cmd/go/test.go\n> +++ b/src/cmd/go/test.go\n> @@ -28,7 +28,7 @@\n>\n> \u00a0var cmdTest = &Command{\n> \u00a0 \u00a0 \u00a0 \u00a0CustomFlags: true,\n> - \u00a0 \u00a0 \u00a0 UsageLine: \u00a0 \"test [-c] [-x] [-file a.go -file b.go ...] [-p n]\n> [importpath...] [flags for test binary]\",\n> + \u00a0 \u00a0 \u00a0 UsageLine: \u00a0 \"test [-i] [-c] [-x] [-file a.go -file b.go ...] [-p n]\n> [importpath...] [flags for test binary]\",\n> \u00a0 \u00a0 \u00a0 \u00a0Short: \u00a0 \u00a0 \u00a0 \"test packages\",\n> \u00a0 \u00a0 \u00a0 \u00a0Long: `\n> \u00a0'Go test' automates testing the packages named by the import paths.\n> @@ -72,6 +72,7 @@\n>\n> \u00a0The flags handled by 'go test' are:\n>\n> + \u00a0 \u00a0 \u00a0 -i \u00a0Install out-of-date packages found during test\n> \u00a0 \u00a0 \u00a0 \u00a0-c \u00a0Compile the test binary to test.out but do not run it.\n>\n> \u00a0 \u00a0 \u00a0 \u00a0-file a.go\n> @@ -197,6 +198,7 @@\n> \u00a0// For now just use the gotest code.\n>\n> \u00a0var (\n> + \u00a0 \u00a0 \u00a0 testI \u00a0 \u00a0 \u00a0 \u00a0bool \u00a0 \u00a0 // -i flag\n> \u00a0 \u00a0 \u00a0 \u00a0testC \u00a0 \u00a0 \u00a0 \u00a0bool \u00a0 \u00a0 // -c flag\n> \u00a0 \u00a0 \u00a0 \u00a0testP \u00a0 \u00a0 \u00a0 \u00a0int \u00a0 \u00a0 \u00a0// -p flag\n> \u00a0 \u00a0 \u00a0 \u00a0testX \u00a0 \u00a0 \u00a0 \u00a0bool \u00a0 \u00a0 // -x flag\n> @@ -284,14 +286,18 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if a.p != nil && a.f != nil && !okBuild[a.p] && !a.p.fake {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0okBuild[a.p] = true // don't warn again\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if !warned {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(os.Stderr, \"warning: building\n> out-of-date packages:\\n\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if testI {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(os.Stderr, \"warning:\n> building and installing out-of-date packages:\\n\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(os.Stderr, \"warning:\n> building out-of-date packages:\\n\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0warned = true\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fmt.Fprintf(os.Stderr, \"\\t%s\\n\", a.p.ImportPath)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 if warned {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(os.Stderr, \"installing these packages with 'go\n> install' will speed future tests.\\n\\n\")\n> + \u00a0 \u00a0 \u00a0 if warned && !testI {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(os.Stderr, \"installing these packages with 'go\n> install' or 'go test -i' will speed future tests.\\n\\n\")\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0b.do(root)\n> @@ -351,6 +357,10 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return nil, nil, nil, err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> + \u00a0 \u00a0 \u00a0 depmode := modeBuild\n> + \u00a0 \u00a0 \u00a0 if testI {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 depmode = modeInstall\n> + \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0// Test package.\n> \u00a0 \u00a0 \u00a0 \u00a0if len(p.info.TestGoFiles) > 0 {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ptest = new(Package)\n> @@ -363,7 +373,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ptest.imports = append(append([]*Package{}, p.imports...),\n> imports...)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ptest.pkgdir = testDir\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ptest.fake = true\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a := b.action(modeBuild, modeBuild, ptest)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a := b.action(modeBuild, depmode, ptest)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0a.objdir = testDir + string(filepath.Separator)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0a.objpkg = ptestObj\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0a.target = ptestObj\n> @@ -387,7 +397,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fake: \u00a0 \u00a0 \u00a0 true,\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0pxtest.imports = append(pxtest.imports, ptest)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a := b.action(modeBuild, modeBuild, pxtest)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 a := b.action(modeBuild, depmode, pxtest)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0a.objdir = testDir + string(filepath.Separator)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0a.objpkg = pxtestObj\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0a.target = pxtestObj\n> Index: src/cmd/go/testflag.go\n> ===================================================================\n> --- a/src/cmd/go/testflag.go\n> +++ b/src/cmd/go/testflag.go\n> @@ -56,6 +56,7 @@\n> \u00a0// testFlagDefn is the set of flags we process.\n> \u00a0var testFlagDefn = []*testFlagSpec{\n> \u00a0 \u00a0 \u00a0 \u00a0// local.\n> + \u00a0 \u00a0 \u00a0 {name: \"i\", isBool: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"c\", isBool: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"file\", multiOK: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"p\"},\n> @@ -117,6 +118,8 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0continue\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0switch f.name {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case \"i\":\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 setBoolFlag(&testI, value)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case \"c\":\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0setBoolFlag(&testC, value)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case \"p\":\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-18 14:51:19.907225",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 10:18, Rob 'Commander' Pike <r@google.com> wrote:\n> Why not just run 'go install'? Why should the functionality of the commands be mixed like this?\n\ngo install fmt installs fmt's dependencies but\nnot the fmt test's dependencies.  So if, say,\npackage testing is out of date, it will still be\nout of date and generate the warning during\ngo test.\n\nI would like to address this, but probably not\nin this way.  I haven't thought enough about it\nyet.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 15:20:19.851351",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 10:51 PM, roger peppe <rogpeppe@gmail.com> wrote:\n\n> i think i'd prefer to have an option to \"go install\"\n> (-t?), and probably the same for \"go list\" too, which would ask for\n> testing dependencies to be considered.\n>\n> \"go test\" works fine as it is IMHO.\n>\nI'm mainly thinking about avoiding duplication of knowledge here. IMHO, how\nto test a package\nshould only be known to 'go test'.\n\nAlso, considering the main usage case here, often we don't know whether we\nneed to install the\npackage or not. Simply issuing 'go test -i xxx' will always suffice.\n",
			"disapproval": false,
			"date": "2012-01-18 15:22:08.568191",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-18 13:54:24.799461",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 11:54 PM, roger peppe <rogpeppe@gmail.com> wrote:\n\n> On 18 January 2012 15:21, minux <minux.ma@gmail.com> wrote:\n> > I'm mainly thinking about avoiding duplication of knowledge here. IMHO,\n> how\n> > to test a package\n> > should only be known to 'go test'.\n>\n> we talking not about how to test the package, but about evaluating the\n> testing\n> dependencies of a package.\n>\nMy original thought is this: the 'go test' has some boilerplate code which\nis the driver\nfor the test. If I need to get a package's testing dependencies, I need to\nknow which\npackages are used in that boilerplate code. This is a duplication of\nknowledge, but I\nlater realize that we can parse that to get full package dependencies.\n\nBut from the separation of functionality viewpoint, I agree with you, this\nfunctionality\nnaturally belongs to 'go install'. Should I implement this and open another\nCL?\n",
			"disapproval": false,
			"date": "2012-01-18 16:13:58.350594",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Already done by rogpeppe@gmail.com (with priority Go1 already).\nhttp://code.google.com/p/go/issues/detail?id=2685\n\nOn Thu, Jan 19, 2012 at 12:32 AM, Russ Cox <rsc@golang.org> wrote:\n\n> Please file an issue about this.\n> I am not sure yet how we should fix it,\n> but I want to make sure that we do.\n>\n",
			"disapproval": false,
			"date": "2012-01-18 16:39:13.389656",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-18 15:45:53.718623",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5532087: cmd/go: add -i to 'go test' for installing out-of-date ...",
	"created": "2012-01-18 13:52:07.036219",
	"patchsets": [
		1,
		4
	],
	"modified": "2012-01-18 15:45:58.195535",
	"closed": true,
	"issue": 5532087
}