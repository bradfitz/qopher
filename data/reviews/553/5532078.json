{
	"description": "testing: fix defer race\n\nIn a test that does\n\n        func TestFoo(t *testing.T) {\n                defer cleanup()\n                t.Fatal(\"oops\")\n        }\n\nit can be important that cleanup run as the test fails.\nThe old code did this in Fatal:\n\n        t.signal <- t\n        runtime.Goexit()\n\nThe runtime.Goexit would run the deferred cleanup\nbut the send on t.signal would cause the main test loop\nto move on and possibly even exit the program before\nthe runtime.Goexit got a chance to run.\n\nThis CL changes tRunner (the top stack frame of a test\ngoroutine) to send on t.signal as part of a function\ndeferred by the top stack frame.  This delays the send\non t.signal until after runtime.Goexit has run functions\ndeferred by the test itself.\n\nFor the above TestFoo, this CL guarantees that cleanup\nwill run before the test binary exits.\n\nThis is particularly important when cleanup is doing\nexternally visible work, like removing temporary files\nor unmounting file systems.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-01-12 06:40:08.932532",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-12 07:33:54.772032",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as f58f842c9d3b ***\n\ntesting: fix defer race\n\nIn a test that does\n\n        func TestFoo(t *testing.T) {\n                defer cleanup()\n                t.Fatal(\"oops\")\n        }\n\nit can be important that cleanup run as the test fails.\nThe old code did this in Fatal:\n\n        t.signal <- t\n        runtime.Goexit()\n\nThe runtime.Goexit would run the deferred cleanup\nbut the send on t.signal would cause the main test loop\nto move on and possibly even exit the program before\nthe runtime.Goexit got a chance to run.\n\nThis CL changes tRunner (the top stack frame of a test\ngoroutine) to send on t.signal as part of a function\ndeferred by the top stack frame.  This delays the send\non t.signal until after runtime.Goexit has run functions\ndeferred by the test itself.\n\nFor the above TestFoo, this CL guarantees that cleanup\nwill run before the test binary exits.\n\nThis is particularly important when cleanup is doing\nexternally visible work, like removing temporary files\nor unmounting file systems.\n\nR=golang-dev, r\nCC=golang-dev\nhttp://codereview.appspot.com/5532078",
			"disapproval": false,
			"date": "2012-01-12 18:18:13.352599",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5532078: testing: fix defer race",
	"created": "2012-01-12 06:38:18.347144",
	"patchsets": [
		1,
		1001,
		5001
	],
	"modified": "2012-01-12 18:18:14.322209",
	"closed": true,
	"issue": 5532078
}