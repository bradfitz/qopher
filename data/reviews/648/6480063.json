{
	"description": "math/big: Replace RCLQ + ANDQ with SETCS in unrolled arithmetic assembly.\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkAddVW_1              8            8   +0.60%\nBenchmarkAddVW_2             10            9   -8.64%\nBenchmarkAddVW_3             10           10   -4.63%\nBenchmarkAddVW_4             10           11   +3.67%\nBenchmarkAddVW_5             11           12   +5.98%\nBenchmarkAddVW_1e1           18           20   +6.38%\nBenchmarkAddVW_1e2          129          115  -10.85%\nBenchmarkAddVW_1e3         1270         1089  -14.25%\nBenchmarkAddVW_1e4        13376        12145   -9.20%\nBenchmarkAddVW_1e5       130392       125260   -3.94%\n\nbenchmark              old MB/s     new MB/s  speedup\nBenchmarkAddVW_1        7709.10      7661.92    0.99x\nBenchmarkAddVW_2       12451.10     13604.00    1.09x\nBenchmarkAddVW_3       17727.81     18721.54    1.06x\nBenchmarkAddVW_4       23552.64     22708.81    0.96x\nBenchmarkAddVW_5       27411.40     25816.22    0.94x\nBenchmarkAddVW_1e1     34063.19     32023.06    0.94x\nBenchmarkAddVW_1e2     49529.97     55360.55    1.12x\nBenchmarkAddVW_1e3     50380.44     58764.18    1.17x\nBenchmarkAddVW_1e4     47843.59     52696.10    1.10x\nBenchmarkAddVW_1e5     49082.60     51093.66    1.04x",
	"cc": [
		"gri@golang.org",
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For the larger operands, I don't think jitter can account for a >10%\r\ndifference. The shorter ones, sure -- it's very hard to play these 2% or 4%\r\ngames on microbenchmarks, because a slight instruction size increase here\r\ncould mean worse cache hits there, etc.\r\n\r\nAnd yes, it is shame a about MOVQ $0 being translated to XORQ in this case.\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 4:32 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> This is super-subtle, especially the stuff about the flags. Is it\r\n> worth it? The timings could be internal jitter due to different\r\n> instruction lengths as much as they could be actual speedup.\r\n>\r\n> Russ\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-24 20:37:00.121840",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-25 15:56:42.848970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I buy the 10%+ difference for the unrolled loops. I am happy with the\r\nidentical change for the non-unrolled loop simply for symmetry reasons if\r\nthere's no slow-down.\r\n\r\n- gri\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 1:36 PM, Christopher Swenson <cswenson@google.com>wrote:\r\n\r\n> For the larger operands, I don't think jitter can account for a >10%\r\n> difference. The shorter ones, sure -- it's very hard to play these 2% or 4%\r\n> games on microbenchmarks, because a slight instruction size increase here\r\n> could mean worse cache hits there, etc.\r\n>\r\n> And yes, it is shame a about MOVQ $0 being translated to XORQ in this case.\r\n>\r\n>\r\n> On Fri, Aug 24, 2012 at 4:32 PM, Russ Cox <rsc@golang.org> wrote:\r\n>\r\n>> This is super-subtle, especially the stuff about the flags. Is it\r\n>> worth it? The timings could be internal jitter due to different\r\n>> instruction lengths as much as they could be actual speedup.\r\n>>\r\n>> Russ\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Christopher Swenson\r\n> cswenson@google.com\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-24 20:39:55.492370",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-24 20:55:20.107250",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode181\nsrc/pkg/math/big/arith_amd64.s:181: SETCS BX        // c = CF\nOn 2012/08/24 20:29:19, gri wrote:\n> This doesn't seem to make it faster - the numbers for n=1..3 are slower. Note\n> these n are common!\n\nDone.\n\nhttp://codereview.appspot.com/6480063/diff/11001/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/11001/src/pkg/math/big/arith_amd64.s#newcode218\nsrc/pkg/math/big/arith_amd64.s:218: MOVQ BX, CX\nOn 2012/08/24 20:59:16, gri wrote:\n> same comment as above please\n> \n> these routines really _are_ identical but for the ADD/SUB instructions and the\n> label names\n\nDone.",
			"disapproval": false,
			"date": "2012-08-24 21:06:46.675010",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All cases need to be faster, w/ no slowdown for n = 1..3.\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode144\nsrc/pkg/math/big/arith_amd64.s:144: MOVQ $0, BX\nIt's unfortunate that MOVQ $0, reg gets translated into an XORQ which destroys the flags. Still, this is not needed, at least not for the n = 1..3 path. If anything, it should be before U3.\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode163\nsrc/pkg/math/big/arith_amd64.s:163: MOVQ BX, CX     // c = 0\nthis is not needed\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode169\nsrc/pkg/math/big/arith_amd64.s:169: SETCS CX        // c = CF\nAlternatively,\n\nSETCS BX\nMOVQ BX, CX\n\nor (w/o need for SETCS BX)\n\nSETCS BX\nANDQ $0xff, CX\n\nwhichever is faster (best of 3 runs! - don't just run it once)\n\nalso, align the comment\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode181\nsrc/pkg/math/big/arith_amd64.s:181: SETCS BX        // c = CF\nThis doesn't seem to make it faster - the numbers for n=1..3 are slower. Note these n are common!\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode199\nsrc/pkg/math/big/arith_amd64.s:199: MOVQ $0, BX\neverything applies here as well",
			"disapproval": false,
			"date": "2012-08-24 20:29:19.329320",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ANDQ $1 is slower than the BX method I am using.\r\n\r\nProof (taking out the BX stuff, adding in ANDQ $1, CX after the SETCS).\r\n\r\n./misc/benchcmp bx.txt and.txt\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              8            8   +0.36%\r\nBenchmarkAddVW_2             10           10   -2.86%\r\nBenchmarkAddVW_3             10           10   +0.00%\r\nBenchmarkAddVW_4             11           11   +0.00%\r\nBenchmarkAddVW_5             12           12   -1.60%\r\nBenchmarkAddVW_1e1           19           19   +3.11%\r\nBenchmarkAddVW_1e2          115          132  +14.78%\r\nBenchmarkAddVW_1e3         1103         1305  +18.31%\r\nBenchmarkAddVW_1e4        12634        13314   +5.38%\r\nBenchmarkAddVW_1e5       127251       141346  +11.08%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1        7589.06      7564.54    1.00x\r\nBenchmarkAddVW_2       12210.95     12570.19    1.03x\r\nBenchmarkAddVW_3       17856.52     17750.70    0.99x\r\nBenchmarkAddVW_4       22695.04     22737.50    1.00x\r\nBenchmarkAddVW_5       25513.39     26016.21    1.02x\r\nBenchmarkAddVW_1e1     33092.19     32084.57    0.97x\r\nBenchmarkAddVW_1e2     55409.06     48374.81    0.87x\r\nBenchmarkAddVW_1e3     57986.06     49015.10    0.85x\r\nBenchmarkAddVW_1e4     50653.21     48067.26    0.95x\r\nBenchmarkAddVW_1e5     50294.08     45278.91    0.90x\r\n\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 4:59 PM, <gri@golang.org> wrote:\r\n\r\n> Please provide the latest benchmark numbers in the CL.\r\n>\r\n> Also, do you know that using an AND$ $0xff, CX insteaf of the MOVQ BX,\r\n> CX is worse? If not, I prefer the AND because then the BX register is\r\n> not needed.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6480063/diff/11001/src/pkg/**\r\n> math/big/arith_amd64.s<http://codereview.appspot.com/6480063/diff/11001/src/pkg/math/big/arith_amd64.s>\r\n> File src/pkg/math/big/arith_amd64.s (right):\r\n>\r\n> http://codereview.appspot.com/**6480063/diff/11001/src/pkg/**\r\n> math/big/arith_amd64.s#**newcode218<http://codereview.appspot.com/6480063/diff/11001/src/pkg/math/big/arith_amd64.s#newcode218>\r\n> src/pkg/math/big/arith_amd64.**s:218: MOVQ BX, CX\r\n> same comment as above please\r\n>\r\n> these routines really _are_ identical but for the ADD/SUB instructions\r\n> and the label names\r\n>\r\n> http://codereview.appspot.com/**6480063/<http://codereview.appspot.com/6480063/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-24 21:04:46.608260",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-24 20:15:55.775260",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "New benchmarks:\r\n\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              8            8   +0.48%\r\nBenchmarkAddVW_2             10           10   +0.00%\r\nBenchmarkAddVW_3             10           10   +0.00%\r\nBenchmarkAddVW_4             10           11   +2.75%\r\nBenchmarkAddVW_5             11           12   +8.55%\r\nBenchmarkAddVW_1e1           18           19   +2.13%\r\nBenchmarkAddVW_1e2          129          114  -11.63%\r\nBenchmarkAddVW_1e3         1270         1144   -9.92%\r\nBenchmarkAddVW_1e4        13376        12876   -3.74%\r\nBenchmarkAddVW_1e5       130392       127507   -2.21%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1        7709.10      7676.11    1.00x\r\nBenchmarkAddVW_2       12451.10     12443.40    1.00x\r\nBenchmarkAddVW_3       17727.81     17731.03    1.00x\r\nBenchmarkAddVW_4       23552.64     22822.94    0.97x\r\nBenchmarkAddVW_5       27411.40     25191.22    0.92x\r\nBenchmarkAddVW_1e1     34063.19     33270.57    0.98x\r\nBenchmarkAddVW_1e2     49529.97     55929.86    1.13x\r\nBenchmarkAddVW_1e3     50380.44     55898.34    1.11x\r\nBenchmarkAddVW_1e4     47843.59     49704.39    1.04x\r\nBenchmarkAddVW_1e5     49082.60     50193.05    1.02x\r\n\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 4:55 PM, <cswenson@google.com> wrote:\r\n\r\n> Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6480063/<http://codereview.appspot.com/6480063/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-24 20:56:28.624800",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-24 21:22:31.162580",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-27 18:21:00.574650",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A minor nitpick.\n\nAlso, please verify my question below. I'd rather have all code use the same pattern than once SETCS and once RCLQ (its just easier to re-understand again, 1/2 yr down the road). Sorry for being so finicky.\n\n- gri\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s#newcode8\nsrc/pkg/math/big/arith_amd64.s:8: // Literal instruction for MOVQ $0, CX; used to preserve flags.\nPlease change to:\n\n// Literal instruction for MOVQ $0, CX\n// (MOVQ 0, reg is translated into XORQ reg, reg and clears CF)\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s#newcode184\nsrc/pkg/math/big/arith_amd64.s:184: RCLQ $1, CX\t\t// c = CF\nchanging this to SETCS makes it slower?\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s#newcode237\nsrc/pkg/math/big/arith_amd64.s:237: RCLQ $1, CX\t\t// c = CF\nchanging this to SETCS makes it slower?",
			"disapproval": false,
			"date": "2012-08-28 01:17:58.907170",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oops, that benchmark is wrong. Here is the correct one (and changing the\r\nCL):\r\n\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              8            8   -0.60%\r\nBenchmarkAddVW_2             10            8  -13.59%\r\nBenchmarkAddVW_3             10           11   +1.85%\r\nBenchmarkAddVW_4             10           11   +4.59%\r\nBenchmarkAddVW_5             11           12   +4.27%\r\nBenchmarkAddVW_1e1           18           17   -4.79%\r\nBenchmarkAddVW_1e2          129          114  -11.63%\r\nBenchmarkAddVW_1e3         1270         1091  -14.09%\r\nBenchmarkAddVW_1e4        13376        12850   -3.93%\r\nBenchmarkAddVW_1e5       130392       125431   -3.80%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1        7709.10      7754.12    1.01x\r\nBenchmarkAddVW_2       12451.10     14382.41    1.16x\r\nBenchmarkAddVW_3       17727.81     17466.33    0.99x\r\nBenchmarkAddVW_4       23552.64     22430.99    0.95x\r\nBenchmarkAddVW_5       27411.40     26142.82    0.95x\r\nBenchmarkAddVW_1e1     34063.19     35686.22    1.05x\r\nBenchmarkAddVW_1e2     49529.97     55846.85    1.13x\r\nBenchmarkAddVW_1e3     50380.44     58652.71    1.16x\r\nBenchmarkAddVW_1e4     47843.59     49803.09    1.04x\r\nBenchmarkAddVW_1e5     49082.60     51023.77    1.04x\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 4:15 PM, <cswenson@google.com> wrote:\r\n\r\n> Reviewers: gri,\r\n>\r\n> Message:\r\n> Hello gri@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> math/big: Replace RCLQ + ANDQ with SETCS in unrolled arithmetic\r\n> assembly.\r\n>\r\n> benchmark             old ns/op    new ns/op    delta\r\n> BenchmarkAddVW_1              8            8   +2.77%\r\n> BenchmarkAddVW_2             10           10   +5.83%\r\n> BenchmarkAddVW_3             10           10   +0.93%\r\n> BenchmarkAddVW_4             10           11   +5.50%\r\n> BenchmarkAddVW_5             11           12   +9.40%\r\n> BenchmarkAddVW_1e1           18           19   +2.13%\r\n> BenchmarkAddVW_1e2          129          115  -10.85%\r\n> BenchmarkAddVW_1e3         1270         1090  -14.17%\r\n> BenchmarkAddVW_1e4        13376        12660   -5.35%\r\n> BenchmarkAddVW_1e5       130392       127252   -2.41%\r\n>\r\n> benchmark              old MB/s     new MB/s  speedup\r\n> BenchmarkAddVW_1        7709.10      7506.54    0.97x\r\n> BenchmarkAddVW_2       12451.10     11709.82    0.94x\r\n> BenchmarkAddVW_3       17727.81     17574.85    0.99x\r\n> BenchmarkAddVW_4       23552.64     22343.99    0.95x\r\n> BenchmarkAddVW_5       27411.40     24913.34    0.91x\r\n> BenchmarkAddVW_1e1     34063.19     33394.52    0.98x\r\n> BenchmarkAddVW_1e2     49529.97     55635.79    1.12x\r\n> BenchmarkAddVW_1e3     50380.44     58662.45    1.16x\r\n> BenchmarkAddVW_1e4     47843.59     50552.73    1.06x\r\n> BenchmarkAddVW_1e5     49082.60     50293.58    1.02x\r\n>\r\n> Please review this at http://codereview.appspot.com/**6480063/<http://codereview.appspot.com/6480063/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/math/big/arith_amd64.s\r\n>\r\n>\r\n> Index: src/pkg/math/big/arith_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/math/big/arith_**amd64.s\r\n> +++ b/src/pkg/math/big/arith_**amd64.s\r\n> @@ -141,7 +141,8 @@\r\n>         MOVQ x+16(FP), R8\r\n>         MOVQ y+32(FP), CX       // c = y\r\n>         MOVQ z+0(FP), R10\r\n> -\r\n> +       MOVQ $0, BX\r\n> +\r\n>         MOVQ $0, SI             // i = 0\r\n>\r\n>         // uncomment the next line to disable the unrolled loop\r\n> @@ -159,13 +160,13 @@\r\n>         ADDQ CX, R11\r\n>         ADCQ $0, R12\r\n>         ADCQ $0, R13\r\n> +       MOVQ BX, CX     // c = 0\r\n>         ADCQ $0, R14\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n>         MOVQ R12, 8(R10)(SI*8)\r\n>         MOVQ R13, 16(R10)(SI*8)\r\n>         MOVQ R14, 24(R10)(SI*8)\r\n> -       RCLQ $1, CX             // c = CF\r\n> -       ANDQ $1, CX\r\n> +       SETCS CX        // c = CF\r\n>\r\n>         ADDQ $4, SI             // i += 4\r\n>         SUBQ $4, DI             // n -= 4\r\n> @@ -177,8 +178,8 @@\r\n>  L3:    // n > 0\r\n>         ADDQ 0(R8)(SI*8), CX\r\n>         MOVQ CX, 0(R10)(SI*8)\r\n> -       RCLQ $1, CX             // c = CF\r\n> -       ANDQ $1, CX\r\n> +       SETCS BX        // c = CF\r\n> +       MOVQ BX, CX\r\n>\r\n>         ADDQ $1, SI             // i++\r\n>         SUBQ $1, DI             // n--\r\n> @@ -195,6 +196,7 @@\r\n>         MOVQ x+16(FP), R8\r\n>         MOVQ y+32(FP), CX       // c = y\r\n>         MOVQ z+0(FP), R10\r\n> +       MOVQ $0, BX\r\n>\r\n>         MOVQ $0, SI             // i = 0\r\n>\r\n> @@ -218,8 +220,8 @@\r\n>         MOVQ R12, 8(R10)(SI*8)\r\n>         MOVQ R13, 16(R10)(SI*8)\r\n>         MOVQ R14, 24(R10)(SI*8)\r\n> -       RCLQ $1, CX             // c = CF\r\n> -       ANDQ $1, CX\r\n> +       SETCS BX\r\n> +       MOVQ BX, CX\r\n>\r\n>         ADDQ $4, SI             // i += 4\r\n>         SUBQ $4, DI             // n -= 4\r\n> @@ -232,8 +234,8 @@\r\n>         MOVQ 0(R8)(SI*8), R11\r\n>         SUBQ CX, R11\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n> -       RCLQ $1, CX             // c = CF\r\n> -       ANDQ $1, CX\r\n> +       SETCS BX\r\n> +       MOVQ BX, CX\r\n>\r\n>         ADDQ $1, SI             // i++\r\n>         SUBQ $1, DI             // n--\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-24 20:18:47.547640",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please provide the latest benchmark numbers in the CL.\n\nAlso, do you know that using an AND$ $0xff, CX insteaf of the MOVQ BX, CX is worse? If not, I prefer the AND because then the BX register is not needed.\n\nhttp://codereview.appspot.com/6480063/diff/11001/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/11001/src/pkg/math/big/arith_amd64.s#newcode218\nsrc/pkg/math/big/arith_amd64.s:218: MOVQ BX, CX\nsame comment as above please\n\nthese routines really _are_ identical but for the ADD/SUB instructions and the label names",
			"disapproval": false,
			"date": "2012-08-24 20:59:16.735970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is super-subtle, especially the stuff about the flags. Is it\r\nworth it? The timings could be internal jitter due to different\r\ninstruction lengths as much as they could be actual speedup.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-08-24 20:32:20.638620",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I updated the code. Here is my current benchmark:\r\n\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              8            8   +0.60%\r\nBenchmarkAddVW_2             10            9   -8.64%\r\nBenchmarkAddVW_3             10           10   -4.63%\r\nBenchmarkAddVW_4             10           11   +3.67%\r\nBenchmarkAddVW_5             11           12   +5.98%\r\nBenchmarkAddVW_1e1           18           20   +6.38%\r\nBenchmarkAddVW_1e2          129          115  -10.85%\r\nBenchmarkAddVW_1e3         1270         1089  -14.25%\r\nBenchmarkAddVW_1e4        13376        12145   -9.20%\r\nBenchmarkAddVW_1e5       130392       125260   -3.94%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1        7709.10      7661.92    0.99x\r\nBenchmarkAddVW_2       12451.10     13604.00    1.09x\r\nBenchmarkAddVW_3       17727.81     18721.54    1.06x\r\nBenchmarkAddVW_4       23552.64     22708.81    0.96x\r\nBenchmarkAddVW_5       27411.40     25816.22    0.94x\r\nBenchmarkAddVW_1e1     34063.19     32023.06    0.94x\r\nBenchmarkAddVW_1e2     49529.97     55360.55    1.12x\r\nBenchmarkAddVW_1e3     50380.44     58764.18    1.17x\r\nBenchmarkAddVW_1e4     47843.59     52696.10    1.10x\r\nBenchmarkAddVW_1e5     49082.60     51093.66    1.04x\r\n\r\n\r\n\r\nOn Mon, Aug 27, 2012 at 2:21 PM, <cswenson@google.com> wrote:\r\n\r\n> Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6480063/<http://codereview.appspot.com/6480063/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-27 18:22:06.348060",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode144\nsrc/pkg/math/big/arith_amd64.s:144: MOVQ $0, BX\nI thought I had tried this, and it made performance worse. But, I will try again.\n\nOn 2012/08/24 20:29:19, gri wrote:\n> It's unfortunate that MOVQ $0, reg gets translated into an XORQ which destroys\n> the flags. Still, this is not needed, at least not for the n = 1..3 path. If\n> anything, it should be before U3.\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode163\nsrc/pkg/math/big/arith_amd64.s:163: MOVQ BX, CX     // c = 0\nThis is needed to zero CX.\n\nOn 2012/08/24 20:29:19, gri wrote:\n> this is not needed\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode169\nsrc/pkg/math/big/arith_amd64.s:169: SETCS CX        // c = CF\nI tested each of these. Having the MOVQ BX, CX above, and SETCS CX below is faster than all of the others. In fact, the ANDQ version is actually slower.\n\nI suspect that the elimination of the ANDQ is where the speedup is.\n\nOn 2012/08/24 20:29:19, gri wrote:\n> Alternatively,\n> \n> SETCS BX\n> MOVQ BX, CX\n> \n> or (w/o need for SETCS BX)\n> \n> SETCS BX\n> ANDQ $0xff, CX\n> \n> whichever is faster (best of 3 runs! - don't just run it once)\n> \n> also, align the comment\n>\n\nhttp://codereview.appspot.com/6480063/diff/5001/src/pkg/math/big/arith_amd64.s#newcode199\nsrc/pkg/math/big/arith_amd64.s:199: MOVQ $0, BX\nOn 2012/08/24 20:29:19, gri wrote:\n> everything applies here as well\n\nDone.",
			"disapproval": false,
			"date": "2012-08-24 20:55:07.814980",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-24 21:05:06.696950",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-27 20:05:03.010410",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks good but while you're at it - and there's no rush - can you please try my suggestions below as well and let us know if there are any performance differences?\n\nI'd prefer to just use ADCQ instead of SETCS.\n\nhttp://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s#newcode147\nsrc/pkg/math/big/arith_amd64.s:147: MOVQ $0, BX\nLet's get rid of this instruction. Since MOVQ $0, reg gets translated into an XORQ which clears the carry flag, you can force the use of a MOVQ by coding it yourself as in\n\nBYTE $0x48\nBYTE $0x89\nBYTE ...\n\n(You'd have to determine the correct encoding - I think it's 3 or 4 bytes). This should permit to move this instruction to line 158. In the following I am going to write MOVQ $0, reg and assume you're using the respective BYTE sequence instead.\n\nhttp://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s#newcode158\nsrc/pkg/math/big/arith_amd64.s:158: MOVQ BX, CX\t\t// c = 0\nuse the MOVQ $0, CS BYTE sequence here\n\nhttp://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s#newcode163\nsrc/pkg/math/big/arith_amd64.s:163: SETCS CX\t\t// c = CF\nCan you please try this with\n\nADCQ $0, CX\n\n(should do the same now - I suspect that ADCQ has better pipelining properties)\n\nIf ADCQ works just as well performance-wise, my preferred approach would be:\n\nADDQ CX, R11\nMOVQ $0, CX\nADCQ $0, R12\nADCQ $0, R13\nADCQ $0, R14\nADCQ $0, CX\n\nin the middle section",
			"disapproval": false,
			"date": "2012-08-27 16:33:33.897560",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Changing out the BX line of code for the literal MOVQ $0, CX performs\r\nbasically identically, as far as I can tell. However, it looks pretty\r\nawful, as it encodes in 7 bytes (mov imm32, r64 with sign extension is the\r\nshortest opcode):\r\n\r\nBYTE $0x48 // MOVQ $0, CX\r\nBYTE $0xc7\r\n BYTE $0xc1\r\nBYTE $0x00\r\nBYTE $0x00\r\nBYTE $0x00\r\n BYTE $0x00\r\n\r\nXORQ encodes as three bytes.\r\n\r\nThe ADCQ line of code seems to do a little bit worse than the SETCS version.\r\n\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              8            8   +3.97%\r\nBenchmarkAddVW_2             10           10   -0.98%\r\nBenchmarkAddVW_3             10           10   +0.00%\r\nBenchmarkAddVW_4             10           10   -3.67%\r\nBenchmarkAddVW_5             11           12   +0.84%\r\nBenchmarkAddVW_1e1           19           18   -3.63%\r\nBenchmarkAddVW_1e2          113          118   +4.42%\r\nBenchmarkAddVW_1e3         1097         1154   +5.20%\r\nBenchmarkAddVW_1e4        12118        11820   -2.46%\r\nBenchmarkAddVW_1e5       125923       123477   -1.94%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1        7932.32      7627.85    0.96x\r\nBenchmarkAddVW_2       12580.34     12620.39    1.00x\r\nBenchmarkAddVW_3       17943.86     17934.30    1.00x\r\nBenchmarkAddVW_4       23397.13     24345.74    1.04x\r\nBenchmarkAddVW_5       26914.88     26736.15    0.99x\r\nBenchmarkAddVW_1e1     33242.25     34361.69    1.03x\r\nBenchmarkAddVW_1e2     56336.12     54164.84    0.96x\r\nBenchmarkAddVW_1e3     58301.63     55419.68    0.95x\r\nBenchmarkAddVW_1e4     52812.41     54144.85    1.03x\r\nBenchmarkAddVW_1e5     50824.42     51831.19    1.02x\r\n\r\nNote, however, if I change the rolled loop at the bottom to MOVQ $0, CX +\r\nRCLQ $1, CX, then I get performance increase:\r\n\r\n(This uses MOVQ $0, CX + SETCS CX in the unrolled loop).\r\n\r\n(the first number appears to be within the margin of error after running it\r\nseveral times).\r\n\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              8            8   +1.86%\r\nBenchmarkAddVW_2             10            9   -7.25%\r\nBenchmarkAddVW_3             10           10   -4.67%\r\nBenchmarkAddVW_4             10           11   +0.92%\r\nBenchmarkAddVW_5             11           12   +3.36%\r\nBenchmarkAddVW_1e1           19           19   +2.59%\r\nBenchmarkAddVW_1e2          113          114   +0.88%\r\nBenchmarkAddVW_1e3         1097         1084   -1.19%\r\nBenchmarkAddVW_1e4        12118        12154   +0.30%\r\nBenchmarkAddVW_1e5       125923       124580   -1.07%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1        7932.32      7783.49    0.98x\r\nBenchmarkAddVW_2       12580.34     13535.23    1.08x\r\nBenchmarkAddVW_3       17943.86     18881.23    1.05x\r\nBenchmarkAddVW_4       23397.13     23197.58    0.99x\r\nBenchmarkAddVW_5       26914.88     25997.87    0.97x\r\nBenchmarkAddVW_1e1     33242.25     32255.31    0.97x\r\nBenchmarkAddVW_1e2     56336.12     55728.82    0.99x\r\nBenchmarkAddVW_1e3     58301.63     59025.23    1.01x\r\nBenchmarkAddVW_1e4     52812.41     52654.83    1.00x\r\nBenchmarkAddVW_1e5     50824.42     51372.36    1.01x\r\n\r\n\r\n\r\nOn Mon, Aug 27, 2012 at 12:33 PM, <gri@golang.org> wrote:\r\n\r\n> This looks good but while you're at it - and there's no rush - can you\r\n> please try my suggestions below as well and let us know if there are any\r\n> performance differences?\r\n>\r\n> I'd prefer to just use ADCQ instead of SETCS.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6480063/diff/8004/src/pkg/**\r\n> math/big/arith_amd64.s<http://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s>\r\n> File src/pkg/math/big/arith_amd64.s (right):\r\n>\r\n> http://codereview.appspot.com/**6480063/diff/8004/src/pkg/**\r\n> math/big/arith_amd64.s#**newcode147<http://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s#newcode147>\r\n> src/pkg/math/big/arith_amd64.**s:147: MOVQ $0, BX\r\n> Let's get rid of this instruction. Since MOVQ $0, reg gets translated\r\n> into an XORQ which clears the carry flag, you can force the use of a\r\n> MOVQ by coding it yourself as in\r\n>\r\n> BYTE $0x48\r\n> BYTE $0x89\r\n> BYTE ...\r\n>\r\n> (You'd have to determine the correct encoding - I think it's 3 or 4\r\n> bytes). This should permit to move this instruction to line 158. In the\r\n> following I am going to write MOVQ $0, reg and assume you're using the\r\n> respective BYTE sequence instead.\r\n>\r\n> http://codereview.appspot.com/**6480063/diff/8004/src/pkg/**\r\n> math/big/arith_amd64.s#**newcode158<http://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s#newcode158>\r\n> src/pkg/math/big/arith_amd64.**s:158: MOVQ BX, CX         // c = 0\r\n> use the MOVQ $0, CS BYTE sequence here\r\n>\r\n> http://codereview.appspot.com/**6480063/diff/8004/src/pkg/**\r\n> math/big/arith_amd64.s#**newcode163<http://codereview.appspot.com/6480063/diff/8004/src/pkg/math/big/arith_amd64.s#newcode163>\r\n> src/pkg/math/big/arith_amd64.**s:163: SETCS CX            // c = CF\r\n> Can you please try this with\r\n>\r\n> ADCQ $0, CX\r\n>\r\n> (should do the same now - I suspect that ADCQ has better pipelining\r\n> properties)\r\n>\r\n> If ADCQ works just as well performance-wise, my preferred approach would\r\n> be:\r\n>\r\n> ADDQ CX, R11\r\n> MOVQ $0, CX\r\n>\r\n> ADCQ $0, R12\r\n> ADCQ $0, R13\r\n> ADCQ $0, R14\r\n> ADCQ $0, CX\r\n>\r\n> in the middle section\r\n>\r\n> http://codereview.appspot.com/**6480063/<http://codereview.appspot.com/6480063/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-27 17:45:47.766480",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I made the ugly sequence of bytes into a macro to make the code more\r\nreadable.\r\n\r\n\r\nOn Mon, Aug 27, 2012 at 4:05 PM, <cswenson@google.com> wrote:\r\n\r\n> Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6480063/<http://codereview.appspot.com/6480063/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-27 20:05:52.916560",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For some reason, SETCS is better in the unrolled case, but RCLQ / ADCQ is better in the rolled case.\n\nHere is a benchmark comparing RCLQ to SETCS for the rolled loop. This is pretty consistent across several runs.\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkAddVW_1              8            8   +1.27%\nBenchmarkAddVW_2              9           11  +19.00%\nBenchmarkAddVW_3             10           12  +17.14%\nBenchmarkAddVW_4             11           11   +0.00%\nBenchmarkAddVW_5             12           13   +7.20%\nBenchmarkAddVW_1e1           20           19   -3.98%\nBenchmarkAddVW_1e2          115          117   +1.74%\nBenchmarkAddVW_1e3         1097         1106   +0.82%\nBenchmarkAddVW_1e4        12671        12449   -1.75%\nBenchmarkAddVW_1e5       126568       126741   +0.14%\n\nbenchmark              old MB/s     new MB/s  speedup\nBenchmarkAddVW_1        7372.10      7279.91    0.99x\nBenchmarkAddVW_2       13359.69     11265.64    0.84x\nBenchmarkAddVW_3       18236.28     15623.47    0.86x\nBenchmarkAddVW_4       23131.93     23056.39    1.00x\nBenchmarkAddVW_5       25523.70     23854.07    0.93x\nBenchmarkAddVW_1e1     31831.25     33241.75    1.04x\nBenchmarkAddVW_1e2     55269.59     54546.87    0.99x\nBenchmarkAddVW_1e3     58290.30     57820.98    0.99x\nBenchmarkAddVW_1e4     50507.58     51409.31    1.02x\nBenchmarkAddVW_1e5     50565.62     50496.66    1.00x\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s#newcode8\nsrc/pkg/math/big/arith_amd64.s:8: // Literal instruction for MOVQ $0, CX; used to preserve flags.\nOn 2012/08/28 01:17:59, gri wrote:\n> Please change to:\n> \n> // Literal instruction for MOVQ $0, CX\n> // (MOVQ 0, reg is translated into XORQ reg, reg and clears CF)\n\nDone.\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s#newcode184\nsrc/pkg/math/big/arith_amd64.s:184: RCLQ $1, CX\t\t// c = CF\nOn 2012/08/28 01:17:59, gri wrote:\n> changing this to SETCS makes it slower?\n\nYes. See attached benchmark.\n\nhttp://codereview.appspot.com/6480063/diff/2005/src/pkg/math/big/arith_amd64.s#newcode237\nsrc/pkg/math/big/arith_amd64.s:237: RCLQ $1, CX\t\t// c = CF\nOn 2012/08/28 01:17:59, gri wrote:\n> changing this to SETCS makes it slower?\n\nYes.",
			"disapproval": false,
			"date": "2012-08-28 14:37:59.006730",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I know you're all having fun but surely all this microoptimization is\r\nsubtly machine-dependent and will give different results on different\r\nprocessors.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-08-28 14:40:49.581230",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-28 14:37:01.422980",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is fun. But good point.\r\n\r\nI think many projects use perflab as an authoritative place to answer\r\nmicrobenchmarking questions -- perhaps we should try to figure out how to\r\nrun there?\r\n\r\nI'll run it on my desktop just to be sure we aren't regressing though, in\r\nthe meantime.\r\n\r\n\r\nOn Tue, Aug 28, 2012 at 10:40 AM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I know you're all having fun but surely all this microoptimization is\r\n> subtly machine-dependent and will give different results on different\r\n> processors.\r\n>\r\n> -rob\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-28 14:47:29.533030",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "So, here is the original vs. this patch on my desktop (Linux, Xeon X5550,\r\n2.67 GHz). Slightly better for the _2 and _3 cases, slightly worse for _4,\r\n_5, and _1e1, _1e4, and within the margin of error for the rest.\r\n\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              5            5   +0.00%\r\nBenchmarkAddVW_2              6            6   -3.69%\r\nBenchmarkAddVW_3              7            7   -2.29%\r\nBenchmarkAddVW_4              7            7   +6.95%\r\nBenchmarkAddVW_5              8            8   +4.25%\r\nBenchmarkAddVW_1e1           12           13   +5.65%\r\nBenchmarkAddVW_1e2           84           86   +2.25%\r\nBenchmarkAddVW_1e3          826          831   +0.61%\r\nBenchmarkAddVW_1e4         8372         8722   +4.18%\r\nBenchmarkAddVW_1e5        99338        99247   -0.09%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1       11482.91     11491.93    1.00x\r\nBenchmarkAddVW_2       19648.15     20419.97    1.04x\r\nBenchmarkAddVW_3       24441.21     24988.76    1.02x\r\nBenchmarkAddVW_4       34855.99     32603.13    0.94x\r\nBenchmarkAddVW_5       37747.60     36205.77    0.96x\r\nBenchmarkAddVW_1e1     51453.48     48817.66    0.95x\r\nBenchmarkAddVW_1e2     75660.13     74016.76    0.98x\r\nBenchmarkAddVW_1e3     77461.44     76982.76    0.99x\r\nBenchmarkAddVW_1e4     76444.65     73371.99    0.96x\r\nBenchmarkAddVW_1e5     64426.21     64485.12    1.00x\r\n\r\n\r\n\r\nOn Tue, Aug 28, 2012 at 10:47 AM, Christopher Swenson\r\n<cswenson@google.com>wrote:\r\n\r\n> It is fun. But good point.\r\n>\r\n> I think many projects use perflab as an authoritative place to answer\r\n> microbenchmarking questions -- perhaps we should try to figure out how to\r\n> run there?\r\n>\r\n> I'll run it on my desktop just to be sure we aren't regressing though, in\r\n> the meantime.\r\n>\r\n>\r\n> On Tue, Aug 28, 2012 at 10:40 AM, Rob Pike <r@golang.org> wrote:\r\n>\r\n>> I know you're all having fun but surely all this microoptimization is\r\n>> subtly machine-dependent and will give different results on different\r\n>> processors.\r\n>>\r\n>> -rob\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Christopher Swenson\r\n> cswenson@google.com\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-28 14:56:12.438790",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks. Let's leave it at that.",
			"disapproval": false,
			"date": "2012-08-28 16:29:27.772370",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=47e3b5cdff68 ***\n\nmath/big: Replace RCLQ + ANDQ with SETCS in unrolled arithmetic assembly.\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkAddVW_1              8            8   +0.60%\nBenchmarkAddVW_2             10            9   -8.64%\nBenchmarkAddVW_3             10           10   -4.63%\nBenchmarkAddVW_4             10           11   +3.67%\nBenchmarkAddVW_5             11           12   +5.98%\nBenchmarkAddVW_1e1           18           20   +6.38%\nBenchmarkAddVW_1e2          129          115  -10.85%\nBenchmarkAddVW_1e3         1270         1089  -14.25%\nBenchmarkAddVW_1e4        13376        12145   -9.20%\nBenchmarkAddVW_1e5       130392       125260   -3.94%\n\nbenchmark              old MB/s     new MB/s  speedup\nBenchmarkAddVW_1        7709.10      7661.92    0.99x\nBenchmarkAddVW_2       12451.10     13604.00    1.09x\nBenchmarkAddVW_3       17727.81     18721.54    1.06x\nBenchmarkAddVW_4       23552.64     22708.81    0.96x\nBenchmarkAddVW_5       27411.40     25816.22    0.94x\nBenchmarkAddVW_1e1     34063.19     32023.06    0.94x\nBenchmarkAddVW_1e2     49529.97     55360.55    1.12x\nBenchmarkAddVW_1e3     50380.44     58764.18    1.17x\nBenchmarkAddVW_1e4     47843.59     52696.10    1.10x\nBenchmarkAddVW_1e5     49082.60     51093.66    1.04x\n\nR=gri, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6480063\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2012-08-28 16:30:08.122320",
			"approval": false
		}
	],
	"owner_email": "cswenson@google.com",
	"private": false,
	"base_url": "",
	"owner": "Christopher Swenson",
	"subject": "code review 6480063: math/big: Replace RCLQ + ANDQ with SETCS in unrolled ar...",
	"created": "2012-08-24 20:14:48.864580",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		3002,
		11002,
		8004,
		5004,
		2005,
		17001
	],
	"modified": "2012-08-28 16:30:08.122320",
	"closed": false,
	"issue": 6480063
}