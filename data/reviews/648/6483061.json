{
	"description": "net/http/httputil: fix race in DumpRequestOut\n\nFixes issue 3892.\n\nSwapping the order of the writers inside the MultiWriter ensures\nthe request will be written to buf before http.ReadRequest completes.\n\nThe fencedBuffer is not required to make the test pass on\nany machine that I have access too, but as the buf is shared\nacross goroutines, I think it is necessary for correctness.",
	"cc": [
		"bradfitz@golang.org",
		"fullung@gmail.com",
		"franciscossouza@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/28 11:06:03, dfc wrote:\n> http://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go\n> File src/pkg/net/http/httputil/dump.go (right):\n> \n> http://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go#newcode116\n> src/pkg/net/http/httputil/dump.go:116: return fb.Buffer.Write(b)\n> On 2012/08/28 11:01:48, fss wrote:\n> > Why not just `fb.Lock`, `fb.Unlock` and `fb.Write`?\n> \n> It wouldn't be much of a mutex if it didn't protect the buffer's len and cap\n> values. fencedBuffer is probably the wrong name, syncBuffer might be a better\n> choice.\n\nI see, my suggestion is about the syntax only: you could drop Buffer and Mutex, and use just fb.Write, fb.Bytes, fb.Lock, fb.Unlock, etc.",
			"disapproval": false,
			"date": "2012-08-28 13:09:01.743800",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I see, my suggestion is about the syntax only: you could drop Buffer and Mutex,\n> and use just fb.Write, fb.Bytes, fb.Lock, fb.Unlock, etc.\n\nBut then fb.Write would forward to fb.Buffer.Write without holding the lock. Could you please rewrite the methods in your comment to show me what you mean.",
			"disapproval": false,
			"date": "2012-08-28 13:18:09.689120",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. I'll revert the syncBuffer change until it proves necessary. \r\n\r\nOn 29/08/2012, at 0:07, bradfitz@golang.org wrote:\r\n\r\n> LGTM but I'd rather drop the syncBuffer wrapper if it's not required.\r\n> \r\n> It's more code and more complexity, and the comment on it doesn't really\r\n> justify its existence.  \"published correctly\" doesn't say much to me.\r\n> \r\n> But I defer to others.\r\n> \r\n> Actually, the more I think about it, if we're writing to a bytes.Buffer\r\n> now before the PipeWriter (which I agree with), the\r\n> PipeWriter/PipeReader have synchronization.  And we read from the\r\n> PipeReader before accessing buf.Bytes() anyway, right?\r\n> \r\n> I'd just make this CL be about the order flip for now.\r\n> \r\n> \r\n> \r\n> https://codereview.appspot.com/6483061/diff/11002/src/pkg/net/http/httputil/dump.go\r\n> File src/pkg/net/http/httputil/dump.go (right):\r\n> \r\n> https://codereview.appspot.com/6483061/diff/11002/src/pkg/net/http/httputil/dump.go#newcode107\r\n> src/pkg/net/http/httputil/dump.go:107: // are published correctly\r\n> end in a period.\r\n> \r\n> https://codereview.appspot.com/6483061/\r\n",
			"disapproval": false,
			"date": "2012-08-28 14:10:24.177940",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go\nFile src/pkg/net/http/httputil/dump.go (right):\n\nhttp://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go#newcode116\nsrc/pkg/net/http/httputil/dump.go:116: return fb.Buffer.Write(b)\nWhy not just `fb.Lock`, `fb.Unlock` and `fb.Write`?\n\nhttp://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go#newcode122\nsrc/pkg/net/http/httputil/dump.go:122: return fb.Buffer.Bytes()\nditto",
			"disapproval": false,
			"date": "2012-08-28 11:01:48.320320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-28 07:08:23.171300",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3b78b41a4b50 ***\n\nnet/http/httputil: fix race in DumpRequestOut\n\nFixes issue 3892.\n\nSwapping the order of the writers inside the MultiWriter ensures\nthe request will be written to buf before http.ReadRequest completes.\n\nThe fencedBuffer is not required to make the test pass on\nany machine that I have access too, but as the buf is shared\nacross goroutines, I think it is necessary for correctness.\n\nR=bradfitz, fullung, franciscossouza\nCC=golang-dev\nhttp://codereview.appspot.com/6483061",
			"disapproval": false,
			"date": "2012-08-28 23:06:16.417190",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go\nFile src/pkg/net/http/httputil/dump.go (right):\n\nhttp://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go#newcode116\nsrc/pkg/net/http/httputil/dump.go:116: return fb.Buffer.Write(b)\nOn 2012/08/28 11:01:48, fss wrote:\n> Why not just `fb.Lock`, `fb.Unlock` and `fb.Write`?\n\nIt wouldn't be much of a mutex if it didn't protect the buffer's len and cap values. fencedBuffer is probably the wrong name, syncBuffer might be a better choice.",
			"disapproval": false,
			"date": "2012-08-28 11:06:03.830420",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/28 13:18:09, dfc wrote:\n> [cut]\n> But then fb.Write would forward to fb.Buffer.Write without holding the lock.\n> Could you please rewrite the methods in your comment to show me what you mean.\n\nSorry for the miscommunication. Now I included the code, that can't be miscommunicated :)\n\nhttp://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go\nFile src/pkg/net/http/httputil/dump.go (right):\n\nhttp://codereview.appspot.com/6483061/diff/10001/src/pkg/net/http/httputil/dump.go#newcode116\nsrc/pkg/net/http/httputil/dump.go:116: return fb.Buffer.Write(b)\nfunc (fb *fencedBuffer) Write(b []byte) (int, error) {\n    fb.Lock()\n    defer fb.Unlock()\n    return fb.Write(b)\n}\n\nfunc (fb *fencedBuffer) Bytes() []byte {\n    fb.Lock()\n    defer db.Unlock()\n    return fb.Bytes()\n}",
			"disapproval": false,
			"date": "2012-08-28 13:24:33.180140",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> func (fb *fencedBuffer) Write(b []byte) (int, error) {\r\n>     fb.Lock()\r\n>     defer fb.Unlock()\r\n>     return fb.Write(b)\r\n> }\r\n\r\nRight, you are correct that I can call the embedded Lock/Unlock\r\ndirectly. Sorry for being dense\r\n\r\nhowever return fb.Write(b) will cause infinite recursion.\r\n\r\n>\r\n> func (fb *fencedBuffer) Bytes() []byte {\r\n>     fb.Lock()\r\n>     defer db.Unlock()\r\n>     return fb.Bytes()\r\n> }\r\n>\r\n> http://codereview.appspot.com/6483061/\r\n\r\nditto.\r\n",
			"disapproval": false,
			"date": "2012-08-28 13:26:25.631980",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, fullung@gmail.com, franciscossouza@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-28 22:54:58.908700",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/28 13:26:25, dfc wrote:\n> > func (fb *fencedBuffer) Write(b []byte) (int, error) {\n> >     fb.Lock()\n> >     defer fb.Unlock()\n> >     return fb.Write(b)\n> > }\n> \n> Right, you are correct that I can call the embedded Lock/Unlock\n> directly. Sorry for being dense\n> \n> however return fb.Write(b) will cause infinite recursion.\n> \n\nouch. Nevermind, sorry for the noise.",
			"disapproval": false,
			"date": "2012-08-28 13:29:11.063730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, fullung@gmail.com, franciscossouza@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-28 13:30:23.787880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Tue, Aug 28, 2012 at 3:54 PM, <dave@cheney.net> wrote:\r\n\r\n> Hello bradfitz@golang.org, fullung@gmail.com, franciscossouza@gmail.com\r\n> (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6483061/<http://codereview.appspot.com/6483061/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-28 22:59:27.107520",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but I'd rather drop the syncBuffer wrapper if it's not required.\n\nIt's more code and more complexity, and the comment on it doesn't really justify its existence.  \"published correctly\" doesn't say much to me.\n\nBut I defer to others.\n\nActually, the more I think about it, if we're writing to a bytes.Buffer now before the PipeWriter (which I agree with), the PipeWriter/PipeReader have synchronization.  And we read from the PipeReader before accessing buf.Bytes() anyway, right?\n\nI'd just make this CL be about the order flip for now.\n\nhttps://codereview.appspot.com/6483061/diff/11002/src/pkg/net/http/httputil/dump.go\nFile src/pkg/net/http/httputil/dump.go (right):\n\nhttps://codereview.appspot.com/6483061/diff/11002/src/pkg/net/http/httputil/dump.go#newcode107\nsrc/pkg/net/http/httputil/dump.go:107: // are published correctly\nend in a period.",
			"disapproval": false,
			"date": "2012-08-28 14:07:36.787150",
			"approval": true
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6483061: net/http/httputil: fix race in DumpRequestOut",
	"created": "2012-08-27 10:25:05.693210",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		10001,
		5004,
		11002,
		8003,
		12002
	],
	"modified": "2012-08-28 23:07:05.899960",
	"closed": true,
	"issue": 6483061
}