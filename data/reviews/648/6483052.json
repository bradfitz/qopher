{
	"description": "go.crypto/ssh: prevent server from sending more than maxPacket\n\nFixes issue 4003.",
	"cc": [
		"agl@chromium.org",
		"dave@cheney.net",
		"agl@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh, sorry one more thing. Could you please fix the description, as a suggestion:\n\ngo.crypto/ssh: prevent server from sending more than maxPacket",
			"disapproval": false,
			"date": "2012-08-25 00:29:16.858740",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=10077a45cccb&repo=crypto ***\n\ngo.crypto/ssh: prevent server from sending more than maxPacket\n\nFixes issue 4003.\n\nR=agl, dave, agl\nCC=golang-dev\nhttp://codereview.appspot.com/6483052\n\nCommitter: Dave Cheney <dave@cheney.net>",
			"disapproval": false,
			"date": "2012-08-25 04:53:00.581810",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, although hopefully dfc can take a look too.\n\nhttps://codereview.appspot.com/6483052/diff/1002/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttps://codereview.appspot.com/6483052/diff/1002/ssh/channel.go#newcode354\nssh/channel.go:354: var space = uint32(min(int(c.maxPacket-(1+4+4)), len(data)))\nspace := ?",
			"disapproval": false,
			"date": "2012-08-24 17:04:22.695780",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you. Submitting.",
			"disapproval": false,
			"date": "2012-08-25 04:49:59.950630",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-08-24 16:42:55.803450",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> 3. fix TestServerStdoutRespectsMaxPacketSize\r\n>\r\n>\r\n> I don't know what's wrong with that test. Looks like it is a client\r\n> test, not a server test.\r\n\r\nYes, you are correct. This test will always fail because we are using\r\nwritePacket, not *chan.Write().\r\n\r\n>> ssh/channel.go:354: space := uint32(min(int(c.maxPacket-(1+4+4)),\r\n>\r\n> len(data)))\r\n>>\r\n>> This value is defined as a constant on line 512, please move that\r\n>\r\n> value to the\r\n>>\r\n>> top of the file and reference it here.\r\n>\r\n>\r\n> And have another constant for the EDC? This seems wrong as it is message\r\n> specific, even between the std and extra channel.\r\n\r\nFair enough. For the moment, please follow the pattern on line 512 and\r\nadd a local constant.\r\n\r\n>\r\n>\r\n> http://codereview.appspot.com/6483052/\r\n",
			"disapproval": false,
			"date": "2012-08-24 23:52:57.529230",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for fixing this, there are a few more things to do before this can be submitted.\n\n1. address the comments below\n2. add this logic to the edc write on line 246 \n3. fix TestServerStdoutRespectsMaxPacketSize\n\nhttp://codereview.appspot.com/6483052/diff/6001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6483052/diff/6001/ssh/channel.go#newcode354\nssh/channel.go:354: space := uint32(min(int(c.maxPacket-(1+4+4)), len(data)))\nThis value is defined as a constant on line 512, please move that value to the top of the file and reference it here.",
			"disapproval": false,
			"date": "2012-08-24 23:23:08.177340",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Please address the final two comments, then I'll submit this CL.\n\nhttp://codereview.appspot.com/6483052/diff/1004/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6483052/diff/1004/ssh/channel.go#newcode242\nssh/channel.go:242: const headerLength = 1 + 4 + 4 + 4 // 1 byte message type, 4 bytes remoteId, 4 bytes extended message type, 4 bytes data length\nconst headerLength = 13\n\nhttp://codereview.appspot.com/6483052/diff/1004/ssh/channel.go#newcode354\nssh/channel.go:354: const headerLength = 1 + 4 + 4 // 1 byte message type, 4 bytes remoteId, 4 bytes data length\nsame as above, but 9",
			"disapproval": false,
			"date": "2012-08-25 00:14:41.081870",
			"approval": true
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/25 00:14:41, dfc wrote:\n> LGTM. Please address the final two comments, then I'll submit this CL.\n> \n> http://codereview.appspot.com/6483052/diff/1004/ssh/channel.go\n> File ssh/channel.go (right):\n> \n> http://codereview.appspot.com/6483052/diff/1004/ssh/channel.go#newcode242\n> ssh/channel.go:242: const headerLength = 1 + 4 + 4 + 4 // 1 byte message type, 4\n> bytes remoteId, 4 bytes extended message type, 4 bytes data length\n> const headerLength = 13\n> \n> http://codereview.appspot.com/6483052/diff/1004/ssh/channel.go#newcode354\n> ssh/channel.go:354: const headerLength = 1 + 4 + 4 // 1 byte message type, 4\n> bytes remoteId, 4 bytes data length\n> same as above, but 9\n\nSure, done.",
			"disapproval": false,
			"date": "2012-08-25 04:49:33.256000",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-24 18:09:14.149940",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/24 23:52:57, dfc wrote:\n> >> 3. fix TestServerStdoutRespectsMaxPacketSize\n> >\n> >\n> > I don't know what's wrong with that test. Looks like it is a client\n> > test, not a server test.\n> \n> Yes, you are correct. This test will always fail because we are using\n> writePacket, not *chan.Write().\n\nOn my machine I ended up getting the following once:\n runtime error: makeslice: len out of range\non some of those tests, but not always. I'm leaving for now as I think it's out side the scope of this CL.\n\n> >> ssh/channel.go:354: space := uint32(min(int(c.maxPacket-(1+4+4)),\n> >\n> > len(data)))\n> >>\n> >> This value is defined as a constant on line 512, please move that\n> >\n> > value to the\n> >>\n> >> top of the file and reference it here.\n> >\n> >\n> > And have another constant for the EDC? This seems wrong as it is message\n> > specific, even between the std and extra channel.\n> \n> Fair enough. For the moment, please follow the pattern on line 512 and\n> add a local constant.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-25 00:05:31.380430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> On my machine I ended up getting the following once:\r\n>  runtime error: makeslice: len out of range\r\n> on some of those tests, but not always. I'm leaving for now as I think\r\n> it's out side the scope of this CL.\r\n\r\nYes, that one is on my dance card as\r\nhttp://code.google.com/p/go/issues/detail?id=3989\r\n",
			"disapproval": false,
			"date": "2012-08-25 00:12:13.451840",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@chromium.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> 2. add this logic to the edc write on line 246 \nAdded, Thanks.\n\n> 3. fix TestServerStdoutRespectsMaxPacketSize\n\nI don't know what's wrong with that test. Looks like it is a client test, not a server test.\n\n> ssh/channel.go:354: space := uint32(min(int(c.maxPacket-(1+4+4)), len(data)))\n> This value is defined as a constant on line 512, please move that value to the\n> top of the file and reference it here.\n\nAnd have another constant for the EDC? This seems wrong as it is message specific, even between the std and extra channel.",
			"disapproval": false,
			"date": "2012-08-24 23:38:17.977760",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 6483052: go.crypto/ssh: Prevent server from sending too large of...",
	"created": "2012-08-24 09:37:08.377030",
	"patchsets": [
		1,
		3,
		1002,
		6001,
		9001,
		1004,
		4005,
		6003
	],
	"modified": "2012-08-25 05:42:57.047010",
	"closed": true,
	"issue": 6483052
}