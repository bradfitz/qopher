{
	"description": "go.net/ipv4: new package\n\nPackage ipv4 implements IP-level socket options for the Internet\nProtocol version 4. It also provides raw IP socket access methods\nincluding IPv4 header manipulation.\n\nFixes issue 3684.\nFixes issue 3820.\n\nThis CL requires CL 6426047;\nnet: add read, write message methods to IPConn, UDPConn",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"alex.brainman@gmail.com",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "nit: please change the description to go.net/ipv4 as rietveld doesn't make it obvious which repo this will be committed too.",
			"disapproval": false,
			"date": "2012-08-23 10:54:44.787580",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done.",
			"disapproval": false,
			"date": "2012-08-23 11:41:24.394560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Mikio and rsc. I haven't finished reviewing this fully, but I know you have been waiting for a long time so I wanted to give you feedback as soon as possible. I still have to review the majority of the _test.go files.\n\nIn addition to rsc's comments about a bigger doc.go style introduction I have some minor comments below.\n\nThis package is also very technical, so some example_test files might be in order, but they can come later.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control.go\nFile ipv4/control.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control.go#newcode14\nipv4/control.go:14: mu     sync.Mutex\nrawOpt is unexported so you can embed sync.Mutex directly, then you can skip some of the forwarding methods.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control.go#newcode19\nipv4/control.go:19: func (c *rawOpt) unlock()                   { c.mu.Unlock() }\nSee above.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control_bsd.go\nFile ipv4/control_bsd.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control_bsd.go#newcode110\nipv4/control_bsd.go:110: return\nnit: return nil might be more idiomatic.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control_linux.go\nFile ipv4/control_linux.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control_linux.go#newcode14\nipv4/control_linux.go:14: const pathset = FlagSrc | FlagDst | FlagInterface\ncould this have a comment please.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go\nFile ipv4/header.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go#newcode25\nipv4/header.go:25: \nIf there is a link to a relevant RFC, could you include it here please.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go#newcode43\nipv4/header.go:43: \nDoes HeaderField need to be exported ?\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_plan9.go\nFile ipv4/helper_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_plan9.go#newcode27\nipv4/helper_plan9.go:27: }\nCan this be moved a generic helper.go, or preferably ipv4.go? It doesn't look to be specific to plan9.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_posix.go\nFile ipv4/helper_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_posix.go#newcode70\nipv4/helper_posix.go:70: func netAddrToIP4(a net.Addr) net.IP {\nsee comment in helper_plan9.go\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/packet.go\nFile ipv4/packet.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/packet.go#newcode75\nipv4/packet.go:75: func (c *packetHandler) Write(h *Header, p []byte, cm *ControlMessage) (err error) {\nI think the named err return value is out of place here.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/sockopt_bsd.go\nFile ipv4/sockopt_bsd.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/sockopt_bsd.go#newcode83\nipv4/sockopt_bsd.go:83: }\nSame as below.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/sockopt_bsd.go#newcode98\nipv4/sockopt_bsd.go:98: return nil\nA version of this function exists in http://codereview.appspot.com/6497044/diff/2002/src/pkg/net/sockoptip_bsd.go, but this version avoids the call to fd.incref, which one is correct ?",
			"disapproval": false,
			"date": "2012-09-03 11:04:47.298910",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/07 03:28:11, mikio wrote:\n> On Fri, Sep 7, 2012 at 11:04 AM,  <mailto:alex.brainman@gmail.com> wrote:\n> \n> > It fails to build for windows:\n> \n\nMy bad, it builds and runs fine:\n\nC:\\>test -test.v\n=== RUN TestMarshalHeader\n--- PASS: TestMarshalHeader (0.00 seconds)\n=== RUN TestParseHeader\n--- PASS: TestParseHeader (0.00 seconds)\nPASS",
			"disapproval": false,
			"date": "2012-09-07 03:53:42.652700",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2012-08-28 21:55:12.587460",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/01 14:59:26, rsc wrote:\n\n> [codereview just ate my last reply, which was quite long; this one will be\n> shorter]\n\nah, perhaps my bad.\n\n> I'll leave the code itself for Dave Cheney to review, if he's willing.\n\nthanks Dave, rsc.\n\n> API looks reasonable. Once it proves stable and useful we might think about\n> making it net/ipv4 instead, but let's keep it here for now.\n\nagreed.\n\n> Please don't use .File() to get a file descriptor. That will disable\n> non-blocking I/O on the connection. The fd is intentionally hidden, precisely to\n> keep people from touching it behind package net's back. To get around that I\n> would suggest using reflect to dig into the structs and extract the fd integer.\n\nI missed that, a conversation btw you and fullung a bit ago. done, thx.\n\n> This doc comment could use some more information, like an example. This seems\n> like quite a large package and I'm not at all sure how to use it.\n\ndone.",
			"disapproval": false,
			"date": "2012-09-05 03:32:53.376010",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/10 04:14:32, brainman wrote:\n\n> === RUN TestTCPUnicastSockopt\n> --- FAIL: TestTCPUnicastSockopt (0.00 seconds)\n> unicastsockopt_test.go:115:     ipv4.Conn.SetTOS failed: setsockopt: An invalid\n> argument was supplied.\n\nUrgh, sorry and thanks for the test run.\nIP_TOS option is supported on 8 and Server 2012 only.\nWill drop it in the case of windows.",
			"disapproval": false,
			"date": "2012-09-10 05:56:24.294760",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/07 08:03:08, mikio wrote:\n> \n> replumbing to windows done.\n\nC:\\go\\path\\src\\code.google.com\\p\\go.net\\ipv4>go test -v\n=== RUN TestMarshalHeader\n--- PASS: TestMarshalHeader (0.00 seconds)\n=== RUN TestParseHeader\n--- PASS: TestParseHeader (0.00 seconds)\n=== RUN TestUDPMulticastSockopt\n--- PASS: TestUDPMulticastSockopt (0.00 seconds)\n=== RUN TestIPMulticastSockopt\n--- PASS: TestIPMulticastSockopt (0.00 seconds)\nmulticastsockopt_test.go:63:    skipping test; must be root\n=== RUN TestTCPUnicastSockopt\n--- FAIL: TestTCPUnicastSockopt (0.00 seconds)\nunicastsockopt_test.go:115:     ipv4.Conn.SetTOS failed: setsockopt: An invalid argument was supplied.\n=== RUN TestUDPUnicastSockopt\n--- PASS: TestUDPUnicastSockopt (0.00 seconds)\n=== RUN TestIPUnicastSockopt\n--- PASS: TestIPUnicastSockopt (0.00 seconds)\nunicastsockopt_test.go:90:      skipping test; must be root\nFAIL\nexit status 1\nFAIL    code.google.com/p/go.net/ipv4   0.094s\n\nAlex",
			"disapproval": false,
			"date": "2012-09-10 04:14:32.150590",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net (cc: gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-05 03:51:55.149280",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 7, 2012 at 11:04 AM,  <alex.brainman@gmail.com> wrote:\r\n\r\n> It fails to build for windows:\r\n\r\nthanks for your confirmation.\r\nas in CL description  this CL requires belows:\r\nhttp://codereview.appspot.com/6426047/\r\nhttp://codereview.appspot.com/6506063/\r\n",
			"disapproval": false,
			"date": "2012-09-07 03:28:11.524860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM modulo the minor tweaks to the comments below.\n\nI have tested on linux/amd64 and linux/arm and all looks good.\n\nAs there are some prerequisite changes to go in first, can you please find someone, or ask on the list, who has some windows systems to test this CL. There is a lot of code stubbed out on windows and I don't want the tests to fail because windows doesn't support feature X.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/control_linux.go\nFile ipv4/control_linux.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/control_linux.go#newcode14\nipv4/control_linux.go:14: // Linux provides a convenience path control option IP_PKTINFO that\ns/convenience/convenient/g\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go\nFile ipv4/dgramopt_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go#newcode67\nipv4/dgramopt_posix.go:67: // should be copied, sent back to the originator.\nsuggest: should be copied and send back to the originator.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go#newcode80\nipv4/dgramopt_posix.go:80: // should be copied, sent back to the originator.\nSee above\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go#newcode111\nipv4/dgramopt_posix.go:111: // LeaveGroup leaves the group address group on the interface ifi.\nDoes there need to be a word of warning if ifi is nil ?\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go\nFile ipv4/doc.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode8\nipv4/doc.go:8: // The package provides IP-level socket options that allow to\nthat allow manipulation of IPv4 facilities.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode58\nipv4/doc.go:58: // start multicasting, at least joining network interfaces and group\ns/start/you begin/g\ns/at least/at a minimum/g\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode80\nipv4/doc.go:80: // Second, the application joins groups, starts listenting to the\ns/listenting/listening/g\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode82\nipv4/doc.go:82: // the service port for transport layer protocols does not matter with\nsuggest protocol not protocols as we can only do one per address, right ?\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode96\nipv4/doc.go:96: // The application might set per packet basis control message\ndelete basis\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode108\nipv4/doc.go:108: // interests by using the control message that contains the\nare of interest\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode109\nipv4/doc.go:109: // destination addrees of the received packet.\naddress\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode126\nipv4/doc.go:126: // The application also could send both unicast and multicast packets.\ncan also send\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode176\nipv4/doc.go:176: // UDP port to join the same group address because the net package\nfull stop after address, start the new sentence a The\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode177\nipv4/doc.go:177: // provides a socket that listens to a wildcard address with resuable\nthe new package will provide a socket\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/endpoint.go\nFile ipv4/endpoint.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/endpoint.go#newcode50\nipv4/endpoint.go:50: // SetControlMessage sets the per packet basis IP-level socket options.\ndelete basis\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/endpoint.go#newcode97\nipv4/endpoint.go:97: // NewPacketConn returns a new PacketConn using c for network I/O.\nusing c as its underlying transport ?\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/example_test.go\nFile ipv4/example_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/example_test.go#newcode136\nipv4/example_test.go:136: AllSPFRouters        = net.IPv4(224, 0, 0, 5)\nAllOSPFRouters ?\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header.go\nFile ipv4/header.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header.go#newcode48\nipv4/header.go:48: maxHeaderLen = 60 // for a while, until the day interesting I-D/RFC reuse the VHL field comes\nmaybe just write // sensible default, revisit if later RFCs define new VHL (? what is that) fields.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header.go#newcode125\nipv4/header.go:125: // incoming, outgoing IPv4 header.  On the other hand, Linux, OpenBSD\nThis doesn't read very well, but I don't understand the subject matter well enough to make a suggestion. If you are able, could you please make another pass at rewording it. It might be useful to define the difference between new IP input and traditional raw IP socket IO.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header_test.go\nFile ipv4/header_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header_test.go#newcode36\nipv4/header_test.go:36: }\nPlease add a TODO to add some non conforming test cases here. We can tackle them in a following CL.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/helper_unix.go\nFile ipv4/helper_unix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/helper_unix.go#newcode19\nipv4/helper_unix.go:19: return -1, errInvalidConnType\nIt is more traditional to return the zero value along with an err value. I believe this is to discourage people from trying to divine meaning from the return value without checking the error. If it is convenient I think these should be zero.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/packet.go\nFile ipv4/packet.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/packet.go#newcode64\nipv4/packet.go:64: //\tVersion       = don't care\nSurely this should be 4 ?",
			"disapproval": false,
			"date": "2012-09-06 12:40:36.190810",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net (cc: gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-06 10:43:31.204080",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Dave,\r\n\r\nOn Wed, Sep 5, 2012 at 3:27 PM,  <dave@cheney.net> wrote:\r\n\r\n> There are a lot of comments included here, but they are comparatively\r\n> minor.\r\n\r\nThanks for your review, much appreciated.\r\n\r\n> Which platforms have you tested this on ?\r\n\r\nUsually I use freebsd and/or darwin snow leopard.\r\nSometimes linux for linux depends option testing such as IP_PKTINFO.\r\n\r\n> Do you need any help testing\r\n> on platforms you don't have access to ?\r\n\r\nSure, thanks!\r\nI'm happy if you can run Windows 2000, XP, Vista or 7 or 8.\r\n",
			"disapproval": false,
			"date": "2012-09-06 10:50:50.295220",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net, alex.brainman@gmail.com (cc: gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-07 08:01:04.096750",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all done, thanks for your review, Dave.\n\nwill back to the stdlib tree for preparing a move, still\nremains a lot of works such as packing, carpet cleaning,\nreplumbing, etc.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/control_linux.go\nFile ipv4/control_linux.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/control_linux.go#newcode14\nipv4/control_linux.go:14: // Linux provides a convenience path control option IP_PKTINFO that\nOn 2012/09/06 12:40:36, dfc wrote:\n> s/convenience/convenient/g\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go\nFile ipv4/dgramopt_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go#newcode67\nipv4/dgramopt_posix.go:67: // should be copied, sent back to the originator.\nOn 2012/09/06 12:40:36, dfc wrote:\n> suggest: should be copied and send back to the originator.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go#newcode80\nipv4/dgramopt_posix.go:80: // should be copied, sent back to the originator.\nOn 2012/09/06 12:40:36, dfc wrote:\n> See above\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/dgramopt_posix.go#newcode111\nipv4/dgramopt_posix.go:111: // LeaveGroup leaves the group address group on the interface ifi.\nOn 2012/09/06 12:40:36, dfc wrote:\n> Does there need to be a word of warning if ifi is nil ?\n\nNo, cannot say anymore, a lot of \"undefined behavior\" things \nout there. For example, on BSD variants we rely on a interface \naddress to specify the multicast i/f. What happens if that address \nis disabled or removed from the i/f? certain thing is that kernel\nwill try to look up the IP listener with the args we passed to.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go\nFile ipv4/doc.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode8\nipv4/doc.go:8: // The package provides IP-level socket options that allow to\nOn 2012/09/06 12:40:36, dfc wrote:\n> that allow manipulation of IPv4 facilities.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode58\nipv4/doc.go:58: // start multicasting, at least joining network interfaces and group\nOn 2012/09/06 12:40:36, dfc wrote:\n> s/start/you begin/g\n> s/at least/at a minimum/g\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode80\nipv4/doc.go:80: // Second, the application joins groups, starts listenting to the\nOn 2012/09/06 12:40:36, dfc wrote:\n> s/listenting/listening/g\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode82\nipv4/doc.go:82: // the service port for transport layer protocols does not matter with\nOn 2012/09/06 12:40:36, dfc wrote:\n> suggest protocol not protocols as we can only do one per address, right ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode96\nipv4/doc.go:96: // The application might set per packet basis control message\nOn 2012/09/06 12:40:36, dfc wrote:\n> delete basis\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode108\nipv4/doc.go:108: // interests by using the control message that contains the\nOn 2012/09/06 12:40:36, dfc wrote:\n> are of interest\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode109\nipv4/doc.go:109: // destination addrees of the received packet.\nOn 2012/09/06 12:40:36, dfc wrote:\n> address\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode126\nipv4/doc.go:126: // The application also could send both unicast and multicast packets.\nOn 2012/09/06 12:40:36, dfc wrote:\n> can also send\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode176\nipv4/doc.go:176: // UDP port to join the same group address because the net package\nOn 2012/09/06 12:40:36, dfc wrote:\n> full stop after address, start the new sentence a The\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/doc.go#newcode177\nipv4/doc.go:177: // provides a socket that listens to a wildcard address with resuable\nOn 2012/09/06 12:40:36, dfc wrote:\n> the new package will provide a socket\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/endpoint.go\nFile ipv4/endpoint.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/endpoint.go#newcode50\nipv4/endpoint.go:50: // SetControlMessage sets the per packet basis IP-level socket options.\nOn 2012/09/06 12:40:36, dfc wrote:\n> delete basis\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/endpoint.go#newcode97\nipv4/endpoint.go:97: // NewPacketConn returns a new PacketConn using c for network I/O.\nOn 2012/09/06 12:40:36, dfc wrote:\n> using c as its underlying transport ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/example_test.go\nFile ipv4/example_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/example_test.go#newcode136\nipv4/example_test.go:136: AllSPFRouters        = net.IPv4(224, 0, 0, 5)\nOn 2012/09/06 12:40:36, dfc wrote:\n> AllOSPFRouters ?\n\nI'd prefer the term in RFC 2328 because this is just an example.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header.go\nFile ipv4/header.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header.go#newcode48\nipv4/header.go:48: maxHeaderLen = 60 // for a while, until the day interesting I-D/RFC reuse the VHL field comes\nOn 2012/09/06 12:40:36, dfc wrote:\n> maybe just write // sensible default, revisit if later RFCs define new VHL (?\n> what is that) fields.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header.go#newcode125\nipv4/header.go:125: // incoming, outgoing IPv4 header.  On the other hand, Linux, OpenBSD\nOn 2012/09/06 12:40:36, dfc wrote:\n> This doesn't read very well, but I don't understand the subject matter well\n> enough to make a suggestion. If you are able, could you please make another pass\n> at rewording it. It might be useful to define the difference between new IP\n> input and traditional raw IP socket IO.\n\nwill drop it.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header_test.go\nFile ipv4/header_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/header_test.go#newcode36\nipv4/header_test.go:36: }\nOn 2012/09/06 12:40:36, dfc wrote:\n> Please add a TODO to add some non conforming test cases here. We can tackle them\n> in a following CL.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/helper_unix.go\nFile ipv4/helper_unix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/helper_unix.go#newcode19\nipv4/helper_unix.go:19: return -1, errInvalidConnType\nOn 2012/09/06 12:40:36, dfc wrote:\n> It is more traditional to return the zero value along with an err value. I\n> believe this is to discourage people from trying to divine meaning from the\n> return value without checking the error. If it is convenient I think these\n> should be zero.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/packet.go\nFile ipv4/packet.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/24036/ipv4/packet.go#newcode64\nipv4/packet.go:64: //\tVersion       = don't care\nOn 2012/09/06 12:40:36, dfc wrote:\n> Surely this should be 4 ?\n\nDone.",
			"disapproval": false,
			"date": "2012-09-06 15:09:16.420990",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by rsc)",
			"disapproval": false,
			"date": "2012-09-01 14:40:48.715320",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "[codereview just ate my last reply, which was quite long; this one will be shorter]\n\nI'll leave the code itself for Dave Cheney to review, if he's willing.\n\nAPI looks reasonable. Once it proves stable and useful we might think about making it net/ipv4 instead, but let's keep it here for now.\n\nPlease don't use .File() to get a file descriptor. That will disable non-blocking I/O on the connection. The fd is intentionally hidden, precisely to keep people from touching it behind package net's back. To get around that I would suggest using reflect to dig into the structs and extract the fd integer.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go\nFile ipv4/header.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go#newcode5\nipv4/header.go:5: // Package ipv4 implements IP-level socket options for the Internet\nThis doc comment could use some more information, like an example. This seems like quite a large package and I'm not at all sure how to use it.",
			"disapproval": false,
			"date": "2012-09-01 14:59:26.511120",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Dave.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control.go\nFile ipv4/control.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control.go#newcode14\nipv4/control.go:14: mu     sync.Mutex\nfor now I'd keep them close.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control_linux.go\nFile ipv4/control_linux.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/control_linux.go#newcode14\nipv4/control_linux.go:14: const pathset = FlagSrc | FlagDst | FlagInterface\nOn 2012/09/03 11:04:47, dfc wrote:\n> could this have a comment please.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go\nFile ipv4/header.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go#newcode5\nipv4/header.go:5: // Package ipv4 implements IP-level socket options for the Internet\nOn 2012/09/01 14:59:26, rsc wrote:\n> This doc comment could use some more information, like an example. This seems\n> like quite a large package and I'm not at all sure how to use it.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go#newcode25\nipv4/header.go:25: \nOn 2012/09/03 11:04:47, dfc wrote:\n> If there is a link to a relevant RFC, could you include it here please.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go#newcode43\nipv4/header.go:43: \nnope, it's just for debugging. thx.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/header.go#newcode43\nipv4/header.go:43: \nOn 2012/09/03 11:04:47, dfc wrote:\n> Does HeaderField need to be exported ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_plan9.go\nFile ipv4/helper_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_plan9.go#newcode27\nipv4/helper_plan9.go:27: }\nOn 2012/09/03 11:04:47, dfc wrote:\n> Can this be moved a generic helper.go, or preferably ipv4.go? It doesn't look to\n> be specific to plan9.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_posix.go\nFile ipv4/helper_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/helper_posix.go#newcode70\nipv4/helper_posix.go:70: func netAddrToIP4(a net.Addr) net.IP {\nOn 2012/09/03 11:04:47, dfc wrote:\n> see comment in helper_plan9.go\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/packet.go\nFile ipv4/packet.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/packet.go#newcode75\nipv4/packet.go:75: func (c *packetHandler) Write(h *Header, p []byte, cm *ControlMessage) (err error) {\nOn 2012/09/03 11:04:47, dfc wrote:\n> I think the named err return value is out of place here.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/sockopt_bsd.go\nFile ipv4/sockopt_bsd.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/25001/ipv4/sockopt_bsd.go#newcode98\nipv4/sockopt_bsd.go:98: return nil\nMy guess is that both fd.incref/decref are just for closing multiple socket\nread/writers, network I/O goroutines, on the same socket gracefully.\nSo we probably might drop fd.incref/decref from socket option handlers\nin net package.",
			"disapproval": false,
			"date": "2012-09-05 03:50:55.979490",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6482044/diff/21002/ipv4/control_bsd.go\nFile ipv4/control_bsd.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_bsd.go#newcode109\nipv4/control_bsd.go:109: func marshalControlMessage(cm *ControlMessage) []byte {\nOn 2012/09/05 06:27:16, dfc wrote:\n> is this a TODO here? Plan9 has it down as to be implemented. If there is nothing\n> to do here, or it isn't supported, maybe just note it here.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_plan9.go\nFile ipv4/control_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_plan9.go#newcode12\nipv4/control_plan9.go:12: // TODO: Implement this\nOn 2012/09/05 06:27:16, dfc wrote:\n> Go style is \n> \n> // TODO(mikioh) explanation\n> \n> so people know to ask you if they get around to it before you.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_windows.go\nFile ipv4/control_windows.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_windows.go#newcode12\nipv4/control_windows.go:12: // TODO: Implement this\nOn 2012/09/05 06:27:16, dfc wrote:\n> See control_plan9.go\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_plan9.go\nFile ipv4/dgramopt_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_plan9.go#newcode13\nipv4/dgramopt_plan9.go:13: // TODO: Implement this\nOn 2012/09/05 06:27:16, dfc wrote:\n> See previous files for suggested TODO style\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_posix.go\nFile ipv4/dgramopt_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_posix.go#newcode138\nipv4/dgramopt_posix.go:138: //\terr = p1.JoinGroup(<if #1, \"en0\">, <group address #1, \"224.0.0.248\">)\nOn 2012/09/05 06:27:16, dfc wrote:\n> This style is confusing to me, maybe something like this would be easier to\n> understand\n> \n> ifi := \"en0\" // the first interface on this host\n> addr := \"224.0.0.248\" // the address of the multicast group to join\n> err := p1.JoinGroup(ifi, addr)\n> \n> I would also encourage you to convert this to an testing.Example code example.\n\nrevised and moved to doc.go.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_posix.go#newcode138\nipv4/dgramopt_posix.go:138: //\terr = p1.JoinGroup(<if #1, \"en0\">, <group address #1, \"224.0.0.248\">)\nOn 2012/09/05 06:27:16, dfc wrote:\n> This style is confusing to me, maybe something like this would be easier to\n> understand\n> \n> ifi := \"en0\" // the first interface on this host\n> addr := \"224.0.0.248\" // the address of the multicast group to join\n> err := p1.JoinGroup(ifi, addr)\n> \n> I would also encourage you to convert this to an testing.Example code example.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go\nFile ipv4/doc.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode4\nipv4/doc.go:4: \n> This is excellent. Thank you.\n\nThanks for the wording correction.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode12\nipv4/doc.go:12: // on the DiffServ, differenciated services environment.\nOn 2012/09/05 06:27:16, dfc wrote:\n> s/differenciated/differentiated/g\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode22\nipv4/doc.go:22: // field on the IPv4 header of each packet.\nOn 2012/09/05 06:27:16, dfc wrote:\n> This is a bit of a mouthful, I suggest\n> \n> When a single TCP connection carrying a data flow of multiple packets needs to\n> indicate the flow is important, ipv4.Conn is used to set the type-of-service\n> field on the IPv4 header for each packet.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode35\nipv4/doc.go:35: //\t\t\tdefer c.Close()\nOn 2012/09/05 06:27:16, dfc wrote:\n> I think this should also go into an example. This can happen in a followup CL.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode40\nipv4/doc.go:40: //\t\t\terr := ipv4.NewConn(c).SetTOS(0x28)\nOn 2012/09/05 06:27:16, dfc wrote:\n> Is 0x28 a common value ? Does it need a constant ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode126\nipv4/doc.go:126: //\t\tp.SetTOS(0x28)\nOn 2012/09/05 06:27:16, dfc wrote:\n> yeah, probably needs a constant.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode146\nipv4/doc.go:146: // It is possible for the application to leave or re-join the group\nOn 2012/09/05 06:27:16, dfc wrote:\n> leave or rejoin a multicast group on the network interface\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go\nFile ipv4/endpoint.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode14\nipv4/endpoint.go:14: // It allows to set basic IP-level socket options such as TOS and TTL.\nOn 2012/09/05 06:27:16, dfc wrote:\n> It is used to control basic IP-level socket options such as TOS and TTL.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode32\nipv4/endpoint.go:32: // A PacketConn represents a packet network endpoint that uses IPv4\nOn 2012/09/05 06:27:16, dfc wrote:\n> that uses the IPv4 transport.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode33\nipv4/endpoint.go:33: // transport.  It allows to set several IP-level socket options that\nOn 2012/09/05 06:27:16, dfc wrote:\n> It is used to control several IP-level socket options including multicasting.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode71\nipv4/endpoint.go:71: // the endpoint.\nOn 2012/09/05 06:27:16, dfc wrote:\n> sets the read deadline\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode80\nipv4/endpoint.go:80: // the endpoint.\nOn 2012/09/05 06:27:16, dfc wrote:\n> sets the write deadline\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode89\nipv4/endpoint.go:89: func (c *PacketConn) Close() error {\nOn 2012/09/05 06:27:16, dfc wrote:\n> I'm concerned about c.*.c = nil being used as a signal here. If these *Conn\n> types are shared across multiple goroutines there may need to be a mutex here to\n> ensure the nil is properly visible. Are the types in endpoint.go safe for used\n> by multiple goroutines ?\n\nhm, looks not good idea to keep the state here.\nwill drop it.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode89\nipv4/endpoint.go:89: func (c *PacketConn) Close() error {\nOn 2012/09/05 06:27:16, dfc wrote:\n> I'm concerned about c.*.c = nil being used as a signal here. If these *Conn\n> types are shared across multiple goroutines there may need to be a mutex here to\n> ensure the nil is properly visible. Are the types in endpoint.go safe for used\n> by multiple goroutines ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode113\nipv4/endpoint.go:113: // datagram directly such as OSPF, GRE.\nOn 2012/09/05 06:27:16, dfc wrote:\n> See PacketConn\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode123\nipv4/endpoint.go:123: // platforms and sometimes it might requrie routing configuration.\nOn 2012/09/05 06:27:16, dfc wrote:\n> s/requrie/require/g\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode124\nipv4/endpoint.go:124: func (c *RawConn) JoinGroup(ifi *net.Interface, group net.Addr) error {\nOn 2012/09/05 06:27:16, dfc wrote:\n> I think this method is unnecessary. c embeds the JoinGroup method from dgramOpt.\n> However the comment on this method is excellent, so if you decide to remove the\n> method, please don't loose the comment.\n\nit's just for godoc, to dedupe comments.\nmoved to doc.go.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode124\nipv4/endpoint.go:124: func (c *RawConn) JoinGroup(ifi *net.Interface, group net.Addr) error {\nOn 2012/09/05 06:27:16, dfc wrote:\n> I think this method is unnecessary. c embeds the JoinGroup method from dgramOpt.\n> However the comment on this method is excellent, so if you decide to remove the\n> method, please don't loose the comment.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode149\nipv4/endpoint.go:149: // SetReadDeadline sets the read and write deadlines associated with\nOn 2012/09/05 06:27:16, dfc wrote:\n> sets the read deadline\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode159\nipv4/endpoint.go:159: // the endpoint.\nOn 2012/09/05 06:27:16, dfc wrote:\n> sets the write deadline\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode175\nipv4/endpoint.go:175: c.packetHandler.c = nil\nOn 2012/09/05 06:27:16, dfc wrote:\n> See previous comment about PacketConn.Close()\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode188\nipv4/endpoint.go:188: }\nOn 2012/09/05 06:27:16, dfc wrote:\n> Why would r.packetHandler.ok not be true ? \n\nuser can easily pass (*net.IPConn)(nil) because IPConn\nrequires admin priv.  and I sometimes see non-error\ncheck Dial/ListenPacket calls. but... hm, eventually...\nunnecessary, will drop it.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode188\nipv4/endpoint.go:188: }\nOn 2012/09/05 06:27:16, dfc wrote:\n> Why would r.packetHandler.ok not be true ? \n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/genericopt_plan9.go\nFile ipv4/genericopt_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/genericopt_plan9.go#newcode12\nipv4/genericopt_plan9.go:12: // TODO: Implement this\nOn 2012/09/05 06:27:16, dfc wrote:\n> See previous comments for suggested TODO style\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go\nFile ipv4/header.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode48\nipv4/header.go:48: maxHeaderLen    = 60\nOn 2012/09/05 06:27:16, dfc wrote:\n> Perhaps reference where this value comes from, ie RFC 1234 section N\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode55\nipv4/header.go:55: posTotalLen             = 2  // packet tolal length\nOn 2012/09/05 06:27:16, dfc wrote:\n> s/tolal/total/g\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode88\nipv4/header.go:88: // NOTE: A binary header format\nOn 2012/09/05 06:27:16, dfc wrote:\n> Note: XXXX is a binary header format\n> \n> I think XXX is netlink, but please correct me.\n\nrevised.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode88\nipv4/header.go:88: // NOTE: A binary header format\nOn 2012/09/05 06:27:16, dfc wrote:\n> Note: XXXX is a binary header format\n> \n> I think XXX is netlink, but please correct me.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode90\nipv4/header.go:90: // Byte order in the packet from the kernel:\nOn 2012/09/05 06:27:16, dfc wrote:\n> Byte order is defined by the endianness of the host ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode91\nipv4/header.go:91: // - all fields are in network byte order on Linux,\nOn 2012/09/05 06:27:16, dfc wrote:\n> I would reverse this so the OS comes before the description.\n> \n> On Linux, all fields ...\n> On OpenBSD, all fields are ...\n> On other BSD platforms, almost all fields are ...\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode97\nipv4/header.go:97: // Field adjustment in the packet from the kernel:\nOn 2012/09/05 06:27:16, dfc wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode103\nipv4/header.go:103: // Byte order in the packet to the kernel:\nOn 2012/09/05 06:27:16, dfc wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode108\nipv4/header.go:108: //   traditional BSD-style platforms.\nOn 2012/09/05 06:27:16, dfc wrote:\n> Should there be a \\n here? The comment above does not reference this variable.\n\nrevised.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode108\nipv4/header.go:108: //   traditional BSD-style platforms.\nOn 2012/09/05 06:27:16, dfc wrote:\n> Should there be a \\n here? The comment above does not reference this variable.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode136\nipv4/header.go:136: }\nOn 2012/09/05 06:27:16, dfc wrote:\n> Does this need a check ?\n\nnormally net.IP keeps an IPv4 address with IPv6 IPv4-mapped \naddress format, so yes.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode136\nipv4/header.go:136: }\nOn 2012/09/05 06:27:16, dfc wrote:\n> Does this need a check ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go\nFile ipv4/helper.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode4\nipv4/helper.go:4: \nOn 2012/09/05 06:27:16, dfc wrote:\n> nit: I would prefer this file called ipv4.go, but feel free to ignore, this is\n> just a personal preference.\n\nsorry, this file contains nothing related to IPv4 facilities such as:\n- protocol constants,\n- protocol variables,\n- message structures,\n- finite state machines.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode4\nipv4/helper.go:4: \nOn 2012/09/05 06:27:16, dfc wrote:\n> nit: I would prefer this file called ipv4.go, but feel free to ignore, this is\n> just a personal preference.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode23\nipv4/helper.go:23: \nOn 2012/09/05 06:27:16, dfc wrote:\n> Why not use bytes.Equal ? \n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode39\nipv4/helper.go:39: }\nnice catch, thx.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode39\nipv4/helper.go:39: }\nOn 2012/09/05 06:27:16, dfc wrote:\n> This check isn't needed. If a == nil, the type check will not match any of the\n> following\n> \n> http://play.golang.org/p/Un1u1b-I3s\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode78\nipv4/helper.go:78: }\nOn 2012/09/05 06:27:16, dfc wrote:\n> Is this case common ? Should it move to the top of the function?\n\nhm, will drop it.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode78\nipv4/helper.go:78: }\nOn 2012/09/05 06:27:16, dfc wrote:\n> Is this case common ? Should it move to the top of the function?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper_posix.go\nFile ipv4/helper_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper_posix.go#newcode37\nipv4/helper_posix.go:37: if bytesEqual(mreq.Multiaddr[:], net.IPv4zero.To4()) {\nOn 2012/09/05 06:27:16, dfc wrote:\n> see comment in helper.go re: bytes.Equal\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/mocktransponder_test.go\nFile ipv4/mocktransponder_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/mocktransponder_test.go#newcode19\nipv4/mocktransponder_test.go:19: // runPyaloadTransponder trasmits IPv4 datagram payloads to the\nOn 2012/09/05 06:27:16, dfc wrote:\n> s/runPyaloadTransponder/runPayloadTransponder/g\n> \n> s/trasmits/transmits/g\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go\nFile ipv4/multicast_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go#newcode16\nipv4/multicast_test.go:16: func TestReadWriteMulticastUDPoIPPayload(t *testing.T) {\nOn 2012/09/05 06:27:16, dfc wrote:\n> toIPPayload ?\n\nchanged to IPPayloadUDP.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go#newcode16\nipv4/multicast_test.go:16: func TestReadWriteMulticastUDPoIPPayload(t *testing.T) {\nOn 2012/09/05 06:27:16, dfc wrote:\n> toIPPayload ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go#newcode22\nipv4/multicast_test.go:22: c, err := net.ListenPacket(\"udp4\", \"224.0.0.0\"+\":\"+\"1024\") // see RFC 4727\nOn 2012/09/05 06:27:16, dfc wrote:\n> Can't this just be \"224.0.0.0:1024\" ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go#newcode33\nipv4/multicast_test.go:33: dst, err := net.ResolveUDPAddr(\"udp4\", \"224.0.0.254\"+\":\"+\"1024\") // see RFC 4727\nOn 2012/09/05 06:27:16, dfc wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicastlistener_test.go\nFile ipv4/multicastlistener_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicastlistener_test.go#newcode32\nipv4/multicastlistener_test.go:32: c, err := net.ListenPacket(\"udp4\", \"0.0.0.0\"+\":\"+\"0\")\nOn 2012/09/05 06:27:16, dfc wrote:\n> see previous\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go\nFile ipv4/packet.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go#newcode11\nipv4/packet.go:11: \nOn 2012/09/05 06:27:16, dfc wrote:\n> Needs a comment\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go#newcode57\nipv4/packet.go:57: // message cm allows to specify the datagram path, outgoing interface,\nOn 2012/09/05 06:27:16, dfc wrote:\n> The control message cm allows the datagram path and the outgoing interface to be\n> specified. Currently only Linux supports this/is supported.\n> \n> // is the Linux limitation in this package, or in the underlying OS ?\n\nof course it depends on platforms.\npls refer to ip(7) on linux, IP_PKTINFO.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go#newcode57\nipv4/packet.go:57: // message cm allows to specify the datagram path, outgoing interface,\nOn 2012/09/05 06:27:16, dfc wrote:\n> The control message cm allows the datagram path and the outgoing interface to be\n> specified. Currently only Linux supports this/is supported.\n> \n> // is the Linux limitation in this package, or in the underlying OS ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go#newcode59\nipv4/packet.go:59: // nil unless the control of the outgoing datagram is required.\nOn 2012/09/05 06:27:16, dfc wrote:\n> cm may be nil if control of the outgoing datagram is not required.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go\nFile ipv4/payload.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go#newcode11\nipv4/payload.go:11: \nOn 2012/09/05 06:27:16, dfc wrote:\n> Needs small comment\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go#newcode22\nipv4/payload.go:22: // src on the received datagram.\nOn 2012/09/05 06:27:16, dfc wrote:\n> source address src of? the received datagram.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go#newcode59\nipv4/payload.go:59: // unless the control of the outgoing datagram is required.\nOn 2012/09/05 06:27:16, dfc wrote:\n> See packet.go:Write\n\nDone.",
			"disapproval": false,
			"date": "2012-09-06 10:43:47.988430",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It fails to build for windows:\n\n# GOOS=windows go test -c\n# code.google.com/p/go.net/ipv4\n./packet.go:28: c.c.ReadMsgIP undefined (type *net.IPConn has no field or method ReadMsgIP)\n./packet.go:95: c.c.WriteMsgIP undefined (type *net.IPConn has no field or method WriteMsgIP)\n./payload.go:32: rd.ReadMsgUDP undefined (type *net.UDPConn has no field or method ReadMsgUDP)\n./payload.go:37: rd.ReadMsgIP undefined (type *net.IPConn has no field or method ReadMsgIP)\n./payload.go:71: wr.WriteMsgUDP undefined (type *net.UDPConn has no field or method WriteMsgUDP)\n./payload.go:73: wr.WriteMsgIP undefined (type *net.IPConn has no field or method WriteMsgIP)\n#\n\nYou could use http://code.google.com/p/go-wiki/wiki/WindowsCrossCompiling to see it yourself.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-07 02:04:40.984910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This package is looking really good. I think one more pass and it should be good to go.\n\nThere are a lot of comments included here, but they are comparatively minor.\n\nMy outstanding concern is the way we are stepping around the fd.incref/decref controls in the net package. I know that your other CL is removing those controls as well, so I will do some reading of the net source to check what they are protecting.\n\nWhich platforms have you tested this on ? Do you need any help testing on platforms you don't have access to ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_bsd.go\nFile ipv4/control_bsd.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_bsd.go#newcode109\nipv4/control_bsd.go:109: func marshalControlMessage(cm *ControlMessage) []byte {\nis this a TODO here? Plan9 has it down as to be implemented. If there is nothing to do here, or it isn't supported, maybe just note it here.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_plan9.go\nFile ipv4/control_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_plan9.go#newcode12\nipv4/control_plan9.go:12: // TODO: Implement this\nGo style is \n\n// TODO(mikioh) explanation\n\nso people know to ask you if they get around to it before you.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_windows.go\nFile ipv4/control_windows.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/control_windows.go#newcode12\nipv4/control_windows.go:12: // TODO: Implement this\nSee control_plan9.go\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_plan9.go\nFile ipv4/dgramopt_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_plan9.go#newcode13\nipv4/dgramopt_plan9.go:13: // TODO: Implement this\nSee previous files for suggested TODO style\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_posix.go\nFile ipv4/dgramopt_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/dgramopt_posix.go#newcode138\nipv4/dgramopt_posix.go:138: //\terr = p1.JoinGroup(<if #1, \"en0\">, <group address #1, \"224.0.0.248\">)\nThis style is confusing to me, maybe something like this would be easier to understand\n\nifi := \"en0\" // the first interface on this host\naddr := \"224.0.0.248\" // the address of the multicast group to join\nerr := p1.JoinGroup(ifi, addr)\n\nI would also encourage you to convert this to an testing.Example code example.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go\nFile ipv4/doc.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode4\nipv4/doc.go:4: \nThis is excellent. Thank you.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode12\nipv4/doc.go:12: // on the DiffServ, differenciated services environment.\ns/differenciated/differentiated/g\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode22\nipv4/doc.go:22: // field on the IPv4 header of each packet.\nThis is a bit of a mouthful, I suggest\n\nWhen a single TCP connection carrying a data flow of multiple packets needs to indicate the flow is important, ipv4.Conn is used to set the type-of-service field on the IPv4 header for each packet.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode35\nipv4/doc.go:35: //\t\t\tdefer c.Close()\nI think this should also go into an example. This can happen in a followup CL.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode40\nipv4/doc.go:40: //\t\t\terr := ipv4.NewConn(c).SetTOS(0x28)\nIs 0x28 a common value ? Does it need a constant ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode126\nipv4/doc.go:126: //\t\tp.SetTOS(0x28)\nyeah, probably needs a constant.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/doc.go#newcode146\nipv4/doc.go:146: // It is possible for the application to leave or re-join the group\nleave or rejoin a multicast group on the network interface\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go\nFile ipv4/endpoint.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode14\nipv4/endpoint.go:14: // It allows to set basic IP-level socket options such as TOS and TTL.\nIt is used to control basic IP-level socket options such as TOS and TTL.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode32\nipv4/endpoint.go:32: // A PacketConn represents a packet network endpoint that uses IPv4\nthat uses the IPv4 transport.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode33\nipv4/endpoint.go:33: // transport.  It allows to set several IP-level socket options that\nIt is used to control several IP-level socket options including multicasting.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode71\nipv4/endpoint.go:71: // the endpoint.\nsets the read deadline\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode80\nipv4/endpoint.go:80: // the endpoint.\nsets the write deadline\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode89\nipv4/endpoint.go:89: func (c *PacketConn) Close() error {\nI'm concerned about c.*.c = nil being used as a signal here. If these *Conn types are shared across multiple goroutines there may need to be a mutex here to ensure the nil is properly visible. Are the types in endpoint.go safe for used by multiple goroutines ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode113\nipv4/endpoint.go:113: // datagram directly such as OSPF, GRE.\nSee PacketConn\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode123\nipv4/endpoint.go:123: // platforms and sometimes it might requrie routing configuration.\ns/requrie/require/g\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode124\nipv4/endpoint.go:124: func (c *RawConn) JoinGroup(ifi *net.Interface, group net.Addr) error {\nI think this method is unnecessary. c embeds the JoinGroup method from dgramOpt. However the comment on this method is excellent, so if you decide to remove the method, please don't loose the comment.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode149\nipv4/endpoint.go:149: // SetReadDeadline sets the read and write deadlines associated with\nsets the read deadline\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode159\nipv4/endpoint.go:159: // the endpoint.\nsets the write deadline\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode175\nipv4/endpoint.go:175: c.packetHandler.c = nil\nSee previous comment about PacketConn.Close()\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/endpoint.go#newcode188\nipv4/endpoint.go:188: }\nWhy would r.packetHandler.ok not be true ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/genericopt_plan9.go\nFile ipv4/genericopt_plan9.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/genericopt_plan9.go#newcode12\nipv4/genericopt_plan9.go:12: // TODO: Implement this\nSee previous comments for suggested TODO style\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go\nFile ipv4/header.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode48\nipv4/header.go:48: maxHeaderLen    = 60\nPerhaps reference where this value comes from, ie RFC 1234 section N\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode55\nipv4/header.go:55: posTotalLen             = 2  // packet tolal length\ns/tolal/total/g\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode88\nipv4/header.go:88: // NOTE: A binary header format\nNote: XXXX is a binary header format\n\nI think XXX is netlink, but please correct me.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode90\nipv4/header.go:90: // Byte order in the packet from the kernel:\nByte order is defined by the endianness of the host ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode91\nipv4/header.go:91: // - all fields are in network byte order on Linux,\nI would reverse this so the OS comes before the description.\n\nOn Linux, all fields ...\nOn OpenBSD, all fields are ...\nOn other BSD platforms, almost all fields are ...\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode97\nipv4/header.go:97: // Field adjustment in the packet from the kernel:\nditto\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode103\nipv4/header.go:103: // Byte order in the packet to the kernel:\nditto\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode108\nipv4/header.go:108: //   traditional BSD-style platforms.\nShould there be a \\n here? The comment above does not reference this variable.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/header.go#newcode136\nipv4/header.go:136: }\nDoes this need a check ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go\nFile ipv4/helper.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode4\nipv4/helper.go:4: \nnit: I would prefer this file called ipv4.go, but feel free to ignore, this is just a personal preference.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode23\nipv4/helper.go:23: \nWhy not use bytes.Equal ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode39\nipv4/helper.go:39: }\nThis check isn't needed. If a == nil, the type check will not match any of the following\n\nhttp://play.golang.org/p/Un1u1b-I3s\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper.go#newcode78\nipv4/helper.go:78: }\nIs this case common ? Should it move to the top of the function?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper_posix.go\nFile ipv4/helper_posix.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/helper_posix.go#newcode37\nipv4/helper_posix.go:37: if bytesEqual(mreq.Multiaddr[:], net.IPv4zero.To4()) {\nsee comment in helper.go re: bytes.Equal\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/mocktransponder_test.go\nFile ipv4/mocktransponder_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/mocktransponder_test.go#newcode19\nipv4/mocktransponder_test.go:19: // runPyaloadTransponder trasmits IPv4 datagram payloads to the\ns/runPyaloadTransponder/runPayloadTransponder/g\n\ns/trasmits/transmits/g\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go\nFile ipv4/multicast_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go#newcode16\nipv4/multicast_test.go:16: func TestReadWriteMulticastUDPoIPPayload(t *testing.T) {\ntoIPPayload ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go#newcode22\nipv4/multicast_test.go:22: c, err := net.ListenPacket(\"udp4\", \"224.0.0.0\"+\":\"+\"1024\") // see RFC 4727\nCan't this just be \"224.0.0.0:1024\" ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicast_test.go#newcode33\nipv4/multicast_test.go:33: dst, err := net.ResolveUDPAddr(\"udp4\", \"224.0.0.254\"+\":\"+\"1024\") // see RFC 4727\nditto\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicastlistener_test.go\nFile ipv4/multicastlistener_test.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/multicastlistener_test.go#newcode32\nipv4/multicastlistener_test.go:32: c, err := net.ListenPacket(\"udp4\", \"0.0.0.0\"+\":\"+\"0\")\nsee previous\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go\nFile ipv4/packet.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go#newcode11\nipv4/packet.go:11: \nNeeds a comment\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go#newcode57\nipv4/packet.go:57: // message cm allows to specify the datagram path, outgoing interface,\nThe control message cm allows the datagram path and the outgoing interface to be specified. Currently only Linux supports this/is supported.\n\n// is the Linux limitation in this package, or in the underlying OS ?\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/packet.go#newcode59\nipv4/packet.go:59: // nil unless the control of the outgoing datagram is required.\ncm may be nil if control of the outgoing datagram is not required.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go\nFile ipv4/payload.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go#newcode11\nipv4/payload.go:11: \nNeeds small comment\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go#newcode22\nipv4/payload.go:22: // src on the received datagram.\nsource address src of? the received datagram.\n\nhttp://codereview.appspot.com/6482044/diff/21002/ipv4/payload.go#newcode59\nipv4/payload.go:59: // unless the control of the outgoing datagram is required.\nSee packet.go:Write",
			"disapproval": false,
			"date": "2012-09-05 06:27:15.888650",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 6, 2012 at 9:40 PM,  <dave@cheney.net> wrote:\r\n\r\n> I have tested on linux/amd64 and linux/arm and all looks good.\r\n\r\nThanks.\r\n\r\n> http://codereview.appspot.com/6482044/diff/24036/ipv4/example_test.go#newcode136\r\n> ipv4/example_test.go:136: AllSPFRouters        = net.IPv4(224, 0, 0, 5)\r\n> AllOSPFRouters ?\r\n\r\nAllSPFRouters, AllDRouters from RFC 2328.\r\n(oops AllDRouters, not AllDesignatedRouters, will change)\r\n\r\n> http://codereview.appspot.com/6482044/diff/24036/ipv4/header.go#newcode125\r\n> ipv4/header.go:125: // incoming, outgoing IPv4 header.  On the other\r\n> hand, Linux, OpenBSD\r\n> This doesn't read very well, but I don't understand the subject matter\r\n> well enough to make a suggestion. If you are able, could you please make\r\n> another pass at rewording it. It might be useful to define the\r\n> difference between new IP input and traditional raw IP socket IO.\r\n\r\nHm, I will drop that redundant note for ParseHeader and Marshal.\r\n\r\n> http://codereview.appspot.com/6482044/diff/24036/ipv4/helper_unix.go#newcode19\r\n> ipv4/helper_unix.go:19: return -1, errInvalidConnType\r\n> It is more traditional to return the zero value along with an err value.\r\n> I believe this is to discourage people from trying to divine meaning\r\n> from the return value without checking the error. If it is convenient I\r\n> think these should be zero.\r\n\r\nNot sure file descriptor value = 0 is good for error result, but will change.\r\n",
			"disapproval": false,
			"date": "2012-09-06 13:12:35.711250",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 7, 2012 at 5:01 PM,  <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Please take another look.\r\n\r\nreplumbing to windows done.\r\n",
			"disapproval": false,
			"date": "2012-09-07 08:03:08.451800",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nHere are some final tweaks. I think this CL as it stands now represents an excellent start to this package and I don't think additional review cycles would generate significant value. \n\nIf you are happy with it, and you have all the other dependent CL's committed, then I would be happy to see this submitted as it stands now so that people can start to use it.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go\nFile ipv4/doc.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode8\nipv4/doc.go:8: // The package provides IP-level socket options that allow manipulaton\ns/manipulaton/manipulation/\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode12\nipv4/doc.go:12: // field on the DiffServ, differentiated services environment.\nmaybe s/on the/in a/, but i'm not sure, i've never used such a thing.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode82\nipv4/doc.go:82: // this operation because joining groups affects only network and link\ns/because/as\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode152\nipv4/doc.go:152: // 1024 might join two diffrent groups across over two different\ns/diffrent/different/\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode174\nipv4/doc.go:174: // It is possible for multiple UDP listeners that listen to the same\ns/listen to/listen on/ -- maybe ?\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode176\nipv4/doc.go:176: // provide a socket that listens to a wildcard address with resuable\ns/resuable/reusable/",
			"disapproval": false,
			"date": "2012-09-25 13:10:32.894510",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7336440da745&repo=net ***\n\ngo.net/ipv4: new package\n\nPackage ipv4 implements IP-level socket options for the Internet\nProtocol version 4. It also provides raw IP socket access methods\nincluding IPv4 header manipulation.\n\nFixes issue 3684.\nFixes issue 3820.\n\nThis CL requires CL 6426047;\nnet: add read, write message methods to IPConn, UDPConn\n\nR=rsc, dave, alex.brainman\nCC=gobot, golang-dev\nhttp://codereview.appspot.com/6482044\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go\nFile ipv4/doc.go (right):\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode8\nipv4/doc.go:8: // The package provides IP-level socket options that allow manipulaton\nOn 2012/09/25 13:10:33, dfc wrote:\n> s/manipulaton/manipulation/\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode12\nipv4/doc.go:12: // field on the DiffServ, differentiated services environment.\nOn 2012/09/25 13:10:33, dfc wrote:\n> maybe s/on the/in a/, but i'm not sure, i've never used such a thing.\n\nwill take \"in a\", thx.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode12\nipv4/doc.go:12: // field on the DiffServ, differentiated services environment.\nOn 2012/09/25 13:10:33, dfc wrote:\n> maybe s/on the/in a/, but i'm not sure, i've never used such a thing.\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode82\nipv4/doc.go:82: // this operation because joining groups affects only network and link\nOn 2012/09/25 13:10:33, dfc wrote:\n> s/because/as\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode152\nipv4/doc.go:152: // 1024 might join two diffrent groups across over two different\nOn 2012/09/25 13:10:33, dfc wrote:\n> s/diffrent/different/\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode174\nipv4/doc.go:174: // It is possible for multiple UDP listeners that listen to the same\nOn 2012/09/25 13:10:33, dfc wrote:\n> s/listen to/listen on/ -- maybe ?\n\nDone.\n\nhttp://codereview.appspot.com/6482044/diff/41001/ipv4/doc.go#newcode176\nipv4/doc.go:176: // provide a socket that listens to a wildcard address with resuable\nOn 2012/09/25 13:10:33, dfc wrote:\n> s/resuable/reusable/\n\nDone.",
			"disapproval": false,
			"date": "2012-09-26 12:03:23.173860",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net, alex.brainman@gmail.com (cc: gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-24 22:00:33.500600",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Sep 25, 2012 at 10:10 PM,  <dave@cheney.net> wrote:\r\n\r\n> Here are some final tweaks.\r\n\r\nI much appreciate your comments and suggestions. Thanks.\r\n",
			"disapproval": false,
			"date": "2012-09-26 12:00:53.869270",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nAll tests PASS on windows. Thank you.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-26 01:36:00.681420",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Sep 26, 2012 at 10:36 AM,  <alex.brainman@gmail.com> wrote:\r\n\r\n> All tests PASS on windows. Thank you.\r\n\r\nThanks for your confirmation.\r\n",
			"disapproval": false,
			"date": "2012-09-26 12:02:05.894950",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6482044: go.net/ipv4: new package",
	"created": "2012-08-22 12:07:35.365710",
	"patchsets": [
		5001,
		25001,
		21002,
		24036,
		26007,
		25074,
		27081,
		23012,
		16098,
		41001,
		49001
	],
	"modified": "2012-09-26 12:03:25.789610",
	"closed": true,
	"issue": 6482044
}