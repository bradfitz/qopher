{
	"description": "misc/vim: Handle import paths with periods in Godoc\n\nThis patch makes the Godoc Vim plugin correctly split package\nnames with periods in them.\n\nFixes issue 5656.",
	"cc": [
		"dsymonds@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dsymonds@golang.org",
		"kamil.kisiel@gmail.com",
		"dan.kortschak@adelaide.edu.au"
	],
	"messages": [
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: kamil.kisiel@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-25 19:53:03.705040",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, tested it out in a variety of ways and it seems to work.\n\nShould get dsymonds to review since he's the Vim guy.\n\nhttps://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim\nFile misc/vim/plugin/godoc.vim (right):\n\nhttps://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode12\nmisc/vim/plugin/godoc.vim:12: \"       Open the relevant Godoc for either the word[s] passed to the command or\nUnrelated to your change but I noticed the grammar for this description is messed up.",
			"disapproval": false,
			"date": "2013-06-25 21:16:40.516420",
			"approval": true
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I actually found one more case that's not covered here:\n\nIf you have an import statement with a path that contains periods and use :Godoc while over that it still interprets the first component of the path before the period as the package and the rest of it as the member of the package.",
			"disapproval": false,
			"date": "2013-06-25 23:21:13.256360",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=dsymonds (assigned by dsymonds)",
			"disapproval": false,
			"date": "2013-06-26 05:43:15.361620",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim\nFile misc/vim/plugin/godoc.vim (right):\n\nhttps://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode12\nmisc/vim/plugin/godoc.vim:12: \"       Open the relevant Godoc for either the word[s] passed to the command or\nOn 2013/06/25 21:16:40, kisielk wrote:\n> Unrelated to your change but I noticed the grammar for this description is\n> messed up.\n\nyeah, could you fix this up while you're here?\n\nhttps://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode103\nmisc/vim/plugin/godoc.vim:103: let words = split(word, '\\.\\ze[^/]*$')\nThis seems to implement the right thing, but in a roundabout way. I believe what we want is to split words like \"http.Request\" into [\"http\", \"Request\"], and this change is trying to cope with \"github.com/blah/x.Whatever\", right? So I think the right approach is to instead find the final dot, and split into two pieces on that, which would be '\\.\\ze[^.]*$'?",
			"disapproval": false,
			"date": "2013-06-26 05:45:48.996810",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/25 23:21:13, kisielk wrote:\n> I actually found one more case that's not covered here:\n> \n> If you have an import statement with a path that contains periods and use :Godoc\n> while over that it still interprets the first component of the path before the\n> period as the package and the rest of it as the member of the package.\n\nYes, let me fix that too.",
			"disapproval": false,
			"date": "2013-06-26 19:40:53.426620",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim\nFile misc/vim/plugin/godoc.vim (right):\n\nhttps://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode12\nmisc/vim/plugin/godoc.vim:12: \"       Open the relevant Godoc for either the word[s] passed to the command or\nOn 2013/06/26 05:45:49, dsymonds wrote:\n> On 2013/06/25 21:16:40, kisielk wrote:\n> > Unrelated to your change but I noticed the grammar for this description is\n> > messed up.\n> \n> yeah, could you fix this up while you're here?\n\nWill do.\n\nhttps://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode103\nmisc/vim/plugin/godoc.vim:103: let words = split(word, '\\.\\ze[^/]*$')\nOn 2013/06/26 05:45:49, dsymonds wrote:\n> This seems to implement the right thing, but in a roundabout way. I believe what\n> we want is to split words like \"http.Request\" into [\"http\", \"Request\"], and this\n> change is trying to cope with \"github.com/blah/x.Whatever\", right? So I think\n> the right approach is to instead find the final dot, and split into two pieces\n> on that, which would be '\\.\\ze[^.]*$'?\n\nI too would be curious to see a more straightforward solution. We have\nto cover all possible cases though:\nstrings\nstrings.Join\ncrypto/md5\ncrypto/md5.Size\npkg.me.com/what/is\npkg.me.com/what/is.There\nI used the tersest (yet idiomatic) solution I could come up with that\ncovers all of them.\n\nNote that there are ambiguous cases. Take \"me.Com\": does it refer to the\ndocumentation for the package \"me.Com\" or for the exported member \"Com\"\nof package \"me\"? But this is a problem we should address when we fix the\nflawed interface of :Godoc. It has other problems too, like accepting\nmultiple arguments even though it can't handle them. Can we do this in a\nseparate issue?",
			"disapproval": false,
			"date": "2013-06-26 19:44:58.108660",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org (cc: dsymonds@golang.org, gobot@golang.org, golang-dev@googlegroups.com, kamil.kisiel@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-26 19:46:11.732820",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"kamil.kisiel@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim\nFile misc/vim/plugin/godoc.vim (right):\n\nhttps://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode103\nmisc/vim/plugin/godoc.vim:103: let words = split(word, '\\.\\ze[^/]*$')\nOn 2013/06/26 19:44:58, glts wrote:\n> On 2013/06/26 05:45:49, dsymonds wrote:\n> > This seems to implement the right thing, but in a roundabout way. I believe\n> what\n> > we want is to split words like \"http.Request\" into [\"http\", \"Request\"], and\n> this\n> > change is trying to cope with \"github.com/blah/x.Whatever\", right? So I think\n> > the right approach is to instead find the final dot, and split into two pieces\n> > on that, which would be '\\.\\ze[^.]*$'?\n> \n> I too would be curious to see a more straightforward solution. We have\n> to cover all possible cases though:\n> strings\n> strings.Join\n> crypto/md5\n> crypto/md5.Size\n> pkg.me.com/what/is\n> pkg.me.com/what/is.There\n> I used the tersest (yet idiomatic) solution I could come up with that\n> covers all of them.\n> \n> Note that there are ambiguous cases. Take \"me.Com\": does it refer to the\n> documentation for the package \"me.Com\" or for the exported member \"Com\"\n> of package \"me\"? But this is a problem we should address when we fix the\n> flawed interface of :Godoc. It has other problems too, like accepting\n> multiple arguments even though it can't handle them. Can we do this in a\n> separate issue?\n\nGo package names don't have dots. Import paths are very strongly discouraged from having dots in their final path component. I think we can ignore the existence of a \"me.Com\" package, which means splitting on the final dot is the most accurate solution, and handles all your test cases.",
			"disapproval": false,
			"date": "2013-06-27 01:33:19.722620",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/27 01:33:19, dsymonds wrote:\n> https://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim\n> File misc/vim/plugin/godoc.vim (right):\n> \n> https://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode103\n> misc/vim/plugin/godoc.vim:103: let words = split(word, '\\.\\ze[^/]*$')\n> On 2013/06/26 19:44:58, glts wrote:\n> > On 2013/06/26 05:45:49, dsymonds wrote:\n> > > This seems to implement the right thing, but in a roundabout way. I believe\n> > what\n> > > we want is to split words like \"http.Request\" into [\"http\", \"Request\"], and\n> > this\n> > > change is trying to cope with \"github.com/blah/x.Whatever\", right? So I\n> think\n> > > the right approach is to instead find the final dot, and split into two\n> pieces\n> > > on that, which would be '\\.\\ze[^.]*$'?\n> > \n> > I too would be curious to see a more straightforward solution. We have\n> > to cover all possible cases though:\n> > strings\n> > strings.Join\n> > crypto/md5\n> > crypto/md5.Size\n> > pkg.me.com/what/is\n> > pkg.me.com/what/is.There\n> > I used the tersest (yet idiomatic) solution I could come up with that\n> > covers all of them.\n> > \n> > Note that there are ambiguous cases. Take \"me.Com\": does it refer to the\n> > documentation for the package \"me.Com\" or for the exported member \"Com\"\n> > of package \"me\"? But this is a problem we should address when we fix the\n> > flawed interface of :Godoc. It has other problems too, like accepting\n> > multiple arguments even though it can't handle them. Can we do this in a\n> > separate issue?\n> \n> Go package names don't have dots. Import paths are very strongly discouraged\n> from having dots in their final path component. I think we can ignore the\n> existence of a \"me.Com\" package, which means splitting on the final dot is the\n> most accurate solution, and handles all your test cases.\n\nThat's not entirely true, for example if the package is at the root of a repository that uses the .vcs syntax: \nhttp://golang.org/cmd/go/#hdr-Remote_import_path_syntax\n\nOf course it's probably an extreme minority of cases, but just putting it out there that it's not always discouraged.",
			"disapproval": false,
			"date": "2013-06-27 06:52:52.122310",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 27 June 2013 16:52,  <kamil.kisiel@gmail.com> wrote:\r\n\r\n> That's not entirely true, for example if the package is at the root of a\r\n> repository that uses the .vcs syntax:\r\n> http://golang.org/cmd/go/#hdr-Remote_import_path_syntax\r\n>\r\n> Of course it's probably an extreme minority of cases, but just putting\r\n> it out there that it's not always discouraged.\r\n\r\nIt's still discouraged to do that, since it yields an import path\r\nwhose basename is different from the package's name. And I don't care\r\nabout supporting people who do that in misc/vim.\r\n",
			"disapproval": false,
			"date": "2013-06-27 07:00:16.203010",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, 2013-06-27 at 17:00 +1000, David Symonds wrote:\r\n> It's still discouraged to do that, since it yields an import path\r\n> whose basename is different from the package's name. And I don't care\r\n> about supporting people who do that in misc/vim.\r\n\r\nThis breaks :Godoc for single package sub-repositories on googlecode\r\nunless people tuck their package an an additional directory as far as I\r\ncan see.\r\n\r\n",
			"disapproval": false,
			"date": "2013-06-27 07:19:34.910820",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 27 June 2013 17:19, Dan Kortschak <dan.kortschak@adelaide.edu.au> wrote:\r\n\r\n> On Thu, 2013-06-27 at 17:00 +1000, David Symonds wrote:\r\n>> It's still discouraged to do that, since it yields an import path\r\n>> whose basename is different from the package's name. And I don't care\r\n>> about supporting people who do that in misc/vim.\r\n>\r\n> This breaks :Godoc for single package sub-repositories on googlecode\r\n> unless people tuck their package an an additional directory as far as I\r\n> can see.\r\n\r\nLike I said, that's a discouraged layout anyway. And you won't get\r\nthis to work when over a symbol (the names won't match).\r\n",
			"disapproval": false,
			"date": "2013-06-27 07:27:40.047470",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/27 01:33:19, dsymonds wrote:\n> https://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim\n> File misc/vim/plugin/godoc.vim (right):\n> \n> https://codereview.appspot.com/10564043/diff/6001/misc/vim/plugin/godoc.vim#newcode103\n> misc/vim/plugin/godoc.vim:103: let words = split(word, '\\.\\ze[^/]*$')\n> On 2013/06/26 19:44:58, glts wrote:\n> > On 2013/06/26 05:45:49, dsymonds wrote:\n> > > This seems to implement the right thing, but in a roundabout way. I believe\n> > what\n> > > we want is to split words like \"http.Request\" into [\"http\", \"Request\"], and\n> > this\n> > > change is trying to cope with \"github.com/blah/x.Whatever\", right? So I\n> think\n> > > the right approach is to instead find the final dot, and split into two\n> pieces\n> > > on that, which would be '\\.\\ze[^.]*$'?\n> > \n> > I too would be curious to see a more straightforward solution. We have\n> > to cover all possible cases though:\n> > strings\n> > strings.Join\n> > crypto/md5\n> > crypto/md5.Size\n> > pkg.me.com/what/is\n> > pkg.me.com/what/is.There\n> > I used the tersest (yet idiomatic) solution I could come up with that\n> > covers all of them.\n> > \n> > Note that there are ambiguous cases. Take \"me.Com\": does it refer to the\n> > documentation for the package \"me.Com\" or for the exported member \"Com\"\n> > of package \"me\"? But this is a problem we should address when we fix the\n> > flawed interface of :Godoc. It has other problems too, like accepting\n> > multiple arguments even though it can't handle them. Can we do this in a\n> > separate issue?\n> \n> Go package names don't have dots. Import paths are very strongly discouraged\n> from having dots in their final path component. I think we can ignore the\n> existence of a \"me.Com\" package, which means splitting on the final dot is the\n> most accurate solution, and handles all your test cases.\n\nSorry, I should have made my point clearer.\n\nYour regexp doesn't cover \"pkg.me.com/what/is\". That case is why this\nissue was raised in the first place.",
			"disapproval": false,
			"date": "2013-06-27 07:56:44.409700",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, 2013-06-27 at 17:27 +1000, David Symonds wrote:\r\n> Like I said, that's a discouraged layout anyway.\r\n> \r\nWhere is that? It's not noted as discouraged in the document Kamiel\r\nlinked - except for some comments by some people on golang-nuts I've not\r\nseen any thing along those lines. It would be nice it that is the case\r\nfor it to be documented.\r\n\r\n",
			"disapproval": false,
			"date": "2013-06-27 10:27:19.290460",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Aah, I understand now.\r\n\r\nWhat about splitting on the last of [/.]? Something like split(word,\r\n'\\.\\ze[^./]*$')?\r\n",
			"disapproval": false,
			"date": "2013-06-27 10:46:02.452970",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Say we have an import of \"code.google.com/p/repo.sub\". This split still\r\ndoes not get us the documentation for package sub. Its behaviour is a\r\nlittle strange, though understandable, for packages like\r\n\"code.google.com/p/go.net/html\".\r\n\r\nOn Thu, 2013-06-27 at 20:46 +1000, David Symonds wrote:\r\n> What about splitting on the last of [/.]? Something like split(word,\r\n> '\\.\\ze[^./]*$')?\r\n\r\n\r\n",
			"disapproval": false,
			"date": "2013-06-27 11:34:15.009410",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/27 10:46:02, dsymonds wrote:\n> Aah, I understand now.\n> \n> What about splitting on the last of [/.]? Something like split(word,\n> '\\.\\ze[^./]*$')?\n\nYeah I considered this too. Let's do it this way.",
			"disapproval": false,
			"date": "2013-06-27 20:18:38.095560",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, kamil.kisiel@gmail.com, dan.kortschak@adelaide.edu.au (cc: dsymonds@golang.org, gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-27 20:20:13.160050",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let me think about this over the weekend. This has grown organically\r\nand is not in a good state.\r\n",
			"disapproval": false,
			"date": "2013-06-28 07:52:55.493950",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For me this fixes issue 5656.\n\nHowever, :Godoc may need some work in the future.\n- :Godoc accepts multiple arguments but does not handle them correctly\n  (\":Godoc strings Join\" looks up \"stringsJoin\");\n- :Godoc partitions the argument into package and member which it gets\n  wrong on some occasions: the \"me.Com\" cases argued in the comments;\n- the interface is inconsistent with the godoc command.\nThese could be fixed by changing the interface to be the same as for\ngodoc: \":Godoc package [name]\".\n\nBut this will require more serious work, debate, and it would entail\ngetting rid of the current weird, undocumented \"fallback\" interface\n(\":Godoc crypto\", followed by \":Godoc md5\" opens \"crypto/md5\"!).",
			"disapproval": false,
			"date": "2013-06-27 20:22:42.436690",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, here's what I think should happen:\n\n- If you invoke :Godoc with no arguments, the word under the cursor (incl dots) should be split on the first dot and then godoc should be invoked. This turns \"net.IP\" into [\"godoc\", \"net\", \"IP\"].\n\n- If you invoke :Godoc with any arguments, those are passed to godoc as is; no splitting on dots or anything. This matches how godoc works. It means if you invoke \":Godoc net.IP\" it won't work, but that's okay.\n\nCare to change this file to match those semantics?",
			"disapproval": false,
			"date": "2013-07-01 06:33:37.149910",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/01 06:33:37, dsymonds wrote:\n> Okay, here's what I think should happen:\n> \n> - If you invoke :Godoc with no arguments, the word under the cursor (incl dots)\n> should be split on the first dot and then godoc should be invoked. This turns\n> \"net.IP\" into [\"godoc\", \"net\", \"IP\"].\n\nI'm having some difficulty understanding this. You say :Godoc should\nsplit on the _first_ dot -- so you think looking up documentation for an\nimport path under the cursor should no longer be supported?\n\n        import (\n                \"code.google.com/p/go.tools/go/types\"\n        )\n\nThis is the use case that this CL was originally supposed to address.\nHow about splitting on the last dot as we discussed? Then it would work\nboth inline as well as on import paths, at least most of time.\n\n        strings.Join -> godoc strings Join\n        code.google.com/p/go.tools/go/types -> godoc code.google.com/p/go.tools/go/types\n\nBut I'm experienced with Vim, with Go less so, so it might be that I am\nmissing something obvious here.\n\n> - If you invoke :Godoc with any arguments, those are passed to godoc as is; no\n> splitting on dots or anything. This matches how godoc works. It means if you\n> invoke \":Godoc net.IP\" it won't work, but that's okay.\n\nI agree.\n\n> Care to change this file to match those semantics?\n\nSo you would like to do it in this CL? I can do it but maybe not before\nthe weekend.",
			"disapproval": false,
			"date": "2013-07-01 18:43:14.718070",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2 July 2013 04:43,  <676c7473@gmail.com> wrote:\r\n\r\n> On 2013/07/01 06:33:37, dsymonds wrote:\r\n>>\r\n>> Okay, here's what I think should happen:\r\n>\r\n>\r\n>> - If you invoke :Godoc with no arguments, the word under the cursor\r\n>\r\n> (incl dots)\r\n>>\r\n>> should be split on the first dot and then godoc should be invoked.\r\n>\r\n> This turns\r\n>>\r\n>> \"net.IP\" into [\"godoc\", \"net\", \"IP\"].\r\n>\r\n>\r\n> I'm having some difficulty understanding this. You say :Godoc should\r\n> split on the _first_ dot -- so you think looking up documentation for an\r\n> import path under the cursor should no longer be supported?\r\n>\r\n>         import (\r\n>                 \"code.google.com/p/go.tools/go/types\"\r\n>         )\r\n>\r\n> This is the use case that this CL was originally supposed to address.\r\n> How about splitting on the last dot as we discussed? Then it would work\r\n> both inline as well as on import paths, at least most of time.\r\n\r\nI think the import path case should be handled separately. We are\r\ngetting stuck in a rathole with this string splitting. How about\r\nadding this rule to what I propose: if :Godoc is invoked with no args,\r\nand the cursor is on a line with exactly two quotation marks, and the\r\ncursor is between those quote marks, use the string between those\r\nquote marks as the single argument.\r\n",
			"disapproval": false,
			"date": "2013-07-02 05:21:43.203180",
			"approval": false
		},
		{
			"sender": "676c7473@gmail.com",
			"recipients": [
				"676c7473@gmail.com",
				"dsymonds@golang.org",
				"kamil.kisiel@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/02 05:21:43, dsymonds wrote:\n> On 2 July 2013 04:43,  <mailto:676c7473@gmail.com> wrote:\n> \n> > On 2013/07/01 06:33:37, dsymonds wrote:\n> >>\n> >> Okay, here's what I think should happen:\n> >\n> >\n> >> - If you invoke :Godoc with no arguments, the word under the cursor\n> >\n> > (incl dots)\n> >>\n> >> should be split on the first dot and then godoc should be invoked.\n> >\n> > This turns\n> >>\n> >> \"net.IP\" into [\"godoc\", \"net\", \"IP\"].\n> >\n> >\n> > I'm having some difficulty understanding this. You say :Godoc should\n> > split on the _first_ dot -- so you think looking up documentation for an\n> > import path under the cursor should no longer be supported?\n> >\n> >         import (\n> >                 \"code.google.com/p/go.tools/go/types\"\n> >         )\n> >\n> > This is the use case that this CL was originally supposed to address.\n> > How about splitting on the last dot as we discussed? Then it would work\n> > both inline as well as on import paths, at least most of time.\n> \n> I think the import path case should be handled separately. We are\n> getting stuck in a rathole with this string splitting. How about\n> adding this rule to what I propose: if :Godoc is invoked with no args,\n> and the cursor is on a line with exactly two quotation marks, and the\n> cursor is between those quote marks, use the string between those\n> quote marks as the single argument.\n\nOk.\n\nSorry, but I'm going to pull out. Maybe someone else fancies the job.\n\nBest,\nDavid",
			"disapproval": false,
			"date": "2013-07-02 17:37:22.556170",
			"approval": false
		}
	],
	"owner_email": "676c7473@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "glts",
	"subject": "code review 10564043: misc/vim: Handle import paths with periods in Godoc",
	"created": "2013-06-25 19:48:04.836700",
	"patchsets": [
		1,
		3001,
		6001,
		16001,
		30001
	],
	"modified": "2013-07-02 17:37:23.307740",
	"closed": false,
	"issue": 10564043
}