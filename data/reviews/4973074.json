{
	"description": "gofmt: accept program fragments on standard input\n\nThis makes it possible to grab a block of code\nin an editor and pipe it through gofmt, instead of\nhaving to pipe in the entire file.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 12, 2011 at 14:52,  <gri@golang.org> wrote:\n> http://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode281\n> src/cmd/gofmt/gofmt.go:281: psrc := append([]byte(\"package p;\"), src...)\n> make \"package p;\" a constant and use it below (as an aside, here you are\n> using \"p;\" below you are writing \"p\\n\")\n\nThey're different.  The psrc version is meant to do its\nthing without affecting the line numbers, hence the\nsemicolon.  The part being cut off is known to be\ngofmt-formatted, hence the newline.  Here they\nend up with the same length, and below it turns out\nthat they do too, but mostly just a coincidence.\n\nI added comments explaining the forms.\n\n> http://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode301\n> src/cmd/gofmt/gofmt.go:301: file, err = parser.ParseFile(fset, filename,\n> fsrc, parserMode)\n> The code here that follows is essentially the same pattern as above\n> (just that you have both a prefix (package p; func _() {) and a suffix\n> to insert. Seems like one should be able to factor this out and have\n> logic only once (with an empty suffix for the former)?\n\nPossibly.  The adjust function is different because it has to\nstrip leading indent.  You could generalize it, but since there\nare only two cases I think it would end up being basically\nif case1 { } vs if case2 { } and might not be any clearer.\nI added comments in the second adjust function to make\nit clear how it's different compared to the first one.\n\n> http://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode335\n> src/cmd/gofmt/gofmt.go:335: indent, _, after := cutSpace(orig)\n> I think here s/indent/before/\n\nMuch nicer.  I was able to drop the if too.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-12 19:12:13.569738",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-12 18:11:30.806206",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/4973074/diff/10001/src/cmd/gofmt/gofmt.go\nFile src/cmd/gofmt/gofmt.go (right):\n\nhttp://codereview.appspot.com/4973074/diff/10001/src/cmd/gofmt/gofmt.go#newcode347\nsrc/cmd/gofmt/gofmt.go:347: before, indent := before[:i+1], before[i+1:]\nnice",
			"disapproval": false,
			"date": "2011-09-12 19:23:41.386677",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "looks pretty good, some comments\n- gri\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go\nFile src/cmd/gofmt/gofmt.go (right):\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode281\nsrc/cmd/gofmt/gofmt.go:281: psrc := append([]byte(\"package p;\"), src...)\nmake \"package p;\" a constant and use it below (as an aside, here you are using \"p;\" below you are writing \"p\\n\")\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode300\nsrc/cmd/gofmt/gofmt.go:300: fsrc := append(append([]byte(\"package p; func _() {\"), src...), '}')\nsame here: make the string a constant and use it again below\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode301\nsrc/cmd/gofmt/gofmt.go:301: file, err = parser.ParseFile(fset, filename, fsrc, parserMode)\nThe code here that follows is essentially the same pattern as above (just that you have both a prefix (package p; func _() {) and a suffix to insert. Seems like one should be able to factor this out and have logic only once (with an empty suffix for the former)?\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode335\nsrc/cmd/gofmt/gofmt.go:335: indent, _, after := cutSpace(orig)\nI think here s/indent/before/\n\nit will be clearer - as it is both the before + indent in the beginning\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode336\nsrc/cmd/gofmt/gofmt.go:336: var before []byte\ns/before/indent/\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode337\nsrc/cmd/gofmt/gofmt.go:337: if i := bytes.LastIndex(indent, []byte{'\\n'}); i >= 0 {\ns/indent/before/\n\nhttp://codereview.appspot.com/4973074/diff/4001/src/cmd/gofmt/gofmt.go#newcode338\nsrc/cmd/gofmt/gofmt.go:338: before, indent = indent[:i+1], indent[i+1:]\ns/indent/before/ for the last 2",
			"disapproval": false,
			"date": "2011-09-12 18:52:25.794918",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "great. i looked at doing this a while ago and failed to come\nup with a nice way of doing it.\n\nOn 12 September 2011 19:11,  <rsc@golang.org> wrote:\n> Reviewers: gri,\n>\n> Message:\n> Hello gri (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> gofmt: accept program fragments on standard input\n>\n> This makes it possible to grab a block of code\n> in an editor and pipe it through gofmt, instead of\n> having to pipe in the entire file.\n>\n> Please review this at http://codereview.appspot.com/4973074/\n>\n> Affected files:\n> \u00a0M src/cmd/gofmt/doc.go\n> \u00a0M src/cmd/gofmt/gofmt.go\n> \u00a0M src/cmd/gofmt/gofmt_test.go\n> \u00a0A src/cmd/gofmt/testdata/stdin1.golden\n> \u00a0A src/cmd/gofmt/testdata/stdin1.golden.gofmt\n> \u00a0A src/cmd/gofmt/testdata/stdin1.input\n> \u00a0A src/cmd/gofmt/testdata/stdin1.input.gofmt\n> \u00a0A src/cmd/gofmt/testdata/stdin2.golden\n> \u00a0A src/cmd/gofmt/testdata/stdin2.golden.gofmt\n> \u00a0A src/cmd/gofmt/testdata/stdin2.input\n> \u00a0A src/cmd/gofmt/testdata/stdin2.input.gofmt\n> \u00a0A src/cmd/gofmt/testdata/stdin3.golden\n> \u00a0A src/cmd/gofmt/testdata/stdin3.golden.gofmt\n> \u00a0A src/cmd/gofmt/testdata/stdin3.input\n> \u00a0A src/cmd/gofmt/testdata/stdin3.input.gofmt\n> \u00a0A src/cmd/gofmt/testdata/stdin4.golden\n> \u00a0A src/cmd/gofmt/testdata/stdin4.golden.gofmt\n> \u00a0A src/cmd/gofmt/testdata/stdin4.input\n> \u00a0A src/cmd/gofmt/testdata/stdin4.input.gofmt\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-12 21:00:25.704192",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-12 19:12:23.306864",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=94ae7c289be2 ***\n\ngofmt: accept program fragments on standard input\n\nThis makes it possible to grab a block of code\nin an editor and pipe it through gofmt, instead of\nhaving to pipe in the entire file.\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/4973074",
			"disapproval": false,
			"date": "2011-09-12 19:41:53.408156",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 4973074: gofmt: accept program fragments on standard input",
	"created": "2011-09-10 21:12:41.699900",
	"patchsets": [
		1,
		1002,
		4001,
		10001,
		5020
	],
	"modified": "2011-09-12 21:00:25.783287",
	"closed": true,
	"issue": 4973074
}