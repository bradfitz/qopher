{
	"description": "go.net/ipv4: make use of net.PacketConn embedding",
	"cc": [
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-06-16 07:36:40.539830",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> var _ net.PacketConn = &PacketConn{} // should do\r\n\r\nvar _ net.PacketConn = &dgramOpt{} ?\r\n\r\n> Very nice. Please add a test to ensure we don't break the contract\r\n\r\nAh, sorry not decided yet.\r\nThis CL just tweaks around endpoint types for that.\r\n",
			"disapproval": false,
			"date": "2013-06-16 07:49:04.341330",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very nice. Please add a test to ensure we don't break the contract\r\n\r\nvar _ net.PacketConn = &PacketConn{} // should do\r\n\r\nOn Sun, Jun 16, 2013 at 5:36 PM,  <mikioh.mikioh@gmail.com> wrote:\r\n> Reviewers: dfc,\r\n>\r\n> Message:\r\n> Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go.net\r\n>\r\n>\r\n> Description:\r\n> go.net/ipv4: make use of net.PacketConn embedding\r\n>\r\n> Please review this at https://codereview.appspot.com/10319043/\r\n>\r\n> Affected files:\r\n>   M ipv4/endpoint.go\r\n>   M ipv4/helper_plan9.go\r\n>   M ipv4/helper_unix.go\r\n>   M ipv4/helper_windows.go\r\n>   M ipv4/payload.go\r\n>\r\n>\r\n> Index: ipv4/endpoint.go\r\n> ===================================================================\r\n> --- a/ipv4/endpoint.go\r\n> +++ b/ipv4/endpoint.go\r\n> @@ -18,15 +18,15 @@\r\n>  }\r\n>\r\n>  type genericOpt struct {\r\n> -       c net.Conn\r\n> +       net.Conn\r\n>  }\r\n>\r\n> -func (c *genericOpt) ok() bool { return c != nil && c.c != nil }\r\n> +func (c *genericOpt) ok() bool { return c != nil && c.Conn != nil }\r\n>\r\n>  // NewConn returns a new Conn.\r\n>  func NewConn(c net.Conn) *Conn {\r\n>         return &Conn{\r\n> -               genericOpt: genericOpt{c},\r\n> +               genericOpt: genericOpt{Conn: c},\r\n>         }\r\n>  }\r\n>\r\n> @@ -42,10 +42,10 @@\r\n>  }\r\n>\r\n>  type dgramOpt struct {\r\n> -       c net.PacketConn\r\n> +       net.PacketConn\r\n>  }\r\n>\r\n> -func (c *dgramOpt) ok() bool { return c != nil && c.c != nil }\r\n> +func (c *dgramOpt) ok() bool { return c != nil && c.PacketConn != nil }\r\n>\r\n>  // SetControlMessage sets the per packet IP-level socket options.\r\n>  func (c *PacketConn) SetControlMessage(cf ControlFlags, on bool) error {\r\n> @@ -65,7 +65,7 @@\r\n>         if !c.payloadHandler.ok() {\r\n>                 return syscall.EINVAL\r\n>         }\r\n> -       return c.payloadHandler.c.SetDeadline(t)\r\n> +       return c.payloadHandler.PacketConn.SetDeadline(t)\r\n>  }\r\n>\r\n>  // SetReadDeadline sets the read deadline associated with the\r\n> @@ -74,7 +74,7 @@\r\n>         if !c.payloadHandler.ok() {\r\n>                 return syscall.EINVAL\r\n>         }\r\n> -       return c.payloadHandler.c.SetReadDeadline(t)\r\n> +       return c.payloadHandler.PacketConn.SetReadDeadline(t)\r\n>  }\r\n>\r\n>  // SetWriteDeadline sets the write deadline associated with the\r\n> @@ -83,7 +83,7 @@\r\n>         if !c.payloadHandler.ok() {\r\n>                 return syscall.EINVAL\r\n>         }\r\n> -       return c.payloadHandler.c.SetWriteDeadline(t)\r\n> +       return c.payloadHandler.PacketConn.SetWriteDeadline(t)\r\n>  }\r\n>\r\n>  // Close closes the endpoint.\r\n> @@ -91,16 +91,16 @@\r\n>         if !c.payloadHandler.ok() {\r\n>                 return syscall.EINVAL\r\n>         }\r\n> -       return c.payloadHandler.c.Close()\r\n> +       return c.payloadHandler.PacketConn.Close()\r\n>  }\r\n>\r\n>  // NewPacketConn returns a new PacketConn using c as its underlying\r\n>  // transport.\r\n>  func NewPacketConn(c net.PacketConn) *PacketConn {\r\n>         return &PacketConn{\r\n> -               genericOpt:     genericOpt{c.(net.Conn)},\r\n> -               dgramOpt:       dgramOpt{c},\r\n> -               payloadHandler: payloadHandler{c: c},\r\n> +               genericOpt:     genericOpt{Conn: c.(net.Conn)},\r\n> +               dgramOpt:       dgramOpt{PacketConn: c},\r\n> +               payloadHandler: payloadHandler{PacketConn: c},\r\n>         }\r\n>  }\r\n>\r\n> @@ -166,8 +166,8 @@\r\n>  // transport.\r\n>  func NewRawConn(c net.PacketConn) (*RawConn, error) {\r\n>         r := &RawConn{\r\n> -               genericOpt:    genericOpt{c.(net.Conn)},\r\n> -               dgramOpt:      dgramOpt{c},\r\n> +               genericOpt:    genericOpt{Conn: c.(net.Conn)},\r\n> +               dgramOpt:      dgramOpt{PacketConn: c},\r\n>                 packetHandler: packetHandler{c: c.(*net.IPConn)},\r\n>         }\r\n>         fd, err := r.packetHandler.sysfd()\r\n> Index: ipv4/helper_plan9.go\r\n> ===================================================================\r\n> --- a/ipv4/helper_plan9.go\r\n> +++ b/ipv4/helper_plan9.go\r\n> @@ -4,9 +4,7 @@\r\n>\r\n>  package ipv4\r\n>\r\n> -import (\r\n> -       \"syscall\"\r\n> -)\r\n> +import \"syscall\"\r\n>\r\n>  func (c *genericOpt) sysfd() (int, error) {\r\n>         // TODO(mikio): Implement this\r\n> Index: ipv4/helper_unix.go\r\n> ===================================================================\r\n> --- a/ipv4/helper_unix.go\r\n> +++ b/ipv4/helper_unix.go\r\n> @@ -12,7 +12,7 @@\r\n>  )\r\n>\r\n>  func (c *genericOpt) sysfd() (int, error) {\r\n> -       switch p := c.c.(type) {\r\n> +       switch p := c.Conn.(type) {\r\n>         case *net.TCPConn, *net.UDPConn, *net.IPConn:\r\n>                 return sysfd(p)\r\n>         }\r\n> @@ -20,7 +20,7 @@\r\n>  }\r\n>\r\n>  func (c *dgramOpt) sysfd() (int, error) {\r\n> -       switch p := c.c.(type) {\r\n> +       switch p := c.PacketConn.(type) {\r\n>         case *net.UDPConn, *net.IPConn:\r\n>                 return sysfd(p.(net.Conn))\r\n>         }\r\n> @@ -28,7 +28,7 @@\r\n>  }\r\n>\r\n>  func (c *payloadHandler) sysfd() (int, error) {\r\n> -       return sysfd(c.c.(net.Conn))\r\n> +       return sysfd(c.PacketConn.(net.Conn))\r\n>  }\r\n>\r\n>  func (c *packetHandler) sysfd() (int, error) {\r\n> Index: ipv4/helper_windows.go\r\n> ===================================================================\r\n> --- a/ipv4/helper_windows.go\r\n> +++ b/ipv4/helper_windows.go\r\n> @@ -11,7 +11,7 @@\r\n>  )\r\n>\r\n>  func (c *genericOpt) sysfd() (syscall.Handle, error) {\r\n> -       switch p := c.c.(type) {\r\n> +       switch p := c.Conn.(type) {\r\n>         case *net.TCPConn, *net.UDPConn, *net.IPConn:\r\n>                 return sysfd(p)\r\n>         }\r\n> @@ -19,7 +19,7 @@\r\n>  }\r\n>\r\n>  func (c *dgramOpt) sysfd() (syscall.Handle, error) {\r\n> -       switch p := c.c.(type) {\r\n> +       switch p := c.PacketConn.(type) {\r\n>         case *net.UDPConn, *net.IPConn:\r\n>                 return sysfd(p.(net.Conn))\r\n>         }\r\n> @@ -27,7 +27,7 @@\r\n>  }\r\n>\r\n>  func (c *payloadHandler) sysfd() (syscall.Handle, error) {\r\n> -       return sysfd(c.c.(net.Conn))\r\n> +       return sysfd(c.PacketConn.(net.Conn))\r\n>  }\r\n>\r\n>  func (c *packetHandler) sysfd() (syscall.Handle, error) {\r\n> Index: ipv4/payload.go\r\n> ===================================================================\r\n> --- a/ipv4/payload.go\r\n> +++ b/ipv4/payload.go\r\n> @@ -11,11 +11,11 @@\r\n>\r\n>  // A payloadHandler represents the IPv4 datagram payload handler.\r\n>  type payloadHandler struct {\r\n> -       c net.PacketConn\r\n> +       net.PacketConn\r\n>         rawOpt\r\n>  }\r\n>\r\n> -func (c *payloadHandler) ok() bool { return c != nil && c.c != nil }\r\n> +func (c *payloadHandler) ok() bool { return c != nil && c.PacketConn != nil\r\n> }\r\n>\r\n>  // ReadFrom reads a payload of the received IPv4 datagram, from the\r\n>  // endpoint c, copying the payload into b.  It returns the number of\r\n> @@ -27,14 +27,14 @@\r\n>         }\r\n>         oob := newControlMessage(&c.rawOpt)\r\n>         var oobn int\r\n> -       switch rd := c.c.(type) {\r\n> +       switch c := c.PacketConn.(type) {\r\n>         case *net.UDPConn:\r\n> -               if n, oobn, _, src, err = rd.ReadMsgUDP(b, oob); err != nil\r\n> {\r\n> +               if n, oobn, _, src, err = c.ReadMsgUDP(b, oob); err != nil {\r\n>                         return 0, nil, nil, err\r\n>                 }\r\n>         case *net.IPConn:\r\n>                 nb := make([]byte, maxHeaderLen+len(b))\r\n> -               if n, oobn, _, src, err = rd.ReadMsgIP(nb, oob); err != nil\r\n> {\r\n> +               if n, oobn, _, src, err = c.ReadMsgIP(nb, oob); err != nil {\r\n>                         return 0, nil, nil, err\r\n>                 }\r\n>                 hdrlen := int(nb[0]&0x0f) << 2\r\n> @@ -66,11 +66,11 @@\r\n>         if dst == nil {\r\n>                 return 0, errMissingAddress\r\n>         }\r\n> -       switch wr := c.c.(type) {\r\n> +       switch c := c.PacketConn.(type) {\r\n>         case *net.UDPConn:\r\n> -               n, _, err = wr.WriteMsgUDP(b, oob, dst.(*net.UDPAddr))\r\n> +               n, _, err = c.WriteMsgUDP(b, oob, dst.(*net.UDPAddr))\r\n>         case *net.IPConn:\r\n> -               n, _, err = wr.WriteMsgIP(b, oob, dst.(*net.IPAddr))\r\n> +               n, _, err = c.WriteMsgIP(b, oob, dst.(*net.IPAddr))\r\n>         default:\r\n>                 return 0, errInvalidConnType\r\n>         }\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-16 07:40:24.763900",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Very nice.",
			"disapproval": false,
			"date": "2013-06-16 12:21:11.371820",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5a65a7af55c6&repo=net ***\n\ngo.net/ipv4: make use of net.PacketConn embedding\n\nR=dave\nCC=golang-dev\nhttps://codereview.appspot.com/10319043",
			"disapproval": false,
			"date": "2013-06-16 15:37:27.221250",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 10319043: go.net/ipv4: make use of net.PacketConn embedding",
	"created": "2013-06-16 07:29:25.838930",
	"patchsets": [
		1,
		1001,
		4001,
		8001
	],
	"modified": "2013-06-16 15:37:30.603870",
	"closed": true,
	"issue": 10319043
}