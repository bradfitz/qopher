{
	"description": "Allow draw image destination to avoid slow path by implementing\nDrawMask method.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nigeltao@golang.org",
		"r@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao_golang, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-06-11 13:07:23.409877",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "i wonder about micromanaging this kind of stuff but this seems plausible to me\n\nhttp://codereview.appspot.com/1636044/diff/2001/3001\nFile src/pkg/exp/draw/draw.go (left):\n\nhttp://codereview.appspot.com/1636044/diff/2001/3001#oldcode106\nsrc/pkg/exp/draw/draw.go:106: \nrestore this blank line?",
			"disapproval": false,
			"date": "2010-06-11 19:38:46.354183",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i don't know if this is considered a good thing, but this\npatch also enables \"smart\" image destinations, where\nthe image massages the draw operator in some way\nbefore re-calling Draw on some underlying image,\nfor example by clipping or drawing to a different\nlocation.\n\nOn 11 June 2010 20:38,  <r@google.com> wrote:\n> i wonder about micromanaging this kind of stuff but this seems plausible\n> to me\n>\n>\n> http://codereview.appspot.com/1636044/diff/2001/3001\n> File src/pkg/exp/draw/draw.go (left):\n>\n> http://codereview.appspot.com/1636044/diff/2001/3001#oldcode106\n> src/pkg/exp/draw/draw.go:106:\n> restore this blank line?\n>\n> http://codereview.appspot.com/1636044/show\n>\n",
			"disapproval": false,
			"date": "2010-06-11 22:54:31.231433",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1636044/diff/2001/3001\nFile src/pkg/exp/draw/draw.go (right):\n\nhttp://codereview.appspot.com/1636044/diff/2001/3001#newcode74\nsrc/pkg/exp/draw/draw.go:74: switch dst0 := dst.(type) {\nThis won't work if dst is a MyImage type and MyImage implements DrawMasker, right? You need to pass in the MyImage explicitly cast as a DrawMasker. I think that that's an API subtlety that will confuse people.\n\nInstead of making a type switch (i.e. dst.(type)), you should make a type assertion dst0, ok := dst.(DrawMasker). But I'm not sure if the type assertion belongs inside the DrawMask function or whether that's the responsibility of the caller of DrawMask. If a DrawMasker's implementation falls back on calling DrawMask, then we could easily infinite loop.\n\nYet another thing to think about...",
			"disapproval": false,
			"date": "2010-06-16 04:22:06.571114",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 16 June 2010 05:22,  <nigeltao@golang.org> wrote:\n>\n> http://codereview.appspot.com/1636044/diff/2001/3001\n> File src/pkg/exp/draw/draw.go (right):\n>\n> http://codereview.appspot.com/1636044/diff/2001/3001#newcode74\n> src/pkg/exp/draw/draw.go:74: switch dst0 := dst.(type) {\n> This won't work if dst is a MyImage type and MyImage implements\n> DrawMasker, right? You need to pass in the MyImage explicitly cast as a\n> DrawMasker. I think that that's an API subtlety that will confuse\n> people.\n\nno, this will work fine in that case. type switches work just like\ntype assertions for interface types.\n\nthat was the whole point of the change.\n\n> Instead of making a type switch (i.e. dst.(type)), you should make a\n> type assertion dst0, ok := dst.(DrawMasker). But I'm not sure if the\n> type assertion belongs inside the DrawMask function or whether that's\n> the responsibility of the caller of DrawMask. If a DrawMasker's\n> implementation falls back on calling DrawMask, then we could easily\n> infinite loop.\n\nthat scenario is just like calling x.String() from within x.String() - you\nneed to change the static type.\n",
			"disapproval": false,
			"date": "2010-06-16 07:28:21.029809",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/06/16 07:28:21, rog wrote:\n> no, this will work fine in that case. type switches work just like\n> type assertions for interface types.\n\nOops, you're right.\n\nStill thinking...",
			"disapproval": false,
			"date": "2010-06-16 23:04:21.773340",
			"approval": false
		}
	],
	"owner_email": "rogpeppe@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rog",
	"subject": "code review 1636044: Allow draw image destination to avoid slow path by impl...",
	"created": "2010-06-11 13:06:11.070186",
	"patchsets": [
		1,
		2001
	],
	"modified": "2010-06-16 23:04:21.773340",
	"closed": false,
	"issue": 1636044
}