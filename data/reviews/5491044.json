{
	"description": "net: expose the underlying network file descripor of the Conn\n\nNew struct ConnFD represents the underlying network file descriptor\nfor bridging between net package and other packages which may want\nto control IPv4, IPv6 layer control plane stuff by using IPPROTO_IP,\nIPPROTO_IPV6 level socket options.\n\nAlso added ConnFD method to TCPConn, UDPConn, IPConn and SysFD method\nto ConnFD.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"fullung@gmail.com",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-15 05:02:13.869254",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/15 05:02:13, mikioh wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nVery nice. This will allow us to address the Setsockopt stuff in\n\nhttp://codereview.appspot.com/5487075/\n\nin our own code until there is a proper API for it.\n\nAn alternative would be Fd()int for UNIX sockets and Fd()syscall.Handle for Windows. Is it worth hiding this detail inside ConnFD?\n\nAnother minor nitpick: os.File has a function called Fd(), but I see the net package has an internal struct called netFD, which lead to ConnFD instead of ConnFd. But maybe that's the way it is...",
			"disapproval": false,
			"date": "2011-12-15 06:37:52.106739",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with the fear.\n\nI also fear that it'll lead to weird bug reports where people messed with\nthe fd somehow and Go's net package / epoll still think they own it,\nleading to conflicts.\n\nOn Thu, Dec 15, 2011 at 8:52 AM, Russ Cox <rsc@golang.org> wrote:\n\n> If this were going to go in, it should be like in os:\n> Fd() int on Unix and Fd() syscall.Handle on Windows.\n>\n> However, I am very hesitant to put this in at all.\n> It will be a crutch that will keep us from defining\n> a portable net API.  The reason this came up most\n> recently was for SO_REUSEADDR on Windows\n> but we found that the net package was just doing\n> the wrong thing there and I believe that is being fixed.\n>\n> If the fd is exposed, all attempts at making something\n> that works everywhere are going to stop.  Or at least\n> I'm afraid of that being true.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-12-15 17:44:54.282940",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 15, 2011 at 2:02 PM,  <mikioh.mikioh@gmail.com> wrote:\n\n> New struct ConnFD reprents the underlying network file descriptor\n> for bridging between net package and other packages which may want\n> to control IPv4, IPv6 layer control plane stuff by using IPPROTO_IP,\n> IPPROTO_IPV6 level socket options.\n\nEr, I don't intend to populate the socket descriptor or socket\ncontrol ops everywhere. I'd like to add a few packages like\n<http://codereview.appspot.com/5489045/> to Go 1.1 and\nbeyond.\n",
			"disapproval": false,
			"date": "2011-12-15 05:56:34.296227",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If this were going to go in, it should be like in os:\nFd() int on Unix and Fd() syscall.Handle on Windows.\n\nHowever, I am very hesitant to put this in at all.\nIt will be a crutch that will keep us from defining\na portable net API.  The reason this came up most\nrecently was for SO_REUSEADDR on Windows\nbut we found that the net package was just doing\nthe wrong thing there and I believe that is being fixed.\n\nIf the fd is exposed, all attempts at making something\nthat works everywhere are going to stop.  Or at least\nI'm afraid of that being true.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-15 16:52:04.328390",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-16 00:26:37.253491",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 15, 2011 at 3:37 PM,  <fullung@gmail.com> wrote:\n\n> An alternative would be Fd()int for UNIX sockets and Fd()syscall.Handle\n> for Windows. Is it worth hiding this detail inside ConnFD?\n\nI haven't had much experiences on Windows, honestly speaking,\nit's just insurance.\n\n> Another minor nitpick: os.File has a function called Fd(), but I see the\n> net package has an internal struct called netFD, which lead to ConnFD\n> instead of ConnFd. But maybe that's the way it is...\n\nConnFd() or ConnFD(), I have no concrete opinion.\nPlease let me know which is better, consistent one.\n",
			"disapproval": false,
			"date": "2011-12-15 07:05:16.673230",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 5491044: net: expose the underlying network file descripor of th...",
	"created": "2011-12-15 00:53:36.951889",
	"patchsets": [
		1002,
		6001,
		3002
	],
	"modified": "2011-12-16 00:26:38.938046",
	"closed": true,
	"issue": 5491044
}