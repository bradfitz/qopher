{
	"description": "time: add ParseDuration.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go#newcode901\nsrc/pkg/time/format.go:901: // doesn't parse a sign, and allows for an empty string.\nyou should be able to combine the code between here and atoi. both can return the reside; atoi can check that it's empty, you can check that it's a known symbol\n\nhttp://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go#newcode921\nsrc/pkg/time/format.go:921: \"\u00b5s\": Microsecond,\nfor erroneous completeness, admit \u03bc (3bc) as well.\n\nhttp://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go#newcode968\nsrc/pkg/time/format.go:968: if s != \"\" && s[0] == ' ' {\ndon't accept spaces. \"3s\" is fine, \"3 s\" is not.",
			"disapproval": false,
			"date": "2011-12-22 23:24:16.028634",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5489111/diff/5003/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/format.go#newcode911\nsrc/pkg/time/format.go:911: \"\u03bcs\": float64(Microsecond), // U+03BC = greek mu\nOn 2011/12/23 00:48:57, r wrote:\n> s/greek/Greek letter/\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/format.go#newcode922\nsrc/pkg/time/format.go:922: // TODO(dsymonds): Handle multiple units (e.g. \"5m30s\").\nOn 2011/12/23 00:48:57, r wrote:\n> move the TODO into the function or just delete it.\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/time_test.go#newcode835\nsrc/pkg/time/time_test.go:835: {\".5s\", true, 500 * Millisecond},\nOn 2011/12/23 00:48:57, r wrote:\n> need a test with zeros in the fraction, like 1.0 1.00 1.005 and 1.0050 and\n> 100.00100\n\nDone. Used slightly different numbers for the sake of floating point precision.",
			"disapproval": false,
			"date": "2011-12-23 01:04:21.330739",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 22, 2011, at 7:22 PM, rsc@golang.org wrote:\n\n> \n> http://codereview.appspot.com/5489111/diff/1003/src/pkg/time/format.go\n> File src/pkg/time/format.go (right):\n> \n> http://codereview.appspot.com/5489111/diff/1003/src/pkg/time/format.go#newcode923\n> src/pkg/time/format.go:923: // TODO(dsymonds): Handle multiple units\n> (e.g. \"5m30s\").\n> This should just be a loop around lines 938-967, right?\n> Seems worth getting in in this CL.\n\nyeah, i had the same idea on the drive home.\n\n> Then you can also test that random values turned from\n> Duration -> String are ParseDuration'able back to Duration.\n\nand that.\n\n> http://codereview.appspot.com/5489111/diff/1003/src/pkg/time/time_test.go\n> File src/pkg/time/time_test.go (right):\n> \n> http://codereview.appspot.com/5489111/diff/1003/src/pkg/time/time_test.go#newcode819\n> src/pkg/time/time_test.go:819: var parseDurationTests = []struct {\n> \"0\" is valid and should be tested.\n> So are \"+0\" and \"-0\".\n> \n> \".\" is invalid, as are \"-.\", \"+.\", \".s\", \"+.s\", and so on.\n> They should be tested too.\n> \n> http://codereview.appspot.com/5489111/\n\n",
			"disapproval": false,
			"date": "2011-12-23 03:54:11.178409",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All done.\n\nI'll submit this shortly. It's not in the weekly, and nothing except the new flag type is depending on it, so we can come back and fix it up if I missed anything.\n\nhttp://codereview.appspot.com/5489111/diff/1003/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/1003/src/pkg/time/format.go#newcode923\nsrc/pkg/time/format.go:923: // TODO(dsymonds): Handle multiple units (e.g. \"5m30s\").\nOn 2011/12/23 03:22:58, rsc wrote:\n> This should just be a loop around lines 938-967, right?\n> Seems worth getting in in this CL.\n> \n> Then you can also test that random values turned from\n> Duration -> String are ParseDuration'able back to Duration.\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/1003/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/1003/src/pkg/time/time_test.go#newcode819\nsrc/pkg/time/time_test.go:819: var parseDurationTests = []struct {\nOn 2011/12/23 03:22:58, rsc wrote:\n> \"0\" is valid and should be tested.\n> So are \"+0\" and \"-0\".\n> \n> \".\" is invalid, as are \"-.\", \"+.\", \".s\", \"+.s\", and so on.\n> They should be tested too.\n\nI've done a representative set of those.",
			"disapproval": false,
			"date": "2011-12-23 05:10:19.997736",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=84d26aa7161e ***\n\ntime: add ParseDuration.\n\nR=rsc, r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5489111",
			"disapproval": false,
			"date": "2011-12-23 05:29:06.530186",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm once those tests and the random round trips pass.\nleaving for rob or for january.\n",
			"disapproval": false,
			"date": "2011-12-23 04:30:01.415951",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-22 23:18:12.899545",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go#newcode901\nsrc/pkg/time/format.go:901: // doesn't parse a sign, and allows for an empty string.\nOn 2011/12/22 23:24:16, r wrote:\n> you should be able to combine the code between here and atoi. both can return\n> the reside; atoi can check that it's empty, you can check that it's a known\n> symbol\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go#newcode921\nsrc/pkg/time/format.go:921: \"\u00b5s\": Microsecond,\nOn 2011/12/22 23:24:16, r wrote:\n> for erroneous completeness, admit \u03bc (3bc) as well.\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/1002/src/pkg/time/format.go#newcode968\nsrc/pkg/time/format.go:968: if s != \"\" && s[0] == ' ' {\nOn 2011/12/22 23:24:16, r wrote:\n> don't accept spaces. \"3s\" is fine, \"3 s\" is not.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-22 23:32:02.704906",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5489111/diff/5006/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/5006/src/pkg/time/format.go#newcode920\nsrc/pkg/time/format.go:920: // decimal number, with optional fraction and a unit suffix,\nOn 2011/12/23 05:12:59, r wrote:\n> // decimal numbers, each with ...\n\nDone.",
			"disapproval": false,
			"date": "2011-12-23 05:28:22.182628",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode892\nsrc/pkg/time/format.go:892: // doesn't parse a sign, and allows for an empty string.\ncomment is now wrong\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode912\nsrc/pkg/time/format.go:912: \"\u00b5s\": Microsecond, // U+00B5\ns/$/ = micro symbol\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode913\nsrc/pkg/time/format.go:913: \"\u03bcs\": Microsecond, // U+03BC\ns/$/ = greek mu/\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode921\nsrc/pkg/time/format.go:921: // A duration string consists of a floating point number and a time unit.\nA duration string is a possibly signed decimal number, with optional fraction, and a unit suffix,\nsuch as \"300ms\" or \"-1.5h\".\n\n(don't say floating point - you don't accept 1e9)\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode959\nsrc/pkg/time/format.go:959: // Consume [a-z]+\nodd comment.\n// Remainder of string must be a unit.\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode968\nsrc/pkg/time/format.go:968: return Duration(f * float64(unit)), nil\nyou could move the unit conversion into the map.\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/time_test.go#newcode845\nsrc/pkg/time/time_test.go:845: }\nneed some error cases\n\n\"\"\n\"3\"\n\"-\"\n\"s\"",
			"disapproval": false,
			"date": "2011-12-22 23:41:37.908279",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nleaving for rsc\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/format.go#newcode911\nsrc/pkg/time/format.go:911: \"\u03bcs\": float64(Microsecond), // U+03BC = greek mu\ns/greek/Greek letter/\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/format.go#newcode922\nsrc/pkg/time/format.go:922: // TODO(dsymonds): Handle multiple units (e.g. \"5m30s\").\nmove the TODO into the function or just delete it.\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/5003/src/pkg/time/time_test.go#newcode835\nsrc/pkg/time/time_test.go:835: {\".5s\", true, 500 * Millisecond},\nneed a test with zeros in the fraction, like 1.0 1.00 1.005 and 1.0050 and 100.00100",
			"disapproval": false,
			"date": "2011-12-23 00:48:57.456833",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode892\nsrc/pkg/time/format.go:892: // doesn't parse a sign, and allows for an empty string.\nOn 2011/12/22 23:41:37, r wrote:\n> comment is now wrong\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode912\nsrc/pkg/time/format.go:912: \"\u00b5s\": Microsecond, // U+00B5\nOn 2011/12/22 23:41:37, r wrote:\n> s/$/ = micro symbol\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode913\nsrc/pkg/time/format.go:913: \"\u03bcs\": Microsecond, // U+03BC\nOn 2011/12/22 23:41:37, r wrote:\n> s/$/ = greek mu/\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode921\nsrc/pkg/time/format.go:921: // A duration string consists of a floating point number and a time unit.\nOn 2011/12/22 23:41:37, r wrote:\n> A duration string is a possibly signed decimal number, with optional fraction,\n> and a unit suffix,\n> such as \"300ms\" or \"-1.5h\".\n> \n> (don't say floating point - you don't accept 1e9)\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode959\nsrc/pkg/time/format.go:959: // Consume [a-z]+\nOn 2011/12/22 23:41:37, r wrote:\n> odd comment.\n> // Remainder of string must be a unit.\n\nDone, but with different words. The next revision of this code will add support for multiple units (e.g. \"5h30m\").\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/format.go#newcode968\nsrc/pkg/time/format.go:968: return Duration(f * float64(unit)), nil\nOn 2011/12/22 23:41:38, r wrote:\n> you could move the unit conversion into the map.\n\nDone.\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/4001/src/pkg/time/time_test.go#newcode845\nsrc/pkg/time/time_test.go:845: }\nOn 2011/12/22 23:41:38, r wrote:\n> need some error cases\n> \n> \"\"\n> \"3\"\n> \"-\"\n> \"s\"\n\nDone.",
			"disapproval": false,
			"date": "2011-12-23 00:21:18.199162",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5489111/diff/5006/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/5006/src/pkg/time/format.go#newcode920\nsrc/pkg/time/format.go:920: // decimal number, with optional fraction and a unit suffix,\n// decimal numbers, each with ...",
			"disapproval": false,
			"date": "2011-12-23 05:12:59.174791",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5489111/diff/1003/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/1003/src/pkg/time/format.go#newcode923\nsrc/pkg/time/format.go:923: // TODO(dsymonds): Handle multiple units (e.g. \"5m30s\").\nThis should just be a loop around lines 938-967, right?\nSeems worth getting in in this CL.\n\nThen you can also test that random values turned from\nDuration -> String are ParseDuration'able back to Duration.\n\nhttp://codereview.appspot.com/5489111/diff/1003/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5489111/diff/1003/src/pkg/time/time_test.go#newcode819\nsrc/pkg/time/time_test.go:819: var parseDurationTests = []struct {\n\"0\" is valid and should be tested.\nSo are \"+0\" and \"-0\".\n\n\".\" is invalid, as are \"-.\", \"+.\", \".s\", \"+.s\", and so on.\nThey should be tested too.",
			"disapproval": false,
			"date": "2011-12-23 03:22:58.432381",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5489111: time: add ParseDuration.",
	"created": "2011-12-22 23:16:42.771462",
	"patchsets": [
		1,
		1002,
		4001,
		5003,
		1003,
		5006,
		7004
	],
	"modified": "2011-12-23 05:29:08.642031",
	"closed": true,
	"issue": 5489111
}