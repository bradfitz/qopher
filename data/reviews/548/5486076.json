{
	"description": "fmt: don't recur if String method (etc.) misbehaves\n\nFixes issue 2555.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-14 23:07:11.403484",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5486076/diff/1/src/pkg/fmt/fmt_test.go\nFile src/pkg/fmt/fmt_test.go (right):\n\nhttp://codereview.appspot.com/5486076/diff/1/src/pkg/fmt/fmt_test.go#newcode830\nsrc/pkg/fmt/fmt_test.go:830: return Sprintf(\"recur@%p value: %d\", r, r.i)\nam I missing something? How does this recur? I didn't think %p would call String().",
			"disapproval": false,
			"date": "2011-12-14 23:50:14.709992",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 14, 2011, at 3:50 PM, dsymonds@golang.org wrote:\n\n> \n> http://codereview.appspot.com/5486076/diff/1/src/pkg/fmt/fmt_test.go\n> File src/pkg/fmt/fmt_test.go (right):\n> \n> http://codereview.appspot.com/5486076/diff/1/src/pkg/fmt/fmt_test.go#newcode830\n> src/pkg/fmt/fmt_test.go:830: return Sprintf(\"recur@%p value: %d\", r,\n> r.i)\n> am I missing something? How does this recur? I didn't think %p would\n> call String().\n\nIt is subtle.\n\nThe %p verb is not legal for a non-pointer, so it tries to print %!p(value). To print value, it in effect does Print(value), which causes the String method to be called, which uses %p, and we're back at the beginning. The fix is to avoid the user's methods if we're in the error state.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-15 00:04:45.057341",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "P.S. A test failure before the fix generated:\n\nrecur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=recur@%!p(fmt_test.Recur=%v(PANIC=call stack too large)) value: 3) value: 3) value: 3) value: 3) value: 3) value: 3) value: 3) value: 3) value: 3) value: 3), value: 3\n\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-15 00:09:52.150467",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Thu, Dec 15, 2011 at 11:04 AM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> On Dec 14, 2011, at 3:50 PM, dsymonds@golang.org wrote:\n>\n>>\n>> http://codereview.appspot.com/5486076/diff/1/src/pkg/fmt/fmt_test.go\n>> File src/pkg/fmt/fmt_test.go (right):\n>>\n>> http://codereview.appspot.com/5486076/diff/1/src/pkg/fmt/fmt_test.go#newcode830\n>> src/pkg/fmt/fmt_test.go:830: return Sprintf(\"recur@%p value: %d\", r,\n>> r.i)\n>> am I missing something? How does this recur? I didn't think %p would\n>> call String().\n>\n> It is subtle.\n>\n> The %p verb is not legal for a non-pointer, so it tries to print %!p(value). To print value, it in effect does Print(value), which causes the String method to be called, which uses %p, and we're back at the beginning. The fix is to avoid the user's methods if we're in the error state.\n\nAah, okay. Makes sense, but it probably deserves a comment in the test.\n",
			"disapproval": false,
			"date": "2011-12-15 00:26:00.032114",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-15 00:32:42.642871",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-15 00:35:50.051453",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f656b151c693 ***\n\nfmt: don't recur if String method (etc.) misbehaves\n\nFixes issue 2555.\n\nR=golang-dev, dsymonds, r\nCC=golang-dev\nhttp://codereview.appspot.com/5486076",
			"disapproval": false,
			"date": "2011-12-15 00:37:58.447616",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5486076: fmt: don't recur if String method (etc.) misbehaves",
	"created": "2011-12-14 23:07:08.049995",
	"patchsets": [
		1,
		5001,
		4005
	],
	"modified": "2011-12-15 00:37:59.454105",
	"closed": true,
	"issue": 5486076
}