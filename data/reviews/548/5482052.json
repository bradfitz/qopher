{
	"description": "go/printer, godoc: print comments in example code\n\n- go/printer: support for printing CommentedNodes\n- go/doc: collect comments from examples\n\nFixes issue 2429.",
	"cc": [
		"adg@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 01:12:09.360249",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go\nFile src/pkg/go/printer/printer.go (right):\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode833\nsrc/pkg/go/printer/printer.go:833: if cnode, ok := node.(CommentedNode); ok {\nI suggest using *CommentedNode here.  It is not a large\namount of data, but even so everywhere else the go/* packages\nuse pointers to structs for AST-related structs.\n\nAlso maybe s/Commented/Comment/g.\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode1074\nsrc/pkg/go/printer/printer.go:1074: // The node type must be *ast.File, or assignment-compatible to ast.Expr,\ncan merge this with the new sentence instead of\nadding a new one.\n\n// The node type must be *ast.File, *CommentedNode, or\n// assignment-compatible to ast.Expr, ast.Decl, ast.Spec, or ast.Stmt.",
			"disapproval": false,
			"date": "2011-12-13 02:03:57.563455",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn 2011/12/13 20:17:43, gri wrote:\n> I prefer to leave it at CommentedNode. Its not _comment_ node, it's a node that\n> is commented.\n\nI agree.",
			"disapproval": false,
			"date": "2011-12-13 21:59:50.694010",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=09dad452cc14 ***\n\ngo/printer, godoc: print comments in example code\n\n- go/printer: support for printing CommentedNodes\n- go/doc: collect comments from examples\n\nFixes issue 2429.\n\nR=adg, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5482052",
			"disapproval": false,
			"date": "2011-12-13 22:05:08.586453",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go\nFile src/pkg/go/printer/printer.go (right):\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode833\nsrc/pkg/go/printer/printer.go:833: if cnode, ok := node.(CommentedNode); ok {\nOn 2011/12/13 02:03:57, rsc wrote:\n> I suggest using *CommentedNode here.  It is not a large\n> amount of data, but even so everywhere else the go/* packages\n> use pointers to structs for AST-related structs.\n> \n> Also maybe s/Commented/Comment/g.\n\nDone.\n\nI prefer to leave it at CommentedNode. Its not _comment_ node, it's a node that is commented.\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode854\nsrc/pkg/go/printer/printer.go:854: for i < len(comments) && comments[i].End() < beg {\nOn 2011/12/13 02:04:03, adg wrote:\n> I don't see why this shouldn't be \"Pos() <= beg\". When would beg lie inside a\n> comment?\n\nit wouldn't, but the existing code is also correct: if the previous comment's end is before the beginning of the range, exclude it.\n\nThe current code assumes that the comments are sorted in increasing order, as supplied by the parser. Added comment.\n\nComments that end before beg are certainly excluded. That's what it says. Pos() <= beg would be fine, too, but makes assumptions (that the comment end is not past beg - which it is if everything is correctm but still).\n\nThis is just comparing intervals, and that's the correct code:\n\nend < beg && pos (== beg) < end\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode895\nsrc/pkg/go/printer/printer.go:895: err:\nOn 2011/12/13 02:04:03, adg wrote:\n> s/err/unsupported/ ?\n> It's not a general error handler.\n\nDone.\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode1074\nsrc/pkg/go/printer/printer.go:1074: // The node type must be *ast.File, or assignment-compatible to ast.Expr,\nOn 2011/12/13 02:03:57, rsc wrote:\n> can merge this with the new sentence instead of\n> adding a new one.\n> \n> // The node type must be *ast.File, *CommentedNode, or\n> // assignment-compatible to ast.Expr, ast.Decl, ast.Spec, or ast.Stmt.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-13 20:17:43.612092",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5482052/diff/5001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/doc/example.go#newcode18\nsrc/pkg/go/doc/example.go:18: Body     *ast.BlockStmt      // code\nrather than add a field you could just make Body a printer.CommentedNode\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go\nFile src/pkg/go/printer/printer.go (right):\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode854\nsrc/pkg/go/printer/printer.go:854: for i < len(comments) && comments[i].End() < beg {\nI don't see why this shouldn't be \"Pos() <= beg\". When would beg lie inside a comment?\n\nhttp://codereview.appspot.com/5482052/diff/5001/src/pkg/go/printer/printer.go#newcode895\nsrc/pkg/go/printer/printer.go:895: err:\ns/err/unsupported/ ?\nIt's not a general error handler.",
			"disapproval": false,
			"date": "2011-12-13 02:04:03.531417",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5482052: go/printer, godoc: print comments in example code",
	"created": "2011-12-13 00:48:38.139831",
	"patchsets": [
		1,
		1001,
		3001,
		5001,
		5002,
		2006,
		3006,
		6018,
		2008
	],
	"modified": "2011-12-13 22:05:09.761053",
	"closed": true,
	"issue": 5482052
}