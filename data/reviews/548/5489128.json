{
	"description": "gc: avoid false positives when using scalar struct fields.\n\nThe escape analysis code does not make a distinction between\nscalar and pointers fields in structs. Non-pointer fields\nthat escape should not make the whole struct escape.",
	"cc": [
		"lvd@google.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-31 11:15:40.839256",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-31 11:17:55.344480",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks!  LGTM but wait for rsc to get back from holiday.\n\nhttp://codereview.appspot.com/5489128/diff/2006/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttp://codereview.appspot.com/5489128/diff/2006/src/cmd/gc/esc.c#newcode475\nsrc/cmd/gc/esc.c:475: return;\nplease add //fallthrough so future maintainers understand it's intentional.",
			"disapproval": false,
			"date": "2012-01-04 08:38:15.471939",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, lvd@google.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-04 10:09:01.740944",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "very nice, thanks.\n\nhttp://codereview.appspot.com/5489128/diff/7001/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttp://codereview.appspot.com/5489128/diff/7001/src/cmd/gc/esc.c#newcode473\nsrc/cmd/gc/esc.c:473: if(src->type && !haspointers(src->type))\nThis is great, thanks for finding this.\n\nPlease move the // up and make the case break\ninstead of returning.  THere is some cleanup after\nthe switch that needs to run.\n\n// A non-pointer escaping from a struct does not concern us.\nif(src->type && !haspointers(src->type))\n    break;",
			"disapproval": false,
			"date": "2012-01-10 04:31:16.864319",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i think the return is correct. and the comment should s/from/to\nOn Jan 10, 2012 5:31 AM, <rsc@golang.org> wrote:\n\n> very nice, thanks.\n>\n>\n>\n> http://codereview.appspot.com/**5489128/diff/7001/src/cmd/gc/**esc.c<http://codereview.appspot.com/5489128/diff/7001/src/cmd/gc/esc.c>\n> File src/cmd/gc/esc.c (right):\n>\n> http://codereview.appspot.com/**5489128/diff/7001/src/cmd/gc/**\n> esc.c#newcode473<http://codereview.appspot.com/5489128/diff/7001/src/cmd/gc/esc.c#newcode473>\n> src/cmd/gc/esc.c:473: if(src->type && !haspointers(src->type))\n> This is great, thanks for finding this.\n>\n> Please move the // up and make the case break\n> instead of returning.  THere is some cleanup after\n> the switch that needs to run.\n>\n> // A non-pointer escaping from a struct does not concern us.\n> if(src->type && !haspointers(src->type))\n>    break;\n>\n> http://codereview.appspot.com/**5489128/<http://codereview.appspot.com/5489128/>\n>\n",
			"disapproval": false,
			"date": "2012-01-10 07:17:14.442580",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 23:17, Luuk van Dijk <lvd@google.com> wrote:\n> i think the return is correct. and the comment should s/from/to\n\nyou think this case does not need to do pdepth-- and lineno = lno?\n",
			"disapproval": false,
			"date": "2012-01-10 07:51:26.221109",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i shouldnt try to review code on my phone.\nOn Jan 10, 2012 8:51 AM, \"Russ Cox\" <rsc@golang.org> wrote:\n\n> On Mon, Jan 9, 2012 at 23:17, Luuk van Dijk <lvd@google.com> wrote:\n> > i think the return is correct. and the comment should s/from/to\n>\n> you think this case does not need to do pdepth-- and lineno = lno?\n>\n",
			"disapproval": false,
			"date": "2012-01-10 08:53:44.052488",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 10, 2012 at 09:53, Luuk van Dijk <lvd@google.com> wrote:\n> i shouldnt try to review code on my phone.\n\ni was looking at the surroundings of the wrong ODOT case.  LGTM anyway then.\n\nfor my peace of mind, would you mind adding\n\n// under AlsoNoLeak\nfunc (b Bar) AlsoLeak() *int { // ERROR \"leaking param: b\"\n\treturn b.ii\n}\n\nfunc (b Bar) LeaksToo() *int { // ERROR \"leaking param: b\"\n\tv := 0\t// ERROR \"moved to heap: v\"\n\tb.ii = &v // ERROR \"&v escapes\"\n\treturn b.ii\n}\n\nfunc (b *Bar) LeaksABit() *int { // ERROR \"b does not escape\"\n\tv := 0\t// ERROR \"moved to heap: v\"\n\tb.ii = &v // ERROR \"&v escapes\"\n\treturn b.ii\n}\n\nthanks.\n",
			"disapproval": false,
			"date": "2012-01-10 13:30:57.067386",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lvd@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-10 21:10:19.388599",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "and added tests suggested by Luuk.\n\nhttp://codereview.appspot.com/5489128/diff/7001/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttp://codereview.appspot.com/5489128/diff/7001/src/cmd/gc/esc.c#newcode473\nsrc/cmd/gc/esc.c:473: if(src->type && !haspointers(src->type))\nOn 2012/01/10 04:31:17, rsc wrote:\n> This is great, thanks for finding this.\n> \n> Please move the // up and make the case break\n> instead of returning.  THere is some cleanup after\n> the switch that needs to run.\n> \n> // A non-pointer escaping from a struct does not concern us.\n> if(src->type && !haspointers(src->type))\n>     break;\n\nDone.",
			"disapproval": false,
			"date": "2012-01-10 20:16:57.155069",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hg mail?\n",
			"disapproval": false,
			"date": "2012-01-10 20:54:47.317301",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 11, 2012 at 22:49,  <remyoudompheng@gmail.com> wrote:\n> On 2012/01/10 21:10:19, remyoudompheng wrote:\n>>\n>> Please take another look.\n>\n>\n> Does it look OK now?\n\nyes! thanks a lot.  I'll submit.\n\n>\n> R\u00e9my.\n>\n> http://codereview.appspot.com/5489128/\n",
			"disapproval": false,
			"date": "2012-01-12 11:05:56.498130",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/10 21:10:19, remyoudompheng wrote:\n> Please take another look.\n\nDoes it look OK now?\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-01-11 21:49:51.512768",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cf2fb43dedaa ***\n\ngc: avoid false positives when using scalar struct fields.\n\nThe escape analysis code does not make a distinction between\nscalar and pointers fields in structs. Non-pointer fields\nthat escape should not make the whole struct escape.\n\nR=lvd, rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5489128\n\nCommitter: Luuk van Dijk <lvd@golang.org>",
			"disapproval": false,
			"date": "2012-01-12 11:08:45.363249",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5489128: gc: avoid false positives when using scalar struct fields.",
	"created": "2011-12-31 11:14:55.764420",
	"patchsets": [
		1,
		2001,
		2003,
		2006,
		7001,
		16001
	],
	"modified": "2012-01-12 18:57:06.981855",
	"closed": true,
	"issue": 5489128
}