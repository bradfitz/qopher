{
	"description": "go: implement build, install, run\n\nclean is gone; all the intermediate files are created\nin a temporary tree that is wiped when the command ends.\n\nNot using go/build's Script because it is not well aligned\nwith this API.  The various builder methods are copied from\ngo/build and adapted.  Probably once we delete goinstall\nwe can delete the Script API too.",
	"cc": [
		"rogpeppe@gmail.com",
		"adg@google.com",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=adg?\n",
			"disapproval": false,
			"date": "2011-12-14 16:08:12.806052",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5483069/diff/5002/src/cmd/cgo/main.go\nFile src/cmd/cgo/main.go (right):\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/cgo/main.go#newcode138\nsrc/cmd/cgo/main.go:138: flag.StringVar(&objDir, \"objdir\", \"\", \"object directory\")\nIt would be nice if this were a flag.String like the other ones.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode109\nsrc/cmd/go/build.go:109: work  string\ncomment?\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode144\nsrc/cmd/go/build.go:144: if !needInstall(p) && (i > len(pkgs) || !Aflag) {\nplease comment on the significance of i > len(pkgs)\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode149\nsrc/cmd/go/build.go:149: a.f = (*builder).install\nI didn't now you could do this!\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode195\nsrc/cmd/go/build.go:195: if fi.ModTime().After(t) {\nnice\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode196\nsrc/cmd/go/build.go:196: fmt.Printf(\"%s needs install: %s > %s\\n\", p.ImportPath, src, p.targ)\nseems gratuitously noisy? a debug print?\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode245\nsrc/cmd/go/build.go:245: println(a.p.info)\ndebug print\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode273\nsrc/cmd/go/build.go:273: if err := b.gc(a.p.Dir, obj+out, a.p.ImportPath, inc, gofiles); err != nil {\nI'm confused. go/build already does all this, and it's tested. why are we doing it again here?",
			"disapproval": false,
			"date": "2011-12-14 22:00:39.483100",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/cgo/main.go\nFile src/cmd/cgo/main.go (right):\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/cgo/main.go#newcode138\nsrc/cmd/cgo/main.go:138: flag.StringVar(&objDir, \"objdir\", \"\", \"object directory\")\nOn 2011/12/14 22:00:39, adg wrote:\n> It would be nice if this were a flag.String like the other ones.\n\nDone.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode109\nsrc/cmd/go/build.go:109: work  string\nOn 2011/12/14 22:00:39, adg wrote:\n> comment?\n\nDone.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode144\nsrc/cmd/go/build.go:144: if !needInstall(p) && (i > len(pkgs) || !Aflag) {\nOn 2011/12/14 22:00:39, adg wrote:\n> please comment on the significance of i > len(pkgs)\n\nGone.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode196\nsrc/cmd/go/build.go:196: fmt.Printf(\"%s needs install: %s > %s\\n\", p.ImportPath, src, p.targ)\nOn 2011/12/14 22:00:39, adg wrote:\n> seems gratuitously noisy? a debug print?\n\nDone.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode245\nsrc/cmd/go/build.go:245: println(a.p.info)\nOn 2011/12/14 22:00:39, adg wrote:\n> debug print\n\nDone.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode273\nsrc/cmd/go/build.go:273: if err := b.gc(a.p.Dir, obj+out, a.p.ImportPath, inc, gofiles); err != nil {\nOn 2011/12/14 22:00:39, adg wrote:\n> I'm confused. go/build already does all this, and it's tested. why are we doing\n> it again here?\n\nUpdated CL description (last one got lost).\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode291\nsrc/cmd/go/build.go:291: if err := b.gopack(obj, a.targ, objects); err != nil {\nOn 2011/12/14 22:18:31, adg wrote:\n> return b.gopack(...\n\nno longer applicable\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode361\nsrc/cmd/go/build.go:361: if b.nflag || b.vflag {\nOn 2011/12/14 22:18:31, adg wrote:\n> you could put this test in showcmd\n\ni'd rather have it here.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode374\nsrc/cmd/go/build.go:374: err := cmd.Run()\nOn 2011/12/14 10:41:28, rog wrote:\n> cmd.CombinedOutput?\n\ni like having control over the pieces.\nsugar is only good for so long.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode423\nsrc/cmd/go/build.go:423: // TODO: None of these are right.\nOn 2011/12/14 22:18:31, adg wrote:\n> what are 'these'?\n\nDone.",
			"disapproval": false,
			"date": "2011-12-14 22:47:07.697796",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-14 05:25:17.544537",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good. any plans for some tests?\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode231\nsrc/cmd/go/build.go:231: obj := filepath.Join(b.work, filepath.FromSlash(a.p.ImportPath+\"/_obj\")) + string(filepath.Separator)\nfilepath.Join(b.work, filepath.FromSlash(a.p.ImportPath), objDir) + string(filepath.Separator) ?\n\nit's a pity Join does a Clean.\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode374\nsrc/cmd/go/build.go:374: err := cmd.Run()\ncmd.CombinedOutput?",
			"disapproval": false,
			"date": "2011-12-14 10:41:28.767364",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On it.\n\nOn Thursday, December 15, 2011, Russ Cox <rsc@golang.org> wrote:\n> R=adg?\n>\n",
			"disapproval": false,
			"date": "2011-12-14 20:59:15.349843",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode291\nsrc/cmd/go/build.go:291: if err := b.gopack(obj, a.targ, objects); err != nil {\nreturn b.gopack(...\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode361\nsrc/cmd/go/build.go:361: if b.nflag || b.vflag {\nyou could put this test in showcmd\n\nhttp://codereview.appspot.com/5483069/diff/5002/src/cmd/go/build.go#newcode423\nsrc/cmd/go/build.go:423: // TODO: None of these are right.\nwhat are 'these'?",
			"disapproval": false,
			"date": "2011-12-14 22:18:31.174648",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5483069/diff/2007/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttp://codereview.appspot.com/5483069/diff/2007/src/cmd/go/build.go#newcode56\nsrc/cmd/go/build.go:56: if len(args) > 0 && strings.HasSuffix(args[0], \".go\") {\nsome external package paths end in .go, this will make them uninstallable\n\nhttp://codereview.appspot.com/5483069/diff/2007/src/cmd/go/build.go#newcode153\nsrc/cmd/go/build.go:153: b.gobin = os.Getenv(\"GOBIN\")\nwe shouldn't be using gobin unless the source tree is GOROOT. go/build does this for us.",
			"disapproval": false,
			"date": "2011-12-14 23:04:33.346752",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 14, 2011 at 18:04,  <adg@golang.org> wrote:\n> some external package paths end in .go, this will make them\n> uninstallable\n\nIt makes them unbuildable with 'go build', but go build\nonly builds; it does not install.  The main command\nthat will be invoked with an external package is 'go install',\nwhich does not have this special case.  I think this is fine,\nespecially since the case you raise is rare.\nAlso, the case you raise is already against existing\nconventions since the package name cannot possibly\nend in .go, so the directory and package names disagree.\nAnd .go is a file suffix, not a directory suffix.  We don't\nhave to be bullied around by people picking bad names.\n\n> we shouldn't be using gobin unless the source tree is GOROOT. go/build\n> does this for us.\n\nweird.  will fix.\n",
			"disapproval": false,
			"date": "2011-12-15 02:55:51.223089",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=533d76fb35b1 ***\n\ngo: implement build, install, run\n\nclean is gone; all the intermediate files are created\nin a temporary tree that is wiped when the command ends.\n\nNot using go/build's Script because it is not well aligned\nwith this API.  The various builder methods are copied from\ngo/build and adapted.  Probably once we delete goinstall\nwe can delete the Script API too.\n\nR=rogpeppe, adg, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5483069",
			"disapproval": false,
			"date": "2011-12-15 03:42:52.701213",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n",
			"disapproval": false,
			"date": "2011-12-15 03:10:05.826281",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/15 02:55:51, rsc wrote:\n> On Wed, Dec 14, 2011 at 18:04,  <mailto:adg@golang.org> wrote:\n> > some external package paths end in .go, this will make them\n> > uninstallable\n> \n> It makes them unbuildable with 'go build', but go build\n> only builds; it does not install.  The main command\n> that will be invoked with an external package is 'go install',\n> which does not have this special case.  I think this is fine,\n> especially since the case you raise is rare.\n> Also, the case you raise is already against existing\n> conventions since the package name cannot possibly\n> end in .go, so the directory and package names disagree.\n> And .go is a file suffix, not a directory suffix.  We don't\n> have to be bullied around by people picking bad names.\n\nFine.",
			"disapproval": false,
			"date": "2011-12-15 03:16:35.807947",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-15 03:16:20.010770",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5483069: go: implement build, install",
	"created": "2011-12-14 05:07:58.911195",
	"patchsets": [
		1,
		3,
		4001,
		5001,
		5002,
		2007,
		9001,
		13001
	],
	"modified": "2011-12-15 03:42:59.069969",
	"closed": true,
	"issue": 5483069
}