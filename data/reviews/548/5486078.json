{
	"description": "net: RFC: API proposal for DialPlan\n\nThis is an API proposal that Russ and I sketched out\nawhile back and recently dusted off.\n\nLet's discuss the API before any implementation.\n\nIssue 240",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"crawshaw@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-12-14 23:14:07.292623",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you describe what DialPlan/DialAttempt are for? When would I use\nthem? Is it meant to be some kind of multi-address auto-failover\ndialing mechanism?\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-12-14 23:47:08.266414",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 14, 2011 at 3:14 PM,  <bradfitz@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> net: RFC: API proposal for DialPlan\n>\n> This is an API proposal that Russ and I sketched out\n> awhile back and recently dusted off.\n>\n> Let's discuss the API before any implementation.\n>\n> Issue 240\n>\n> Please review this at http://codereview.appspot.com/5486078/\n>\n> Affected files:\n> \u00a0M src/pkg/net/dial.go\n>\n>\n> Index: src/pkg/net/dial.go\n> ===================================================================\n> --- a/src/pkg/net/dial.go\n> +++ b/src/pkg/net/dial.go\n> @@ -4,6 +4,44 @@\n>\n> \u00a0package net\n>\n> +import (\n> + \u00a0 \u00a0 \u00a0 \"time\"\n> +)\n> +\n> +// A DialPlan represents the strategy for connecting to a remote\n> +// address.\n> +type DialPlan struct {\n> + \u00a0 \u00a0 \u00a0 // Attempts lists\n> + \u00a0 \u00a0 \u00a0 Attempts []DialAttempt\n> +}\n> +\n> +// A DialAttempt describes one attempt of a DialPlan.\n> +type DialAttempt struct {\n> + \u00a0 \u00a0 \u00a0 // Remote is the destination to connect to.\n> + \u00a0 \u00a0 \u00a0 Remote Addr\n> +\n> + \u00a0 \u00a0 \u00a0 // Local optionally specifies a local address to bind to.\n> + \u00a0 \u00a0 \u00a0 Local Addr\n> +\n> + \u00a0 \u00a0 \u00a0 // Timeout, if non-zero, specifies the maximum amount\n> + \u00a0 \u00a0 \u00a0 // of time to wait for the connection to complete.\n> + \u00a0 \u00a0 \u00a0 Timeout time.Duration\n> +\n> + \u00a0 \u00a0 \u00a0 // SoftTimeout, if non-zero, specifies the amount of\n> + \u00a0 \u00a0 \u00a0 // time to wait for this attempt to complete before\n> + \u00a0 \u00a0 \u00a0 // starting the next attempt and racing them.\n> + \u00a0 \u00a0 \u00a0 // See http://tools.ietf.org/html/draft-ietf-v6ops-happy-eyeballs-06\n> + \u00a0 \u00a0 \u00a0 SoftTimeout time.Duration\n> +}\n\nIf I have multiple targets for an RPC, I want to keep dialing until\nthe RPC completes. This API only gets to the starting line.\n\n> +\n> +func (p *DialPlan) Dial() (Conn, error) {\n> + \u00a0 \u00a0 \u00a0 panic(\"TODO\")\n> +}\n> +\n> +func NewDialPlan(net, addr string) *DialPlan {\n> + \u00a0 \u00a0 \u00a0 panic(\"TODO\")\n> +}\n> +\n> \u00a0func resolveNetAddr(op, net, addr string) (a Addr, err error) {\n> \u00a0 \u00a0 \u00a0 \u00a0if addr == \"\" {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return nil, &OpError{op, net, nil, errMissingAddress}\n> @@ -65,6 +103,12 @@\n> \u00a0 \u00a0 \u00a0 \u00a0return\n> \u00a0}\n>\n> +// DialTimeout is like Dial, but returns ErrTimeout after timeout if a\n> +// connection isn\u2019t established.\n> +func DialTimeout(net, addr string, timeout time.Duration) (c Conn, err\n> error) {\n> + \u00a0 \u00a0 \u00a0 panic(\"TODO\")\n> +}\n> +\n> \u00a0// Listen announces on the local network address laddr.\n> \u00a0// The network string net must be a stream-oriented\n> \u00a0// network: \"tcp\", \"tcp4\", \"tcp6\", or \"unix\", or \"unixpacket\".\n>\n>\n",
			"disapproval": false,
			"date": "2011-12-15 04:26:51.923439",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 14, 2011 at 23:26, David Crawshaw <crawshaw@google.com> wrote:\n> If I have multiple targets for an RPC, I want to keep dialing until\n> the RPC completes. This API only gets to the starting line.\n\nI think that's debatable.  You want to find a server that\nwill take the RPC.  Whether you want to have multiple\nservers working on your RPC racing to be the one who\ngets done first is a separate issue.  In any event, that's\nnot what this CL is or needs to be about.  This is just\nabout trying to connect.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-15 16:45:40.645485",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5486078: net: RFC: API proposal for DialPlan",
	"created": "2011-12-14 23:13:53.791632",
	"patchsets": [
		1,
		1002,
		1003
	],
	"modified": "2013-05-17 20:18:17.187410",
	"closed": true,
	"issue": 5486078
}