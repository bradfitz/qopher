{
	"description": "runtime: dump the full stack of a throwing goroutine\nUseful for debugging of runtime bugs.\n+ Do not print \"stack segment boundary\" unless GOTRACEBACK>1.\n+ Do not traceback system goroutines unless GOTRACEBACK>1.",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-12 13:45:51.391770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that user errors (a deadlock) shouldn't result in tons of\r\nscary-looking error spew.\r\n\r\nOn Sat, Jan 12, 2013 at 6:29 AM, <dvyukov@google.com> wrote:\r\n\r\n> Perhaps we can make it finer grained -- set the flag in signal handlers\r\n> only on SIGSEGV/SIGBUS. And I do not think it is useful for deadlocks,\r\n> deadlock is the only case that calls throw on user error.\r\n> What do you think?\r\n>\r\n>\r\n> https://codereview.appspot.**com/7098050/<https://codereview.appspot.com/7098050/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-12 16:55:59.047010",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Perhaps we can make it finer grained -- set the flag in signal handlers only on SIGSEGV/SIGBUS. And I do not think it is useful for deadlocks, deadlock is the only case that calls throw on user error.\nWhat do you think?",
			"disapproval": false,
			"date": "2013-01-12 14:29:37.209330",
			"approval": false
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "UNIX signals don't necessarily map one-to-one and onto Plan 9\r\nnotes from the kernel; are other options available perhaps?\r\n\r\nOn 12 January 2013 08:58, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Sat, Jan 12, 2013 at 10:29 PM, <dvyukov@google.com> wrote:\r\n>>\r\n>> Perhaps we can make it finer grained -- set the flag in signal handlers\r\n>> only on SIGSEGV/SIGBUS. And I do not think it is useful for deadlocks,\r\n>> deadlock is the only case that calls throw on user error.\r\n>> What do you think?\r\n>\r\n> I think we can restrict it to only internally generated panics (runtime\r\n> throws\r\n> and deadly signals that might be due to faults in runtime/toolchain (e.g.\r\n> SIGILL, SIGABRT, and perhaps SIGSEGV/SIGBUS).\r\n>\r\n> yes, i agree runtime stack frames in deadlocks is not necessary, and if\r\n> they want, they can always use GOTRACEBACK=2 directly.\r\n",
			"disapproval": false,
			"date": "2013-01-13 05:12:43.454400",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FTR, this is mostly the patch proposed by Russ here:\nhttps://codereview.appspot.com/7069060/#msg7\nThe only change is in runtime.dopanic.\n\nLGTM.",
			"disapproval": false,
			"date": "2013-01-12 14:14:25.992320",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 12, 2013 at 10:29 PM, <dvyukov@google.com> wrote:\r\n\r\n> Perhaps we can make it finer grained -- set the flag in signal handlers\r\n> only on SIGSEGV/SIGBUS. And I do not think it is useful for deadlocks,\r\n> deadlock is the only case that calls throw on user error.\r\n> What do you think?\r\n>\r\nI think we can restrict it to only internally generated panics (runtime\r\nthrows\r\nand deadly signals that might be due to faults in runtime/toolchain (e.g.\r\nSIGILL, SIGABRT, and perhaps SIGSEGV/SIGBUS).\r\n\r\nyes, i agree runtime stack frames in deadlocks is not necessary, and if\r\nthey want, they can always use GOTRACEBACK=2 directly.\r\n",
			"disapproval": false,
			"date": "2013-01-12 16:59:18.139750",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"akumar@mail.nanosouffle.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/13 05:12:43, akumar_mail.nanosouffle.net wrote:\n> UNIX signals don't necessarily map one-to-one and onto Plan 9\n> notes from the kernel; are other options available perhaps?\n\nI am thinking about setting the flag in thread_linux/plan9/mac.c, so the platform-specific code can decided for what signals dump full stack.\n\n\n> On 12 January 2013 08:58, minux <mailto:minux.ma@gmail.com> wrote:\n> >\n> > On Sat, Jan 12, 2013 at 10:29 PM, <mailto:dvyukov@google.com> wrote:\n> >>\n> >> Perhaps we can make it finer grained -- set the flag in signal handlers\n> >> only on SIGSEGV/SIGBUS. And I do not think it is useful for deadlocks,\n> >> deadlock is the only case that calls throw on user error.\n> >> What do you think?\n> >\n> > I think we can restrict it to only internally generated panics (runtime\n> > throws\n> > and deadly signals that might be due to faults in runtime/toolchain (e.g.\n> > SIGILL, SIGABRT, and perhaps SIGSEGV/SIGBUS).\n> >\n> > yes, i agree runtime stack frames in deadlocks is not necessary, and if\n> > they want, they can always use GOTRACEBACK=2 directly.",
			"disapproval": false,
			"date": "2013-01-13 14:14:36.447180",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"akumar@mail.nanosouffle.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/12 16:55:59, bradfitz wrote:\n> I agree that user errors (a deadlock) shouldn't result in tons of\n> scary-looking error spew.\n\nOK, I will exclude deadlocks and nil derefs. But then we still need to set GOTRACEBACK=2 in run.bash, because a lot of runtime bugs (GC, the issue with lock-free stack on 386) result in nil derefs.\n\n\n\n> On Sat, Jan 12, 2013 at 6:29 AM, <mailto:dvyukov@google.com> wrote:\n> \n> > Perhaps we can make it finer grained -- set the flag in signal handlers\n> > only on SIGSEGV/SIGBUS. And I do not think it is useful for deadlocks,\n> > deadlock is the only case that calls throw on user error.\n> > What do you think?\n> >\n> >\n> >\n> https://codereview.appspot.**com/7098050/%3Chttps://codereview.appspot.com/7098050/>\n> >",
			"disapproval": false,
			"date": "2013-01-13 14:16:24.969920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"akumar@mail.nanosouffle.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nnow it prints full stacks only on runtime.throw() except deadlocks",
			"disapproval": false,
			"date": "2013-01-21 15:57:42.884450",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"akumar@mail.nanosouffle.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-01-21 16:03:10.333870",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I wonder if the throwing variable should be per-M.\nIt is likely that only the M that received the signal/is throwing matters, and then only when dumping that M's goroutine.",
			"disapproval": false,
			"date": "2013-01-22 22:20:36.838840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/22 22:20:36, rsc wrote:\n> I wonder if the throwing variable should be per-M.\n> It is likely that only the M that received the signal/is throwing matters, and\n> then only when dumping that M's goroutine.\n\nAgree.\n\nYou do not want to set GOTRACEBACK=2 on bots. But at the same time it would be useful to see full stacks for nil derefs (previously they were caused by GC bugs and non-atomic 64-bit atomics). But it's most likely unacceptable for end user to see the following on nil deref in user code:\n\ngoroutine 1 [running]:\nruntime.panic(0x4173d0, 0xc20000f200)\n\t/usr/local/google/home/dvyukov/go2/src/pkg/runtime/panic.c:245 +0xb1\nruntime.panicstring(0x449bf3, 0x40bb3c)\n\t/usr/local/google/home/dvyukov/go2/src/pkg/runtime/panic.c:474 +0xa3\nruntime.sigpanic()\n\t/usr/local/google/home/dvyukov/go2/src/pkg/runtime/thread_linux.c:199 +0x168\nmain.main()\n\t/tmp/test.go:5 +0x11\nruntime.main()\n\t/usr/local/google/home/dvyukov/go2/src/pkg/runtime/proc.c:248 +0x92\nruntime.goexit()\n\t/usr/local/google/home/dvyukov/go2/src/pkg/runtime/proc.c:277\n\nSo what is your plan?",
			"disapproval": false,
			"date": "2013-01-23 07:13:19.051270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks.",
			"disapproval": false,
			"date": "2013-01-29 00:32:16.317270",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ab5aaf4b34f2 ***\n\nruntime: dump the full stack of a throwing goroutine\nUseful for debugging of runtime bugs.\n+ Do not print \"stack segment boundary\" unless GOTRACEBACK>1.\n+ Do not traceback system goroutines unless GOTRACEBACK>1.\n\nR=rsc, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7098050",
			"disapproval": false,
			"date": "2013-01-29 10:59:25.350280",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI've made throwing per-M and now it affects only the current goroutine.\n+ hide \"stack segment boundary\" unless runtime frames are printed.\n+ hide system goroutines (timer, scavenger) (I think finalizer goroutine must not be hidden)\n\nNow instead of:\n\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x2106]\n\ngoroutine 1 [running]:\nmain.foo(0x0, 0x1, 0x0, 0x0)\n\t/tmp/test2.go:21 +0x66\n----- stack segment boundary -----\nmain.foo(0x1, 0x1, 0x0, 0x0)\n\t/tmp/test2.go:24 +0xbe\n----- stack segment boundary -----\nmain.main()\n\t/tmp/test2.go:13 +0x98\n----- stack segment boundary -----\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n\tsrc/pkg/runtime/proc.c:232\n\ngoroutine 3 [timer goroutine (idle)]:\ncreated by addtimer\n\tsrc/pkg/runtime/ztime_darwin_amd64.c:73\n\nthe trace looks as follows:\n\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x2106]\n\ngoroutine 1 [running]:\nmain.foo(0x0, 0x1, 0x0, 0x0)\n\t/tmp/test2.go:21 +0x66\nmain.foo(0x1, 0x1, 0x0, 0x0)\n\t/tmp/test2.go:24 +0xbe\nmain.main()\n\t/tmp/test2.go:13 +0x98",
			"disapproval": false,
			"date": "2013-01-27 15:31:01.176030",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/27 15:31:01, dvyukov wrote:\n> the trace looks as follows:\n> \n> panic: runtime error: invalid memory address or nil pointer dereference\n> [signal 0xb code=0x1 addr=0x0 pc=0x2106]\n> \n> goroutine 1 [running]:\n> main.foo(0x0, 0x1, 0x0, 0x0)\n> \t/tmp/test2.go:21 +0x66\n> main.foo(0x1, 0x1, 0x0, 0x0)\n> \t/tmp/test2.go:24 +0xbe\n> main.main()\n> \t/tmp/test2.go:13 +0x98\nThis is much clearer. LGTM.",
			"disapproval": false,
			"date": "2013-01-27 15:46:18.501610",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 7098050: runtime: dump full stacks on throw and signals",
	"created": "2013-01-12 13:42:06.113620",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		12001,
		18001,
		21001,
		23001,
		20009,
		25002
	],
	"modified": "2013-01-29 10:59:26.589470",
	"closed": true,
	"issue": 7098050
}