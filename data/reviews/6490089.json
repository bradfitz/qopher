{
	"description": "exp/types/staging: typechecker API\n\nFirst set of type checker files for review.\nThe primary concern here is the typechecker\nAPI (types.go).",
	"cc": [
		"rsc@golang.org",
		"adonovan@google.com",
		"r@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but let others respond",
			"disapproval": false,
			"date": "2012-09-08 00:15:13.450870",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/6490089/diff/7001/src/pkg/exp/types/staging/exprstring.go\nFile src/pkg/exp/types/staging/exprstring.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/7001/src/pkg/exp/types/staging/exprstring.go#newcode86\nsrc/pkg/exp/types/staging/exprstring.go:86: case *ast.BinaryExpr:\nIs this output function intended for eyes only, or as input to a parser?  If so you'll need to insert parens to disambiguate.  To do this optimally is a function of the fixity, associativity and predecence of all your binary operators; see Norman Ramsey (1998) \"Unparsing Expressions with Prefix and Postfix Operators\".  [NB, there's a bug in that paper but Go's AST shouldn't hit it.]",
			"disapproval": false,
			"date": "2012-09-07 14:59:17.124850",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/predicates.go\nFile src/pkg/exp/types/predicates.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/predicates.go#newcode86\nsrc/pkg/exp/types/predicates.go:86: if typ, ok := typ.(*NamedType); ok {\nOn 2012/09/07 20:41:14, r wrote:\n> do either of these guys wants fors rather than ifs? or maybe another function\n> pair like that?\n\nNo. Underlying types are never NamedTypes. Added comments to that effect.\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go\nFile src/pkg/exp/types/types.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode24\nsrc/pkg/exp/types/types.go:24: // compiles without errors.\nOn 2012/09/07 20:41:14, r wrote:\n> the package's source code has no type errors.\n> \n> don't make claims about the compiler.\n\nDone.\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode38\nsrc/pkg/exp/types/types.go:38: func Check(fset *token.FileSet, pkg *ast.Package, types map[ast.Expr]Type) error {\nOn 2012/09/07 20:41:14, r wrote:\n> why do i need fset and pkg? can't i get to fset from pkg? i can certainly get to\n> the Files.\n\nfset is only needed for error position information - like anywhere else. It would be nice it it were not needed, but that's how the AST is for now.\n\n(I have some ideas to simplify this in the future, but for now this is the standard way for all tools).\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode147\nsrc/pkg/exp/types/types.go:147: implementsType\nOn 2012/09/07 20:41:14, r wrote:\n> what's this?\n\nThis if for internal use only. Not exported anymore.\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode181\nsrc/pkg/exp/types/types.go:181: Recover\nOn 2012/09/07 20:41:14, r wrote:\n> might want to open a gap here, for future growth\n\nI think people should use the actual constants and than this should be fine.\nDo have something else in mind?\n\nBut since builtins cannot escape I won't export this anymore.\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode186\nsrc/pkg/exp/types/types.go:186: Sizeof\nOn 2012/09/07 20:41:14, r wrote:\n> ditto\nACK\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode198\nsrc/pkg/exp/types/types.go:198: Nargs int // Nargs < 0 indicates variable number of arguments\nOn 2012/09/07 20:41:14, r wrote:\n> i'd prefer an IsVariadic field rather than overload this way.\n\nChanged.\n\nThis is internal use only - not exported anymore (Builtins can only be called, never assigned, so the type becomes never visible outside).",
			"disapproval": false,
			"date": "2012-09-08 00:08:03.569900",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=26b1cb07dc52 ***\n\nexp/types/staging: typechecker API\n\nFirst set of type checker files for review.\nThe primary concern here is the typechecker\nAPI (types.go).\n\nR=rsc, adonovan, r, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/6490089",
			"disapproval": false,
			"date": "2012-09-10 21:54:56.638710",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-07 00:46:50.175930",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go\nFile src/pkg/exp/types/staging/types.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode30\nsrc/pkg/exp/types/staging/types.go:30: // 3) If a non-nil but non-empty types map is provided, Check type-\nOn 2012/09/10 17:37:18, rsc wrote:\n> I have minor discomfort about treating len 0 map separately from len > 0 map. It\n> means if you have a list of things you care about and you do something like\n> \n> m := make(map[ast.Expr]Type)\n> for _, thing := range things {\n>     m[thing] = nil\n> }\n> \n> then you get fast behavior except when len(things) == 0. It might be worth\n> making this a separate function. CheckSubset or something like that.\n> Like I said, only minor discomfort.\n> \n\nIt's a valid concern. CheckSubset/checkPartial was just an idea that I thought would be quite useful for things like go fix where you only need some of the information. Leaving it away for now, easy to add, hard to remove once it's here.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode42\nsrc/pkg/exp/types/staging/types.go:42: // All types implement the Type interface.\nOn 2012/09/10 17:37:19, rsc wrote:\n> Is there anything else callers should know about types? Can they be compared\n> with == ?\n> Are there other common methods they'll have?\n> \n> I wonder if all Types should have a few things like Kind() Kind (replacing\n> BasicKind with a few more things like Struct Func etc) and Info() Info. Just a\n> suggestion, though. I'm sure you've weighed these before.\n\nProbably there should be more. For instance there are predicates isIdentical, isBoolean, isString, etc. that could be exported and/or made methods of Type. For now I kept it at the minimum because it's easy to add those things once it all works (but tedious to maintain before).\n\nAdded comment.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode127\nsrc/pkg/exp/types/staging/types.go:127: Typ         Type\nOn 2012/09/10 17:37:19, rsc wrote:\n> s/Typ/Type/?\n\nI'me using typ for all the non-exported fields, hence Typ in this case.\nChanged.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode129\nsrc/pkg/exp/types/staging/types.go:129: IsAnonymous bool\nOn 2012/09/10 17:37:19, rsc wrote:\n> Make comments clear about whether Name == \"\" for anonymous.\n\nDone.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode150\nsrc/pkg/exp/types/staging/types.go:150: // A Signature represents a user-defined function type func(...) (...).\nOn 2012/09/10 17:37:19, rsc wrote:\n> Not a Func?\n\nI'm considering having a much better type Objects hierarchy, where we'd have Consts, Vars, Funcs, etc. and then I cannot reuse Func here. Signature seemed pretty clear. Happy to reconsider if things turn out differently.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode151\nsrc/pkg/exp/types/staging/types.go:151: // TODO(gri) consider using tuples to represent parameters and results.\nOn 2012/09/10 17:37:19, rsc wrote:\n> Please don't expose 'tuples'. So many people are confused about whether Go has\n> tuples already. If the concept must be exposed it would be better as a different\n> name, like 'List' or 'ReturnList'. But probably ObjList is okay.\n> \n> \n\nACK. Will change. Added comment for now.",
			"disapproval": false,
			"date": "2012-09-10 21:39:46.696450",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/predicates.go\nFile src/pkg/exp/types/predicates.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/predicates.go#newcode86\nsrc/pkg/exp/types/predicates.go:86: if typ, ok := typ.(*NamedType); ok {\ndo either of these guys wants fors rather than ifs? or maybe another function pair like that?\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go\nFile src/pkg/exp/types/types.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode24\nsrc/pkg/exp/types/types.go:24: // compiles without errors.\nthe package's source code has no type errors.\n\ndon't make claims about the compiler.\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode38\nsrc/pkg/exp/types/types.go:38: func Check(fset *token.FileSet, pkg *ast.Package, types map[ast.Expr]Type) error {\nwhy do i need fset and pkg? can't i get to fset from pkg? i can certainly get to the Files.\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode147\nsrc/pkg/exp/types/types.go:147: implementsType\nwhat's this?\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode181\nsrc/pkg/exp/types/types.go:181: Recover\nmight want to open a gap here, for future growth\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode186\nsrc/pkg/exp/types/types.go:186: Sizeof\nditto\n\nhttp://codereview.appspot.com/6490089/diff/11001/src/pkg/exp/types/types.go#newcode198\nsrc/pkg/exp/types/types.go:198: Nargs int // Nargs < 0 indicates variable number of arguments\ni'd prefer an IsVariadic field rather than overload this way.",
			"disapproval": false,
			"date": "2012-09-07 20:41:13.813980",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 10 September 2012 18:37,  <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go\r\n> File src/pkg/exp/types/staging/types.go (right):\r\n>\r\n> http://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode30\r\n> src/pkg/exp/types/staging/types.go:30: // 3) If a non-nil but non-empty\r\n> types map is provided, Check type-\r\n> I have minor discomfort about treating len 0 map separately from len > 0\r\n> map. It means if you have a list of things you care about and you do\r\n> something like\r\n>\r\n> m := make(map[ast.Expr]Type)\r\n> for _, thing := range things {\r\n>     m[thing] = nil\r\n> }\r\n>\r\n> then you get fast behavior except when len(things) == 0. It might be\r\n> worth making this a separate function. CheckSubset or something like\r\n> that.\r\n> Like I said, only minor discomfort.\r\n>\r\n> http://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode42\r\n> src/pkg/exp/types/staging/types.go:42: // All types implement the Type\r\n> interface.\r\n> Is there anything else callers should know about types? Can they be\r\n> compared with == ?\r\n> Are there other common methods they'll have?\r\n>\r\n> I wonder if all Types should have a few things like Kind() Kind\r\n> (replacing BasicKind with a few more things like Struct Func etc) and\r\n> Info() Info. Just a suggestion, though. I'm sure you've weighed these\r\n> before.\r\n\r\nIt occurs to me that people might find this more approachable\r\nif at least some of the API looked similar to the reflect Type API.\r\nThat is, each concrete type (still exported) could implement an interface\r\nthat looked pretty much the same as reflect.Type.  It could perhaps\r\neven use the same constants for Kind.\r\n\r\nJust a thought.\r\n",
			"disapproval": false,
			"date": "2012-09-10 18:47:47.046660",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think if that is a desirable goal it should be fairly easy to change (or\r\nadd) later as it's essentially a thin veneer on top of what's here now.\r\n\r\nI've tried an approach where every type is simply a special kind of\r\nconcrete Type (no hierarchy), and while that may have some (performance)\r\nadvantages it really doesn't use the Go type system very well but instead\r\nrelies on run-time panics in case of errors. The current reflection\r\nimplementation is the result of several iterations, and one of the driving\r\nconcerns there was performance and minimum amount of allocation. Arguably\r\nit would be nicer if each type had its own corresponding Go type (as was\r\nthe case in the beginning).\r\n\r\nI've been iterating this (too) many times and each approach has pros and\r\ncons. At this point my goal is to get this fully working. Once we're there\r\nwe can fine-tune. I agree that having both APIs somewhat similar might be\r\nnice.\r\n\r\n- gri\r\n\r\n\r\n\r\nOn Mon, Sep 10, 2012 at 11:47 AM, roger peppe <rogpeppe@gmail.com> wrote:\r\n\r\n> On 10 September 2012 18:37,  <rsc@golang.org> wrote:\r\n> > LGTM\r\n> >\r\n> >\r\n> >\r\n> >\r\n> http://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go\r\n> > File src/pkg/exp/types/staging/types.go (right):\r\n> >\r\n> >\r\n> http://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode30\r\n> > src/pkg/exp/types/staging/types.go:30: // 3) If a non-nil but non-empty\r\n> > types map is provided, Check type-\r\n> > I have minor discomfort about treating len 0 map separately from len > 0\r\n> > map. It means if you have a list of things you care about and you do\r\n> > something like\r\n> >\r\n> > m := make(map[ast.Expr]Type)\r\n> > for _, thing := range things {\r\n> >     m[thing] = nil\r\n> > }\r\n> >\r\n> > then you get fast behavior except when len(things) == 0. It might be\r\n> > worth making this a separate function. CheckSubset or something like\r\n> > that.\r\n> > Like I said, only minor discomfort.\r\n> >\r\n> >\r\n> http://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode42\r\n> > src/pkg/exp/types/staging/types.go:42: // All types implement the Type\r\n> > interface.\r\n> > Is there anything else callers should know about types? Can they be\r\n> > compared with == ?\r\n> > Are there other common methods they'll have?\r\n> >\r\n> > I wonder if all Types should have a few things like Kind() Kind\r\n> > (replacing BasicKind with a few more things like Struct Func etc) and\r\n> > Info() Info. Just a suggestion, though. I'm sure you've weighed these\r\n> > before.\r\n>\r\n> It occurs to me that people might find this more approachable\r\n> if at least some of the API looked similar to the reflect Type API.\r\n> That is, each concrete type (still exported) could implement an interface\r\n> that looked pretty much the same as reflect.Type.  It could perhaps\r\n> even use the same constants for Kind.\r\n>\r\n> Just a thought.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-10 21:53:41.566220",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just FYI.\n\n(A better CL will be coming today).\n- gri\n\nhttp://codereview.appspot.com/6490089/diff/7001/src/pkg/exp/types/staging/exprstring.go\nFile src/pkg/exp/types/staging/exprstring.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/7001/src/pkg/exp/types/staging/exprstring.go#newcode86\nsrc/pkg/exp/types/staging/exprstring.go:86: case *ast.BinaryExpr:\nOn 2012/09/07 14:59:17, adonovan wrote:\n> Is this output function intended for eyes only, or as input to a parser?  If so\n> you'll need to insert parens to disambiguate.  To do this optimally is a\n> function of the fixity, associativity and predecence of all your binary\n> operators; see Norman Ramsey (1998) \"Unparsing Expressions with Prefix and\n> Postfix Operators\".  [NB, there's a bug in that paper but Go's AST shouldn't hit\n> it.] \n\nThis is for human eyes only - to provide nicer error messages. But independent of that, the Go AST preserves original parentheses because the printer must faithfully reproduce the original source code. Thus this function will do the same (see ast.ParenExpr) and thus produce correct output if the input was correct.\n\nThanks for the hint to the paper, though. I always re-invent the algorithm when I need it.",
			"disapproval": false,
			"date": "2012-09-07 15:12:30.037030",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-07 20:01:43.331560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go\nFile src/pkg/exp/types/staging/types.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode30\nsrc/pkg/exp/types/staging/types.go:30: // 3) If a non-nil but non-empty types map is provided, Check type-\nI have minor discomfort about treating len 0 map separately from len > 0 map. It means if you have a list of things you care about and you do something like\n\nm := make(map[ast.Expr]Type)\nfor _, thing := range things {\n    m[thing] = nil\n}\n\nthen you get fast behavior except when len(things) == 0. It might be worth making this a separate function. CheckSubset or something like that.\nLike I said, only minor discomfort.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode42\nsrc/pkg/exp/types/staging/types.go:42: // All types implement the Type interface.\nIs there anything else callers should know about types? Can they be compared with == ?\nAre there other common methods they'll have?\n\nI wonder if all Types should have a few things like Kind() Kind (replacing BasicKind with a few more things like Struct Func etc) and Info() Info. Just a suggestion, though. I'm sure you've weighed these before.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode127\nsrc/pkg/exp/types/staging/types.go:127: Typ         Type\ns/Typ/Type/?\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode129\nsrc/pkg/exp/types/staging/types.go:129: IsAnonymous bool\nMake comments clear about whether Name == \"\" for anonymous.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode150\nsrc/pkg/exp/types/staging/types.go:150: // A Signature represents a user-defined function type func(...) (...).\nNot a Func?\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/types.go#newcode151\nsrc/pkg/exp/types/staging/types.go:151: // TODO(gri) consider using tuples to represent parameters and results.\nPlease don't expose 'tuples'. So many people are confused about whether Go has tuples already. If the concept must be exposed it would be better as a different name, like 'List' or 'ReturnList'. But probably ObjList is okay.\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/universe.go\nFile src/pkg/exp/types/staging/universe.go (right):\n\nhttp://codereview.appspot.com/6490089/diff/1018/src/pkg/exp/types/staging/universe.go#newcode21\nsrc/pkg/exp/types/staging/universe.go:21: var Typ = [...]*Basic{\ns/Typ/BasicType/ ?\nOr maybe BasicKind should have a Type() Type method that indexes this (then unexported) table? Bool.Type() etc.",
			"disapproval": false,
			"date": "2012-09-10 17:37:18.725070",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6490089: exp/types/staging: typechecker API",
	"created": "2012-09-07 00:44:41.511050",
	"patchsets": [
		1,
		1002,
		3001,
		4001,
		6006,
		7001,
		3,
		8002,
		11001,
		5008,
		2022,
		7013,
		1018,
		2034,
		4008
	],
	"modified": "2012-09-10 21:54:57.936360",
	"closed": true,
	"issue": 6490089
}