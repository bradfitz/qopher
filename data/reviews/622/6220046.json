{
	"description": "crypto/md5: faster inner loop, 3x faster overall\n\nThe speedup is a combination of unrolling/specializing\nthe actual code and also making the compiler generate better code.\n\nGo 1.0.1 (size: 1239 code + 320 data = 1559 total)\nmd5.BenchmarkHash1K   1000000\t   7178 ns/op\t 142.64 MB/s\nmd5.BenchmarkHash8K    200000\t  56834 ns/op\t 144.14 MB/s\n\nPartial unroll  (size: 1115 code + 256 data = 1371 total)\nmd5.BenchmarkHash1K   5000000\t   2513 ns/op\t 407.37 MB/s\nmd5.BenchmarkHash8K    500000\t  19406 ns/op\t 422.13 MB/s\n\nComplete unroll  (size: 1900 code + 0 data = 1900 code)\nmd5.BenchmarkHash1K   5000000\t   2442 ns/op\t 419.18 MB/s\nmd5.BenchmarkHash8K    500000\t  18957 ns/op\t 432.13 MB/s\n\nComparing Go 1.0.1 and the complete unroll (this CL):\n\nbenchmark               old MB/s     new MB/s  speedup\nmd5.BenchmarkHash1K       142.64       419.18    2.94x\nmd5.BenchmarkHash8K       144.14       432.13    3.00x\n\nOn the same machine, 'openssl speed md5' reports 441 MB/s\nand 531 MB/s for our two cases, so this CL is at 90% and 80% of\nthose speeds, which is at least in the right ballpark.\nOpenSSL is using carefully engineered assembly, so we are\nunlikely to catch up completely.\n\nMeasurements on a Mid-2010 MacPro5,1.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"agl@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-05-18 01:43:14.907585",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 17, 2012 at 5:59 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Thu, May 17, 2012 at 8:57 PM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > when you say \"OpenSSL is also using carefully engineered assembly.\", does\r\n> > that mean:\r\n> >\r\n> > a) OpenSSL, though, is using carefully engineered assembly to gets its\r\n> extra\r\n> > speed.\r\n> > b) OpenSSL is using carefully engineered assembly also, just like we do\r\n> now.\r\n>\r\n> I mean that the OpenSSL implementation is using a .s file, while we\r\n> are using a .go file.  So we're unlikely to catch up completely.\r\n>\r\n\r\nThat's what I guessed. The word \"also\" felt weird.\r\n",
			"disapproval": false,
			"date": "2012-05-18 01:00:52.389486",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "tweaked the text\r\n",
			"disapproval": false,
			"date": "2012-05-18 01:06:41.777137",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-18 00:27:34.563202",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=be10ca17ef44 ***\n\ncrypto/md5: faster inner loop, 3x faster overall\n\nThe speedup is a combination of unrolling/specializing\nthe actual code and also making the compiler generate better code.\n\nGo 1.0.1 (size: 1239 code + 320 data = 1559 total)\nmd5.BenchmarkHash1K   1000000\t   7178 ns/op\t 142.64 MB/s\nmd5.BenchmarkHash8K    200000\t  56834 ns/op\t 144.14 MB/s\n\nPartial unroll  (size: 1115 code + 256 data = 1371 total)\nmd5.BenchmarkHash1K   5000000\t   2513 ns/op\t 407.37 MB/s\nmd5.BenchmarkHash8K    500000\t  19406 ns/op\t 422.13 MB/s\n\nComplete unroll  (size: 1900 code + 0 data = 1900 code)\nmd5.BenchmarkHash1K   5000000\t   2442 ns/op\t 419.18 MB/s\nmd5.BenchmarkHash8K    500000\t  18957 ns/op\t 432.13 MB/s\n\nComparing Go 1.0.1 and the complete unroll (this CL):\n\nbenchmark               old MB/s     new MB/s  speedup\nmd5.BenchmarkHash1K       142.64       419.18    2.94x\nmd5.BenchmarkHash8K       144.14       432.13    3.00x\n\nOn the same machine, 'openssl speed md5' reports 441 MB/s\nand 531 MB/s for our two cases, so this CL is at 90% and 80% of\nthose speeds, which is at least in the right ballpark.\nOpenSSL is using carefully engineered assembly, so we are\nunlikely to catch up completely.\n\nMeasurements on a Mid-2010 MacPro5,1.\n\nR=golang-dev, bradfitz, agl\nCC=golang-dev\nhttp://codereview.appspot.com/6220046",
			"disapproval": false,
			"date": "2012-05-22 17:53:31.380208",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "when you say \"OpenSSL is also using carefully engineered assembly.\", does\r\nthat mean:\r\n\r\na) OpenSSL, though, is using carefully engineered assembly to gets its\r\nextra speed.\r\nb) OpenSSL is using carefully engineered assembly also, just like we do now.\r\n\r\n?\r\n\r\nI haven't looked at the series of patches yet, though.\r\n\r\nOn Thu, May 17, 2012 at 5:27 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> crypto/md5: faster inner loop, 3x faster overall\r\n>\r\n> The speedup is a combination of unrolling/specializing\r\n> the actual code and also making the compiler generate better code.\r\n>\r\n> Go 1.0.1 (size: 1239 code + 320 data = 1559 total)\r\n> md5.BenchmarkHash1K   1000000      7178 ns/op    142.64 MB/s\r\n> md5.BenchmarkHash8K    200000     56834 ns/op    144.14 MB/s\r\n>\r\n> Partial unroll  (size: 1115 code + 256 data = 1371 total)\r\n> md5.BenchmarkHash1K   5000000      2513 ns/op    407.37 MB/s\r\n> md5.BenchmarkHash8K    500000     19406 ns/op    422.13 MB/s\r\n>\r\n> Complete unroll  (size: 1900 code + 0 data = 1900 code)\r\n> md5.BenchmarkHash1K   5000000      2442 ns/op    419.18 MB/s\r\n> md5.BenchmarkHash8K    500000     18957 ns/op    432.13 MB/s\r\n>\r\n> Comparing Go 1.0.1 and the complete unroll (this CL):\r\n>\r\n> benchmark               old MB/s     new MB/s  speedup\r\n> md5.BenchmarkHash1K       142.64       419.18    2.94x\r\n> md5.BenchmarkHash8K       144.14       432.13    3.00x\r\n>\r\n> On the same machine, 'openssl speed md5' reports 441 MB/s\r\n> and 531 MB/s for our two cases, so this CL is at 90% and 80% of\r\n> those speeds, which is at least in the right ballpark.\r\n> OpenSSL is also using carefully engineered assembly.\r\n>\r\n> Measurements on a Mid-2010 MacPro5,1.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6220046/<http://codereview.appspot.com/6220046/>\r\n>\r\n> Affected files:\r\n>  A src/pkg/crypto/md5/gen.go\r\n>  M src/pkg/crypto/md5/md5_test.go\r\n>  M src/pkg/crypto/md5/md5block.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-18 00:57:34.237480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 17, 2012 at 8:57 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> when you say \"OpenSSL is also using carefully engineered assembly.\", does\r\n> that mean:\r\n>\r\n> a) OpenSSL, though, is using carefully engineered assembly to gets its extra\r\n> speed.\r\n> b) OpenSSL is using carefully engineered assembly also, just like we do now.\r\n\r\nI mean that the OpenSSL implementation is using a .s file, while we\r\nare using a .go file.  So we're unlikely to catch up completely.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-18 00:59:38.963347",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6220046: crypto/md5: faster inner loop, 3x faster overall",
	"created": "2012-05-17 22:42:31.008199",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		1003,
		12001
	],
	"modified": "2012-05-22 17:53:32.496218",
	"closed": true,
	"issue": 6220046
}