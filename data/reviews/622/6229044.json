{
	"description": "net/http: refactor body logic in test\n\nThis just eliminates some duplication.\nAlso add a pointer to RFC 1122, in case\nthis comes up again.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-22 17:32:38.789460",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Tue, May 22, 2012 at 10:32 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net/http: refactor body logic in test\r\n>\r\n> This just eliminates some duplication.\r\n> Also add a pointer to RFC 1122, in case\r\n> this comes up again.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6229044/<http://codereview.appspot.com/6229044/>\r\n>\r\n> Affected files:\r\n>  M src/pkg/net/http/serve_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/http/serve_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/serve_test.**go\r\n> +++ b/src/pkg/net/http/serve_test.**go\r\n> @@ -618,13 +618,6 @@\r\n>        expectedResponse string // expected substring in first line of http\r\n> response\r\n>  }\r\n>\r\n> -// forcedBadBody returns whether this test sends an unsolicited body\r\n> -// without asking the server's permission and which we know the server\r\n> -// will deny (possibly before we finish writing the body).\r\n> -func (t serverExpectTest) forcedBadBody() bool {\r\n> -       return t.contentLength > 0 && !t.readBody &&\r\n> strings.ToLower(t.expectation) != \"100-continue\"\r\n> -}\r\n> -\r\n>  var serverExpectTests = []serverExpectTest{\r\n>        // Normal 100-continues, case-insensitive.\r\n>        {100, \"100-continue\", true, \"100 Continue\"},\r\n> @@ -668,6 +661,11 @@\r\n>                        t.Fatalf(\"Dial: %v\", err)\r\n>                }\r\n>                defer conn.Close()\r\n> +\r\n> +               // Only send the body immediately if we're acting like an\r\n> HTTP client\r\n> +               // that doesn't send 100-continue expectations.\r\n> +               writeBody := test.contentLength > 0 &&\r\n> strings.ToLower(test.**expectation) != \"100-continue\"\r\n> +\r\n>                go func() {\r\n>                        _, err := fmt.Fprintf(conn, \"POST /?readbody=%v\r\n> HTTP/1.1\\r\\n\"+\r\n>                                \"Connection: close\\r\\n\"+\r\n> @@ -678,13 +676,11 @@\r\n>                                t.Errorf(\"On test %#v, error writing\r\n> request headers: %v\", test, err)\r\n>                                return\r\n>                        }\r\n> -                       // Only send the body immediately if we're acting\r\n> like an HTTP client\r\n> -                       // that doesn't send 100-continue expectations.\r\n> -                       if test.contentLength > 0 && strings.ToLower(test.\r\n> **expectation) != \"100-continue\" {\r\n> +                       if writeBody {\r\n>                                body := strings.Repeat(\"A\",\r\n> test.contentLength)\r\n>                                _, err = fmt.Fprint(conn, body)\r\n>                                if err != nil {\r\n> -                                       if test.forcedBadBody() {\r\n> +                                       if !test.readBody {\r\n>                                                // Server likely already\r\n> hung up on us.\r\n>                                                // See larger comment below.\r\n>                                                t.Logf(\"On test %#v,\r\n> acceptable error writing request body: %v\", test, err)\r\n> @@ -697,11 +693,12 @@\r\n>                bufr := bufio.NewReader(conn)\r\n>                line, err := bufr.ReadString('\\n')\r\n>                if err != nil {\r\n> -                       if test.forcedBadBody() {\r\n> +                       if writeBody && !test.readBody {\r\n>                                // This is an acceptable failure due to a\r\n> possible TCP race:\r\n>                                // We were still writing data and the\r\n> server hung up on us. A TCP\r\n>                                // implementation may send a RST if our\r\n> request body data was known\r\n>                                // to be lost, which may trigger our reads\r\n> to fail.\r\n> +                               // See RFC 1122 page 88.\r\n>                                t.Logf(\"On test %#v, acceptable error from\r\n> ReadString: %v\", test, err)\r\n>                                return\r\n>                        }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-22 17:37:11.982018",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3f2c5993bbc3 ***\n\nnet/http: refactor body logic in test\n\nThis just eliminates some duplication.\nAlso add a pointer to RFC 1122, in case\nthis comes up again.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6229044",
			"disapproval": false,
			"date": "2012-05-22 17:46:57.416965",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6229044: net/http: refactor body logic in test",
	"created": "2012-05-22 17:32:18.836412",
	"patchsets": [
		1,
		2001,
		3002,
		7001
	],
	"modified": "2012-05-22 17:46:58.517433",
	"closed": true,
	"issue": 6229044
}