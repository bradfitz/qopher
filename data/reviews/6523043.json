{
	"description": "os: use small writes during console io\n\nFixes issue 3767",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-18 02:02:22.573040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A comment above \"const maxWrite = 16000\" would be nice, both explaining the\r\nrationale of this chunking and where 16000 comes from.\r\n\r\nOn Mon, Sep 17, 2012 at 7:02 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> os: use small writes during console io\r\n>\r\n> Fixes issue 3767\r\n>\r\n> Please review this at http://codereview.appspot.com/**6523043/<http://codereview.appspot.com/6523043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/os/file_windows.go\r\n>   M src/pkg/os/os_test.go\r\n>\r\n>\r\n> Index: src/pkg/os/file_windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/os/file_windows.go\r\n> +++ b/src/pkg/os/file_windows.go\r\n> @@ -258,8 +258,15 @@\r\n>                 f.lastbits = make([]byte, len(b))\r\n>                 copy(f.lastbits, b)\r\n>         }\r\n> -       if len(runes) > 0 {\r\n> -               uint16s := utf16.Encode(runes)\r\n> +       const maxWrite = 16000\r\n> +       for len(runes) > 0 {\r\n> +               m := len(runes)\r\n> +               if m > maxWrite {\r\n> +                       m = maxWrite\r\n> +               }\r\n> +               chunk := runes[:m]\r\n> +               runes = runes[m:]\r\n> +               uint16s := utf16.Encode(chunk)\r\n>                 for len(uint16s) > 0 {\r\n>                         var written uint32\r\n>                         err = syscall.WriteConsole(f.fd, &uint16s[0],\r\n> uint32(len(uint16s)), &written, nil)\r\n> Index: src/pkg/os/os_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/os/os_test.go\r\n> +++ b/src/pkg/os/os_test.go\r\n> @@ -6,6 +6,7 @@\r\n>\r\n>  import (\r\n>         \"bytes\"\r\n> +       \"flag\"\r\n>         \"fmt\"\r\n>         \"io\"\r\n>         \"io/ioutil\"\r\n> @@ -1066,3 +1067,31 @@\r\n>                 t.Fatalf(\"wrong file size have %d want 0\", fi.Size())\r\n>         }\r\n>  }\r\n> +\r\n> +var testLargeWrite = flag.Bool(\"large_write\", false, \"run\r\n> TestLargeWriteToConsole test that floods console with output\")\r\n> +\r\n> +func TestLargeWriteToConsole(t *testing.T) {\r\n> +       if !*testLargeWrite {\r\n> +               t.Logf(\"skipping test because it floods console with\r\n> output\")\r\n> +               return\r\n> +       }\r\n> +       b := make([]byte, 32000)\r\n> +       for i := range b {\r\n> +               b[i] = '.'\r\n> +       }\r\n> +       b[len(b)-1] = '\\n'\r\n> +       n, err := Stdout.Write(b)\r\n> +       if err != nil {\r\n> +               t.Fatalf(\"Write to os.Stdout failed: %v\", err)\r\n> +       }\r\n> +       if n != len(b) {\r\n> +               t.Errorf(\"Write to os.Stdout should return %d; got %d\",\r\n> len(b), n)\r\n> +       }\r\n> +       n, err = Stderr.Write(b)\r\n> +       if err != nil {\r\n> +               t.Fatalf(\"Write to os.Stderr failed: %v\", err)\r\n> +       }\r\n> +       if n != len(b) {\r\n> +               t.Errorf(\"Write to os.Stderr should return %d; got %d\",\r\n> len(b), n)\r\n> +       }\r\n> +}\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-18 06:37:11.195460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-18 15:17:32.275200",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-18 07:05:05.826740",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/18 06:37:11, bradfitz wrote:\n> A comment above \"const maxWrite = 16000\" would be nice, both explaining the\n> rationale of this chunking and where 16000 comes from.\n> \n\nDone. PTAL.\n\nAlex\n\nPS: Just want to remind you about http://codereview.appspot.com/6488127/#msg6. If you tell me how connect there, I will do it myself.",
			"disapproval": false,
			"date": "2012-09-18 07:05:08.983600",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6523043/diff/3003/src/pkg/os/os_test.go\nFile src/pkg/os/os_test.go (right):\n\nhttps://codereview.appspot.com/6523043/diff/3003/src/pkg/os/os_test.go#newcode1075\nsrc/pkg/os/os_test.go:1075: t.Logf(\"skipping test because it floods console with output\")\nmaybe reference the flag:\n\n\"skipping console-flooding test; enable with -large_write\"",
			"disapproval": false,
			"date": "2012-09-18 15:24:19.766140",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b0c749cc5654 ***\n\nos: use small writes during console io\n\nFixes issue 3767\n\nR=golang-dev, bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6523043\n\nhttp://codereview.appspot.com/6523043/diff/3003/src/pkg/os/os_test.go\nFile src/pkg/os/os_test.go (right):\n\nhttp://codereview.appspot.com/6523043/diff/3003/src/pkg/os/os_test.go#newcode1075\nsrc/pkg/os/os_test.go:1075: t.Logf(\"skipping test because it floods console with output\")\nOn 2012/09/18 15:24:19, bradfitz wrote:\n> maybe reference the flag:\n> \n> \"skipping console-flooding test; enable with -large_write\"\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-09-19 06:55:28.642770",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 6523043: os: use small writes during console io",
	"created": "2012-09-18 02:01:27.570540",
	"patchsets": [
		1,
		2001,
		5001,
		3003,
		2002
	],
	"modified": "2012-09-19 06:55:30.686970",
	"closed": true,
	"issue": 6523043
}