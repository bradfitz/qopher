{
	"description": "godoc: report error for directories with multiple packages\n\nFixes issue 3922.",
	"cc": [
		"rsc@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The question remains: what should godoc do in case of multiple\r\npackages in the same directory?\r\n\r\nIt sounds like the answer is: show an error. This would then (down the\r\nroad) fit with a changed parser.ParseDir signature which would not\r\nreturn a map of packages found but a single package if there is only\r\none, and an error if there is more than one.\r\n\r\nComments?\r\n- gri\r\n\r\nOn Wed, Aug 8, 2012 at 12:41 PM,  <rsc@golang.org> wrote:\r\n> I suggest we assume that we can let go/build tell us about the one\r\n> package in the directory. Then all the tools are consistent.\r\n>\r\n> Environments with non-standard usages can always implement a vfs in\r\n> godoc to provide a simulation of the standard tree.\r\n>\r\n>\r\n> http://codereview.appspot.com/6453094/\r\n",
			"disapproval": false,
			"date": "2012-08-08 20:36:00.286620",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3ea251d89964 ***\n\ngodoc: report error for directories with multiple packages\n\nFixes issue 3922.\n\nR=rsc, adg\nCC=golang-dev\nhttp://codereview.appspot.com/6453094",
			"disapproval": false,
			"date": "2012-08-09 23:10:49.831100",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6453094/diff/7005/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/6453094/diff/7005/src/cmd/godoc/godoc.go#newcode915\nsrc/cmd/godoc/godoc.go:915: pkgs, err := parseDir(fset, abspath, filter)\nOn 2012/08/09 16:39:16, rsc wrote:\n> I think we can go even further here. Above, the code tries to continue on if\n> ctxt.ImportDir fails. I suggest that if ctxt.ImportDir fails, then stop and show\n> an error then.\n> \n> When we get here, the set of files to read is exactly dir.GoFiles +\n> dir.CgoFiles.\n> \n> I don't believe ast/parser need ever change, by the way. The single directory\n> single package convention is enforced by the go tools - cmd/go, go/build,\n> cmd/godoc - but I don't think it should be enforced by the parser itself.\n> \n\nThat won't work w/o quite a bit more change of the logic. getPageInfo is also called for directories which don't contain any .go files (e.g. src/pkg) and in that case it produces a list of directories. build.ImportDir returns an error in that case and godoc won't show anything. I prefer to leave it as is for now.\n\nAt some point, with all the conventions in place now, it may make sense to do a larger round of cleanups in godoc. Separate CL.",
			"disapproval": false,
			"date": "2012-08-09 17:05:40.544510",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-07 21:28:30.374250",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this is right. I updated the issue http://golang.org/issue/3922",
			"disapproval": false,
			"date": "2012-08-08 00:24:32.741700",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suggest we assume that we can let go/build tell us about the one package in the directory. Then all the tools are consistent.\n\nEnvironments with non-standard usages can always implement a vfs in godoc to provide a simulation of the standard tree.",
			"disapproval": false,
			"date": "2012-08-08 19:41:33.634050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-08-09 18:49:42.555160",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nhttp://codereview.appspot.com/6453094\r\n\r\n- godoc reports error for directories with multiple packages\r\n(excluding test and example packages)\r\n- remove functionality to select a specific package in a directory\r\n\r\nOn Wed, Aug 8, 2012 at 1:35 PM, Robert Griesemer <gri@golang.org> wrote:\r\n> The question remains: what should godoc do in case of multiple\r\n> packages in the same directory?\r\n>\r\n> It sounds like the answer is: show an error. This would then (down the\r\n> road) fit with a changed parser.ParseDir signature which would not\r\n> return a map of packages found but a single package if there is only\r\n> one, and an error if there is more than one.\r\n>\r\n> Comments?\r\n> - gri\r\n>\r\n> On Wed, Aug 8, 2012 at 12:41 PM,  <rsc@golang.org> wrote:\r\n>> I suggest we assume that we can let go/build tell us about the one\r\n>> package in the directory. Then all the tools are consistent.\r\n>>\r\n>> Environments with non-standard usages can always implement a vfs in\r\n>> godoc to provide a simulation of the standard tree.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/6453094/\r\n",
			"disapproval": false,
			"date": "2012-08-08 22:01:13.783280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6453094/diff/7005/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/6453094/diff/7005/src/cmd/godoc/godoc.go#newcode915\nsrc/cmd/godoc/godoc.go:915: pkgs, err := parseDir(fset, abspath, filter)\nI think we can go even further here. Above, the code tries to continue on if ctxt.ImportDir fails. I suggest that if ctxt.ImportDir fails, then stop and show an error then.\n\nWhen we get here, the set of files to read is exactly dir.GoFiles + dir.CgoFiles.\n\nI don't believe ast/parser need ever change, by the way. The single directory single package convention is enforced by the go tools - cmd/go, go/build, cmd/godoc - but I don't think it should be enforced by the parser itself.",
			"disapproval": false,
			"date": "2012-08-09 16:39:16.202300",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6453094: godoc: adjust import path for directories with multiple...",
	"created": "2012-08-07 21:26:22.511060",
	"patchsets": [
		1,
		1001,
		3001,
		5001,
		2003,
		7004,
		10005,
		3003,
		11005,
		7005,
		6
	],
	"modified": "2012-08-09 23:10:51.130310",
	"closed": true,
	"issue": 6453094
}