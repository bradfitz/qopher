{
	"description": "all: make Unicode surrogate halves illegal as UTF-8\n\nSurrogate halves are part of UTF-16 and should never appear in UTF-8.\n(The rune that two combined halves represent in UTF-16 should\nbe encoded directly.)\n\nEncoding: encode as RuneError.\nDecoding: convert to RuneError, consume one byte.\n\nThis requires changing:\n        package unicode/utf8\n        runtime for range over string\nAlso added utf8.ValidRune and fixed bug in utf.RuneLen.\n\nFixes issue 3927.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"bsiegert@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-08 20:03:48.011650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8.go\nFile src/pkg/unicode/utf8/utf8.go (right):\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8.go#newcode23\nsrc/pkg/unicode/utf8/utf8.go:23: SurrogateMin = 0xD800\nDo you want code to use these constants?\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8.go#newcode311\nsrc/pkg/unicode/utf8/utf8.go:311: switch {\ncase r < 0:\n    return -1\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8_test.go\nFile src/pkg/unicode/utf8/utf8_test.go (right):\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8_test.go#newcode177\nsrc/pkg/unicode/utf8/utf8_test.go:177: func TestDecodeSurrogateRune(t *testing.T) {\nblank line before here please\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8_test.go#newcode178\nsrc/pkg/unicode/utf8/utf8_test.go:178: for i := 0; i < len(surrogateMap); i++ {\nfor _, m := range surrogateMap\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8_test.go#newcode183\nsrc/pkg/unicode/utf8/utf8_test.go:183: t.Errorf(\"DecodeRune(%q) = %#04x, %d want %#04x, %d\", b, r, size, RuneError, 1)\n%x?\n%q depends on this package to behave correctly.\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8_test.go#newcode188\nsrc/pkg/unicode/utf8/utf8_test.go:188: t.Errorf(\"DecodeRune(%q) = %#04x, %d want %#04x, %d\", b, r, size, RuneError, 1)\n%x\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8_test.go#newcode333\nsrc/pkg/unicode/utf8/utf8_test.go:333: {MaxRune + 1, -1},\n-1, -1\n0, 1",
			"disapproval": false,
			"date": "2012-08-08 20:35:32.209760",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is documenting existing behavior.",
			"disapproval": false,
			"date": "2012-08-08 20:48:36.468390",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8.go\nFile src/pkg/unicode/utf8/utf8.go (right):\n\nhttp://codereview.appspot.com/6458099/diff/1/src/pkg/unicode/utf8/utf8.go#newcode309\nsrc/pkg/unicode/utf8/utf8.go:309: // It returns -1 if the rune is not a valid value to encode in UTF-8.\nI am concerned about this API change. What if _existing_ code using RuneLen does not check if the return value is positive?",
			"disapproval": false,
			"date": "2012-08-08 20:36:17.381890",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4ddf27db270b ***\n\nall: make Unicode surrogate halves illegal as UTF-8\n\nSurrogate halves are part of UTF-16 and should never appear in UTF-8.\n(The rune that two combined halves represent in UTF-16 should\nbe encoded directly.)\n\nEncoding: encode as RuneError.\nDecoding: convert to RuneError, consume one byte.\n\nThis requires changing:\n        package unicode/utf8\n        runtime for range over string\nAlso added utf8.ValidRune and fixed bug in utf.RuneLen.\n\nFixes issue 3927.\n\nR=golang-dev, rsc, bsiegert\nCC=golang-dev\nhttp://codereview.appspot.com/6458099",
			"disapproval": false,
			"date": "2012-08-08 21:01:44.703120",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6458099: all: make Unicode surrogate halves illegal as UTF-8",
	"created": "2012-08-08 20:03:44.654270",
	"patchsets": [
		1,
		6
	],
	"modified": "2012-08-08 21:01:46.195420",
	"closed": true,
	"issue": 6458099
}