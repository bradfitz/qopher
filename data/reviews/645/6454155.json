{
	"description": "goprotobuf: Register unique names for encoding/json and math imports.",
	"cc": [
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/goprotobuf/source/detail?r=1be7e4b21c4a ***\n\ngoprotobuf: Register unique names for encoding/json and math imports.\n\nR=adg\nCC=golang-dev\nhttp://codereview.appspot.com/6454155",
			"disapproval": false,
			"date": "2012-08-15 00:54:10.028150",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/goprotobuf",
			"disapproval": false,
			"date": "2012-08-15 00:50:53.245230",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn 15 August 2012 10:50,  <dsymonds@golang.org> wrote:\r\n> Reviewers: adg,\r\n>\r\n> Message:\r\n> Hello adg (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/goprotobuf\r\n>\r\n>\r\n> Description:\r\n> goprotobuf: Register unique names for encoding/json and math imports.\r\n>\r\n> Please review this at http://codereview.appspot.com/6454155/\r\n>\r\n> Affected files:\r\n>   M protoc-gen-go/generator/generator.go\r\n>   M protoc-gen-go/testdata/my_test/test.pb.go\r\n>   M protoc-gen-go/testdata/my_test/test.pb.go.golden\r\n>\r\n>\r\n> Index: protoc-gen-go/generator/generator.go\r\n> ===================================================================\r\n> --- a/protoc-gen-go/generator/generator.go\r\n> +++ b/protoc-gen-go/generator/generator.go\r\n> @@ -276,9 +276,9 @@\r\n>         g.P(\"func (this *\", ms.sym, \") String() string { return (*\",\r\n> remoteSym, \")(this).String() }\")\r\n>         g.P(\"func (*\", ms.sym, \") ProtoMessage() {}\")\r\n>         if ms.hasExtensions {\r\n> -               g.P(\"func (*\", ms.sym, \") ExtensionRangeArray() []\",\r\n> g.ProtoPkg, \".ExtensionRange \",\r\n> +               g.P(\"func (*\", ms.sym, \") ExtensionRangeArray() []\",\r\n> g.Pkg[\"proto\"], \".ExtensionRange \",\r\n>                         \"{ return (*\", remoteSym,\r\n> \")(nil).ExtensionRangeArray() }\")\r\n> -               g.P(\"func (this *\", ms.sym, \") ExtensionMap() map[int32]\",\r\n> g.ProtoPkg, \".Extension \",\r\n> +               g.P(\"func (this *\", ms.sym, \") ExtensionMap() map[int32]\",\r\n> g.Pkg[\"proto\"], \".Extension \",\r\n>                         \"{ return (*\", remoteSym, \")(this).ExtensionMap()\r\n> }\")\r\n>                 if ms.isMessageSet {\r\n>                         g.P(\"func (this *\", ms.sym, \") Marshal() ([]byte,\r\n> error) \",\r\n> @@ -339,7 +339,7 @@\r\n>         ImportPrefix      string            // String to prefix to imported\r\n> package file names.\r\n>         ImportMap         map[string]string // Mapping from import name to\r\n> generated name\r\n>\r\n> -       ProtoPkg string // The name under which we import the library's\r\n> package proto.\r\n> +       Pkg map[string]string // The names under which we import support\r\n> packages\r\n>\r\n>         packageName      string            // What we're calling ourselves.\r\n>         allFiles         []*FileDescriptor // All files in the tree\r\n> @@ -535,9 +535,13 @@\r\n>\r\n>         g.packageName = RegisterUniquePackageName(pkg, g.genFiles[0])\r\n>\r\n> -       // Register the proto package name.  It might collide with the\r\n> +       // Register the support package names. They might collide with the\r\n>         // name of a package we import.\r\n> -       g.ProtoPkg = RegisterUniquePackageName(\"proto\", nil)\r\n> +       g.Pkg = map[string]string{\r\n> +               \"json\":  RegisterUniquePackageName(\"json\", nil),\r\n> +               \"math\":  RegisterUniquePackageName(\"math\", nil),\r\n> +               \"proto\": RegisterUniquePackageName(\"proto\", nil),\r\n> +       }\r\n>\r\n>  AllFiles:\r\n>         for _, f := range g.allFiles {\r\n> @@ -918,11 +922,11 @@\r\n>         // We almost always need a proto import.  Rather than computing when\r\n> we\r\n>         // do, which is tricky when there's a plugin, just import it and\r\n>         // reference it later. The same argument applies to the math\r\n> package,\r\n> -       // for handling bit patterns for floating-point numbers.\r\n> -       g.P(\"import \" + g.ProtoPkg + \" \" +\r\n> Quote(g.ImportPrefix+\"code.google.com/p/goprotobuf/proto\"))\r\n> -       // TODO: Make json and math uniquely named.\r\n> -       g.P(`import \"encoding/json\"`)\r\n> -       g.P(`import \"math\"`)\r\n> +       // for handling bit patterns for floating-point numbers, and to the\r\n> +       // json package, for symbolic names of enum values for JSON\r\n> marshaling.\r\n> +       g.P(\"import \" + g.Pkg[\"proto\"] + \" \" +\r\n> Quote(g.ImportPrefix+\"code.google.com/p/goprotobuf/proto\"))\r\n> +       g.P(\"import \" + g.Pkg[\"json\"] + ` \"encoding/json\"`)\r\n> +       g.P(\"import \" + g.Pkg[\"math\"] + ` \"math\"`)\r\n>         for i, s := range g.file.Dependency {\r\n>                 fd := g.fileByName(s)\r\n>                 // Do not import our own package.\r\n> @@ -959,7 +963,7 @@\r\n>                 g.P()\r\n>         }\r\n>         g.P(\"// Reference proto, json, and math imports to suppress error if\r\n> they are not otherwise used.\")\r\n> -       g.P(\"var _ = \", g.ProtoPkg, \".Marshal\")\r\n> +       g.P(\"var _ = \", g.Pkg[\"proto\"], \".Marshal\")\r\n>         g.P(\"var _ = &json.SyntaxError{}\")\r\n>         g.P(\"var _ = math.Inf\")\r\n>         g.P()\r\n> @@ -1040,7 +1044,7 @@\r\n>\r\n>         g.P(\"func (x \", ccTypeName, \") String() string {\")\r\n>         g.In()\r\n> -       g.P(\"return \", g.ProtoPkg, \".EnumName(\", ccTypeName, \"_name,\r\n> int32(x))\")\r\n> +       g.P(\"return \", g.Pkg[\"proto\"], \".EnumName(\", ccTypeName, \"_name,\r\n> int32(x))\")\r\n>         g.Out()\r\n>         g.P(\"}\")\r\n>\r\n> @@ -1052,7 +1056,7 @@\r\n>\r\n>         g.P(\"func (x *\", ccTypeName, \") UnmarshalJSON(data []byte) error {\")\r\n>         g.In()\r\n> -       g.P(\"value, err := \", g.ProtoPkg, \".UnmarshalJSONEnum(\", ccTypeName,\r\n> `_value, data, \"`, ccTypeName, `\")`)\r\n> +       g.P(\"value, err := \", g.Pkg[\"proto\"], \".UnmarshalJSONEnum(\",\r\n> ccTypeName, `_value, data, \"`, ccTypeName, `\")`)\r\n>         g.P(\"if err != nil {\")\r\n>         g.In()\r\n>         g.P(\"return err\")\r\n> @@ -1282,7 +1286,7 @@\r\n>                 g.RecordTypeUse(field.GetTypeName())\r\n>         }\r\n>         if len(message.ExtensionRange) > 0 {\r\n> -               g.P(\"XXX_extensions\\t\\tmap[int32]\", g.ProtoPkg, \".Extension\r\n> `json:\\\"-\\\"`\")\r\n> +               g.P(\"XXX_extensions\\t\\tmap[int32]\", g.Pkg[\"proto\"],\r\n> \".Extension `json:\\\"-\\\"`\")\r\n>         }\r\n>         g.P(\"XXX_unrecognized\\t[]byte `json:\\\"-\\\"`\")\r\n>         g.Out()\r\n> @@ -1290,7 +1294,7 @@\r\n>\r\n>         // Reset, String and ProtoMessage methods.\r\n>         g.P(\"func (this *\", ccTypeName, \") Reset() { *this = \", ccTypeName,\r\n> \"{} }\")\r\n> -       g.P(\"func (this *\", ccTypeName, \") String() string { return \",\r\n> g.ProtoPkg, \".CompactTextString(this) }\")\r\n> +       g.P(\"func (this *\", ccTypeName, \") String() string { return \",\r\n> g.Pkg[\"proto\"], \".CompactTextString(this) }\")\r\n>         g.P(\"func (*\", ccTypeName, \") ProtoMessage() {}\")\r\n>\r\n>         // Extension support methods\r\n> @@ -1303,21 +1307,21 @@\r\n>                         g.P()\r\n>                         g.P(\"func (this *\", ccTypeName, \") Marshal()\r\n> ([]byte, error) {\")\r\n>                         g.In()\r\n> -                       g.P(\"return \", g.ProtoPkg,\r\n> \".MarshalMessageSet(this.ExtensionMap())\")\r\n> +                       g.P(\"return \", g.Pkg[\"proto\"],\r\n> \".MarshalMessageSet(this.ExtensionMap())\")\r\n>                         g.Out()\r\n>                         g.P(\"}\")\r\n>                         g.P(\"func (this *\", ccTypeName, \") Unmarshal(buf\r\n> []byte) error {\")\r\n>                         g.In()\r\n> -                       g.P(\"return \", g.ProtoPkg,\r\n> \".UnmarshalMessageSet(buf, this.ExtensionMap())\")\r\n> +                       g.P(\"return \", g.Pkg[\"proto\"],\r\n> \".UnmarshalMessageSet(buf, this.ExtensionMap())\")\r\n>                         g.Out()\r\n>                         g.P(\"}\")\r\n>                         g.P(\"// ensure \", ccTypeName, \" satisfies\r\n> proto.Marshaler and proto.Unmarshaler\")\r\n> -                       g.P(\"var _ \", g.ProtoPkg, \".Marshaler = (*\",\r\n> ccTypeName, \")(nil)\")\r\n> -                       g.P(\"var _ \", g.ProtoPkg, \".Unmarshaler = (*\",\r\n> ccTypeName, \")(nil)\")\r\n> +                       g.P(\"var _ \", g.Pkg[\"proto\"], \".Marshaler = (*\",\r\n> ccTypeName, \")(nil)\")\r\n> +                       g.P(\"var _ \", g.Pkg[\"proto\"], \".Unmarshaler = (*\",\r\n> ccTypeName, \")(nil)\")\r\n>                 }\r\n>\r\n>                 g.P()\r\n> -               g.P(\"var extRange_\", ccTypeName, \" = []\", g.ProtoPkg,\r\n> \".ExtensionRange{\")\r\n> +               g.P(\"var extRange_\", ccTypeName, \" = []\", g.Pkg[\"proto\"],\r\n> \".ExtensionRange{\")\r\n>                 g.In()\r\n>                 for _, r := range message.ExtensionRange {\r\n>                         end := fmt.Sprint(*r.End - 1) // make range\r\n> inclusive on both ends\r\n> @@ -1325,16 +1329,16 @@\r\n>                 }\r\n>                 g.Out()\r\n>                 g.P(\"}\")\r\n> -               g.P(\"func (*\", ccTypeName, \") ExtensionRangeArray() []\",\r\n> g.ProtoPkg, \".ExtensionRange {\")\r\n> +               g.P(\"func (*\", ccTypeName, \") ExtensionRangeArray() []\",\r\n> g.Pkg[\"proto\"], \".ExtensionRange {\")\r\n>                 g.In()\r\n>                 g.P(\"return extRange_\", ccTypeName)\r\n>                 g.Out()\r\n>                 g.P(\"}\")\r\n> -               g.P(\"func (this *\", ccTypeName, \") ExtensionMap()\r\n> map[int32]\", g.ProtoPkg, \".Extension {\")\r\n> +               g.P(\"func (this *\", ccTypeName, \") ExtensionMap()\r\n> map[int32]\", g.Pkg[\"proto\"], \".Extension {\")\r\n>                 g.In()\r\n>                 g.P(\"if this.XXX_extensions == nil {\")\r\n>                 g.In()\r\n> -               g.P(\"this.XXX_extensions = make(map[int32]\", g.ProtoPkg,\r\n> \".Extension)\")\r\n> +               g.P(\"this.XXX_extensions = make(map[int32]\", g.Pkg[\"proto\"],\r\n> \".Extension)\")\r\n>                 g.Out()\r\n>                 g.P(\"}\")\r\n>                 g.P(\"return this.XXX_extensions\")\r\n> @@ -1495,7 +1499,7 @@\r\n>                 extName = *g.file.Package + \".\" + extName\r\n>         }\r\n>\r\n> -       g.P(\"var \", ccTypeName, \" = &\", g.ProtoPkg, \".ExtensionDesc{\")\r\n> +       g.P(\"var \", ccTypeName, \" = &\", g.Pkg[\"proto\"], \".ExtensionDesc{\")\r\n>         g.In()\r\n>         g.P(\"ExtendedType: (\", extendedType, \")(nil),\")\r\n>         g.P(\"ExtensionType: (\", fieldType, \")(nil),\")\r\n> @@ -1538,11 +1542,11 @@\r\n>         typeName := enum.TypeName()\r\n>         // The full type name, CamelCased.\r\n>         ccTypeName := CamelCaseSlice(typeName)\r\n> -       g.P(g.ProtoPkg+\".RegisterEnum(\", Quote(pkg+ccTypeName), \", \",\r\n> ccTypeName+\"_name, \", ccTypeName+\"_value)\")\r\n> +       g.P(g.Pkg[\"proto\"]+\".RegisterEnum(\", Quote(pkg+ccTypeName), \", \",\r\n> ccTypeName+\"_name, \", ccTypeName+\"_value)\")\r\n>  }\r\n>\r\n>  func (g *Generator) generateExtensionRegistration(ext *ExtensionDescriptor)\r\n> {\r\n> -       g.P(g.ProtoPkg+\".RegisterExtension(\", ext.DescName(), \")\")\r\n> +       g.P(g.Pkg[\"proto\"]+\".RegisterExtension(\", ext.DescName(), \")\")\r\n>  }\r\n>\r\n>  // And now lots of helper functions.\r\n> Index: protoc-gen-go/testdata/my_test/test.pb.go\r\n> ===================================================================\r\n> --- a/protoc-gen-go/testdata/my_test/test.pb.go\r\n> +++ b/protoc-gen-go/testdata/my_test/test.pb.go\r\n> @@ -4,8 +4,8 @@\r\n>  package my_test\r\n>\r\n>  import proto \"code.google.com/p/goprotobuf/proto\"\r\n> -import \"encoding/json\"\r\n> -import \"math\"\r\n> +import json \"encoding/json\"\r\n> +import math \"math\"\r\n>\r\n>  // discarding unused import multi2 \"multi/multi1.pb\"\r\n>\r\n> Index: protoc-gen-go/testdata/my_test/test.pb.go.golden\r\n> ===================================================================\r\n> --- a/protoc-gen-go/testdata/my_test/test.pb.go.golden\r\n> +++ b/protoc-gen-go/testdata/my_test/test.pb.go.golden\r\n> @@ -4,8 +4,8 @@\r\n>  package my_test\r\n>\r\n>  import proto \"code.google.com/p/goprotobuf/proto\"\r\n> -import \"encoding/json\"\r\n> -import \"math\"\r\n> +import json \"encoding/json\"\r\n> +import math \"math\"\r\n>\r\n>  // discarding unused import multi2 \"multi/multi1.pb\"\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-15 00:52:58.964580",
			"approval": true
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 6454155: goprotobuf: Register unique names for encoding/json and...",
	"created": "2012-08-15 00:50:34.037850",
	"patchsets": [
		1,
		2001,
		3,
		9001
	],
	"modified": "2012-08-15 00:54:11.991950",
	"closed": true,
	"issue": 6454155
}