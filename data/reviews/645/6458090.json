{
	"description": "reflect: faster FieldByName, FieldByNameFunc\n\nThe old code was a depth first graph traversal that could, under the\nright conditions, end up re-exploring the same subgraphs multiple\ntimes, once for each way to arrive at that subgraph at a given depth.\n\nThe new code uses a breadth first search to make sure that it only\nvisits each reachable embedded struct once.\n\nAlso add fast path for the trivial case.\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkFieldByName1         1321          187  -85.84%\nBenchmarkFieldByName2         6118         5186  -15.23%\nBenchmarkFieldByName3      8218553        42112  -99.49%",
	"cc": [
		"gri@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-06 20:31:50.095420",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode849\nsrc/pkg/reflect/type.go:849: // same depth. they annihilate each other and inhibit any possible match at a lower level.\ns/depth./depth,/\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode851\nsrc/pkg/reflect/type.go:851: func (t *structType) fieldByNameFunc(match func(string) bool) (result StructField, ok bool) {\nAny reason for not having this code be in FieldsByNameFunc directly? The signatures appear to be the same.\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode852\nsrc/pkg/reflect/type.go:852: next := []fieldScan{{typ: t, index: nil}}\njust leave index: nil away ?\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode855\nsrc/pkg/reflect/type.go:855: var nextCount map[*structType]int\nI don't understand this\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode857\nsrc/pkg/reflect/type.go:857: for len(next) > 0 {\nThe various sections in this loop should have comments - as it is, it's rather hard to understand.\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode874\nsrc/pkg/reflect/type.go:874: ntyp = toCommonType(f.typ)\nbefore perhaps:\n\n// anonymous field\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode925\nsrc/pkg/reflect/type.go:925: if tf.name != nil && *tf.name == name {\nif tf.name != nil {\n  if *tf.name == name {\n    return t.Field(i), true\n  }\n} else {\n  hasAnon = true\n}\n\n?",
			"disapproval": false,
			"date": "2012-08-06 22:06:30.700920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6458090/diff/14001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttp://codereview.appspot.com/6458090/diff/14001/src/pkg/reflect/type.go#newcode855\nsrc/pkg/reflect/type.go:855: // current lists the fields to visit in this depth level,\nOn 2012/09/04 23:25:46, gri wrote:\n> s/in/on/ ?\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/14001/src/pkg/reflect/type.go#newcode856\nsrc/pkg/reflect/type.go:856: // and next lists the fields in the next lower level.\nOn 2012/09/04 23:25:46, gri wrote:\n> s/in/on/ ?\n\nDone.",
			"disapproval": false,
			"date": "2012-09-05 13:34:04.419910",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=df382f6986cf ***\n\nreflect: faster FieldByName, FieldByNameFunc\n\nThe old code was a depth first graph traversal that could, under the\nright conditions, end up re-exploring the same subgraphs multiple\ntimes, once for each way to arrive at that subgraph at a given depth.\n\nThe new code uses a breadth first search to make sure that it only\nvisits each reachable embedded struct once.\n\nAlso add fast path for the trivial case.\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkFieldByName1         1321          187  -85.84%\nBenchmarkFieldByName2         6118         5186  -15.23%\nBenchmarkFieldByName3      8218553        42112  -99.49%\n\nR=gri, r\nCC=golang-dev\nhttp://codereview.appspot.com/6458090",
			"disapproval": false,
			"date": "2012-09-05 13:35:58.213590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done.\n\ngri?\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode854\nsrc/pkg/reflect/type.go:854: // current and next are work queues.\nOn 2012/08/31 23:01:56, r wrote:\n> on the next line s/C/c/ or fix it outright (what I'd do).\n> The current and next slices are work queues: current ... and next ...\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode864\nsrc/pkg/reflect/type.go:864: // then it annihilates itself and need not be considered at all when we do\nOn 2012/08/31 23:01:56, r wrote:\n> s/ do$//\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode881\nsrc/pkg/reflect/type.go:881: // It queues embedded fields found in 'next', for processing during the next\nOn 2012/08/31 23:01:56, r wrote:\n> s/It/The loop\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode882\nsrc/pkg/reflect/type.go:882: // iteration of the loop. The multiplicity of the 'current' field counts is recorded\nOn 2012/08/31 23:01:56, r wrote:\n> s/ of the loop//\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode889\nsrc/pkg/reflect/type.go:889: // this one can't be useful to us. Ignore it.\nOn 2012/08/31 23:01:56, r wrote:\n> s/this/so this/\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode926\nsrc/pkg/reflect/type.go:926: // embedded fields for processing with the next level.\nOn 2012/08/31 23:01:56, r wrote:\n> comment seems out of place.\n\nDone. The comment was describing what is after the if-continue statement, so it was the opposite of the condition.\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode946\nsrc/pkg/reflect/type.go:946: return\nOn 2012/08/31 23:01:56, r wrote:\n> break maybe?\n\nDone.",
			"disapproval": false,
			"date": "2012-09-04 22:53:25.761610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode849\nsrc/pkg/reflect/type.go:849: // same depth. they annihilate each other and inhibit any possible match at a lower level.\nOn 2012/08/06 22:06:30, gri wrote:\n> s/depth./depth,/\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode851\nsrc/pkg/reflect/type.go:851: func (t *structType) fieldByNameFunc(match func(string) bool) (result StructField, ok bool) {\nOn 2012/08/06 22:06:30, gri wrote:\n> Any reason for not having this code be in FieldsByNameFunc directly? The\n> signatures appear to be the same.\n\nDone. Probably the helper had a different signature before a cleanup.\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode852\nsrc/pkg/reflect/type.go:852: next := []fieldScan{{typ: t, index: nil}}\nOn 2012/08/06 22:06:30, gri wrote:\n> just leave index: nil away ?\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode857\nsrc/pkg/reflect/type.go:857: for len(next) > 0 {\nOn 2012/08/06 22:06:30, gri wrote:\n> The various sections in this loop should have comments - as it is, it's rather\n> hard to understand.\n\nSorry, not nearly enough comments. Added many.\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode874\nsrc/pkg/reflect/type.go:874: ntyp = toCommonType(f.typ)\nOn 2012/08/06 22:06:30, gri wrote:\n> before perhaps:\n> \n> // anonymous field\n\nDone.\n\nhttp://codereview.appspot.com/6458090/diff/4001/src/pkg/reflect/type.go#newcode925\nsrc/pkg/reflect/type.go:925: if tf.name != nil && *tf.name == name {\nOn 2012/08/06 22:06:30, gri wrote:\n> if tf.name != nil {\n>   if *tf.name == name {\n>     return t.Field(i), true\n>   }\n> } else {\n>   hasAnon = true\n> }\n> \n> ?\n\nDone.",
			"disapproval": false,
			"date": "2012-08-31 19:44:29.479500",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode854\nsrc/pkg/reflect/type.go:854: // current and next are work queues.\non the next line s/C/c/ or fix it outright (what I'd do).\nThe current and next slices are work queues: current ... and next ...\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode864\nsrc/pkg/reflect/type.go:864: // then it annihilates itself and need not be considered at all when we do\ns/ do$//\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode881\nsrc/pkg/reflect/type.go:881: // It queues embedded fields found in 'next', for processing during the next\ns/It/The loop\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode882\nsrc/pkg/reflect/type.go:882: // iteration of the loop. The multiplicity of the 'current' field counts is recorded\ns/ of the loop//\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode889\nsrc/pkg/reflect/type.go:889: // this one can't be useful to us. Ignore it.\ns/this/so this/\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode926\nsrc/pkg/reflect/type.go:926: // embedded fields for processing with the next level.\ncomment seems out of place.\n\nhttp://codereview.appspot.com/6458090/diff/9001/src/pkg/reflect/type.go#newcode946\nsrc/pkg/reflect/type.go:946: return\nbreak maybe?",
			"disapproval": false,
			"date": "2012-08-31 23:01:56.477900",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6458090/diff/14001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttp://codereview.appspot.com/6458090/diff/14001/src/pkg/reflect/type.go#newcode855\nsrc/pkg/reflect/type.go:855: // current lists the fields to visit in this depth level,\ns/in/on/ ?\n\nhttp://codereview.appspot.com/6458090/diff/14001/src/pkg/reflect/type.go#newcode856\nsrc/pkg/reflect/type.go:856: // and next lists the fields in the next lower level.\ns/in/on/ ?",
			"disapproval": false,
			"date": "2012-09-04 23:25:46.075470",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "yup\r\n",
			"disapproval": false,
			"date": "2012-09-05 21:10:39.946950",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow.\n\n% ~/go/misc/benchcmp {old,new}.txt | grep -E '(Rev|Temp)'\nBenchmarkRevcomp         1184480353   1023441113  -13.60%\nBenchmarkTemplate         473827066    191206681  -59.65%\nBenchmarkRevcomp             214.58       248.35    1.16x\nBenchmarkTemplate              4.10        10.15    2.48x",
			"disapproval": false,
			"date": "2012-09-05 20:59:01.935260",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6458090: reflect: faster FieldByName, FieldByNameFunc",
	"created": "2012-08-06 19:11:39.454040",
	"patchsets": [
		1,
		2001,
		4001,
		9001,
		14001,
		18001
	],
	"modified": "2012-09-05 20:59:02.102530",
	"closed": true,
	"issue": 6458090
}