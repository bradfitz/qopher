{
	"description": "exp/locale/collate: changed API of Builder to be more convenient\nfor dealing with CLDR files:\n- Add now taxes a list of indexes of colelems that are variables. Checking and\n  handling is now done by the Builder.  VariableTop is now also properly generated\n  using the Build method.\n- Introduced separate Builder, called Tailoring, for creating tailorings of root\n  table.  This clearly separates the functionality for building a table based on\n  weights (the allkeys* files) versus tables based on LDML XML files.\n- Tailorings are now added by two calls instead of one: SetAnchor and Insert.\n  This more closely reflects the structure of LDML side and simplifies the\n  implementation of both the client and library side.  It also preserves\n  some information that is otherwise hard to recover for the Builder.\n- Allow the LDML XML element extend to be passed to Insert.  This simplifies\n  both client and library implementation.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-07-29 12:28:36.352790",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but consider the true/false before/after thing.\n\nhttp://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/build/builder.go\nFile src/pkg/exp/locale/collate/build/builder.go (right):\n\nhttp://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/build/builder.go#newcode185\nsrc/pkg/exp/locale/collate/build/builder.go:185: func (t *Tailoring) SetAnchor(anchor string, before bool) error {\nit's hard to read with true and false, plus they seem backwards to me (true > valse but after > before). i suggest\nconst (\n before = true\n after = false\n)\nand use these names everywhere\n\nmaybe invert the sense, too.\n\nhttp://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/maketables.go\nFile src/pkg/exp/locale/collate/maketables.go (right):\n\nhttp://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/maketables.go#newcode36\nsrc/pkg/exp/locale/collate/maketables.go:36: func must(e error) {\nin this usage, 'must' isn't the right word: it reads like \"MUST ERROR\", as in \"MUST FIND FOOD\".\ni like fail on error but would settle for a simple \"check\".",
			"disapproval": false,
			"date": "2012-08-01 22:43:09.627060",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6454061/diff/4001/src/pkg/exp/locale/collate/build/builder.go\nFile src/pkg/exp/locale/collate/build/builder.go (right):\n\nhttp://codereview.appspot.com/6454061/diff/4001/src/pkg/exp/locale/collate/build/builder.go#newcode200\nsrc/pkg/exp/locale/collate/build/builder.go:200: // Examples: to add & z < \u00e4 to the Swedish locale given a Builder b:\ni don't understand the way this example is presented, or even what it's doing. what are the & and << and <<< saying?",
			"disapproval": false,
			"date": "2012-07-30 23:18:38.968600",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-01 08:29:54.436990",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b42e90a3d42f ***\n\nexp/locale/collate: changed API of Builder to be more convenient\nfor dealing with CLDR files:\n- Add now taxes a list of indexes of colelems that are variables. Checking and\n  handling is now done by the Builder.  VariableTop is now also properly generated\n  using the Build method.\n- Introduced separate Builder, called Tailoring, for creating tailorings of root\n  table.  This clearly separates the functionality for building a table based on\n  weights (the allkeys* files) versus tables based on LDML XML files.\n- Tailorings are now added by two calls instead of one: SetAnchor and Insert.\n  This more closely reflects the structure of LDML side and simplifies the\n  implementation of both the client and library side.  It also preserves\n  some information that is otherwise hard to recover for the Builder.\n- Allow the LDML XML element extend to be passed to Insert.  This simplifies\n  both client and library implementation.\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/6454061",
			"disapproval": false,
			"date": "2012-08-03 07:01:25.842000",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-02 19:31:19.186360",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-01 08:30:18.597260",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6454061/diff/4001/src/pkg/exp/locale/collate/build/builder.go\nFile src/pkg/exp/locale/collate/build/builder.go (right):\n\nhttp://codereview.appspot.com/6454061/diff/4001/src/pkg/exp/locale/collate/build/builder.go#newcode200\nsrc/pkg/exp/locale/collate/build/builder.go:200: // Examples: to add & z < \u00e4 to the Swedish locale given a Builder b:\nThis is a notation used for specifying orderings, defined in http://unicode.org/reports/tr35/.\n\nI replaced the notation with a description of what it does.\n\nOn 2012/07/30 23:18:39, r wrote:\n> i don't understand the way this example is presented, or even what it's doing.\n> what are the & and << and <<< saying?",
			"disapproval": false,
			"date": "2012-08-01 08:30:29.147510",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-08-02 19:45:03.390310",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/build/builder.go\nFile src/pkg/exp/locale/collate/build/builder.go (right):\n\nhttp://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/build/builder.go#newcode185\nsrc/pkg/exp/locale/collate/build/builder.go:185: func (t *Tailoring) SetAnchor(anchor string, before bool) error {\nUsing before is far more rare than using after. For most languages, no \"before\" is needed.  I originally wanted to have a separate SetAnchorBefore(), but decided against it to allow writing a short piece of code like  t.SetAnchor(x.Value, x.Before != \"\").  Using constants makes using this shorthand trickier.  So in that case, I might as well have have two methods.  I agree that the resulting code is easier to read, albeit longer.\n\nOn 2012/08/01 22:43:09, r wrote:\n> it's hard to read with true and false, plus they seem backwards to me (true >\n> valse but after > before). i suggest\n> const (\n>  before = true\n>  after = false\n> )\n> and use these names everywhere\n> \n> maybe invert the sense, too.\n\nhttp://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/maketables.go\nFile src/pkg/exp/locale/collate/maketables.go (right):\n\nhttp://codereview.appspot.com/6454061/diff/3021/src/pkg/exp/locale/collate/maketables.go#newcode36\nsrc/pkg/exp/locale/collate/maketables.go:36: func must(e error) {\nnow failOnError.\n\nOn 2012/08/01 22:43:09, r wrote:\n> in this usage, 'must' isn't the right word: it reads like \"MUST ERROR\", as in\n> \"MUST FIND FOOD\".\n> i like fail on error but would settle for a simple \"check\".",
			"disapproval": false,
			"date": "2012-08-02 19:30:28.118650",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 6454061: exp/locale/collate: changed API of Builder to be more c...",
	"created": "2012-07-29 12:26:39.720150",
	"patchsets": [
		1,
		2001,
		4001,
		6002,
		7002,
		10003,
		3021,
		10024,
		13003
	],
	"modified": "2012-08-03 07:01:27.351620",
	"closed": true,
	"issue": 6454061
}