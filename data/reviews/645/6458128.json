{
	"description": "net: add TCP benchmarks\nCurrent results on linux_amd64, 8 HT cores @2.4GHz:\nBenchmarkTCPOneShot\t   10000\t    194037 ns/op\nBenchmarkTCPOneShot-2\t   20000\t     93641 ns/op\nBenchmarkTCPOneShot-4\t   20000\t     94039 ns/op\nBenchmarkTCPOneShot-8\t   20000\t     94667 ns/op\nBenchmarkTCPOneShot-16\t   10000\t    301924 ns/op\nBenchmarkTCPOneShotTimeout\t   10000\t    193264 ns/op\nBenchmarkTCPOneShotTimeout-2\t   20000\t     98247 ns/op\nBenchmarkTCPOneShotTimeout-4\t   20000\t     94442 ns/op\nBenchmarkTCPOneShotTimeout-8\t   20000\t     95297 ns/op\nBenchmarkTCPOneShotTimeout-16\t   10000\t    307970 ns/op\nBenchmarkTCPPersistent\t   50000\t     52050 ns/op\nBenchmarkTCPPersistent-2\t  100000\t     29452 ns/op\nBenchmarkTCPPersistent-4\t  100000\t     28823 ns/op\nBenchmarkTCPPersistent-8\t   50000\t     30473 ns/op\nBenchmarkTCPPersistent-16\t   10000\t    311777 ns/op\nBenchmarkTCPPersistentTimeout\t   50000\t     32574 ns/op\nBenchmarkTCPPersistentTimeout-2\t   50000\t     29723 ns/op\nBenchmarkTCPPersistentTimeout-4\t  100000\t     28592 ns/op\nBenchmarkTCPPersistentTimeout-8\t  100000\t     28997 ns/op\nBenchmarkTCPPersistentTimeout-16\t   10000\t    314354 ns/op",
	"cc": [
		"golang-dev@googlegroups.com",
		"alex.brainman@gmail.com",
		"dave@cheney.net",
		"mikioh.mikioh@gmail.com",
		"r@golang.org",
		"iant@google.com",
		"bradfitz@google.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-14 21:32:41.228580",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go#newcode5\nsrc/pkg/net/tcp_test.go:5: package net_test\nwhy not package net?\n\nhttp://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go#newcode8\nsrc/pkg/net/tcp_test.go:8: . \"net\"\nd",
			"disapproval": false,
			"date": "2012-08-16 14:33:50.460310",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"bradfitz@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you add the benchmark results on your system to the change description?\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode53\nsrc/pkg/net/tcp_test.go:53: for read := 0; read != len(buf); {\nCan you use\n    _, err := ioutil.ReadAll(c, buf)\n    if err != nil {\n        b.Logf(\"Readall failed: %v\", err)\n        return false\n    }\n    return true\n?\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode115\nsrc/pkg/net/tcp_test.go:115: for i := 0; i < cap(sem); i++ {\ns/cap/len/\nit's the same value, and len is more idiomatic.",
			"disapproval": false,
			"date": "2012-08-20 15:13:35.667140",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"bradfitz@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=baad5c0949fd ***\n\nnet: add TCP benchmarks\nCurrent results on linux_amd64, 8 HT cores @2.4GHz:\nBenchmarkTCPOneShot\t   10000\t    194037 ns/op\nBenchmarkTCPOneShot-2\t   20000\t     93641 ns/op\nBenchmarkTCPOneShot-4\t   20000\t     94039 ns/op\nBenchmarkTCPOneShot-8\t   20000\t     94667 ns/op\nBenchmarkTCPOneShot-16\t   10000\t    301924 ns/op\nBenchmarkTCPOneShotTimeout\t   10000\t    193264 ns/op\nBenchmarkTCPOneShotTimeout-2\t   20000\t     98247 ns/op\nBenchmarkTCPOneShotTimeout-4\t   20000\t     94442 ns/op\nBenchmarkTCPOneShotTimeout-8\t   20000\t     95297 ns/op\nBenchmarkTCPOneShotTimeout-16\t   10000\t    307970 ns/op\nBenchmarkTCPPersistent\t   50000\t     52050 ns/op\nBenchmarkTCPPersistent-2\t  100000\t     29452 ns/op\nBenchmarkTCPPersistent-4\t  100000\t     28823 ns/op\nBenchmarkTCPPersistent-8\t   50000\t     30473 ns/op\nBenchmarkTCPPersistent-16\t   10000\t    311777 ns/op\nBenchmarkTCPPersistentTimeout\t   50000\t     32574 ns/op\nBenchmarkTCPPersistentTimeout-2\t   50000\t     29723 ns/op\nBenchmarkTCPPersistentTimeout-4\t  100000\t     28592 ns/op\nBenchmarkTCPPersistentTimeout-8\t  100000\t     28997 ns/op\nBenchmarkTCPPersistentTimeout-16\t   10000\t    314354 ns/op\n\nR=golang-dev, alex.brainman, dave, mikioh.mikioh, r, iant, bradfitz, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6458128",
			"disapproval": false,
			"date": "2012-08-20 17:28:40.034790",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"bradfitz@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but please do the rename\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode32\nsrc/pkg/net/tcp_test.go:32: conc := runtime.GOMAXPROCS(-1) * 16\nwith const, conns, Conn and conc this is a bit confusing.\nhow about s/conc/numConcurrent/",
			"disapproval": false,
			"date": "2012-08-20 17:18:47.016590",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/16 14:33:50, r wrote:\n> http://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go\n> File src/pkg/net/tcp_test.go (right):\n> \n> http://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go#newcode5\n> src/pkg/net/tcp_test.go:5: package net_test\n> why not package net?\n> \n> http://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go#newcode8\n> src/pkg/net/tcp_test.go:8: . \"net\"\n> d\n\nmikio referred to some problems with this approach above:\n\"because this CL is new test stuff and package namespace \nisolation is useful to avoid what I did mess up with net \npackage before go 1 release; the hidden api pollution bug\nreported test pass but it was broken, ouch.\"",
			"disapproval": false,
			"date": "2012-08-16 14:42:08.912900",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "if possible I would like to see this as tcp_test.go\nin net_test package like example_test.go.",
			"disapproval": false,
			"date": "2012-08-15 09:07:49.873810",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think I need a cheat-sheet:\r\n\r\nbuild fix -> commit! watch for buildbot\r\n\r\ncritical bug fix with with lots of test failures -> commit! watch for\r\nbuildbot\r\n\r\ntouches critical piece (runtime) -> wait for LGTM from appropriate member\r\nof core team\r\n\r\nnormal patch -> reviewed by a knowledgeable person, tests pass\r\n\r\ncontroversial change -> drop patch, discuss on the list\r\n\r\n\r\nDoes it look correct? Any comments?\r\n\r\n\r\nOn Mon, Aug 20, 2012 at 1:44 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> OK, I thought that I *need* because Rob said \"for critical pieces like\r\n> this please wait for an LGTM from the core team\". But I guess this does\r\n> not qualify as \"critical piece\" (that was patch to runtime). Committing.\r\n>\r\n>\r\n>\r\n> On Mon, Aug 20, 2012 at 1:33 PM, Brad Fitzpatrick <bradfitz@google.com>wrote:\r\n>\r\n>> Need? Or want?\r\n>>\r\n>> To clarify: no such process exists. If you think the change is correct\r\n>> and it's been reviewed by a knowledgeable person in the area, and it's not\r\n>> a controversial change with known opponents, and if the tests all pass,\r\n>> just submit. It can always be reverted if there are objections.\r\n>>\r\n>> But if you're not comfortable yet, ask somebody specifically who could\r\n>> LGTM and make you comfortable. But \"core team\" has no definition and it's\r\n>> quite likely that there are several of us paid by Google to work on Go\r\n>> full-time could give you an LGTM that still didn't increase your confidence.\r\n>>  On Aug 20, 2012 7:18 PM, <dvyukov@google.com> wrote:\r\n>>\r\n>>> ping\r\n>>> I need approval from core team\r\n>>>\r\n>>> http://codereview.appspot.com/**6458128/<http://codereview.appspot.com/6458128/>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 09:53:54.976550",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nFeel free to ignore my suggestion.\n\nAlex\n\nhttp://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go#newcode45\nsrc/pkg/net/tcp_test.go:45: sendMsg := func(c Conn, buf []byte) bool {\n\tsendMsg := func(c Conn) bool {\n\t\tn, err := c.Write(make([]byte, msgLen))\n\t\tif n != msgLen || err != nil {\n\t\t\tb.Logf(\"Write failed: %v\", err)\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\trecvMsg := func(c Conn) bool {\n\t\tn, err := io.CopyN(ioutil.Discard, c, msgLen)\n\t\tif n != msgLen || err != nil {\n\t\t\tb.Logf(\"Read failed: %v\", err)\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}",
			"disapproval": false,
			"date": "2012-08-16 00:57:33.788300",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 15, 2012 at 1:07 PM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> if possible I would like to see this as tcp_test.go\r\n> in net_test package like example_test.go.\r\n>\r\n>\r\nWhy?\r\n",
			"disapproval": false,
			"date": "2012-08-15 09:51:39.378830",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go#newcode5\nsrc/pkg/net/tcp_test.go:5: package net_test\nOn 2012/08/16 14:33:50, r wrote:\n> why not package net?\n\nDone.\n\nhttp://codereview.appspot.com/6458128/diff/14002/src/pkg/net/tcp_test.go#newcode8\nsrc/pkg/net/tcp_test.go:8: . \"net\"\nOn 2012/08/16 14:33:50, r wrote:\n> d\n\nDone.",
			"disapproval": false,
			"date": "2012-08-17 17:05:00.578260",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Need? Or want?\r\n\r\nTo clarify: no such process exists. If you think the change is correct and\r\nit's been reviewed by a knowledgeable person in the area, and it's not a\r\ncontroversial change with known opponents, and if the tests all pass, just\r\nsubmit. It can always be reverted if there are objections.\r\n\r\nBut if you're not comfortable yet, ask somebody specifically who could LGTM\r\nand make you comfortable. But \"core team\" has no definition and it's quite\r\nlikely that there are several of us paid by Google to work on Go full-time\r\ncould give you an LGTM that still didn't increase your confidence.\r\n On Aug 20, 2012 7:18 PM, <dvyukov@google.com> wrote:\r\n\r\n> ping\r\n> I need approval from core team\r\n>\r\n> http://codereview.appspot.com/**6458128/<http://codereview.appspot.com/6458128/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 09:33:44.191530",
			"approval": true
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Rob might then count as a \"known opponent\".\r\n\r\nYou could pester him for an LGTM or a referral.\r\n On Aug 20, 2012 7:44 PM, \"Dmitry Vyukov\" <dvyukov@google.com> wrote:\r\n\r\n> OK, I thought that I *need* because Rob said \"for critical pieces like\r\n> this please wait for an LGTM from the core team\". But I guess this does\r\n> not qualify as \"critical piece\" (that was patch to runtime). Committing.\r\n>\r\n>\r\n>\r\n> On Mon, Aug 20, 2012 at 1:33 PM, Brad Fitzpatrick <bradfitz@google.com>wrote:\r\n>\r\n>> Need? Or want?\r\n>>\r\n>> To clarify: no such process exists. If you think the change is correct\r\n>> and it's been reviewed by a knowledgeable person in the area, and it's not\r\n>> a controversial change with known opponents, and if the tests all pass,\r\n>> just submit. It can always be reverted if there are objections.\r\n>>\r\n>> But if you're not comfortable yet, ask somebody specifically who could\r\n>> LGTM and make you comfortable. But \"core team\" has no definition and it's\r\n>> quite likely that there are several of us paid by Google to work on Go\r\n>> full-time could give you an LGTM that still didn't increase your confidence.\r\n>>  On Aug 20, 2012 7:18 PM, <dvyukov@google.com> wrote:\r\n>>\r\n>>> ping\r\n>>> I need approval from core team\r\n>>>\r\n>>> http://codereview.appspot.com/**6458128/<http://codereview.appspot.com/6458128/>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 09:51:21.575700",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"bradfitz@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Who are you? And what have you done to Ian? :)\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode53\nsrc/pkg/net/tcp_test.go:53: for read := 0; read != len(buf); {\nOn 2012/08/20 15:13:35, iant wrote:\n> Can you use\n>     _, err := ioutil.ReadAll(c, buf)\n>     if err != nil {\n>         b.Logf(\"Readall failed: %v\", err)\n>         return false\n>     }\n>     return true\n> ?\n\nReadAll reads until EOF, and I just want to read 1 fixed-length message. The conn won't be closed until I reply to it.\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode115\nsrc/pkg/net/tcp_test.go:115: for i := 0; i < cap(sem); i++ {\nOn 2012/08/20 15:13:35, iant wrote:\n> s/cap/len/\n> it's the same value, and len is more idiomatic.\n\ncap and len are not the same. cap is chan buffer size, while len is current number of messages. if len(sem)==0, then the loop will exit immidiately.",
			"disapproval": false,
			"date": "2012-08-20 16:41:33.982570",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-08-16 09:37:00.424350",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Aug 18, 2012 at 11:53 AM, <alex.brainman@gmail.com> wrote:\r\n\r\n> I saw the same thing when I used b.Fatalf() in a child goroutine. ...\r\n>>\r\n>\r\n> But, you are not using b.Fatalf, but b.Log and return, so I do not think\r\n> so. My problem is different. I could see benchmark trying to run 5000\r\n> connections. I can see first ~3500 succeed. Then I could see Accept is\r\n> not fired for any sequential connection, while correspondent Dial\r\n> succeed. So ultimately, I end up with cons client connections that are\r\n> started and stuck on io on client side, but no correspondent server\r\n> threads, because Accepts didn't fire. Not sure why yet.\r\n>\r\n>\r\n>  Is it possible to collect stack traces in Windows (kill -6)?\r\n>>\r\n>\r\n> No such thing on Windows: you could just kill a process (it would not\r\n> know what hit him), or, alternatively, you could send it a \"ctrl+break\",\r\n> which will start a new thread and run a function of your choice (it\r\n> exits process by default).\r\n>\r\n> But, luckily, \"go test\" has -timeout parameter, that does the same job\r\n> perfectly.\r\n>\r\n>\r\nIsn't it the case that it is just very slow? Try running with\r\n-benchtime=.01/.1/.2/.3...\r\n",
			"disapproval": false,
			"date": "2012-08-18 08:18:54.142710",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"bradfitz@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode32\nsrc/pkg/net/tcp_test.go:32: conc := runtime.GOMAXPROCS(-1) * 16\nOn 2012/08/20 17:18:47, r wrote:\n> with const, conns, Conn and conc this is a bit confusing.\n> how about s/conc/numConcurrent/\n\nDone.",
			"disapproval": false,
			"date": "2012-08-20 17:27:28.111810",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Aug 20, 2012 at 9:41 AM,  <dvyukov@google.com> wrote:\r\n> Who are you? And what have you done to Ian? :)\r\n\r\nSigh, sorry about that.\r\n\r\nIan\r\n\r\n\r\n> http://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go\r\n> File src/pkg/net/tcp_test.go (right):\r\n>\r\n> http://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode53\r\n> src/pkg/net/tcp_test.go:53: for read := 0; read != len(buf); {\r\n> On 2012/08/20 15:13:35, iant wrote:\r\n>>\r\n>> Can you use\r\n>>      _, err := ioutil.ReadAll(c, buf)\r\n>>      if err != nil {\r\n>>          b.Logf(\"Readall failed: %v\", err)\r\n>>          return false\r\n>>      }\r\n>>      return true\r\n>> ?\r\n>\r\n>\r\n> ReadAll reads until EOF, and I just want to read 1 fixed-length message.\r\n> The conn won't be closed until I reply to it.\r\n>\r\n>\r\n> http://codereview.appspot.com/6458128/diff/12004/src/pkg/net/tcp_test.go#newcode115\r\n> src/pkg/net/tcp_test.go:115: for i := 0; i < cap(sem); i++ {\r\n> On 2012/08/20 15:13:35, iant wrote:\r\n>>\r\n>> s/cap/len/\r\n>> it's the same value, and len is more idiomatic.\r\n>\r\n>\r\n> cap and len are not the same. cap is chan buffer size, while len is\r\n> current number of messages. if len(sem)==0, then the loop will exit\r\n> immidiately.\r\n>\r\n> http://codereview.appspot.com/6458128/\r\n",
			"disapproval": false,
			"date": "2012-08-20 18:30:05.002590",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Why?\n\nbecause this CL is new test stuff and package namespace \nisolation is useful to avoid what I did mess up with net \npackage before go 1 release; the hidden api pollution bug\nreported test pass but it was broken, ouch.",
			"disapproval": false,
			"date": "2012-08-15 11:04:40.994420",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/18 08:18:54, dvyukov wrote:\n> >\n> Isn't it the case that it is just very slow? ...\n\nWhat is slow? First ~3500 connections happens nearly instantaneous. Then it just stops.\n\n> ... Try running with\n> -benchtime=.01/.1/.2/.3...\n\nI did. It runs OK with .01 and .1. Anything more, it stops.\n\nI tried this test on a different computer (different version of Windows), and it runs OK. So I am less concerned - perhaps some versions of Windows have built-in restriction on a number of TCP connection they can accept per second, or something of that kind.\n\nAlex",
			"disapproval": false,
			"date": "2012-08-20 00:10:13.304460",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Aug 17, 2012 at 12:40 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Fri, Aug 17, 2012 at 3:47 AM, <mikioh.mikioh@gmail.com> wrote:\r\n>>\r\n>> apart from this CL, is there any side effect on tests being\r\n>> in a separate package?\r\n>>\r\n>\r\n> I would like to ask the same question - what is the difference between 2\r\n> options? When I choose one or another?\r\n\r\nThere is no huge difference.  If you want the test to call a\r\nnon-exported function, then the test must be in the same package.  If\r\nthe test imports some other package, and that package imports the\r\npackage that you are testing, then the test must not be in the same\r\npackage, to avoid introducing an import loop.  Otherwise, it doesn't\r\nmatter.  Conventionally tests are put in the package they are testing,\r\nbut they can be moved out if necessary or appropriate.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-08-17 13:51:42.934420",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Aug 17, 2012 at 5:51 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n\r\n> On Fri, Aug 17, 2012 at 12:40 AM, Dmitry Vyukov <dvyukov@google.com>\r\n> wrote:\r\n> > On Fri, Aug 17, 2012 at 3:47 AM, <mikioh.mikioh@gmail.com> wrote:\r\n> >>\r\n> >> apart from this CL, is there any side effect on tests being\r\n> >> in a separate package?\r\n> >>\r\n> >\r\n> > I would like to ask the same question - what is the difference between 2\r\n> > options? When I choose one or another?\r\n>\r\n> There is no huge difference.  If you want the test to call a\r\n> non-exported function, then the test must be in the same package.  If\r\n> the test imports some other package, and that package imports the\r\n> package that you are testing, then the test must not be in the same\r\n> package, to avoid introducing an import loop.  Otherwise, it doesn't\r\n> matter.  Conventionally tests are put in the package they are testing,\r\n> but they can be moved out if necessary or appropriate.\r\n>\r\n>\r\nThanks. I see.\r\nWhat may you say about the following approach (that is used in several std\r\npackages)? Add export_test.go file that exports only what is necessary for\r\ntests, and then put tests into foo_test package?\r\nAlso, for packages like sync or md5 tests do not need any internal guts,\r\nthey just want to test public interfaces. Isn't the default to put tests\r\ninto foo_test package for such packages?\r\n",
			"disapproval": false,
			"date": "2012-08-17 13:59:33.034160",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK, I thought that I *need* because Rob said \"for critical pieces like this\r\nplease wait for an LGTM from the core team\". But I guess this does\r\nnot qualify as \"critical piece\" (that was patch to runtime). Committing.\r\n\r\n\r\n\r\nOn Mon, Aug 20, 2012 at 1:33 PM, Brad Fitzpatrick <bradfitz@google.com>wrote:\r\n\r\n> Need? Or want?\r\n>\r\n> To clarify: no such process exists. If you think the change is correct and\r\n> it's been reviewed by a knowledgeable person in the area, and it's not a\r\n> controversial change with known opponents, and if the tests all pass, just\r\n> submit. It can always be reverted if there are objections.\r\n>\r\n> But if you're not comfortable yet, ask somebody specifically who could\r\n> LGTM and make you comfortable. But \"core team\" has no definition and it's\r\n> quite likely that there are several of us paid by Google to work on Go\r\n> full-time could give you an LGTM that still didn't increase your confidence.\r\n>  On Aug 20, 2012 7:18 PM, <dvyukov@google.com> wrote:\r\n>\r\n>> ping\r\n>> I need approval from core team\r\n>>\r\n>> http://codereview.appspot.com/**6458128/<http://codereview.appspot.com/6458128/>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 09:44:55.702840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"bradfitz@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/20 15:13:35, iant wrote:\n> Can you add the benchmark results on your system to the change description?\n\nDone.\nUsing timeouts currently does not affect timings. But I included such becnhmarks because timeouts may be handled differently and it's important control overheads.\nIt scales not particularly well beyond 2 cores (of course it's highly synthetic benchmark, real workloads must scale somewhat better).\nThere is a strange spike at 16 procs, I see it on all benchmarks that use >100 network connections. I start suspecting settings of my OS.",
			"disapproval": false,
			"date": "2012-08-20 17:24:38.803900",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go\nFile src/pkg/net/net_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode209\nsrc/pkg/net/net_test.go:209: sendMsg := func(c Conn, buf [msgLen]byte) bool {\nOn 2012/08/15 06:27:16, brainman wrote:\n> You are not passing slice here, but array itself. Are you sure you want to do\n> that? These are quite large. And since you not doing anything else with these at\n> the call site, you could allocate them right inside this function. That is\n> unless you worry about memory allocations here.\n\nOops. Done.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode217\nsrc/pkg/net/net_test.go:217: recvMsg := func(c Conn, buf [msgLen]byte) bool {\nOn 2012/08/15 06:27:16, brainman wrote:\n> Same problem with buf as before.\n\nDone.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode219\nsrc/pkg/net/net_test.go:219: n, err := c.Read(buf[:])\nOn 2012/08/15 06:27:16, brainman wrote:\n> io/ioutil.ReadFull ?\n\nIt will read until EOF, but I need to read 1 message.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode231\nsrc/pkg/net/net_test.go:231: }\nOn 2012/08/15 06:27:16, brainman wrote:\n> defer ln.Close()\n> so you do not need to remember\n\nDone.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode240\nsrc/pkg/net/net_test.go:240: go func(c Conn) {\nOn 2012/08/15 06:27:16, brainman wrote:\n> defer c.Close()\n> so you do not need to remember\n\nDone.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode254\nsrc/pkg/net/net_test.go:254: sem := make(chan bool, conc)\nOn 2012/08/15 06:52:25, dfc wrote:\n> I would prefer to see a WaitGroup used here. \n\nThe chan used as semaphore to limit number of concurrent requests, WaitGroup won't do.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode258\nsrc/pkg/net/net_test.go:258: go func() {\nOn 2012/08/15 06:27:16, brainman wrote:\n> defer func(){<-sem}()\n> so you do not need to remember\n\nDone.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode264\nsrc/pkg/net/net_test.go:264: }\nOn 2012/08/15 06:27:16, brainman wrote:\n> defer c.Close()\n> so you do not need to remember\n\nDone.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode281\nsrc/pkg/net/net_test.go:281: ln.Close()\nOn 2012/08/15 06:52:25, dfc wrote:\n> defer ln.Close()\n\nDone.",
			"disapproval": false,
			"date": "2012-08-15 09:54:12.654840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Some minor comments which you should feel free to ignore.\n\nhttp://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go\nFile src/pkg/net/net_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go#newcode197\nsrc/pkg/net/net_test.go:197: conc := runtime.GOMAXPROCS(-1) * 16\nShould the multiple be part of the function signature? Does varying it reveal any interesting results ?\n\nhttp://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go#newcode244\nsrc/pkg/net/net_test.go:244: c.SetDeadline(time.Now().Add(time.Hour)) // Not intended to fire.\nMaybe compute the deadline once, outside this function, then reuse below. While cheap, this would avoid a number of (virtual) syscalls to gettimeofday(2)\n\nhttp://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go#newcode270\nsrc/pkg/net/net_test.go:270: c.SetDeadline(time.Now().Add(time.Hour)) // Not intended to fire.\nSee above.",
			"disapproval": false,
			"date": "2012-08-15 10:01:00.797150",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/15 11:04:40, mikio wrote:\n> > Why?\n> \n> because this CL is new test stuff and package namespace \n> isolation is useful to avoid what I did mess up with net \n> package before go 1 release; the hidden api pollution bug\n> reported test pass but it was broken, ouch.\n\nAh, I see, it was in net package.\nDone.",
			"disapproval": false,
			"date": "2012-08-15 11:20:15.844270",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go\nFile src/pkg/net/net_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go#newcode197\nsrc/pkg/net/net_test.go:197: conc := runtime.GOMAXPROCS(-1) * 16\nOn 2012/08/15 10:01:00, dfc wrote:\n> Should the multiple be part of the function signature? Does varying it reveal\n> any interesting results ?\n\nIt does reveal. But I do not want to add more permutations. When I need to test other permutations of parameters, I just edit source.\n\nhttp://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go#newcode244\nsrc/pkg/net/net_test.go:244: c.SetDeadline(time.Now().Add(time.Hour)) // Not intended to fire.\nOn 2012/08/15 10:01:00, dfc wrote:\n> Maybe compute the deadline once, outside this function, then reuse below. While\n> cheap, this would avoid a number of (virtual) syscalls to gettimeofday(2)\n\nWell, it is how it is intended to be used in real life. So let it be this way. If time.Now() shows in profile, then that's what needs to be fixed in the first place.\n\nhttp://codereview.appspot.com/6458128/diff/2004/src/pkg/net/net_test.go#newcode270\nsrc/pkg/net/net_test.go:270: c.SetDeadline(time.Now().Add(time.Hour)) // Not intended to fire.\nOn 2012/08/15 10:01:00, dfc wrote:\n> See above.\n-",
			"disapproval": false,
			"date": "2012-08-15 11:25:22.435500",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand this comment, but in any case your CL adds no new\r\ndependencies to the net tests so it can't require being in a separate\r\npackage from the rest of the test suite. The example_test.go file is\r\nin net_test so it can have cut-and-paste examples that work outside\r\nthe net package.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-08-16 21:59:16.184160",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/15 06:27:16, brainman wrote:\n> Unfortunately some of these tests just hang on my Windows pc, and I do not know\n> why. But feel free to submit.\n\nI saw the same thing when I used b.Fatalf() in a child goroutine. But now I think it should be immune to such things...\nIs it possible to collect stack traces in Windows (kill -6)?",
			"disapproval": false,
			"date": "2012-08-17 17:11:38.951910",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/17 17:11:38, dvyukov wrote:\n> \n> I saw the same thing when I used b.Fatalf() in a child goroutine. ...\n\nBut, you are not using b.Fatalf, but b.Log and return, so I do not think so. My problem is different. I could see benchmark trying to run 5000 connections. I can see first ~3500 succeed. Then I could see Accept is not fired for any sequential connection, while correspondent Dial succeed. So ultimately, I end up with cons client connections that are started and stuck on io on client side, but no correspondent server threads, because Accepts didn't fire. Not sure why yet.\n\n> Is it possible to collect stack traces in Windows (kill -6)?\n\nNo such thing on Windows: you could just kill a process (it would not know what hit him), or, alternatively, you could send it a \"ctrl+break\", which will start a new thread and run a function of your choice (it exits process by default).\n\nBut, luckily, \"go test\" has -timeout parameter, that does the same job perfectly.\n\nAlex",
			"disapproval": false,
			"date": "2012-08-18 07:53:16.558880",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I tried this test on a different computer (different version of\r\n> Windows), and it runs OK. So I am less concerned - perhaps some versions\r\n> of Windows have built-in restriction on a number of TCP connection they\r\n> can accept per second, or something of that kind.\r\n\r\nI think that is very likely, it may be intentional or accidental, but\r\nnot unexpected.\r\n",
			"disapproval": false,
			"date": "2012-08-20 00:11:38.206790",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My only objection (which prompted my original reply) is the use of the\r\nphrase \"core team\".  There are many smart people on this mailing list paid\r\nby many different companies.  All that matters is getting an LGTM from an\r\nowner of the code you're hacking and that there's consensus (or at least no\r\nstrong opposition) before submitting a change.\r\n\r\n[Un]fortunately, there is no list of who \"owns\" what code.  You just have\r\nto know, or look at commit history for that file/directory.  Until you know\r\n(or if you don't have submit access), ping the mailing list for LGTMs until\r\nsomebody submits it for you.\r\n\r\nI have no opinions about this CL itself, other than the same general fear I\r\nhave about net/http's possible TCP resource (port?) exhaustion problems on\r\ncertain operating system(s).  But ignore me here.  Wait for an LGTM from an\r\nowner.  For net stuff I always think of rsc and iant and mikioh.\r\n\r\n\r\nOn Mon, Aug 20, 2012 at 7:53 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> I think I need a cheat-sheet:\r\n>\r\n> build fix -> commit! watch for buildbot\r\n>\r\n> critical bug fix with with lots of test failures -> commit! watch for\r\n> buildbot\r\n>\r\n> touches critical piece (runtime) -> wait for LGTM from appropriate member\r\n> of core team\r\n>\r\n> normal patch -> reviewed by a knowledgeable person, tests pass\r\n>\r\n> controversial change -> drop patch, discuss on the list\r\n>\r\n>\r\n> Does it look correct? Any comments?\r\n>\r\n>\r\n> On Mon, Aug 20, 2012 at 1:44 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>\r\n>> OK, I thought that I *need* because Rob said \"for critical pieces like\r\n>> this please wait for an LGTM from the core team\". But I guess this does\r\n>> not qualify as \"critical piece\" (that was patch to runtime). Committing.\r\n>>\r\n>>\r\n>>\r\n>> On Mon, Aug 20, 2012 at 1:33 PM, Brad Fitzpatrick <bradfitz@google.com>wrote:\r\n>>\r\n>>> Need? Or want?\r\n>>>\r\n>>> To clarify: no such process exists. If you think the change is correct\r\n>>> and it's been reviewed by a knowledgeable person in the area, and it's not\r\n>>> a controversial change with known opponents, and if the tests all pass,\r\n>>> just submit. It can always be reverted if there are objections.\r\n>>>\r\n>>> But if you're not comfortable yet, ask somebody specifically who could\r\n>>> LGTM and make you comfortable. But \"core team\" has no definition and it's\r\n>>> quite likely that there are several of us paid by Google to work on Go\r\n>>> full-time could give you an LGTM that still didn't increase your confidence.\r\n>>>  On Aug 20, 2012 7:18 PM, <dvyukov@google.com> wrote:\r\n>>>\r\n>>>> ping\r\n>>>> I need approval from core team\r\n>>>>\r\n>>>> http://codereview.appspot.com/**6458128/<http://codereview.appspot.com/6458128/>\r\n>>>>\r\n>>>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 10:29:09.157470",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Unfortunately some of these tests just hang on my Windows pc, and I do not know why. But feel free to submit.\n\nAlex\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go\nFile src/pkg/net/net_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode209\nsrc/pkg/net/net_test.go:209: sendMsg := func(c Conn, buf [msgLen]byte) bool {\nYou are not passing slice here, but array itself. Are you sure you want to do that? These are quite large. And since you not doing anything else with these at the call site, you could allocate them right inside this function. That is unless you worry about memory allocations here.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode217\nsrc/pkg/net/net_test.go:217: recvMsg := func(c Conn, buf [msgLen]byte) bool {\nSame problem with buf as before.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode219\nsrc/pkg/net/net_test.go:219: n, err := c.Read(buf[:])\nio/ioutil.ReadFull ?\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode231\nsrc/pkg/net/net_test.go:231: }\ndefer ln.Close()\nso you do not need to remember\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode240\nsrc/pkg/net/net_test.go:240: go func(c Conn) {\ndefer c.Close()\nso you do not need to remember\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode258\nsrc/pkg/net/net_test.go:258: go func() {\ndefer func(){<-sem}()\nso you do not need to remember\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode264\nsrc/pkg/net/net_test.go:264: }\ndefer c.Close()\nso you do not need to remember",
			"disapproval": false,
			"date": "2012-08-15 06:27:16.203130",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Aug 17, 2012 at 3:47 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On 2012/08/16 21:59:16, r wrote:\r\n>\r\n>  but in any case your CL adds no new\r\n>> dependencies to the net tests so it can't require being in a separate\r\n>> package from the rest of the test suite.\r\n>>\r\n>\r\n> apart from this CL, is there any side effect on tests being\r\n> in a separate package?\r\n>\r\n>\r\nI would like to ask the same question - what is the difference between 2\r\noptions? When I choose one or another?\r\n",
			"disapproval": false,
			"date": "2012-08-17 07:40:27.769720",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\nI need approval from core team",
			"disapproval": false,
			"date": "2012-08-20 09:18:50.689430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM, but I think the definition of normal patch needs some\r\nclarification. I have always waited for an Author's LGTM.\r\n\r\nOn Mon, Aug 20, 2012 at 7:53 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> I think I need a cheat-sheet:\r\n>\r\n> build fix -> commit! watch for buildbot\r\n>\r\n> critical bug fix with with lots of test failures -> commit! watch for\r\n> buildbot\r\n>\r\n> touches critical piece (runtime) -> wait for LGTM from appropriate member of\r\n> core team\r\n>\r\n> normal patch -> reviewed by a knowledgeable person, tests pass\r\n>\r\n> controversial change -> drop patch, discuss on the list\r\n>\r\n>\r\n> Does it look correct? Any comments?\r\n>\r\n>\r\n> On Mon, Aug 20, 2012 at 1:44 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>>\r\n>> OK, I thought that I *need* because Rob said \"for critical pieces like\r\n>> this please wait for an LGTM from the core team\". But I guess this does not\r\n>> qualify as \"critical piece\" (that was patch to runtime). Committing.\r\n>>\r\n>>\r\n>>\r\n>> On Mon, Aug 20, 2012 at 1:33 PM, Brad Fitzpatrick <bradfitz@google.com>\r\n>> wrote:\r\n>>>\r\n>>> Need? Or want?\r\n>>>\r\n>>> To clarify: no such process exists. If you think the change is correct\r\n>>> and it's been reviewed by a knowledgeable person in the area, and it's not a\r\n>>> controversial change with known opponents, and if the tests all pass, just\r\n>>> submit. It can always be reverted if there are objections.\r\n>>>\r\n>>> But if you're not comfortable yet, ask somebody specifically who could\r\n>>> LGTM and make you comfortable. But \"core team\" has no definition and it's\r\n>>> quite likely that there are several of us paid by Google to work on Go\r\n>>> full-time could give you an LGTM that still didn't increase your confidence.\r\n>>>\r\n>>> On Aug 20, 2012 7:18 PM, <dvyukov@google.com> wrote:\r\n>>>>\r\n>>>> ping\r\n>>>> I need approval from core team\r\n>>>>\r\n>>>> http://codereview.appspot.com/6458128/\r\n>>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 10:19:38.628770",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for adding these. Some minor comments below.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go\nFile src/pkg/net/net_test.go (right):\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode219\nsrc/pkg/net/net_test.go:219: n, err := c.Read(buf[:])\nOn 2012/08/15 06:27:16, brainman wrote:\n> io/ioutil.ReadFull ?\n\nI think it is fine not use ReadFull here, the goal is just to drain the buffer.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode254\nsrc/pkg/net/net_test.go:254: sem := make(chan bool, conc)\nI would prefer to see a WaitGroup used here.\n\nhttp://codereview.appspot.com/6458128/diff/5002/src/pkg/net/net_test.go#newcode281\nsrc/pkg/net/net_test.go:281: ln.Close()\ndefer ln.Close()",
			"disapproval": false,
			"date": "2012-08-15 06:52:25.649010",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Aug 17, 2012 at 6:59 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Fri, Aug 17, 2012 at 5:51 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n>>\r\n>> On Fri, Aug 17, 2012 at 12:40 AM, Dmitry Vyukov <dvyukov@google.com>\r\n>> wrote:\r\n>> > On Fri, Aug 17, 2012 at 3:47 AM, <mikioh.mikioh@gmail.com> wrote:\r\n>> >>\r\n>> >> apart from this CL, is there any side effect on tests being\r\n>> >> in a separate package?\r\n>> >>\r\n>> >\r\n>> > I would like to ask the same question - what is the difference between 2\r\n>> > options? When I choose one or another?\r\n>>\r\n>> There is no huge difference.  If you want the test to call a\r\n>> non-exported function, then the test must be in the same package.  If\r\n>> the test imports some other package, and that package imports the\r\n>> package that you are testing, then the test must not be in the same\r\n>> package, to avoid introducing an import loop.  Otherwise, it doesn't\r\n>> matter.  Conventionally tests are put in the package they are testing,\r\n>> but they can be moved out if necessary or appropriate.\r\n>>\r\n>\r\n> Thanks. I see.\r\n> What may you say about the following approach (that is used in several std\r\n> packages)? Add export_test.go file that exports only what is necessary for\r\n> tests, and then put tests into foo_test package?\r\n\r\nThat approach is fine but is normally only used when the tests can not\r\nbe put into the same package, due to an import loop.\r\n\r\n> Also, for packages like sync or md5 tests do not need any internal guts,\r\n> they just want to test public interfaces. Isn't the default to put tests\r\n> into foo_test package for such packages?\r\n\r\nThere is nothing wrong with using a foo_test package, but I wouldn't\r\ngo so far as to say that it is the default.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-08-17 14:50:35.536990",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/16 21:59:16, r wrote:\n\n> I don't understand this comment\n\nIt'a simple story. I wrote a test code for testing \nnet package, at first I did a cheat.\n\nthe test used a package internal variable supportsIPv6 \nthat reports kernel state. at that time I thought it \nmakes sense because it reduces test cases.\n\nsorry for my laziness, I never imagined supportsIPv6\nsometimes reports wrong state in real environments  \nbecause of the bug in probeIPv6Stack.\n\nSo I made a wrong test by using the code under tests,\nthat's it.\n\n> but in any case your CL adds no new\n> dependencies to the net tests so it can't require being in a separate\n> package from the rest of the test suite.\n\napart from this CL, is there any side effect on tests being \nin a separate package?",
			"disapproval": false,
			"date": "2012-08-16 23:47:58.231960",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6458128: net: add TCP benchmarks",
	"created": "2012-08-14 09:42:02.998690",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		9001,
		9002,
		10001,
		5002,
		2004,
		14002,
		12004,
		8006,
		3004
	],
	"modified": "2012-09-04 11:47:01.128020",
	"closed": true,
	"issue": 6458128
}