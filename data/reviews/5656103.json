{
	"description": "test: explanatory comments [c-g]*",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Sat, Feb 18, 2012 at 7:03 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> test: explanatory comments [c-g]*\n>\n> Please review this at http://codereview.appspot.com/**5656103/<http://codereview.appspot.com/5656103/>\n>\n> Affected files:\n>  M test/ddd.go\n>  M test/ddd1.go\n>  M test/ddd2.go\n>  M test/ddd3.go\n>  M test/decl.go\n>  M test/declbad.go\n>  M test/defer.go\n>  M test/deferprint.go\n>  M test/divide.go\n>  M test/empty.go\n>  M test/eof.go\n>  M test/eof1.go\n>  M test/escape.go\n>  M test/escape2.go\n>  M test/escape3.go\n>  M test/float_lit.go\n>  M test/floatcmp.go\n>  M test/for.go\n>  M test/func.go\n>  M test/func1.go\n>  M test/func2.go\n>  M test/func3.go\n>  M test/func4.go\n>  M test/func5.go\n>  M test/func6.go\n>  M test/func7.go\n>  M test/func8.go\n>  M test/gc.go\n>  M test/gc1.go\n>  M test/gc2.go\n>  M test/goprint.go\n>  M test/goto.go\n>\n>\n> Index: test/ddd.go\n> ==============================**==============================**=======\n> --- a/test/ddd.go\n> +++ b/test/ddd.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test variadic functions and calls (dot-dot-dot).\n> +\n>  package main\n>\n>  func sum(args ...int) int {\n> Index: test/ddd1.go\n> ==============================**==============================**=======\n> --- a/test/ddd1.go\n> +++ b/test/ddd1.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Verify that illegal uses of ... are detected.\n> +// Does not compile.\n> +\n>  package main\n>\n>  import \"unsafe\"\n> Index: test/ddd2.go\n> ==============================**==============================**=======\n> --- a/test/ddd2.go\n> +++ b/test/ddd2.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// This file is compiled and then imported by ddd3.go.\n> +\n>  package ddd\n>\n>  func Sum(args ...int) int {\n> Index: test/ddd3.go\n> ==============================**==============================**=======\n> --- a/test/ddd3.go\n> +++ b/test/ddd3.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test that variadic functions work across package boundaries.\n> +\n>  package main\n>\n>  import \"./ddd2\"\n> Index: test/decl.go\n> ==============================**==============================**=======\n> --- a/test/decl.go\n> +++ b/test/decl.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Correct short declarations and redeclarations.\n> +// Test correct short declarations and redeclarations.\n>\n>  package main\n>\n> Index: test/declbad.go\n> ==============================**==============================**=======\n> --- a/test/declbad.go\n> +++ b/test/declbad.go\n> @@ -4,7 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Incorrect short declarations and redeclarations.\n> +// Test that incorrect short declarations and redeclarations are detected.\n> +// Does not compile.\n>\n>  package main\n>\n> Index: test/defer.go\n> ==============================**==============================**=======\n> --- a/test/defer.go\n> +++ b/test/defer.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test defer.\n> +\n>  package main\n>\n>  import \"fmt\"\n> Index: test/deferprint.go\n> ==============================**==============================**=======\n> --- a/test/deferprint.go\n> +++ b/test/deferprint.go\n> @@ -4,11 +4,14 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test that we can defer the predeclared functions print and println.\n> +\n>  package main\n>\n>  func main() {\n>        defer println(42, true, false, true, 1.5, \"world\", (chan int)(nil),\n> []int(nil), (map[string]int)(nil), (func())(nil), byte(255))\n>        defer println(1,2,3,4,5,6,7,8,9,10,**11,12,13,14,15,16,17,18,19,20)\n> -//     defer panic(\"dead\")\n> +       // Disabled so the test doesn't crash but left here for reference.\n> +       // defer panic(\"dead\")\n>        defer print(\"printing: \")\n>  }\n> Index: test/divide.go\n> ==============================**==============================**=======\n> --- a/test/divide.go\n> +++ b/test/divide.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// divide corner cases\n> +// Test divide corner cases.\n>\n>  package main\n>\n> Index: test/empty.go\n> ==============================**==============================**=======\n> --- a/test/empty.go\n> +++ b/test/empty.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test that top-level parenthesized declarations can be empty.\n> +// Compiles but does not run.\n> +\n>  package P\n>\n>  import ( )\n> Index: test/eof.go\n> ==============================**==============================**=======\n> --- a/test/eof.go\n> +++ b/test/eof.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test a source file does not need a final newline.\n> +// Compiles but does not run.\n> +\n>  // No newline at the end of this file.\n>\n>  package main\n> \\ No newline at end of file\n> Index: test/eof1.go\n> ==============================**==============================**=======\n> --- a/test/eof1.go\n> +++ b/test/eof1.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test that a comment ending a source file does not need a final newline.\n> +// Compiles but does not run.\n> +\n>  package eof1\n>\n>  // No newline at the end of this comment.\n> \\ No newline at end of file\n> Index: test/escape.go\n> ==============================**==============================**=======\n> --- a/test/escape.go\n> +++ b/test/escape.go\n> @@ -6,8 +6,8 @@\n>\n>  package main\n>\n> -// check for correct heap-moving of escaped variables.\n> -// it is hard to check for the allocations, but it is easy\n> +// Test for correct heap-moving of escaped variables.\n> +// It is hard to check for the allocations, but it is easy\n>  // to check that if you call the function twice at the\n>  // same stack level, the pointers returned should be\n>  // different.\n> Index: test/escape2.go\n> ==============================**==============================**=======\n> --- a/test/escape2.go\n> +++ b/test/escape2.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test, using compiler diagnostic flags, that the escape analysis is\n> working.\n> +// Compiles but does not run.\n> +\n>  package foo\n>\n>  import (\n> Index: test/escape3.go\n> ==============================**==============================**=======\n> --- a/test/escape3.go\n> +++ b/test/escape3.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Test run-time behavior of escape analysis-related optimizations.\n> +// Test the run-time behavior of escape analysis-related optimizations.\n>\n>  package main\n>\n> Index: test/float_lit.go\n> ==============================**==============================**=======\n> --- a/test/float_lit.go\n> +++ b/test/float_lit.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test floating-point literal syntax.\n> +\n>  package main\n>\n>  var bad bool\n> Index: test/floatcmp.go\n> ==============================**==============================**=======\n> --- a/test/floatcmp.go\n> +++ b/test/floatcmp.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test floating-point comparison involving NaN.\n> +\n>  package main\n>\n>  import \"math\"\n> Index: test/for.go\n> ==============================**==============================**=======\n> --- a/test/for.go\n> +++ b/test/for.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test for loops.\n> +\n>  package main\n>\n>  func assertequal(is, shouldbe int, msg string) {\n> Index: test/func.go\n> ==============================**==============================**=======\n> --- a/test/func.go\n> +++ b/test/func.go\n> @@ -4,6 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test simple functions.\n>\n>  package main\n>\n> Index: test/func1.go\n> ==============================**==============================**=======\n> --- a/test/func1.go\n> +++ b/test/func1.go\n> @@ -4,11 +4,12 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// does not compile and should not compile\n> +// Test that result parameters are in the same scope as regular\n> parameters.\n> +// Does not compile.\n>\n>  package main\n>\n> -func f1(a int) (int, float32) { // BUG (not caught by compiler): multiple\n> return values must have names\n> +func f1(a int) (int, float32) {\n>        return 7, 7.0\n>  }\n>\n> Index: test/func2.go\n> ==============================**==============================**=======\n> --- a/test/func2.go\n> +++ b/test/func2.go\n> @@ -1,9 +1,12 @@\n> -// $G $F.go || echo BUG: should compile\n> +// compile\n>\n>  // Copyright 2009 The Go Authors. All rights reserved.\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test function signatures.\n> +// Compiled but not run.\n> +\n>  package main\n>\n>  type t1 int\n> Index: test/func3.go\n> ==============================**==============================**=======\n> --- a/test/func3.go\n> +++ b/test/func3.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Verify that illegal function signatures are detected.\n> +// Does not compile.\n> +\n>  package main\n>\n>  type t1 int\n> Index: test/func4.go\n> ==============================**==============================**=======\n> --- a/test/func4.go\n> +++ b/test/func4.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Verify that it is illegal to take the address of a function.\n> +// Does not compile.\n> +\n>  package main\n>\n>  var notmain func()\n> Index: test/func5.go\n> ==============================**==============================**=======\n> --- a/test/func5.go\n> +++ b/test/func5.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test functions and goroutines.\n> +\n>  package main\n>\n>  func caller(f func(int, int) int, a, b int, c chan int) {\n> Index: test/func6.go\n> ==============================**==============================**=======\n> --- a/test/func6.go\n> +++ b/test/func6.go\n> @@ -1,9 +1,11 @@\n> -// compile\n> +// run\n>\n>  // Copyright 2011 The Go Authors.  All rights reserved.\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test closures in if conditions.\n> +\n>  package main\n>\n>  func main() {\n> Index: test/func7.go\n> ==============================**==============================**=======\n> --- a/test/func7.go\n> +++ b/test/func7.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test evaluation order in if condition.\n> +\n>  package main\n>\n>  var calledf = false\n> Index: test/func8.go\n> ==============================**==============================**=======\n> --- a/test/func8.go\n> +++ b/test/func8.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test evaluation order.\n> +\n>  package main\n>\n>  var calledf int\n> Index: test/gc.go\n> ==============================**==============================**=======\n> --- a/test/gc.go\n> +++ b/test/gc.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Simple test of the garbage collector.\n> +\n>  package main\n>\n>  import \"runtime\"\n> Index: test/gc1.go\n> ==============================**==============================**=======\n> --- a/test/gc1.go\n> +++ b/test/gc1.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// A simple test of the garbage collector.\n> +\n>  package main\n>\n>  func main() {\n> Index: test/gc2.go\n> ==============================**==============================**=======\n> --- a/test/gc2.go\n> +++ b/test/gc2.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that buffered channels are garbage collected properly.\n> +// Test that buffered channels are garbage collected properly.\n>  // An interesting case because they have finalizers and used to\n>  // have self loops that kept them from being collected.\n>  // (Cyclic data with finalizers is never finalized, nor collected.)\n> Index: test/goprint.go\n> ==============================**==============================**=======\n> --- a/test/goprint.go\n> +++ b/test/goprint.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test that println can be the target of a go statement.\n> +\n>  package main\n>\n>  import \"time\"\n> Index: test/goto.go\n> ==============================**==============================**=======\n> --- a/test/goto.go\n> +++ b/test/goto.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Verify goto semantics.\n> +// Does not compile.\n> +//\n>  // Each test is in a separate function just so that if the\n>  // compiler stops processing after one error, we don't\n>  // lose other ones.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-19 03:13:04.358793",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-19 03:03:23.559601",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 5338874648c7 ***\n\ntest: explanatory comments [c-g]*\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5656103",
			"disapproval": false,
			"date": "2012-02-19 03:28:58.201744",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5656103: test: explanatory comments [c-g]*",
	"created": "2012-02-19 03:03:04.740716",
	"patchsets": [
		1,
		2002,
		4034
	],
	"modified": "2012-02-19 03:29:02.151094",
	"closed": true,
	"issue": 5656103
}