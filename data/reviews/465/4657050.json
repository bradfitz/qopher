{
	"description": "strings, bytes: Introducing shortuct splitting functions.\n\nThe semantic of the third argument of Split and SplitAfter functions can be confusing in the\ncase of negative value. I added two shortcut functions SplitAll and SplitAfterAll that clearly\nclaim their intent. Meanwhile, I fixed a little typo in the SplitAfter documentation.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"befelemepeseveze@gmail.com",
		"arctanofyourface@gmail.com",
		"adg@golang.org",
		"dsymonds@golang.org",
		"r@google.com",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "valentin.kasas@gmail.com",
			"recipients": [
				"valentin.kasas@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-25 21:41:33.426546",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This discussion gives me flashbacks.\n  http://code.google.com/p/go/source/detail?r=e23ff864e1ae\n\nWow, almost exactly two years ago!\n",
			"disapproval": false,
			"date": "2011-06-27 01:14:59.177641",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"valentin.kasas@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I'm not happy with adding lots of one-line helper functions to the library. They add clutter and are more helpful for beginners than people who know the language.\n\nOn the other hand, I do have some sympathy for the complaint about the ugliness of the final argument to Split. I am leaning towards accepting this with the understanding that it is addressing the ugliness rather than opening the door to zillions of variant functions.  But I want to think about it some more.",
			"disapproval": false,
			"date": "2011-06-25 22:11:06.690492",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"valentin.kasas@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttp://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go#newcode227\nsrc/pkg/strings/strings.go:227: // SplitAfterAll slices s into substrings after each instance of sep and\n\"split after all\" reads funny. i think SplitAllAfter is a better name.\n\nhttp://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings_test.go\nFile src/pkg/strings/strings_test.go (right):\n\nhttp://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings_test.go#newcode243\nsrc/pkg/strings/strings_test.go:243: if tt.n < 0 {\nthis is nesting too deep. invert.\nif tt.n >= 0 {\n   continue\n}\nor, perhaps even better, move this special case test into the main test.",
			"disapproval": false,
			"date": "2011-06-25 22:16:18.068887",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"valentin.kasas@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttp://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go#newcode227\nsrc/pkg/strings/strings.go:227: // SplitAfterAll slices s into substrings after each instance of sep and\nOn 2011/06/25 22:16:18, r wrote:\n> \"split after all\" reads funny. i think SplitAllAfter is a better name.\n\nchanged my mind on this. the name is funny but it's consistent, so leave it.",
			"disapproval": false,
			"date": "2011-06-25 23:23:14.486019",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"valentin.kasas@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"befelemepeseveze@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/25 22:11:06, r wrote:\n> I'm not happy with adding lots of one-line helper functions to the library. They\n> add clutter and are more helpful for beginners than people who know the\n> language.\n> \n> On the other hand, I do have some sympathy for the complaint about the ugliness\n> of the final argument to Split. I am leaning towards accepting this with the\n> understanding that it is addressing the ugliness rather than opening the door to\n> zillions of variant functions.  But I want to think about it some more.\n\nI would like to suggest: If the change is motivated by the possible confusion of the beginners, then make the common case, which they are used to from some other languages, the \"all\" case. I.e. let Split perform what the -1 'n' parameter does now. The less common case, where N splits are to be performed, can be then named e.g. SplitN or SplitMax or ... BTW, this will avoid the bit funny SplitAfterAll, though I agree with the latest Rob notice about the actual consistency of that name.\n\nThis all will be somewhat in line with e.g. Python's:\n\nstr.split([sep[, maxsplit]])\n\nReturn a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified, then there is no limit on the number of splits (all possible splits are made).\n(ref: http://docs.python.org/library/stdtypes.html )\n\nA variation of this suggestion can also be a even more Python-like:\n\nfunc Split(s, sep string, maxsplit ...int) {\n    switch len(maxsplit) {\n    case 0:\n        // perform unlimited Split\n    case 1:\n        // perform max maxsplit[0] Split\n    default:\n        // KABOOM!\n    }\n}\n\nBut this is IMO ugly as well in Go. It abuses the vararg concept to some extent and can produce more confusion for anyone accidentally/mistakenly writing Split(s, sep, 1, 2, 3) - with a \"Why I get a run time panic here?\" flooding of golang-nuts.",
			"disapproval": false,
			"date": "2011-06-26 08:52:46.619708",
			"approval": false
		},
		{
			"sender": "valentin.kasas@gmail.com",
			"recipients": [
				"valentin.kasas@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"befelemepeseveze@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi,\n\nMy first intent was to get rid of the IMO ugly -1 parameter that I encountered in most of my usages of the Split function. I thought about renaming Split in SplitN and define Split(s, sep string) instead, but that would have broken existent client code and I was not able to determine if a gofix patch would have been desirable for such a minor change.\n\nBTW this is my very first open source contribution, so I mechanically applied the guidelines and thus, I don't know what to do next. May (can) I apply other changes in this changeset to take Rob's comments into account (especially those concerning the tests), or shall I submit another change ?\n\nRegards\n\nV.",
			"disapproval": false,
			"date": "2011-06-26 19:09:00.408735",
			"approval": false
		},
		{
			"sender": "arctanofyourface@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "yes, you can just make more changes based on feedback and then run \"hg mail\" again.\n\n(phone)\n\nOn Jun 26, 2011, at 3:09 PM, valentin.kasas@gmail.com wrote:\n\n> Hi,\n> \n> My first intent was to get rid of the IMO ugly -1 parameter that I\n> encountered in most of my usages of the Split function. I thought about\n> renaming Split in SplitN and define Split(s, sep string) instead, but\n> that would have broken existent client code and I was not able to\n> determine if a gofix patch would have been desirable for such a minor\n> change.\n> \n> BTW this is my very first open source contribution, so I mechanically\n> applied the guidelines and thus, I don't know what to do next. May (can)\n> I apply other changes in this changeset to take Rob's comments into\n> account (especially those concerning the tests), or shall I submit\n> another change ?\n> \n> Regards\n> \n> V.\n> \n> http://codereview.appspot.com/4657050/\n",
			"disapproval": false,
			"date": "2011-06-26 21:44:43.022440",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Jun 27, 2011, at 11:07 AM, Andrew Gerrand wrote:\n\n> On 26 June 2011 08:16,  <r@golang.org> wrote:\n>> \n>> http://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go\n>> File src/pkg/strings/strings.go (right):\n>> \n>> http://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go#newcode227\n>> src/pkg/strings/strings.go:227: // SplitAfterAll slices s into\n>> substrings after each instance of sep and\n>> \"split after all\" reads funny. i think SplitAllAfter is a better name.\n> \n> What if this new function were Split and the existing Split was\n> renamed to SplitN (where n is the number of splits to make).\n> \n> It's a backward incompatible change, but a simple one that's easy to gofix.\n> \n> I'm happy to leave it as-is (one Split function), though.\n\nit reminds me a bit of the os.Open discussion and i think this is the way to go.\n\ni'll do the work, since it involves a gofix module.\n\nvalentin: please abandon this CL (hg change -d 4657050).\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-06-27 01:30:11.151133",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 26 June 2011 08:16,  <r@golang.org> wrote:\n>\n> http://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go\n> File src/pkg/strings/strings.go (right):\n>\n> http://codereview.appspot.com/4657050/diff/2001/src/pkg/strings/strings.go#newcode227\n> src/pkg/strings/strings.go:227: // SplitAfterAll slices s into\n> substrings after each instance of sep and\n> \"split after all\" reads funny. i think SplitAllAfter is a better name.\n\nWhat if this new function were Split and the existing Split was\nrenamed to SplitN (where n is the number of splits to make).\n\nIt's a backward incompatible change, but a simple one that's easy to gofix.\n\nI'm happy to leave it as-is (one Split function), though.\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-06-27 01:08:05.882727",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "If this is to happen, I think I'd prefer the current functions to be renamed\nSplitN and SplitAfterN, so that we could keep the current names for the more\ncommon case of splitting all.\nOn 26 Jun 2011 10:52, <befelemepeseveze@gmail.com> wrote:\n> On 2011/06/25 22:11:06, r wrote:\n>> I'm not happy with adding lots of one-line helper functions to the\n> library. They\n>> add clutter and are more helpful for beginners than people who know\n> the\n>> language.\n>\n>> On the other hand, I do have some sympathy for the complaint about the\n> ugliness\n>> of the final argument to Split. I am leaning towards accepting this\n> with the\n>> understanding that it is addressing the ugliness rather than opening\n> the door to\n>> zillions of variant functions. But I want to think about it some\n> more.\n>\n> I would like to suggest: If the change is motivated by the possible\n> confusion of the beginners, then make the common case, which they are\n> used to from some other languages, the \"all\" case. I.e. let Split\n> perform what the -1 'n' parameter does now. The less common case, where\n> N splits are to be performed, can be then named e.g. SplitN or SplitMax\n> or ... BTW, this will avoid the bit funny SplitAfterAll, though I agree\n> with the latest Rob notice about the actual consistency of that name.\n>\n> This all will be somewhat in line with e.g. Python's:\n>\n> str.split([sep[, maxsplit]])\n>\n> Return a list of the words in the string, using sep as the delimiter\n> string. If maxsplit is given, at most maxsplit splits are done (thus,\n> the list will have at most maxsplit+1 elements). If maxsplit is not\n> specified, then there is no limit on the number of splits (all possible\n> splits are made).\n> (ref: http://docs.python.org/library/stdtypes.html )\n>\n> A variation of this suggestion can also be a even more Python-like:\n>\n> func Split(s, sep string, maxsplit ...int) {\n> switch len(maxsplit) {\n> case 0:\n> // perform unlimited Split\n> case 1:\n> // perform max maxsplit[0] Split\n> default:\n> // KABOOM!\n> }\n> }\n>\n> But this is IMO ugly as well in Go. It abuses the vararg concept to some\n> extent and can produce more confusion for anyone accidentally/mistakenly\n> writing Split(s, sep, 1, 2, 3) - with a \"Why I get a run time panic\n> here?\" flooding of golang-nuts.\n>\n> http://codereview.appspot.com/4657050/\n",
			"disapproval": false,
			"date": "2011-06-27 07:04:59.230365",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 27 June 2011 17:04, roger peppe <rogpeppe@gmail.com> wrote:\n> If this is to happen, I think I'd prefer the current functions to be renamed\n> SplitN and SplitAfterN, so that we could keep the current names for the more\n> common case of splitting all.\n\nrog: http://codereview.appspot.com/4661051/\n",
			"disapproval": false,
			"date": "2011-06-27 07:07:34.708900",
			"approval": false
		}
	],
	"owner_email": "valentin.kasas@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "vk",
	"subject": "code review 4657050: strings, bytes: Introducing shortuct splitting functions.",
	"created": "2011-06-25 21:34:12.428987",
	"patchsets": [
		1,
		2001
	],
	"modified": "2011-06-27 07:07:34.708900",
	"closed": false,
	"issue": 4657050
}