{
	"description": "hash/crc32: add SSE4.2 support\n\nUsing the CRC32 instruction speeds up the Castagnoli computation by\nabout 20x on a modern Intel CPU.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-07-06 20:07:07.585954",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-07-06 20:12:28.620212",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Only substantive thing is the handling of REX\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6a/lex.c\nFile src/cmd/6a/lex.c (right):\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6a/lex.c#newcode172\nsrc/cmd/6a/lex.c:172: /* type is the lexical type to return.  It dictates what kind of\nplease make the new comments start with /* and end with */ on lines\nby themselves\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6l/optab.c\nFile src/cmd/6l/optab.c (right):\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6l/optab.c#newcode537\nsrc/cmd/6l/optab.c:537: /* You are doasm, holding in your hand a Prog* with p->as set to, say, ACRC32,\nsame\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6l/optab.c#newcode1265\nsrc/cmd/6l/optab.c:1265: { ACRC32Q,       ycrc32l,Px, 0xf2,0x48,0x0f,0x38,0xf1,0},\nYou should be able to write\n\n{ ACRC32L, ycrc32l, Px, 0xf2, 0x0f, 0x38, 0xf1, 0},\n{ ACRC32Q, ycrc32l, Pw, 0xf2, 0x0f, 0x38, 0xf1, 0},\n\n(note the Pw) and then 6l will put the REX prefix in for you\nas appropriate, without loss of registers.  That is assuming\nthere is a CRC32L form of the instruction.  (My point is\nthat if you use Pw 6l will do the right thing with the REX byte.)",
			"disapproval": false,
			"date": "2011-07-11 19:50:02.124030",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cc56eaa003b6 ***\n\nhash/crc32: add SSE4.2 support\n\nUsing the CRC32 instruction speeds up the Castagnoli computation by\nabout 20x on a modern Intel CPU.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/4650072\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6a/lex.c\nFile src/cmd/6a/lex.c (right):\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6a/lex.c#newcode172\nsrc/cmd/6a/lex.c:172: /* type is the lexical type to return.  It dictates what kind of\nOn 2011/07/11 19:50:02, rsc wrote:\n> please make the new comments start with /* and end with */ on lines\n> by themselves\n\nDone.\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6l/optab.c\nFile src/cmd/6l/optab.c (right):\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6l/optab.c#newcode537\nsrc/cmd/6l/optab.c:537: /* You are doasm, holding in your hand a Prog* with p->as set to, say, ACRC32,\nOn 2011/07/11 19:50:02, rsc wrote:\n> same\n\nDone.\n\nhttp://codereview.appspot.com/4650072/diff/4023/src/cmd/6l/optab.c#newcode1265\nsrc/cmd/6l/optab.c:1265: { ACRC32Q,       ycrc32l,Px, 0xf2,0x48,0x0f,0x38,0xf1,0},\nOn 2011/07/11 19:50:02, rsc wrote:\n> You should be able to write\n> \n> { ACRC32L, ycrc32l, Px, 0xf2, 0x0f, 0x38, 0xf1, 0},\n> { ACRC32Q, ycrc32l, Pw, 0xf2, 0x0f, 0x38, 0xf1, 0},\n> \n> (note the Pw) and then 6l will put the REX prefix in for you\n> as appropriate, without loss of registers.  That is assuming\n> there is a CRC32L form of the instruction.  (My point is\n> that if you use Pw 6l will do the right thing with the REX byte.)\n\nDone.",
			"disapproval": false,
			"date": "2011-07-12 13:30:49.965927",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "just for my own curiosity,\nis there a 32-bit argument form of the CRC32 instruction?\n",
			"disapproval": false,
			"date": "2011-07-12 14:27:59.828685",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jul 12, 2011 at 10:27 AM, Russ Cox <rsc@golang.org> wrote:\n> just for my own curiosity,\n> is there a 32-bit argument form of the CRC32 instruction?\n\nYes, and a 16-bit one. I didn't add them because I wasn't using them\nand so had not testing coverage, but I can put them in if you like.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2011-07-12 14:29:04.428980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jul 12, 2011 at 10:29, Adam Langley <agl@golang.org> wrote:\n> On Tue, Jul 12, 2011 at 10:27 AM, Russ Cox <rsc@golang.org> wrote:\n>> just for my own curiosity,\n>> is there a 32-bit argument form of the CRC32 instruction?\n>\n> Yes, and a 16-bit one. I didn't add them because I wasn't using them\n> and so had not testing coverage, but I can put them in if you like.\n\nthat'd be great.  even if untested they're\nbetter than nothing.   thanks.\n",
			"disapproval": false,
			"date": "2011-07-12 14:32:45.834205",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 4650072: hash/crc32: add SSE4.2 support",
	"created": "2011-07-05 18:35:39.299869",
	"patchsets": [
		1,
		2001,
		5001,
		4011,
		9001,
		4023,
		14001
	],
	"modified": "2011-09-08 19:09:49.056290",
	"closed": true,
	"issue": 4650072
}