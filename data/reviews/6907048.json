{
	"description": "math/rand: add example / regression test\n\nThis makes sure the outputs do not change for a fixed seed.\nSee also https://codereview.appspot.com/6905049.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"infomaniac7@gmail.com",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "infomaniac7@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Typo: Should the Int64 in the second line of this comment be a Int63?\r\n\r\n// Int31, Int63, and Uint32 generate values of the given width. \r\n// The Int method (not shown) is like either Int31 or Int64 \r\n// depending on the size of 'int'.\r\n\r\nOn Friday, December 7, 2012 9:59:03 AM UTC-7, rsc wrote:\r\n>\r\n> *** Submitted as \r\n> https://code.google.com/p/go/source/detail?r=477b2e70b12d *** \r\n>\r\n> math/rand: add example / regression test \r\n>\r\n> This makes sure the outputs do not change for a fixed seed. \r\n> See also https://codereview.appspot.com/6905049. \r\n>\r\n> R=golang-dev, bradfitz \r\n> CC=golang-dev \r\n> https://codereview.appspot.com/6907048 \r\n>\r\n>\r\n> https://codereview.appspot.com/6907048/ \r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-08 04:19:07.958240",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-07 15:13:00.973310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Fri, Dec 7, 2012 at 7:13 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> math/rand: add example / regression test\r\n>\r\n> This makes sure the outputs do not change for a fixed seed.\r\n> See also https://codereview.appspot.**com/6905049<https://codereview.appspot.com/6905049>\r\n> .\r\n>\r\n> Please review this at https://codereview.appspot.**com/6907048/<https://codereview.appspot.com/6907048/>\r\n>\r\n> Affected files:\r\n>   A src/pkg/math/rand/example_**test.go\r\n>\r\n>\r\n> Index: src/pkg/math/rand/example_**test.go\r\n> ==============================**==============================**=======\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/src/pkg/math/rand/example_**test.go\r\n> @@ -0,0 +1,69 @@\r\n> +// Copyright 2012 The Go Authors. All rights reserved.\r\n> +// Use of this source code is governed by a BSD-style\r\n> +// license that can be found in the LICENSE file.\r\n> +\r\n> +package rand_test\r\n> +\r\n> +import (\r\n> +       \"fmt\"\r\n> +       \"math/rand\"\r\n> +       \"os\"\r\n> +       \"text/tabwriter\"\r\n> +)\r\n> +\r\n> +// This test serves as an example but also makes sure we don't change\r\n> +// the output of the random number generator when given a fixed seed.\r\n> +\r\n> +// This example shows the use of each of the methods on a *Rand.\r\n> +// The use of the global functions is the same, without the receiver.\r\n> +func Example() {\r\n> +       // Create and seed the generator.\r\n> +       // Typically a non-fixed seed should be used, such as\r\n> time.Now().UnixNano().\r\n> +       // Using a fixed seed will produce the same output on every run.\r\n> +       r := rand.New(rand.NewSource(99))\r\n> +\r\n> +       // The tabwriter here helps us generate aligned output.\r\n> +       w := tabwriter.NewWriter(os.Stdout, 1, 1, 1, ' ', 0)\r\n> +       defer w.Flush()\r\n> +       show := func(name string, v1, v2, v3 interface{}) {\r\n> +               fmt.Fprintf(w, \"%s\\t%v\\t%v\\t%v\\n\", name, v1, v2, v3)\r\n> +       }\r\n> +\r\n> +       // Float32 and Float64 values are in [0, 1).\r\n> +       show(\"Float32\", r.Float32(), r.Float32(), r.Float32())\r\n> +       show(\"Float64\", r.Float64(), r.Float64(), r.Float64())\r\n> +\r\n> +       // ExpFloat64 values have an average of 1 but decay exponentially.\r\n> +       show(\"ExpFloat64\", r.ExpFloat64(), r.ExpFloat64(), r.ExpFloat64())\r\n> +\r\n> +       // NormFloat64 values have an average of 0 and a standard\r\n> deviation of 1.\r\n> +       show(\"NormFloat64\", r.NormFloat64(), r.NormFloat64(),\r\n> r.NormFloat64())\r\n> +\r\n> +       // Int31, Int63, and Uint32 generate values of the given width.\r\n> +       // The Int method (not shown) is like either Int31 or Int64\r\n> +       // depending on the size of 'int'.\r\n> +       show(\"Int31\", r.Int31(), r.Int31(), r.Int31())\r\n> +       show(\"Int63\", r.Int63(), r.Int63(), r.Int63())\r\n> +       show(\"Uint32\", r.Int63(), r.Int63(), r.Int63())\r\n> +\r\n> +       // Intn, Int31n, and Int63n limit their output to be < n.\r\n> +       // They do so more carefully than using r.Int()%n.\r\n> +       show(\"Intn(10)\", r.Intn(10), r.Intn(10), r.Intn(10))\r\n> +       show(\"Int31n(10)\", r.Int31n(10), r.Int31n(10), r.Int31n(10))\r\n> +       show(\"Int63n(10)\", r.Int63n(10), r.Int63n(10), r.Int63n(10))\r\n> +\r\n> +       // Perm generates a random permutation of the numbers [0, n).\r\n> +       show(\"Perm\", r.Perm(5), r.Perm(5), r.Perm(5))\r\n> +       // Output:\r\n> +       // Float32     0.2635776           0.6358173           0.6718283\r\n> +       // Float64     0.628605430454327   0.4504798828572669\r\n>  0.9562755949377957\r\n> +       // ExpFloat64  0.3362240648200941  1.4256072328483647\r\n>  0.24354758816173044\r\n> +       // NormFloat64 0.17233959114940064 1.577014951434847\r\n> 0.04259129641113857\r\n> +       // Int31       1501292890          1486668269          182840835\r\n> +       // Int63       3546343826724305832 5724354148158589552\r\n> 5239846799706671610\r\n> +       // Uint32      5927547564735367388 637072299495207830\r\n>  4128311955958246186\r\n> +       // Intn(10)    1                   2                   5\r\n> +       // Int31n(10)  4                   7                   8\r\n> +       // Int63n(10)  7                   6                   3\r\n> +       // Perm        [1 4 2 3 0]         [4 2 1 3 0]         [1 2 4 0 3]\r\n> +}\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-07 16:30:52.961940",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=477b2e70b12d ***\n\nmath/rand: add example / regression test\n\nThis makes sure the outputs do not change for a fixed seed.\nSee also https://codereview.appspot.com/6905049.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/6907048",
			"disapproval": false,
			"date": "2012-12-07 16:59:03.480060",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 8, 2012 at 3:19 PM, Jason Travis <infomaniac7@gmail.com> wrote:\r\n\r\n> Typo: Should the Int64 in the second line of this comment be a Int63?\r\n\r\nYes, well spotted.\r\n",
			"disapproval": false,
			"date": "2012-12-08 08:11:34.579790",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6907048: math/rand: add example / regression test",
	"created": "2012-12-07 15:12:14.603640",
	"patchsets": [
		1,
		2001,
		7001
	],
	"modified": "2012-12-09 05:30:14.924950",
	"closed": true,
	"issue": 6907048
}