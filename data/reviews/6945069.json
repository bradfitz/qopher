{
	"description": "runtime: interpret type information during garbage collection",
	"cc": [
		"rsc@golang.org",
		"dvyukov@google.com",
		"remyoudompheng@gmail.com",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc, dvyukov, remyoudompheng, dfc, minux (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-17 16:44:29.131260",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it the last CL? or are there bits remaining?\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode461\nsrc/pkg/runtime/mgc0.c:461: itabtype = ((PtrType*)efacevalue.type)->elem;\nis itabtype a constant? I would expect the computation to happen in mallocinit() or something.",
			"disapproval": false,
			"date": "2012-12-17 21:31:06.199320",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/17 21:31:06, remyoudompheng wrote:\n> Is it the last CL?\n\nNo.",
			"disapproval": false,
			"date": "2012-12-17 21:52:27.236350",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would like to obtain information about the progress of this code review. Thanks.",
			"disapproval": false,
			"date": "2013-01-03 11:29:34.074470",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/03 19:59:51, rsc wrote:\n> https://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode415\n> src/pkg/runtime/mgc0.c:415: struct BufferList *scanbuffers;\n> I missed this last time. Please introduce typedefs for these too and delete the\n> struct keywords.\n\nI put the changes into a separate CL: https://codereview.appspot.com/7029055/\n\nIt should be easy to review.",
			"disapproval": false,
			"date": "2013-01-04 14:11:27.500510",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode461\nsrc/pkg/runtime/mgc0.c:461: itabtype = ((PtrType*)efacevalue.type)->elem;\nOn 2012/12/17 21:31:06, remyoudompheng wrote:\n> is itabtype a constant? I would expect the computation to happen in mallocinit()\n> or something.\n\nYes, itabtype is a constant.\n\nThis isn't causing performance issues, so the code can stay here.",
			"disapproval": false,
			"date": "2013-01-03 11:33:20.616180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your patience. I am technically on vacation this week, although I have been doing a little Go work anyway.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode404\nsrc/pkg/runtime/mgc0.c:404: Slice *slicePtr;\nsliceptr or slice_ptr please\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode407\nsrc/pkg/runtime/mgc0.c:407: struct Frame stack[GC_STACK_CAPACITY+4];\nPlease declare this at top level and introduce a typedef so you don't need 'struct' keywords everywhere.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode415\nsrc/pkg/runtime/mgc0.c:415: struct BufferList *scanbuffers;\nI missed this last time. Please introduce typedefs for these too and delete the struct keywords.\n\nAlso delete all the blank lines in the variable declaration block and merge the \nvarious lines with the same type:\n\nType *t, *itabtype;\nuintptr *pc, precise_type, nominal_size;\nFrame *stack_ptr, stack_top, stack[GC_STACK_CAPACITY+4];\n\nThen you don't need the // End of local variable declarations comment.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode495\nsrc/pkg/runtime/mgc0.c:495: switch(pc[0]) {\nThere is a lot of repetition here. I realize you are trying to squeeze speed, but I would rather sacrifice speed for simplicity at this point. We can optimize in separate CLs. Please make the structure here be:\n\n    for(;;) {\n        obj = nil;\n        objti = 0;\n        switch(pc[0]) {\n        case ...\n            break or goto endprog;\n        }\n        if(obj >= arena_start && obj < arena_used) {\n            *ptrbufpos++ = (struct PtrTarget){obj, objti};\n            if(ptrbufpos == ptrbuf_end)\n                goto flush_buffers;\n        }\n    }\nendloop:\n\nMost of the cases in the switch should break, like:\n\n    case GC_PTR:\n        obj = *(void**)(stack_top.b + pc[1]);\n        objti = pc[2];\n        pc += 3;\n        break;\n\n    case GC_SLICE:\n        sliceptr = (Slice*)(stack_top.b + pc[1]);\n        obj = sliceptr->array;\n        objti = pc[2] | PRECISE | LOOP;\n        if(sliceptr->cap == 0)\n            obj = nil;\n        break;\n\n    case GC_APTR:\n        obj = *(void**)(stack_top.b + pc[1]);\n        pc += 2;\n        break;\n\n    ...\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode516\nsrc/pkg/runtime/mgc0.c:516: // If there are no other references to the backing array,\nThis option looks fine. Please delete the if/else (as in my snippet above).\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode572\nsrc/pkg/runtime/mgc0.c:572: if(eface->type != nil && (eface->data >= arena_start && eface->data < arena_used)) {\nIn the framework above, this should set obj and objti and break.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode610\nsrc/pkg/runtime/mgc0.c:610: // iface->data\nThe lines above do need to do the queueing of the first half, but then from here down it should be just set obj and objti and break.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode629\nsrc/pkg/runtime/mgc0.c:629: while(true) {\nwhile((i = stack_top.b) <= end_b) {\n    stack_top.b += PtrSize;\n    obj = *(byte**)i;\n    if(obj...) { \n        ...\n    }\n}\ngoto endprog;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode655\nsrc/pkg/runtime/mgc0.c:655: goto trailing_pointers;\ntrailing pointers is only used here. if nothing else it should be at the bottom of this case, although i wonder if you can restructure the logic here to cut some of the duplication. for example:\n\ncase GC_END:\n\tif(--stack_top.count > 0) {\n\t\t// Next iteration if possible.\n\t\telemsize = stack_top.elemsize;\n\t\tstack_top.b += elemsize;\n\t\tif(stack_top.b + elemsize - PtrSize < end_b) {\n\t\t\tpc = stack_top.loop_or_ret;\n\t\t\tbreak;\n\t\t}\n\t\ti = stack_top.b;\n\t} else {\n\t\t// Stack pop if possible.\n\t\tif(stack_ptr+1 < stack+nelem(stack)) {\n\t\t\tpc = stack_top.loop_or_ret;\n\t\t\tstack_top = *stack_ptr++;\n\t\t\tbreak;\n\t\t}\n\t\ti = (uintptr)b + nominal_size;\n\t}\n\tif(precise_type)\n\t\tgoto endprog;\n\t\n\t// Did not have precise information.\n\t... \"trailing_pointers\" code ...\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode687\nsrc/pkg/runtime/mgc0.c:687: goto next_instr;\ncontinue;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode690\nsrc/pkg/runtime/mgc0.c:690: stack_top.count--;\nstack_top.count--;\nif(stack_top.count != 0) {\n    stack_top.b += stack_top.elemsize;\n    pc = stack_top.loop_or_ret;\n} else {\n    stack_top = *stack_ptr++;\n    pc++;\n}\nbreak;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode709\nsrc/pkg/runtime/mgc0.c:709: *stack_ptr = stack_top;\nit's okay to put -- in the expression:\n\n*stack_ptr-- = stack_top;\nstack_top = (Frame){1, 0, i, ret};\npc = target;\nbreak;\n\nIt also seems okay to halve the lines by avoiding the temporaries:\n\n*stack_ptr-- = stack_top;\nstack_top = (Frame){1, 0, stack_top.b+pc[1], pc+3};\npc = (uintptr*)pc[2];\nbreak;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode713\nsrc/pkg/runtime/mgc0.c:713: goto next_instr;\nbreak;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode717\nsrc/pkg/runtime/mgc0.c:717: obj = *(void**)(stack_top.b + pc[1]);\nobj = *(void**)(stack_top.b + pc[1]);\npc += 3;\nbreak;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode730\nsrc/pkg/runtime/mgc0.c:730: obj = (void*)(stack_top.b + pc[1]);\nobj = (void*)(stack_top.b + pc[1]);\npc += 4;\nbreak;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode747\nsrc/pkg/runtime/mgc0.c:747: flushptrbuf(ptrbuf, ptrbufpos-ptrbuf, &wp, &wbuf, &nobj, bitbuf);\nIf you make the second argument &ptrbufpos instead of ptrbufpos-ptrbuf, then the flushptrbuf function can do the ptrbufpos = ptrbuf assignment. Then the call is just one line, and instead of the goto flush_buffers in the various places, which then needs to deal with restarting the instruction, we can just put the call there.\n\nfor example:\n\ncase GC_IFACE:\n\tiface = (Iface*)(stack_top.b + pc[1]);\n\tpc += 2;\n\tif(iface->tab == nil)\n\t\tbreak;\n\t\n\tif((void*)iface->tab >= arena_start && (void*)iface->tab < arena_used) {\n\t\t*ptrbufpos = (PtrTarget){iface->tab, (uintptr)itabtype->gc};\n\t\tif(++ptrbufpos == ptrbuf_end)\n\t\t\tflushptrbuf(ptrbuf, &ptrbufpos, &wp, &wbuf, &nobj, bitbuf);\n \t}\n \t\n \tt = iface->tab->type;\n \tif(t->size <= sizeof(void*)) {\n \t\tif(t->kind & KindNoPointers)\n \t\t\tbreak;\n \t\tobj = iface->data;\n \t\tif(t->kind == KindPtr)\n \t\t\tobjti = (uintptr)((PtrType*)t)->elem->gc;\n \t} else {\n \t\tobj = iface->data;\n \t\tobjti = (uintptr)t->gc;\n \t}\n \tbreak;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode754\nsrc/pkg/runtime/mgc0.c:754: if( *(byte**)i != nil ) {\ndrop spaces inside ( )",
			"disapproval": false,
			"date": "2013-01-03 19:59:51.814790",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's also a readability concern. It is already very hard, IMO, to\r\ngrasp what is the computation being done.\r\n\r\nThe code doesn't make it clear that this particular computation has a\r\nconstant result and pulling it out would make clearer where the actual\r\nwork is done.\r\n\r\nR\u00e9my.\r\n\r\n\r\n2013/1/3, 0xE2.0x9A.0x9B@gmail.com <0xE2.0x9A.0x9B@gmail.com>:\r\n>\r\n> https://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode461\r\n> src/pkg/runtime/mgc0.c:461: itabtype =\r\n> ((PtrType*)efacevalue.type)->elem;\r\n> On 2012/12/17 21:31:06, remyoudompheng wrote:\r\n>> is itabtype a constant? I would expect the computation to happen in\r\n> mallocinit()\r\n>> or something.\r\n>\r\n> Yes, itabtype is a constant.\r\n>\r\n> This isn't causing performance issues, so the code can stay here.\r\n>\r\n> https://codereview.appspot.com/6945069/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-03 11:59:32.538440",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Atom,\n\nWhat is you plan wrt channels?\n\nI have that year old CL that never got to submitting:\nhttps://codereview.appspot.com/5250069/\n\nIt marks chans as NoPointers if the element type is NoPointers.\nI guess not it must be handled differently. The good news is that with precise GC we may always not scan Hchan itself and perhaps even not zeroize empty slots.",
			"disapproval": false,
			"date": "2013-01-03 17:40:35.886600",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/03 17:40:35, dvyukov wrote:\n> Hi Atom,\n> \n> What is you plan wrt channels?\n\nI plan to work on channels after CL 6114046 is closed.\n\n> I have that year old CL that never got to submitting:\n> https://codereview.appspot.com/5250069/\n> \n> It marks chans as NoPointers if the element type is NoPointers.\n\nI think it is possible that your CL will work with the tip of the Go repository.\n\nHowever, in the future the precise typeinfo of all channels will be known to the runtime. This may make the code in your CL redundant.\n\n> I guess not it must be handled differently. The good news is that with precise\n> GC we may always not scan Hchan itself and perhaps even not zeroize empty slots.\n\nOmitting the zeroing of empty slots seems possible.",
			"disapproval": false,
			"date": "2013-01-03 18:03:32.931930",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode747\nsrc/pkg/runtime/mgc0.c:747: flushptrbuf(ptrbuf, ptrbufpos-ptrbuf, &wp, &wbuf, &nobj, bitbuf);\nOn 2013/01/03 19:59:52, rsc wrote:\n> If you make the second argument &ptrbufpos instead of ptrbufpos-ptrbuf, then the\n> flushptrbuf function can do the ptrbufpos = ptrbuf assignment. Then the call is\n> just one line, and instead of the goto flush_buffers in the various places,\n> which then needs to deal with restarting the instruction, we can just put the\n> call there.\n> \n> for example:\n> \n> case GC_IFACE:\n> \tiface = (Iface*)(stack_top.b + pc[1]);\n> \tpc += 2;\n> \tif(iface->tab == nil)\n> \t\tbreak;\n> \t\n> \tif((void*)iface->tab >= arena_start && (void*)iface->tab < arena_used) {\n> \t\t*ptrbufpos = (PtrTarget){iface->tab, (uintptr)itabtype->gc};\n> \t\tif(++ptrbufpos == ptrbuf_end)\n> \t\t\tflushptrbuf(ptrbuf, &ptrbufpos, &wp, &wbuf, &nobj, bitbuf);\n>  \t}\n>  \t\n>  \tt = iface->tab->type;\n>  \tif(t->size <= sizeof(void*)) {\n>  \t\tif(t->kind & KindNoPointers)\n>  \t\t\tbreak;\n\n=== Point 1 ===\n\nThe general idea is that a single instruction is producing/generating a finite number of pointers. It can generate 1, 2, or 0 pointers. Maybe this should be written as a comment somewhere in the code.\n\nIn particular, the line:\n\n   if(t->kind & KindNoPointers)\n       break;\n\nis generating 0 pointers, which means that 'obj' and 'objti' are unused in this branch of code (assuming iface->tab is not in the arena).\n\nThere exist instructions which are generating 2 pointers. 2 values do not fit into 1 'obj' variable.\n\nThe fact that the number of generated pointers isn't exclusively 1 implies that the general structure of the code cannot be:\n\n    for(;;) {\n        obj = nil;\n        objti = 0;\n        switch(pc[0]) {\n        case ...\n            break or goto endprog;\n        }\n        if(obj >= arena_start && obj < arena_used) {\n            *ptrbufpos++ = (struct PtrTarget){obj, objti};\n            if(ptrbufpos == ptrbuf_end)\n                goto flush_buffers;\n        }\n    }\n\nbecause 'obj' is unused by an instruction, or the 1 variable isn't enough to hold 2 values.\n\nI understand that the 0-value case is solved by initializing obj to nil. But the 2-value case is unsolvable to 1 'obj' variable.\n\nThis is making it necessary to process the pointer(s) within the body of \"case GC_*: BODY\".\n\nAlso, CL 6114046 is utilizing 2 buffers (ptrbuf and objbuf). The 2nd buffer will be submitted for review in a next CL.\n\n=== Point 2 (minor point for now) ===\n\nThe code should use \"goto flush_buffers\" instead of the direct call. The reason for this is that the call flushptrbuf(...) should be in a single place (right now there are 2 such places). This will allow the single call to be inlined in order to avoid the overhead of the function call.\n\nI will use direct calls in this CL, and potentially replace them with gotos in a future CL.\n\nThe additional for(;;){} loop introduces a level of indentation (by 1 tab to the right). This may be hard to remove in the future.\n\n=== Point 3 ===\n\nAbout other comments: All other suggestions in the other comments are doable.\n\n>  \t\tobj = iface->data;\n>  \t\tif(t->kind == KindPtr)\n>  \t\t\tobjti = (uintptr)((PtrType*)t)->elem->gc;\n>  \t} else {\n>  \t\tobj = iface->data;\n>  \t\tobjti = (uintptr)t->gc;\n>  \t}\n>  \tbreak;",
			"disapproval": false,
			"date": "2013-01-03 22:51:23.499960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I realize you have plans to generalize much of this code, and those\r\nplans may invalidate some of the things I have suggested. However, I\r\nwould like each CL to stand on its own, and that means making this\r\nstep as understandable as possible.\r\n\r\nThe 0- and 1-pointer cases are the most common; they can be handled by\r\nthe obj and objti general case, and any case with more pointers can\r\nqueue them. I gave an example of this in the Iface* case.\r\n\r\nIf we end up using gotos and inlining things, that's fine, but not in\r\nthis CL. This CL is about functionality, and it should be as\r\nunderstandable and as readable as possible. When it comes time to work\r\non performance, we might have to sacrifice some of that, but let's\r\nwait on that decision until we can evaluate it in isolation.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-04 15:24:38.559010",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dvyukov@google.com, remyoudompheng@gmail.com, dave@cheney.net, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-04 16:21:39.001080",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode404\nsrc/pkg/runtime/mgc0.c:404: Slice *slicePtr;\nOn 2013/01/03 19:59:52, rsc wrote:\n> sliceptr or slice_ptr please\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode407\nsrc/pkg/runtime/mgc0.c:407: struct Frame stack[GC_STACK_CAPACITY+4];\nOn 2013/01/03 19:59:52, rsc wrote:\n> Please declare this at top level and introduce a typedef so you don't need\n> 'struct' keywords everywhere.\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode415\nsrc/pkg/runtime/mgc0.c:415: struct BufferList *scanbuffers;\nOn 2013/01/03 19:59:52, rsc wrote:\n> I missed this last time. Please introduce typedefs for these too and delete the\n> struct keywords.\n> \n> Also delete all the blank lines in the variable declaration block and merge the \n> various lines with the same type:\n> \n> Type *t, *itabtype;\n> uintptr *pc, precise_type, nominal_size;\n> Frame *stack_ptr, stack_top, stack[GC_STACK_CAPACITY+4];\n> \n> Then you don't need the // End of local variable declarations comment.\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode461\nsrc/pkg/runtime/mgc0.c:461: itabtype = ((PtrType*)efacevalue.type)->elem;\nOn 2012/12/17 21:31:06, remyoudompheng wrote:\n> is itabtype a constant? I would expect the computation to happen in mallocinit()\n> or something.\n\nitabtype is now initialized in function gc().\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode495\nsrc/pkg/runtime/mgc0.c:495: switch(pc[0]) {\nOn 2013/01/03 19:59:52, rsc wrote:\n> There is a lot of repetition here. I realize you are trying to squeeze speed,\n> but I would rather sacrifice speed for simplicity at this point. We can optimize\n> in separate CLs. Please make the structure here be:\n> \n>     for(;;) {\n>         obj = nil;\n>         objti = 0;\n>         switch(pc[0]) {\n>         case ...\n>             break or goto endprog;\n>         }\n>         if(obj >= arena_start && obj < arena_used) {\n>             *ptrbufpos++ = (struct PtrTarget){obj, objti};\n>             if(ptrbufpos == ptrbuf_end)\n>                 goto flush_buffers;\n>         }\n>     }\n> endloop:\n> \n> Most of the cases in the switch should break, like:\n> \n>     case GC_PTR:\n>         obj = *(void**)(stack_top.b + pc[1]);\n>         objti = pc[2];\n>         pc += 3;\n>         break;\n> \n>     case GC_SLICE:\n>         sliceptr = (Slice*)(stack_top.b + pc[1]);\n>         obj = sliceptr->array;\n>         objti = pc[2] | PRECISE | LOOP;\n>         if(sliceptr->cap == 0)\n>             obj = nil;\n>         break;\n> \n>     case GC_APTR:\n>         obj = *(void**)(stack_top.b + pc[1]);\n>         pc += 2;\n>         break;\n> \n>     ...\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode516\nsrc/pkg/runtime/mgc0.c:516: // If there are no other references to the backing array,\nOn 2013/01/03 19:59:52, rsc wrote:\n> This option looks fine. Please delete the if/else (as in my snippet above).\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode572\nsrc/pkg/runtime/mgc0.c:572: if(eface->type != nil && (eface->data >= arena_start && eface->data < arena_used)) {\nOn 2013/01/03 19:59:52, rsc wrote:\n> In the framework above, this should set obj and objti and break.\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode610\nsrc/pkg/runtime/mgc0.c:610: // iface->data\nOn 2013/01/03 19:59:52, rsc wrote:\n> The lines above do need to do the queueing of the first half, but then from here\n> down it should be just set obj and objti and break.\n> \n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode629\nsrc/pkg/runtime/mgc0.c:629: while(true) {\nOn 2013/01/03 19:59:52, rsc wrote:\n> while((i = stack_top.b) <= end_b) {\n>     stack_top.b += PtrSize;\n>     obj = *(byte**)i;\n>     if(obj...) { \n>         ...\n>     }\n> }\n> goto endprog;\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode655\nsrc/pkg/runtime/mgc0.c:655: goto trailing_pointers;\nOn 2013/01/03 19:59:52, rsc wrote:\n> trailing pointers is only used here. if nothing else it should be at the bottom\n> of this case, although i wonder if you can restructure the logic here to cut\n> some of the duplication. for example:\n> \n> case GC_END:\n> \tif(--stack_top.count > 0) {\n> \t\t// Next iteration if possible.\n> \t\telemsize = stack_top.elemsize;\n> \t\tstack_top.b += elemsize;\n> \t\tif(stack_top.b + elemsize - PtrSize < end_b) {\n> \t\t\tpc = stack_top.loop_or_ret;\n> \t\t\tbreak;\n> \t\t}\n> \t\ti = stack_top.b;\n> \t} else {\n> \t\t// Stack pop if possible.\n> \t\tif(stack_ptr+1 < stack+nelem(stack)) {\n> \t\t\tpc = stack_top.loop_or_ret;\n> \t\t\tstack_top = *stack_ptr++;\n> \t\t\tbreak;\n> \t\t}\n> \t\ti = (uintptr)b + nominal_size;\n> \t}\n> \tif(precise_type)\n> \t\tgoto endprog;\n> \t\n> \t// Did not have precise information.\n> \t... \"trailing_pointers\" code ...\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode687\nsrc/pkg/runtime/mgc0.c:687: goto next_instr;\nOn 2013/01/03 19:59:52, rsc wrote:\n> continue;\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode690\nsrc/pkg/runtime/mgc0.c:690: stack_top.count--;\nOn 2013/01/03 19:59:52, rsc wrote:\n> stack_top.count--;\n> if(stack_top.count != 0) {\n>     stack_top.b += stack_top.elemsize;\n>     pc = stack_top.loop_or_ret;\n> } else {\n>     stack_top = *stack_ptr++;\n>     pc++;\n> }\n> break;\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode709\nsrc/pkg/runtime/mgc0.c:709: *stack_ptr = stack_top;\nOn 2013/01/03 19:59:52, rsc wrote:\n> it's okay to put -- in the expression:\n> \n> *stack_ptr-- = stack_top;\n> stack_top = (Frame){1, 0, i, ret};\n> pc = target;\n> break;\n> \n> It also seems okay to halve the lines by avoiding the temporaries:\n> \n> *stack_ptr-- = stack_top;\n> stack_top = (Frame){1, 0, stack_top.b+pc[1], pc+3};\n> pc = (uintptr*)pc[2];\n> break;\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode713\nsrc/pkg/runtime/mgc0.c:713: goto next_instr;\nOn 2013/01/03 19:59:52, rsc wrote:\n> break;\n\ncontinue;\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode717\nsrc/pkg/runtime/mgc0.c:717: obj = *(void**)(stack_top.b + pc[1]);\nOn 2013/01/03 19:59:52, rsc wrote:\n> obj = *(void**)(stack_top.b + pc[1]);\n> pc += 3;\n> break;\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode730\nsrc/pkg/runtime/mgc0.c:730: obj = (void*)(stack_top.b + pc[1]);\nOn 2013/01/03 19:59:52, rsc wrote:\n> obj = (void*)(stack_top.b + pc[1]);\n> pc += 4;\n> break;\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode747\nsrc/pkg/runtime/mgc0.c:747: flushptrbuf(ptrbuf, ptrbufpos-ptrbuf, &wp, &wbuf, &nobj, bitbuf);\nOn 2013/01/03 19:59:52, rsc wrote:\n> If you make the second argument &ptrbufpos instead of ptrbufpos-ptrbuf, then the\n> flushptrbuf function can do the ptrbufpos = ptrbuf assignment. Then the call is\n> just one line, and instead of the goto flush_buffers in the various places,\n> which then needs to deal with restarting the instruction, we can just put the\n> call there.\n> \n> for example:\n> \n> case GC_IFACE:\n> \tiface = (Iface*)(stack_top.b + pc[1]);\n> \tpc += 2;\n> \tif(iface->tab == nil)\n> \t\tbreak;\n> \t\n> \tif((void*)iface->tab >= arena_start && (void*)iface->tab < arena_used) {\n> \t\t*ptrbufpos = (PtrTarget){iface->tab, (uintptr)itabtype->gc};\n> \t\tif(++ptrbufpos == ptrbuf_end)\n> \t\t\tflushptrbuf(ptrbuf, &ptrbufpos, &wp, &wbuf, &nobj, bitbuf);\n>  \t}\n>  \t\n>  \tt = iface->tab->type;\n>  \tif(t->size <= sizeof(void*)) {\n>  \t\tif(t->kind & KindNoPointers)\n>  \t\t\tbreak;\n>  \t\tobj = iface->data;\n>  \t\tif(t->kind == KindPtr)\n>  \t\t\tobjti = (uintptr)((PtrType*)t)->elem->gc;\n>  \t} else {\n>  \t\tobj = iface->data;\n>  \t\tobjti = (uintptr)t->gc;\n>  \t}\n>  \tbreak;\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/1/src/pkg/runtime/mgc0.c#newcode754\nsrc/pkg/runtime/mgc0.c:754: if( *(byte**)i != nil ) {\nOn 2013/01/03 19:59:52, rsc wrote:\n> drop spaces inside ( )\n\nDone.",
			"disapproval": false,
			"date": "2013-01-04 16:22:08.698960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good, thanks. Just a few minor things.\n\nhttps://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c#newcode488\nsrc/pkg/runtime/mgc0.c:488: for(;;) {\nPlease indent this to line up with the surrounding code.\n\nhttps://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c#newcode542\nsrc/pkg/runtime/mgc0.c:542: if(ptrbufpos+2+1 > ptrbuf_end)\nif(ptrbufpos+1 >= ptrbuf_end) should suffice\n\nhttps://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c#newcode604\nsrc/pkg/runtime/mgc0.c:604: // Do a rescan of the entire block.\nIsn't this overkill? Why not scan just the part from [b+i, b+n)?\nAlso, how can this happen?",
			"disapproval": false,
			"date": "2013-01-07 01:22:17.214340",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In CL description:\n\nUpdate Issue 909\n\n?",
			"disapproval": false,
			"date": "2013-01-10 20:19:35.916960",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/10 20:19:35, bradfitz wrote:\n> In CL description:\n> \n> Update Issue 909\n> \n> ?\n\nThere is more code pending to be submitted. We would need to check whether the partial implementation merged into go tip is effective against some of the programs where 32-bit garbage collection proved to be ineffective with go 1.0.3.",
			"disapproval": false,
			"date": "2013-01-10 20:31:27.133200",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dvyukov@google.com, remyoudompheng@gmail.com, dave@cheney.net, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-07 09:45:08.819610",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c#newcode488\nsrc/pkg/runtime/mgc0.c:488: for(;;) {\nOn 2013/01/07 01:22:17, rsc wrote:\n> Please indent this to line up with the surrounding code.\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c#newcode542\nsrc/pkg/runtime/mgc0.c:542: if(ptrbufpos+2+1 > ptrbuf_end)\nOn 2013/01/07 01:22:17, rsc wrote:\n> if(ptrbufpos+1 >= ptrbuf_end) should suffice\n\nDone.\n\nhttps://codereview.appspot.com/6945069/diff/7002/src/pkg/runtime/mgc0.c#newcode604\nsrc/pkg/runtime/mgc0.c:604: // Do a rescan of the entire block.\nOn 2013/01/07 01:22:17, rsc wrote:\n> Isn't this overkill? Why not scan just the part from [b+i, b+n)?\n> Also, how can this happen?\n\nstruct S { a A; b B }\ns := new(S)\nvar ap *A = &s.a\nf(ap)\n\nIf the garbage collector finds 'ap' before finding 's' then the type information associated with the block returned by new(S) will be incomplete. The rescan will force the GC (in a next CL) to try to retrieve precise type information for the block. It is true that GC could scan just [b+i, b+n) - this isn't implemented yet.\n\nSimilarly:\n\na := make([]T, 10, 20)\na0 := &a[0]\nf(a0)\n\nThe enqueue() call is a bit inefficient too.",
			"disapproval": false,
			"date": "2013-01-07 09:47:07.806880",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-10 20:03:19.705750",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's the next chunk? Walking maps?\r\n",
			"disapproval": false,
			"date": "2013-01-10 20:03:46.480650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's an \"update\", not a \"fixes\"\r\n\r\nSaying \"Update Issue 909\" just adds notes to the bug that progress is being\r\nmade.\r\n\r\n\r\nOn Thu, Jan 10, 2013 at 12:31 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/01/10 20:19:35, bradfitz wrote:\r\n>\r\n>> In CL description:\r\n>>\r\n>\r\n>  Update Issue 909\r\n>>\r\n>\r\n>  ?\r\n>>\r\n>\r\n> There is more code pending to be submitted. We would need to check\r\n> whether the partial implementation merged into go tip is effective\r\n> against some of the programs where 32-bit garbage collection proved to\r\n> be ineffective with go 1.0.3.\r\n>\r\n> https://codereview.appspot.**com/6945069/<https://codereview.appspot.com/6945069/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-10 20:32:33.047740",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/10 20:03:46, rsc wrote:\n> What's the next chunk? Walking maps?\n\nI suppose it will be maps.",
			"disapproval": false,
			"date": "2013-01-10 20:20:54.302890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d96fe1298b88 ***\n\nruntime: interpret type information during garbage collection\n\nR=rsc, dvyukov, remyoudompheng, dave, minux.ma, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/6945069\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-10 20:46:10.169070",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's okay, we don't need to spam issue 909.\r\nI submitted this but am about to disappear - if it breaks something,\r\nsomeone else will have to hg undo it.\r\nBut I tested darwin/amd64 and darwin/386 so it should be fine.\r\n",
			"disapproval": false,
			"date": "2013-01-10 20:46:42.327750",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/10 20:32:33, bradfitz wrote:\n> It's an \"update\", not a \"fixes\"\n> \n> Saying \"Update Issue 909\" just adds notes to the bug that progress is being\n> made.\n\nThe garbage collector is still unable to collect memory in trivial Go programs. It appears that some pointers preventing the GC to free blocks come from mprof.goc which hasn't been merged into tip yet.\n \n> On Thu, Jan 10, 2013 at 12:31 PM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> \n> > On 2013/01/10 20:19:35, bradfitz wrote:\n> >\n> >> In CL description:\n> >>\n> >\n> >  Update Issue 909\n> >>\n> >\n> >  ?\n> >>\n> >\n> > There is more code pending to be submitted. We would need to check\n> > whether the partial implementation merged into go tip is effective\n> > against some of the programs where 32-bit garbage collection proved to\n> > be ineffective with go 1.0.3.\n> >\n> >\n> https://codereview.appspot.**com/6945069/%3Chttps://codereview.appspot.com/6945069/>\n> >",
			"disapproval": false,
			"date": "2013-01-11 15:51:09.169640",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6945069: runtime: interpret type information during garbage coll...",
	"created": "2012-12-17 16:44:20.606200",
	"patchsets": [
		1,
		7002,
		17001
	],
	"modified": "2013-01-11 15:51:09.399000",
	"closed": true,
	"issue": 6945069
}