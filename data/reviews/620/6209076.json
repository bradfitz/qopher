{
	"description": "go.crypto/ssh: make window request for zero bytes a noop.\n\nOn server one method of getting the headers before reading\ndata is to read the client with a zero length data buffer.\nThis turns a zero read from a panic into a noop.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"gustav.paul@gmail.com",
		"agl@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nWhen you say headers, do you mean extended data ? If so I guess the requirement to do a noop read to get to the extended data is a side effect of how it's implemented.\n\nDave",
			"disapproval": false,
			"date": "2012-05-17 22:21:48.176492",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On my ssh server, I do something like:\nemptyBuffer := make([]byte, 0)\n// Get env, exec cmd, etc...\nfor ... {\n  channelWrap.Read(emptyBuffer)\n}\nfunc (cw *channelWrap) Read(data []byte) .., .. {\n  _, err := cw.channel.Read(data)\n  if err is not nil and is a ChannelRequest {\n    procRequest(cw, req)\n  }\n}\n\nThis code will result in a panic(\"illegal window update\")\nfrom channel.go:L185\njust because I gave read an empty buffer.\n\nI don't care for the style it produces, but it works, I can't complain. Either way this should be changed. I'd prefer to have the option to handle these synchronously on the connection accept goroutine.\n\nOn 2012/05/17 22:25:23, agl1 wrote:\n> Are you suggesting that you have an external ssh implementation that's sending\n> zero window updates, or are *we* sending them in some situation? If the latter,\n> we stop stop sending them.",
			"disapproval": false,
			"date": "2012-05-17 22:33:03.987932",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, gustav.paul@gmail.com, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-05-17 22:08:46.532950",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Agreed. I've read through the RFC a few times and it's mute on the lower bound for a window adjust. \r\n\r\nI think it's fine to submit this as is. \r\n\r\nOn 19/05/2012, at 2:14, Adam Langley <agl@golang.org> wrote:\r\n\r\n> On Fri, May 18, 2012 at 12:11 PM,  <kardianos@gmail.com> wrote:\r\n>> I believe you are correct in your analysis. Apparently PUTTY (plink) on\r\n>> Windows will send a zero window adjustment. Putty (plink) on linux, or\r\n>> OpenSSH on Linux behaves as expected.\r\n> \r\n> Since it's an external client, I believe we should be robust to this\r\n> so LGTM. However, we should wait for Dave before landing.\r\n> \r\n> \r\n> Cheers\r\n> \r\n> AGL\r\n",
			"disapproval": false,
			"date": "2012-05-18 23:06:46.558249",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Are you suggesting that you have an external ssh implementation that's sending zero window updates, or are *we* sending them in some situation? If the latter, we stop stop sending them.",
			"disapproval": false,
			"date": "2012-05-17 22:25:23.586036",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 18, 2012 at 12:11 PM,  <kardianos@gmail.com> wrote:\r\n> I believe you are correct in your analysis. Apparently PUTTY (plink) on\r\n> Windows will send a zero window adjustment. Putty (plink) on linux, or\r\n> OpenSSH on Linux behaves as expected.\r\n\r\nSince it's an external client, I believe we should be robust to this\r\nso LGTM. However, we should wait for Dave before landing.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-05-18 16:14:04.752483",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was concerned that we needed to fix this for both the server and the client.\n\nhttp://codereview.appspot.com/6209082\n\nencompasses this fix and includes some tests.",
			"disapproval": false,
			"date": "2012-05-19 02:11:06.322349",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm having trouble following the logic here. As I understand it channel.go:185 will panic if the server receives a window update of zero bytes from the client. \n\nWould you be able to attach a test case to this CL so I can see what is broken prior to this change.",
			"disapproval": false,
			"date": "2012-05-18 08:09:55.940383",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe you are correct in your analysis. Apparently PUTTY (plink) on Windows will send a zero window adjustment. Putty (plink) on linux, or OpenSSH on Linux behaves as expected.\n\nThus I do not have a simple test case, except for you to clone:\nhttps://bitbucket.org/kardianos/vcsguard\nThen access vcsguard from a Windows box with PUTTY (plink).\n\n\nOn 2012/05/18 08:09:55, dfc wrote:\n> I'm having trouble following the logic here. As I understand it channel.go:185\n> will panic if the server receives a window update of zero bytes from the client.\n> \n> \n> Would you be able to attach a test case to this CL so I can see what is broken\n> prior to this change.",
			"disapproval": false,
			"date": "2012-05-18 16:11:24.495875",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 6209076: go.crypto/ssh: make window request for zero bytes a noop.",
	"created": "2012-05-17 22:08:16.532386",
	"patchsets": [
		1,
		3,
		4001
	],
	"modified": "2012-05-19 02:24:27.292913",
	"closed": true,
	"issue": 6209076
}