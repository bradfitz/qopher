{
	"description": "cmd/gc: inline slice[arr,str] in the frontend (mostly).",
	"cc": [
		"rsc@golang.org",
		"ality@pbrane.org",
		"rogpeppe@gmail.com",
		"minux.ma@gmail.com",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 16, 2012 at 16:30, roger peppe <rogpeppe@gmail.com> wrote:\n\n> what does the code look like after the linker has done with it?\n>\n>\npre:\n\n      2 002000  main.h               | (3)      TEXT\n main.h+0(SB),$171798691840\n      3 002000  65488b0c25a0080000   | (3)      MOVQ    2208(GS),CX\n      4 002009  483b21               | (3)      CMPQ    SP,(CX)\n      5 00200c  7705                 | (3)      JHI     ,2013\n      6 00200e  e8b9fe0000           | (3)      CALL\n ,11ecc+runtime.morestack40\n      7 002013  8b442414             | (3)      MOVL    main.s+20(SP),AX\n      8 002017  8b5c2418             | (5)      MOVL    main.lo+24(SP),BX\n      9 00201b  4863db               | (5)      MOVLQSX BX,BX\n     10 00201e  8b6c241c             | (5)      MOVL    main.hi+28(SP),BP\n     11 002022  4863ed               | (5)      MOVLQSX BP,BP\n     12 002025  448bc0               | (5)      MOVLQZX AX,R8\n     13 002028  4c39c5               | (5)      CMPQ    BP,R8\n     14 00202b  7605                 | (5)      JLS     ,2032\n     15 00202d  e8eba70000           | (5)      CALL\n ,c81d+runtime.panicslice\n     16 002032  4839eb               | (5)      CMPQ    BX,BP\n     17 002035  77f6                 | (5)      JHI     ,202d\n     18 002037  89ed                 | (5)      MOVQL   BP,BP\n     19 002039  29dd                 | (5)      SUBL    BX,BP\n     20 00203b  896c2428             | (5)      MOVL\n BP,main..noname+40(SP)\n     21 00203f  89c5                 | (5)      MOVL    AX,BP\n     22 002041  29dd                 | (5)      SUBL    BX,BP\n     23 002043  896c242c             | (5)      MOVL\n BP,main..noname+44(SP)\n     24 002047  486bdb04             | (5)      IMULQ   $4,BX\n     25 00204b  48035c2408           | (5)      ADDQ    main.s+8(SP),BX\n     26 002050  48895c2420           | (5)      MOVQ\n BX,main..noname+32(SP)\n     27 002055  c3                   | (5)      RET     ,\n\n\n\n\npost:\n\n      2 002000  main.h               | (3)      TEXT\n main.h+0(SB),$171798691856\n      3 002000  65488b0c25a0080000   | (3)      MOVQ    2208(GS),CX\n      4 002009  483b21               | (3)      CMPQ    SP,(CX)\n      5 00200c  7705                 | (3)      JHI     ,2013\n      6 00200e  e8e1fe0000           | (3)      CALL\n ,11ef4+runtime.morestack40\n      7 002013  4883ec10             | (3)      SUBQ    $16,SP\n      8 002017  488b5c2418           | (5)      MOVQ    main.s+24(SP),BX\n      9 00201c  48891c24             | (5)      MOVQ\n BX,main.autotmp_0000+0(SP)\n     10 002020  8b5c2420             | (5)      MOVL    main.s+32(SP),BX\n     11 002024  8b542424             | (5)      MOVL    main.s+36(SP),DX\n     12 002028  8b4c242c             | (5)      MOVL    main.hi+44(SP),CX\n     13 00202c  8b442428             | (5)      MOVL    main.lo+40(SP),AX\n     14 002030  39ca                 | (5)      CMPL    DX,CX\n     15 002032  7232                 | (5)      JCS     ,2066\n     16 002034  39c1                 | (5)      CMPL    CX,AX\n     17 002036  722e                 | (5)      JCS     ,2066\n     18 002038  89cb                 | (5)      MOVL    CX,BX\n     19 00203a  29c3                 | (5)      SUBL    AX,BX\n     20 00203c  895c2438             | (5)      MOVL\n BX,main..noname+56(SP)\n     21 002040  89d3                 | (5)      MOVL    DX,BX\n     22 002042  29c3                 | (5)      SUBL    AX,BX\n     23 002044  895c243c             | (5)      MOVL\n BX,main..noname+60(SP)\n     24 002048  8bd8                 | (5)      MOVLQZX AX,BX\n     25 00204a  48c7c504000000       | (5)      MOVQ    $4,BP\n     26 002051  480fafdd             | (5)      IMULQ   BP,BX\n     27 002055  488b2c24             | (5)      MOVQ\n main.autotmp_0000+0(SP),BP\n     28 002059  4801eb               | (5)      ADDQ    BP,BX\n     29 00205c  48895c2430           | (5)      MOVQ\n BX,main..noname+48(SP)\n     30 002061  4883c410             | (5)      ADDQ    $16,SP\n     31 002065  c3                   | (5)      RET     ,\n     32 002066  e8daa70000           | (5)      CALL\n ,c845+runtime.panicslice\n     33 00206b  ebcb                 | (5)      JMP     ,2038\n\n\n\n\n> On 16 April 2012 13:56, Luuk van Dijk <lvd@google.com> wrote:\n> >\n> >\n> > On Mon, Apr 16, 2012 at 13:46, Anthony Martin <ality@pbrane.org> wrote:\n> >>\n> >> This is glorious. Over 1000 lines deleted.\n> >>\n> >> Do we have any slice heavy benchmarks to\n> >> see the effect it has?\n> >\n> >\n> > suggesions for realistic benchmarks are welcome.  the newly generated\n> code\n> > tends to have some spurious loads and stores that the registerizer\n> doesn't\n> > seem to catch, i'll look closer at that, but on the other hand, this now\n> > handles /all OSLICExxx whereas the old code would leave some calls to\n> > runtime.slicexxx in.\n> >\n> > to get an idea here is the old/new 6g -S output for\n> >\n> > func h(s []int, lo, hi int) []int {\n> >         return s[lo:hi]\n> > }\n> >\n> > before:\n> >\n> > 0000 (sl.go:3) TEXT    h+0(SB),$0-40\n> > 0001 (sl.go:3) MOVL    s+12(FP),AX\n> > 0002 (sl.go:4) MOVL    lo+16(FP),BX\n> > 0003 (sl.go:4) MOVLQSX BX,BX\n> > 0004 (sl.go:4) MOVL    hi+20(FP),BP\n> > 0005 (sl.go:4) MOVLQSX BP,BP\n> > 0006 (sl.go:4) MOVLQZX AX,R8\n> > 0007 (sl.go:4) CMPQ    BP,R8\n> > 0008 (sl.go:4) JLS     ,10\n> > 0009 (sl.go:4) CALL    ,runtime.panicslice+0(SB)\n> > 0010 (sl.go:4) CMPQ    BX,BP\n> > 0011 (sl.go:4) JHI     ,9\n> > 0012 (sl.go:4) MOVQL   BP,BP\n> > 0013 (sl.go:4) SUBL    BX,BP\n> > 0014 (sl.go:4) MOVL    BP,.noname+32(FP)\n> > 0015 (sl.go:4) MOVL    AX,BP\n> > 0016 (sl.go:4) SUBL    BX,BP\n> > 0017 (sl.go:4) MOVL    BP,.noname+36(FP)\n> > 0018 (sl.go:4) IMULQ   $4,BX\n> > 0019 (sl.go:4) ADDQ    s+0(FP),BX\n> > 0020 (sl.go:4) MOVQ    BX,.noname+24(FP)\n> > 0021 (sl.go:4) RET     ,\n> >\n> >\n> > after:\n> >\n> > 0000 (sl.go:3) TEXT    h+0(SB),$16-40\n> > 0001 (sl.go:4) MOVQ    s+0(FP),BX\n> > 0002 (sl.go:4) MOVQ    BX,autotmp_0000+-16(SP)\n> > 0003 (sl.go:4) MOVL    s+8(FP),BX\n> > 0004 (sl.go:4) MOVL    s+12(FP),DX\n> > 0005 (sl.go:4) MOVL    hi+20(FP),CX\n> > 0006 (sl.go:4) MOVL    lo+16(FP),AX\n> > 0007 (sl.go:4) CMPL    DX,CX\n> > 0008 (sl.go:4) JCS     ,12\n> > 0009 (sl.go:4) CMPL    CX,AX\n> > 0010 (sl.go:4) JCS     ,12\n> > 0011 (sl.go:4) JMP     ,13\n> > 0012 (sl.go:4) CALL    ,runtime.panicslice+0(SB)\n> > 0013 (sl.go:4) MOVL    CX,BX\n> > 0014 (sl.go:4) SUBL    AX,BX\n> > 0015 (sl.go:4) MOVL    BX,.noname+32(FP)\n> > 0016 (sl.go:4) MOVL    DX,BX\n> > 0017 (sl.go:4) SUBL    AX,BX\n> > 0018 (sl.go:4) MOVL    BX,.noname+36(FP)\n> > 0019 (sl.go:4) MOVLQZX AX,BX\n> > 0020 (sl.go:4) MOVQ    $4,BP\n> > 0021 (sl.go:4) IMULQ   BP,BX\n> > 0022 (sl.go:4) MOVQ    autotmp_0000+-16(SP),BP\n> > 0023 (sl.go:4) ADDQ    BP,BX\n> > 0024 (sl.go:4) MOVQ    BX,.noname+24(FP)\n> > 0025 (sl.go:4) RET     ,\n> >\n> >\n> >\n>\n",
			"disapproval": false,
			"date": "2012-04-16 14:44:49.954427",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 16, 2012 at 13:46, Anthony Martin <ality@pbrane.org> wrote:\n\n> This is glorious. Over 1000 lines deleted.\n>\n> Do we have any slice heavy benchmarks to\n> see the effect it has?\n>\n\nsuggesions for realistic benchmarks are welcome.  the newly generated code\ntends to have some spurious loads and stores that the registerizer doesn't\nseem to catch, i'll look closer at that, but on the other hand, this now\nhandles /all OSLICExxx whereas the old code would leave some calls to\nruntime.slicexxx in.\n\nto get an idea here is the old/new 6g -S output for\n\nfunc h(s []int, lo, hi int) []int {\n        return s[lo:hi]\n}\n\nbefore:\n\n0000 (sl.go:3) TEXT    h+0(SB),$0-40\n0001 (sl.go:3) MOVL    s+12(FP),AX\n0002 (sl.go:4) MOVL    lo+16(FP),BX\n0003 (sl.go:4) MOVLQSX BX,BX\n0004 (sl.go:4) MOVL    hi+20(FP),BP\n0005 (sl.go:4) MOVLQSX BP,BP\n0006 (sl.go:4) MOVLQZX AX,R8\n0007 (sl.go:4) CMPQ    BP,R8\n0008 (sl.go:4) JLS     ,10\n0009 (sl.go:4) CALL    ,runtime.panicslice+0(SB)\n0010 (sl.go:4) CMPQ    BX,BP\n0011 (sl.go:4) JHI     ,9\n0012 (sl.go:4) MOVQL   BP,BP\n0013 (sl.go:4) SUBL    BX,BP\n0014 (sl.go:4) MOVL    BP,.noname+32(FP)\n0015 (sl.go:4) MOVL    AX,BP\n0016 (sl.go:4) SUBL    BX,BP\n0017 (sl.go:4) MOVL    BP,.noname+36(FP)\n0018 (sl.go:4) IMULQ   $4,BX\n0019 (sl.go:4) ADDQ    s+0(FP),BX\n0020 (sl.go:4) MOVQ    BX,.noname+24(FP)\n0021 (sl.go:4) RET     ,\n\n\nafter:\n\n0000 (sl.go:3) TEXT    h+0(SB),$16-40\n0001 (sl.go:4) MOVQ    s+0(FP),BX\n0002 (sl.go:4) MOVQ    BX,autotmp_0000+-16(SP)\n0003 (sl.go:4) MOVL    s+8(FP),BX\n0004 (sl.go:4) MOVL    s+12(FP),DX\n0005 (sl.go:4) MOVL    hi+20(FP),CX\n0006 (sl.go:4) MOVL    lo+16(FP),AX\n0007 (sl.go:4) CMPL    DX,CX\n0008 (sl.go:4) JCS     ,12\n0009 (sl.go:4) CMPL    CX,AX\n0010 (sl.go:4) JCS     ,12\n0011 (sl.go:4) JMP     ,13\n0012 (sl.go:4) CALL    ,runtime.panicslice+0(SB)\n0013 (sl.go:4) MOVL    CX,BX\n0014 (sl.go:4) SUBL    AX,BX\n0015 (sl.go:4) MOVL    BX,.noname+32(FP)\n0016 (sl.go:4) MOVL    DX,BX\n0017 (sl.go:4) SUBL    AX,BX\n0018 (sl.go:4) MOVL    BX,.noname+36(FP)\n0019 (sl.go:4) MOVLQZX AX,BX\n0020 (sl.go:4) MOVQ    $4,BP\n0021 (sl.go:4) IMULQ   BP,BX\n0022 (sl.go:4) MOVQ    autotmp_0000+-16(SP),BP\n0023 (sl.go:4) ADDQ    BP,BX\n0024 (sl.go:4) MOVQ    BX,.noname+24(FP)\n0025 (sl.go:4) RET     ,\n",
			"disapproval": false,
			"date": "2012-04-16 12:56:18.060742",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "6g and 8g pass all tests\nfor 5g i need to be able to test somewhere\n/L\n\nOn Mon, Apr 16, 2012 at 13:30, <lvd@google.com> wrote:\n\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> cmd/gc: inline slice[arr,str] in the frontend (mostly).\n>\n> Please review this at http://codereview.appspot.com/**5966075/<http://codereview.appspot.com/5966075/>\n>\n> Affected files:\n>  M src/cmd/5g/cgen.c\n>  M src/cmd/5g/gg.h\n>  M src/cmd/5g/ggen.c\n>  M src/cmd/5g/gsubr.c\n>  M src/cmd/6g/cgen.c\n>  M src/cmd/6g/gg.h\n>  M src/cmd/6g/ggen.c\n>  M src/cmd/6g/gsubr.c\n>  M src/cmd/8g/cgen.c\n>  M src/cmd/8g/gg.h\n>  M src/cmd/8g/ggen.c\n>  M src/cmd/8g/gsubr.c\n>  M src/cmd/gc/builtin.c\n>  M src/cmd/gc/gen.c\n>  M src/cmd/gc/go.h\n>  M src/cmd/gc/runtime.go\n>  M src/cmd/gc/walk.c\n>  M src/pkg/runtime/slice.c\n>  M src/pkg/runtime/string.goc\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-04-16 11:33:02.764606",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-16 11:30:40.896781",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is glorious. Over 1000 lines deleted.\n\nDo we have any slice heavy benchmarks to\nsee the effect it has?\n\n  Anthony\n",
			"disapproval": false,
			"date": "2012-04-16 11:46:43.250843",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what does the code look like after the linker has done with it?\n\nOn 16 April 2012 13:56, Luuk van Dijk <lvd@google.com> wrote:\n>\n>\n> On Mon, Apr 16, 2012 at 13:46, Anthony Martin <ality@pbrane.org> wrote:\n>>\n>> This is glorious. Over 1000 lines deleted.\n>>\n>> Do we have any slice heavy benchmarks to\n>> see the effect it has?\n>\n>\n> suggesions for realistic benchmarks are welcome. \u00a0the newly generated code\n> tends to have some spurious loads and stores that the registerizer doesn't\n> seem to catch, i'll look closer at that, but on the other hand, this now\n> handles /all OSLICExxx whereas the old code would leave some calls to\n> runtime.slicexxx in.\n>\n> to get an idea here is the old/new 6g -S output for\n>\n> func h(s []int, lo, hi int) []int {\n> \u00a0 \u00a0 \u00a0 \u00a0 return s[lo:hi]\n> }\n>\n> before:\n>\n> 0000 (sl.go:3) TEXT \u00a0 \u00a0h+0(SB),$0-40\n> 0001 (sl.go:3) MOVL \u00a0 \u00a0s+12(FP),AX\n> 0002 (sl.go:4) MOVL \u00a0 \u00a0lo+16(FP),BX\n> 0003 (sl.go:4) MOVLQSX BX,BX\n> 0004 (sl.go:4) MOVL \u00a0 \u00a0hi+20(FP),BP\n> 0005 (sl.go:4) MOVLQSX BP,BP\n> 0006 (sl.go:4) MOVLQZX AX,R8\n> 0007 (sl.go:4) CMPQ \u00a0 \u00a0BP,R8\n> 0008 (sl.go:4) JLS \u00a0 \u00a0 ,10\n> 0009 (sl.go:4) CALL \u00a0 \u00a0,runtime.panicslice+0(SB)\n> 0010 (sl.go:4) CMPQ \u00a0 \u00a0BX,BP\n> 0011 (sl.go:4) JHI \u00a0 \u00a0 ,9\n> 0012 (sl.go:4) MOVQL \u00a0 BP,BP\n> 0013 (sl.go:4) SUBL \u00a0 \u00a0BX,BP\n> 0014 (sl.go:4) MOVL \u00a0 \u00a0BP,.noname+32(FP)\n> 0015 (sl.go:4) MOVL \u00a0 \u00a0AX,BP\n> 0016 (sl.go:4) SUBL \u00a0 \u00a0BX,BP\n> 0017 (sl.go:4) MOVL \u00a0 \u00a0BP,.noname+36(FP)\n> 0018 (sl.go:4) IMULQ \u00a0 $4,BX\n> 0019 (sl.go:4) ADDQ \u00a0 \u00a0s+0(FP),BX\n> 0020 (sl.go:4) MOVQ \u00a0 \u00a0BX,.noname+24(FP)\n> 0021 (sl.go:4) RET \u00a0 \u00a0 ,\n>\n>\n> after:\n>\n> 0000 (sl.go:3) TEXT \u00a0 \u00a0h+0(SB),$16-40\n> 0001 (sl.go:4) MOVQ \u00a0 \u00a0s+0(FP),BX\n> 0002 (sl.go:4) MOVQ \u00a0 \u00a0BX,autotmp_0000+-16(SP)\n> 0003 (sl.go:4) MOVL \u00a0 \u00a0s+8(FP),BX\n> 0004 (sl.go:4) MOVL \u00a0 \u00a0s+12(FP),DX\n> 0005 (sl.go:4) MOVL \u00a0 \u00a0hi+20(FP),CX\n> 0006 (sl.go:4) MOVL \u00a0 \u00a0lo+16(FP),AX\n> 0007 (sl.go:4) CMPL \u00a0 \u00a0DX,CX\n> 0008 (sl.go:4) JCS \u00a0 \u00a0 ,12\n> 0009 (sl.go:4) CMPL \u00a0 \u00a0CX,AX\n> 0010 (sl.go:4) JCS \u00a0 \u00a0 ,12\n> 0011 (sl.go:4) JMP \u00a0 \u00a0 ,13\n> 0012 (sl.go:4) CALL \u00a0 \u00a0,runtime.panicslice+0(SB)\n> 0013 (sl.go:4) MOVL \u00a0 \u00a0CX,BX\n> 0014 (sl.go:4) SUBL \u00a0 \u00a0AX,BX\n> 0015 (sl.go:4) MOVL \u00a0 \u00a0BX,.noname+32(FP)\n> 0016 (sl.go:4) MOVL \u00a0 \u00a0DX,BX\n> 0017 (sl.go:4) SUBL \u00a0 \u00a0AX,BX\n> 0018 (sl.go:4) MOVL \u00a0 \u00a0BX,.noname+36(FP)\n> 0019 (sl.go:4) MOVLQZX AX,BX\n> 0020 (sl.go:4) MOVQ \u00a0 \u00a0$4,BP\n> 0021 (sl.go:4) IMULQ \u00a0 BP,BX\n> 0022 (sl.go:4) MOVQ \u00a0 \u00a0autotmp_0000+-16(SP),BP\n> 0023 (sl.go:4) ADDQ \u00a0 \u00a0BP,BX\n> 0024 (sl.go:4) MOVQ \u00a0 \u00a0BX,.noname+24(FP)\n> 0025 (sl.go:4) RET \u00a0 \u00a0 ,\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-04-16 14:30:42.943904",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/16 11:33:02, lvd wrote:\n> 6g and 8g pass all tests\n> for 5g i need to be able to test somewhere\nafter removed the unused variable (Node m) in 5g/gsubr.c, ./all.bash failed test/nilptr.go:\nrun        nilptr.go           : incorrect output\npanic: memory reference did not panic\ngoroutine 1 [running]:\nmain._func_001(0x1ce0c, 0x10e60)\n\t/mnt/work2/tmp/gobuilder/linux-arm/test/nilptr.go:46 +0x78\nmain.shouldPanic(0x10e60, 0x0)\n\t/mnt/work2/tmp/gobuilder/linux-arm/test/nilptr.go:49 +0x50\nmain.main()\n\t/mnt/work2/tmp/gobuilder/linux-arm/test/nilptr.go:33 +0x94\ngoroutine 2 [syscall]:\ncreated by runtime.main\n\nAlso, I think the test (in /test) is slower (14min vs. 7min) with this CL applied.",
			"disapproval": false,
			"date": "2012-04-17 18:18:05.073919",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This should fix the test failure (./all.bash passed on the Linux/ARM builder).\n\nI need more investigations for the possible performance regression.\n\nhttp://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c\nFile src/cmd/5g/gsubr.c (right):\n\nhttp://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c#newcode1208\nsrc/cmd/5g/gsubr.c:1208: //\tTODO lvd\nvoid\ncheckref(Node *n)\n{\n    Node m1, m2;\n\n    if(n->type->type->width < unmappedzero)\n        return;\n\n    regalloc(&m1, types[TUINTPTR], n);\n    regalloc(&m2, types[TUINT8], n);\n    cgen(n, &m1);\n    m1.xoffset = 0; \n    m1.op = OINDREG;\n    m1.type = types[TUINT8];\n    gins(AMOVBU, &m1, &m2);\n    regfree(&m2);\n    regfree(&m1);\n}",
			"disapproval": false,
			"date": "2012-04-17 18:54:49.732986",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I hand patched minux's suggested checkref only my 5g system and now\nall the tests pass, however I share the concern that there has been a\nperformance regression. I'll dig into it more today but anecdotally\nsrc/test/run took 23 minutes (i'll confirm the pre cl times) and\nanything that needs to use go/parser etc (so the go tool, the api\ntool) take signficantly longer and appear to be cpu bound.\n\nCheers\n\nDave\n\nOn Wed, Apr 18, 2012 at 6:41 AM, Luuk van Dijk <lvd@google.com> wrote:\n>\n>\n> On Tue, Apr 17, 2012 at 22:39, Luuk van Dijk <lvd@google.com> wrote:\n>>>>\n>>>>\n>>>> http://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c#newcode1208\n>>>> src/cmd/5g/gsubr.c:1208: // \u00a0 \u00a0 TODO lvd\n>>>> void\n>>>> checkref(Node *n)\n>>>> {\n>>>> \u00a0 \u00a0Node m1, m2;\n>>>>\n>>>> \u00a0 \u00a0if(n->type->type->width < unmappedzero)\n>>>> \u00a0 \u00a0 \u00a0 \u00a0return;\n>>>>\n>>>> \u00a0 \u00a0regalloc(&m1, types[TUINTPTR], n);\n>>>> \u00a0 \u00a0regalloc(&m2, types[TUINT8], n);\n>>>> \u00a0 \u00a0cgen(n, &m1);\n>>>> \u00a0 \u00a0m1.xoffset = 0;\n>>>> \u00a0 \u00a0m1.op = OINDREG;\n>>>> \u00a0 \u00a0m1.type = types[TUINT8];\n>>>> \u00a0 \u00a0gins(AMOVBU, &m1, &m2);\n>>>> \u00a0 \u00a0regfree(&m2);\n>>>> \u00a0 \u00a0regfree(&m1);\n>>>> }\n>>>>\n>>>> http://codereview.appspot.com/5966075/\n>>>\n>>>\n>>\n>\n> i added your checkref to my CL. \u00a0thanks again.\n>\n> /L\n",
			"disapproval": false,
			"date": "2012-04-18 00:56:22.417607",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Apr 18, 2012 at 08:42, Luuk van Dijk <lvd@google.com> wrote:\n\n>\n>\n> On Wed, Apr 18, 2012 at 08:29, Luuk van Dijk <lvd@google.com> wrote:\n>\n>> actually, on 386 it's terrible too, and even on amd64, there's a 33%\n>> slowdown for sliceslice.  this needs some more work.\n>\n>\n> part of it seems to be due to the safeexpr(n->left) i turned into a\n> copyexpr(n->left) in the last revision to fix a crashing case.   hold off\n> your reviews, i'll hammer on it some more.\n>\n>\ni uploaded a new revision that undoes that copyexpr except in one case for\nwhich i still have to find a better fix (and the root cause).\n\nthis gets the 'realistic' benchmarks sane again on amd64 and 386 with some\nbig wins, presumably due to slicestr getting inlined now, and some small\nlosses due to sliceslice and slicearr taking 25% longer (1.85 vs. 1.4ns)\n\ni expect the factor 2 on arm to be gone too.\n\nlooking at the generated assembly, i can only explain it from the new\nlayout of the bounds check which goes from\n\n0016 (sl_test.go:14) MOVLQSX SI,BX\n0017 (sl_test.go:14) MOVLQSX DX,BP\n0018 (sl_test.go:14) MOVLQZX CX,R8\n0019 (sl_test.go:14) CMPQ    BP,R8\n0020 (sl_test.go:14) JLS     ,22\n0021 (sl_test.go:14) CALL    ,runtime.panicslice+0(SB)\n0022 (sl_test.go:14) CMPQ    BX,BP\n0023 (sl_test.go:14) JHI     ,21\n\nto\n\n0017 (sl_test.go:14) MOVL    R10,DX\n0018 (sl_test.go:14) MOVL    DI,CX\n0019 (sl_test.go:14) MOVL    R8,AX\n0020 (sl_test.go:14) CMPL    R10,DI\n0021 (sl_test.go:14) JCS     ,25\n0022 (sl_test.go:14) CMPL    DI,R8\n0023 (sl_test.go:14) JCS     ,25\n0024 (sl_test.go:14) JMP     ,26\n0025 (sl_test.go:14) CALL    ,runtime.panicslice+0(SB)\n\nI'll continue to work on this.\n",
			"disapproval": false,
			"date": "2012-04-18 08:01:18.954772",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thank you!  i hadn't gotten around to figuring out that missing bit and i\ndidn't have an arm to play on.\n\nOn Tue, Apr 17, 2012 at 20:54, <minux.ma@gmail.com> wrote:\n\n> This should fix the test failure (./all.bash passed on the Linux/ARM\n> builder).\n>\n> I need more investigations for the possible performance regression.\n>\n>\nfor 5g, the original cgen_inline wasn't even called afaict, so it would\nalways call the pkg/runtime functions.   a factor 2 sounds excessive though.\n\n\n>\n> http://codereview.appspot.com/**5966075/diff/24001/src/cmd/5g/**gsubr.c<http://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c>\n> File src/cmd/5g/gsubr.c (right):\n>\n> http://codereview.appspot.com/**5966075/diff/24001/src/cmd/5g/**\n> gsubr.c#newcode1208<http://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c#newcode1208>\n> src/cmd/5g/gsubr.c:1208: //     TODO lvd\n> void\n> checkref(Node *n)\n> {\n>    Node m1, m2;\n>\n>    if(n->type->type->width < unmappedzero)\n>        return;\n>\n>    regalloc(&m1, types[TUINTPTR], n);\n>    regalloc(&m2, types[TUINT8], n);\n>    cgen(n, &m1);\n>    m1.xoffset = 0;\n>    m1.op = OINDREG;\n>    m1.type = types[TUINT8];\n>    gins(AMOVBU, &m1, &m2);\n>    regfree(&m2);\n>    regfree(&m1);\n> }\n>\n> http://codereview.appspot.com/**5966075/<http://codereview.appspot.com/5966075/>\n>\n",
			"disapproval": false,
			"date": "2012-04-17 20:19:41.694344",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 17, 2012 at 22:19, Luuk van Dijk <lvd@google.com> wrote:\n\n> thank you!  i hadn't gotten around to figuring out that missing bit and i\n> didn't have an arm to play on.\n>\n> On Tue, Apr 17, 2012 at 20:54, <minux.ma@gmail.com> wrote:\n>\n>> This should fix the test failure (./all.bash passed on the Linux/ARM\n>> builder).\n>>\n>> I need more investigations for the possible performance regression.\n>>\n>>\n> for 5g, the original cgen_inline wasn't even called afaict, so it would\n> always call the pkg/runtime functions.   a factor 2 sounds excessive though.\n>\n\nesp since time run in test and go run in test/bench/go1 show no noticable\ndifference on darwin/amd64 and darwin/386...\n\n\n>\n>\n>>\n>> http://codereview.appspot.com/**5966075/diff/24001/src/cmd/5g/**gsubr.c<http://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c>\n>> File src/cmd/5g/gsubr.c (right):\n>>\n>> http://codereview.appspot.com/**5966075/diff/24001/src/cmd/5g/**\n>> gsubr.c#newcode1208<http://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c#newcode1208>\n>> src/cmd/5g/gsubr.c:1208: //     TODO lvd\n>> void\n>> checkref(Node *n)\n>> {\n>>    Node m1, m2;\n>>\n>>    if(n->type->type->width < unmappedzero)\n>>        return;\n>>\n>>    regalloc(&m1, types[TUINTPTR], n);\n>>    regalloc(&m2, types[TUINT8], n);\n>>    cgen(n, &m1);\n>>    m1.xoffset = 0;\n>>    m1.op = OINDREG;\n>>    m1.type = types[TUINT8];\n>>    gins(AMOVBU, &m1, &m2);\n>>    regfree(&m2);\n>>    regfree(&m1);\n>> }\n>>\n>> http://codereview.appspot.com/**5966075/<http://codereview.appspot.com/5966075/>\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2012-04-17 20:39:30.041197",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "actually, on 386 it's terrible too, and even on amd64, there's a 33%\nslowdown for sliceslice.  this needs some more work.\n\ni used these benchmarks\n\npackage sl_test\n\nimport \"testing\"\n\nvar a [100]byte\n\nconst s = \"alloallo\"\n\nfunc BenchmarkSliceSlice(b *testing.B) {\ns1 := a[:]\nlo, hi := 3, 97\nvar s2 []byte\n        for i := 0; i < b.N; i++ {\ns2 = s1[lo: hi]\n        }\n_ = s2\n}\n\nfunc BenchmarkSliceStr(b *testing.B) {\ns1 := s[:]\nlo, hi := 3, 7\nvar s2 string\n        for i := 0; i < b.N; i++ {\ns2 = s1[lo: hi]\n        }\n_ = s2\n}\n\n\nfunc BenchmarkSliceArr(b *testing.B) {\nlo, hi := 3, 7\nvar s2 []byte\n        for i := 0; i < b.N; i++ {\ns2 = a[lo: hi]\n        }\n_ = s2\n}\n",
			"disapproval": false,
			"date": "2012-04-18 06:29:48.963124",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Apr 18, 2012 at 08:29, Luuk van Dijk <lvd@google.com> wrote:\n\n> actually, on 386 it's terrible too, and even on amd64, there's a 33%\n> slowdown for sliceslice.  this needs some more work.\n\n\npart of it seems to be due to the safeexpr(n->left) i turned into a\ncopyexpr(n->left) in the last revision to fix a crashing case.   hold off\nyour reviews, i'll hammer on it some more.\n",
			"disapproval": false,
			"date": "2012-04-18 06:42:27.496224",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 17, 2012 at 22:39, Luuk van Dijk <lvd@google.com> wrote:\n\n> http://codereview.appspot.com/**5966075/diff/24001/src/cmd/5g/**\n>>> gsubr.c#newcode1208<http://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c#newcode1208>\n>>> src/cmd/5g/gsubr.c:1208: //     TODO lvd\n>>> void\n>>> checkref(Node *n)\n>>> {\n>>>    Node m1, m2;\n>>>\n>>>    if(n->type->type->width < unmappedzero)\n>>>        return;\n>>>\n>>>    regalloc(&m1, types[TUINTPTR], n);\n>>>    regalloc(&m2, types[TUINT8], n);\n>>>    cgen(n, &m1);\n>>>    m1.xoffset = 0;\n>>>    m1.op = OINDREG;\n>>>    m1.type = types[TUINT8];\n>>>    gins(AMOVBU, &m1, &m2);\n>>>    regfree(&m2);\n>>>    regfree(&m1);\n>>> }\n>>>\n>>> http://codereview.appspot.com/**5966075/<http://codereview.appspot.com/5966075/>\n>>>\n>>\n>>\n>\ni added your checkref to my CL.  thanks again.\n\n/L\n",
			"disapproval": false,
			"date": "2012-04-17 20:41:11.445799",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Apr 18, 2012 at 02:56, Dave Cheney <dave@cheney.net> wrote:\n\n> I hand patched minux's suggested checkref only my 5g system and now\n> all the tests pass, however I share the concern that there has been a\n> performance regression. I'll dig into it more today but anecdotally\n> src/test/run took 23 minutes (i'll confirm the pre cl times) and\n>\n\nwow, that is worrying.  thanks for investigating.\n\n\n> anything that needs to use go/parser etc (so the go tool, the api\n> tool) take signficantly longer and appear to be cpu bound.\n>\n> Cheers\n>\n> Dave\n>\n> On Wed, Apr 18, 2012 at 6:41 AM, Luuk van Dijk <lvd@google.com> wrote:\n> >\n> >\n> > On Tue, Apr 17, 2012 at 22:39, Luuk van Dijk <lvd@google.com> wrote:\n> >>>>\n> >>>>\n> >>>>\n> http://codereview.appspot.com/5966075/diff/24001/src/cmd/5g/gsubr.c#newcode1208\n> >>>> src/cmd/5g/gsubr.c:1208: //     TODO lvd\n> >>>> void\n> >>>> checkref(Node *n)\n> >>>> {\n> >>>>    Node m1, m2;\n> >>>>\n> >>>>    if(n->type->type->width < unmappedzero)\n> >>>>        return;\n> >>>>\n> >>>>    regalloc(&m1, types[TUINTPTR], n);\n> >>>>    regalloc(&m2, types[TUINT8], n);\n> >>>>    cgen(n, &m1);\n> >>>>    m1.xoffset = 0;\n> >>>>    m1.op = OINDREG;\n> >>>>    m1.type = types[TUINT8];\n> >>>>    gins(AMOVBU, &m1, &m2);\n> >>>>    regfree(&m2);\n> >>>>    regfree(&m1);\n> >>>> }\n> >>>>\n> >>>> http://codereview.appspot.com/5966075/\n> >>>\n> >>>\n> >>\n> >\n> > i added your checkref to my CL.  thanks again.\n> >\n> > /L\n>\n",
			"disapproval": false,
			"date": "2012-04-18 05:46:09.927559",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "actually i didn't look close enough, there is a regression in\ntest/benchmark/go1, for JSONDecode on darwin/amd64, i'll look closer there.\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   5181384000   5095200000   -1.66%\nBenchmarkFannkuch11     5556846000   5237117000   -5.75%\nBenchmarkGobDecode        29561800     21883260  -25.97%\nBenchmarkGobEncode        12907780     12791170   -0.90%\nBenchmarkGzip                87800        87848   +0.05%\nBenchmarkGunzip               6350         6267   -1.31%\nBenchmarkJSONEncode       74979900     76979250   +2.67%\nBenchmarkJSONDecode      341845000    522175800  +52.75%\nBenchmarkRevcomp25M     1131012000   1121440000   -0.85%\nBenchmarkTemplate        654604800    716804800   +9.50%\n\nbenchmark                 old MB/s     new MB/s  speedup\nBenchmarkGobDecode           25.96        35.07    1.35x\nBenchmarkGobEncode           59.46        60.00    1.01x\nBenchmarkJSONEncode          25.88        25.21    0.97x\nBenchmarkJSONDecode           5.68         3.72    0.65x\nBenchmarkRevcomp25M         224.73       226.64    1.01x\nBenchmarkTemplate             2.96         2.71    0.92x\n",
			"disapproval": false,
			"date": "2012-04-18 06:19:38.013831",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "beside this small typo, I can confirm that the performance regression on ARM is fixed.\n\ngo run test/run.go\nold:\nreal 6m9.318s   user 10m42.94s   sys 1m0.71s\nnew:\nreal 5m55.78s   user 10m5.82s   sys 1m0.71s\n\nhttp://codereview.appspot.com/5966075/diff/30022/src/cmd/5g/gsubr.c\nFile src/cmd/5g/gsubr.c (right):\n\nhttp://codereview.appspot.com/5966075/diff/30022/src/cmd/5g/gsubr.c#newcode1199\nsrc/cmd/5g/gsubr.c:1199: bsdvoid\nsorry, why is bsdvoid here?",
			"disapproval": false,
			"date": "2012-04-19 17:45:34.394667",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/19 17:45:34, minux wrote:\n> beside this small typo, I can confirm that the performance regression on ARM is\n> fixed.\n> \n\nthank you!\n\n> go run test/run.go\n> old:\n> real 6m9.318s   user 10m42.94s   sys 1m0.71s\n> new:\n> real 5m55.78s   user 10m5.82s   sys 1m0.71s\n> \n> http://codereview.appspot.com/5966075/diff/30022/src/cmd/5g/gsubr.c\n> File src/cmd/5g/gsubr.c (right):\n> \n> http://codereview.appspot.com/5966075/diff/30022/src/cmd/5g/gsubr.c#newcode1199\n> src/cmd/5g/gsubr.c:1199: bsdvoid\n> sorry, why is bsdvoid here?\n\ni have absolutely no idea :-)  i was wondering what  dave was talkiing about.  it must have been me telling emacs the indent mode and missing a ctrl or a shift or so.",
			"disapproval": false,
			"date": "2012-04-19 18:13:46.034882",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nBefore, core i5 darwin/amd64 \n\nodessa(~/go/test) % time ./run\n0 known bugs; 0 unexpected bugs\n\nreal\t0m46.944s\nuser\t0m32.189s\nsys\t0m11.451s\n\nAfter\n\nodessa(~/go/test) % time ./run\n0 known bugs; 0 unexpected bugs\n\nreal\t0m44.288s\nuser\t0m30.566s\nsys\t0m10.983s",
			"disapproval": false,
			"date": "2012-04-19 21:59:34.275718",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI'm sorry it took me so long to get to this review. I think you're still away, so I'll patch this in, address the comments, and submit.\n\nhttp://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttp://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c#newcode2347\nsrc/cmd/gc/walk.c:2347: nochk = n->etype;\nThis is now n->bounded.\n\nhttp://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c#newcode2359\nsrc/cmd/gc/walk.c:2359: if (isconst(bound, CTINT))\nAll these isconst need to check the range of the value too. There can be very large integer constants that won't fit in the int64s here.\n\nhttp://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c#newcode2403\nsrc/cmd/gc/walk.c:2403: if(n->op == OSLICE) {\nI think OSLICESTR should be here too.",
			"disapproval": false,
			"date": "2012-06-02 22:47:58.772104",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Woot. \r\n\r\nOn 03/06/2012, at 8:47, rsc@golang.org wrote:\r\n\r\n> LGTM\r\n> \r\n> I'm sorry it took me so long to get to this review. I think you're still\r\n> away, so I'll patch this in, address the comments, and submit.\r\n> \r\n> \r\n> http://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c\r\n> File src/cmd/gc/walk.c (right):\r\n> \r\n> http://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c#newcode2347\r\n> src/cmd/gc/walk.c:2347: nochk = n->etype;\r\n> This is now n->bounded.\r\n> \r\n> http://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c#newcode2359\r\n> src/cmd/gc/walk.c:2359: if (isconst(bound, CTINT))\r\n> All these isconst need to check the range of the value too. There can be\r\n> very large integer constants that won't fit in the int64s here.\r\n> \r\n> http://codereview.appspot.com/5966075/diff/30022/src/cmd/gc/walk.c#newcode2403\r\n> src/cmd/gc/walk.c:2403: if(n->op == OSLICE) {\r\n> I think OSLICESTR should be here too.\r\n> \r\n> http://codereview.appspot.com/5966075/\r\n",
			"disapproval": false,
			"date": "2012-06-02 22:49:17.178618",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9acc060bf892 ***\n\ncmd/gc: inline slice[arr,str] in the frontend (mostly).\n\nR=rsc, ality, rogpeppe, minux.ma, dave\nCC=golang-dev\nhttp://codereview.appspot.com/5966075\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-03 02:51:03.325196",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, this doesn't compile under 5c\r\n\r\ncmd/5g\r\n/home/dfc/go/src/cmd/5g/gsubr.c:1146:1: error: unknown type name 'bsdvoid'\r\nbsdvoid\r\n^\r\n/home/dfc/go/src/cmd/5g/gsubr.c:1152:3: error: non-void function\r\n'checkref' should return a value [-Wreturn-type]\r\n                return;\r\n                ^\r\n2 errors generated.\r\ngo tool dist: FAILED: clang -Wall -Wno-sign-compare\r\n-Wno-missing-braces -Wno-parentheses -Wno-unknown-pragmas -Wno-switch\r\n-Wno-comment -Werror -fno-common -ggdb -O2 -Wnoc\r\npando(~/go/src) %\r\n\r\n\r\nOn Sun, Jun 3, 2012 at 12:51 PM,  <rsc@golang.org> wrote:\r\n> *** Submitted as\r\n> http://code.google.com/p/go/source/detail?r=9acc060bf892 ***\r\n>\r\n> cmd/gc: inline slice[arr,str] in the frontend (mostly).\r\n>\r\n> R=rsc, ality, rogpeppe, minux.ma, dave\r\n> CC=golang-dev\r\n> http://codereview.appspot.com/5966075\r\n>\r\n> Committer: Russ Cox <rsc@golang.org>\r\n>\r\n>\r\n> http://codereview.appspot.com/5966075/\r\n",
			"disapproval": false,
			"date": "2012-06-03 03:54:25.568903",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 2, 2012 at 11:54 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> Sorry, this doesn't compile under 5c\r\n\r\nSorry, I meant to fix that - minux pointed it out.\r\nIf you s/bsd// is all okay?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-03 03:55:43.192739",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yup.\r\n\r\nOn Sun, Jun 3, 2012 at 1:55 PM, Russ Cox <rsc@golang.org> wrote:\r\n> On Sat, Jun 2, 2012 at 11:54 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>> Sorry, this doesn't compile under 5c\r\n>\r\n> Sorry, I meant to fix that - minux pointed it out.\r\n> If you s/bsd// is all okay?\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-06-03 03:56:44.751030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 2, 2012 at 11:56 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> Yup.\r\n\r\nsubmitted as 6275048.\r\n",
			"disapproval": false,
			"date": "2012-06-03 03:58:17.559655",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what a nice surprise to find coming back from holiday. thanks!\r\n\r\nOn Sun, Jun 3, 2012 at 5:57 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Sat, Jun 2, 2012 at 11:56 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> > Yup.\r\n>\r\n> submitted as 6275048.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-13 07:50:07.600764",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-10-01 13:46:29.259230",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5966075: cmd/gc: inline slice[arr,str] in the frontend (mostly).",
	"created": "2012-04-04 13:11:10.583290",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		10001,
		12001,
		15001,
		18001,
		17016,
		24001,
		33001,
		39001,
		30022
	],
	"modified": "2012-10-01 13:46:30.706790",
	"closed": true,
	"issue": 5966075
}