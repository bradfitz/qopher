{
	"description": "go.net/spdy: make framer tests more robust\n\n- consolidates test functions, converts into table-driven cases\n- fixes zero stream-id handling on WindowUpdate\n- re-enables zero stream-id test\n- renames to framer_test.go",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"kr@xph.us"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-02-20 09:06:20.125320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for this. Some high level comments. I think I need to do some reading on SPDY before I can provide more than a superficial comment on these changes.\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go\nFile spdy/framer_test.go (right):\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go#newcode25\nspdy/framer_test.go:25: b := new(bytes.Buffer)\nvar b bytes.Buffer\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go#newcode26\nspdy/framer_test.go:26: if _, err := writeHeaderValueBlock(b, headersFixture); err != nil {\n&b, etc\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go#newcode88\nspdy/framer_test.go:88: b := new(bytes.Buffer)\nvar b bytes.Buffer\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go#newcode89\nspdy/framer_test.go:89: framer, err := NewFramer(b, b)\nNewFramer(&b, &b)\n\n// this style is inspired by rob pike, btw.\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go#newcode116\nspdy/framer_test.go:116: case *SynStreamFrame:\nwhat about something like this ?\ncase *SynStreamFrame, *SynReplyFrame:\n   // continue\n\nWhen I originally read this code I wondered if you had forgotten to use fallthrough. A little comment like the above might help comprehension.\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go#newcode143\nspdy/framer_test.go:143: b := new(bytes.Buffer)\nditto\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/framer_test.go#newcode169\nspdy/framer_test.go:169: case *DataFrame:\n// continue\n\nthis is really a nit, feel free to ignore it.\n\ncould also be written\n\nswitch ... {\ncase *DataFrame\n     return nil\n}\nreturn // error condition.\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7380043/diff/4001/spdy/read.go#newcode110\nspdy/read.go:110: return &Error{ZeroStreamId, 0}\nThis &Error{ZeroStreamId, 0} construct is repeated a few times, should it be a top level errZeroStream ?",
			"disapproval": false,
			"date": "2013-02-20 09:23:29.921270",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough. Ill review the rest when I've had some sleep. \r\n\r\nOn 20/02/2013, at 21:47, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On Wed, Feb 20, 2013 at 6:23 PM,  <dave@cheney.net> wrote:\r\n> \r\n>> spdy/framer_test.go:25: b := new(bytes.Buffer)\r\n>> var b bytes.Buffer\r\n> \r\n> usually i don't much care about escape analysis on tests but would you?\r\n> \r\n>> what about something like this ?\r\n>> case *SynStreamFrame, *SynReplyFrame:\r\n>>   // continue\r\n>> \r\n>> When I originally read this code I wondered if you had forgotten to use\r\n>> fallthrough. A little comment like the above might help comprehension.\r\n> \r\n> \r\n>> https://codereview.appspot.com/7380043/diff/4001/spdy/read.go#newcode110\r\n>> spdy/read.go:110: return &Error{ZeroStreamId, 0}\r\n>> This &Error{ZeroStreamId, 0} construct is repeated a few times, should\r\n>> it be a top level errZeroStream ?\r\n> \r\n> not in this CL.\r\n",
			"disapproval": false,
			"date": "2013-02-20 10:56:26.425740",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 20, 2013 at 6:23 PM,  <dave@cheney.net> wrote:\r\n\r\n> spdy/framer_test.go:25: b := new(bytes.Buffer)\r\n> var b bytes.Buffer\r\n\r\nusually i don't much care about escape analysis on tests but would you?\r\n\r\n> what about something like this ?\r\n> case *SynStreamFrame, *SynReplyFrame:\r\n>    // continue\r\n>\r\n> When I originally read this code I wondered if you had forgotten to use\r\n> fallthrough. A little comment like the above might help comprehension.\r\n\r\n\r\n> https://codereview.appspot.com/7380043/diff/4001/spdy/read.go#newcode110\r\n> spdy/read.go:110: return &Error{ZeroStreamId, 0}\r\n> This &Error{ZeroStreamId, 0} construct is repeated a few times, should\r\n> it be a top level errZeroStream ?\r\n\r\nnot in this CL.\r\n",
			"disapproval": false,
			"date": "2013-02-20 10:47:07.840780",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Fair enough. Ill review the rest when I've had some sleep.\r\n\r\nthanks, not so rush.\r\n",
			"disapproval": false,
			"date": "2013-02-20 11:02:25.701330",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-16 12:55:07.114090",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Strange to have test tables in a map rather than a slice.",
			"disapproval": false,
			"date": "2013-05-20 06:31:26.550920",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 7380043: go.net/spdy: make framer tests more robust",
	"created": "2013-02-20 09:03:24.436310",
	"patchsets": [
		1,
		2001,
		4001,
		10001
	],
	"modified": "2013-05-20 06:31:26.550920",
	"closed": false,
	"issue": 7380043
}