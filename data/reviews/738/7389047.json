{
	"description": "net: enable access to the underlying file descriptor for TCP connections\n\nSometimes it is useful to be able to access the underlying system file descriptor\nfor a TCP connection. For example, it can be useful to do a recv() with MSG_PEEK\nto determine if a TCP connection is in a partially closed state.\n\nThis specific need came about because when talking to Apache it doesn't simply\nclose keep-alive connections, it does the equivalent of CloseWrite and then\nwaits a few seconds before doing the real close. Thus it's necessary to be\nto reliably discover if a TCP connection is closed at a fairly low level.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-24 21:39:15.665550",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/2/24  <jgrahamc@gmail.com> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: enable access to the underlying file descriptor for TCP connections\r\n>\r\n> Sometimes it is useful to be able to access the underlying system file\r\n> descriptor\r\n> for a TCP connection. For example, it can be useful to do a recv() with\r\n> MSG_PEEK\r\n> to determine if a TCP connection is in a partially closed state.\r\n>\r\n> This specific need came about because when talking to Apache it doesn't\r\n> simply\r\n> close keep-alive connections, it does the equivalent of CloseWrite and\r\n> then\r\n> waits a few seconds before doing the real close. Thus it's necessary to\r\n> be\r\n> to reliably discover if a TCP connection is closed at a fairly low\r\n> level.\r\n\r\nWhy do you need to do that? the Read method will say EOF if the peer\r\nhas done CloseWrite, so the justification you give doesn't seem enough\r\nto propose an API change that has already been rejected in the past.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-02-24 23:20:59.088290",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\r\n\r\nI'm concerned that this CL will allow people to do an end run around\r\nthe File method on the various Conn types.\r\n\r\nAs a workaround for the moment, consider this code,\r\n\r\nhttps://code.google.com/p/go/source/browse/ipv4/helper_unix.go?repo=net#38\r\n\r\nCheers\r\n\r\nDave\r\n\r\nOn Mon, Feb 25, 2013 at 8:39 AM,  <jgrahamc@gmail.com> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: enable access to the underlying file descriptor for TCP connections\r\n>\r\n> Sometimes it is useful to be able to access the underlying system file\r\n> descriptor\r\n> for a TCP connection. For example, it can be useful to do a recv() with\r\n> MSG_PEEK\r\n> to determine if a TCP connection is in a partially closed state.\r\n>\r\n> This specific need came about because when talking to Apache it doesn't\r\n> simply\r\n> close keep-alive connections, it does the equivalent of CloseWrite and\r\n> then\r\n> waits a few seconds before doing the real close. Thus it's necessary to\r\n> be\r\n> to reliably discover if a TCP connection is closed at a fairly low\r\n> level.\r\n>\r\n> Please review this at https://codereview.appspot.com/7389047/\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/fd_unix.go\r\n>   M src/pkg/net/tcpsock_posix.go\r\n>\r\n>\r\n> Index: src/pkg/net/fd_unix.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/fd_unix.go\r\n> +++ b/src/pkg/net/fd_unix.go\r\n> @@ -317,6 +317,10 @@\r\n>         return netfd, nil\r\n>  }\r\n>\r\n> +func (fd *netFD) Fd() int {\r\n> +       return fd.sysfd\r\n> +}\r\n> +\r\n>  func (fd *netFD) setAddr(laddr, raddr Addr) {\r\n>         fd.laddr = laddr\r\n>         fd.raddr = raddr\r\n> Index: src/pkg/net/tcpsock_posix.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/tcpsock_posix.go\r\n> +++ b/src/pkg/net/tcpsock_posix.go\r\n> @@ -96,6 +96,12 @@\r\n>         return c.fd.CloseWrite()\r\n>  }\r\n>\r\n> +// Fd returns the underlying system file descriptor for the TCP\r\n> +// connection.\r\n> +func (c *TCPConn) Fd() int {\r\n> +       return c.fd.Fd()\r\n> +}\r\n> +\r\n>  // SetLinger sets the behavior of Close() on a connection\r\n>  // which still has data waiting to be sent or to be acknowledged.\r\n>  //\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-24 23:31:08.451380",
			"approval": false
		},
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Why do you need to do that? the Read method will say EOF if the peer\n> has done CloseWrite, so the justification you give doesn't seem enough\n> to propose an API change that has already been rejected in the past.\n\nYes, but if it's not EOF then Read will block. What I need is a non-blocking Read or some way to detect this situation.",
			"disapproval": false,
			"date": "2013-02-24 23:52:26.308660",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/2/25  <jgrahamc@gmail.com> wrote:\r\n>> Why do you need to do that? the Read method will say EOF if the peer\r\n>> has done CloseWrite, so the justification you give doesn't seem enough\r\n>> to propose an API change that has already been rejected in the past.\r\n>\r\n>\r\n> Yes, but if it's not EOF then Read will block. What I need is a\r\n> non-blocking Read or some way to detect this situation.\r\n\r\nWhy do you need a non-blocking way of doing that, a blocking method\r\nlooks perfectly fine and the contrary would feel unidiomatic to Go.\r\nCan you open a dedicated issue so that discussion on the motivations\r\ngo properly to the issue tracker?\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-02-24 23:54:49.845140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not comfortable exposing the fd like this in the standard API. We've\r\nalready run into problems with fd's not being in the state we expected due\r\nto other programs getting a hold of them. This CL opens the gate and we can\r\nnever close it again.\r\n\r\nIn your own programs, I suggest using\r\nreflect.ValueOf(c).FieldByName(\"conn\").FieldByName(\"fd\").FieldByName(\"sysfd\").Int().\r\nIt's not supported - if we change the internals of net it will break - but\r\nit lets you do what you need and take responsibility for the \"unwarranted\r\nchumminess\" without our having to expand the API.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-25 22:11:28.849240",
			"approval": false
		},
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK. I will withdraw and use reflection.\n\nIs there actual a 'withdraw' button?",
			"disapproval": false,
			"date": "2013-02-26 11:12:07.196740",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hg revert @7389047 # revert files in client\nhg change -d 7389047 # delete change",
			"disapproval": false,
			"date": "2013-02-27 16:26:39.972030",
			"approval": false
		},
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-02-27 16:27:59.713900",
			"approval": false
		}
	],
	"owner_email": "jgrahamc@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jgc",
	"subject": "code review 7389047: net: enable access to the underlying file descriptor fo...",
	"created": "2013-02-24 21:38:17.445430",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2013-02-27 16:28:09.450060",
	"closed": true,
	"issue": 7389047
}