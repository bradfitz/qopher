{
	"description": "runtime: speedup malloc stats collection\nCount only number of frees, everything else is derivable\nand does not need to be counted on every malloc.\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkMalloc8                    68           66   -3.07%\nBenchmarkMalloc16                   75           70   -6.48%\nBenchmarkMallocTypeInfo8           102           97   -4.80%\nBenchmarkMallocTypeInfo16          108          105   -2.78%",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-26 16:01:33.055320",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've also compared memstats on test/bench/garbage/parser benchmark by hand, and they look sane (there is always some variation, so they are not equal).\n\nBEFORE:\n{Alloc:290148392 TotalAlloc:3656099856 Sys:911724200 Lookups:202230 Mallocs:71359197 Frees:64135430 HeapAlloc:290148392 HeapSys:587202560 HeapIdle:276758528 HeapInuse:310444032 HeapReleased:0 HeapObjects:7223767 StackInuse:12288 StackSys:131072 MSpanInuse:7850648 MSpanSys:13762560 MCacheInuse:2016 MCacheSys:131072 BuckHashSys:1439992 NextGC:580309072 LastGC:1369580400338336646 PauseTotalNs:7226426382 PauseNs:[323319 1243245 2861803 17253802 12439253 19292655 39614306 120618868 153796262 279522433 544201949 462627118 854993385 642578295 278620098 123713676 181460116 296516480 1466646499 1961078969 676491053 1099905464 946616187 1069157006 414964777 397507642 563362470 686483983 618402677 843180398 303638071 181674313 263882074 413595109 668918961 801658901 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] NumGC:13 EnableGC:true DebugGC:false BySize:[{Size:0 Mallocs:0 Frees:0} {Size:8 Mallocs:17162408 Frees:15339175} {Size:16 Mallocs:13105706 Frees:12171605} {Size:32 Mallocs:22035504 Frees:19419685} {Size:48 Mallocs:4112655 Frees:3609604} {Size:64 Mallocs:8275867 Frees:7560217} {Size:80 Mallocs:4377025 Frees:3851460} {Size:96 Mallocs:83987 Frees:79812} {Size:112 Mallocs:54437 Frees:53383} {Size:128 Mallocs:477197 Frees:442106} {Size:144 Mallocs:106049 Frees:105937} {Size:160 Mallocs:48112 Frees:44794} {Size:176 Mallocs:496 Frees:430} {Size:192 Mallocs:162525 Frees:158621} {Size:208 Mallocs:587577 Frees:582626} {Size:224 Mallocs:2075 Frees:2033} {Size:240 Mallocs:320 Frees:300} {Size:256 Mallocs:125595 Frees:117019} {Size:288 Mallocs:433 Frees:400} {Size:320 Mallocs:29291 Frees:28382} {Size:352 Mallocs:35 Frees:34} {Size:384 Mallocs:47264 Frees:47260} {Size:448 Mallocs:33156 Frees:32672} {Size:512 Mallocs:140787 Frees:127729} {Size:576 Mallocs:27434 Frees:25186} {Size:640 Mallocs:131 Frees:129} {Size:704 Mallocs:21496 Frees:18816} {Size:768 Mallocs:192 Frees:188} {Size:832 Mallocs:13799 Frees:13359} {Size:1024 Mallocs:177158 Frees:158973} {Size:1152 Mallocs:931 Frees:916} {Size:1280 Mallocs:1089 Frees:1089} {Size:1408 Mallocs:1217 Frees:1217} {Size:1536 Mallocs:1216 Frees:1212} {Size:1664 Mallocs:10567 Frees:10329} {Size:2048 Mallocs:52249 Frees:48036} {Size:2304 Mallocs:1761 Frees:1748} {Size:2560 Mallocs:1793 Frees:1788} {Size:3072 Mallocs:2209 Frees:2205} {Size:3328 Mallocs:4514 Frees:4300} {Size:4096 Mallocs:32522 Frees:30719} {Size:4352 Mallocs:896 Frees:896} {Size:4608 Mallocs:265 Frees:264} {Size:5120 Mallocs:1443 Frees:1436} {Size:6144 Mallocs:2982 Frees:2977} {Size:6656 Mallocs:3202 Frees:3128} {Size:6912 Mallocs:992 Frees:992} {Size:8192 Mallocs:8384 Frees:8268} {Size:8704 Mallocs:704 Frees:704} {Size:10240 Mallocs:4004 Frees:3960} {Size:10496 Mallocs:320 Frees:320} {Size:12288 Mallocs:2369 Frees:2365} {Size:14080 Mallocs:3680 Frees:3584} {Size:16384 Mallocs:2944 Frees:2932} {Size:17664 Mallocs:704 Frees:704} {Size:20480 Mallocs:1088 Frees:1060} {Size:21248 Mallocs:129 Frees:128} {Size:24576 Mallocs:577 Frees:577} {Size:24832 Mallocs:128 Frees:128} {Size:28672 Mallocs:1632 Frees:1600} {Size:32768 Mallocs:1156 Frees:1152}]}\n\nAFTER:\n{Alloc:300200488 TotalAlloc:3658234192 Sys:910610592 Lookups:202543 Mallocs:71495329 Frees:64242422 HeapAlloc:300200488 HeapSys:586153984 HeapIdle:209199104 HeapInuse:376954880 HeapReleased:0 HeapObjects:7252907 StackInuse:12288 StackSys:131072 MSpanInuse:10840544 MSpanSys:13762560 MCacheInuse:1504 MCacheSys:131072 BuckHashSys:1439992 NextGC:600413264 LastGC:1369580534254989234 PauseTotalNs:5718078936 PauseNs:[285187 1046922 2979105 5919813 11690171 21826096 32277787 54549489 93308641 158536275 258675437 416065702 826097940 626133333 247416367 140079499 200995038 320890838 499394391 291289618 214661320 322199917 505624745 768633772 721840289 418815697 406991839 666234577 467840957 308523925 463741020 772747015 696877133 794466484 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] NumGC:10 EnableGC:true DebugGC:false BySize:[{Size:0 Mallocs:0 Frees:0} {Size:8 Mallocs:17199432 Frees:15371979} {Size:16 Mallocs:13135274 Frees:12199641} {Size:32 Mallocs:22084464 Frees:19462841} {Size:48 Mallocs:4121999 Frees:3617760} {Size:64 Mallocs:8290708 Frees:7573389} {Size:80 Mallocs:4381191 Frees:3850453} {Size:96 Mallocs:84323 Frees:79886} {Size:112 Mallocs:54532 Frees:53371} {Size:128 Mallocs:477363 Frees:440430} {Size:144 Mallocs:103265 Frees:103153} {Size:160 Mallocs:47644 Frees:44205} {Size:176 Mallocs:494 Frees:434} {Size:192 Mallocs:159126 Frees:155614} {Size:208 Mallocs:589032 Frees:584133} {Size:224 Mallocs:2071 Frees:2029} {Size:240 Mallocs:320 Frees:300} {Size:256 Mallocs:125867 Frees:117024} {Size:288 Mallocs:465 Frees:432} {Size:320 Mallocs:29670 Frees:28566} {Size:352 Mallocs:35 Frees:34} {Size:384 Mallocs:47264 Frees:47260} {Size:448 Mallocs:33152 Frees:32678} {Size:512 Mallocs:139802 Frees:122609} {Size:576 Mallocs:25592 Frees:23216} {Size:640 Mallocs:131 Frees:129} {Size:704 Mallocs:21605 Frees:18997} {Size:768 Mallocs:192 Frees:188} {Size:832 Mallocs:13831 Frees:13384} {Size:1024 Mallocs:175275 Frees:156358} {Size:1152 Mallocs:867 Frees:852} {Size:1280 Mallocs:1089 Frees:1089} {Size:1408 Mallocs:1217 Frees:1217} {Size:1536 Mallocs:1216 Frees:1212} {Size:1664 Mallocs:10567 Frees:10331} {Size:2048 Mallocs:53068 Frees:47204} {Size:2304 Mallocs:1761 Frees:1748} {Size:2560 Mallocs:1793 Frees:1788} {Size:3072 Mallocs:2209 Frees:2205} {Size:3328 Mallocs:4482 Frees:4268} {Size:4096 Mallocs:32461 Frees:30017} {Size:4352 Mallocs:896 Frees:896} {Size:4608 Mallocs:265 Frees:264} {Size:5120 Mallocs:1443 Frees:1436} {Size:6144 Mallocs:2980 Frees:2975} {Size:6656 Mallocs:3202 Frees:3128} {Size:6912 Mallocs:992 Frees:992} {Size:8192 Mallocs:8384 Frees:8268} {Size:8704 Mallocs:704 Frees:704} {Size:10240 Mallocs:4004 Frees:3960} {Size:10496 Mallocs:320 Frees:320} {Size:12288 Mallocs:2433 Frees:2429} {Size:14080 Mallocs:3680 Frees:3584} {Size:16384 Mallocs:2944 Frees:2932} {Size:17664 Mallocs:704 Frees:704} {Size:20480 Mallocs:1088 Frees:1060} {Size:21248 Mallocs:129 Frees:128} {Size:24576 Mallocs:577 Frees:577} {Size:24832 Mallocs:128 Frees:128} {Size:28672 Mallocs:1632 Frees:1600} {Size:32768 Mallocs:1156 Frees:1152}]}",
			"disapproval": false,
			"date": "2013-05-26 16:05:01.954050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/arm pandaboard\n\nalarm(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkMalloc8                   485          452   -6.80%\nBenchmarkMalloc16                  548          513   -6.39%\nBenchmarkMallocTypeInfo8           659          638   -3.19%\nBenchmarkMallocTypeInfo16          714          687   -3.78%\n\n\nIt will be interesting to see the results combined with 9776043",
			"disapproval": false,
			"date": "2013-05-27 12:47:42.580970",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That should read, 9790043, but you probably knew that.\r\n\r\nOn Mon, May 27, 2013 at 10:47 PM,  <dave@cheney.net> wrote:\r\n> linux/arm pandaboard\r\n>\r\n> alarm(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\r\n>\r\n> benchmark                    old ns/op    new ns/op    delta\r\n> BenchmarkMalloc8                   485          452   -6.80%\r\n> BenchmarkMalloc16                  548          513   -6.39%\r\n> BenchmarkMallocTypeInfo8           659          638   -3.19%\r\n> BenchmarkMallocTypeInfo16          714          687   -3.78%\r\n>\r\n>\r\n> It will be interesting to see the results combined with 9776043\r\n>\r\n> https://codereview.appspot.com/9776043/\r\n",
			"disapproval": false,
			"date": "2013-05-27 12:48:14.895430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping.",
			"disapproval": false,
			"date": "2013-06-02 01:56:02.571270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIt seems unfortunate that ReadMemStats now flushes the allocation caches, but I guess it's fine.\n",
			"disapproval": false,
			"date": "2013-06-04 01:18:32.746390",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b1217a6ca24c ***\n\nruntime: speedup malloc stats collection\nCount only number of frees, everything else is derivable\nand does not need to be counted on every malloc.\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkMalloc8                    68           66   -3.07%\nBenchmarkMalloc16                   75           70   -6.48%\nBenchmarkMallocTypeInfo8           102           97   -4.80%\nBenchmarkMallocTypeInfo16          108          105   -2.78%\n\nR=golang-dev, dave, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/9776043",
			"disapproval": false,
			"date": "2013-06-06 10:56:58.565910",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9776043: runtime: speedup malloc stats collection",
	"created": "2013-05-25 18:56:39.049990",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		9005,
		12001,
		13001,
		15001,
		17001,
		27001,
		30001,
		29005
	],
	"modified": "2013-06-06 10:56:59.871480",
	"closed": true,
	"issue": 9776043
}