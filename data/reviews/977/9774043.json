{
	"description": "go.tools/ssa: fix debug printing",
	"cc": [
		"adonovan@google.com",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-05-25 16:03:59.053110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-25 16:27:14.103000",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7730491448d2&repo=tools ***\n\ngo.tools/ssa: fix debug printing\n\nR=adonovan, r\nCC=golang-dev\nhttps://codereview.appspot.com/9774043",
			"disapproval": false,
			"date": "2013-05-25 16:52:07.467970",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This particular bug pattern has cropped up literally dozens of times since\r\nthe go/types accessors refactoring.\r\nSpecifically:\r\n\r\n1) you have a public field named X.\r\n2) you rename it to x and add an X() accessor method.\r\n3) you let the compiler tell you which references to p.X to replace with\r\np.X().\r\n\r\nThe compiler will fail to report all uses of fmt.Printf(\"%s\", p.X), with\r\nthe result that a bound-method closure is printed instead of the field's\r\nvalue.  This is particularly pernicious in logging statements since they\r\nare almost never covered by tests.\r\n\r\nNow if only we had the technology to build a tool to report incorrect (or\r\nlikely unintended) format specifier/parameter type combinations in calls to\r\nprintf, including logging wrappers around printf...\r\n\r\nI've added it my TODO list.\r\n\r\n\r\n\r\nOn 25 May 2013 12:52, <gri@golang.org> wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=7730491448d2&**repo=tools<https://code.google.com/p/go/source/detail?r=7730491448d2&repo=tools>***\r\n>\r\n> go.tools/ssa: fix debug printing\r\n>\r\n> R=adonovan, r\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/9774043<https://codereview.appspot.com/9774043>\r\n>\r\n>\r\n> https://codereview.appspot.**com/9774043/<https://codereview.appspot.com/9774043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-25 18:25:55.467590",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "does vet catch it?\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-25 18:30:42.661760",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 25 May 2013 14:30, Rob Pike <r@golang.org> wrote:\r\n\r\n> does vet catch it?\r\n>\r\n\r\nNo, not for Printf, and I certainly would expect it to do so for wrappers\r\naround Printf.\r\n",
			"disapproval": false,
			"date": "2013-05-29 16:22:02.683630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "vet should catch it (printing a method value) in Printf.\r\nwrappers should be named appropriately (Printf, Logf, Fatalf) so that vet\r\ncatches them too.\r\n",
			"disapproval": false,
			"date": "2013-05-29 17:39:10.480690",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Am I using the wrong vet tool then?\r\n\r\n% cat a.go\r\npackage p\r\n\r\nimport \"fmt\"\r\n\r\ntype T struct{}\r\n\r\nfunc (T) m() int {\r\n        return 0\r\n}\r\n\r\nfunc f() int {\r\n        return 0\r\n}\r\n\r\nfunc main() {\r\n   var t T\r\n   fmt.Printf(\"%d\\n\", t.m)\r\n   fmt.Printf(\"%d\\n\", f)\r\n   panic(\"oops\")\r\n   println(1)  // \"unreachable code\"\r\n}\r\n\r\n% go vet a.go\r\na.go:20: unreachable code\r\n\r\n\r\n\r\nOn 29 May 2013 13:39, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> vet should catch it (printing a method value) in Printf.\r\n> wrappers should be named appropriately (Printf, Logf, Fatalf) so that vet\r\n> catches them too.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-29 17:51:25.290670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I meant vet should, not vet does. As in, there's no reason it can't, and it\r\nwould fit with the other Printf checks it already does (when compiled with\r\ngo/types support).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-29 17:54:08.799740",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 May 2013 13:54, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I meant vet should, not vet does. As in, there's no reason it can't, and\r\n> it would fit with the other Printf checks it already does (when compiled\r\n> with go/types support).\r\n>\r\n\r\nAh, quite different. :)\r\n\r\nI'll add it to my todo list.\r\nArguably any function whose arg list ends with (format string, args ...\r\ninterface{}) signature should get this checking.\r\n",
			"disapproval": false,
			"date": "2013-05-29 17:55:52.080030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 29, 2013 at 1:55 PM, Alan Donovan <adonovan@google.com> wrote:\r\n\r\n> Arguably any function whose arg list ends with (format string, args ...\r\n> interface{}) signature should get this checking.\r\n>\r\n\r\nThat's not clear to me. What if someone implements a separate printf\r\nlibrary with C semantics?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-29 18:07:54.547900",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Not really; like the typechecker, the SSA builder can be run in a mode\r\nwhere it uses gc's object files instead of source to satisfy dependencies.\r\nThat does mean you still need object code, and also that you can't do as\r\ndeep an analysis (e.g. you can't apply the predicate I described for\r\n\"printf-like functions\" to code you can't see), but for calls within a\r\npackage, it works.\r\n\r\nOn 29 May 2013 15:06, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> That only works if you assume complete source to all dependencies. That's\r\n> a new assumption, at least for vet.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-29 20:28:28.035120",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 May 2013 14:07, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Wed, May 29, 2013 at 1:55 PM, Alan Donovan <adonovan@google.com> wrote:\r\n>\r\n>> Arguably any function whose arg list ends with (format string, args ...\r\n>> interface{}) signature should get this checking.\r\n>>\r\n>\r\n> That's not clear to me. What if someone implements a separate printf\r\n> library with C semantics?\r\n>\r\n\r\nI'd like to experiment with analysing the wrappers directly.  Define a\r\n\"printf-like function\" as fmt.Printf and friends, plus any function that\r\npasses its string+[]interface{} arguments to a printf-like function.  It\r\nshould be pretty easy to identify printf-like functions with the SSA code\r\nfor a single package and apply the checking at all calls where the format\r\nis a literal string.\r\n",
			"disapproval": false,
			"date": "2013-05-29 18:57:57.199370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That only works if you assume complete source to all dependencies. That's a\r\nnew assumption, at least for vet.\r\n",
			"disapproval": false,
			"date": "2013-05-29 19:06:14.232190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Part of the reason interfaces are great is that they encourage making your\r\ncode follow the same conventions as other Go code. People writing printf\r\nwrappers should use the standard names for them (printf, sprintf, fprintf,\r\nerrorf, fatalf, fprintf, panicf).\r\n\r\nI certainly agree that you could implement extra analysis to help\r\nprogrammers that are not following standard conventions. However, it's\r\nunclear that such behavior should be encouraged.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-29 21:32:36.842680",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 May 2013 17:32, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Part of the reason interfaces are great is that they encourage making your\r\n> code follow the same conventions as other Go code. People writing printf\r\n> wrappers should use the standard names for them (printf, sprintf, fprintf,\r\n> errorf, fatalf, fprintf, panicf).\r\n>\r\n> I certainly agree that you could implement extra analysis to help\r\n> programmers that are not following standard conventions. However, it's\r\n> unclear that such behavior should be encouraged.\r\n>\r\n\r\nPerhaps you're right and that it's diminishing returns to solve the general\r\ncase, but just within GOROOT I found the following functions that don't\r\nhave an 'f' suffix, for example:\r\n\r\npkg/encoding/ascii85/ascii85_test.go:func testEqual(t *testing.T, msg\r\nstring, args ...interface{}) bool {\r\npkg/encoding/base32/base32_test.go:func testEqual(t *testing.T, msg string,\r\nargs ...interface{}) bool {\r\npkg/encoding/base64/base64_test.go:func testEqual(t *testing.T, msg string,\r\nargs ...interface{}) bool {\r\npkg/encoding/gob/debug.go:func (deb *debugger) dump(format string, args\r\n...interface{}) {\r\npkg/net/smtp/smtp.go:func (c *Client) cmd(expectCode int, format string,\r\nargs ...interface{}) (int, string, error) {\r\npkg/net/textproto/textproto.go:func (c *Conn) Cmd(format string, args\r\n...interface{}) (id uint, err error) {\r\npkg/net/textproto/writer.go:func (w *Writer) PrintfLine(format string, args\r\n...interface{}) error {\r\npkg/runtime/softfloat64_test.go:func err(t *testing.T, format string, args\r\n...interface{}) {\r\n",
			"disapproval": false,
			"date": "2013-05-29 21:49:30.579390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 29, 2013 at 5:49 PM, Alan Donovan <adonovan@google.com> wrote:\r\n\r\n> Perhaps you're right and that it's diminishing returns to solve the\r\n> general case, but just within GOROOT I found the following functions that\r\n> don't have an 'f' suffix, for example:\r\n>\r\n\r\nOkay, you've convinced me. But I think what I'd really like is for vet to\r\nhandle the unexported ones automatically and to whine about the exported\r\nones, so that it doesn't need to start assuming access to the source code\r\nbeyond the type information you get from the imported compiled packages.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-30 00:18:06.513040",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "define 'handle the imported ones automatically' and 'whine about the\r\nexported ones'. in fact, define 'ones'.\r\n",
			"disapproval": false,
			"date": "2013-05-30 01:34:17.465160",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 9774043: go.tools/ssa: fix debug printing",
	"created": "2013-05-25 16:03:54.397770",
	"patchsets": [
		1,
		4001
	],
	"modified": "2013-05-30 01:34:17.855260",
	"closed": true,
	"issue": 9774043
}