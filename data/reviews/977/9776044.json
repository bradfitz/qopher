{
	"description": "runtime: fix CPU underutilization\nruntime.newproc/ready are deliberately sloppy about waking new M's,\nthey only ensure that there is at least 1 spinning M.\nCurrently to compensate for that, schedule() checks if the current P\nhas local work and there are no spinning M's, it wakes up another one.\nIt does not work if goroutines do not call schedule.\nWith this change a spinning M wakes up another M when it finds work to do.\nIt's also not ideal, but it fixes the underutilization.\nA proper check would require to know the exact number of runnable G's,\nbut it's too expensive to maintain.\nFixes issue 5586.",
	"cc": [
		"rsc@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-05 20:43:08.516390",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by dvyukov)",
			"disapproval": false,
			"date": "2013-06-14 14:27:01.641540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n\"spinning\" means that the M is waiting for a G, right?\nIf so, can we perhaps s/spinning/gwait/ in a separate CL?\nspinning has a different meaning in lock implementations, and I always think of that one.",
			"disapproval": false,
			"date": "2013-06-21 19:39:29.993900",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I should not have reviewed this. My mistake. Do not submit until the\r\nruntime CL moratorium is over.\r\n",
			"disapproval": false,
			"date": "2013-06-21 19:56:19.700590",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 21, 2013 at 11:39 PM,  <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n> \"spinning\" means that the M is waiting for a G, right?\r\n> If so, can we perhaps s/spinning/gwait/ in a separate CL?\r\n> spinning has a different meaning in lock implementations, and I always\r\n> think of that one.\r\n\r\nThis is not exactly \"gwait\" (as it was in the old scheduler). It means\r\nthat the M itself is actively look for new work, other M's can *not*\r\nhandoff new work to this M.\r\nThis is actually very close to the \"spinning\" in mutex implementations:\r\n\r\n// mutex:\r\ntry_fast_acquire(mu);\r\nmark_as_has_spinning(mu);\r\nfor(;;) {\r\n  sleep(...);\r\n  if(try_acqurie(mu)) {\r\n    unmark_as_has_spinning(mu);\r\n    break;\r\n }\r\n}\r\n\r\n// scheduler:\r\ntry_get_g_from_local_queue();\r\nm->spinning = true;\r\nfor(...) {\r\n  if(try_to_steal_from_another_P()) {\r\n    m->spinning = false;\r\n    break;\r\n }\r\n}\r\n",
			"disapproval": false,
			"date": "2013-06-27 16:51:42.223360",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1e280889f997 ***\n\nruntime: fix CPU underutilization\nruntime.newproc/ready are deliberately sloppy about waking new M's,\nthey only ensure that there is at least 1 spinning M.\nCurrently to compensate for that, schedule() checks if the current P\nhas local work and there are no spinning M's, it wakes up another one.\nIt does not work if goroutines do not call schedule.\nWith this change a spinning M wakes up another M when it finds work to do.\nIt's also not ideal, but it fixes the underutilization.\nA proper check would require to know the exact number of runnable G's,\nbut it's too expensive to maintain.\nFixes issue 5586.\n\nR=rsc\nCC=gobot, golang-dev\nhttps://codereview.appspot.com/9776044",
			"disapproval": false,
			"date": "2013-06-27 16:52:32.295730",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 20:11:14.687960",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9776044: runtime: fix CPU underutilization",
	"created": "2013-06-05 11:41:16.215650",
	"patchsets": [
		1,
		1001,
		4001,
		7001,
		9001,
		14001,
		20001,
		23001
	],
	"modified": "2013-07-20 20:11:14.780830",
	"closed": false,
	"issue": 9776044
}