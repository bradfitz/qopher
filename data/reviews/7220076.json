{
	"description": "net/http: fix when server deadlines get extended\n\nDeadlines should be extended at the beginning of\na request, not at the beginning of a connection.\n\nFixes issue 4676",
	"cc": [
		"golang-dev@googlegroups.com",
		"fullung@gmail.com",
		"patrick.allen.higgins@gmail.com",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-01 21:44:57.859350",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Howdy\n\nI suspect there might be a bug in this area. I asked about it on golang-nuts the other day, but no word there:\n\nhttps://groups.google.com/d/topic/golang-nuts/vBvpMSJeezc/discussion\n\nIn short, setting a WriteTimeout without a ReadTimeout doesn't work.\n\nCode here:\n\nhttps://gist.github.com/4640746\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-02-01 21:52:49.142730",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nOn Sat, Feb 2, 2013 at 12:06 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> On Fri, Feb 1, 2013 at 1:52 PM, <fullung@gmail.com> wrote:\r\n>> I suspect there might be a bug in this area. I asked about it on\r\n>> golang-nuts the other day, but no word there:\r\n>> https://groups.google.com/d/topic/golang-nuts/vBvpMSJeezc/discussion\r\n> HTTP handlers don't immediately flush to the client.  There's various\r\n> amounts of buffering.\r\n\r\nI'm pretty sure it gets stuck forever waiting for the read part to shut down.\r\n\r\nRun the server, do a request and then SIGQUIT it after a while.\r\n\r\nI've filed http://code.google.com/p/go/issues/detail?id=4741\r\n\r\nCheers\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2013-02-01 22:09:49.678850",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's a different bug, then.  This fixes a real bug, as shown in the test.\r\n\r\n\r\nOn Fri, Feb 1, 2013 at 1:52 PM, <fullung@gmail.com> wrote:\r\n\r\n> Howdy\r\n>\r\n> I suspect there might be a bug in this area. I asked about it on\r\n> golang-nuts the other day, but no word there:\r\n>\r\n> https://groups.google.com/d/**topic/golang-nuts/vBvpMSJeezc/**discussion<https://groups.google.com/d/topic/golang-nuts/vBvpMSJeezc/discussion>\r\n>\r\n> In short, setting a WriteTimeout without a ReadTimeout doesn't work.\r\n>\r\n> Code here:\r\n>\r\n> https://gist.github.com/**4640746 <https://gist.github.com/4640746>\r\n>\r\n> Cheers\r\n>\r\n> Albert\r\n>\r\n> https://codereview.appspot.**com/7220076/<https://codereview.appspot.com/7220076/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-01 22:02:30.952070",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 1, 2013 at 1:52 PM, <fullung@gmail.com> wrote:\r\n\r\n> Howdy\r\n>\r\n> I suspect there might be a bug in this area. I asked about it on\r\n> golang-nuts the other day, but no word there:\r\n>\r\n> https://groups.google.com/d/**topic/golang-nuts/vBvpMSJeezc/**discussion<https://groups.google.com/d/topic/golang-nuts/vBvpMSJeezc/discussion>\r\n\r\n\r\nHTTP handlers don't immediately flush to the client.  There's various\r\namounts of buffering.\r\n",
			"disapproval": false,
			"date": "2013-02-01 22:06:43.560480",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 1, 2013 at 2:09 PM, Albert Strasheim <fullung@gmail.com> wrote:\r\n\r\n> Hello\r\n>\r\n> On Sat, Feb 2, 2013 at 12:06 AM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > On Fri, Feb 1, 2013 at 1:52 PM, <fullung@gmail.com> wrote:\r\n> >> I suspect there might be a bug in this area. I asked about it on\r\n> >> golang-nuts the other day, but no word there:\r\n> >> https://groups.google.com/d/topic/golang-nuts/vBvpMSJeezc/discussion\r\n> > HTTP handlers don't immediately flush to the client.  There's various\r\n> > amounts of buffering.\r\n>\r\n> I'm pretty sure it gets stuck forever waiting for the read part to shut\r\n> down.\r\n>\r\n> Run the server, do a request and then SIGQUIT it after a while.\r\n>\r\n> I've filed http://code.google.com/p/go/issues/detail?id=4741\r\n>\r\n>\r\nCan you write a minimal test?\r\n\r\nThe current gist is like a \"my program doesn't work\", but I'm not exactly\r\nsure what you're trying to illustrate.\r\n\r\nLike, something without a \"chanBreaker\" or http.CloseNotifier or a \"gg\".\r\n",
			"disapproval": false,
			"date": "2013-02-01 22:14:10.179600",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/01 21:44:57, bradfitz wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nI like this. I hesitate on whether a separate idle timeout is needed. The existing read timeout makes sense on the first request, but on subsequent requests maybe a larger idle timeout should apply? Perhaps after the first byte of a subsequent request is received, the idle timeout should be replaced with the read timeout?",
			"disapproval": false,
			"date": "2013-02-01 23:13:08.852480",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 1, 2013 at 3:13 PM, <patrick.allen.higgins@gmail.com> wrote:\r\n\r\n> On 2013/02/01 21:44:57, bradfitz wrote:\r\n>\r\n>> Hello mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>,\r\n>>\r\n>\r\n>  I'd like you to review this change to\r\n>> https://go.googlecode.com/hg/\r\n>>\r\n>\r\n> I like this. I hesitate on whether a separate idle timeout is needed.\r\n> The existing read timeout makes sense on the first request, but on\r\n> subsequent requests maybe a larger idle timeout should apply? Perhaps\r\n> after the first byte of a subsequent request is received, the idle\r\n> timeout should be replaced with the read timeout?\r\n>\r\n\r\nReplaced with? There is no idle timeout, so how can it be replaced?\r\n\r\n\"1 byte\" doesn't typically matter: the HTTP request headers almost always\r\narrive in one packet.\r\n",
			"disapproval": false,
			"date": "2013-02-02 01:17:16.990050",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/02 01:17:16, bradfitz wrote:\n> On Fri, Feb 1, 2013 at 3:13 PM, <mailto:patrick.allen.higgins@gmail.com> wrote:\n> \n> > On 2013/02/01 21:44:57, bradfitz wrote:\n> >\n> >> Hello mailto:golang-dev@**googlegroups.com <mailto:golang-dev@googlegroups.com>,\n> >>\n> >\n> >  I'd like you to review this change to\n> >> https://go.googlecode.com/hg/\n> >>\n> >\n> > I like this. I hesitate on whether a separate idle timeout is needed.\n> > The existing read timeout makes sense on the first request, but on\n> > subsequent requests maybe a larger idle timeout should apply? Perhaps\n> > after the first byte of a subsequent request is received, the idle\n> > timeout should be replaced with the read timeout?\n> >\n> \n> Replaced with? There is no idle timeout, so how can it be replaced?\n\nI propose an IdleTimeout be added, though I'm not sure it's really needed.\n\nImagine ReadTimeout is 5s, IdleTimeout is 10s. Now imagine 9.5s after a response is written, a packet arrives. The deadline is reset so that the rest of the request must be read within 5s.\n\n> \"1 byte\" doesn't typically matter: the HTTP request headers almost always\n> arrive in one packet.\n\nUnderstood. I am using the \"time to first byte\" terminology, even though data arrives in packets.\n\nThe read timeout applies to the request body as well as headers, right?",
			"disapproval": false,
			"date": "2013-02-02 01:48:11.289340",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"patrick.allen.higgins@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks pretty good overall\n\nhttps://codereview.appspot.com/7220076/diff/2001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/7220076/diff/2001/src/pkg/net/http/server.go#newcode425\nsrc/pkg/net/http/server.go:425: c.rwc.SetWriteDeadline(time.Now().Add(d))\nI don't understand why this needs to be deferred, and why it is being set here. Does this function even write?",
			"disapproval": false,
			"date": "2013-02-04 02:58:51.169940",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"patrick.allen.higgins@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-04 21:45:15.933450",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"patrick.allen.higgins@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6f26fec4b5cd ***\n\nnet/http: fix when server deadlines get extended\n\nDeadlines should be extended at the beginning of\na request, not at the beginning of a connection.\n\nFixes issue 4676\n\nR=golang-dev, fullung, patrick.allen.higgins, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7220076",
			"disapproval": false,
			"date": "2013-02-04 21:52:48.906900",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"patrick.allen.higgins@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7220076/diff/2001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/7220076/diff/2001/src/pkg/net/http/server.go#newcode425\nsrc/pkg/net/http/server.go:425: c.rwc.SetWriteDeadline(time.Now().Add(d))\nOn 2013/02/04 02:58:51, adg wrote:\n> I don't understand why this needs to be deferred, and why it is being set here.\n> Does this function even write?\n\nBecause the http Handler will be writing, which happens after this function returns.\n\nI'm using a defer here to avoid writing c.rwc.SetWriteDeadline(time.Now().Add(d)) at both return paths in this function (even on the error path we'll be writing to the client's net.Conn, to tell them Bad Request or whatever).\n\nAnd I used a closure to defer because I didn't want to evaluate time.Now() until it's actually returning, since it may take awhile to read the request.",
			"disapproval": false,
			"date": "2013-02-04 17:25:43.086330",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7220076: net/http: fix when server deadlines get extended",
	"created": "2013-02-01 21:44:40.425920",
	"patchsets": [
		1,
		2001,
		16001
	],
	"modified": "2013-02-11 17:09:50.146700",
	"closed": true,
	"issue": 7220076
}