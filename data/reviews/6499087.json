{
	"description": "go103 backport",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"daniel.morsing@gmail.com",
		"dsymonds@golang.org",
		"iant@golang.org",
		"remyoudompheng@gmail.com",
		"rsc@golang.org",
		"r@golang.org",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am additionnally thinking we should include the following changes that predate Go 1.0.2, plus the compiler bug below which is excluded for some reason.\n\n* Issue 3180: annoyances with GOROOT_FINAL (make debugging uncomfortable)\na608a03df703 5a, 6a, 8a: take GOROOT_FINAL into consideration\n016c4fefed77 5c, 6c, 8c: take GOROOT_FINAL into consideration\nba91b34fe212 cmd/gc: if $GOROOT_FINAL is set, rewrite file names in object files\n\n* Issue 3918: serious compiler corruptions on 64 bits\n72678c75b2d3 cmd/6c: fix probable code gen bug\na9e09f1fe373 6c, 6g, 6l: add MOVQL to make truncation explicit\n\n* Issue 3824: code semantics violated by compiler\n80c98738fdde cmd/gc: fix initialization order involving method calls.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode230\nmisc/backport/go103-excluded:230: 238a5fd52836\t-10\t3: +35/-6\tcmd/gc: fix escape analysis bug with variable capture in loops.\nThis change is a one-line fix, is it really not mergeable?\n\nIt causes potential corruption in programs and seems very important to me.",
			"disapproval": false,
			"date": "2012-09-11 20:59:57.921990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6499087/diff/7046/misc/backport/patches/22a65f54a36a.diff\nFile misc/backport/patches/22a65f54a36a.diff (right):\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/patches/22a65f54a36a.diff#newcode1\nmisc/backport/patches/22a65f54a36a.diff:1: diff -r 0e114e4df4ec -r 22a65f54a36a src/pkg/syscall/exec_plan9.go\nPlease include the CL description at the top of all these diffs. patch will ignore it.",
			"disapproval": false,
			"date": "2012-09-13 19:11:36.773790",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6499087/diff/7046/misc/backport/backport\nFile misc/backport/backport (right):\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/backport#newcode26\nmisc/backport/backport:26: yes c | HGEDITOR=$goroot/misc/backport/graftedit REVISION=$r hg graft -e -D $r\nOn 2012/09/13 18:53:40, rsc wrote:\n> I'm a little worried by this. I didn't need 'yes c |' for go 1.0.2. Does that\n> imply things are not merging perfectly and you are overriding the conflicts?\n\nIt's for these prompts:\n\nremote changed src/pkg/net/net_posix.go which local deleted\nuse (c)hanged version or leave (d)eleted? c\n\nwhich, for some reason, appeared with the rc version of the script and automatically chose 'c'. Maybe because rc didn't make hg aware of the controlling terminal? Whatever the case, this should be the same behavior as with the rc script.\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/go103\nFile misc/backport/go103 (right):\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/go103#newcode6\nmisc/backport/go103:6: 67b66dd9ea4a\t100\t2: +188/-37\tnet/http: add If-None-Match and If-Range support to ServeContent\nOn 2012/09/13 19:10:04, rsc wrote:\n> I don't believe this is appropriate in Go 1.0.3. This is new functionality.\n\nWithout it I get test failures:\n\n--- FAIL: TestIssue3595 (0.01 seconds)\n\ttransport_test.go:848: Post: write tcp 127.0.0.1:51987: broken pipe\nFAIL\n\nGiven that this merely makes ServeContent more compliant with the RFC, I'm inclined to treat it as bugfix-esque.\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/patches/22a65f54a36a.diff\nFile misc/backport/patches/22a65f54a36a.diff (right):\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/patches/22a65f54a36a.diff#newcode1\nmisc/backport/patches/22a65f54a36a.diff:1: diff -r 0e114e4df4ec -r 22a65f54a36a src/pkg/syscall/exec_plan9.go\nOn 2012/09/13 19:11:36, rsc wrote:\n> Please include the CL description at the top of all these diffs. patch will\n> ignore it.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-14 02:35:35.565010",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've updated this CL and pushed out a new candidate to this repo:\r\n  https://code.google.com/r/adg-go103-test-1\r\n\r\nIt builds and passes all tests on my macbook. Yay, or so I thought.\r\n\r\nOn my ubuntu Linux machine it fails the same net/http test that was\r\nfailing before:\r\n\r\n2012/09/14 14:54:17 Unsolicited response received on idle HTTP channel\r\nstarting with \"H\"; err=<nil>\r\n--- FAIL: TestIssue3595 (0.00 seconds)\r\ntransport_test.go:848: \tPost: write tcp 127.0.0.1:42247: connection\r\nreset by peer\r\n2012/09/14 14:54:18 Unsolicited response received on idle HTTP channel\r\nstarting with \"H\"; err=<nil>\r\nFAIL\r\nFAIL\tnet/http\t1.960s\r\n\r\nConfusing. I am going to stop for today and resume playing with it on Monday.\r\n\r\nRuss, if you'd like to have a crack at this on your Friday that'd be great.\r\n\r\nBrad, I know you said you didn't want to be debugging a frankenstein\r\nof your net/http, but can you think of why this might pass on my\r\nmacbook but fail on my linux box? The linux box has 6 cores, while the\r\nmacbook has 2. Could be related?\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-09-14 05:12:51.149420",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/14 04:00:16, adg wrote:\n> On 13 September 2012 16:53,  <mailto:remyoudompheng@gmail.com> wrote:\n> >> I modified the diff to esc.c as I assumed was correct, but now\n> >\n> > test/escape.go\n> >\n> > Sorry it seems things have a little bit more, so you will need this\n> > patch. rsc, do you approve?\n> >\n> Thanks Remy. This patch works well.\n\nThanks. I still really think issue 3918 should get a fix or a workaround for Go 1.0.3. It triggers way too easily to be ignored. I agree that the commits on tip that fixes the issue are too intrusive.\n\nCan you/rsc/anyone take a look at http://codereview.appspot.com/6497136/ ?\n\nIt disables the part of the optimizer that leads to the bug, and should apply really cleanly. \n\nThanks.",
			"disapproval": false,
			"date": "2012-09-14 09:55:46.925380",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttps://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded#newcode91\nmisc/backport/go103-excluded:91: aeaab9df5600\t-1\t1: +6/-1\tcmd/cgo: use 1 as last entry for __cgodebug_data\ni recommend taking this change.\n\nit trivially fixed a real cgo bug when using newer versions of Xcode gcc.\n\nhttps://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded#newcode133\nmisc/backport/go103-excluded:133: 7c5f4dad8fae\t-1\t2: +19/-11\tpprof: make it work on windows again\ni also recommend taking this CL.\n\nquite some people are asking how to use pprof on Windows, and\nthis CL will surely help them.\n\nhttps://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded#newcode134\nmisc/backport/go103-excluded:134: 80be10893a8b\t-1\t4: +24/-40\tsyscall: extract an ExampleLoadLibrary from comment\nthis is a pure docs change, taking it won't do any harm.",
			"disapproval": false,
			"date": "2012-09-16 17:03:11.790660",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/14 17:31:15, rsc wrote:\n> Remy, do you have any measurements of the performance difference (say,\n> on test/bench/go1) if we apply 6497136. I'm a little worried.\n\nThe fannkuch benchmark is quite sensible to disabling the movprop in that case. What do you advise? It feels awkward to have a \"Known issues\" section in release notes.\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   9310850000   9207829000   -1.11%\nBenchmarkFannkuch11     8313733000   9494323000  +14.20%\nBenchmarkGobDecode        30859680     31051680   +0.62%\nBenchmarkGobEncode        17888400     18581720   +3.88%\nBenchmarkGzip               299812       298566   -0.42%\nBenchmarkGunzip              17710        17594   -0.65%\nBenchmarkJSONEncode      114687650    117321600   +2.30%\nBenchmarkJSONDecode      438836200    442206000   +0.77%\nBenchmarkRevcomp25M     1796440000   1742657000   -2.99%\nBenchmarkTemplate        663305400    652331200   -1.65%\n\nbenchmark                 old MB/s     new MB/s  speedup\nBenchmarkGobDecode           24.87        24.72    0.99x\nBenchmarkGobEncode           42.91        41.31    0.96x\nBenchmarkJSONEncode          16.92        16.54    0.98x\nBenchmarkJSONDecode           4.42         4.39    0.99x\nBenchmarkRevcomp25M         141.48       145.85    1.03x\nBenchmarkTemplate             2.93         2.97    1.01x",
			"disapproval": false,
			"date": "2012-09-16 21:22:32.354670",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttps://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode100\nmisc/backport/go103-excluded:100: 33a62d86ca2f\t-1\t2: +19/-7\tcmd/gc: Suggest *T in error for x.(T) if it would work.\nThis change (33a62d86ca2f) is self-contained and I think it can be helpful for new Go programmers.  Not essential but might be nice.\n\nhttps://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode101\nmisc/backport/go103-excluded:101: 3532ab6bf5be\t-1\t4: +36/-21\truntime: use sched_getaffinity for runtime.NumCPU() on Linux\nI am mildly in favor of this change (3532ab6bf5be).  It's more accurate and more efficient.\n\nhttps://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode115\nmisc/backport/go103-excluded:115: 56ea40aac72b\t-1\t4: +330/-2\truntime: add vdso support for linux/amd64. Fixes issue 1933.\nThis change (56ea40aac72b) should be included in 1.0.3.",
			"disapproval": false,
			"date": "2012-09-11 13:17:41.180240",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/11 20:59:57, remyoudompheng wrote:\n> * Issue 3180: annoyances with GOROOT_FINAL (make debugging uncomfortable)\n> a608a03df703 5a, 6a, 8a: take GOROOT_FINAL into consideration\n> 016c4fefed77 5c, 6c, 8c: take GOROOT_FINAL into consideration\n> ba91b34fe212 cmd/gc: if $GOROOT_FINAL is set, rewrite file names in object files\n\nWhat is the position on this? Issue 3180 mentions the fix for the Go compiler, but for consistency the fixes for assembler and C should be included as well.\n \n> * Issue 3918: serious compiler corruptions on 64 bits\n> 72678c75b2d3 cmd/6c: fix probable code gen bug\n> a9e09f1fe373 6c, 6g, 6l: add MOVQL to make truncation explicit\n\nadg: what is your opinion on these? We use Go in production and having potential mysterious bugs whenever integers are converted between 32-bit and 64-bit is really a serious issue.",
			"disapproval": false,
			"date": "2012-09-12 19:52:44.844000",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 13 September 2012 02:27, Russ Cox <rsc@golang.org> wrote:\r\n> issue 3180 asks that we include ba91b34fe212 in 1.0.3. Does it apply cleanly?\r\n\r\nThe change predates Go 1.0, so it's already in release-branch.go1.\r\n\r\nhttps://code.google.com/p/go/source/detail?r=ba91b34fe212\r\n",
			"disapproval": false,
			"date": "2012-09-12 23:21:14.579460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about\n8eae6e390d20 fix handling of CONNECT in http servemux\n5e7fd762f356 fix testing memory usage\n7a67d277c7e8 fix concurrent logging and failing in testing\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/go103\nFile misc/backport/go103 (right):\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/go103#newcode6\nmisc/backport/go103:6: 67b66dd9ea4a\t100\t2: +188/-37\tnet/http: add If-None-Match and If-Range support to ServeContent\nI don't believe this is appropriate in Go 1.0.3. This is new functionality.",
			"disapproval": false,
			"date": "2012-09-13 19:10:04.707610",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's one controversial patch here:\r\n\r\n86c7b6d67466\t10\t39: +2811/-476\tsyscall: return EINVAL when string\r\narguments have NUL characters\r\n\r\nIt introduces an API change in syscall (ByteSliceFromString & co). I\r\nam inclined to say this API expansion is permissible given it fixes a\r\nsecurity hole, and will most certainly be in Go 1.1. But this goes\r\nagainst our policy of not expanding the API in minor point releases.\r\n\r\nThoughts?\r\n",
			"disapproval": false,
			"date": "2012-09-12 00:47:20.474060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Sep 11, 2012 at 8:46 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n> There's one controversial patch here:\r\n>\r\n> 86c7b6d67466    10      39: +2811/-476  syscall: return EINVAL when string\r\n> arguments have NUL characters\r\n>\r\n> It introduces an API change in syscall (ByteSliceFromString & co). I\r\n> am inclined to say this API expansion is permissible given it fixes a\r\n> security hole, and will most certainly be in Go 1.1. But this goes\r\n> against our policy of not expanding the API in minor point releases.\r\n>\r\n> Thoughts?\r\n\r\nUnexport the new functions but keep the changes to the existing ones.\r\n",
			"disapproval": false,
			"date": "2012-09-12 00:48:32.497200",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Candidate repo here:\r\n\r\nhttps://code.google.com/r/adg-go103-test-3\r\n",
			"disapproval": false,
			"date": "2012-09-17 19:41:44.725940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "issue 3180 asks that we include ba91b34fe212 in 1.0.3. Does it apply cleanly?\r\n",
			"disapproval": false,
			"date": "2012-09-12 16:27:41.443140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not very worried about this bug. This has been in Go since day 1\r\nand yet no one has ever reported it. I agree that we should fix it but\r\nI don't think we need to rush out a not-very-soaked fix as part of\r\n1.0.3.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-17 18:36:22.166690",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks like I neglected to do an \"hg add\" of the new cgo test files, so \r\nthat's why misc/cgo/test fails. Will fix.\r\n",
			"disapproval": false,
			"date": "2012-09-11 10:03:38.024000",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttps://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode98\nmisc/backport/go103-excluded:98: 272e1dd72156\t-1\t2: +29/-0\tcmd/gc: fix PkgPath of byte, rune types\nOn 2012/09/11 10:42:54, DMorsing wrote:\n> This change fixes a regression introduced in go1.0.1 that might break\n> compatibility for users of reflect.\n\nI believe it was actually a regression introduced in 1.0.2, but I agree it would be good to include this.",
			"disapproval": false,
			"date": "2012-09-11 11:45:05.233900",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 September 2012 13:20, Russ Cox <rsc@golang.org> wrote:\r\n> I looked into the net/http test failure in the go103-test-1 repo.\r\n> I don't believe 305f67dc3f99 is correct. Can you drop it from the go103 list?\r\n\r\nWith this removed\r\n\r\n305f67dc3f99\t10\t2: +86/-10\tnet/http: make client await response\r\nconcurrently with writing request\r\n\r\nI also need to remove these two\r\n\r\n26b62d1db69f\t10\t1: +17/-13\tnet/http: fix send on close channel error\r\n81f45da9df0d\t10\t2: +91/-9\tnet/http: fix Transport race(s) with high GOMAXPROCS\r\n\r\nwhich seems fine, to me. It's no worse than 1.0.2 at least.\r\n\r\nObjections from Brad?\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-09-17 19:29:10.597520",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is a work-in-progress of the Go 1.0.3 release.\r\n\r\ngo103 lists the included changes\r\ngo103-manual lists the changes manually applied by the patches in the\r\npatches directory (to avoid merge conflicts)\r\ngo103-excluded lists the changes that are not included for a variety of reasons\r\n\r\nIn each of those files, there are four tab-separated columns:\r\n\r\n62f087306b18\t10\t2: +7/-2\ttext/template/parse: fix bug handling /*/\r\n\r\nThe hash, the priority, files: lines changed, and the change summary.\r\nPriority >0 means included. 0 means unsure. <0 means excluded.\r\nChanges with priority <-1 were originally supposed to be included, but\r\nwere taken out because they caused merge conflicts and didn't seem\r\nworth the pain of doing them manually.\r\n\r\nYou can import these into Google Docs as a spreadsheet for easier viewing.\r\n\r\nThis CL in its present state produces a tree that builds and passes\r\ntests on darwin/amd64. I have pushed a clone of the repo (as produced\r\nby the 'backport' script) to this repo:\r\n  https://code.google.com/p/go103-test\r\n\r\nI would like feedback from golang-dev about the choice of changes\r\n(particularly those at priority 0), and whether you encounter any\r\nissues building or running your programs under the go103-test tree.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-09-11 07:42:01.828000",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/12 19:52:57, remyoudompheng wrote:\n> misc/backport/go103-excluded:230: 238a5fd52836\t-10\t3: +35/-6\tcmd/gc: fix escape\n> analysis bug with variable capture in loops.\n> The bug is present in Go 1.0.2 as mentioned in issue 3975. It breaks memory\n> safety and should be treated (at least) like security issues.\n> \n> The relevant line is esc.c:145 in go1.0.2 because of some code move.\n\nCan you please take a look at  238a5fd52836.diff ? \n\nI modified the diff to esc.c as I assumed was correct, but now test/escape.go fails:\n\n# ../test\nrun        escape.go           : incorrect output\nwrong value want 105 got 106 after for_escapes3\naliased pointers -15 -16 after for_escapes3\npanic: BUG: no escape\n\ngoroutine 1 [running]:\nmain.main()\n\t/tmp/go1-test/test/escape.go:220 +0x6b6\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n\t/tmp/go1-test/src/pkg/runtime/proc.c:221\nexit status 2\n\nexit status 1",
			"disapproval": false,
			"date": "2012-09-13 00:42:23.131290",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 14 September 2012 12:53, Russ Cox <rsc@golang.org> wrote:\r\n>> Without it I get test failures:\r\n>>\r\n>> --- FAIL: TestIssue3595 (0.01 seconds)\r\n>>         transport_test.go:848: Post: write tcp 127.0.0.1:51987: broken pipe\r\n>> FAIL\r\n>>\r\n>> Given that this merely makes ServeContent more compliant with the RFC,\r\n>> I'm inclined to treat it as bugfix-esque.\r\n>\r\n> It changes the behavior of the server based on the caller's setting of\r\n> the Etag header, which has never been documented to have any special\r\n> meaning to the server code. It's an API change, albeit one without a\r\n> corresponding type system change. It would be okay to keep the header\r\n> stripping but the If-Range and If-None-Match changes cannot go into an\r\n> x.y.z release. It is almost certainly easier to drop the CL whole than\r\n> just half.\r\n\r\nOK, I agree it should be dropped.\r\n\r\n> I have no idea why not having it would cause a test failure. I ran hg\r\n> undo 67b66dd9ea4a from tip in my local client, and all.bash and 'go\r\n> test net/http' are both happy. The failure you are seeing worries me.\r\n> Can you push a version with that? It is probably better to push to new\r\n> clones than to make new projects, by the way. Scroll to the bottom of\r\n> http://code.google.com/p/go/source/clones and click 'Create a clone'.\r\n\r\nTestIssue3595 continues to cause problems. It has resurfaced, and I'm\r\nnot sure why. I am wondering whether it is flaky against the current\r\npatch set and I am just unlucky. I will continue to investigate.\r\n",
			"disapproval": false,
			"date": "2012-09-14 02:57:40.625760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Remy, do you have any measurements of the performance difference (say,\r\non test/bench/go1) if we apply 6497136. I'm a little worried.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-14 17:31:15.996330",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 13 September 2012 05:52,  <remyoudompheng@gmail.com> wrote:\r\n> On 2012/09/11 20:59:57, remyoudompheng wrote:\r\n>>\r\n>> * Issue 3180: annoyances with GOROOT_FINAL (make debugging\r\n>\r\n> uncomfortable)\r\n>>\r\n>> a608a03df703 5a, 6a, 8a: take GOROOT_FINAL into consideration\r\n>> 016c4fefed77 5c, 6c, 8c: take GOROOT_FINAL into consideration\r\n>> ba91b34fe212 cmd/gc: if $GOROOT_FINAL is set, rewrite file names in\r\n>\r\n> object files\r\n>\r\n> What is the position on this? Issue 3180 mentions the fix for the Go\r\n> compiler, but for consistency the fixes for assembler and C should be\r\n> included as well.\r\n\r\nHappy to take them if it's not too painful to merge them.\r\n\r\n>\r\n>> * Issue 3918: serious compiler corruptions on 64 bits\r\n>> 72678c75b2d3 cmd/6c: fix probable code gen bug\r\n>> a9e09f1fe373 6c, 6g, 6l: add MOVQL to make truncation explicit\r\n>\r\n>\r\n> adg: what is your opinion on these? We use Go in production and having\r\n> potential mysterious bugs whenever integers are converted between 32-bit\r\n> and 64-bit is really a serious issue.\r\n\r\nI don't have an opinion. I rely on guidance from people who actually\r\nknow the compilers. It's all about risk; will the code be more\r\nreliable with or without the patch?\r\n",
			"disapproval": false,
			"date": "2012-09-12 23:31:40.171440",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/12 23:31:40, adg wrote:\n> On 13 September 2012 05:52,  <mailto:remyoudompheng@gmail.com> wrote:\n> > On 2012/09/11 20:59:57, remyoudompheng wrote:\n> >>\n> >> * Issue 3180: annoyances with GOROOT_FINAL (make debugging\n> >\n> > uncomfortable)\n> >>\n> >> a608a03df703 5a, 6a, 8a: take GOROOT_FINAL into consideration\n> >> 016c4fefed77 5c, 6c, 8c: take GOROOT_FINAL into consideration\n> >> ba91b34fe212 cmd/gc: if $GOROOT_FINAL is set, rewrite file names in\n> >\n> > object files\n> >\n> > What is the position on this? Issue 3180 mentions the fix for the Go\n> > compiler, but for consistency the fixes for assembler and C should be\n> > included as well.\n> \n> Happy to take them if it's not too painful to merge them.\n\nThese merged fine.",
			"disapproval": false,
			"date": "2012-09-13 00:19:06.150190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I looked into the net/http test failure in the go103-test-1 repo.\r\nI don't believe 305f67dc3f99 is correct. Can you drop it from the go103 list?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-16 20:20:44.767360",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-09-11 07:33:00.574830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> remote changed src/pkg/net/net_posix.go which local deleted\r\n> use (c)hanged version or leave (d)eleted? c\r\n>\r\n> which, for some reason, appeared with the rc version of the script and\r\n> automatically chose 'c'. Maybe because rc didn't make hg aware of the\r\n> controlling terminal? Whatever the case, this should be the same\r\n> behavior as with the rc script.\r\n\r\nI just didn't have any of those in go102. Thanks for the explanation.\r\n\r\n> Without it I get test failures:\r\n>\r\n> --- FAIL: TestIssue3595 (0.01 seconds)\r\n>         transport_test.go:848: Post: write tcp 127.0.0.1:51987: broken pipe\r\n> FAIL\r\n>\r\n> Given that this merely makes ServeContent more compliant with the RFC,\r\n> I'm inclined to treat it as bugfix-esque.\r\n\r\nIt changes the behavior of the server based on the caller's setting of\r\nthe Etag header, which has never been documented to have any special\r\nmeaning to the server code. It's an API change, albeit one without a\r\ncorresponding type system change. It would be okay to keep the header\r\nstripping but the If-Range and If-None-Match changes cannot go into an\r\nx.y.z release. It is almost certainly easier to drop the CL whole than\r\njust half.\r\n\r\nI have no idea why not having it would cause a test failure. I ran hg\r\nundo 67b66dd9ea4a from tip in my local client, and all.bash and 'go\r\ntest net/http' are both happy. The failure you are seeing worries me.\r\nCan you push a version with that? It is probably better to push to new\r\nclones than to make new projects, by the way. Scroll to the bottom of\r\nhttp://code.google.com/p/go/source/clones and click 'Create a clone'.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-14 02:54:00.542390",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 13 September 2012 16:53,  <remyoudompheng@gmail.com> wrote:\r\n> On 2012/09/13 00:42:23, adg wrote:\r\n>>\r\n>> On 2012/09/12 19:52:57, remyoudompheng wrote:\r\n>> > misc/backport/go103-excluded:230: 238a5fd52836        -10     3: +35/-6\r\n>> > cmd/gc:\r\n>\r\n> fix\r\n>>\r\n>> escape\r\n>> > analysis bug with variable capture in loops.\r\n>> > The bug is present in Go 1.0.2 as mentioned in issue 3975. It breaks\r\n>\r\n> memory\r\n>>\r\n>> > safety and should be treated (at least) like security issues.\r\n>> >\r\n>> > The relevant line is esc.c:145 in go1.0.2 because of some code move.\r\n>\r\n>\r\n>> Can you please take a look at  238a5fd52836.diff ?\r\n>\r\n>\r\n>> I modified the diff to esc.c as I assumed was correct, but now\r\n>\r\n> test/escape.go\r\n>\r\n> Sorry it seems things have a little bit more, so you will need this\r\n> patch. rsc, do you approve?\r\n>\r\n> --- /usr/lib/go/src/cmd/gc/esc.c        2012-06-14 05:23:38.000000000 +0200\r\n> +++ src/cmd/gc/esc.c    2012-09-13 08:52:16.180558427 +0200\r\n> @@ -143,6 +143,9 @@\r\n>\r\n>                 n = nod(OADDR, ll->n->closure, N);\r\n>                 n->lineno = ll->n->lineno;\r\n> +               // n belongs to the outer scope.\r\n> +               n->escloopdepth = saveld;\r\n> +               n->curfn = savefn;\r\n>                 typecheck(&n, Erv);\r\n>                 escassign(curfn, n);\r\n>\r\n>         }\r\n\r\nThanks Remy. This patch works well.\r\n",
			"disapproval": false,
			"date": "2012-09-14 04:00:16.210360",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm\r\n",
			"disapproval": false,
			"date": "2012-09-17 19:31:25.417020",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode230\nmisc/backport/go103-excluded:230: 238a5fd52836\t-10\t3: +35/-6\tcmd/gc: fix escape analysis bug with variable capture in loops.\nThe bug is present in Go 1.0.2 as mentioned in issue 3975. It breaks memory safety and should be treated (at least) like security issues.\n\nThe relevant line is esc.c:145 in go1.0.2 because of some code move.",
			"disapproval": false,
			"date": "2012-09-12 19:52:57.609890",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/13 00:42:23, adg wrote:\n> On 2012/09/12 19:52:57, remyoudompheng wrote:\n> > misc/backport/go103-excluded:230: 238a5fd52836\t-10\t3: +35/-6\tcmd/gc: fix\n> escape\n> > analysis bug with variable capture in loops.\n> > The bug is present in Go 1.0.2 as mentioned in issue 3975. It breaks memory\n> > safety and should be treated (at least) like security issues.\n> > \n> > The relevant line is esc.c:145 in go1.0.2 because of some code move.\n> \n> Can you please take a look at  238a5fd52836.diff ? \n> \n> I modified the diff to esc.c as I assumed was correct, but now test/escape.go\n\nSorry it seems things have a little bit more, so you will need this patch. rsc, do you approve?\n\n--- /usr/lib/go/src/cmd/gc/esc.c\t2012-06-14 05:23:38.000000000 +0200\n+++ src/cmd/gc/esc.c\t2012-09-13 08:52:16.180558427 +0200\n@@ -143,6 +143,9 @@\n \n \t\tn = nod(OADDR, ll->n->closure, N);\n \t\tn->lineno = ll->n->lineno;\n+\t\t// n belongs to the outer scope.\n+\t\tn->escloopdepth = saveld;\n+\t\tn->curfn = savefn;\n \t\ttypecheck(&n, Erv);\n \t\tescassign(curfn, n);\n \t}\n\n> fails:\n> \n> # ../test\n> run        escape.go           : incorrect output\n> wrong value want 105 got 106 after for_escapes3\n> aliased pointers -15 -16 after for_escapes3\n> panic: BUG: no escape\n> \n> goroutine 1 [running]:\n> main.main()\n> \t/tmp/go1-test/test/escape.go:220 +0x6b6\n> \n> goroutine 2 [syscall]:\n> created by runtime.main\n> \t/tmp/go1-test/src/pkg/runtime/proc.c:221\n> exit status 2\n> \n> exit status 1",
			"disapproval": false,
			"date": "2012-09-13 06:53:30.562560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The change fixes a security problem and should be included.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-12 04:10:41.851090",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 17 September 2012 12:28, Andrew Gerrand <adg@golang.org> wrote:\r\n> Objections from Brad?\r\n\r\nBrad says ok.\r\n",
			"disapproval": false,
			"date": "2012-09-17 19:40:58.397560",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "From a quick look over go103-excluded, I'd like to throw in my 2 cents as to which changes I'd like included.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode74\nmisc/backport/go103-excluded:74: 98788e8973f2\t-1\t7: +500/-500\tcmd/gc: point \"no new variables\" error at right line number.\nThis change is actually fairly minor and fixes an issue where the compiler would confuse the user.\n\nThe huge diffstat is because of regenerating the bison files.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode98\nmisc/backport/go103-excluded:98: 272e1dd72156\t-1\t2: +29/-0\tcmd/gc: fix PkgPath of byte, rune types\nThis change fixes a regression introduced in go1.0.1 that might break compatibility for users of reflect.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode118\nmisc/backport/go103-excluded:118: 6429097c1c0f\t-1\t2: +5/-31\tcmd/gc: mark broken type declarations as broken.\nThis removes a error where the compiler would print out a wrong error and confuse the user.\n\nBig diffstat on this is because it accidentally clobbered another test file during submit. If this patch is included, include 391791277b74 as well",
			"disapproval": false,
			"date": "2012-09-11 10:42:54.699320",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The files now include changes up to and including ffe134f40269.\n\nI included a bunch more net/http patches to get a code base close to tip (this is what we did for 1.0.1, too), except now the tree builds but fails with this error:\n\n--- FAIL: TestIssue3595 (0.03 seconds)\n\ttransport_test.go:848: Post: write tcp 127.0.0.1:51605: broken pipe\n2012/09/12 18:01:42 Unsolicited response received on idle HTTP channel starting with \"H\"; err=<nil>\nFAIL\nFAIL\tnet/http\t3.909s\n\nSigh. Tomorrow I'll try including more of the net/http changes. I didn't think I missed any that related to this change, but I guess I must have.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode98\nmisc/backport/go103-excluded:98: 272e1dd72156\t-1\t2: +29/-0\tcmd/gc: fix PkgPath of byte, rune types\nOn 2012/09/11 10:42:54, DMorsing wrote:\n> This change fixes a regression introduced in go1.0.1 that might break\n> compatibility for users of reflect.\n\nOk, included.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode98\nmisc/backport/go103-excluded:98: 272e1dd72156\t-1\t2: +29/-0\tcmd/gc: fix PkgPath of byte, rune types\nOn 2012/09/11 10:42:54, DMorsing wrote:\n> This change fixes a regression introduced in go1.0.1 that might break\n> compatibility for users of reflect.\n\nDone.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode100\nmisc/backport/go103-excluded:100: 33a62d86ca2f\t-1\t2: +19/-7\tcmd/gc: Suggest *T in error for x.(T) if it would work.\nOn 2012/09/11 13:17:41, iant wrote:\n> This change (33a62d86ca2f) is self-contained and I think it can be helpful for\n> new Go programmers.  Not essential but might be nice.\n\nAdded.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode101\nmisc/backport/go103-excluded:101: 3532ab6bf5be\t-1\t4: +36/-21\truntime: use sched_getaffinity for runtime.NumCPU() on Linux\nOn 2012/09/11 13:17:41, iant wrote:\n> I am mildly in favor of this change (3532ab6bf5be).  It's more accurate and more\n> efficient.\n\nAdded.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode115\nmisc/backport/go103-excluded:115: 56ea40aac72b\t-1\t4: +330/-2\truntime: add vdso support for linux/amd64. Fixes issue 1933.\nOn 2012/09/11 13:17:41, iant wrote:\n> This change (56ea40aac72b) should be included in 1.0.3.\n\nDone.\n\nhttp://codereview.appspot.com/6499087/diff/2002/misc/backport/go103-excluded#newcode230\nmisc/backport/go103-excluded:230: 238a5fd52836\t-10\t3: +35/-6\tcmd/gc: fix escape analysis bug with variable capture in loops.\nOn 2012/09/11 20:59:58, remyoudompheng wrote:\n> This change is a one-line fix, is it really not mergeable?\n> \n> It causes potential corruption in programs and seems very important to me.\n\nThe relevant escape analysis stuff isn't present in go1.0.2 and so the fix isn't relevant as far as I can tell. Am I wrong?\n\nhttp://codereview.appspot.com/6499087/diff/15001/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttp://codereview.appspot.com/6499087/diff/15001/misc/backport/go103-excluded#newcode1\nmisc/backport/go103-excluded:1: 80c98738fdde\t0\t3: +48/-1\tcmd/gc: fix initialization order involving method calls.\ntried including this but it didn't merge cleanly. want to sort out the other gc issues first.",
			"disapproval": false,
			"date": "2012-09-12 08:11:42.776520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6499087/diff/7046/misc/backport/backport\nFile misc/backport/backport (right):\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/backport#newcode26\nmisc/backport/backport:26: yes c | HGEDITOR=$goroot/misc/backport/graftedit REVISION=$r hg graft -e -D $r\nI'm a little worried by this. I didn't need 'yes c |' for go 1.0.2. Does that imply things are not merging perfectly and you are overriding the conflicts?\n\nhttp://codereview.appspot.com/6499087/diff/7046/misc/backport/backport#newcode52\nmisc/backport/backport:52: exit 0\nDelete.",
			"disapproval": false,
			"date": "2012-09-13 18:53:39.950580",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded\nFile misc/backport/go103-excluded (right):\n\nhttps://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded#newcode91\nmisc/backport/go103-excluded:91: aeaab9df5600\t-1\t1: +6/-1\tcmd/cgo: use 1 as last entry for __cgodebug_data\nOn 2012/09/16 17:03:12, minux wrote:\n> i recommend taking this change.\n> \n> it trivially fixed a real cgo bug when using newer versions of Xcode gcc.\n\nDone.\n\nhttps://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded#newcode133\nmisc/backport/go103-excluded:133: 7c5f4dad8fae\t-1\t2: +19/-11\tpprof: make it work on windows again\nOn 2012/09/16 17:03:12, minux wrote:\n> i also recommend taking this CL.\n> \n> quite some people are asking how to use pprof on Windows, and\n> this CL will surely help them.\n\nDone.\n\nhttps://codereview.appspot.com/6499087/diff/14049/misc/backport/go103-excluded#newcode134\nmisc/backport/go103-excluded:134: 80be10893a8b\t-1\t4: +24/-40\tsyscall: extract an ExampleLoadLibrary from comment\nOn 2012/09/16 17:03:12, minux wrote:\n> this is a pure docs change, taking it won't do any harm.\n\nFails to merge automatically and it's not worth the time to merge it manually. Sorry.",
			"disapproval": false,
			"date": "2012-09-18 15:03:23.523110",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've pushed this to the main repo and the builders are reporting that\r\nwindows is broken. Something wrong with net. I will investigate but if any\r\nwindows people can suggest a fix I'd appreciate it.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-09-21 20:41:18.082060",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Both these windows issues appear to be fixed now.\r\n\r\nOn 21 September 2012 14:19, Andrew Gerrand <adg@golang.org> wrote:\r\n> On 21 September 2012 13:41, Andrew Gerrand <adg@golang.org> wrote:\r\n>> I've pushed this to the main repo and the builders are reporting that\r\n>> windows is broken. Something wrong with net. I will investigate but if any\r\n>> windows people can suggest a fix I'd appreciate it.\r\n>\r\n> I see the problem. I neglected to backport\r\n> golang.org/change/a834a940704c which disables the failing test under\r\n> windows.\r\n>\r\n> Will add it to the branch now.\r\n>\r\n> There is an unrelated issue in the syscall windows tests which I will\r\n> fix in a separate change.\r\n",
			"disapproval": false,
			"date": "2012-09-21 22:23:18.402100",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 21 September 2012 13:41, Andrew Gerrand <adg@golang.org> wrote:\r\n> I've pushed this to the main repo and the builders are reporting that\r\n> windows is broken. Something wrong with net. I will investigate but if any\r\n> windows people can suggest a fix I'd appreciate it.\r\n\r\nI see the problem. I neglected to backport\r\ngolang.org/change/a834a940704c which disables the failing test under\r\nwindows.\r\n\r\nWill add it to the branch now.\r\n\r\nThere is an unrelated issue in the syscall windows tests which I will\r\nfix in a separate change.\r\n",
			"disapproval": false,
			"date": "2012-09-21 21:19:53.821680",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6499087: go103 backport",
	"created": "2012-09-07 07:08:29.492660",
	"patchsets": [
		1,
		2001,
		1002,
		3004,
		9001,
		5005,
		10001,
		3010,
		5011,
		4012,
		4013,
		11010,
		2002,
		13013,
		2015,
		15001,
		9016,
		14014,
		12021,
		7046,
		14019,
		9017,
		12023,
		9018,
		12024,
		14049,
		12025,
		5052,
		20001,
		20016,
		22016,
		25001,
		28001,
		35001,
		36001,
		31016,
		36016
	],
	"modified": "2013-07-23 22:38:01.170720",
	"closed": true,
	"issue": 6499087
}