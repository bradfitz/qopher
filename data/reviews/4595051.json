{
	"description": "db: common database interface\r\n\r\nFrom Thomas Lee's go-dbi package:\r\nhttps://github.com/thomaslee/go-dbi\r\n\r\nModification from Thomas's code:\r\n-- changed Connect to Dial\r\n-- put everything in one file\r\n-- minor doc additions/changes",
	"cc": [
		"golang-dev@googlegroups.com",
		"tom@deskchecked.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"kevlar@google.com",
		"fullung@gmail.com",
		"rsc@golang.org",
		"an2048@googlemail.com",
		"n13m3y3r@gmail.com",
		"deskchecked@gmail.com"
	],
	"messages": [
		{
			"sender": "an2048@googlemail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"an2048@googlemail.com",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "The go-pgsql package (https://github.com/lxn/go-pgsql) supports named parameters in statements, to make queries easier to maintain. Maybe this would be a useful addition. It would require to specify parameters in Prepare instead of in Query and Execute though.\n\nSome other things from go-pgsql, that proved to be useful for me:\n- Scan on Connection and Statement for single result queries, combining Query, Next, Scan and Close\n- ScanNext on ResultSet, combining Next and Scan\n\nProbably not that important, but what about multiple selects per query?\nExample: https://github.com/lxn/go-pgsql/blob/master/src/cmd/examples/multipleselects.go\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode33\nsrc/pkg/db/db.go:33: BeginTransaction() os.Error\nShould this take a parameter to specify the desired isolation level?\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode49\nsrc/pkg/db/db.go:49: RowCount() (uint64, os.Error)\nThis might turn out to be expensive, as all records would have to be read into memory, at least for PostgreSQL.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode53\nsrc/pkg/db/db.go:53: Next() bool\nShould this return os.Error additionally?",
			"disapproval": false,
			"date": "2011-06-13 18:56:56.642337",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Jun 13, 2011 at 10:32 AM, <rsc@golang.org> wrote:\n\n> I'll have more substantial comments later.\n\n\nCool.  That was my hope in sending this out.\n\nI have comments too, but wanted to start with something that was close.\n",
			"disapproval": false,
			"date": "2011-06-13 17:35:30.080222",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-06-13 16:37:47.815560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "For discussion.\n\nIncluding the author, Tom Lee, who's said he'd be happy to have this in the standard library.",
			"disapproval": false,
			"date": "2011-06-13 16:39:06.574106",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode56\nsrc/pkg/db/db.go:56: Scan(refs ...interface{}) os.Error\nOn 2011/06/13 17:27:22, bradfitz wrote:\n> On 2011/06/13 17:20:10, kevlar wrote:\n> > Why not:\n> > Scan(column ...int) os.Error\n> \n> refs should be pointers to populate, one per column in the result set. \n\nOh, duh, analogous to fmt.Scan.  Right.  Pardon my brain flatulence.  You should probably specify, for consistency, that it should be an error to specify a different number of arguments than there are fields in the result set.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode59\nsrc/pkg/db/db.go:59: NamedScan(refs ...interface{}) os.Error\nOn 2011/06/13 17:27:22, bradfitz wrote:\n> On 2011/06/13 17:20:10, kevlar wrote:\n> > Why not:\n> > NamedScan(column ...string) os.Error\n> \n> Actually I'm not sure how NamedScan is supposed to work.  The signature and docs\n> are lacking here.\n\nJust thinking aloud:\ntype ResultMap map[string]interface{}\ntype Result []interface{}\n\nthen this becomes:\nFieldsByName() (ResultMap, os.Error)\n\npossibly with a corresponding:\nFieldsByIndex() (Result, os.Error)\n\nAgain, maybe with better names; I suck at that particular part of interface design.",
			"disapproval": false,
			"date": "2011-06-13 17:45:54.122942",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI don't mean to paint the bikeshed, but I think we could do a little better with some error conditions.  There are definitely some common classes of error across nearly all database drivers, and it might be useful to encapsulate this into this package for consistent error handling code.\n\nOut of all of the comments below, my minimal suggestion is to add:\n\ntype TransientError interface {\n    String() string\n    Transient()\n}\n\nand\n\ntype Unsupported struct {\n    Driver string\n    Operation string\n}\n// with an accompanying String() method\n\nI see these as being the two primary cases in which a programmer might care about actually handling specific error cases generated in the database.  If a transaction fails to commit with a transient error, I want to go back and try the transaction again.  If I try to execute a transaction on a database that doesn't support them, I still probably want to do the queries anyway, but I will probably log it saying \"Warning: database doesn't support transactions, data integrity may be at risk during peak load\"\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode36\nsrc/pkg/db/db.go:36: Rollback() os.Error\nWe may want to have a few predeclared types of errors.  For instance, a TransactionError that could encapsulate issues with the transaction and SyntaxError that encapsulates issues with the SQL query itself.  The line between implementation and interface is blurry, but I think these sorts of errors might be useful, especially for things that can/should be retried (transactions).\n\nPerhaps there should just be a TransientError interface that indicates all errors that might be fixed with a retry?\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode56\nsrc/pkg/db/db.go:56: Scan(refs ...interface{}) os.Error\nWhy not:\nScan(column ...int) os.Error\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode59\nsrc/pkg/db/db.go:59: NamedScan(refs ...interface{}) os.Error\nWhy not:\nNamedScan(column ...string) os.Error\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode60\nsrc/pkg/db/db.go:60: \nIs there a generic way that one interacts with document-driven databases? Object databases?  Could we make them a Scan interface too?  On this note, we should probably also have an Unimplemented error so that there is a standard way to report when your database driver doesn't implement something (e.g. transactions in sqlite).\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode79\nsrc/pkg/db/db.go:79: var drivers = make(map[string]Driver)\nYou might want to add an IsRegistered(driver string) bool.  Or maybe \"Available(driver string) bool\" or something else.  I'm bad with names, but without this exported it might be useful.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode81\nsrc/pkg/db/db.go:81: // RegisterDriver registers a driver implementation.\nYou might mention here that this should be called in the init() method of driver packages and that it need not be used in client code.  An example might also be interesting in this comment.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode82\nsrc/pkg/db/db.go:82: func RegisterDriver(name string, driver Driver) {\nJust \"Register\"?\n\ndb.Register(\"mysql\", &MySQLDriver{})\n\nseems explicit enough (to my eye).\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode89\nsrc/pkg/db/db.go:89: // Connect to the database specified by dsn.\nAdd to this comment an explanation of how Dial uses the dsn given to determine which driver to use, maybe with some example code.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode93\nsrc/pkg/db/db.go:93: return nil, os.NewError(\"db: invalid DSN URL: \" + dsn)\nI don't think either of these errors should be os.ErrorStrings.  This one could just be the error returned from http, and the following (and optionally this) should be a db.ConnectionError.\n\nI envision something like:\ntype ConnectionError struct {\n    ValidURL    bool   // if not returning http error directly\n    ValidDriver bool\n    Driver      string\n    URI         string\n    Message     string\n}",
			"disapproval": false,
			"date": "2011-06-13 17:20:09.955256",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode56\nsrc/pkg/db/db.go:56: Scan(refs ...interface{}) os.Error\nOn 2011/06/13 17:20:10, kevlar wrote:\n> Why not:\n> Scan(column ...int) os.Error\n\nrefs should be pointers to populate, one per column in the result set.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode59\nsrc/pkg/db/db.go:59: NamedScan(refs ...interface{}) os.Error\nOn 2011/06/13 17:20:10, kevlar wrote:\n> Why not:\n> NamedScan(column ...string) os.Error\n\nActually I'm not sure how NamedScan is supposed to work.  The signature and docs are lacking here.",
			"disapproval": false,
			"date": "2011-06-13 17:27:22.689728",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode49\nsrc/pkg/db/db.go:49: RowCount() (uint64, os.Error)\nWhat's the thinking on whether these kinds of functions should return uint64 or int?",
			"disapproval": false,
			"date": "2011-06-13 17:30:55.336144",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"an2048@googlemail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Some initial thoughts.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode6\nsrc/pkg/db/db.go:6: package db\nThis looks like a dbsql package, providing an interface to a SQL database.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode17\nsrc/pkg/db/db.go:17: DialDatabase(url *http.URL) (Connection, os.Error)\nWhat about just Dial?\n\nAlso, do we really need an interface like this and a respective registry?  What about offering a Dial function at package level?\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode33\nsrc/pkg/db/db.go:33: BeginTransaction() os.Error\nWhy BeginTransaction rather than Begin, in the same spirit of  Commit, Rollback, etc?",
			"disapproval": false,
			"date": "2011-06-13 21:07:04.500535",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I'll have more substantial comments later.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode48\nsrc/pkg/db/db.go:48: // The number of rows returned by the query.\nThis seems like a strange thing to put in a streaming interface.\nIt implies collecting all the results first.",
			"disapproval": false,
			"date": "2011-06-13 17:32:10.829035",
			"approval": false
		},
		{
			"sender": "deskchecked@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"an2048@googlemail.com",
				"n13m3y3r@gmail.com",
				"deskchecked@gmail.com",
				"golang-dev@googlegroups.com",
				"tom@deskchecked.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Just a few comments based upon my experience implementing drivers and such.\n\nClarify NamedScan(...) usage -- I've personally found it useful, although expect folks may have something to say about the API + type safety.\n\nCheers,\nTom\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go\nFile src/pkg/db/db.go (right):\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode17\nsrc/pkg/db/db.go:17: DialDatabase(url *http.URL) (Connection, os.Error)\nI'm inclined to agree. Dial(...) should be provided by the drivers themselves. The only thing is there's no real way to enforce a consistent API for Dial(...) if we do away with the Driver interface -- although perhaps this makes sense (e.g. a file name for SQLite, host+port+db for MySQL). Would also allow e.g. DialTCP/DialUnix on a per-driver basis.\n\nSo the driverimpl.Dial(...) call could return a db.Connection. The driver type would need to be referenced once at connection time -- probably a bit nicer than the import _ \"somedriver\" hack that go-dbi currently requires (see go-dbd-mysql sample code).\n\nOn 2011/06/13 21:07:04, niemeyer wrote:\n> What about just Dial?\n> \n> Also, do we really need an interface like this and a respective registry?  What\n> about offering a Dial function at package level?\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode49\nsrc/pkg/db/db.go:49: RowCount() (uint64, os.Error)\nRan into similar problems with newer versions of GoMySQL. Might be a good idea to cull RowCount(). That's what SELECT COUNT(*) is for anyway, right?\n\nOn 2011/06/13 18:56:56, lxn wrote:\n> This might turn out to be expensive, as all records would have to be read into\n> memory, at least for PostgreSQL.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode59\nsrc/pkg/db/db.go:59: NamedScan(refs ...interface{}) os.Error\nUsage for NamedScan(...) should look something like this:\n\nNamedScan(\"columnName1\", &columnValue1, \"columnName2\", &columnValue2)\n\nNamedScan(...) was introduced to remove the dependency on ordering of result columns (i.e. scan by name rather than expected column order).\n\nOn 2011/06/13 17:27:22, bradfitz wrote:\n> On 2011/06/13 17:20:10, kevlar wrote:\n> > Why not:\n> > NamedScan(column ...string) os.Error\n> \n> Actually I'm not sure how NamedScan is supposed to work.  The signature and docs\n> are lacking here.\n\nhttp://codereview.appspot.com/4595051/diff/2001/src/pkg/db/db.go#newcode60\nsrc/pkg/db/db.go:60: \nPerhaps this fits in with niemayer's comment RE: this being a \"dbsql\" package rather than a \"db\" package?\n\nOn 2011/06/13 17:20:10, kevlar wrote:\n> Is there a generic way that one interacts with document-driven databases? Object\n> databases?  Could we make them a Scan interface too?  On this note, we should\n> probably also have an Unimplemented error so that there is a standard way to\n> report when your database driver doesn't implement something (e.g. transactions\n> in sqlite).",
			"disapproval": false,
			"date": "2011-06-14 03:09:27.531152",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 4595051: db: common database interface",
	"created": "2011-06-13 16:37:19.921572",
	"patchsets": [
		1,
		3,
		2001
	],
	"modified": "2011-09-21 16:48:20.986714",
	"closed": true,
	"issue": 4595051
}