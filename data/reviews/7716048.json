{
	"description": "reflect: add garbage collection info in ChanOf, MapOf, PtrTo, SliceOf\n\nArrayOf will remain unexported (and therefore unused) for Go 1.1.\n\nFixes issue 4375.",
	"cc": [
		"0xe2.0x9a.0x9b@gmail.com",
		"r@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttps://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go#newcode1002\nsrc/pkg/reflect/type.go:1002: // garbage collection program for pointer to memory without pointers.\nOn 2013/03/15 18:54:26, r wrote:\n> \"program\"?\n\nIt is a program, kind of. The function scanblock() works like an interpreter of an abstract instruction set.\n\nIf it is possible to implement scanblock() and precise GC without the interpreter pattern - which seems impossible to me - I would like to know how.",
			"disapproval": false,
			"date": "2013-03-15 19:09:14.921410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello atom (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-15 17:51:59.892470",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We don't necessarily have to treat the type info found in various data\r\nstructures as roots. Package reflect must arrange to return the same type\r\ninfo from identical calls to the constructors, so it necessarily has a\r\npointer to the type info saved away itself. I think it would probably be\r\nsimpler and faster to rely on finding the references via that cache.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-18 14:48:32.861700",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take a careful look at this. It is probably all wrong. I would also\r\nappreciate suggestions on what might work well for tests. Obviously what's\r\nthere is insufficient.\r\n\r\nThanks.\r\n",
			"disapproval": false,
			"date": "2013-03-15 17:52:35.044590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Re: XXX, the tests are not done yet. Part of the reason to mail it out was\r\nto get some advice on testing from Atom.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-15 19:23:25.312980",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 17:52:35, rsc wrote:\n> Please take a careful look at this. It is probably all wrong. I would also\n> appreciate suggestions on what might work well for tests. Obviously what's\n> there is insufficient.\n> \n> Thanks.\n\nI believe GC will need to scan eface->type: https://codereview.appspot.com/7744047/",
			"disapproval": false,
			"date": "2013-03-15 18:46:36.192630",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 19:09:14, atom wrote:\n> https://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go\n> File src/pkg/reflect/type.go (right):\n> \n> https://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go#newcode1002\n> src/pkg/reflect/type.go:1002: // garbage collection program for pointer to\n> memory without pointers.\n> On 2013/03/15 18:54:26, r wrote:\n> > \"program\"?\n> \n> It is a program, kind of. The function scanblock() works like an interpreter of\n> an abstract instruction set.\n> \n> If it is possible to implement scanblock() and precise GC without the\n> interpreter pattern - which seems impossible to me - I would like to know how.\n\nAn option is carving bits (pointer/not-pointer) into objects immediately after they are allocated. I believe that having more accurate knowledge provided by the \"programs\" may turn out to be more useful in the future than bit carving.",
			"disapproval": false,
			"date": "2013-03-15 19:26:50.475890",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-25 17:35:06.459550",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/all_test.go#newcode1940\nsrc/pkg/reflect/all_test.go:1940: //XXX\n???\n\nhttps://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttps://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go#newcode1002\nsrc/pkg/reflect/type.go:1002: // garbage collection program for pointer to memory without pointers.\n\"program\"?",
			"disapproval": false,
			"date": "2013-03-15 18:54:26.568480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The details of the garbage collector aren't up for redesign today. I'll\r\nchange program to bytecode program.\r\n",
			"disapproval": false,
			"date": "2013-03-15 19:36:20.972610",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7716048/diff/2001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttps://codereview.appspot.com/7716048/diff/2001/src/cmd/gc/reflect.c#newcode1087\nsrc/cmd/gc/reflect.c:1087: // NOTE: If the TCHAN representation changes to include\nhttps://codereview.appspot.com/7473044/",
			"disapproval": false,
			"date": "2013-03-16 07:36:36.245240",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 17:52:35, rsc wrote:\n> I would also appreciate suggestions on what might work well for tests.\n\nCL 7879043 contains the following cases:\n\n    case MTypes_Single:\n    case MTypes_Words:\n    case MTypes_Bytes:\n\nThe addroot() functions will be called only if Go code allocates a value V of some type T, and T,V are both created via package reflect at runtime.\n\nThe source code for case MTypes_Single is new. Source code for the other cases is just an optimization.",
			"disapproval": false,
			"date": "2013-03-17 17:27:45.318330",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttps://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go#newcode1350\nsrc/pkg/reflect/type.go:1350: var lookupCache struct {\nIs it possible for reflection to create type []T at runtime, while []T is also a compiler generated type? If it was possible then there would be two distinct instances of []T and Go code (type assertions, type switches) could fail.",
			"disapproval": false,
			"date": "2013-03-18 16:15:23.329000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 18, 2013 at 12:15 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7716048/diff/2001/src/pkg/**\r\n> reflect/type.go<https://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go>\r\n> File src/pkg/reflect/type.go (right):\r\n>\r\n> https://codereview.appspot.**com/7716048/diff/2001/src/pkg/**\r\n> reflect/type.go#newcode1350<https://codereview.appspot.com/7716048/diff/2001/src/pkg/reflect/type.go#newcode1350>\r\n> src/pkg/reflect/type.go:1350: var lookupCache struct {\r\n> Is it possible for reflection to create type []T at runtime, while []T\r\n> is also a compiler generated type? If it was possible then there would\r\n> be two distinct instances of []T and Go code (type assertions, type\r\n> switches) could fail.\r\n>\r\n\r\nNo, it's not possible, for exactly the reason you point out. This takes\r\nsome care, but it's true in both the gc and the gccgo toolchains.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-18 20:39:15.267120",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nI have written tests and confirmed that they work by breaking each of the\r\ngc info and running the corresponding test.\r\n",
			"disapproval": false,
			"date": "2013-03-24 18:11:06.411170",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7716048/diff/21001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/cmd/gc/reflect.c#newcode1160\nsrc/cmd/gc/reflect.c:1160: // at least once ArrayOf is implemented.\nisn't it implemented?\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/pkg/reflect/all_test.go#newcode2203\nsrc/pkg/reflect/all_test.go:2203: func TestPtrToGC(t *testing.T) {\nif you need the commented-out line to test this, ...?\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/pkg/reflect/type.go#newcode1096\nsrc/pkg/reflect/type.go:1096: // INCORRECT. Uncomment to test TestPtrToGC.\ncan you please explain this better?\nmaybe do it once outside the functions and have all 4 appearances refer to that",
			"disapproval": false,
			"date": "2013-03-25 16:51:01.488350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7716048/diff/21001/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/pkg/reflect/all_test.go#newcode2203\nsrc/pkg/reflect/all_test.go:2203: func TestPtrToGC(t *testing.T) {\nOn 2013/03/25 16:51:01, r wrote:\n> if you need the commented-out line to test this, ...?\n\nBy \"test the test\" I mean confirm that it fails when the implementation is broken.\nI will clean up the comment.",
			"disapproval": false,
			"date": "2013-03-25 19:59:21.652400",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/24 18:11:06, rsc wrote:\n> PTAL\n> \n> I have written tests and confirmed that they work by breaking each of the\n> gc info and running the corresponding test.\n\nI can confirm that enabling CollectStats in mgc0.c leads to expected counts for all \"Test.*GC.*\" functions.",
			"disapproval": false,
			"date": "2013-03-25 21:23:10.291310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttps://codereview.appspot.com/7716048/diff/21001/src/cmd/gc/reflect.c#newcode1160\nsrc/cmd/gc/reflect.c:1160: // at least once ArrayOf is implemented.\nOn 2013/03/25 16:51:01, r wrote:\n> isn't it implemented?\n\nIt's mostly implemented, but it's unexported (because it's not done).\nIt won't be in Go 1.1.",
			"disapproval": false,
			"date": "2013-03-25 22:13:16.224160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-25 22:15:32.585760",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3792a253f8a4 ***\n\nreflect: add garbage collection info in ChanOf, MapOf, PtrTo, SliceOf\n\nArrayOf will remain unexported (and therefore unused) for Go 1.1.\n\nFixes issue 4375.\n\nR=0xe2.0x9a.0x9b, r, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7716048\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2013-03-26 18:50:31.921120",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 19:52:00.599650",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7716048: reflect: add garbage collection info in ChanOf, MapOf, ...",
	"created": "2013-03-15 17:50:20.334460",
	"patchsets": [
		1,
		2001,
		17001,
		21001,
		30001
	],
	"modified": "2013-07-21 19:52:01.256190",
	"closed": false,
	"issue": 7716048
}