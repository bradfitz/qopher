{
	"description": "exp/ssa: various features to facilitate source analysis tools.\n\nNewBuilder now accepts a new extensible Client struct\nspecifying Builder options.  (Naming suggestions?)\n\nClient embeds a types.Context, permitting Builder clients to\ncontrol type-checking options such as word width.\n\nBuilder.{idents,constants.types} fields extracted into (new\ntype) TypeInfo.  TypeInfo is embedded by Package.  The smaller\nper-package maps can be retained/discarded with finer\ngranularity (see below).\n\nThe builder options now include RetainAST, a predicate for\nwhether to retain or discard the type-checked ASTs\n(Package.Files, now exposed) and type info (Package.TypeInfo)\nfor each package after it is built.\n\nThe results of type checking are now available to tools atop\nexp/ssa via these exposed functions:\n  Builder.isType        -> TypeInfo.IsType(Expr)\n  Builder.obj           -> TypeInfo.ObjectOf(Ident)\n  Builder.exprType      -> TypeInfo.TypeOf(Expr)\n  Builder.constants[x]  -> TypeInfo.ValueOf(Expr)\n  Builder.isPackageRef  -> TypeInfo.isPackageRef(Expr)\n(Those methods never really belonged happily on Builder.)\n\nssa.CallCommon:\n- Added StaticCallee method\n- Added Description method\n- Embedding in Call/Go/Defer is no longer anonymous, to avoid\n  promotion of inappropriate methods such as Description.\n- Added explicit Operands methods to Call/Go/Defer.\n\nssa.Member now has a Posn() method.  We use (new type)\nConstant, not Literal, for package-level constants with a name\nand position.\n\nAdded source position info to Make{Slice,Map,Chan}, Alloc, Global.\n\nAdd missing noparens() when handling calls to built-ins.\n\nRefactor to avoid \"// Subtle\" code in compLit(Struct).\n\nAdded CreatePackageFromArgs utility to handle command-line\nprocessing for ssadump and forthcoming tools.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp",
			"disapproval": false,
			"date": "2013-04-23 16:44:43.083950",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/builder.go#newcode76\nssa/builder.go:76: type Client struct {\nContext would be the name if you want to follow precedent (set by go/build).\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/ssa.go\nFile ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/ssa.go#newcode986\nssa/ssa.go:986: // CallCommon is a contained by Go, Defer and Call to hold the\na \"contained\" ?\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go\nFile ssa/typeinfo.go (right):\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go#newcode12\nssa/typeinfo.go:12: // TypeInfo containsinformation provided by the typechecker about the\ncontains information\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go#newcode32\nssa/typeinfo.go:32: // TODO(gri): Is this a typechecker bug?  If so, eliminate\nprobably - the typechecker should do a better job in these cases\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go#newcode50\nssa/typeinfo.go:50: func (info *TypeInfo) ObjectOf(id *ast.Ident) types.Object {\nalso accept selector expressions?",
			"disapproval": false,
			"date": "2013-04-23 23:35:15.404050",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks!\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/builder.go#newcode76\nssa/builder.go:76: type Client struct {\nOn 2013/04/23 23:35:15, gri wrote:\n> Context would be the name if you want to follow precedent (set by go/build).\n\nOk, done, in the interests of consistency (though I never really liked the name \"Context\").\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/ssa.go\nFile ssa/ssa.go (right):\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/ssa.go#newcode986\nssa/ssa.go:986: // CallCommon is a contained by Go, Defer and Call to hold the\nOn 2013/04/23 23:35:15, gri wrote:\n> a \"contained\" ?\n\nDone.\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go\nFile ssa/typeinfo.go (right):\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go#newcode12\nssa/typeinfo.go:12: // TypeInfo containsinformation provided by the typechecker about the\nOn 2013/04/23 23:35:15, gri wrote:\n> contains information\n\nDone.\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go#newcode32\nssa/typeinfo.go:32: // TODO(gri): Is this a typechecker bug?  If so, eliminate\nOn 2013/04/23 23:35:15, gri wrote:\n> probably - the typechecker should do a better job in these cases\n\nThis isn't new, the code just moved from builder.go.  IIRC this bug is already on your TODO list.\n\nhttps://codereview.appspot.com/8734045/diff/12003/ssa/typeinfo.go#newcode50\nssa/typeinfo.go:50: func (info *TypeInfo) ObjectOf(id *ast.Ident) types.Object {\nOn 2013/04/23 23:35:15, gri wrote:\n> also accept selector expressions?\n\nIt wouldn't actually simplify any other code in this package, and clients can build that abstraction atop this for the meantime.  We can always generalize it later.",
			"disapproval": false,
			"date": "2013-04-24 14:06:29.136470",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4059e8ecc5e2&repo=exp ***\n\nexp/ssa: various features to facilitate source analysis tools.\n\nNewBuilder now accepts a new extensible Client struct\nspecifying Builder options.  (Naming suggestions?)\n\nClient embeds a types.Context, permitting Builder clients to\ncontrol type-checking options such as word width.\n\nBuilder.{idents,constants.types} fields extracted into (new\ntype) TypeInfo.  TypeInfo is embedded by Package.  The smaller\nper-package maps can be retained/discarded with finer\ngranularity (see below).\n\nThe builder options now include RetainAST, a predicate for\nwhether to retain or discard the type-checked ASTs\n(Package.Files, now exposed) and type info (Package.TypeInfo)\nfor each package after it is built.\n\nThe results of type checking are now available to tools atop\nexp/ssa via these exposed functions:\n  Builder.isType        -> TypeInfo.IsType(Expr)\n  Builder.obj           -> TypeInfo.ObjectOf(Ident)\n  Builder.exprType      -> TypeInfo.TypeOf(Expr)\n  Builder.constants[x]  -> TypeInfo.ValueOf(Expr)\n  Builder.isPackageRef  -> TypeInfo.isPackageRef(Expr)\n(Those methods never really belonged happily on Builder.)\n\nssa.CallCommon:\n- Added StaticCallee method\n- Added Description method\n- Embedding in Call/Go/Defer is no longer anonymous, to avoid\n  promotion of inappropriate methods such as Description.\n- Added explicit Operands methods to Call/Go/Defer.\n\nssa.Member now has a Posn() method.  We use (new type)\nConstant, not Literal, for package-level constants with a name\nand position.\n\nAdded source position info to Make{Slice,Map,Chan}, Alloc, Global.\n\nAdd missing noparens() when handling calls to built-ins.\n\nRefactor to avoid \"// Subtle\" code in compLit(Struct).\n\nAdded CreatePackageFromArgs utility to handle command-line\nprocessing for ssadump and forthcoming tools.\n\nR=gri\nCC=golang-dev\nhttps://codereview.appspot.com/8734045",
			"disapproval": false,
			"date": "2013-04-24 14:17:51.894480",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 8734045: exp/ssa: various features to facilitate source analysis...",
	"created": "2013-04-23 15:28:25.988120",
	"patchsets": [
		1,
		2001,
		16001,
		13002,
		19001,
		22001,
		11002,
		12003,
		29001
	],
	"modified": "2013-04-24 14:17:52.897200",
	"closed": true,
	"issue": 8734045
}