{
	"description": "go.tools/go/types: provide Object.String method",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks!\n\nhttps://codereview.appspot.com/11178043/diff/8001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/11178043/diff/8001/go/types/objects.go#newcode48\ngo/types/objects.go:48: func (obj *object) String() string {\nUsers should never call this directly, right?.\nYou could rename this tostring(prefix string),\nand pass \"var\" etc as the parameter from each of the Var.String() etc callers.\n\nhttps://codereview.appspot.com/11178043/diff/8001/go/types/objects.go#newcode54\ngo/types/objects.go:54: buf.WriteString(obj.name)\nor:\n\n fmt.Fprintf(&buf, \"%s.%s\", obj.name, obj.typ.Underlying())\n\nhttps://codereview.appspot.com/11178043/diff/8001/go/types/objects.go#newcode169\ngo/types/objects.go:169: func (obj *Label) String() string { return \"label \" + obj.object.String() }\nThis may crash if typ==nil.  Or is it Invalid?",
			"disapproval": false,
			"date": "2013-07-11 19:16:21.439470",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-11 19:10:21.915890",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11178043/diff/8001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/11178043/diff/8001/go/types/objects.go#newcode48\ngo/types/objects.go:48: func (obj *object) String() string {\nOn 2013/07/11 19:16:21, adonovan wrote:\n> Users should never call this directly, right?.\n> You could rename this tostring(prefix string),\n> and pass \"var\" etc as the parameter from each of the Var.String() etc callers.\n\nthey can't since they have no access to the object.\ni had your version first, but this seemed simpler. efficiency doesn't matter here.\n\nnever mind - I changed it\n\nhttps://codereview.appspot.com/11178043/diff/8001/go/types/objects.go#newcode54\ngo/types/objects.go:54: buf.WriteString(obj.name)\nOn 2013/07/11 19:16:21, adonovan wrote:\n> or:\n> \n>  fmt.Fprintf(&buf, \"%s.%s\", obj.name, obj.typ.Underlying())\n\nyes, I had that before - this way I don't need fmt\n\nhttps://codereview.appspot.com/11178043/diff/8001/go/types/objects.go#newcode169\ngo/types/objects.go:169: func (obj *Label) String() string { return \"label \" + obj.object.String() }\nOn 2013/07/11 19:16:21, adonovan wrote:\n> This may crash if typ==nil.  Or is it Invalid?\n\nfixed",
			"disapproval": false,
			"date": "2013-07-11 19:31:36.530780",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d50ce5ea6bbf&repo=tools ***\n\ngo.tools/go/types: provide Object.String method\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/11178043",
			"disapproval": false,
			"date": "2013-07-11 19:57:59.245840",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11178043: go.tools/go/types: provide Object.String method",
	"created": "2013-07-11 19:01:52.323670",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		13001
	],
	"modified": "2013-07-11 19:58:01.063340",
	"closed": true,
	"issue": 11178043
}