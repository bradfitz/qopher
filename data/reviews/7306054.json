{
	"description": "exp/cookiejar: implementation of SetCookies\n\nThis CL provides the rest of the SetCookies code as well as\nsome test infrastructure which will be used to test also\nthe Cookies method. This test infrastructure is optimized\nfor readability and tries to make it easy to review table\ndriven test cases.\n\nTests for all the different corner cases of SetCookies\nwill be provided in a separate CL.",
	"cc": [
		"nigeltao@golang.org",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-06 12:38:16.796780",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 11, 2013 at 10:25 PM, Volker Dobler\r\n<dr.volker.dobler@gmail.com> wrote:\r\n> How would this be affected by a fake clock?\r\n\r\nMaybe something like:\r\n1. Add a whole bunch of cookies.\r\n2. Roll the fake clock forward 1ns.\r\n3. Add a whole bunch more cookies.\r\n\r\nOne could expect that creation time of the cookies made in step 1\r\nwould all be less than the creation time of the cookies made in step\r\n3, and also all <= what time.Now() would return at a step 4, but the\r\nartificial time bump changes this.\r\n\r\nAnyway, I think that adding a sequence number is easy, and also that\r\nit can be done in a separate change.\r\n",
			"disapproval": false,
			"date": "2013-02-12 02:51:19.987730",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go\nFile src/pkg/exp/cookiejar/jar.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go#newcode391\nsrc/pkg/exp/cookiejar/jar.go:391: return host, true, nil\nOn 2013/02/11 00:28:34, nigeltao wrote:\n> Should host be \"\"? RFC 6265 section 5.3 #5 says \"Let the domain-attribute be the\n> empty string.\"\n\nNo. The empty string as domain-attribute indicates a\nhost cookie: It is the \"Otherwise\" case in 5.3 #6.\nThis function directly computes domain and host-only\nflag without computing domain-attribute first.\nI have no idea why RFC 6265 has lengthy algorithm to\nset up domain-attribute which is converted to domain\nand host-only flag in an extra step.",
			"disapproval": false,
			"date": "2013-02-11 11:17:58.506090",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\n\"Let the domain-attribute be the empty string\" can be addressed in a follow-up change, if necessary.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go\nFile src/pkg/exp/cookiejar/jar.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode192\nsrc/pkg/exp/cookiejar/jar.go:192: now = now.Add(time.Nanosecond)\nOn 2013/02/10 22:03:33, volker.dobler wrote:\n> Using a single Creation time for several cookies while\n> staying deterministic would require storing the entries\n> as e.g. map[string][]entry and using a stable sort which\n> seem uglier than this nanosecond.\n\nYou could enforce a deterministic sort by adding a sequence number to each entry. Messing with creation times could lead to weird behavior in artificial environments that provide a fake clock. Anyway, this can be addressed in a follow-up change.\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go\nFile src/pkg/exp/cookiejar/jar.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go#newcode286\nsrc/pkg/exp/cookiejar/jar.go:286: // compared to c.Expires to determine deletion of c. defPath and host are the\ns/compared/is compared/\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go#newcode288\nsrc/pkg/exp/cookiejar/jar.go:288: // psl is used to check whether c is allowed be a domain cookie.\nDelete this line.\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go#newcode337\nsrc/pkg/exp/cookiejar/jar.go:337: errMalformedDomain = errors.New(\"cookiejar: domain attribute of cookie is malformed\")\n\"cookiejar: malformed cookie domain attribute\" would be consistent with errIllegalDomain.\n\nI'd also sort these errors by variable name.\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go#newcode343\nsrc/pkg/exp/cookiejar/jar.go:343: // Go's time.Time) and should be far enogh in the future.\ns/enogh/enough/\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar.go#newcode391\nsrc/pkg/exp/cookiejar/jar.go:391: return host, true, nil\nShould host be \"\"? RFC 6265 section 5.3 #5 says \"Let the domain-attribute be the empty string.\"\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar_test.go\nFile src/pkg/exp/cookiejar/jar_test.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar_test.go#newcode174\nsrc/pkg/exp/cookiejar/jar_test.go:174: jar, _ := New(&Options{PublicSuffixList: testPSL{}})\nThis could be\njar := newTestJar()\nand then I'd move newTestJar up to line 31, just after the definition of testPSL.\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar_test.go#newcode244\nsrc/pkg/exp/cookiejar/jar_test.go:244: queries     []query  // Several tests what to expect on a call to Cookies\n// Queries to test the Jar.Cookies method\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar_test.go#newcode247\nsrc/pkg/exp/cookiejar/jar_test.go:247: // query contains one test of the cookies returned to Cookies.\ns/to Cookies/from Jar.Cookies/\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar_test.go#newcode276\nsrc/pkg/exp/cookiejar/jar_test.go:276: u := mustParseURL(query.toURL)\nYou could inline this a few lines below.\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar_test.go#newcode288\nsrc/pkg/exp/cookiejar/jar_test.go:288: // jarBasicTests contains fundamental test. Each jarTest has to be performed\ns/test/tests/\n\nhttps://codereview.appspot.com/7306054/diff/7002/src/pkg/exp/cookiejar/jar_test.go#newcode438\nsrc/pkg/exp/cookiejar/jar_test.go:438: func TestJarBasics(t *testing.T) {\nI'd drop the \"Jar\": TestBasics and basicsTests. We're already in package cookiejar.",
			"disapproval": false,
			"date": "2013-02-11 00:28:34.298440",
			"approval": true
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go\nFile src/pkg/exp/cookiejar/jar.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode154\nsrc/pkg/exp/cookiejar/jar.go:154: defaultpath := defaultPath(u.Path)\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> Change the first defaultpath to defPath.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode164\nsrc/pkg/exp/cookiejar/jar.go:164: e, remove, err := newEntry(cookie, now, defaultpath, host, j.psList)\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> Making newEntry a method of Jar would save you having to pass j.psList.\n\nDone.\n\nAlso made domainAndType a method as this is the point\nwhere the psList is needed.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode192\nsrc/pkg/exp/cookiejar/jar.go:192: now = now.Add(time.Nanosecond)\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> Idiomatic would be\n> now = now.Add(1 * time.Nanosecond)\n> \n> This is just to make testing easier, right? I don't like this, but I'll let it\n> in for now. Can you add a\n> // TODO: rewrite the tests to not require deterministic ordering?\n\nDone.\n\nIt simplifies testing, yes, but I am not sure if it\nshould be removed:  Cookies must sort the returned cookies\nby length of Path and Creation time. While RFC 6265 does\nnot address the issue whether all cookies created in a\nsingle Set-Cookie header should share a single creation\ntime or use individual ones I personally like a\ndeterministic behavior: If three cookies are set in the\nSet-Cookie header as first A, then B, last C, this \nimplementation will return them as A, B, C in that order.\n\nUsing a single Creation time for several cookies while\nstaying deterministic would require storing the entries\nas e.g. map[string][]entry and using a stable sort which\nseem uglier than this nanosecond.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode290\nsrc/pkg/exp/cookiejar/jar.go:290: // In this case only the identifying fields (Name, Domain, Path) of e are set up.\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> This sentence isn't strictly true, right: e.HostOnly can also be set. How about\n> \n> // remove is whether the jar should delete this cookie, as it has already\n> // expired with respect to now. In this case, e may be incomplete, but it will\n> // be valid to call e.id (which depends on e's Name, Domain and Path).\n> //\n> // A malformed c.Domain will result in an error.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go\nFile src/pkg/exp/cookiejar/jar_test.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode124\nsrc/pkg/exp/cookiejar/jar_test.go:124: \"strange\":     \"/\",\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> Please add tests for \"//\", \"/a//b\", \"/a/./b\" and \"/a/../b\".\n\nDone.\n\nThe default-path algorithm of RFC 6265 is purely lexical,\nso the expected values look broken.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode136\nsrc/pkg/exp/cookiejar/jar_test.go:136: host       string // host Set-Cookie header was received from\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> host, domain, wantDomain, wantHostOnly, wantErr.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode172\nsrc/pkg/exp/cookiejar/jar_test.go:172: if err != nil {\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> You should be able to just test if err == tc.wantErr.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode185\nsrc/pkg/exp/cookiejar/jar_test.go:185: t.Errorf(\"%q/%q: want %q/%t got %q/%t\",\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> The usual Go order is got, want and not want, got.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode192\nsrc/pkg/exp/cookiejar/jar_test.go:192: // list yields the (non-expired) cookies of jar in the form\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> s/list/content/ would match your test case naming.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode210\nsrc/pkg/exp/cookiejar/jar_test.go:210: func stringRep(cookies []*http.Cookie) string {\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> You're defining a lot of little helper functions. I haven't seen all the test\n> cases to come, but I'm not convinced that these functions are pulling their\n> weight. For example, If this is only used in jarTest.run, then I'd just inline\n> it there.\n\nDone.\n\nInlined stringRep and parseCookie while keeping expiresIn\nand mustParseURL which are used at least twice.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode255\nsrc/pkg/exp/cookiejar/jar_test.go:255: //      cookies in expected.\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> The usual Go language is s/expected/want/.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode258\nsrc/pkg/exp/cookiejar/jar_test.go:258: fromURL     string   // The full URL of the request from which Set-Cookie headers where recieved\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> received.\n\nDone.\n\nReceived: My spelling Waterloo.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode261\nsrc/pkg/exp/cookiejar/jar_test.go:261: tests       []query  // Several tests what to expect on a call to Cookies()\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> s/tests/queries/ and drop the ().\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode270\nsrc/pkg/exp/cookiejar/jar_test.go:270: // run performs the actions and test of test on jar.\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> // run runs the jarTest.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode275\nsrc/pkg/exp/cookiejar/jar_test.go:275: setcookies := make([]*http.Cookie, len(test.setCookies))\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> setCookies.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode283\nsrc/pkg/exp/cookiejar/jar_test.go:283: t.Errorf(\"Test %q:\\nWrong content. Want %q, got %q.\",\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> The \"Wrong content\" is unnecessary. Also, the usual Go order is got, want and\n> not want, got.\n> \n> t.Errorf(\"Test %q:\\ngot  %q\\nwant %q\", etc)\n> \n> Note the two spaces after got, which lines up the two got/want %q outputs.\n\nDone, almost.\n\nI'd like to keep \"Content\": 10 lines below will come the\nerrors if a call to Cookies fails. But these are different\nerrors and I think it is okay to show here, that the content\nof Jar is bad.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode287\nsrc/pkg/exp/cookiejar/jar_test.go:287: // Test different calls to Cookies().\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> Drop the ().\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode352\nsrc/pkg/exp/cookiejar/jar_test.go:352: \"Cookie with implicit path, variant a: path is a directory.\",\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> You sometimes use \"variant\" and sometimes use \"version\". Similarly, sometimes\n> there is a trailing full stop and sometimes there isn't.\n> \n> Overall, these descriptions could be much tighter. I would write, \"Implicit path\n> #1: path is a directory\".\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode384\nsrc/pkg/exp/cookiejar/jar_test.go:384: \"Cookie with implicit path, version c: no path in url at all.\",\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> s/url/URL/\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode431\nsrc/pkg/exp/cookiejar/jar_test.go:431: \"http://www.test.org/\",\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> Any reason why host.test became test.org?\n\nNo reason. Changed to host.test.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode432\nsrc/pkg/exp/cookiejar/jar_test.go:432: []string{\"A=1; path=/\",\nOn 2013/02/10 03:40:57, nigeltao wrote:\n> Line break after {.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-10 22:03:32.927800",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Mostly superficial comments for now.\n\nI'm pretty busy for the next couple of days, so I might not get to this soon.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go\nFile src/pkg/exp/cookiejar/jar_test.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode195\nsrc/pkg/exp/cookiejar/jar_test.go:195: cookies := make([]string, 0)\nvar cookies []string\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode211\nsrc/pkg/exp/cookiejar/jar_test.go:211: s := make([]string, 0)\nvar s []string\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode251\nsrc/pkg/exp/cookiejar/jar_test.go:251: // jarTest encapsulatest the following actions on a jar:\nencapsulates.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode252\nsrc/pkg/exp/cookiejar/jar_test.go:252: //   1. Perform SetCookies() with fromURL and the cookies from setCookies.\nDrop the ().\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode254\nsrc/pkg/exp/cookiejar/jar_test.go:254: //   3. For each query in tests: Check that Cookies() with toURL yields the\nDrop the ().\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode264\nsrc/pkg/exp/cookiejar/jar_test.go:264: // query contains one test of the cookies returned to Cookies().\nDrop the ().\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode266\nsrc/pkg/exp/cookiejar/jar_test.go:266: toURL    string // the URL in the Cookies() call\nDrop the ().\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode271\nsrc/pkg/exp/cookiejar/jar_test.go:271: func (test jarTest) run(t *testing.T, jar *Jar) {\nWhy is this a method and not inlined where \"test.run(t, jar)\" is?\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode291\nsrc/pkg/exp/cookiejar/jar_test.go:291: recieved := stringRep(cookies)\n\"received\" is spelled with an \"ei\". But the usual Go language is got and want.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode301\nsrc/pkg/exp/cookiejar/jar_test.go:301: {\"Retrieval of a plain host cookie.\",\nAdd a line break between the { and the first \". Similarly below.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode348\nsrc/pkg/exp/cookiejar/jar_test.go:348: {\"Cookie with implicit path, variant a: path is a directoy.\",\ndirectory.",
			"disapproval": false,
			"date": "2013-02-07 10:47:09.398650",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go\nFile src/pkg/exp/cookiejar/jar_test.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode195\nsrc/pkg/exp/cookiejar/jar_test.go:195: cookies := make([]string, 0)\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> var cookies []string\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode211\nsrc/pkg/exp/cookiejar/jar_test.go:211: s := make([]string, 0)\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> var s []string\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode251\nsrc/pkg/exp/cookiejar/jar_test.go:251: // jarTest encapsulatest the following actions on a jar:\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> encapsulates.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode252\nsrc/pkg/exp/cookiejar/jar_test.go:252: //   1. Perform SetCookies() with fromURL and the cookies from setCookies.\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> Drop the ().\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode254\nsrc/pkg/exp/cookiejar/jar_test.go:254: //   3. For each query in tests: Check that Cookies() with toURL yields the\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> Drop the ().\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode264\nsrc/pkg/exp/cookiejar/jar_test.go:264: // query contains one test of the cookies returned to Cookies().\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> Drop the ().\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode266\nsrc/pkg/exp/cookiejar/jar_test.go:266: toURL    string // the URL in the Cookies() call\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> Drop the ().\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode271\nsrc/pkg/exp/cookiejar/jar_test.go:271: func (test jarTest) run(t *testing.T, jar *Jar) {\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> Why is this a method and not inlined where \"test.run(t, jar)\" is?\n\nCurrently this is really used just in one place, but\nthe test suite is missing still a handful of tests like\ndeletion test, expiration and the whole test cases \nported from the chromium project. I would have to inline\nit 6 or 7 times.\nA method seemed fine as it doesn't pollute the global\nnamespace.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode291\nsrc/pkg/exp/cookiejar/jar_test.go:291: recieved := stringRep(cookies)\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> \"received\" is spelled with an \"ei\". But the usual Go language is got and want.\n\nDone.\n\nChanged to got and want.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode301\nsrc/pkg/exp/cookiejar/jar_test.go:301: {\"Retrieval of a plain host cookie.\",\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> Add a line break between the { and the first \". Similarly below.\n\nDone.\n\nhttps://codereview.appspot.com/7306054/diff/2002/src/pkg/exp/cookiejar/jar_test.go#newcode348\nsrc/pkg/exp/cookiejar/jar_test.go:348: {\"Cookie with implicit path, variant a: path is a directoy.\",\nOn 2013/02/07 10:47:09, nigeltao wrote:\n> directory.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-07 11:50:14.396300",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go\nFile src/pkg/exp/cookiejar/jar.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode154\nsrc/pkg/exp/cookiejar/jar.go:154: defaultpath := defaultPath(u.Path)\nChange the first defaultpath to defPath.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode164\nsrc/pkg/exp/cookiejar/jar.go:164: e, remove, err := newEntry(cookie, now, defaultpath, host, j.psList)\nMaking newEntry a method of Jar would save you having to pass j.psList.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode192\nsrc/pkg/exp/cookiejar/jar.go:192: now = now.Add(time.Nanosecond)\nIdiomatic would be\nnow = now.Add(1 * time.Nanosecond)\n\nThis is just to make testing easier, right? I don't like this, but I'll let it in for now. Can you add a\n// TODO: rewrite the tests to not require deterministic ordering?\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode290\nsrc/pkg/exp/cookiejar/jar.go:290: // In this case only the identifying fields (Name, Domain, Path) of e are set up.\nThis sentence isn't strictly true, right: e.HostOnly can also be set. How about\n\n// remove is whether the jar should delete this cookie, as it has already\n// expired with respect to now. In this case, e may be incomplete, but it will\n// be valid to call e.id (which depends on e's Name, Domain and Path).\n//\n// A malformed c.Domain will result in an error.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go\nFile src/pkg/exp/cookiejar/jar_test.go (right):\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode124\nsrc/pkg/exp/cookiejar/jar_test.go:124: \"strange\":     \"/\",\nPlease add tests for \"//\", \"/a//b\", \"/a/./b\" and \"/a/../b\".\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode136\nsrc/pkg/exp/cookiejar/jar_test.go:136: host       string // host Set-Cookie header was received from\nhost, domain, wantDomain, wantHostOnly, wantErr.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode172\nsrc/pkg/exp/cookiejar/jar_test.go:172: if err != nil {\nYou should be able to just test if err == tc.wantErr.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode185\nsrc/pkg/exp/cookiejar/jar_test.go:185: t.Errorf(\"%q/%q: want %q/%t got %q/%t\",\nThe usual Go order is got, want and not want, got.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode192\nsrc/pkg/exp/cookiejar/jar_test.go:192: // list yields the (non-expired) cookies of jar in the form\ns/list/content/ would match your test case naming.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode210\nsrc/pkg/exp/cookiejar/jar_test.go:210: func stringRep(cookies []*http.Cookie) string {\nYou're defining a lot of little helper functions. I haven't seen all the test cases to come, but I'm not convinced that these functions are pulling their weight. For example, If this is only used in jarTest.run, then I'd just inline it there.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode255\nsrc/pkg/exp/cookiejar/jar_test.go:255: //      cookies in expected.\nThe usual Go language is s/expected/want/.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode258\nsrc/pkg/exp/cookiejar/jar_test.go:258: fromURL     string   // The full URL of the request from which Set-Cookie headers where recieved\nreceived.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode261\nsrc/pkg/exp/cookiejar/jar_test.go:261: tests       []query  // Several tests what to expect on a call to Cookies()\ns/tests/queries/ and drop the ().\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode270\nsrc/pkg/exp/cookiejar/jar_test.go:270: // run performs the actions and test of test on jar.\n// run runs the jarTest.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode275\nsrc/pkg/exp/cookiejar/jar_test.go:275: setcookies := make([]*http.Cookie, len(test.setCookies))\nsetCookies.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode283\nsrc/pkg/exp/cookiejar/jar_test.go:283: t.Errorf(\"Test %q:\\nWrong content. Want %q, got %q.\",\nThe \"Wrong content\" is unnecessary. Also, the usual Go order is got, want and not want, got.\n\nt.Errorf(\"Test %q:\\ngot  %q\\nwant %q\", etc)\n\nNote the two spaces after got, which lines up the two got/want %q outputs.\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode287\nsrc/pkg/exp/cookiejar/jar_test.go:287: // Test different calls to Cookies().\nDrop the ().\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode352\nsrc/pkg/exp/cookiejar/jar_test.go:352: \"Cookie with implicit path, variant a: path is a directory.\",\nYou sometimes use \"variant\" and sometimes use \"version\". Similarly, sometimes there is a trailing full stop and sometimes there isn't.\n\nOverall, these descriptions could be much tighter. I would write, \"Implicit path #1: path is a directory\".\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode384\nsrc/pkg/exp/cookiejar/jar_test.go:384: \"Cookie with implicit path, version c: no path in url at all.\",\ns/url/URL/\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode431\nsrc/pkg/exp/cookiejar/jar_test.go:431: \"http://www.test.org/\",\nAny reason why host.test became test.org?\n\nhttps://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar_test.go#newcode432\nsrc/pkg/exp/cookiejar/jar_test.go:432: []string{\"A=1; path=/\",\nLine break after {.",
			"disapproval": false,
			"date": "2013-02-10 03:40:57.008410",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 11, 2013 at 1:28 AM, <nigeltao@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7306054/diff/4006/src/pkg/**\r\n> exp/cookiejar/jar.go#**newcode192<https://codereview.appspot.com/7306054/diff/4006/src/pkg/exp/cookiejar/jar.go#newcode192>\r\n> src/pkg/exp/cookiejar/jar.go:**192: now = now.Add(time.Nanosecond)\r\n> On 2013/02/10 22:03:33, volker.dobler wrote:\r\n>\r\n>> Using a single Creation time for several cookies while\r\n>> staying deterministic would require storing the entries\r\n>> as e.g. map[string][]entry and using a stable sort which\r\n>> seem uglier than this nanosecond.\r\n>>\r\n>\r\n> You could enforce a deterministic sort by adding a sequence number to\r\n> each entry. Messing with creation times could lead to weird behavior in\r\n> artificial environments that provide a fake clock. Anyway, this can be\r\n> addressed in a follow-up change.\r\n>\r\n>\r\nHow would this be affected by a fake clock? If time.Now() returns a\r\nsingle time instance on all calls (e.g. in the playground), then still\r\nadding a ns and comparing such times with Before and After works\r\nproperly. On systems which have a \"fast enough\" clock we could\r\ncall time.Now in the inner loop and it would produce monotonic\r\nCreation times. This ns-trick just simulates this.\r\nOn the other hand: If a system uses a fake clock, then cookie handling\r\nwill break anyway.\r\n\r\nV.\r\n",
			"disapproval": false,
			"date": "2013-02-11 11:25:10.790290",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a6e2b5df0085 ***\n\nexp/cookiejar: implementation of SetCookies\n\nThis CL provides the rest of the SetCookies code as well as\nsome test infrastructure which will be used to test also\nthe Cookies method. This test infrastructure is optimized\nfor readability and tries to make it easy to review table\ndriven test cases.\n\nTests for all the different corner cases of SetCookies\nwill be provided in a separate CL.\n\nR=nigeltao, rsc, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7306054\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2013-02-11 00:47:46.992520",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 7306054: exp/cookiejar: implementation of SetCookies",
	"created": "2013-02-06 12:33:02.648190",
	"patchsets": [
		1,
		2001,
		4003,
		2002,
		4006,
		7002
	],
	"modified": "2013-02-11 11:17:58.659510",
	"closed": true,
	"issue": 7306054
}