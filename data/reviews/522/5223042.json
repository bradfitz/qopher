{
	"description": "html: improve parsing of malformed tags\n\nMake parsing of malformed tag follow the HTML5 standard better.\nParse the contents of tags at the same time as finding their length.\nSimplify the tokenizer API.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"nigeltao@golang.org"
	],
	"messages": [
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-06 15:44:13.903185",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/09 02:19:32, nigeltao wrote:\n> This change is too large for me to review. You are doing a number of different\n> things that I think can be split out into smaller, independent changes. Smaller\n> changes are easier to understand, review, and manage (e.g. roll back if\n> necessary, patch into branches).\n\nThe changes are all very intertwined. But I'll see what I can separate out.\n\n> You're 'simplifying' the tokenizer API. Please don't do that. The low-level API\n> that you deleted was designed for efficiency. For tokens you aren't interested\n> in, it avoids both the cost of unescaping entities, and the allocations in\n> converting []byte values to strings. Even for the higher level API, I also\n> suspect that your code does more allocations in general, e.g. of temporary\n> []byte buffers.\n\nI felt it was a good idea to look in more detail at the structure of tokens while scanning them to find length and type. When I did that, the low-level API lost its performance advantage. But maybe I can achieve the same things without going into so much detail on the first pass.\n\n> From skimming token.go, you're dropping any errors from the underlying\n> io.Reader. You do check if err != nil, but if that's true you simply break or\n> return, and hence the caller of the tokenizer has no idea why their tokenization\n> failed (if you even report failure??). Obviously, don't do that.\n\nIf an error occurred on the first character of a token, I was returning it. Otherwise I was ignoring it, expecting it would get delivered on the next call to Next(). But maybe that depends on the exact behavior of the underlying Reader.\n\n> IIUC you have updated the entity map from\n> http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html,\n> but you have also changed the map value type from int to string. These should be\n> two separate changes. (The change that changes the type can change other parts\n> of the code, if it makes sense.)\n\nActually, I didn't update the entity map. I just uncommented the two entities that were too long, converted both maps to string, combined them, and sorted them.",
			"disapproval": false,
			"date": "2011-10-09 02:41:51.668222",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, nigeltao@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-07 18:25:58.891083",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, nigeltao@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-07 20:41:39.184811",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This change is too large for me to review. You are doing a number of different things that I think can be split out into smaller, independent changes. Smaller changes are easier to understand, review, and manage (e.g. roll back if necessary, patch into branches).\n\nYou're 'simplifying' the tokenizer API. Please don't do that. The low-level API that you deleted was designed for efficiency. For tokens you aren't interested in, it avoids both the cost of unescaping entities, and the allocations in converting []byte values to strings. Even for the higher level API, I also suspect that your code does more allocations in general, e.g. of temporary []byte buffers.\n\nFrom skimming token.go, you're dropping any errors from the underlying io.Reader. You do check if err != nil, but if that's true you simply break or return, and hence the caller of the tokenizer has no idea why their tokenization failed (if you even report failure??). Obviously, don't do that.\n\nIIUC you have updated the entity map from http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html, but you have also changed the map value type from int to string. These should be two separate changes. (The change that changes the type can change other parts of the code, if it makes sense.)",
			"disapproval": false,
			"date": "2011-10-09 02:19:32.227270",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-09 02:44:01.495805",
			"approval": false
		}
	],
	"owner_email": "andybalholm@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andybalholm",
	"subject": "code review 5223042: html: improve parsing of malformed tags",
	"created": "2011-10-06 15:40:49.630869",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001
	],
	"modified": "2011-10-09 02:44:02.837129",
	"closed": true,
	"issue": 5223042
}