{
	"description": "leveldb: add a writer for the on-disk table format.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go/",
			"disapproval": false,
			"date": "2011-10-06 11:39:06.589186",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/db/comparer.go\nFile leveldb/db/comparer.go (right):\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/db/comparer.go#newcode20\nleveldb/db/comparer.go:20: // AppendSeparator appends a sequence of bytes x to dst such that\nthis comment is confusing in that\n\n1) it speaks of 'x' almost as if it were a parameter that was passed in.  but it seems that 'x' is just made up by the implementation.  why?\n\n2) Appending a separator seems to have nothing to do with comparing (and this is in Comparer), making the previous point even more confusing.\n\nYou might want to explain a tad bit about the implementation here so this makes more sense.\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/reader.go\nFile leveldb/table/reader.go (right):\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/reader.go#newcode324\nleveldb/table/reader.go:324: // TODO(nigeltao): move the File interface to the standard package library?\nyeah, we're starting to collect these.\n\ngri has one in godoc too.\n\nmerging all these might be a good test for exercising the proposed os.FileInfo interface change.\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/table.go\nFile leveldb/table/table.go (right):\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/table.go#newcode20\nleveldb/table/table.go:20: concurrently.\ncan reads be done concurrently with one writer?\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go\nFile leveldb/table/writer.go (right):\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode49\nleveldb/table/writer.go:49: // prevKey was the key most recently passed to Set.\ncopy of it? does it matter if the client mutates it later?\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode75\nleveldb/table/writer.go:75: var _ db.DB = &Writer{}\n(*Writer)(nil) ?\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode266\nleveldb/table/writer.go:266: w.err = err\ncould you do all these w.err assignments in the defer closure?\n\ndoes line 273 not want a sticky error also?",
			"disapproval": false,
			"date": "2011-10-11 00:33:12.138780",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Reverse ping.  :-)\n\nI went to use this and thought this was already committed.  I'll patch it\nin locally for now.\n\nOn Mon, Oct 10, 2011 at 5:33 PM, <bradfitz@golang.org> wrote:\n\n> LGTM\n>\n>\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/db/**comparer.go<http://codereview.appspot.com/5221042/diff/1002/leveldb/db/comparer.go>\n> File leveldb/db/comparer.go (right):\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/db/**\n> comparer.go#newcode20<http://codereview.appspot.com/5221042/diff/1002/leveldb/db/comparer.go#newcode20>\n> leveldb/db/comparer.go:20: // AppendSeparator appends a sequence of\n> bytes x to dst such that\n> this comment is confusing in that\n>\n> 1) it speaks of 'x' almost as if it were a parameter that was passed in.\n>  but it seems that 'x' is just made up by the implementation.  why?\n>\n> 2) Appending a separator seems to have nothing to do with comparing (and\n> this is in Comparer), making the previous point even more confusing.\n>\n> You might want to explain a tad bit about the implementation here so\n> this makes more sense.\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**\n> table/reader.go<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/reader.go>\n> File leveldb/table/reader.go (right):\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**\n> table/reader.go#newcode324<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/reader.go#newcode324>\n> leveldb/table/reader.go:324: // TODO(nigeltao): move the File interface\n> to the standard package library?\n> yeah, we're starting to collect these.\n>\n> gri has one in godoc too.\n>\n> merging all these might be a good test for exercising the proposed\n> os.FileInfo interface change.\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**table/table.go<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/table.go>\n> File leveldb/table/table.go (right):\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**\n> table/table.go#newcode20<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/table.go#newcode20>\n> leveldb/table/table.go:20: concurrently.\n> can reads be done concurrently with one writer?\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**\n> table/writer.go<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go>\n> File leveldb/table/writer.go (right):\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**\n> table/writer.go#newcode49<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode49>\n> leveldb/table/writer.go:49: // prevKey was the key most recently passed\n> to Set.\n> copy of it? does it matter if the client mutates it later?\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**\n> table/writer.go#newcode75<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode75>\n> leveldb/table/writer.go:75: var _ db.DB = &Writer{}\n> (*Writer)(nil) ?\n>\n> http://codereview.appspot.com/**5221042/diff/1002/leveldb/**\n> table/writer.go#newcode266<http://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode266>\n> leveldb/table/writer.go:266: w.err = err\n> could you do all these w.err assignments in the defer closure?\n>\n> does line 273 not want a sticky error also?\n>\n> http://codereview.appspot.com/**5221042/<http://codereview.appspot.com/5221042/>\n>\n",
			"disapproval": false,
			"date": "2011-10-29 16:57:14.909574",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5221042/diff/1002/leveldb/db/comparer.go\nFile leveldb/db/comparer.go (right):\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/db/comparer.go#newcode20\nleveldb/db/comparer.go:20: // AppendSeparator appends a sequence of bytes x to dst such that\nOn 2011/10/11 00:33:12, bradfitz wrote:\n> this comment is confusing in that\n> \n> 1) it speaks of 'x' almost as if it were a parameter that was passed in.  but it\n> seems that 'x' is just made up by the implementation.  why?\n> \n> 2) Appending a separator seems to have nothing to do with comparing (and this is\n> in Comparer), making the previous point even more confusing.\n> \n> You might want to explain a tad bit about the implementation here so this makes\n> more sense.\n\nYeah, it's confusing, but it's not obvious how to write it more clearly.\n\nFor (1), I need to name the appended bytes something so that I can say how its constrained. For (2), AppendSeparator is part of Comparer because the appended bytes has to be consistent with what 'comparison' means. Enforcing this through the compiler instead of through documentation seems less error-prone. It may be possible to separate the two concerns. I'll submit this as is and try to do so in a separate CL.\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/table.go\nFile leveldb/table/table.go (right):\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/table.go#newcode20\nleveldb/table/table.go:20: concurrently.\nOn 2011/10/11 00:33:12, bradfitz wrote:\n> can reads be done concurrently with one writer?\n\nAdded: \"A table cannot be read until the writer has finished.\"\n\nAlso added \"but not both\" to the \"Tables are either opened for reading or created for writing\" line above.\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go\nFile leveldb/table/writer.go (right):\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode49\nleveldb/table/writer.go:49: // prevKey was the key most recently passed to Set.\nOn 2011/10/11 00:33:12, bradfitz wrote:\n> copy of it? does it matter if the client mutates it later?\n\nThe code made a copy. I've updated the comment to say that.\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode75\nleveldb/table/writer.go:75: var _ db.DB = &Writer{}\nOn 2011/10/11 00:33:12, bradfitz wrote:\n> (*Writer)(nil) ?\n\nDone.\n\nhttp://codereview.appspot.com/5221042/diff/1002/leveldb/table/writer.go#newcode266\nleveldb/table/writer.go:266: w.err = err\nOn 2011/10/11 00:33:12, bradfitz wrote:\n> could you do all these w.err assignments in the defer closure?\n\nIt isn't quite trivial, because in lines 271-275 I want to set w.err to non-nil but return nil. I could tweak it to work, but its easiest to leave it as is.\n\n\n> does line 273 not want a sticky error also?\n\nDone.",
			"disapproval": false,
			"date": "2011-10-30 00:56:20.467180",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as b69b43ea427d ***\n\nleveldb: add a writer for the on-disk table format.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5221042",
			"disapproval": false,
			"date": "2011-10-30 00:57:06.202486",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 30 October 2011 11:56,  <nigeltao@golang.org> wrote:\n> Yeah, it's confusing, but it's not obvious how to write it more clearly.\n>\n> For (1), I need to name the appended bytes something so that I can say\n> how its constrained. For (2), AppendSeparator is part of Comparer\n> because the appended bytes has to be consistent with what 'comparison'\n> means. Enforcing this through the compiler instead of through\n> documentation seems less error-prone. It may be possible to separate the\n> two concerns. I'll submit this as is and try to do so in a separate CL.\n\nhttp://codereview.appspot.com/5330055 has a rough draft of this\nseparation of concerns. It's not great (the SeparatorAppender name is\nterrible, and the interface types in comparer.go should possibly just\nbe func types), but I'm sharing it regardless.\n",
			"disapproval": false,
			"date": "2011-10-30 11:45:52.531369",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 5221042: leveldb: add a writer for the on-disk table format.",
	"created": "2011-10-06 11:37:56.916108",
	"patchsets": [
		1,
		2001,
		1002,
		11001
	],
	"modified": "2011-10-30 00:57:08.649746",
	"closed": true,
	"issue": 5221042
}