{
	"description": "graphics/detect: haar cascade object detector\n\nNo trainer yet, just a parser for the OpenCV XML format. Image tests\nwill follow when I take some headshots. (There are lots of face\nlibraries, but none of them are free to distribute.)",
	"cc": [
		"nigeltao@golang.org",
		"bsiegert@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://crawshaw%40google.com@code.google.com/p/graphics-go/",
			"disapproval": false,
			"date": "2011-10-12 01:02:42.657849",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "There's a lot of code in this change. I've just made some superficial comments as a first pass.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/detect.go\nFile graphics/detect/detect.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/detect.go#newcode5\ngraphics/detect/detect.go:5: package detect\nThis package needs a documentation comment. You are declaring a lot of exported (starts-with-a-capital-letter) types and functions. It is not clear to me how it all fits together.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go\nFile graphics/detect/integral.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode13\ngraphics/detect/integral.go:13: type IntegralColor struct {\nAre users of the detect package supposed to use these types? If not, this name should start with a lower case \"i\", and similarly below.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go\nFile graphics/detect/opencv_parser.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode8\ngraphics/detect/opencv_parser.go:8: \"strings\"\nSort imports.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode43\ngraphics/detect/opencv_parser.go:43: type sliceReader struct {\nThis should be unnecessary. Use a bytes.Buffer instead.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode58\ngraphics/detect/opencv_parser.go:58: vals := strings.Split(r, \" \")\nI think you should be able to use fmt.Sscanf.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode158\ngraphics/detect/opencv_parser.go:158: cascade, name, err = buildCascade(s)\nreturn buildCascade(s)",
			"disapproval": false,
			"date": "2011-10-16 11:44:26.217420",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go\nFile graphics/detect/integral.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode32\ngraphics/detect/integral.go:32: type IntegralImage struct {\nAnother thing: does this type have to implement the image.Image interface? I feel like it would be easier if you just had:\ntype integral struct {\n  // Same as you have now.\n}\nand simply dropped the awkward-looking and otherwise-unused (??) IntegralColor and IntegralColorModel types, and the Bounds, ColorModel, AtC and At methods.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode96\ngraphics/detect/integral.go:96: Pix:    make([]uint64, b.Max.Y*b.Max.X),\nI think that you are assuming that b.Min is (0, 0)\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode136\ngraphics/detect/integral.go:136: if y > 0 && x > 0 {\nAgain, you are assuming that b.Min is (0, 0).\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/projector.go\nFile graphics/detect/projector.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/projector.go#newcode11\ngraphics/detect/projector.go:11: // Projector allows projecting from a source Rectanlge onto a target Rectangle.\nTypo in \"Rectangle\".\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/projector.go#newcode21\ngraphics/detect/projector.go:21: func NewProjector(o image.Rectangle, n image.Rectangle) *Projector {\n\"o\" and \"n\" are unusual argument names.",
			"disapproval": false,
			"date": "2011-10-17 04:40:54.943521",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5229053/diff/4001/graphics/detect/detect.go\nFile graphics/detect/detect.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/detect.go#newcode5\ngraphics/detect/detect.go:5: package detect\nOn 2011/10/16 11:44:26, nigeltao wrote:\n> This package needs a documentation comment. You are declaring a lot of exported\n> (starts-with-a-capital-letter) types and functions. It is not clear to me how it\n> all fits together.\n\ndoc.go added and interface simplified\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go\nFile graphics/detect/integral.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode13\ngraphics/detect/integral.go:13: type IntegralColor struct {\nOn 2011/10/16 11:44:26, nigeltao wrote:\n> Are users of the detect package supposed to use these types? If not, this name\n> should start with a lower case \"i\", and similarly below.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode32\ngraphics/detect/integral.go:32: type IntegralImage struct {\nOn 2011/10/17 04:40:55, nigeltao wrote:\n> Another thing: does this type have to implement the image.Image interface? I\n> feel like it would be easier if you just had:\n> type integral struct {\n>   // Same as you have now.\n> }\n> and simply dropped the awkward-looking and otherwise-unused (??) IntegralColor\n> and IntegralColorModel types, and the Bounds, ColorModel, AtC and At methods.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode96\ngraphics/detect/integral.go:96: Pix:    make([]uint64, b.Max.Y*b.Max.X),\nOn 2011/10/17 04:40:55, nigeltao wrote:\n> I think that you are assuming that b.Min is (0, 0)\n\nAs above: \"To support sum over an entire subimage, we do not truncate pix.\" The problem is, if you take a subImage of integral, you can't sum the exact bounds of the subimage unless you keep one extra row of pixels.\n\nTo avoid working out the edge cases and having two sets of bounds within an integral, I cheat, and use a different way of referencing into pix.\n\nThis does waste some memory, and I might get around to fixing it at some point.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/integral.go#newcode136\ngraphics/detect/integral.go:136: if y > 0 && x > 0 {\nOn 2011/10/17 04:40:55, nigeltao wrote:\n> Again, you are assuming that b.Min is (0, 0).\n\nAs above.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go\nFile graphics/detect/opencv_parser.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode8\ngraphics/detect/opencv_parser.go:8: \"strings\"\nOn 2011/10/16 11:44:26, nigeltao wrote:\n> Sort imports.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode43\ngraphics/detect/opencv_parser.go:43: type sliceReader struct {\nOn 2011/10/16 11:44:26, nigeltao wrote:\n> This should be unnecessary. Use a bytes.Buffer instead.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode58\ngraphics/detect/opencv_parser.go:58: vals := strings.Split(r, \" \")\nOn 2011/10/16 11:44:26, nigeltao wrote:\n> I think you should be able to use fmt.Sscanf.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/opencv_parser.go#newcode158\ngraphics/detect/opencv_parser.go:158: cascade, name, err = buildCascade(s)\nOn 2011/10/16 11:44:26, nigeltao wrote:\n> return buildCascade(s)\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/projector.go\nFile graphics/detect/projector.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/projector.go#newcode11\ngraphics/detect/projector.go:11: // Projector allows projecting from a source Rectanlge onto a target Rectangle.\nOn 2011/10/17 04:40:55, nigeltao wrote:\n> Typo in \"Rectangle\".\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/4001/graphics/detect/projector.go#newcode21\ngraphics/detect/projector.go:21: func NewProjector(o image.Rectangle, n image.Rectangle) *Projector {\nOn 2011/10/17 04:40:55, nigeltao wrote:\n> \"o\" and \"n\" are unusual argument names.\n\nDone.",
			"disapproval": false,
			"date": "2011-10-22 16:02:41.930217",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5229053/diff/11001/graphics/detect/detect.go\nFile graphics/detect/detect.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/detect.go#newcode55\ngraphics/detect/detect.go:55: for r := (image.Rectangle{image.Pt(0, 0), s}).Add(b.Min); r.In(b); r = r.Add(ty) {\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> s/image.Pt(0, 0)/image.ZP/, or s/(image.Rectangle{image.Pt(0, 0),\n> s})/image.Rect(0, 0, s.X, s.Y)/.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/detect.go#newcode104\ngraphics/detect/detect.go:104: for i := 0; i < len(c.Feature); i++ {\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> for _, f := range c.Feature {\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/doc.go\nFile graphics/detect/doc.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/doc.go#newcode18\ngraphics/detect/doc.go:18: classifier, _, err := detect.ParseOpenCV\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> Append \"(r)\".\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go\nFile graphics/detect/integral.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go#newcode27\ngraphics/detect/integral.go:27: func (p *integral) subImage(r image.Rectangle) *integral {\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> It seems to me that the rect should be a field of the window struct, not the\n> integral struct, and integral.integrate should take an image.Rectangle argument.\n> WDYT?\n\nDone: the first half of your suggestion. Got that far and realized I did not need the second half, nor a lot of other code. Thanks!\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go#newcode79\ngraphics/detect/integral.go:79: b := src.Bounds()\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> Move this inside the !ok block.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go#newcode110\ngraphics/detect/integral.go:110: srcg := toGray(src)\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> I might be naive, but it seems expensive to convert to gray twice: once for\n> newIntegral and again for newSquaredIntegral.\n> \n> Would it be better for the integral struct to have two []uint64 values called\n> sum and sumOfSq (or sum and sum2)?\n\nDid something similar. I am trying to maintain the conceptual simplicity of the integral struct.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/opencv_parser.go\nFile graphics/detect/opencv_parser.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/opencv_parser.go#newcode111\ngraphics/detect/opencv_parser.go:111: // BUG(crawshaw): tag-based parsing doesn't seem to work with <_>\nOn 2011/10/24 07:26:24, bsiegert wrote:\n> If this is a bug in package xml, did you file an issue?\n\nI have http://codereview.appspot.com/5298061 out for review.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go\nFile graphics/detect/projector.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go#newcode13\ngraphics/detect/projector.go:13: rx float64\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> Maybe add some comments that rx, ry are scales, dx, dy are translates, and r is\n> a clip??\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go#newcode20\ngraphics/detect/projector.go:20: // newProjector creates a Projector with source o and target n.\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> \"o\" and \"n\" are wrong.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go#newcode40\ngraphics/detect/projector.go:40: func (s *projector) Rect(r image.Rectangle) image.Rectangle {\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> Why is Rect capitalized but pt not?\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/11001/testdata/opencv.xml\nFile testdata/opencv.xml (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/testdata/opencv.xml#newcode1\ntestdata/opencv.xml:1: <?xml version=\"1.0\"?>\nOn 2011/10/24 06:36:29, nigeltao wrote:\n> Does this need a copyright header? Additionally, does it need a comment saying\n> where was it sourced from?\n\nCopyright added. I made this file myself (the actual classifier it contains is nonsense).",
			"disapproval": false,
			"date": "2011-11-01 05:15:03.630416",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5229053/diff/11001/graphics/detect/detect.go\nFile graphics/detect/detect.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/detect.go#newcode55\ngraphics/detect/detect.go:55: for r := (image.Rectangle{image.Pt(0, 0), s}).Add(b.Min); r.In(b); r = r.Add(ty) {\ns/image.Pt(0, 0)/image.ZP/, or s/(image.Rectangle{image.Pt(0, 0), s})/image.Rect(0, 0, s.X, s.Y)/.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/detect.go#newcode104\ngraphics/detect/detect.go:104: for i := 0; i < len(c.Feature); i++ {\nfor _, f := range c.Feature {\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/doc.go\nFile graphics/detect/doc.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/doc.go#newcode18\ngraphics/detect/doc.go:18: classifier, _, err := detect.ParseOpenCV\nAppend \"(r)\".\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go\nFile graphics/detect/integral.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go#newcode27\ngraphics/detect/integral.go:27: func (p *integral) subImage(r image.Rectangle) *integral {\nIt seems to me that the rect should be a field of the window struct, not the integral struct, and integral.integrate should take an image.Rectangle argument. WDYT?\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go#newcode79\ngraphics/detect/integral.go:79: b := src.Bounds()\nMove this inside the !ok block.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/integral.go#newcode110\ngraphics/detect/integral.go:110: srcg := toGray(src)\nI might be naive, but it seems expensive to convert to gray twice: once for newIntegral and again for newSquaredIntegral.\n\nWould it be better for the integral struct to have two []uint64 values called sum and sumOfSq (or sum and sum2)?\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go\nFile graphics/detect/projector.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go#newcode13\ngraphics/detect/projector.go:13: rx float64\nMaybe add some comments that rx, ry are scales, dx, dy are translates, and r is a clip??\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go#newcode20\ngraphics/detect/projector.go:20: // newProjector creates a Projector with source o and target n.\n\"o\" and \"n\" are wrong.\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/projector.go#newcode40\ngraphics/detect/projector.go:40: func (s *projector) Rect(r image.Rectangle) image.Rectangle {\nWhy is Rect capitalized but pt not?\n\nhttp://codereview.appspot.com/5229053/diff/11001/testdata/opencv.xml\nFile testdata/opencv.xml (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/testdata/opencv.xml#newcode1\ntestdata/opencv.xml:1: <?xml version=\"1.0\"?>\nDoes this need a copyright header? Additionally, does it need a comment saying where was it sourced from?",
			"disapproval": false,
			"date": "2011-10-24 06:36:28.923585",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5229053/diff/11001/graphics/detect/opencv_parser.go\nFile graphics/detect/opencv_parser.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/11001/graphics/detect/opencv_parser.go#newcode111\ngraphics/detect/opencv_parser.go:111: // BUG(crawshaw): tag-based parsing doesn't seem to work with <_>\nIf this is a bug in package xml, did you file an issue?",
			"disapproval": false,
			"date": "2011-10-24 07:26:24.145497",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/Makefile\nFile graphics/detect/Makefile (right):\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/Makefile#newcode9\ngraphics/detect/Makefile:9: detect.go\\\nAdd doc.go.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go\nFile graphics/detect/detect_test.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go#newcode12\ngraphics/detect/detect_test.go:12: _ \"image/jpeg\"\nUnnecessary?\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go#newcode46\ngraphics/detect/detect_test.go:46: draw.Draw(m, image.Rect(0, 0, 3, 4), image.White, b.Min, draw.Src)\nWhen the src image is an image.Uniform like image.White or image.Black, idiomatic is to make the fourth argument image.ZP instead of b.Min.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go#newcode47\ngraphics/detect/detect_test.go:47: draw.Draw(m, image.Rect(3, 4, 4, 5), image.Black, b.Min, draw.Src)\nIs drawing a black rectangle doing anything? An image.NewGray starts as all black.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/opencv_parser_test.go\nFile graphics/detect/opencv_parser_test.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/opencv_parser_test.go#newcode60\ngraphics/detect/opencv_parser_test.go:60: t.Error(err)\nYou could s/Error/Fatal/ and drop the returns throughout this function.",
			"disapproval": false,
			"date": "2011-11-02 07:45:55.138716",
			"approval": true
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5229053/diff/23001/graphics/detect/Makefile\nFile graphics/detect/Makefile (right):\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/Makefile#newcode9\ngraphics/detect/Makefile:9: detect.go\\\nOn 2011/11/02 07:45:55, nigeltao wrote:\n> Add doc.go.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go\nFile graphics/detect/detect_test.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go#newcode12\ngraphics/detect/detect_test.go:12: _ \"image/jpeg\"\nOn 2011/11/02 07:45:55, nigeltao wrote:\n> Unnecessary?\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go#newcode46\ngraphics/detect/detect_test.go:46: draw.Draw(m, image.Rect(0, 0, 3, 4), image.White, b.Min, draw.Src)\nOn 2011/11/02 07:45:55, nigeltao wrote:\n> When the src image is an image.Uniform like image.White or image.Black,\n> idiomatic is to make the fourth argument image.ZP instead of b.Min.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/detect_test.go#newcode47\ngraphics/detect/detect_test.go:47: draw.Draw(m, image.Rect(3, 4, 4, 5), image.Black, b.Min, draw.Src)\nOn 2011/11/02 07:45:55, nigeltao wrote:\n> Is drawing a black rectangle doing anything? An image.NewGray starts as all\n> black.\n\nDone.\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/opencv_parser_test.go\nFile graphics/detect/opencv_parser_test.go (right):\n\nhttp://codereview.appspot.com/5229053/diff/23001/graphics/detect/opencv_parser_test.go#newcode60\ngraphics/detect/opencv_parser_test.go:60: t.Error(err)\nOn 2011/11/02 07:45:55, nigeltao wrote:\n> You could s/Error/Fatal/ and drop the returns throughout this function.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-05 22:09:24.713248",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as 1e7422ec8285 ***\n\ngraphics/detect: haar cascade object detector\n\nNo trainer yet, just a parser for the OpenCV XML format. Image tests\nwill follow when I take some headshots. (There are lots of face\nlibraries, but none of them are free to distribute.)\n\nR=nigeltao, bsiegert\nCC=golang-dev\nhttp://codereview.appspot.com/5229053",
			"disapproval": false,
			"date": "2011-11-05 22:10:40.959024",
			"approval": false
		}
	],
	"owner_email": "crawshaw@google.com",
	"private": false,
	"base_url": "",
	"owner": "crawshaw1",
	"subject": "code review 5229053: graphics/detect: haar cascade object detector",
	"created": "2011-10-12 01:01:38.464030",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		23001,
		28001
	],
	"modified": "2011-11-05 22:10:42.769202",
	"closed": true,
	"issue": 5229053
}