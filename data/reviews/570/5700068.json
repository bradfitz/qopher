{
	"description": "go spec: inside functions, variables must be evaluated.\n\nFixes issue 1612.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"remyoudompheng@gmail.com",
		"ken@google.com",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r, rsc, iant, ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-24 23:39:26.829530",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\ni like this simplicity and think it works",
			"disapproval": false,
			"date": "2012-02-27 23:49:56.864215",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5700068/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5700068/diff/1/doc/go_spec.html#newcode1839\ndoc/go_spec.html:1839: it is illegal to declare a variable that is never read.\ni don't know what \"read\" means, plus this is vague. it's not obvious how to be more specific. what about a structure field?\nalso, is it just the variable that must be read, or a value assigned to it? as the old compiler once wrote, \"set and not used\".\n\nin short, i understand what you're saying but it's not clear and i'm not even sure it's quite what we want to say. but it might be.",
			"disapproval": false,
			"date": "2012-02-24 23:49:04.311661",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes\nOn Feb 25, 2012 2:27 AM, <remyoudompheng@gmail.com> wrote:\n\n> On 2012/02/25 01:35:25, r wrote:\n>\n>> i think if you change 'read' to 'evaluated' in the previous CL, you\n>>\n> get close to\n>\n>> the right meaning, close enough for now.\n>>\n>\n> Is Array \"used\" in the following snippet?\n>\n> var Array [2]int\n> i := len(Array)\n>\n>\n> http://codereview.appspot.com/**5700068/<http://codereview.appspot.com/5700068/>\n>\n",
			"disapproval": false,
			"date": "2012-02-25 17:24:44.487482",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nThis time w/ a proposal for the notion of an RhsExpr that would permit\na syntactic definition of the notion of variable \"use\".\n\nIf we like this approach, I will complete the change accordingly.\n\n- gri\n\nOn Fri, Feb 24, 2012 at 3:49 PM,  <r@golang.org> wrote:\n>\n> http://codereview.appspot.com/5700068/diff/1/doc/go_spec.html\n> File doc/go_spec.html (right):\n>\n> http://codereview.appspot.com/5700068/diff/1/doc/go_spec.html#newcode1839\n> doc/go_spec.html:1839: it is illegal to declare a variable that is never\n> read.\n> i don't know what \"read\" means, plus this is vague. it's not obvious how\n> to be more specific. what about a structure field?\n> also, is it just the variable that must be read, or a value assigned to\n> it? as the old compiler once wrote, \"set and not used\".\n>\n> in short, i understand what you're saying but it's not clear and i'm not\n> even sure it's quite what we want to say. but it might be.\n>\n> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-25 01:10:04.969697",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i like the general idea but feel it's too sweeping a change to do quickly. i'd rather hold off on that approach.\n\ni think if you change 'read' to 'evaluated' in the previous CL, you get close to the right meaning, close enough for now.",
			"disapproval": false,
			"date": "2012-02-25 01:35:25.791472",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 24, 2012 at 5:35 PM,  <r@golang.org> wrote:\n> i like the general idea but feel it's too sweeping a change to do\n> quickly. i'd rather hold off on that approach.\n\nHappy to go back, but the change is pretty simple. Some places where\nwe use Expression would use RhsExpr and some places where we  use\nExpressionList would become RhsExprList. That's about it.\n\nWaiting for others to chime in.\n- gri\n\n>\n> i think if you change 'read' to 'evaluated' in the previous CL, you get\n> close to the right meaning, close enough for now.\n>\n>\n> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-25 02:54:15.526136",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/25 01:35:25, r wrote:\n> i think if you change 'read' to 'evaluated' in the previous CL, you get close to\n> the right meaning, close enough for now.\n\nIs Array \"used\" in the following snippet?\n\nvar Array [2]int\ni := len(Array)",
			"disapproval": false,
			"date": "2012-02-25 10:27:35.784088",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-27 23:44:59.532412",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-27 23:46:04.585661",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5700068/diff/4002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5700068/diff/4002/doc/go_spec.html#newcode1839\ndoc/go_spec.html:1839: it is illegal to declare a variable that is never evaluated.\nand never has its address taken?\n\nfunc f() *int {\n    var x int\n    return &x\n}",
			"disapproval": false,
			"date": "2012-02-28 15:38:33.704734",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I may be a bit stubborn but still annoyed by the case of\n\nvar a [2]int\n_ = len(a)\n\nwhere the spec explicitly says it does not evaluate nor take the address of a. Maybe the compiler should complain, because declaring n array just to take its length is probably a mistake.",
			"disapproval": false,
			"date": "2012-02-28 20:38:37.404463",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is also the alternative route - which I have abandoned because\nit was a larger change - to introduce a syntactic production RhsExpr.\n\nThen one can simply say that it is an error if a locally declared\nvariable never appears in an RhsExpr. It would solve the len(a) issue\nbecause in this case a would appear in an RhsExpr and thus it would be\nlegal (contrary to what happens now).\n\nThe change is that almost all Expressions would become RhsExpr (and\nExpressionLists would become RhsExprLists), except for a just a couple\nof expressions on the lhs. The alternative could be to leave\nExpression and ExpressionList alone and instead change the lhs, by\ncalling it LExpression, LExpr, or the like (Lvalue here we come...).\nThe latter would be a fairly small change and may even give us a\nbetter handle to refer to variables on the lhs.\n\n- gri\n\n\n\nOn Tue, Feb 28, 2012 at 1:09 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> i wonder (not yet suggest) if we should make set-and-not-used be like the return thing and just say, compilers can do this. i realize this leaves an unsettled pocket in the language and does not define program behavior, so it's worse than return, but i observe two things:\n>\n> 1) my attempt to simplify by saying \"vars must be evaluated\" failed because people want to turn it into a spec\n> 2) ken is right that it's getting messy because we're trying to spec it\n>\n> so my solomonic pondering is whether we should stop trying to spec it. for now.\n>\n> -rob\n>\n",
			"disapproval": false,
			"date": "2012-02-28 21:16:54.340489",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n- gri\n\nOn Tue, Feb 28, 2012 at 1:52 PM,  <rsc@golang.org> wrote:\n>\n> http://codereview.appspot.com/5700068/diff/26002/doc/go_spec.html\n> File doc/go_spec.html (right):\n>\n> http://codereview.appspot.com/5700068/diff/26002/doc/go_spec.html#newcode1840\n> doc/go_spec.html:1840: if the variable is never evaluated and never has\n> its\n> if the variable is never used.\n>\n> (And leave \"used\" undefined.)\n>\n> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-28 21:54:02.378372",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Wednesday, February 29, 2012, wrote:\n\n> LGTM\n>\n>\n> http://codereview.appspot.com/**5700068/<http://codereview.appspot.com/5700068/>\n>\n",
			"disapproval": false,
			"date": "2012-02-28 22:05:08.935879",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"ken@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5700068/diff/25003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5700068/diff/25003/doc/go_spec.html#newcode4248\ndoc/go_spec.html:4248: The iteration variables may be declared by the \"range\" using a form of\nOn 2012/02/29 12:36:16, rog wrote:\n> this looks like a mistake.\n\nSee: http://codereview.appspot.com/5706065",
			"disapproval": false,
			"date": "2012-02-29 16:21:57.025331",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nAlso added missing links to (short) variable declarations where\nvariables are declared so that it's clear the rule doesn't just apply\nto this form of variable declaration.\n- gri\n\nOn Tue, Feb 28, 2012 at 7:38 AM,  <rsc@golang.org> wrote:\n>\n> http://codereview.appspot.com/5700068/diff/4002/doc/go_spec.html\n> File doc/go_spec.html (right):\n>\n> http://codereview.appspot.com/5700068/diff/4002/doc/go_spec.html#newcode1839\n> doc/go_spec.html:1839: it is illegal to declare a variable that is never\n> evaluated.\n> and never has its address taken?\n\nOf course.\n\n>\n> func f() *int {\n> \u00a0 \u00a0var x int\n> \u00a0 \u00a0return &x\n> }\n>\n> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-28 19:31:42.309111",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> var a [2]int\n> _ = len(a)\n\nI have no problem with making this an error.\nIf others agree, please file an issue.\n",
			"disapproval": false,
			"date": "2012-02-28 20:41:29.082176",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 29/02/2012, at 8:16 AM, Robert Griesemer wrote:\n\n> There is also the alternative route - which I have abandoned because\n> it was a larger change - to introduce a syntactic production RhsExpr.\n> \n> Then one can simply say that it is an error if a locally declared\n> variable never appears in an RhsExpr. It would solve the len(a) issue\n> because in this case a would appear in an RhsExpr and thus it would be\n> legal (contrary to what happens now).\n> \n> The change is that almost all Expressions would become RhsExpr (and\n> ExpressionLists would become RhsExprLists), except for a just a couple\n> of expressions on the lhs. The alternative could be to leave\n> Expression and ExpressionList alone and instead change the lhs, by\n> calling it LExpression, LExpr, or the like (Lvalue here we come...).\n> The latter would be a fairly small change and may even give us a\n> better handle to refer to variables on the lhs.\n\nas i said before, that sounds like a good idea but is too big a change for now.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-02-28 21:32:41.632657",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it would be fine given the existing spec and this rule to make\nthis an error.\n- gri\n\nOn Tue, Feb 28, 2012 at 12:38 PM,  <remyoudompheng@gmail.com> wrote:\n> I may be a bit stubborn but still annoyed by the case of\n>\n> var a [2]int\n> _ = len(a)\n>\n> where the spec explicitly says it does not evaluate nor take the address\n> of a. Maybe the compiler should complain, because declaring n array just\n> to take its length is probably a mistake.\n>\n> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-28 20:43:56.093923",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 29/02/2012, at 8:37 AM, Russ Cox wrote:\n\n>> I am not bothered by the len(a) case. It's minor compared to some\n>> other irregularities we have, and arguably a bug to declare an array\n>> that is never used but for its length.\n> \n> Maybe in that case, but what about\n> \n> var x int\n> y := unsafe.Sizeof(x)\n> \n> Are we really going to require _ = x here?\n\nWhy not? unsafe does not need special compensation for usability.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-28 21:41:53.420873",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"ken@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-28 22:10:44.274488",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sorry, i missed that.\n\nOn 29 February 2012 16:21,  <gri@golang.org> wrote:\n>\n> http://codereview.appspot.com/5700068/diff/25003/doc/go_spec.html\n> File doc/go_spec.html (right):\n>\n> http://codereview.appspot.com/5700068/diff/25003/doc/go_spec.html#newcode4248\n> doc/go_spec.html:4248: The iteration variables may be declared by the\n> \"range\" using a form of\n> On 2012/02/29 12:36:16, rog wrote:\n>>\n>> this looks like a mistake.\n>\n>\n> See: http://codereview.appspot.com/5706065\n>\n> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-29 17:08:58.434486",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i am uncomfortable with the increasing\ncross-product of normal functions being\ndiagnosed as special cases. especially errors.\nall of _, =, len, and array are well defined.\nit does what each suggests. it seems to me\nthat if this is illegal, then\n    _ = 5\nand a million more should also be illegal.\n\nOn Tue, Feb 28, 2012 at 12:43 PM, Robert Griesemer <gri@golang.org> wrote:\n> I think it would be fine given the existing spec and this rule to make\n> this an error.\n> - gri\n>\n> On Tue, Feb 28, 2012 at 12:38 PM, \u00a0<remyoudompheng@gmail.com> wrote:\n>> I may be a bit stubborn but still annoyed by the case of\n>>\n>> var a [2]int\n>> _ = len(a)\n>>\n>> where the spec explicitly says it does not evaluate nor take the address\n>> of a. Maybe the compiler should complain, because declaring n array just\n>> to take its length is probably a mistake.\n>>\n>> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-28 20:56:54.757574",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 28, 2012 at 15:56, Ken Thompson <ken@google.com> wrote:\n> i am uncomfortable with the increasing\n> cross-product of normal functions being\n> diagnosed as special cases. especially errors.\n> all of _, =, len, and array are well defined.\n> it does what each suggests. it seems to me\n> that if this is illegal, then\n> \u00a0 \u00a0_ = 5\n> and a million more should also be illegal.\n\nIt's not this rule but len on arrays that is the special case.\n\nx := []int{}\n_ = len(x)\n\nis still okay.  The special case is that when you have\n\na := [5]int{}\n_ = len(a)\n\nthe spec explicitly defines that len(a) is a compile-time\nconstant and therefore does not evaluate a.\n\nWe could enumerate the constructs where you can write\nsomething that looks like, but is not, a use of an argument.\nI believe they are unsafe.Sizeof, unsafe.Offsetof, unsafe.Alignof,\nlen, and cap.\n\nWe could say in the spec the error applies to\nvariables that are never evaluated, never addressed,\nand never used during the computation of a compile-time\nconstant.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-28 21:02:55.805840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm leaning toward leaving this unspecified now too.\n",
			"disapproval": false,
			"date": "2012-02-28 21:42:42.810026",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i wonder (not yet suggest) if we should make set-and-not-used be like the return thing and just say, compilers can do this. i realize this leaves an unsettled pocket in the language and does not define program behavior, so it's worse than return, but i observe two things:\n\n1) my attempt to simplify by saying \"vars must be evaluated\" failed because people want to turn it into a spec\n2) ken is right that it's getting messy because we're trying to spec it\n\nso my solomonic pondering is whether we should stop trying to spec it. for now.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-28 21:09:17.116770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"ken@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5700068/diff/26002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5700068/diff/26002/doc/go_spec.html#newcode1840\ndoc/go_spec.html:1840: if the variable is never evaluated and never has its\nif the variable is never used.\n\n(And leave \"used\" undefined.)",
			"disapproval": false,
			"date": "2012-02-28 21:52:30.104516",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"ken@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-28 21:58:37.007288",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am inclined to leave the CL as is.\n\nI am not bothered by the len(a) case. It's minor compared to some\nother irregularities we have, and arguably a bug to declare an array\nthat is never used but for its length.\n\n- gri\n\nOn Tue, Feb 28, 2012 at 1:32 PM, Rob 'Commander' Pike <r@google.com> wrote:\n>\n> On 29/02/2012, at 8:16 AM, Robert Griesemer wrote:\n>\n>> There is also the alternative route - which I have abandoned because\n>> it was a larger change - to introduce a syntactic production RhsExpr.\n>>\n>> Then one can simply say that it is an error if a locally declared\n>> variable never appears in an RhsExpr. It would solve the len(a) issue\n>> because in this case a would appear in an RhsExpr and thus it would be\n>> legal (contrary to what happens now).\n>>\n>> The change is that almost all Expressions would become RhsExpr (and\n>> ExpressionLists would become RhsExprLists), except for a just a couple\n>> of expressions on the lhs. The alternative could be to leave\n>> Expression and ExpressionList alone and instead change the lhs, by\n>> calling it LExpression, LExpr, or the like (Lvalue here we come...).\n>> The latter would be a fairly small change and may even give us a\n>> better handle to refer to variables on the lhs.\n>\n> as i said before, that sounds like a good idea but is too big a change for now.\n>\n> -rob\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-28 21:35:57.058871",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I am not bothered by the len(a) case. It's minor compared to some\n> other irregularities we have, and arguably a bug to declare an array\n> that is never used but for its length.\n\nMaybe in that case, but what about\n\nvar x int\ny := unsafe.Sizeof(x)\n\nAre we really going to require _ = x here?\n\n?\n",
			"disapproval": false,
			"date": "2012-02-28 21:37:32.706478",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"ken@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5700068/diff/22002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5700068/diff/22002/doc/go_spec.html#newcode1838\ndoc/go_spec.html:1838: Inside a <a href=\"#Function_declarations\">function</a> <a href=\"#Body\">body</a>,\nwhere is the \"Body\" anchor?\n\nhttp://codereview.appspot.com/5700068/diff/22002/doc/go_spec.html#newcode1840\ndoc/go_spec.html:1840: <a href=\"#Address_operators\">address</a> taken.\nIn gccgo I implement a slightly different rule: it is illegal to declare a variable that is not named again anywhere in its scope.  I count any reference to the variable as a use, even if the reference is not actually evaluated.\n\nI don't know which rule is best.",
			"disapproval": false,
			"date": "2012-02-28 21:46:23.835900",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for Ian.\n\nI am not completely confident about this, but it seems good enough to try and see.",
			"disapproval": false,
			"date": "2012-02-28 19:52:53.408062",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"ken@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7ff2bf9b131a ***\n\ngo spec: inside functions, variables must be evaluated.\n\nFixes issue 1612.\n\nR=r, rsc, iant, ken, remyoudompheng, ken, r\nCC=golang-dev\nhttp://codereview.appspot.com/5700068",
			"disapproval": false,
			"date": "2012-02-29 01:44:27.399028",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 29/02/2012, at 8:42 AM, Russ Cox wrote:\n\n> I'm leaning toward leaving this unspecified now too.\n\nthat does not preclude us specifying it later\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-28 21:45:08.821074",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. Rephrased as implementation restriction. Perhaps this is better?\n- gri\n\nOn Tue, Feb 28, 2012 at 1:46 PM,  <iant@golang.org> wrote:\n>\n> http://codereview.appspot.com/5700068/diff/22002/doc/go_spec.html\n> File doc/go_spec.html (right):\n>\n> http://codereview.appspot.com/5700068/diff/22002/doc/go_spec.html#newcode1838\n> doc/go_spec.html:1838: Inside a <a\n> href=\"#Function_declarations\">function</a> <a href=\"#Body\">body</a>,\n> where is the \"Body\" anchor?\n\nThe Body anchor is generated automatically when serving the spec via\ngodoc (which introduces\nlinks for all ebnf productions).\n\n- gri\n\n>\n> http://codereview.appspot.com/5700068/diff/22002/doc/go_spec.html#newcode1840\n> doc/go_spec.html:1840: <a href=\"#Address_operators\">address</a> taken.\n> In gccgo I implement a slightly different rule: it is illegal to declare\n> a variable that is not named again anywhere in its scope. \u00a0I count any\n> reference to the variable as a use, even if the reference is not\n> actually evaluated.\n>\n> I don't know which rule is best.\n>\n> http://codereview.appspot.com/5700068/\n",
			"disapproval": false,
			"date": "2012-02-28 21:51:30.842016",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"ken@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5700068/diff/25003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5700068/diff/25003/doc/go_spec.html#newcode4248\ndoc/go_spec.html:4248: The iteration variables may be declared by the \"range\" using a form of\nthis looks like a mistake.",
			"disapproval": false,
			"date": "2012-02-29 12:36:16.280797",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5700068: go spec: inside functions, variables must be evaluated.",
	"created": "2012-02-24 23:39:23.713629",
	"patchsets": [
		1,
		4001,
		3,
		3002,
		9002,
		3004,
		11001,
		12001,
		4002,
		20001,
		22002,
		26002,
		21004,
		20006,
		25003
	],
	"modified": "2012-02-29 16:21:57.307930",
	"closed": true,
	"issue": 5700068
}