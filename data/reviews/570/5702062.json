{
	"description": "spec: apply method sets, embedding to all types, not just named types\n\nWhen we first wrote the method set definition, we had long\ndiscussions about whether method sets applied to all types\nor just named types, and we (or at least I) concluded that it\ndidn't matter: the two were equivalent points of view, because\nthe only way to introduce a new method was to write a method\nfunction, which requires a named receiver type.\n\nHowever, the addition of embedded types changed this.\nEmbedding can introduce a method without writing an explicit\nmethod function, as in:\n\n        var x struct {\n                sync.Mutex\n        }\n\n        var px *struct {\n                sync.Mutex\n        }\n\n        var _, _ sync.Locker = &x, px\n\nThe edits in this CL make clear that both &x and px satisfy\nsync.Locker.  Today, gccgo already works this way; 6g does not.\n",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"iant@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM+++\n\ngri\n\nOn Wed, Feb 29, 2012 at 8:15 AM,  <rsc@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> spec: apply method sets, embedding to all types, not just named types\n>\n> When we first wrote the method set definition, we had long\n> discussions about whether method sets applied to all types\n> or just named types, and we (or at least I) concluded that it\n> didn't matter: the two were equivalent points of view, because\n> the only way to introduce a new method was to write a method\n> function, which requires a named receiver type.\n>\n> However, the addition of embedded types changed this.\n> Embedding can introduce a method without writing an explicit\n> method function, as in:\n>\n> \u00a0 \u00a0 \u00a0 \u00a0var x struct {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0sync.Mutex\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0var px *struct {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0sync.Mutex\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0var _, _ sync.Locker = &x, px\n>\n> The edits in this CL make clear that both &x and px satisfy\n> sync.Locker. \u00a0Today, gccgo disagrees about px and\n> 6g disagrees about both. \u00a0This is a language change,\n> but one that resolves a disagreement between gccgo and 6g\n> (by telling them that they're both wrong).\n>\n> Please review this at http://codereview.appspot.com/5702062/\n>\n> Affected files:\n> \u00a0M doc/go_spec.html\n>\n>\n> Index: doc/go_spec.html\n> ===================================================================\n> --- a/doc/go_spec.html\n> +++ b/doc/go_spec.html\n> @@ -678,7 +678,7 @@\n> \u00a0A type may have a <i>method set</i> associated with it\n> \u00a0(\u00a7<a href=\"#Interface_types\">Interface types</a>, \u00a7<a\n> href=\"#Method_declarations\">Method declarations</a>).\n> \u00a0The method set of an <a href=\"#Interface_types\">interface type</a> is its\n> interface.\n> -The method set of any other named type <code>T</code>\n> +The method set of any other type <code>T</code>\n> \u00a0consists of all methods with receiver type <code>T</code>.\n> \u00a0The method set of the corresponding pointer type <code>*T</code>\n> \u00a0is the set of all methods with receiver <code>*T</code> or <code>T</code>\n> @@ -954,7 +954,7 @@\n> \u00a0<p>\n> \u00a0Fields and methods (\u00a7<a href=\"#Method_declarations\">Method\n> declarations</a>) of an anonymous field are\n> \u00a0promoted to be ordinary fields and methods of the struct (\u00a7<a\n> href=\"#Selectors\">Selectors</a>).\n> -The following rules apply for a struct type named <code>S</code> and\n> +The following rules apply for a struct type <code>S</code> and\n> \u00a0a type named <code>T</code>:\n> \u00a0</p>\n> \u00a0<ul>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-29 16:24:52.704397",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ian corrected me about gccgo: this new spec is exactly what gccgo\nalready does.  I updated the CL description to reflect that.\n",
			"disapproval": false,
			"date": "2012-02-29 16:27:50.234253",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-29 16:15:31.203441",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-29 16:38:53.993460",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5702062/diff/4/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5702062/diff/4/doc/go_spec.html#newcode681\ndoc/go_spec.html:681: The method set of any other type <code>T</code>\nI think we should say something here about embedded types. As it stands it's still confusing and one has to read both, this section and the section on embedding in structs.\n\nI am fine w/ doing this in a separate \"cleanup\" CL that doesn't make changes but consolidates the method set rules.",
			"disapproval": false,
			"date": "2012-02-29 17:49:32.644507",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nagree with gri, but in a second CL is fine and maybe better.\n\nhttp://codereview.appspot.com/5702062/diff/4/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5702062/diff/4/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of February 23, 2012\"\nthis again",
			"disapproval": false,
			"date": "2012-02-29 20:44:18.218460",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b1f0c3b7a935 ***\n\nspec: apply method sets, embedding to all types, not just named types\n\nWhen we first wrote the method set definition, we had long\ndiscussions about whether method sets applied to all types\nor just named types, and we (or at least I) concluded that it\ndidn't matter: the two were equivalent points of view, because\nthe only way to introduce a new method was to write a method\nfunction, which requires a named receiver type.\n\nHowever, the addition of embedded types changed this.\nEmbedding can introduce a method without writing an explicit\nmethod function, as in:\n\n        var x struct {\n                sync.Mutex\n        }\n\n        var px *struct {\n                sync.Mutex\n        }\n\n        var _, _ sync.Locker = &x, px\n\nThe edits in this CL make clear that both &x and px satisfy\nsync.Locker.  Today, gccgo already works this way; 6g does not.\n\nR=golang-dev, gri, iant, r\nCC=golang-dev\nhttp://codereview.appspot.com/5702062",
			"disapproval": false,
			"date": "2012-02-29 20:54:12.957324",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5702062: spec: apply method sets, embedding to all types, not ju...",
	"created": "2012-02-29 16:15:13.176069",
	"patchsets": [
		1,
		2001,
		4,
		7002
	],
	"modified": "2012-02-29 20:54:14.118326",
	"closed": true,
	"issue": 5702062
}