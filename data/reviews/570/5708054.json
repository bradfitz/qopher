{
	"description": "cmd/go: fixes\n* Install tools into tool dir always\n  (Fixes issue 3049.  Fixes issue 2868.  Fixes issue 2925.)\n* Make packages depend on compiler, linker (Fixes issue 3036.)\n* Do not recompile packages across roots (Fixes issue 3149.)\n* Allow use of binary-only packages (Fixes issue 2775.)\n* Avoid duplicate cgo dependencies (Fixes issue 3001.)\n* Show less in go get -x.  (Fixes issue 2926.)\n* Do not force repo root for existing checkout (Fixes issue 2969.)\n* Show full syntax error list always (Fixes issue 2811.)\n* Clean arguments before processing (Fixes issue 3034.)\n* Add flags for compiler, linker arguments (Fixes issue 2996.)\n* Pass flags in make.bash (Fixes issue 3091.)\n* Unify build flags, defined in one place.\n* Clean up error messages (Fixes issue 3075.  Fixes issue 2923.)\n* Support local import paths (Fixes issue 3118.)\n* Allow top-level package outside $GOPATH (Fixes issue 3009.)\n\nIn addition to these fixes, all commands now take a list of\ngo files as a way to specify a single package, just as go build and\ngo run always have.  This means you can:\n\n        go list -json x.go\n        go fix x.go\n        go vet x.go\n        go test x_test.go\n\nPreliminary tests in test.bash.\nMainly testing things that the ordinary build does not.\nI don't mind if the script doesn't run on Windows.\n\nI expect that gccgo support is now broken, and I hope that\npeople will feel free to file issues and/or send CLs to fix it.  :-)",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"r@golang.org",
		"rogpeppe@gmail.com"
	],
	"reviewers": [
		"mattn.jp@gmail.com"
	],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Holy moley that's a lot of bug fixes.\n",
			"disapproval": false,
			"date": "2012-03-01 04:28:37.930717",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-01 04:26:17.723374",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "dependency issue?\n\n// run clean.bash, all.bash\n(snip)\ncmd/go\n/home/mikioh/go/src/cmd/go/build.go:97: undefined: build.Default\n/home/mikioh/go/src/cmd/go/pkg.go:63: undefined: build.Package\n/home/mikioh/go/src/cmd/go/pkg.go:74: undefined: build.Package\n/home/mikioh/go/src/cmd/go/pkg.go:259: undefined: build.Package\n",
			"disapproval": false,
			"date": "2012-03-01 04:33:33.427098",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 1, 2012 at 04:54,  <rogpeppe@gmail.com> wrote:\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/doc.go#newcode488\n> src/cmd/go/doc.go:488: patterns. \u00a0For example, encoding/... expands to\n> all package\n> s/package/packages/\n\ndone\n",
			"disapproval": false,
			"date": "2012-03-01 17:00:01.785292",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "happy to see these changes (particularly the one that will allow me to execute \"go run $%\" under acme...)\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/doc.go\nFile src/cmd/go/doc.go (right):\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/doc.go#newcode488\nsrc/cmd/go/doc.go:488: patterns.  For example, encoding/... expands to all package\ns/package/packages/",
			"disapproval": false,
			"date": "2012-03-01 09:54:58.651452",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, you'll need 5713043 too.\n",
			"disapproval": false,
			"date": "2012-03-01 04:35:16.401110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nit does look good\nrun go vet before submitting - lots of probably untested prints\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go\nFile src/cmd/go/pkg.go (right):\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode97\nsrc/cmd/go/pkg.go:97: p.XTestImports = pp.XTestImports\nshould it be *p = *pp\nand then fix up the differences? less likely to rot.\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode164\nsrc/cmd/go/pkg.go:164: // loadImport scans directory named by arg, which must be an import path,\ns/directory/the &/\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode315\nsrc/cmd/go/pkg.go:315: p.gofiles = append(p.gofiles, filepath.Join(p.Dir, f))\nhelper function looks like the answer here\n\np.gofiles = apppendDir(p.gofiles, p.CgoFiles)\netc.\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode341\nsrc/cmd/go/pkg.go:341: println(\"LOCAL?\", p.Dir, p1, p1.local, p1.Dir, p1.ImportPath, path)\n???\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode414\nsrc/cmd/go/pkg.go:414: func isStale(p *Package, topRoot map[string]bool) bool {\n// isStale ....\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode415\nsrc/cmd/go/pkg.go:415: if p.Standard && p.ImportPath == \"unsafe\" {\nbuiltin too, i think\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/vcs.go\nFile src/cmd/go/vcs.go (right):\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/vcs.go#newcode282\nsrc/cmd/go/vcs.go:282: if len(dir) <= len(srcRoot) || dir[len(srcRoot)] != filepath.Separator {\ndoesn't this reject \"a\" for \"a/\"? must path be a a strict prefix?\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/vet.go\nFile src/cmd/go/vet.go (right):\n\nhttp://codereview.appspot.com/5708054/diff/6001/src/cmd/go/vet.go#newcode9\nsrc/cmd/go/vet.go:9: UsageLine: \"vet [packages]\",\npackage...",
			"disapproval": false,
			"date": "2012-03-01 04:55:37.368013",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 23:55,  <r@golang.org> wrote:\n> LGTM\n> it does look good\n> run go vet before submitting - lots of probably untested prints\n\ndone - found some in go/build\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode97\n> src/cmd/go/pkg.go:97: p.XTestImports = pp.XTestImports\n> should it be *p = *pp\n> and then fix up the differences? less likely to rot.\n\nwould love to, but they are different types.\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode164\n> src/cmd/go/pkg.go:164: // loadImport scans directory named by arg, which\n> must be an import path,\n> s/directory/the &/\n\ndone\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode315\n> src/cmd/go/pkg.go:315: p.gofiles = append(p.gofiles,\n> filepath.Join(p.Dir, f))\n> helper function looks like the answer here\n>\n> p.gofiles = apppendDir(p.gofiles, p.CgoFiles)\n> etc.\n\ndone, using pre-existing stringList.\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode341\n> src/cmd/go/pkg.go:341: println(\"LOCAL?\", p.Dir, p1, p1.local, p1.Dir,\n> p1.ImportPath, path)\n> ???\n\ncan't happen anymore. removed.\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode414\n> src/cmd/go/pkg.go:414: func isStale(p *Package, topRoot map[string]bool)\n> bool {\n> // isStale ....\n\ndone.\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/pkg.go#newcode415\n> src/cmd/go/pkg.go:415: if p.Standard && p.ImportPath == \"unsafe\" {\n> builtin too, i think\n\nnot sure what you meant.  changed to\n// fake, builtin package\n\nit comes up because there is a fake package in src/pkg/unsafe.\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/vcs.go#newcode282\n> src/cmd/go/vcs.go:282: if len(dir) <= len(srcRoot) || dir[len(srcRoot)]\n> != filepath.Separator {\n> doesn't this reject \"a\" for \"a/\"? must path be a a strict prefix?\n\nthe cleaning should remove trailing slashes, but yes\nthis is requiring a strict prefix.\nadded a comment.\n\n> http://codereview.appspot.com/5708054/diff/6001/src/cmd/go/vet.go#newcode9\n> src/cmd/go/vet.go:9: UsageLine: \"vet [packages]\",\n> package...\n\ni used packages because of 'go help packages', also because sometimes\none argument can mean multiple packages and ..., while standard in our\nworld, is not really standard on modern unix and also to avoid confusion\nbetween ... meaning repetition in a usage message and ... meaning the\nwildcard that can appear there.\n",
			"disapproval": false,
			"date": "2012-03-01 17:09:09.123314",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a461bcce05f6 ***\n\ncmd/go: fixes\n* Install tools into tool dir always\n  (Fixes issue 3049.  Fixes issue 2868.  Fixes issue 2925.)\n* Make packages depend on compiler, linker (Fixes issue 3036.)\n* Do not recompile packages across roots (Fixes issue 3149.)\n* Allow use of binary-only packages (Fixes issue 2775.)\n* Avoid duplicate cgo dependencies (Fixes issue 3001.)\n* Show less in go get -x.  (Fixes issue 2926.)\n* Do not force repo root for existing checkout (Fixes issue 2969.)\n* Show full syntax error list always (Fixes issue 2811.)\n* Clean arguments before processing (Fixes issue 3034.)\n* Add flags for compiler, linker arguments (Fixes issue 2996.)\n* Pass flags in make.bash (Fixes issue 3091.)\n* Unify build flags, defined in one place.\n* Clean up error messages (Fixes issue 3075.  Fixes issue 2923.)\n* Support local import paths (Fixes issue 3118.)\n* Allow top-level package outside $GOPATH (Fixes issue 3009.)\n\nIn addition to these fixes, all commands now take a list of\ngo files as a way to specify a single package, just as go build and\ngo run always have.  This means you can:\n\n        go list -json x.go\n        go fix x.go\n        go vet x.go\n        go test x_test.go\n\nPreliminary tests in test.bash.\nMainly testing things that the ordinary build does not.\nI don't mind if the script doesn't run on Windows.\n\nI expect that gccgo support is now broken, and I hope that\npeople will feel free to file issues and/or send CLs to fix it.  :-)\n\nR=golang-dev, dsymonds, r, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/5708054",
			"disapproval": false,
			"date": "2012-03-01 17:12:25.930021",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This break on windows.\n\n-------------\nWORK=C:\\DOCUME~1\\mattn\\LOCALS~1\\Temp\\go-build794590762\nmkdir -p $WORK\\local\\C:\\temp\\github\\go-mattn\\src\\github.com\\mattn\\go-sqlite3\\_obj\\\nmkdir C:\\DOCUME~1\\mattn\\LOCALS~1\\Temp\\go-build794590762\\local\\C:: The filename, directory name, or volume label syntax is incorrect.\n-------------\n\n\n\nOn 2012/03/01 17:12:25, rsc wrote:\n> *** Submitted as http://code.google.com/p/go/source/detail?r=a461bcce05f6 ***\n> \n> cmd/go: fixes\n> * Install tools into tool dir always\n>   (Fixes issue 3049.  Fixes issue 2868.  Fixes issue 2925.)\n> * Make packages depend on compiler, linker (Fixes issue 3036.)\n> * Do not recompile packages across roots (Fixes issue 3149.)\n> * Allow use of binary-only packages (Fixes issue 2775.)\n> * Avoid duplicate cgo dependencies (Fixes issue 3001.)\n> * Show less in go get -x.  (Fixes issue 2926.)\n> * Do not force repo root for existing checkout (Fixes issue 2969.)\n> * Show full syntax error list always (Fixes issue 2811.)\n> * Clean arguments before processing (Fixes issue 3034.)\n> * Add flags for compiler, linker arguments (Fixes issue 2996.)\n> * Pass flags in make.bash (Fixes issue 3091.)\n> * Unify build flags, defined in one place.\n> * Clean up error messages (Fixes issue 3075.  Fixes issue 2923.)\n> * Support local import paths (Fixes issue 3118.)\n> * Allow top-level package outside $GOPATH (Fixes issue 3009.)\n> \n> In addition to these fixes, all commands now take a list of\n> go files as a way to specify a single package, just as go build and\n> go run always have.  This means you can:\n> \n>         go list -json x.go\n>         go fix x.go\n>         go vet x.go\n>         go test x_test.go\n> \n> Preliminary tests in test.bash.\n> Mainly testing things that the ordinary build does not.\n> I don't mind if the script doesn't run on Windows.\n> \n> I expect that gccgo support is now broken, and I hope that\n> people will feel free to file issues and/or send CLs to fix it.  :-)\n> \n> R=golang-dev, dsymonds, r, rogpeppe\n> CC=golang-dev\n> http://codereview.appspot.com/5708054",
			"disapproval": false,
			"date": "2012-03-02 10:50:08.078127",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 2, 2012 at 05:50,  <mattn.jp@gmail.com> wrote:\n> This break on windows.\n>\n> -------------\n> WORK=C:\\DOCUME~1\\mattn\\LOCALS~1\\Temp\\go-build794590762\n> mkdir -p\n> $WORK\\local\\C:\\temp\\github\\go-mattn\\src\\github.com\\mattn\\go-sqlite3\\_obj\\\n> mkdir C:\\DOCUME~1\\mattn\\LOCALS~1\\Temp\\go-build794590762\\local\\C:: The\n> filename, directory name, or volume label syntax is incorrect.\n> -------------\n\nSorry about that.  That's issue 3169 and is today's project.\n",
			"disapproval": false,
			"date": "2012-03-02 16:38:18.608261",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Don't mind. And thank you for working about this. :)\n\nOn Saturday, March 3, 2012 1:38:18 AM UTC+9, rsc wrote:\nOn Fri, Mar 2, 2012 at 05:50, <mattn.jp@gmail.com> wrote:\n> This break on windows.\n>\n> -------------\n> WORK=C:\\DOCUME~1\\mattn\\LOCALS~1\\Temp\\go-build794590762\n> mkdir -p\n> $WORK\\local\\C:\\temp\\github\\go-mattn\\src\\github.com\\mattn\\go-sqlite3\\_obj\\\n> mkdir C:\\DOCUME~1\\mattn\\LOCALS~1\\Temp\\go-build794590762\\local\\C:: The\n> filename, directory name, or volume label syntax is incorrect.\n> -------------\n\nSorry about that. That's issue 3169 and is today's project.",
			"disapproval": false,
			"date": "2012-03-04 13:52:24.731073",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5708054: cmd/go: fixes",
	"created": "2012-02-28 22:40:07.934844",
	"patchsets": [
		1,
		1002,
		3001,
		3002,
		6001,
		8026
	],
	"modified": "2012-03-02 10:50:08.267448",
	"closed": true,
	"issue": 5708054
}