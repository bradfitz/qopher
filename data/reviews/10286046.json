{
	"description": "runtime: Don't error on signals with no default action from non-Go threads.\n\nFixes issue 3250.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "joshrickmar@gmail.com",
			"recipients": [
				"joshrickmar@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-17 23:57:44.709340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minux, do you want to look into whether we can make the signal code work\r\nlike the cgo code?\r\n",
			"disapproval": false,
			"date": "2013-07-08 19:17:10.890580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jul 9, 2013 at 3:17 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Minux, do you want to look into whether we can make the signal code work\r\n> like the cgo code?\r\n>\r\nsure, please see https://codereview.appspot.com/10757044.\r\n\r\nit removes much more code than it adds (didn't count the test case):\r\n22 files changed, 66 insertions(+), 159 deletions(-)\r\n",
			"disapproval": false,
			"date": "2013-07-09 17:51:18.360970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very nice\r\n",
			"disapproval": false,
			"date": "2013-07-11 20:23:16.058420",
			"approval": false
		},
		{
			"sender": "joshrickmar@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the look.  As described in bug 3250, the issue here is that\r\nGTK is sending these signals and is causing the Go runtime to abort\r\nthe process.  I'm wondering what is your take on how to best fix this\r\nissue, whether that be patching Go to not error but keep letting the\r\nsignals propagate so they can still be intercepted, or if GTK bindings\r\nshould attempt to catch and throw away these signals (using platform\r\ndependent code).\r\n\r\nThe bug was originally reported on Linux, and it's a problem for me on\r\nOpenBSD as well.  Doing a proper fix (whatever that entails) in Go\r\nitself would be, I think, the best solution.  Otherwise it would\r\nrequire doing a similar hack in every pkg that runs into these kinds\r\nof issues.  Either way, I'd be willing to help out with whatever\r\ndesign best fixes this.\r\n\r\nOn Mon, Jul 1, 2013 at 8:51 PM,  <rsc@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/10286046/diff/1021/src/pkg/runtime/os_darwin.c\r\n> File src/pkg/runtime/os_darwin.c (right):\r\n>\r\n> https://codereview.appspot.com/10286046/diff/1021/src/pkg/runtime/os_darwin.c#newcode539\r\n> src/pkg/runtime/os_darwin.c:539: if (sig == SIGURG ||\r\n> This should be a switch.\r\n>\r\n> switch(sig) {\r\n> case SIGPROF: // Ignore SIGPROFs for non-Go thread.\r\n> case SIGCONT: // Ignore signals with no default action in Go.\r\n> case SIGCHLD:\r\n> case SIGIO:\r\n> ...\r\n> }\r\n>\r\n> However, I am really unsure that this is correct behavior. The Go\r\n> program can ask for some of these signals, and discarding them will mean\r\n> missed signals.\r\n>\r\n> https://codereview.appspot.com/10286046/\r\n",
			"disapproval": false,
			"date": "2013-07-03 13:47:06.262590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"joshrickmar@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10286046/diff/1021/src/pkg/runtime/os_darwin.c\nFile src/pkg/runtime/os_darwin.c (right):\n\nhttps://codereview.appspot.com/10286046/diff/1021/src/pkg/runtime/os_darwin.c#newcode539\nsrc/pkg/runtime/os_darwin.c:539: if (sig == SIGURG ||\nThis should be a switch.\n\nswitch(sig) {\ncase SIGPROF: // Ignore SIGPROFs for non-Go thread.\ncase SIGCONT: // Ignore signals with no default action in Go.\ncase SIGCHLD:\ncase SIGIO:\n...\n}\n\nHowever, I am really unsure that this is correct behavior. The Go program can ask for some of these signals, and discarding them will mean missed signals.",
			"disapproval": false,
			"date": "2013-07-02 00:51:20.678410",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"joshrickmar@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/02 00:51:20, rsc wrote:\n> However, I am really unsure that this is correct behavior. The Go program can\n> ask for some of these signals, and discarding them will mean missed signals.\nnow that we support go callbacks from foreign threads, could we arrange signals\nthat caught from foreign thread be sent back to Go signal handler?\n(that is, don't special case signals received on foreign threads)",
			"disapproval": false,
			"date": "2013-07-03 14:01:00.952540",
			"approval": false
		}
	],
	"owner_email": "joshrickmar@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jrick",
	"subject": "code review 10286046: runtime: Don't error on signals with no default action ...",
	"created": "2013-06-17 23:49:12.421440",
	"patchsets": [
		1,
		2001,
		1021
	],
	"modified": "2013-07-11 20:23:16.236700",
	"closed": false,
	"issue": 10286046
}