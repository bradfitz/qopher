{
	"description": "runtime: prepare for M's running w/o mcache\nCan not happen ATM. In preparation for the new scheduler.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-20 16:21:12.220350",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=592fa6bfc380 ***\n\nruntime: prepare for M's running w/o mcache\nCan not happen ATM. In preparation for the new scheduler.\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7388043",
			"disapproval": false,
			"date": "2013-02-20 17:18:04.157460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How will this be possible in the new scheduler? Doesn't every m allocate\r\nmcache very early? Is it that there will be fewer mcache's than m's?\r\n",
			"disapproval": false,
			"date": "2013-02-20 16:22:04.061350",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In the new scheduler mcache sits in a separate P struct. P structs along\r\nwith mcache's are allocated during bootstrap or in GOMAXPROCS(). M's\r\nacquire P (and mcache) before running Go code, and release P (and mcache)\r\nbefore parking or before entering syscall.\r\nSo, yes, there are fewer mcaches' than M's.\r\nSome other resources will be moved to P as well, e.g. cache of dead G's;\r\npotentially cache of stack segments can be moved as well, but it may be\r\ntricky; and this will be a foundation for user proc-local data (caches,\r\nstats, etc).\r\n\r\n\r\n\r\n\r\n\r\n\r\nOn Wed, Feb 20, 2013 at 8:22 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> How will this be possible in the new scheduler? Doesn't every m allocate\r\n> mcache very early? Is it that there will be fewer mcache's than m's?\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-20 16:49:25.958400",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-02-20 16:58:04.992650",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 7388043: runtime: prepare for M's running w/o mcache",
	"created": "2013-02-20 16:21:01.509300",
	"patchsets": [
		1,
		2001,
		3001,
		10001,
		13001
	],
	"modified": "2013-02-20 17:18:05.672060",
	"closed": true,
	"issue": 7388043
}