{
	"description": "time: new Time, Duration, ZoneInfo types",
	"cc": [
		"r@golang.org",
		"bradfitz@golang.org",
		"gri@golang.org",
		"dsymonds@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 19:00,  <dsymonds@golang.org> wrote:\n> src/pkg/time/time.go:42: // A nil Zone is interpreted to mean the\n> system's local time zone.\n> why local time and not UTC?\n\nBecause local time is the right default.\nI know I am going to get massacred for saying that,\nbut there's a reason date(1) doesn't print UTC unless\nyou ask it to, and a reason people don't set their\nclocks to UTC.\n\nThere are definitely situations where you want UTC.\nBut not by default.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 03:02:42.845610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode8\nsrc/pkg/time/time.go:8: // A Time represents an instant in time to nanosecond precision.\nOn 2011/11/18 06:27:14, r wrote:\n> s/to/with/\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode18\nsrc/pkg/time/time.go:18: // The zero value of type Time represents January 1, year 1, 00:00:00 UTC.\nOn 2011/11/18 06:27:14, r wrote:\n> January 1, Year 1, 00:00:00.000000000 UTC\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode31\nsrc/pkg/time/time.go:31: // hypothetical date January 1, year 1 00:00 UTC, ignoring leap seconds.\nOn 2011/11/18 06:27:14, r wrote:\n> 00:00:00 UTC is enough here.\n> why is it hypothetical? how about\n> \n> sec gives the number of seconds elapsed since the epoch of\n> January 1, Year 1, 00:00:00 UTC, ignoring leap seconds.\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode42\nsrc/pkg/time/time.go:42: // A nil Zone is interpreted to mean the system's local time zone.\nOn 2011/11/18 06:27:14, r wrote:\n> On 2011/11/18 00:00:33, dsymonds wrote:\n> > why local time and not UTC?\n> \n> agree. nil should mean UTC\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode56\nsrc/pkg/time/time.go:56: // Equal reports whether t and u represent the same time instant.\nOn 2011/11/18 00:00:33, dsymonds wrote:\n> Did you want to note that this is different to comparing t and u with ==?\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode97\nsrc/pkg/time/time.go:97: // String returns the English name of the month (\"January\", \"Feburary\", ...).\nOn 2011/11/17 22:50:27, bradfitz wrote:\n> February\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode98\nsrc/pkg/time/time.go:98: func (m Month) String() string { return months[m] }\nOn 2011/11/18 06:27:14, r wrote:\n> since you crash if m > 12, maybe you should crash if m == 0. you could do that\n> by zero-indexing months and subtracting 1 here.\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode200\nsrc/pkg/time/time.go:200: // zones.  On the other hand, I have no problem with printing a few times\nOn 2011/11/18 06:27:14, r wrote:\n> \"I\" do not belong here.\n> By comparison, it's reasonable to mishandle some times in the year\n> -292277022399.\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode201\nsrc/pkg/time/time.go:201: // in the year -292277022399 incorrectly.\nOn 2011/11/17 23:43:13, gri wrote:\n> On the other hand, printing a few times in the year ... incorrectly is unlikely\n> to cause any problems.\n> ?\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode217\nsrc/pkg/time/time.go:217: // No longer changes.\nOn 2011/11/17 23:43:13, gri wrote:\n> 2nd line comment by itself is not helpful\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode278\nsrc/pkg/time/time.go:278: // Weekday returns the day of the week specified by t.\nOn 2011/11/18 06:27:14, r wrote:\n> On 2011/11/18 00:00:33, dsymonds wrote:\n> > This code is incorrect for dates before 1752, and again before 1582. Perhaps\n> > call out that this package only operates on post-1752 dates?\n> \n> actually it depends where you live.... and the skip only happened once, wherever\n> you are (mostly)\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode278\nsrc/pkg/time/time.go:278: // Weekday returns the day of the week specified by t.\nOn 2011/11/18 00:00:33, dsymonds wrote:\n> This code is incorrect for dates before 1752, and again before 1582. Perhaps\n> call out that this package only operates on post-1752 dates?\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode370\nsrc/pkg/time/time.go:370: // in the range [0, 999999999].  It is equivalent to int(t.Nanoseconds)\nOn 2011/11/17 22:50:27, bradfitz wrote:\n> t.Nanoseconds isn't exported.  not worth documenting publicly?\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode390\nsrc/pkg/time/time.go:390: // Duration returns a string representing the duration in the form \"72h3m0.005s\".\nOn 2011/11/17 22:50:27, bradfitz wrote:\n> 80\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode516\nsrc/pkg/time/time.go:516: // order to have sub-second precision.\nOn 2011/11/18 06:27:14, r wrote:\n> not happy with this. i'm going to do int64(d.Seconds()) and lose data.\n\nIn what case are you worried about losing data?\nd.Seconds has a range of +/- 2^33, so the float64 can definitely\nrepresent it accurately.\n\nThe computation float64(d) / float64(Second) \ndoes discard the sub-microsecond resolution during the\nfloat64(d), so it is possible that the rounding would go the\nwrong way in boundary cases.  I fixed the computation\nto be completely accurate.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode555\nsrc/pkg/time/time.go:555: secondsPerWeek   = 7 * secondsPerDay\nOn 2011/11/18 06:27:14, r wrote:\n> at least up to here, these should perhaps be exported. they show up a lot.\n\nI am a little worried about duplication with the duration constants.\nAlso secondsPerDay and secondsPerWeek are not accurate across\ndaylight savings switches so most code using them is wrong\nanyway.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode640\nsrc/pkg/time/time.go:640: var daysBefore = [...]int32{\nThanks.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode693\nsrc/pkg/time/time.go:693: // name of the zone (such as \"EDT\") and its offset in seconds east of UTC.\nOn 2011/11/18 06:27:14, r wrote:\n> it's been EST everywhere else. (but i prefer CET)\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode729\nsrc/pkg/time/time.go:729: func isleap(year int) bool {\nOn 2011/11/18 06:27:14, r wrote:\n> isLeap\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode739\nsrc/pkg/time/time.go:739: // either of the zones.\nOn 2011/11/18 06:10:14, iant wrote:\n> The last clause is a bit cryptic.  I think the most important point is that the\n> returned time will not match what was passed in, and perhaps the comment should\n> just say that.\n\nI tried to make it clearer.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode745\nsrc/pkg/time/time.go:745: panic(\"time.Date: invalid day\")\nIan's suggestion creates useful functionality (normalization),\nmatches the C library, and avoids all the panics, so I did that.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: // Maybe Location?\nOn 2011/11/18 06:10:14, iant wrote:\n> On 2011/11/17 23:43:13, gri wrote:\n> > I like Location.\n> \n> I'm not crazy about Location, because this is really a timezone, it's not a\n> specific location.  I think ZoneInfo is OK since the name is widely used.  I can\n> also think of TimeZoneOffsets or TZOffsets.\n\nI tried Location, and I think it works well.\n\nIt is a specific location to a certain precision, namely the geographical\narea observing a set of time zones.  It shows up in other code (if at all)\nas time.Location, which seems qualified enough.  Also the names used\nin the IANA database *are* locations.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode23\nsrc/pkg/time/zoneinfo.go:23: cacheStart int64\nOn 2011/11/17 23:43:13, gri wrote:\n> the meaning of these fields is not obvious\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode31\nsrc/pkg/time/zoneinfo.go:31: utcoff int    // seconds east of UTC\nOn 2011/11/18 06:27:14, r wrote:\n> nice to get utc capitalized. as written it's a poorly styled name. also nice to\n> have the name remind us of the direction\n> \n> secEastOfUTC would be a fine name.\n\nEverywhere else the name is just offset.\nI changed this one to offset too.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode32\nsrc/pkg/time/zoneinfo.go:32: isdst  bool   // is this zone daylight savings time?\nOn 2011/11/18 06:27:14, r wrote:\n> isDST bool // is this zone Daylight Savings Time?\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode35\nsrc/pkg/time/zoneinfo.go:35: // A zonetx represents a single time zone transition.\nOn 2011/11/18 06:27:14, r wrote:\n> zoneTrans or zoneTransition\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode37\nsrc/pkg/time/zoneinfo.go:37: time         int64 // transition time, in seconds since 1970 GMT\nOn 2011/11/18 06:27:14, r wrote:\n> maybe \"when\"? \"time\" is overused in this package, to put it mildly.\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode38\nsrc/pkg/time/zoneinfo.go:38: zone         uint8 // the index of the zone that goes into effect at that time\nOn 2011/11/18 06:27:14, r wrote:\n> i'd call this index.\n> \n> i'm fiddling with names, i know, but they have a big effect on the readability\n> of some gnarly code, dood.\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode66\nsrc/pkg/time/zoneinfo.go:66: // given name and offset as the current zone.\nOn 2011/11/18 06:27:14, r wrote:\n> explain relevance of DST\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode69\nsrc/pkg/time/zoneinfo.go:69: name = \"\"\nOn 2011/11/18 06:10:14, iant wrote:\n> This does nothing.\n\nIndeed!  It used to rewrite to \"???\" but I changed my mind.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode89\nsrc/pkg/time/zoneinfo.go:89: // The returned information gives the name of the zone (such as \"EST\"),\nOn 2011/11/18 06:27:14, r wrote:\n> how about using CET or something less parochial as your canonical example?\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode105\nsrc/pkg/time/zoneinfo.go:105: start = -1 << 60\nOn 2011/11/18 06:10:14, iant wrote:\n> Above you used << 63, here you used << 60.  Makes me wonder why they are\n> different.\n\nDone.  Missed during some cleanup.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode120\nsrc/pkg/time/zoneinfo.go:120: tx := z.tx\nOn 2011/11/18 06:27:14, r wrote:\n> On 2011/11/17 23:43:13, gri wrote:\n> > no sort.Search for speed reasons?\n> \n> avoiding dependencies\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode144\nsrc/pkg/time/zoneinfo.go:144: if z == nil {\nOn 2011/11/18 06:27:14, r wrote:\n> i've seen this burst too many times. refactor.\n> \n> z = getZoneInfo(z) or z = z.getZoneInfo()\n> \n> func (z *ZoneInfo) getZoneInfo() *ZoneInfo {\n> if z == nil {\n>   z = &localZone\n> }\n> if z == &localZone {\n>   localOnce.Do(initLocalZone)\n> }\n> return z\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode160\nsrc/pkg/time/zoneinfo.go:160: // LookupName returns information about the time zone with\nOn 2011/11/18 06:27:14, r wrote:\n> LookupOffset\n\nDone.",
			"disapproval": false,
			"date": "2011-11-18 16:26:22.610576",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A few more comments I missed.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/runtime/time.goc\nFile src/pkg/runtime/time.goc (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/runtime/time.goc#newcode22\nsrc/pkg/runtime/time.goc:22: // time.now is implemented in assembly.\nOn 2011/11/18 06:27:14, r wrote:\n> is time.now even referenced here?\n\nNo, but people might come here to look for it.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/format.go#newcode288\nsrc/pkg/time/format.go:288: //\tMon Jan _2 15:04:05 -0700 MST 2006\nOn 2011/11/18 06:27:14, r wrote:\n> maybe quote the string?\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/sys.go\nFile src/pkg/time/sys.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/sys.go#newcode12\nsrc/pkg/time/sys.go:12: // readFile reads and returns the content of the named file.\nOn 2011/11/18 06:27:14, r wrote:\n> // It's a copy of io.ReadFile, here to avoid the dependency.\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/tick.go\nFile src/pkg/time/tick.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/tick.go#newcode17\nsrc/pkg/time/tick.go:17: // send the time, in nanoseconds, with a period of d.  It adjusts the\nOn 2011/11/18 06:27:14, r wrote:\n> \"a period of d\" reads oddly.\n> with a period specified by the duration argument.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-18 16:35:33.637466",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go#newcode119\nsrc/pkg/time/zoneinfo.go:119: end = 1 << 60\ns/60/63/ ?",
			"disapproval": false,
			"date": "2011-11-18 23:17:04.916642",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, bradfitz@golang.org, gri@golang.org, dsymonds@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-18 16:25:09.810709",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/format.go#newcode528\nsrc/pkg/time/format.go:528: // corresponding to Jan 1, year 0, 15:04:00 +0000 UTC.\n+0000 UTC is redundant\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/format.go#newcode551\nsrc/pkg/time/format.go:551: // Each iteration proceseces one std value.\nprocesses\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/tick.go\nFile src/pkg/time/tick.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/tick.go#newcode19\nsrc/pkg/time/tick.go:19: // The value of d must be greater than zero; if not, NewTicker will panic.\ns/value of d/duration d/\n(first mention of d; give context)\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/tick.go#newcode26\nsrc/pkg/time/tick.go:26: // on the floor until the client catches up.\nthis comment should  be in the function comment\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode518\nsrc/pkg/time/time.go:518: // order to have sub-second precision.\ndelete at least the phrase \"REVIEW NOTE\" and remove yourself from the comment. there's information here worth keeping, so don't delete the whole thing\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode523\nsrc/pkg/time/time.go:523: // that int64(d.Seconds()) == d.Nanoseconds()p/1e9\ns/p//\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode524\nsrc/pkg/time/time.go:524: // even in cases where float64(d) / 1e9 would have\ns; / ;/;\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode533\nsrc/pkg/time/time.go:533: // units do not have fixed lengths.\ndelete\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode663\nsrc/pkg/time/time.go:663: 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31,\nthere's an optical illusion here, making this line look like it curves upwards\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode687\nsrc/pkg/time/time.go:687: // In returns t with the location information set to loc.\n// It panics if loc is nil.\n(or you could say nil is UTC and avoid the panic)\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode765\nsrc/pkg/time/time.go:765: // For example, October 42 converts to November 11.\neasier to understand\nFor example, October 32 is November 1.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode775\nsrc/pkg/time/time.go:775: panic(\"time: missing Location in call to Date\")\nutc?\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: // Maybe Location?\ndelete this REVIEW NOTE\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go#newcode28\nsrc/pkg/time/zoneinfo.go:28: cacheStart int64\n// seconds since...?",
			"disapproval": false,
			"date": "2011-11-18 17:37:36.998312",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-17 22:34:15.882294",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5392041/diff/1112/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/format.go#newcode528\nsrc/pkg/time/format.go:528: // corresponding to Jan 1, year 0, 15:04:00 +0000 UTC.\nOn 2011/11/18 17:37:37, r wrote:\n> +0000 UTC is redundant\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/format.go#newcode551\nsrc/pkg/time/format.go:551: // Each iteration proceseces one std value.\nOn 2011/11/18 17:37:37, r wrote:\n> processes\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/tick.go\nFile src/pkg/time/tick.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/tick.go#newcode19\nsrc/pkg/time/tick.go:19: // The value of d must be greater than zero; if not, NewTicker will panic.\nOn 2011/11/18 17:37:37, r wrote:\n> s/value of d/duration d/\n> (first mention of d; give context)\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/tick.go#newcode26\nsrc/pkg/time/tick.go:26: // on the floor until the client catches up.\nOn 2011/11/18 17:37:37, r wrote:\n> this comment should  be in the function comment\n\nDone:\n\nNewTicker returns a new Ticker containing a channel that will send the\ntime, in nanoseconds, with a period specified by the duration argument.\nIt adjusts the intervals or drops ticks to make up for slow receivers.\nThe duration d must be greater than zero; if not, NewTicker will panic.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode518\nsrc/pkg/time/time.go:518: // order to have sub-second precision.\nOn 2011/11/18 17:37:37, r wrote:\n> delete at least the phrase \"REVIEW NOTE\" and remove yourself from the comment.\n> there's information here worth keeping, so don't delete the whole thing\n\nDone:\n\n// These methods return float64 because the dominant\n// use case is for printing a floating point number like 1.5s, and\n// a truncation to integer would make them not useful in those cases.\n// Splitting the integer and fraction ourselves guarantees that\n// converting the returned float64 to an integer rounds the same\n// way that a pure integer conversion would have, even in cases\n// where, say, float64(d.Nanoseconds())/1e9 would have rounded\n// differently.\n\nand updated Minutes and Hours to do that too.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode523\nsrc/pkg/time/time.go:523: // that int64(d.Seconds()) == d.Nanoseconds()p/1e9\nOn 2011/11/18 17:37:37, r wrote:\n> s/p//\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode524\nsrc/pkg/time/time.go:524: // even in cases where float64(d) / 1e9 would have\nOn 2011/11/18 17:37:37, r wrote:\n> s; / ;/;\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode533\nsrc/pkg/time/time.go:533: // units do not have fixed lengths.\nOn 2011/11/18 17:37:37, r wrote:\n> delete\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode687\nsrc/pkg/time/time.go:687: // In returns t with the location information set to loc.\nOn 2011/11/18 17:37:37, r wrote:\n> // It panics if loc is nil.\n> (or you could say nil is UTC and avoid the panic)\n\nI added the comment.  I have been trying to force callers to be \nexplicit about saying time.Local or time.UTC instead of 'nil',\nsince it is a point on which there was confusion.\n\nSeparately, I am also trying to preserve the property mentioned\nin the Time definition that only the zero Time has loc == nil.\nIf we ever do need to change the internal representation, that will\nbe a convenient way to detect the zero time.  This does not\nimply that the API must reject nil, of course (it could rewrite\nto UTC on the way in), but it still seems best to be explicit.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode765\nsrc/pkg/time/time.go:765: // For example, October 42 converts to November 11.\nOn 2011/11/18 17:37:37, r wrote:\n> easier to understand\n> For example, October 32 is November 1.\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/time.go#newcode775\nsrc/pkg/time/time.go:775: panic(\"time: missing Location in call to Date\")\nOn 2011/11/18 17:37:37, r wrote:\n> utc?\n\nAdded panic to doc comment.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: // Maybe Location?\nOn 2011/11/18 17:37:37, r wrote:\n> delete this REVIEW NOTE\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: // Maybe Location?\nOn 2011/11/18 17:37:37, r wrote:\n> delete this REVIEW NOTE\n\nDone.\n\nhttp://codereview.appspot.com/5392041/diff/1112/src/pkg/time/zoneinfo.go#newcode28\nsrc/pkg/time/zoneinfo.go:28: cacheStart int64\nOn 2011/11/18 17:37:37, r wrote:\n> // seconds since...?\n\nDone.",
			"disapproval": false,
			"date": "2011-11-18 18:21:36.765621",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode42\nsrc/pkg/time/time.go:42: // A nil Zone is interpreted to mean the system's local time zone.\nwhy local time and not UTC?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode56\nsrc/pkg/time/time.go:56: // Equal reports whether t and u represent the same time instant.\nDid you want to note that this is different to comparing t and u with ==?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode278\nsrc/pkg/time/time.go:278: // Weekday returns the day of the week specified by t.\nThis code is incorrect for dates before 1752, and again before 1582. Perhaps call out that this package only operates on post-1752 dates?",
			"disapproval": false,
			"date": "2011-11-18 00:00:33.180720",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode523\nsrc/pkg/time/time.go:523: // units do not have fixed lengths.\nOn 2011/11/17 23:43:13, gri wrote:\n> I would remove them. Minutes and hours are trivially computed if needed.\n\nI would keep them.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode739\nsrc/pkg/time/time.go:739: // either of the zones.\nThe last clause is a bit cryptic.  I think the most important point is that the returned time will not match what was passed in, and perhaps the comment should just say that.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode745\nsrc/pkg/time/time.go:745: panic(\"time.Date: invalid day\")\n(Some Chinese bloggers use dates like May 35 to avoid censorship.)  The Unix mktime function normalizes times.  Normalizing times is useful for operations like \"same time next week\".  It is not correct to simply add 7 * secondsPerDay because that would be wrong across a zone transition.  So I think either this function should normalize or there should be a different function which normalizes.  Normalizing should be in the time package because it is tedious to get right.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: // Maybe Location?\nOn 2011/11/17 23:43:13, gri wrote:\n> I like Location.\n\nI'm not crazy about Location, because this is really a timezone, it's not a specific location.  I think ZoneInfo is OK since the name is widely used.  I can also think of TimeZoneOffsets or TZOffsets.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode69\nsrc/pkg/time/zoneinfo.go:69: name = \"\"\nThis does nothing.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode105\nsrc/pkg/time/zoneinfo.go:105: start = -1 << 60\nAbove you used << 63, here you used << 60.  Makes me wonder why they are different.",
			"disapproval": false,
			"date": "2011-11-18 06:10:13.994656",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode97\nsrc/pkg/time/time.go:97: // String returns the English name of the month (\"January\", \"Feburary\", ...).\nFebruary\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode370\nsrc/pkg/time/time.go:370: // in the range [0, 999999999].  It is equivalent to int(t.Nanoseconds)\nt.Nanoseconds isn't exported.  not worth documenting publicly?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode390\nsrc/pkg/time/time.go:390: // Duration returns a string representing the duration in the form \"72h3m0.005s\".\n80\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode640\nsrc/pkg/time/time.go:640: var daysBefore = [...]int32{\npretty\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode745\nsrc/pkg/time/time.go:745: panic(\"time.Date: invalid day\")\nsurprising use of panic.\n\ncould we do something like template.Must instead, wrapping an error-returning version?",
			"disapproval": false,
			"date": "2011-11-17 22:50:27.761480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 22:09, David Symonds <dsymonds@golang.org> wrote:\n> But this is the internals. People are going to either call time.UTC()\n> or time.Now(), so there's no \"default\" per se.\n\nIt's true that we have control over most time.Time values.\nHowever, the choice of interpretation for the nil does\naffect how the zero Time prints.  Maybe you are right\nthat it should print as UTC.  That would be nice in some\nways, because it would make the zero even easier\nto spot.\n\nBut it sounds like you were expecting a bigger effect\nto changing the definition.  Was there something else?\n\nNote that time.UTC is not a function: people can call\ntime.Now() for local time or time.Now().UTC() for UTC time.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 03:14:01.452666",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 18, 2011 at 2:14 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Nov 17, 2011 at 22:09, David Symonds <dsymonds@golang.org> wrote:\n>> But this is the internals. People are going to either call time.UTC()\n>> or time.Now(), so there's no \"default\" per se.\n>\n> It's true that we have control over most time.Time values.\n> However, the choice of interpretation for the nil does\n> affect how the zero Time prints. \u00a0Maybe you are right\n> that it should print as UTC. \u00a0That would be nice in some\n> ways, because it would make the zero even easier\n> to spot.\n>\n> But it sounds like you were expecting a bigger effect\n> to changing the definition. \u00a0Was there something else?\n\nNo, it just struck me as odd that the other two fields were\nUTC-relative, but then the zero value for the zone field was local\ntime.\n\nNow that I write that, though, it occurs to me that using the local\ntime semantics for the zero value is going to make serialisation a\nmess: a time.Time on my machine, serialised, sent to your machine, and\nunserialised there is now a different time.Time.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-11-18 03:21:54.148985",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 19:00,  <dsymonds@golang.org> wrote:\n> This code is incorrect for dates before 1752, and again before 1582.\n> Perhaps call out that this package only operates on post-1752 dates?\n\nThe code is correct.  It only operates on the Gregorian calendar.\nI will add a note that all the calendar arithmetic is Gregorian only.\n\nAlso, no matter what your definition of broken is, the code can't be\nbroken in both 1752 and 1582.  Everyone only transitioned to\nthe Gregorian calendar once.  They just did so at different times.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 00:50:46.576173",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I cut the dependencies from format.go:\n\nhttp://codereview.appspot.com/5392041/diff2/3033:5035/src/pkg/time/format.go",
			"disapproval": false,
			"date": "2011-11-21 18:12:35.240013",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode264\nsrc/pkg/time/format.go:264: neg := x < 0\nget rid of neg (can use x since it's never modified)\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode266\nsrc/pkg/time/format.go:266: if neg {\nif x < 0\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode274\nsrc/pkg/time/format.go:274: if neg {\nif x < 0\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode285\nsrc/pkg/time/format.go:285: neg := false\ni := 0 and get rid of neg\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode287\nsrc/pkg/time/format.go:287: neg = true\nI would get rid of neg and just set i to 1 here\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode293\nsrc/pkg/time/format.go:293: for i := 0; i < len(s); i++ {\nuse i from outside\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode304\nsrc/pkg/time/format.go:304: if neg {\nif s[0] == '-'",
			"disapproval": false,
			"date": "2011-11-21 18:29:08.738063",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5392041/diff/1056/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/format.go#newcode827\nsrc/pkg/time/format.go:827: }\nwhy not just\n\nfor nbytes < 10 {\n  ns *= 10\n  nbytes++\n}\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode201\nsrc/pkg/time/time.go:201: // in the year -292277022399 incorrectly.\nOn the other hand, printing a few times in the year ... incorrectly is unlikely to cause any problems.\n?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode217\nsrc/pkg/time/time.go:217: // No longer changes.\n2nd line comment by itself is not helpful\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode523\nsrc/pkg/time/time.go:523: // units do not have fixed lengths.\nI would remove them. Minutes and hours are trivially computed if needed.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode745\nsrc/pkg/time/time.go:745: panic(\"time.Date: invalid day\")\nfine use of panic in my mind\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: // Maybe Location?\nI like Location.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode23\nsrc/pkg/time/zoneinfo.go:23: cacheStart int64\nthe meaning of these fields is not obvious\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode120\nsrc/pkg/time/zoneinfo.go:120: tx := z.tx\nno sort.Search for speed reasons?",
			"disapproval": false,
			"date": "2011-11-17 23:43:13.846884",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 19:00,  <dsymonds@golang.org> wrote:\n> Did you want to note that this is different to comparing t and u with\n> ==?\n\nRight now you cannot compare t and u with ==.\n",
			"disapproval": false,
			"date": "2011-11-18 03:01:08.754004",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 18, 2011 at 2:02 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Nov 17, 2011 at 19:00, \u00a0<dsymonds@golang.org> wrote:\n>> src/pkg/time/time.go:42: // A nil Zone is interpreted to mean the\n>> system's local time zone.\n>> why local time and not UTC?\n>\n> Because local time is the right default.\n> I know I am going to get massacred for saying that,\n> but there's a reason date(1) doesn't print UTC unless\n> you ask it to, and a reason people don't set their\n> clocks to UTC.\n>\n> There are definitely situations where you want UTC.\n> But not by default.\n\nBut this is the internals. People are going to either call time.UTC()\nor time.Now(), so there's no \"default\" per se.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-11-18 03:09:28.628529",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5392041/diff/1056/src/pkg/runtime/time.goc\nFile src/pkg/runtime/time.goc (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/runtime/time.goc#newcode22\nsrc/pkg/runtime/time.goc:22: // time.now is implemented in assembly.\nis time.now even referenced here?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/format.go#newcode288\nsrc/pkg/time/format.go:288: //\tMon Jan _2 15:04:05 -0700 MST 2006\nmaybe quote the string?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/sys.go\nFile src/pkg/time/sys.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/sys.go#newcode12\nsrc/pkg/time/sys.go:12: // readFile reads and returns the content of the named file.\n// It's a copy of io.ReadFile, here to avoid the dependency.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/tick.go\nFile src/pkg/time/tick.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/tick.go#newcode17\nsrc/pkg/time/tick.go:17: // send the time, in nanoseconds, with a period of d.  It adjusts the\n\"a period of d\" reads oddly.\nwith a period specified by the duration argument.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode8\nsrc/pkg/time/time.go:8: // A Time represents an instant in time to nanosecond precision.\ns/to/with/\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode18\nsrc/pkg/time/time.go:18: // The zero value of type Time represents January 1, year 1, 00:00:00 UTC.\nJanuary 1, Year 1, 00:00:00.000000000 UTC\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode31\nsrc/pkg/time/time.go:31: // hypothetical date January 1, year 1 00:00 UTC, ignoring leap seconds.\n00:00:00 UTC is enough here.\nwhy is it hypothetical? how about\n\nsec gives the number of seconds elapsed since the epoch of\nJanuary 1, Year 1, 00:00:00 UTC, ignoring leap seconds.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode42\nsrc/pkg/time/time.go:42: // A nil Zone is interpreted to mean the system's local time zone.\nOn 2011/11/18 00:00:33, dsymonds wrote:\n> why local time and not UTC?\n\nagree. nil should mean UTC\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode98\nsrc/pkg/time/time.go:98: func (m Month) String() string { return months[m] }\nsince you crash if m > 12, maybe you should crash if m == 0. you could do that by zero-indexing months and subtracting 1 here.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode128\nsrc/pkg/time/time.go:128: // The zero value for a Time is defined to be January 1, year 1, 00:00:00\ni'd like to see the .000000000 here. also, i'd put the date on a line by itself and maybe call it the zero time, as distinct from the epoch.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode135\nsrc/pkg/time/time.go:135: // The zero value does not force a specific epoch for the time\nzero time value\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode200\nsrc/pkg/time/time.go:200: // zones.  On the other hand, I have no problem with printing a few times\n\"I\" do not belong here.\nBy comparison, it's reasonable to mishandle some times in the year -292277022399.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode278\nsrc/pkg/time/time.go:278: // Weekday returns the day of the week specified by t.\nOn 2011/11/18 00:00:33, dsymonds wrote:\n> This code is incorrect for dates before 1752, and again before 1582. Perhaps\n> call out that this package only operates on post-1752 dates?\n\nactually it depends where you live.... and the skip only happened once, wherever you are (mostly)\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode516\nsrc/pkg/time/time.go:516: // order to have sub-second precision.\nnot happy with this. i'm going to do int64(d.Seconds()) and lose data.\n\ni would like to get integral seconds somehow without losing precision. also it seems wrong that the duration types contradict the similarly named methods of time, which are integral. how about making these integer and correct, and finding a name for the others, like FloatSeconds or something? maybe there's a better name.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode555\nsrc/pkg/time/time.go:555: secondsPerWeek   = 7 * secondsPerDay\nat least up to here, these should perhaps be exported. they show up a lot.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode640\nsrc/pkg/time/time.go:640: var daysBefore = [...]int32{\nOn 2011/11/17 22:50:27, bradfitz wrote:\n> pretty\nyeah\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode693\nsrc/pkg/time/time.go:693: // name of the zone (such as \"EDT\") and its offset in seconds east of UTC.\nit's been EST everywhere else. (but i prefer CET)\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode729\nsrc/pkg/time/time.go:729: func isleap(year int) bool {\nisLeap\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/time.go#newcode745\nsrc/pkg/time/time.go:745: panic(\"time.Date: invalid day\")\nOn 2011/11/17 23:43:13, gri wrote:\n> fine use of panic in my mind\n\nagree, but it must be documented\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: // Maybe Location?\nOn 2011/11/17 23:43:13, gri wrote:\n> I like Location.\n\ni do too\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode31\nsrc/pkg/time/zoneinfo.go:31: utcoff int    // seconds east of UTC\nnice to get utc capitalized. as written it's a poorly styled name. also nice to have the name remind us of the direction\n\nsecEastOfUTC would be a fine name.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode32\nsrc/pkg/time/zoneinfo.go:32: isdst  bool   // is this zone daylight savings time?\nisDST bool // is this zone Daylight Savings Time?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode35\nsrc/pkg/time/zoneinfo.go:35: // A zonetx represents a single time zone transition.\nzoneTrans or zoneTransition\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode37\nsrc/pkg/time/zoneinfo.go:37: time         int64 // transition time, in seconds since 1970 GMT\nmaybe \"when\"? \"time\" is overused in this package, to put it mildly.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode38\nsrc/pkg/time/zoneinfo.go:38: zone         uint8 // the index of the zone that goes into effect at that time\ni'd call this index.\n\ni'm fiddling with names, i know, but they have a big effect on the readability of some gnarly code, dood.\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode66\nsrc/pkg/time/zoneinfo.go:66: // given name and offset as the current zone.\nexplain relevance of DST\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode89\nsrc/pkg/time/zoneinfo.go:89: // The returned information gives the name of the zone (such as \"EST\"),\nhow about using CET or something less parochial as your canonical example?\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode120\nsrc/pkg/time/zoneinfo.go:120: tx := z.tx\nOn 2011/11/17 23:43:13, gri wrote:\n> no sort.Search for speed reasons?\n\navoiding dependencies\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode144\nsrc/pkg/time/zoneinfo.go:144: if z == nil {\ni've seen this burst too many times. refactor.\n\nz = getZoneInfo(z) or z = z.getZoneInfo()\n\nfunc (z *ZoneInfo) getZoneInfo() *ZoneInfo {\nif z == nil {\n  z = &localZone\n}\nif z == &localZone {\n  localOnce.Do(initLocalZone)\n}\nreturn z\n}\n\nhttp://codereview.appspot.com/5392041/diff/1056/src/pkg/time/zoneinfo.go#newcode160\nsrc/pkg/time/zoneinfo.go:160: // LookupName returns information about the time zone with\nLookupOffset",
			"disapproval": false,
			"date": "2011-11-18 06:27:14.359045",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 18:43,  <gri@golang.org> wrote:\n> src/pkg/time/format.go:827: }\n> why not just\n>\n> for nbytes < 10 {\n> \u00a0ns *= 10\n> \u00a0nbytes++\n> }\n\nThis code is not new in this CL, so I am going to leave it alone.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 16:29:47.121456",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/5035/src/pkg/time/format.go#newcode258\nsrc/pkg/time/format.go:258: func itoa(x int) string {\nworth saying these reproduce functionality from strconv but avoid the dependency, that we want this to be nearly a leaf package",
			"disapproval": false,
			"date": "2011-11-21 18:15:27.803271",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode169\nsrc/pkg/time/zoneinfo.go:169: // The files total 200 kB.\nOn 2011/11/28 22:35:15, gri wrote:\n> kB seems right (as opposed to KB), but then again we write MB (and not mB)...\n\n\"k\" and \"M\" (different cases) are fine; they are the standard SI prefixes.\n  http://en.wikipedia.org/wiki/SI_prefix#List_of_SI_prefixes",
			"disapproval": false,
			"date": "2011-11-28 22:57:48.981873",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 13:29,  <gri@golang.org> wrote:\n> FYI\n\nApplied these fixes.  Thanks.\n",
			"disapproval": false,
			"date": "2011-11-28 18:44:42.788330",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/format.go#newcode258\nsrc/pkg/time/format.go:258: func itoa(x int) string {\nIs there a comment somewhere explaining that these are re-implemented here so that we are not depending on strconv (assuming that is the reason)? If not, I think there should be.\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode38\nsrc/pkg/time/zoneinfo.go:38: // A zoneTrans represents a single time zone transition.\nmaybe s/zoneTrans/transition/ ?\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode169\nsrc/pkg/time/zoneinfo.go:169: // The files total 200 kB.\nkB seems right (as opposed to KB), but then again we write MB (and not mB)...",
			"disapproval": false,
			"date": "2011-11-28 22:35:15.041376",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nJust some final nit-picky comments.\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode22\nsrc/pkg/time/time.go:22: // gives a simple way of detecting an uninitialized time.\nWe normally avoid \"uninitialized\" right? That has dire implications in other languages that don't apply to Go, but can still throw people. How about s/an uninitialized/a zero/?\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode25\nsrc/pkg/time/time.go:25: // presentation form of the time, such as in the Format, Hour, and Year methods.\nThe use of the word \"presentation\" in this context tripped up me and others in the initial API review; it's technically correct, but some of us jump to the wrong conclusions (e.g. it's the string representation). Can you avoid it here?\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode86\nsrc/pkg/time/time.go:86: var months = []string{\n[...]\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode117\nsrc/pkg/time/time.go:117: var days = []string{\n[...]\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode137\nsrc/pkg/time/time.go:137: // non-negative year even in time zones west of UTC, unlike 1-1-0\nthere is no year 0.\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode188\nsrc/pkg/time/time.go:188: // uses a year equal to 1 mod 400, and that is no more than 2\u2076\u00b3 seconds\nthose superscript characters display oddly in the web browser font I'm using right now. Replace that with 2^63?\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode389\nsrc/pkg/time/time.go:389: Hour                 = 60 * Minute\nWhy stop at hour? I'm sure there's a good reason; it should probably be documented here.\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode394\nsrc/pkg/time/time.go:394: // second format use a smaller unit\u2014milli-, micro-, or nanoseconds\u2014to ensure\ndashes are used here as both emdashes and hyphens. It's a little confusing to parse. How about making this a parenthetical instead?\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode495\nsrc/pkg/time/time.go:495: // fmtInt formats v into the tail of buf[:w].\nwhat's w here?\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode696\nsrc/pkg/time/time.go:696: panic(\"time: missing Location in call to Time.In\")\nt.In(nil) seems reasonable to have as an alias for t.UTC(). I could see a *Location being passed around, and it'd just be tedious to do a nil check switch between calling UTC and In.\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode723\nsrc/pkg/time/time.go:723: // UnixNano returns the Unix time, the number of nanoseconds since January 1, 1970 UTC.\nwrap\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode780\nsrc/pkg/time/time.go:780: // Date panics if loc is nil.\nthat's a shame. Why not just default to UTC in thiat case?\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go\nFile src/pkg/time/zoneinfo.go (right):\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode12\nsrc/pkg/time/zoneinfo.go:12: type Location struct {\nI agree with Ian that this is an odd name. time.Zone has a nice ring to it.\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode46\nsrc/pkg/time/zoneinfo.go:46: var UTC *Location = &utcLoc\nunnecessary \"*Location\"\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode48\nsrc/pkg/time/zoneinfo.go:48: var utcLoc = Location{name: \"UTC\"}\nwhy the two vars? Why not just this?\n  var UTC = &Location{name: \"UTC\"}\n\nI must be overlooking something.\n\nhttp://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode93\nsrc/pkg/time/zoneinfo.go:93: func (l *Location) Lookup(sec int64) (name string, offset int, isDST bool, start, end int64) {\nthis is a lot of return parameters. How about a little struct instead?",
			"disapproval": false,
			"date": "2011-11-29 00:01:39.295820",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the comments.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode25\n> src/pkg/time/time.go:25: // presentation form of the time, such as in\n> the Format, Hour, and Year methods.\n> The use of the word \"presentation\" in this context tripped up me and\n> others in the initial API review; it's technically correct, but some of\n> us jump to the wrong conclusions (e.g. it's the string representation).\n> Can you avoid it here?\n\nThe rest of the sentence should make very clear that\nmethods like Hour and Year count as presentation.\nI added that in response to the initial confusion.\nI think having a term for the general class of affected\nmethod is important, and presentation seems like a good one.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode137\n> src/pkg/time/time.go:137: // non-negative year even in time zones west\n> of UTC, unlike 1-1-0\n> there is no year 0.\n\nThere was no year 1 in this calendar either.\nIt didn't start for another millennium (actually more).\nAre you suggesting that the routines should not\nreturn a year zero?  There's no year -1 either,\nand yet they handle that too.  It's an unambiguous\nextension of the existing calendar.  Note also that\nthis comment is not in the public documentaton.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode188\n> src/pkg/time/time.go:188: // uses a year equal to 1 mod 400, and that is\n> no more than 2\u2076\u00b3 seconds\n> those superscript characters display oddly in the web browser font I'm\n> using right now. Replace that with 2^63?\n\nThis too is in the internal documentation, so it is not\nsuch a big deal (maybe worth finding a new font, though).\nIf it were showing up in public documentation I would be\nmore concerned.  I try to avoid writing 2^63 because\nin Go 2^63 = 61, and I've corrected that mistake in a\nhandful of code reviews.  We've got Unicode available:\nwhy not use it?\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode389\n> src/pkg/time/time.go:389: Hour \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 60 * Minute\n> Why stop at hour? I'm sure there's a good reason; it should probably be\n> documented here.\n\nThe reason is that hours are always 60 minutes\n(ignoring leap seconds, as we do) but days are\nnot always 24 hours.  If we had Day, then people\nwould be surprised when t.Hour() != t.Add(1*time.Day).Hour().\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode394\n> src/pkg/time/time.go:394: // second format use a smaller unit\u2014milli-,\n> micro-, or nanoseconds\u2014to ensure\n> dashes are used here as both emdashes and hyphens. It's a little\n> confusing to parse. How about making this a parenthetical instead?\n\nSure.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode495\n> src/pkg/time/time.go:495: // fmtInt formats v into the tail of buf[:w].\n> what's w here?\n\nI think it is supposed to be tail of buf.  I changed the signature\nto slice buf on the way in.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode696\n> src/pkg/time/time.go:696: panic(\"time: missing Location in call to\n> Time.In\")\n> t.In(nil) seems reasonable to have as an alias for t.UTC(). I could see\n> a *Location being passed around, and it'd just be tedious to do a nil\n> check switch between calling UTC and In.\n\nThe nil *Location causes a panic when passed to any API.\nI would argue that it is just as reasonable to have t.In(nil)\nmean Local time, since that is the default from time.Now().\nBecause it is unclear which nil should mean, I have defined\nthat nil means neither, for maximum clarity.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode12\n> src/pkg/time/zoneinfo.go:12: type Location struct {\n> I agree with Ian that this is an odd name. time.Zone has a nice ring to\n> it.\n\nYes, except that this is not a time zone.  Many people who hear\ntime zone think \"eastern standard time\" or \"eastern daylight time\"\nbut a Location is actually a map from time instants to the zone in\nuse at that time.\n\nIf you think about how people choose time zones in any OS installation,\nthey do so by clicking on a map or picking the name of a place from a\ndrop down list, and somehow that doesn't bother people.  Even the\nstandard zoneinfo files are all named for locations.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode46\n> src/pkg/time/zoneinfo.go:46: var UTC *Location = &utcLoc\n> unnecessary \"*Location\"\n>\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode48\n> src/pkg/time/zoneinfo.go:48: var utcLoc = Location{name: \"UTC\"}\n> why the two vars? Why not just this?\n> \u00a0var UTC = &Location{name: \"UTC\"}\n>\n> I must be overlooking something.\n\nI will investigate and probably fix this.  Originally Location was an\ninterface and &utcLoc an implementation of that interface, so I\nsuspect this is just a dreg.\n\n> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode93\n> src/pkg/time/zoneinfo.go:93: func (l *Location) Lookup(sec int64) (name\n> string, offset int, isDST bool, start, end int64) {\n> this is a lot of return parameters. How about a little struct instead?\n\nI thought about it, but that struct would be the time.Zone, which I think\nwould cause more confusion than it would eliminate.  Almost no one\nis supposed to need to call Location.Lookup (in fact, it could be an\nunexported method; hmm, that's probably a good idea).\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-29 01:48:31.957947",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 29, 2011 at 12:48 PM, Russ Cox <rsc@golang.org> wrote:\n\n>> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode137\n>> src/pkg/time/time.go:137: // non-negative year even in time zones west\n>> of UTC, unlike 1-1-0\n>> there is no year 0.\n>\n> There was no year 1 in this calendar either.\n> It didn't start for another millennium (actually more).\n> Are you suggesting that the routines should not\n> return a year zero? \u00a0There's no year -1 either,\n> and yet they handle that too. \u00a0It's an unambiguous\n> extension of the existing calendar. \u00a0Note also that\n> this comment is not in the public documentaton.\n\nIn the Gregorian calendar, the day before 1 January 1 AD is 31\nDecember 1 BC. Sure, it was backdated, but it's the current calendar\nsystem. -1 seems a reasonable approximation of 1 BC. I don't think\nthese routines should be returning a year 0. It's an edge case, and\nit's not public, so I'm not fussed; just flagging it.\n\n>> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode188\n>> src/pkg/time/time.go:188: // uses a year equal to 1 mod 400, and that is\n>> no more than 2\u2076\u00b3 seconds\n>> those superscript characters display oddly in the web browser font I'm\n>> using right now. Replace that with 2^63?\n>\n> This too is in the internal documentation, so it is not\n> such a big deal (maybe worth finding a new font, though).\n> If it were showing up in public documentation I would be\n> more concerned. \u00a0I try to avoid writing 2^63 because\n> in Go 2^63 = 61, and I've corrected that mistake in a\n> handful of code reviews. \u00a0We've got Unicode available:\n> why not use it?\n\nJust that in at least my browser, the Unicode code points for the\nsuperscript \"6\" and \"3\" are very small, and are different sizes. But,\nagain, internal, so I'm not fussed.\n\n>> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/time.go#newcode389\n>> src/pkg/time/time.go:389: Hour \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 60 * Minute\n>> Why stop at hour? I'm sure there's a good reason; it should probably be\n>> documented here.\n>\n> The reason is that hours are always 60 minutes\n> (ignoring leap seconds, as we do) but days are\n> not always 24 hours. \u00a0If we had Day, then people\n> would be surprised when t.Hour() != t.Add(1*time.Day).Hour().\n\nYou're talking about timezone transitions? If so, the same applies to\nHour, because there's plenty of timezones that aren't integral hours\nfrom UTC.\n\n>> http://codereview.appspot.com/5392041/diff/11004/src/pkg/time/zoneinfo.go#newcode12\n>> src/pkg/time/zoneinfo.go:12: type Location struct {\n>> I agree with Ian that this is an odd name. time.Zone has a nice ring to\n>> it.\n>\n> Yes, except that this is not a time zone. \u00a0Many people who hear\n> time zone think \"eastern standard time\" or \"eastern daylight time\"\n> but a Location is actually a map from time instants to the zone in\n> use at that time.\n>\n> If you think about how people choose time zones in any OS installation,\n> they do so by clicking on a map or picking the name of a place from a\n> drop down list, and somehow that doesn't bother people. \u00a0Even the\n> standard zoneinfo files are all named for locations.\n\nOkay, fair enough. But in that case, you've got \"zone\" sprinkled\nthroughout the (public) docs in time.go that should then be\n\"location\".\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-11-29 02:00:04.570493",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 21:00, David Symonds <dsymonds@golang.org> wrote:\n> In the Gregorian calendar, the day before 1 January 1 AD is 31\n> December 1 BC. Sure, it was backdated, but it's the current calendar\n> system. -1 seems a reasonable approximation of 1 BC.\n\n0 seems an even more reasonable approximation of 1 BC.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-30 16:20:29.138708",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 21:00, David Symonds <dsymonds@golang.org> wrote:\n> Okay, fair enough. But in that case, you've got \"zone\" sprinkled\n> throughout the (public) docs in time.go that should then be\n> \"location\".\n\nGreat point.  I went through all the places that said zone\nand changed the ones that should have said location.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-30 16:23:44.822902",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"dsymonds@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5bd1bc51fc04 ***\n\ntime: new Time, Duration, ZoneInfo types\n\nR=r, bradfitz, gri, dsymonds, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5392041",
			"disapproval": false,
			"date": "2011-11-30 16:59:50.720484",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5392041: time: new Time, Duration, ZoneInfo types",
	"created": "2011-11-15 22:02:03.367732",
	"patchsets": [
		1,
		4,
		1056,
		7,
		1112,
		3033,
		5035,
		11004,
		19005,
		21004
	],
	"modified": "2011-11-30 16:59:52.513114",
	"closed": true,
	"issue": 5392041
}