{
	"description": "misc/windows packager development intermediate check-in\n\nThe installer now: allows a user to select an alternative\ninstall directory, it now adds a Go folder to the Programs\nMenu, and it places two shortcuts on the user's desktop.\nThe Program Menu folder contains shortcuts to the uninstaller\nand two batch files, go.bat and godoc.bat. The desktop\nshortcuts also point to go.bat and godoc.bat.\n\ngo.bat sets the Go environment, including Path, and spawns a\nWindow's shell. godoc.bat starts the godoc server at\nlocalhost:6060 then spawns a browser window pointing to the\ndocument server.\n\nSetting the environment temporarily and spawning a shell, via\ngo.bat, should be safer than messing with the system's environment\nand it makes the user experience a bit more streamlined.\n\nThe packager does work in its current state but it still needs\nsome polishing. And yes, the plan is to add a dialogue to allow\nthe user to decline the desktop shortcuts.",
	"cc": [
		"rsc@golang.org",
		"alex.brainman@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"tjyang2001@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 01:23,  <jdpoirier@gmail.com> wrote:\n> Setting the environment temporarily and spawning a shell, via\n> go.bat, should be safer than messing with the system's environment\n> and it makes the user experience a bit more streamlined.\n\nI don't think this scales very well.\nThis means that some cmd.exe windows can run Go and\nothers cannot.  It makes two different kinds of windows.\nIf every package did this you wouldn't ever be able to use\ntwo different packages in the same window.  I'd really prefer\nto have the environment variables set all the time.\nIs there a reason we shouldn't?\n\nAlso, there will be a go.exe eventually, so I am hesitant\nto have a completely different go.bat.  Similarly, godoc.bat\nshould be called something like godocserver.bat.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-16 22:15:10.549668",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 17:32,  <alex.brainman@gmail.com> wrote:\n> I would rather remove things instead - I think b)\n> is not needed\n\nI disagree.  b is needed if the installer ever installs\nthe binaries somewhere other than where they expect.\n\n> I wouldn't do c) either.\n\nI also disagree.  I want to be able to run cmd.exe and\nthen type 'godoc fmt' and have it print useful output.\nThat requires having the tools on my %PATH%.\n\n> your users use go. How do they develop? If they use mingw, then they\n> would just fetch go hg repo instead. If they don't use mingw, then they\n> would need some build tools. These (build tools) surely will allow to\n> find your go binaries one way or the other.\n\nThis is the binary distribution.  After you install it, I want\nto be able to run the Go commands at any cmd.exe prompt\nand have them all work, without needing to know what\nmingw is.  That implies (c) and probably (b) unless the\ninstaller refuses to install anywhere but c:\\go.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-16 22:42:41.456781",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 5:39 PM,  <alex.brainman@gmail.com> wrote:\n> On 2011/11/16 23:20:30, rsc wrote:\n>>\n>> >\n>> > Even after we have go.exe, we would still need to think about how\n>\n> people\n>>\n>> > use Go. On Windows no one uses command line. You should be able to\n>\n> at\n>>\n>> > least build your program from editor. So, perhaps, the task of this\n>> > installer should be to make it easy to use Go from your \"favourite\n>> > editor\".\n>\n>> It seems like having the Go binaries in your %PATH% would be\n>> a prerequisite for this.\n>\n> Not at all. Editor can be told where Go binaries live and GOROOT. It can\n> arrange for PATH to be set accordingly as it executes programs that\n> needs it.\n>\n> We are talking not about PATH environment variable here. This installer\n> changes PATH settings in the registry. It is what will be used for *ANY*\n> program, including cmd.exe, to run. Think about this. Windows users\n> install many programs, some people have hundreds, perhaps more. Each\n> program is installed in a separate directory, so binaries are scattered\n> around file system. That is why Windows have \"Start menu\", where it\n> records full path of these binaries, so they are just click away.\n> Imagine what would happen if every program would add its directory to\n> the PATH. Some programs do. But I would think twice before doing it.\n> Unless it is really needed.\n>\n>\n>> ... I'm happy to type commands at cmd.exe.\n>> So what I've described is exactly fitting my use case. \u00a0:-)\n>\n> I would like to see that. You, using Windows PC for a week with nothing,\n> but what comes with it.\n>\n> Alex\n>\n> http://codereview.appspot.com/5399042/\n>\n\nSorry for the late response but I've been really busy. Just some quick\nresponses for now. I'll have more time in about an hour to discuss\nthis further and/or in more detail.\n\nI basically went back and looked at how the VC++/Intel/PGI compilers\nwork and modeled this after them, i.e. they use a batch file to\ntemporarily set the Path and environment variables.\n\nMost of the GUI front ends either use the compiler's batch file to\nsetup the environment in some way or offer a way to do tool specific\nsettings. Visual Studio for example uses vsvars32/64.bat to set the\nenvironment. The idea is to eventually have the batch file in a state\nthat it's usable by any third party, e.g. a favorite editor. Also, I\nrealize there are some variables in the file right now that aren't\nnecessarily needed by the compiler but that's not true for all the\ntools in the toolchain. I'm not really clear at this point on what is\nor isn't needed.\n\nThe shortcuts were added to the programs menu and the desktop because\na lot of windows users do expect programs to work with a mouse click,\nthe shortcuts offer a nice compromise in that they just click and get\na shell with the Go environment already setup. Editors and such that\ninterface with external tools expect the user to do any required\nenvironment setup manually.\n\nI've found that it's nice to have both a c:\\go386 and c:\\goamd64\ninstallations on a 64 bit Win 7 machine for compiling 32 and 64 bit\nbinaries. Being able to open two cmd shells, pointing at the same\ndirectory, with two different Go environments (386 and amd64) makes it\neasy to compile the same file for both architectures.\n\nFor some reason hg refuses to upload the rtf formatted license\nfile-it's the existing LICENSE file just reformatted. WiX seems to\nrequire the file to be in rtf format.\n\nI'll change the name of the godoc batch file, and I guess the go batch\nfile should probable be goenv or something similar.\n\n\n\n-joe\n",
			"disapproval": false,
			"date": "2011-11-17 04:22:04.728451",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"tjyang2001@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/16 22:42:41, rsc wrote:\n> I disagree.  b is needed if the installer ever installs\n> the binaries somewhere other than where they expect.\n\nYes GOROOT is needed if go tree is installed in not c:\\go. But, I don't think we need GOARCH, and we certainly do not need GOOS.\n\n> > I wouldn't do c) either.\n> \n> I also disagree.  I want to be able to run cmd.exe and\n> then type 'godoc fmt' and have it print useful output.\n> That requires having the tools on my %PATH%.\n\nSure, if that is what you want. But you yourself wouldn't download this package. You would use mingw instead.\n\nYou have to think about users who don't want to use mingw or who are not familiar with unix tools. What will they do? That is the audience we are targeting. If they don't have anything, but simple editor (notepad.exe), then they would have to type all commands by hand. Command line editing facilities are pretty limited on Windows. So I can't see them much past hello.go with that. Perhaps, once we have go.exe, it will be more useful. But then we should wait with this installer before we know more about the task at hand.\n\nEven after we have go.exe, we would still need to think about how people use Go. On Windows no one uses command line. You should be able to at least build your program from editor. So, perhaps, the task of this installer should be to make it easy to use Go from your \"favourite editor\".\n\nAlex",
			"disapproval": false,
			"date": "2011-11-16 23:17:26.739285",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"tjyang2001@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/16 23:20:30, rsc wrote:\n> >\n> > Even after we have go.exe, we would still need to think about how people\n> > use Go. On Windows no one uses command line. You should be able to at\n> > least build your program from editor. So, perhaps, the task of this\n> > installer should be to make it easy to use Go from your \"favourite\n> > editor\".\n> \n> It seems like having the Go binaries in your %PATH% would be\n> a prerequisite for this.\n\nNot at all. Editor can be told where Go binaries live and GOROOT. It can arrange for PATH to be set accordingly as it executes programs that needs it.\n\nWe are talking not about PATH environment variable here. This installer changes PATH settings in the registry. It is what will be used for *ANY* program, including cmd.exe, to run. Think about this. Windows users install many programs, some people have hundreds, perhaps more. Each program is installed in a separate directory, so binaries are scattered around file system. That is why Windows have \"Start menu\", where it records full path of these binaries, so they are just click away. Imagine what would happen if every program would add its directory to the PATH. Some programs do. But I would think twice before doing it. Unless it is really needed.\n\n> \n> ... I'm happy to type commands at cmd.exe.\n> So what I've described is exactly fitting my use case.  :-)\n\nI would like to see that. You, using Windows PC for a week with nothing, but what comes with it.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-16 23:39:00.179789",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The installer could include an option to set the Path and any Go\nspecific variables in the system's environment?\n\nI tried renaming the LICENSE file but it's still showing up on the\ncodereview page without content. The same file uploads to\nbitbucket.org without issue so I'm guessing the problem is with\nRietveld.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-11-17 06:54:58.618381",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 01:54, Joseph Poirier <jdpoirier@gmail.com> wrote:\n> I tried renaming the LICENSE file but it's still showing up on the\n> codereview page without content. The same file uploads to\n> bitbucket.org without issue so I'm guessing the problem is with\n> Rietveld.\n\nIt's marked-up text, right?  Can you paste it into an email reply here?\nThe final submit will be fine, because you won't go through Rietveld.\n",
			"disapproval": false,
			"date": "2011-11-17 06:57:45.646291",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 12:57 AM, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Nov 17, 2011 at 01:54, Joseph Poirier <jdpoirier@gmail.com> wrote:\n>> I tried renaming the LICENSE file but it's still showing up on the\n>> codereview page without content. The same file uploads to\n>> bitbucket.org without issue so I'm guessing the problem is with\n>> Rietveld.\n>\n> It's marked-up text, right? \u00a0Can you paste it into an email reply here?\n> The final submit will be fine, because you won't go through Rietveld.\n>\n\n\n{\\rtf1\\ansi\\ansicpg1252\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Courier New;}}\n{\\*\\generator Msftedit\n5.41.21.2510;}\\viewkind4\\uc1\\pard\\lang1033\\f0\\fs18 Copyright (c) 2009\nThe Go Authors. All rights reserved.\\par\n\\par\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\\par\n\\par\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\\par\n   * Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the\ndistribution.\\par\n   * Neither the name of Google Inc. nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\\par\n\\par\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\\par\n\\fs20\\par\n}\n",
			"disapproval": false,
			"date": "2011-11-17 07:08:07.094608",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"tjyang2001@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, alex.brainman@gmail.com, tjyang2001@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-16 06:23:17.773732",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I tried to hg clpatch this to look at LICENSE.rtf and I get a conflict.\nCould you hg sync; hg upload?\n",
			"disapproval": false,
			"date": "2011-11-16 22:15:30.248996",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"tjyang2001@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nI am not sure what we are trying to achieve here. What is the problem you are trying to solve. Do we have a plan?\n\nI would like to have a discussion on what installation package should do first. We started with a) create c:\\go directory with go source and compiled binaries; b) create couple of global environment $GO... variables; c) change $PATH to list go binaries. Do you propose to add something else? Why? I would rather remove things instead - I think b) is not needed, I wouldn't do c) either. It all depends on how you see your users use go. How do they develop? If they use mingw, then they would just fetch go hg repo instead. If they don't use mingw, then they would need some build tools. These (build tools) surely will allow to find your go binaries one way or the other.\n\nI can tell you how I develop myself. I don't know what others do. Until I know, it is hard for me to make that call to help them.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-16 22:32:21.094347",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 18:17,  <alex.brainman@gmail.com> wrote:\n> But, I don't\n> think we need GOARCH, and we certainly do not need GOOS.\n\nTrue.  GOROOT is the only variable that is needed.\n",
			"disapproval": false,
			"date": "2011-11-16 23:19:16.954940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 18:17,  <alex.brainman@gmail.com> wrote:\n> Sure, if that is what you want. But you yourself wouldn't download this\n> package. You would use mingw instead.\n>\n> You have to think about users who don't want to use mingw or who are not\n> familiar with unix tools. What will they do? That is the audience we are\n> targeting. If they don't have anything, but simple editor (notepad.exe),\n> then they would have to type all commands by hand. Command line editing\n> facilities are pretty limited on Windows. So I can't see them much past\n> hello.go with that. Perhaps, once we have go.exe, it will be more\n> useful. But then we should wait with this installer before we know more\n> about the task at hand.\n>\n> Even after we have go.exe, we would still need to think about how people\n> use Go. On Windows no one uses command line. You should be able to at\n> least build your program from editor. So, perhaps, the task of this\n> installer should be to make it easy to use Go from your \"favourite\n> editor\".\n\nIt seems like having the Go binaries in your %PATH% would be\na prerequisite for this.\n\nAlso, you are wrong about how I would use this.  I am not interested\nin installing mingw.  I just want to download a binary Go distribution and\nwrite Go programs, and I'm happy to type commands at cmd.exe.\nSo what I've described is exactly fitting my use case.  :-)\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-16 23:20:30.583989",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-11-17 22:03:03.901689",
			"approval": true
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"tjyang2001@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=33a9fcc0f1ed ***\n\nmisc/windows packager development intermediate check-in\n\nThe installer now: allows a user to select an alternative\ninstall directory, it now adds a Go folder to the Programs\nMenu, and it places two shortcuts on the user's desktop.\nThe Program Menu folder contains shortcuts to the uninstaller\nand two batch files, go.bat and godoc.bat. The desktop\nshortcuts also point to go.bat and godoc.bat.\n\ngo.bat sets the Go environment, including Path, and spawns a\nWindow's shell. godoc.bat starts the godoc server at\nlocalhost:6060 then spawns a browser window pointing to the\ndocument server.\n\nSetting the environment temporarily and spawning a shell, via\ngo.bat, should be safer than messing with the system's environment\nand it makes the user experience a bit more streamlined.\n\nThe packager does work in its current state but it still needs\nsome polishing. And yes, the plan is to add a dialogue to allow\nthe user to decline the desktop shortcuts.\n\nR=rsc, alex.brainman, tjyang2001\nCC=golang-dev\nhttp://codereview.appspot.com/5399042",
			"disapproval": false,
			"date": "2011-11-17 23:54:11.387605",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 18, 2011 at 3:08 PM,  <tjyang2001@gmail.com> wrote:\n> On 2011/11/17 23:54:11, Joe Poirier wrote:\n>\n> 1. Are you using older version of 7zip ?\n> my 7zip install has no 7za.exe so it will fail the packages.bash.\n> I renamed 7za.exe in package.bash\nIt's a separate download at http://www.7-zip.org/download.html\n\n> 2. Should packages really generate both .zip and .msi at the same time ?\nSure.\n\n> I do not understand the need of generating go.zip and also generate\n> go.msi right after. Can you make go.zip generation optional , not by\n> default ?\nWe've always done a zip file and the installer is recent. The\ninstaller is more for convenience and I'm hoping the zip file will\ncontinue to be an option.  You can view the file download history here\nhttp://code.google.com/p/gomingw/downloads/list Just select the \"all\"\nfield.\n\nKeep in mind that the packager is aimed at automating (release) build\npackaging from a machine running a dashboard builder. The code/scripts\nare included in the distribution, if someone wants to create their own\ncustom packager it shouldn't be difficult.\n\n> 3. Good \u00a0go wxs coding except still missing the Gopher icon display\n> during interactive installation. Also the application icon (exist in\n> add/remove programs). The gohper.ico and bluegopher.ico are in my\n> tjyang2001-msi-wix clone. they all have 16x16,32x32,64x64 and 128x128\n> different resolutions within ico. not like the default favicon.ico in go\n> src tree which only has 16x16 resolution.\nIt was on the todo list for the next phase. If you don't mind creating\na CL with the graphics you'd like to contribute that'd be great.\n\nIf you're not listed as a contributor yet you can view the details\nhere http://golang.org/doc/contribute.html\nA CLA is required http://code.google.com/legal/individual-cla-v1.0.html\n\n-joe\n",
			"disapproval": false,
			"date": "2011-11-19 00:35:32.518767",
			"approval": false
		},
		{
			"sender": "tjyang2001@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"tjyang2001@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/17 23:54:11, Joe Poirier wrote:\n\n1. Are you using older version of 7zip ?\nmy 7zip install has no 7za.exe so it will fail the packages.bash.\nI renamed 7za.exe in package.bash\n2. Should packages really generate both .zip and .msi at the same time ? I do not understand the need of generating go.zip and also generate go.msi right after. Can you make go.zip generation optional , not by default ?\n\n3. Good  go wxs coding except still missing the Gopher icon display during interactive installation. Also the application icon (exist in add/remove programs). The gohper.ico and bluegopher.ico are in my tjyang2001-msi-wix clone. they all have 16x16,32x32,64x64 and 128x128 different resolutions within ico. not like the default favicon.ico in go src tree which only has 16x16 resolution.",
			"disapproval": false,
			"date": "2011-11-18 21:08:57.149938",
			"approval": false
		}
	],
	"owner_email": "jdpoirier@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Joe Poirier",
	"subject": "code review 5399042: misc/windows packager development intermediate check-in",
	"created": "2011-11-16 06:21:29.828144",
	"patchsets": [
		1,
		2001,
		2002,
		1007,
		1009,
		7002,
		4012,
		4015,
		8009
	],
	"modified": "2011-11-18 21:08:57.237410",
	"closed": true,
	"issue": 5399042
}