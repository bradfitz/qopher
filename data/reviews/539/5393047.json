{
	"description": "go/ast: remove unused receiver names (cleanup)",
	"cc": [
		"iant@golang.org",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello iant (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-16 19:31:14.095859",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\ngri@golang.org writes:\n\n> Reviewers: iant,\n>\n> Message:\n> Hello iant (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> go/ast: remove unused receiver names (cleanup)\n>\n> Please review this at http://codereview.appspot.com/5393047/\n>\n> Affected files:\n>   M src/pkg/go/ast/ast.go\n>\n>\n> Index: src/pkg/go/ast/ast.go\n> ===================================================================\n> --- a/src/pkg/go/ast/ast.go\n> +++ b/src/pkg/go/ast/ast.go\n> @@ -412,29 +412,29 @@\n>  // exprNode() ensures that only expression/type nodes can be\n>  // assigned to an ExprNode.\n>  //\n> -func (x *BadExpr) exprNode()        {}\n> -func (x *Ident) exprNode()          {}\n> -func (x *Ellipsis) exprNode()       {}\n> -func (x *BasicLit) exprNode()       {}\n> -func (x *FuncLit) exprNode()        {}\n> -func (x *CompositeLit) exprNode()   {}\n> -func (x *ParenExpr) exprNode()      {}\n> -func (x *SelectorExpr) exprNode()   {}\n> -func (x *IndexExpr) exprNode()      {}\n> -func (x *SliceExpr) exprNode()      {}\n> -func (x *TypeAssertExpr) exprNode() {}\n> -func (x *CallExpr) exprNode()       {}\n> -func (x *StarExpr) exprNode()       {}\n> -func (x *UnaryExpr) exprNode()      {}\n> -func (x *BinaryExpr) exprNode()     {}\n> -func (x *KeyValueExpr) exprNode()   {}\n> +func (*BadExpr) exprNode()        {}\n> +func (*Ident) exprNode()          {}\n> +func (*Ellipsis) exprNode()       {}\n> +func (*BasicLit) exprNode()       {}\n> +func (*FuncLit) exprNode()        {}\n> +func (*CompositeLit) exprNode()   {}\n> +func (*ParenExpr) exprNode()      {}\n> +func (*SelectorExpr) exprNode()   {}\n> +func (*IndexExpr) exprNode()      {}\n> +func (*SliceExpr) exprNode()      {}\n> +func (*TypeAssertExpr) exprNode() {}\n> +func (*CallExpr) exprNode()       {}\n> +func (*StarExpr) exprNode()       {}\n> +func (*UnaryExpr) exprNode()      {}\n> +func (*BinaryExpr) exprNode()     {}\n> +func (*KeyValueExpr) exprNode()   {}\n>\n> -func (x *ArrayType) exprNode()     {}\n> -func (x *StructType) exprNode()    {}\n> -func (x *FuncType) exprNode()      {}\n> -func (x *InterfaceType) exprNode() {}\n> -func (x *MapType) exprNode()       {}\n> -func (x *ChanType) exprNode()      {}\n> +func (*ArrayType) exprNode()     {}\n> +func (*StructType) exprNode()    {}\n> +func (*FuncType) exprNode()      {}\n> +func (*InterfaceType) exprNode() {}\n> +func (*MapType) exprNode()       {}\n> +func (*ChanType) exprNode()      {}\n>\n>  //\n> ----------------------------------------------------------------------------\n>  // Convenience functions for Idents\n> @@ -711,27 +711,27 @@\n>  // stmtNode() ensures that only statement nodes can be\n>  // assigned to a StmtNode.\n>  //\n> -func (s *BadStmt) stmtNode()        {}\n> -func (s *DeclStmt) stmtNode()       {}\n> -func (s *EmptyStmt) stmtNode()      {}\n> -func (s *LabeledStmt) stmtNode()    {}\n> -func (s *ExprStmt) stmtNode()       {}\n> -func (s *SendStmt) stmtNode()       {}\n> -func (s *IncDecStmt) stmtNode()     {}\n> -func (s *AssignStmt) stmtNode()     {}\n> -func (s *GoStmt) stmtNode()         {}\n> -func (s *DeferStmt) stmtNode()      {}\n> -func (s *ReturnStmt) stmtNode()     {}\n> -func (s *BranchStmt) stmtNode()     {}\n> -func (s *BlockStmt) stmtNode()      {}\n> -func (s *IfStmt) stmtNode()         {}\n> -func (s *CaseClause) stmtNode()     {}\n> -func (s *SwitchStmt) stmtNode()     {}\n> -func (s *TypeSwitchStmt) stmtNode() {}\n> -func (s *CommClause) stmtNode()     {}\n> -func (s *SelectStmt) stmtNode()     {}\n> -func (s *ForStmt) stmtNode()        {}\n> -func (s *RangeStmt) stmtNode()      {}\n> +func (*BadStmt) stmtNode()        {}\n> +func (*DeclStmt) stmtNode()       {}\n> +func (*EmptyStmt) stmtNode()      {}\n> +func (*LabeledStmt) stmtNode()    {}\n> +func (*ExprStmt) stmtNode()       {}\n> +func (*SendStmt) stmtNode()       {}\n> +func (*IncDecStmt) stmtNode()     {}\n> +func (*AssignStmt) stmtNode()     {}\n> +func (*GoStmt) stmtNode()         {}\n> +func (*DeferStmt) stmtNode()      {}\n> +func (*ReturnStmt) stmtNode()     {}\n> +func (*BranchStmt) stmtNode()     {}\n> +func (*BlockStmt) stmtNode()      {}\n> +func (*IfStmt) stmtNode()         {}\n> +func (*CaseClause) stmtNode()     {}\n> +func (*SwitchStmt) stmtNode()     {}\n> +func (*TypeSwitchStmt) stmtNode() {}\n> +func (*CommClause) stmtNode()     {}\n> +func (*SelectStmt) stmtNode()     {}\n> +func (*ForStmt) stmtNode()        {}\n> +func (*RangeStmt) stmtNode()      {}\n>\n>  //\n> ----------------------------------------------------------------------------\n>  // Declarations\n> @@ -807,9 +807,9 @@\n>  // specNode() ensures that only spec nodes can be\n>  // assigned to a Spec.\n>  //\n> -func (s *ImportSpec) specNode() {}\n> -func (s *ValueSpec) specNode()  {}\n> -func (s *TypeSpec) specNode()   {}\n> +func (*ImportSpec) specNode() {}\n> +func (*ValueSpec) specNode()  {}\n> +func (*TypeSpec) specNode()   {}\n>\n>  // A declaration is represented by one of the following declaration nodes.\n>  //\n> @@ -875,9 +875,9 @@\n>  // declNode() ensures that only declaration nodes can be\n>  // assigned to a DeclNode.\n>  //\n> -func (d *BadDecl) declNode()  {}\n> -func (d *GenDecl) declNode()  {}\n> -func (d *FuncDecl) declNode() {}\n> +func (*BadDecl) declNode()  {}\n> +func (*GenDecl) declNode()  {}\n> +func (*FuncDecl) declNode() {}\n>\n>  //\n> ----------------------------------------------------------------------------\n>  // Files and packages\n",
			"disapproval": false,
			"date": "2011-11-16 21:02:03.508759",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0fb275ce6ed8 ***\n\ngo/ast: remove unused receiver names (cleanup)\n\nR=iant, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5393047",
			"disapproval": false,
			"date": "2011-11-16 21:41:35.418062",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5393047: go/ast: remove unused receiver names (cleanup)",
	"created": "2011-11-16 19:31:10.786577",
	"patchsets": [
		1,
		2003
	],
	"modified": "2011-11-16 21:41:37.666341",
	"closed": true,
	"issue": 5393047
}