{
	"description": "net/http: Added interface for a cookie jar.\n\nTypes implementing CookieJar may be used in a Client\nto persist cookies.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-16 10:25:10.768803",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http: Handling cookies while following redirects: Proposal for a cookie jar.\n\nThis is a proposal for a CookieJar interface, some sample\ntypes implementing this interface and how these could be\nadded to Client so that cookies are not lost while following\nredirects.\n\nPlease take a look at the design, implementation is\nnot tested jet (it's just to check if the design is utterly\nbroken).  I'am not sure if Client is the perfect place\nfor a cookie jar, or even if a full fletched jar is\nneeded/wanted at all.\n\nI started work on this as I needed fine control over\nwhich cookies are set/deleted/sent during a redirect chain\nand thought this might be usefull.\n\nAny comments welcome.",
			"disapproval": false,
			"date": "2011-11-16 12:45:45.607009",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/client.go#newcode42\nsrc/pkg/net/http/client.go:42: // A nil Jar means cookies are not supported.\nOn 2011/12/02 16:28:44, bradfitz wrote:\n> // Jar specifies the cookie jar.\n> // If Jar is nil, cookies are not supported.\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/client.go#newcode223\nsrc/pkg/net/http/client.go:223: jar.StoreCookies(req.URL, r.Cookies())\nOn 2011/12/02 16:28:44, bradfitz wrote:\n> Let's not call the interface if there are no cookies.  I don't want people\n> misusing this as some sort of logging hook.\n> \n> if c := r.Cookies(); len(c) > 0 {\n>     jar.StoreCookies(req.URL, c)\n> }\n> \n> I know I asked for the nil check to be removed so this could be prettier, but\n> mostly I wanted to remove nil checks.  I don't mind the if.\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go#newcode22\nsrc/pkg/net/http/jar.go:22: // Invalid cookies (e.g. cookies with a wildcard top level domain or\nOn 2011/12/02 16:28:44, bradfitz wrote:\n> This last sentence (Invalid cookies...) can be removed.  It describes an\n> implementation, not the interface.\n> \n> Unless you mean \"they SHOULD be ignored\".  But I think the comment would be\n> better on an implementation.\n> \n> I think this whole comment could be:\n> \n> // StoreCookies adds the provided cookies to the jar.\n> // The cookies were sent by the server after requesting URL u.\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go#newcode31\nsrc/pkg/net/http/jar.go:31: // The returned slice may be empty or nil.\nOn 2011/12/02 16:28:44, bradfitz wrote:\n> I think this sentence can go.  It's pretty obvious.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-02 18:28:26.652929",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/client.go#newcode42\nsrc/pkg/net/http/client.go:42: // A nil Jar means cookies are not supported.\n// Jar specifies the cookie jar.\n// If Jar is nil, cookies are not supported.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/client.go#newcode223\nsrc/pkg/net/http/client.go:223: jar.StoreCookies(req.URL, r.Cookies())\nLet's not call the interface if there are no cookies.  I don't want people misusing this as some sort of logging hook.\n\nif c := r.Cookies(); len(c) > 0 {\n    jar.StoreCookies(req.URL, c)\n}\n\nI know I asked for the nil check to be removed so this could be prettier, but mostly I wanted to remove nil checks.  I don't mind the if.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go#newcode22\nsrc/pkg/net/http/jar.go:22: // Invalid cookies (e.g. cookies with a wildcard top level domain or\nThis last sentence (Invalid cookies...) can be removed.  It describes an implementation, not the interface.\n\nUnless you mean \"they SHOULD be ignored\".  But I think the comment would be better on an implementation.\n\nI think this whole comment could be:\n\n// StoreCookies adds the provided cookies to the jar.\n// The cookies were sent by the server after requesting URL u.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go#newcode31\nsrc/pkg/net/http/jar.go:31: // The returned slice may be empty or nil.\nI think this sentence can go.  It's pretty obvious.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go#newcode42\nsrc/pkg/net/http/jar.go:42: // normalizeCookie returns a copy of cookie where the domain, path and expires\nremove this from this CL.  it's not yet used.\n\nhttp://codereview.appspot.com/5399043/diff/10003/src/pkg/net/http/jar.go#newcode146\nsrc/pkg/net/http/jar.go:146: // qualifyCookie checks if a cookie qualifies to be sent to the url.\nremove this too, and everything else in this CL that's not yet used.\n\nlet's do this incrementally.",
			"disapproval": false,
			"date": "2011-12-02 16:28:44.179547",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-01 13:33:15.167689",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-01 13:40:44.057824",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Cool. This is basically the design I was hoping to see. Thanks for doing\nthis.\n\nI'll reply with code + doc + naming comments in a bit.\n\n\nOn Thu, Dec 1, 2011 at 5:33 AM, <dr.volker.dobler@gmail.com> wrote:\n\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5399043/<http://codereview.appspot.com/5399043/>\n>\n",
			"disapproval": false,
			"date": "2011-12-01 18:14:33.751048",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "blackHoleJar is 3 lines and saves 4 lines of nil checks.   *shrug*\n\nThe API can't ignore secure cookies.  You don't have to implement them this\nround, but the API has to permit others to implement them later.\nAnd you definitely shouldn't conflate them all to just a host.\n\nOn Thu, Dec 1, 2011 at 1:35 PM, <dr.volker.dobler@gmail.com> wrote:\n\n> Thanks for the comments.  Maybe blackHoleJar\n> is not needed at all as there are just two uses\n> of the jar in client.go.\n>\n>\n>\n>\n> http://codereview.appspot.com/**5399043/diff/8002/src/pkg/net/**\n> http/client.go<http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go>\n> File src/pkg/net/http/client.go (right):\n>\n> http://codereview.appspot.com/**5399043/diff/8002/src/pkg/net/**\n> http/client.go#newcode190<http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode190>\n> src/pkg/net/http/client.go:**190: var jar CookieJar\n> On 2011/12/01 21:12:06, bradfitz wrote:\n>\n>> jar := c.Jar\n>> if jar == nil {\n>>     jar = blackHoleJar{}\n>> }\n>>\n>\n> If nil means: No cookies during redirects, than\n> I would just check this case twice below. I.e.\n> here just:\n>\n> jar := c.Jar\n>\n> ...\n>\n> http://codereview.appspot.com/**5399043/diff/8002/src/pkg/net/**\n> http/client.go#newcode219<http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode219>\n> src/pkg/net/http/client.go:**219: }\n> ... and here\n> if jar != nil {\n>    for _, cookie := range jar.Select(req.URL) {\n>        req.AddCookie(cookie)\n>    }\n> }\n> ...\n>\n> http://codereview.appspot.com/**5399043/diff/8002/src/pkg/net/**\n> http/client.go#newcode229<http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode229>\n> src/pkg/net/http/client.go:**229: jar.Update(r.Cookies(),\n> hostname(req.URL))\n> ... and here once more:\n>\n> if jar != nil { jar.Update(r.Cookies(), hostname(req.URL)) }\n>\n>\n> http://codereview.appspot.com/**5399043/diff/8002/src/pkg/net/**\n> http/jar.go<http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go>\n> File src/pkg/net/http/jar.go (right):\n>\n> http://codereview.appspot.com/**5399043/diff/8002/src/pkg/net/**\n> http/jar.go#newcode23<http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode23>\n> src/pkg/net/http/jar.go:23: Update(cookies []*Cookie, host string)\n> On 2011/12/01 21:12:06, bradfitz wrote:\n>\n>> What about https vs. not?  I think instead of\n>> \"host string\" we might want \"url *url.URL\" for\n>> the URL that sent us the cookies.\n>>\n>\n> I must admit, that I just do not know whether\n> it should be allowed to set a Secure cookie from\n> a https request and vice versa.  I did not come\n> up with any reasons why it should be forbidden.\n> That is why I just used host instead of the whole\n> URL.\n>\n>\n> http://codereview.appspot.com/**5399043/diff/8002/src/pkg/net/**\n> http/jar.go#newcode33<http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode33>\n> src/pkg/net/http/jar.go:33: type BlackHoleJar int\n> On 2011/12/01 21:12:06, bradfitz wrote:\n>\n>> type blackHoleJar struct{}\n>>\n>\n> If a black hole is the nil case in Client, than\n> this could be achieved without a blackHoleJar.\n> See the comment in client.go\n>\n> http://codereview.appspot.com/**5399043/<http://codereview.appspot.com/5399043/>\n>\n",
			"disapproval": false,
			"date": "2011-12-01 21:44:31.868178",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode43\nsrc/pkg/net/http/client.go:43: // nil, than each GET and HEAD request gets it's own\nits, not it's\n\nBut I think we want the nil case to be a BlackHoleJar.  And I'm not sure I'd expose BlackHoleJar publicly.  I'd just say \"nil means cookies aren't supported\".\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode190\nsrc/pkg/net/http/client.go:190: var jar CookieJar\njar := c.Jar\nif jar == nil {\n    jar = blackHoleJar{}\n}\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode23\nsrc/pkg/net/http/jar.go:23: Update(cookies []*Cookie, host string)\nWhat about https vs. not?  I think instead of \"host string\" we might want \"url *url.URL\" for the URL that sent us the cookies.\n\nAnd I'd put that argument first.\n\nAnd I'd name the methods something like:\n\nStoreCookies\nGetCookies\n\nBut I'm open to alternate proposals.  (Russ?)\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode33\nsrc/pkg/net/http/jar.go:33: type BlackHoleJar int\ntype blackHoleJar struct{}\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode35\nsrc/pkg/net/http/jar.go:35: func (bh BlackHoleJar) Update(cookies []*Cookie, host string) {}\nDon't need receiver names here:\n\nfunc (blackHoleJar) Foo() ...\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode206\nsrc/pkg/net/http/jar.go:206: type TrivialJar struct {\nCan we drop this implementation from this CL for now and focus just on the Client and interface API changes?\n\nWe can add this back in a subsequent CL, perhaps named differently too (MemoryJar? who knows).  Trivial things become less trivial over time.  This is really about storing them in memory, I believe.  Also, the cookie policy logic should be separate from the cookie storing/loading policy.  In this implementation they're kinda combined.\n\nThe implementations will need tests too.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode260\nsrc/pkg/net/http/jar.go:260: // SimpleCookieJar implements a simple cookie jar. It can be shared by different\nLet's drop this one too.  I wouldn't have two anyway.  Let's just have a thread-safe one (later).\n\nI would even document in the CookieJar interface that the implementations must be safe for use by concurrent goroutines.",
			"disapproval": false,
			"date": "2011-12-01 21:12:06.731374",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-02 18:27:32.953627",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the comments.  Maybe blackHoleJar\nis not needed at all as there are just two uses\nof the jar in client.go.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode190\nsrc/pkg/net/http/client.go:190: var jar CookieJar\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> jar := c.Jar\n> if jar == nil {\n>     jar = blackHoleJar{}\n> }\n\nIf nil means: No cookies during redirects, than\nI would just check this case twice below. I.e.\nhere just:\n\njar := c.Jar\n\n...\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode219\nsrc/pkg/net/http/client.go:219: }\n... and here\nif jar != nil {\n    for _, cookie := range jar.Select(req.URL) {\n        req.AddCookie(cookie)\n    }\n}\n...\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode229\nsrc/pkg/net/http/client.go:229: jar.Update(r.Cookies(), hostname(req.URL))\n... and here once more:\n\nif jar != nil { jar.Update(r.Cookies(), hostname(req.URL)) }\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode23\nsrc/pkg/net/http/jar.go:23: Update(cookies []*Cookie, host string)\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> What about https vs. not?  I think instead of \n> \"host string\" we might want \"url *url.URL\" for \n> the URL that sent us the cookies.\n\nI must admit, that I just do not know whether\nit should be allowed to set a Secure cookie from\na https request and vice versa.  I did not come\nup with any reasons why it should be forbidden.\nThat is why I just used host instead of the whole\nURL.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode33\nsrc/pkg/net/http/jar.go:33: type BlackHoleJar int\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> type blackHoleJar struct{}\n\nIf a black hole is the nil case in Client, than\nthis could be achieved without a blackHoleJar.\nSee the comment in client.go",
			"disapproval": false,
			"date": "2011-12-01 21:35:15.918178",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-02 08:17:59.131465",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode43\nsrc/pkg/net/http/client.go:43: // nil, than each GET and HEAD request gets it's own\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> its, not it's\n> \n> But I think we want the nil case to be a BlackHoleJar.  And I'm not sure I'd\n> expose BlackHoleJar publicly.  I'd just say \"nil means cookies aren't\n> supported\".\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/client.go#newcode190\nsrc/pkg/net/http/client.go:190: var jar CookieJar\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> jar := c.Jar\n> if jar == nil {\n>     jar = blackHoleJar{}\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode23\nsrc/pkg/net/http/jar.go:23: Update(cookies []*Cookie, host string)\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> What about https vs. not?  I think instead of \"host string\" we might want \"url\n> *url.URL\" for the URL that sent us the cookies.\n> \n> And I'd put that argument first.\n> \n> And I'd name the methods something like:\n> \n> StoreCookies\n> GetCookies\n> \n> But I'm open to alternate proposals.  (Russ?)\n\nDone.\n\nReplaced host by URL because than Store and Get \nare more symetric, gives mire concise API.\n\nCorrect me if I am wrong, but I think, that\nhandling of secure (aka https-only) cookies should\nbe done in GetCookies and not in StoreCookies:\nYou don't want to send a Secore cookie over an\nunencrypted wire, but accepting a secure cookie\nfrom http seem legit (to me).\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode33\nsrc/pkg/net/http/jar.go:33: type BlackHoleJar int\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> type blackHoleJar struct{}\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode33\nsrc/pkg/net/http/jar.go:33: type BlackHoleJar int\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> type blackHoleJar struct{}\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode35\nsrc/pkg/net/http/jar.go:35: func (bh BlackHoleJar) Update(cookies []*Cookie, host string) {}\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> Don't need receiver names here:\n> \n> func (blackHoleJar) Foo() ...\n> \n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/8002/src/pkg/net/http/jar.go#newcode206\nsrc/pkg/net/http/jar.go:206: type TrivialJar struct {\nOn 2011/12/01 21:12:06, bradfitz wrote:\n> Can we drop this implementation from this CL for now and focus just on the\n> Client and interface API changes?\n> \n> We can add this back in a subsequent CL, perhaps named differently too\n> (MemoryJar? who knows).  Trivial things become less trivial over time.  This is\n> really about storing them in memory, I believe.  Also, the cookie policy logic\n> should be separate from the cookie storing/loading policy.  In this\n> implementation they're kinda combined.\n> \n> The implementations will need tests too.\n\nDone.\n\nMaybe some of the (currently internal) functions above \nshould be exported, so that a implementation of CookieJar\ncould benefit from them.",
			"disapproval": false,
			"date": "2011-12-02 08:18:43.929515",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5399043/diff/5007/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/5007/src/pkg/net/http/jar.go#newcode1\nsrc/pkg/net/http/jar.go:1: // Copyright 2009 The Go Authors. All rights reserved.\nOn 2011/12/14 00:43:05, bradfitz wrote:\n> fix copyright date to 2011\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/5007/src/pkg/net/http/jar.go#newcode26\nsrc/pkg/net/http/jar.go:26: // blackHoleJar implements a black hole cookie jar: Whatever you stuck in\nOn 2011/12/14 00:43:05, bradfitz wrote:\n> s/stuck/stick/\n> \n> But you could also delete these comments since it's pretty obvious from the\n> implementation and name and this isn't an exported type.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-14 08:35:46.078781",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-14 08:36:02.317969",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I'd forgotten that this wasn't in yet!\n\nTwo tiny comments, but nothing real.\n\nAfter that, LGTM.\n\nRuss, care to look?\n\nhttp://codereview.appspot.com/5399043/diff/5007/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/5007/src/pkg/net/http/jar.go#newcode1\nsrc/pkg/net/http/jar.go:1: // Copyright 2009 The Go Authors. All rights reserved.\nfix copyright date to 2011\n\nhttp://codereview.appspot.com/5399043/diff/5007/src/pkg/net/http/jar.go#newcode26\nsrc/pkg/net/http/jar.go:26: // blackHoleJar implements a black hole cookie jar: Whatever you stuck in\ns/stuck/stick/\n\nBut you could also delete these comments since it's pretty obvious from the implementation and name and this isn't an exported type.\n\nhttp://codereview.appspot.com/5399043/diff/5007/src/pkg/net/http/jar.go#newcode31\nsrc/pkg/net/http/jar.go:31: func (blackHoleJar) GetCookies(u *url.URL) []*Cookie            { return nil }\nwow, does this pass gofmt, with all that space before the opening brace?  whatever gofmt says is right, in any case.",
			"disapproval": false,
			"date": "2011-12-14 00:43:05.291201",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "very nice.\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/client.go#newcode43\nsrc/pkg/net/http/client.go:43: // If Jar is nil, cookies are not supported.\nare not sent in requests and ignored in replies.\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go#newcode11\nsrc/pkg/net/http/jar.go:11: // CookieJar is the interface for a cookie jar.\nThis doesn't actually say anything if you don't know the jar-gon.\n\n// A CookieJar manages storage and use of cookies in HTTP requests.\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go#newcode13\nsrc/pkg/net/http/jar.go:13: // Implementations of CookieJar must be safe for use by concurrent goroutines.\ns/use by concurrent/concurrent use by multiple/\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go#newcode15\nsrc/pkg/net/http/jar.go:15: // StoreCookies adds the provided cookies to the jar.\nI'd like to avoid the Get in the one method,\nand shortening it to Cookies suggests using the\nstandard HTTP header names (well, pluralized).\n\n// SetCookies handles the receipt of the cookies in a reply for the given URL.\n// It may or may not choose to save the cookies, depending on the\n// jar's policy and implementation.\nSetCookies(u *url.URL, cookies []*Cookie)\n\n// Cookies returns the cookies to send in a request for the given URL.\n// It is up to the implementation to honor the standard cookie use restrictions \n// such as in RFC 2019.\nCookies(u *url.URL) []*Cookie\n\nor whatever the RFC is today.",
			"disapproval": false,
			"date": "2011-12-14 21:22:27.688143",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/client.go#newcode43\nsrc/pkg/net/http/client.go:43: // If Jar is nil, cookies are not supported.\nOn 2011/12/14 21:22:27, rsc wrote:\n> are not sent in requests and ignored in replies.\n\nDone, but used \"responses\" to be more consistent.\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go\nFile src/pkg/net/http/jar.go (right):\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go#newcode11\nsrc/pkg/net/http/jar.go:11: // CookieJar is the interface for a cookie jar.\nOn 2011/12/14 21:22:27, rsc wrote:\n> This doesn't actually say anything if you don't know the jar-gon.\n> \n> // A CookieJar manages storage and use of cookies in HTTP requests.\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go#newcode13\nsrc/pkg/net/http/jar.go:13: // Implementations of CookieJar must be safe for use by concurrent goroutines.\nOn 2011/12/14 21:22:27, rsc wrote:\n> s/use by concurrent/concurrent use by multiple/\n\nDone.\n\nhttp://codereview.appspot.com/5399043/diff/15002/src/pkg/net/http/jar.go#newcode15\nsrc/pkg/net/http/jar.go:15: // StoreCookies adds the provided cookies to the jar.\nOn 2011/12/14 21:22:27, rsc wrote:\n> I'd like to avoid the Get in the one method,\n> and shortening it to Cookies suggests using the\n> standard HTTP header names (well, pluralized).\n> \n> // SetCookies handles the receipt of the cookies in a reply for the given URL.\n> // It may or may not choose to save the cookies, depending on the\n> // jar's policy and implementation.\n> SetCookies(u *url.URL, cookies []*Cookie)\n> \n> // Cookies returns the cookies to send in a request for the given URL.\n> // It is up to the implementation to honor the standard cookie use restrictions \n> // such as in RFC 2019.\n> Cookies(u *url.URL) []*Cookie\n> \n> or whatever the RFC is today.\n\nDone. Referenced RFC 6265.",
			"disapproval": false,
			"date": "2011-12-15 21:58:48.658420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=06e9bc864110 ***\n\nnet/http: Added interface for a cookie jar.\n\nTypes implementing CookieJar may be used in a Client\nto persist cookies.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5399043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-16 15:48:43.037380",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-15 21:59:19.999482",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-16 15:35:50.817164",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=06e9bc864110 ***\n\nnet/http: Added interface for a cookie jar.\n\nTypes implementing CookieJar may be used in a Client\nto persist cookies.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5399043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-16 15:48:43.362113",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 5399043: net/http: Added interface for a cookie jar.",
	"created": "2011-11-16 10:24:36.256662",
	"patchsets": [
		1,
		1001,
		2004,
		5002,
		8002,
		10003,
		5007,
		15002,
		18002
	],
	"modified": "2011-12-17 11:38:56.540439",
	"closed": true,
	"issue": 5399043
}