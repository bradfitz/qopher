{
	"description": "net/http: fix EOF handling on response body\n\nhttp.Response is currently returning 0, nil on EOF.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@google.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Nice catch.\n\nhttp://codereview.appspot.com/5394047/diff/3003/src/pkg/net/http/client_test.go\nFile src/pkg/net/http/client_test.go (right):\n\nhttp://codereview.appspot.com/5394047/diff/3003/src/pkg/net/http/client_test.go#newcode29\nsrc/pkg/net/http/client_test.go:29: // pedanticReadAll works like ioutil.ReadAll but asserts that\nbut additionally verifies that r obeys the documented io.Reader contract.\n\nhttp://codereview.appspot.com/5394047/diff/3003/src/pkg/net/http/client_test.go#newcode36\nsrc/pkg/net/http/client_test.go:36: if n == 0 && err == nil || err != nil && n != 0 {\nI'd make the \"err != nil && n != 0\" case its own block and return the err unmodified, rather than losing its type/details and masking it in an fmt.Errorf string error.\n\nbut do the io.EOF check first.\n\nhttp://codereview.appspot.com/5394047/diff/3003/src/pkg/net/http/client_test.go#newcode39\nsrc/pkg/net/http/client_test.go:39: if err == io.EOF {\nI'd move this check up before line 36, so then... (see above)",
			"disapproval": false,
			"date": "2011-11-16 18:55:08.290448",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> Nice catch.\n\nThanks.\n\n\n> but additionally verifies that r obeys the documented io.Reader contract.\n\nDone.\n\n> I'd make the \"err != nil && n != 0\" case its own block and return the err\n\nI've actually fixed the logic to handle the exact contract now. Please see if you're happy with it.",
			"disapproval": false,
			"date": "2011-11-16 19:06:57.577136",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5394047/diff/6001/src/pkg/net/http/client_test.go\nFile src/pkg/net/http/client_test.go (right):\n\nhttp://codereview.appspot.com/5394047/diff/6001/src/pkg/net/http/client_test.go#newcode46\nsrc/pkg/net/http/client_test.go:46: }\nyou no longer handle non-nil, non-EOF errors. need a return for that.",
			"disapproval": false,
			"date": "2011-11-16 19:11:46.716338",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-16 18:45:25.492388",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5394047/diff/3004/src/pkg/net/http/transfer.go\nFile src/pkg/net/http/transfer.go (right):\n\nhttp://codereview.appspot.com/5394047/diff/3004/src/pkg/net/http/transfer.go#newcode540\nsrc/pkg/net/http/transfer.go:540: if e := b.readTrailer(); e != nil {\nbtw, this e would be conventionally called err1",
			"disapproval": false,
			"date": "2011-11-16 19:00:19.566319",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> btw, this e would be conventionally called err1\n\n% grep 'if e :=' **/*.go | wc -l\n67\n\n% grep 'if err1 :=' **/*.go | wc -l\n1",
			"disapproval": false,
			"date": "2011-11-16 19:05:39.982682",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> you no longer handle non-nil, non-EOF errors. need a return for that.\n\nFrom http://golang.org/pkg/io/#Reader:\n\n\"When Read encounters an error or end-of-file condition after\nsuccessfully reading n > 0 bytes, it returns the number of bytes read.\nIt may return the (non-nil) error from the same call or return the\nerror (and n == 0) from a subsequent call. An instance of this general\ncase is that a Reader returning a non-zero number of bytes at the end\nof the input stream may return either err == os.EOF or err == nil. The\nnext Read should return 0, os.EOF regardless.\"\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-11-16 19:13:12.635504",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 11:12 AM, Gustavo Niemeyer <n13m3y3r@gmail.com>wrote:\n\n> > you no longer handle non-nil, non-EOF errors. need a return for that.\n>\n> From http://golang.org/pkg/io/#Reader:\n>\n> \"When Read encounters an error or end-of-file condition after\n> successfully reading n > 0 bytes, it returns the number of bytes read.\n> It may return the (non-nil) error from the same call or return the\n> error (and n == 0) from a subsequent call. An instance of this general\n> case is that a Reader returning a non-zero number of bytes at the end\n> of the input stream may return either err == os.EOF or err == nil. The\n> next Read should return 0, os.EOF regardless.\"\n>\n\nBut you no longer behave like ioutil.ReadAll.\n\nIf ioutil.ReadAll gets ErrFoo from Read, it returns ErrFoo.\n\nYour wrapper discards ErrFoo, Reads again to verify that it's EOF, but then\nalways returns a nil err.\n",
			"disapproval": false,
			"date": "2011-11-16 19:17:57.835664",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-16 19:25:49.112852",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> But you no longer behave like ioutil.ReadAll.\n> If ioutil.ReadAll gets ErrFoo from Read, it returns ErrFoo.\n> Your wrapper discards ErrFoo, Reads again to verify that it's EOF, but then\n> always returns a nil err.\n\nYou're right. Please see if it makes sense now.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-11-16 19:20:39.204489",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=dca37ec4ec50 ***\n\nnet/http: fix EOF handling on response body\n\nhttp.Response is currently returning 0, nil on EOF.\n\nR=golang-dev, bradfitz, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5394047",
			"disapproval": false,
			"date": "2011-11-16 19:35:54.426280",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 5394047: net/http: fix EOF handling on response body",
	"created": "2011-11-16 18:43:52.842927",
	"patchsets": [
		1,
		2001,
		3003,
		3004,
		6001,
		8,
		5004
	],
	"modified": "2011-11-16 19:35:57.710297",
	"closed": true,
	"issue": 5394047
}