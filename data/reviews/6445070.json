{
	"description": "net: enable File method for sockets on windows\n\nThis CL implements dup method on netFD and makes it possible\nto use File method for ProtocolConn on Windows.\n\nFixes issue 3827.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com",
		"minux.ma@gmail.com",
		"anacrolix@gmail.com"
	],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/16 10:40:15, mikio wrote:\n> PTAL\n> \n\ntest does not compile now:\n\n# GOOS=windows go test -c\n# net\n./file_test.go:220: cannot use int(lnf.Fd()) (type int) as type syscall.Handle in function argument\n./file_test.go:233: cannot use int(cf.Fd()) (type int) as type syscall.Handle in function argument\n\n> \n> > Does it? Lets see some tests to demonstrate that.\n> \n> Sure, done.\n> \n\nI do not think so. All your new test does is call syscall and check for result. If you test changes some socket option, I want the test to demonstrate the effect of that change, in one way or the other.\n\n> > And secondly, if all we are trying to do here is get access to socket handle,\n> > then perhaps it is a roundabout way of getting to it.\n> \n> Does the same signature on various ProtocolConn across over \n> platforms make sense? ...\n\nSure, but having (...).Handle() function to return socket handle does the job and simple at the same time.\n\n> ... Also I'd like to use existing abstraction\n> layers we already have like below.\n> \n> net.Conn over os.File over uintptr over int/uint32 for posix or syscall.Handle\n> for windows.\n\nI do not see the benefit. I am also not convinced yet that exposing \"duplicate\" handle will provide required functionality.\n\nAlex",
			"disapproval": false,
			"date": "2012-08-17 06:38:35.206700",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-14 11:37:24.371830",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 15, 2012 at 3:46 PM,  <alex.brainman@gmail.com> wrote:\r\n\r\n> TestFileMethod pass on windows. But I do not see it doing anything\r\n> useful there. What is the purpose of adding this functionality? How can\r\n> someone use it for anything?\r\n\r\nIt allows opeating IP-level socket options from outside.\r\n\r\nfunc main() {\r\n    c, err := Dial()\r\n    f, err = c.File()\r\n    syscall.SetsockoptInt(int(f.Fd()), syscall.IPPROTO_IP,\r\nsyscall.IP_RECVDSTADDR, 1)\r\n}\r\n",
			"disapproval": false,
			"date": "2012-08-15 11:11:45.939950",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Unfortunately, the tests fail:\n\n...\n=== RUN TestFileListener\n--- FAIL: TestFileListener (0.02 seconds)\nfile_test.go:46: \tFileListener failed: FileListener: not supported by windows\n=== RUN TestFilePacketConn\n--- FAIL: TestFilePacketConn (0.00 seconds)\nfile_test.go:115: \tFilePacketConn failed: FilePacketConn: not supported by windows\n...\n\nAlex",
			"disapproval": false,
			"date": "2012-08-12 08:33:24.455920",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 16, 2012 at 1:11 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On 2012/08/15 16:08:18, minux wrote:\r\n>\r\n>> src/pkg/net/fd_windows.go:574: // Unimplemented functions.\r\n>> dup() is no longer unimplemented function, please move this comment\r\n>>\r\n> down\r\n>\r\n> pls have a look at #2 but thx.\r\n>\r\noops, sorry, my comment arrived late.\r\n",
			"disapproval": false,
			"date": "2012-08-15 17:28:16.973310",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/12 08:33:24, brainman wrote:\n\n> Unfortunately, the tests fail:\n\nOuch, thanks for your confirmation.\nI'll add an another test and send CL to the review.",
			"disapproval": false,
			"date": "2012-08-14 11:01:45.517600",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "TestFileMethod pass on windows. But I do not see it doing anything useful there. What is the purpose of adding this functionality? How can someone use it for anything?\n\nAlex",
			"disapproval": false,
			"date": "2012-08-15 06:46:22.769670",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6445070/diff/7001/src/pkg/net/fd_windows.go\nFile src/pkg/net/fd_windows.go (right):\n\nhttp://codereview.appspot.com/6445070/diff/7001/src/pkg/net/fd_windows.go#newcode574\nsrc/pkg/net/fd_windows.go:574: // Unimplemented functions.\ndup() is no longer unimplemented function, please move this comment down",
			"disapproval": false,
			"date": "2012-08-15 16:08:18.139790",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/15 11:11:45, mikio wrote:\n> ...\n> \n> It allows opeating IP-level socket options from outside.\n> \n> func main() {\n>     c, err := Dial()\n>     f, err = c.File()\n>     syscall.SetsockoptInt(int(f.Fd()), syscall.IPPROTO_IP,\n> syscall.IP_RECVDSTADDR, 1)\n> }\n\nDoes it? Lets see some tests to demonstrate that. Otherwise, it just a wishful thinking on our part. How do we know that duplicate of our original handle will provide all these things that we expect it to provide?\n\nAnd secondly, if all we are trying to do here is get access to socket handle, then perhaps it is a roundabout way of getting to it. Why this\n\nc, err := Dial(...)\nif err != nil {\n\treturn err\n}\ndefer c.Close()\nf, err := c.File()\nif err != nil {\n\treturn err\n}\ndefer f.Close()\nprintln(f.Fd())\n\nis better, then this\n\nc, err := Dial(...)\nif err != nil {\n\treturn err\n}\ndefer c.Close()\nprintln(c.Handle())\n\n?\n\nAlex",
			"disapproval": false,
			"date": "2012-08-15 23:53:18.496640",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-16 10:16:37.861340",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/15 16:08:18, minux wrote:\n\n> src/pkg/net/fd_windows.go:574: // Unimplemented functions.\n> dup() is no longer unimplemented function, please move this comment down\n\npls have a look at #2 but thx.",
			"disapproval": false,
			"date": "2012-08-15 17:11:02.497740",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/17 06:38:35, brainman wrote:\n\n> test does not compile now:\n\noops, sorry.\n\n> I do not think so. All your new test does is call syscall and check for result.\n> If you test changes some socket option, I want the test to demonstrate the\n> effect of that change, in one way or the other.\n\nhmm, let me sleep on it.\n\n> I do not see the benefit. I am also not convinced yet that exposing \"duplicate\"\n> handle will provide required functionality.",
			"disapproval": false,
			"date": "2012-08-21 12:17:21.985150",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2012/08/15 23:53:18, brainman wrote:\n\n> Does it? Lets see some tests to demonstrate that.\n\nSure, done.\n\n> And secondly, if all we are trying to do here is get access to socket handle,\n> then perhaps it is a roundabout way of getting to it.\n\nDoes the same signature on various ProtocolConn across over \nplatforms make sense? Also I'd like to use existing abstraction\nlayers we already have like below.\n\nnet.Conn over os.File over uintptr over int/uint32 for posix or syscall.Handle for windows.",
			"disapproval": false,
			"date": "2012-08-16 10:40:15.614590",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I give up, will abandon.\n\nalso rsc suggests to using reflect to dig up underlying\nunix file descriptor or windows handle, I'll go this way.",
			"disapproval": false,
			"date": "2012-09-04 03:39:12.258450",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-04 03:40:29.170220",
			"approval": false
		},
		{
			"sender": "anacrolix@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"anacrolix@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/04 03:40:29, mikio wrote:\n> *** Abandoned ***\n\n@mikio: What was the reason for giving up? Process too difficult or did your proposed solution not work?",
			"disapproval": false,
			"date": "2012-09-06 14:03:14.987850",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 6, 2012 at 11:03 PM,  <anacrolix@gmail.com> wrote:\r\n\r\n> @mikio: What was the reason for giving up? Process too difficult or did\r\n> your proposed solution not work?\r\n\r\nThe latter. I need the underlying socket descriptor for socket options.\r\nIn the review process Russ pointed out:\r\n\r\n<http://codereview.appspot.com/6482044/>\r\nPlease don't use .File() to get a file descriptor. That will disable\r\nnon-blocking I/O on the connection. The fd is intentionally hidden, precisely to\r\nkeep people from touching it behind package net's back. To get around that I\r\nwould suggest using reflect to dig into the structs and extract the fd integer.\r\n",
			"disapproval": false,
			"date": "2012-09-06 14:13:23.714310",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6445070: net: enable File method for sockets on windows",
	"created": "2012-08-03 15:21:25.677600",
	"patchsets": [
		7001,
		14001,
		16001
	],
	"modified": "2012-09-06 14:03:15.175540",
	"closed": true,
	"issue": 6445070
}