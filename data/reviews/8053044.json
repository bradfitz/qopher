{
	"description": "cmd/gc: instrument arrays properly in race detector.\n\nThe previous implementation would only record access to\nthe address of the array but the memory access to the whole\nmemory range must be recorded instead.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-27 21:58:29.348350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now go test -race runtime/race complains:\r\n\r\n=== RUN TestRace\r\n[...]\r\nRaceFailingSliceStruct                   .\r\nRaceFailingAppendSliceStruct             .\r\n[...]\r\nPassed 266 of 269 tests (98.88%, 0+, 3-)\r\n5 expected failures (2 has not fail)\r\n--- FAIL: TestRace (12.45 seconds)\r\nFAIL\r\nexit status 1\r\nFAIL\truntime/race\t12.474s\r\n\r\nBut I am pretty positive that these tests still fail, something looks wrong.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:01:42.403940",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/27 22:01:42, remyoudompheng wrote:\n> Now go test -race runtime/race complains:\n> \n> === RUN TestRace\n> [...]\n> RaceFailingSliceStruct                   .\n> RaceFailingAppendSliceStruct             .\n> [...]\n> Passed 266 of 269 tests (98.88%, 0+, 3-)\n> 5 expected failures (2 has not fail)\n> --- FAIL: TestRace (12.45 seconds)\n> FAIL\n> exit status 1\n> FAIL\truntime/race\t12.474s\n> \n> But I am pretty positive that these tests still fail, something looks wrong.\n\nIn clean tree with this CL, I see:\n\nPassed 264 of 269 tests (98.14%, 0+, 5-)\n5 expected failures (0 has not fail)",
			"disapproval": false,
			"date": "2013-03-28 11:11:45.338220",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8053044/diff/5001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/8053044/diff/5001/src/cmd/gc/racewalk.c#newcode471\nsrc/cmd/gc/racewalk.c:471: if(callinstr(&f, init, wr, 0)) {\nNow I am thinking, since we pass &f to callinstr(), can't it change f?..\nI can't come up with a counter-example and function calls should be generally moved away by previous passes. But I've added that 'hascalls' logic because there were precedents.\n\nPlease add a check that f is not changed. This bug would be painful to debug.\n\nhttps://codereview.appspot.com/8053044/diff/5001/src/cmd/gc/racewalk.c#newcode486\nsrc/cmd/gc/racewalk.c:486: if(callinstr(&f, init, wr, 0)) {\nand here as wel",
			"disapproval": false,
			"date": "2013-03-28 11:27:20.545670",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/28 11:11:45, dvyukov wrote:\n> On 2013/03/27 22:01:42, remyoudompheng wrote:\n> > Now go test -race runtime/race complains:\n> > \n> > === RUN TestRace\n> > [...]\n> > RaceFailingSliceStruct                   .\n> > RaceFailingAppendSliceStruct             .\n> > [...]\n> > Passed 266 of 269 tests (98.88%, 0+, 3-)\n> > 5 expected failures (2 has not fail)\n> > --- FAIL: TestRace (12.45 seconds)\n> > FAIL\n> > exit status 1\n> > FAIL\truntime/race\t12.474s\n> > \n> > But I am pretty positive that these tests still fail, something looks wrong.\n> \n> In clean tree with this CL, I see:\n> \n> Passed 264 of 269 tests (98.14%, 0+, 5-)\n> 5 expected failures (0 has not fail)\n\nAh, I got confused because race_tes.go runs \"go\" regardless of what GOROOT may be, so it is not necessarily testing what I think it does.",
			"disapproval": false,
			"date": "2013-03-28 18:58:30.129280",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does it LGTY with my remark?\n\nhttps://codereview.appspot.com/8053044/diff/5001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/8053044/diff/5001/src/cmd/gc/racewalk.c#newcode471\nsrc/cmd/gc/racewalk.c:471: if(callinstr(&f, init, wr, 0)) {\nOn 2013/03/28 11:27:20, dvyukov wrote:\n> Now I am thinking, since we pass &f to callinstr(), can't it change f?..\n> I can't come up with a counter-example and function calls should be generally\n> moved away by previous passes. But I've added that 'hascalls' logic because\n> there were precedents.\n> \n> Please add a check that f is not changed. This bug would be painful to debug.\n\nI don't understand, why does it matter that f can change? typecheck can also change f. But on the next loop iteration the value of f is discarded so we don't care. Do we ?",
			"disapproval": false,
			"date": "2013-03-28 19:03:34.735540",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-28 22:49:10.088490",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-28 22:49:21.096220",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suggest a completely different approach now. I may revert to the previous patchste if needed.\n\nThe new test, TestRaceNestedArrayCopy, makes the previous patch go out of memory even when just using Point32k instead of Point1M.\n\nhttps://codereview.appspot.com/8053044/diff/23001/src/pkg/runtime/race/testdata/mop_test.go\nFile src/pkg/runtime/race/testdata/mop_test.go (right):\n\nhttps://codereview.appspot.com/8053044/diff/23001/src/pkg/runtime/race/testdata/mop_test.go#newcode510\nsrc/pkg/runtime/race/testdata/mop_test.go:510: func TestRaceNestedArrayCopy(t *testing.T) {\nThis example is ridiculous but similar things may happen in real life. I'm not sure we want the compiler to generate 1 million instructions just because a [1<<20]struct{a, b int} was accessed.",
			"disapproval": false,
			"date": "2013-03-28 22:52:16.230440",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I need some time to review this.\n\nYes, it's quite radical. I need to do more extensive testing if we are going to push it before Go1.1.\n\nFYI, for C when you do memcpy(p1, p2, 1<<30), ThreadSanitizer handles only beginning of the array, because it's a way too expensive to process whole array. And if there is a race, high chances it's either on the beginning or on each element. Note that TSan internal shadow memory is 4x larger than user memory, so 1GB it needs to touch 4GB of memory.\n\nIt's good if the range accesses are handled completely in runtime, because then I can implement similar logic.\n\nIt's bad that for struct {uint64; bool; bool}, we need to process 16 memory accesses instead of 3.",
			"disapproval": false,
			"date": "2013-03-29 06:45:03.506190",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/08 15:18:24, r wrote:\n> please write a more thorough CL description. i had no idea what 'instrumentation\n>  of arrays' would refer to.\n\nDone.",
			"disapproval": false,
			"date": "2013-06-09 17:04:33.146710",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-08 07:22:59.496160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please write a more thorough CL description. i had no idea what 'instrumentation  of arrays' would refer to.",
			"disapproval": false,
			"date": "2013-06-08 15:18:24.611840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, but please wait until I update the race runtime to better handle range accesses (https://codereview.appspot.com/10082043/)",
			"disapproval": false,
			"date": "2013-06-09 16:58:56.749370",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/09 16:58:56, dvyukov wrote:\n> LGTM, but please wait until I update the race runtime to better handle range\n> accesses (https://codereview.appspot.com/10082043/)\n\nYes, for some reason I had to rebuild a linux/amd64 syso with your patches for it to work.",
			"disapproval": false,
			"date": "2013-06-09 17:01:38.838930",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/09 17:04:33, remyoudompheng wrote:\n> On 2013/06/08 15:18:24, r wrote:\n> > please write a more thorough CL description. i had no idea what\n> 'instrumentation\n> >  of arrays' would refer to.\n> \n> Done.\n\nBtw, does it handle struct initialization?\nx := &X{...}",
			"disapproval": false,
			"date": "2013-06-09 17:07:34.076050",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dvyukov@google.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-13 21:37:46.435470",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-14 04:27:58.314610",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=52d53d0e177e ***\n\ncmd/gc: instrument arrays properly in race detector.\n\nThe previous implementation would only record access to\nthe address of the array but the memory access to the whole\nmemory range must be recorded instead.\n\nR=golang-dev, dvyukov, r\nCC=golang-dev\nhttps://codereview.appspot.com/8053044",
			"disapproval": false,
			"date": "2013-06-14 07:15:54.297080",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 8053044: cmd/gc: instrument arrays properly in race detector.",
	"created": "2013-03-27 21:10:52.408810",
	"patchsets": [
		1,
		2001,
		5001,
		19001,
		23001,
		35001,
		44001,
		49001,
		54001
	],
	"modified": "2013-06-14 07:15:55.918650",
	"closed": true,
	"issue": 8053044
}