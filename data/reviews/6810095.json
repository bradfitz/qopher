{
	"description": "runtime/race: more precise handling of finalizers\nCurrently race detector runtime just disables race detection in the finalizer goroutine.\nIt has false positives when a finalizer writes to shared memory -- the race with finalizer is reported in a normal goroutine that accesses the same memory.\nAfter this change I am going to synchronize the finalizer goroutine with the rest of the world in racefingo(). This is closer to what happens in reality and so\ndoes not have false positives.\nAnd also add README file with instructions how to build the runtime.",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please update the description.\n\nhttps://codereview.appspot.com/6810095/diff/5002/src/pkg/runtime/race/README\nFile src/pkg/runtime/race/README (right):\n\nhttps://codereview.appspot.com/6810095/diff/5002/src/pkg/runtime/race/README#newcode10\nsrc/pkg/runtime/race/README:10: You may need gcc >= 4.6.1. gcc 4.3 produces bad syso files with weak symbols\nis this still the case? CL 6783050 just modified cmd/ld to support weak symbols.\nsorry i don't have gcc 4.3 to test.\nif it's still true, could you please mail me a copy of bad linux/amd64 syso off\nlist so that i can fix the issue in cmd/6l?",
			"disapproval": false,
			"date": "2012-11-09 11:29:28.654670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-12 20:41:03.715740",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-08 14:27:59.210070",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/08 14:27:59, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://dvyukov%2540google.com%40code.google.com/p/go/\n\nI've added here necessary runtime changes and the README file.\nThe runtime is built on revision 167609.",
			"disapproval": false,
			"date": "2012-11-09 11:24:00.499190",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 9, 2012 at 7:43 PM, <dvyukov@google.com> wrote:\r\n>\r\n> Seem to work now.\r\n>\r\ngood to hear.\r\n\r\n>\r\n> However gcc 4.4 still fails when I build in debug mode:\r\n>\r\n> gotsan.cc:1485: sorry, unimplemented: inlining failed in call to \u2018void\r\n> __tsan::MemoryAccessImpl(__**tsan::ThreadState*, __sanitizer::uptr, int,\r\n> bool, __tsan::FastState, __sanitizer::u64*, __tsan::Shadow)\u2019: function\r\n> not inlinable\r\n>\r\n> I rephrased it as \"Tested with gcc 4.6.1 and 4.7.0.\u201c\r\n>\r\nthe README looks fine to me now.\r\n",
			"disapproval": false,
			"date": "2012-11-11 17:48:41.341770",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/09 11:29:28, minux wrote:\n> please update the description.\n\nDone.\n\n> https://codereview.appspot.com/6810095/diff/5002/src/pkg/runtime/race/README\n> File src/pkg/runtime/race/README (right):\n> \n> https://codereview.appspot.com/6810095/diff/5002/src/pkg/runtime/race/README#newcode10\n> src/pkg/runtime/race/README:10: You may need gcc >= 4.6.1. gcc 4.3 produces bad\n> syso files with weak symbols\n> is this still the case? CL 6783050 just modified cmd/ld to support weak symbols.\n> sorry i don't have gcc 4.3 to test.\n> if it's still true, could you please mail me a copy of bad linux/amd64 syso off\n> list so that i can fix the issue in cmd/6l?\n\nI will try to reproduce it.",
			"disapproval": false,
			"date": "2012-11-09 11:31:55.797130",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/09 11:31:55, dvyukov wrote:\n> On 2012/11/09 11:29:28, minux wrote:\n> > please update the description.\n> \n> Done.\n> \n> > https://codereview.appspot.com/6810095/diff/5002/src/pkg/runtime/race/README\n> > File src/pkg/runtime/race/README (right):\n> > \n> >\n> https://codereview.appspot.com/6810095/diff/5002/src/pkg/runtime/race/README#newcode10\n> > src/pkg/runtime/race/README:10: You may need gcc >= 4.6.1. gcc 4.3 produces\n> bad\n> > syso files with weak symbols\n> > is this still the case? CL 6783050 just modified cmd/ld to support weak\n> symbols.\n> > sorry i don't have gcc 4.3 to test.\n> > if it's still true, could you please mail me a copy of bad linux/amd64 syso\n> off\n> > list so that i can fix the issue in cmd/6l?\n> \n> I will try to reproduce it.\n\nSeem to work now.\n\nHowever gcc 4.4 still fails when I build in debug mode:\n\ngotsan.cc:1485: sorry, unimplemented: inlining failed in call to \u2018void __tsan::MemoryAccessImpl(__tsan::ThreadState*, __sanitizer::uptr, int, bool, __tsan::FastState, __sanitizer::u64*, __tsan::Shadow)\u2019: function not inlinable\n\nI rephrased it as \"Tested with gcc 4.6.1 and 4.7.0.\"",
			"disapproval": false,
			"date": "2012-11-09 11:43:38.539750",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d1854dd425b2 ***\n\nruntime/race: more precise handling of finalizers\nCurrently race detector runtime just disables race detection in the finalizer goroutine.\nIt has false positives when a finalizer writes to shared memory -- the race with finalizer is reported in a normal goroutine that accesses the same memory.\nAfter this change I am going to synchronize the finalizer goroutine with the rest of the world in racefingo(). This is closer to what happens in reality and so\ndoes not have false positives.\nAnd also add README file with instructions how to build the runtime.\n\nR=golang-dev, minux.ma, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6810095",
			"disapproval": false,
			"date": "2012-11-14 13:23:50.340250",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6810095: runtime/race: more precise handling of finalizers",
	"created": "2012-11-07 17:03:41.362130",
	"patchsets": [
		1,
		2001,
		3,
		4003,
		5002,
		12002,
		14001
	],
	"modified": "2012-11-14 13:23:51.480150",
	"closed": true,
	"issue": 6810095
}