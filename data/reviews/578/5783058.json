{
	"description": "misc/dist: produce a zip file under windows\n\nUpdates issue 3254.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"rsc@golang.org",
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-03-08 23:51:35.386665",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 7:43 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Mar 8, 2012 at 22:43, Russ Cox <rsc@golang.org> wrote:\n> > yet another reason not to bother.\n>\n> by this i mean a reason for readers not to bother implementing\n> streaming mode, not a reason not to fix the bug.  :-)\n>\n\nOur streaming read mode is broken right now anyway.  It looks like we have\nsome code to do it, but due to a couple lucky accidents, it just doesn't\nwork in a harmless way.\n\n(the checksumReader has a zipr.ioReader where it thinks it can read the\ndata descriptor from, but that's initialized to the wrong variable, a\nSectionReader instead of the underlying reader, which means it always\nreturns EOF, which is what the outer reader should be returning anyway....\nso no crc32 checking.)\n\nI'm fixing that bug at the same time because it's easy.\n",
			"disapproval": false,
			"date": "2012-03-09 03:46:38.422515",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 7:47 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Mar 8, 2012 at 22:46, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > Our streaming read mode is broken right now anyway.  It looks like we\n> have\n> > some code to do it, but due to a couple lucky accidents, it just doesn't\n> > work in a harmless way.\n> >\n> > (the checksumReader has a zipr.ioReader where it thinks it can read the\n> data\n> > descriptor from, but that's initialized to the wrong variable, a\n> > SectionReader instead of the underlying reader, which means it always\n> > returns EOF, which is what the outer reader should be returning\n> anyway....\n> > so no crc32 checking.)\n> >\n> > I'm fixing that bug at the same time because it's easy.\n>\n> Sorry for the garbled mail - I was only trying to explain why I think\n> fixing the writer will not affect other readers, particularly Windows.\n> I agree that all our bugs should be fixed.\n>\n\nnaah, I followed. My reply might just also be confusing. CL should be more\nclear.\n",
			"disapproval": false,
			"date": "2012-03-09 03:48:44.904767",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9 March 2012 10:57, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> What's so special about 7za? \u00a0Why can't go make zip files with archive/zip?\n\nhttp://code.google.com/p/go/issues/detail?id=3252\n\nI'm a little worried about it. We already need a bunch of\ndependencies, throwing 7z in there isn't adding much.\n\n\n> On Thu, Mar 8, 2012 at 3:51 PM, <adg@golang.org> wrote:\n>>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com,\n>>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg\n>>\n>>\n>> Description:\n>> misc/dist: produce a zip file under windows\n>>\n>> Fixes issue 3254.\n>>\n>> Please review this at http://codereview.appspot.com/5783058/\n>>\n>> Affected files:\n>> \u00a0M misc/dist/bindist.go\n>>\n>>\n>> Index: misc/dist/bindist.go\n>> ===================================================================\n>> --- a/misc/dist/bindist.go\n>> +++ b/misc/dist/bindist.go\n>> @@ -158,15 +158,17 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0// Create packages.\n>> - \u00a0 \u00a0 \u00a0 targ := fmt.Sprintf(\"go.%s.%s-%s\", version, b.OS, b.Arch)\n>> + \u00a0 \u00a0 \u00a0 base := fmt.Sprintf(\"go.%s.%s-%s\", version, b.OS, b.Arch)\n>> + \u00a0 \u00a0 \u00a0 var targs []string\n>> \u00a0 \u00a0 \u00a0 \u00a0switch b.OS {\n>> \u00a0 \u00a0 \u00a0 \u00a0case \"linux\", \"freebsd\", \"\":\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// build tarball\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targ := base + \".tar.gz\"\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if b.Source {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0targ = fmt.Sprintf(\"go.%s.src\", version)\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targ += \".tar.gz\"\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0_, err = b.run(\"\", \"tar\", \"czf\", targ, \"-C\", work, \"go\")\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targs = append(targs, targ)\n>> \u00a0 \u00a0 \u00a0 \u00a0case \"darwin\":\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// arrange work so it's laid out as the dest filesystem\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0etc := filepath.Join(b.root, \"misc/dist/darwin/etc\")\n>> @@ -191,7 +193,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return errors.New(\"couldn't find\n>> PackageMaker\")\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targ += \".pkg\"\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targ := base+\".pkg\"\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0scripts := filepath.Join(work,\n>> \"usr/local/go/misc/dist/darwin/scripts\")\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0_, err = b.run(\"\", pm, \"-v\",\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"-r\", work,\n>> @@ -201,7 +203,14 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"--title\", \"Go\",\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"--version\", \"1.0\",\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"--target\", \"10.5\")\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targs = append(targs, targ)\n>> \u00a0 \u00a0 \u00a0 \u00a0case \"windows\":\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Create ZIP file.\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 zip := base + \".zip\"\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _, err = b.run(work, \"7za\", \"a\", \"-tzip\", \"-mx=9\", zip,\n>> \"go\")\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targs = append(targs, zip)\n>> +\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Create MSI installer.\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0win := filepath.Join(b.root, \"misc/dist/windows\")\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0installer := filepath.Join(win, \"installer.wxs\")\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0appfiles := filepath.Join(work, \"AppFiles.wxs\")\n>> @@ -240,11 +249,17 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Copy installer to target file.\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targ += \".msi\"\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targ := base + \".msi\"\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = cp(targ, msi)\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targs = append(targs, targ)\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0if err == nil && password != \"\" {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.upload(version, targ)\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _, targ := range targs {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.upload(version, targ)\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0return err\n>> \u00a0}\n>> @@ -322,9 +337,19 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0labels = append(labels, \"Type-Installer\", \"OpSys-OSX\")\n>> \u00a0 \u00a0 \u00a0 \u00a0case \"windows\":\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0os_ = \"Windows\"\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 labels = append(labels, \"Type-Installer\", \"OpSys-Windows\")\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 labels = append(labels, \"OpSys-Windows\")\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0summary := fmt.Sprintf(\"Go %s %s (%s)\", version, os_, arch)\n>> + \u00a0 \u00a0 \u00a0 if b.OS == \"windows\" {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 switch {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case strings.HasSuffix(filename, \".msi\"):\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 labels = append(labels, \"Type-Installer\")\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary += \" MSI installer\"\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case strings.HasSuffix(filename, \".zip\"):\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 labels = append(labels, \"Type-Archive\")\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary += \" ZIP archive\"\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n>> + \u00a0 \u00a0 \u00a0 }\n>> \u00a0 \u00a0 \u00a0 \u00a0if b.Source {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0labels = append(labels, \"Type-Source\")\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0summary = fmt.Sprintf(\"Go %s (source only)\", version)\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-03-08 23:59:44.177641",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not thrilled about adding new dependencies here.\nAre there any reports that the zip file cannot be read on\nWindows?  I will fix issue 3252 tonight.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-09 03:15:09.022002",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9 March 2012 11:17,  <alex.brainman@gmail.com> wrote:\n> On 2012/03/08 23:59:44, adg wrote:\n>>\n>> On 9 March 2012 10:57, Brad Fitzpatrick <mailto:bradfitz@golang.org>\n>\n> wrote:\n>>\n>> > What's so special about 7za? &nbsp;Why can't go make zip files with\n>\n> archive/zip?\n>\n>> http://code.google.com/p/go/issues/detail?id=3252\n>\n>\n>> I'm a little worried about it. We already need a bunch of\n>> dependencies, throwing 7z in there isn't adding much.\n>\n>\n>\n> I am more worried about 7z. Go zip package we can fix.\n>\n> And that is how we make zip package right. We always eat our own dog\n> food. What is different here?\n\nWe're shooting for a release candidate in 4 days. Fixing archive/zip\nis less important than providing a reliable distribution archive.\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-03-09 00:20:54.696938",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/09 03:18:03, rsc wrote:\n> ...\n> \n> I am behind: Brad has already found the bug.  Let's drop 7za here.\n\nLet me make little zip file with our zip writer and try it on couple computers here first. I suspect, no one tried to do it on Windows :-)\n\nAlex",
			"disapproval": false,
			"date": "2012-03-09 03:19:56.272940",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I tries our current zip, and it writes files that I can read on my computer xp and windows 7. Also, \"testing\" it with some old pkware utilities reports all OK.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-09 03:36:40.001417",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 22:46, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Our streaming read mode is broken right now anyway. \u00a0It looks like we have\n> some code to do it, but due to a couple lucky accidents, it just doesn't\n> work in a harmless way.\n>\n> (the checksumReader has a zipr.ioReader where it thinks it can read the data\n> descriptor from, but that's initialized to the wrong variable, a\n> SectionReader instead of the underlying reader, which means it always\n> returns EOF, which is what the outer reader should be returning anyway....\n> so no crc32 checking.)\n>\n> I'm fixing that bug at the same time because it's easy.\n\nSorry for the garbled mail - I was only trying to explain why I think\nfixing the writer will not affect other readers, particularly Windows.\nI agree that all our bugs should be fixed.\n",
			"disapproval": false,
			"date": "2012-03-09 03:47:53.123348",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2271b03494fb ***\n\nmisc/dist: produce a zip file under windows\n\nUpdates issue 3254.\n\nR=golang-dev, bradfitz, alex.brainman\nCC=golang-dev\nhttp://codereview.appspot.com/5783058",
			"disapproval": false,
			"date": "2012-03-09 01:57:46.103960",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's so special about 7za?  Why can't go make zip files with archive/zip?\n\nOn Thu, Mar 8, 2012 at 3:51 PM, <adg@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> misc/dist: produce a zip file under windows\n>\n> Fixes issue 3254.\n>\n> Please review this at http://codereview.appspot.com/**5783058/<http://codereview.appspot.com/5783058/>\n>\n> Affected files:\n>  M misc/dist/bindist.go\n>\n>\n> Index: misc/dist/bindist.go\n> ==============================**==============================**=======\n> --- a/misc/dist/bindist.go\n> +++ b/misc/dist/bindist.go\n> @@ -158,15 +158,17 @@\n>        }\n>\n>        // Create packages.\n> -       targ := fmt.Sprintf(\"go.%s.%s-%s\", version, b.OS, b.Arch)\n> +       base := fmt.Sprintf(\"go.%s.%s-%s\", version, b.OS, b.Arch)\n> +       var targs []string\n>        switch b.OS {\n>        case \"linux\", \"freebsd\", \"\":\n>                // build tarball\n> +               targ := base + \".tar.gz\"\n>                if b.Source {\n>                        targ = fmt.Sprintf(\"go.%s.src\", version)\n>                }\n> -               targ += \".tar.gz\"\n>                _, err = b.run(\"\", \"tar\", \"czf\", targ, \"-C\", work, \"go\")\n> +               targs = append(targs, targ)\n>        case \"darwin\":\n>                // arrange work so it's laid out as the dest filesystem\n>                etc := filepath.Join(b.root, \"misc/dist/darwin/etc\")\n> @@ -191,7 +193,7 @@\n>                                return errors.New(\"couldn't find\n> PackageMaker\")\n>                        }\n>                }\n> -               targ += \".pkg\"\n> +               targ := base+\".pkg\"\n>                scripts := filepath.Join(work, \"usr/local/go/misc/dist/**\n> darwin/scripts\")\n>                _, err = b.run(\"\", pm, \"-v\",\n>                        \"-r\", work,\n> @@ -201,7 +203,14 @@\n>                        \"--title\", \"Go\",\n>                        \"--version\", \"1.0\",\n>                        \"--target\", \"10.5\")\n> +               targs = append(targs, targ)\n>        case \"windows\":\n> +               // Create ZIP file.\n> +               zip := base + \".zip\"\n> +               _, err = b.run(work, \"7za\", \"a\", \"-tzip\", \"-mx=9\", zip,\n> \"go\")\n> +               targs = append(targs, zip)\n> +\n> +               // Create MSI installer.\n>                win := filepath.Join(b.root, \"misc/dist/windows\")\n>                installer := filepath.Join(win, \"installer.wxs\")\n>                appfiles := filepath.Join(work, \"AppFiles.wxs\")\n> @@ -240,11 +249,17 @@\n>                        return err\n>                }\n>                // Copy installer to target file.\n> -               targ += \".msi\"\n> +               targ := base + \".msi\"\n>                err = cp(targ, msi)\n> +               targs = append(targs, targ)\n>        }\n>        if err == nil && password != \"\" {\n> -               err = b.upload(version, targ)\n> +               for _, targ := range targs {\n> +                       err = b.upload(version, targ)\n> +                       if err != nil {\n> +                               return err\n> +                       }\n> +               }\n>        }\n>        return err\n>  }\n> @@ -322,9 +337,19 @@\n>                labels = append(labels, \"Type-Installer\", \"OpSys-OSX\")\n>        case \"windows\":\n>                os_ = \"Windows\"\n> -               labels = append(labels, \"Type-Installer\", \"OpSys-Windows\")\n> +               labels = append(labels, \"OpSys-Windows\")\n>        }\n>        summary := fmt.Sprintf(\"Go %s %s (%s)\", version, os_, arch)\n> +       if b.OS == \"windows\" {\n> +               switch {\n> +               case strings.HasSuffix(filename, \".msi\"):\n> +                       labels = append(labels, \"Type-Installer\")\n> +                       summary += \" MSI installer\"\n> +               case strings.HasSuffix(filename, \".zip\"):\n> +                       labels = append(labels, \"Type-Archive\")\n> +                       summary += \" ZIP archive\"\n> +               }\n> +       }\n>        if b.Source {\n>                labels = append(labels, \"Type-Source\")\n>                summary = fmt.Sprintf(\"Go %s (source only)\", version)\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-08 23:57:32.324985",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/08 23:59:44, adg wrote:\n> On 9 March 2012 10:57, Brad Fitzpatrick <mailto:bradfitz@golang.org> wrote:\n> > What's so special about 7za? &nbsp;Why can't go make zip files with archive/zip?\n> \n> http://code.google.com/p/go/issues/detail?id=3252\n> \n> I'm a little worried about it. We already need a bunch of\n> dependencies, throwing 7z in there isn't adding much.\n> \n\nI am more worried about 7z. Go zip package we can fix.\n\nAnd that is how we make zip package right. We always eat our own dog food. What is different here?\n\nAlex",
			"disapproval": false,
			"date": "2012-03-09 00:17:44.368989",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-09 00:22:57.559263",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 22:15, Russ Cox <rsc@golang.org> wrote:\n> I am not thrilled about adding new dependencies here.\n> Are there any reports that the zip file cannot be read on\n> Windows? \u00a0I will fix issue 3252 tonight.\n\nI am behind: Brad has already found the bug.  Let's drop 7za here.\n",
			"disapproval": false,
			"date": "2012-03-09 03:18:03.807755",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 7:18 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Mar 8, 2012 at 22:15, Russ Cox <rsc@golang.org> wrote:\n> > I am not thrilled about adding new dependencies here.\n> > Are there any reports that the zip file cannot be read on\n> > Windows?  I will fix issue 3252 tonight.\n>\n> I am behind: Brad has already found the bug.  Let's drop 7za here.\n>\n\nThe writer is fixed (CL pending). I'm working on fixing the reader and\nadding tests now, which will be in the same CL.\n",
			"disapproval": false,
			"date": "2012-03-09 03:30:39.488436",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You'll need to test again soon.  The upcoming CL adds another 4 \"optional\"\nsignature bytes to each file header.  OS X requires these.  We'll see how\nall your zip readers do with them.  The spec does recommend writing them,\nso I imagine we'll be fine.\n\nOn Thu, Mar 8, 2012 at 7:36 PM, <alex.brainman@gmail.com> wrote:\n\n> I tries our current zip, and it writes files that I can read on my\n> computer xp and windows 7. Also, \"testing\" it with some old pkware\n> utilities reports all OK.\n>\n> Alex\n>\n> http://codereview.appspot.com/**5783058/<http://codereview.appspot.com/5783058/>\n>\n",
			"disapproval": false,
			"date": "2012-03-09 03:38:10.944834",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 22:38, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> You'll need to test again soon. \u00a0The upcoming CL adds another 4 \"optional\"\n> signature bytes to each file header. \u00a0OS X requires these. \u00a0We'll see how\n> all your zip readers do with them. \u00a0The spec does recommend writing them, so\n> I imagine we'll be fine.\n\nAlmost no tools bother reading zip files in streaming mode,\nso I expect this to be a no-op nearly everywhere.  In fact,\nas far as I can tell streaming mode is not even well defined\nwhen using the Store method (there's no way to tell when\nthe payload is over), yet another reason not to bother.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-09 03:43:00.688300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 22:43, Russ Cox <rsc@golang.org> wrote:\n> yet another reason not to bother.\n\nby this i mean a reason for readers not to bother implementing\nstreaming mode, not a reason not to fix the bug.  :-)\n",
			"disapproval": false,
			"date": "2012-03-09 03:43:32.863364",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5783058: misc/dist: produce a zip file under windows",
	"created": "2012-03-08 23:51:28.368661",
	"patchsets": [
		1,
		2001,
		4001,
		4002,
		5,
		4007
	],
	"modified": "2012-03-09 03:36:40.188818",
	"closed": true,
	"issue": 5783058
}