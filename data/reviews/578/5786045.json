{
	"description": "go.crypto/curve25519: add package.\n\nThis consists of ~2000 lines of amd64 assembly and a, much slower,\ngeneric Go version in curve25519.go. The assembly has been ported from\ndjb's public domain sources and the only semantic alterations are to\ndeal with Go's split stacks.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://agl%40golang.org@code.google.com/p/go.crypto/",
			"disapproval": false,
			"date": "2012-03-07 23:00:31.677370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/const_amd64.s\nFile curve25519/const_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/const_amd64.s#newcode20\ncurve25519/const_amd64.s:20: DATA \u00b7_4P0(SB)/8, $0x1FFFFFFFFFFFB4\nEverything from here down appears to be unused?\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go\nFile curve25519/curve25519.go (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode45\ncurve25519/curve25519.go:45: func (c *context) add(xn, zn, xm, zm *big.Int) (x, z *big.Int) {\nYou might want to let the caller pass in x and z so as to control when they get allocated/reused.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode46\ncurve25519/curve25519.go:46: // x\u2083 = 4(x\u00b7x\u2032 - z\u00b7z\u2032)\u00b2 \u00b7 z1\nI don't see the \u00b7 z1 in the code below.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode54\ncurve25519/curve25519.go:54: // z\u2083 = 4(x\u00b7z\u2032 - z\u00b7x\u2032)\u00b2 \u00b7 x1\nSame about \u00b7 x1.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode68\ncurve25519/curve25519.go:68: func (c *context) double(x, z *big.Int) (outx, outz *big.Int) {\nSame about controlling allocation.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/freeze_amd64.s\nFile curve25519/freeze_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/freeze_amd64.s#newcode9\ncurve25519/freeze_amd64.s:9: TEXT \u00b7freeze(SB),7,$96\n$96-8 to futureproof (see comment in next file for explanation).\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/freeze_amd64.s#newcode34\ncurve25519/freeze_amd64.s:34: REDUCELOOP:\nplease unindent this label\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/ladderstep_amd64.s\nFile curve25519/ladderstep_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/ladderstep_amd64.s#newcode9\ncurve25519/ladderstep_amd64.s:9: TEXT \u00b7ladderstep(SB),0,$384\nBecause you're not using (can't use) 7 here, the linker/runtime will \ndo a stack split check on entry to this function, so you need\nto tell the assembler how many bytes of arguments need to\nbe copied into the new stack frame if a split is necessary.\nIt looks like there are 8 bytes of arguments (one pointer)\nso:\n\nTEXT \u00b7ladderstep(SB),0,$384-8\n\nThe - is a separator between two numbers, not a subtraction.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go\nFile curve25519/mont25519_amd64.go (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode45\ncurve25519/mont25519_amd64.go:45: // ScalarMult sets out to in*base where out and base are the x coordinates of\n\"sets out to\" sounds like it is starting on a journey or something.\nMaybe s/out/dst/\ns/in*base/the product in*base/\n\nOne way to avoid the duplicated docs (here and in the portable file)\nis to create a file doc.go that contains\n\npackage curve25519\n\n// ScalarMult ...\nfunc ScalarMult(dst, in, base *[32]byte) {\n    scalarMult(dst, in, base)\n}\netc\n\nand then have these files implement scalarMult.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode63\ncurve25519/mont25519_amd64.go:63: var basePoint = [32]byte{9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\nMaybe move this to doc.go too.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode65\ncurve25519/mont25519_amd64.go:65: // ScalarBaseMult sets out to in*base where out and base are the x coordinates of\nAnd this.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode83\ncurve25519/mont25519_amd64.go:83: (*r)[0] = uint64((*x)[0])\nIndexing into a pointer to an array does not require the explicit deference\n(see setint above).\n\n,s/(*r)/r/g\n,s/(*x)/x/g\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode84\ncurve25519/mont25519_amd64.go:84: (*r)[0] += uint64((*x)[1]) << 8\nFWIW I think this will compile a little nicer if you use a big | instead of a sequence of +=.\n\nr[0] = uint64((*x)[0]) |\n    uint64((*x)[1]) << 8 |\n    ...\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode131\ncurve25519/mont25519_amd64.go:131: (*out)[0] = byte(t[0])\n,s/(*out)/out/g\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode177\ncurve25519/mont25519_amd64.go:177: /* 2 */ square(&z2, x)\nIs it possible to swap the comments to the end of the line?\nHardly a big deal but I think it would be more legible, and\ngofmt will line them up for you.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mul_amd64.s\nFile curve25519/mul_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mul_amd64.s#newcode9\ncurve25519/mul_amd64.s:9: TEXT \u00b7mul(SB),0,$128\nSame comment about the split: $128-24\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/square_amd64.s\nFile curve25519/square_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/square_amd64.s#newcode9\ncurve25519/square_amd64.s:9: TEXT \u00b7square(SB),7,$96\nIt's not required here until the 7 goes away,\nbut just in case that should happen, $96-16.",
			"disapproval": false,
			"date": "2012-03-08 14:49:32.714017",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=83d3a9be6c0e&repo=crypto ***\n\ngo.crypto/curve25519: add package.\n\nThis consists of ~2000 lines of amd64 assembly and a, much slower,\ngeneric Go version in curve25519.go. The assembly has been ported from\ndjb's public domain sources and the only semantic alterations are to\ndeal with Go's split stacks.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5786045\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/const_amd64.s\nFile curve25519/const_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/const_amd64.s#newcode20\ncurve25519/const_amd64.s:20: DATA \u00b7_4P0(SB)/8, $0x1FFFFFFFFFFFB4\nOn 2012/03/08 14:49:32, rsc wrote:\n> Everything from here down appears to be unused?\n\nGood point, thanks. I didn't end up using these.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go\nFile curve25519/curve25519.go (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode45\ncurve25519/curve25519.go:45: func (c *context) add(xn, zn, xm, zm *big.Int) (x, z *big.Int) {\nOn 2012/03/08 14:49:32, rsc wrote:\n> You might want to let the caller pass in x and z so as to control when they get\n> allocated/reused.\n\nYea, I was being lazy here since this is the slow path. Have altered to pass in outx and outz and saved a number of allocations in the main ladder.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode46\ncurve25519/curve25519.go:46: // x\u2083 = 4(x\u00b7x\u2032 - z\u00b7z\u2032)\u00b2 \u00b7 z1\nOn 2012/03/08 14:49:32, rsc wrote:\n> I don't see the \u00b7 z1 in the code below.\n\nz1 is known to be 1 here. Have amended comment.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode54\ncurve25519/curve25519.go:54: // z\u2083 = 4(x\u00b7z\u2032 - z\u00b7x\u2032)\u00b2 \u00b7 x1\nOn 2012/03/08 14:49:32, rsc wrote:\n> Same about \u00b7 x1.\n\nx1 is known to be 1 here. Have amended comment.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/curve25519.go#newcode68\ncurve25519/curve25519.go:68: func (c *context) double(x, z *big.Int) (outx, outz *big.Int) {\nOn 2012/03/08 14:49:32, rsc wrote:\n> Same about controlling allocation.\n\nditto\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/freeze_amd64.s\nFile curve25519/freeze_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/freeze_amd64.s#newcode9\ncurve25519/freeze_amd64.s:9: TEXT \u00b7freeze(SB),7,$96\nOn 2012/03/08 14:49:32, rsc wrote:\n> $96-8 to futureproof (see comment in next file for explanation).\n\nDone.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/ladderstep_amd64.s\nFile curve25519/ladderstep_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/ladderstep_amd64.s#newcode9\ncurve25519/ladderstep_amd64.s:9: TEXT \u00b7ladderstep(SB),0,$384\nOn 2012/03/08 14:49:32, rsc wrote:\n> TEXT \u00b7ladderstep(SB),0,$384-8\n\nThanks!\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go\nFile curve25519/mont25519_amd64.go (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode45\ncurve25519/mont25519_amd64.go:45: // ScalarMult sets out to in*base where out and base are the x coordinates of\nOn 2012/03/08 14:49:32, rsc wrote:\n> \"sets out to\" sounds like it is starting on a journey or something.\n> Maybe s/out/dst/\n> s/in*base/the product in*base/\n> \n> One way to avoid the duplicated docs (here and in the portable file)\n> is to create a file doc.go that contains\n> \n> package curve25519\n> \n> // ScalarMult ...\n> func ScalarMult(dst, in, base *[32]byte) {\n>     scalarMult(dst, in, base)\n> }\n> etc\n> \n> and then have these files implement scalarMult.\n\nDone.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode63\ncurve25519/mont25519_amd64.go:63: var basePoint = [32]byte{9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\nOn 2012/03/08 14:49:32, rsc wrote:\n> Maybe move this to doc.go too.\n\nDone.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode65\ncurve25519/mont25519_amd64.go:65: // ScalarBaseMult sets out to in*base where out and base are the x coordinates of\nOn 2012/03/08 14:49:32, rsc wrote:\n> And this.\n\nDone.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode83\ncurve25519/mont25519_amd64.go:83: (*r)[0] = uint64((*x)[0])\nOn 2012/03/08 14:49:32, rsc wrote:\n> Indexing into a pointer to an array does not require the explicit deference\n> (see setint above).\n> \n> ,s/(*r)/r/g\n> ,s/(*x)/x/g\n\nDone.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode84\ncurve25519/mont25519_amd64.go:84: (*r)[0] += uint64((*x)[1]) << 8\nOn 2012/03/08 14:49:32, rsc wrote:\n> FWIW I think this will compile a little nicer if you use a big | instead of a\n> sequence of +=.\n> \n> r[0] = uint64((*x)[0]) |\n>     uint64((*x)[1]) << 8 |\n>     ...\n\nDone.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mont25519_amd64.go#newcode177\ncurve25519/mont25519_amd64.go:177: /* 2 */ square(&z2, x)\nOn 2012/03/08 14:49:32, rsc wrote:\n> Is it possible to swap the comments to the end of the line?\n\nDone (one regexp did the trick)\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mul_amd64.s\nFile curve25519/mul_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/mul_amd64.s#newcode9\ncurve25519/mul_amd64.s:9: TEXT \u00b7mul(SB),0,$128\nOn 2012/03/08 14:49:32, rsc wrote:\n> Same comment about the split: $128-24\n\nDone.\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/square_amd64.s\nFile curve25519/square_amd64.s (right):\n\nhttp://codereview.appspot.com/5786045/diff/3019/curve25519/square_amd64.s#newcode9\ncurve25519/square_amd64.s:9: TEXT \u00b7square(SB),7,$96\nOn 2012/03/08 14:49:32, rsc wrote:\n> It's not required here until the 7 goes away,\n> but just in case that should happen, $96-16.\n\nDone.",
			"disapproval": false,
			"date": "2012-03-12 14:59:21.237281",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 5786045: go.crypto/curve25519: add package.",
	"created": "2012-03-07 22:57:56.441436",
	"patchsets": [
		1,
		2001,
		3019,
		8001
	],
	"modified": "2012-03-12 14:59:22.506020",
	"closed": true,
	"issue": 5786045
}