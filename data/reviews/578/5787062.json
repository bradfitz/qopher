{
	"description": "archive/zip: write data descriptor signature for OS X; fix bugs reading it\n\nWe now always write the \"optional\" streaming data descriptor\nsignature, which turns out to be required for OS X.\n\nAlso, handle reading the data descriptor with or without the\nsignature, per the spec's recommendation. Fix data descriptor\nreading bugs found in the process.\n\nFixes issue 3252",
	"cc": [
		"golang-dev@googlegroups.com",
		"alex.brainman@gmail.com",
		"nigeltao@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [
		"adg@google.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-09 04:29:23.270789",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for tracking this down, Brad. What a crazy world the zip format is...\n\nOn Saturday, 10 March 2012, wrote:\n\n> *** Submitted as\n> http://code.google.com/p/go/**source/detail?r=0a07d08fb35b<http://code.google.com/p/go/source/detail?r=0a07d08fb35b>***\n>\n> archive/zip: write data descriptor signature for OS X; fix bugs reading\n> it\n>\n> We now always write the \"optional\" streaming data descriptor\n> signature, which turns out to be required for OS X.\n>\n> Also, handle reading the data descriptor with or without the\n> signature, per the spec's recommendation. Fix data descriptor\n> reading bugs found in the process.\n>\n> Fixes issue 3252\n>\n> R=golang-dev, alex.brainman, nigeltao, rsc\n> CC=golang-dev\n> http://codereview.appspot.com/**5787062<http://codereview.appspot.com/5787062>\n>\n>\n> http://codereview.appspot.com/**5787062/<http://codereview.appspot.com/5787062/>\n>\n",
			"disapproval": false,
			"date": "2012-03-12 01:18:41.527229",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Still works on windows.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-09 04:46:03.738099",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't know the zip code or format well enough, but a drive-by comment...\n\nhttp://codereview.appspot.com/5787062/diff/4001/src/pkg/archive/zip/reader_test.go\nFile src/pkg/archive/zip/reader_test.go (right):\n\nhttp://codereview.appspot.com/5787062/diff/4001/src/pkg/archive/zip/reader_test.go#newcode20\nsrc/pkg/archive/zip/reader_test.go:20: Source  func() (r io.ReaderAt, size int64) // if non-nil, used instead of testdata/<Name> file\nWould it be easier if Source returned (*Reader, err)?",
			"disapproval": false,
			"date": "2012-03-09 12:16:40.326188",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 9, 2012 at 4:16 AM, <nigeltao@golang.org> wrote:\n\n> I don't know the zip code or format well enough, but a drive-by\n> comment...\n>\n>\n> http://codereview.appspot.com/**5787062/diff/4001/src/pkg/**\n> archive/zip/reader_test.go<http://codereview.appspot.com/5787062/diff/4001/src/pkg/archive/zip/reader_test.go>\n> File src/pkg/archive/zip/reader_**test.go (right):\n>\n> http://codereview.appspot.com/**5787062/diff/4001/src/pkg/**\n> archive/zip/reader_test.go#**newcode20<http://codereview.appspot.com/5787062/diff/4001/src/pkg/archive/zip/reader_test.go#newcode20>\n> src/pkg/archive/zip/reader_**test.go:20: Source  func() (r io.ReaderAt,\n> size int64) // if non-nil, used instead of testdata/<Name> file\n> Would it be easier if Source returned (*Reader, err)?\n>\n\nPerhaps.  I was going down a different path at the time and switched the\ntypes around a couple times.  If people feel strongly I can switch it, but\nit's just test code.\n",
			"disapproval": false,
			"date": "2012-03-09 16:34:23.844663",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com, nigeltao@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-09 22:03:36.021630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI can't believe they broke this.\n\nhttp://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttp://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go#newcode153\nsrc/pkg/archive/zip/reader.go:153: n, err = r.rc.Read(b)\nif r.err != nil {\n    return 0, r.err\n}\nn, err = r.rc.Read(b)\nif err == nil {\n    return\n}\n\nThen you won't need r.desr = nil below, and also it will take care of other errors.\n\nhttp://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go#newcode158\nsrc/pkg/archive/zip/reader.go:158: if err = readDataDescriptor(desr, r.f); err != nil {\nHow about\n\nif err1 := readDataDescriptor(desr, r.f); err1 != nil {\n   err = err1\n} else if r.hash.Sum32() != r.f.CRC32 {\n   err = ErrChecksum\n}\n\nThen you don't have to put the EOF back.\n\nhttp://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go#newcode167\nsrc/pkg/archive/zip/reader.go:167: return\nr.err = err\nreturn",
			"disapproval": false,
			"date": "2012-03-09 21:53:15.317759",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttp://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go#newcode153\nsrc/pkg/archive/zip/reader.go:153: n, err = r.rc.Read(b)\nOn 2012/03/09 21:53:15, rsc wrote:\n> if r.err != nil {\n>     return 0, r.err\n> }\n> n, err = r.rc.Read(b)\n> if err == nil {\n>     return\n> }\n\nsure, with the hash.Write in there too\n\n> Then you won't need r.desr = nil below, and also it will take care of other\n> errors.\n\nhttp://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go#newcode158\nsrc/pkg/archive/zip/reader.go:158: if err = readDataDescriptor(desr, r.f); err != nil {\nOn 2012/03/09 21:53:15, rsc wrote:\n> How about\n> \n> if err1 := readDataDescriptor(desr, r.f); err1 != nil {\n>    err = err1\n> } else if r.hash.Sum32() != r.f.CRC32 {\n>    err = ErrChecksum\n> }\n> \n> Then you don't have to put the EOF back.\n\nDone.\n\nhttp://codereview.appspot.com/5787062/diff/8001/src/pkg/archive/zip/reader.go#newcode167\nsrc/pkg/archive/zip/reader.go:167: return\nOn 2012/03/09 21:53:15, rsc wrote:\n> r.err = err\n> return\n\nDone.",
			"disapproval": false,
			"date": "2012-03-09 22:03:37.245021",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0a07d08fb35b ***\n\narchive/zip: write data descriptor signature for OS X; fix bugs reading it\n\nWe now always write the \"optional\" streaming data descriptor\nsignature, which turns out to be required for OS X.\n\nAlso, handle reading the data descriptor with or without the\nsignature, per the spec's recommendation. Fix data descriptor\nreading bugs found in the process.\n\nFixes issue 3252\n\nR=golang-dev, alex.brainman, nigeltao, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5787062",
			"disapproval": false,
			"date": "2012-03-09 22:12:04.823616",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5787062: archive/zip: write data descriptor signature for OS X; ...",
	"created": "2012-03-09 04:29:03.335087",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		3015,
		12002
	],
	"modified": "2012-03-12 01:18:41.739243",
	"closed": true,
	"issue": 5787062
}