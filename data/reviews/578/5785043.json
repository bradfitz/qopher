{
	"description": "database/sql{,driver}: add ErrBadConn",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"blake.mizerany@gmail.com",
		"kr@xph.us"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-03-07 22:05:12.821413",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 7, 2012 at 2:06 PM, Russ Cox <rsc@golang.org> wrote:\n\n> What if it doesn't implement this?\n>\n\nAssumed healthy, as before.\n\nWill update docs.\n",
			"disapproval": false,
			"date": "2012-03-07 22:07:48.486115",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go\nFile src/pkg/database/sql/driver/driver.go (right):\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go#newcode46\nsrc/pkg/database/sql/driver/driver.go:46: // ErrBadConn should be returned by drivers to signal to the sql\ns/drivers/a driver/\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go#newcode47\nsrc/pkg/database/sql/driver/driver.go:47: // package that a driver's Conn is in a bad state (such as the server\ns/driver's Conn/driver.Conn/\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go#newcode53\nsrc/pkg/database/sql/driver/driver.go:53: // successfully performed the operation.\ns/successfully //\n\nEven if the server sends back an error, you shouldn't return ErrBadConn.\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode254\nsrc/pkg/database/sql/sql.go:254: for n, conn := range db.freeConn {\nn is a strange iteration variable.  s/n/i/\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode290\nsrc/pkg/database/sql/sql.go:290: defer func() {\nCute but maybe a little subtle and also hard to limit.\n\nmaybe s/prepare/prepare1/ and then do\n\nfunc (db *DB) prepare(query string) (stmt *Stmt, err error) {\n    for i := 0; i < 10; i++ {\n        stmt, err = db.prepare1(query)\n        if err != driver.ErrBadConn {\n            break\n        }\n    }\n    return\n}\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode754\nsrc/pkg/database/sql/sql.go:754: for {\nfor i := 0;; i++ {\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode760\nsrc/pkg/database/sql/sql.go:760: if err == driver.ErrBadConn {\n&& i < 10",
			"disapproval": false,
			"date": "2012-03-08 15:26:13.917572",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Get this \"FATAL\" thing from Postgres, set a \"broken\" bit on your Conn type,\nreturn ErrWhatever to the user, let it be returned to the pool, and then\nnext time it's reused, check your broken bit, return ErrBadConn, and a new\nconn will be used.\n\nOn Thu, Mar 8, 2012 at 2:10 PM, Blake Mizerany <blake.mizerany@gmail.com>wrote:\n\n> I'm saying I want to have my cake and eat it.\n>\n> I need to get an error message back to the user, and I also do not\n> want that connection to get put into the idle pool.\n>\n> On Thu, Mar 8, 2012 at 1:57 PM, Russ Cox <rsc@golang.org> wrote:\n> > I don't understand.\n> >\n> > If you want the driver to try a new connection, return ErrBadConn.\n> > If you want the driver to return the error to the user, return some\n> > other error.\n> >\n> > What other options are there?\n> >\n> > Russ\n>\n",
			"disapproval": false,
			"date": "2012-03-08 22:15:16.031820",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-07 23:29:34.246702",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What if it doesn't implement this?\n",
			"disapproval": false,
			"date": "2012-03-07 22:06:06.399486",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 17:10, Blake Mizerany <blake.mizerany@gmail.com> wrote:\n> I need to get an error message back to the user, and I also do not\n> want that connection to get put into the idle pool.\n\nYou could return the real error now and set a bit\nso that the next call on that Conn returns ErrBadConn.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-08 22:14:51.317108",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"bradfitz@golang.org",
				"blake.mizerany@gmail.com",
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suggest letting the conn expose a flag\nto indicate whether it's ok to continue\nusing it. Every time sql wants to return a\nconn to the pool, it can check this flag.\n\nThe question of whether or not the conn is\nusable isn't really a property of the error;\nit's a property of the conn.\n\nThis process of returning a descriptive error\nto the user, setting a bit, then returning\nErrBadConn would seem to force the end user\nto handle two errors unnecessarily.",
			"disapproval": false,
			"date": "2012-03-08 23:25:05.593990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand.\n\nIf you want the driver to try a new connection, return ErrBadConn.\nIf you want the driver to return the error to the user, return some\nother error.\n\nWhat other options are there?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-08 21:57:44.844867",
			"approval": false
		},
		{
			"sender": "blake.mizerany@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm saying I want to have my cake and eat it.\n\nI need to get an error message back to the user, and I also do not\nwant that connection to get put into the idle pool.\n\nOn Thu, Mar 8, 2012 at 1:57 PM, Russ Cox <rsc@golang.org> wrote:\n> I don't understand.\n>\n> If you want the driver to try a new connection, return ErrBadConn.\n> If you want the driver to return the error to the user, return some\n> other error.\n>\n> What other options are there?\n>\n> Russ\n",
			"disapproval": false,
			"date": "2012-03-08 22:10:42.417995",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 7:26 PM, Russ Cox <rsc@golang.org> wrote:\n> There's an inherent race in asking the conn\n> \"are you usable right now?\" and then later\n> (even microseconds later) asking it to do work.\n\nErrBadConn has the same race.\n\nCase 1: sql issues a command, and the driver\nreturns something other than ErrBadConn, so sql\nassumes the conn is usable until the next command.\n\nCase 2: sql calls conn.IsUsable() and the driver\nreturns true, so sql assumes the conn is usable\nuntil the next command.\n\nEither way, if the conn becomes unusable in that\ninterval, the requested action will fail. That's ok.\n\n> No matter what we do, it is true that if drivers are\n> buggy, bad things will happen.\n\nSome bad things are worse than others. I maintain\nthat running a command in a loop in the sql package\nis riskier than running it once.\n\nAside from that, the code to deal with ErrBadConn\nis more complicated for both sql and the drivers.\n\nkr\n",
			"disapproval": false,
			"date": "2012-03-09 04:57:02.535069",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go\nFile src/pkg/database/sql/driver/driver.go (right):\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go#newcode46\nsrc/pkg/database/sql/driver/driver.go:46: // ErrBadConn should be returned by drivers to signal to the sql\nOn 2012/03/08 15:26:14, rsc wrote:\n> s/drivers/a driver/\n\nDone.\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go#newcode47\nsrc/pkg/database/sql/driver/driver.go:47: // package that a driver's Conn is in a bad state (such as the server\nOn 2012/03/08 15:26:14, rsc wrote:\n> s/driver's Conn/driver.Conn/\n> \n\nDone.\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/driver/driver.go#newcode53\nsrc/pkg/database/sql/driver/driver.go:53: // successfully performed the operation.\nOn 2012/03/08 15:26:14, rsc wrote:\n> s/successfully //\n> \n> Even if the server sends back an error, you shouldn't return ErrBadConn.\n\nDone.\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode254\nsrc/pkg/database/sql/sql.go:254: for n, conn := range db.freeConn {\nOn 2012/03/08 15:26:14, rsc wrote:\n> n is a strange iteration variable.  s/n/i/\n\nDone.\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode290\nsrc/pkg/database/sql/sql.go:290: defer func() {\nOn 2012/03/08 15:26:14, rsc wrote:\n> Cute but maybe a little subtle and also hard to limit.\n> \n> maybe s/prepare/prepare1/ and then do\n> \n> func (db *DB) prepare(query string) (stmt *Stmt, err error) {\n>     for i := 0; i < 10; i++ {\n>         stmt, err = db.prepare1(query)\n>         if err != driver.ErrBadConn {\n>             break\n>         }\n>     }\n>     return\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode754\nsrc/pkg/database/sql/sql.go:754: for {\nOn 2012/03/08 15:26:14, rsc wrote:\n> for i := 0;; i++ {\n\nDone.\n\nhttp://codereview.appspot.com/5785043/diff/6001/src/pkg/database/sql/sql.go#newcode760\nsrc/pkg/database/sql/sql.go:760: if err == driver.ErrBadConn {\nOn 2012/03/08 15:26:14, rsc wrote:\n> && i < 10\n\nDone.",
			"disapproval": false,
			"date": "2012-03-08 18:07:23.571544",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Also, I suspect the ErrBadConn strategy will\n> be more error-prone. Rerunning queries 10\n> times in a loop is correct only if every driver\n> author returns ErrBadConn under the right\n> circumstances without bugs. A driver bug\n> could cause a query to run several times,\n> subtly and quietly corrupting database\n> records. By contrast, a flag for \"is-this-conn-\n> usable\" is more forgiving of driver bugs,\n> since it would fail noisily, sending many\n> errors to the user.\n\nThere's an inherent race in asking the conn\n\"are you usable right now?\" and then later\n(even microseconds later) asking it to do work.\nThe ErrBadConn solution, like the x,ok form of\nthe channel receive, avoids the race by letting\nthe operation itself return the ok value.\n\nNo matter what we do, it is true that if drivers are\nbuggy, bad things will happen.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-09 03:26:48.465400",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 9:05 PM, Russ Cox <rsc@golang.org> wrote:\n> If you have another situation, where there is such a thing\n> as a retryable error, then using ErrBadConn can handle\n> that situation race-free, while IsUsable cannot.\n\nYes, a subset of errors make the conn unusable, and\na subset of those errors can be safely retried.\nErrBadConn has an advantage if it's desirable to\nhide that smaller subset from the user. Is that\na goal? It might be preferable for the user to be\nable to see those errors. And, even if we want to\nhide those errors, is that smaller subset large\nenough to be worth the cost?\n\n(I'm not asking rhetorically; I honestly don't know.)\n\nkr\n",
			"disapproval": false,
			"date": "2012-03-09 05:55:15.958271",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 23:56, Keith Rarick <kr@xph.us> wrote:\n> ErrBadConn has the same race.\n>\n> Case 1: sql issues a command, and the driver\n> returns something other than ErrBadConn, so sql\n> assumes the conn is usable until the next command.\n>\n> Case 2: sql calls conn.IsUsable() and the driver\n> returns true, so sql assumes the conn is usable\n> until the next command.\n\nIt only has this race if you use it the way that you\nasked for (and Brad and I both suggested keeping\na failure bit), where you are trying to expose the\nFATAL error to the user.\n\nIf you have another situation, where there is such a thing\nas a retryable error, then using ErrBadConn can handle\nthat situation race-free, while IsUsable cannot.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-09 05:05:09.827474",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7a8c58d0b7b8 ***\n\ndatabase/sql{,driver}: add ErrBadConn\n\nR=golang-dev, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5785043",
			"disapproval": false,
			"date": "2012-03-08 18:09:51.217361",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ErrBadConn never makes it to the user.\n\nOn Fri, Mar 9, 2012 at 10:25 AM, <kr@xph.us> wrote:\n\n> I suggest letting the conn expose a flag\n> to indicate whether it's ok to continue\n> using it. Every time sql wants to return a\n> conn to the pool, it can check this flag.\n>\n> The question of whether or not the conn is\n> usable isn't really a property of the error;\n> it's a property of the conn.\n>\n> This process of returning a descriptive error\n> to the user, setting a bit, then returning\n> ErrBadConn would seem to force the end user\n> to handle two errors unnecessarily.\n>\n> http://codereview.appspot.com/**5785043/<http://codereview.appspot.com/5785043/>\n>\n",
			"disapproval": false,
			"date": "2012-03-08 23:42:34.758098",
			"approval": false
		},
		{
			"sender": "blake.mizerany@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah. I see that now. I apologize.\n\nOn Thu, Mar 8, 2012 at 3:42 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> ErrBadConn never makes it to the user.\n>\n>\n> On Fri, Mar 9, 2012 at 10:25 AM, <kr@xph.us> wrote:\n>>\n>> I suggest letting the conn expose a flag\n>> to indicate whether it's ok to continue\n>> using it. Every time sql wants to return a\n>> conn to the pool, it can check this flag.\n>>\n>> The question of whether or not the conn is\n>> usable isn't really a property of the error;\n>> it's a property of the conn.\n>>\n>> This process of returning a descriptive error\n>> to the user, setting a bit, then returning\n>> ErrBadConn would seem to force the end user\n>> to handle two errors unnecessarily.\n>>\n>> http://codereview.appspot.com/5785043/\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-08 23:51:02.466900",
			"approval": false
		},
		{
			"sender": "blake.mizerany@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"blake.mizerany@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I see a problem with this:\n\nIf the database returns a FATAL error to me, which it can have many of, I can't get the message associated with it, to the user this way.\n\nThe `HealthyConn`, or `FatalConn` interface approach, you suggested the other day, really appealed to me because it allows any error value to be returned.\n\ni.e.\n\ntype FatalError interface {\n   FatalError()\n}\n\nif _, ok := err.(driver.FatalError); ok {\n    // don't put back in idle pool\n    return err\n}\n...\n\nOn 2012/03/08 18:09:51, bradfitz wrote:\n> *** Submitted as http://code.google.com/p/go/source/detail?r=7a8c58d0b7b8 ***\n> \n> database/sql{,driver}: add ErrBadConn\n> \n> R=golang-dev, rsc\n> CC=golang-dev\n> http://codereview.appspot.com/5785043",
			"disapproval": false,
			"date": "2012-03-08 21:50:28.873650",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is the flexibility of having a special-case\nerror value worth the extra complexity?\nDo we know that that flexibility will ever\nbe needed?\n\nAlso, I suspect the ErrBadConn strategy will\nbe more error-prone. Rerunning queries 10\ntimes in a loop is correct only if every driver\nauthor returns ErrBadConn under the right\ncircumstances without bugs. A driver bug\ncould cause a query to run several times,\nsubtly and quietly corrupting database\nrecords. By contrast, a flag for \"is-this-conn-\nusable\" is more forgiving of driver bugs,\nsince it would fail noisily, sending many\nerrors to the user.\n\nkr\n",
			"disapproval": false,
			"date": "2012-03-09 00:23:24.020442",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 9, 2012 at 00:55, Keith Rarick <kr@xph.us> wrote:\n> Yes, a subset of errors make the conn unusable, and\n> a subset of those errors can be safely retried.\n> ErrBadConn has an advantage if it's desirable to\n> hide that smaller subset from the user. Is that\n> a goal? It might be preferable for the user to be\n> able to see those errors. And, even if we want to\n> hide those errors, is that smaller subset large\n> enough to be worth the cost?\n>\n> (I'm not asking rhetorically; I honestly don't know.)\n\nI don't know either.  However, the possible benefit seems\nlarge - if this case comes up, we can handle it - and the\ncost seems miniscule: people writing drivers have to write a\nfew more lines of code.  How many drivers will there ever be?\n10?  50?\n\nFWIW, I do think that the case comes up: if you have a\nlong-standing TCP connection to a database server and\nan idle connection drops between calls, you can return ErrBadConn\nfrom the next call and avoid showing that connection drop\nto the user.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-09 19:11:02.364872",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5785043: database/sql{,driver}: add ErrBadConn",
	"created": "2012-03-07 21:20:14.009869",
	"patchsets": [
		1,
		1001,
		4001,
		5001,
		6001,
		6002
	],
	"modified": "2012-03-08 23:25:05.799826",
	"closed": true,
	"issue": 5785043
}