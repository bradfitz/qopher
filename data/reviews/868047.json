{
	"description": "Adds Unicode character class matching to the regexp package.\nSpecifically, adds \\w (matching unicode.IsLetter), \\s (matching unicode.IsSpace), and \\d (matching unicode.IsDigit). Tests added.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "thorogood@google.com",
			"recipients": [
				"thorogood@google.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r, rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-04-16 02:03:09.934852",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"thorogood@google.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I know this seems worthy but really, this package is just a placeholder for a proper implementation of regular expressions.  Adding features that bring it closer to what people expect does not seem like a good idea to me.  Plus, once you start adding \\X for some X, the floodgates will just open. This is only a first step of many.  If we don't take the first we'll be better off.\n\nIn short, this package is deliberately bare bones and I'd like to keep it that way, but I'll listen to counterarguments (but what I really want is a proper regexp implementation).\n\nIn any case, it seems wrong to do \\s etc only inside characters classes.",
			"disapproval": false,
			"date": "2010-04-16 04:01:01.638156",
			"approval": false
		},
		{
			"sender": "thorogood@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I'll just note that \\s etc are actually matched outside of character\nclasses, too, through the _Matcher type which is on the same level as\n_Char or _CharClass. (_CharClass just may also own instances of\n_Matcher). See around line 500 of regexp.go.\n\nSo, I don't necessarily disagree with your views about keeping this\npackage bare bones, and I can see the value of a fully-featured\npackage (which might provide more exact compatibility with Perl-like\nsytax, or potentially wrap PCRE). However, I can't imagine\nspearheading this effort - to be completely honest my specific use\ncase for this change is just so that I can write more concise\nunicode-friendly matchers for requests to a pet SMTP server project.\n\nI think my main counterargument would be this: I don't think that the\nlimited set of matchers available right now show off Go's grounding in\nUTF-8 in a meaningful way. It's infeasible to write a character class\nincluding a complete category (spaces, digits etc) of unicode runes,\neven if matching occurs on a rune-by-rune basis (so I can match\ndistinct code points - as opposed to bytes - but not differentiate\nbetween then whatsoever!).\n\nDevelopers might instead take other roads to solving their pattern\nmatching. They could revert to a more basic form of say, [a-zA-Z]\n(losing the benefits of native UTF-8); or end up using the current\nregexp library as just basic glue to find syntax. Even if there is a\nmore fully-featured library in future, a basic library with better\nsupport for unique rune types could still be useful to some developers\n- for now and for simple matching.\n\nOn Fri, Apr 16, 2010 at 14:01,  <r@golang.org> wrote:\n> I know this seems worthy but really, this package is just a placeholder\n> for a proper implementation of regular expressions. \u00a0Adding features\n> that bring it closer to what people expect does not seem like a good\n> idea to me. \u00a0Plus, once you start adding \\X for some X, the floodgates\n> will just open. This is only a first step of many. \u00a0If we don't take the\n> first we'll be better off.\n>\n> In short, this package is deliberately bare bones and I'd like to keep\n> it that way, but I'll listen to counterarguments (but what I really want\n> is a proper regexp implementation).\n>\n> In any case, it seems wrong to do \\s etc only inside characters classes.\n>\n>\n> http://codereview.appspot.com/868047/show\n>\n",
			"disapproval": false,
			"date": "2010-04-16 05:58:10.100725",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Right now there is a well-documented format: Unix egrep.\nEventually the format will change to another\nwell-documented format: PCRE syntax.\n\nI understand and agree with your points, but overriding them\nis that I'd rather not be sitting in a halfway point or encourage\nthe conversion by accretion.  If someone (you or anyone else\nreading this) would like to take on the task of a planned\nconversion of RE2's parser to Go, it should be possible to hook\nit up to the current regexp back end with very few changes.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-04-16 06:10:29.645439",
			"approval": false
		},
		{
			"sender": "thorogood@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ok, I can appreciate your and Rob's arguments. I also wasn't aware\nthat the existing regexp library was intended to match egrep :)\n\nSince clearly I'm now determined to help out on Go, I'll spend some\ntime investigating RE2 (probably orders more than the time I spent on\nmy tiny patch). Thanks for pointing me in a project-valid direction.\n\nOn Fri, Apr 16, 2010 at 16:10, Russ Cox <rsc@golang.org> wrote:\n> Right now there is a well-documented format: Unix egrep.\n> Eventually the format will change to another\n> well-documented format: PCRE syntax.\n>\n> I understand and agree with your points, but overriding them\n> is that I'd rather not be sitting in a halfway point or encourage\n> the conversion by accretion. \u00a0If someone (you or anyone else\n> reading this) would like to take on the task of a planned\n> conversion of RE2's parser to Go, it should be possible to hook\n> it up to the current regexp back end with very few changes.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2010-04-16 06:25:31.243472",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"thorogood@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2010-04-27 05:46:08.539956",
			"approval": false
		}
	],
	"owner_email": "thorogood@google.com",
	"private": false,
	"base_url": "",
	"owner": "Sam Thorogood",
	"subject": "code review 868047: Adds Unicode character class matching to the regexp package.",
	"created": "2010-04-16 02:01:20.520510",
	"patchsets": [
		1,
		2001
	],
	"modified": "2010-04-27 05:46:08.540214",
	"closed": false,
	"issue": 868047
}