{
	"description": "src: Use bytes.Equal instead of bytes.Compare where possible.\n\nbytes.Equal is simpler to read and should also be faster because\nof short-circuiting and assembly implementations.\n\nChange generated automatically using:\n  gofmt -r 'bytes.Compare(a, b) == 0 -> bytes.Equal(a, b)'\n  gofmt -r 'bytes.Compare(a, b) != 0 -> !bytes.Equal(a, b)'",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"adg@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you please update the description with benchmarks for the packages affected.\r\n\r\nOn Fri, Jan 4, 2013 at 9:59 AM,  <mdempsky@google.com> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> Use bytes.Equal instead of bytes.Compare where possible.\r\n>\r\n> bytes.Equal is simpler to read and should also be faster because\r\n> of short-circuiting and assembly implementations.\r\n>\r\n> Change generated automatically using:\r\n>   gofmt -r 'bytes.Compare(a, b) == 0 -> bytes.Equal(a, b)'\r\n>   gofmt -r 'bytes.Compare(a, b) != 0 -> !bytes.Equal(a, b)'\r\n>\r\n> Please review this at https://codereview.appspot.com/7038051/\r\n>\r\n> Affected files:\r\n>   M src/pkg/bufio/bufio_test.go\r\n>   M src/pkg/crypto/rsa/pkcs1v15_test.go\r\n>   M src/pkg/crypto/rsa/rsa_test.go\r\n>   M src/pkg/encoding/asn1/asn1_test.go\r\n>   M src/pkg/encoding/asn1/marshal_test.go\r\n>   M src/pkg/encoding/hex/hex_test.go\r\n>   M src/pkg/encoding/json/decode_test.go\r\n>   M src/pkg/encoding/json/scanner_test.go\r\n>   M src/pkg/exp/locale/collate/collate_test.go\r\n>   M src/pkg/exp/locale/collate/maketables.go\r\n>   M src/pkg/go/doc/doc_test.go\r\n>   M src/pkg/math/big/int_test.go\r\n>\r\n>\r\n> Index: src/pkg/bufio/bufio_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/bufio/bufio_test.go\r\n> +++ b/src/pkg/bufio/bufio_test.go\r\n> @@ -748,7 +748,7 @@\r\n>         b := NewReaderSize(strings.NewReader(input), minReadBufferSize)\r\n>         for i, e := range expect {\r\n>                 line, isPrefix, err := b.ReadLine()\r\n> -               if bytes.Compare(line, e.line) != 0 {\r\n> +               if !bytes.Equal(line, e.line) {\r\n>                         t.Errorf(\"%q call %d, line == %q, want %q\", input,\r\n> i, line, e.line)\r\n>                         return\r\n>                 }\r\n> Index: src/pkg/crypto/rsa/pkcs1v15_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/crypto/rsa/pkcs1v15_test.go\r\n> +++ b/src/pkg/crypto/rsa/pkcs1v15_test.go\r\n> @@ -57,7 +57,7 @@\r\n>                         t.Errorf(\"#%d error decrypting\", i)\r\n>                 }\r\n>                 want := []byte(test.out)\r\n> -               if bytes.Compare(out, want) != 0 {\r\n> +               if !bytes.Equal(out, want) {\r\n>                         t.Errorf(\"#%d got:%#v want:%#v\", i, out, want)\r\n>                 }\r\n>         }\r\n> @@ -90,7 +90,7 @@\r\n>                         return false\r\n>                 }\r\n>\r\n> -               if bytes.Compare(plaintext, in) != 0 {\r\n> +               if !bytes.Equal(plaintext, in) {\r\n>                         t.Errorf(\"output mismatch: %#v %#v\", plaintext, in)\r\n>                         return false\r\n>                 }\r\n> @@ -132,7 +132,7 @@\r\n>                         t.Errorf(\"#%d error decrypting\", i)\r\n>                 }\r\n>                 want := []byte(test.out)\r\n> -               if bytes.Compare(key, want) != 0 {\r\n> +               if !bytes.Equal(key, want) {\r\n>                         t.Errorf(\"#%d got:%#v want:%#v\", i, key, want)\r\n>                 }\r\n>         }\r\n> @@ -176,7 +176,7 @@\r\n>                 }\r\n>\r\n>                 expected, _ := hex.DecodeString(test.out)\r\n> -               if bytes.Compare(s, expected) != 0 {\r\n> +               if !bytes.Equal(s, expected) {\r\n>                         t.Errorf(\"#%d got: %x want: %x\", i, s, expected)\r\n>                 }\r\n>         }\r\n> Index: src/pkg/crypto/rsa/rsa_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/crypto/rsa/rsa_test.go\r\n> +++ b/src/pkg/crypto/rsa/rsa_test.go\r\n> @@ -179,7 +179,7 @@\r\n>                         if err != nil {\r\n>                                 t.Errorf(\"#%d,%d error: %s\", i, j, err)\r\n>                         }\r\n> -                       if bytes.Compare(out, message.out) != 0 {\r\n> +                       if !bytes.Equal(out, message.out) {\r\n>                                 t.Errorf(\"#%d,%d bad result: %x (want %x)\",\r\n> i, j, out, message.out)\r\n>                         }\r\n>                 }\r\n> @@ -203,7 +203,7 @@\r\n>                         out, err := DecryptOAEP(sha1, nil, private,\r\n> message.out, nil)\r\n>                         if err != nil {\r\n>                                 t.Errorf(\"#%d,%d error: %s\", i, j, err)\r\n> -                       } else if bytes.Compare(out, message.in) != 0 {\r\n> +                       } else if !bytes.Equal(out, message.in) {\r\n>                                 t.Errorf(\"#%d,%d bad result: %#v (want\r\n> %#v)\", i, j, out, message.in)\r\n>                         }\r\n>\r\n> @@ -211,7 +211,7 @@\r\n>                         out, err = DecryptOAEP(sha1, random, private,\r\n> message.out, nil)\r\n>                         if err != nil {\r\n>                                 t.Errorf(\"#%d,%d (blind) error: %s\", i, j,\r\n> err)\r\n> -                       } else if bytes.Compare(out, message.in) != 0 {\r\n> +                       } else if !bytes.Equal(out, message.in) {\r\n>                                 t.Errorf(\"#%d,%d (blind) bad result: %#v\r\n> (want %#v)\", i, j, out, message.in)\r\n>                         }\r\n>                 }\r\n> Index: src/pkg/encoding/asn1/asn1_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/encoding/asn1/asn1_test.go\r\n> +++ b/src/pkg/encoding/asn1/asn1_test.go\r\n> @@ -124,7 +124,7 @@\r\n>                         t.Errorf(\"#%d: Incorrect error result (did fail? %v,\r\n> expected: %v)\", i, err == nil, test.ok)\r\n>                 }\r\n>                 if err == nil {\r\n> -                       if test.bitLength != ret.BitLength ||\r\n> bytes.Compare(ret.Bytes, test.out) != 0 {\r\n> +                       if test.bitLength != ret.BitLength ||\r\n> !bytes.Equal(ret.Bytes, test.out) {\r\n>                                 t.Errorf(\"#%d: Bad result: %v (expected %v\r\n> %v)\", i, ret, test.out, test.bitLength)\r\n>                         }\r\n>                 }\r\n> @@ -166,7 +166,7 @@\r\n>         for i, test := range bitStringRightAlignTests {\r\n>                 bs := BitString{test.in, test.inlen}\r\n>                 out := bs.RightAlign()\r\n> -               if bytes.Compare(out, test.out) != 0 {\r\n> +               if !bytes.Equal(out, test.out) {\r\n>                         t.Errorf(\"#%d got: %x want: %x\", i, out, test.out)\r\n>                 }\r\n>         }\r\n> @@ -477,7 +477,7 @@\r\n>         if s.A != 0x50 {\r\n>                 t.Errorf(\"bad value for A: got %d want %d\", s.A, 0x50)\r\n>         }\r\n> -       if bytes.Compare([]byte(s.Raw), input) != 0 {\r\n> +       if !bytes.Equal([]byte(s.Raw), input) {\r\n>                 t.Errorf(\"bad value for Raw: got %x want %x\", s.Raw, input)\r\n>         }\r\n>  }\r\n> Index: src/pkg/encoding/asn1/marshal_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/encoding/asn1/marshal_test.go\r\n> +++ b/src/pkg/encoding/asn1/marshal_test.go\r\n> @@ -132,7 +132,7 @@\r\n>                         t.Errorf(\"#%d failed: %s\", i, err)\r\n>                 }\r\n>                 out, _ := hex.DecodeString(test.out)\r\n> -               if bytes.Compare(out, data) != 0 {\r\n> +               if !bytes.Equal(out, data) {\r\n>                         t.Errorf(\"#%d got: %x want %x\\n\\t%q\\n\\t%q\", i, data,\r\n> out, data, out)\r\n>\r\n>                 }\r\n> Index: src/pkg/encoding/hex/hex_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/encoding/hex/hex_test.go\r\n> +++ b/src/pkg/encoding/hex/hex_test.go\r\n> @@ -65,7 +65,7 @@\r\n>                         t.Errorf(\"#%d: unexpected err value: %s\", i, err)\r\n>                         continue\r\n>                 }\r\n> -               if bytes.Compare(dst, test.dec) != 0 {\r\n> +               if !bytes.Equal(dst, test.dec) {\r\n>                         t.Errorf(\"#%d: got: %#v want: #%v\", i, dst,\r\n> test.dec)\r\n>                 }\r\n>         }\r\n> Index: src/pkg/encoding/json/decode_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/encoding/json/decode_test.go\r\n> +++ b/src/pkg/encoding/json/decode_test.go\r\n> @@ -422,7 +422,7 @@\r\n>         if err != nil {\r\n>                 t.Fatalf(\"Marshal: %v\", err)\r\n>         }\r\n> -       if bytes.Compare(jsonBig, b) != 0 {\r\n> +       if !bytes.Equal(jsonBig, b) {\r\n>                 t.Errorf(\"Marshal jsonBig\")\r\n>                 diff(t, b, jsonBig)\r\n>                 return\r\n> @@ -474,7 +474,7 @@\r\n>         if err := Unmarshal(b, &s1); err != nil {\r\n>                 t.Fatalf(\"Unmarshal: %v\", err)\r\n>         }\r\n> -       if bytes.Compare(s0, s1) != 0 {\r\n> +       if !bytes.Equal(s0, s1) {\r\n>                 t.Errorf(\"Marshal large byte slice\")\r\n>                 diff(t, s0, s1)\r\n>         }\r\n> Index: src/pkg/encoding/json/scanner_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/encoding/json/scanner_test.go\r\n> +++ b/src/pkg/encoding/json/scanner_test.go\r\n> @@ -92,7 +92,7 @@\r\n>                 t.Fatalf(\"Compact: %v\", err)\r\n>         }\r\n>         b := buf.Bytes()\r\n> -       if bytes.Compare(b, jsonBig) != 0 {\r\n> +       if !bytes.Equal(b, jsonBig) {\r\n>                 t.Error(\"Compact(jsonBig) != jsonBig\")\r\n>                 diff(t, b, jsonBig)\r\n>                 return\r\n> @@ -118,7 +118,7 @@\r\n>                 t.Fatalf(\"Indent2: %v\", err)\r\n>         }\r\n>         b1 := buf1.Bytes()\r\n> -       if bytes.Compare(b1, b) != 0 {\r\n> +       if !bytes.Equal(b1, b) {\r\n>                 t.Error(\"Indent(Indent(jsonBig)) != Indent(jsonBig)\")\r\n>                 diff(t, b1, b)\r\n>                 return\r\n> @@ -130,7 +130,7 @@\r\n>                 t.Fatalf(\"Compact: %v\", err)\r\n>         }\r\n>         b1 = buf1.Bytes()\r\n> -       if bytes.Compare(b1, jsonBig) != 0 {\r\n> +       if !bytes.Equal(b1, jsonBig) {\r\n>                 t.Error(\"Compact(Indent(jsonBig)) != jsonBig\")\r\n>                 diff(t, b1, jsonBig)\r\n>                 return\r\n> Index: src/pkg/exp/locale/collate/collate_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/locale/collate/collate_test.go\r\n> +++ b/src/pkg/exp/locale/collate/collate_test.go\r\n> @@ -388,10 +388,10 @@\r\n>         }\r\n>         // Separate generation from testing to ensure buffers are not\r\n> overwritten.\r\n>         for i, tt := range keyTests {\r\n> -               if bytes.Compare(keys1[i], tt.out) != 0 {\r\n> +               if !bytes.Equal(keys1[i], tt.out) {\r\n>                         t.Errorf(\"%d: Key(%q) = %d; want %d\", i, tt.in,\r\n> keys1[i], tt.out)\r\n>                 }\r\n> -               if bytes.Compare(keys2[i], tt.out) != 0 {\r\n> +               if !bytes.Equal(keys2[i], tt.out) {\r\n>                         t.Errorf(\"%d: KeyFromString(%q) = %d; want %d\", i,\r\n> tt.in, keys2[i], tt.out)\r\n>                 }\r\n>         }\r\n> Index: src/pkg/exp/locale/collate/maketables.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/locale/collate/maketables.go\r\n> +++ b/src/pkg/exp/locale/collate/maketables.go\r\n> @@ -674,7 +674,7 @@\r\n>         for _, str := range testInput.values() {\r\n>                 k0 := c0.KeyFromString(&buf, str)\r\n>                 k := c.KeyFromString(&buf, str)\r\n> -               if bytes.Compare(k0, k) != 0 {\r\n> +               if !bytes.Equal(k0, k) {\r\n>                         failOnError(fmt.Errorf(\"test:%U: keys differ (%x vs\r\n> %x)\", []rune(str), k0, k))\r\n>                 }\r\n>                 buf.Reset()\r\n> Index: src/pkg/go/doc/doc_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/go/doc/doc_test.go\r\n> +++ b/src/pkg/go/doc/doc_test.go\r\n> @@ -123,7 +123,7 @@\r\n>                 }\r\n>\r\n>                 // compare\r\n> -               if bytes.Compare(got, want) != 0 {\r\n> +               if !bytes.Equal(got, want) {\r\n>                         t.Errorf(\"package %s\\n\\tgot:\\n%s\\n\\twant:\\n%s\",\r\n> pkg.Name, got, want)\r\n>                 }\r\n>         }\r\n> Index: src/pkg/math/big/int_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/math/big/int_test.go\r\n> +++ b/src/pkg/math/big/int_test.go\r\n> @@ -643,7 +643,7 @@\r\n>\r\n>  func checkBytes(b []byte) bool {\r\n>         b2 := new(Int).SetBytes(b).Bytes()\r\n> -       return bytes.Compare(b, b2) == 0\r\n> +       return bytes.Equal(b, b2)\r\n>  }\r\n>\r\n>  func TestBytes(t *testing.T) {\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-03 23:00:43.981170",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-03 22:59:47.305680",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 4, 2013 at 10:00 AM, Dave Cheney <dave@cheney.net> wrote:\r\n> Can you please update the description with benchmarks for the packages affected.\r\n\r\nOh, it looks like the only affected code was locale/maketables,\r\neverything else is test code. Please ignore my request for benchmark\r\ndata, there won't be any.\r\n\r\nMaybe this is a cause that go vet should watch for (similar to b := b[0:len(b)])\r\n",
			"disapproval": false,
			"date": "2013-01-03 23:03:42.976680",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please make the CL description begin with this line:\n\nsrc: use bytes.Equal instead of bytes.Compare where\u00a0possible\n\n(The src: prefix is important)\n\nI will add you to the CONTRIBUTORS file.",
			"disapproval": false,
			"date": "2013-01-06 21:37:07.327380",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-06 23:02:56.112160",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You can add him to the CONTRIBUTORS file using 'hg sync'.\r\n",
			"disapproval": false,
			"date": "2013-01-06 22:25:08.070710",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-06 22:48:36.679260",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"adg@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ae4e014e0b77 ***\n\nsrc: Use bytes.Equal instead of bytes.Compare where possible.\n\nbytes.Equal is simpler to read and should also be faster because\nof short-circuiting and assembly implementations.\n\nChange generated automatically using:\n  gofmt -r 'bytes.Compare(a, b) == 0 -> bytes.Equal(a, b)'\n  gofmt -r 'bytes.Compare(a, b) != 0 -> !bytes.Equal(a, b)'\n\nR=golang-dev, dave, adg, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7038051\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-01-06 23:04:00.647910",
			"approval": false
		}
	],
	"owner_email": "mdempsky@google.com",
	"private": false,
	"base_url": "",
	"owner": "mdempsky",
	"subject": "code review 7038051: src: Use bytes.Equal instead of bytes.Compare where pos...",
	"created": "2013-01-03 22:56:00.027700",
	"patchsets": [
		1,
		1002,
		4001,
		7001,
		3025,
		11001,
		12015
	],
	"modified": "2013-01-06 23:06:55.304010",
	"closed": true,
	"issue": 7038051
}