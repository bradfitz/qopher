{
	"description": "cmd/gc: avoid creating circular lists when compiling with race detector.\n\nFixes issue 5431.",
	"cc": [
		"dvyukov@google.com",
		"remyoudompheng@gmail.com",
		"rsc@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: dvyukov@google.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-31 19:02:41.786950",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I got a test for this, but I'm not sure where to put race detector compilation tests.",
			"disapproval": false,
			"date": "2013-05-31 19:03:38.776470",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/31 19:03:38, DMorsing wrote:\n> I got a test for this, but I'm not sure where to put race detector compilation\n> tests.\n\nWhoops, put down the wrong issue. Correct issue is 5431.",
			"disapproval": false,
			"date": "2013-05-31 19:06:30.670890",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=dvyukov (assigned by r)",
			"disapproval": false,
			"date": "2013-05-31 19:08:29.647200",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/5/31  <daniel.morsing@gmail.com> wrote:\r\n> I got a test for this, but I'm not sure where to put race detector\r\n> compilation tests.\r\n>\r\n> https://codereview.appspot.com/9910043/\r\n\r\nI think it's ok to put them in src/pkg/runtime/race/mop_test.go with\r\nthe other &&/|| test.\r\n",
			"disapproval": false,
			"date": "2013-05-31 20:27:08.431110",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2013-06-01 10:46:27.596380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/31 20:27:08, remyoudompheng wrote:\n> On 2013/5/31  <mailto:daniel.morsing@gmail.com> wrote:\n> > I got a test for this, but I'm not sure where to put race detector\n> > compilation tests.\n> >\n> > https://codereview.appspot.com/9910043/\n> \n> I think it's ok to put them in src/pkg/runtime/race/mop_test.go with\n> the other &&/|| test.\n\n\nI think src/pkg/runtime/race/testdata/regression_test.go is a better place.\nThe file contains similar snippets of code that caused problems in the past.\nmop_test.go contains real race/no race Test's.",
			"disapproval": false,
			"date": "2013-06-03 06:50:07.478680",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 08:20:31, DMorsing wrote:\n> https://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c\n> File src/cmd/gc/racewalk.c (right):\n> \n> https://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c#newcode261\n> src/cmd/gc/racewalk.c:261: // if right has an non-empty init list, l will be\n> pointed at it.\n> On 2013/06/03 06:57:08, dvyukov wrote:\n> > how does it happen?\n> > as far as I see, if n->right is e.g. OIND, then l will contain just the new\n> > instrumentation node\n> \n> Non-empty init lists only happen when inlining. Inlining will put init lists on\n> expressions which call functions that are inlined.\n> \n> The racewalknode above will eventually call mkcall which will call walkexpr on\n> its argument. walkexpr will append the init list of the expression onto the init\n> argument given. We end up with l being the same list at n->right.\n> \n> Another fix is to make treecopy copy init lists, but this means that we're\n> executing the same init statements twice and since inlining create gotos, you\n> can't copy this list without ending up with duplicate goto labels.\n\nSo your fix works when init == l.\nIs it possible that:\n* init is non empty\n* l is appended to init\n* l is appended to init *again*.\n\nThen your check would not be enough, do you see a scenario where it would happen?",
			"disapproval": false,
			"date": "2013-06-03 08:23:54.133470",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c#newcode261\nsrc/cmd/gc/racewalk.c:261: // if right has an non-empty init list, l will be pointed at it.\nhow does it happen?\nas far as I see, if n->right is e.g. OIND, then l will contain just the new instrumentation node",
			"disapproval": false,
			"date": "2013-06-03 06:57:08.328520",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c#newcode261\nsrc/cmd/gc/racewalk.c:261: // if right has an non-empty init list, l will be pointed at it.\nOn 2013/06/03 06:57:08, dvyukov wrote:\n> how does it happen?\n> as far as I see, if n->right is e.g. OIND, then l will contain just the new\n> instrumentation node\n\nNon-empty init lists only happen when inlining. Inlining will put init lists on expressions which call functions that are inlined.\n\nThe racewalknode above will eventually call mkcall which will call walkexpr on its argument. walkexpr will append the init list of the expression onto the init argument given. We end up with l being the same list at n->right.\n\nAnother fix is to make treecopy copy init lists, but this means that we're executing the same init statements twice and since inlining create gotos, you can't copy this list without ending up with duplicate goto labels.",
			"disapproval": false,
			"date": "2013-06-03 08:20:31.847970",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c#newcode261\nsrc/cmd/gc/racewalk.c:261: // if right has an non-empty init list, l will be pointed at it.\nOn 2013/06/03 08:20:32, DMorsing wrote:\n> On 2013/06/03 06:57:08, dvyukov wrote:\n> > how does it happen?\n> > as far as I see, if n->right is e.g. OIND, then l will contain just the new\n> > instrumentation node\n> \n> Non-empty init lists only happen when inlining. Inlining will put init lists on\n> expressions which call functions that are inlined.\n> \n> The racewalknode above will eventually call mkcall which will call walkexpr on\n> its argument. walkexpr will append the init list of the expression onto the init\n> argument given. We end up with l being the same list at n->right.\n> \n> Another fix is to make treecopy copy init lists, but this means that we're\n> executing the same init statements twice and since inlining create gotos, you\n> can't copy this list without ending up with duplicate goto labels.\n\n\nShould we then remember n->right->ninit in l or in a separate var, then set n->right->ninit to nil, then call racewalknode(&n->right), and then combine n->right->ninit and instrumentation?\nI am sure I've seen such code somewhere (probably in walk()).\nHowever, then we will need to racewalk n->right->ninit separately.\nMost likely what I am suggesting is wrong...",
			"disapproval": false,
			"date": "2013-06-03 08:45:45.325540",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 08:23:54, remyoudompheng wrote:\n> On 2013/06/03 08:20:31, DMorsing wrote:\n> > https://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c\n> > File src/cmd/gc/racewalk.c (right):\n> > \n> >\n> https://codereview.appspot.com/9910043/diff/13001/src/cmd/gc/racewalk.c#newcode261\n> > src/cmd/gc/racewalk.c:261: // if right has an non-empty init list, l will be\n> > pointed at it.\n> > On 2013/06/03 06:57:08, dvyukov wrote:\n> > > how does it happen?\n> > > as far as I see, if n->right is e.g. OIND, then l will contain just the new\n> > > instrumentation node\n> > \n> > Non-empty init lists only happen when inlining. Inlining will put init lists\n> on\n> > expressions which call functions that are inlined.\n> > \n> > The racewalknode above will eventually call mkcall which will call walkexpr on\n> > its argument. walkexpr will append the init list of the expression onto the\n> init\n> > argument given. We end up with l being the same list at n->right.\n> > \n> > Another fix is to make treecopy copy init lists, but this means that we're\n> > executing the same init statements twice and since inlining create gotos, you\n> > can't copy this list without ending up with duplicate goto labels.\n> \n> So your fix works when init == l.\n> Is it possible that:\n> * init is non empty\n> * l is appended to init\n> * l is appended to init *again*.\n> \n> Then your check would not be enough, do you see a scenario where it would\n> happen?\n\nYou got it backwards, init is appended to l and l is always empty, so the check is always valid.",
			"disapproval": false,
			"date": "2013-06-03 08:35:41.406330",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 08:45:45, dvyukov wrote:\n> Should we then remember n->right->ninit in l or in a separate var, then set\n> n->right->ninit to nil, then call racewalknode(&n->right), and then combine\n> n->right->ninit and instrumentation?\n> I am sure I've seen such code somewhere (probably in walk()).\n> However, then we will need to racewalk n->right->ninit separately.\n> Most likely what I am suggesting is wrong...\n\n\nIf you move the test into regression_test.go, and you and Remy agree, and the tests pass, then it's fine with me.",
			"disapproval": false,
			"date": "2013-06-03 08:46:54.235690",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2013-06-03 17:44:31.283080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This doesn't seem right. The correct behavior seems unlikely to depend on the exact pointer values here. Either n->right needs to be put onto the init list or not. Do we need a new variable to keep the two possible lists separate?",
			"disapproval": false,
			"date": "2013-06-03 19:50:42.127870",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 19:50:42, rsc wrote:\n> This doesn't seem right. The correct behavior seems unlikely to depend on the\n> exact pointer values here. Either n->right needs to be put onto the init list or\n> not. Do we need a new variable to keep the two possible lists separate?\n\nWe still need to instrument the init list, so we can't set it to nil before racewalking the node and the instrumentation has to be inline in the list to have the right ordering, so we can't add a separate list.\n\nHow about having a self concat check in appendinit?",
			"disapproval": false,
			"date": "2013-06-06 15:32:27.031110",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/06 15:32:27, DMorsing wrote:\n> On 2013/06/03 19:50:42, rsc wrote:\n> > This doesn't seem right. The correct behavior seems unlikely to depend on the\n> > exact pointer values here. Either n->right needs to be put onto the init list\n> or\n> > not. Do we need a new variable to keep the two possible lists separate?\n> \n> We still need to instrument the init list, so we can't set it to nil before\n> racewalking the node and the instrumentation has to be inline in the list to\n> have the right ordering, so we can't add a separate list.\n> \n> How about having a self concat check in appendinit?\n\nIsn't it the same as what we have now (just with a check in a different place)?\n\nCan't we set init to nil, walk node, manually walk saved init list, and then combine it all in proper order?",
			"disapproval": false,
			"date": "2013-06-06 15:39:10.800930",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/06 15:39:10, dvyukov wrote:\n> On 2013/06/06 15:32:27, DMorsing wrote:\n> > On 2013/06/03 19:50:42, rsc wrote:\n> > > This doesn't seem right. The correct behavior seems unlikely to depend on\n> the\n> > > exact pointer values here. Either n->right needs to be put onto the init\n> list\n> > or\n> > > not. Do we need a new variable to keep the two possible lists separate?\n> > \n> > We still need to instrument the init list, so we can't set it to nil before\n> > racewalking the node and the instrumentation has to be inline in the list to\n> > have the right ordering, so we can't add a separate list.\n> > \n> > How about having a self concat check in appendinit?\n> \n> Isn't it the same as what we have now (just with a check in a different place)?\n> \n> Can't we set init to nil, walk node, manually walk saved init list, and then\n> combine it all in proper order?\n\nOh, I thought the race instrumentation was interleaved with the original code somehow in the init list. Will do.",
			"disapproval": false,
			"date": "2013-06-06 15:53:13.003220",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2013-06-06 16:10:31.230910",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/06 16:10:31, DMorsing wrote:\n> PTAL.\n\nlooks good, but wait for Russ",
			"disapproval": false,
			"date": "2013-06-06 16:13:12.683830",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping?",
			"disapproval": false,
			"date": "2013-06-11 16:37:42.508050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks. That logic I believe!",
			"disapproval": false,
			"date": "2013-06-11 19:12:09.194170",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c56c0d1f613e ***\n\ncmd/gc: avoid creating circular lists when compiling with race detector.\n\nFixes issue 5431.\n\nR=dvyukov, remyoudompheng, rsc\nCC=gobot, golang-dev\nhttps://codereview.appspot.com/9910043",
			"disapproval": false,
			"date": "2013-06-11 19:19:34.116120",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 9910043: cmd/gc: avoid creating circular lists when compiling wi...",
	"created": "2013-05-31 19:01:00.197170",
	"patchsets": [
		1,
		2001,
		5001,
		13001,
		17002,
		30001,
		36002
	],
	"modified": "2013-07-24 09:50:28.589650",
	"closed": true,
	"issue": 9910043
}