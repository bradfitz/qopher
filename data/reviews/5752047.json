{
	"description": "unicode/utf16: delete dependence on package unicode\nIn the test, verify the copied constants are correct.\nAlso put the test into package utf16 rather than utf16_test;\nthe old location was probably due creating the test from\nutf8, but the separation is not needed here.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"rsc@google.com",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 5, 2012 at 6:59 PM, Russ Cox <rsc@golang.org> wrote:\n\n> The test package must be utf16_test.\n> On Windows, syscall (and therefore testing)\n> depends on utf16.\n>\n\nI don't follow.  It's still named *_test.go, so I'd think it wouldn't be\nbuilt in normal cases?\n",
			"disapproval": false,
			"date": "2012-03-06 03:03:42.918133",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 5, 2012 at 22:48, Rob 'Commander' Pike <r@google.com> wrote:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0rsc: LGTM\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0rsc: Actually, NOT LGTM\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0rsc: LGTM\n\nI contain multitudes.  - iant\n",
			"disapproval": false,
			"date": "2012-03-06 03:49:25.259906",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=75c176cc7e69 ***\n\nunicode/utf16: delete dependence on package unicode\nIn the test, verify the copied constants are correct.\nAlso put the test into package utf16 rather than utf16_test;\nthe old location was probably due creating the test from\nutf8, but the separation is not needed here.\n\nR=golang-dev, bradfitz, rsc, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5752047",
			"disapproval": false,
			"date": "2012-03-06 03:58:12.907826",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-06 02:19:57.676522",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Mar 5, 2012 at 6:19 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> unicode/utf16: delete dependence on package unicode\n> In the test, verify the copied constants are correct.\n> Also put the test into package utf16 rather than utf16_test;\n> the old location was probably due creating the test from\n> utf8, but the separation is not needed here.\n>\n> Please review this at http://codereview.appspot.com/**5752047/<http://codereview.appspot.com/5752047/>\n>\n> Affected files:\n>  M src/pkg/unicode/utf16/utf16.go\n>  M src/pkg/unicode/utf16/utf16_**test.go\n>\n>\n> Index: src/pkg/unicode/utf16/utf16.go\n> ==============================**==============================**=======\n> --- a/src/pkg/unicode/utf16/utf16.**go\n> +++ b/src/pkg/unicode/utf16/utf16.**go\n> @@ -5,7 +5,14 @@\n>  // Package utf16 implements encoding and decoding of UTF-16 sequences.\n>  package utf16\n>\n> -import \"unicode\"\n> +// The conditions replacementChar==unicode.**ReplacementChar and\n> +// maxRune==unicode.MaxRune are verified in the tests.\n> +// Defining them locally avoids this package depending on package unicode.\n> +\n> +const (\n> +       replacementChar = '\\uFFFD'     // Unicode replacement character\n> +       maxRune         = '\\U0010FFFF' // Maximum valid Unicode code point.\n> +)\n>\n>  const (\n>        // 0xd800-0xdc00 encodes the high 10 bits of a pair.\n> @@ -31,15 +38,15 @@\n>        if surr1 <= r1 && r1 < surr2 && surr2 <= r2 && r2 < surr3 {\n>                return (rune(r1)-surr1)<<10 | (rune(r2) - surr2) + 0x10000\n>        }\n> -       return unicode.ReplacementChar\n> +       return replacementChar\n>  }\n>\n>  // EncodeRune returns the UTF-16 surrogate pair r1, r2 for the given rune.\n>  // If the rune is not a valid Unicode code point or does not need\n> encoding,\n>  // EncodeRune returns U+FFFD, U+FFFD.\n>  func EncodeRune(r rune) (r1, r2 rune) {\n> -       if r < surrSelf || r > unicode.MaxRune || IsSurrogate(r) {\n> -               return unicode.ReplacementChar, unicode.ReplacementChar\n> +       if r < surrSelf || r > maxRune || IsSurrogate(r) {\n> +               return replacementChar, replacementChar\n>        }\n>        r -= surrSelf\n>        return surr1 + (r>>10)&0x3ff, surr2 + r&0x3ff\n> @@ -58,8 +65,8 @@\n>        n = 0\n>        for _, v := range s {\n>                switch {\n> -               case v < 0, surr1 <= v && v < surr3, v > unicode.MaxRune:\n> -                       v = unicode.ReplacementChar\n> +               case v < 0, surr1 <= v && v < surr3, v > maxRune:\n> +                       v = replacementChar\n>                        fallthrough\n>                case v < surrSelf:\n>                        a[n] = uint16(v)\n> @@ -89,7 +96,7 @@\n>                        n++\n>                case surr1 <= r && r < surr3:\n>                        // invalid surrogate sequence\n> -                       a[n] = unicode.ReplacementChar\n> +                       a[n] = replacementChar\n>                        n++\n>                default:\n>                        // normal rune\n> Index: src/pkg/unicode/utf16/utf16_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/unicode/utf16/utf16_**test.go\n> +++ b/src/pkg/unicode/utf16/utf16_**test.go\n> @@ -2,15 +2,24 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -package utf16_test\n> +package utf16\n>\n>  import (\n>        \"reflect\"\n>        \"testing\"\n>        \"unicode\"\n> -       . \"unicode/utf16\"\n>  )\n>\n> +// Validate the constants redefined from unicode.\n> +func init() {\n> +       if maxRune != unicode.MaxRune {\n> +               panic(\"utf16.maxRune is wrong\")\n> +       }\n> +       if replacementChar != unicode.ReplacementChar {\n> +               panic(\"utf16.replacementChar is wrong\")\n> +       }\n> +}\n> +\n>  type encodeTest struct {\n>        in  []rune\n>        out []uint16\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-06 02:22:33.404285",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test package must be utf16_test.\nOn Windows, syscall (and therefore testing)\ndepends on utf16.\n",
			"disapproval": false,
			"date": "2012-03-06 02:59:18.717407",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-03-06 02:58:20.852271",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As if you needed further evidence of the existence of more than one Russ.\n\nOn Mon, Mar 5, 2012 at 7:48 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n>                rsc: LGTM\n>                rsc: Actually, NOT LGTM\n>                rsc: LGTM\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-06 03:49:46.839437",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Actually, NOT LGTM\n",
			"disapproval": true,
			"date": "2012-03-06 02:58:50.583627",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> The test package must be utf16_test.\n>> On Windows, syscall (and therefore testing)\n>> depends on utf16.\n>\n> I don't follow. \u00a0It's still named *_test.go, so I'd think it wouldn't be\n> built in normal cases?\n\nYou cannot have\n\npackage utf16\n\nimport \"testing\"\n\nbecause testing imports syscall and on Windows syscall imports utf16.\nInstead you have to use an export_test.go file like we do in other\npackages imported by testing to get at internals.\n",
			"disapproval": false,
			"date": "2012-03-06 03:05:57.314194",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-06 03:28:39.359487",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\t\trsc: LGTM\n\t\trsc: Actually, NOT LGTM\n\t\trsc: LGTM\n\n",
			"disapproval": true,
			"date": "2012-03-06 03:48:07.172211",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "apologies - neglected to update the CL description about utf16_test\n\nOn Mar 6, 2012, at 2:58 PM, r@golang.org wrote:\n\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=75c176cc7e69 ***\n> \n> unicode/utf16: delete dependence on package unicode\n> In the test, verify the copied constants are correct.\n> Also put the test into package utf16 rather than utf16_test;\n> the old location was probably due creating the test from\n> utf8, but the separation is not needed here.\n> \n> R=golang-dev, bradfitz, rsc, rsc, r\n> CC=golang-dev\n> http://codereview.appspot.com/5752047\n> \n> \n> http://codereview.appspot.com/5752047/\n\n",
			"disapproval": false,
			"date": "2012-03-06 03:59:17.691111",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5752047/diff/6001/src/pkg/unicode/utf16/export_test.go\nFile src/pkg/unicode/utf16/export_test.go (right):\n\nhttp://codereview.appspot.com/5752047/diff/6001/src/pkg/unicode/utf16/export_test.go#newcode7\nsrc/pkg/unicode/utf16/export_test.go:7: // Extra functions to export constants so we can validate them during testing.\nFine but also fine:\n\nconst (\n   MaxRune = maxRune\n   ...\n\nhttp://codereview.appspot.com/5752047/diff/6001/src/pkg/unicode/utf16/utf16_test.go\nFile src/pkg/unicode/utf16/utf16_test.go (right):\n\nhttp://codereview.appspot.com/5752047/diff/6001/src/pkg/unicode/utf16/utf16_test.go#newcode15\nsrc/pkg/unicode/utf16/utf16_test.go:15: func init() {\nTestConst(t *testing.T) + t.Errorf?",
			"disapproval": false,
			"date": "2012-03-06 03:31:27.270607",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5752047: unicode/utf16: delete dependence on package unicode",
	"created": "2012-03-06 02:19:47.659229",
	"patchsets": [
		1,
		6001,
		6002,
		1007
	],
	"modified": "2012-03-06 03:58:15.758928",
	"closed": true,
	"issue": 5752047
}