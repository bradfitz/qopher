{
	"description": "regexp: add Split() method\n\nAs discussed in issue 2672 and on golang-nuts, this CL adds a Split() method\nto regexp. It is based on returning the \"opposite\" of FindAllString() so that\nthe returned substrings are everything not matched by the expression.\n\nSee: https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/xodBZh9Lh2E\n\nFixes issue 2762.",
	"cc": [
		"remyoudompheng@gmail.com",
		"r@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-14 01:07:56.124030",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/13 23:52:36, r wrote:\n> http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go\n> File src/pkg/regexp/all_test.go (right):\n> \n> http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go#newcode426\n> src/pkg/regexp/all_test.go:426: {\"foo:and:bar\", \":\", -1, []string{\"foo\", \"and\",\n> \"bar\"}},\n> always test empty strings!\n> here we need to test empty input with matching and non-matching patterns,\n> empty patterns with empt and non-empty input, etc.\n\nDone. Added 5 different empty string variations.\n\n> http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go#newcode444\n> src/pkg/regexp/all_test.go:444: t.Errorf(\"Split: test %d: expression doesn't\n> compile: %s\", i, test.r)\n> include the error\n\nDone.\n \n> http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go#newcode448\n> src/pkg/regexp/all_test.go:448: split := re.Split(test.s, test.n)\n> reflect.DeepEqual is easier than all this.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-14 01:08:52.542830",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/all_test.go\nFile src/pkg/regexp/all_test.go (right):\n\nhttps://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/all_test.go#newcode450\nsrc/pkg/regexp/all_test.go:450: t.Errorf(\"Split: test %d: expression doesn't compile: %s; error: %s\", i, test.r, err.Error())\nneedlessly verbose.\n\n#%d: %q: compile error: %s\n\nhttps://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/all_test.go#newcode456\nsrc/pkg/regexp/all_test.go:456: t.Errorf(\"Split: test %d: split = %#v; want = %#v\", i, split, test.out)\nhere and above s/Split: test %d/#%d: %q:/\nthe diagnostics from the testing package include the name of the test.\n\nhttps://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttps://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/regexp.go#newcode1054\nsrc/pkg/regexp/regexp.go:1054: // the integer argument n indicates the maximum number of matches to split against\n\"against\"? does this mean n refers to the matches not the return value?\nit should be the return value, i believe.\n\nhttps://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/regexp.go#newcode1061\nsrc/pkg/regexp/regexp.go:1061: // split against + 1.\naha. no, this feels wrong to me. maybe others disagree. the return value should be a local decision, not one affected by the signature of a separate function.",
			"disapproval": false,
			"date": "2012-11-19 20:39:47.889010",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2012-11-21 20:26:18.040230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think if you make these test changes you will find that the matching loop needs a little bit more work. I would suggest looking at the implementation of strings.SplitN for inspiration.\n\nAlso, if you pass n-1 to FindAllIndex you should be able to simplify the loop a little, because you won't have to worry about using too many matches.\n\nhttps://codereview.appspot.com/6846048/diff/13001/src/pkg/regexp/all_test.go\nFile src/pkg/regexp/all_test.go (right):\n\nhttps://codereview.appspot.com/6846048/diff/13001/src/pkg/regexp/all_test.go#newcode421\nsrc/pkg/regexp/all_test.go:421: var tests = []struct {\nPlease move this up out of the function.\n\nvar splitTests = []...\n\nfunc TestSplit(t *testing.T) { \n...\n\nhttps://codereview.appspot.com/6846048/diff/13001/src/pkg/regexp/all_test.go#newcode448\nsrc/pkg/regexp/all_test.go:448: {\"abaabaccadaaae\", \"a*\", 5, []string{\"b\", \"b\", \"c\", \"c\", \"daaae\"}},\nPlease add\n\n{\":x:y:z:\", \":\", -1, []string{\"\", \"x\", \"y\", \"z\", \"\"}}\n\nhttps://codereview.appspot.com/6846048/diff/13001/src/pkg/regexp/all_test.go#newcode460\nsrc/pkg/regexp/all_test.go:460: t.Errorf(\"#%d: %q: got %#v; want %#v\", i, test.r, split, test.out)\n%#v is fine here but you might find %q a little more readable\n\nhttps://codereview.appspot.com/6846048/diff/13001/src/pkg/regexp/all_test.go#newcode461\nsrc/pkg/regexp/all_test.go:461: }\nadd\n\nif QuoteMeta(test.r) == test.r {\n    strsplit := strings.SplitN(test.s, test.r, test.n)\n    if !reflect.DeepEqual(split, strsplit) {\n        t.Errorf(\"#%d: Split(%q, %q, %d): regexp vs strings mismatch\\nregexp=%q\\nstrings=%q\", i, test.s, test.r, test.n, split, strsplit)\n    }\n}",
			"disapproval": false,
			"date": "2012-11-26 15:16:49.693060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttps://codereview.appspot.com/6846048/diff/8003/src/pkg/regexp/regexp.go#newcode1061\nsrc/pkg/regexp/regexp.go:1061: // split against + 1.\nOn 2012/11/19 20:39:47, r wrote:\n> aha. no, this feels wrong to me. maybe others disagree. the return value should\n> be a local decision, not one affected by the signature of a separate function.\n\nI agree. The N here should be the same interpretation as in strings.SplitN.",
			"disapproval": false,
			"date": "2012-11-19 20:41:06.260680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-11-27 17:58:33.408590",
			"approval": true
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-13 23:24:20.127760",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/13 23:47:08, remyoudompheng wrote:\n> http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/regexp.go\n> File src/pkg/regexp/regexp.go (right):\n> \n> http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/regexp.go#newcode1054\n> src/pkg/regexp/regexp.go:1054: // indicates the maximum number of splits to\n> perform when n >= 0.\n> this looks inconsistent with strings.SplitN\n\nChanged the comment to indicate it is consistent with regexp 'All' methods instead of strings.SplitN().\n\n> http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/regexp.go#newcode1059\n> src/pkg/regexp/regexp.go:1059: // The length of the returned slice is equal to\n> the number of matches found + 1.\n> this doesn't look correct, it seems it is rather #matches+1\n\nUpdated the comment to indicate it is the number of matches actually applied + 1. Does that look better?",
			"disapproval": false,
			"date": "2012-11-14 01:10:12.582920",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello remyoudompheng@gmail.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-20 00:41:42.782000",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks for being patient with me on this CL. I am new to this and learning a lot about submitting a good patch.",
			"disapproval": false,
			"date": "2012-11-20 00:43:03.042860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think if you have a literal string s and you use strings.SplitN, and\r\nthen you convert to use an equivalent regexp with Split, the behavior\r\nneeds to not change at all, not even in corner cases.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-11-26 16:31:36.299280",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello remyoudompheng@gmail.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-20 02:31:45.945860",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-13 23:25:16.078310",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttp://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/regexp.go#newcode1054\nsrc/pkg/regexp/regexp.go:1054: // indicates the maximum number of splits to perform when n >= 0.\nthis looks inconsistent with strings.SplitN\n\nhttp://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/regexp.go#newcode1059\nsrc/pkg/regexp/regexp.go:1059: // The length of the returned slice is equal to the number of matches found + 1.\nthis doesn't look correct, it seems it is rather #matches+1",
			"disapproval": false,
			"date": "2012-11-13 23:47:08.783530",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello remyoudompheng@gmail.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-27 01:30:15.990750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=efc46b2230aa ***\n\nregexp: add Split\n\nAs discussed in issue 2672 and on golang-nuts, this CL adds a Split() method\nto regexp. It is based on returning the \"opposite\" of FindAllString() so that\nthe returned substrings are everything not matched by the expression.\n\nSee: https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/xodBZh9Lh2E\n\nFixes issue 2762.\n\nR=remyoudompheng, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6846048\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-11-27 17:58:31.975980",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go\nFile src/pkg/regexp/all_test.go (right):\n\nhttp://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go#newcode426\nsrc/pkg/regexp/all_test.go:426: {\"foo:and:bar\", \":\", -1, []string{\"foo\", \"and\", \"bar\"}},\nalways test empty strings!\nhere we need to test empty input with matching and non-matching patterns,\nempty patterns with empt and non-empty input, etc.\n\nhttp://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go#newcode444\nsrc/pkg/regexp/all_test.go:444: t.Errorf(\"Split: test %d: expression doesn't compile: %s\", i, test.r)\ninclude the error\n\nhttp://codereview.appspot.com/6846048/diff/7001/src/pkg/regexp/all_test.go#newcode448\nsrc/pkg/regexp/all_test.go:448: split := re.Split(test.s, test.n)\nreflect.DeepEqual is easier than all this.",
			"disapproval": false,
			"date": "2012-11-13 23:52:36.664550",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n\r\nOn Monday, November 26, 2012 10:16:53 AM UTC-5, rsc wrote:\r\n>\r\n> I think if you make these test changes you will find that the matching \r\n> loop needs a little bit more work. I would suggest looking at the \r\n> implementation of strings.SplitN for inspiration. \r\n>\r\n\r\nThanks, I will check these out. So you think the results should be the same \r\nas strings.SplitN where possible? What we discussed on golang-nuts (and the \r\nfunction documentation) says it will return the opposite of FindAllIndex(), \r\nwhich doesn't necessarily match unless I'm understanding it differently.\r\n\r\nFor instance:\r\n\r\nstrings.SplitN(\"foo:and:bar:foo\", \"foo\", -1) --> [\"\", \":and:bar:\", \"\"]\r\n\r\nregexp.MustCompile(\"foo\").FindAllIndex([]byte(\"foo:and:bar:foo\"), -1) --> [0, \r\n3], [12, 15]\r\n(so the result string would be everything not contained in [0, 3] and [12, \r\n15] or \":and:bar:\")\r\n\r\n\r\nIf so, do you have a better way of describing how the function works for \r\nthe documentation? It sounds like you mostly want the behavior of patch set \r\n5?\r\n\r\nThanks,\r\nRick\r\n\r\n\r\n",
			"disapproval": false,
			"date": "2012-11-26 16:16:58.441470",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2012-11-19 20:30:55.767850",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "it's nearly there\n\nhttps://codereview.appspot.com/6846048/diff/2002/src/pkg/regexp/all_test.go\nFile src/pkg/regexp/all_test.go (right):\n\nhttps://codereview.appspot.com/6846048/diff/2002/src/pkg/regexp/all_test.go#newcode459\nsrc/pkg/regexp/all_test.go:459: t.Errorf(\"#%d: %q: split = %#v; want = %#v\", i, test.r, split, test.out)\nconvention:\n\ns/split =/got/\ns/want =/want/\n\nhttps://codereview.appspot.com/6846048/diff/2002/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttps://codereview.appspot.com/6846048/diff/2002/src/pkg/regexp/regexp.go#newcode1056\nsrc/pkg/regexp/regexp.go:1056: // not contained in the slice returned by FindAllString().\nthis is confusing enough i think a simple one-line example here would help.",
			"disapproval": false,
			"date": "2012-11-20 01:05:27.090270",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI used FindAllStringIndex(s, n) instead of FindAllStringIndex(s, n-1) since sometimes a regular expression will match before the start of the string and I need to skip that match. For example:\n`a*`.Split(\"baabaab\", 3) would result in: [\"\", \"b\", \"baab\"] instead of [\"b\", \"b\", \"b\"] without the extra match logic.",
			"disapproval": false,
			"date": "2012-11-27 01:39:00.688920",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello remyoudompheng@gmail.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-27 01:34:02.228150",
			"approval": false
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 6846048: regexp: add Split() method",
	"created": "2012-11-13 23:15:50.743980",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		8003,
		2002,
		13001,
		1009,
		15001
	],
	"modified": "2012-11-28 01:21:42.924080",
	"closed": true,
	"issue": 6846048
}