{
	"description": "syscall: Added new functions to support os.user in Windows.\n\nContains the syscall functions required to implement issue 1789.\nAlso contains changes originally part of codereview issue 4521053.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"alex.brainman@gmail.com",
		"bradfitz@google.com",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/18 14:58:06, pjmlp wrote:\n> If I use the errno as the only return value, the buffer returned by\n> GetUserNameEx is corrupted.\n\nForgot to say that I am looking at the stub generation, maybe something is wrong with this function.",
			"disapproval": false,
			"date": "2011-05-18 15:01:33.959264",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go#newcode548\nsrc/pkg/syscall/ztypes_windows_386.go:548: type SID []byte\nOn 2011/05/20 16:33:14, bradfitzgoog wrote:\n> On 2011/05/20 16:28:39, pjmlp wrote:\n> > On 2011/05/20 15:51:32, bradfitzgoog wrote:\n> > > this being mutable is a bit scary.  could this just be a string and turned\n> > into\n> > > a []byte if needed for system calls?\n> > \n> > Then you will pay the cost of converting every time it is needed.\n> >\n> \n> Well, looking up users isn't exactly a hot path.  Even if you looked up ever\n> user in a large company, that's not many calls.\n> \n> I'd choose safety and peace of mind here over a negligible optimization that is\n> really the compiler's problem.\n\nOk, I'll do it as suggested.\n\nhttp://codereview.appspot.com/4528073/diff/19001/src/pkg/syscall/ztypes_windows_386.go#newcode555\nsrc/pkg/syscall/ztypes_windows_386.go:555: SidTypeDomain\nOn 2011/05/22 22:44:08, bradfitz wrote:\n> these are all equal to 1.  I doubt that's what you meant?\n\nI was expecting the same behavior as in most languages. SidTypeUser gets the value 1 and the other auto-increment.\n\nSo it is not the case with Go, I imagine. I'll fix it.",
			"disapproval": false,
			"date": "2011-05-23 06:28:35.908984",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go#newcode548\nsrc/pkg/syscall/ztypes_windows_386.go:548: type SID []byte\nOn 2011/05/20 15:51:32, bradfitzgoog wrote:\n> this being mutable is a bit scary.  could this just be a string and turned into\n> a []byte if needed for system calls?\n\nThen you will pay the cost of converting every time it is needed.",
			"disapproval": false,
			"date": "2011-05-20 16:28:39.530523",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please, include changes to zsyscall_windows_386.go in this CL.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go#newcode131\nsrc/pkg/syscall/syscall_windows.go:131: //sys\tGetUserName(buf *uint16, n *uint32) (success bool, errno int) = advapi32.GetUserNameW\nChange all these functions to return (errno int), not (success bool, errno int). Please see GetComputerName for an example.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go#newcode385\nsrc/pkg/syscall/syscall_windows.go:385: type SID []byte\nPut this into ztypes_windows_386.go.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go#newcode3\nsrc/pkg/syscall/ztypes_windows_386.go:3: // TODO(brainman): autogenerate types in ztypes_windows_386.go\nPlease, fix all end of lines. None of these lines you're going to change. Are you?\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go#newcode554\nsrc/pkg/syscall/ztypes_windows_386.go:554: const UNLEN = 256\nI don't think you need this const.",
			"disapproval": false,
			"date": "2011-05-18 05:57:16.516673",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/19 02:43:32, brainman wrote:\n> On 2011/05/18 15:07:46, pjmlp wrote:\n> > Isn't this file generated from mkall.sh script?\n> > \n> \n> It is. But it is not getting regenerated during the build, and have to be\n> included in CL. For a recent example, see http://tinyurl.com/3e6s6qj.\n> \n> Alex\n\nFaire enough, I'll include it as well. Not sure if it plays well with the rest of the code due to my mkerrors_windows.sh hack, but you can check it.",
			"disapproval": false,
			"date": "2011-05-19 11:53:38.863471",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/20 15:51:32, bradfitzgoog wrote:\n> ... type SID []byte\n> this being mutable is a bit scary.  ...\n\nIt is as \"mutable\" as its \"unix\" contra-part. It is a number, just much bigger. :-)\n\nAlex",
			"disapproval": false,
			"date": "2011-05-21 02:49:30.048706",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go#newcode131\nsrc/pkg/syscall/syscall_windows.go:131: //sys\tGetUserName(buf *uint16, n *uint32) (success bool, errno int) = advapi32.GetUserNameW\nOn 2011/05/18 05:57:16, brainman wrote:\n> Change all these functions to return (errno int), not (success bool, errno int).\n> Please see GetComputerName for an example.\n\nWhy? They are supposed to return bool, and fail with the errno only signature.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go#newcode385\nsrc/pkg/syscall/syscall_windows.go:385: type SID []byte\nOn 2011/05/18 05:57:16, brainman wrote:\n> Put this into ztypes_windows_386.go.\n\nDone.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go#newcode3\nsrc/pkg/syscall/ztypes_windows_386.go:3: // TODO(brainman): autogenerate types in ztypes_windows_386.go\nOn 2011/05/18 05:57:16, brainman wrote:\n> Please, fix all end of lines. None of these lines you're going to change. Are\n> you?\n\nI have not done anything here.\n\nA normal diff between both files does not show line ending differences, only hg diff does show such a difference.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go#newcode554\nsrc/pkg/syscall/ztypes_windows_386.go:554: const UNLEN = 256\nOn 2011/05/18 05:57:16, brainman wrote:\n> I don't think you need this const.\n\nDone.",
			"disapproval": false,
			"date": "2011-05-18 09:20:43.384673",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/23 06:31:36, pjmlp wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:alex.brainman@gmail.com, mailto:bradfitz@google.com,\n> mailto:bradfitz@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nAny update on this?",
			"disapproval": false,
			"date": "2011-06-07 14:18:05.453915",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/19001/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/19001/src/pkg/syscall/ztypes_windows_386.go#newcode555\nsrc/pkg/syscall/ztypes_windows_386.go:555: SidTypeGroup\nthese are all equal to 1.  I doubt that's what you meant?",
			"disapproval": false,
			"date": "2011-05-22 22:44:08.107102",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-19 12:22:29.805870",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go#newcode548\nsrc/pkg/syscall/ztypes_windows_386.go:548: type SID []byte\nthis being mutable is a bit scary.  could this just be a string and turned into a []byte if needed for system calls?",
			"disapproval": false,
			"date": "2011-05-20 15:51:32.826306",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please, include changes to zsyscall_windows_386.go in this CL.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/syscall_windows.go#newcode131\nsrc/pkg/syscall/syscall_windows.go:131: //sys\tGetUserName(buf *uint16, n *uint32) (success bool, errno int) = advapi32.GetUserNameW\nOn 2011/05/18 09:20:43, pjmlp wrote:\n> Why? ...\n\nBecause that is what other functions that return bool do. Please, see GetComputerName for an example.\n\n> ... They are supposed to return bool, and fail with the errno only signature.\n\nHow do they fail? Please, look at GetComputerName implementation in zsyscall_windows_386.go - if Windows API returns true, GetComputerName returns 0, otherwise it returns error number.\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/2001/src/pkg/syscall/ztypes_windows_386.go#newcode3\nsrc/pkg/syscall/ztypes_windows_386.go:3: // TODO(brainman): autogenerate types in ztypes_windows_386.go\nOn 2011/05/18 09:20:43, pjmlp wrote:\n> \n> I have not done anything here.\n> \n> A normal diff between both files does not show line ending differences, only hg\n> diff does show such a difference.\n\nI can't apply your patch. I get this message:\n\ncodereview issue 4528073 is out of date: patch and recent changes conflict (2f0fa51fa2da->4ce4c75f9bb5)\n\nI think you should update your patch to the tip.",
			"disapproval": false,
			"date": "2011-05-18 12:08:23.158010",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com, bradfitz@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-22 19:00:03.722976",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, brainman (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-05-18 09:21:05.202192",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "If I use the errno as the only return value, the buffer returned by GetUserNameEx is corrupted.",
			"disapproval": false,
			"date": "2011-05-18 14:58:06.978131",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Isn't this file generated from mkall.sh script?\n\nOn 2011/05/18 12:08:23, brainman wrote:\n> Please, include changes to zsyscall_windows_386.go in this CL.",
			"disapproval": false,
			"date": "2011-05-18 15:07:46.923853",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/18 14:58:06, pjmlp wrote:\n> If I use the errno as the only return value, the buffer returned by\n> GetUserNameEx is corrupted.\n\nI have no such problem. If you apply this change to current repo:\n\ndiff -r 5f12c225a82c src/pkg/syscall/syscall_windows.go\n--- a/src/pkg/syscall/syscall_windows.go\tWed May 18 17:17:26 2011 -0700\n+++ b/src/pkg/syscall/syscall_windows.go\tThu May 19 12:32:56 2011 +1000\n@@ -167,6 +167,7 @@\n //sys\tFlushViewOfFile(addr uintptr, length uintptr) (errno int)\n //sys\tVirtualLock(addr uintptr, length uintptr) (errno int)\n //sys\tVirtualUnlock(addr uintptr, length uintptr) (errno int)\n+//sys\tGetUserNameEx(format int32, buf *uint16, n *uint32) (errno int) = secur32.GetUserNameExW\n \n // syscall interface implementation for other packages\n \ndiff -r 5f12c225a82c src/pkg/syscall/zsyscall_windows_386.go\n--- a/src/pkg/syscall/zsyscall_windows_386.go\tWed May 18 17:17:26 2011 -0700\n+++ b/src/pkg/syscall/zsyscall_windows_386.go\tThu May 19 12:32:56 2011 +1000\n@@ -9,6 +9,7 @@\n \tmodkernel32 = loadDll(\"kernel32.dll\")\n \tmodadvapi32 = loadDll(\"advapi32.dll\")\n \tmodshell32  = loadDll(\"shell32.dll\")\n+\tmodsecur32  = loadDll(\"secur32.dll\")\n \tmodwsock32  = loadDll(\"wsock32.dll\")\n \tmodws2_32   = loadDll(\"ws2_32.dll\")\n \tmoddnsapi   = loadDll(\"dnsapi.dll\")\n@@ -76,6 +77,7 @@\n \tprocFlushViewOfFile            = getSysProcAddr(modkernel32, \"FlushViewOfFile\")\n \tprocVirtualLock                = getSysProcAddr(modkernel32, \"VirtualLock\")\n \tprocVirtualUnlock              = getSysProcAddr(modkernel32, \"VirtualUnlock\")\n+\tprocGetUserNameExW             = getSysProcAddr(modsecur32, \"GetUserNameExW\")\n \tprocWSAStartup                 = getSysProcAddr(modwsock32, \"WSAStartup\")\n \tprocWSACleanup                 = getSysProcAddr(modwsock32, \"WSACleanup\")\n \tprocsocket                     = getSysProcAddr(modwsock32, \"socket\")\n@@ -993,6 +995,20 @@\n \treturn\n }\n \n+func GetUserNameEx(format int32, buf *uint16, n *uint32) (errno int) {\n+\tr1, _, e1 := Syscall(procGetUserNameExW, 3, uintptr(format), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(n)))\n+\tif int(r1) == 0 {\n+\t\tif e1 != 0 {\n+\t\t\terrno = int(e1)\n+\t\t} else {\n+\t\t\terrno = EINVAL\n+\t\t}\n+\t} else {\n+\t\terrno = 0\n+\t}\n+\treturn\n+}\n+\n func WSAStartup(verreq uint32, data *WSAData) (sockerrno int) {\n \tr0, _, _ := Syscall(procWSAStartup, 2, uintptr(verreq), uintptr(unsafe.Pointer(data)), 0)\n \tsockerrno = int(r0)\n\nthen this program\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"syscall\"\n\t\"utf16\"\n)\n\nfunc UserNameEx(format int32) (name string, err os.Error) {\n\tb := make([]uint16, 30)\n\tn := uint32(len(b))\n\te := syscall.GetUserNameEx(int32(format), &b[0], &n)\n\tif e == syscall.ERROR_INSUFFICIENT_BUFFER {\n\t\tb = make([]uint16, n)\n\t\te = syscall.GetUserNameEx(int32(format), &b[0], &n)\n\t}\n\tif e != 0 {\n\t\treturn \"\", os.NewSyscallError(\"GetUserNameEx\", e)\n\t}\n\t// trim terminating \\0\n\tfor ; n > 0 && b[n-1] == 0; n-- {\n\t}\n\treturn string(utf16.Decode(b[:n])), nil\n}\n\nfunc main() {\n\tu, e := UserNameEx(3)\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n\tfmt.Printf(\"%q\\n\", u)\n}\n\nprints my name, if run on my pc.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-19 02:37:09.066836",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/18 15:07:46, pjmlp wrote:\n> Isn't this file generated from mkall.sh script?\n> \n\nIt is. But it is not getting regenerated during the build, and have to be included in CL. For a recent example, see http://tinyurl.com/3e6s6qj.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-19 02:43:32.492499",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com, bradfitz@google.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-23 06:31:36.388615",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/19 02:37:09, brainman wrote:\n> On 2011/05/18 14:58:06, pjmlp wrote:\n> > If I use the errno as the only return value, the buffer returned by\n> > GetUserNameEx is corrupted.\n> \n> I have no such problem. If you apply this change to current repo:\n> \n> diff -r 5f12c225a82c src/pkg/syscall/syscall_windows.go\n> --- a/src/pkg/syscall/syscall_windows.go\tWed May 18 17:17:26 2011 -0700\n> +++ b/src/pkg/syscall/syscall_windows.go\tThu May 19 12:32:56 2011 +1000\n> @@ -167,6 +167,7 @@\n>  //sys\tFlushViewOfFile(addr uintptr, length uintptr) (errno int)\n>  //sys\tVirtualLock(addr uintptr, length uintptr) (errno int)\n>  //sys\tVirtualUnlock(addr uintptr, length uintptr) (errno int)\n> +//sys\tGetUserNameEx(format int32, buf *uint16, n *uint32) (errno int) =\n> secur32.GetUserNameExW\n>  \n>  // syscall interface implementation for other packages\n>  \n> diff -r 5f12c225a82c src/pkg/syscall/zsyscall_windows_386.go\n> --- a/src/pkg/syscall/zsyscall_windows_386.go\tWed May 18 17:17:26 2011 -0700\n> +++ b/src/pkg/syscall/zsyscall_windows_386.go\tThu May 19 12:32:56 2011 +1000\n> @@ -9,6 +9,7 @@\n>  \tmodkernel32 = loadDll(\"kernel32.dll\")\n>  \tmodadvapi32 = loadDll(\"advapi32.dll\")\n>  \tmodshell32  = loadDll(\"shell32.dll\")\n> +\tmodsecur32  = loadDll(\"secur32.dll\")\n>  \tmodwsock32  = loadDll(\"wsock32.dll\")\n>  \tmodws2_32   = loadDll(\"ws2_32.dll\")\n>  \tmoddnsapi   = loadDll(\"dnsapi.dll\")\n> @@ -76,6 +77,7 @@\n>  \tprocFlushViewOfFile            = getSysProcAddr(modkernel32,\n> \"FlushViewOfFile\")\n>  \tprocVirtualLock                = getSysProcAddr(modkernel32, \"VirtualLock\")\n>  \tprocVirtualUnlock              = getSysProcAddr(modkernel32, \"VirtualUnlock\")\n> +\tprocGetUserNameExW             = getSysProcAddr(modsecur32, \"GetUserNameExW\")\n>  \tprocWSAStartup                 = getSysProcAddr(modwsock32, \"WSAStartup\")\n>  \tprocWSACleanup                 = getSysProcAddr(modwsock32, \"WSACleanup\")\n>  \tprocsocket                     = getSysProcAddr(modwsock32, \"socket\")\n> @@ -993,6 +995,20 @@\n>  \treturn\n>  }\n>  \n> +func GetUserNameEx(format int32, buf *uint16, n *uint32) (errno int) {\n> +\tr1, _, e1 := Syscall(procGetUserNameExW, 3, uintptr(format),\n> uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(n)))\n> +\tif int(r1) == 0 {\n> +\t\tif e1 != 0 {\n> +\t\t\terrno = int(e1)\n> +\t\t} else {\n> +\t\t\terrno = EINVAL\n> +\t\t}\n> +\t} else {\n> +\t\terrno = 0\n> +\t}\n> +\treturn\n> +}\n> +\n>  func WSAStartup(verreq uint32, data *WSAData) (sockerrno int) {\n>  \tr0, _, _ := Syscall(procWSAStartup, 2, uintptr(verreq),\n> uintptr(unsafe.Pointer(data)), 0)\n>  \tsockerrno = int(r0)\n> \n> then this program\n> \n> package main\n> \n> import (\n> \t\"fmt\"\n> \t\"log\"\n> \t\"os\"\n> \t\"syscall\"\n> \t\"utf16\"\n> )\n> \n> func UserNameEx(format int32) (name string, err os.Error) {\n> \tb := make([]uint16, 30)\n> \tn := uint32(len(b))\n> \te := syscall.GetUserNameEx(int32(format), &b[0], &n)\n> \tif e == syscall.ERROR_INSUFFICIENT_BUFFER {\n> \t\tb = make([]uint16, n)\n> \t\te = syscall.GetUserNameEx(int32(format), &b[0], &n)\n> \t}\n> \tif e != 0 {\n> \t\treturn \"\", os.NewSyscallError(\"GetUserNameEx\", e)\n> \t}\n> \t// trim terminating \\0\n> \tfor ; n > 0 && b[n-1] == 0; n-- {\n> \t}\n> \treturn string(utf16.Decode(b[:n])), nil\n> }\n> \n> func main() {\n> \tu, e := UserNameEx(3)\n> \tif e != nil {\n> \t\tlog.Fatal(e)\n> \t}\n> \tfmt.Printf(\"%q\\n\", u)\n> }\n> \n> prints my name, if run on my pc.\n> \n> Alex\n\nSorry for the confusion. Now it seems to work and the only differences between our implementations is the for loop and the way n is initialized.\n\nDon't know why I had problems, maybe some overseen error.",
			"disapproval": false,
			"date": "2011-05-19 11:52:06.821978",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-19 12:18:06.037981",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM. But this might change depending where we going with 4521053.\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-20 02:21:03.712151",
			"approval": true
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/20 02:21:03, brainman wrote:\n> LGTM. But this might change depending where we going with 4521053.\n> \n> Thank you.\n> \n> Alex\n\nThanks.\n\nI am aware of it, actually I might still add a few more declarations because of 4521053, as you say.",
			"disapproval": false,
			"date": "2011-05-20 10:45:39.304090",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/7005/src/pkg/syscall/ztypes_windows_386.go#newcode548\nsrc/pkg/syscall/ztypes_windows_386.go:548: type SID []byte\nOn 2011/05/20 16:28:39, pjmlp wrote:\n> On 2011/05/20 15:51:32, bradfitzgoog wrote:\n> > this being mutable is a bit scary.  could this just be a string and turned\n> into\n> > a []byte if needed for system calls?\n> \n> Then you will pay the cost of converting every time it is needed.\n>\n\nWell, looking up users isn't exactly a hot path.  Even if you looked up ever user in a large company, that's not many calls.\n\nI'd choose safety and peace of mind here over a negligible optimization that is really the compiler's problem.",
			"disapproval": false,
			"date": "2011-05-20 16:33:13.980655",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com, bradfitz@google.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-12 21:41:19.007619",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go#newcode554\nsrc/pkg/syscall/ztypes_windows_386.go:554: NameFullyQualifiedDN = 1\ndid you mean for the rest of these to be int32 too?  currently it's an int, not int32.",
			"disapproval": false,
			"date": "2011-06-14 17:55:23.287235",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go#newcode554\nsrc/pkg/syscall/ztypes_windows_386.go:554: NameFullyQualifiedDN = 1\nOn 2011/06/14 17:55:23, bradfitz wrote:\n> did you mean for the rest of these to be int32 too?  currently it's an int, not\n> int32.\n\nThat was the idea. So it seems I have to redeclare int32 everywhere, since these constants are part of a C enum. Or would it fit inside an int?",
			"disapproval": false,
			"date": "2011-06-14 19:29:40.758550",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jun 14, 2011 at 12:29 PM, <paulo.jpinto@gmail.com> wrote:\n\n>\n> http://codereview.appspot.com/**4528073/diff/21001/src/pkg/**\n> syscall/ztypes_windows_386.go<http://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go>\n> File src/pkg/syscall/ztypes_**windows_386.go (right):\n>\n> http://codereview.appspot.com/**4528073/diff/21001/src/pkg/**\n> syscall/ztypes_windows_386.go#**newcode554<http://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go#newcode554>\n> src/pkg/syscall/ztypes_**windows_386.go:554: NameFullyQualifiedDN = 1\n> On 2011/06/14 17:55:23, bradfitz wrote:\n>\n>> did you mean for the rest of these to be int32 too?  currently it's an\n>>\n> int, not\n>\n>> int32.\n>>\n>\n> That was the idea. So it seems I have to redeclare int32 everywhere,\n> since these constants are part of a C enum. Or would it fit inside an\n> int?\n>\n\nAn int32 fits in an int.\n\nI don't know what your question is, though.  I was just pointing out that it\nwas unlikely the code did what it looks like you meant.\n",
			"disapproval": false,
			"date": "2011-06-14 19:44:25.542510",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/14 19:44:25, bradfitzgoog wrote:\n> On Tue, Jun 14, 2011 at 12:29 PM, <mailto:paulo.jpinto@gmail.com> wrote:\n> \n> >\n> > http://codereview.appspot.com/**4528073/diff/21001/src/pkg/**\n> >\n> syscall/ztypes_windows_386.go<http://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go>\n> > File src/pkg/syscall/ztypes_**windows_386.go (right):\n> >\n> > http://codereview.appspot.com/**4528073/diff/21001/src/pkg/**\n> >\n> syscall/ztypes_windows_386.go#**newcode554<http://codereview.appspot.com/4528073/diff/21001/src/pkg/syscall/ztypes_windows_386.go#newcode554>\n> > src/pkg/syscall/ztypes_**windows_386.go:554: NameFullyQualifiedDN = 1\n> > On 2011/06/14 17:55:23, bradfitz wrote:\n> >\n> >> did you mean for the rest of these to be int32 too?  currently it's an\n> >>\n> > int, not\n> >\n> >> int32.\n> >>\n> >\n> > That was the idea. So it seems I have to redeclare int32 everywhere,\n> > since these constants are part of a C enum. Or would it fit inside an\n> > int?\n> >\n> \n> An int32 fits in an int.\n> \n> I don't know what your question is, though.  I was just pointing out that it\n> was unlikely the code did what it looks like you meant.\n\nYou were right. I still make the error to think that the data type, when declared, applies to the whole constant section.\n\nI will remove it, since as you point out int is actually correct.",
			"disapproval": false,
			"date": "2011-06-14 20:33:36.188546",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"bradfitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com, bradfitz@google.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-14 20:42:06.028644",
			"approval": false
		}
	],
	"owner_email": "paulo.jpinto@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "pjmlp",
	"subject": "code review 4528073: syscall: Added new functions to support os.user in Windows.",
	"created": "2011-05-17 07:58:03.399727",
	"patchsets": [
		1,
		2001,
		7001,
		12004,
		7005,
		19001,
		18002,
		21001,
		28001
	],
	"modified": "2011-06-14 20:42:06.028644",
	"closed": false,
	"issue": 4528073
}