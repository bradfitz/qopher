{
	"description": "bufio: Reader only returns cached error once\n\nReader previously had cached an error from the underlying reader and would return it on every subsequent call to Read.  The Reader will now return the error only once, and subsequent calls will result in a new Read call to the underlying Reader.\n\nNow with test.\n\nFixes issue 1934.",
	"cc": [
		"bradfitz@golang.org",
		"rogpeppe@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Jun 9, 2011 at 11:35, Graham Miller <graham.miller@gmail.com> wrote:\n> Not trying to be difficult, but I'm not sure what test I could design\n> that isn't covered by the dozens of tests already in the bufio\n> package.\n\nYou want a test that fails before your change and passes after it.\nAll the current tests passed before your change.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-06-09 15:37:40.729001",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> ok, i think, would be if bufio.Reader didn't\n> cache temporary errors - that's controversial too,\n> but i'd support it.\n\nI haven't looked at the code yet, but I'd like it for\nbufio to return an error to the caller exactly once.\nThen it's time to call Read again.\n",
			"disapproval": false,
			"date": "2011-06-09 15:38:59.781980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"graham.miller@gmail.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think the right change is to revert these changes\nand then everywhere the code would have returned b.err,\ninstead return b.readErr() where\n\nfunc (b *bufio) readErr() os.Error {\n    err := b.err\n    b.err = nil\n    return err\n}",
			"disapproval": false,
			"date": "2011-06-09 15:50:15.566369",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"graham.miller@gmail.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "nice test\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/bufio/bufio.go#newcode104\nsrc/pkg/bufio/bufio.go:104: // return the cached error, and reset the cache to nil\nhttp://golang.org/doc/effective_go.html#commentary\n\n// readErr returns the cached error and clears the cache.\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/bufio/bufio_test.go#newcode59\nsrc/pkg/bufio/bufio_test.go:59: } else {\nelse if e != iotest.ErrTimeout {\n    panic\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/bufio/bufio_test.go#newcode104\nsrc/pkg/bufio/bufio_test.go:104: if e != nil {\nif e != nil && e != iotest.ErrTimeout {\n    panic\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/testing/iotest/reader.go\nFile src/pkg/testing/iotest/reader.go (right):\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/testing/iotest/reader.go#newcode69\nsrc/pkg/testing/iotest/reader.go:69: \n\nvar ErrTimeout = os.NewError(\"timeout\")\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/testing/iotest/reader.go#newcode71\nsrc/pkg/testing/iotest/reader.go:71: // TimeoutErrReader returns a \"temporary\" timeout error on the second read\ns/a \"temporary\" timeout error/ErrTimeout/\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/testing/iotest/reader.go#newcode71\nsrc/pkg/testing/iotest/reader.go:71: // TimeoutErrReader returns a \"temporary\" timeout error on the second read\ns/TimeoutErr/Timeout/g\n\nhttp://codereview.appspot.com/4528133/diff/11001/src/pkg/testing/iotest/reader.go#newcode83\nsrc/pkg/testing/iotest/reader.go:83: return 0, os.EAGAIN\ns/os.EAGAIN/ErrTimeout/",
			"disapproval": false,
			"date": "2011-06-14 15:09:52.397685",
			"approval": false
		},
		{
			"sender": "graham.miller@gmail.com",
			"recipients": [
				"graham.miller@gmail.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rogpeppe@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-14 15:44:27.963972",
			"approval": false
		},
		{
			"sender": "graham.miller@gmail.com",
			"recipients": [
				"graham.miller@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-09 15:17:10.136814",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Bonus points for a test. :-)\n\nOn Thu, Jun 9, 2011 at 8:17 AM, <graham.miller@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n> rsc@golang.org),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> bufio: should not cache errors\n>\n> Fixes issue 1934.\n>\n> Please review this at http://codereview.appspot.com/**4528133/<http://codereview.appspot.com/4528133/>\n>\n> Affected files:\n>  M src/pkg/bufio/bufio.go\n>  M src/pkg/testing/iotest/reader.**go\n>\n>\n> Index: src/pkg/bufio/bufio.go\n> ==============================**==============================**=======\n> --- a/src/pkg/bufio/bufio.go\n> +++ b/src/pkg/bufio/bufio.go\n> @@ -48,7 +48,6 @@\n>        buf          []byte\n>        rd           io.Reader\n>        r, w         int\n> -       err          os.Error\n>        lastByte     int\n>        lastRuneSize int\n>  }\n> @@ -84,8 +83,8 @@\n>        return b\n>  }\n>\n> -// fill reads a new chunk into the buffer.\n> -func (b *Reader) fill() {\n> +// fill reads a new chunk into the buffer and return error, if any\n> +func (b *Reader) fill() os.Error {\n>        // Slide existing data to beginning.\n>        if b.r > 0 {\n>                copy(b.buf, b.buf[b.r:b.w])\n> @@ -96,9 +95,7 @@\n>        // Read new data.\n>        n, e := b.rd.Read(b.buf[b.w:])\n>        b.w += n\n> -       if e != nil {\n> -               b.err = e\n> -       }\n> +       return e\n>  }\n>\n>  // Peek returns the next n bytes without advancing the reader. The bytes\n> stop\n> @@ -112,14 +109,15 @@\n>        if n > len(b.buf) {\n>                return nil, ErrBufferFull\n>        }\n> -       for b.w-b.r < n && b.err == nil {\n> -               b.fill()\n> +       var err os.Error\n> +       for b.w-b.r < n && err == nil {\n> +               err = b.fill()\n>        }\n>        m := b.w - b.r\n>        if m > n {\n>                m = n\n>        }\n> -       err := b.err\n> +\n>        if m < n && err == nil {\n>                err = ErrBufferFull\n>        }\n> @@ -134,25 +132,23 @@\n>  func (b *Reader) Read(p []byte) (n int, err os.Error) {\n>        n = len(p)\n>        if n == 0 {\n> -               return 0, b.err\n> +               return 0, nil\n>        }\n> +\n>        if b.w == b.r {\n> -               if b.err != nil {\n> -                       return 0, b.err\n> -               }\n>                if len(p) >= len(b.buf) {\n>                        // Large read, empty buffer.\n>                        // Read directly into p to avoid copy.\n> -                       n, b.err = b.rd.Read(p)\n> +                       n, err := b.rd.Read(p)\n>                        if n > 0 {\n>                                b.lastByte = int(p[n-1])\n>                                b.lastRuneSize = -1\n>                        }\n> -                       return n, b.err\n> +                       return n, err\n>                }\n> -               b.fill()\n> +               err = b.fill()\n>                if b.w == b.r {\n> -                       return 0, b.err\n> +                       return 0, err\n>                }\n>        }\n>\n> @@ -171,10 +167,10 @@\n>  func (b *Reader) ReadByte() (c byte, err os.Error) {\n>        b.lastRuneSize = -1\n>        for b.w == b.r {\n> -               if b.err != nil {\n> -                       return 0, b.err\n> +               if err != nil {\n> +                       return\n>                }\n> -               b.fill()\n> +               err = b.fill()\n>        }\n>        c = b.buf[b.r]\n>        b.r++\n> @@ -203,12 +199,12 @@\n>  // ReadRune reads a single UTF-8 encoded Unicode character and returns the\n>  // rune and its size in bytes.\n>  func (b *Reader) ReadRune() (rune int, size int, err os.Error) {\n> -       for b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) &&\n> b.err == nil {\n> -               b.fill()\n> +       for b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) && err\n> == nil {\n> +               err = b.fill()\n>        }\n>        b.lastRuneSize = -1\n>        if b.r == b.w {\n> -               return 0, 0, b.err\n> +               return\n>        }\n>        rune, size = int(b.buf[b.r]), 1\n>        if rune >= 0x80 {\n> @@ -257,14 +253,14 @@\n>\n>        // Read more into buffer, until buffer fills or we find delim.\n>        for {\n> -               if b.err != nil {\n> +               if err != nil {\n>                        line := b.buf[b.r:b.w]\n>                        b.r = b.w\n> -                       return line, b.err\n> +                       return line, err\n>                }\n>\n>                n := b.Buffered()\n> -               b.fill()\n> +               err = b.fill()\n>\n>                // Search new part of buffer\n>                if i := bytes.IndexByte(b.buf[n:b.w], delim); i >= 0 {\n> Index: src/pkg/testing/iotest/reader.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/testing/iotest/**reader.go\n> +++ b/src/pkg/testing/iotest/**reader.go\n> @@ -58,7 +58,7 @@\n>                        r.unread = r.data[0:n1]\n>                        err = err1\n>                }\n> -               if n > 0 {\n> +               if n > 0 || err != nil {\n>                        break\n>                }\n>                n = copy(p, r.unread)\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-06-09 15:19:30.256543",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i'm not sure this is right. when reading say, a byte\nat a time, this change means genuine errors can be discarded.\n\nit will also cause the underlying Read to be called twice\nat EOF which can sometimes cause problems too.\n\nok, i think, would be if bufio.Reader didn't\ncache temporary errors - that's controversial too,\nbut i'd support it.\n\nOn 9 June 2011 16:17,  <graham.miller@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n> rsc@golang.org),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> bufio: should not cache errors\n>\n> Fixes issue 1934.\n>\n> Please review this at http://codereview.appspot.com/4528133/\n>\n> Affected files:\n> \u00a0M src/pkg/bufio/bufio.go\n> \u00a0M src/pkg/testing/iotest/reader.go\n>\n>\n> Index: src/pkg/bufio/bufio.go\n> ===================================================================\n> --- a/src/pkg/bufio/bufio.go\n> +++ b/src/pkg/bufio/bufio.go\n> @@ -48,7 +48,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0buf \u00a0 \u00a0 \u00a0 \u00a0 \u00a0[]byte\n> \u00a0 \u00a0 \u00a0 \u00a0rd \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 io.Reader\n> \u00a0 \u00a0 \u00a0 \u00a0r, w \u00a0 \u00a0 \u00a0 \u00a0 int\n> - \u00a0 \u00a0 \u00a0 err \u00a0 \u00a0 \u00a0 \u00a0 \u00a0os.Error\n> \u00a0 \u00a0 \u00a0 \u00a0lastByte \u00a0 \u00a0 int\n> \u00a0 \u00a0 \u00a0 \u00a0lastRuneSize int\n> \u00a0}\n> @@ -84,8 +83,8 @@\n> \u00a0 \u00a0 \u00a0 \u00a0return b\n> \u00a0}\n>\n> -// fill reads a new chunk into the buffer.\n> -func (b *Reader) fill() {\n> +// fill reads a new chunk into the buffer and return error, if any\n> +func (b *Reader) fill() os.Error {\n> \u00a0 \u00a0 \u00a0 \u00a0// Slide existing data to beginning.\n> \u00a0 \u00a0 \u00a0 \u00a0if b.r > 0 {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0copy(b.buf, b.buf[b.r:b.w])\n> @@ -96,9 +95,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0// Read new data.\n> \u00a0 \u00a0 \u00a0 \u00a0n, e := b.rd.Read(b.buf[b.w:])\n> \u00a0 \u00a0 \u00a0 \u00a0b.w += n\n> - \u00a0 \u00a0 \u00a0 if e != nil {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.err = e\n> - \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 return e\n> \u00a0}\n>\n> \u00a0// Peek returns the next n bytes without advancing the reader. The bytes\n> stop\n> @@ -112,14 +109,15 @@\n> \u00a0 \u00a0 \u00a0 \u00a0if n > len(b.buf) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return nil, ErrBufferFull\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 for b.w-b.r < n && b.err == nil {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n> + \u00a0 \u00a0 \u00a0 var err os.Error\n> + \u00a0 \u00a0 \u00a0 for b.w-b.r < n && err == nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0m := b.w - b.r\n> \u00a0 \u00a0 \u00a0 \u00a0if m > n {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0m = n\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 err := b.err\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0if m < n && err == nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = ErrBufferFull\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> @@ -134,25 +132,23 @@\n> \u00a0func (b *Reader) Read(p []byte) (n int, err os.Error) {\n> \u00a0 \u00a0 \u00a0 \u00a0n = len(p)\n> \u00a0 \u00a0 \u00a0 \u00a0if n == 0 {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, nil\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0if b.w == b.r {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.err != nil {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if len(p) >= len(b.buf) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Large read, empty buffer.\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Read directly into p to avoid copy.\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n, b.err = b.rd.Read(p)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n, err := b.rd.Read(p)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if n > 0 {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.lastByte = int(p[n-1])\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.lastRuneSize = -1\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return n, b.err\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return n, err\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if b.w == b.r {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, err\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> @@ -171,10 +167,10 @@\n> \u00a0func (b *Reader) ReadByte() (c byte, err os.Error) {\n> \u00a0 \u00a0 \u00a0 \u00a0b.lastRuneSize = -1\n> \u00a0 \u00a0 \u00a0 \u00a0for b.w == b.r {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.err != nil {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0c = b.buf[b.r]\n> \u00a0 \u00a0 \u00a0 \u00a0b.r++\n> @@ -203,12 +199,12 @@\n> \u00a0// ReadRune reads a single UTF-8 encoded Unicode character and returns the\n> \u00a0// rune and its size in bytes.\n> \u00a0func (b *Reader) ReadRune() (rune int, size int, err os.Error) {\n> - \u00a0 \u00a0 \u00a0 for b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) && b.err\n> == nil {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n> + \u00a0 \u00a0 \u00a0 for b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) && err\n> == nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0b.lastRuneSize = -1\n> \u00a0 \u00a0 \u00a0 \u00a0if b.r == b.w {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, 0, b.err\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0rune, size = int(b.buf[b.r]), 1\n> \u00a0 \u00a0 \u00a0 \u00a0if rune >= 0x80 {\n> @@ -257,14 +253,14 @@\n>\n> \u00a0 \u00a0 \u00a0 \u00a0// Read more into buffer, until buffer fills or we find delim.\n> \u00a0 \u00a0 \u00a0 \u00a0for {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.err != nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0line := b.buf[b.r:b.w]\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.r = b.w\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return line, b.err\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return line, err\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0n := b.Buffered()\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n>\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Search new part of buffer\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if i := bytes.IndexByte(b.buf[n:b.w], delim); i >= 0 {\n> Index: src/pkg/testing/iotest/reader.go\n> ===================================================================\n> --- a/src/pkg/testing/iotest/reader.go\n> +++ b/src/pkg/testing/iotest/reader.go\n> @@ -58,7 +58,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0r.unread = r.data[0:n1]\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = err1\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if n > 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if n > 0 || err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0break\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0n = copy(p, r.unread)\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-06-09 15:35:01.310764",
			"approval": false
		},
		{
			"sender": "graham.miller@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Not trying to be difficult, but I'm not sure what test I could design\nthat isn't covered by the dozens of tests already in the bufio\npackage.\n\ngraham\n\n\nOn Thu, Jun 9, 2011 at 11:19 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Bonus points for a test. :-)\n>\n> On Thu, Jun 9, 2011 at 8:17 AM, <graham.miller@gmail.com> wrote:\n>>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n>> rsc@golang.org),\n>>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg/\n>>\n>>\n>> Description:\n>> bufio: should not cache errors\n>>\n>> Fixes issue 1934.\n>>\n>> Please review this at http://codereview.appspot.com/4528133/\n>>\n>> Affected files:\n>> \u00a0M src/pkg/bufio/bufio.go\n>> \u00a0M src/pkg/testing/iotest/reader.go\n>>\n>>\n>> Index: src/pkg/bufio/bufio.go\n>> ===================================================================\n>> --- a/src/pkg/bufio/bufio.go\n>> +++ b/src/pkg/bufio/bufio.go\n>> @@ -48,7 +48,6 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0buf \u00a0 \u00a0 \u00a0 \u00a0 \u00a0[]byte\n>> \u00a0 \u00a0 \u00a0 \u00a0rd \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 io.Reader\n>> \u00a0 \u00a0 \u00a0 \u00a0r, w \u00a0 \u00a0 \u00a0 \u00a0 int\n>> - \u00a0 \u00a0 \u00a0 err \u00a0 \u00a0 \u00a0 \u00a0 \u00a0os.Error\n>> \u00a0 \u00a0 \u00a0 \u00a0lastByte \u00a0 \u00a0 int\n>> \u00a0 \u00a0 \u00a0 \u00a0lastRuneSize int\n>> \u00a0}\n>> @@ -84,8 +83,8 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0return b\n>> \u00a0}\n>>\n>> -// fill reads a new chunk into the buffer.\n>> -func (b *Reader) fill() {\n>> +// fill reads a new chunk into the buffer and return error, if any\n>> +func (b *Reader) fill() os.Error {\n>> \u00a0 \u00a0 \u00a0 \u00a0// Slide existing data to beginning.\n>> \u00a0 \u00a0 \u00a0 \u00a0if b.r > 0 {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0copy(b.buf, b.buf[b.r:b.w])\n>> @@ -96,9 +95,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0// Read new data.\n>> \u00a0 \u00a0 \u00a0 \u00a0n, e := b.rd.Read(b.buf[b.w:])\n>> \u00a0 \u00a0 \u00a0 \u00a0b.w += n\n>> - \u00a0 \u00a0 \u00a0 if e != nil {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.err = e\n>> - \u00a0 \u00a0 \u00a0 }\n>> + \u00a0 \u00a0 \u00a0 return e\n>> \u00a0}\n>>\n>> \u00a0// Peek returns the next n bytes without advancing the reader. The bytes\n>> stop\n>> @@ -112,14 +109,15 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0if n > len(b.buf) {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return nil, ErrBufferFull\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 for b.w-b.r < n && b.err == nil {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n>> + \u00a0 \u00a0 \u00a0 var err os.Error\n>> + \u00a0 \u00a0 \u00a0 for b.w-b.r < n && err == nil {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0m := b.w - b.r\n>> \u00a0 \u00a0 \u00a0 \u00a0if m > n {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0m = n\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 err := b.err\n>> +\n>> \u00a0 \u00a0 \u00a0 \u00a0if m < n && err == nil {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = ErrBufferFull\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> @@ -134,25 +132,23 @@\n>> \u00a0func (b *Reader) Read(p []byte) (n int, err os.Error) {\n>> \u00a0 \u00a0 \u00a0 \u00a0n = len(p)\n>> \u00a0 \u00a0 \u00a0 \u00a0if n == 0 {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, nil\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> +\n>> \u00a0 \u00a0 \u00a0 \u00a0if b.w == b.r {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.err != nil {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if len(p) >= len(b.buf) {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Large read, empty buffer.\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Read directly into p to avoid copy.\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n, b.err = b.rd.Read(p)\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n, err := b.rd.Read(p)\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if n > 0 {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.lastByte = int(p[n-1])\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.lastRuneSize = -1\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return n, b.err\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return n, err\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if b.w == b.r {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, err\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> @@ -171,10 +167,10 @@\n>> \u00a0func (b *Reader) ReadByte() (c byte, err os.Error) {\n>> \u00a0 \u00a0 \u00a0 \u00a0b.lastRuneSize = -1\n>> \u00a0 \u00a0 \u00a0 \u00a0for b.w == b.r {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.err != nil {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, b.err\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0c = b.buf[b.r]\n>> \u00a0 \u00a0 \u00a0 \u00a0b.r++\n>> @@ -203,12 +199,12 @@\n>> \u00a0// ReadRune reads a single UTF-8 encoded Unicode character and returns\n>> the\n>> \u00a0// rune and its size in bytes.\n>> \u00a0func (b *Reader) ReadRune() (rune int, size int, err os.Error) {\n>> - \u00a0 \u00a0 \u00a0 for b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) &&\n>> b.err == nil {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n>> + \u00a0 \u00a0 \u00a0 for b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) && err\n>> == nil {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0b.lastRuneSize = -1\n>> \u00a0 \u00a0 \u00a0 \u00a0if b.r == b.w {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0, 0, b.err\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0rune, size = int(b.buf[b.r]), 1\n>> \u00a0 \u00a0 \u00a0 \u00a0if rune >= 0x80 {\n>> @@ -257,14 +253,14 @@\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0// Read more into buffer, until buffer fills or we find delim.\n>> \u00a0 \u00a0 \u00a0 \u00a0for {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.err != nil {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0line := b.buf[b.r:b.w]\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.r = b.w\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return line, b.err\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return line, err\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0n := b.Buffered()\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.fill()\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = b.fill()\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Search new part of buffer\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if i := bytes.IndexByte(b.buf[n:b.w], delim); i >= 0 {\n>> Index: src/pkg/testing/iotest/reader.go\n>> ===================================================================\n>> --- a/src/pkg/testing/iotest/reader.go\n>> +++ b/src/pkg/testing/iotest/reader.go\n>> @@ -58,7 +58,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0r.unread = r.data[0:n1]\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0err = err1\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if n > 0 {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if n > 0 || err != nil {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0break\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0n = copy(p, r.unread)\n>>\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2011-06-09 15:35:41.222864",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 9 June 2011 16:38, Russ Cox <rsc@golang.org> wrote:\n>> ok, i think, would be if bufio.Reader didn't\n>> cache temporary errors - that's controversial too,\n>> but i'd support it.\n>\n> I haven't looked at the code yet, but I'd like it for\n> bufio to return an error to the caller exactly once.\n> Then it's time to call Read again.\n\nyes, that would work.\n\nperhaps the Reader should store the error and return\nit only when the buffer has been emptied, resetting it as it does.\n",
			"disapproval": false,
			"date": "2011-06-09 15:43:25.146982",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 9 June 2011 16:50,  <rsc@golang.org> wrote:\n> I think the right change is to revert these changes\n> and then everywhere the code would have returned b.err,\n> instead return b.readErr() where\n>\n> func (b *bufio) readErr() os.Error {\n> \u00a0 \u00a0err := b.err\n> \u00a0 \u00a0b.err = nil\n> \u00a0 \u00a0return err\n> }\n\n+1\n",
			"disapproval": false,
			"date": "2011-06-09 16:03:32.712177",
			"approval": false
		},
		{
			"sender": "graham.miller@gmail.com",
			"recipients": [
				"graham.miller@gmail.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rogpeppe@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-09 16:48:31.388712",
			"approval": false
		},
		{
			"sender": "graham.miller@gmail.com",
			"recipients": [
				"graham.miller@gmail.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rogpeppe@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-09 16:51:10.075134",
			"approval": false
		},
		{
			"sender": "graham.miller@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Any comments on this latest rev?  I'd love to get it off my plate.  Thanks.\n\ngraham\n\n\n2011/6/9  <graham.miller@gmail.com>:\n> Hello bradfitz@golang.org, rogpeppe@gmail.com, rsc@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/4528133/\n>\n",
			"disapproval": false,
			"date": "2011-06-13 16:24:49.747361",
			"approval": false
		},
		{
			"sender": "graham.miller@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "How does this rev look?\n\ngraham\n\n\n2011/6/14  <graham.miller@gmail.com>:\n> Hello bradfitz@golang.org, rogpeppe@gmail.com, rsc@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/4528133/\n>\n",
			"disapproval": false,
			"date": "2011-06-24 21:09:01.700765",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"graham.miller@gmail.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-06-27 20:11:18.647003",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"graham.miller@gmail.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=18ca1820cfb1 ***\n\nbufio: do not cache Read errors\n\nReader previously had cached an error from the underlying reader\nand would return it on every subsequent call to Read.  The Reader\nwill now return the error only once, and subsequent calls will result\nin a new Read call to the underlying Reader.\n\nFixes issue 1934.\n\nR=bradfitz, rogpeppe, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/4528133\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-06-27 20:12:05.952143",
			"approval": false
		}
	],
	"owner_email": "graham.miller@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "gmiller",
	"subject": "code review 4528133: bufio: Reader only returns cached error once",
	"created": "2011-06-09 15:10:47.979778",
	"patchsets": [
		1,
		1001,
		9001,
		11001,
		15002
	],
	"modified": "2011-06-27 20:12:05.952143",
	"closed": false,
	"issue": 4528133
}