{
	"description": "compress/flate: fix Huffman tree bug\nIncorporate refactoring and a regression test from http://codereview.appspot.com/4538090/",
	"cc": [
		"rsc@golang.org",
		"go.peter.90@gmail.com",
		"imkrasin@gmail.com",
		"golang-dev@googlegroups.com",
		"mirtchovski@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/25 23:17:18, rsc wrote:\n> > The funny thing is that we have a bug inside inflate.go that does not\n> > access an empty offset code table. I will try to produce the example in\n> > a minute. After that I will need to fix the bug in the inflater too.\n> \n> While I believe it could be, I will want to see a binary input\n> that zlib handles and the inflater does not.\n\nI have uploaded a fix and I will provide a binary input in a minute.",
			"disapproval": false,
			"date": "2011-05-25 23:26:13.289800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> The funny thing is that we have a bug inside inflate.go that does not\n> access an empty offset code table. I will try to produce the example in\n> a minute. After that I will need to fix the bug in the inflater too.\n\nWhile I believe it could be, I will want to see a binary input\nthat zlib handles and the inflater does not.\n",
			"disapproval": false,
			"date": "2011-05-25 23:17:18.238307",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I've used this Go program to check:\n\npackage main\n\nimport (\n       \"compress/zlib\"\n       \"log\"\n       \"fmt\"\n       \"os\"\n)\n\nfunc main() {\n     r, _ := zlib.NewReader(os.Stdin)\n     content := make([]byte, 100)\n     n, err := r.Read(content)\n     if err != nil {\n     \tlog.Fatal(err)\n     }\n     fmt.Printf(\"%s\\n\", string(content[0:n]))\n}\n\nkrasin@li139-230:~$ 6g v.go && 6l -o v v.6\nkrasin@li139-230:~$ ./v < out3\n2011/05/26 00:10:39 flate: corrupt input before offset 21",
			"disapproval": false,
			"date": "2011-05-26 00:11:19.711856",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "If the fix is applied,\n\nkrasin@li139-230:~$ ./v < out3\ntest a reasonable sized string that can be compressed",
			"disapproval": false,
			"date": "2011-05-26 00:12:41.265961",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This fix has been tested with zlib:\n\nkrasin@li139-230:~$ cat t.go\npackage main\n\nimport (\n       \"compress/zlib\"\n       \"os\"\n)\n\nfunc main() {\n     content := []byte(\"test a reasonable sized string that can be compressed\")\n     w, _ := zlib.NewWriter(os.Stdout)\n     w.Write(content)\n     w.Close()\n}\n\nkrasin@li139-230:~$ 6g t.go && 6l -o t t.6\nkrasin@li139-230:~$ ./t > out3\nkrasin@li139-230:~$ python\nPython 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import zlib\n>>> f = open('out3')\n>>> zlib.decompress(f.read())\n'test a reasonable sized string that can be compressed'\n>>> \nkrasin@li139-230:~$ \n\nThe funny thing is that we have a bug inside inflate.go that does not access an empty offset code table. I will try to produce the example in a minute. After that I will need to fix the bug in the inflater too.\n\nIvan",
			"disapproval": false,
			"date": "2011-05-25 23:06:49.041721",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"imkrasin@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/26 13:18:25, rsc wrote:\n> LGTM\n> \n> Thanks for working through this.\n\nRuss,\n\nI'm not a committer. Could you please submit this patch?\n\nThanks,\nIvan",
			"disapproval": false,
			"date": "2011-05-26 20:59:13.188213",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> The funny thing is that we have a bug inside inflate.go that does not\n> access an empty offset code table.\n\nis this the same thing we were commenting out earlier to get inflate\nto work (before the whole deflate bug appeared)? see line 98 in\ninflate.go.\n",
			"disapproval": false,
			"date": "2011-05-25 23:11:37.710127",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "please change CL description to\n\ncompress/flate: fix Huffman tree bug\n\nhttp://codereview.appspot.com/4524070/diff/7001/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttp://codereview.appspot.com/4524070/diff/7001/src/pkg/compress/flate/inflate.go#newcode80\nsrc/pkg/compress/flate/inflate.go:80: // TODO(rsc): Return false sometimes.\nplease delete\n\nhttp://codereview.appspot.com/4524070/diff/7001/src/pkg/compress/flate/inflate.go#newcode81\nsrc/pkg/compress/flate/inflate.go:81: if len(bits) == 1 && bits[0] == 0 {\nplease insert a comment above this line saying\nwhere in the RFC it says to do this.\ni skimmed it last night and came up empty",
			"disapproval": false,
			"date": "2011-05-26 02:24:06.882127",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"imkrasin@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThanks for working through this.",
			"disapproval": false,
			"date": "2011-05-26 13:18:25.264876",
			"approval": true
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": ">>> import zlib\n>>> f = open('out3')\n>>> zlib.decompress(f.read())\n'test a reasonable sized string that can be compressed'\n\nThe input file is:\n\n78 9C 04 40  D1 0D 84 20  14 5B A5 AB  15 68 EE 48  F4 61 5E FB  E5 F4 26 72  40 B4 E8 53  1C 97 E0 FD  6A C1 E9 5D  3F E4 CF 60  B2 30 84 79  EE A7 65 6B  7D 01 00 00  FF FF 15 7F  13 D3\n\nI have given a hex just for the inline reference, but it's supposed that you'll use the attach from http://code.google.com/p/go/issues/detail?id=1833",
			"disapproval": false,
			"date": "2011-05-26 00:04:41.546731",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/25 23:11:37, aam wrote:\n> > The funny thing is that we have a bug inside inflate.go that does not\n> > access an empty offset code table.\n> \n> is this the same thing we were commenting out earlier to get inflate\n> to work (before the whole deflate bug appeared)? see line 98 in\n> inflate.go.\nNo (sorry, missed this reply)",
			"disapproval": false,
			"date": "2011-05-26 00:14:32.951024",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "my randomized tests completed without errors (2 000 000\ncompress/decompress cycles)\n\nthanks!\n\nOn Thu, May 26, 2011 at 7:18 AM,  <rsc@golang.org> wrote:\n> LGTM\n>\n> Thanks for working through this.\n>\n>\n> http://codereview.appspot.com/4524070/\n>\n",
			"disapproval": false,
			"date": "2011-05-26 14:17:01.461767",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I ran a test with this CL and it seemed to solve this bug too.\n\nweird problem: flate: corrupt input before offset 14, when loading very specific images\nhttp://groups.google.com/group/golang-nuts/browse_thread/thread/ea07ee6e7c33f181\n\nPeter",
			"disapproval": false,
			"date": "2011-05-26 02:56:43.177176",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"mirtchovski@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0f0d1ba9a292 ***\n\ncompress/flate: fix Huffman tree bug\nIncorporate refactoring and a regression test from http://codereview.appspot.com/4538090/\n\nR=rsc, go.peter.90, imkrasin\nCC=golang-dev, mirtchovski\nhttp://codereview.appspot.com/4524070\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-05-26 21:02:16.653682",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"imkrasin@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4524070/diff/7001/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttp://codereview.appspot.com/4524070/diff/7001/src/pkg/compress/flate/inflate.go#newcode80\nsrc/pkg/compress/flate/inflate.go:80: // TODO(rsc): Return false sometimes.\nOn 2011/05/26 02:24:06, rsc wrote:\n> please delete\n\nDone.\n\nhttp://codereview.appspot.com/4524070/diff/7001/src/pkg/compress/flate/inflate.go#newcode81\nsrc/pkg/compress/flate/inflate.go:81: if len(bits) == 1 && bits[0] == 0 {\nOn 2011/05/26 02:24:06, rsc wrote:\n> please insert a comment above this line saying\n> where in the RFC it says to do this.\n> i skimmed it last night and came up empty\nI have spent some time trying to find the definition of \"null\" empty tree for offsets and haven't found anything.\n\nI believe that zlib is \"defensive\" against not fully-compliant encoders (like I've written). I have removed this defensive code and now I encode a fake huffman tree for offsets if there's no matches found (see the changes in huffman_bit_writer.go)",
			"disapproval": false,
			"date": "2011-05-26 04:41:23.354050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Will do, sorry for the delay.\n",
			"disapproval": false,
			"date": "2011-05-26 21:01:58.910133",
			"approval": false
		}
	],
	"owner_email": "krasin@golang.org",
	"private": false,
	"base_url": "",
	"owner": "Ivan Krasin",
	"subject": "compress/flate: fix Huffman tree bug",
	"created": "2011-05-25 23:02:15.636462",
	"patchsets": [
		1,
		2001,
		7001,
		4006,
		15001,
		11006
	],
	"modified": "2012-01-21 04:50:57.549214",
	"closed": true,
	"issue": 4524070
}