{
	"description": "os/exec: Pass tests on Plan 9\n\nAdjust the exit status string for Plan 9.\n\nUpon allocating >100 file descriptors, Plan 9\nraises a warning. Moreover, the Go runtime for\n32-bit version of Plan 9 keeps /dev/bintime\nopen for its implementation of runtime.nanotime().\nThis change accounts for these things in\nTestExtraFiles.",
	"cc": [
		"rsc@golang.org",
		"rminnich@gmail.com",
		"ality@pbrane.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nAlso updated the fd leaks checks to use basefds() and basefds()+1 rather than skipfds(1) and skipfds(2), respectively.\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go\nFile src/pkg/os/exec/exec_test.go (right):\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go#newcode156\nsrc/pkg/os/exec/exec_test.go:156: func skipfds(n uintptr) uintptr {\nOn 2013/02/26 15:04:49, bradfitz wrote:\n> drop the n parameter. call this basefds.\n> \n> // basefds returns the number of expected file descriptors\n> // to be present in a process at start.\n> \n\nDone.\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go#newcode157\nsrc/pkg/os/exec/exec_test.go:157: skip := os.Stderr.Fd() + n\nOn 2013/02/26 15:04:49, bradfitz wrote:\n> n := os.Stderr.Fd() + 1\n\nDone.\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go#newcode163\nsrc/pkg/os/exec/exec_test.go:163: return skip + 1\nOn 2013/02/26 15:04:49, bradfitz wrote:\n> n++\n\nDone.",
			"disapproval": false,
			"date": "2013-02-26 16:39:51.631020",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, rminnich@gmail.com, ality@pbrane.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-26 01:34:53.571110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go\nFile src/pkg/os/exec/exec_test.go (right):\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode89\nsrc/pkg/os/exec/exec_test.go:89: e := \"exit status 42\"\nnot that this is further away, I might call this \"want\".\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode161\nsrc/pkg/os/exec/exec_test.go:161: return\nreturn isn't necessary. Skip ends the test.\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode238\nsrc/pkg/os/exec/exec_test.go:238: // a warning. The second line contains the\na warning on stdout?  can we not use CombinedOutput and instead do:\n\nvar stderr, stdout bytes.Buffer\nc.Stdout = &stdout\nc.Stderr = &stderr\n\nthen:\nif stdout.String() != text {\n     t.Errorf(\"got stdout %q, stderr %q; want %q on stdout\", stdout.String(), stderr.String(), text)\n}\n\nIf we have to do this, I'd prefer some of this cleanup be moved to a function.\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode379\nsrc/pkg/os/exec/exec_test.go:379: skipfds := os.Stderr.Fd() + 2\nthis appears twice now.  move it to a function?",
			"disapproval": false,
			"date": "2013-02-26 01:45:37.072620",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes please.\r\n\r\nOn 26 February 2013 17:33, Anthony Martin <ality@pbrane.org> wrote:\r\n> LGTM\r\n>\r\n> Do you need me to submit this?\r\n",
			"disapproval": false,
			"date": "2013-02-26 17:36:53.438090",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI made a change to make sure that the\noutput from \"read3\" in TestHelperProcess\ngoes to stdout instead of stderr.\n\nPlease see if this, along with the other\nchanges, are to your liking.\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go\nFile src/pkg/os/exec/exec_test.go (right):\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode89\nsrc/pkg/os/exec/exec_test.go:89: e := \"exit status 42\"\nOn 2013/02/26 01:45:37, bradfitz wrote:\n> not that this is further away, I might call this \"want\".\n\nDone.\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode161\nsrc/pkg/os/exec/exec_test.go:161: return\nOn 2013/02/26 01:45:37, bradfitz wrote:\n> return isn't necessary. Skip ends the test.\n\nDone.\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode238\nsrc/pkg/os/exec/exec_test.go:238: // a warning. The second line contains the\nOn 2013/02/26 01:45:37, bradfitz wrote:\n> a warning on stdout?\n\nActually, everything was being output to stderr.\nI've changed that behaviour below, in TestHelperProcess.\n\n> can we not use CombinedOutput and instead do:\n> \n> var stderr, stdout bytes.Buffer\n> c.Stdout = &stdout\n> c.Stderr = &stderr\n> \n> then:\n> if stdout.String() != text {\n>      t.Errorf(\"got stdout %q, stderr %q; want %q on stdout\", stdout.String(),\n> stderr.String(), text)\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7363056/diff/5001/src/pkg/os/exec/exec_test.go#newcode379\nsrc/pkg/os/exec/exec_test.go:379: skipfds := os.Stderr.Fd() + 2\nOn 2013/02/26 01:45:37, bradfitz wrote:\n> this appears twice now.  move it to a function?\n\nDone.",
			"disapproval": false,
			"date": "2013-02-26 06:33:32.625830",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=234c58b9499b ***\n\nos/exec: Pass tests on Plan 9\n\nAdjust the exit status string for Plan 9.\n\nUpon allocating >100 file descriptors, Plan 9\nraises a warning. Moreover, the Go runtime for\n32-bit version of Plan 9 keeps /dev/bintime\nopen for its implementation of runtime.nanotime().\nThis change accounts for these things in\nTestExtraFiles.\n\nR=rsc, rminnich, ality, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7363056\n\nCommitter: Anthony Martin <ality@pbrane.org>",
			"disapproval": false,
			"date": "2013-02-26 17:41:04.663310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after nits below.\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go\nFile src/pkg/os/exec/exec_test.go (right):\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go#newcode156\nsrc/pkg/os/exec/exec_test.go:156: func skipfds(n uintptr) uintptr {\ndrop the n parameter. call this basefds.\n\n// basefds returns the number of expected file descriptors\n// to be present in a process at start.\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go#newcode157\nsrc/pkg/os/exec/exec_test.go:157: skip := os.Stderr.Fd() + n\nn := os.Stderr.Fd() + 1\n\nhttps://codereview.appspot.com/7363056/diff/11001/src/pkg/os/exec/exec_test.go#newcode163\nsrc/pkg/os/exec/exec_test.go:163: return skip + 1\nn++",
			"disapproval": false,
			"date": "2013-02-26 15:04:49.612480",
			"approval": true
		}
	],
	"owner_email": "seed@mail.nanosouffle.net",
	"private": false,
	"base_url": "",
	"owner": "akumar",
	"subject": "code review 7363056: os/exec: Pass tests on Plan 9",
	"created": "2013-02-26 01:21:23.059220",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		15001
	],
	"modified": "2013-02-26 17:50:07.021690",
	"closed": true,
	"issue": 7363056
}