{
	"description": "archive/zip: handle extra data headers with no body\n\nFixes issue 4393.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-16 00:54:13.975400",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI'd write >= 4 when about to read at least 4 bytes, but > 3 works too.\r\n\r\n\r\nOn Thu, Nov 15, 2012 at 4:54 PM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> archive/zip: handle extra data headers with no body\r\n>\r\n> Fixes issue 4393.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6854058/<http://codereview.appspot.com/6854058/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/archive/zip/reader.go\r\n>   M src/pkg/archive/zip/zip_test.**go\r\n>\r\n>\r\n> Index: src/pkg/archive/zip/reader.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/archive/zip/reader.**go\r\n> +++ b/src/pkg/archive/zip/reader.**go\r\n> @@ -238,7 +238,7 @@\r\n>\r\n>         if len(f.Extra) > 0 {\r\n>                 b := readBuf(f.Extra)\r\n> -               for len(b) > 4 { // need at least tag and size\r\n> +               for len(b) > 3 { // need at least tag and size\r\n>                         tag := b.uint16()\r\n>                         size := b.uint16()\r\n>                         if int(size) > len(b) {\r\n> Index: src/pkg/archive/zip/zip_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/archive/zip/zip_**test.go\r\n> +++ b/src/pkg/archive/zip/zip_**test.go\r\n> @@ -195,6 +195,27 @@\r\n>         }\r\n>  }\r\n>\r\n> +func testValidHeader(h *FileHeader, t *testing.T) {\r\n> +       var buf bytes.Buffer\r\n> +       z := NewWriter(&buf)\r\n> +\r\n> +       f, err := z.CreateHeader(h)\r\n> +       if err != nil {\r\n> +               t.Fatalf(\"error creating header: %v\", err)\r\n> +       }\r\n> +       if _, err := f.Write([]byte(\"hi\")); err != nil {\r\n> +               t.Fatalf(\"error writing content: %v\", err)\r\n> +       }\r\n> +       if err := z.Close(); err != nil {\r\n> +               t.Fatal(\"error closing zip writer: %v\", err)\r\n> +       }\r\n> +\r\n> +       b := buf.Bytes()\r\n> +       if _, err = NewReader(bytes.NewReader(b), int64(len(b))); err !=\r\n> nil {\r\n> +               t.Fatal(\"got %v, expected nil\", err)\r\n> +       }\r\n> +}\r\n> +\r\n>  // Issue 4302.\r\n>  func TestHeaderInvalidTagAndSize(t *testing.T) {\r\n>         const timeFormat = \"20060102T150405.000.txt\"\r\n> @@ -220,3 +241,17 @@\r\n>         }\r\n>         testInvalidHeader(&h, t)\r\n>  }\r\n> +\r\n> +// Issue 4393. It is valid to have an extra data header\r\n> +// which contains no body.\r\n> +func TestZeroLengthHeader(t *testing.T) {\r\n> +       h := FileHeader{\r\n> +               Name:   \"extadata.txt\",\r\n> +               Method: Deflate,\r\n> +               Extra: []byte{\r\n> +                       85, 84, 5, 0, 3, 154, 144, 195, 77, // tag 21589\r\n> size 5\r\n> +                       85, 120, 0, 0, // tag 30805 size 0\r\n> +               },\r\n> +       }\r\n> +       testValidHeader(&h, t)\r\n> +}\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-17 06:35:26.538070",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-17 02:45:51.654640",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a26a8ada8f6e ***\n\narchive/zip: handle extra data headers with no body\n\nFixes issue 4393.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6854058",
			"disapproval": false,
			"date": "2012-11-17 13:47:10.992540",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6854058: archive/zip: handle extra data headers with no body",
	"created": "2012-11-16 00:05:19.130260",
	"patchsets": [
		1,
		2001,
		5001,
		6001,
		1004,
		2004,
		6006,
		1005
	],
	"modified": "2012-11-17 13:47:13.208780",
	"closed": true,
	"issue": 6854058
}