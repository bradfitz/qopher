{
	"description": "cmd/5l: use GOARM=7 to gate the VFPv3-only \"vmov (imm)\" instruction\n  Fixes issue 3456.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-13 15:20:02.708879",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would rather stop using the instruction altogether than introduce a\r\nnew GOARM setting.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-13 15:33:56.874250",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On a pandaboard (ARMv7) the performance hit for applying this patch is quite high for some math benchmarks.\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkAcos               377          378   +0.27%\nBenchmarkAcosh              487          505   +3.70%\nBenchmarkAsin               359          357   -0.56%\nBenchmarkAsinh              557          559   +0.36%\nBenchmarkAtan               253          253   +0.00%\nBenchmarkAtanh              469          496   +5.76%\nBenchmarkAtan2              406          403   -0.74%\nBenchmarkCbrt               837          873   +4.30%\nBenchmarkCeil               182          177   -2.75%\nBenchmarkCopysign            70           77  +10.90%\nBenchmarkCos                355          354   -0.28%\nBenchmarkCosh              1031         1043   +1.16%\nBenchmarkErf                234          234   +0.00%\nBenchmarkErfc               246          246   +0.00%\nBenchmarkExp                514          506   -1.56%\nBenchmarkExpGo              516          510   -1.16%\nBenchmarkExpm1              291          293   +0.69%\nBenchmarkExp2               469          471   +0.43%\nBenchmarkExp2Go             474          475   +0.21%\nBenchmarkAbs                 16           22  +31.71%\nBenchmarkDim                124          128   +3.23%\nBenchmarkFloor              140          128   -8.57%\nBenchmarkMax                103          103   +0.00%\nBenchmarkMin                102          103   +0.98%\nBenchmarkMod               1044         1072   +2.68%\nBenchmarkFrexp              180          179   -0.56%\nBenchmarkGamma              518          512   -1.16%\nBenchmarkHypot              236          233   -1.27%\nBenchmarkHypotGo            243          238   -2.06%\nBenchmarkIlogb              187          188   +0.53%\nBenchmarkJ0                1881         1828   -2.82%\nBenchmarkJ1                1773         1817   +2.48%\nBenchmarkJn                3908         3875   -0.84%\nBenchmarkLdexp              181          191   +5.52%\nBenchmarkLgamma             367          373   +1.63%\nBenchmarkLog                429          420   -2.10%\nBenchmarkLogb               183          184   +0.55%\nBenchmarkLog1p              344          355   +3.20%\nBenchmarkLog10              461          452   -1.95%\nBenchmarkLog2               461          458   -0.65%\nBenchmarkModf               110          116   +5.45%\nBenchmarkNextafter          115          114   -0.87%\nBenchmarkPowInt             758          773   +1.98%\nBenchmarkPowFrac           1698         1708   +0.59%\nBenchmarkPow10Pos          1266         1437  +13.51%\nBenchmarkPow10Neg          1316         1504  +14.29%\nBenchmarkRemainder          868          868   +0.00%\nBenchmarkSignbit             35           38   +7.34%\nBenchmarkSin                356          352   -1.12%\nBenchmarkSincos             445          453   +1.80%\nBenchmarkSinh              1090         1085   -0.46%\nBenchmarkSqrt                44           44   +0.00%\nBenchmarkSqrtGo            1188         1197   +0.76%\nBenchmarkTan                387          401   +3.62%\nBenchmarkTanh              2169         2169   +0.00%\nBenchmarkTrunc              129          125   -3.10%\nBenchmarkY0                1872         1817   -2.94%\nBenchmarkY1                1810         1862   +2.87%\nBenchmarkYn                3844         3975   +3.41%\n\nThe overall impact to the go1 benchmarks was less conclusive\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   37239166000  37314759000   +0.20%\nBenchmarkFannkuch11     36177002000  34104889000   -5.73%\nBenchmarkGobDecode        122143600    117872600   -3.50%\nBenchmarkGobEncode         63118280     61765140   -2.14%\nBenchmarkGzip            5508117000   5607391000   +1.80%\nBenchmarkGunzip          1210297000   1193390000   -1.40%\nBenchmarkJSONEncode       763110400    774969600   +1.55%\nBenchmarkJSONDecode      2389526000   2373870000   -0.66%\nBenchmarkMandelbrot200     45587760     45641480   +0.12%\nBenchmarkParse             58891600     58216560   -1.15%\nBenchmarkRevcomp          139398200    146197600   +4.88%\nBenchmarkTemplate        5396057000   5423462000   +0.51%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.28         6.51    1.04x\nBenchmarkGobEncode            12.16        12.43    1.02x\nBenchmarkGzip                  3.52         3.46    0.98x\nBenchmarkGunzip               16.03        16.26    1.01x\nBenchmarkJSONEncode            2.54         2.50    0.98x\nBenchmarkJSONDecode            0.81         0.82    1.01x\nBenchmarkParse                 0.98         0.99    1.01x\nBenchmarkRevcomp              18.23        17.39    0.95x\nBenchmarkTemplate              0.36         0.36    1.00x\n\nI'm going to spend some time looking at the regressions in math to see if this patch can be applied in a way that doesn't impact ARMv7 performance. If this is not possible, and I do realise this is against rsc's suggestion, I would like to propose that GOARM default to 7 (not 6), and 6 be used to inhibit the use of vfp3 instructions.",
			"disapproval": false,
			"date": "2012-07-10 21:54:49.123650",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Aug 6, 2012 at 7:00 AM, <rsc@golang.org> wrote:\r\n\r\n> I'd be a bit less uneasy about this if we could make the binaries detect\r\n> when they are being used on systems that are too old.\r\n>\r\nthis detection would be easy given that we already parse runtime\u00b7hwcap from\r\nauxv.\r\n\r\nor, better yet, we detect this from sigill handler, and this would be more\r\nreliable\r\nand portable (by portable, i mean portable to my Darwin/ARM port, although\r\nif\r\nyou think judging from runtime\u00b7hwcap is ok, i will be fine, because\r\nDarwin/ARM\r\nthat is capable of running Go would be always Cortex-A8 or higher so this\r\nis a\r\nnon issue). the downside of this is that maybe we need to parse the\r\ninstruction\r\nto see if it is vmov imm, or some other floating point instructions; but\r\nthe main\r\nbenefit would be, if the program doesn't use the offending instructions, we\r\ndon't\r\nneed to tell the user to change anything (this is not the case for our\r\ncurrent runtime,\r\nbecause it will always use floating point instruction in runtime.check(),\r\nbut at least\r\nwe can run successfully on VFPv2 systems). of course, from another\r\nperspective,\r\nyou might think this kind of uncertainty is the worst feature.\r\n\r\nwhich solution do you think is better?\r\n",
			"disapproval": false,
			"date": "2012-08-06 02:29:44.146000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd be a bit less uneasy about this if we could make the binaries detect when they are being used on systems that are too old.",
			"disapproval": false,
			"date": "2012-08-05 23:00:45.191920",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5987063: cmd/5l: use GOARM=7 to gate the VFPv3-only \"vmov (imm)\"...",
	"created": "2012-04-08 12:07:55.413602",
	"patchsets": [
		1,
		1002,
		4001,
		5001,
		6001,
		9001,
		12001,
		23001,
		26001,
		32001
	],
	"modified": "2012-09-19 16:20:37.658480",
	"closed": true,
	"issue": 5987063
}