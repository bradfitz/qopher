{
	"description": "gc: better loopdepth analysis for labels\n\nThis avoids degraded performance caused by extra labels\nemitted by inlining (breaking strconv ftoa alloc count unittest) and is better in any case.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-14 13:36:36.466500",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5483071/diff/7001/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttp://codereview.appspot.com/5483071/diff/7001/src/cmd/gc/esc.c#newcode255\nsrc/cmd/gc/esc.c:255: // See case OLABEL in escloopdepth above\nOn 2011/12/15 16:09:35, rsc wrote:\n> Delete or indent // to match rest of code. \n\nDone.\n\nhttp://codereview.appspot.com/5483071/diff/7001/test/escape2.go\nFile test/escape2.go (right):\n\nhttp://codereview.appspot.com/5483071/diff/7001/test/escape2.go#newcode1025\ntest/escape2.go:1025: // a backward jump, must assume new loopdepth for now\nOn 2011/12/15 16:09:35, rsc wrote:\n> s/ for now//\n> This is correct behavior below: it's a loop.\n\nof course.  i must have been thinking about how the goto L1 below doesn't decrement it.  havent figured out how to do that in the case of random overlapping ranges.  perhaps not worth it.",
			"disapproval": false,
			"date": "2011-12-15 16:27:30.545683",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=eeffa8344a46 ***\n\ngc: better loopdepth analysis for labels\n\nThis avoids degraded performance caused by extra labels\nemitted by inlining (breaking strconv ftoa alloc count unittest) and is better in any case.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5483071",
			"disapproval": false,
			"date": "2011-12-15 16:36:03.693203",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5483071/diff/7001/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttp://codereview.appspot.com/5483071/diff/7001/src/cmd/gc/esc.c#newcode255\nsrc/cmd/gc/esc.c:255: // See case OLABEL in escloopdepth above\nDelete or indent // to match rest of code.\n\nhttp://codereview.appspot.com/5483071/diff/7001/test/escape2.go\nFile test/escape2.go (right):\n\nhttp://codereview.appspot.com/5483071/diff/7001/test/escape2.go#newcode1025\ntest/escape2.go:1025: // a backward jump, must assume new loopdepth for now\ns/ for now//\nThis is correct behavior below: it's a loop.",
			"disapproval": false,
			"date": "2011-12-15 16:09:34.861481",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "in the CL desc s/beter/better/\n",
			"disapproval": false,
			"date": "2011-12-15 16:10:20.921831",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5483071: gc: better loopdepth analysis for labels",
	"created": "2011-12-14 13:24:54.709407",
	"patchsets": [
		1,
		1002,
		3001,
		2004,
		7001,
		11002
	],
	"modified": "2011-12-15 16:36:04.744926",
	"closed": true,
	"issue": 5483071
}