{
	"description": "html, exp/html: escape ' and \" as &#39; and &#34;, since IE8 and\nbelow do not support &apos;.\n\nThis makes package html consistent with package text/template's\nHTMLEscape function.\n\nFixes issue 3489.",
	"cc": [
		"rsc@golang.org",
		"mikesamuel@gmail.com",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please note that this is more than an IE8 issue.\n&apos; did not exist in HTML until HTML5.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-09 19:01:56.379592",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, mikesamuel@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-09 01:10:06.135664",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-04-09 04:35:25.685005",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/4/8  <nigeltao@golang.org>:\n> Reviewers: rsc, MikeSamuel,\n>\n> Message:\n> Hello rsc@golang.org, mikesamuel@gmail.com (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> html, exp/html: escape ' and \" as &#39; and &#34;, since IE8 and\n> below do not support &apos;.\n>\n> This makes package html consistent with package text/template's\n> HTMLEscape function.\n>\n> Fixes issue 3489.\n>\n> Please review this at http://codereview.appspot.com/5992071/\n>\n> Affected files:\n> \u00a0src/pkg/exp/html/escape.go\n> \u00a0src/pkg/exp/html/render_test.go\n> \u00a0src/pkg/exp/html/token_test.go\n> \u00a0src/pkg/html/escape.go\n> \u00a0src/pkg/text/template/funcs.go\n>\n>\n> Index: src/pkg/exp/html/escape.go\n> ===================================================================\n> --- a/src/pkg/exp/html/escape.go\n> +++ b/src/pkg/exp/html/escape.go\n> @@ -205,13 +205,15 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '&':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0esc = \"&amp;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '\\'':\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&apos;\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \"&#39;\" is shorter than \"&apos;\" and IE8 and\n> below do not support \"&apos;\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&#39;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '<':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0esc = \"&lt;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '>':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0esc = \"&gt;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '\"':\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&quot;\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \"&#34;\" is shorter than \"&quot;\".\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&#34;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0default:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0panic(\"unrecognized escape character\")\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> @@ -226,7 +228,7 @@\n> \u00a0}\n>\n> \u00a0// EscapeString escapes special characters like \"<\" to become \"&lt;\". It\n> -// escapes only five such characters: amp, apos, lt, gt and quot.\n> +// escapes only five such characters: <, >, &, ' and \".\n> \u00a0// UnescapeString(EscapeString(s)) == s always holds, but the converse\n> isn't\n> \u00a0// always true.\n> \u00a0func EscapeString(s string) string {\n> Index: src/pkg/exp/html/render_test.go\n> ===================================================================\n> --- a/src/pkg/exp/html/render_test.go\n> +++ b/src/pkg/exp/html/render_test.go\n> @@ -98,7 +98,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 want := `<html><head></head><body>0&lt;1<p id=\"A\"\n> foo=\"abc&quot;def\">` +\n> + \u00a0 \u00a0 \u00a0 want := `<html><head></head><body>0&lt;1<p id=\"A\"\n> foo=\"abc&#34;def\">` +\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0`2<b empty=\"\">3</b><i backslash=\"\\\">&amp;4</i></p>` +\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0`5<blockquote></blockquote><br/>6</body></html>`\n> \u00a0 \u00a0 \u00a0 \u00a0b := new(bytes.Buffer)\n> Index: src/pkg/exp/html/token_test.go\n> ===================================================================\n> --- a/src/pkg/exp/html/token_test.go\n> +++ b/src/pkg/exp/html/token_test.go\n> @@ -359,7 +359,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"tricky\",\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"<p \\t\\n iD=\\\"a&quot;B\\\"\n> \u00a0foo=\\\"bar\\\"><EM>te&lt;&amp;;xt</em></p>\",\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `<p id=\"a&quot;B\"\n> foo=\"bar\">$<em>$te&lt;&amp;;xt$</em>$</p>`,\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `<p id=\"a&#34;B\" foo=\"bar\">$<em>$te&lt;&amp;;xt$</em>$</p>`,\n> \u00a0 \u00a0 \u00a0 \u00a0},\n> \u00a0 \u00a0 \u00a0 \u00a0// A nonexistent entity. Tokenizing and converting back to a string\n> should\n> \u00a0 \u00a0 \u00a0 \u00a0// escape the \"&\" to become \"&amp;\".\n> @@ -421,7 +421,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"Double-quoted attribute value\",\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0`<input value=\"I'm an attribute\" FOO=\"BAR\">`,\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `<input value=\"I&apos;m an attribute\" foo=\"BAR\">`,\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `<input value=\"I&#39;m an attribute\" foo=\"BAR\">`,\n> \u00a0 \u00a0 \u00a0 \u00a0},\n> \u00a0 \u00a0 \u00a0 \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"Attribute name characters\",\n> @@ -436,7 +436,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"Attributes with a solitary single quote\",\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0`<p id=can't><p id=won't>`,\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `<p id=\"can&apos;t\">$<p id=\"won&apos;t\">`,\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `<p id=\"can&#39;t\">$<p id=\"won&#39;t\">`,\n> \u00a0 \u00a0 \u00a0 \u00a0},\n> \u00a0}\n>\n> @@ -545,10 +545,11 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0`\"<&>\"`,\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0`&quot;&lt;&amp;&gt;&quot;`,\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0`3&5==1 && 0<1, \"0&lt;1\", a+acute=&aacute;`,\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `The special characters are: <, >, &, ' and \"`,\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0for _, s := range ss {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if s != UnescapeString(EscapeString(s)) {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"s != UnescapeString(EscapeString(s)),\n> s=%q\", s)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if got := UnescapeString(EscapeString(s)); got != s {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"got %q want %q\", got, s)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0}\n> Index: src/pkg/html/escape.go\n> ===================================================================\n> --- a/src/pkg/html/escape.go\n> +++ b/src/pkg/html/escape.go\n> @@ -210,13 +210,15 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '&':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0esc = \"&amp;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '\\'':\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&apos;\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \"&#39;\" is shorter than \"&apos;\" and IE8 and\n> below do not support \"&apos;\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&#39;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '<':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0esc = \"&lt;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '>':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0esc = \"&gt;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '\"':\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&quot;\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \"&#34;\" is shorter than \"&quot;\".\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 esc = \"&#34;\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0default:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0panic(\"unrecognized escape character\")\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> @@ -231,7 +233,7 @@\n> \u00a0}\n>\n> \u00a0// EscapeString escapes special characters like \"<\" to become \"&lt;\". It\n> -// escapes only five such characters: amp, apos, lt, gt and quot.\n> +// escapes only five such characters: <, >, &, ' and \".\n> \u00a0// UnescapeString(EscapeString(s)) == s always holds, but the converse\n> isn't\n> \u00a0// always true.\n> \u00a0func EscapeString(s string) string {\n> Index: src/pkg/text/template/funcs.go\n> ===================================================================\n> --- a/src/pkg/text/template/funcs.go\n> +++ b/src/pkg/text/template/funcs.go\n> @@ -246,7 +246,7 @@\n>\n> \u00a0var (\n> \u00a0 \u00a0 \u00a0 \u00a0htmlQuot = []byte(\"&#34;\") // shorter than \"&quot;\"\n> - \u00a0 \u00a0 \u00a0 htmlApos = []byte(\"&#39;\") // shorter than \"&apos;\"\n> + \u00a0 \u00a0 \u00a0 htmlApos = []byte(\"&#39;\") // shorter than \"&apos;\" and IE8 and\n> below do not support \"&apos;\"\n> \u00a0 \u00a0 \u00a0 \u00a0htmlAmp \u00a0= []byte(\"&amp;\")\n> \u00a0 \u00a0 \u00a0 \u00a0htmlLt \u00a0 = []byte(\"&lt;\")\n> \u00a0 \u00a0 \u00a0 \u00a0htmlGt \u00a0 = []byte(\"&gt;\")\n>\n>\n\nLGTM\n",
			"disapproval": false,
			"date": "2012-04-09 15:00:55.358502",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"mikesamuel@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a70135896879 ***\n\nhtml, exp/html: escape ' and \" as &#39; and &#34;, since IE8 and\nbelow do not support &apos;.\n\nThis makes package html consistent with package text/template's\nHTMLEscape function.\n\nFixes issue 3489.\n\nR=rsc, mikesamuel, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/5992071",
			"disapproval": false,
			"date": "2012-04-11 23:35:49.960537",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 5992071: html, exp/html: escape ' and \" as &#39; and &#34;, sinc...",
	"created": "2012-04-09 01:09:22.539639",
	"patchsets": [
		1,
		3,
		2001,
		2002,
		6001
	],
	"modified": "2012-04-11 23:35:56.860232",
	"closed": true,
	"issue": 5992071
}