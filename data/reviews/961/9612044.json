{
	"description": "sort: implement stable sorting\n\nThis CL provides stable in-place sorting by use of\nbottom up merge sort with in-place merging done by\nthe SymMerge algorithm from P.-S. Kim and A. Kutzner.\n\nThe additional space needed for stable sorting (in the form of\nstack space) is logarithmic in the inputs size n.\nNumber of calls to Less and Swap grow like O(n * log n) and\nO(n * log n * log n):\nStable sorting random data uses significantly more calls\nto Swap than the unstable quicksort implementation (5 times more\non n=100, 10 times more on n=1e4 and 23 times more on n=1e8).\nThe number of calls to Less is practically the same for Sort and\nStable.\n\nStable sorting 1 million random integers takes 5 times longer\nthan using Sort.\n\nBenchmarkSortString1K      50000       328662 ns/op\nBenchmarkStableString1K    50000       380231 ns/op  1.15 slower\nBenchmarkSortInt1K         50000       157336 ns/op\nBenchmarkStableInt1K       50000       191167 ns/op  1.22 slower\nBenchmarkSortInt64K         1000     14466297 ns/op\nBenchmarkStableInt64K        500     16190266 ns/op  1.12 slower\n\nBenchmarkSort1e2          200000        64923 ns/op\nBenchmarkStable1e2         50000       167128 ns/op  2.57 slower\nBenchmarkSort1e4            1000     14540613 ns/op\nBenchmarkStable1e4           100     58117289 ns/op  4.00 slower\nBenchmarkSort1e6               5   2429631508 ns/op\nBenchmarkStable1e6             1  12077036952 ns/op  4.97 slower",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"iant@golang.org",
		"0xjnml@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please do not focus on the details like\ncomments or separators, variable names (taken from\nthe source and publications) or that like but on\nthe algorithms themselves. Even the function signatures\nare not final (e.g. measuring recursion depth won't\nmake it into the final CL). Lots of functions are\nexported to test them, but won't stay exported.\n\nThis CL makes it easy to run the algorithms on\narchitectures I do not have access to and play\nwith them. Nothing else. It'll be abandoned and\nreplaced with a suitable implementation of the\nchosen algorithm.",
			"disapproval": false,
			"date": "2013-05-21 09:15:29.808560",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-21 09:09:14.380560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Excellent, thanks for working on this!\r\n\r\nI'm worried about GPL infection.  Could you compare stl_algo.h from an SGI\r\nor HP STL, before it went into GNU's libstdc++ to make sure it's the same,\r\nback before it got a GPL sticker on it too?\r\n\r\n\r\n\r\nOn Tue, May 21, 2013 at 2:09 AM, <dr.volker.dobler@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n>   sort: provide different stable sort algorithms\r\n>\r\n> NOT FOR SUBMISSION\r\n>\r\n> This CL is for testing and discussing different variants\r\n> of a stable sort algorithm.\r\n>\r\n> This CL provides three different implementations for\r\n> stable inplace sorting.  Actually the sorting is done\r\n> by a standard merge sort, only the inplace merge\r\n> algorithms differ.  The following three variants are\r\n> compared:\r\n>  - gcc-4.6.3's merge_without_buffer which is used by\r\n>    libstdc++'s inplace_stable_sort function.\r\n>  - SymMerge from Pok-Son Kim and Arne Kutzner, \"Stable\r\n>    minimum storage merging ba symetric comparisons\"\r\n>    (Algorithms - ESA 2004, Volume 3221 of Lecture Notes\r\n>    in Computer Sience, Springer 2004, p. 714-723)\r\n>  - SplitMerge, also from Kim and Kutzern, \"A simple\r\n>    algorithm for stable minimum storage merging.\"\r\n>\r\n> All three merging algorithm are stable and the recursion\r\n> depth is bound by log(n), so that merge-sorting with them\r\n> requieres only logarithmic additional stack space.\r\n> The main helper function to all merge algorithms is a\r\n> block rotation, the implementation is a direct translation\r\n> of libstdc++'s __rotate function.\r\n>\r\n> The cutoffs when switching from merge- to insertion sort\r\n> where determined on a dualcore Intel i7 2.67GHz CPU.\r\n>\r\n> Benchmarking shows that sorting with SymMerge and\r\n> SplitMerge (SymMergeSort and SplitMergeSort) are comparable\r\n> in speed while using MergeWithoutBuffer (InplaceStableSort)\r\n> is considerable slower.\r\n>\r\n> Measuring the number of operations (swaps and comparisons)\r\n> performed seems to indicate that all three algorithms\r\n> perform O(n log n) swaps and O(n log n) compares.\r\n> InplaceStableSort does more swaps and comparisons than\r\n> Sym/SplitMergeSort - and is thus slower.\r\n>\r\n> SymMergeSort uses only 1.5n compares on an already sorted\r\n> sequence whereas SplitMergeSort needs 2n comparisons and\r\n> InplaceStableSortNeeds 5n. SplitMerge sort and SymMergeSort\r\n> also differ a bit on saw-tooth like data: SymMergeSort uses\r\n> less operations\r\n>\r\n> For the standard benchmarks (data of the form i % 0x2cc)\r\n> SymMergeSort compares well with the standard Sort implementation\r\n> wheras for random data the standard quicksort is faster by\r\n> a factor of 3 to 9.\r\n>\r\n> This data (at least on 64 bit Intel i7) suggests to use\r\n> SymMerge.  Thus something like\r\n>\r\n>   // StableSort sorts data in a stable way.\r\n>   // It makes one call to data.Len to determine n, and O(n*log(n))\r\n>   // calls to data.Less and data.Swap. The sort is guaranteed to\r\n>   // be stable. StableSort has the same asymptotic runtime bounds\r\n>   // as Sort but larger factors hidden in the big O and will take\r\n>   // considerable more time on random data than Sort.\r\n>   func StableSort(data Interface) {\r\n>       // merge-sort using symMerge to merge blocks\r\n>   }\r\n>\r\n>\r\n>\r\n> Benchmarks (\"StandardSort\" is the unstable Sort):\r\n>\r\n> BenchmarkSearchWrappers               10000000         281 ns/op\r\n> BenchmarkSortString1K                     5000      342614 ns/op\r\n> BenchmarkSortInt1K                       10000      163881 ns/op\r\n> BenchmarkSortInt64K                        100    14672172 ns/op\r\n>\r\n> BenchmarkSymMergeSortInt1K               50000       50043 ns/op\r\n> BenchmarkSplitMergeSortInt1K             50000       50677 ns/op\r\n> BenchmarkInplaceStableSortInt1**K          10000      153956 ns/op\r\n> BenchmarkStandardSortInt1K               10000      156901 ns/op\r\n>\r\n> BenchmarkSymMergeSortInt64K                500     4085378 ns/op\r\n> BenchmarkSplitMergeSortInt64K              500     4112881 ns/op\r\n> BenchmarkInplaceStableSortInt6**4K           100    12846001 ns/op\r\n> BenchmarkStandardSortInt64K                100    14329672 ns/op\r\n>\r\n> BenchmarkSymMergeSortInt4M                   5 318262644 ns/op\r\n> BenchmarkSplitMergeSortInt4M                 5 318633667 ns/op\r\n> BenchmarkInplaceStableSortInt4**M              1  1006823241 ns/op\r\n> BenchmarkStandardSortInt4M                   1  1216140021 ns/op\r\n>\r\n> BenchmarkSymMergeSortString1K            10000      178198 ns/op\r\n> BenchmarkSplitMergeSortString1**K          10000      196506 ns/op\r\n> BenchmarkInplaceStableSortStri**ng1K        5000      349352 ns/op\r\n> BenchmarkStandardSortString1K             5000      332424 ns/op\r\n>\r\n> BenchmarkSymMergeSortedInt64K             1000     1646250 ns/op\r\n> BenchmarkSplitMergeSortedInt64**K           1000     1733652 ns/op\r\n> BenchmarkInplaceStableSortedIn**t64K         500     4065249 ns/op\r\n> BenchmarkStandardSortedInt64K              200     7937829 ns/op\r\n>\r\n> BenchmarkSymMergeReversedInt64**K            500     7451392 ns/op\r\n> BenchmarkSplitMergeReversedInt**64K          500     7429676 ns/op\r\n> BenchmarkInplaceStableReversed**Int64K       100    19820718 ns/op\r\n> BenchmarkStandardSortReversedI**nt64K        200     8690838 ns/op\r\n>\r\n> BenchmarkSymMergeSortUniqe                   1  1594279671 ns/op\r\n> BenchmarkSplitMergeSortUniqe                 1  1596697063 ns/op\r\n> BenchmarkInplaceStableSortUniq**e              1  1662573134 ns/op\r\n> BenchmarkStandardSortUniqe                   5 347079470 ns/op\r\n>\r\n> BenchmarkSymMergeSortSubset                  1  1237720688 ns/op\r\n> BenchmarkSplitMergeSortSubset                1  1207237700 ns/op\r\n> BenchmarkInplaceStableSortSubs**et             1  1349776742 ns/op\r\n> BenchmarkStandardSortSubset                 10   172742441 ns/op\r\n>\r\n> Please review this at https://codereview.appspot.**com/9612044/<https://codereview.appspot.com/9612044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/sort/sort.go\r\n>   M src/pkg/sort/sort_test.go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-21 15:31:19.368530",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 21, 2013 at 8:31 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n> I'm worried about GPL infection.  Could you compare stl_algo.h from an SGI\r\n> or HP STL, before it went into GNU's libstdc++ to make sure it's the same,\r\n> back before it got a GPL sticker on it too?\r\n\r\nThe GPL is a copyright license and as such only applies to copyright.\r\nIt does not apply to reimplementation of the algorithm in a different\r\nlanguage.  In any case I'm sure the algorithm is well described\r\nelsewhere.\r\n",
			"disapproval": false,
			"date": "2013-05-21 16:54:08.055700",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 21, 2013 at 6:54 PM, Ian Lance Taylor <iant@golang.org> wrote:\r\n> On Tue, May 21, 2013 at 8:31 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>>\r\n>> I'm worried about GPL infection.  Could you compare stl_algo.h from an SGI\r\n>> or HP STL, before it went into GNU's libstdc++ to make sure it's the same,\r\n>> back before it got a GPL sticker on it too?\r\n>\r\n> The GPL is a copyright license and as such only applies to copyright.\r\n> It does not apply to reimplementation of the algorithm in a different\r\n> language.\r\n\r\nThat's true for a clean-room (re)implementation. A transliteration of\r\nexisting code into another language is a different case which retains\r\nthe original license, I think.\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2013-05-22 09:07:50.912770",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 22, 2013 at 2:07 AM, Jan Mercl <0xjnml@gmail.com> wrote:\r\n> On Tue, May 21, 2013 at 6:54 PM, Ian Lance Taylor <iant@golang.org> wrote:\r\n>> On Tue, May 21, 2013 at 8:31 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>>>\r\n>>> I'm worried about GPL infection.  Could you compare stl_algo.h from an SGI\r\n>>> or HP STL, before it went into GNU's libstdc++ to make sure it's the same,\r\n>>> back before it got a GPL sticker on it too?\r\n>>\r\n>> The GPL is a copyright license and as such only applies to copyright.\r\n>> It does not apply to reimplementation of the algorithm in a different\r\n>> language.\r\n>\r\n> That's true for a clean-room (re)implementation. A transliteration of\r\n> existing code into another language is a different case which retains\r\n> the original license, I think.\r\n\r\nIt depends.  There is no one answer in this area.  I wouldn't worry\r\nabout this case.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-05-22 13:31:15.173080",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nExperimenting with several merging and rotation\nalgorithms convinced me that SymMerge with the simple\nblock swapping as rotation works very well:\n - Stable sorting 10 million random integers is\n   only slower by a factor of ~5.5.\n - The used algorithms are dead simple (at least if\n   compared to some fancy published stuff).\n - Clean room implementations where trivial.\n - The sorting is provable stable on _all_ input.\n - Recursion depth (and thus required extra memory\n   for the stack) is limited by log(n).\n - Calls to Less show O(n log n) behavior while\n   calls to Swap grow like O(n**1.16) which is worse\n   than the theoretical lower bound but not really\n   bad.\n\nBetter algorithms: \n - Practical in-place mergesort\n   Jyrki Katajainen, Tomi A. Pasanen, and Jukka Teuhola\n   Nordic Journal of Computing 3,1 (1996), 27-40\n   The given algorithms are in-place, ops grow as\nn log n\n   but _not_ stable.\n\n - Fast Stable In-Plcae Sorting with O(n) Data Moves\n   J.I. Munro and V. Raman\n   Algorithmica (1996) 16, 115-160\n   Needs additional 2n bits but works only if there \n   are enough different elements available to encode\n   some permutations which have to be undone later.\n\nAll the optimal in-place sorting/merging algorithms\nI found are either unstable or rely on enough different\nelements in each step to encode the performed block\nrearrangements. See also \"In-Place Merging Algorithms\",\nDenham Coates-Evely, Department of Computer Science,\nKings College, January 2004 and the reverences in there.",
			"disapproval": false,
			"date": "2013-05-30 12:13:36.490490",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nExperimenting with several merging and rotation\nalgorithms convinced me that SymMerge with the simple\nblock swapping as rotation works very well:\n - Stable sorting 10 million random integers is\n   only slower by a factor of ~5.5.\n - The used algorithms are dead simple (at least if\n   compared to some fancy published stuff).\n - Clean room implementations where trivial.\n - The sorting is provable stable on _all_ input.\n - Recursion depth (and thus required extra memory\n   for the stack) is limited by log(n).\n - Calls to Less show O(n log n) behavior while\n   calls to Swap grow like O(n**1.16) which is worse\n   than the theoretical lower bound but not really\n   bad.\n\nBetter algorithms: \n - Practical in-place mergesort\n   Jyrki Katajainen, Tomi A. Pasanen, and Jukka Teuhola\n   Nordic Journal of Computing 3,1 (1996), 27-40\n   The given algorithms are in-place, ops grow as\nn log n\n   but _not_ stable.\n\n - Fast Stable In-Plcae Sorting with O(n) Data Moves\n   J.I. Munro and V. Raman\n   Algorithmica (1996) 16, 115-160\n   Needs additional 2n bits but works only if there \n   are enough different elements available to encode\n   some permutations which have to be undone later.\n\nAll the optimal in-place sorting/merging algorithms\nI found are either unstable or rely on enough different\nelements in each step to encode the performed block\nrearrangements. See also \"In-Place Merging Algorithms\",\nDenham Coates-Evely, Department of Computer Science,\nKings College, January 2004 and the reverences in there.",
			"disapproval": false,
			"date": "2013-05-30 12:13:36.729110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks very much for working on this.\n\nCould you please put the notes from your last message in the code so that others who show up and think there should be a different algorithm can see why this decision was made/\n\nI assume the n**1.16 is purely empirical? Does the paper say anything about the expected number of swaps?\n\nThanks again.\nRuss",
			"disapproval": false,
			"date": "2013-05-30 15:48:26.603120",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nStable sorting uses O(n*log(n)*log(n)) calls to Swap,\na crude derivation of this is included at the bottom of\nsort.go.  The O(n**1.16) was a good but purely empirical\nfit as Russ pointed out.\n\nI included remarks on other algorithms evaluated in a\ncomment.\n\nPatchset #10 can be reviewed properly but I'll be awfk\nfrom Friday until end of June.\n\nFor the curious: Experimental data on numbers of calls\nto Sort and Less sorting random ints can be found in \nhttp://i.imgur.com/fmZLKx5.png\nThe fits are n*log^2(n) for the number of Swaps in Stable\nand n*log(n) for all the other numbers.\n\nv.",
			"disapproval": false,
			"date": "2013-06-05 10:43:06.380260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks great, thanks.\n\nI admit to not thinking through the algorithm details. If testBentleyMcIlroy says the code works, I will assume the algorithm is correct and that you have implemented it faithfully.\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort.go#newcode367\nsrc/pkg/sort/sort.go:367: c := (start + r) / 2\nThis should be c := start + (r-start) / 2, the same way that mid is computed above.\nThis avoids http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort.go#newcode378\nsrc/pkg/sort/sort.go:378: c := (start + r) / 2\nHere too.\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort_test.go\nFile src/pkg/sort/sort_test.go (right):\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort_test.go#newcode351\nsrc/pkg/sort/sort_test.go:351: \nPlease add\n\nfunc TestStableBM(t *testing.T) {\n    testBentleyMcIlroy(t, Stable)\n}",
			"disapproval": false,
			"date": "2013-06-10 18:06:29.451780",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort.go#newcode367\nsrc/pkg/sort/sort.go:367: c := (start + r) / 2\nOn 2013/06/10 18:06:29, rsc wrote:\n> This should be c := start + (r-start) / 2, the same way that mid is computed\n> above.\n> This avoids\n> http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n> \n\nDone.\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort.go#newcode378\nsrc/pkg/sort/sort.go:378: c := (start + r) / 2\nOn 2013/06/10 18:06:29, rsc wrote:\n> Here too.\n\nDone.\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort_test.go\nFile src/pkg/sort/sort_test.go (right):\n\nhttps://codereview.appspot.com/9612044/diff/33001/src/pkg/sort/sort_test.go#newcode351\nsrc/pkg/sort/sort_test.go:351: \nOn 2013/06/10 18:06:29, rsc wrote:\n> Please add\n> \n> func TestStableBM(t *testing.T) {\n>     testBentleyMcIlroy(t, Stable)\n> }\n\nDone.\n\nAs BentleyMcIlroy checks the number of Swaps which grows\nas N Log^2 N for Stable I had to expose this limit.\nTesting this for Stable with n <= 1025 only is not very\ninteresting.",
			"disapproval": false,
			"date": "2013-06-24 21:28:58.230940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks very much. This will be a great addition to Go 1.2.",
			"disapproval": false,
			"date": "2013-07-02 01:00:54.472900",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/02 01:20:37, rsc wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=7eded0df87b8 ***\n> \n> sort: implement stable sorting\n> \n> This CL provides stable in-place sorting by use of\n> bottom up merge sort with in-place merging done by\n> the SymMerge algorithm from P.-S. Kim and A. Kutzner.\n> \n> The additional space needed for stable sorting (in the form of\n> stack space) is logarithmic in the inputs size n.\n> Number of calls to Less and Swap grow like O(n * log n) and\n> O(n * log n * log n):\n> Stable sorting random data uses significantly more calls\n> to Swap than the unstable quicksort implementation (5 times more\n> on n=100, 10 times more on n=1e4 and 23 times more on n=1e8).\n> The number of calls to Less is practically the same for Sort and\n> Stable.\n> \n> Stable sorting 1 million random integers takes 5 times longer\n> than using Sort.\n> \n> BenchmarkSortString1K      50000       328662 ns/op\n> BenchmarkStableString1K    50000       380231 ns/op  1.15 slower\n> BenchmarkSortInt1K         50000       157336 ns/op\n> BenchmarkStableInt1K       50000       191167 ns/op  1.22 slower\n> BenchmarkSortInt64K         1000     14466297 ns/op\n> BenchmarkStableInt64K        500     16190266 ns/op  1.12 slower\n> \n> BenchmarkSort1e2          200000        64923 ns/op\n> BenchmarkStable1e2         50000       167128 ns/op  2.57 slower\n> BenchmarkSort1e4            1000     14540613 ns/op\n> BenchmarkStable1e4           100     58117289 ns/op  4.00 slower\n> BenchmarkSort1e6               5   2429631508 ns/op\n> BenchmarkStable1e6             1  12077036952 ns/op  4.97 slower\n> \n> R=golang-dev, bradfitz, iant, 0xjnml, rsc\n> CC=golang-dev\n> https://codereview.appspot.com/9612044\n> \n> Committer: Russ Cox <mailto:rsc@golang.org>\n\nSorry, this has broken on 32bit platforms.",
			"disapproval": false,
			"date": "2013-07-02 01:34:18.229430",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"0xjnml@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7eded0df87b8 ***\n\nsort: implement stable sorting\n\nThis CL provides stable in-place sorting by use of\nbottom up merge sort with in-place merging done by\nthe SymMerge algorithm from P.-S. Kim and A. Kutzner.\n\nThe additional space needed for stable sorting (in the form of\nstack space) is logarithmic in the inputs size n.\nNumber of calls to Less and Swap grow like O(n * log n) and\nO(n * log n * log n):\nStable sorting random data uses significantly more calls\nto Swap than the unstable quicksort implementation (5 times more\non n=100, 10 times more on n=1e4 and 23 times more on n=1e8).\nThe number of calls to Less is practically the same for Sort and\nStable.\n\nStable sorting 1 million random integers takes 5 times longer\nthan using Sort.\n\nBenchmarkSortString1K      50000       328662 ns/op\nBenchmarkStableString1K    50000       380231 ns/op  1.15 slower\nBenchmarkSortInt1K         50000       157336 ns/op\nBenchmarkStableInt1K       50000       191167 ns/op  1.22 slower\nBenchmarkSortInt64K         1000     14466297 ns/op\nBenchmarkStableInt64K        500     16190266 ns/op  1.12 slower\n\nBenchmarkSort1e2          200000        64923 ns/op\nBenchmarkStable1e2         50000       167128 ns/op  2.57 slower\nBenchmarkSort1e4            1000     14540613 ns/op\nBenchmarkStable1e4           100     58117289 ns/op  4.00 slower\nBenchmarkSort1e6               5   2429631508 ns/op\nBenchmarkStable1e6             1  12077036952 ns/op  4.97 slower\n\nR=golang-dev, bradfitz, iant, 0xjnml, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/9612044\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-07-02 01:20:37.851860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Testing a trivial fix now.\r\n",
			"disapproval": false,
			"date": "2013-07-02 01:36:06.331550",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 9612044:   sort: provide different stable sort algorithms",
	"created": "2013-05-21 09:01:44.542430",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		15001,
		18001,
		21001,
		24001,
		27001,
		33001,
		40001
	],
	"modified": "2013-07-02 04:56:19.356770",
	"closed": true,
	"issue": 9612044
}