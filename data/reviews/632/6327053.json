{
	"description": "encoding: do not ignore Flush() errors\nFixes issue 3773.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/24 20:52:24, bradfitz wrote:\n> Just needs tests now.  Feel free to steal mine from the other CL.\n\nI added your test function to my CL. Thanks.",
			"disapproval": false,
			"date": "2012-06-25 07:31:02.026671",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This only partially fixes it.  It still doesn't catch all the write errors.\r\n\r\nI have an alternate fix (and tests) about to be mailed.\r\n\r\n\r\nOn Sun, Jun 24, 2012 at 12:56 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> encoding: do not ignore Flush() errors\r\n> Fixes issue 3773.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6327053/<http://codereview.appspot.com/6327053/>\r\n>\r\n> Affected files:\r\n>  M src/pkg/encoding/csv/writer.go\r\n>  M src/pkg/encoding/xml/marshal.**go\r\n>\r\n>\r\n> Index: src/pkg/encoding/csv/writer.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/csv/writer.**go\r\n> +++ b/src/pkg/encoding/csv/writer.**go\r\n> @@ -92,8 +92,8 @@\r\n>  }\r\n>\r\n>  // Flush writes any buffered data to the underlying io.Writer.\r\n> -func (w *Writer) Flush() {\r\n> -       w.w.Flush()\r\n> +func (w *Writer) Flush() error {\r\n> +       return w.w.Flush()\r\n>  }\r\n>\r\n>  // WriteAll writes multiple CSV records to w using Write and then calls\r\n> Flush.\r\n> @@ -101,11 +101,10 @@\r\n>        for _, record := range records {\r\n>                err = w.Write(record)\r\n>                if err != nil {\r\n> -                       break\r\n> +                       return err\r\n>                }\r\n>        }\r\n> -       w.Flush()\r\n> -       return nil\r\n> +       return w.Flush()\r\n>  }\r\n>\r\n>  // fieldNeedsQuotes returns true if our field must be enclosed in quotes.\r\n> Index: src/pkg/encoding/xml/marshal.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/xml/**marshal.go\r\n> +++ b/src/pkg/encoding/xml/**marshal.go\r\n> @@ -84,7 +84,9 @@\r\n>        enc.prefix = prefix\r\n>        enc.indent = indent\r\n>        err := enc.marshalValue(reflect.**ValueOf(v), nil)\r\n> -       enc.Flush()\r\n> +       if enc.Flush() != nil {\r\n> +               panic(\"impossible\")\r\n> +       }\r\n>        if err != nil {\r\n>                return nil, err\r\n>        }\r\n> @@ -107,8 +109,10 @@\r\n>  // of Go values to XML.\r\n>  func (enc *Encoder) Encode(v interface{}) error {\r\n>        err := enc.marshalValue(reflect.**ValueOf(v), nil)\r\n> -       enc.Flush()\r\n> -       return err\r\n> +       if err != nil {\r\n> +               return err\r\n> +       }\r\n> +       return enc.Flush()\r\n>  }\r\n>\r\n>  type printer struct {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-24 19:59:14.218524",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-24 19:56:11.091050",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 24, 2012 at 12:59 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> This only partially fixes it.  It still doesn't catch all the write errors.\r\n>\r\n> I have an alternate fix (and tests) about to be mailed.\r\n>\r\n\r\nAlternate proposal: http://codereview.appspot.com/6336051\r\n",
			"disapproval": false,
			"date": "2012-06-24 20:07:43.058453",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-25 19:59:27.910738",
			"approval": true
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-24 20:17:30.731003",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just needs tests now.  Feel free to steal mine from the other CL.\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go\nFile src/pkg/encoding/xml/marshal.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode88\nsrc/pkg/encoding/xml/marshal.go:88: panic(\"impossible\")\nOn 2012/06/24 20:46:15, atom wrote:\n> On 2012/06/24 20:29:56, bradfitz wrote:\n> > why?\n> \n> bytes.Buffer never fails.\n\nOh, duh, I didn't notice that. But in that case, why the code change here?  I'd just say:\n\nenc.Flush() // can't fail on a bytes.Buffer",
			"disapproval": false,
			"date": "2012-06-24 20:52:24.721233",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/24 20:07:43, bradfitz wrote:\n> On Sun, Jun 24, 2012 at 12:59 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n> \n> > This only partially fixes it.  It still doesn't catch all the write errors.\n> >\n> > I have an alternate fix (and tests) about to be mailed.\n> >\n> \n> Alternate proposal: http://codereview.appspot.com/6336051\n\nI extended my proposal to catch write errors. bufio.Writer is caching the last error, so the extension if just a couple of additional lines.",
			"disapproval": false,
			"date": "2012-06-24 20:20:15.508051",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 07:28:41.955035",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 14:45:13.440888",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go\nFile src/pkg/encoding/xml/marshal.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode88\nsrc/pkg/encoding/xml/marshal.go:88: panic(\"impossible\")\nwhy?\n\nwhat if the written data is small, and this flush would be the first real Write?\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode115\nsrc/pkg/encoding/xml/marshal.go:115: return enc.Flush()\nFlush also returns cached write errors, if you wanted to remove the previous 3 lines.  But that's probably too subtle and would need a comment longer than the 3 lines.  So, it's good.\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode231\nsrc/pkg/encoding/xml/marshal.go:231: _, err = p.Write(nil)\nthis is subtle enough that I'd instead say:\n\nreturn p.cachedWriteError()\n\nfunc (p *printer) cachedWriteError() error {\n    // Check the bufio Writer's cached write error.\n    _, err := p.Write(nil)\n    return err\n}\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode268\nsrc/pkg/encoding/xml/marshal.go:268: _, err := p.Write(nil)\nreturn p.cachedWriteError()\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode362\nsrc/pkg/encoding/xml/marshal.go:362: _, err := p.Write(nil)\nreturn p.cachedWriteError()",
			"disapproval": false,
			"date": "2012-06-24 20:29:56.649837",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-24 20:46:10.363929",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/csv/writer.go\nFile src/pkg/encoding/csv/writer.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/csv/writer.go#newcode95\nsrc/pkg/encoding/csv/writer.go:95: func (w *Writer) Flush() error {\nSorry, but this is changing a public API and cannot be done.\nPlease call w.w.Flush at the place where you need to check the error.\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/xml/marshal.go\nFile src/pkg/encoding/xml/marshal.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/xml/marshal.go#newcode88\nsrc/pkg/encoding/xml/marshal.go:88: panic(\"impossible\")\nInstead of adding a panic, just handle the error: return nil, err.\nOr replace 87-92 with\n\nif err := enc.Encode(v); err != nil {\n    return nil, err\n}\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/xml/marshal.go#newcode231\nsrc/pkg/encoding/xml/marshal.go:231: return p.cachedWriteError()\nWhy not leave this as return nil and avoid the new code?",
			"disapproval": false,
			"date": "2012-06-24 23:27:56.513519",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go\nFile src/pkg/encoding/xml/marshal.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode88\nsrc/pkg/encoding/xml/marshal.go:88: panic(\"impossible\")\nOn 2012/06/24 20:29:56, bradfitz wrote:\n> why?\n\nbytes.Buffer never fails.\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode231\nsrc/pkg/encoding/xml/marshal.go:231: _, err = p.Write(nil)\nOn 2012/06/24 20:29:56, bradfitz wrote:\n> this is subtle enough that I'd instead say:\n> \n> return p.cachedWriteError()\n> \n> func (p *printer) cachedWriteError() error {\n>     // Check the bufio Writer's cached write error.\n>     _, err := p.Write(nil)\n>     return err\n> }\n> \n\nDone.\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode268\nsrc/pkg/encoding/xml/marshal.go:268: _, err := p.Write(nil)\nOn 2012/06/24 20:29:56, bradfitz wrote:\n> return p.cachedWriteError()\n\nDone.\n\nhttp://codereview.appspot.com/6327053/diff/3002/src/pkg/encoding/xml/marshal.go#newcode362\nsrc/pkg/encoding/xml/marshal.go:362: _, err := p.Write(nil)\nOn 2012/06/24 20:29:56, bradfitz wrote:\n> return p.cachedWriteError()\n\nDone.",
			"disapproval": false,
			"date": "2012-06-24 20:46:15.936915",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 07:29:43.718968",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/csv/writer.go\nFile src/pkg/encoding/csv/writer.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/csv/writer.go#newcode95\nsrc/pkg/encoding/csv/writer.go:95: func (w *Writer) Flush() error {\nOn 2012/06/24 23:27:56, rsc wrote:\n> Sorry, but this is changing a public API and cannot be done.\n> Please call w.w.Flush at the place where you need to check the error.\n\nThe old public API was a bug.\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/xml/marshal.go\nFile src/pkg/encoding/xml/marshal.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/xml/marshal.go#newcode88\nsrc/pkg/encoding/xml/marshal.go:88: panic(\"impossible\")\nOn 2012/06/24 23:27:56, rsc wrote:\n> Instead of adding a panic, just handle the error: return nil, err.\n> Or replace 87-92 with\n> \n> if err := enc.Encode(v); err != nil {\n>     return nil, err\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/xml/marshal.go#newcode231\nsrc/pkg/encoding/xml/marshal.go:231: return p.cachedWriteError()\nOn 2012/06/24 23:27:56, rsc wrote:\n> Why not leave this as return nil and avoid the new code?\n\nIt seems better to report an error sooner than later.",
			"disapproval": false,
			"date": "2012-06-25 07:34:48.068249",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/csv/writer.go\nFile src/pkg/encoding/csv/writer.go (right):\n\nhttp://codereview.appspot.com/6327053/diff/4/src/pkg/encoding/csv/writer.go#newcode95\nsrc/pkg/encoding/csv/writer.go:95: func (w *Writer) Flush() error {\nOn 2012/06/25 07:34:48, atom wrote:\n> On 2012/06/24 23:27:56, rsc wrote:\n> > Sorry, but this is changing a public API and cannot be done.\n> > Please call w.w.Flush at the place where you need to check the error.\n> \n> The old public API was a bug.\n\nThat's true but not a good enough reason. The old public API is set in stone. If we change this function signature, then code that does:\n\nvar x func(*csv.Writer)\nx = (*csv.Writer).Flush\n\nwill stop compiling. We've promised not to do that.",
			"disapproval": false,
			"date": "2012-06-25 12:40:49.465826",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=db0d4b4cf6cc ***\n\nencoding/csv, encoding/xml: report write errors\n\nFixes issue 3773.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6327053\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-25 20:00:28.445060",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6327053: encoding: do not ignore Flush() errors",
	"created": "2012-06-24 19:56:07.498762",
	"patchsets": [
		1,
		3002,
		4,
		3003,
		8002,
		6005
	],
	"modified": "2012-06-27 07:43:20.284750",
	"closed": true,
	"issue": 6327053
}