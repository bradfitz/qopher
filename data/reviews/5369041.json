{
	"description": "gc: changed scheme for generating names for blank identifiers in\nreturn lists.\n\nFixes issue 1802.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"lvd@google.com"
	],
	"messages": [
		{
			"sender": "zephyrtronium@gmail.com",
			"recipients": [
				"zephyrtronium@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-09 07:15:49.683261",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I just submitted 5364043, which should fix 1802.\n\nOn Wed, Nov 9, 2011 at 08:47, Luuk van Dijk <lvd@google.com> wrote:\n\n> i have a fix pending for 1802.  should be in later today.\n",
			"disapproval": false,
			"date": "2011-11-09 10:27:43.592969",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i have a fix pending for 1802.  should be in later today.\n\nOn Wed, Nov 9, 2011 at 08:15, <zephyrtronium@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> gc: changed scheme for generating names for blank identifiers in\n> return lists.\n>\n> Fixes issue 1802.\n>\n> Please review this at http://codereview.appspot.com/**5369041/<http://codereview.appspot.com/5369041/>\n>\n> Affected files:\n>  M src/cmd/gc/dcl.c\n>\n>\n> Index: src/cmd/gc/dcl.c\n> ==============================**==============================**=======\n> --- a/src/cmd/gc/dcl.c\n> +++ b/src/cmd/gc/dcl.c\n> @@ -570,6 +570,21 @@\n>                funcargs(n->ntype);\n>  }\n>\n> +// helper to catch names that might conflict with generated names without\n> +// using sscanf\n> +static int\n> +genconflicts(const char *name)\n> +{\n> +       int i;\n> +       int len = strlen(name);\n> +       if (len < 6 || memcmp(name, \"_anon\", 5))\n> +               return 0;\n> +       for (i = 5; i < len; i++)\n> +               if (name[i] < '0' || name[i] > '9')\n> +                       return 0;\n> +       return 1;\n> +}\n> +\n>  static void\n>  funcargs(Node *nt)\n>  {\n> @@ -613,9 +628,11 @@\n>                if(n->left != N) {\n>                        n->left->op = ONAME;\n>                        n->left->ntype = n->right;\n> -                       if(isblank(n->left)) {\n> -                               // Give it a name so we can assign to it\n> during return.\n> -                               snprint(namebuf, sizeof(namebuf),\n> \".anon%d\", gen++);\n> +                       if(isblank(n->left) || genconflicts(n->left->sym->\n> **name)) {\n> +                               // If the identifier is blank, give it a\n> name so we can assign\n> +                               // to it during return. If it might\n> conflict with such a\n> +                               // generated name, generate a new one for\n> it.\n> +                               snprint(namebuf, sizeof(namebuf),\n> \"_anon%d\", gen++);\n>                                n->left->sym = lookup(namebuf);\n>                        }\n>                        declare(n->left, PPARAMOUT);\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-09 07:47:42.477591",
			"approval": false
		}
	],
	"owner_email": "zephyrtronium@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "zephyrtronium",
	"subject": "code review 5369041: gc: changed scheme for generating names for blank ident...",
	"created": "2011-11-09 07:08:38.993885",
	"patchsets": [
		1,
		2001,
		1002
	],
	"modified": "2011-11-09 07:47:42.477591",
	"closed": false,
	"issue": 5369041
}