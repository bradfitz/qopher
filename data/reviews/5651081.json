{
	"description": "testing: use runtime/debug to format panics\n\nAmong other things, this avoids putting a testing.go:nnn:\nprefix on every line of the stack trace.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"dsymonds@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nbut officially annoyed by new dependency",
			"disapproval": false,
			"date": "2012-02-13 04:37:55.979069",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 13, 2012 at 3:24 PM, David Symonds <dsymonds@golang.org> wrote:\n\n> Worse, it allows the test to pass if there were no\n> t.Error calls before the time of the panic.\n\nActually, forget this sentence. I was misremembering.\n",
			"disapproval": false,
			"date": "2012-02-13 04:29:28.520330",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i leave this to you. the panics were caught when people wanted them caught. they were printed when people wanted more output. now we're back to doing nothing. i don't know what people want.\n\nbut i do know that i would prefer not to add a poor dependency to the testing package under ordinary circumstances, let alone inside code that is optimized away.  please make this a comment or delete it altogether, don't put it in an if false clause.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-13 04:22:23.054272",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nokay",
			"disapproval": false,
			"date": "2012-02-13 04:38:49.656433",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-13 03:32:39.839950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1a565b406af7 ***\n\ntesting: use runtime/debug to format panics\n\nAmong other things, this avoids putting a testing.go:nnn:\nprefix on every line of the stack trace.\n\nR=golang-dev, r, dsymonds, r\nCC=golang-dev\nhttp://codereview.appspot.com/5651081",
			"disapproval": false,
			"date": "2012-02-13 04:39:43.264467",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i don't understand the purpose of this change.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-13 03:40:13.878504",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 13, 2012 at 2:40 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> i don't understand the purpose of this change.\n\nNor I. The code you're disabling markedly improved the test output if\ncode panics.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-13 03:42:36.124526",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 12, 2012 at 22:40, Rob 'Commander' Pike <r@google.com> wrote:\n> i don't understand the purpose of this change.\n\nThe panics it is printing right now are impossible to read,\nbecause they say testing.go:123: and testing.go:124:\nat the beginning of alternating lines, for some value of 123.\nI fixed that by using debug.Stack, which should have been\nused anyway.\n\nHowever, even then the panics are not very good.\nThe built-in panic does a much better job of showing\nuseful output and stopping the program.  I think that\nshould be the default, and that the CL that put this\nrecover in was a mistake.  Even so, I left the code with\nif false in case people wanted it.\n\nThe recover is catching a panic in the main test goroutine\nbut not in goroutines that the test itself starts.  Why should\nthat one goroutine be different?  Why not just let it panic\nand get the message everyone is used to?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-13 04:18:58.638642",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 13, 2012 at 3:18 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Sun, Feb 12, 2012 at 22:40, Rob 'Commander' Pike <r@google.com> wrote:\n>> i don't understand the purpose of this change.\n>\n> The panics it is printing right now are impossible to read,\n> because they say testing.go:123: and testing.go:124:\n> at the beginning of alternating lines, for some value of 123.\n> I fixed that by using debug.Stack, which should have been\n> used anyway.\n\nWe were deliberately avoiding the dependency on runtime/debug, which\nis where I copied the code from in the first place.\n\n> However, even then the panics are not very good.\n> The built-in panic does a much better job of showing\n> useful output and stopping the program. \u00a0I think that\n> should be the default, and that the CL that put this\n> recover in was a mistake. \u00a0Even so, I left the code with\n> if false in case people wanted it.\n\nIt also throws away any t.Log/t.Error messages that had been buffered\nup to that point, which are often valuable in tracking down why the\ncode is panicking. Worse, it allows the test to pass if there were no\nt.Error calls before the time of the panic.\n\n> The recover is catching a panic in the main test goroutine\n> but not in goroutines that the test itself starts. \u00a0Why should\n> that one goroutine be different? \u00a0Why not just let it panic\n> and get the message everyone is used to?\n\nMost test code doesn't start separate goroutines; this isn't trying to\nbe a 100% solution, but a solution that helps in the vast majority of\ncases.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-13 04:24:58.843923",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI put the recover back for now, but I left the use of runtime/debug.\nIt's a useful package and it leaves the stack trace formatting\n(which is subtle and might improve) in a single place.\n",
			"disapproval": false,
			"date": "2012-02-13 04:36:03.041292",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5651081: testing: do not squelch panics",
	"created": "2012-02-12 19:24:17.921444",
	"patchsets": [
		1,
		2001,
		4001,
		5,
		7
	],
	"modified": "2012-02-13 04:39:44.210008",
	"closed": true,
	"issue": 5651081
}