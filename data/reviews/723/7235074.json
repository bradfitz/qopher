{
	"description": "io: guarantee err == nil for full reads in ReadFull and ReadAtLeast\n\nThis is a backwards compatible API change that fixes broken code.\n\nIn Go 1.0, ReadFull(r, buf) could return either len(buf), nil or len(buf), non-nil.\nMost code expects only the former, so do that and document the guarantee.\n\nCode that was correct before is still correct.\nCode that was incorrect before, by assuming the guarantee, is now correct too.\n\nThe same applies to ReadAtLeast.\n\nFixes issue 4544.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-31 17:12:27.900250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thu, Jan 31, 2013 at 9:12 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> io: guarantee err == nil for full reads in ReadFull and ReadAtLeast\r\n>\r\n> This is a backwards compatible API change that fixes broken code.\r\n>\r\n> In Go 1.0, ReadFull(r, buf) could return either len(buf), nil or\r\n> len(buf), non-nil.\r\n> Most code expects only the former, so do that and document the\r\n> guarantee.\r\n>\r\n> Code that was correct before is still correct.\r\n> Code that was incorrect before, by assuming the guarantee, is now\r\n> correct too.\r\n>\r\n> The same applies to ReadAtLeast.\r\n>\r\n> Fixes issue 4544.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7235074/<https://codereview.appspot.com/7235074/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/io/io.go\r\n>   M src/pkg/io/io_test.go\r\n>\r\n>\r\n> Index: src/pkg/io/io.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/io/io.go\r\n> +++ b/src/pkg/io/io.go\r\n> @@ -262,6 +262,7 @@\r\n>  // If an EOF happens after reading fewer than min bytes,\r\n>  // ReadAtLeast returns ErrUnexpectedEOF.\r\n>  // If min is greater than the length of buf, ReadAtLeast returns\r\n> ErrShortBuffer.\r\n> +// On return, n >= min if and only if err == nil.\r\n>  func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error) {\r\n>         if len(buf) < min {\r\n>                 return 0, ErrShortBuffer\r\n> @@ -271,12 +272,10 @@\r\n>                 nn, err = r.Read(buf[n:])\r\n>                 n += nn\r\n>         }\r\n> -       if err == EOF {\r\n> -               if n >= min {\r\n> -                       err = nil\r\n> -               } else if n > 0 {\r\n> -                       err = ErrUnexpectedEOF\r\n> -               }\r\n> +       if n >= min {\r\n> +               err = nil\r\n> +       } else if n > 0 && err == EOF {\r\n> +               err = ErrUnexpectedEOF\r\n>         }\r\n>         return\r\n>  }\r\n> @@ -286,6 +285,7 @@\r\n>  // The error is EOF only if no bytes were read.\r\n>  // If an EOF happens after reading some but not all the bytes,\r\n>  // ReadFull returns ErrUnexpectedEOF.\r\n> +// On return, n == len(buf) if and only if err == nil.\r\n>  func ReadFull(r Reader, buf []byte) (n int, err error) {\r\n>         return ReadAtLeast(r, buf, len(buf))\r\n>  }\r\n> Index: src/pkg/io/io_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/io/io_test.go\r\n> +++ b/src/pkg/io/io_test.go\r\n> @@ -6,6 +6,7 @@\r\n>\r\n>  import (\r\n>         \"bytes\"\r\n> +       \"fmt\"\r\n>         . \"io\"\r\n>         \"strings\"\r\n>         \"testing\"\r\n> @@ -120,22 +121,30 @@\r\n>         testReadAtLeast(t, &rb)\r\n>  }\r\n>\r\n> -// A version of bytes.Buffer that returns n > 0, EOF on Read\r\n> +// A version of bytes.Buffer that returns n > 0, err on Read\r\n>  // when the input is exhausted.\r\n> -type dataAndEOFBuffer struct {\r\n> +type dataAndErrorBuffer struct {\r\n> +       err error\r\n>         bytes.Buffer\r\n>  }\r\n>\r\n> -func (r *dataAndEOFBuffer) Read(p []byte) (n int, err error) {\r\n> +func (r *dataAndErrorBuffer) Read(p []byte) (n int, err error) {\r\n>         n, err = r.Buffer.Read(p)\r\n>         if n > 0 && r.Buffer.Len() == 0 && err == nil {\r\n> -               err = EOF\r\n> +               err = r.err\r\n>         }\r\n>         return\r\n>  }\r\n>\r\n>  func TestReadAtLeastWithDataAndEOF(**t *testing.T) {\r\n> -       var rb dataAndEOFBuffer\r\n> +       var rb dataAndErrorBuffer\r\n> +       rb.err = EOF\r\n> +       testReadAtLeast(t, &rb)\r\n> +}\r\n> +\r\n> +func TestReadAtLeastWithDataAndErro**r(t *testing.T) {\r\n> +       var rb dataAndErrorBuffer\r\n> +       rb.err = fmt.Errorf(\"fake error\")\r\n>         testReadAtLeast(t, &rb)\r\n>  }\r\n>\r\n> @@ -169,8 +178,12 @@\r\n>         }\r\n>         rb.Write([]byte(\"4\"))\r\n>         n, err = ReadAtLeast(rb, buf, 2)\r\n> -       if err != ErrUnexpectedEOF {\r\n> -               t.Errorf(\"expected ErrUnexpectedEOF, got %v\", err)\r\n> +       want := ErrUnexpectedEOF\r\n> +       if rb, ok := rb.(*dataAndErrorBuffer); ok && rb.err != EOF {\r\n> +               want = rb.err\r\n> +       }\r\n> +       if err != want {\r\n> +               t.Errorf(\"expected %v, got %v\", want, err)\r\n>         }\r\n>         if n != 1 {\r\n>                 t.Errorf(\"expected to have read 1 bytes, got %v\", n)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-31 17:23:48.081230",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "awesome, thank you!\r\n",
			"disapproval": false,
			"date": "2013-01-31 17:28:18.912000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=29bf5ff5064e ***\n\nio: guarantee err == nil for full reads in ReadFull and ReadAtLeast\n\nThis is a backwards compatible API change that fixes broken code.\n\nIn Go 1.0, ReadFull(r, buf) could return either len(buf), nil or len(buf), non-nil.\nMost code expects only the former, so do that and document the guarantee.\n\nCode that was correct before is still correct.\nCode that was incorrect before, by assuming the guarantee, is now correct too.\n\nThe same applies to ReadAtLeast.\n\nFixes issue 4544.\n\nR=golang-dev, bradfitz, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7235074",
			"disapproval": false,
			"date": "2013-01-31 21:47:10.684520",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There may have been a test regression due to this change. \r\n\r\nhttp://build.golang.org/log/f779a324b4d0c9ab6ed5074e6d355b8804f963c3\r\n\r\n(And others)\r\n\r\nOn 01/02/2013, at 8:47, rsc@golang.org wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=29bf5ff5064e ***\r\n> \r\n> io: guarantee err == nil for full reads in ReadFull and ReadAtLeast\r\n> \r\n> This is a backwards compatible API change that fixes broken code.\r\n> \r\n> In Go 1.0, ReadFull(r, buf) could return either len(buf), nil or\r\n> len(buf), non-nil.\r\n> Most code expects only the former, so do that and document the\r\n> guarantee.\r\n> \r\n> Code that was correct before is still correct.\r\n> Code that was incorrect before, by assuming the guarantee, is now\r\n> correct too.\r\n> \r\n> The same applies to ReadAtLeast.\r\n> \r\n> Fixes issue 4544.\r\n> \r\n> R=golang-dev, bradfitz, minux.ma\r\n> CC=golang-dev\r\n> https://codereview.appspot.com/7235074\r\n> \r\n> \r\n> https://codereview.appspot.com/7235074/\r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-01-31 22:00:44.430870",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7235074: io: guarantee err == nil for full reads in ReadFull and...",
	"created": "2013-01-31 16:57:06.743350",
	"patchsets": [
		1,
		2001,
		3003,
		8001
	],
	"modified": "2013-01-31 22:00:44.635540",
	"closed": true,
	"issue": 7235074
}