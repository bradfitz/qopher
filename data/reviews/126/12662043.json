{
	"description": "net: avoid string operation and make valid domain names explicit\n\nHaving a trailing dot in the string doesn't really simplify\nthe checking loop in isDomainName. Avoid this unnecessary allocation.\nAlso make the valid domain names more explicit by adding some more\ntest cases.\n\nbenchmark            old ns/op    new ns/op    delta\nBenchmarkDNSNames       2420.0        983.0  -59.38%\n\nbenchmark           old allocs   new allocs    delta\nBenchmarkDNSNames           12            0  -100.00%\n\nbenchmark            old bytes    new bytes    delta\nBenchmarkDNSNames          336            0  -100.00%",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-08 13:32:18.871530",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go\nFile src/pkg/net/dnsname_test.go (right):\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode71\nsrc/pkg/net/dnsname_test.go:71: s16 := \"0123456789abcdef\"\ndrop all this\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode76\nsrc/pkg/net/dnsname_test.go:76: {s63, true},\nand just say strings.Repeat(\"a\", 63)\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode80\nsrc/pkg/net/dnsname_test.go:80: for i := range benchmarks {\nfor i, tt := range benchmarks {\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode81\nsrc/pkg/net/dnsname_test.go:81: if isDomainName(benchmarks[i].name) != benchmarks[i].result {\ntt.name and tt.result\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode82\nsrc/pkg/net/dnsname_test.go:82: b.Fatalf(\"isDomainName(%q)\", benchmarks[i].name)\ntt.name",
			"disapproval": false,
			"date": "2013-08-08 18:03:46.675480",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go\nFile src/pkg/net/dnsname_test.go (right):\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode71\nsrc/pkg/net/dnsname_test.go:71: s16 := \"0123456789abcdef\"\nOn 2013/08/08 18:03:46, bradfitz wrote:\n> drop all this\n\nDone.\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode76\nsrc/pkg/net/dnsname_test.go:76: {s63, true},\nOn 2013/08/08 18:03:46, bradfitz wrote:\n> and just say strings.Repeat(\"a\", 63)\n\nDone.\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode80\nsrc/pkg/net/dnsname_test.go:80: for i := range benchmarks {\nOn 2013/08/08 18:03:46, bradfitz wrote:\n> for i, tt := range benchmarks {\n\nDone.\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode81\nsrc/pkg/net/dnsname_test.go:81: if isDomainName(benchmarks[i].name) != benchmarks[i].result {\nOn 2013/08/08 18:03:46, bradfitz wrote:\n> tt.name and tt.result\n\nDone.\n\nhttps://codereview.appspot.com/12662043/diff/4005/src/pkg/net/dnsname_test.go#newcode82\nsrc/pkg/net/dnsname_test.go:82: b.Fatalf(\"isDomainName(%q)\", benchmarks[i].name)\nOn 2013/08/08 18:03:46, bradfitz wrote:\n> tt.name\n\nDone.",
			"disapproval": false,
			"date": "2013-08-08 22:08:08.666360",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go\nFile src/pkg/net/dnsname_test.go (right):\n\nhttps://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go#newcode79\nsrc/pkg/net/dnsname_test.go:79: b.Fatalf(\"isDomainName(%q)\", tc.name)\nErrorf, not Fatalf.\n\nAlso: \"isDomainName(%q) = %v; want %v\", tc.name, !tc.result, tc.result",
			"disapproval": false,
			"date": "2013-08-08 22:23:26.690300",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Thu, Aug 8, 2013 at 4:29 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Let's say I make a change.\r\n>\r\n> I break something.\r\n>\r\n> I'd rather see the 7 cases I broke (and maybe see a pattern of how I broke\r\n> it, since humans are good at seeing patterns), rather than seeing just one\r\n> error.\r\n>\r\n> As for the got; want pattern--- if you fail in the same way, I don't have\r\n> to guess what \"foo(%q) doesn't work!\" means.  I don't want to go read the\r\n> test case lines and figure out what the function was supposed to do.\r\n>\r\n> Both points are about saving the debugger (probably not you) time later,\r\n> by the author (you) paying the cost now.\r\n>\r\n>\r\n>\r\n>\r\n>\r\n>\r\n> On Thu, Aug 8, 2013 at 4:21 PM, <dr.volker.dobler@gmail.com> wrote:\r\n>\r\n>> PTAL\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/12662043/diff/1002/src/**\r\n>> pkg/net/dnsname_test.go<https://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go>\r\n>> File src/pkg/net/dnsname_test.go (right):\r\n>>\r\n>> https://codereview.appspot.**com/12662043/diff/1002/src/**\r\n>> pkg/net/dnsname_test.go#**newcode79<https://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go#newcode79>\r\n>> src/pkg/net/dnsname_test.go:**79: b.Fatalf(\"isDomainName(%q)\", tc.name)\r\n>> On 2013/08/08 22:23:26, bradfitz wrote:\r\n>>\r\n>>> Errorf, not Fatalf.\r\n>>>\r\n>>\r\n>>  Also: \"isDomainName(%q) = %v; want %v\", tc.name, !tc.result, tc.result\r\n>>>\r\n>>\r\n>> Done. But...\r\n>>\r\n>> I know: The \"got; want\" pattern, but isn't this a bit strange\r\n>> for bools? If the got value is wrong it is pretty clear what the\r\n>> want value is, or? We are not doing ternary or intuitionistic logic\r\n>> here.\r\n>>\r\n>> Fatalf seems to be more common\r\n>> ~/go/src/pkg $ grep b.Fatalf `find . -name \"*_test.go\"` | wc -l\r\n>> 35\r\n>> ~/go/src/pkg $ $ grep b.Errorf `find . -name \"*_test.go\"` | wc -l\r\n>> 9\r\n>> and more logical: There is no point in finishing the benchmark of\r\n>> a buggy function.\r\n>>\r\n>> https://codereview.appspot.**com/12662043/<https://codereview.appspot.com/12662043/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-08 23:33:49.130770",
			"approval": true
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go\nFile src/pkg/net/dnsname_test.go (right):\n\nhttps://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go#newcode79\nsrc/pkg/net/dnsname_test.go:79: b.Fatalf(\"isDomainName(%q)\", tc.name)\nOn 2013/08/08 22:23:26, bradfitz wrote:\n> Errorf, not Fatalf.\n> \n> Also: \"isDomainName(%q) = %v; want %v\", tc.name, !tc.result, tc.result\n\nDone. But...\n\nI know: The \"got; want\" pattern, but isn't this a bit strange\nfor bools? If the got value is wrong it is pretty clear what the\nwant value is, or? We are not doing ternary or intuitionistic logic\nhere.\n\nFatalf seems to be more common\n~/go/src/pkg $ grep b.Fatalf `find . -name \"*_test.go\"` | wc -l\n35\n~/go/src/pkg $ $ grep b.Errorf `find . -name \"*_test.go\"` | wc -l\n9\nand more logical: There is no point in finishing the benchmark of\na buggy function.",
			"disapproval": false,
			"date": "2013-08-08 23:21:40.381770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's say I make a change.\r\n\r\nI break something.\r\n\r\nI'd rather see the 7 cases I broke (and maybe see a pattern of how I broke\r\nit, since humans are good at seeing patterns), rather than seeing just one\r\nerror.\r\n\r\nAs for the got; want pattern--- if you fail in the same way, I don't have\r\nto guess what \"foo(%q) doesn't work!\" means.  I don't want to go read the\r\ntest case lines and figure out what the function was supposed to do.\r\n\r\nBoth points are about saving the debugger (probably not you) time later, by\r\nthe author (you) paying the cost now.\r\n\r\n\r\n\r\n\r\n\r\n\r\nOn Thu, Aug 8, 2013 at 4:21 PM, <dr.volker.dobler@gmail.com> wrote:\r\n\r\n> PTAL\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/12662043/diff/1002/src/**\r\n> pkg/net/dnsname_test.go<https://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go>\r\n> File src/pkg/net/dnsname_test.go (right):\r\n>\r\n> https://codereview.appspot.**com/12662043/diff/1002/src/**\r\n> pkg/net/dnsname_test.go#**newcode79<https://codereview.appspot.com/12662043/diff/1002/src/pkg/net/dnsname_test.go#newcode79>\r\n> src/pkg/net/dnsname_test.go:**79: b.Fatalf(\"isDomainName(%q)\", tc.name)\r\n> On 2013/08/08 22:23:26, bradfitz wrote:\r\n>\r\n>> Errorf, not Fatalf.\r\n>>\r\n>\r\n>  Also: \"isDomainName(%q) = %v; want %v\", tc.name, !tc.result, tc.result\r\n>>\r\n>\r\n> Done. But...\r\n>\r\n> I know: The \"got; want\" pattern, but isn't this a bit strange\r\n> for bools? If the got value is wrong it is pretty clear what the\r\n> want value is, or? We are not doing ternary or intuitionistic logic\r\n> here.\r\n>\r\n> Fatalf seems to be more common\r\n> ~/go/src/pkg $ grep b.Fatalf `find . -name \"*_test.go\"` | wc -l\r\n> 35\r\n> ~/go/src/pkg $ $ grep b.Errorf `find . -name \"*_test.go\"` | wc -l\r\n> 9\r\n> and more logical: There is no point in finishing the benchmark of\r\n> a buggy function.\r\n>\r\n> https://codereview.appspot.**com/12662043/<https://codereview.appspot.com/12662043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-08 23:29:13.827520",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e70b5c8567b0 ***\n\nnet: avoid string operation and make valid domain names explicit\n\nHaving a trailing dot in the string doesn't really simplify\nthe checking loop in isDomainName. Avoid this unnecessary allocation.\nAlso make the valid domain names more explicit by adding some more\ntest cases.\n\nbenchmark            old ns/op    new ns/op    delta\nBenchmarkDNSNames       2420.0        983.0  -59.38%\n\nbenchmark           old allocs   new allocs    delta\nBenchmarkDNSNames           12            0  -100.00%\n\nbenchmark            old bytes    new bytes    delta\nBenchmarkDNSNames          336            0  -100.00%\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12662043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-08-08 23:33:59.662430",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 12662043: net: avoid string operation and make valid domain names...",
	"created": "2013-08-08 13:31:54.580840",
	"patchsets": [
		1,
		3001,
		4005,
		1002,
		12001
	],
	"modified": "2013-08-08 23:34:47.278900",
	"closed": true,
	"issue": 12662043
}