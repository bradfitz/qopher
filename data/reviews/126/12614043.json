{
	"description": "test: fix return.go to not use fallthrough in a type switch\n\nThe gc compiler only gives an error about fallthrough in a\ntype switch if it has not given any errors in an earlier pass.\nRemove all functions in this test that use fallthrough in a\ntype switch because they don't test anything useful and they\ncause gccgo to give unexpected errors.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-07 17:11:07.455740",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Wed, Aug 7, 2013 at 10:11 AM, <iant@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> test: fix return.go to not use fallthrough in a type switch\r\n>\r\n> The gc compiler only gives an error about fallthrough in a\r\n> type switch if it has not given any errors in an earlier pass.\r\n> Remove all functions in this test that use fallthrough in a\r\n> type switch because they don't test anything useful and they\r\n> cause gccgo to give unexpected errors.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12614043/<https://codereview.appspot.com/12614043/>\r\n>\r\n> Affected files:\r\n>   M test/return.go\r\n>\r\n>\r\n> Index: test/return.go\r\n> ==============================**==============================**=======\r\n> --- a/test/return.go\r\n> +++ b/test/return.go\r\n> @@ -666,17 +666,6 @@\r\n>         }\r\n>  }\r\n>\r\n> -func _() int {\r\n> -       print(1)\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n> -               fallthrough\r\n> -       default:\r\n> -               return 4\r\n> -       }\r\n> -}\r\n> -\r\n>  // if no default or some case doesn't terminate, switch is no longer okay\r\n>\r\n>  func _() int {\r\n> @@ -713,17 +702,6 @@\r\n>         switch x.(type) {\r\n>         case int:\r\n>                 print(2)\r\n> -               fallthrough\r\n> -       case float64:\r\n> -               return 4\r\n> -       }\r\n> -} // ERROR \"missing return\"\r\n> -\r\n> -func _() int {\r\n> -       print(1)\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n>                 panic(3)\r\n>         }\r\n>  } // ERROR \"missing return\"\r\n> @@ -1356,16 +1334,6 @@\r\n>         }\r\n>  }\r\n>\r\n> -func _() int {\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n> -               fallthrough\r\n> -       default:\r\n> -               return 4\r\n> -       }\r\n> -}\r\n> -\r\n>  // if no default or some case doesn't terminate, switch is no longer okay\r\n>\r\n>  func _() int {\r\n> @@ -1398,16 +1366,6 @@\r\n>         switch x.(type) {\r\n>         case int:\r\n>                 print(2)\r\n> -               fallthrough\r\n> -       case float64:\r\n> -               return 4\r\n> -       }\r\n> -} // ERROR \"missing return\"\r\n> -\r\n> -func _() int {\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n>                 panic(3)\r\n>         }\r\n>  } // ERROR \"missing return\"\r\n> @@ -2102,17 +2060,6 @@\r\n>         }\r\n>  }\r\n>\r\n> -var _ = func() int {\r\n> -       print(1)\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n> -               fallthrough\r\n> -       default:\r\n> -               return 4\r\n> -       }\r\n> -}\r\n> -\r\n>  // if no default or some case doesn't terminate, switch is no longer okay\r\n>\r\n>  var _ = func() int {\r\n> @@ -2149,17 +2096,6 @@\r\n>         switch x.(type) {\r\n>         case int:\r\n>                 print(2)\r\n> -               fallthrough\r\n> -       case float64:\r\n> -               return 4\r\n> -       }\r\n> -} // ERROR \"missing return\"\r\n> -\r\n> -var _ = func() int {\r\n> -       print(1)\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n>                 panic(3)\r\n>         }\r\n>  } // ERROR \"missing return\"\r\n> @@ -2792,16 +2728,6 @@\r\n>         }\r\n>  }\r\n>\r\n> -var _ = func() int {\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n> -               fallthrough\r\n> -       default:\r\n> -               return 4\r\n> -       }\r\n> -}\r\n> -\r\n>  // if no default or some case doesn't terminate, switch is no longer okay\r\n>\r\n>  var _ = func() int {\r\n> @@ -2834,16 +2760,6 @@\r\n>         switch x.(type) {\r\n>         case int:\r\n>                 print(2)\r\n> -               fallthrough\r\n> -       case float64:\r\n> -               return 4\r\n> -       }\r\n> -} // ERROR \"missing return\"\r\n> -\r\n> -var _ = func() int {\r\n> -       switch x.(type) {\r\n> -       case int:\r\n> -               print(2)\r\n>                 panic(3)\r\n>         }\r\n>  } // ERROR \"missing return\"\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 18:01:47.129080",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8febfb2350b4 ***\n\ntest: fix return.go to not use fallthrough in a type switch\n\nThe gc compiler only gives an error about fallthrough in a\ntype switch if it has not given any errors in an earlier pass.\nRemove all functions in this test that use fallthrough in a\ntype switch because they don't test anything useful and they\ncause gccgo to give unexpected errors.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12614043",
			"disapproval": false,
			"date": "2013-08-07 18:05:27.260500",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 12614043: test: fix return.go to not use fallthrough in a type switch",
	"created": "2013-08-07 17:11:02.744000",
	"patchsets": [
		1,
		5001
	],
	"modified": "2013-08-07 18:05:28.915250",
	"closed": true,
	"issue": 12614043
}