{
	"description": "    crypto/bcrypt: new package\n\nA port of Provos and Mazi\u00e8res's adapative hashing algorithm. See http://www.usenix.org/events/usenix99/provos/provos_html/node1.html",
	"cc": [
		"bradfitz@golang.org",
		"agl@golang.org",
		"rsc@golang.org",
		"dchest@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-12 09:12:37.629437",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I also have a nice performance improvement for blowfish.encryptBlock and decryptBlock, but I'd like to let the dust settle around it's public API before I dig into its private functions.",
			"disapproval": false,
			"date": "2011-09-12 09:24:56.856982",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I'm ok with the interface changes to crypto/blowfish.\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/Makefile\nFile src/pkg/crypto/bcrypt/Makefile (right):\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/Makefile#newcode1\nsrc/pkg/crypto/bcrypt/Makefile:1: # Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go\nFile src/pkg/crypto/bcrypt/base64.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go#newcode1\nsrc/pkg/crypto/bcrypt/base64.go:1: package bcrypt\nNeeds copyright header.\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go#newcode11\nsrc/pkg/crypto/bcrypt/base64.go:11: func cleanBase64Encode(src []byte) []byte {\nthis seems like a verbose function name for an internal function.\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go#newcode16\nsrc/pkg/crypto/bcrypt/base64.go:16: n -= 1\nn--\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go\nFile src/pkg/crypto/bcrypt/bcrypt.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode1\nsrc/pkg/crypto/bcrypt/bcrypt.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode6\nsrc/pkg/crypto/bcrypt/bcrypt.go:6: // algorithm.\ninclude the URL?\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode68\nsrc/pkg/crypto/bcrypt/bcrypt.go:68: func Equal(hashedPassword, password []byte) bool {\nI think that the name of this function should try to minimise the chance that someone passes the arguments in the wrong order.\n\nCompareHashedAndPlain?\n\nAlso, why not just return an os.Error and thus nil is success? Then EqualVerbose can go away.\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode108\nsrc/pkg/crypto/bcrypt/bcrypt.go:108: for n < maxSaltSize {\nio.ReadFull\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode133\nsrc/pkg/crypto/bcrypt/bcrypt.go:133: n, err = decodeCost(p, hashedSecret[offset:])\nrather than keeping an offset, it's more common to reslice:\n\nhashedSecret = hashedSecret[n:]\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode209\nsrc/pkg/crypto/bcrypt/bcrypt.go:209: copy(arr[n:], []byte(fmt.Sprintf(\"%0d\", p.cost)))\nsee package strconv rather than Sprintf\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode224\nsrc/pkg/crypto/bcrypt/bcrypt.go:224: func decodeVersion(p *hashed, sbytes []byte) (int, os.Error) {\nwhy not make this a method on hashed?\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode226\nsrc/pkg/crypto/bcrypt/bcrypt.go:226: return -1, os.NewError(fmt.Sprintf(\"invalid salt: %s\", sbytes))\nYou can concat strings with + rather can Sprintf\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode241\nsrc/pkg/crypto/bcrypt/bcrypt.go:241: func decodeCost(p *hashed, sbytes []byte) (int, os.Error) {\nwhy not make this a method on hashed?\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt_test.go\nFile src/pkg/crypto/bcrypt/bcrypt_test.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt_test.go#newcode1\nsrc/pkg/crypto/bcrypt/bcrypt_test.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011",
			"disapproval": false,
			"date": "2011-09-12 14:24:03.315909",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please split the blowfish changes into a separate CL.  Thanks.\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/blowfish/block.go\nFile src/pkg/crypto/blowfish/block.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/blowfish/block.go#newcode8\nsrc/pkg/crypto/blowfish/block.go:8: // state of it. It's unlikely that you need this. Example usage can be\nIf it's worth exporting, it's worth documenting.\nIf it's not worth documenting, it's not worth exporting.\n\nPlease rewrite this comment to say what ExpandZeroKey does.\n\"changes the state\" is not terribly specific, and the \"unlikely that\nyou need this\" is similarly unhelpful to a prospective caller.\nWhy is it called ExpandZeroKey and not ExpandKey, for\nexample?  If it's a zero key, why do I need to pass a key?\nAnd so on.",
			"disapproval": false,
			"date": "2011-09-12 16:46:47.874350",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/12 16:46:47, rsc wrote:\n> Please split the blowfish changes into a separate CL.  Thanks.\n> \n\nHere we go: http://codereview.appspot.com/5013043",
			"disapproval": false,
			"date": "2011-09-14 02:39:57.773730",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/12 14:24:03, agl1 wrote:\n> I'm ok with the interface changes to crypto/blowfish.\n> \n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/Makefile\n> File src/pkg/crypto/bcrypt/Makefile (right):\n> \n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/Makefile#newcode1\n> src/pkg/crypto/bcrypt/Makefile:1: # Copyright 2010 The Go Authors. All rights\n> reserved.\n> 2011\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go\n> File src/pkg/crypto/bcrypt/base64.go (right):\n> \n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go#newcode1\n> src/pkg/crypto/bcrypt/base64.go:1: package bcrypt\n> Needs copyright header.\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go#newcode11\n> src/pkg/crypto/bcrypt/base64.go:11: func cleanBase64Encode(src []byte) []byte {\n> this seems like a verbose function name for an internal function.\n> \n\nChanged to base64Encode and base64Decode.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/base64.go#newcode16\n> src/pkg/crypto/bcrypt/base64.go:16: n -= 1\n> n--\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go\n> File src/pkg/crypto/bcrypt/bcrypt.go (right):\n> \n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode1\n> src/pkg/crypto/bcrypt/bcrypt.go:1: // Copyright 2010 The Go Authors. All rights\n> reserved.\n> 2011\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode6\n> src/pkg/crypto/bcrypt/bcrypt.go:6: // algorithm.\n> include the URL?\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode68\n> src/pkg/crypto/bcrypt/bcrypt.go:68: func Equal(hashedPassword, password []byte)\n> bool {\n> I think that the name of this function should try to minimise the chance that\n> someone passes the arguments in the wrong order.\n> \n> CompareHashedAndPlain?\n> \n\nWent with CompareHashAndPassword. A little verbose, maybe.\n\n> Also, why not just return an os.Error and thus nil is success? Then EqualVerbose\n> can go away.\n> \n\nDone. Not super keen on this, but I see the precedence.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode108\n> src/pkg/crypto/bcrypt/bcrypt.go:108: for n < maxSaltSize {\n> io.ReadFull\n> \n\nOh, right. Done. Better.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode133\n> src/pkg/crypto/bcrypt/bcrypt.go:133: n, err = decodeCost(p,\n> hashedSecret[offset:])\n> rather than keeping an offset, it's more common to reslice:\n> \n> hashedSecret = hashedSecret[n:]\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode209\n> src/pkg/crypto/bcrypt/bcrypt.go:209: copy(arr[n:], []byte(fmt.Sprintf(\"%0d\",\n> p.cost)))\n> see package strconv rather than Sprintf\n> \n\nstrconv, unfortunately, doesn't allow for leading zeros like Sprintf which is required for compatibility. Adding a test for that. Sprintf does generate more garbage than I'd like in this path, but it's currently overwhelmed by the blowfish garbage. Once we fix that, I'll see if we need to do the zero work here instead of using Sprintf.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode224\n> src/pkg/crypto/bcrypt/bcrypt.go:224: func decodeVersion(p *hashed, sbytes\n> []byte) (int, os.Error) {\n> why not make this a method on hashed?\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode226\n> src/pkg/crypto/bcrypt/bcrypt.go:226: return -1, os.NewError(fmt.Sprintf(\"invalid\n> salt: %s\", sbytes))\n> You can concat strings with + rather can Sprintf\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt.go#newcode241\n> src/pkg/crypto/bcrypt/bcrypt.go:241: func decodeCost(p *hashed, sbytes []byte)\n> (int, os.Error) {\n> why not make this a method on hashed?\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt_test.go\n> File src/pkg/crypto/bcrypt/bcrypt_test.go (right):\n> \n> http://codereview.appspot.com/4964078/diff/2001/src/pkg/crypto/bcrypt/bcrypt_test.go#newcode1\n> src/pkg/crypto/bcrypt/bcrypt_test.go:1: // Copyright 2010 The Go Authors. All\n> rights reserved.\n> 2011\n\nDone.",
			"disapproval": false,
			"date": "2011-09-14 06:55:30.367522",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, agl@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-14 08:39:38.989118",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, agl@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-16 01:19:40.974031",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, agl@golang.org, rsc@golang.org, dchest@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-17 00:50:49.566945",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think this is basically there minus nits. I'll land the next revision unless anyone else objects.\n\nhttp://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/base64.go\nFile src/pkg/crypto/bcrypt/base64.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/base64.go#newcode12\nsrc/pkg/crypto/bcrypt/base64.go:12: var alphabet = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\ns/var/const/\n\nhttp://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go\nFile src/pkg/crypto/bcrypt/bcrypt.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go#newcode28\nsrc/pkg/crypto/bcrypt/bcrypt.go:28: var MismatchedHashAndPassword = os.NewError(\"crypto:bcrypt: hashedPassword is not the hash of the given password\")\nThe convention seems to be that errors have a name that ends in Error\n\nhttp://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go#newcode28\nsrc/pkg/crypto/bcrypt/bcrypt.go:28: var MismatchedHashAndPassword = os.NewError(\"crypto:bcrypt: hashedPassword is not the hash of the given password\")\ns!crypto:!crypto/!\n\nhttp://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go#newcode85\nsrc/pkg/crypto/bcrypt/bcrypt.go:85: // MinCost, instead. Use Equal, as defined in this package, to compare the\nEqual has been renamed, right?",
			"disapproval": false,
			"date": "2011-09-16 20:43:47.354922",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 20:43:47, agl1 wrote:\n> I think this is basically there minus nits. I'll land the next revision unless\n> anyone else objects.\n> \n> http://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/base64.go\n> File src/pkg/crypto/bcrypt/base64.go (right):\n> \n> http://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/base64.go#newcode12\n> src/pkg/crypto/bcrypt/base64.go:12: var alphabet =\n> \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n> s/var/const/\n> \nDone.\n\n> http://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go\n> File src/pkg/crypto/bcrypt/bcrypt.go (right):\n> \n> http://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go#newcode28\n> src/pkg/crypto/bcrypt/bcrypt.go:28: var MismatchedHashAndPassword =\n> os.NewError(\"crypto:bcrypt: hashedPassword is not the hash of the given\n> password\")\n> The convention seems to be that errors have a name that ends in Error\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go#newcode28\n> src/pkg/crypto/bcrypt/bcrypt.go:28: var MismatchedHashAndPassword =\n> os.NewError(\"crypto:bcrypt: hashedPassword is not the hash of the given\n> password\")\n> s!crypto:!crypto/!\n> \n\nDone.\n\n> http://codereview.appspot.com/4964078/diff/19001/src/pkg/crypto/bcrypt/bcrypt.go#newcode85\n> src/pkg/crypto/bcrypt/bcrypt.go:85: // MinCost, instead. Use Equal, as defined\n> in this package, to compare the\n> Equal has been renamed, right?\n\nYep! Done.",
			"disapproval": false,
			"date": "2011-09-16 21:14:22.687336",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, agl@golang.org, rsc@golang.org, dchest@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-17 00:53:32.766936",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 19, 2011 at 10:29 AM,  <agl@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=d8c1aeda704a ***\n\nI tweaked a couple of things before landing:\n\nI removed \"Works\" from the end of one of the test names\n\nI made TestCost not run in short mode because it was taking > 3\nseconds on my workstation. That would probably have been a problem on\nslower machines.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2011-09-19 14:30:30.526661",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, agl@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-16 21:15:45.166523",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go\nFile src/pkg/crypto/bcrypt/bcrypt.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go#newcode132\nsrc/pkg/crypto/bcrypt/bcrypt.go:132: io.ReadFull(rand.Reader, unencodedSalt)\nMissing error check here.",
			"disapproval": false,
			"date": "2011-09-16 23:27:52.615631",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go\nFile src/pkg/crypto/bcrypt/bcrypt.go (right):\n\nhttp://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go#newcode145\nsrc/pkg/crypto/bcrypt/bcrypt.go:145: n, err := p.decodeVersion(hashedSecret)\nBefore doing p.decodeVersion/p.decodeCost shouldn't there be a check for length (with return nil, HashTooShortError) as later in this function? I think both methods will panic if hashedSecret is too short.",
			"disapproval": false,
			"date": "2011-09-16 23:53:44.380664",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "SGTM.\n\nOn Mon, Sep 19, 2011 at 7:30 AM, Adam Langley <agl@golang.org> wrote:\n> before landing:\n>\n> I removed \"Works\" from the end of one of the test names\n>\n> I made TestCost not run in short mode because it was taking > 3\n> seconds on my workstation. That would probably have been a problem on\n> slower machines.\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-19 16:46:15.796402",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 23:53:44, dchest wrote:\n> http://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go\n> File src/pkg/crypto/bcrypt/bcrypt.go (right):\n> \n> http://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go#newcode145\n> src/pkg/crypto/bcrypt/bcrypt.go:145: n, err := p.decodeVersion(hashedSecret)\n> Before doing p.decodeVersion/p.decodeCost shouldn't there be a check for length\n> (with return nil, HashTooShortError) as later in this function? I think both\n> methods will panic if hashedSecret is too short.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-17 00:53:44.428121",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 23:27:52, dchest wrote:\n> http://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go\n> File src/pkg/crypto/bcrypt/bcrypt.go (right):\n> \n> http://codereview.appspot.com/4964078/diff/26001/src/pkg/crypto/bcrypt/bcrypt.go#newcode132\n> src/pkg/crypto/bcrypt/bcrypt.go:132: io.ReadFull(rand.Reader, unencodedSalt)\n> Missing error check here.\n\nGood catch. Done.",
			"disapproval": false,
			"date": "2011-09-17 00:53:58.216326",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jeff@somethingsimilar.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d8c1aeda704a ***\n\n    crypto/bcrypt: new package\n\nA port of Provos and Mazi\u00e8res's adapative hashing algorithm. See http://www.usenix.org/events/usenix99/provos/provos_html/node1.html\n\nR=bradfitz, agl, rsc, dchest\nCC=golang-dev\nhttp://codereview.appspot.com/4964078\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2011-09-19 14:29:13.140490",
			"approval": false
		}
	],
	"owner_email": "jeff@somethingsimilar.com",
	"private": false,
	"base_url": "",
	"owner": "jmhodges",
	"subject": "code review 4964078:     crypto/bcrypt: new package",
	"created": "2011-09-12 09:06:41.130110",
	"patchsets": [
		1,
		2001,
		13001,
		15001,
		19001,
		26001,
		28002,
		32001
	],
	"modified": "2011-09-19 17:13:39.748684",
	"closed": true,
	"issue": 4964078
}