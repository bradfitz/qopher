{
	"description": "undo CL 8363045 / a3ce42f9748b\n\nIt changes an exported API, and breaks the build.\n\n\u00ab\u00ab\u00ab original CL description\nreflect: use unsafe.Pointer in StringHeader and SliceHeader\n\nRelates to issue 5193.\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/8363045\n\u00bb\u00bb\u00bb",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"dvyukov@google.com",
		"adg@golang.org",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-07 21:45:07.902420",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nfor fixing the build.  I agree with Dmitry in that we should just document\r\nthat the caller needs to retain the Data uintptr some other means while\r\nusing reflect slice/string headers.\r\n\r\nRegardless of whether we can change the internal representation of\r\nstrings/slices in 1.x (I doubt we can,), I think it's too early to change\r\nSliceHeader/StringHeader's public API in Go 1.1, especially this late.\r\n\r\n\r\n\r\n\r\nOn Sun, Apr 7, 2013 at 2:45 PM, <dsymonds@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> undo CL 8363045 / a3ce42f9748b\r\n>\r\n> It changes an exported API, and breaks the build.\r\n>\r\n> \u00ab\u00ab\u00ab original CL description\r\n> reflect: use unsafe.Pointer in StringHeader and SliceHeader\r\n>\r\n> Relates to issue 5193.\r\n>\r\n> R=r\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/8363045<https://codereview.appspot.com/8363045>\r\n> \u00bb\u00bb\u00bb\r\n>\r\n> Please review this at https://codereview.appspot.**com/8357051/<https://codereview.appspot.com/8357051/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/reflect/value.go\r\n>\r\n>\r\n> Index: src/pkg/reflect/value.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/value.go\r\n> +++ b/src/pkg/reflect/value.go\r\n> @@ -910,7 +910,7 @@\r\n>                 tt := (*sliceType)(unsafe.Pointer(v.**typ))\r\n>                 typ := tt.elem\r\n>                 fl |= flag(typ.Kind()) << flagKindShift\r\n> -               val := unsafe.Pointer(uintptr(s.Data) +\r\n> uintptr(i)*typ.size)\r\n> +               val := unsafe.Pointer(s.Data + uintptr(i)*typ.size)\r\n>                 return Value{typ, val, fl}\r\n>\r\n>         case String:\r\n> @@ -919,7 +919,7 @@\r\n>                 if i < 0 || i >= s.Len {\r\n>                         panic(\"reflect: string index out of range\")\r\n>                 }\r\n> -               val := *(*byte)(unsafe.Pointer(**uintptr(s.Data) +\r\n> uintptr(i)))\r\n> +               val := *(*byte)(unsafe.Pointer(s.Data + uintptr(i)))\r\n>                 return Value{uint8Type, unsafe.Pointer(uintptr(val)), fl}\r\n>         }\r\n>         panic(&ValueError{\"reflect.**Value.Index\", k})\r\n> @@ -1310,7 +1310,7 @@\r\n>                 return uintptr(p)\r\n>\r\n>         case Slice:\r\n> -               return uintptr((*SliceHeader)(v.val).**Data)\r\n> +               return (*SliceHeader)(v.val).Data\r\n>         }\r\n>         panic(&ValueError{\"reflect.**Value.Pointer\", k})\r\n>  }\r\n> @@ -1565,7 +1565,7 @@\r\n>                 }\r\n>                 var x string\r\n>                 val := (*StringHeader)(unsafe.**Pointer(&x))\r\n> -               val.Data = unsafe.Pointer(uintptr(s.Data) + uintptr(beg))\r\n> +               val.Data = s.Data + uintptr(beg)\r\n>                 val.Len = end - beg\r\n>                 return Value{v.typ, unsafe.Pointer(&x), v.flag}\r\n>         }\r\n> @@ -1579,7 +1579,7 @@\r\n>\r\n>         // Reinterpret as *SliceHeader to edit.\r\n>         s := (*SliceHeader)(unsafe.Pointer(**&x))\r\n> -       s.Data = unsafe.Pointer(uintptr(base) +\r\n> uintptr(beg)*typ.elem.Size())\r\n> +       s.Data = uintptr(base) + uintptr(beg)*typ.elem.Size()\r\n>         s.Len = end - beg\r\n>         s.Cap = cap - beg\r\n>\r\n> @@ -1701,14 +1701,14 @@\r\n>  // StringHeader is the runtime representation of a string.\r\n>  // It cannot be used safely or portably.\r\n>  type StringHeader struct {\r\n> -       Data unsafe.Pointer\r\n> +       Data uintptr\r\n>         Len  int\r\n>  }\r\n>\r\n>  // SliceHeader is the runtime representation of a slice.\r\n>  // It cannot be used safely or portably.\r\n>  type SliceHeader struct {\r\n> -       Data unsafe.Pointer\r\n> +       Data uintptr\r\n>         Len  int\r\n>         Cap  int\r\n>  }\r\n> @@ -1988,7 +1988,7 @@\r\n>\r\n>         // Reinterpret as *SliceHeader to edit.\r\n>         s := (*SliceHeader)(unsafe.Pointer(**&x))\r\n> -       s.Data = unsafe_NewArray(typ.Elem().(***rtype), cap)\r\n> +       s.Data = uintptr(unsafe_NewArray(typ.**Elem().(*rtype), cap))\r\n>         s.Len = len\r\n>         s.Cap = cap\r\n>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-07 21:59:03.995650",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=131b164cea5e ***\n\nundo CL 8363045 / a3ce42f9748b\n\nIt changes an exported API, and breaks the build.\n\n\u00ab\u00ab\u00ab original CL description\nreflect: use unsafe.Pointer in StringHeader and SliceHeader\n\nRelates to issue 5193.\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/8363045\n\u00bb\u00bb\u00bb\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8357051",
			"disapproval": false,
			"date": "2013-04-07 21:59:55.379670",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's still controversy, but I'll submit this anyway so we can start\r\nfrom a clean base.\r\n",
			"disapproval": false,
			"date": "2013-04-07 21:59:49.800480",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 7, 2013 at 2:59 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> LGTM\r\n>\r\n> for fixing the build.  I agree with Dmitry in that we should just document\r\n> that the caller needs to retain the Data uintptr some other means while\r\n> using reflect slice/string headers.\r\n>\r\n> Regardless of whether we can change the internal representation of\r\n> strings/slices in 1.x (I doubt we can,), I think it's too early to change\r\n> SliceHeader/StringHeader's public API in Go 1.1, especially this late.\r\n\r\n\r\nAs far as I understand, \"we can not do this in 1.x\" is equivalent to\r\n\"we can not do this\".\r\nAt some point we will want to change the representation, and such a\r\nchange does not look like a good reason for Go2.0. And whatever we\r\nnumber the releases, the gist will be the same -- it will break user\r\ncode.\r\nSo what do you think about also adding a comment staying that this is\r\n*internal* representation and it can change w/o notice?\r\nBtw, are there builtin build tags for releases (+build go1.2.0)? That\r\nwould alleviate the problem.\r\n",
			"disapproval": false,
			"date": "2013-04-07 22:10:18.143550",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 8 April 2013 08:10, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> So what do you think about also adding a comment staying that this is\r\n> *internal* representation and it can change w/o notice?\r\n>\r\n\r\nEven if we add it now, it wasn't there in go1.0, so we still can't change\r\nit.\r\n\r\n\r\n>  Btw, are there builtin build tags for releases (+build go1.2.0)? That\r\n> would alleviate the problem.\r\n>\r\n\r\nThere is the build tag \"go1.1\" that will be satisfied for any version of go\r\n>= 1.1, but it's not documented. (\r\nhttps://code.google.com/p/go/issues/detail?id=5235)\r\n\r\nHow would build tags alleviate the problem, though? We're trying to ensure\r\nthat code written for 1.0 still compiles under 1.1. Build tags still\r\nrequire the author to make changes to their code to avoid breakage.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2013-04-07 23:27:11.109570",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 7, 2013 at 4:26 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n> On 8 April 2013 08:10, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>>\r\n>> So what do you think about also adding a comment staying that this is\r\n>> *internal* representation and it can change w/o notice?\r\n>\r\n>\r\n> Even if we add it now, it wasn't there in go1.0, so we still can't change\r\n> it.\r\n\r\n\r\nYes, I understand, this is somewhat special case.\r\n\r\n\r\n>> Btw, are there builtin build tags for releases (+build go1.2.0)? That\r\n>> would alleviate the problem.\r\n>\r\n>\r\n> There is the build tag \"go1.1\" that will be satisfied for any version of go\r\n>>= 1.1, but it's not documented.\r\n> (https://code.google.com/p/go/issues/detail?id=5235)\r\n>\r\n> How would build tags alleviate the problem, though? We're trying to ensure\r\n> that code written for 1.0 still compiles under 1.1. Build tags still require\r\n> the author to make changes to their code to avoid breakage.\r\n\r\nAt least it will be possible to create several versions of code for\r\ndifferent Go releases.\r\n\r\n+cshapiro\r\nCarl, this makes potential GC changes more problematic.\r\n",
			"disapproval": false,
			"date": "2013-04-07 23:32:55.167650",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Our compatibility promise allows us to change things if the old\r\nsituation is broken, but my reading says that the new collector broke\r\nthe old world.\r\n\r\nHowever, the case could be made that the old specification was at\r\nfault - Data pointed to something but was not a pointer - and\r\ntherefore we could fix it. I'm not yet asserting that is the answer,\r\njust that that case could be made.\r\n\r\nI also have some sympathy for the story that StringHeader and\r\nSliceHeader are internal representations that we may change. The code\r\nalready says, \"StringHeader is the runtime representation of a string.\r\nIt cannot be used safely or portably.\"\r\n\r\nThat gives us two plausible reasons it would be OK to fix this.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-08 01:21:10.158710",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree though that we need to plan this, so commentary it is. I will prep a CL.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-08 01:30:48.257940",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 8357051: undo CL 8363045 / a3ce42f9748b",
	"created": "2013-04-07 21:44:29.038350",
	"patchsets": [
		1,
		2001,
		4002
	],
	"modified": "2013-04-08 01:21:10.314790",
	"closed": true,
	"issue": 8357051
}