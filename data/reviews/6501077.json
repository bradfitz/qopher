{
	"description": "runtime: refactor goroutine blocking\nThe change is a preparation for the new scheduler.\nIt introduces runtime.park() function,\nthat will atomically unlock the mutex and park the goroutine.\nIt will allow to remove the racy readyonstop flag\nthat is difficult to implement w/o the global scheduler mutex.",
	"cc": [
		"rsc@golang.org",
		"remyoudompheng@gmail.com",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-03 13:48:41.265740",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6501077/diff/4/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/6501077/diff/4/src/pkg/runtime/proc.c#newcode954\nsrc/pkg/runtime/proc.c:954: void\nit could be a good idea to document the purpose of this function:\n\nruntime\u00b7park puts the current goroutine into a waiting state and unlocks...\n\nespecially if it must become more complex. Could there be an interest in defining a\n\ntypedef void (*unlockfunc)(void*); \n\nso that the signatures and casts are more readable?",
			"disapproval": false,
			"date": "2012-09-03 19:38:08.397540",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/03 19:38:08, remyoudompheng wrote:\n> http://codereview.appspot.com/6501077/diff/4/src/pkg/runtime/proc.c\n> File src/pkg/runtime/proc.c (right):\n> \n> http://codereview.appspot.com/6501077/diff/4/src/pkg/runtime/proc.c#newcode954\n> src/pkg/runtime/proc.c:954: void\n> it could be a good idea to document the purpose of this function:\n> \n> runtime\u00b7park puts the current goroutine into a waiting state and unlocks...\n\nDone.\n\n> especially if it must become more complex. Could there be an interest in\n> defining a\n> \n> typedef void (*unlockfunc)(void*); \n> \n> so that the signatures and casts are more readable?\n\nYeah, the casts are ugly. I've just defined the function as void(*)(Lock*), so now there is only one cast in select. PTAL.",
			"disapproval": false,
			"date": "2012-09-04 07:40:14.190170",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc\nFile src/pkg/runtime/time.goc (right):\n\nhttp://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc#newcode58\nsrc/pkg/runtime/time.goc:58: // The caller must have set g->status and g->waitreason.\nOn 2012/09/04 10:36:50, dfc wrote:\n> Is this line of the comment correct anymore ? runtime.park is in charge of\n> g->status and g->waitreason.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-04 10:54:09.390850",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks pretty good. Thank you.\n\nhttp://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc\nFile src/pkg/runtime/time.goc (right):\n\nhttp://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc#newcode33\nsrc/pkg/runtime/time.goc:33: runtime\u00b7unlock(&timers);\nOn 2012/09/04 08:10:06, dvyukov wrote:\n> On 2012/09/04 07:57:19, dfc wrote:\n> > Why did you move the guard outside the call to addtimer? addtimer might cause\n> a\n> > stack split which would hold the lock longer than necessary.\n> \n> Because runtime\u00b7tsleep() needs to call park() instead of unlock().\n> \n\nThanks, I understand now.\n\nhttp://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc#newcode58\nsrc/pkg/runtime/time.goc:58: // The caller must have set g->status and g->waitreason.\nIs this line of the comment correct anymore ? runtime.park is in charge of g->status and g->waitreason.",
			"disapproval": false,
			"date": "2012-09-04 10:36:50.024220",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc\nFile src/pkg/runtime/time.goc (right):\n\nhttp://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc#newcode33\nsrc/pkg/runtime/time.goc:33: runtime\u00b7unlock(&timers);\nWhy did you move the guard outside the call to addtimer? addtimer might cause a stack split which would hold the lock longer than necessary.",
			"disapproval": false,
			"date": "2012-09-04 07:57:19.686110",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc\nFile src/pkg/runtime/time.goc (right):\n\nhttp://codereview.appspot.com/6501077/diff/7003/src/pkg/runtime/time.goc#newcode33\nsrc/pkg/runtime/time.goc:33: runtime\u00b7unlock(&timers);\nOn 2012/09/04 07:57:19, dfc wrote:\n> Why did you move the guard outside the call to addtimer? addtimer might cause a\n> stack split which would hold the lock longer than necessary.\n\nBecause runtime\u00b7tsleep() needs to call park() instead of unlock().",
			"disapproval": false,
			"date": "2012-09-04 08:10:06.776410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-11 02:11:31.771300",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f0a385fd719f ***\n\nruntime: refactor goroutine blocking\nThe change is a preparation for the new scheduler.\nIt introduces runtime.park() function,\nthat will atomically unlock the mutex and park the goroutine.\nIt will allow to remove the racy readyonstop flag\nthat is difficult to implement w/o the global scheduler mutex.\n\nR=rsc, remyoudompheng, dave\nCC=golang-dev\nhttp://codereview.appspot.com/6501077",
			"disapproval": false,
			"date": "2012-09-18 17:15:54.991090",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6501077: runtime: refactor goroutine blocking",
	"created": "2012-09-03 13:23:12.992310",
	"patchsets": [
		1,
		2001,
		4001,
		10001,
		3006,
		4,
		7003,
		7004,
		13001
	],
	"modified": "2012-09-18 17:15:56.812190",
	"closed": true,
	"issue": 6501077
}