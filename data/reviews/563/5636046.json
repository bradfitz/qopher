{
	"description": "io: API tweaks\n- eliminate local Error type (a historical artifact)\n- fix documentation of CopyN\n- fix documentation of WriteString\nFixes issue 2859.",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nOn Feb 5, 2012 7:26 PM, <r@golang.org> wrote:\n\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> io: API tweaks\n> - eliminate local Error type (a historical artifact)\n> - fix documentation of CopyN\n> - fix documentation of WriteString\n> Fixes issue 2859\n>\n> Please review this at http://codereview.appspot.com/**5636046/<http://codereview.appspot.com/5636046/>\n>\n> Affected files:\n>  M src/pkg/io/io.go\n>  M src/pkg/io/pipe.go\n>\n>\n> Index: src/pkg/io/io.go\n> ==============================**==============================**=======\n> --- a/src/pkg/io/io.go\n> +++ b/src/pkg/io/io.go\n> @@ -8,30 +8,27 @@\n>  // abstract the functionality, plus some other related primitives.\n>  package io\n>\n> -// Error represents an unexpected I/O behavior.\n> -type Error struct {\n> -       ErrorString string\n> -}\n> -\n> -func (err *Error) Error() string { return err.ErrorString }\n> +import (\n> +       \"errors\"\n> +)\n>\n>  // ErrShortWrite means that a write accepted fewer bytes than requested\n>  // but failed to return an explicit error.\n> -var ErrShortWrite error = &Error{\"short write\"}\n> +var ErrShortWrite = errors.New(\"short write\")\n>\n>  // ErrShortBuffer means that a read required a longer buffer than was\n> provided.\n> -var ErrShortBuffer error = &Error{\"short buffer\"}\n> +var ErrShortBuffer = errors.New(\"short buffer\")\n>\n>  // EOF is the error returned by Read when no more input is available.\n>  // Functions should return EOF only to signal a graceful end of input.\n>  // If the EOF occurs unexpectedly in a structured data stream,\n>  // the appropriate error is either ErrUnexpectedEOF or some other error\n>  // giving more detail.\n> -var EOF error = &Error{\"EOF\"}\n> +var EOF = errors.New(\"EOF\")\n>\n>  // ErrUnexpectedEOF means that EOF was encountered in the\n>  // middle of reading a fixed-size block or data structure.\n> -var ErrUnexpectedEOF error = &Error{\"unexpected EOF\"}\n> +var ErrUnexpectedEOF = errors.New(\"unexpected EOF\")\n>\n>  // Reader is the interface that wraps the basic Read method.\n>  //\n> @@ -220,6 +217,7 @@\n>  }\n>\n>  // WriteString writes the contents of the string s to w, which accepts an\n> array of bytes.\n> +// If w already implements a WriteString method, it is invoked directly.\n>  func WriteString(w Writer, s string) (n int, err error) {\n>        if sw, ok := w.(stringWriter); ok {\n>                return sw.WriteString(s)\n> @@ -268,7 +266,7 @@\n>  // (including EOF), so can CopyN.\n>  //\n>  // If dst implements the ReaderFrom interface,\n> -// the copy is implemented by calling dst.ReadFrom(src).\n> +// the copy is implemented using it.\n>  func CopyN(dst Writer, src Reader, n int64) (written int64, err error) {\n>        // If the writer has a ReadFrom method, use it to do the copy.\n>        // Avoids a buffer allocation and a copy.\n> @@ -411,8 +409,8 @@\n>        return\n>  }\n>\n> -var errWhence = &Error{\"Seek: invalid whence\"}\n> -var errOffset = &Error{\"Seek: invalid offset\"}\n> +var errWhence = errors.New(\"Seek: invalid whence\")\n> +var errOffset = errors.New(\"Seek: invalid offset\")\n>\n>  func (s *SectionReader) Seek(offset int64, whence int) (ret int64, err\n> error) {\n>        switch whence {\n> Index: src/pkg/io/pipe.go\n> ==============================**==============================**=======\n> --- a/src/pkg/io/pipe.go\n> +++ b/src/pkg/io/pipe.go\n> @@ -7,10 +7,13 @@\n>\n>  package io\n>\n> -import \"sync\"\n> +import (\n> +       \"errors\"\n> +       \"sync\"\n> +)\n>\n>  // ErrClosedPipe is the error used for read or write operations on a\n> closed pipe.\n> -var ErrClosedPipe = &Error{\"io: read/write on closed pipe\"}\n> +var ErrClosedPipe = errors.New(\"io: read/write on closed pipe\")\n>\n>  type pipeResult struct {\n>        n   int\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-06 04:06:32.132240",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-06 03:25:54.192749",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=afa99ad294e7 ***\n\nio: API tweaks\n- eliminate local Error type (a historical artifact)\n- fix documentation of CopyN\n- fix documentation of WriteString\nFixes issue 2859.\n\nR=rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5636046",
			"disapproval": false,
			"date": "2012-02-06 04:09:55.674101",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5636046: io: API tweaks",
	"created": "2012-02-06 03:25:49.095693",
	"patchsets": [
		1,
		1003
	],
	"modified": "2012-02-06 04:09:58.147757",
	"closed": true,
	"issue": 5636046
}