{
	"description": "all: avoid bytes.NewBuffer(nil)\nThe practice encourages people to think this is the way to\ncreate a bytes.Buffer when new(bytes.Buffer) or\njust var buf bytes.Buffer work fine.\n(html/token.go was missing the point altogether.)",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-06 00:53:52.767510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI prefer \"var buf bytes.Buffer\", though.  Same number of allocations\ncurrently, but I think reading new(bytes.Buffer) says \"going to be keeping\nthis\" vs. the meaning of a local variable.\n\n\nOn Sun, Feb 5, 2012 at 4:53 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> all: avoid bytes.NewBuffer(nil)\n> The practice encourages people to think this is the way to\n> create a bytes.Buffer when new(bytes.Buffer) is fine.\n> (html/token.go was missing the point altogether.)\n>\n> Please review this at http://codereview.appspot.com/**5637043/<http://codereview.appspot.com/5637043/>\n>\n> Affected files:\n>  M src/pkg/bufio/bufio_test.go\n>  M src/pkg/compress/flate/**deflate_test.go\n>  M src/pkg/compress/lzw/reader_**test.go\n>  M src/pkg/compress/zlib/writer_**test.go\n>  M src/pkg/encoding/asn1/marshal.**go\n>  M src/pkg/encoding/gob/encoder_**test.go\n>  M src/pkg/encoding/hex/hex.go\n>  M src/pkg/encoding/hex/hex_test.**go\n>  M src/pkg/encoding/pem/pem.go\n>  M src/pkg/encoding/pem/pem_test.**go\n>  M src/pkg/exp/html/escape.go\n>  M src/pkg/exp/html/parse_test.go\n>  M src/pkg/exp/html/token.go\n>  M src/pkg/exp/html/token_test.go\n>  M src/pkg/html/escape.go\n>  M src/pkg/image/jpeg/writer_**test.go\n>  M src/pkg/image/png/writer_test.**go\n>  M src/pkg/old/template/template_**test.go\n>\n>\n> Index: src/pkg/bufio/bufio_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/bufio/bufio_test.go\n> +++ b/src/pkg/bufio/bufio_test.go\n> @@ -688,7 +688,7 @@\n>  }\n>\n>  func TestReadEmptyBuffer(t *testing.T) {\n> -       l, _ := NewReaderSize(bytes.NewBuffer(**nil), minReadBufferSize)\n> +       l, _ := NewReaderSize(new(bytes.**Buffer), minReadBufferSize)\n>        line, isPrefix, err := l.ReadLine()\n>        if err != io.EOF {\n>                t.Errorf(\"expected EOF from ReadLine, got '%s' %t %s\",\n> line, isPrefix, err)\n> Index: src/pkg/compress/flate/**deflate_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/compress/flate/**deflate_test.go\n> +++ b/src/pkg/compress/flate/**deflate_test.go\n> @@ -229,7 +229,7 @@\n>  }\n>\n>  func testToFromWithLevelAndLimit(t *testing.T, level int, input []byte,\n> name string, limit int) error {\n> -       buffer := bytes.NewBuffer(nil)\n> +       buffer := new(bytes.Buffer)\n>        w := NewWriter(buffer, level)\n>        w.Write(input)\n>        w.Close()\n> Index: src/pkg/compress/lzw/reader_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/compress/lzw/reader_**test.go\n> +++ b/src/pkg/compress/lzw/reader_**test.go\n> @@ -81,7 +81,7 @@\n>  }\n>\n>  func TestReader(t *testing.T) {\n> -       b := bytes.NewBuffer(nil)\n> +       b := new(bytes.Buffer)\n>        for _, tt := range lzwTests {\n>                d := strings.Split(tt.desc, \";\")\n>                var order Order\n> @@ -116,7 +116,7 @@\n>        b.SetBytes(int64(n))\n>        buf0, _ := ioutil.ReadFile(\"../testdata/**e.txt\")\n>        buf0 = buf0[:10000]\n> -       compressed := bytes.NewBuffer(nil)\n> +       compressed := new(bytes.Buffer)\n>        w := NewWriter(compressed, LSB, 8)\n>        for i := 0; i < n; i += len(buf0) {\n>                io.Copy(w, bytes.NewBuffer(buf0))\n> Index: src/pkg/compress/zlib/writer_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/compress/zlib/**writer_test.go\n> +++ b/src/pkg/compress/zlib/**writer_test.go\n> @@ -124,7 +124,7 @@\n>\n>  func TestWriterDictIsUsed(t *testing.T) {\n>        var input = []byte(\"Lorem ipsum dolor sit amet, consectetur\n> adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore\n> magna aliqua.\")\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        compressor, err := NewWriterDict(buf, BestCompression, input)\n>        if err != nil {\n>                t.Errorf(\"error in NewWriterDict: %s\", err)\n> Index: src/pkg/encoding/asn1/marshal.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/asn1/**marshal.go\n> +++ b/src/pkg/encoding/asn1/**marshal.go\n> @@ -24,7 +24,7 @@\n>  }\n>\n>  func newForkableWriter() *forkableWriter {\n> -       return &forkableWriter{bytes.**NewBuffer(nil), nil, nil}\n> +       return &forkableWriter{new(bytes.**Buffer), nil, nil}\n>  }\n>\n>  func (f *forkableWriter) fork() (pre, post *forkableWriter) {\n> Index: src/pkg/encoding/gob/encoder_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/gob/**encoder_test.go\n> +++ b/src/pkg/encoding/gob/**encoder_test.go\n> @@ -570,7 +570,7 @@\n>                \"bo\": []bool{false},\n>                \"st\": []string{\"s\"},\n>        }\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        enc := NewEncoder(buf)\n>        err := enc.Encode(m)\n>        if err != nil {\n> @@ -579,7 +579,7 @@\n>  }\n>\n>  func TestSliceReusesMemory(t *testing.T) {\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        // Bytes\n>        {\n>                x := []byte(\"abcd\")\n> Index: src/pkg/encoding/hex/hex.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/hex/hex.go\n> +++ b/src/pkg/encoding/hex/hex.go\n> @@ -103,7 +103,7 @@\n>  // Dump returns a string that contains a hex dump of the given data. The\n> format\n>  // of the hex dump matches the output of `hexdump -C` on the command line.\n>  func Dump(data []byte) string {\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        dumper := Dumper(buf)\n>        dumper.Write(data)\n>        dumper.Close()\n> Index: src/pkg/encoding/hex/hex_test.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/hex/hex_**test.go\n> +++ b/src/pkg/encoding/hex/hex_**test.go\n> @@ -155,7 +155,7 @@\n>        }\n>\n>        for stride := 1; stride < len(in); stride++ {\n> -               out := bytes.NewBuffer(nil)\n> +               out := new(bytes.Buffer)\n>                dumper := Dumper(out)\n>                done := 0\n>                for done < len(in) {\n> Index: src/pkg/encoding/pem/pem.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/pem/pem.go\n> +++ b/src/pkg/encoding/pem/pem.go\n> @@ -251,7 +251,7 @@\n>  }\n>\n>  func EncodeToMemory(b *Block) []byte {\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        Encode(buf, b)\n>        return buf.Bytes()\n>  }\n> Index: src/pkg/encoding/pem/pem_test.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/pem/pem_**test.go\n> +++ b/src/pkg/encoding/pem/pem_**test.go\n> @@ -73,7 +73,7 @@\n>\n>  func TestLineBreaker(t *testing.T) {\n>        for i, test := range lineBreakerTests {\n> -               buf := bytes.NewBuffer(nil)\n> +               buf := new(bytes.Buffer)\n>                var breaker lineBreaker\n>                breaker.out = buf\n>                _, err := breaker.Write([]byte(test.in))\n> @@ -93,7 +93,7 @@\n>        }\n>\n>        for i, test := range lineBreakerTests {\n> -               buf := bytes.NewBuffer(nil)\n> +               buf := new(bytes.Buffer)\n>                var breaker lineBreaker\n>                breaker.out = buf\n>\n> Index: src/pkg/exp/html/escape.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/html/escape.go\n> +++ b/src/pkg/exp/html/escape.go\n> @@ -233,7 +233,7 @@\n>        if strings.IndexAny(s, escapedChars) == -1 {\n>                return s\n>        }\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        escape(buf, s)\n>        return buf.String()\n>  }\n> Index: src/pkg/exp/html/parse_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/html/parse_test.**go\n> +++ b/src/pkg/exp/html/parse_test.**go\n> @@ -159,7 +159,7 @@\n>        if n == nil || len(n.Child) == 0 {\n>                return \"\", nil\n>        }\n> -       b := bytes.NewBuffer(nil)\n> +       b := new(bytes.Buffer)\n>        for _, child := range n.Child {\n>                if err := dumpLevel(b, child, 0); err != nil {\n>                        return \"\", err\n> Index: src/pkg/exp/html/token.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/html/token.go\n> +++ b/src/pkg/exp/html/token.go\n> @@ -77,8 +77,7 @@\n>        if len(t.Attr) == 0 {\n>                return t.Data\n>        }\n> -       buf := bytes.NewBuffer(nil)\n> -       buf.WriteString(t.Data)\n> +       buf := bytes.NewBufferString(t.Data)\n>        for _, a := range t.Attr {\n>                buf.WriteByte(' ')\n>                buf.WriteString(a.Key)\n> Index: src/pkg/exp/html/token_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/html/token_test.**go\n> +++ b/src/pkg/exp/html/token_test.**go\n> @@ -556,7 +556,7 @@\n>  func TestBufAPI(t *testing.T) {\n>        s := \"0<a>1</a>2<b>3<a>4<a>5</a>6</**b>7</a>8<a/>9\"\n>        z := NewTokenizer(bytes.NewBuffer([**]byte(s)))\n> -       result := bytes.NewBuffer(nil)\n> +       result := new(bytes.Buffer)\n>        depth := 0\n>  loop:\n>        for {\n> Index: src/pkg/html/escape.go\n> ==============================**==============================**=======\n> --- a/src/pkg/html/escape.go\n> +++ b/src/pkg/html/escape.go\n> @@ -237,7 +237,7 @@\n>        if strings.IndexAny(s, escapedChars) == -1 {\n>                return s\n>        }\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        escape(buf, s)\n>        return buf.String()\n>  }\n> Index: src/pkg/image/jpeg/writer_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/image/jpeg/writer_**test.go\n> +++ b/src/pkg/image/jpeg/writer_**test.go\n> @@ -54,7 +54,7 @@\n>                        continue\n>                }\n>                // Encode that image as JPEG.\n> -               buf := bytes.NewBuffer(nil)\n> +               buf := new(bytes.Buffer)\n>                err = Encode(buf, m0, &Options{Quality: tc.quality})\n>                if err != nil {\n>                        t.Error(tc.filename, err)\n> Index: src/pkg/image/png/writer_test.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/image/png/writer_**test.go\n> +++ b/src/pkg/image/png/writer_**test.go\n> @@ -35,12 +35,12 @@\n>  }\n>\n>  func encodeDecode(m image.Image) (image.Image, error) {\n> -       b := bytes.NewBuffer(nil)\n> -       err := Encode(b, m)\n> +       buf := new(bytes.Buffer)\n> +       err := Encode(buf, m)\n>        if err != nil {\n>                return nil, err\n>        }\n> -       m, err = Decode(b)\n> +       m, err = Decode(buf)\n>        if err != nil {\n>                return nil, err\n>        }\n> Index: src/pkg/old/template/template_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/old/template/**template_test.go\n> +++ b/src/pkg/old/template/**template_test.go\n> @@ -795,7 +795,7 @@\n>                                t.Errorf(\"For %q, expected error, got\n> none.\", c.in)\n>                                continue\n>                        }\n> -                       buf := bytes.NewBuffer(nil)\n> +                       buf := new(bytes.Buffer)\n>                        err = tmpl.Execute(buf, data)\n>                        if err != nil {\n>                                t.Error(\"unexpected Execute error: \", err)\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-06 01:08:33.141921",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, although then you need the ugly & sometimes. I'll play some more.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-06 01:33:34.535266",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Sun, Feb 5, 2012 at 5:50 PM, <r@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, bradfitz@golang.org, r@google.com\n> (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5637043/<http://codereview.appspot.com/5637043/>\n>\n",
			"disapproval": false,
			"date": "2012-02-06 02:06:20.451606",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-06 01:50:19.245200",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5900a93988af ***\n\nall: avoid bytes.NewBuffer(nil)\nThe practice encourages people to think this is the way to\ncreate a bytes.Buffer when new(bytes.Buffer) or\njust var buf bytes.Buffer work fine.\n(html/token.go was missing the point altogether.)\n\nR=golang-dev, bradfitz, r\nCC=golang-dev\nhttp://codereview.appspot.com/5637043",
			"disapproval": false,
			"date": "2012-02-06 03:09:06.885902",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5637043: all: avoid bytes.NewBuffer(nil)",
	"created": "2012-02-06 00:53:41.381560",
	"patchsets": [
		1,
		2001,
		6004
	],
	"modified": "2012-02-06 03:09:08.746167",
	"closed": true,
	"issue": 5637043
}