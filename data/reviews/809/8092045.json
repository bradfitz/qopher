{
	"description": "database/sql: improve standard deviation response time under high concurrency\r\n\r\nSee https://github.com/raggi/go-and-java for runtime benchmark.\r\n\r\nThe patch reduces the amount of map key search, moving connection oriented\r\nvariables onto the connection structs.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-31 17:12:54.140440",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice, thanks!\n\nJust one documentation nit.\n\nI assume you've run this with the race checker, too?\n\nhttps://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213\nsrc/pkg/database/sql/sql.go:213: inUse      bool\nthese two fields are not guarded by the sync.Mutex three lines up, but by db.mu, correct?\n\nI would add a blank line, then a comment line saying // guarded by db.mu\nand then list the two fields.",
			"disapproval": false,
			"date": "2013-03-31 17:42:02.873500",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 2:11 PM, <raggi@google.com> wrote:\r\n\r\n> On 2013/03/31 17:42:02, bradfitz wrote:\r\n>\r\n>> Nice, thanks!\r\n>>\r\n>\r\n>  Just one documentation nit.\r\n>>\r\n>\r\n> Good spot, I'll certainly fix that.\r\n>\r\n>\r\n>  I assume you've run this with the race checker, too?\r\n>>\r\n>\r\n> I hadn't doing so now.\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/8092045/diff/6001/src/pkg/**\r\n> database/sql/sql.go<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go>\r\n>\r\n>> File src/pkg/database/sql/sql.go (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/8092045/diff/6001/src/pkg/**\r\n> database/sql/sql.go#newcode213<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213>\r\n>\r\n>> src/pkg/database/sql/sql.go:**213: inUse      bool\r\n>> these two fields are not guarded by the sync.Mutex three lines up, but\r\n>>\r\n> by db.mu,\r\n>\r\n>> correct?\r\n>>\r\n>\r\n>  I would add a blank line, then a comment line saying // guarded by\r\n>>\r\n> db.mu\r\n>\r\n>> and then list the two fields.\r\n>>\r\n>\r\n> Yep. Will take a look at the code shortly, and certainly do this as a\r\n> first step. It's crossing my mind if it's possible to move onPut to be\r\n> guarded by the connection mutex. I'll take a look when I have the code\r\n> in front of me, is there anything besides the current implementation\r\n> this is intended for?\r\n>\r\n\r\nI can't remember off-hand without looking whether that'd be safe.  Let's\r\nstick with your current CL which makes it cheaper, but without changing the\r\nlocking rules.\r\n\r\nCould you also add a Benchmark function that runs a dozen some goroutines\r\nhammering on the fake database?  Before and after numbers would be nice,\r\n It would also be useful with \"go test -race\".\r\n\r\nYou could model the test and/or benchmark off of http's\r\nTransportConcurrency test.\r\n",
			"disapproval": false,
			"date": "2013-03-31 21:45:32.275960",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/31 17:42:02, bradfitz wrote:\n> Nice, thanks!\n> \n> Just one documentation nit.\n\nGood spot, I'll certainly fix that.\n\n> I assume you've run this with the race checker, too?\n\nI hadn't doing so now.\n\n> \n> https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go\n> File src/pkg/database/sql/sql.go (right):\n> \n> https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213\n> src/pkg/database/sql/sql.go:213: inUse      bool\n> these two fields are not guarded by the sync.Mutex three lines up, but by db.mu,\n> correct?\n> \n> I would add a blank line, then a comment line saying // guarded by db.mu\n> and then list the two fields.\n\nYep. Will take a look at the code shortly, and certainly do this as a first step. It's crossing my mind if it's possible to move onPut to be guarded by the connection mutex. I'll take a look when I have the code in front of me, is there anything besides the current implementation this is intended for?",
			"disapproval": false,
			"date": "2013-03-31 21:11:57.971940",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/31 22:56:47, bradfitz wrote:\n> On Sun, Mar 31, 2013 at 3:54 PM, <mailto:raggi@google.com> wrote:\n> \n> > On 2013/03/31 21:45:32, bradfitz wrote:\n> >\n> >  On Sun, Mar 31, 2013 at 2:11 PM, <mailto:raggi@google.com> wrote:\n> >>\n> >\n> >  > On 2013/03/31 17:42:02, bradfitz wrote:\n> >> >\n> >> >> Nice, thanks!\n> >> >>\n> >> >\n> >> >  Just one documentation nit.\n> >> >>\n> >> >\n> >> > Good spot, I'll certainly fix that.\n> >> >\n> >> >\n> >> >  I assume you've run this with the race checker, too?\n> >> >>\n> >> >\n> >> > I hadn't doing so now.\n> >> >\n> >> >\n> >> >\n> >> >\n> >> > https://codereview.appspot.****com/8092045/diff/6001/src/pkg/****\n> >> >\n> >>\n> >\n> > database/sql/sql.go<https://**codereview.appspot.com/**\n> >\n> 8092045/diff/6001/src/pkg/**database/sql/sql.go<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go>\n> > >\n> >\n> >> >\n> >> >> File src/pkg/database/sql/sql.go (right):\n> >> >>\n> >> >\n> >> >\n> >> > https://codereview.appspot.****com/8092045/diff/6001/src/pkg/****\n> >> >\n> >>\n> >\n> > database/sql/sql.go#**newcode213<https://codereview.**\n> >\n> appspot.com/8092045/diff/6001/**src/pkg/database/sql/sql.go#**newcode213<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213>\n> > >\n> >\n> >> >\n> >> >> src/pkg/database/sql/sql.go:****213: inUse      bool\n> >>\n> >> >> these two fields are not guarded by the sync.Mutex three lines up,\n> >>\n> > but\n> >\n> >> >>\n> >> > by db.mu,\n> >> >\n> >> >> correct?\n> >> >>\n> >> >\n> >> >  I would add a blank line, then a comment line saying // guarded by\n> >> >>\n> >> > db.mu\n> >> >\n> >> >> and then list the two fields.\n> >> >>\n> >> >\n> >> > Yep. Will take a look at the code shortly, and certainly do this as\n> >>\n> > a\n> >\n> >> > first step. It's crossing my mind if it's possible to move onPut to\n> >>\n> > be\n> >\n> >> > guarded by the connection mutex. I'll take a look when I have the\n> >>\n> > code\n> >\n> >> > in front of me, is there anything besides the current implementation\n> >> > this is intended for?\n> >> >\n> >>\n> >\n> >  I can't remember off-hand without looking whether that'd be safe.\n> >>\n> > Let's\n> >\n> >> stick with your current CL which makes it cheaper, but without\n> >>\n> > changing the\n> >\n> >> locking rules.\n> >>\n> >\n> >  Could you also add a Benchmark function that runs a dozen some\n> >>\n> > goroutines\n> >\n> >> hammering on the fake database?  Before and after numbers would be\n> >>\n> > nice,\n> >\n> >>   It would also be useful with \"go test -race\".\n> >>\n> >\n> >  You could model the test and/or benchmark off of http's\n> >> TransportConcurrency test.\n> >>\n> >\n> > Almost there, two questions:\n> >\n> >  * Is there a way to treat a test like a benchmark for this kind of\n> > purpose? (other than the total time value)\n> >\n> \n> Move common code (at least the inner loop for the benchmark) to a function\n> and call it from both and Test and Benchmark function.\n> \n> You can make a private local interface type for the intersection of\n> *testing.T and *testing.B methods you need in your helper function.\n> \n> \n> >  * Is there a quick trick you use with this mercurial extension to flip\n> > a CL file to and from the CL diff?\n> >\n> \n> hg revert and hg clpatch are diff and patch are what I tend to use.\n\nThanks.\n\nUploaded concurrency test and benchmark changes for your review. Before and after numbers for this test follow:\n\nBenchmarkConcurrency\t     100\t  10152831 ns/op\nBenchmarkConcurrency\t     200\t   9759463 ns/op\n\nI believe this gap increases with concurrency, I selected the same levels as http's TransportConcurrency test as a baseline, which I am happy with.",
			"disapproval": false,
			"date": "2013-03-31 23:21:45.093570",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/31 21:45:32, bradfitz wrote:\n> On Sun, Mar 31, 2013 at 2:11 PM, <mailto:raggi@google.com> wrote:\n> \n> > On 2013/03/31 17:42:02, bradfitz wrote:\n> >\n> >> Nice, thanks!\n> >>\n> >\n> >  Just one documentation nit.\n> >>\n> >\n> > Good spot, I'll certainly fix that.\n> >\n> >\n> >  I assume you've run this with the race checker, too?\n> >>\n> >\n> > I hadn't doing so now.\n> >\n> >\n> >\n> >\n> > https://codereview.appspot.**com/8092045/diff/6001/src/pkg/**\n> >\n> database/sql/sql.go<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go>\n> >\n> >> File src/pkg/database/sql/sql.go (right):\n> >>\n> >\n> >\n> > https://codereview.appspot.**com/8092045/diff/6001/src/pkg/**\n> >\n> database/sql/sql.go#newcode213<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213>\n> >\n> >> src/pkg/database/sql/sql.go:**213: inUse      bool\n> >> these two fields are not guarded by the sync.Mutex three lines up, but\n> >>\n> > by db.mu,\n> >\n> >> correct?\n> >>\n> >\n> >  I would add a blank line, then a comment line saying // guarded by\n> >>\n> > db.mu\n> >\n> >> and then list the two fields.\n> >>\n> >\n> > Yep. Will take a look at the code shortly, and certainly do this as a\n> > first step. It's crossing my mind if it's possible to move onPut to be\n> > guarded by the connection mutex. I'll take a look when I have the code\n> > in front of me, is there anything besides the current implementation\n> > this is intended for?\n> >\n> \n> I can't remember off-hand without looking whether that'd be safe.  Let's\n> stick with your current CL which makes it cheaper, but without changing the\n> locking rules.\n> \n> Could you also add a Benchmark function that runs a dozen some goroutines\n> hammering on the fake database?  Before and after numbers would be nice,\n>  It would also be useful with \"go test -race\".\n> \n> You could model the test and/or benchmark off of http's\n> TransportConcurrency test.\n\nAlmost there, two questions:\n\n * Is there a way to treat a test like a benchmark for this kind of purpose? (other than the total time value)\n * Is there a quick trick you use with this mercurial extension to flip a CL file to and from the CL diff?",
			"disapproval": false,
			"date": "2013-03-31 22:54:38.302180",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 3:54 PM, <raggi@google.com> wrote:\r\n\r\n> On 2013/03/31 21:45:32, bradfitz wrote:\r\n>\r\n>  On Sun, Mar 31, 2013 at 2:11 PM, <mailto:raggi@google.com> wrote:\r\n>>\r\n>\r\n>  > On 2013/03/31 17:42:02, bradfitz wrote:\r\n>> >\r\n>> >> Nice, thanks!\r\n>> >>\r\n>> >\r\n>> >  Just one documentation nit.\r\n>> >>\r\n>> >\r\n>> > Good spot, I'll certainly fix that.\r\n>> >\r\n>> >\r\n>> >  I assume you've run this with the race checker, too?\r\n>> >>\r\n>> >\r\n>> > I hadn't doing so now.\r\n>> >\r\n>> >\r\n>> >\r\n>> >\r\n>> > https://codereview.appspot.****com/8092045/diff/6001/src/pkg/****\r\n>> >\r\n>>\r\n>\r\n> database/sql/sql.go<https://**codereview.appspot.com/**\r\n> 8092045/diff/6001/src/pkg/**database/sql/sql.go<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go>\r\n> >\r\n>\r\n>> >\r\n>> >> File src/pkg/database/sql/sql.go (right):\r\n>> >>\r\n>> >\r\n>> >\r\n>> > https://codereview.appspot.****com/8092045/diff/6001/src/pkg/****\r\n>> >\r\n>>\r\n>\r\n> database/sql/sql.go#**newcode213<https://codereview.**\r\n> appspot.com/8092045/diff/6001/**src/pkg/database/sql/sql.go#**newcode213<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213>\r\n> >\r\n>\r\n>> >\r\n>> >> src/pkg/database/sql/sql.go:****213: inUse      bool\r\n>>\r\n>> >> these two fields are not guarded by the sync.Mutex three lines up,\r\n>>\r\n> but\r\n>\r\n>> >>\r\n>> > by db.mu,\r\n>> >\r\n>> >> correct?\r\n>> >>\r\n>> >\r\n>> >  I would add a blank line, then a comment line saying // guarded by\r\n>> >>\r\n>> > db.mu\r\n>> >\r\n>> >> and then list the two fields.\r\n>> >>\r\n>> >\r\n>> > Yep. Will take a look at the code shortly, and certainly do this as\r\n>>\r\n> a\r\n>\r\n>> > first step. It's crossing my mind if it's possible to move onPut to\r\n>>\r\n> be\r\n>\r\n>> > guarded by the connection mutex. I'll take a look when I have the\r\n>>\r\n> code\r\n>\r\n>> > in front of me, is there anything besides the current implementation\r\n>> > this is intended for?\r\n>> >\r\n>>\r\n>\r\n>  I can't remember off-hand without looking whether that'd be safe.\r\n>>\r\n> Let's\r\n>\r\n>> stick with your current CL which makes it cheaper, but without\r\n>>\r\n> changing the\r\n>\r\n>> locking rules.\r\n>>\r\n>\r\n>  Could you also add a Benchmark function that runs a dozen some\r\n>>\r\n> goroutines\r\n>\r\n>> hammering on the fake database?  Before and after numbers would be\r\n>>\r\n> nice,\r\n>\r\n>>   It would also be useful with \"go test -race\".\r\n>>\r\n>\r\n>  You could model the test and/or benchmark off of http's\r\n>> TransportConcurrency test.\r\n>>\r\n>\r\n> Almost there, two questions:\r\n>\r\n>  * Is there a way to treat a test like a benchmark for this kind of\r\n> purpose? (other than the total time value)\r\n>\r\n\r\nMove common code (at least the inner loop for the benchmark) to a function\r\nand call it from both and Test and Benchmark function.\r\n\r\nYou can make a private local interface type for the intersection of\r\n*testing.T and *testing.B methods you need in your helper function.\r\n\r\n\r\n>  * Is there a quick trick you use with this mercurial extension to flip\r\n> a CL file to and from the CL diff?\r\n>\r\n\r\nhg revert and hg clpatch are diff and patch are what I tend to use.\r\n",
			"disapproval": false,
			"date": "2013-03-31 22:56:47.506350",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nSorry, I missed your follow-up earlier and just found this again cleaning\r\nmy inbox.\r\n\r\n\r\n\r\nOn Sun, Mar 31, 2013 at 4:21 PM, <raggi@google.com> wrote:\r\n\r\n> On 2013/03/31 22:56:47, bradfitz wrote:\r\n>\r\n>  On Sun, Mar 31, 2013 at 3:54 PM, <mailto:raggi@google.com> wrote:\r\n>>\r\n>\r\n>  > On 2013/03/31 21:45:32, bradfitz wrote:\r\n>> >\r\n>> >  On Sun, Mar 31, 2013 at 2:11 PM, <mailto:raggi@google.com> wrote:\r\n>> >>\r\n>> >\r\n>> >  > On 2013/03/31 17:42:02, bradfitz wrote:\r\n>> >> >\r\n>> >> >> Nice, thanks!\r\n>> >> >>\r\n>> >> >\r\n>> >> >  Just one documentation nit.\r\n>> >> >>\r\n>> >> >\r\n>> >> > Good spot, I'll certainly fix that.\r\n>> >> >\r\n>> >> >\r\n>> >> >  I assume you've run this with the race checker, too?\r\n>> >> >>\r\n>> >> >\r\n>> >> > I hadn't doing so now.\r\n>> >> >\r\n>> >> >\r\n>> >> >\r\n>> >> >\r\n>> >> > https://codereview.appspot.******com/8092045/diff/6001/src/**\r\n>> pkg/****\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> > database/sql/sql.go<https://****codereview.appspot.com/**<http://codereview.appspot.com/**>\r\n>> >\r\n>>\r\n>\r\n> 8092045/diff/6001/src/pkg/****database/sql/sql.go<https://**\r\n> codereview.appspot.com/**8092045/diff/6001/src/pkg/**database/sql/sql.go<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go>\r\n> >\r\n>\r\n>> > >\r\n>> >\r\n>> >> >\r\n>> >> >> File src/pkg/database/sql/sql.go (right):\r\n>> >> >>\r\n>> >> >\r\n>> >> >\r\n>> >> > https://codereview.appspot.******com/8092045/diff/6001/src/**\r\n>> pkg/****\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> > database/sql/sql.go#****newcode213<https://codereview.****\r\n>> >\r\n>>\r\n>\r\n> appspot.com/8092045/diff/6001/****src/pkg/database/sql/sql.go#**\r\n> **newcode213<http://appspot.com/8092045/diff/6001/**src/pkg/database/sql/sql.go#**newcode213>\r\n> <https://**codereview.appspot.com/**8092045/diff/6001/src/pkg/**\r\n> database/sql/sql.go#newcode213<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213>\r\n> **>\r\n>\r\n>> > >\r\n>> >\r\n>> >> >\r\n>> >> >> src/pkg/database/sql/sql.go:******213: inUse      bool\r\n>>\r\n>> >>\r\n>> >> >> these two fields are not guarded by the sync.Mutex three lines\r\n>>\r\n> up,\r\n>\r\n>> >>\r\n>> > but\r\n>> >\r\n>> >> >>\r\n>> >> > by db.mu,\r\n>> >> >\r\n>> >> >> correct?\r\n>> >> >>\r\n>> >> >\r\n>> >> >  I would add a blank line, then a comment line saying // guarded\r\n>>\r\n> by\r\n>\r\n>> >> >>\r\n>> >> > db.mu\r\n>> >> >\r\n>> >> >> and then list the two fields.\r\n>> >> >>\r\n>> >> >\r\n>> >> > Yep. Will take a look at the code shortly, and certainly do this\r\n>>\r\n> as\r\n>\r\n>> >>\r\n>> > a\r\n>> >\r\n>> >> > first step. It's crossing my mind if it's possible to move onPut\r\n>>\r\n> to\r\n>\r\n>> >>\r\n>> > be\r\n>> >\r\n>> >> > guarded by the connection mutex. I'll take a look when I have the\r\n>> >>\r\n>> > code\r\n>> >\r\n>> >> > in front of me, is there anything besides the current\r\n>>\r\n> implementation\r\n>\r\n>> >> > this is intended for?\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> >  I can't remember off-hand without looking whether that'd be safe.\r\n>> >>\r\n>> > Let's\r\n>> >\r\n>> >> stick with your current CL which makes it cheaper, but without\r\n>> >>\r\n>> > changing the\r\n>> >\r\n>> >> locking rules.\r\n>> >>\r\n>> >\r\n>> >  Could you also add a Benchmark function that runs a dozen some\r\n>> >>\r\n>> > goroutines\r\n>> >\r\n>> >> hammering on the fake database?  Before and after numbers would be\r\n>> >>\r\n>> > nice,\r\n>> >\r\n>> >>   It would also be useful with \"go test -race\".\r\n>> >>\r\n>> >\r\n>> >  You could model the test and/or benchmark off of http's\r\n>> >> TransportConcurrency test.\r\n>> >>\r\n>> >\r\n>> > Almost there, two questions:\r\n>> >\r\n>> >  * Is there a way to treat a test like a benchmark for this kind of\r\n>> > purpose? (other than the total time value)\r\n>> >\r\n>>\r\n>\r\n>  Move common code (at least the inner loop for the benchmark) to a\r\n>>\r\n> function\r\n>\r\n>> and call it from both and Test and Benchmark function.\r\n>>\r\n>\r\n>  You can make a private local interface type for the intersection of\r\n>> *testing.T and *testing.B methods you need in your helper function.\r\n>>\r\n>\r\n>\r\n>  >  * Is there a quick trick you use with this mercurial extension to\r\n>>\r\n> flip\r\n>\r\n>> > a CL file to and from the CL diff?\r\n>> >\r\n>>\r\n>\r\n>  hg revert and hg clpatch are diff and patch are what I tend to use.\r\n>>\r\n>\r\n> Thanks.\r\n>\r\n> Uploaded concurrency test and benchmark changes for your review. Before\r\n> and after numbers for this test follow:\r\n>\r\n> BenchmarkConcurrency         100          10152831 ns/op\r\n> BenchmarkConcurrency         200           9759463 ns/op\r\n>\r\n> I believe this gap increases with concurrency, I selected the same\r\n> levels as http's TransportConcurrency test as a baseline, which I am\r\n> happy with.\r\n>\r\n> https://codereview.appspot.**com/8092045/<https://codereview.appspot.com/8092045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-03 17:58:29.146380",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8153882a36e8 ***\n\ndatabase/sql: improve standard deviation response time under high concurrency\n\nSee https://github.com/raggi/go-and-java for runtime benchmark.\n\nThe patch reduces the amount of map key search, moving connection oriented\nvariables onto the connection structs.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8092045\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-04-03 18:13:44.883050",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No worries at all, happens to me all the time.\r\n\r\nThanks for the review comments, assistance, etc.\r\n\r\n\r\nOn Wed, Apr 3, 2013 at 10:58 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> LGTM\r\n>\r\n> Sorry, I missed your follow-up earlier and just found this again cleaning\r\n> my inbox.\r\n>\r\n>\r\n>\r\n> On Sun, Mar 31, 2013 at 4:21 PM, <raggi@google.com> wrote:\r\n>\r\n>> On 2013/03/31 22:56:47, bradfitz wrote:\r\n>>\r\n>>  On Sun, Mar 31, 2013 at 3:54 PM, <mailto:raggi@google.com> wrote:\r\n>>>\r\n>>\r\n>>  > On 2013/03/31 21:45:32, bradfitz wrote:\r\n>>> >\r\n>>> >  On Sun, Mar 31, 2013 at 2:11 PM, <mailto:raggi@google.com> wrote:\r\n>>> >>\r\n>>> >\r\n>>> >  > On 2013/03/31 17:42:02, bradfitz wrote:\r\n>>> >> >\r\n>>> >> >> Nice, thanks!\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> >  Just one documentation nit.\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> > Good spot, I'll certainly fix that.\r\n>>> >> >\r\n>>> >> >\r\n>>> >> >  I assume you've run this with the race checker, too?\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> > I hadn't doing so now.\r\n>>> >> >\r\n>>> >> >\r\n>>> >> >\r\n>>> >> >\r\n>>> >> > https://codereview.appspot.******com/8092045/diff/6001/src/**\r\n>>> pkg/****\r\n>>> >> >\r\n>>> >>\r\n>>> >\r\n>>> > database/sql/sql.go<https://****codereview.appspot.com/**<http://codereview.appspot.com/**>\r\n>>> >\r\n>>>\r\n>>\r\n>> 8092045/diff/6001/src/pkg/****database/sql/sql.go<https://**\r\n>> codereview.appspot.com/**8092045/diff/6001/src/pkg/**database/sql/sql.go<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go>\r\n>> >\r\n>>\r\n>>> > >\r\n>>> >\r\n>>> >> >\r\n>>> >> >> File src/pkg/database/sql/sql.go (right):\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> >\r\n>>> >> > https://codereview.appspot.******com/8092045/diff/6001/src/**\r\n>>> pkg/****\r\n>>> >> >\r\n>>> >>\r\n>>> >\r\n>>> > database/sql/sql.go#****newcode213<https://codereview.****\r\n>>> >\r\n>>>\r\n>>\r\n>> appspot.com/8092045/diff/6001/****src/pkg/database/sql/sql.go#**\r\n>> **newcode213<http://appspot.com/8092045/diff/6001/**src/pkg/database/sql/sql.go#**newcode213>\r\n>> <https://**codereview.appspot.com/**8092045/diff/6001/src/pkg/**\r\n>> database/sql/sql.go#newcode213<https://codereview.appspot.com/8092045/diff/6001/src/pkg/database/sql/sql.go#newcode213>\r\n>> **>\r\n>>\r\n>>> > >\r\n>>> >\r\n>>> >> >\r\n>>> >> >> src/pkg/database/sql/sql.go:******213: inUse      bool\r\n>>>\r\n>>> >>\r\n>>> >> >> these two fields are not guarded by the sync.Mutex three lines\r\n>>>\r\n>> up,\r\n>>\r\n>>> >>\r\n>>> > but\r\n>>> >\r\n>>> >> >>\r\n>>> >> > by db.mu,\r\n>>> >> >\r\n>>> >> >> correct?\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> >  I would add a blank line, then a comment line saying // guarded\r\n>>>\r\n>> by\r\n>>\r\n>>> >> >>\r\n>>> >> > db.mu\r\n>>> >> >\r\n>>> >> >> and then list the two fields.\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> > Yep. Will take a look at the code shortly, and certainly do this\r\n>>>\r\n>> as\r\n>>\r\n>>> >>\r\n>>> > a\r\n>>> >\r\n>>> >> > first step. It's crossing my mind if it's possible to move onPut\r\n>>>\r\n>> to\r\n>>\r\n>>> >>\r\n>>> > be\r\n>>> >\r\n>>> >> > guarded by the connection mutex. I'll take a look when I have the\r\n>>> >>\r\n>>> > code\r\n>>> >\r\n>>> >> > in front of me, is there anything besides the current\r\n>>>\r\n>> implementation\r\n>>\r\n>>> >> > this is intended for?\r\n>>> >> >\r\n>>> >>\r\n>>> >\r\n>>> >  I can't remember off-hand without looking whether that'd be safe.\r\n>>> >>\r\n>>> > Let's\r\n>>> >\r\n>>> >> stick with your current CL which makes it cheaper, but without\r\n>>> >>\r\n>>> > changing the\r\n>>> >\r\n>>> >> locking rules.\r\n>>> >>\r\n>>> >\r\n>>> >  Could you also add a Benchmark function that runs a dozen some\r\n>>> >>\r\n>>> > goroutines\r\n>>> >\r\n>>> >> hammering on the fake database?  Before and after numbers would be\r\n>>> >>\r\n>>> > nice,\r\n>>> >\r\n>>> >>   It would also be useful with \"go test -race\".\r\n>>> >>\r\n>>> >\r\n>>> >  You could model the test and/or benchmark off of http's\r\n>>> >> TransportConcurrency test.\r\n>>> >>\r\n>>> >\r\n>>> > Almost there, two questions:\r\n>>> >\r\n>>> >  * Is there a way to treat a test like a benchmark for this kind of\r\n>>> > purpose? (other than the total time value)\r\n>>> >\r\n>>>\r\n>>\r\n>>  Move common code (at least the inner loop for the benchmark) to a\r\n>>>\r\n>> function\r\n>>\r\n>>> and call it from both and Test and Benchmark function.\r\n>>>\r\n>>\r\n>>  You can make a private local interface type for the intersection of\r\n>>> *testing.T and *testing.B methods you need in your helper function.\r\n>>>\r\n>>\r\n>>\r\n>>  >  * Is there a quick trick you use with this mercurial extension to\r\n>>>\r\n>> flip\r\n>>\r\n>>> > a CL file to and from the CL diff?\r\n>>> >\r\n>>>\r\n>>\r\n>>  hg revert and hg clpatch are diff and patch are what I tend to use.\r\n>>>\r\n>>\r\n>> Thanks.\r\n>>\r\n>> Uploaded concurrency test and benchmark changes for your review. Before\r\n>> and after numbers for this test follow:\r\n>>\r\n>> BenchmarkConcurrency         100          10152831 ns/op\r\n>> BenchmarkConcurrency         200           9759463 ns/op\r\n>>\r\n>> I believe this gap increases with concurrency, I selected the same\r\n>> levels as http's TransportConcurrency test as a baseline, which I am\r\n>> happy with.\r\n>>\r\n>> https://codereview.appspot.**com/8092045/<https://codereview.appspot.com/8092045/>\r\n>>\r\n>\r\n>\r\n\r\n\r\n-- \r\nJames Tucker | Staff Software Engineer | raggi@google.com | 650-704-8566\r\n",
			"disapproval": false,
			"date": "2013-04-03 19:20:24.875110",
			"approval": false
		}
	],
	"owner_email": "raggi@google.com",
	"private": false,
	"base_url": "",
	"owner": "raggi",
	"subject": "code review 8092045: database/sql: improve standard deviation response time ...",
	"created": "2013-03-31 17:06:23.566680",
	"patchsets": [
		1,
		2001,
		5001,
		6001,
		11001,
		16001,
		19001,
		21001
	],
	"modified": "2013-04-05 05:02:45.181550",
	"closed": true,
	"issue": 8092045
}