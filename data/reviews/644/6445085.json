{
	"description": "cmd/ld: consistent binary for cgo programs\nWe use pkg path instead of file name (which contains $WORK) in section symbols names.",
	"cc": [
		"golang-dev@googlegroups.com",
		"fullung@gmail.com",
		"rsc@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nThanks very much for the work so far.\r\n\r\nOn Tuesday, August 7, 2012 4:28:14 PM UTC+2, minux wrote:\r\n>\r\n> what do you think? personally, i don't like the current approach, but each \r\n> alternative\r\n> has its own downside, which i can't decide.\r\n>\r\n\r\nA few random thoughts. Maybe it helps:\r\n\r\nA potential addition/alternative is a modification to the go tool to add an \r\noption so that it doesn't squirrel away generated code in a random \r\ndirectory that gets deleted, but instead puts it in a well-defined place \r\nlike the Makefiles of old.\r\n\r\nI get the idea that this will give more consistent debuginfo. When we \r\nattempted coverage reports with gccgo a few months before, the mix of \r\n\"real\" and \"temporary\" sources lead to a few strange artifacts in the \r\nreports that you don't see with C.\r\n\r\nIt would be really nice if Go binaries could interoperate properly with \r\nideas like Fedora's debuginfos, which interacts with perf and other tools.\r\n\r\nThe use case looks something like this:\r\n\r\n1. Install foo.rpm\r\n2. Run the foo service.\r\n3. See from top that foo is very busy for some reason\r\n4. Run perf top\r\n5. See that foo is using a lot of CPU, but you can't see exactly what it's \r\ndoing\r\n6. Install foo-debuginfo.rpm\r\n7. Run perf top again.\r\n8. See exactly what foo is doing\r\n\r\nperf is really awesome for profiling a whole system running many \r\ninteracting Go processes.\r\n\r\nI still want to look into exactly what the RPM build process does with \r\ndebuginfos, because even though you can build in $HOME/rpmbuild/BUILD/..., \r\nthe -debuginfo rpm always puts sources under /usr/src and probably does \r\nsome rewriting of the binaries somewhere so that this works.\r\n\r\nUseful reading:\r\n\r\nhttps://fedoraproject.org/wiki/StackTraces\r\n\r\nRegards\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2012-08-08 05:52:34.653010",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-07 14:18:36.020390",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nOn Thu, Aug 9, 2012 at 7:41 AM, minux <minux.ma@gmail.com> wrote:\r\n> On Wed, Aug 8, 2012 at 1:52 PM, Albert Strasheim <fullung@gmail.com> wrote:\r\n>> On Tuesday, August 7, 2012 4:28:14 PM UTC+2, minux wrote:\r\n>>> what do you think? personally, i don't like the current approach, but\r\n>>> each alternative\r\n>>> has its own downside, which i can't decide.\r\n>> A few random thoughts. Maybe it helps:\r\n>> A potential addition/alternative is a modification to the go tool to add\r\n>> an option so that it doesn't squirrel away generated code in a random\r\n>> directory that gets deleted, but instead puts it in a well-defined place\r\n>> like the Makefiles of old.\r\n> i like this idea, and it's very useful when debugging cgo programs, we just\r\n> need a -notmpdir flag\r\n> to place the WORK directory in the current directory (but go tool currently\r\n> generates a fairly long\r\n> path that resemble the real path of source files, this should be changed to\r\n> make this feature more\r\n> useful).\r\n\r\nSounds like a good plan.\r\n\r\n>> I get the idea that this will give more consistent debuginfo. When we\r\n>> attempted coverage reports with gccgo a few months before, the mix of \"real\"\r\n>> and \"temporary\" sources lead to a few strange artifacts in the reports that\r\n>> you don't see with C.\r\n>> It would be really nice if Go binaries could interoperate properly with\r\n>> ideas like Fedora's debuginfos, which interacts with perf and other tools.\r\n> maybe we just need a flag for the toolchain (ld) to rewrite paths (like what\r\n> -fdebug-prefix-map does for gcc).\r\n\r\nI suspect RPM packaging does some rewriting using elfutils or something.\r\n\r\nThe script that runs towards the end of the build is this one:\r\n\r\nhttp://rpm.org/gitweb?p=rpm.git;a=blob;f=scripts/find-debuginfo.sh\r\n\r\nMore interesting reading on work in progress in this area in Fedora:\r\n\r\nhttps://fedoraproject.org/wiki/Releases/FeatureBuildId\r\n\r\nRegards\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2012-08-09 07:05:37.713150",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL is not complete, please suggest better ways to do the same.\r\n\r\nThis CL makes building the same (cgo) source code always producing identical\r\nbinaries on Linux/amd64.\r\n\r\nTwo involved problems:\r\n1. debug info. generated by 'gcc -g' will contain path info. this is solved\r\nby -fdebug-prefix-map\r\nsuggested by iant (note this flag is only supported in newer version of\r\ngcc, and unfortunately,\r\ngcc 4.2.1 doesn't support it)\r\n2. our ld generates section symbols of the form \"filename.a(file.o)\", which\r\ncontains the\r\ntemporary path. I introduced -Y flag to ld to help stripping the $WORK part\r\nfrom filename.a\r\n(just like the -P flag to pack).\r\n\r\nObviously, problem 2 has at least other solutions.\r\n1. we can simply remove path from section symbol.\r\n2. we can remove section symbol from symbol table of the final binary\r\n\r\nwhat do you think? personally, i don't like the current approach, but each\r\nalternative\r\nhas its own downside, which i can't decide.\r\n",
			"disapproval": false,
			"date": "2012-08-07 14:28:35.399100",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 8, 2012 at 1:52 PM, Albert Strasheim <fullung@gmail.com> wrote:\r\n\r\n> On Tuesday, August 7, 2012 4:28:14 PM UTC+2, minux wrote:\r\n>>\r\n>> what do you think? personally, i don't like the current approach, but\r\n>> each alternative\r\n>> has its own downside, which i can't decide.\r\n>>\r\n>\r\n> A few random thoughts. Maybe it helps:\r\n>\r\n> A potential addition/alternative is a modification to the go tool to add\r\n> an option so that it doesn't squirrel away generated code in a random\r\n> directory that gets deleted, but instead puts it in a well-defined place\r\n> like the Makefiles of old.\r\n>\r\ni like this idea, and it's very useful when debugging cgo programs, we just\r\nneed a -notmpdir flag\r\nto place the WORK directory in the current directory (but go tool currently\r\ngenerates a fairly long\r\npath that resemble the real path of source files, this should be changed to\r\nmake this feature more\r\nuseful).\r\n\r\n>\r\n> I get the idea that this will give more consistent debuginfo. When we\r\n> attempted coverage reports with gccgo a few months before, the mix of\r\n> \"real\" and \"temporary\" sources lead to a few strange artifacts in the\r\n> reports that you don't see with C.\r\n>\r\n> It would be really nice if Go binaries could interoperate properly with\r\n> ideas like Fedora's debuginfos, which interacts with perf and other tools.\r\n>\r\nmaybe we just need a flag for the toolchain (ld) to rewrite paths (like\r\nwhat -fdebug-prefix-map does for gcc).\r\n",
			"disapproval": false,
			"date": "2012-08-09 05:41:45.404970",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 7, 2012 at 10:28 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> This CL is not complete, please suggest better ways to do the same.\r\n>\r\n> This CL makes building the same (cgo) source code always producing\r\n> identical\r\n> binaries on Linux/amd64.\r\n>\r\n> Two involved problems:\r\n> 1. debug info. generated by 'gcc -g' will contain path info. this is\r\n> solved by -fdebug-prefix-map\r\n> suggested by iant (note this flag is only supported in newer version of\r\n> gcc, and unfortunately,\r\n> gcc 4.2.1 doesn't support it)\r\n> 2. our ld generates section symbols of the form \"filename.a(file.o)\",\r\n> which contains the\r\n> temporary path. I introduced -Y flag to ld to help stripping the $WORK\r\n> part from filename.a\r\n> (just like the -P flag to pack).\r\n>\r\n> Obviously, problem 2 has at least other solutions.\r\n> 1. we can simply remove path from section symbol.\r\n> 2. we can remove section symbol from symbol table of the final binary\r\n>\r\n> what do you think? personally, i don't like the current approach, but each\r\n> alternative\r\n> has its own downside, which i can't decide.\r\n>\r\nping? any advices about which route is better?\r\n",
			"disapproval": false,
			"date": "2012-08-20 16:23:50.303760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> Two involved problems:\r\n>> 1. debug info. generated by 'gcc -g' will contain path info. this is\r\n>> solved by -fdebug-prefix-map\r\n>> suggested by iant (note this flag is only supported in newer version of\r\n>> gcc, and unfortunately,\r\n>> gcc 4.2.1 doesn't support it)\r\n\r\nSounds like -fdebug-prefix-map is really our only choice, unless Ian\r\nhas another trick up his sleeve.\r\n\r\n>> 2. our ld generates section symbols of the form \"filename.a(file.o)\",\r\n>> which contains the\r\n>> temporary path. I introduced -Y flag to ld to help stripping the $WORK\r\n>> part from filename.a\r\n>> (just like the -P flag to pack).\r\n\r\nThese seem fine. I don't think there is a -P flag in the linker right\r\nnow. Should we use P instead of -Y for consistency with pack?\r\n\r\n>> Obviously, problem 2 has at least other solutions.\r\n>> 1. we can simply remove path from section symbol.\r\n>> 2. we can remove section symbol from symbol table of the final binary\r\n\r\nI would prefer not to do #1, because I am worried about symbols colliding.\r\n#2 is probably fine but I am unsure about the implications.\r\n\r\nThere might be a #3: only use the import path, not the full path to\r\nthe archive. I think we should know the import path at that point, no?\r\nThen we'd have runtime/cgo(x.o) instead of\r\n/usr/rsc/go/runtime/cgo.a(x.o).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-11 01:08:30.532040",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/11 01:08:30, rsc wrote:\n> >> Two involved problems:\n> >> 1. debug info. generated by 'gcc -g' will contain path info. this is\n> >> solved by -fdebug-prefix-map\n> >> suggested by iant (note this flag is only supported in newer version of\n> >> gcc, and unfortunately,\n> >> gcc 4.2.1 doesn't support it)\n> \n> Sounds like -fdebug-prefix-map is really our only choice, unless Ian\n> has another trick up his sleeve.\n\nThis is GCC: there is always another trick.  If you set the PWD environment variable to an absolute path that resolves to the current directory, it will be used instead of the real path of the current directory.  So one standard trick to generate the same objects while compiling in a temporary directory on GNU/Linux is to set PWD=/proc/self/cwd.\n\nThe -fdebug-prefix-map option was added in GCC 4.3, by the way.",
			"disapproval": false,
			"date": "2012-09-11 03:54:09.911240",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nReverted all gcc related changes, seems unnecessary now.\nwe cd to $WORK prior to use gcc, and gcc uses relative paths\nin debugging infos, so $WORK won't appear in dwarf info.",
			"disapproval": false,
			"date": "2012-09-17 13:01:13.434260",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6445085/diff/12009/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/6445085/diff/12009/src/cmd/go/build.go#newcode1099\nsrc/cmd/go/build.go:1099: // we can generate object files that doesn't contain our $WORK\ns/doesn't/don't/\n\nhttps://codereview.appspot.com/6445085/diff/12009/src/cmd/go/build.go#newcode1101\nsrc/cmd/go/build.go:1101: os.Setenv(\"PWD\", \"/WORK\")\nDoes this work?  GCC will check the PWD environment variable and only use it if it does in fact name the current directory.  Does the WORK directory exist?",
			"disapproval": false,
			"date": "2012-09-16 19:26:58.200930",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n\"Well that was incredibly easy!\" - http://www.youtube.com/watch?v=1yqVD0swvWU",
			"disapproval": false,
			"date": "2012-09-17 20:33:28.722300",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Sep 11, 2012 at 9:08 AM, Russ Cox <rsc@golang.org> wrote:\r\n>\r\n>  >> 2. our ld generates section symbols of the form \"filename.a(file.o)\",\r\n> >> which contains the\r\n> >> temporary path. I introduced -Y flag to ld to help stripping the $WORK\r\n> >> part from filename.a\r\n> >> (just like the -P flag to pack).\r\n>\r\n> These seem fine. I don't think there is a -P flag in the linker right\r\n> now. Should we use P instead of -Y for consistency with pack?\r\n>\r\n-P is only used by 5l\r\nhttp://tip.golang.org/src/cmd/5l/asm.c#L1118\r\n\r\n>\r\n> >> Obviously, problem 2 has at least other solutions.\r\n> >> 1. we can simply remove path from section symbol.\r\n> >> 2. we can remove section symbol from symbol table of the final binary\r\n>\r\n> I would prefer not to do #1, because I am worried about symbols colliding.\r\n> #2 is probably fine but I am unsure about the implications.\r\n>\r\n> There might be a #3: only use the import path, not the full path to\r\n> the archive. I think we should know the import path at that point, no?\r\n> Then we'd have runtime/cgo(x.o) instead of\r\n> /usr/rsc/go/runtime/cgo.a(x.o).\r\n>\r\nthis is a good idea, then we don't need to add a new ld option.\r\n",
			"disapproval": false,
			"date": "2012-09-16 18:37:18.179360",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nOn Tue, Sep 11, 2012 at 11:54 AM, <iant@golang.org> wrote:\r\n\r\n> Sounds like -fdebug-prefix-map is really our only choice, unless Ian\r\n>> has another trick up his sleeve.\r\n>>\r\n>\r\n> This is GCC: there is always another trick.  If you set the PWD\r\n> environment variable to an absolute path that resolves to the current\r\n> directory, it will be used instead of the real path of the current\r\n> directory.  So one standard trick to generate the same objects while\r\n> compiling in a temporary directory on GNU/Linux is to set\r\n> PWD=/proc/self/cwd.\r\n>\r\nGreat. This tricks works for 4.2.1, I've tested this CL on Darwin/amd64,\r\nDarwin/386, Linux/amd64 and Linux/386, and finally we can build the\r\nsame binary misc/cgo/test on the same machine.\r\n",
			"disapproval": false,
			"date": "2012-09-16 18:42:12.800830",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "GCC will normally call getcwd to get the current directory, which will normally give you an absolute path.  This can be overridden by a #line directive.  This only affects the debug info, so it only matters if you compile with -g.",
			"disapproval": false,
			"date": "2012-09-16 20:30:54.844330",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Monday, September 17, 2012, wrote:\r\n>\r\n> https://codereview.appspot.**com/6445085/diff/12009/src/**\r\n> cmd/go/build.go#newcode1101<https://codereview.appspot.com/6445085/diff/12009/src/cmd/go/build.go#newcode1101>\r\n> src/cmd/go/build.go:1101: os.Setenv(\"PWD\", \"/WORK\")\r\n> Does this work?  GCC will check the PWD environment variable and only\r\n> use it if it does in fact name the current directory.  Does the WORK\r\n> directory exist?\r\n>\r\nNo, it doesn't. And i have found out we can build identical cgo binary even\r\nwithout this change.\r\nSeems gcc already generate relative path for dwarf info. Is this true?\r\nIf it is, we only need to fix the section symbol thing.\r\n",
			"disapproval": false,
			"date": "2012-09-16 20:00:31.203690",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e24d688078cd ***\n\ncmd/ld: consistent binary for cgo programs\nWe use pkg path instead of file name (which contains $WORK) in section symbols names.\n\nR=golang-dev, fullung, rsc, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6445085",
			"disapproval": false,
			"date": "2012-09-19 16:19:52.808120",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6445085: cmd/6l, cmd/ld, cmd/go: consistent binary for cgo programs",
	"created": "2012-08-07 14:15:56.052030",
	"patchsets": [
		1,
		2001,
		9002,
		13001,
		9003,
		15009,
		9004,
		12009,
		10002,
		21001,
		24001,
		26001,
		29001
	],
	"modified": "2012-09-19 16:19:56.582190",
	"closed": true,
	"issue": 6445085
}