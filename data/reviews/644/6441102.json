{
	"description": "spec: clarify evaluation order\n\nFixes issue 3852.",
	"cc": [
		"r@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-03 21:59:56.846340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I know this is nitpicky, but I think the new text is making implicit promises about things that are not strictly true.\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode2099\ndoc/go_spec.html:2099: The expressions in the element list are\nThis sentence implies that there is an expressions in the element list are actually evaluated in some order, but that's not true. If the element list is x + y, f(), it is legal to evaluate x before f() and y after, and that doesn't correspond to any ordering of the expression list.\nI would rather leave this out.\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode3699\ndoc/go_spec.html:3699: Unless specified otherwise, when evaluating the <a href=\"#Operands\">operands</a>\nWhere is the possible 'otherwise'? It would be much better to say what the exceptions are. As written I have to read the rest of the spec to find them. The only exception to this rule that I can think of is the way select cases get evaluated, but those are not part of 'assignment, expression, or return statement' so I think that's fine. You might be able to just not say 'Unless specified otherwise'.\n\nThis sentence also, like the one above, shifts the focus from subexpressions to lists of expressions, which I think is misleading. The old text did not mention lists at all, and I think that is preferable.\n\nI think the only case that was missing from the old text was return statements, so maybe just replace \"assignment or expression\" with \"assignment, expression, or return statement\" and remove this explicit enumeration of lists.\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode4503\ndoc/go_spec.html:4503: The expressions are <a href=\"#Order_of_evaluation\">evaluated in the usual order</a>.\nAgain this makes it sound like there is an ordering among the expressions, when in fact they're all kind of evaluated simultaneously and the pieces fall wherever.\n\nI'd rather just mention 'or return statement' above and leave this reference out.\n\nThen the only part of the spec that makes claims about order of evaluation is the order of evaluation section.",
			"disapproval": false,
			"date": "2012-08-08 18:32:38.319300",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is still covered in the Assignments section:\r\n\r\n\"The assignment proceeds in two phases. First, the operands of index\r\nexpressions and pointer indirections (including implicit pointer\r\nindirections in selectors) on the left and the expressions on the\r\nright are all evaluated in the usual order. Second, the assignments\r\nare carried out in left-to-right order.\"\r\n\r\nAssignments in this (order of evaluation) section was just one case\r\nnow covered by \"expression lists\".\r\n\r\nThe reason for the \"Unless specified otherwise\" is here because in\r\nexpression switches we also have expression lists in the case clauses,\r\nbut those expressions are evaluated from left to right (as specified\r\nthere).\r\n\r\n- gri\r\n\r\nOn Fri, Aug 3, 2012 at 3:07 PM,  <iant@golang.org> wrote:\r\n>\r\n> http://codereview.appspot.com/6441102/diff/8001/doc/go_spec.html\r\n> File doc/go_spec.html (right):\r\n>\r\n> http://codereview.appspot.com/6441102/diff/8001/doc/go_spec.html#newcode3699\r\n> doc/go_spec.html:3699: Unless specified otherwise, when evaluating the\r\n>\r\n> <a href=\"#Operands\">operands</a>\r\n> You no longer mention assignments here, but we do want to specify that\r\n> the relevant expressions on the LHS of an assignment are evaluated\r\n> before the ones on the RHS.\r\n>\r\n> http://codereview.appspot.com/6441102/\r\n",
			"disapproval": false,
			"date": "2012-08-03 22:14:12.429920",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-08-08 22:13:26.972290",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nAny others?\n\nhttp://codereview.appspot.com/6441102/diff/12003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6441102/diff/12003/doc/go_spec.html#newcode3723\ndoc/go_spec.html:3723: x := []int{a, f()}  // x may be [1, 3] or [2, 3] because the evaluation order between a and f() is not specified\nOn 2012/08/08 21:51:28, r wrote:\n> you can s/ because the/:/ to shorten the line.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-08 22:04:01.825840",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6441102/diff/12003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6441102/diff/12003/doc/go_spec.html#newcode3723\ndoc/go_spec.html:3723: x := []int{a, f()}  // x may be [1, 3] or [2, 3] because the evaluation order between a and f() is not specified\nyou can s/ because the/:/ to shorten the line.",
			"disapproval": false,
			"date": "2012-08-08 21:51:28.408270",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6441102/diff/8001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6441102/diff/8001/doc/go_spec.html#newcode3699\ndoc/go_spec.html:3699: Unless specified otherwise, when evaluating the <a href=\"#Operands\">operands</a>\nYou no longer mention assignments here, but we do want to specify that the relevant expressions on the LHS of an assignment are evaluated before the ones on the RHS.",
			"disapproval": false,
			"date": "2012-08-03 22:07:44.028150",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of August 63, 2012\",\nAugust 63 is confusing, perhaps write October 2.",
			"disapproval": false,
			"date": "2012-08-08 15:37:46.636880",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/08 18:32:38, rsc wrote:\n\n> Where is the possible 'otherwise'?\n\nThe && and || operators are also a case where expressions are not evaluated in strict left-to-right lexical order.\n\nI'm fine with simplicity and trying to keep the \"order of evaluation\" text in a single section.",
			"disapproval": false,
			"date": "2012-08-08 18:59:03.844990",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6beada1bf6c2 ***\n\nspec: clarify evaluation order\n\nFixes issue 3852.\n\nR=r, rsc, iant, ken\nCC=golang-dev\nhttp://codereview.appspot.com/6441102",
			"disapproval": false,
			"date": "2012-08-09 18:50:21.495550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, thanks",
			"disapproval": false,
			"date": "2012-08-09 20:11:07.661140",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of August 63, 2012\",\nOn 2012/08/08 15:37:46, iant wrote:\n> August 63 is confusing, perhaps write October 2.\n\nPrint 3 on top of 6 and you get 8, the correct date. There's a missing backspace.\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode2099\ndoc/go_spec.html:2099: The expressions in the element list are\nOn 2012/08/08 18:32:38, rsc wrote:\n> This sentence implies that there is an expressions in the element list are\n> actually evaluated in some order, but that's not true. If the element list is x\n> + y, f(), it is legal to evaluate x before f() and y after, and that doesn't\n> correspond to any ordering of the expression list.\n> I would rather leave this out.\n\nDone.\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode3699\ndoc/go_spec.html:3699: Unless specified otherwise, when evaluating the <a href=\"#Operands\">operands</a>\nOn 2012/08/08 18:32:38, rsc wrote:\n> Where is the possible 'otherwise'? It would be much better to say what the\n> exceptions are. As written I have to read the rest of the spec to find them. The\n> only exception to this rule that I can think of is the way select cases get\n> evaluated, but those are not part of 'assignment, expression, or return\n> statement' so I think that's fine. You might be able to just not say 'Unless\n> specified otherwise'.\n\nOtherwise is true for select cases but also for logical operations && and ||.\n\nhttp://codereview.appspot.com/6441102/diff/10003/doc/go_spec.html#newcode4503\ndoc/go_spec.html:4503: The expressions are <a href=\"#Order_of_evaluation\">evaluated in the usual order</a>.\nOn 2012/08/08 18:32:38, rsc wrote:\n> Again this makes it sound like there is an ordering among the expressions, when\n> in fact they're all kind of evaluated simultaneously and the pieces fall\n> wherever.\n> \n> I'd rather just mention 'or return statement' above and leave this reference\n> out.\n> \n> Then the only part of the spec that makes claims about order of evaluation is\n> the order of evaluation section.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-08 20:22:41.789240",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6441102: spec: clarify evaluation order",
	"created": "2012-08-03 21:47:56.128470",
	"patchsets": [
		1,
		2001,
		3001,
		5002,
		5003,
		3003,
		7001,
		8001,
		3005,
		10003,
		11002,
		10005,
		12003,
		3007,
		8003,
		11003
	],
	"modified": "2012-08-09 20:11:07.759280",
	"closed": true,
	"issue": 6441102
}