{
	"description": "cmd/go: send output of build and install to stderr\n\n\"go build\" and \"go install\" were mixing stdout and stderr\nfrom the toolchain, then putting it all on stdout. With this\nchange, it stays mixed, and is sent to stderr. Because\nthe toolchain does not create output in a clean compile/install,\nsending all output to stderr makese more sense.\n\nAlso fix test.bash because of \"mktemp: too few X's\nin template `testgo'\" on Linux.\n\nFixes issue 4917.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"adg@golang.org"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"daniel.morsing@gmail.com",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add a test to src/cmd/go/test.bash (you have to run it by hand, it\r\ndoesn't run during all.bash).\r\n",
			"disapproval": false,
			"date": "2013-02-27 16:22:02.962710",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttp://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-27 16:15:09.969850",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about the other tools? Does the output of the 6g etc subprocesses get\r\nsent to stdout or stderr? Or is it first captured by cmd/go and then sent\r\nto stderr?\r\n\r\n\r\nOn 28 February 2013 03:15, <jeff.allen@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> http://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> cmd/go: send output of build and install to stderr\r\n>\r\n> \"go build\" and \"go install\" were mixing stdout and stderr\r\n> from the toolchain, then putting it all on stdout. With this\r\n> change, it stays mixed, and is sent to stderr. Because\r\n> the toolchain does not create output in a clean compile/install,\r\n> sending all output to stderr makese more sense.\r\n>\r\n> Fixes issue 4917.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7393073/<https://codereview.appspot.com/7393073/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/go/build.go\r\n>\r\n>\r\n> Index: src/cmd/go/build.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/build.go\r\n> +++ b/src/cmd/go/build.go\r\n> @@ -391,7 +391,9 @@\r\n>\r\n>  func (b *builder) init() {\r\n>         var err error\r\n> -       b.print = fmt.Print\r\n> +       b.print = func(a ...interface{}) (int, error) {\r\n> +               return fmt.Fprint(os.Stderr, a...)\r\n> +       }\r\n>         b.actionCache = make(map[cacheKey]*action)\r\n>         b.mkdirCache = make(map[string]bool)\r\n>\r\n> @@ -1617,7 +1619,7 @@\r\n>                 // print function to capture the command-line. This\r\n>                 // let's us assign it to $LIBGCC and produce a valid\r\n>                 // buildscript for cgo packages.\r\n> -               b.print = func(a ...interface{}) (n int, err error) {\r\n> +               b.print = func(a ...interface{}) (int, error) {\r\n>                         return fmt.Fprint(&buf, a...)\r\n>                 }\r\n>         }\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-27 21:56:34.865230",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Most tools use main.go:^/func run, which passes through stdout and stderr:  http://tip.golang.org/src/cmd/go/main.go#L352\n\nSo it is the underlying tool itself that decides where to send the output, which seems correct. go vet, for example puts status into on stdout and warnings on stderr. go fmt uses stdout for the formatted program in some cases, and sends errors to stderr. \n\ngo build and go install are special because of parallelization. They gather stdout and stderr mixed into a single bytes.Buffer, then print all the bytes.Buffers out later, currently to stdout. This change makes it go to stderr instead.",
			"disapproval": false,
			"date": "2013-02-28 08:00:24.770680",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay that sound fine to me (for now at least). Please add a test, as Russ\r\nsuggested.\r\n\r\n\r\nOn 28 February 2013 19:00, <jeff.allen@gmail.com> wrote:\r\n\r\n> Most tools use main.go:^/func run, which passes through stdout and\r\n> stderr:  http://tip.golang.org/src/cmd/**go/main.go#L352<http://tip.golang.org/src/cmd/go/main.go#L352>\r\n>\r\n> So it is the underlying tool itself that decides where to send the\r\n> output, which seems correct. go vet, for example puts status into on\r\n> stdout and warnings on stderr. go fmt uses stdout for the formatted\r\n> program in some cases, and sends errors to stderr.\r\n>\r\n> go build and go install are special because of parallelization. They\r\n> gather stdout and stderr mixed into a single bytes.Buffer, then print\r\n> all the bytes.Buffers out later, currently to stdout. This change makes\r\n> it go to stderr instead.\r\n>\r\n> https://codereview.appspot.**com/7393073/<https://codereview.appspot.com/7393073/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-28 21:27:18.445700",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "src/cmd/go/test.bash fails for me on the test for issue 4568 (using Linux, amd64).\n\nIt fails on tip, and also on r15543, when you checked in the test. So it seems like maybe issue 4568 wasn't successfully fixed on Linux, or maybe the test was always not right. I am disabling the test for now and will look into it after this CL is done.",
			"disapproval": false,
			"date": "2013-03-01 09:30:14.386020",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-01 10:21:02.455440",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "very close to there\n\nhttps://codereview.appspot.com/7393073/diff/20001/src/cmd/go/test.bash\nFile src/cmd/go/test.bash (right):\n\nhttps://codereview.appspot.com/7393073/diff/20001/src/cmd/go/test.bash#newcode19\nsrc/cmd/go/test.bash:19: echo \"import \\\"bar\\\"\" >> $fn\n'import \"bar\"'\n\nhttps://codereview.appspot.com/7393073/diff/20001/src/cmd/go/test.bash#newcode26\nsrc/cmd/go/test.bash:26: rm -rf $d\nthe -f shouldn't be necessary, and is dangerous",
			"disapproval": false,
			"date": "2013-03-08 03:01:56.191920",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-08 08:21:29.170260",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-11 00:31:05.457570",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ec3c88fc8445 ***\n\ncmd/go: send output of build and install to stderr\n\n\"go build\" and \"go install\" were mixing stdout and stderr\nfrom the toolchain, then putting it all on stdout. With this\nchange, it stays mixed, and is sent to stderr. Because\nthe toolchain does not create output in a clean compile/install,\nsending all output to stderr makese more sense.\n\nAlso fix test.bash because of \"mktemp: too few X's\nin template `testgo'\" on Linux.\n\nFixes issue 4917.\n\nR=golang-dev, rsc, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7393073\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-03-11 00:31:23.945120",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/11 00:31:23, adg wrote:\n> cmd/go: send output of build and install to stderr\n> \n> \"go build\" and \"go install\" were mixing stdout and stderr\n> from the toolchain, then putting it all on stdout. With this\n> change, it stays mixed, and is sent to stderr. Because\n> the toolchain does not create output in a clean compile/install,\n> sending all output to stderr makese more sense.\nExcept for one case: the command is generating debugging\nprints.\n\nin the past, if we want to view disassembly generated by the\ntoolchain, we can do this: go build -gcflags -S some.go | less.\nafter this change, we have to add 2>&1 or use |& (only available\non bash).",
			"disapproval": false,
			"date": "2013-03-21 15:10:42.077770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I too am less than thrilled with this change.\r\n",
			"disapproval": false,
			"date": "2013-03-21 20:12:41.750400",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I find it slightly inconvenient as well.",
			"disapproval": false,
			"date": "2013-03-21 20:15:31.964760",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, ignore my comment, I forgot how this worked.\n\nIt would be easy, but with quite a lot of messy code, to arrange to keep the stdout and stderr separate in the go tool. No big deal, I just made the smallest change possible before.",
			"disapproval": false,
			"date": "2013-03-21 21:41:27.383170",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what is it for, exactly?\r\n",
			"disapproval": false,
			"date": "2013-03-21 20:49:43.058410",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 21 March 2013 13:49, Rob Pike <r@golang.org> wrote:\r\n\r\n> what is it for, exactly?\r\n\r\n\r\nTo fix this issue: https://code.google.com/p/go/issues/detail?id=4917\r\n\r\nWhich, IIRC, I created originally at either your or Russ' request. I have\r\nno dog in this fight, I just wanted the issue closed.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2013-03-21 20:57:18.603520",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "When 6c -S prints the disassembly, that's expected output, not an error. So it seems like it would be correct to change gc to print to stdout.",
			"disapproval": false,
			"date": "2013-03-21 21:29:19.782760",
			"approval": false
		}
	],
	"owner_email": "jeff.allen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jeff.allen",
	"subject": "code review 7393073: cmd/go: send output of build and install to stderr",
	"created": "2013-02-27 16:10:37.383000",
	"patchsets": [
		1,
		2001,
		4001,
		12001,
		15001,
		18001,
		20001,
		26001
	],
	"modified": "2013-03-21 21:41:27.517590",
	"closed": true,
	"issue": 7393073
}