{
	"description": "net: never use backlog > 65535\n\nThe system call takes an int, but the kernel stores it in a uint16.\nAt least one Linux system sets /proc/sys/net/core/somaxconn\nto 262144, which ends up being 0 in the uint16. Avoid being tricked.\n\nFreeBSD sources also store the backlog in a uint16.\nAssume the problem is systemic and fix it everywhere.\n\nFixes issue 5030.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-12 05:32:29.477570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nnice.\r\n\r\nOn Mon, Mar 11, 2013 at 10:32 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> net: never use backlog > 65535\r\n>\r\n> The system call takes an int, but the kernel stores it in a uint16.\r\n> At least one Linux system sets /proc/sys/net/core/somaxconn\r\n> to 262144, which ends up being 0 in the uint16. Avoid being tricked.\r\n>\r\n> FreeBSD sources also store the backlog in a uint16.\r\n> Assume the problem is systemic and fix it everywhere.\r\n>\r\n> Fixes issue 5030.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7480046/<https://codereview.appspot.com/7480046/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/sock_bsd.go\r\n>   M src/pkg/net/sock_linux.go\r\n>   M src/pkg/net/sock_windows.go\r\n>\r\n>\r\n> Index: src/pkg/net/sock_bsd.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/sock_bsd.go\r\n> +++ b/src/pkg/net/sock_bsd.go\r\n> @@ -27,5 +27,11 @@\r\n>         if n == 0 || err != nil {\r\n>                 return syscall.SOMAXCONN\r\n>         }\r\n> +       // FreeBSD stores the backlog in a uint16, as does Linux.\r\n> +       // Assume the other BSDs do too. Truncate number to avoid wrapping.\r\n> +       // See issue 5030.\r\n> +       if n > 1<<16-1 {\r\n> +               n = 1<<16 - 1\r\n> +       }\r\n>         return int(n)\r\n>  }\r\n> Index: src/pkg/net/sock_linux.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/sock_linux.go\r\n> +++ b/src/pkg/net/sock_linux.go\r\n> @@ -21,5 +21,11 @@\r\n>         if n == 0 || !ok {\r\n>                 return syscall.SOMAXCONN\r\n>         }\r\n> +       // Linux stores the backlog in a uint16.\r\n> +       // Truncate number to avoid wrapping.\r\n> +       // See issue 5030.\r\n> +       if n > 1<<16-1 {\r\n> +               n = 1<<16 - 1\r\n> +       }\r\n>         return n\r\n>  }\r\n> Index: src/pkg/net/sock_windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/sock_windows.go\r\n> +++ b/src/pkg/net/sock_windows.go\r\n> @@ -8,6 +8,7 @@\r\n>\r\n>  func maxListenerBacklog() int {\r\n>         // TODO: Implement this\r\n> +       // NOTE: Never return a number bigger than 1<<16 - 1. See issue\r\n> 5030.\r\n>         return syscall.SOMAXCONN\r\n>  }\r\n>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-12 05:35:41.221960",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d515b37f8bb5 ***\n\nnet: never use backlog > 65535\n\nThe system call takes an int, but the kernel stores it in a uint16.\nAt least one Linux system sets /proc/sys/net/core/somaxconn\nto 262144, which ends up being 0 in the uint16. Avoid being tricked.\n\nFreeBSD sources also store the backlog in a uint16.\nAssume the problem is systemic and fix it everywhere.\n\nFixes issue 5030.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7480046",
			"disapproval": false,
			"date": "2013-03-12 05:48:56.146720",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7480046: net: never use backlog > 65535",
	"created": "2013-03-12 05:32:02.229710",
	"patchsets": [
		1,
		2001,
		7001
	],
	"modified": "2013-03-12 05:48:57.299720",
	"closed": true,
	"issue": 7480046
}