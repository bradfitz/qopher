{
	"description": "go/test/bench/go1: add regexp test",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-12 23:11:08.955090",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-12 22:51:33.104150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seed the randomness for more predictable results?\r\n\r\nOn Tue, Mar 12, 2013 at 3:51 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> go/test/bench/go1: add regexp test\r\n>\r\n> Please review this at https://codereview.appspot.**com/7480047/<https://codereview.appspot.com/7480047/>\r\n>\r\n> Affected files:\r\n>   A test/bench/go1/regexp_test.go\r\n>\r\n>\r\n> Index: test/bench/go1/regexp_test.go\r\n> ==============================**==============================**=======\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/test/bench/go1/regexp_test.**go\r\n> @@ -0,0 +1,58 @@\r\n> +// Copyright 2013 The Go Authors. All rights reserved.\r\n> +// Use of this source code is governed by a BSD-style\r\n> +// license that can be found in the LICENSE file.\r\n> +\r\n> +package go1\r\n> +\r\n> +import (\r\n> +       \"math/rand\"\r\n> +       \"regexp\"\r\n> +       \"testing\"\r\n> +)\r\n> +\r\n> +// benchmark based on regexp/exec_test.go\r\n> +\r\n> +var regexpText []byte\r\n> +\r\n> +func makeRegexpText(n int) []byte {\r\n> +       if len(regexpText) >= n {\r\n> +               return regexpText[:n]\r\n> +       }\r\n> +       regexpText = make([]byte, n)\r\n> +       for i := range regexpText {\r\n> +               if rand.Intn(30) == 0 {\r\n> +                       regexpText[i] = '\\n'\r\n> +               } else {\r\n> +                       regexpText[i] = byte(rand.Intn(0x7E+1-0x20) + 0x20)\r\n> +               }\r\n> +       }\r\n> +       return regexpText\r\n> +}\r\n> +\r\n> +func benchmark(b *testing.B, re string, n int) {\r\n> +       r := regexp.MustCompile(re)\r\n> +       t := makeRegexpText(n)\r\n> +       b.ResetTimer()\r\n> +       b.SetBytes(int64(n))\r\n> +       for i := 0; i < b.N; i++ {\r\n> +               if r.Match(t) {\r\n> +                       b.Fatal(\"match!\")\r\n> +               }\r\n> +       }\r\n> +}\r\n> +\r\n> +const (\r\n> +       easy0  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ$\"\r\n> +       easy1  = \"A[AB]B[BC]C[CD]D[DE]E[EF]F[**FG]G[GH]H[HI]I[IJ]J$\"\r\n> +       medium = \"[XYZ]**ABCDEFGHIJKLMNOPQRSTUVWXYZ$\"\r\n> +       hard   = \"[ -~]***ABCDEFGHIJKLMNOPQRSTUVWXYZ$\"\r\n> +)\r\n> +\r\n> +func BenchmarkRegexpMatchEasy0_32(b *testing.B)  { benchmark(b, easy0,\r\n> 32<<0) }\r\n> +func BenchmarkRegexpMatchEasy0_1K(b *testing.B)  { benchmark(b, easy0,\r\n> 1<<10) }\r\n> +func BenchmarkRegexpMatchEasy1_32(b *testing.B)  { benchmark(b, easy1,\r\n> 32<<0) }\r\n> +func BenchmarkRegexpMatchEasy1_1K(b *testing.B)  { benchmark(b, easy1,\r\n> 1<<10) }\r\n> +func BenchmarkRegexpMatchMedium_32(**b *testing.B) { benchmark(b,\r\n> medium, 1<<0) }\r\n> +func BenchmarkRegexpMatchMedium_1K(**b *testing.B) { benchmark(b,\r\n> medium, 1<<10) }\r\n> +func BenchmarkRegexpMatchHard_32(b *testing.B)   { benchmark(b, hard,\r\n> 32<<0) }\r\n> +func BenchmarkRegexpMatchHard_1K(b *testing.B)   { benchmark(b, hard,\r\n> 1<<10) }\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-12 23:05:41.025690",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7480047/diff/7001/test/bench/go1/regexp_test.go\nFile test/bench/go1/regexp_test.go (right):\n\nhttps://codereview.appspot.com/7480047/diff/7001/test/bench/go1/regexp_test.go#newcode18\ntest/bench/go1/regexp_test.go:18: rand.Seed(0) // For reproducibility.\nbetter would be in makeRegexpText, so running:\n\ngo test -bench=.\nand\ngo test -bench=RegexpMatchMedium\nand\ngo test -bench=Regexp\n\n... are all comparable.  Currently they're not.",
			"disapproval": false,
			"date": "2013-03-12 23:20:27.246570",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-12 23:40:49.300430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-12 23:47:22.075560",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a81eca2d85b3 ***\n\ngo/test/bench/go1: add regexp test\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7480047",
			"disapproval": false,
			"date": "2013-03-12 23:50:12.505180",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7480047: go/test/bench/go1: add regexp test",
	"created": "2013-03-12 22:50:50.831230",
	"patchsets": [
		1,
		2001,
		7001,
		11001,
		15001
	],
	"modified": "2013-03-12 23:50:13.427890",
	"closed": true,
	"issue": 7480047
}