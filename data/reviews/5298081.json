{
	"description": "os: do not interpret 0-length read as EOF\n\nFixes issue 2402.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-31 17:59:32.277363",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nOn Oct 31, 2011 10:59 AM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> os: do not interpret 0-length read as EOF\n>\n> Fixes issue 2402.\n>\n> Please review this at http://codereview.appspot.com/**5298081/<http://codereview.appspot.com/5298081/>\n>\n> Affected files:\n>  M src/pkg/os/file.go\n>  M src/pkg/os/os_test.go\n>\n>\n> Index: src/pkg/os/file.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/file.go\n> +++ b/src/pkg/os/file.go\n> @@ -69,7 +69,7 @@\n>        if n < 0 {\n>                n = 0\n>        }\n> -       if n == 0 && !iserror(e) {\n> +       if n == 0 && len(b) > 0 && !iserror(e) {\n>                return 0, EOF\n>        }\n>        if iserror(e) {\n> Index: src/pkg/os/os_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/os_test.go\n> +++ b/src/pkg/os/os_test.go\n> @@ -165,6 +165,27 @@\n>        }\n>  }\n>\n> +// Read with length 0 should not return EOF.\n> +func TestRead0(t *testing.T) {\n> +       path := sfdir + \"/\" + sfname\n> +       f, err := Open(path)\n> +       if err != nil {\n> +               t.Fatal(\"open failed:\", err)\n> +       }\n> +       defer f.Close()\n> +\n> +       b := make([]byte, 0)\n> +       n, err := f.Read(b)\n> +       if n != 0 || err != nil {\n> +               t.Errorf(\"Read(0) = %d, %v, want 0, nil\", n, err)\n> +       }\n> +       b = make([]byte, 100)\n> +       n, err = f.Read(b)\n> +       if n <= 0 || err != nil {\n> +               t.Errorf(\"Read(100) = %d, %v, want >0, nil\", n, err)\n> +       }\n> +}\n> +\n>  func testReaddirnames(dir string, contents []string, t *testing.T) {\n>        file, err := Open(dir)\n>        defer file.Close()\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-31 18:10:44.042950",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-10-31 22:25:39.207923",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e77b8510ab73 ***\n\nos: do not interpret 0-length read as EOF\n\nFixes issue 2402.\n\nR=golang-dev, bradfitz, r\nCC=golang-dev\nhttp://codereview.appspot.com/5298081",
			"disapproval": false,
			"date": "2011-11-01 04:17:12.310171",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5298081: os: do not interpret 0-length read as EOF",
	"created": "2011-10-31 16:14:18.648392",
	"patchsets": [
		1,
		2001,
		4001,
		7
	],
	"modified": "2011-11-01 04:17:13.830913",
	"closed": true,
	"issue": 5298081
}