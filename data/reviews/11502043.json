{
	"description": "runtime: add specialised hash function for byte/uint8\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkMapByte                 34           27  -20.93%\nBenchmarkMapByteStruct           39           39   -0.51%\n\nUpdate issue 5908\n\nAdd specialised hash function for byte/uint8",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Q=wait",
			"disapproval": false,
			"date": "2013-07-23 16:36:24.215230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can believe this makes map[uint8] faster. But why bother with a\r\nmap[uint8]?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-19 01:45:38.486800",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-19 00:40:03.021280",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought Russ already rejected this last time it came up.\r\n\r\n\r\n\r\nOn Fri, Jul 19, 2013 at 10:40 AM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> runtime: add specialised hash function for byte/uint8\r\n>\r\n> Update issue 5908\r\n>\r\n> Add specialised hash function for byte/uint8\r\n>\r\n> Please review this at https://codereview.appspot.**com/11502043/<https://codereview.appspot.com/11502043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/alg.c\r\n>\r\n>\r\n> Index: src/pkg/runtime/alg.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/alg.c\r\n> +++ b/src/pkg/runtime/alg.c\r\n> @@ -35,6 +35,13 @@\r\n>  }\r\n>\r\n>  void\r\n> +runtime\u00b7bytehash(uintptr *h, uintptr s, void *a)\r\n> +{\r\n> +       USED(s);\r\n> +       *h = (*h ^ *(byte*)a) * M1;\r\n> +}\r\n> +\r\n> +void\r\n>  runtime\u00b7memequal(bool *eq, uintptr s, void *a, void *b)\r\n>  {\r\n>         if(a == b) {\r\n> @@ -447,7 +454,7 @@\r\n>  [ACPLX64]      { runtime\u00b7c64hash, runtime\u00b7c64equal, runtime\u00b7memprint,\r\n> runtime\u00b7memcopy },\r\n>  [ACPLX128]     { runtime\u00b7c128hash, runtime\u00b7c128equal, runtime\u00b7memprint,\r\n> runtime\u00b7memcopy },\r\n>  [AMEM0]                { runtime\u00b7memhash, runtime\u00b7memequal0,\r\n> runtime\u00b7memprint, runtime\u00b7memcopy0 },\r\n> -[AMEM8]                { runtime\u00b7memhash, runtime\u00b7memequal8,\r\n> runtime\u00b7memprint, runtime\u00b7memcopy8 },\r\n> +[AMEM8]                { runtime\u00b7bytehash, runtime\u00b7memequal8,\r\n> runtime\u00b7memprint, runtime\u00b7memcopy8 },\r\n>  [AMEM16]       { runtime\u00b7memhash, runtime\u00b7memequal16, runtime\u00b7memprint,\r\n> runtime\u00b7memcopy16 },\r\n>  [AMEM32]       { runtime\u00b7memhash, runtime\u00b7memequal32, runtime\u00b7memprint,\r\n> runtime\u00b7memcopy32 },\r\n>  [AMEM64]       { runtime\u00b7memhash, runtime\u00b7memequal64, runtime\u00b7memprint,\r\n> runtime\u00b7memcopy64 },\r\n> @@ -476,7 +483,6 @@\r\n>                 int32 n;\r\n>                 use_aeshash = true;\r\n>                 runtime\u00b7algarray[AMEM].hash = runtime\u00b7aeshash;\r\n> -               runtime\u00b7algarray[AMEM8].hash = runtime\u00b7aeshash;\r\n>                 runtime\u00b7algarray[AMEM16].hash = runtime\u00b7aeshash;\r\n>                 runtime\u00b7algarray[AMEM32].hash = runtime\u00b7aeshash32;\r\n>                 runtime\u00b7algarray[AMEM64].hash = runtime\u00b7aeshash64;\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-19 01:04:58.309000",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "At the very least there should be benchmark info in the CL description\r\nto justify it.\r\n",
			"disapproval": false,
			"date": "2013-07-19 01:22:04.365230",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sample benchmark data is in issue 5908, i'll add a runtime pkg benchmark.\r\n\r\nOn Fri, Jul 19, 2013 at 11:22 AM, David Symonds <dsymonds@golang.org> wrote:\r\n> At the very least there should be benchmark info in the CL description\r\n> to justify it.\r\n",
			"disapproval": false,
			"date": "2013-07-19 01:26:54.766150",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Agreed, but by the same token, why use the heavyweight aeshashbody\r\nfunction when we don't need it?\r\n\r\nOn Fri, Jul 19, 2013 at 11:45 AM, Russ Cox <rsc@golang.org> wrote:\r\n> I can believe this makes map[uint8] faster. But why bother with a\r\n> map[uint8]?\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-19 01:51:10.725150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does it also help:\r\n\r\nstruct T struct {\r\n    a, b, c byte\r\n}\r\n\r\nmap[T]Foo\r\n\r\n?\r\n\r\nThat makes more sense.\r\n\r\n\r\n\r\nOn Fri, Jul 19, 2013 at 11:45 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I can believe this makes map[uint8] faster. But why bother with a\r\n> map[uint8]?\r\n>\r\n> Russ\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-19 01:53:34.085410",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. Added benchmarks, this CL does not improve the map[struct{byte,byte,byte}] case.",
			"disapproval": false,
			"date": "2013-07-19 03:39:35.709550",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's really hard to get excited about this. How does your benchmark far against doing the same thing with [256]func()?",
			"disapproval": false,
			"date": "2013-07-19 04:28:30.061510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Terribly. The are much better ways of doing this and an array of func is the best. \r\n\r\nIf this isn't lighting anyone's world on fire ill drop it. \r\n\r\nOn 19/07/2013, at 14:28, r@golang.org wrote:\r\n\r\n> It's really hard to get excited about this. How does your benchmark far\r\n> against doing the same thing with [256]func()?\r\n> \r\n> https://codereview.appspot.com/11502043/\r\n",
			"disapproval": false,
			"date": "2013-07-19 04:42:42.969050",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What this CL does is make a stupid thing slightly faster. Why should we\r\nbother?\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-07-19 05:03:44.074780",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 11502043: runtime: add specialised hash function for byte/uint8",
	"created": "2013-07-18 05:42:21.021390",
	"patchsets": [
		1,
		3001,
		6001,
		14001
	],
	"modified": "2013-07-23 16:36:24.476610",
	"closed": false,
	"issue": 11502043
}