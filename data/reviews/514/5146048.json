{
	"description": "encoding/binary: support for varint encoding",
	"cc": [
		"rsc@golang.org",
		"r@google.com",
		"nigeltao@golang.org",
		"r@golang.org",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I'd also add\n\n// MaxVarintLen is the maximum length of a varint-encoded int64 or uint64.\nconst MaxVarintLen = 10\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode5\nsrc/pkg/encoding/binary/varint.go:5: // This file implements \"varint\" encoding of 64bit integers.\nIf you put this file-specific comment between the package clause and the imports, then it's less likely to be mistaken for a package doc comment.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode93\nsrc/pkg/encoding/binary/varint.go:93: var overflow = os.NewError(\"overflow: not a 64bit integer\")\nI'd make the string \"binary: varint overflows a 64bit integer\". The \"binary\" prefix gives a hint for what package to look for when encountering an error.",
			"disapproval": false,
			"date": "2011-09-28 10:09:03.691232",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode15\nsrc/pkg/encoding/binary/varint.go:15: //   are written as 2*(^x) + 1; i.e., negative numbers are complemented\nOn 2011/09/28 18:33:49, r wrote:\n> s/i.e./that is/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode16\nsrc/pkg/encoding/binary/varint.go:16: //   and the sign is encoded in bit 0.\nOn 2011/09/28 18:33:49, r wrote:\n> and whether to complement is encoded in bit 0.\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode20\nsrc/pkg/encoding/binary/varint.go:20: // be more dense: A full 64-bit value needs an extra byte just to hold bit 63.\nOn 2011/09/28 18:33:49, r wrote:\n> s/A/a/ (not starting a sentence)\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode33\nsrc/pkg/encoding/binary/varint.go:33: const MaxVarintLen = 10\nOn 2011/09/28 18:33:49, r wrote:\n> this is too generic a name. i'd do\n> const MaxVarintLen64 = 10\n> const MaxVarintLen32 = 5 (or whatever)\n> and so on for 16 and 8. why not?\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode50\nsrc/pkg/encoding/binary/varint.go:50: // number of bytes read (> 0). If an error occured, the value is 0\nOn 2011/09/28 18:33:49, r wrote:\n> s/occured/occurred/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode51\nsrc/pkg/encoding/binary/varint.go:51: // and the number of bytes n is <= 0 with the following meaning:\nOn 2011/09/28 18:33:49, r wrote:\n> s/ the following/\n\nDone.",
			"disapproval": false,
			"date": "2011-09-28 19:56:36.240077",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nanyone else?",
			"disapproval": false,
			"date": "2011-09-29 00:21:37.776096",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "If the max is not enough, a separate func VarintSize(x int64) int\nand UvarintSize(x uint64) int would be fine too and\nwould still avoid needing to overload the return value.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-29 13:59:26.665274",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5146048/diff/10001/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/10001/src/pkg/encoding/binary/varint.go#newcode19\nsrc/pkg/encoding/binary/varint.go:19: // PutUint encodes a uint64 into buf and returns the number of bytes written.\nI think PutUint is too generic a name.  It needs to say\nvarint somehow.\n\nPossibly:\n\nPutVarint\nPutUvarint\n\nVarint\nUvarint\n\nReadVarint\nReadUvarint\nWriteVarint\nWriteUvarint\n\nhttp://codereview.appspot.com/5146048/diff/10001/src/pkg/encoding/binary/varint.go#newcode23\nsrc/pkg/encoding/binary/varint.go:23: if x < 128 {\n128 is fine but you are really using this as a\nbit so 0x80 and b&^0x80 seems clearer.",
			"disapproval": false,
			"date": "2011-09-28 01:28:21.679602",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-28 01:12:45.621287",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=39de8f482ea8 ***\n\nencoding/binary: support for varint encoding\n\nR=rsc, r, nigeltao, r, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/5146048",
			"disapproval": false,
			"date": "2011-09-29 05:36:56.738691",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't remember seeing this detail of the API when I looked.\nMaybe I just missed it:\n\n// PutUvarint encodes a uint64 into buf and returns the number of bytes\nwritten.\n// If the buffer is too small, the result is the negated number of bytes\nrequired\n// (that is, -PutUvarint(nil, x) is the number of bytes required to encode\nx).\n\nThe negative size return on error seems overly fussy to me;\nit belongs in a C program, not a Go program.\nI would just require that the buffer is large enough,\nand let the slice writes panic if not.  The max is defined.\n\nCompare with utf8.EncodeRune.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-29 13:42:45.988704",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode7\nsrc/pkg/encoding/binary/varint.go:7: // This file implements \"varint\" encoding of 64bit integers.\nOn 2011/09/29 00:32:14, dsymonds wrote:\n> s/64bit/64-bit/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode10\nsrc/pkg/encoding/binary/varint.go:10: //   least significant bit (lsb)\nOn 2011/09/29 00:32:14, dsymonds wrote:\n> I would have said s/bit/7 bits/.\n\nchanged to: starting with the least significant bits\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode22\nsrc/pkg/encoding/binary/varint.go:22: // know there can't be more then 64 bits. This is a trivial improvement and\nOn 2011/09/29 00:32:14, dsymonds wrote:\n> s/then/than/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode52\nsrc/pkg/encoding/binary/varint.go:52: for x >= 0x80 {\nOn 2011/09/29 00:32:14, dsymonds wrote:\n> there are bit tricks you could do to avoid needing this loop, but this works.\n\nNot sure those would be faster. But I tweaked the code a bit and there are now only half the number of iterations needed :-)\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode72\nsrc/pkg/encoding/binary/varint.go:72: if i > 9 || i == 9 && b > 1 {\nOn 2011/09/29 00:32:14, dsymonds wrote:\n> seems like this should use MaxVarintLen64\n\nyes, but then in b > 1 the 1 should also be computed in terms of original constants.\n\nI played with this:\n\nconst (\n   _S = 7 // 7 bits per byte\n   _L = 1<<_S\n   _M = _L-1\n)\n\nand used _S instead of 7, _L instead of 0x80, and _M instead of 0x7f. The Max constants can all be computed as well from _S. The tests can be expressed in terms of these constants. In fact, the entire encoding becomes changeable, one could e.g. set _S to 5 and it still works.\n\nBut the code becomes not more readable. I think either one goes all the way or we leave these constants. Opting for the current approach. There's no point in changing the encoding.\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode130\nsrc/pkg/encoding/binary/varint.go:130: if i > 9 || i == 9 && b > 1 {\nOn 2011/09/29 00:32:14, dsymonds wrote:\n> use MaxVarintLen64?\n\nsee above.",
			"disapproval": false,
			"date": "2011-09-29 05:35:04.989136",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "the U is in the wrong place but it looks truly horrible in the right\nplace, so wrong it will be.\n\ni'll look at this tomorrow.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-28 04:05:27.556959",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\nI also changed error handling a bit:\n- to be compatible with longer encodings (e.g. 128 bit), decoding continues until the continuation bit is not set (or EOF)\n- overflow is detected accurately\n\nhttp://codereview.appspot.com/5146048/diff/10001/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/10001/src/pkg/encoding/binary/varint.go#newcode19\nsrc/pkg/encoding/binary/varint.go:19: // PutUint encodes a uint64 into buf and returns the number of bytes written.\nOn 2011/09/28 01:28:21, rsc wrote:\n> I think PutUint is too generic a name.  It needs to say\n> varint somehow.\n> \n> Possibly:\n> \n> PutVarint\n> PutUvarint\n> \n> Varint\n> Uvarint\n> \n> ReadVarint\n> ReadUvarint\n> WriteVarint\n> WriteUvarint\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/10001/src/pkg/encoding/binary/varint.go#newcode23\nsrc/pkg/encoding/binary/varint.go:23: if x < 128 {\nOn 2011/09/28 01:28:21, rsc wrote:\n> 128 is fine but you are really using this as a\n> bit so 0x80 and b&^0x80 seems clearer.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-28 02:55:53.352031",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode6\nsrc/pkg/encoding/binary/varint.go:6: // The encoding is as follows:\nThe encoding is:\n(it always follows)\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode7\nsrc/pkg/encoding/binary/varint.go:7: // - unsigned integers are serialized 7bits at a time, starting with the lsb\ns/7bits/7 bits/\ns/lsb/least significant bit (lsb)/\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode8\nsrc/pkg/encoding/binary/varint.go:8: // - the msb in each byte indicates if there is a continuation byte (msb = 1)\ns/msb/most significant bit (msb)/\ns/byte/output byte/\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode10\nsrc/pkg/encoding/binary/varint.go:10: //   encoding (see PutVarint)\ni see nothing about zig-zag in the comments for PutVarint.\njust tell me the encoding here, please.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode13\nsrc/pkg/encoding/binary/varint.go:13: // At most 10 bytes are needed for 64bit values. The encoding could be more\ns/64bit/64-bit/\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode14\nsrc/pkg/encoding/binary/varint.go:14: // dense: A full 64bit value needs an extra byte just to hold bit 63. Instead,\nditto\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode19\nsrc/pkg/encoding/binary/varint.go:19: // format incompatible with a varint encoding for larger numbers (say 128bit).\nditt sort of\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode29\nsrc/pkg/encoding/binary/varint.go:29: // If the buffer is to small, the result is 0.\ns/to/too/\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode44\nsrc/pkg/encoding/binary/varint.go:44: // undefined and the number of bytes is zero. If overflow occured,\ns/occured/occurred/\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode52\nsrc/pkg/encoding/binary/varint.go:52: return x, -i // overflow\nwhy not 0, -i\nand say so in the comment?\nanyway i'd be happier with an error return in all these failures but won't press for it\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode63\nsrc/pkg/encoding/binary/varint.go:63: // If the buffer is to small, the result is 0.\ns/to/too/\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode75\nsrc/pkg/encoding/binary/varint.go:75: // the number of bytes returned is negated.\nsame comments as above.\n(be sure to fix \"occured\")\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode85\nsrc/pkg/encoding/binary/varint.go:85: // WriteUvarint writes a uint64 to w.\nWriteUvarint encodes x and writes the result to w.\nsame below.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode95\nsrc/pkg/encoding/binary/varint.go:95: // ReadUvarint reads a uint64 from r.\nReadUvarint reads an encoded unsigned integer from r and returns it as a uint64.\nsimilarly below.",
			"disapproval": false,
			"date": "2011-09-28 16:10:09.382662",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\nAlso: added missing tests.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode5\nsrc/pkg/encoding/binary/varint.go:5: // This file implements \"varint\" encoding of 64bit integers.\nOn 2011/09/28 10:09:03, nigeltao wrote:\n> If you put this file-specific comment between the package clause and the\n> imports, then it's less likely to be mistaken for a package doc comment.\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode5\nsrc/pkg/encoding/binary/varint.go:5: // This file implements \"varint\" encoding of 64bit integers.\nOn 2011/09/28 10:09:03, nigeltao wrote:\n> If you put this file-specific comment between the package clause and the\n> imports, then it's less likely to be mistaken for a package doc comment.\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode6\nsrc/pkg/encoding/binary/varint.go:6: // The encoding is as follows:\nOn 2011/09/28 16:10:09, r wrote:\n> The encoding is:\n> (it always follows)\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode7\nsrc/pkg/encoding/binary/varint.go:7: // - unsigned integers are serialized 7bits at a time, starting with the lsb\nOn 2011/09/28 16:10:09, r wrote:\n> s/7bits/7 bits/\n> s/lsb/least significant bit (lsb)/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode8\nsrc/pkg/encoding/binary/varint.go:8: // - the msb in each byte indicates if there is a continuation byte (msb = 1)\nOn 2011/09/28 16:10:09, r wrote:\n> s/msb/most significant bit (msb)/\n> s/byte/output byte/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode8\nsrc/pkg/encoding/binary/varint.go:8: // - the msb in each byte indicates if there is a continuation byte (msb = 1)\nOn 2011/09/28 16:10:09, r wrote:\n> s/msb/most significant bit (msb)/\n> s/byte/output byte/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode10\nsrc/pkg/encoding/binary/varint.go:10: //   encoding (see PutVarint)\nOn 2011/09/28 16:10:09, r wrote:\n> i see nothing about zig-zag in the comments for PutVarint.\n> just tell me the encoding here, please.\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode13\nsrc/pkg/encoding/binary/varint.go:13: // At most 10 bytes are needed for 64bit values. The encoding could be more\nOn 2011/09/28 16:10:09, r wrote:\n> s/64bit/64-bit/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode14\nsrc/pkg/encoding/binary/varint.go:14: // dense: A full 64bit value needs an extra byte just to hold bit 63. Instead,\nOn 2011/09/28 16:10:09, r wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode19\nsrc/pkg/encoding/binary/varint.go:19: // format incompatible with a varint encoding for larger numbers (say 128bit).\nOn 2011/09/28 16:10:09, r wrote:\n> ditt sort of\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode29\nsrc/pkg/encoding/binary/varint.go:29: // If the buffer is to small, the result is 0.\nOn 2011/09/28 16:10:09, r wrote:\n> s/to/too/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode44\nsrc/pkg/encoding/binary/varint.go:44: // undefined and the number of bytes is zero. If overflow occured,\nOn 2011/09/28 16:10:09, r wrote:\n> s/occured/occurred/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode52\nsrc/pkg/encoding/binary/varint.go:52: return x, -i // overflow\nOn 2011/09/28 16:10:09, r wrote:\n> why not 0, -i\n> and say so in the comment?\n> anyway i'd be happier with an error return in all these failures but won't press\n> for it\n\n- changed value from undefined to 0\n- made comment clearer\n- returning an os.Error will make this interface more complicated because it will require an extra (3rd) result since in the non-error case we need the value and the length. Also, e.g. buffer too small may indicate a client to get more bytes and thus is a signal that doesn't necessarily indicate a program/data error. Returning that signal as an os.Error will make that code more complicated.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode63\nsrc/pkg/encoding/binary/varint.go:63: // If the buffer is to small, the result is 0.\nOn 2011/09/28 16:10:09, r wrote:\n> s/to/too/\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode75\nsrc/pkg/encoding/binary/varint.go:75: // the number of bytes returned is negated.\nOn 2011/09/28 16:10:09, r wrote:\n> same comments as above.\n> (be sure to fix \"occured\")\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode85\nsrc/pkg/encoding/binary/varint.go:85: // WriteUvarint writes a uint64 to w.\nOn 2011/09/28 16:10:09, r wrote:\n> WriteUvarint encodes x and writes the result to w.\n> same below.\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode93\nsrc/pkg/encoding/binary/varint.go:93: var overflow = os.NewError(\"overflow: not a 64bit integer\")\nOn 2011/09/28 10:09:03, nigeltao wrote:\n> I'd make the string \"binary: varint overflows a 64bit integer\". The \"binary\"\n> prefix gives a hint for what package to look for when encountering an error.\n\nDone.\n\nhttp://codereview.appspot.com/5146048/diff/2010/src/pkg/encoding/binary/varint.go#newcode95\nsrc/pkg/encoding/binary/varint.go:95: // ReadUvarint reads a uint64 from r.\nOn 2011/09/28 16:10:09, r wrote:\n> ReadUvarint reads an encoded unsigned integer from r and returns it as a uint64.\n> similarly below.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-28 18:26:24.756710",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode15\nsrc/pkg/encoding/binary/varint.go:15: //   are written as 2*(^x) + 1; i.e., negative numbers are complemented\ns/i.e./that is/\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode16\nsrc/pkg/encoding/binary/varint.go:16: //   and the sign is encoded in bit 0.\nand whether to complement is encoded in bit 0.\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode20\nsrc/pkg/encoding/binary/varint.go:20: // be more dense: A full 64-bit value needs an extra byte just to hold bit 63.\ns/A/a/ (not starting a sentence)\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode33\nsrc/pkg/encoding/binary/varint.go:33: const MaxVarintLen = 10\nthis is too generic a name. i'd do\nconst MaxVarintLen64 = 10\nconst MaxVarintLen32 = 5 (or whatever)\nand so on for 16 and 8. why not?\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode50\nsrc/pkg/encoding/binary/varint.go:50: // number of bytes read (> 0). If an error occured, the value is 0\ns/occured/occurred/\n\nhttp://codereview.appspot.com/5146048/diff/14007/src/pkg/encoding/binary/varint.go#newcode51\nsrc/pkg/encoding/binary/varint.go:51: // and the number of bytes n is <= 0 with the following meaning:\ns/ the following/",
			"disapproval": false,
			"date": "2011-09-28 18:33:48.980492",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go\nFile src/pkg/encoding/binary/varint.go (right):\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode7\nsrc/pkg/encoding/binary/varint.go:7: // This file implements \"varint\" encoding of 64bit integers.\ns/64bit/64-bit/\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode10\nsrc/pkg/encoding/binary/varint.go:10: //   least significant bit (lsb)\nI would have said s/bit/7 bits/.\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode22\nsrc/pkg/encoding/binary/varint.go:22: // know there can't be more then 64 bits. This is a trivial improvement and\ns/then/than/\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode52\nsrc/pkg/encoding/binary/varint.go:52: for x >= 0x80 {\nthere are bit tricks you could do to avoid needing this loop, but this works.\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode72\nsrc/pkg/encoding/binary/varint.go:72: if i > 9 || i == 9 && b > 1 {\nseems like this should use MaxVarintLen64\n\nhttp://codereview.appspot.com/5146048/diff/22001/src/pkg/encoding/binary/varint.go#newcode130\nsrc/pkg/encoding/binary/varint.go:130: if i > 9 || i == 9 && b > 1 {\nuse MaxVarintLen64?",
			"disapproval": false,
			"date": "2011-09-29 00:32:14.711427",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI only looked at the API.\n",
			"disapproval": false,
			"date": "2011-09-29 00:22:24.011041",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nAlso, the test only checks round trips, but it would be good to have a few tests for the actual bytes. You can probably steal some good sample data from Nigel's code:\n  http://code.google.com/p/snappy-go/source/browse/varint/varint_test.go\n  http://code.google.com/p/snappy-go/source/browse/varint/zigzag/zigzag_test.go",
			"disapproval": false,
			"date": "2011-09-29 00:36:57.573162",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "There was always an error return (0) if the buffer was too small, in\nconsistency with the read routines. In a second step I added the\nnegative length because the read routines also return the negative\nlength in error cases (overflow). It doesn't cost when not used. I was\ncontemplating just crashing, but the implementation made the error\nreturn free.\n\nAnyway, simplified, as consistency w/ EncodeRune is compelling. See CL 5163041.\n- gri\n\nOn Thu, Sep 29, 2011 at 6:59 AM, Russ Cox <rsc@golang.org> wrote:\n> If the max is not enough, a separate func VarintSize(x int64) int\n> and UvarintSize(x uint64) int would be fine too and\n> would still avoid needing to overload the return value.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-09-29 16:28:03.190501",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5146048: encoding/binary: support for varint encoding",
	"created": "2011-09-28 00:53:17.307966",
	"patchsets": [
		1,
		2001,
		3003,
		3004,
		7001,
		10001,
		13001,
		8006,
		2010,
		14007,
		4,
		22001,
		16002
	],
	"modified": "2011-09-29 15:53:57.811389",
	"closed": true,
	"issue": 5146048
}