{
	"description": "leveldb: add a reader for the on-disk table format.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go/",
			"disapproval": false,
			"date": "2011-09-26 12:01:49.935455",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5142043/diff/5010/leveldb/db/options.go\nFile leveldb/db/options.go (right):\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/db/options.go#newcode27\nleveldb/db/options.go:27: // The default value is false.\nOn 2011/09/27 13:39:37, bradfitz wrote:\n> seems like the default should be true for safety.\n> \n> IgnoreChecksums?\n> \n> don't feel strongly, though.\n\nThe C++ code defaults to ignoring checksums.\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go\nFile leveldb/table/reader.go (right):\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode258\nleveldb/table/reader.go:258: if !i.Next() || string(key) != string(i.Key()) {\nOn 2011/09/27 13:39:37, bradfitz wrote:\n> || !bytes.Equal(key, i.Key())\n\nDone.\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode317\nleveldb/table/reader.go:317: return nil, os.NewError(\"leveldb/table: unknown block compression\")\nOn 2011/09/27 13:39:37, bradfitz wrote:\n> \"....: %d\", b[bh.length] ?\n\nDone.\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode324\nleveldb/table/reader.go:324: func NewReader(r io.ReaderAt, size int64, c io.Closer, o *db.Options) (*Reader, os.Error) {\nOn 2011/09/27 13:39:37, bradfitz wrote:\n> the c argument is a little clumsy feeling.  too many weird positional parameters\n> for such a beautiful name (\"NewReader\").\n> \n> I don't have counter-suggestions that are well thought through, though.\n\nI made a File interface (with Close, ReadAt and Stat). It's much nicer: there's no need to have both NewReader and Open, and Open now just takes two arguments: a File and an options.",
			"disapproval": false,
			"date": "2011-09-28 10:32:17.021656",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as cdd9528a5b52 ***\n\nleveldb: add a reader for the on-disk table format.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5142043",
			"disapproval": false,
			"date": "2011-09-28 10:43:05.928608",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/db/options.go\nFile leveldb/db/options.go (right):\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/db/options.go#newcode27\nleveldb/db/options.go:27: // The default value is false.\nseems like the default should be true for safety.\n\nIgnoreChecksums?\n\ndon't feel strongly, though.\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go\nFile leveldb/table/reader.go (right):\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode241\nleveldb/table/reader.go:241: // TODO: add a (goroutine-safe) LRU block cache.\nnot that it's hard, but camlistore has one, which I also put in google's tree somewhere.  I only mention this because I now start to wonder if this should be in container/lru.\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode258\nleveldb/table/reader.go:258: if !i.Next() || string(key) != string(i.Key()) {\n|| !bytes.Equal(key, i.Key())\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode317\nleveldb/table/reader.go:317: return nil, os.NewError(\"leveldb/table: unknown block compression\")\n\"....: %d\", b[bh.length] ?\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode324\nleveldb/table/reader.go:324: func NewReader(r io.ReaderAt, size int64, c io.Closer, o *db.Options) (*Reader, os.Error) {\nthe c argument is a little clumsy feeling.  too many weird positional parameters for such a beautiful name (\"NewReader\").\n\nI don't have counter-suggestions that are well thought through, though.\n\nhttp://codereview.appspot.com/5142043/diff/5010/leveldb/table/reader.go#newcode360\nleveldb/table/reader.go:360: func Open(filename string, o *db.Options) (*Reader, os.Error) {\nso this is the intended high-level interface.  I wonder if it makes sense to make NewReader have a more ugly name, or point its docs at Open.\n\nEh, it's fine as-is.",
			"disapproval": false,
			"date": "2011-09-27 13:39:37.855886",
			"approval": true
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 5142043: leveldb: add a reader for the on-disk table format.",
	"created": "2011-09-26 12:01:25.416313",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		5010,
		14001
	],
	"modified": "2011-09-28 10:43:07.964011",
	"closed": true,
	"issue": 5142043
}