{
	"description": "graphics: convolution\n\nSeparates Convolve from Blur.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nigeltao@golang.org"
	],
	"messages": [
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-30 17:06:01.297753",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://crawshaw%40google.com@code.google.com/p/graphics-go/",
			"disapproval": false,
			"date": "2011-09-29 04:59:17.783993",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Some general points:\n\nCurrently, you're exporting the Kernel type, which uses Fixed48s, and so you have to export Fixed48s. But it might be better for callers to simply pass []float64, and convert in the callee instead of the caller. If so, rename Fixed48 to fixed48, and possibly lower-case-name some other types that don't need to be part of the exported API.\n\nOne possible design is for Kernel to be an interface like image.Image (or even for a kernel to *be* an image.Image, one that allows supersaturated Alpha values: A >= 1<<16), and have a SeparableKernel struct type that Convolve can look for, and fast-path. I'll need to think some more about this.\n\nFinally, you're doing two things in the one changelist: you're implementing blur as an instance of a more general convolution, and you're treating an image.RGBA as an instance of a more general image.Image (and in the process also supporting e.g. image.Gray). Admittedly, convolveSepRGBA only does the first thing and not the second, but I'd still rather have separate changes: introduce convolution in one step, then expand the supported image types in a second step.\n\nhttp://codereview.appspot.com/5140049/diff/5001/graphics/Makefile\nFile graphics/Makefile (right):\n\nhttp://codereview.appspot.com/5140049/diff/5001/graphics/Makefile#newcode13\ngraphics/Makefile:13: sobel.go\\\nhg add sobel.go.\n\nhttp://codereview.appspot.com/5140049/diff/5001/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5140049/diff/5001/graphics/convolve.go#newcode1\ngraphics/convolve.go:1: package graphics\nMissing copyright header.\n\nAlso, run gofmt.",
			"disapproval": false,
			"date": "2011-09-29 10:20:05.160445",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I've written a counter-proposal at http://codereview.appspot.com/5167057. WDYT?\n\nhttp://codereview.appspot.com/5140049/diff/2006/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5140049/diff/2006/graphics/convolve.go#newcode13\ngraphics/convolve.go:13: type fixed48 uint64\nOn second thoughts, the s/float64/uint64/ change was a premature optimization. The uint64 represention will need some more thought to deal with super-saturating kernels that may lead to RGBA values above 100% or below 0%, and would otherwise overflow fixed point calculations.\n\nhttp://codereview.appspot.com/5140049/diff/2006/graphics/convolve.go#newcode16\ngraphics/convolve.go:16: type kernelSeparable struct {\nI'd call the type separableKernel.\n\nhttp://codereview.appspot.com/5140049/diff/2006/graphics/convolve.go#newcode134\ngraphics/convolve.go:134: Radius() int\nThis isn't a sufficient interface. To convolve an arbitrary kernel, you need to know the weights, and if you have the matrix of weights, the radius is implied. If you're happy to restrict yourself to square kernels, I would write this as:\n\ntype Kernel interface {\n    Weights() []float64\n}\n\nhttp://codereview.appspot.com/5140049/diff/2006/graphics/convolve.go#newcode157\ngraphics/convolve.go:157: func Convole(dst draw.Image, src image.Image, k Kernel) {\nTypo in \"Convolve\". You've also written \"convole\" elsewhere.",
			"disapproval": false,
			"date": "2011-10-04 06:33:00.563143",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-05 04:58:11.460003",
			"approval": false
		}
	],
	"owner_email": "crawshaw@google.com",
	"private": false,
	"base_url": "",
	"owner": "crawshaw1",
	"subject": "code review 5140049: graphics: convolution",
	"created": "2011-09-29 04:58:26.804555",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		13001,
		2002,
		2006
	],
	"modified": "2011-10-05 04:58:12.770124",
	"closed": true,
	"issue": 5140049
}