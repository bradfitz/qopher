{
	"description": "cmd/vet: clean up the test\n- clean up the notypes version of the test so it's quiet\n- change the package in the buildtag test to avoid confusing godoc",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-24 16:39:59.027090",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Given that the Makefile does nothing more than run a\nseries of commands, could we use a shell script for\nthe job?\n\nWe don't reqauire make(1) for all.bash before this CL.\n\nWhat do you think?",
			"disapproval": false,
			"date": "2013-04-24 16:52:52.219680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In addition to what Minux said, could we move the test input files to a\r\n\"testdata\" subdirectory of src/cmd/vet ?\r\n\r\n\r\n\r\nOn Wed, Apr 24, 2013 at 9:39 AM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/vet: test it in the build\r\n> - clean up the notypes version of the test so it's quiet\r\n> - change the package in the buildtag test to avoid confusing godoc\r\n> - add test_notypes to run.bash\r\n>\r\n> Please review this at https://codereview.appspot.**com/8671049/<https://codereview.appspot.com/8671049/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/vet/Makefile\r\n>   M src/cmd/vet/test_buildtag_bad.**go\r\n>   M src/run.bash\r\n>\r\n>\r\n> Index: src/cmd/vet/Makefile\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/vet/Makefile\r\n> +++ b/src/cmd/vet/Makefile\r\n> @@ -5,8 +5,10 @@\r\n>  # Assumes go/types is installed\r\n>  test testshort:\r\n>         go build -tags 'vet_test gotypes'\r\n> -       ../../../test/errchk ./vet -printfuncs='Warn:1,Warnf:1' *.go *.s\r\n> +       ../../../test/errchk ./vet -printfuncs='Warn:1,Warnf:1' test_*.go\r\n> test_*.s\r\n>\r\n>  test_notypes:\r\n>         go build -tags 'vet_test'\r\n> -       ../../../test/errchk ./vet -printfuncs='Warn:1,Warnf:1' *.go *.s\r\n> +       # Only those tests that do not depend on types.\r\n> +       # Excluded: test_print.go\r\n> +       ../../../test/errchk ./vet -printfuncs='Warn:1,Warnf:1'\r\n> test_asm.go test_assign.go test_atomic.go test_buildtag.go\r\n> test_buildtag_bad.go test_deadcode.go test_method.go test_rangeloop.go\r\n> test_structtag.go test_taglit.go test_*.s\r\n> Index: src/cmd/vet/test_buildtag_bad.**go\r\n> ==============================**==============================**=======\r\n> rename from src/cmd/vet/buildtag_bad.go\r\n> rename to src/cmd/vet/test_buildtag_bad.**go\r\n> --- a/src/cmd/vet/buildtag_bad.go\r\n> +++ b/src/cmd/vet/test_buildtag_**bad.go\r\n> @@ -8,4 +8,8 @@\r\n>  // +build @#$ // ERROR \"invalid non-alphanumeric build constraint\"\r\n>\r\n>  // +build toolate // ERROR \"build comment appears too late in file\"\r\n> -package main\r\n> +package pkg\r\n> +\r\n> +// This is package 'pkg' rather than 'main' so the erroneous build\r\n> +// tag doesn't end up looking like a package doc for the vet command\r\n> +// when examined by godoc.\r\n> Index: src/run.bash\r\n> ==============================**==============================**=======\r\n> --- a/src/run.bash\r\n> +++ b/src/run.bash\r\n> @@ -143,6 +143,11 @@\r\n>  go test ../test/bench/go1\r\n>  ) || exit $?\r\n>\r\n> +(xcd cmd/vet\r\n> +echo\r\n> +make test_notypes\r\n> +) || exit $?\r\n> +\r\n>  (xcd ../test\r\n>  unset GOMAXPROCS\r\n>  time go run run.go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-24 16:55:15.377510",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "By the way, the test was not broken; there was no bitrot. All this\r\nwill get better when go/types is in the main tree and this doublestep\r\ncan be removed.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-24 17:10:12.139620",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're turning this into a major production. I'd rather not\r\nrestructure the build just now.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-24 17:06:11.619690",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d4c3e6c8b141 ***\n\ncmd/vet: clean up the test\n- clean up the notypes version of the test so it's quiet\n- change the package in the buildtag test to avoid confusing godoc\n\nR=golang-dev, minux.ma, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8671049",
			"disapproval": false,
			"date": "2013-04-24 17:40:36.248430",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-24 17:07:30.845820",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dropped the change to run.bash. PTAL.\r\n\r\n-rob\r\n\r\n\r\nOn Wed, Apr 24, 2013 at 10:05 AM, Rob Pike <r@golang.org> wrote:\r\n> You're turning this into a major production. I'd rather not\r\n> restructure the build just now.\r\n>\r\n> -rob\r\n",
			"disapproval": false,
			"date": "2013-04-24 17:07:54.552420",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll tidy this up and attach it to the build after Go 1.1, probably by\r\nwriting a _test.go file that simulates the shell script  I would use\r\nif we only cared about Unix.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-24 17:41:55.227130",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-24 17:08:17.118910",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Not broken? Why doesn't it work for me?\r\n\r\nbradfitz@barbon:~/go/src/cmd/vet$ rm vet\r\nbradfitz@barbon:~/go/src/cmd/vet$ make test_notypes\r\ngo build -tags 'vet_test'\r\n../../../test/errchk ./vet -printfuncs='Warn:1,Warnf:1' *.go *.s\r\nBUG: errchk: test_print.go:80: missing expected error: '\"arg .hi. for\r\nprintf verb %b of wrong type\"'\r\nerrchk: test_print.go:81: missing expected error: '\"arg 2.3 for printf verb\r\n%c of wrong type\"'\r\nerrchk: test_print.go:82: missing expected error: '\"arg 2.3 for printf verb\r\n%d of wrong type\"'\r\nerrchk: test_print.go:83: missing expected error: '\"arg .hi. for printf\r\nverb %e of wrong type\"'\r\nerrchk: test_print.go:84: missing expected error: '\"arg true for printf\r\nverb %E of wrong type\"'\r\nerrchk: test_print.go:85: missing expected error: '\"arg .hi. for printf\r\nverb %f of wrong type\"'\r\nerrchk: test_print.go:86: missing expected error: '\"arg 'x' for printf verb\r\n%F of wrong type\"'\r\nerrchk: test_print.go:87: missing expected error: '\"arg .hi. for printf\r\nverb %g of wrong type\"'\r\nerrchk: test_print.go:88: missing expected error: '\"arg i for printf verb\r\n%G of wrong type\"'\r\nerrchk: test_print.go:89: missing expected error: '\"arg x for printf verb\r\n%o of wrong type\"'\r\nerrchk: test_print.go:90: missing expected error: '\"arg 23 for printf verb\r\n%p of wrong type\"'\r\nerrchk: test_print.go:91: missing expected error: '\"arg x for printf verb\r\n%q of wrong type\"'\r\nerrchk: test_print.go:92: missing expected error: '\"arg b for printf verb\r\n%s of wrong type\"'\r\nerrchk: test_print.go:93: missing expected error: '\"arg 23 for printf verb\r\n%t of wrong type\"'\r\nerrchk: test_print.go:94: missing expected error: '\"arg x for printf verb\r\n%U of wrong type\"'\r\nerrchk: test_print.go:95: missing expected error: '\"arg nil for printf verb\r\n%x of wrong type\"'\r\nerrchk: test_print.go:96: missing expected error: '\"arg 2.3 for printf verb\r\n%X of wrong type\"'\r\nerrchk: test_print.go:97: missing expected error: '\"arg 'x' for printf verb\r\n%g of wrong type\"'\r\nerrchk: test_print.go:108: missing expected error: '\"arg .hi. for \\* in\r\nprintf format not of type int\"'\r\nerrchk: test_print.go:110: missing expected error: '\"arg s for \\* in printf\r\nformat not of type int\"'\r\nerrchk: test_print.go:130: missing expected error: '\"no args in Error call\"'\r\nerrchk: test_print.go:134: missing expected error: '\"no args in Error call\"'\r\n\r\n\r\n\r\n\r\nOn Wed, Apr 24, 2013 at 10:09 AM, Rob Pike <r@golang.org> wrote:\r\n\r\n> By the way, the test was not broken; there was no bitrot. All this\r\n> will get better when go/types is in the main tree and this doublestep\r\n> can be removed.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-24 17:17:35.632060",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI see.",
			"disapproval": false,
			"date": "2013-04-24 17:18:28.261910",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-04-24 17:23:06.199270",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 8671049: cmd/vet: clean up the test",
	"created": "2013-04-24 16:39:51.212320",
	"patchsets": [
		1,
		3001,
		6001,
		10001,
		16001
	],
	"modified": "2013-04-30 15:27:50.770260",
	"closed": true,
	"issue": 8671049
}