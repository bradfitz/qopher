{
	"description": "os/user: group lookup functions\n\nAdding group lookup functions analogous to the user lookup ones to the\nos/user package.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"seed@mail.nanosouffle.net",
		"bradfitz@golang.org",
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/14 17:34:07, rsc wrote:\n> That's fine as long as it is in the per-os file, so that other systems\n> with better interfaces can do better.\n\nOk, new patch set uploaded.\n\nThanks,\nAndre",
			"disapproval": false,
			"date": "2011-06-14 18:11:18.212826",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-12 06:13:52.189662",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jun 14, 2011 at 13:09,  <andrenth@gmail.com> wrote:\n> On 2011/06/14 15:38:54, rsc wrote:\n>>\n>> Shouldn't there be a 'is this user in this group' function?\n>> 99% of the time you don't care about the member list,\n>> you just care about that question.\n>\n> I can add something like this to the patch (untested):\n>\n> func (u *User) IsInGroup(groupname string) (bool, os.Error) {\n> \u00a0 \u00a0g, err := user.LookupGroup(groupname)\n> \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0return false, err\n> \u00a0 \u00a0}\n> \u00a0 \u00a0if u.Gid == g.Gid {\n> \u00a0 \u00a0 \u00a0 \u00a0return true, nil\n> \u00a0 \u00a0}\n> \u00a0 \u00a0members, err = g.Members()\n> \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0return false, err\n> \u00a0 \u00a0}\n> \u00a0 \u00a0for _, member := range members {\n> \u00a0 \u00a0 \u00a0 \u00a0if u.Username == member {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true, nil\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0}\n> \u00a0 \u00a0return false, nil\n> }\n>\n> What do you think?\n\nfunc (u *User) In(g *Group) (bool, os.Error)\n\nseems better.  But more importantly, the implementation\nshould not just range over the member list.\nIt should avoid retrieving the member list if at all possible.\n",
			"disapproval": false,
			"date": "2011-06-14 17:14:46.653679",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jun 14, 2011 at 13:32,  <andrenth@gmail.com> wrote:\n> On 2011/06/14 17:14:46, rsc wrote:\n>>\n>> func (u *User) In(g *Group) (bool, os.Error)\n>\n>> seems better. \u00a0But more importantly, the implementation\n>> should not just range over the member list.\n>> It should avoid retrieving the member list if at all possible.\n>\n> Well, I'm doing it this way because the list of members comes from\n> struct group's gr_mem member. I'm not aware of a C library function that\n> allows a direct query without retrieving the list.\n\nThat's fine as long as it is in the per-os file, so that other systems\nwith better interfaces can do better.\n",
			"disapproval": false,
			"date": "2011-06-14 17:34:07.644946",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4589049/diff/4001/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4589049/diff/4001/src/pkg/os/user/user.go#newcode24\nsrc/pkg/os/user/user.go:24: Members   []string\nI think Members should probably a method on *Group, rather than populated by lookup.  The members list could be huge, and it should be possible to purely do a name<->gid lookup, without the extra member lookup cost.",
			"disapproval": false,
			"date": "2011-06-13 16:46:37.852919",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/13 16:46:37, bradfitz wrote:\n> I think Members should probably a method on *Group, rather than populated by\n> lookup.  The members list could be huge, and it should be possible to purely do\n> a name<->gid lookup, without the extra member lookup cost.\n\nOk, the latest patch does that. I also did some refactoring to avoid code duplication.\n\nIn the patch, the Members method returns a []string. Do you think it should return []*User instead, ie, calling user.Lookup for each group member?\n\nThanks,\nAndre",
			"disapproval": false,
			"date": "2011-06-13 20:29:46.178827",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Shouldn't there be a 'is this user in this group' function?\n99% of the time you don't care about the member list,\nyou just care about that question.\n",
			"disapproval": false,
			"date": "2011-06-14 15:38:54.366425",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/14 15:38:54, rsc wrote:\n> Shouldn't there be a 'is this user in this group' function?\n> 99% of the time you don't care about the member list,\n> you just care about that question.\n\nI can add something like this to the patch (untested):\n\nfunc (u *User) IsInGroup(groupname string) (bool, os.Error) {\n    g, err := user.LookupGroup(groupname)\n    if err != nil {\n        return false, err\n    }\n    if u.Gid == g.Gid {\n        return true, nil\n    }\n    members, err = g.Members()\n    if err != nil {\n        return false, err\n    }\n    for _, member := range members {\n        if u.Username == member {\n            return true, nil\n        }\n    }\n    return false, nil\n}\n\nWhat do you think?\n\nThanks,\nAndre",
			"disapproval": false,
			"date": "2011-06-14 17:09:18.616460",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/14 17:14:46, rsc wrote:\n> func (u *User) In(g *Group) (bool, os.Error)\n> \n> seems better.  But more importantly, the implementation\n> should not just range over the member list.\n> It should avoid retrieving the member list if at all possible.\n\nWell, I'm doing it this way because the list of members comes from struct group's gr_mem member. I'm not aware of a C library function that allows a direct query without retrieving the list.",
			"disapproval": false,
			"date": "2011-06-14 17:32:21.930765",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jun 14, 2011 at 10:32 AM, <andrenth@gmail.com> wrote:\n\n> On 2011/06/14 17:14:46, rsc wrote:\n>\n>> func (u *User) In(g *Group) (bool, os.Error)\n>>\n>\n>  seems better.  But more importantly, the implementation\n>> should not just range over the member list.\n>> It should avoid retrieving the member list if at all possible.\n>>\n>\n> Well, I'm doing it this way because the list of members comes from\n> struct group's gr_mem member. I'm not aware of a C library function that\n> allows a direct query without retrieving the list.\n>\n\ngetgroups?\ngetgrouplist?\n",
			"disapproval": false,
			"date": "2011-06-14 18:02:08.213171",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/14 18:02:08, bradfitz wrote:\n> getgroups?\n\nThis returns a list of groups for the calling process, not for a user.\n\n> getgrouplist?\n\nThis returns a list of groups, so I don't think there's an advantage over just using the gr_mem field.",
			"disapproval": false,
			"date": "2011-06-14 18:10:30.083970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": ">> getgrouplist?\n>\n> This returns a list of groups, so I don't think there's an advantage\n> over just using the gr_mem field.\n\nThere is if the number of groups the user is in\nis significantly less than the number of users\nin the group.\n\nTypically group membership lists get much\nbigger than user membership lists.  Using getgrouplist\nmakes sense to me.\n",
			"disapproval": false,
			"date": "2011-06-14 18:12:34.245249",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/14 18:12:34, rsc wrote:\n> There is if the number of groups the user is in\n> is significantly less than the number of users\n> in the group.\n> \n> Typically group membership lists get much\n> bigger than user membership lists.  Using getgrouplist\n> makes sense to me.\n\nI have the patch using getgrouplist() ready, but unless I misunderstood how getgrouplist() works, I'm still not sure it's the best solution.\n\nThe gr_mem solution has to scan the user database looking for the user, then scan the member list to build gr_mem, and then in Go we scan it again to check for membership. So the time it takes to run depends on the size of the group database and the number of members of the given group.\n\nThe getgrouplist() function has to scan the member list of every group to search for the ones which have the user as a member and build the group list, and then in Go we scan it to check if the requested group is in the list. Therefore the time it takes to run depends on the size of the group database and the number of members of *every* group, and those numbers, as you mention, can be big.\n\nIf the getgrouplist() is still preferred, though, I'll upload the patch right away.\n\nThanks,\nAndre",
			"disapproval": false,
			"date": "2011-06-14 20:35:55.667948",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "New patch set uploaded.",
			"disapproval": false,
			"date": "2011-06-14 20:54:16.121889",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> The getgrouplist() function has to scan the member list of every group\n> to search for the ones which have the user as a member and build the\n> group list, and then in Go we scan it to check if the requested group is\n> in the list. Therefore the time it takes to run depends on the size of\n> the group database and the number of members of *every* group, and those\n> numbers, as you mention, can be big.\n\nYou have described one possible implementation.\nAnother possible implementation is to keep both\nkinds of lists (user->[group], group->[user]) in the\ndatabase, keep them in sync, and use only the\none that is needed to satisfy a particular request.\n\nI believe the grp.h routines use a processed, cached\ncopy of /etc/group when they use that file, so no\nproblem there.  Also, if they are querying remote\nuser databases, getgrouplist has the potential to\nbe much faster.\n\nPut another way, getgrouplist is what login uses:\nit's going to have a good implementation.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-06-14 20:42:12.817541",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "By the way, the User type defines Uid and Gid as ints (I did the same for Group in the patch sets). Wouldn't it be more correct to redefined them as uints?\n\nBest regards,\nAndre",
			"disapproval": false,
			"date": "2011-06-16 12:53:08.102961",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Sorry for the slow review.\n\nhttp://codereview.appspot.com/4589049/diff/11006/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4589049/diff/11006/src/pkg/os/user/lookup_unix.go#newcode70\nsrc/pkg/os/user/lookup_unix.go:70: nameC := C.CString(u.Username)\nthink you're missing a free here.  see below:\n\ndefer C.free(unsafe.Pointer(nameC))\n\nhttp://codereview.appspot.com/4589049/diff/11006/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4589049/diff/11006/src/pkg/os/user/user.go#newcode21\nsrc/pkg/os/user/user.go:21: type Group struct {\nall exported types and variables need a comment\n\nhttp://codereview.appspot.com/4589049/diff/11006/src/pkg/os/user/user.go#newcode23\nsrc/pkg/os/user/user.go:23: Groupname string\nNot sure about this.  It's consistent with User, but \"username\" is logically a single word (in common unix/C speak), but I don't think \"groupname\" is a thing, so \"Groupname\" looks funny.\n\nJust Name perhaps?  Any future \"full name\" could just be called \"Description\" or something if that got added in the future.",
			"disapproval": false,
			"date": "2011-06-22 18:33:08.844028",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi\n\nOn 2011/06/22 18:33:08, bradfitz wrote:\n> think you're missing a free here\n\n> all exported types and variables need a comment\n\n> \"Groupname\" looks funny.\n\nThe lastest patch set fixes those. I also prefer \"Name\" instead of Groupname but initially I thought it would be better to be consistent with the User type. Just \"Name\" reads much better though.\n\nRegards,\nAndre",
			"disapproval": false,
			"date": "2011-06-22 20:46:09.781569",
			"approval": false
		},
		{
			"sender": "russross@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"russross@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "The Linux implementation here requires two calls to getgrgid_r to retrieve a list of group members (once to get the group, another to satisfy the Members call).  This seems a little silly since getgrgid_r returns the full list of members both times.  I understand Russ Cox's point (Hi Russ) about large groups, especially in environments with large LDAP setups.  Still, it would be nice to avoid repeating the call when it isn't necessary.\n\nWhat about an unexported field in Group to hold the member list when it happens to be available?  Then Members would just return it.  This would permit a flexible interface but also keep things simple on simple systems.\n\nI don't know what getgrnam_r does when the list is too big to fit in a 1024-byte buffer (return ERANGE?), but it could fall back to an explicit call to satisfy Members in that instance.  Semantically, a cached list would be a little different than the current code: if the  group list changes between the two calls, the current solution could retrieve the updated list while the proposed change would get a stale copy.  This doesn't seem like a big concern to me, especially if possible races are documented from the beginning.",
			"disapproval": false,
			"date": "2011-07-08 17:31:29.588846",
			"approval": false
		},
		{
			"sender": "andrenth@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Jul 8, 2011 at 2:31 PM,  <russross@gmail.com> wrote:\n> The Linux implementation here requires two calls to getgrgid_r to\n> retrieve a list of group members (once to get the group, another to\n> satisfy the Members call). \u00a0This seems a little silly since getgrgid_r\n> returns the full list of members both times. \u00a0I understand Russ Cox's\n> point (Hi Russ) about large groups, especially in environments with\n> large LDAP setups. \u00a0Still, it would be nice to avoid repeating the call\n> when it isn't necessary.\n>\n> What about an unexported field in Group to hold the member list when it\n> happens to be available? \u00a0Then Members would just return it. \u00a0This would\n> permit a flexible interface but also keep things simple on simple\n> systems.\n>\n> I don't know what getgrnam_r does when the list is too big to fit in a\n> 1024-byte buffer (return ERANGE?), but it could fall back to an explicit\n> call to satisfy Members in that instance. \u00a0Semantically, a cached list\n> would be a little different than the current code: if the \u00a0group list\n> changes between the two calls, the current solution could retrieve the\n> updated list while the proposed change would get a stale copy. \u00a0This\n> doesn't seem like a big concern to me, especially if possible races are\n> documented from the beginning.\n\nYes, I guess ERANGE would be returned\n(http://pubs.opengroup.org/onlinepubs/9699919799/functions/getgrgid.html),\nat which point we could retry with a larger buffer.\n\nI guess the options are either to avoid getting the member list twice\nor to avoid keeping it in memory when we might not even use it. If\nit's decided to always keep it in memory, I believe it would be\nclearer if Members was a field in the Group struct and not a method.\nAccessing \"g.Members\" would make it clear that we're getting the list\nof members from when g was initialized, while \"g.Members()\" feels like\nsaying \"give me the list of members of g at this moment\", and the\npossibility of getting an outdated list seems confusing.\n",
			"disapproval": false,
			"date": "2011-07-09 03:23:47.163422",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"andrenth@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:52:13.369296",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"andrenth@gmail.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi, what's the status of this? Was this dropped for some reason? Are there other attempts?\n\nThanks",
			"disapproval": false,
			"date": "2013-02-28 22:01:51.424110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it was simply forgotten.\r\n\r\nAlex, any comments on its interface?  Is it too simplistic to represent\r\nWindows groups?\r\n\r\nOn Thu, Feb 28, 2013 at 2:01 PM, <seed@mail.nanosouffle.net> wrote:\r\n\r\n> Hi, what's the status of this? Was this dropped for some reason? Are\r\n> there other attempts?\r\n>\r\n> Thanks\r\n>\r\n>\r\n> https://codereview.appspot.**com/4589049/<https://codereview.appspot.com/4589049/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-01 00:34:33.003870",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"andrenth@gmail.com",
				"seed@mail.nanosouffle.net",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 00:34:33, bradfitz wrote:\n> \n> Alex, any comments on its interface?  Is it too simplistic to represent\n> Windows groups?\n> \n\nI don't know how useful it is. But what you have so far, is, probably, doable on windows. Maybe no easy, but I cannot tell until I tried.\n\nAlex\n\nhttps://codereview.appspot.com/4589049/diff/24001/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttps://codereview.appspot.com/4589049/diff/24001/src/pkg/os/user/lookup_unix.go#newcode108\nsrc/pkg/os/user/lookup_unix.go:108: func LookupGroupId(gid int) (*Group, os.Error) {\ns/int/string/\n\nhttps://codereview.appspot.com/4589049/diff/24001/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttps://codereview.appspot.com/4589049/diff/24001/src/pkg/os/user/user.go#newcode23\nsrc/pkg/os/user/user.go:23: Gid  int    // group id\nMake it string, like User.Gid.\n\nhttps://codereview.appspot.com/4589049/diff/24001/src/pkg/os/user/user_test.go\nFile src/pkg/os/user/user_test.go (right):\n\nhttps://codereview.appspot.com/4589049/diff/24001/src/pkg/os/user/user_test.go#newcode69\nsrc/pkg/os/user/user_test.go:69: gid := syscall.Getgid()\nThis is not \"cross-platform\".",
			"disapproval": false,
			"date": "2013-03-01 00:54:33.590270",
			"approval": false
		}
	],
	"owner_email": "andrenth@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andre",
	"subject": "code review 4589049: os/user: group lookup functions",
	"created": "2011-06-12 05:43:15.531799",
	"patchsets": [
		1,
		2001,
		4001,
		10001,
		15001,
		11006,
		24001
	],
	"modified": "2013-03-01 00:54:33.590270",
	"closed": false,
	"issue": 4589049
}