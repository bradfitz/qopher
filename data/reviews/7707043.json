{
	"description": "spec: remove special int rule for shifts\n\nThe rule is not concistently followed by gc.\nIt appears that gccgo is ignoring it. go/types\ndoes not implement this rule. However, both\ngccgo and now go/types can compile/type-check\nthe entire std library (and thus all the shift\nexpressions occuring in it) w/o errors. For\nmore details see the discussion in issue 4883.\n\nFixes issue 4880.\nFixes issue 4881.\nFixes issue 4883.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"ken@google.com",
		"mtj@google.com",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"mtj@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d3769aeaeaf1 ***\n\nspec: remove special int rule for shifts\n\nThe rule is not concistently followed by gc.\nIt appears that gccgo is ignoring it. go/types\ndoes not implement this rule. However, both\ngccgo and now go/types can compile/type-check\nthe entire std library (and thus all the shift\nexpressions occuring in it) w/o errors. For\nmore details see the discussion in issue 4883.\n\nFixes issue 4880.\nFixes issue 4881.\nFixes issue 4883.\n\nR=rsc, r, iant, ken, ken, mtj, rogpeppe\nCC=golang-dev\nhttps://codereview.appspot.com/7707043",
			"disapproval": false,
			"date": "2013-03-15 20:55:54.675630",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-11 16:51:26.573560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, nervously",
			"disapproval": false,
			"date": "2013-03-12 17:55:00.383870",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I read this CL and the longer note at golang.org/issue/4883 and I still\r\ndon't understand the implications.\r\n\r\nI am inclined to postpone this until after Go 1.1. I am starting to believe\r\nthat shift is something we will never get right until someone comes along\r\nand does some kind of formal analysis of the implications. At least for Go\r\n1.1 I'd rather live with the devil we know.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-13 17:35:32.935940",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i agree. we can never get shifts right.\r\n(or even left.)\r\n\r\n\r\n\r\nOn Wed, Mar 13, 2013 at 10:35 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I read this CL and the longer note at golang.org/issue/4883 and I still\r\n> don't understand the implications.\r\n>\r\n> I am inclined to postpone this until after Go 1.1. I am starting to\r\n> believe that shift is something we will never get right until someone comes\r\n> along and does some kind of formal analysis of the implications. At least\r\n> for Go 1.1 I'd rather live with the devil we know.\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-13 19:57:55.779350",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Erasing this sentence will fix several issues, as outlined in the CL.\r\n\r\nA quick reminder: This only matters for non-constant shifts where the lhs\r\noperand in the shift is an untyped constant. The sentence/rule in question\r\n- let's call it \"rule S\", says that if such a shift operation is used in a\r\nsituation w/o context, e.g. a comparison, the type of the shifted operand\r\nis assumed to be int.\r\n\r\nThe sooner we this rule, the better.\r\n\r\nHere are the concrete examples (similar ones are strewn though the issues\r\n4880, 4881, 4882, 4883). Assume \"var s uint\":\r\n\r\n1) _ = 1.0<<s == 1\r\n\r\n- accepted by gc\r\n- not accepted by ggcgo: invalid context-determined non-integer type for\r\nleft operand of shift\r\n- not accepted by go/types: invalid operation: shifted operand 1.0 (type\r\nuntyped float) must be integer (this error message should be better)\r\n\r\nAnalysis: gc appears to accept his _possibly_ because the shift is an\r\noperand in a comparison and thus has \"no context\" per rule S to determine\r\nthe operand type and so the 1.0 is an int.\r\n\r\n2) _ = 1.0<<s == 1.0\r\n\r\n- not accepted by gc: invalid operation: 1 << s (shift of type float64)\r\n- not accepted by ggcgo: shift of non-integer operand\r\n- not accepted by go/types: shifted operand 1.0 (type untyped float) must\r\nbe integer\r\n\r\nAnalysis: Despite rule S - the shift is an operand in a comparison and thus\r\nhas \"no context\", the 1.0 in the shift becomes a float64. gc appears to\r\nignore rule S in this case and use the rhs of the == as \"context\".\r\n\r\n3) _ = 1<<s == 1.0\r\n\r\n- not accepted by gc: invalid operation: 1 << s (shift of type float64)\r\n- not accepted by gccgo: invalid context-determined non-integer type for\r\nleft operand of shift\r\n- not accepted by go.types: shifted operand 1 (type untyped float) must be\r\ninteger (again, this error message should be better)\r\n\r\nAnalysis: Again, despite rule S, gc does not accept this code. The error\r\nmessage indicates that the type of 1 on the lhs is indeed depending on\r\ncontext, namely the rhs of the ==.\r\n\r\n4) _ = 1<<s + 1.0 == 1\r\n\r\n- accepted by gc\r\n- not accepted by gccgo: invalid context-determined non-integer type for\r\nleft operand of shift\r\n- not accepted by go/types: shifted operand 1 (type untyped float) must be\r\ninteger\r\n\r\nAnalysis: gc appears to implement rule S here: the entire lhs is treated as\r\nint - despite the addition of the floating-point constant 1.0.\r\n\r\n5) _ = 1<<s + 1.1 == 1\r\n\r\n- not accepted by gc: constant 1.1 truncated to integer\r\n- not accepted by gccgo: invalid context-determined non-integer type for\r\nleft operand of shift\r\n- not accepted by go/types: shifted operand 1 (type untyped float) must be\r\ninteger\r\n\r\nAnalysis: gc appears to implement rule S to determine the error: The shift\r\nis an operand in an addition of 1.1, and so it claims that 1.1 cannot be\r\ntruncated to integer. The real error should be that the shift cannot shift\r\na float64, if we accept rule S.\r\n\r\n6) _ = 1<<s + 1 == 1.0\r\n\r\n- not accepted by gc: 1 << s (shift of type float64)\r\n- not accepted by gccgo: invalid context-determined non-integer type for\r\nleft operand of shift\r\n- not accepted by go/types: shifted operand 1 (type untyped float) must be\r\ninteger\r\n\r\nAnalysis: Here gc abandons rule S again (like in 2) and appears to make the\r\ndecision based on comparison context.\r\n\r\nIn summary, gc is inconsistent w/ respect to rule S. Both gc, and go/types\r\ndo fine w/o it. Both of them type-check the std lib w/o errors, so rule S\r\nhas no bearing on that code.\r\n\r\nI believe gc's shift checking is simply incorrect. Furthermore, rule S is\r\nnot required to make a reasonable and consistent (with all other\r\noperations) decision about the type of untyped shift operands. More\r\nimportantly: An operand of the form c << s is no different from and operand\r\nc alone (where c is an untyped constant). The spec already has rules for\r\nthe type c assumes depending on \"context\". Rule S's reference to situations\r\nwhere there is \"no context\" _does_not_exist_ - otherwise we would have the\r\nproblem even w/o shifts.\r\n\r\nAs an aside, type-checking shifts turns out to be less difficult then it\r\nmight seem. The algorithm used in go/types is as follows: When\r\ntype-checking a shift c<<s expression, the type of a shift is the type of\r\nthe lhs of the shift (c) \"as if the shift where not present\" - like the\r\nspec requires. That is, it type-checks the tree using c instead of\r\nc<<s. The type-checker simply remembers that lhs for later (again, this\r\nonly matters for untyped lhs). Once the entire expression is \"used\"\r\n(assigned, used in a comparison, as index, etc.) the final (not untyped)\r\ntype of the expression is known. That type is simply propagated down the\r\nexpression tree again and thus determines the final type of such a lhs. If\r\nat that point the lhs is not an integer type, the shift fails and an error\r\nis reported. This is exactly the observed behavior in all the examples\r\nabove for gccgo and go/types.\r\n\r\n- gri\r\n\r\n\r\nOn Wed, Mar 13, 2013 at 10:35 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I read this CL and the longer note at golang.org/issue/4883 and I still\r\n> don't understand the implications.\r\n>\r\n> I am inclined to postpone this until after Go 1.1. I am starting to\r\n> believe that shift is something we will never get right until someone comes\r\n> along and does some kind of formal analysis of the implications. At least\r\n> for Go 1.1 I'd rather live with the devil we know.\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-13 21:15:25.267960",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 13, 2013 at 12:57 PM, Ken Thompson <ken@google.com> wrote:\r\n\r\n> i agree. we can never get shifts right.\r\n> (or even left.)\r\n>\r\n\r\n...ta dum!  http://instantrimshot.com/  ;-)\r\n\r\nI know that none of you are looking to redefine meaning of shifts rather\r\nthan refine the explaining of the meaning of shifts, but in the context of\r\nGo's \"infinite precision\" constants, why not describe (and understand) \"a\r\n<< b\" as a * 2**b, so that discomfort about floats in this context would\r\ndisappear and definitions of sufficient clarity to explain why 1.0<<3 is an\r\nint need not be conjured from the dark realms.\r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-13 22:06:41.864010",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Michael;\r\n\r\nIn Go, \"a<<b\" is exactly defined as \"a * 2**b\" . If a and b are constant,\r\nthe result will be exact (up to some limit at which point a shift is simply\r\nconsidered \"stupid\"). Otherwise, the same operation takes place, but it\r\nwill overflow per the rules of fixed-with two's complement integer\r\narithmetic.\r\n\r\nThe issue in question here has to do with the concrete type given to\r\nuntyped constants in situations where a is an untyped constant, and b is\r\nnot constant.\r\n\r\n- gri\r\n\r\n\r\nOn Wed, Mar 13, 2013 at 3:06 PM, Michael Jones <mtj@google.com> wrote:\r\n\r\n>\r\n> On Wed, Mar 13, 2013 at 12:57 PM, Ken Thompson <ken@google.com> wrote:\r\n>\r\n>> i agree. we can never get shifts right.\r\n>> (or even left.)\r\n>>\r\n>\r\n> ...ta dum!  http://instantrimshot.com/  ;-)\r\n>\r\n> I know that none of you are looking to redefine meaning of shifts rather\r\n> than refine the explaining of the meaning of shifts, but in the context of\r\n> Go's \"infinite precision\" constants, why not describe (and understand) \"a\r\n> << b\" as a * 2**b, so that discomfort about floats in this context would\r\n> disappear and definitions of sufficient clarity to explain why 1.0<<3 is an\r\n> int need not be conjured from the dark realms.\r\n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n> 650-335-5765\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-13 22:17:37.377980",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "...so why is 1.0<<s unhappy. (i.e., if the story is \"time two to the N\"\r\nthen why agonize about \"but the left shift instruction only works on ints\")\r\n\r\n\r\nOn Wed, Mar 13, 2013 at 3:17 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> Michael;\r\n>\r\n> In Go, \"a<<b\" is exactly defined as \"a * 2**b\" . If a and b are constant,\r\n> the result will be exact (up to some limit at which point a shift is simply\r\n> considered \"stupid\"). Otherwise, the same operation takes place, but it\r\n> will overflow per the rules of fixed-with two's complement integer\r\n> arithmetic.\r\n>\r\n> The issue in question here has to do with the concrete type given to\r\n> untyped constants in situations where a is an untyped constant, and b is\r\n> not constant.\r\n>\r\n> - gri\r\n>\r\n>\r\n> On Wed, Mar 13, 2013 at 3:06 PM, Michael Jones <mtj@google.com> wrote:\r\n>\r\n>>\r\n>> On Wed, Mar 13, 2013 at 12:57 PM, Ken Thompson <ken@google.com> wrote:\r\n>>\r\n>>> i agree. we can never get shifts right.\r\n>>> (or even left.)\r\n>>>\r\n>>\r\n>> ...ta dum!  http://instantrimshot.com/  ;-)\r\n>>\r\n>> I know that none of you are looking to redefine meaning of shifts rather\r\n>> than refine the explaining of the meaning of shifts, but in the context of\r\n>> Go's \"infinite precision\" constants, why not describe (and understand) \"a\r\n>> << b\" as a * 2**b, so that discomfort about floats in this context would\r\n>> disappear and definitions of sufficient clarity to explain why 1.0<<3 is an\r\n>> int need not be conjured from the dark realms.\r\n>> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n>> 650-335-5765\r\n>>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-13 23:04:54.355740",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "1.0 << s is not unhappy, per se. But 1.0 << s is unhappy if 1.0 is\r\nmaterialized as a floating point value, because shifts are not defined for\r\nfloating point values (the latter of which is pretty straight-forward).\r\n\r\nThe question at hand is why is 1.0 materialized as a floating-point value\r\nin this case (after all, it's just an untyped number, and an integer as\r\nsuch). We have reasonably clear and consistent rules about the type an\r\nuntyped constant assumes when it is used in an expression or assigned to a\r\nvariable, or used in some other context (say as an index). For instance, in\r\n\"x := 1.0\" the 1.0 materializes (for a compiler, anyway) as a floating\r\npoint value (and the type of x is float64). But in \"var x int = 1.0\", the\r\n1.0 materializes as an int.\r\n\r\nThe very same rules apply for shifts (the lhs of shifts, anyway), except\r\nthat there is a special rule (I call it \"rule S\"), that if the shift is\r\nused in a comparison, the usual rules don't apply anymore, but instead the\r\nshift operand is materialized as an int (or an error is reported if that's\r\nnot possible). Note that rule S only applies to non-constant shifts with\r\nconstant untyped lhs.\r\n\r\nThis very rule is not needed in my mind, and both gccgo and go/types ignore\r\nit and typecheck all shifts in the std lib w/o trouble. gc appears to\r\nfollow it sometimes, and sometimes not. There is no good reason for rule S,\r\nand no need to make the spec more complicated. In fact, if rule S were\r\nneeded, it would even be needed w/o shifts, because lhs shift operands are\r\ntype checked \"as if the shift were not present\" - this is the most\r\ncompelling argument against rule S in my mind.\r\n\r\nThis CL simply proposes to remove rule S - which evidently is not properly\r\nunderstood in the first place, nor correctly implemented, nor required.\r\n\r\nHope that helps;\r\n- gri\r\n\r\n\r\n\r\nOn Wed, Mar 13, 2013 at 4:04 PM, Michael Jones <mtj@google.com> wrote:\r\n\r\n> ...so why is 1.0<<s unhappy. (i.e., if the story is \"time two to the N\"\r\n> then why agonize about \"but the left shift instruction only works on ints\")\r\n>\r\n>\r\n> On Wed, Mar 13, 2013 at 3:17 PM, Robert Griesemer <gri@golang.org> wrote:\r\n>\r\n>> Michael;\r\n>>\r\n>> In Go, \"a<<b\" is exactly defined as \"a * 2**b\" . If a and b are\r\n>> constant, the result will be exact (up to some limit at which point a shift\r\n>> is simply considered \"stupid\"). Otherwise, the same operation takes place,\r\n>> but it will overflow per the rules of fixed-with two's complement integer\r\n>> arithmetic.\r\n>>\r\n>> The issue in question here has to do with the concrete type given to\r\n>> untyped constants in situations where a is an untyped constant, and b is\r\n>> not constant.\r\n>>\r\n>> - gri\r\n>>\r\n>>\r\n>> On Wed, Mar 13, 2013 at 3:06 PM, Michael Jones <mtj@google.com> wrote:\r\n>>\r\n>>>\r\n>>> On Wed, Mar 13, 2013 at 12:57 PM, Ken Thompson <ken@google.com> wrote:\r\n>>>\r\n>>>> i agree. we can never get shifts right.\r\n>>>> (or even left.)\r\n>>>>\r\n>>>\r\n>>> ...ta dum!  http://instantrimshot.com/  ;-)\r\n>>>\r\n>>> I know that none of you are looking to redefine meaning of shifts rather\r\n>>> than refine the explaining of the meaning of shifts, but in the context of\r\n>>> Go's \"infinite precision\" constants, why not describe (and understand) \"a\r\n>>> << b\" as a * 2**b, so that discomfort about floats in this context would\r\n>>> disappear and definitions of sufficient clarity to explain why 1.0<<3 is an\r\n>>> int need not be conjured from the dark realms.\r\n>>> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n>>> 650-335-5765\r\n>>>\r\n>>\r\n>>\r\n>\r\n>\r\n> --\r\n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n> 650-335-5765\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-14 00:19:53.436640",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks!\r\n\r\n\r\nOn Wed, Mar 13, 2013 at 5:19 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> 1.0 << s is not unhappy, per se. But 1.0 << s is unhappy if 1.0 is\r\n> materialized as a floating point value, because shifts are not defined for\r\n> floating point values (the latter of which is pretty straight-forward).\r\n>\r\n> The question at hand is why is 1.0 materialized as a floating-point value\r\n> in this case (after all, it's just an untyped number, and an integer as\r\n> such). We have reasonably clear and consistent rules about the type an\r\n> untyped constant assumes when it is used in an expression or assigned to a\r\n> variable, or used in some other context (say as an index). For instance, in\r\n> \"x := 1.0\" the 1.0 materializes (for a compiler, anyway) as a floating\r\n> point value (and the type of x is float64). But in \"var x int = 1.0\", the\r\n> 1.0 materializes as an int.\r\n>\r\n> The very same rules apply for shifts (the lhs of shifts, anyway), except\r\n> that there is a special rule (I call it \"rule S\"), that if the shift is\r\n> used in a comparison, the usual rules don't apply anymore, but instead the\r\n> shift operand is materialized as an int (or an error is reported if that's\r\n> not possible). Note that rule S only applies to non-constant shifts with\r\n> constant untyped lhs.\r\n>\r\n> This very rule is not needed in my mind, and both gccgo and go/types\r\n> ignore it and typecheck all shifts in the std lib w/o trouble. gc appears\r\n> to follow it sometimes, and sometimes not. There is no good reason for rule\r\n> S, and no need to make the spec more complicated. In fact, if rule S were\r\n> needed, it would even be needed w/o shifts, because lhs shift operands are\r\n> type checked \"as if the shift were not present\" - this is the most\r\n> compelling argument against rule S in my mind.\r\n>\r\n> This CL simply proposes to remove rule S - which evidently is not properly\r\n> understood in the first place, nor correctly implemented, nor required.\r\n>\r\n> Hope that helps;\r\n> - gri\r\n>\r\n>\r\n>\r\n> On Wed, Mar 13, 2013 at 4:04 PM, Michael Jones <mtj@google.com> wrote:\r\n>\r\n>> ...so why is 1.0<<s unhappy. (i.e., if the story is \"time two to the N\"\r\n>> then why agonize about \"but the left shift instruction only works on ints\")\r\n>>\r\n>>\r\n>> On Wed, Mar 13, 2013 at 3:17 PM, Robert Griesemer <gri@golang.org> wrote:\r\n>>\r\n>>> Michael;\r\n>>>\r\n>>> In Go, \"a<<b\" is exactly defined as \"a * 2**b\" . If a and b are\r\n>>> constant, the result will be exact (up to some limit at which point a shift\r\n>>> is simply considered \"stupid\"). Otherwise, the same operation takes place,\r\n>>> but it will overflow per the rules of fixed-with two's complement integer\r\n>>> arithmetic.\r\n>>>\r\n>>> The issue in question here has to do with the concrete type given to\r\n>>> untyped constants in situations where a is an untyped constant, and b is\r\n>>> not constant.\r\n>>>\r\n>>> - gri\r\n>>>\r\n>>>\r\n>>> On Wed, Mar 13, 2013 at 3:06 PM, Michael Jones <mtj@google.com> wrote:\r\n>>>\r\n>>>>\r\n>>>> On Wed, Mar 13, 2013 at 12:57 PM, Ken Thompson <ken@google.com> wrote:\r\n>>>>\r\n>>>>> i agree. we can never get shifts right.\r\n>>>>> (or even left.)\r\n>>>>>\r\n>>>>\r\n>>>> ...ta dum!  http://instantrimshot.com/  ;-)\r\n>>>>\r\n>>>> I know that none of you are looking to redefine meaning of shifts\r\n>>>> rather than refine the explaining of the meaning of shifts, but in the\r\n>>>> context of Go's \"infinite precision\" constants, why not describe (and\r\n>>>> understand) \"a << b\" as a * 2**b, so that discomfort about floats in this\r\n>>>> context would disappear and definitions of sufficient clarity to explain\r\n>>>> why 1.0<<3 is an int need not be conjured from the dark realms.\r\n>>>> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n>>>> 650-335-5765\r\n>>>>\r\n>>>\r\n>>>\r\n>>\r\n>>\r\n>> --\r\n>> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n>> 650-335-5765\r\n>>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-14 00:47:25.331260",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 14 March 2013 00:19, Robert Griesemer <gri@golang.org> wrote:\r\n> The question at hand is why is 1.0 materialized as a floating-point value in\r\n> this case (after all, it's just an untyped number, and an integer as such).\r\n\r\noff topic, but perhaps related. i'd love it if 0.1 * time.Second could work.\r\n",
			"disapproval": false,
			"date": "2013-03-14 13:14:48.157390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"mtj@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7707043/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7707043/diff/5001/doc/go_spec.html#newcode2920\ndoc/go_spec.html:2920: var u = 1.0&lt;&lt;s         // illegal: 1.0 has type float64, cannot shift\nPlease add these:\n\nvar u1 = 1.0&lt;&lt;s != 0  // illegal: 1.0 has type float64, cannot shift\nvar u2 = 1&lt;&lt;s != 1.0  // illegal: 1 has type float64, cannot shift",
			"disapproval": false,
			"date": "2013-03-15 06:02:06.528520",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"mtj@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. Ian?\n\nhttps://codereview.appspot.com/7707043/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7707043/diff/5001/doc/go_spec.html#newcode2920\ndoc/go_spec.html:2920: var u = 1.0&lt;&lt;s         // illegal: 1.0 has type float64, cannot shift\nOn 2013/03/15 06:02:06, rsc wrote:\n> Please add these:\n> \n> var u1 = 1.0&lt;&lt;s != 0  // illegal: 1.0 has type float64, cannot shift\n> var u2 = 1&lt;&lt;s != 1.0  // illegal: 1 has type float64, cannot shift\n\nDone.",
			"disapproval": false,
			"date": "2013-03-15 18:50:55.496920",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"mtj@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease add some test cases to test/shift1.go and test/shift2.go.",
			"disapproval": false,
			"date": "2013-03-15 20:21:56.652200",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7707043: spec: remove special int rule for shifts",
	"created": "2013-03-11 16:49:51.291740",
	"patchsets": [
		1,
		2001,
		5001,
		22001,
		26001,
		21002,
		21003,
		29001
	],
	"modified": "2013-03-15 20:58:11.151530",
	"closed": true,
	"issue": 7707043
}