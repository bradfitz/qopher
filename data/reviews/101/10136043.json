{
	"description": "runtime: refactor mallocgc\nMake it accept type, combine flags.\nSeveral reasons for the change:\n1. mallocgc and settype must be atomic wrt GC\n2. settype is called from only one place now\n3. it will help performance (eventually settype\nfunctionality must be combined with markallocated)\n4. flags are easier to read now (no mallocgc(sz, 0, 1, 0) anymore)",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"nightlyone@googlemail.com",
		"rsc@golang.org",
		"dave@cheney.net",
		"khr@golang.org",
		"bradfitz@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-09 17:08:58.110410",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10136043/diff/5001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/10136043/diff/5001/src/pkg/runtime/malloc.goc#newcode769\nsrc/pkg/runtime/malloc.goc:769: m->locks++;  // disable preemption to not expose the memory block w/o type info to GC\nThis means that the call to mallocgc will not do a GC.  That doesn't seem right, here or below.",
			"disapproval": false,
			"date": "2013-06-10 17:31:20.437080",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 10, 2013 at 9:31 PM,  <iant@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/10136043/diff/5001/src/pkg/runtime/malloc.goc\r\n> File src/pkg/runtime/malloc.goc (right):\r\n>\r\n> https://codereview.appspot.com/10136043/diff/5001/src/pkg/runtime/malloc.goc#newcode769\r\n> src/pkg/runtime/malloc.goc:769: m->locks++;  // disable preemption to\r\n>\r\n> not expose the memory block w/o type info to GC\r\n> This means that the call to mallocgc will not do a GC.  That doesn't\r\n> seem right, here or below.\r\n\r\nThis is a very good point.\r\n",
			"disapproval": false,
			"date": "2013-06-10 17:38:29.428340",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/10 17:38:29, dvyukov wrote:\n> On Mon, Jun 10, 2013 at 9:31 PM,  <mailto:iant@golang.org> wrote:\n> >\n> > https://codereview.appspot.com/10136043/diff/5001/src/pkg/runtime/malloc.goc\n> > File src/pkg/runtime/malloc.goc (right):\n> >\n> >\n> https://codereview.appspot.com/10136043/diff/5001/src/pkg/runtime/malloc.goc#newcode769\n> > src/pkg/runtime/malloc.goc:769: m->locks++;  // disable preemption to\n> >\n> > not expose the memory block w/o type info to GC\n> > This means that the call to mallocgc will not do a GC.  That doesn't\n> > seem right, here or below.\n> \n> This is a very good point.\n\n\nI think mallocgc() deserves a more serious refactoring then:\n1. We really must be setting the type in only 1 place.\n2. Later markallocated() and settype() will be combined into a single operation, so it has to be in mallocgc().\n3. It's a bit difficult to decode mallocgc(sz, 0, 1, 0) when reading the code.\n\nWhat do you think about the following interface?\n\nvoid* mallocgc(uintptr size, Type *t, uint32 flag);\n\nIf Type is not known, it's nil.\nFlags will be extended to:\n\nenum\n{\n\t// flags to malloc\n\tFlagNoPointers = 1<<0,\t// no pointers here\n\tFlagNoProfiling = 1<<1,\t// must not profile\n\tFlagNoGC = 1<<2,\t// must not free or scan for pointers\n\tFlagNoZeroize = 1<<3,\t// don't zeroize memory\n\tFlagNoGCInvoke = 1<<4   // don't invoke GC\n};",
			"disapproval": false,
			"date": "2013-06-11 11:32:09.884470",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 11, 2013 at 4:32 AM,  <dvyukov@google.com> wrote:\r\n>\r\n> What do you think about the following interface?\r\n>\r\n> void* mallocgc(uintptr size, Type *t, uint32 flag);\r\n>\r\n> If Type is not known, it's nil.\r\n> Flags will be extended to:\r\n>\r\n> enum\r\n> {\r\n>         // flags to malloc\r\n>         FlagNoPointers = 1<<0,  // no pointers here\r\n>         FlagNoProfiling = 1<<1, // must not profile\r\n>         FlagNoGC = 1<<2,        // must not free or scan for pointers\r\n>         FlagNoZeroize = 1<<3,   // don't zeroize memory\r\n>         FlagNoGCInvoke = 1<<4   // don't invoke GC\r\n> };\r\n\r\nSeems fine to me.  I would call the last one FlagNoInvokeGC.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-06-11 15:36:28.610230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 11, 2013 at 7:36 PM, Ian Lance Taylor <iant@golang.org> wrote:\r\n> On Tue, Jun 11, 2013 at 4:32 AM,  <dvyukov@google.com> wrote:\r\n>>\r\n>> What do you think about the following interface?\r\n>>\r\n>> void* mallocgc(uintptr size, Type *t, uint32 flag);\r\n>>\r\n>> If Type is not known, it's nil.\r\n>> Flags will be extended to:\r\n>>\r\n>> enum\r\n>> {\r\n>>         // flags to malloc\r\n>>         FlagNoPointers = 1<<0,  // no pointers here\r\n>>         FlagNoProfiling = 1<<1, // must not profile\r\n>>         FlagNoGC = 1<<2,        // must not free or scan for pointers\r\n>>         FlagNoZeroize = 1<<3,   // don't zeroize memory\r\n>>         FlagNoGCInvoke = 1<<4   // don't invoke GC\r\n>> };\r\n>\r\n> Seems fine to me.\r\n\r\nRuss, what do you think about mallocgc(uintptr size, Type *t, uint32 flag)?\r\n\r\n> I would call the last one FlagNoInvokeGC.\r\n\r\nAck\r\n",
			"disapproval": false,
			"date": "2013-06-12 11:39:46.855900",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "small nit.\n\nhttps://codereview.appspot.com/10136043/diff/27001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/10136043/diff/27001/src/pkg/runtime/malloc.goc#newcode30\nsrc/pkg/runtime/malloc.goc:30: runtime\u00b7mallocgc(uintptr size, uintptr typ, uint32 flag)\nmallocgc() with argument \"typ\" set to \"0\" seems pretty common. It might be useful to have a wrapper function for it. Esp. since this case has very special semantics (\"will be freed with runtime\u00b7free\").",
			"disapproval": false,
			"date": "2013-06-14 22:57:26.600850",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-14 20:24:47.536040",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/11 15:36:28, iant wrote:\n> On Tue, Jun 11, 2013 at 4:32 AM,  <mailto:dvyukov@google.com> wrote:\n> >\n> > What do you think about the following interface?\n> >\n> > void* mallocgc(uintptr size, Type *t, uint32 flag);\n> >\n> > If Type is not known, it's nil.\n> > Flags will be extended to:\n> >\n> > enum\n> > {\n> >         // flags to malloc\n> >         FlagNoPointers = 1<<0,  // no pointers here\n> >         FlagNoProfiling = 1<<1, // must not profile\n> >         FlagNoGC = 1<<2,        // must not free or scan for pointers\n> >         FlagNoZeroize = 1<<3,   // don't zeroize memory\n> >         FlagNoGCInvoke = 1<<4   // don't invoke GC\n> > };\n> \n> Seems fine to me.  I would call the last one FlagNoInvokeGC.\n\n\nDone\nPTAL",
			"disapproval": false,
			"date": "2013-06-14 20:25:10.682720",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10136043/diff/27001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/10136043/diff/27001/src/pkg/runtime/malloc.goc#newcode30\nsrc/pkg/runtime/malloc.goc:30: runtime\u00b7mallocgc(uintptr size, uintptr typ, uint32 flag)\nOn 2013/06/14 22:57:26, ioe wrote:\n> mallocgc() with argument \"typ\" set to \"0\" seems pretty common. It might be\n> useful to have a wrapper function for it. Esp. since this case has very special\n> semantics (\"will be freed with runtime\u00b7free\").\n\nWe already have two: runtime\u00b7mal() and runtime\u00b7malloc().\nNote that typ==0 does not imply the very special semantics. The opposite is true.",
			"disapproval": false,
			"date": "2013-06-15 11:58:41.889050",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-07-17 10:04:34.059010",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/17 10:04:34, dvyukov wrote:\n> ping\n\nLGTM",
			"disapproval": false,
			"date": "2013-07-19 19:38:57.330640",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\r\n",
			"disapproval": true,
			"date": "2013-07-19 19:58:01.296110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is enough broken in the runtime. Please wait on this CL until other\r\nthings have settled down.\r\n",
			"disapproval": false,
			"date": "2013-07-19 19:58:23.899050",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"khr@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h#newcode468\nsrc/pkg/runtime/malloc.h:468: // flags to malloc\n// flags to mallocgc\n\nhttps://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h#newcode472\nsrc/pkg/runtime/malloc.h:472: FlagNoZeroize\t= 1<<3, // don't zeroize memory\nI didn't know \"zeroize\" was a real word until just now.  IMO, \"FlagNoZero\" and \"don't zero memory\" sounds better.",
			"disapproval": false,
			"date": "2013-07-20 05:21:27.868620",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If possible lease find a way the flag isn't negative true, or we end up\r\nwith if FlagNoZero is not false don't do this and I get all confused.\r\n\r\n-rob\r\n\r\n\r\n\r\nOn Sat, Jul 20, 2013 at 3:21 PM, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/10136043/diff/45001/src/**\r\n> pkg/runtime/malloc.h<https://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h>\r\n> File src/pkg/runtime/malloc.h (right):\r\n>\r\n> https://codereview.appspot.**com/10136043/diff/45001/src/**\r\n> pkg/runtime/malloc.h#**newcode468<https://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h#newcode468>\r\n> src/pkg/runtime/malloc.h:468: // flags to malloc\r\n> // flags to mallocgc\r\n>\r\n> https://codereview.appspot.**com/10136043/diff/45001/src/**\r\n> pkg/runtime/malloc.h#**newcode472<https://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h#newcode472>\r\n> src/pkg/runtime/malloc.h:472: FlagNoZeroize     = 1<<3, // don't zeroize\r\n> memory\r\n> I didn't know \"zeroize\" was a real word until just now.  IMO,\r\n> \"FlagNoZero\" and \"don't zero memory\" sounds better.\r\n>\r\n> https://codereview.appspot.**com/10136043/<https://codereview.appspot.com/10136043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-20 07:18:11.251930",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jul 20, 2013 at 11:17 AM, Rob Pike <r@golang.org> wrote:\r\n> If possible lease find a way the flag isn't negative true, or we end up with\r\n> if FlagNoZero is not false don't do this and I get all confused.\r\n\r\n\r\nI understand your concern.\r\nBut this is like \"don't disturb\" or \"don't clean my room\".\r\nE.g. FlagNoGC is passed in very special circumstances where GC will\r\ncrash. FlagNoProfile is passed for very special blocks. FlagNoZero is\r\npassed as an explicit optimization, and you want to see it, because by\r\ndefault you assume that the memory is zero.\r\nBy default and in most cases it \"does everything\".\r\n\r\nIt could make sense to switch the meaning if we pass all flags as\r\nseparate arguments (it would be too verbose for common case). But\r\nsince we pass a bitmask generated with bitwise or, it's better to have\r\nthem inverted.\r\n",
			"disapproval": false,
			"date": "2013-07-20 10:56:10.683420",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jul 20, 2013 at 9:21 AM,  <bradfitz@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h\r\n> File src/pkg/runtime/malloc.h (right):\r\n>\r\n> https://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h#newcode468\r\n> src/pkg/runtime/malloc.h:468: // flags to malloc\r\n> // flags to mallocgc\r\n>\r\n> https://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h#newcode472\r\n> src/pkg/runtime/malloc.h:472: FlagNoZeroize     = 1<<3, // don't zeroize\r\n> memory\r\n> I didn't know \"zeroize\" was a real word until just now.  IMO,\r\n> \"FlagNoZero\" and \"don't zero memory\" sounds better.\r\n\r\n\r\nWill do.\r\n",
			"disapproval": false,
			"date": "2013-07-20 10:57:16.682870",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FlagNoZero is fine in this case then. I was just expressing a common\r\nproblem with naming.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-07-20 21:25:46.472810",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nYou buried the lede in the CL description. I would not have kept pushing this off you had made it more obvious that this is a bug fix.\n\nruntime: make mallocgc+settype atomic\n\nRefactor mallocgc to accept type word and flags.\n1. mallocgc and settype must be atomic wrt GC.\n2. settype is called from only one place now.\n3. Eventually settype can be combined with markallocated.\n4. No more boolean arguments.\n\nhttps://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.goc#newcode28\nsrc/pkg/runtime/malloc.goc:28: // If the block will be freed with runtime\u00b7free(), typ must be 0.\ns/()//\n\nhttps://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/10136043/diff/45001/src/pkg/runtime/malloc.h#newcode472\nsrc/pkg/runtime/malloc.h:472: FlagNoZeroize\t= 1<<3, // don't zeroize memory\nOn 2013/07/20 05:21:28, bradfitz wrote:\n> I didn't know \"zeroize\" was a real word until just now.  IMO, \"FlagNoZero\" and\n> \"don't zero memory\" sounds better.\n\nFlagNoClear, please",
			"disapproval": false,
			"date": "2013-07-22 18:52:36.281960",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after flag name change",
			"disapproval": false,
			"date": "2013-07-22 18:52:46.610140",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9d89d3ed8922 ***\n\nruntime: refactor mallocgc\nMake it accept type, combine flags.\nSeveral reasons for the change:\n1. mallocgc and settype must be atomic wrt GC\n2. settype is called from only one place now\n3. it will help performance (eventually settype\nfunctionality must be combined with markallocated)\n4. flags are easier to read now (no mallocgc(sz, 0, 1, 0) anymore)\n\nR=golang-dev, iant, nightlyone, rsc, dave, khr, bradfitz, r\nCC=golang-dev\nhttps://codereview.appspot.com/10136043",
			"disapproval": false,
			"date": "2013-07-26 17:17:35.731350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Merging the final two bools in mallogc into the flag seems fine to me.\r\n",
			"disapproval": false,
			"date": "2013-07-02 00:38:02.797690",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A while back I was working on a CL that reduced the number of\r\narguments in mallocgc and friends. At the time there were three\r\narguments, two bools and a flag. By combining them all into a single\r\nflags argument I saw a small performance improvement.\r\n\r\n+1 to this CL.\r\n\r\nOn Tue, Jul 2, 2013 at 10:38 AM, Russ Cox <rsc@golang.org> wrote:\r\n> Merging the final two bools in mallogc into the flag seems fine to me.\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-02 00:59:30.105480",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10136043: runtime: refactor mallocgc",
	"created": "2013-06-09 17:05:54.433560",
	"patchsets": [
		1,
		2001,
		5001,
		15001,
		18001,
		21001,
		24001,
		27001,
		45001,
		64001,
		67001,
		67002,
		72001
	],
	"modified": "2013-07-26 17:17:38.924380",
	"closed": true,
	"issue": 10136043
}