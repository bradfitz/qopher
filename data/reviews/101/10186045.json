{
	"description": "runtime: garbage collector runs on g0 now.\nNo need to change to Grunnable state.\nAdd some more checks for Grunning state.",
	"cc": [
		"golang-dev@googlegroups.com",
		"khr@google.com",
		"dvyukov@google.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://khr%40golang.org@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-11 16:36:28.041760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-06-11 17:57:33.594590",
			"approval": true
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ, could you take another look?  There's a subtle bug where the Grunning\r\n-> Grunnable change when starting the gc doesn't happen if we were already\r\nrunning on g0 (if the gc-triggering malloc was on g0 already, e.g. during\r\nallocating a stack segment).  I think it is better to leave the current G\r\nin the Grunning state during GC and verify its state before scanning.\r\n\r\nThat seems to be the current idiom, when we switch from g to g0 we leave g\r\nin the Grunning state.\r\n\r\n\r\nOn Tue, Jun 11, 2013 at 10:57 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-13 20:52:45.986360",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"khr@google.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-14 04:24:21.213860",
			"approval": true
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"khr@google.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ef30c638253d ***\n\nruntime: garbage collector runs on g0 now.\nNo need to change to Grunnable state.\nAdd some more checks for Grunning state.\n\nR=golang-dev, rsc, khr, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/10186045",
			"disapproval": false,
			"date": "2013-06-14 18:42:54.388140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"khr@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"khr@google.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is there a reason to remove the changes to gp->status? I like the fact that gp->status = Grunnable records that gp isn't actually running anymore and that gp->sched is a correct summary of its state. Another possibility would be to set gp->status = Gwaiting and gp->waitreason = \"garbage collection\".\n\nIf we put those back, then I think seeing anything in Grunning becomes an error, so the check in the GC gets even simpler.\n\nThis comes up in the morestack CL I've been working on too: during the split I mark the gp->status Gwaiting with gp->waitreason = \"stack split\", so that if something bad happens during the split, the traceback routines will be able to give an accurate picture of the world.",
			"disapproval": false,
			"date": "2013-06-21 18:34:53.536000",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That would be fine with me.  We'd probably want to enforce this every place\r\nwe switch to g0.  The wait reasons are also not mutually exclusive.  We\r\nprobably will have situations where a G is waiting for a stack split, and\r\nthe stack split is in turn waiting for a gc.\r\n\r\n\r\nOn Fri, Jun 21, 2013 at 2:34 PM, <rsc@golang.org> wrote:\r\n\r\n> Is there a reason to remove the changes to gp->status? I like the fact\r\n> that gp->status = Grunnable records that gp isn't actually running\r\n> anymore and that gp->sched is a correct summary of its state. Another\r\n> possibility would be to set gp->status = Gwaiting and gp->waitreason =\r\n> \"garbage collection\".\r\n>\r\n> If we put those back, then I think seeing anything in Grunning becomes\r\n> an error, so the check in the GC gets even simpler.\r\n>\r\n> This comes up in the morestack CL I've been working on too: during the\r\n> split I mark the gp->status Gwaiting with gp->waitreason = \"stack\r\n> split\", so that if something bad happens during the split, the traceback\r\n> routines will be able to give an accurate picture of the world.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10186045/<https://codereview.appspot.com/10186045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-22 01:16:58.604850",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 10186045: runtime: garbage collector runs on g0 now.  We don't",
	"created": "2013-06-11 16:36:12.238230",
	"patchsets": [
		1,
		2001,
		3,
		8001,
		13001
	],
	"modified": "2013-06-22 01:16:58.748240",
	"closed": true,
	"issue": 10186045
}