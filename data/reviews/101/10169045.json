{
	"description": "runtime: adjust traceback / garbage collector boundary\n\nThe garbage collection routine addframeroots is duplicating\nlogic in the traceback routine that calls it, sometimes correctly,\nsometimes incorrectly, sometimes incompletely.\nPass necessary information to addframeroots instead of\nderiving it anew.\n\nShould make addframeroots significantly more robust.\nIt's certainly smaller.\n\nAlso try to standardize on uintptr for saved pc, sp values.\n\nWill make CL 10036044 trivial.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"dvyukov@google.com"
	],
	"reviewers": [
		"iant@golang.org",
		"ality@pbrane.org",
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-12 02:36:31.707090",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10169045/diff/7001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/10169045/diff/7001/src/pkg/runtime/mgc0.c#newcode1456\nsrc/pkg/runtime/mgc0.c:1456: if(0 && ScanStackByFrames && pc == (uintptr)runtime\u00b7goexit && gp->fnstart != nil) {\nis this left over debugging ?",
			"disapproval": false,
			"date": "2013-06-12 02:45:15.888390",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/10169045/diff/17002/src/pkg/runtime/traceback_arm.c\nFile src/pkg/runtime/traceback_arm.c (right):\n\nhttps://codereview.appspot.com/10169045/diff/17002/src/pkg/runtime/traceback_arm.c#newcode97\nsrc/pkg/runtime/traceback_arm.c:97: frame.arglen = 2*sizeof(uintptr) + ((uintptr*)frame.argp)[1];\nBoth deferproc and newproc take an int32 as their first argument.  Is (uintptr*) correct here?  Why not\n    *(int32*)(frame.argp+PtrSize)\n?  I suppose since this is traceback_arm it doesn't make a difference.\n\nhttps://codereview.appspot.com/10169045/diff/17002/src/pkg/runtime/traceback_x86.c\nFile src/pkg/runtime/traceback_x86.c (right):\n\nhttps://codereview.appspot.com/10169045/diff/17002/src/pkg/runtime/traceback_x86.c#newcode106\nsrc/pkg/runtime/traceback_x86.c:106: frame.arglen = 2*sizeof(uintptr) + ((uintptr*)frame.argp)[1];\nAgain, argument is int32.",
			"disapproval": false,
			"date": "2013-06-12 13:24:51.509220",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10169045/diff/7001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/10169045/diff/7001/src/pkg/runtime/mgc0.c#newcode1456\nsrc/pkg/runtime/mgc0.c:1456: if(0 && ScanStackByFrames && pc == (uintptr)runtime\u00b7goexit && gp->fnstart != nil) {\nOn 2013/06/12 02:45:15, dfc wrote:\n> is this left over debugging ?\n\nNo, the whole block is dead code that I meant to remove. Done. Thanks.",
			"disapproval": false,
			"date": "2013-06-12 02:57:52.922540",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nI like the GC simplification\n\nhttps://codereview.appspot.com/10169045/diff/13001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/10169045/diff/13001/src/pkg/runtime/runtime.h#newcode660\nsrc/pkg/runtime/runtime.h:660: Func *fn;\t// function being run\nstick * to type\n\nhttps://codereview.appspot.com/10169045/diff/13001/src/pkg/runtime/runtime.h#newcode660\nsrc/pkg/runtime/runtime.h:660: Func *fn;\t// function being run\ntab between type and name?\n\nhttps://codereview.appspot.com/10169045/diff/13001/src/pkg/runtime/runtime.h#newcode667\nsrc/pkg/runtime/runtime.h:667: byte *varp;\t// pointer to local variables\nstick * to type\n\nhttps://codereview.appspot.com/10169045/diff/13001/src/pkg/runtime/runtime.h#newcode741\nsrc/pkg/runtime/runtime.h:741: void\truntime\u00b7traceback(uintptr pc, uintptr sp, uintptr lr, G* gp);\nshouldn't this be moved into \"stack traces\" section as well?\n\nhttps://codereview.appspot.com/10169045/diff/13001/src/pkg/runtime/traceback_x86.c\nFile src/pkg/runtime/traceback_x86.c (right):\n\nhttps://codereview.appspot.com/10169045/diff/13001/src/pkg/runtime/traceback_x86.c#newcode22\nsrc/pkg/runtime/traceback_x86.c:22: // collector (callback != nil).  A little clunky to merge the two but avoids\ns/two/three/",
			"disapproval": false,
			"date": "2013-06-12 11:30:14.597620",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done, thanks.\r\n",
			"disapproval": false,
			"date": "2013-06-12 12:44:53.892170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bb553699c7e6 ***\n\nruntime: adjust traceback / garbage collector boundary\n\nThe garbage collection routine addframeroots is duplicating\nlogic in the traceback routine that calls it, sometimes correctly,\nsometimes incorrectly, sometimes incompletely.\nPass necessary information to addframeroots instead of\nderiving it anew.\n\nShould make addframeroots significantly more robust.\nIt's certainly smaller.\n\nAlso try to standardize on uintptr for saved pc, sp values.\n\nWill make CL 10036044 trivial.\n\nR=golang-dev, dave, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/10169045",
			"disapproval": false,
			"date": "2013-06-12 12:49:41.940220",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for pointing out the newproc inconsistency. The arguments are pushed\r\nas machine words, so int32 is probably the wrong type in the prototype. But\r\nit's easy enough to be consistent there and say that it's the compiler that\r\nis making assumptions (namely that pushing a small int64 will read\r\ncorrectly as an int32). However, having to look that up reminded me that\r\nthe count is first, not second, so the [1] is wrong.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-12 13:48:20.508570",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This isn't really related to the CL, but I'm curious about the two\r\ntwo significant differences in the traceback code for arm and x86:\r\n\r\n1. Why does the x86 code additionally check that frame.{pc sp} are\r\n   equal to gp->sched.{pc sp} when testing for pc == runtime\u00b7goexit?\r\n\r\n2. Why doesn't the arm code have a test for pc == runtime\u00b7morestack?\r\n\r\nThanks,\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-06-12 14:33:28.887100",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 12, 2013 at 10:33 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n\r\n> This isn't really related to the CL, but I'm curious about the two\r\n> two significant differences in the traceback code for arm and x86:\r\n>\r\n> 1. Why does the x86 code additionally check that frame.{pc sp} are\r\n>    equal to gp->sched.{pc sp} when testing for pc == runtime\u00b7goexit?\r\n>\r\n\r\nI've already deleted that code in my local copy, so I'm not going to bother\r\nfiguring out the answer.\r\n\r\n\r\n> 2. Why doesn't the arm code have a test for pc == runtime\u00b7morestack?\r\n>\r\n\r\nIt's essentially a complicated debugging print. It says \"if we're unwinding\r\nan m stack and we see morestack, then jump to the corresponding g and start\r\nunwinding that too, so you can see what function in the g ran out of stack\r\nspace\". That logic is only for printing; in particular it is not used for\r\nobtaining traces for profiling or garbage collection. The logic could be\r\nadded to arm too; it just never was.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-12 15:53:44.858040",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"ality@pbrane.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nWe're seeing a crash that dvyukov suggested might be related to this CL.\n\nruntime: unknown argument frame size for runtime.copy\nfatal error: invalid stack\n\ngoroutine 0 [idle]:\nruntime: unknown argument frame size for runtime.sigreturn\npanic during panic\n\nNo stack trace beyond that.\n\nI suspect it's happening in code with quite a deep stack that is using the copy builtin on some memory mapped with syscall.Mmap.\n\nWe've seen crashes with:\n\nlinux/amd64 devel +e274daf75c26 Thu Jun 13 17:04:47 2013 -0700\nlinux/amd64 devel +52d53d0e177e Fri Jun 14 11:14:45 2013 +0200\n\nWe also saw one segfault in the same test a few days ago while running:\n\nlinux/amd64 devel +ae79f385177d Wed Jun 12 14:05:13 2013 +1000\n\nIt didn't produce a stack trace in that case either.\n\nIt's quite a large chunk of code, but it hasn't seen any changes in a while, so I think it's probably the runtime, not us.\n\nIf it would help we can try and reduce it to something we can submit to the issue tracker. It's going to take us a while, so if anyone has any ideas before we start, that would be nice.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-06-14 11:30:25.877890",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 10169045: runtime: adjust traceback / garbage collector boundary",
	"created": "2013-06-11 19:52:16.066830",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		13001,
		17002
	],
	"modified": "2013-06-14 11:30:26.205060",
	"closed": true,
	"issue": 10169045
}