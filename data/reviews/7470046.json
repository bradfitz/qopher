{
	"description": "runtime: add per-M error string buffer for Plan 9 system calls\n\nThe new scheduler changes tickled a bug in the way\nwere doing system calls on Plan 9. We should not be\nallocating in between entersyscall and exitsyscall.\n\nSee https://groups.google.com/d/msg/golang-nuts/uX9YNSVT91c/LyukIUROQtIJ\n\nFixes issue 4994.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"seed@mail.nanosouffle.net",
		"r@golang.org",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, seed@mail.nanosouffle.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-06 22:11:19.154710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On the other hand, if you don't call errstr before exitsyscall, when you finally do get around to calling errstr you could be running on a different thread and not get the error you were looking for.",
			"disapproval": false,
			"date": "2013-03-06 22:28:52.616780",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "rsc@golang.org once said:\r\n> On the other hand, if you don't call errstr before exitsyscall, when you\r\n> finally do get around to calling errstr you could be running on a\r\n> different thread and not get the error you were looking for.\r\n\r\nTrue. What do you suggest? I could add a function\r\nin the runtime that stores the current errstr in\r\none the current M.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-06 22:36:04.287850",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have a counter-proposal. Please see CL 7567043.",
			"disapproval": false,
			"date": "2013-03-07 11:34:12.646740",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nAnthony Martin <ality@pbrane.org> once said:\r\n> rsc@golang.org once said:\r\n> > On the other hand, if you don't call errstr before exitsyscall, when you\r\n> > finally do get around to calling errstr you could be running on a\r\n> > different thread and not get the error you were looking for.\r\n> \r\n> True. What do you suggest? I could add a function\r\n> in the runtime that stores the current errstr in\r\n> one the current M.\r\n\r\nI went ahead and did this.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-07 16:32:05.727370",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "seed@mail.nanosouffle.net once said:\r\n> I have a counter-proposal. Please see CL 7567043.\r\n\r\nThat's pretty much what I ended up doing but\r\na little differently.\r\n\r\nJust saw your CL now.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-07 16:34:04.728130",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"seed@mail.nanosouffle.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7470046/diff/9001/src/pkg/runtime/thread_plan9.c\nFile src/pkg/runtime/thread_plan9.c (right):\n\nhttps://codereview.appspot.com/7470046/diff/9001/src/pkg/runtime/thread_plan9.c#newcode43\nsrc/pkg/runtime/thread_plan9.c:43: #pragma textflag 7\nit calls errstr and findnull, so how can it be a 7?",
			"disapproval": false,
			"date": "2013-03-07 17:29:24.842480",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"seed@mail.nanosouffle.net",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "perhaps we'd better document the context of\nsome functions (for example,\n// this function is called when in syscall mode,\n// so it cannot allocate memory or split-stack.\n).\n\nhttps://codereview.appspot.com/7470046/diff/9001/src/pkg/runtime/thread_plan9.c\nFile src/pkg/runtime/thread_plan9.c (right):\n\nhttps://codereview.appspot.com/7470046/diff/9001/src/pkg/runtime/thread_plan9.c#newcode43\nsrc/pkg/runtime/thread_plan9.c:43: #pragma textflag 7\nOn 2013/03/07 17:29:24, r wrote:\n> it calls errstr and findnull, so how can it be a 7?\nthe linker will verify the deepest call stack is still\nwithin limit.\n\nand this function can't split stack (it can't allocate\nmemory).",
			"disapproval": false,
			"date": "2013-03-07 17:35:30.791900",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think that they are different enough.\r\n\r\nOn 7 March 2013 08:34, Anthony Martin <ality@pbrane.org> wrote:\r\n> seed@mail.nanosouffle.net once said:\r\n>> I have a counter-proposal. Please see CL 7567043.\r\n>\r\n> That's pretty much what I ended up doing but\r\n> a little differently.\r\n>\r\n> Just saw your CL now.\r\n>\r\n>   Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-07 17:43:31.120040",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "minux.ma@gmail.com once said:\r\n> On 2013/03/07 17:29:24, r wrote:\r\n> >it calls errstr and findnull, so how can it be a 7?\r\n> the linker will verify the deepest call stack is still\r\n> within limit.\r\n> \r\n> and this function can't split stack (it can't allocate\r\n> memory).\r\n\r\nThis is correct. But to be safe, I'll manually inline\r\nthe call to findnull (errstr is already NOSPLIT).\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-07 17:45:54.258280",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To be more clear: I think this CL is creating more functions, and\r\ntouching more files, than is necessary; it should also be using byte*\r\ninstead of int8*, and it's lacking in documentation.\r\nMy counter-proposal stands in these regards; the assembler version of\r\nthe errstr is simpler.\r\n\r\nOn 7 March 2013 17:43, Akshat Kumar <seed@mail.nanosouffle.net> wrote:\r\n> I think that they are different enough.\r\n>\r\n> On 7 March 2013 08:34, Anthony Martin <ality@pbrane.org> wrote:\r\n>> seed@mail.nanosouffle.net once said:\r\n>>> I have a counter-proposal. Please see CL 7567043.\r\n>>\r\n>> That's pretty much what I ended up doing but\r\n>> a little differently.\r\n>>\r\n>> Just saw your CL now.\r\n>>\r\n>>   Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-07 18:11:41.471390",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Akshat Kumar <seed@mail.nanosouffle.net> once said:\r\n> To be more clear: I think this CL is creating more functions, and\r\n> touching more files, than is necessary; it should also be using byte*\r\n> instead of int8*, and it's lacking in documentation.\r\n> My counter-proposal stands in these regards; the assembler version of\r\n> the errstr is simpler.\r\n\r\nDisagree. There's no reason it needs to be in assembler.\r\nOnly the actual system call stub needs to.\r\n\r\nThe rest are quibbles.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-07 18:21:03.511310",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 7470046: syscall: do not call errstr during system calls on Plan 9",
	"created": "2013-03-06 22:10:27.811460",
	"patchsets": [
		1,
		3,
		2008,
		9001,
		19001
	],
	"modified": "2013-03-07 18:21:03.511310",
	"closed": false,
	"issue": 7470046
}