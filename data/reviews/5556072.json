{
	"description": "bytes.Buffer: turn buffer size overflows into errors\nFixes issue 2743.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-01-20 19:04:13.816459",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nsome suggestions for simpler code\n\nhttp://codereview.appspot.com/5556072/diff/1/src/pkg/bytes/buffer.go\nFile src/pkg/bytes/buffer.go (right):\n\nhttp://codereview.appspot.com/5556072/diff/1/src/pkg/bytes/buffer.go#newcode76\nsrc/pkg/bytes/buffer.go:76: func (b *Buffer) grow(n int) (int, error) {\nsince there's only one kind of error and this is an internal function, I would leave just one return value and set it to -1 in case of error (it's clearly an illegal index)\n\nhttp://codereview.appspot.com/5556072/diff/1/src/pkg/bytes/buffer.go#newcode89\nsrc/pkg/bytes/buffer.go:89: if buf == nil {\nif buf == nil {\n   return -1\n}\n\nhttp://codereview.appspot.com/5556072/diff/1/src/pkg/bytes/buffer.go#newcode98\nsrc/pkg/bytes/buffer.go:98: return b.off + m, nil\nleave as it\n\nhttp://codereview.appspot.com/5556072/diff/1/src/pkg/bytes/buffer.go#newcode106\nsrc/pkg/bytes/buffer.go:106: if e != nil {\nif m < 0 {\n   return 0, ErrTooLarge\n}\n\nhttp://codereview.appspot.com/5556072/diff/1/src/pkg/bytes/buffer.go#newcode117\nsrc/pkg/bytes/buffer.go:117: if e != nil {\nditto\n\nhttp://codereview.appspot.com/5556072/diff/1/src/pkg/bytes/buffer.go#newcode209\nsrc/pkg/bytes/buffer.go:209: if e != nil {\nsame as above",
			"disapproval": false,
			"date": "2012-01-20 20:41:54.670997",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 20, 2012, at 1:34 PM, gri@golang.org wrote:\n\n> \n> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go\n> File src/pkg/bytes/buffer.go (right):\n> \n> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode142\n> src/pkg/bytes/buffer.go:142: if cap(b.buf)-len(b.buf) < MinRead {\n> perhaps:\n> \n> if free := cap(b.buf)-len(b.buf); free < MinRead { ...\n> \n> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode145\n> src/pkg/bytes/buffer.go:145: if b.off+cap(b.buf)-len(b.buf) >= MinRead {\n> if b.off + free >= MinRead { ...\n> \n> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode150\n> src/pkg/bytes/buffer.go:150: newBuf = makeSlice(2*(cap(b.buf)-b.off) +\n> MinRead)[:len(b.buf)-b.off]\n> not sure why this is not:\n> \n> 2*cap(b.buf) + MinRead\n> \n> as it is, if b.off is close to cap(b.buf), there is not much amortized\n> doubling happening, I think\n> \n> http://codereview.appspot.com/5556072/\n\ni tried these and the code broke. rather than debug that in a CL doing something unrelated, can i leave that to you and check this in?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-20 21:46:25.027134",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 29d81eb4bfbc ***\n\nbytes.Buffer: turn buffer size overflows into errors\nFixes issue 2743.\n\nR=golang-dev, gri, r\nCC=golang-dev\nhttp://codereview.appspot.com/5556072",
			"disapproval": false,
			"date": "2012-01-20 21:51:52.484166",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-20 21:13:28.275462",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go\nFile src/pkg/bytes/buffer.go (right):\n\nhttp://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode142\nsrc/pkg/bytes/buffer.go:142: if cap(b.buf)-len(b.buf) < MinRead {\nperhaps:\n\nif free := cap(b.buf)-len(b.buf); free < MinRead { ...\n\nhttp://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode145\nsrc/pkg/bytes/buffer.go:145: if b.off+cap(b.buf)-len(b.buf) >= MinRead {\nif b.off + free >= MinRead { ...\n\nhttp://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode150\nsrc/pkg/bytes/buffer.go:150: newBuf = makeSlice(2*(cap(b.buf)-b.off) + MinRead)[:len(b.buf)-b.off]\nnot sure why this is not:\n\n2*cap(b.buf) + MinRead\n\nas it is, if b.off is close to cap(b.buf), there is not much amortized doubling happening, I think",
			"disapproval": false,
			"date": "2012-01-20 21:34:00.761570",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Fri, Jan 20, 2012 at 1:46 PM, Rob 'Commander' Pike <r@google.com> wrote:\n>\n> On Jan 20, 2012, at 1:34 PM, gri@golang.org wrote:\n>\n>>\n>> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go\n>> File src/pkg/bytes/buffer.go (right):\n>>\n>> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode142\n>> src/pkg/bytes/buffer.go:142: if cap(b.buf)-len(b.buf) < MinRead {\n>> perhaps:\n>>\n>> if free := cap(b.buf)-len(b.buf); free < MinRead { ...\n>>\n>> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode145\n>> src/pkg/bytes/buffer.go:145: if b.off+cap(b.buf)-len(b.buf) >= MinRead {\n>> if b.off + free >= MinRead { ...\n>>\n>> http://codereview.appspot.com/5556072/diff/5002/src/pkg/bytes/buffer.go#newcode150\n>> src/pkg/bytes/buffer.go:150: newBuf = makeSlice(2*(cap(b.buf)-b.off) +\n>> MinRead)[:len(b.buf)-b.off]\n>> not sure why this is not:\n>>\n>> 2*cap(b.buf) + MinRead\n>>\n>> as it is, if b.off is close to cap(b.buf), there is not much amortized\n>> doubling happening, I think\n>>\n>> http://codereview.appspot.com/5556072/\n>\n> i tried these and the code broke. rather than debug that in a CL doing something unrelated, can i leave that to you and check this in?\n>\n> -rob\n>\n",
			"disapproval": false,
			"date": "2012-01-20 21:47:01.143785",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5556072: bytes.Buffer: turn buffer size overflows into errors",
	"created": "2012-01-20 19:04:10.745180",
	"patchsets": [
		1,
		2001,
		1004,
		2002,
		6001,
		5002,
		7001
	],
	"modified": "2012-01-20 21:51:53.461777",
	"closed": true,
	"issue": 5556072
}