{
	"description": "cmd/godoc: error viewing source for packages with similar prefixes\n\nIf two packages have similar prefixes, e.g. appengine and appengine_internal,\nviewing source information for appengine_internal produces an error in the url.\n\nThis is because Mapping.list is sorted in ascending order.\nWhen we call ToRelative(...), it looks in this ascending sorted list for the\nfirst prefix match, and thus sees appengine before appengine_internal.\nIt thus treats all links for appengine and appengine_internal as if they\nare for appengine, thus messing up the generated links.\n\nFix is to keep Mapping.list in descending order, so that longest match is made first.\n\nFixes issue 3096.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"roberto@costumero.es",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "ugorji@gmail.com",
			"recipients": [
				"ugorji@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-21 15:44:14.577150",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"ugorji@gmail.com",
				"golang-dev@googlegroups.com",
				"roberto@costumero.es",
				"adg@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5683060/diff/3001/src/cmd/godoc/mapping.go\nFile src/cmd/godoc/mapping.go (right):\n\nhttp://codereview.appspot.com/5683060/diff/3001/src/cmd/godoc/mapping.go#newcode59\nsrc/cmd/godoc/mapping.go:59: type reverse struct {\nreverseSort maybe\n\nhttp://codereview.appspot.com/5683060/diff/3001/src/cmd/godoc/mapping.go#newcode90\nsrc/cmd/godoc/mapping.go:90: //sort this pathlist in descending order, so we always\nput a space between // and the comment text.",
			"disapproval": false,
			"date": "2012-02-22 02:06:46.943430",
			"approval": false
		},
		{
			"sender": "ugorji@gmail.com",
			"recipients": [
				"ugorji@gmail.com",
				"golang-dev@googlegroups.com",
				"roberto@costumero.es",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-02-22 04:10:44.053776",
			"approval": false
		},
		{
			"sender": "roberto@costumero.es",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've read the changes and I have a question,\n\nWhy are you declaring reverse as a struct containing only a sort.Interface\nand not declaring reverse itself as a sort.Interface?\n\nOn Tue, Feb 21, 2012 at 16:44, <ugorji@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> cmd/godoc: error viewing source for packages with similar prefixes\n>\n> If two packages have similar prefixes, e.g. appengine and\n> appengine_internal,\n> viewing source information for appengine_internal produces an error in\n> the url.\n>\n> This is because Mapping.list is sorted in ascending order.\n> When we call ToRelative(...), it looks in this ascending sorted list for\n> the\n> first prefix match, and thus sees appengine before appengine_internal.\n> It thus treats all links for appengine and appengine_internal as if they\n> are for appengine, thus messing up the generated links.\n>\n> Fix is to keep Mapping.list in descending order, so that longest match\n> is made first.\n>\n> Fixes issue 3096.\n>\n> Please review this at http://codereview.appspot.com/**5683060/<http://codereview.appspot.com/5683060/>\n>\n> Affected files:\n>  M src/cmd/godoc/mapping.go\n>\n>\n> Index: src/cmd/godoc/mapping.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/mapping.go\n> +++ b/src/cmd/godoc/mapping.go\n> @@ -56,6 +56,14 @@\n>        value        *RWValue\n>  }\n>\n> +type reverse struct {\n> +       sort.Interface\n> +}\n> +\n> +func (r reverse) Less(i, j int) bool {\n> +       return r.Interface.Less(j, i)\n> +}\n> +\n>  // Init initializes the Mapping from a list of paths.\n>  // Empty paths are ignored; relative paths are assumed to be relative to\n>  // the current working directory and converted to absolute paths.\n> @@ -79,6 +87,9 @@\n>  //\n>  func (m *Mapping) Init(paths []string) {\n>        pathlist := canonicalizePaths(paths, nil)\n> +       //sort this pathlist in descending order, so we always\n> +       //check longest match first during ToRelative, ToAbsolute, etc.\n> +       sort.Sort(reverse{sort.**StringSlice(pathlist)})\n>        list := make([]mapping, len(pathlist))\n>\n>        // create mapping list\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-21 18:43:18.513643",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"ugorji@gmail.com",
				"golang-dev@googlegroups.com",
				"roberto@costumero.es",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is an easier fix. Also, I believe your proposed solution is not working correctly in a situation where you have the following mapping:\n\na -> dir/a\nab -> dir/ab\nab/ab -> dir/ab/ab\n\nWhen searching backward, the prefix ab is found in dir/ab/ab first, which then leads to other errors.\n\nhttp://codereview.appspot.com/5683060/diff/3001/src/cmd/godoc/mapping.go\nFile src/cmd/godoc/mapping.go (right):\n\nhttp://codereview.appspot.com/5683060/diff/3001/src/cmd/godoc/mapping.go#newcode92\nsrc/cmd/godoc/mapping.go:92: sort.Sort(reverse{sort.StringSlice(pathlist)})\nThis is not needed. canonicalizePaths returns a result that is sorted in ascending order, so instead of sorting again, it would be much faster to simply reverse the list.\n\nBut that affects also how the list is printed, iterated over etc. Why not simply iterate through the list in reverse in ToAbsolute and ToRelative? Seems much simpler.",
			"disapproval": false,
			"date": "2012-02-22 02:09:00.771932",
			"approval": false
		},
		{
			"sender": "ugorji@gmail.com",
			"recipients": [
				"ugorji@gmail.com",
				"golang-dev@googlegroups.com",
				"roberto@costumero.es",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/21 18:43:18, roberto_costumero.es wrote:\n> I've read the changes and I have a question,\n> \n> Why are you declaring reverse as a struct containing only a sort.Interface\n> and not declaring reverse itself as a sort.Interface?\n> \nreverse is a struct that \"embeds\" a sort.Interface. This way, I only have to implement the Less method, and not all the sort.Interface methods, and still satisfy the sort.Interface interface.",
			"disapproval": false,
			"date": "2012-02-21 18:55:11.839434",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"ugorji@gmail.com",
				"golang-dev@googlegroups.com",
				"roberto@costumero.es",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PS: Please abandon this CL. I am proposing another solution:\n\nhttp://codereview.appspot.com/5690063",
			"disapproval": false,
			"date": "2012-02-22 02:09:32.058597",
			"approval": false
		}
	],
	"owner_email": "ugorji@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "ugorji",
	"subject": "code review 5683060: cmd/godoc: error viewing source for packages with simil...",
	"created": "2012-02-21 15:42:30.101114",
	"patchsets": [
		3001
	],
	"modified": "2012-02-22 04:10:45.048925",
	"closed": true,
	"issue": 5683060
}