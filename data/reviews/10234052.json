{
	"description": "google-api-go-client: set opaque correctly in pre go1.1 versions",
	"cc": [
		"adg@golang.org",
		"bradfitz@golang.org",
		"campoy@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go\nFile googleapi/googleapi.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go#newcode243\ngoogleapi/googleapi.go:243: var isGo11 = true\nI think this is more readable if this is the other way around.  Make this be:\n\n// isGo11 is set true by go11.go when we're at Go1.1 or later.\nvar isGo11 bool\n\nThen rename prego11.go to just go11.go and set this to true there.\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go#newcode245\ngoogleapi/googleapi.go:245: // IsGo11 returns true if the current compiler is go1.1 or newer.\ndoc comment is about the wrong thing.\n\nI'm not sure what this is trying to do.\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go#newcode249\ngoogleapi/googleapi.go:249: u.Opaque = u.Scheme + \":\" + u.Opaque\nisn't u.Opaque typically just empty here? when would it be non-empty at the point where callers called this?\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi_test.go\nFile googleapi/googleapi_test.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi_test.go#newcode8\ngoogleapi/googleapi_test.go:8: func TestSetOpaque(t *testing.T) {\nI think you need more than one test.\n\nWhat about all the crazy cases from before with slashes and %2F and stuff?\n\nI want tests to see how the http.Request.Write() writes.  Write to a bytes.Buffer and compare the valid output(s)?",
			"disapproval": false,
			"date": "2013-06-14 08:43:11.403880",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/google-api-go-client",
			"disapproval": false,
			"date": "2013-06-14 00:54:16.748600",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go\nFile googleapi/googleapi.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go#newcode243\ngoogleapi/googleapi.go:243: var isGo11 = true\nOn 2013/06/14 08:43:11, bradfitz wrote:\n> I think this is more readable if this is the other way around.  Make this be:\n> \n> // isGo11 is set true by go11.go when we're at Go1.1 or later.\n> var isGo11 bool\n> \n> Then rename prego11.go to just go11.go and set this to true there.\n\nDone.\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go#newcode245\ngoogleapi/googleapi.go:245: // IsGo11 returns true if the current compiler is go1.1 or newer.\nOn 2013/06/14 08:43:11, bradfitz wrote:\n> doc comment is about the wrong thing.\n> \n> I'm not sure what this is trying to do.\n\nDone.\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi.go#newcode249\ngoogleapi/googleapi.go:249: u.Opaque = u.Scheme + \":\" + u.Opaque\nOn 2013/06/14 08:43:11, bradfitz wrote:\n> isn't u.Opaque typically just empty here? when would it be non-empty at the\n> point where callers called this?\n\nOpaque is not empty at this point, since I modify it right before.\n\nThe point of this is to avoid having \"%2F\" encoded back to \"/\" in the request.\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi_test.go\nFile googleapi/googleapi_test.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/14001/googleapi/googleapi_test.go#newcode8\ngoogleapi/googleapi_test.go:8: func TestSetOpaque(t *testing.T) {\nOn 2013/06/14 08:43:11, bradfitz wrote:\n> I think you need more than one test.\n> \n> What about all the crazy cases from before with slashes and %2F and stuff?\n> \n> I want tests to see how the http.Request.Write() writes.  Write to a\n> bytes.Buffer and compare the valid output(s)?\n\nDone.",
			"disapproval": false,
			"date": "2013-06-14 23:02:45.021190",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let me know when you've run these tests on both Go 1.0 and Go 1.1, and the problematic API(s) work on both too.\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go\nFile googleapi/googleapi.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go#newcode245\ngoogleapi/googleapi.go:245: // SetOpaque sets Opaque in the passed URL so RequestURI returns a correct\nMaybe:\n\n// SetOpaque sets u.Opaque from u.Path such that HTTP requests to it\n// don't alter any hex-escaped characters in u.Path.\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go#newcode246\ngoogleapi/googleapi.go:246: // URI avoiding decoding of hex escaped characters.\nhex-escaped\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go\nFile googleapi/googleapi_test.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode16\ngoogleapi/googleapi_test.go:16: const reqTmpl = \"GET %v HTTP/1.1\\r\\nHost: %v\\r\\nUser-Agent: Go 1.1 package http\\r\\n\\r\\n\"\nYou didn't test this against Go 1.0.3 before mailing, since this template contains \"Go 1.1 package http\"\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode20\ngoogleapi/googleapi_test.go:20: out string\nout is a weird name now. (confusing because it's an input to a function which makes the desired output) wantRequestURI is long, but accurate, and you're not using tagged struct literals anyway.\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode88\ngoogleapi/googleapi_test.go:88: q := &http.Request{URL: &u}\ns/q/req/ ? or r?",
			"disapproval": false,
			"date": "2013-06-18 03:12:37.992120",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/google-api-go-client/source/detail?r=1daa95ee8e04 ***\n\ngoogle-api-go-client: set opaque correctly in pre go1.1 versions\n\nR=adg, bradfitz, campoy\nCC=golang-dev\nhttps://codereview.appspot.com/10234052",
			"disapproval": false,
			"date": "2013-06-18 19:56:10.872500",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go\nFile googleapi/googleapi.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go#newcode245\ngoogleapi/googleapi.go:245: // SetOpaque sets Opaque in the passed URL so RequestURI returns a correct\nOn 2013/06/18 03:12:38, bradfitz wrote:\n> Maybe:\n> \n> // SetOpaque sets u.Opaque from u.Path such that HTTP requests to it\n> // don't alter any hex-escaped characters in u.Path.\n\nDone.\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go#newcode246\ngoogleapi/googleapi.go:246: // URI avoiding decoding of hex escaped characters.\nOn 2013/06/18 03:12:38, bradfitz wrote:\n> hex-escaped\n\nDone.\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go\nFile googleapi/googleapi_test.go (right):\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode16\ngoogleapi/googleapi_test.go:16: const reqTmpl = \"GET %v HTTP/1.1\\r\\nHost: %v\\r\\nUser-Agent: Go 1.1 package http\\r\\n\\r\\n\"\nI did run it, but the GOROOT wasn't correctly set, sorry.\n\nNow fixed and tested with both versions on a short program using %2F communicating with Cloud Storage and it works perfectly.\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode20\ngoogleapi/googleapi_test.go:20: out string\nOn 2013/06/18 03:12:38, bradfitz wrote:\n> out is a weird name now. (confusing because it's an input to a function which\n> makes the desired output) wantRequestURI is long, but accurate, and you're not\n> using tagged struct literals anyway.\n\nDone.\n\nhttps://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode88\ngoogleapi/googleapi_test.go:88: q := &http.Request{URL: &u}\nOn 2013/06/18 03:12:38, bradfitz wrote:\n> s/q/req/ ? or r?\n\nDone.",
			"disapproval": false,
			"date": "2013-06-18 18:30:18.407470",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nSubmit this first, and then we can do the auto-generated files in a\r\nseparate CL.\r\n\r\nThanks!\r\n\r\n\r\n\r\nOn Tue, Jun 18, 2013 at 11:30 AM, <campoy@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/10234052/diff/20001/**\r\n> googleapi/googleapi.go<https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go>\r\n> File googleapi/googleapi.go (right):\r\n>\r\n> https://codereview.appspot.**com/10234052/diff/20001/**\r\n> googleapi/googleapi.go#**newcode245<https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go#newcode245>\r\n> googleapi/googleapi.go:245: // SetOpaque sets Opaque in the passed URL\r\n> so RequestURI returns a correct\r\n> On 2013/06/18 03:12:38, bradfitz wrote:\r\n>\r\n>> Maybe:\r\n>>\r\n>\r\n>  // SetOpaque sets u.Opaque from u.Path such that HTTP requests to it\r\n>> // don't alter any hex-escaped characters in u.Path.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10234052/diff/20001/**\r\n> googleapi/googleapi.go#**newcode246<https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi.go#newcode246>\r\n> googleapi/googleapi.go:246: // URI avoiding decoding of hex escaped\r\n> characters.\r\n> On 2013/06/18 03:12:38, bradfitz wrote:\r\n>\r\n>> hex-escaped\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10234052/diff/20001/**\r\n> googleapi/googleapi_test.go<https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go>\r\n> File googleapi/googleapi_test.go (right):\r\n>\r\n> https://codereview.appspot.**com/10234052/diff/20001/**\r\n> googleapi/googleapi_test.go#**newcode16<https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode16>\r\n> googleapi/googleapi_test.go:**16: const reqTmpl = \"GET %v\r\n> HTTP/1.1\\r\\nHost: %v\\r\\nUser-Agent: Go 1.1 package http\\r\\n\\r\\n\"\r\n> I did run it, but the GOROOT wasn't correctly set, sorry.\r\n>\r\n> Now fixed and tested with both versions on a short program using %2F\r\n> communicating with Cloud Storage and it works perfectly.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10234052/diff/20001/**\r\n> googleapi/googleapi_test.go#**newcode20<https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode20>\r\n> googleapi/googleapi_test.go:**20: out string\r\n> On 2013/06/18 03:12:38, bradfitz wrote:\r\n>\r\n>> out is a weird name now. (confusing because it's an input to a\r\n>>\r\n> function which\r\n>\r\n>> makes the desired output) wantRequestURI is long, but accurate, and\r\n>>\r\n> you're not\r\n>\r\n>> using tagged struct literals anyway.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10234052/diff/20001/**\r\n> googleapi/googleapi_test.go#**newcode88<https://codereview.appspot.com/10234052/diff/20001/googleapi/googleapi_test.go#newcode88>\r\n> googleapi/googleapi_test.go:**88: q := &http.Request{URL: &u}\r\n> On 2013/06/18 03:12:38, bradfitz wrote:\r\n>\r\n>> s/q/req/ ? or r?\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/10234052/<https://codereview.appspot.com/10234052/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-18 19:27:46.359380",
			"approval": true
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 10234052: google-api-go-client: set opaque correctly in pre go1.1...",
	"created": "2013-06-14 00:51:02.048450",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		11001,
		14001,
		17001,
		20001,
		26001,
		32002,
		37001
	],
	"modified": "2013-06-18 19:56:12.808270",
	"closed": true,
	"issue": 10234052
}