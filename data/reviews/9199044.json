{
	"description": "runtime: inline size to class conversion in malloc()\nAlso change table type from int32[] to int8[] to save space in L1$.\n\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkMalloc           42           40   -4.68%",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-13 08:43:00.540430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nBut I'd add a comment in malloc.goc saying that it's the inlined version of\r\nSizeToClass.\r\n\r\n\r\n\r\nOn Mon, May 13, 2013 at 1:43 AM, <dvyukov@google.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@**code.google.com/p/go/<http://40google.com@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> runtime: inline size to class conversion in malloc()\r\n> Also change table type from int32[] to int8[] to save space in L1$.\r\n>\r\n> benchmark          old ns/op    new ns/op    delta\r\n> BenchmarkMalloc           42           40   -4.68%\r\n>\r\n> Please review this at https://codereview.appspot.**com/9199044/<https://codereview.appspot.com/9199044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/malloc.goc\r\n>   M src/pkg/runtime/malloc.h\r\n>   M src/pkg/runtime/msize.c\r\n>\r\n>\r\n> Index: src/pkg/runtime/malloc.goc\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/malloc.goc\r\n> +++ b/src/pkg/runtime/malloc.goc\r\n> @@ -50,7 +50,10 @@\r\n>         c->local_nmalloc++;\r\n>         if(size <= MaxSmallSize) {\r\n>                 // Allocate from mcache free lists.\r\n> -               sizeclass = runtime\u00b7SizeToClass(size);\r\n> +               if(size <= 1024-8)\r\n> +                       sizeclass = runtime\u00b7size_to_class8[(size+**7)>>3];\r\n> +               else\r\n> +                       sizeclass = runtime\u00b7size_to_class128[(**size-1024+127)\r\n> >> 7];\r\n>                 size = runtime\u00b7class_to_size[**sizeclass];\r\n>                 v = runtime\u00b7MCache_Alloc(c, sizeclass, size, zeroed);\r\n>                 if(v == nil)\r\n> Index: src/pkg/runtime/malloc.h\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/malloc.h\r\n> +++ b/src/pkg/runtime/malloc.h\r\n> @@ -275,6 +275,8 @@\r\n>  extern int32   runtime\u00b7class_to_size[**NumSizeClasses];\r\n>  extern int32   runtime\u00b7class_to_allocnpages[**NumSizeClasses];\r\n>  extern int32   runtime\u00b7class_to_**transfercount[NumSizeClasses];\r\n> +extern int8    runtime\u00b7size_to_class8[1024/8 + 1];\r\n> +extern int8    runtime\u00b7size_to_class128[(**MaxSmallSize-1024)/128 + 1];\r\n>  extern void    runtime\u00b7InitSizes(void);\r\n>\r\n>\r\n> Index: src/pkg/runtime/msize.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/msize.c\r\n> +++ b/src/pkg/runtime/msize.c\r\n> @@ -42,17 +42,17 @@\r\n>  // size divided by 128 (rounded up).  The arrays are filled in\r\n>  // by InitSizes.\r\n>\r\n> -static int32 size_to_class8[1024/8 + 1];\r\n> -static int32 size_to_class128[(**MaxSmallSize-1024)/128 + 1];\r\n> +int8 runtime\u00b7size_to_class8[1024/8 + 1];\r\n> +int8 runtime\u00b7size_to_class128[(**MaxSmallSize-1024)/128 + 1];\r\n>\r\n> -int32\r\n> -runtime\u00b7SizeToClass(int32 size)\r\n> +static int32\r\n> +SizeToClass(int32 size)\r\n>  {\r\n>         if(size > MaxSmallSize)\r\n>                 runtime\u00b7throw(\"SizeToClass - invalid size\");\r\n>         if(size > 1024-8)\r\n> -               return size_to_class128[(size-1024+**127) >> 7];\r\n> -       return size_to_class8[(size+7)>>3];\r\n> +               return runtime\u00b7size_to_class128[(**size-1024+127) >> 7];\r\n> +       return runtime\u00b7size_to_class8[(size+**7)>>3];\r\n>  }\r\n>\r\n>  void\r\n> @@ -111,16 +111,16 @@\r\n>         nextsize = 0;\r\n>         for (sizeclass = 1; sizeclass < NumSizeClasses; sizeclass++) {\r\n>                 for(; nextsize < 1024 && nextsize <= runtime\u00b7class_to_size[\r\n> **sizeclass]; nextsize+=8)\r\n> -                       size_to_class8[nextsize/8] = sizeclass;\r\n> +                       runtime\u00b7size_to_class8[**nextsize/8] = sizeclass;\r\n>                 if(nextsize >= 1024)\r\n>                         for(; nextsize <= runtime\u00b7class_to_size[**sizeclass];\r\n> nextsize += 128)\r\n> -                               size_to_class128[(nextsize-**1024)/128] =\r\n> sizeclass;\r\n> +                               runtime\u00b7size_to_class128[(**nextsize-1024)/128]\r\n> = sizeclass;\r\n>         }\r\n>\r\n>         // Double-check SizeToClass.\r\n>         if(0) {\r\n>                 for(n=0; n < MaxSmallSize; n++) {\r\n> -                       sizeclass = runtime\u00b7SizeToClass(n);\r\n> +                       sizeclass = SizeToClass(n);\r\n>                         if(sizeclass < 1 || sizeclass >= NumSizeClasses ||\r\n> runtime\u00b7class_to_size[**sizeclass] < n) {\r\n>                                 runtime\u00b7printf(\"size=%d sizeclass=%d\r\n> runtime\u00b7class_to_size=%d\\n\", n, sizeclass, runtime\u00b7class_to_size[**\r\n> sizeclass]);\r\n>                                 runtime\u00b7printf(\"incorrect SizeToClass\");\r\n> @@ -157,12 +157,14 @@\r\n>                         runtime\u00b7printf(\" %d\", runtime\u00b7class_to_size[**\r\n> sizeclass]);\r\n>                 runtime\u00b7printf(\"\\n\\n\");\r\n>                 runtime\u00b7printf(\"size_to_**class8:\");\r\n> -               for(i=0; i<nelem(size_to_class8); i++)\r\n> -                       runtime\u00b7printf(\" %d=>%d(%d)\\n\", i*8,\r\n> size_to_class8[i], runtime\u00b7class_to_size[size_to_**class8[i]]);\r\n> +               for(i=0; i<nelem(runtime\u00b7size_to_**class8); i++)\r\n> +                       runtime\u00b7printf(\" %d=>%d(%d)\\n\", i*8,\r\n> runtime\u00b7size_to_class8[i],\r\n> +                               runtime\u00b7class_to_size[runtime\u00b7**\r\n> size_to_class8[i]]);\r\n>                 runtime\u00b7printf(\"\\n\");\r\n>                 runtime\u00b7printf(\"size_to_**class128:\");\r\n> -               for(i=0; i<nelem(size_to_class128); i++)\r\n> -                       runtime\u00b7printf(\" %d=>%d(%d)\\n\", i*128,\r\n> size_to_class128[i], runtime\u00b7class_to_size[size_to_**class128[i]]);\r\n> +               for(i=0; i<nelem(runtime\u00b7size_to_**class128); i++)\r\n> +                       runtime\u00b7printf(\" %d=>%d(%d)\\n\", i*128,\r\n> runtime\u00b7size_to_class128[i],\r\n> +                               runtime\u00b7class_to_size[runtime\u00b7**\r\n> size_to_class128[i]]);\r\n>                 runtime\u00b7printf(\"\\n\");\r\n>         }\r\n>         runtime\u00b7throw(\"InitSizes failed\");\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-13 15:51:49.164280",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/13 15:51:49, bradfitz wrote:\n> LGTM\n> \n> But I'd add a comment in malloc.goc saying that it's the inlined version of\n> SizeToClass.\n\n\nDone.",
			"disapproval": false,
			"date": "2013-05-13 15:59:54.275020",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-14 22:47:34.571080",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0fe374e88745 ***\n\nruntime: inline size to class conversion in malloc()\nAlso change table type from int32[] to int8[] to save space in L1$.\n\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkMalloc           42           40   -4.68%\n\nR=golang-dev, bradfitz, r\nCC=golang-dev\nhttps://codereview.appspot.com/9199044",
			"disapproval": false,
			"date": "2013-05-15 07:03:00.090480",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9199044: runtime: inline size to class conversion in malloc()",
	"created": "2013-05-13 08:38:12.173690",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		15001
	],
	"modified": "2013-05-15 07:03:01.478780",
	"closed": true,
	"issue": 9199044
}