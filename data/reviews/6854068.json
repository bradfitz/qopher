{
	"description": "exp/types: don't test importing types if using gccgo\n\nThe exp/types packages does not support the gccgo export data\nformat.  At some point it should, but not yet.",
	"cc": [
		"bradfitz@golang.org",
		"r@golang.org",
		"iant@google.com",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Bad description?\r\n\r\nt.Logf(\"skipping test blah blah blah\") ?\r\n On Nov 19, 2012 4:36 PM, <iant@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> gri\r\n>\r\n> Please review this at http://codereview.appspot.com/**6854068/<http://codereview.appspot.com/6854068/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/exp/types/gcimporter_**test.go\r\n>\r\n>\r\n> Index: src/pkg/exp/types/gcimporter_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/exp/types/**gcimporter_test.go\r\n> +++ b/src/pkg/exp/types/**gcimporter_test.go\r\n> @@ -127,6 +127,9 @@\r\n>  }\r\n>\r\n>  func TestGcImportedTypes(t *testing.T) {\r\n> +       if runtime.Compiler == \"gccgo\" {\r\n> +               return\r\n> +       }\r\n>         for _, test := range importedObjectTests {\r\n>                 s := strings.Split(test.name, \".\")\r\n>                 if len(s) != 2 {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-20 00:50:26.533950",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "you don't like gri??\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-11-20 01:06:00.972880",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"iant@golang.org",
				"gri@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"iant@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-20 06:12:26.455070",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-20 00:35:53.641040",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"gri@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"iant@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2524ef4a77b4 ***\n\nexp/types: don't test importing types if using gccgo\n\nThe exp/types packages does not support the gccgo export data\nformat.  At some point it should, but not yet.\n\nR=gri, bradfitz, r, iant, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/6854068",
			"disapproval": false,
			"date": "2012-11-20 05:56:28.867430",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 19, 2012 at 4:50 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Bad description?\r\n>\r\n> t.Logf(\"skipping test blah blah blah\") ?\r\n\r\nYeah, I haven't made that mistake for a whle.\r\n\r\nI caught it quickly and ran hg change, but I forgot to run hg upload.\r\nShould be better now.\r\n\r\nIan\r\n\r\n> On Nov 19, 2012 4:36 PM, <iant@golang.org> wrote:\r\n>>\r\n>> Reviewers: golang-dev_googlegroups.com,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://go.googlecode.com/hg/\r\n>>\r\n>>\r\n>> Description:\r\n>> gri\r\n>>\r\n>> Please review this at http://codereview.appspot.com/6854068/\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/exp/types/gcimporter_test.go\r\n>>\r\n>>\r\n>> Index: src/pkg/exp/types/gcimporter_test.go\r\n>> ===================================================================\r\n>> --- a/src/pkg/exp/types/gcimporter_test.go\r\n>> +++ b/src/pkg/exp/types/gcimporter_test.go\r\n>> @@ -127,6 +127,9 @@\r\n>>  }\r\n>>\r\n>>  func TestGcImportedTypes(t *testing.T) {\r\n>> +       if runtime.Compiler == \"gccgo\" {\r\n>> +               return\r\n>> +       }\r\n>>         for _, test := range importedObjectTests {\r\n>>                 s := strings.Split(test.name, \".\")\r\n>>                 if len(s) != 2 {\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-20 01:16:11.396660",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"gri@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nbut i'm not gri",
			"disapproval": false,
			"date": "2012-11-20 01:19:04.231890",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"iant@golang.org",
				"gri@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"iant@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nbut could do with a comment if this is expected to work at a later date.",
			"disapproval": false,
			"date": "2012-11-20 01:21:07.469670",
			"approval": true
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 6854068: gri",
	"created": "2012-11-20 00:35:48.343290",
	"patchsets": [
		1,
		3001,
		5002
	],
	"modified": "2012-11-20 06:12:26.678160",
	"closed": true,
	"issue": 6854068
}