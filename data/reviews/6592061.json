{
	"description": "go/doc: rewrite whole file examples for playground",
	"cc": [
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-03 03:54:28.776400",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=gri (assigned by adg)",
			"disapproval": false,
			"date": "2012-10-03 03:54:56.811360",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode139\nsrc/pkg/go/doc/example.go:139: // Remove predeclared types from unresolved list.\ns/types/identifiers/\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode181\nsrc/pkg/go/doc/example.go:181: // If there are other unresolved identifiers, give up because this\nshould move this before imports synthesizing - give up early\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode255\nsrc/pkg/go/doc/example.go:255: Lbrace: body.Pos(),\ns/body.Pos()/body.Lbrace/\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode257\nsrc/pkg/go/doc/example.go:257: Rbrace: last.Pos(),\ns/last.Pos()/last.End()/ ?\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode266\nsrc/pkg/go/doc/example.go:266: func lastComment(b *ast.BlockStmt, c []*ast.CommentGroup) (i int, last *ast.CommentGroup) {\npos := b.Pos()\nend := b.End()\n\n(compute them only once)\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode268\nsrc/pkg/go/doc/example.go:268: if cg.Pos() < b.Pos() {\n< pos\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode271\nsrc/pkg/go/doc/example.go:271: if cg.End() > b.End() {\n> end\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/reader.go#newcode754\nsrc/pkg/go/doc/reader.go:754: // Predeclared identifiers (minus \"nil\")\nwhy is nil excluded?",
			"disapproval": false,
			"date": "2012-10-03 17:41:26.223770",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode139\nsrc/pkg/go/doc/example.go:139: // Remove predeclared types from unresolved list.\nOn 2012/10/03 17:41:26, gri wrote:\n> s/types/identifiers/\n\nDone.\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode181\nsrc/pkg/go/doc/example.go:181: // If there are other unresolved identifiers, give up because this\nOn 2012/10/03 17:41:26, gri wrote:\n> should move this before imports synthesizing - give up early\n\nDone.\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode255\nsrc/pkg/go/doc/example.go:255: Lbrace: body.Pos(),\nOn 2012/10/03 17:41:26, gri wrote:\n> s/body.Pos()/body.Lbrace/\n\nDone.\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode257\nsrc/pkg/go/doc/example.go:257: Rbrace: last.Pos(),\nOn 2012/10/03 17:41:26, gri wrote:\n> s/last.Pos()/last.End()/ ?\n\nI want to bring the brace up to where the comment begins, not where it ends. This seems correct to me?\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode266\nsrc/pkg/go/doc/example.go:266: func lastComment(b *ast.BlockStmt, c []*ast.CommentGroup) (i int, last *ast.CommentGroup) {\nOn 2012/10/03 17:41:26, gri wrote:\n> pos := b.Pos()\n> end := b.End()\n> \n> (compute them only once)\n\nDone.\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode268\nsrc/pkg/go/doc/example.go:268: if cg.Pos() < b.Pos() {\nOn 2012/10/03 17:41:26, gri wrote:\n> < pos\n\nDone.\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/example.go#newcode271\nsrc/pkg/go/doc/example.go:271: if cg.End() > b.End() {\nOn 2012/10/03 17:41:26, gri wrote:\n> > end\n\nDone.\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/6592061/diff/7002/src/pkg/go/doc/reader.go#newcode754\nsrc/pkg/go/doc/reader.go:754: // Predeclared identifiers (minus \"nil\")\nOn 2012/10/03 17:41:26, gri wrote:\n> why is nil excluded?\n\nI could include it as a string constant, I guess. It just didn't fit into the three lists below, and I thought it not worth its weight as a separate declaration.\n\nThoughts?",
			"disapproval": false,
			"date": "2012-10-03 21:54:43.808670",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=dd522c320be7 ***\n\ngo/doc: rewrite whole file examples for playground\n\nR=gri\nCC=gobot, golang-dev\nhttp://codereview.appspot.com/6592061",
			"disapproval": false,
			"date": "2012-10-03 21:55:31.196040",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/6592061/diff/6005/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/6592061/diff/6005/src/pkg/go/doc/reader.go#newcode754\nsrc/pkg/go/doc/reader.go:754: // Predeclared identifiers (minus \"nil\")\nnil is a predeclared constant",
			"disapproval": false,
			"date": "2012-10-03 21:56:54.400290",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6592061: go/doc: rewrite whole file examples for playground",
	"created": "2012-10-03 03:48:57.127410",
	"patchsets": [
		1,
		1002,
		4001,
		1003,
		7001,
		11001,
		2003,
		7002,
		6005
	],
	"modified": "2012-10-03 21:56:54.602500",
	"closed": true,
	"issue": 6592061
}