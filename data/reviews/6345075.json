{
	"description": "math/big: correct quadratic space complexity in Mul.\n\nThe previous implementation used to have a O(n) recursion\ndepth for unbalanced inputs. A test is added to check that a\nreasonable amount of bytes is allocated in this case.\n\nFixes issue 3807.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"gri@golang.org",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-08 07:11:51.323570",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Before:\n\n=== RUN TestMulUnbalanced\n--- FAIL: TestMulUnbalanced (0.44 seconds)\n\tnat_test.go:161: too many allocated bytes (317474304 is 634 times the size of inputs)\n\nAfter:\n\n=== RUN TestMulUnbalanced\n--- PASS: TestMulUnbalanced (0.02 seconds)\n\tnat_test.go:163: allocated bytes (1521424 is 3 times the size of inputs)",
			"disapproval": false,
			"date": "2012-07-07 13:14:40.884860",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-12 07:17:03.759980",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-07-07 13:05:50.558770",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-07 13:51:40.805250",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-07 13:53:31.454610",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Don't you want to call .clear before reslicing z, not after?\r\n",
			"disapproval": false,
			"date": "2012-07-07 13:45:51.506590",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-07 13:51:26.346840",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nThanks.\n- gri",
			"disapproval": false,
			"date": "2012-07-12 17:16:30.973750",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.",
			"disapproval": false,
			"date": "2012-07-11 18:27:56.271010",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n(I haven't seen one yet sent out by the code review tool).\r\n- gri\r\n\r\n\r\n2012/7/12 <remyoudompheng@gmail.com>\r\n\r\n> Hello golang-dev@googlegroups.com, dsymonds@golang.org, gri@golang.org\r\n>\r\n> (cc: golang-dev@googlegroups.com, remy@archlinux.org),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6345075/<http://codereview.appspot.com/6345075/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-12 17:19:29.586000",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/07 13:45:51, dsymonds wrote:\n> Don't you want to call .clear before reslicing z, not after?\n\nIt could also work, I left it after the reslicing because it was so in the old code. The first patch was incorrect (wrong index in the clear()), I re-uplaoded.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-07-07 13:55:34.955570",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for tracking this down. I believe your code is correct, but I think we can make this a bit more easily comprehensible by making the comments better.\n\nHere some preliminary comments, I will think about this some more. I haven't looked at the test code yet.\n\nAlso, perhaps you have a convincing argument to my question regarding the value of y1 (see below).\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go\nFile src/pkg/math/big/nat.go (right):\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode421\nsrc/pkg/math/big/nat.go:421: z[2*k:].clear() // upper portion of z is garbage\nchange comment to:\n\n// upper portion of z is garbage (and 2*k <= m+n since k <= n <= m)\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode424\nsrc/pkg/math/big/nat.go:424: //   x = xp*b^p + ... + x1*b + x0\nplease add an extra empty comment line before this line to match the other comments\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode424\nsrc/pkg/math/big/nat.go:424: //   x = xp*b^p + ... + x1*b + x0\nthis comment is a bit confusing because the x1 here is not the x1 from the comment above (line 408) - rather it's a part of that former x1.\n\nI think the former comment on line 408 should already be written in this format used here, so then this can become shorter.\n\nPerhaps (for line 408):\n\nx = xi<<(i*k) + ... x2<<(2*k) + x1<<k + x0\ny =                                             y1<<k + y0\n\nAs an aside (I have not thought this through entirely), can we be sure that y1 < 1<<k? That is, that there is no need for a series\n\ny = yi<<(i*k) + ... y2<<(2*k) + y1<<k + y0\n\nbecause all the yi for i > 1 are 0? Otherwise, while your code is correct, there may still be an issue.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode434\nsrc/pkg/math/big/nat.go:434: for kx := k; kx < len(x); kx += k {\ns/kx/i/\n\nsince you are talking about xi later\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode435\nsrc/pkg/math/big/nat.go:435: xi := x[kx:]\nadd a comment just to group the code in this loop body a bit:\n\n// determine xi\nxi = x[i:]\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode440\nsrc/pkg/math/big/nat.go:440: t = t.mul(xi, y1)\nswap the next two lines and get rid of the assignment to t; reads better:\n\n// add terms xi*y0<<i, xi*y1<<(i+k)\naddAt(z, t.mul(xi, y0), i)\naddAt(z, t.mul(xi, y1), i+k)",
			"disapproval": false,
			"date": "2012-07-11 19:41:46.080600",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1c10c31995d6 ***\n\nmath/big: correct quadratic space complexity in Mul.\n\nThe previous implementation used to have a O(n) recursion\ndepth for unbalanced inputs. A test is added to check that a\nreasonable amount of bytes is allocated in this case.\n\nFixes issue 3807.\n\nR=golang-dev, dsymonds, gri\nCC=golang-dev, remy\nhttp://codereview.appspot.com/6345075\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2012-07-12 17:18:38.737630",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some more comments.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go\nFile src/pkg/math/big/nat.go (right):\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode345\nsrc/pkg/math/big/nat.go:345: // addAt implements z += x*(1<<(_W*i)); z must be long enough.\nsimplify this first line to:\n\n// addAt implements z += x<<(_W*i); z must be long enough.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode406\nsrc/pkg/math/big/nat.go:406: // determine Karatsuba length k such that\nchange this to:\n\n\n\t// determine Karatsuba length k such that k <= n <= m and\n\t//\n\t//   x = xh*b + x0  (0 <= x0 < b) \n\t//   y = yh*b + y0  (0 <= y0 < b)\n\t//   b = _W<<k      (\"base\" of digits xi, yi)\n\t//\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode423\nsrc/pkg/math/big/nat.go:423: // If x1 and/or y1 are not 0, add missing terms to z explicitly:\nI am proposing to change this comment to:\n\n\n\t// If xh != 0 or yh != 0, add the missing terms to z. For\n\t// \n\t//   xh = xi*b^i + ... + x2*b^2 + x1*b  (0 <= xi < b)\n\t//   yh =                         y1*b  (0 <= y1 < b)\n\t//\n\t// the missing terms are\n\t//\n\t//   x0*y1*b and xi*y0*b^i, xi*y1*b^(i+1) for i > 0\n\t//\n\t// since all the yi for i > 1 are 0 by choice of k: If any of them\n\t// were > 0, then yh >= b^2 and thus y >= b^2. Then k' = k*2 would\n\t// be a larger valid threshold contradicting the assumption about k.\n\t//\n\nThis will tie this in better with the previous comment and argue what the yi for i > 1 must be 0.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode427\nsrc/pkg/math/big/nat.go:427: // So the missing terms are x0*y1*b and xi*y0*b^i, xi*b1*b^(i+1) for i > 0.\nxi*b1*b^(i+1) should be xi*y1*b^(i+1)\n\n(fixed in my new comment proposal)\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode428\nsrc/pkg/math/big/nat.go:428: if k < n || m != n {\nI suggest regrouping this slightly:\n\n\n\tif k < n || m != n {\n\t\tvar t nat\n\t\t\n\t\t// add x0*y1*b\n\t\tx0 := x0.norm()\n\t\ty1 := y[k:] // y1 is normalized because y is\n\t\taddAt(z, t.mul(x0, y1), k)\n\t\t\n\t\t// add xi*y0<<i, xi*y1<<(i+k)\n\t\ty0 := y0.norm()\n\t\tfor i := k; i < len(x); i += k {\n\t\t\txi := x[i:]\n\t\t\tif len(xi) > k {\n\t\t\t\txi = xi[:k]\n\t\t\t}\n\t\t\txi = xi.norm()\n\t\t\taddAt(z, t.mul(xi, y0), i)\n\t\t\taddAt(z, t.mul(xi, y1), i+k)\n\t\t}\n\t}\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go\nFile src/pkg/math/big/nat_test.go (right):\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode109\nsrc/pkg/math/big/nat_test.go:109: var mulTests = []struct {\nThese should be added to prodNN instead - it already tests for multiplication.\nUse a helper function to create the nat's in the prodNN table:\n\nfunc natFromString(s string) nat {\n    x, _, err := nat(nil).scan(strings.NewReader(s), 0)\n    if err != nil {\n      panic(err)\n    }\n    return x\n}\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode137\nsrc/pkg/math/big/nat_test.go:137: func TestMulnat(t *testing.T) {\nThis can go away - already covered by TestFunNN and the prodNN table.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode181\nsrc/pkg/math/big/nat_test.go:181: // TestMulUnbalanced tests that multiplying numbers of different lengths\nfactor out the allocation measurement portion - it might be useful elsewhere and helps declutter this function:\n\n// alloc returns the number of bytes allocated by invoking f.\nfunc alloc(f func()) uint64 {\n   var stats runtime.MemStats\n   runtime.ReadMemStats(&stats)\n   t := stats.TotalAlloc\n   f()\n   runtime.ReadMemStats(&stats)\n   return stats.TotalAlloc - t\n}\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode182\nsrc/pkg/math/big/nat_test.go:182: // does not cause deep recursion.\n... recursion and in turn allocate too much memory. Test case for issue 3807.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode183\nsrc/pkg/math/big/nat_test.go:183: func TestMulUnbalanced(t *testing.T) {\nThis becomes:\n\n\nfunc TestMulUnbalanced(t *testing.T) {\n\tx := rndNat(50000)\n\ty := rndNat(40)\n\tallocSize := allocBytes(func() {\n\t\tnat(nil).mul(x, y)\n\t})\n\tinputSize := uint64(len(x) + len(y)) * _S\n\tif ratio := allocSize / inputSize; ratio > 10 {\n\t\tt.Errorf(\"multiplication uses too much memory (%d > %d times input size)\", allocSize, ratio)\n\t}\n}",
			"disapproval": false,
			"date": "2012-07-12 06:09:02.055990",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go\nFile src/pkg/math/big/nat.go (right):\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode345\nsrc/pkg/math/big/nat.go:345: // addAt implements z += x*(1<<(_W*i)); z must be long enough.\nOn 2012/07/12 06:09:02, gri wrote:\n> simplify this first line to:\n> \n> // addAt implements z += x<<(_W*i); z must be long enough.\n\nDone.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode406\nsrc/pkg/math/big/nat.go:406: // determine Karatsuba length k such that\nOn 2012/07/12 06:09:02, gri wrote:\n> change this to:\n> // b = _W<<k      (\"base\" of digits xi, yi)\n\nx0 and y0 are made of k words, so the previous 1<<(_W*k) is probably the right one.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode406\nsrc/pkg/math/big/nat.go:406: // determine Karatsuba length k such that\nOn 2012/07/12 06:09:02, gri wrote:\n> change this to:\n> \n> \n> \t// determine Karatsuba length k such that k <= n <= m and\n> \t//\n> \t//   x = xh*b + x0  (0 <= x0 < b) \n> \t//   y = yh*b + y0  (0 <= y0 < b)\n> \t//   b = _W<<k      (\"base\" of digits xi, yi)\n> \t//\n\nDone.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode421\nsrc/pkg/math/big/nat.go:421: z[2*k:].clear() // upper portion of z is garbage\nOn 2012/07/11 19:41:46, gri wrote:\n> change comment to:\n> \n> // upper portion of z is garbage (and 2*k <= m+n since k <= n <= m)\n\nDone.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode423\nsrc/pkg/math/big/nat.go:423: // If x1 and/or y1 are not 0, add missing terms to z explicitly:\nOn 2012/07/12 06:09:02, gri wrote:\n> I am proposing to change this comment to:\n> \n> \n> \t// If xh != 0 or yh != 0, add the missing terms to z. For\n> \t// \n> \t//   xh = xi*b^i + ... + x2*b^2 + x1*b  (0 <= xi < b)\n> \t//   yh =                         y1*b  (0 <= y1 < b)\n> \t//\n> \t// the missing terms are\n> \t//\n> \t//   x0*y1*b and xi*y0*b^i, xi*y1*b^(i+1) for i > 0\n> \t//\n> \t// since all the yi for i > 1 are 0 by choice of k: If any of them\n> \t// were > 0, then yh >= b^2 and thus y >= b^2. Then k' = k*2 would\n> \t// be a larger valid threshold contradicting the assumption about k.\n> \t//\n> \n> This will tie this in better with the previous comment and argue what the yi for\n> i > 1 must be 0.\n\nDone.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat.go#newcode428\nsrc/pkg/math/big/nat.go:428: if k < n || m != n {\nOn 2012/07/12 06:09:02, gri wrote:\n>  // add xi*y0<<i, xi*y1<<(i+k)\n\nThe i here is not the same i as above but I'm not sure how to write it without ending up with ugly formulae.\n\nDone.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go\nFile src/pkg/math/big/nat_test.go (right):\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode109\nsrc/pkg/math/big/nat_test.go:109: var mulTests = []struct {\nOn 2012/07/12 06:09:02, gri wrote:\n> These should be added to prodNN instead - it already tests for multiplication.\n> Use a helper function to create the nat's in the prodNN table:\n> \n> func natFromString(s string) nat {\n>     x, _, err := nat(nil).scan(strings.NewReader(s), 0)\n>     if err != nil {\n>       panic(err)\n>     }\n>     return x\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode137\nsrc/pkg/math/big/nat_test.go:137: func TestMulnat(t *testing.T) {\nOn 2012/07/12 06:09:02, gri wrote:\n> This can go away - already covered by TestFunNN and the prodNN table.\n\nDone.\n\nhttp://codereview.appspot.com/6345075/diff/3004/src/pkg/math/big/nat_test.go#newcode181\nsrc/pkg/math/big/nat_test.go:181: // TestMulUnbalanced tests that multiplying numbers of different lengths\nOn 2012/07/12 06:09:02, gri wrote:\n> factor out the allocation measurement portion - it might be useful elsewhere and\n> helps declutter this function:\n> \n> // alloc returns the number of bytes allocated by invoking f.\n> func alloc(f func()) uint64 {\n>    var stats runtime.MemStats\n>    runtime.ReadMemStats(&stats)\n>    t := stats.TotalAlloc\n>    f()\n>    runtime.ReadMemStats(&stats)\n>    return stats.TotalAlloc - t\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-07-21 06:43:06.449010",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6345075: math/big: correct quadratic space complexity in Mul.",
	"created": "2012-07-07 13:05:40.454090",
	"patchsets": [
		1,
		1002,
		4001,
		9001,
		9002,
		8002,
		3004,
		13002
	],
	"modified": "2012-07-21 06:43:06.611230",
	"closed": true,
	"issue": 6345075
}