{
	"description": "net/http: fix client goroutine leak with persistent connections\n\nThanks to Sascha Matzke & Florian Weimer for diagnosing.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"bradfitz@google.com",
		"kevlar@google.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM though I have been bitten later by these sorts of tests (counting active goroutines) in my own code.",
			"disapproval": false,
			"date": "2012-02-14 01:16:28.819435",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's printing the GB of output?\nCan we make it stop after printing say 10 errors?\n",
			"disapproval": false,
			"date": "2012-02-14 03:52:18.500818",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-14 00:06:21.485963",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-14 00:29:20.143936",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go#newcode651\nsrc/pkg/net/http/transport_test.go:651: n0 := runtime.Goroutines()\nOn 2012/02/14 00:17:30, adg wrote:\n> It would be nice to not have to rely on this. Is it possible to punch through\n> and look at the connection pools themselves?\n\nNo.\n\nThe connections pools would look fine.  The problem is goroutines not exiting.\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go#newcode681\nsrc/pkg/net/http/transport_test.go:681: runtime.Gosched()\nOn 2012/02/14 00:17:30, adg wrote:\n> This also deserves a comment. Why do we need to Gosched at all?\n\nThis can actually go now.  It was an experiment to see if it'd be stable without the sleep.  It wasn't.\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go#newcode688\nsrc/pkg/net/http/transport_test.go:688: if growth > 10 {\nOn 2012/02/14 00:17:30, adg wrote:\n> where does the magic 10 come from?\n\nDouble the actual number of expected goroutine growth.  We actually see 5.  I'll add a comment.",
			"disapproval": false,
			"date": "2012-02-14 00:29:26.466113",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"kevlar@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Appears to leak fds on darwin/386.  Disabled test.",
			"disapproval": false,
			"date": "2012-02-14 03:27:20.874588",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"kevlar@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e30044d9240a ***\n\nnet/http: fix client goroutine leak with persistent connections\n\nThanks to Sascha Matzke & Florian Weimer for diagnosing.\n\nR=golang-dev, adg, bradfitz, kevlar\nCC=golang-dev\nhttp://codereview.appspot.com/5656046",
			"disapproval": false,
			"date": "2012-02-14 01:49:03.250808",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think it actually leaks. I think it just hits the OS X small fd\nulimit of 256.\n\nI've lowered the number of parallel connections from 100 to 50, which\nshould keep it under 256.\n\n$ go test -test.run=Leak -test.v\n=== RUN TestTransportPersistConnLeak\nGot:\ntotal 0\nlr-x------ 1 bradfitz eng 64 2012-02-14 14:49 0 -> /dev/null\nlrwx------ 1 bradfitz eng 64 2012-02-14 14:49 1 -> /dev/pts/19\nlrwx------ 1 bradfitz eng 64 2012-02-14 14:49 2 -> /dev/pts/19\nlrwx------ 1 bradfitz eng 64 2012-02-14 14:49 3 -> socket:[1386530]\nlr-x------ 1 bradfitz eng 64 2012-02-14 14:49 4 -> pipe:[1386531]\nl-wx------ 1 bradfitz eng 64 2012-02-14 14:49 5 -> pipe:[1386531]\nlrwx------ 1 bradfitz eng 64 2012-02-14 14:49 6 -> anon_inode:[eventpoll]\nlr-x------ 1 bradfitz eng 64 2012-02-14 14:49 8 -> pipe:[1386678]\n--- PASS: TestTransportPersistConnLeak (0.12 seconds)\n   transport_test.go:697: goroutine growth: 4 -> 154 -> 5 (delta: 1)\n\n\nOn Tue, Feb 14, 2012 at 2:27 PM, <rsc@golang.org> wrote:\n\n> Appears to leak fds on darwin/386.  Disabled test.\n>\n>\n> http://codereview.appspot.com/**5656046/<http://codereview.appspot.com/5656046/>\n>\n",
			"disapproval": false,
			"date": "2012-02-14 03:50:44.833746",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM for the fix\n\nSome comments about the test.\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go#newcode651\nsrc/pkg/net/http/transport_test.go:651: n0 := runtime.Goroutines()\nIt would be nice to not have to rely on this. Is it possible to punch through and look at the connection pools themselves?\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go#newcode681\nsrc/pkg/net/http/transport_test.go:681: runtime.Gosched()\nThis also deserves a comment. Why do we need to Gosched at all?\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go#newcode683\nsrc/pkg/net/http/transport_test.go:683: runtime.GC()\nAdd a comment\n// Russ said to GC twice for good measure.\n\nhttp://codereview.appspot.com/5656046/diff/4001/src/pkg/net/http/transport_test.go#newcode688\nsrc/pkg/net/http/transport_test.go:688: if growth > 10 {\nwhere does the magic 10 come from?",
			"disapproval": false,
			"date": "2012-02-14 00:17:30.229068",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-14 01:47:58.336983",
			"approval": true
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5656046: net/http: fix client goroutine leak with persistent con...",
	"created": "2012-02-14 00:06:02.089389",
	"patchsets": [
		1,
		2001,
		4001,
		2003,
		1005
	],
	"modified": "2012-02-14 03:27:21.067057",
	"closed": true,
	"issue": 5656046
}