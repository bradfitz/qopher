{
	"description": "effective_go.html: fix semaphore example\nIt didn't work properly according to the Go memory model.\nFixes issue 5023.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"adg@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-11 18:36:23.142240",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7698045/diff/1/src/pkg/debug/macho/file.go\nFile src/pkg/debug/macho/file.go (right):\n\nhttps://codereview.appspot.com/7698045/diff/1/src/pkg/debug/macho/file.go#newcode146\nsrc/pkg/debug/macho/file.go:146: // not have the correct format for an object file.\nDoes it belong here?",
			"disapproval": false,
			"date": "2013-03-11 18:50:39.425820",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7698045/diff/1/doc/effective_go.html\nFile doc/effective_go.html (right):\n\nhttps://codereview.appspot.com/7698045/diff/1/doc/effective_go.html#newcode2901\ndoc/effective_go.html:2901: so during initialization we prime the channel  by filling it to capacity.\ndouble space",
			"disapproval": false,
			"date": "2013-03-11 18:52:13.347420",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The change looks good, but I have the following suggestion while we are here:\n\nhttps://codereview.appspot.com/7698045/diff/1/doc/effective_go.html\nFile doc/effective_go.html (right):\n\nhttps://codereview.appspot.com/7698045/diff/1/doc/effective_go.html#newcode2915\ndoc/effective_go.html:2915: go handle(req)  // Don't wait for handle to finish.\nThere are 2 ways to implement this pattern. One is this. And the other is:\n\nfunc Serve(queue chan *Request) {\n  sem := make(chan int, MaxOutstanding)\n  for i := 0; i < MaxOutstanding; i++ {\n    sem <- 1\n  }\n  for req := range queue {\n    <-sem\n    go func() {\n      process(req)\n      sem <- 1\n    }\n  }\n}\n\nThe difference is that the current way potentially receives unbounded amount of requests from the queue and spawns unbounded number of goroutines, it's just calls to process() that are limited.\n\nI've seen a few instances of the current approach in the group, and I suspect they slip from this doc. However I do not see any reason to use it instead of the approach above.\nDo we want to change it to not suggest creation of unbounded number of goroutines?",
			"disapproval": false,
			"date": "2013-03-11 19:02:59.441690",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-11 19:32:22.733060",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\nOn 12 Mar 2013 06:32, <r@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, dvyukov@google.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7698045/<https://codereview.appspot.com/7698045/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-12 01:06:17.008730",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThe second version has another serious advantage -- it applies backpressure on the incoming chan in case of overload. It's a nice feature of bounded channels -- overload automatically propagates over the graph. The first version happily consumes everything that comes in.",
			"disapproval": false,
			"date": "2013-03-12 04:10:02.863900",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"adg@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1a329995118c ***\n\neffective_go.html: fix semaphore example\nIt didn't work properly according to the Go memory model.\nFixes issue 5023.\n\nR=golang-dev, dvyukov, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7698045",
			"disapproval": false,
			"date": "2013-03-12 17:53:06.784780",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7698045: effective_go.html: fix semaphore example",
	"created": "2013-03-11 18:36:17.170450",
	"patchsets": [
		1,
		8001,
		14001
	],
	"modified": "2013-03-12 17:53:08.512440",
	"closed": true,
	"issue": 7698045
}