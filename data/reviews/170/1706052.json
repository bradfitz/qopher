{
	"description": "\tThis adds an automated test to validate that both Caller and Callers+FuncLine returns the same information.\n        I currently runs up to the entrypoint mainstart where I get two different set of line numbers (61 against 60).",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "girard.m1@gmail.com",
			"recipients": [
				"girard.m1@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-07-02 00:28:27.847613",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Are you saying that the test fails?\nCan we fix the test in this CL too?\n\nRuss\n\n\nOn Thu, Jul 1, 2010 at 17:28,  <girard.m1@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change.\n>\n>\n> Description:\n> \u00a0 \u00a0 \u00a0 \u00a0This adds an automated test to validate that both Caller and\n> Callers+FuncLine returns the same information.\n> \u00a0 \u00a0 \u00a0 \u00a0I currently runs up to the entrypoint mainstart where I get two\n> different set of line numbers (61 against 60).\n>\n> Please review this at http://codereview.appspot.com/1706052/show\n>\n> Affected files:\n> \u00a0A test/trace.go\n>\n>\n> Index: test/trace.go\n> ===================================================================\n> new file mode 100644\n> --- /dev/null\n> +++ b/test/trace.go\n> @@ -0,0 +1,57 @@\n> +// $G $D/$F.go && $L $F.$A && ./$A.out\n> +\n> +// Test the trace mechanism\n> +\n> +package main\n> +\n> +import (\n> + \u00a0 \u00a0 \u00a0 \"runtime\"\n> + \u00a0 \u00a0 \u00a0 \"fmt\"\n> +)\n> +\n> +func c() {\n> + \u00a0 \u00a0 \u00a0 stack := make([]uintptr, 10)\n> + \u00a0 \u00a0 \u00a0 depth := runtime.Callers(1, stack)\n> + \u00a0 \u00a0 \u00a0 for i:= 1; i < depth; i++ {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pc := stack[i]\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 func_1 := runtime.FuncForPC(pc)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if func_1 == nil {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(\"Could resolve the pc returned by Callers\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 file, line := func_1.FileLine(pc)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"1:> %s:%d: %s %x>(%x)\\n\", file, line,\n> func_1.Name(), func_1.Entry(), pc)\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Check against symtab.c's funcline.\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // This function is used by Caller to resolve the function\n> name\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pc2, file2, line2, ok := runtime.Caller(i)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 func_2 := runtime.FuncForPC(pc)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"2:> %s:%d: %s %x>(%x)\\n\", file2, line2,\n> func_2.Name(), func_2.Entry(), pc2)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if !ok {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(\"Could not fetch the information using\n> runtime.Caller!\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if pc!=pc2 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(\"Program counter returned by Callers does not\n> match the one returned by Caller\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if file!=file2 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(\"File name returned by FileLine does not match\n> the one returned by Caller\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if line!=line2 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(\"Line returned by FileLine does not match the\n> one returned by Caller\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 }\n> +}\n> +\n> +func b(f func()) {\n> + \u00a0 \u00a0 \u00a0 f()\n> +}\n> +\n> +func a() {\n> + \u00a0 \u00a0 \u00a0 b(c)\n> +}\n> +\n> +func main() {\n> + \u00a0 \u00a0 \u00a0 a()\n> +}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2010-07-02 05:02:57.911089",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "It would be kinder to the testing infrastructure to print and call os.Exit(1) rather than panic.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2010-07-02 06:34:38.684966",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"girard.m1@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/02 05:02:57, rsc wrote:\n> Are you saying that the test fails?\n> Can we fix the test in this CL too?\n\nThis CL is related to http://code.google.com/p/go/issues/detail?id=870",
			"disapproval": false,
			"date": "2010-07-21 00:38:20.394672",
			"approval": false
		},
		{
			"sender": "girard.m1@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Yes, I wrote both change list.\n\n\nOn Tue, Jul 20, 2010 at 8:38 PM,  <adg@golang.org> wrote:\n> On 2010/07/02 05:02:57, rsc wrote:\n>>\n>> Are you saying that the test fails?\n>> Can we fix the test in this CL too?\n>\n> This CL is related to http://code.google.com/p/go/issues/detail?id=870\n>\n> http://codereview.appspot.com/1706052/show\n>\n",
			"disapproval": false,
			"date": "2010-07-21 04:42:15.858130",
			"approval": false
		},
		{
			"sender": "girard.m1@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Hum... With the \"fix\" only the last stack line fails. Without it,\nevery line numbers are different. Check againts the source using VIM's\nquickfix feature shows that symtab.c's function is correct.\n\nOn Wed, Jul 21, 2010 at 12:42 AM, Mathieu Girard <girard.m1@gmail.com> wrote:\n> Yes, I wrote both change list.\n>\n>\n> On Tue, Jul 20, 2010 at 8:38 PM, \u00a0<adg@golang.org> wrote:\n>> On 2010/07/02 05:02:57, rsc wrote:\n>>>\n>>> Are you saying that the test fails?\n>>> Can we fix the test in this CL too?\n>>\n>> This CL is related to http://code.google.com/p/go/issues/detail?id=870\n>>\n>> http://codereview.appspot.com/1706052/show\n>>\n>\n",
			"disapproval": false,
			"date": "2010-07-21 04:46:03.664052",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"girard.m1@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2010-08-03 20:27:31.910354",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"girard.m1@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Seems like a reasonable thing to test.\nThere are a bunch of small issues.\n\nPlease add the same copyright notice you'll\nfind in the other tests. \n\nTests should not print unless there is a problem.\n\nInstead of calling panic use print and exit.\n\nAvoid _ in variable names.  func2 is fine instead of func_2.\nSpeaking of func_2, I think you meant\n\n func_2 := runtime.FuncForPC(pc2)\n\nThe code that's there says pc not pc2.",
			"disapproval": false,
			"date": "2010-08-26 16:48:18.990309",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"girard.m1@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Also please run hg gofmt.",
			"disapproval": false,
			"date": "2010-08-26 16:48:33.575478",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"girard.m1@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "timed out but added to issue 1138 as a test case",
			"disapproval": false,
			"date": "2010-11-01 20:46:04.211259",
			"approval": false
		}
	],
	"owner_email": "girard.m1@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "girard.m1",
	"subject": "code review 1706052: \tThis adds an automated test to validate that both Call...",
	"created": "2010-07-02 00:28:24.427046",
	"patchsets": [
		1
	],
	"modified": "2010-11-01 20:46:04.211259",
	"closed": false,
	"issue": 1706052
}