{
	"description": "go/ast: comment map implementation\n\nA comment map associates comments with AST nodes\nand permits correct updating of the AST's comment\nlist when the AST is manipulated.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-04 23:51:02.689137",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hold off on this one - there's some issues with it\r\n- gri\r\n\r\nOn Mon, Jun 4, 2012 at 4:51 PM,  <gri@golang.org> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> go/ast: comment map implementation\r\n>\r\n> A comment map associates comments with AST nodes\r\n> and permits correct updating of the AST's comment\r\n> list when the AST is manipulated.\r\n>\r\n> Please review this at http://codereview.appspot.com/6281044/\r\n>\r\n> Affected files:\r\n> \u00a0A src/pkg/go/ast/commentmap.go\r\n> \u00a0A src/pkg/go/ast/commentmap_test.go\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-05 17:13:04.232855",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nThe current plan is to use comment maps to augment the AST filtering code which is not dealing with comments correctly. Those changes should be completely internal.\n\nA longer-term plan could be to use comment maps instead of comment lists (it seems a better representation in retrospect). For one, one could extend tha map with more information about the comment positioning (before, next, after, a node), and then use this in the go/printer directly. It may simplify its logic dramatically. But for a good job one would have to experiment a little bit.\n\nOne option might be to not expose comment maps at all for now (keep it completely inside AST and just fix the filtering and related issue 3454) and export it once we are happy with it.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go\nFile src/pkg/go/ast/commentmap.go (right):\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode12\nsrc/pkg/go/ast/commentmap.go:12: // byPos implements sort.Interface\nOn 2012/06/07 03:26:43, rsc wrote:\n> These are fairly formulaic. I'd drop them, or change them to say something\n> specific to the type, like\n> \n> // byPos implements sort.Interface, comparing by source position.\n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode19\nsrc/pkg/go/ast/commentmap.go:19: // SortComments sorts the list of comment groups in source order.\nOn 2012/06/07 03:26:43, rsc wrote:\n> Does this need to be public API?\n\nI was debating this myself. Changed. We can always add it later if necessary.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode30\nsrc/pkg/go/ast/commentmap.go:30: // A CommentMap maps AST nodes to the list of comment groups\nOn 2012/06/07 03:26:43, rsc wrote:\n> Please use singular where possible, to be more precise:\n> \n> // A CommentMap maps an AST node to a list of comment groups\n> // associated with it.\n> \n> I would also appreciate a sentence or two more explaining the relationship, like\n> \"These are the comments preceding that statement.\" or something. I don't\n> understand how the map distinguishes a preceding block comment from a following\n> end-of-line comment.\n> \n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode58\nsrc/pkg/go/ast/commentmap.go:58: list := make([]Node, 0, 64) // 64 seems like a good initial capacity\nOn 2012/06/07 03:26:43, rsc wrote:\n> Any particular reason? I would think append would be in charge of that decision.\n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode65\nsrc/pkg/go/ast/commentmap.go:65: panic(\"internal error: should not be reachable\")\nOn 2012/06/07 03:26:43, rsc wrote:\n> Is there harm in returning false? Might avoid panics later.\n\nif reached, it does indicate a misunderstanding of the traversal or the AST. but it's fine to ignore it.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode131\nsrc/pkg/go/ast/commentmap.go:131: // and the comments are taken from f.Comments.\nOn 2012/06/07 03:26:43, rsc wrote:\n> Like above, it would be nice to make clear how block comments vs end-of-line\n> comments are handled.\n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode141\nsrc/pkg/go/ast/commentmap.go:141: clist := make([]*CommentGroup, len(f.Comments))\nOn 2012/06/07 03:26:43, rsc wrote:\n> maybe comments and nodes instead of clist and nlist? The types make clear that\n> they are lists.\n> \n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode147\nsrc/pkg/go/ast/commentmap.go:147: // create node list in lexcial order\nOn 2012/06/07 03:26:43, rsc wrote:\n> lexical\n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode152\nsrc/pkg/go/ast/commentmap.go:152: var p Node               // previous node\nOn 2012/06/07 03:26:43, rsc wrote:\n> var ( ...?\n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode181\nsrc/pkg/go/ast/commentmap.go:181: // TODO(gri) try to simplify the logic below\nI think the stack is not needed and one could use the recursion directly. I am fine with making this change eventually, but first I'd like to gain some more experience with this. The change would be completely internal.\n\nOn 2012/06/07 03:26:43, rsc wrote:\n> One way to simplify would be to pop nodes from the stack until the top of stack\n> holds a node that cannot match the comment, and then use the node before that\n> (the one most recently popped). I wonder if the stack is even necessary. Perhaps\n> it would work to do the depth-first pre-order traversal here instead:\n> \n> comments = ... sorted by order\n> Inspect(f, func(n Node) bool {\n>     switch n.(type) {\n>     case nil, *CommentGroup, *Comment:\n>         return false\n>     }\n> \n>     for len(comments) > 0 && comments[0].Line <= n.Line {\n>        cmap[n] = append(cmap[n], comments[0])\n>        comments = comments[1:]\n>     }\n> })\n> \n>  \n> This would have different semantics than the current code but would be very easy\n> to explain: each comment is assigned to the first node that starts on the same\n> line or a later line in the source.\n> \n> // comment1\n> if x { // comment2\n> } // comment3\n> // comment4\n> \n> f()\n> \n> in this case comment1 and comment2 would be assigned to the if, while comment3\n> and comment4 would be associated with f. I think the comment3 and comment4 cases\n> are pretty rare.\n\nI sometimes have a block/statement ending in a comment (on the next line) stating the invariants I know after that block, followed by an empty line. It's not complicated to handle in the existing code, and I am reasonably confident it works correctly. I prefer to make changes here later.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode234\nsrc/pkg/go/ast/commentmap.go:234: // create a map of all nodes\nOn 2012/06/07 03:26:43, rsc wrote:\n> I wonder if it would save noticeable memory to copy cmap instead:\n> \n> missing := map[Node]bool{}\n> for n := range cmap { missing[n] = true }\n> Inspect( ... delete(missing, n) ... )\n> ... if missing[n] { delete(cmap, n) } ...\n> \n\ngood idea. done.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode248\nsrc/pkg/go/ast/commentmap.go:248: // List returns the list of comment groups given a comment map.\nOn 2012/06/07 03:26:43, rsc wrote:\n> s/given a/in the/\n\nDone.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap_test.go\nFile src/pkg/go/ast/commentmap_test.go (right):\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap_test.go#newcode5\nsrc/pkg/go/ast/commentmap_test.go:5: // To avoid cyclic dependencies, this file is in a separate package.\nOn 2012/06/07 03:26:43, rsc wrote:\n> This confused me on first reading.\n> \"avoid a cyclic dependency with go/parser\"?\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-06-07 18:59:22.005155",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5da2d3663cf1 ***\n\ngo/ast: comment map implementation\n\nA comment map associates comments with AST nodes\nand permits correct updating of the AST's comment\nlist when the AST is manipulated.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6281044",
			"disapproval": false,
			"date": "2012-06-13 20:32:45.149002",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-13 19:09:30.203792",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-07 01:23:25.588156",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is new API, but we can still tweak it until it is released, probably in Go 1.1.\n\nI am curious about the future uses of the CommentMap. It seems like it does not have enough information to be used in gofmt, for example. What are the plans?\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go\nFile src/pkg/go/ast/commentmap.go (right):\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode12\nsrc/pkg/go/ast/commentmap.go:12: // byPos implements sort.Interface\nThese are fairly formulaic. I'd drop them, or change them to say something specific to the type, like\n\n// byPos implements sort.Interface, comparing by source position.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode19\nsrc/pkg/go/ast/commentmap.go:19: // SortComments sorts the list of comment groups in source order.\nDoes this need to be public API?\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode30\nsrc/pkg/go/ast/commentmap.go:30: // A CommentMap maps AST nodes to the list of comment groups\nPlease use singular where possible, to be more precise:\n\n// A CommentMap maps an AST node to a list of comment groups\n// associated with it.\n\nI would also appreciate a sentence or two more explaining the relationship, like \"These are the comments preceding that statement.\" or something. I don't understand how the map distinguishes a preceding block comment from a following end-of-line comment.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode58\nsrc/pkg/go/ast/commentmap.go:58: list := make([]Node, 0, 64) // 64 seems like a good initial capacity\nAny particular reason? I would think append would be in charge of that decision.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode65\nsrc/pkg/go/ast/commentmap.go:65: panic(\"internal error: should not be reachable\")\nIs there harm in returning false? Might avoid panics later.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode131\nsrc/pkg/go/ast/commentmap.go:131: // and the comments are taken from f.Comments.\nLike above, it would be nice to make clear how block comments vs end-of-line comments are handled.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode141\nsrc/pkg/go/ast/commentmap.go:141: clist := make([]*CommentGroup, len(f.Comments))\nmaybe comments and nodes instead of clist and nlist? The types make clear that they are lists.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode147\nsrc/pkg/go/ast/commentmap.go:147: // create node list in lexcial order\nlexical\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode152\nsrc/pkg/go/ast/commentmap.go:152: var p Node               // previous node\nvar ( ...?\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode181\nsrc/pkg/go/ast/commentmap.go:181: // TODO(gri) try to simplify the logic below\nOne way to simplify would be to pop nodes from the stack until the top of stack holds a node that cannot match the comment, and then use the node before that (the one most recently popped). I wonder if the stack is even necessary. Perhaps it would work to do the depth-first pre-order traversal here instead:\n\ncomments = ... sorted by order\nInspect(f, func(n Node) bool {\n    switch n.(type) {\n    case nil, *CommentGroup, *Comment:\n        return false\n    }\n\n    for len(comments) > 0 && comments[0].Line <= n.Line {\n       cmap[n] = append(cmap[n], comments[0])\n       comments = comments[1:]\n    }\n})\n\n \nThis would have different semantics than the current code but would be very easy to explain: each comment is assigned to the first node that starts on the same line or a later line in the source.\n\n// comment1\nif x { // comment2\n} // comment3\n// comment4\n\nf()\n\nin this case comment1 and comment2 would be assigned to the if, while comment3 and comment4 would be associated with f. I think the comment3 and comment4 cases are pretty rare.\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode234\nsrc/pkg/go/ast/commentmap.go:234: // create a map of all nodes\nI wonder if it would save noticeable memory to copy cmap instead:\n\nmissing := map[Node]bool{}\nfor n := range cmap { missing[n] = true }\nInspect( ... delete(missing, n) ... )\n... if missing[n] { delete(cmap, n) } ...\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap.go#newcode248\nsrc/pkg/go/ast/commentmap.go:248: // List returns the list of comment groups given a comment map.\ns/given a/in the/\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap_test.go\nFile src/pkg/go/ast/commentmap_test.go (right):\n\nhttp://codereview.appspot.com/6281044/diff/15002/src/pkg/go/ast/commentmap_test.go#newcode5\nsrc/pkg/go/ast/commentmap_test.go:5: // To avoid cyclic dependencies, this file is in a separate package.\nThis confused me on first reading.\n\"avoid a cyclic dependency with go/parser\"?",
			"disapproval": false,
			"date": "2012-06-07 03:26:43.831595",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nChanged Update function (now called Filter).\r\n- gri\r\n\r\nOn Thu, Jun 7, 2012 at 12:09 PM,  <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n>\r\n> http://codereview.appspot.com/6281044/\r\n",
			"disapproval": false,
			"date": "2012-06-07 23:44:11.317776",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-07 19:09:41.067824",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6281044: go/ast: comment map implementation",
	"created": "2012-06-02 00:05:46.780471",
	"patchsets": [
		1,
		2001,
		5001,
		2002,
		10001,
		13001,
		15002,
		11003,
		15006,
		16005,
		21001
	],
	"modified": "2012-06-13 20:32:45.858092",
	"closed": true,
	"issue": 6281044
}