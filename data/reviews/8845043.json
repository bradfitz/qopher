{
	"description": "io: explain what (0,nil) means from Read\nAlso add a new variable ErrNoProgress that io.Readers can use to\nreport ineffectual Read calls.\nFixes issue 5310.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-18 00:42:53.094690",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\"should usually\" seems awfully wishy washy for something so specific. Perhaps\r\n  // The caller should handle this situation and may treat it as end-of-file.\r\n",
			"disapproval": false,
			"date": "2013-04-18 01:04:39.063730",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I really don't like this.\r\n\r\nI don't think (0, nil) should be documented as equivalent to EOF.  I even\r\nthink bufio.Scanner's behavior is wrong.\r\n\r\nIn fact, I should (0, nil) should be explicitly documented as a no-op, and\r\nas such discouraged as it's useless.\r\n\r\n\r\n\r\n\r\nOn Wed, Apr 17, 2013 at 5:42 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> io: explain what (0,nil) means from Read\r\n> Fixes issue 5310.\r\n>\r\n> Please review this at https://codereview.appspot.**com/8845043/<https://codereview.appspot.com/8845043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/io/io.go\r\n>\r\n>\r\n> Index: src/pkg/io/io.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/io/io.go\r\n> +++ b/src/pkg/io/io.go\r\n> @@ -51,6 +51,10 @@\r\n>  // return either err == EOF or err == nil.  The next Read should\r\n>  // return 0, EOF regardless.\r\n>  //\r\n> +// In some cases, such as reading from an interactive terminal,\r\n> +// an implementation may return n==0 and err==nil.\r\n> +// The caller should usually treat this situation as end-of-file.\r\n> +//\r\n>  // Callers should always process the n > 0 bytes returned before\r\n>  // considering the error err.  Doing so correctly handles I/O errors\r\n>  // that happen after reading some bytes and also both of the\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-18 02:20:02.728020",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think bufio.Scanner is correct and io.Copy is wrong.\r\n",
			"disapproval": false,
			"date": "2013-04-18 04:06:37.883650",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow. We break the rules.  in os.File.Read:\r\n\r\nif n == 0 && len(b) > 0 && e == nil {\r\n   return 0, io.EOF\r\n}\r\n\r\nSo that means a zero-length read from a system call will be turned\r\ninto an EOF. This is not what Unix does; a Go program doesn't behave\r\nlike a C program.\r\n\r\nUpdate coming.\r\n",
			"disapproval": false,
			"date": "2013-04-18 04:18:39.763370",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Elaborate.\r\n\r\nI disagree. If it's a stream and there are no message boundaries, zero just\r\nadvances the stream of bytes by zero.\r\n On Apr 17, 2013 9:06 PM, \"Rob Pike\" <r@golang.org> wrote:\r\n\r\n> I think bufio.Scanner is correct and io.Copy is wrong.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-18 04:18:55.082910",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=864889d2dcee ***\n\nio: explain what (0,nil) means from Read\nAlso add a new variable ErrNoProgress that io.Readers can use to\nreport ineffectual Read calls.\nFixes issue 5310.\n\nR=golang-dev, dsymonds, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8845043",
			"disapproval": false,
			"date": "2013-04-19 00:36:28.857340",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-18 04:31:54.391030",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8845043/diff/7001/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/8845043/diff/7001/src/pkg/io/io.go#newcode59\nsrc/pkg/io/io.go:59: // Implementations of Read are discouraged from returning a\nditch the passive voice?\n\ns/are discouraged from returning/should not return/",
			"disapproval": false,
			"date": "2013-04-18 04:52:00.799300",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM as-is\n\nhttps://codereview.appspot.com/8845043/diff/7001/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/8845043/diff/7001/src/pkg/io/io.go#newcode59\nsrc/pkg/io/io.go:59: // Implementations of Read are discouraged from returning a\nOn 2013/04/18 04:52:00, dsymonds wrote:\n> ditch the passive voice?\n> \n> s/are discouraged from returning/should not return/\n\nWhile I agree with the sentiment to remove passive voice, the problem with \"should not\" is that to most people (especially when written in lowercase) sounds like \"must not\".  Saying SHOULD NOT in the RFC 2119 sense works, but requires all-caps, and we don't use that terminology style elsewhere.\n\nSo I'm fine with this word as-is.\n\nhttps://codereview.appspot.com/8845043/diff/7001/src/pkg/io/io.go#newcode60\nsrc/pkg/io/io.go:60: // zero byte count with a nil error, and callers should treat\nthough this \"should\" could be a \"must\" while still being RFC 2119 and English correct.  But \"should\" is also fine.",
			"disapproval": false,
			"date": "2013-04-18 06:13:45.676520",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-19 00:19:25.907990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8845043/diff/13001/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/8845043/diff/13001/src/pkg/io/io.go#newcode37\nsrc/pkg/io/io.go:37: // ErrNoProgress is returned by some implementations\nimplementations of? more like \"users of\".\n\nPerhaps:\n\n// ErrNoProgress is returned by some callers\n// of an io.Reader when many calls to Read have failed\n// to return any data or an error, usually the sign\n// of a broken io.Reader implementation.\n\n(also clarifying what is broken)",
			"disapproval": false,
			"date": "2013-04-19 00:27:17.141920",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 8845043: io: explain what (0,nil) means from Read",
	"created": "2013-04-18 00:42:49.455000",
	"patchsets": [
		1,
		7001,
		13001,
		9002
	],
	"modified": "2013-04-19 23:20:29.884140",
	"closed": true,
	"issue": 8845043
}