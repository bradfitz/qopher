{
	"description": "runtime: avoid allocation for make([]T, 0)",
	"cc": [
		"gri@golang.org",
		"iant@golang.org",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=14a037cbc719 ***\n\nruntime: avoid allocation for make([]T, 0)\n\nR=gri, iant, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5375093",
			"disapproval": false,
			"date": "2011-11-15 17:05:33.229609",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri, iant (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-14 21:27:46.658980",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nrsc@golang.org writes:\n\n> Reviewers: gri, iant,\n>\n> Message:\n> Hello gri, iant (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> runtime: avoid allocation for make([]T, 0)\n>\n> Please review this at http://codereview.appspot.com/5375093/\n>\n> Affected files:\n>   M src/pkg/runtime/slice.c\n>\n>\n> Index: src/pkg/runtime/slice.c\n> ===================================================================\n> --- a/src/pkg/runtime/slice.c\n> +++ b/src/pkg/runtime/slice.c\n> @@ -32,6 +32,11 @@\n>  \t}\n>  }\n>\n> +// Dummy word to use as base pointer for make([]T, 0).\n> +// Since you cannot take the address of such a slice,\n> +// you can't tell that they all have the same base pointer.\n> +static uintptr zerobase;\n> +\n>  static void\n>  makeslice1(SliceType *t, int32 len, int32 cap, Slice *ret)\n>  {\n> @@ -42,7 +47,9 @@\n>  \tret->len = len;\n>  \tret->cap = cap;\n>\n> -\tif((t->elem->kind&KindNoPointers))\n> +\tif(cap == 0)\n> +\t\tret->array = (byte*)&zerobase;\n> +\telse if((t->elem->kind&KindNoPointers))\n>  \t\tret->array = runtime\u00b7mallocgc(size, FlagNoPointers, 1, 1);\n>  \telse\n>  \t\tret->array = runtime\u00b7mal(size);\n",
			"disapproval": false,
			"date": "2011-11-14 21:38:37.616865",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 14, 2011 at 16:37,  <gri@golang.org> wrote:\n> couldn't this just be ret->array = 0 ? (or (byte*)0) ?\n\nNo: then make([]T, 0) would return nil.\n",
			"disapproval": false,
			"date": "2011-11-14 21:44:52.363192",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5375093/diff/1002/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttp://codereview.appspot.com/5375093/diff/1002/src/pkg/runtime/slice.c#newcode51\nsrc/pkg/runtime/slice.c:51: ret->array = (byte*)&zerobase;\ncouldn't this just be ret->array = 0 ? (or (byte*)0) ?",
			"disapproval": false,
			"date": "2011-11-14 21:37:16.799053",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5375093: runtime: avoid allocation for make([]T, 0)",
	"created": "2011-11-14 21:19:00.000174",
	"patchsets": [
		1,
		2001,
		1002,
		1003
	],
	"modified": "2011-11-15 17:06:00.772040",
	"closed": true,
	"issue": 5375093
}