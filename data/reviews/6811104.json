{
	"description": "go.talks/present: allow initial punctuation as well as trailing near marks\nPreviously,\n        _text_.\nworked as expected but\n        (_text_)\ndid not. This change fixes the behavior by treating leading\npunctuation just like trailing.",
	"cc": [
		"adg@golang.org",
		"campoy@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2012-11-12 19:17:39.761790",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"r@golang.org",
				"adg@golang.org",
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd add a bit more testing, other than that LGTM\n\nhttps://codereview.appspot.com/6811104/diff/1/present/style_test.go\nFile present/style_test.go (right):\n\nhttps://codereview.appspot.com/6811104/diff/1/present/style_test.go#newcode48\npresent/style_test.go:48: {\"(_a)\", \"(_a)\"},\nAdd a test with more than one char of punctuation",
			"disapproval": false,
			"date": "2012-11-12 19:37:32.016990",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"adg@golang.org",
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, campoy@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-12 19:46:41.726190",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"r@golang.org",
				"adg@golang.org",
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/12 19:46:41, r wrote:\n> Hello mailto:adg@golang.org, mailto:campoy@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nLGTM",
			"disapproval": false,
			"date": "2012-11-12 19:58:30.493900",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"adg@golang.org",
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b8eea95e35a3&repo=talks ***\n\ngo.talks/present: allow initial punctuation as well as trailing near marks\nPreviously,\n        _text_.\nworked as expected but\n        (_text_)\ndid not. This change fixes the behavior by treating leading\npunctuation just like trailing.\n\nR=adg, campoy\nCC=golang-dev\nhttp://codereview.appspot.com/6811104",
			"disapproval": false,
			"date": "2012-11-12 20:48:27.363980",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThanks for doing this. I had it on my list to do the same.\r\n\r\n\r\nOn 12 November 2012 20:17, <r@golang.org> wrote:\r\n\r\n> Reviewers: adg,\r\n>\r\n> Message:\r\n> Hello adg (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go.**talks <https://code.google.com/p/go.talks>\r\n>\r\n>\r\n> Description:\r\n> go.talks/present: allow initial punctuation as well as trailing near\r\n> marks\r\n> Previously,\r\n>         _text_.\r\n> worked as expected but\r\n>         (_text_)\r\n> did not. This change fixes the behavior by treating leading\r\n> punctuation just like trailing.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6811104/<http://codereview.appspot.com/6811104/>\r\n>\r\n> Affected files:\r\n>   M present/style.go\r\n>   M present/style_test.go\r\n>\r\n>\r\n> Index: present/style.go\r\n> ==============================**==============================**=======\r\n> --- a/present/style.go\r\n> +++ b/present/style.go\r\n> @@ -42,20 +42,33 @@\r\n>                 if len(word) < 2 {\r\n>                         continue Word\r\n>                 }\r\n> +               const punctuation = `.,;:()!?\u2014\u2013'\"`\r\n> +               const marker = \"_*`\"\r\n> +               // Initial punctuation is OK but must be peeled off.\r\n> +               first := strings.IndexAny(word, marker)\r\n> +               if first == -1 {\r\n> +                       continue Word\r\n> +               }\r\n> +               // Is the marker prefixed only by punctuation?\r\n> +               for _, r := range word[:first] {\r\n> +                       if !strings.ContainsRune(**punctuation, r) {\r\n> +                               continue Word\r\n> +                       }\r\n> +               }\r\n> +               open, word := word[:first], word[first:]\r\n>                 char := word[0] // ASCII is OK.\r\n> -               open := \"\"\r\n>                 close := \"\"\r\n>                 switch char {\r\n>                 default:\r\n>                         continue Word\r\n>                 case '_':\r\n> -                       open = \"<i>\"\r\n> +                       open += \"<i>\"\r\n>                         close = \"</i>\"\r\n>                 case '*':\r\n> -                       open = \"<b>\"\r\n> +                       open += \"<b>\"\r\n>                         close = \"</b>\"\r\n>                 case '`':\r\n> -                       open = \"<code>\"\r\n> +                       open += \"<code>\"\r\n>                         close = \"</code>\"\r\n>                 }\r\n>                 // Terminal punctuation is OK but must be peeled off.\r\n> @@ -65,7 +78,7 @@\r\n>                 }\r\n>                 head, tail := word[:last+1], word[last+1:]\r\n>                 for _, r := range tail {\r\n> -                       if !strings.ContainsRune(`.,;:()!**?\u2014\u2013'\"`, r) {\r\n> +                       if !strings.ContainsRune(**punctuation, r) {\r\n>                                 continue Word\r\n>                         }\r\n>                 }\r\n> Index: present/style_test.go\r\n> ==============================**==============================**=======\r\n> --- a/present/style_test.go\r\n> +++ b/present/style_test.go\r\n> @@ -44,6 +44,8 @@\r\n>                 {\"_a___b_\", \"<i>a_ b</i>\"},\r\n>                 {\"*a**b*?\", \"<b>a*b</b>?\"},\r\n>                 {\"_a_<>_b_.\", \"<i>a <> b</i>.\"},\r\n> +               {\"(_a_)\", \"(<i>a</i>)\"},\r\n> +               {\"(_a)\", \"(_a)\"},\r\n>                 {\"_Why_use_scoped__ptr_? Use plain ***ptr* instead.\",\r\n> \"<i>Why use scoped_ptr</i>? Use plain <b>*ptr</b> instead.\"},\r\n>         }\r\n>         for _, test := range tests {\r\n> @@ -70,6 +72,8 @@\r\n>                 {\"_a___b_\", \"<i>a_ b</i>\"},\r\n>                 {\"*a**b*?\", \"<b>a*b</b>?\"},\r\n>                 {\"_a_<>_b_.\", \"<i>a &lt;&gt; b</i>.\"},\r\n> +               {\"(_a_<>_b_)\", \"(<i>a &lt;&gt; b</i>)\"},\r\n> +               {\"(_a)\", \"(_a)\"},\r\n>         }\r\n>         for _, test := range tests {\r\n>                 out := string(style(test.in))\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-13 09:11:46.579810",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6811104: go.talks/present: allow initial punctuation as well as ...",
	"created": "2012-11-12 19:17:35.439140",
	"patchsets": [
		1,
		5001,
		2002
	],
	"modified": "2012-11-12 20:48:28.418640",
	"closed": true,
	"issue": 6811104
}