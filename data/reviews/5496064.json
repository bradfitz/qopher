{
	"description": "time: JSON marshaler for Time",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"hectorchu@gmail.com",
		"r@google.com"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go#newcode838\nsrc/pkg/time/time.go:838: if t.Year() < 0 || t.Year() > 9999 {\nyou call the method many times, and it's not free. save the result in a local.\n\nhttp://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go#newcode842\nsrc/pkg/time/time.go:842: // We need a four-digit year, but Format produces variable-width years.\nwhy do you need a 4-digit year?\n\nhttp://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go#newcode864\nsrc/pkg/time/time.go:864: return []byte(\"\\\"\" + year + formattedTime + \"\\\"\"), nil\nthis is more allocation than you need.\nbuf := make([]byte, 0, 1 + len(year) + len(formattedTime() + 1)\nbuf = append(buf, '\"')\nbuf = append(buf, year...)\nbuf = append(buf, formattedTime...)\nbuf = append(buf, '\"')\n\nlong but easy and only one allocation",
			"disapproval": false,
			"date": "2011-12-20 05:02:47.875891",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This encodes Time values in RFC 3999 format inside a JSON string.\n\nThere are some things I noticed, but I don't know how important they are.\nRFC 3999 explicitly requires four-digit years, but five-digit years are permitted in this version.\nRFC 3999 supports fractional seconds, but this version discards them when encoding.\nUnlike the gob encoding of time, this version does not differentiate between a local time zone at UTC+0 zone and UTC.",
			"disapproval": false,
			"date": "2011-12-17 20:00:22.855316",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 18, 2011, at 11:48 AM, robert.hencke@gmail.com wrote:\n\n> On 2011/12/18 08:00:18, hector wrote:\n>> On 2011/12/17 20:00:22, rh wrote:\n>> > RFC 3999 supports fractional seconds, but this version discards them\n> when\n>> > encoding.\n> \n>> Is there a good reason for this?  This is useless to me unless it\n> transmits at\n>> least the milliseconds part of the time.\n> \n> Thank you for the review.\n> \n> I'm not sure if it is a good reason... but the current reason is that\n> time.RFC3339 does not specify fractional seconds, and this version\n> essentially just uses time.RFC3339 with Format and Parse.\n> \n> Would it be better to use a modified version of time.RFC3339 that always\n> includes milliseconds?\n\nWhy not nanoseconds?\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-12-18 20:39:46.395268",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-17 19:52:04.914478",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5496064/diff/5001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/5001/src/pkg/time/time_test.go#newcode698\nsrc/pkg/time/time_test.go:698: func equalTimeAndZone(a, b Time) bool {\nOn 2011/12/17 21:56:50, dsymonds wrote:\n> Now that we have == on structs, I believe this function is just\n>   a == b\n> unless you care about cases where the zones are different but have the same\n> name/offset.\n\nThanks for the review!\n\nThis would work for the JSON tests, but currently would not pass for the gob tests.  The zero value for Time has a nil location that is considered equivalent to UTC, and the calls to FixedZone produce different pointers for equivalent values.\n\nI could leave the gob tests alone, remove equalTimeAndZone, and just use == in the JSON tests, though.  It would make the diff smaller.",
			"disapproval": false,
			"date": "2011-12-17 23:03:23.009845",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/17 20:00:22, rh wrote:\n> RFC 3999 supports fractional seconds, but this version discards them when\n> encoding.\n\nIs there a good reason for this?  This is useless to me unless it transmits at least the milliseconds part of the time.",
			"disapproval": false,
			"date": "2011-12-18 08:00:18.695081",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the chaff... thanks again for your time in reviewing this.  PTAL.\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/format.go#newcode312\nsrc/pkg/time/format.go:312: if len(s) < len(padding) {\nOn 2011/12/19 19:32:11, r wrote:\n> you shouldn't be touching this file at all.\n\nDone.\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/time.go#newcode846\nsrc/pkg/time/time.go:846: mdhms := t.Format(\"-01-02T15:04:05\")\nOn 2011/12/19 19:32:11, r wrote:\n> just use a different format if t.nsec is zero\n\nDone.\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/time.go#newcode850\nsrc/pkg/time/time.go:850: tz := t.Format(\"Z07:00\")\nOn 2011/12/19 19:32:11, r wrote:\n> calling Format twice is more expensive than you need.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-20 04:42:15.327225",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for bearing with me.  PTAL.\n\nhttp://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go#newcode838\nsrc/pkg/time/time.go:838: if t.Year() < 0 || t.Year() > 9999 {\nOn 2011/12/20 05:02:48, r wrote:\n> you call the method many times, and it's not free. save the result in a local.\n\nDone.\n\nhttp://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go#newcode842\nsrc/pkg/time/time.go:842: // We need a four-digit year, but Format produces variable-width years.\nOn 2011/12/20 05:02:48, r wrote:\n> why do you need a 4-digit year?\n\nRFC3339 defines a year as always having 4 digits, as best as I can tell.\nThe other current reason is that if the year is included in the call to Format, and the year has three digits or less, the current logic to trim trailing zeroes breaks.\n\nhttp://codereview.appspot.com/5496064/diff/8/src/pkg/time/time.go#newcode864\nsrc/pkg/time/time.go:864: return []byte(\"\\\"\" + year + formattedTime + \"\\\"\"), nil\nOn 2011/12/20 05:02:48, r wrote:\n> this is more allocation than you need.\n> buf := make([]byte, 0, 1 + len(year) + len(formattedTime() + 1)\n> buf = append(buf, '\"')\n> buf = append(buf, year...)\n> buf = append(buf, formattedTime...)\n> buf = append(buf, '\"')\n> \n> long but easy and only one allocation\n\nDamn... sorry.  Thank you.  Done.",
			"disapproval": false,
			"date": "2011-12-20 05:24:50.850900",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-20 17:22:35.197497",
			"approval": true
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your feedback and reviews.\n\nPer your suggestion, this version now includes nanoseconds, and omits trailing zeros.\nIt also resolves handling of years that do not have 4 digits. PTAL.",
			"disapproval": false,
			"date": "2011-12-19 02:42:09.577174",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5496064/diff/5004/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/format.go#newcode312\nsrc/pkg/time/format.go:312: if len(s) < len(padding) {\nyou shouldn't be touching this file at all.\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/time.go#newcode846\nsrc/pkg/time/time.go:846: mdhms := t.Format(\"-01-02T15:04:05\")\njust use a different format if t.nsec is zero\n\nhttp://codereview.appspot.com/5496064/diff/5004/src/pkg/time/time.go#newcode850\nsrc/pkg/time/time.go:850: tz := t.Format(\"Z07:00\")\ncalling Format twice is more expensive than you need.",
			"disapproval": false,
			"date": "2011-12-19 19:32:11.385543",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5496064/diff/5001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5496064/diff/5001/src/pkg/time/time_test.go#newcode698\nsrc/pkg/time/time_test.go:698: func equalTimeAndZone(a, b Time) bool {\nNow that we have == on structs, I believe this function is just\n  a == b\nunless you care about cases where the zones are different but have the same name/offset.",
			"disapproval": false,
			"date": "2011-12-17 21:56:49.893096",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suggest including nanoseconds if they're not zero, and trimming traling zeros.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-18 20:40:43.395610",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/18 08:00:18, hector wrote:\n> On 2011/12/17 20:00:22, rh wrote:\n> > RFC 3999 supports fractional seconds, but this version discards them when\n> > encoding.\n> \n> Is there a good reason for this?  This is useless to me unless it transmits at\n> least the milliseconds part of the time.\n\nThank you for the review.\n\nI'm not sure if it is a good reason... but the current reason is that time.RFC3339 does not specify fractional seconds, and this version essentially just uses time.RFC3339 with Format and Parse.\n\nWould it be better to use a modified version of time.RFC3339 that always includes milliseconds?",
			"disapproval": false,
			"date": "2011-12-18 19:48:14.453272",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-20 16:59:24.485665",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "codereview issue 5496064 is out of date: patch and recent changes conflict (f6c1ea074bf9->c9e9b665dd6b)",
			"disapproval": false,
			"date": "2011-12-20 17:23:15.127950",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 20, 2011, at 9:23 AM, r@golang.org wrote:\n\n> codereview issue 5496064 is out of date: patch and recent changes\n> conflict (f6c1ea074bf9->c9e9b665dd6b)\n> \n> \n> http://codereview.appspot.com/5496064/\n\nignore; it's fine.\n\n",
			"disapproval": false,
			"date": "2011-12-20 17:25:06.168198",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"hectorchu@gmail.com",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as c9e9b665dd6b ***\n\ntime: JSON marshaler for Time\n\nR=golang-dev, dsymonds, hectorchu, r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5496064\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2011-12-20 17:01:23.098227",
			"approval": false
		}
	],
	"owner_email": "robert.hencke@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rh",
	"subject": "code review 5496064: time: JSON marshaler for Time",
	"created": "2011-12-17 19:42:30.378091",
	"patchsets": [
		1,
		2001,
		5001,
		5004,
		8,
		5007
	],
	"modified": "2011-12-22 02:35:08.408502",
	"closed": true,
	"issue": 5496064
}