{
	"description": "go/test/bench/go1: enable benchmarking on 32-bit machines\n\nMemory leaks on 32-bit machines can cause out of memory panics\nwhen running some benchmarks. This can be avoided by postponing\nbenchmark data initializations.\n\nRun gofmt.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gobot@golang.org"
	],
	"reviewers": [
		"cshapiro@golang.org",
		"dave@cheney.net",
		"cshapiro@google.com"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-21 08:24:53.368290",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=cshapiro (assigned by bradfitz)",
			"disapproval": false,
			"date": "2013-05-21 15:49:26.792510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've not had any problems running the go1 tests on all my arm hosts,\r\nas well as linux/386. While I'm sure this change leads to a reduction\r\nin pinned memory, is it really necessary ?\r\n\r\nOn Wed, May 22, 2013 at 1:49 AM,  <gobot@golang.org> wrote:\r\n> R=cshapiro (assigned by bradfitz)\r\n>\r\n> https://codereview.appspot.com/9598045/\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-21 22:34:21.117690",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"cshapiro@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you provide more information about why this change is beneficial?  Thanks!\n\nhttps://codereview.appspot.com/9598045/diff/1/test/bench/go1/revcomp_test.go\nFile test/bench/go1/revcomp_test.go (right):\n\nhttps://codereview.appspot.com/9598045/diff/1/test/bench/go1/revcomp_test.go#newcode89\ntest/bench/go1/revcomp_test.go:89: fastabytes = nil\nThis particular change is uneccessary with my forthcoming change to add pointer location information to the stack scanning.  It is generally not a good convention to follow as a compiler can see this assignment as a dead store and  remove it.",
			"disapproval": false,
			"date": "2013-05-21 23:20:18.705370",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"cshapiro@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/21 22:34:21, dfc wrote:\n> I've not had any problems running the go1 tests on all my arm hosts,\n> as well as linux/386. While I'm sure this change leads to a reduction\n> in pinned memory, is it really necessary ?\n\nMy machine fails to run the benchmarks (go version go1.1 linux/386):\n\n$ go test -bench=.\ntesting: warning: no tests to run\nPASS\nBenchmarkBinaryTree17-2 runtime: memory allocated by OS (0xa49fb000) not in usable range [0x18500000,0x98500000)\nfatal error: out of memory",
			"disapproval": false,
			"date": "2013-05-22 05:55:28.780980",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ahh, you are running -cpu=2, that is the key difference.\r\n\r\nOn Wed, May 22, 2013 at 3:55 PM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> On 2013/05/21 22:34:21, dfc wrote:\r\n>>\r\n>> I've not had any problems running the go1 tests on all my arm hosts,\r\n>> as well as linux/386. While I'm sure this change leads to a reduction\r\n>> in pinned memory, is it really necessary ?\r\n>\r\n>\r\n> My machine fails to run the benchmarks (go version go1.1 linux/386):\r\n>\r\n> $ go test -bench=.\r\n> testing: warning: no tests to run\r\n> PASS\r\n> BenchmarkBinaryTree17-2 runtime: memory allocated by OS (0xa49fb000) not\r\n> in usable range [0x18500000,0x98500000)\r\n> fatal error: out of memory\r\n>\r\n> https://codereview.appspot.com/9598045/\r\n",
			"disapproval": false,
			"date": "2013-05-22 05:57:30.921110",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"cshapiro@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9598045/diff/1/test/bench/go1/revcomp_test.go\nFile test/bench/go1/revcomp_test.go (right):\n\nhttps://codereview.appspot.com/9598045/diff/1/test/bench/go1/revcomp_test.go#newcode89\ntest/bench/go1/revcomp_test.go:89: fastabytes = nil\nfastabytes is a package variable, not a local variable.",
			"disapproval": false,
			"date": "2013-05-22 05:57:44.575260",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"cshapiro@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/22 05:57:30, dfc wrote:\n> Ahh, you are running -cpu=2, that is the key difference.\n\n$ GOMAXPROCS=1 go test -bench=.\ntesting: warning: no tests to run\nPASS\nBenchmarkBinaryTree17   runtime: memory allocated by OS (0xa5254000) not in usable range [0x18500000,0x98500000)\nfatal error: out of memory\n\n> On Wed, May 22, 2013 at 3:55 PM,  <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> > On 2013/05/21 22:34:21, dfc wrote:\n> >>\n> >> I've not had any problems running the go1 tests on all my arm hosts,\n> >> as well as linux/386. While I'm sure this change leads to a reduction\n> >> in pinned memory, is it really necessary ?\n> >\n> >\n> > My machine fails to run the benchmarks (go version go1.1 linux/386):\n> >\n> > $ go test -bench=.\n> > testing: warning: no tests to run\n> > PASS\n> > BenchmarkBinaryTree17-2 runtime: memory allocated by OS (0xa49fb000) not\n> > in usable range [0x18500000,0x98500000)\n> > fatal error: out of memory\n> >\n> > https://codereview.appspot.com/9598045/",
			"disapproval": false,
			"date": "2013-05-22 05:59:23.176670",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I appreciate the results you are sharing, I am unable to reproduce\r\nthem on my machines.\r\n\r\nOn Wed, May 22, 2013 at 3:59 PM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> On 2013/05/22 05:57:30, dfc wrote:\r\n>>\r\n>> Ahh, you are running -cpu=2, that is the key difference.\r\n>\r\n>\r\n> $ GOMAXPROCS=1 go test -bench=.\r\n>\r\n> testing: warning: no tests to run\r\n> PASS\r\n> BenchmarkBinaryTree17   runtime: memory allocated by OS (0xa5254000) not\r\n>\r\n> in usable range [0x18500000,0x98500000)\r\n> fatal error: out of memory\r\n>\r\n>> On Wed, May 22, 2013 at 3:55 PM,  <mailto:0xE2.0x9A.0x9B@gmail.com>\r\n>\r\n> wrote:\r\n>>\r\n>> > On 2013/05/21 22:34:21, dfc wrote:\r\n>> >>\r\n>> >> I've not had any problems running the go1 tests on all my arm\r\n>\r\n> hosts,\r\n>>\r\n>> >> as well as linux/386. While I'm sure this change leads to a\r\n>\r\n> reduction\r\n>>\r\n>> >> in pinned memory, is it really necessary ?\r\n>> >\r\n>> >\r\n>> > My machine fails to run the benchmarks (go version go1.1 linux/386):\r\n>> >\r\n>> > $ go test -bench=.\r\n>> > testing: warning: no tests to run\r\n>> > PASS\r\n>> > BenchmarkBinaryTree17-2 runtime: memory allocated by OS (0xa49fb000)\r\n>\r\n> not\r\n>>\r\n>> > in usable range [0x18500000,0x98500000)\r\n>> > fatal error: out of memory\r\n>> >\r\n>> > https://codereview.appspot.com/9598045/\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/9598045/\r\n",
			"disapproval": false,
			"date": "2013-05-22 06:06:37.578850",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"cshapiro@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/22 05:59:23, atom wrote:\n> On 2013/05/22 05:57:30, dfc wrote:\n> > Ahh, you are running -cpu=2, that is the key difference.\n> \n> $ GOMAXPROCS=1 go test -bench=.\n> testing: warning: no tests to run\n> PASS\n> BenchmarkBinaryTree17   runtime: memory allocated by OS (0xa5254000) not in\n> usable range [0x18500000,0x98500000)\n> fatal error: out of memory\n\nIs this conclusively the result of false retention of objects?",
			"disapproval": false,
			"date": "2013-05-22 06:10:36.439830",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"cshapiro@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/22 06:10:36, cshapiro1 wrote:\n> On 2013/05/22 05:59:23, atom wrote:\n> > On 2013/05/22 05:57:30, dfc wrote:\n> > > Ahh, you are running -cpu=2, that is the key difference.\n> > \n> > $ GOMAXPROCS=1 go test -bench=.\n> > testing: warning: no tests to run\n> > PASS\n> > BenchmarkBinaryTree17   runtime: memory allocated by OS (0xa5254000) not in\n> > usable range [0x18500000,0x98500000)\n> > fatal error: out of memory\n> \n> Is this conclusively the result of false retention of objects?\n\nWhen using htop (http://htop.sourceforge.net/) to observe the memory usage, the memory usage grows to several hundreds of megabytes and then the out of memory panic happens.\n\nThe total memory usage resulting from initializations (package variables and init() functions) is about 300 MiB.\n\n$ go test -c; 'time' ./go1.test -test.bench=.\n9.882user 0.527system 0:13.174elapsed 79%CPU (0avgtext+0avgdata 539256maxresident)k\n\nThe binary tree benchmark consumes less than 30 MiB. The difference 539-300 equals to 239 MiB.",
			"disapproval": false,
			"date": "2013-05-22 06:31:06.683130",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am unable to reproduce the out of memory error, which is to say that on\r\nmy Linux 386 and ARM machines, the virtual and resident sizes do not exceed\r\nthe heap limits.  However, if I patch this change I do observe a smaller\r\nvirtual and resident size for the process running the benchmark.\r\n\r\nIf I revert back to the original revcomp_test.go and fasta_test.go the\r\nresident size returns to the original size.  It looks like the data being\r\nallocated is non-pointer data.  It is unclear why this would have such an\r\neffect on the resident size.\r\n\r\nI have to concerns with this change.  The first is regarding why you are\r\nexperiencing out of memory errors that cannot be reproduced elsewhere.  Is\r\nthere something special about your environment?\r\n\r\nMy second concern with this change is that it might be treating the symptom\r\nof a problem with another part of the system.  For example, can you explain\r\nwhy the precise type information is not effective?  Is this retention\r\ncaused by leakage on the stack?\r\n\r\n\r\n\r\nOn Tue, May 21, 2013 at 11:31 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/05/22 06:10:36, cshapiro1 wrote:\r\n>\r\n>> On 2013/05/22 05:59:23, atom wrote:\r\n>> > On 2013/05/22 05:57:30, dfc wrote:\r\n>> > > Ahh, you are running -cpu=2, that is the key difference.\r\n>> >\r\n>> > $ GOMAXPROCS=1 go test -bench=.\r\n>> > testing: warning: no tests to run\r\n>> > PASS\r\n>> > BenchmarkBinaryTree17   runtime: memory allocated by OS (0xa5254000)\r\n>>\r\n> not in\r\n>\r\n>> > usable range [0x18500000,0x98500000)\r\n>> > fatal error: out of memory\r\n>>\r\n>\r\n>  Is this conclusively the result of false retention of objects?\r\n>>\r\n>\r\n> When using htop (http://htop.sourceforge.net/) to observe the memory\r\n> usage, the memory usage grows to several hundreds of megabytes and then\r\n> the out of memory panic happens.\r\n>\r\n> The total memory usage resulting from initializations (package variables\r\n> and init() functions) is about 300 MiB.\r\n>\r\n> $ go test -c; 'time' ./go1.test -test.bench=.\r\n> 9.882user 0.527system 0:13.174elapsed 79%CPU (0avgtext+0avgdata\r\n> 539256maxresident)k\r\n>\r\n> The binary tree benchmark consumes less than 30 MiB. The difference\r\n> 539-300 equals to 239 MiB.\r\n>\r\n> https://codereview.appspot.**com/9598045/<https://codereview.appspot.com/9598045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-23 00:49:54.865990",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 9598045: go/test/bench/go1: enable benchmarking on 32-bit machines",
	"created": "2013-05-21 08:24:41.184040",
	"patchsets": [
		1
	],
	"modified": "2013-06-05 14:41:42.505640",
	"closed": true,
	"issue": 9598045
}