{
	"description": "cmd/6g, cmd/8g: add OINDREG, ODOT, ODOTPTR cases to igen.\n\nApart from reducing the number of LEAL/LEAQ instructions by about\n30%, it gives 8g easier registerization in several cases,\nfor example in strconv. Performance with 6g is not affected.\n\nBefore (386):\nsrc/pkg/strconv/decimal.go:22   TEXT  (*decimal).String+0(SB),$240-12\nsrc/pkg/strconv/extfloat.go:540 TEXT  (*extFloat).ShortestDecimal+0(SB),$584-20\n\nAfter (386):\nsrc/pkg/strconv/decimal.go:22   TEXT  (*decimal).String+0(SB),$196-12\nsrc/pkg/strconv/extfloat.go:540 TEXT  (*extFloat).ShortestDecimal+0(SB),$420-20\n\nBenchmarks with GOARCH=386 (on a Core 2).\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    7110191000   7079644000   -0.43%\nBenchmarkFannkuch11      7769274000   7766514000   -0.04%\nBenchmarkGobDecode         33454820     34755400   +3.89%\nBenchmarkGobEncode         11675710     11007050   -5.73%\nBenchmarkGzip            2013519000   1593855000  -20.84%\nBenchmarkGunzip           253368200    242667600   -4.22%\nBenchmarkJSONEncode       152443900    120763400  -20.78%\nBenchmarkJSONDecode       304112800    247461800  -18.63%\nBenchmarkMandelbrot200     29245520     29240490   -0.02%\nBenchmarkParse              8484105      8088660   -4.66%\nBenchmarkRevcomp         2695688000   2841263000   +5.40%\nBenchmarkTemplate         363759800    277271200  -23.78%\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkAtof64Decimal                127          129   +1.57%\nBenchmarkAtof64Float                  166          164   -1.20%\nBenchmarkAtof64FloatExp               308          300   -2.60%\nBenchmarkAtof64Big                    584          571   -2.23%\nBenchmarkAppendFloatDecimal           440          430   -2.27%\nBenchmarkAppendFloat                  995          776  -22.01%\nBenchmarkAppendFloatExp               897          746  -16.83%\nBenchmarkAppendFloatNegExp            900          752  -16.44%\nBenchmarkAppendFloatBig              1528         1228  -19.63%\nBenchmarkAppendFloat32Integer         443          453   +2.26%\nBenchmarkAppendFloat32ExactFraction   812          661  -18.60%\nBenchmarkAppendFloat32Point          1002          773  -22.85%\nBenchmarkAppendFloat32Exp             858          725  -15.50%\nBenchmarkAppendFloat32NegExp          848          728  -14.15%\nBenchmarkAppendFloat64Fixed1          447          431   -3.58%\nBenchmarkAppendFloat64Fixed2          480          462   -3.75%\nBenchmarkAppendFloat64Fixed3          461          457   -0.87%\nBenchmarkAppendFloat64Fixed4          509          484   -4.91%\n\nUpdate issue 1914.",
	"cc": [
		"rsc@golang.org",
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/17 21:10:24, rsc wrote:\n> Looks good except for the loops in gsubr.c.\n> I think they should stay D_AL because you do care about smaller registers being\n> allocated, don't you?\n\nIn my comment I explain it is an ugly workaround because function parameters, although they are on the stack, have reg = D_AL. Maybe the correct fix is to have them have D_SP instead?\n\nI don't see where AL/AH/BL/BH can be used in 8g. In 6g they are not.",
			"disapproval": false,
			"date": "2012-09-17 21:21:32.545060",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I apparently was confused by the n->type->type thing and added a comment to make more explicit what type->type is.",
			"disapproval": false,
			"date": "2012-09-17 23:27:35.684500",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have added ODOT and ODOTPTR which were initially intended for a separate patch.\n\nI had to ignore D_AL in tests for registers left allocated in 8g. The thing is, if I increment the reference count of a PARAM node, its register is \"uninitialised\" to D_AL (in both 6g and 8g), which makes no sense but I suppose means it is ignored.\n\nWe don't seem to use half registers in 8g so I assumed it was safe to simply ignore it.",
			"disapproval": false,
			"date": "2012-09-11 19:35:19.752260",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-17 23:25:34.081410",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the patch is missing a refcount update on the register. It doesn't cause an error (regfree: register not allocated), because I think the only cases that happen have the form n(SP).\nI'll have a look later.",
			"disapproval": false,
			"date": "2012-09-10 06:56:58.568280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "yes, you should need a refcount update",
			"disapproval": false,
			"date": "2012-09-11 03:25:46.566830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think you are probably right that they cannot be used at all. In\r\nthat case let's change all the loops to start at D_AX instead of just\r\na few.\r\n",
			"disapproval": false,
			"date": "2012-09-17 21:26:02.937880",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-09 08:02:13.043910",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW, for 6g, the before/after for\ngo build -a -gcflags '-S' cmd/go | grep LEAQ | wc -l\nis\n40440 / 28647\n\nThe test/bench/go1 numbers are inconclusive:\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5949074000   5943610000   -0.09%\nBenchmarkFannkuch11      3858978000   3946991000   +2.28%\nBenchmarkGobDecode         20968930     21284030   +1.50%\nBenchmarkGobEncode         12633550     12684320   +0.40%\nBenchmarkGzip             592840200    583004600   -1.66%\nBenchmarkGunzip           163234400    161619100   -0.99%\nBenchmarkJSONEncode        88589500     89854700   +1.43%\nBenchmarkJSONDecode       392493200    389656000   -0.72%\nBenchmarkMandelbrot200      7016548      7017086   +0.01%\nBenchmarkParse              7779295      7711245   -0.87%\nBenchmarkRevcomp         1181691000   1121136000   -5.12%\nBenchmarkTemplate         310984200    315470600   +1.44%",
			"disapproval": false,
			"date": "2012-09-10 06:47:42.703050",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com, nigeltao@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-11 19:32:36.040810",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good except for the loops in gsubr.c.\nI think they should stay D_AL because you do care about smaller registers being allocated, don't you?\nAlso there are other loops in the file that begin at D_AL that are not being changed here. I would have expected them to be consistent.\n\nhttp://codereview.appspot.com/6494107/diff/10001/src/cmd/8g/gsubr.c\nFile src/cmd/8g/gsubr.c (right):\n\nhttp://codereview.appspot.com/6494107/diff/10001/src/cmd/8g/gsubr.c#newcode785\nsrc/cmd/8g/gsubr.c:785: for(i=D_AX; i<=D_DI; i++)\nWhy did this change?\n\nhttp://codereview.appspot.com/6494107/diff/10001/src/cmd/8g/gsubr.c#newcode795\nsrc/cmd/8g/gsubr.c:795: for(i=D_AX; i<=D_DI; i++) {\nWhy did this change?",
			"disapproval": false,
			"date": "2012-09-17 21:10:24.409730",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-09-21 21:51:57.141480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease double-check that I didn't get the TMAP parts backward.\n\nhttp://codereview.appspot.com/6494107/diff/14001/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/6494107/diff/14001/src/cmd/gc/go.h#newcode173\nsrc/cmd/gc/go.h:173: Type*\ttype;\t\t// the element type, like Elem in reflect\n// actual type for TFIELD, element type for TARRAY, TCHAN, TMAP, TPTRxx\n\nhttp://codereview.appspot.com/6494107/diff/14001/src/cmd/gc/go.h#newcode177\nsrc/cmd/gc/go.h:177: Type*\tdown;\t\t// also used in TMAP\n// also key type in TMAP",
			"disapproval": false,
			"date": "2012-09-24 14:38:38.339040",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I will regenerate the benchmarks because some other patches were committed.",
			"disapproval": false,
			"date": "2012-09-24 20:15:08.313450",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7a7ff5c22a26 ***\n\ncmd/6g, cmd/8g: add OINDREG, ODOT, ODOTPTR cases to igen.\n\nApart from reducing the number of LEAL/LEAQ instructions by about\n30%, it gives 8g easier registerization in several cases,\nfor example in strconv. Performance with 6g is not affected.\n\nBefore (386):\nsrc/pkg/strconv/decimal.go:22   TEXT  (*decimal).String+0(SB),$240-12\nsrc/pkg/strconv/extfloat.go:540 TEXT  (*extFloat).ShortestDecimal+0(SB),$584-20\n\nAfter (386):\nsrc/pkg/strconv/decimal.go:22   TEXT  (*decimal).String+0(SB),$196-12\nsrc/pkg/strconv/extfloat.go:540 TEXT  (*extFloat).ShortestDecimal+0(SB),$420-20\n\nBenchmarks with GOARCH=386 (on a Core 2).\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    7110191000   7079644000   -0.43%\nBenchmarkFannkuch11      7769274000   7766514000   -0.04%\nBenchmarkGobDecode         33454820     34755400   +3.89%\nBenchmarkGobEncode         11675710     11007050   -5.73%\nBenchmarkGzip            2013519000   1593855000  -20.84%\nBenchmarkGunzip           253368200    242667600   -4.22%\nBenchmarkJSONEncode       152443900    120763400  -20.78%\nBenchmarkJSONDecode       304112800    247461800  -18.63%\nBenchmarkMandelbrot200     29245520     29240490   -0.02%\nBenchmarkParse              8484105      8088660   -4.66%\nBenchmarkRevcomp         2695688000   2841263000   +5.40%\nBenchmarkTemplate         363759800    277271200  -23.78%\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkAtof64Decimal                127          129   +1.57%\nBenchmarkAtof64Float                  166          164   -1.20%\nBenchmarkAtof64FloatExp               308          300   -2.60%\nBenchmarkAtof64Big                    584          571   -2.23%\nBenchmarkAppendFloatDecimal           440          430   -2.27%\nBenchmarkAppendFloat                  995          776  -22.01%\nBenchmarkAppendFloatExp               897          746  -16.83%\nBenchmarkAppendFloatNegExp            900          752  -16.44%\nBenchmarkAppendFloatBig              1528         1228  -19.63%\nBenchmarkAppendFloat32Integer         443          453   +2.26%\nBenchmarkAppendFloat32ExactFraction   812          661  -18.60%\nBenchmarkAppendFloat32Point          1002          773  -22.85%\nBenchmarkAppendFloat32Exp             858          725  -15.50%\nBenchmarkAppendFloat32NegExp          848          728  -14.15%\nBenchmarkAppendFloat64Fixed1          447          431   -3.58%\nBenchmarkAppendFloat64Fixed2          480          462   -3.75%\nBenchmarkAppendFloat64Fixed3          461          457   -0.87%\nBenchmarkAppendFloat64Fixed4          509          484   -4.91%\n\nUpdate issue 1914.\n\nR=rsc, nigeltao\nCC=golang-dev, remy\nhttp://codereview.appspot.com/6494107\n\nhttp://codereview.appspot.com/6494107/diff/14001/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/6494107/diff/14001/src/cmd/gc/go.h#newcode173\nsrc/cmd/gc/go.h:173: Type*\ttype;\t\t// the element type, like Elem in reflect\nOn 2012/09/24 14:38:38, rsc wrote:\n> // actual type for TFIELD, element type for TARRAY, TCHAN, TMAP, TPTRxx\n\nDone.\n\nhttp://codereview.appspot.com/6494107/diff/14001/src/cmd/gc/go.h#newcode177\nsrc/cmd/gc/go.h:177: Type*\tdown;\t\t// also used in TMAP\nOn 2012/09/24 14:38:38, rsc wrote:\n> // also key type in TMAP\n\nDone.",
			"disapproval": false,
			"date": "2012-09-24 21:09:17.940180",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6494107: cmd/6g, cmd/8g: add OINDREG, ODOT, ODOTPTR cases to igen.",
	"created": "2012-09-09 08:01:59.118510",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		14001,
		19001,
		22001,
		25001
	],
	"modified": "2012-09-24 21:09:19.543430",
	"closed": true,
	"issue": 6494107
}