{
	"description": "cmd/6g, cmd/8g: add address propagation to peepholes.\n\nThis peephole optimization applies to sequences like:\n        LEAQ (BX)(BP*4), SI\n        MOVQ (SI), BP\nby turning them into\n        MOVQ (BX)(BP*4), BP\nwhen applicable.\n\nThe latter form was naturally produced in code generation\nwhen using the sudoaddable method.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"rsc@golang.org",
		"daniel.morsing@gmail.com"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 23:36:13, dfc wrote:\n> This is happening constantly, has anyone logged a bug on rietveld about this ?\n> \n> On Thu, Jan 31, 2013 at 10:35 AM,  <mailto:remyoudompheng@gmail.com> wrote:\n> > I seem to have uploaded a broken version.\n> >\n> > https://codereview.appspot.com/7221077/\n\nI mean the code is broken, after I tried an unspaghettification.\nBy the way, the patch on 8g needs https://codereview.appspot.com/7226066/ (which is independent) to avoid breakage.",
			"disapproval": false,
			"date": "2013-01-31 00:04:07.261850",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Applying both CLs on linux/386, benchmarks for crypto/rc4 appear to have regressed by 10%\n\n220887(~/go/src/pkg/crypto/rc4) % ~/go/misc/benchcmp {old,new}.txtbenchmark           old ns/op    new ns/op    delta\nBenchmarkRC4_128        12420        13710  +10.39%\nBenchmarkRC4_1K         99146       109387  +10.33%\nBenchmarkRC4_8K        783317       869264  +10.97%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkRC4_128        10.31         9.34    0.91x\nBenchmarkRC4_1K         10.33         9.36    0.91x\nBenchmarkRC4_8K         10.34         9.31    0.90x",
			"disapproval": false,
			"date": "2013-01-31 00:44:37.217360",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is happening constantly, has anyone logged a bug on rietveld about this ?\r\n\r\nOn Thu, Jan 31, 2013 at 10:35 AM,  <remyoudompheng@gmail.com> wrote:\r\n> I seem to have uploaded a broken version.\r\n>\r\n> https://codereview.appspot.com/7221077/\r\n",
			"disapproval": false,
			"date": "2013-01-30 23:36:13.357860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n220887(~) % uname -a\r\nLinux 220887 3.2.0-32-generic-pae #51-Ubuntu SMP Wed\r\n Sep 26 21:54:23 UTC 2012 i686 i686 i386 GNU/Linux\r\n220887(~) % head /proc/cpuinfo\r\nprocessor       : 0\r\nvendor_id       : GenuineIntel\r\ncpu family      : 6\r\nmodel           : 28\r\nmodel name      : Intel(R) Atom(TM) CPU  330   @ 1.6\r\n0GHz\r\nstepping        : 2\r\nmicrocode       : 0x20d\r\ncpu MHz         : 1596.088\r\ncache size      : 512 KB\r\nphysical id     : 0\r\n220887(~) % \r\n\r\nOn 01/02/2013, at 7:59, remyoudompheng@gmail.com wrote:\r\n\r\n> On 2013/01/31 00:44:37, dfc wrote:\r\n>> Applying both CLs on linux/386, benchmarks for crypto/rc4 appear to\r\n> have\r\n>> regressed by 10%\r\n> \r\n>> 220887(~/go/src/pkg/crypto/rc4) % ~/go/misc/benchcmp\r\n> {old,new}.txtbenchmark\r\n>>      old ns/op    new ns/op    delta\r\n>> BenchmarkRC4_128        12420        13710  +10.39%\r\n>> BenchmarkRC4_1K         99146       109387  +10.33%\r\n>> BenchmarkRC4_8K        783317       869264  +10.97%\r\n> \r\n>> benchmark            old MB/s     new MB/s  speedup\r\n>> BenchmarkRC4_128        10.31         9.34    0.91x\r\n>> BenchmarkRC4_1K         10.33         9.36    0.91x\r\n>> BenchmarkRC4_8K         10.34         9.31    0.90x\r\n> \r\n> What kind of CPU are you using in this benchmark?\r\n> \r\n> https://codereview.appspot.com/7221077/\r\n",
			"disapproval": false,
			"date": "2013-01-31 21:29:23.774240",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Update issue 1914. maybe ?",
			"disapproval": false,
			"date": "2013-01-30 23:33:10.327040",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "First impressions here. I will probably look at this more closely some other time.\n\nhttps://codereview.appspot.com/7221077/diff/9001/src/cmd/6g/peep.c\nFile src/cmd/6g/peep.c (right):\n\nhttps://codereview.appspot.com/7221077/diff/9001/src/cmd/6g/peep.c#newcode235\nsrc/cmd/6g/peep.c:235: p->from.type -= D_INDIR;\nthe resulting move might make new optimizations possible. t++ at the end here.\n\nhttps://codereview.appspot.com/7221077/diff/9001/src/cmd/6g/peep.c#newcode1469\nsrc/cmd/6g/peep.c:1469: if(r == R || r == r0)\nnon-unique predecessors and successors aren't necesarily cause to bail out here. The structure from copyprop should be applicable here.\n\nhttps://codereview.appspot.com/7221077/diff/9001/src/cmd/6g/peep.c#newcode1473\nsrc/cmd/6g/peep.c:1473: t = addru(r->prog, t0, f0);\nWhy have addru and addrsub be separated? copyu calls copysub, which i guess addru was based on.",
			"disapproval": false,
			"date": "2013-01-31 13:01:34.102610",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 00:12:29, remyoudompheng wrote:\n> The goal was to speed up the following code (adapted from crypto/rc4)\n> \n> benchmark            old MB/s     new MB/s  speedup\n> BenchmarkRC4_128       122.06       142.69    1.17x\n> BenchmarkRC4_1K        123.53       145.18    1.18x\n> BenchmarkRC4_8K        123.65       145.56    1.18x\n> \n> (recently committed assembly routine has ~160MB/s)\n> \n\nForgot the source:\n\n// XORKeyStream sets dst to the result of XORing src with the key stream.\n// Dst and src may be the same slice but otherwise should not overlap.\nfunc (c *Cipher) XORKeyStream(dst, src []byte) {\n\ti, j := c.i, c.j\n\tfor k, v := range src {\n\t\ti += 1\n\t\tx := c.s[i]\n\t\tj += x\n\t\ty := c.s[j]\n\t\tc.s[i], c.s[j] = y, x\n\t\tdst[k] = v ^ c.s[x+y]\n\t}\n\tc.i, c.j = i, j\n}",
			"disapproval": false,
			"date": "2013-01-31 00:13:14.842050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is fine but I suspect you can get even better performance if you can\r\nmake sudoaddable generate the MOVQ directly. The peephole frees up SI too\r\nlate for it to be used.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-31 00:13:39.945740",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-30 23:19:03.763810",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The goal was to speed up the following code (adapted from crypto/rc4)\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkRC4_128       122.06       142.69    1.17x\nBenchmarkRC4_1K        123.53       145.18    1.18x\nBenchmarkRC4_8K        123.65       145.56    1.18x\n\n(recently committed assembly routine has ~160MB/s)\n\nBefore:\n\n--- prog list \"(*Cipher).XORKeyStream\" ---\n0124 (rc4.go:47) TEXT    (*Cipher).XORKeyStream+0(SB),$0-56\n0125 (rc4.go:47) MOVQ    dst+16(FP),R15\n0126 (rc4.go:47) MOVQ    c+0(FP),AX\n0127 (rc4.go:48) MOVBQZX 257(AX),BP\n0128 (rc4.go:48) MOVQ    BP,SI\n0129 (rc4.go:48) MOVBQZX 256(AX),BP\n0130 (rc4.go:49) MOVQ    src+32(FP),R10\n0131 (rc4.go:49) MOVQ    src+40(FP),R14\n0132 (rc4.go:49) MOVQ    src+48(FP),BX\n0133 (rc4.go:48) MOVQ    BP,DI\n0134 (rc4.go:49) MOVQ    $0,DX\n0135 (rc4.go:49) JMP     ,137\n0136 (rc4.go:49) INCQ    ,DX\n0137 (rc4.go:49) CMPQ    DX,R14\n0138 (rc4.go:49) JGE     $0,177\n0139 (rc4.go:49) MOVBQZX (R10),BP\n0140 (rc4.go:49) MOVQ    BP,R11\n0141 (rc4.go:49) INCQ    ,R10\n0142 (rc4.go:50) INCQ    ,DI\n0143 (rc4.go:51) LEAQ    (AX),BP\n0144 (rc4.go:51) MOVBQZX DI,BX\n0145 (rc4.go:51) LEAQ    (BP)(BX*1),BP\n0146 (rc4.go:51) MOVBQZX (BP),BX\n0147 (rc4.go:51) MOVQ    BX,CX\n0148 (rc4.go:52) ADDQ    BX,SI\n0149 (rc4.go:53) LEAQ    (AX),BP\n0150 (rc4.go:53) MOVBQZX SI,BX\n0151 (rc4.go:53) LEAQ    (BP)(BX*1),BP\n0152 (rc4.go:53) MOVBQZX (BP),BX\n0153 (rc4.go:53) MOVQ    BX,R9\n0154 (rc4.go:54) LEAQ    (AX),BP\n0155 (rc4.go:54) MOVBQZX DI,BX\n0156 (rc4.go:54) LEAQ    (BP)(BX*1),BP\n0157 (rc4.go:54) MOVB    R9,(BP)\n0158 (rc4.go:54) LEAQ    (AX),BP\n0159 (rc4.go:54) MOVBQZX SI,BX\n0160 (rc4.go:54) LEAQ    (BP)(BX*1),BP\n0161 (rc4.go:54) MOVB    CX,(BP)\n0162 (rc4.go:55) ADDQ    R9,CX\n0163 (rc4.go:55) LEAQ    (AX),BP\n0164 (rc4.go:55) MOVBQZX CX,R8\n0165 (rc4.go:55) LEAQ    (BP)(R8*1),BP\n0166 (rc4.go:55) MOVBQZX (BP),BX\n0167 (rc4.go:55) MOVQ    dst+8(FP),BP\n0168 (rc4.go:55) XORQ    R11,BX\n0169 (rc4.go:55) MOVQ    DX,R8\n0170 (rc4.go:55) CMPQ    DX,R15\n0171 (rc4.go:55) JCS     $1,174\n0172 (rc4.go:55) CALL    ,runtime.panicindex+0(SB)\n0173 (rc4.go:55) UNDEF   ,\n0174 (rc4.go:55) LEAQ    (BP)(R8*1),BP\n0175 (rc4.go:55) MOVB    BX,(BP)\n0176 (rc4.go:49) JMP     ,136\n0177 (rc4.go:57) MOVB    DI,256(AX)\n0178 (rc4.go:57) MOVB    SI,257(AX)\n0179 (rc4.go:58) RET     ,\n\nAfter:\n\n--- prog list \"(*Cipher).XORKeyStream\" ---\n0120 (rc4.go:47) TEXT    (*Cipher).XORKeyStream+0(SB),$0-56\n0121 (rc4.go:47) MOVQ    dst+16(FP),R15\n0122 (rc4.go:47) MOVQ    c+0(FP),AX\n0123 (rc4.go:48) MOVBQZX 257(AX),BP\n0124 (rc4.go:48) MOVQ    BP,SI\n0125 (rc4.go:48) MOVBQZX 256(AX),BP\n0126 (rc4.go:49) MOVQ    src+32(FP),R10\n0127 (rc4.go:49) MOVQ    src+40(FP),R14\n0128 (rc4.go:49) MOVQ    src+48(FP),BX\n0129 (rc4.go:48) MOVQ    BP,DI\n0130 (rc4.go:49) MOVQ    $0,DX\n0131 (rc4.go:49) JMP     ,133\n0132 (rc4.go:49) INCQ    ,DX\n0133 (rc4.go:49) CMPQ    DX,R14\n0134 (rc4.go:49) JGE     $0,162\n0135 (rc4.go:49) MOVBQZX (R10),BP\n0136 (rc4.go:49) INCQ    ,R10\n0137 (rc4.go:50) INCQ    ,DI\n0138 (rc4.go:51) MOVBQZX DI,BX\n0139 (rc4.go:51) MOVBQZX (AX)(BX*1),BX\n0140 (rc4.go:51) MOVQ    BX,CX\n0141 (rc4.go:52) ADDQ    BX,SI\n0142 (rc4.go:53) MOVBQZX SI,BX\n0143 (rc4.go:53) MOVBQZX (AX)(BX*1),BX\n0144 (rc4.go:53) MOVQ    BX,R9\n0145 (rc4.go:54) MOVBQZX DI,BX\n0146 (rc4.go:54) MOVB    R9,(AX)(BX*1)\n0147 (rc4.go:54) MOVBQZX SI,BX\n0148 (rc4.go:54) MOVB    CX,(AX)(BX*1)\n0149 (rc4.go:55) ADDQ    R9,CX\n0150 (rc4.go:55) MOVBQZX CX,R8\n0151 (rc4.go:55) MOVBQZX (AX)(R8*1),BX\n0152 (rc4.go:55) XORQ    BP,BX\n0153 (rc4.go:55) MOVQ    dst+8(FP),BP\n0154 (rc4.go:55) MOVQ    DX,R8\n0155 (rc4.go:55) CMPQ    DX,R15\n0156 (rc4.go:55) JCS     $1,159\n0157 (rc4.go:55) CALL    ,runtime.panicindex+0(SB)\n0158 (rc4.go:55) UNDEF   ,\n0159 (rc4.go:55) LEAQ    (BP)(R8*1),BP\n0160 (rc4.go:55) MOVB    BX,(BP)\n0161 (rc4.go:49) JMP     ,132\n0162 (rc4.go:57) MOVB    DI,256(AX)\n0163 (rc4.go:57) MOVB    SI,257(AX)\n0164 (rc4.go:58) RET     ,\n\nGo 1:\n\n--- prog list \"(*Cipher).XORKeyStream\" ---\n0112 (rc4.go:47) TEXT    (*Cipher).XORKeyStream+0(SB),$24-40\n0113 (rc4.go:47) MOVQ    c+0(FP),BX\n0114 (rc4.go:48) MOVB    257(BX),BP\n0115 (rc4.go:48) MOVB    BP,CX\n0116 (rc4.go:48) MOVQ    BX,AX\n0117 (rc4.go:48) MOVB    256(BX),BP\n0118 (rc4.go:48) MOVB    BP,DI\n0119 (rc4.go:48) MOVB    CX,BX\n0120 (rc4.go:48) MOVB    BX,SI\n0121 (rc4.go:49) MOVQ    src+24(FP),BX\n0122 (rc4.go:49) MOVQ    BX,autotmp_0004+-16(SP)\n0123 (rc4.go:49) MOVL    src+32(FP),BX\n0124 (rc4.go:49) MOVL    BX,autotmp_0004+-8(SP)\n0125 (rc4.go:49) MOVL    src+36(FP),BX\n0126 (rc4.go:49) MOVL    BX,autotmp_0004+-4(SP)\n0127 (rc4.go:49) MOVL    $0,DX\n0128 (rc4.go:49) MOVL    autotmp_0004+-8(SP),BX\n0129 (rc4.go:49) MOVL    BX,autotmp_0006+-20(SP)\n0130 (rc4.go:49) LEAQ    autotmp_0004+-16(SP),BX\n0131 (rc4.go:49) MOVQ    (BX),R9\n0132 (rc4.go:49) JMP     ,134\n0133 (rc4.go:49) INCL    ,DX\n0134 (rc4.go:49) MOVL    autotmp_0006+-20(SP),BP\n0135 (rc4.go:49) CMPL    DX,BP\n0136 (rc4.go:49) JGE     ,180\n0137 (rc4.go:49) MOVB    (R9),BP\n0138 (rc4.go:49) MOVB    BP,R13\n0139 (rc4.go:49) MOVL    DX,BX\n0140 (rc4.go:49) MOVL    DX,R12\n0141 (rc4.go:49) MOVB    R13,BX\n0142 (rc4.go:49) MOVB    BX,R11\n0143 (rc4.go:49) INCQ    ,R9\n0144 (rc4.go:49) MOVQ    R9,BX\n0145 (rc4.go:50) INCB    ,DI\n0146 (rc4.go:51) MOVQ    AX,BX\n0147 (rc4.go:51) MOVB    DI,BP\n0148 (rc4.go:51) MOVBQZX BP,BP\n0149 (rc4.go:51) MOVB    (AX)(BP*1),R8\n0150 (rc4.go:51) MOVB    R8,CX\n0151 (rc4.go:52) MOVB    CX,BX\n0152 (rc4.go:52) ADDB    BX,SI\n0153 (rc4.go:53) MOVB    SI,BP\n0154 (rc4.go:53) MOVBQZX BP,BP\n0155 (rc4.go:53) MOVB    (AX)(BP*1),R8\n0156 (rc4.go:53) MOVB    R8,R10\n0157 (rc4.go:54) MOVB    DI,BP\n0158 (rc4.go:54) MOVBQZX BP,BP\n0159 (rc4.go:54) MOVB    R10,R8\n0160 (rc4.go:54) MOVB    R8,(AX)(BP*1)\n0161 (rc4.go:54) MOVQ    AX,BX\n0162 (rc4.go:54) MOVB    SI,BP\n0163 (rc4.go:54) MOVBQZX BP,BP\n0164 (rc4.go:54) MOVB    CX,R8\n0165 (rc4.go:54) MOVB    R8,(AX)(BP*1)\n0166 (rc4.go:55) MOVB    CX,BP\n0167 (rc4.go:55) MOVB    R10,R8\n0168 (rc4.go:55) ADDB    R8,BP\n0169 (rc4.go:55) MOVBQZX BP,BP\n0170 (rc4.go:55) MOVB    (AX)(BP*1),BX\n0171 (rc4.go:55) MOVB    R11,BP\n0172 (rc4.go:55) XORB    BP,BX\n0173 (rc4.go:55) MOVLQSX R12,BP\n0174 (rc4.go:55) CMPL    BP,dst+16(FP)\n0175 (rc4.go:55) JCS     ,177\n0176 (rc4.go:55) CALL    ,runtime.panicindex+0(SB)\n0177 (rc4.go:55) MOVQ    dst+8(FP),R8\n0178 (rc4.go:55) MOVB    BX,(R8)(BP*1)\n0179 (rc4.go:49) JMP     ,133\n0180 (rc4.go:57) MOVB    DI,BP\n0181 (rc4.go:57) MOVB    BP,256(AX)\n0182 (rc4.go:57) MOVB    SI,BP\n0183 (rc4.go:57) MOVB    BP,257(AX)\n0184 (rc4.go:58) RET     ,",
			"disapproval": false,
			"date": "2013-01-31 00:12:29.814670",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I seem to have uploaded a broken version.",
			"disapproval": false,
			"date": "2013-01-30 23:35:39.086500",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ahh right. My mistake.\r\n\r\nI can test on 386, are there any specific packages which might receive\r\na performance improvement from this change ?\r\n\r\nOn Thu, Jan 31, 2013 at 11:04 AM,  <remyoudompheng@gmail.com> wrote:\r\n> On 2013/01/30 23:36:13, dfc wrote:\r\n>>\r\n>> This is happening constantly, has anyone logged a bug on rietveld\r\n>\r\n> about this ?\r\n>\r\n>> On Thu, Jan 31, 2013 at 10:35 AM,  <mailto:remyoudompheng@gmail.com>\r\n>\r\n> wrote:\r\n>>\r\n>> > I seem to have uploaded a broken version.\r\n>> >\r\n>> > https://codereview.appspot.com/7221077/\r\n>\r\n>\r\n> I mean the code is broken, after I tried an unspaghettification.\r\n> By the way, the patch on 8g needs\r\n> https://codereview.appspot.com/7226066/ (which is independent) to avoid\r\n> breakage.\r\n>\r\n>\r\n> https://codereview.appspot.com/7221077/\r\n",
			"disapproval": false,
			"date": "2013-01-31 00:10:34.834470",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 00:10:34, dfc wrote:\n> Ahh right. My mistake.\n> \n> I can test on 386, are there any specific packages which might receive\n> a performance improvement from this change ?\n\nMy example on crypto/rc4 shows a noticeable speedup, but not all code benefits from the change. I'd be happy if you have some benchmarks you want to try.",
			"disapproval": false,
			"date": "2013-01-31 00:14:40.016890",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 00:44:37, dfc wrote:\n> Applying both CLs on linux/386, benchmarks for crypto/rc4 appear to have\n> regressed by 10%\n> \n> 220887(~/go/src/pkg/crypto/rc4) % ~/go/misc/benchcmp {old,new}.txtbenchmark     \n>      old ns/op    new ns/op    delta\n> BenchmarkRC4_128        12420        13710  +10.39%\n> BenchmarkRC4_1K         99146       109387  +10.33%\n> BenchmarkRC4_8K        783317       869264  +10.97%\n> \n> benchmark            old MB/s     new MB/s  speedup\n> BenchmarkRC4_128        10.31         9.34    0.91x\n> BenchmarkRC4_1K         10.33         9.36    0.91x\n> BenchmarkRC4_8K         10.34         9.31    0.90x\n\nWhat kind of CPU are you using in this benchmark?",
			"disapproval": false,
			"date": "2013-01-31 20:59:48.292100",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 00:13:39, rsc wrote:\n> This is fine but I suspect you can get even better performance if you can\n> make sudoaddable generate the MOVQ directly. The peephole frees up SI too\n> late for it to be used.\n> \n> Russ\n\nsudoaddable was disabled by this changeset: it is not clear to me how to re-enable it without breaking tests.\n\nchangeset:   14785:0167b45ce063\nuser:        R\u00e9my Oudompheng <oudomphe@phare.normalesup.org>\ndate:        Fri Nov 02 07:50:59 2012 +0100\ncmd/5g, cmd/6g: fix out of registers with array indexing.\n\nCompiling expressions like:\n    s[s[s[s[s[s[s[s[s[s[s[s[i]]]]]]]]]]]]\nmake 5g and 6g run out of registers. Such expressions can arise\nif a slice is used to represent a permutation and the user wants\nto iterate it.\n[...]\n\nIn the code which is now generated SI and DI are truncated to bytes 3 times each...",
			"disapproval": false,
			"date": "2013-01-31 00:24:29.152120",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "go1 benchmarks tell a confusing story\n\n220887(~/go/test/bench/go1) % ./go1.07047d188e5d+ -test.bench=. > old.txt && ./go1.test -test.bench=. > new.txt && ~/go/misc/benchcmp {old,new}.txt\ntesting: warning: no tests to run\ntesting: warning: no tests to run\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    2147483647   2147483647   +0.38%\nBenchmarkFannkuch11      2147483647   2147483647   -4.12%\nBenchmarkGobDecode        116948991    118130290   +1.01%\nBenchmarkGobEncode         46165429     45144971   -2.21%\nBenchmarkGzip            2147483647   2147483647   -3.77%\nBenchmarkGunzip           578569131    573901528   -0.81%\nBenchmarkJSONEncode       595919633    593787673   -0.36%\nBenchmarkJSONDecode       894130881    864169486   -3.35%\nBenchmarkMandelbrot200     33309028     33309361   +0.00%\nBenchmarkParse             36518266     36188068   -0.90%\nBenchmarkRevcomp         2147483647   2147483647   -3.33%\nBenchmarkTemplate        1525819164   1537115231   +0.74%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.56         6.50    0.99x\nBenchmarkGobEncode            16.63        17.00    1.02x\nBenchmarkGzip                  5.68         5.90    1.04x\nBenchmarkGunzip               33.54        33.81    1.01x\nBenchmarkJSONEncode            3.26         3.27    1.00x\nBenchmarkJSONDecode            2.17         2.25    1.04x\nBenchmarkParse                 1.59         1.60    1.01x\nBenchmarkRevcomp              52.64        54.45    1.03x\nBenchmarkTemplate              1.27         1.26    0.99x\n\nThe 3 and 4 % speedups are constant across several runs.",
			"disapproval": false,
			"date": "2013-01-31 00:53:18.804080",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-02-13 09:08:17.846910",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My main reservation is that I think the compiler should do a better job avoiding the LEAQs in the first place, because then the optimizer has more registers available for the earlier stages.\n\nBut if you address Daniel's comments, I'm willing to run with it.",
			"disapproval": false,
			"date": "2013-02-14 21:57:36.715510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's hold off on this now until after Go 1.1. Thanks.",
			"disapproval": false,
			"date": "2013-03-19 18:31:10.082140",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7221077: cmd/6g, cmd/8g: add address propagation to peepholes.",
	"created": "2013-01-30 23:17:38.206560",
	"patchsets": [
		1,
		2001,
		5001,
		9001
	],
	"modified": "2013-03-19 18:31:10.082140",
	"closed": false,
	"issue": 7221077
}