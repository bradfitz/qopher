{
	"description": "runtime, reflect, ld, gc: garbage collection precision improvements",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com",
		"rsc@golang.org",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-24 09:05:50.195358",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If possible I would like somebody to apply this patch on a 64-bit machine and run src/all.bash.",
			"disapproval": false,
			"date": "2012-04-25 11:44:54.578772",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're not in the A+C files yet, but I see you've filled in the CLA.\n\nHow do you want to appear there?\n",
			"disapproval": false,
			"date": "2012-04-24 12:12:25.307562",
			"approval": false
		},
		{
			"sender": "mpimenov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">\n> If possible I would like somebody to apply this patch on a 64-bit\n> machine and run src/all.bash.\n\n\n # Building C bootstrap tool.\ncmd/dist\n\n# Building compilers and Go bootstrap tool for host, linux/amd64.\nlib9\nlibbio\n<...>\npkg/go/build\ncmd/go\nunexpected fault address 0x3f497a6730\nthrow: fault\n[signal 0xb code=0x1 addr=0x3f497a6730 pc=0x43daa6]\n\ngoroutine 1 [running]:\nunicode.init()\ngo/src/pkg/unicode/tables.go:48 +0x54\ngo/parser.init()\ngo/src/pkg/go/parser/parser.go:2343 +0x43\nmain.init()\ngo/src/cmd/go/bootstrap.go:18 +0x51\n\ngoroutine 2 [runnable]:\ncreated by runtime.main\ngo/src/pkg/runtime/proc.c:221\n",
			"disapproval": false,
			"date": "2012-04-25 12:02:13.509663",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/amd64: all tests passed\r\n\r\ndarwin/amd64: hung on testing go/printer (spining) the first attempt,\r\nthen i interrupted it and ran go test just in that directory, which\r\npassed. subsequently all.bash passed without issue twice.\r\n",
			"disapproval": false,
			"date": "2012-04-25 16:42:18.020489",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com, devon.odell@gmail.com, mirtchovski@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-26 18:06:22.375795",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-25 16:14:43.208805",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/25 16:14:43, atom wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:dsymonds@golang.org, mailto:mpimenov@google.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nOn FreeBSD/amd64: ALL TESTS PASSED\n\nI haven't looked at the code, so this shouldn't say anything about that.",
			"disapproval": false,
			"date": "2012-04-25 16:18:59.219370",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/25 16:42:18, aam wrote:\n> darwin/amd64: hung on testing go/printer (spining) the first attempt,\n> then i interrupted it and ran go test just in that directory, which\n> passed. subsequently all.bash passed without issue twice.\n\nAre you sure the spinning test was go/printer? A valid method for determining which test is spinning is to look at the list of processes on the machine (Linux: top, htop).",
			"disapproval": false,
			"date": "2012-04-25 17:08:46.628115",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch set 5:\n\n- Fixes a potential race condition when setting typeinfo in MSpan.\n\n- Adds simple compression for the typeinfo stored in MSpan. This works well for synthetic benchmarks, I am not sure how well it works in normal programs. Results for test/bench/garbage/tree2.go benchmark:\n\n  tip: 115 MB heap\n  patchset4: 143 MB heap\n  patchset5: 120 MB heap",
			"disapproval": false,
			"date": "2012-04-26 18:13:57.952195",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch set 6:\n\n- Add support for cases such as:\n\n    type S struct {a,b,c T}\n    s := new(S)\n    x := &s.a\n    // 'x' and 's' point to the same object,\n    // but their types are different (*T, *S)",
			"disapproval": false,
			"date": "2012-04-29 10:06:01.762940",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com, devon.odell@gmail.com, mirtchovski@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-29 09:57:29.786405",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com, devon.odell@gmail.com, mirtchovski@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-01 16:59:13.386439",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch set 7:\n\n- add a mini buffer in scanblock(), and consequently do not use runtime\u00b7casp()\n\n- handle interface{}\n\n- optimize symtab.c",
			"disapproval": false,
			"date": "2012-05-01 17:04:27.977292",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 7, 2012 at 4:19 AM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> * I would like somebody to start a review of the source code. *\r\n\r\nI'm sorry for not getting to this yet.  I'm trying to get out of a\r\nbacklog of code reviews, and I'm making progress.  I am certainly\r\nlooking forward to reviewing this.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-07 13:39:49.065125",
			"approval": false
		},
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 10, 2012 at 8:56 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Thanks for working on this.\r\n>\r\n> I understand that this code is primarily about adding precise garbage\r\n> collection, but it seems to be making quite a few changes to things\r\n> like the handoff algorithm and parallelization of the collection,\r\n> which Dmitry already has in progress. \u00a0I am thrilled that both of you\r\n> are improving the GC, and I don't want you to step on each other's\r\n> toes.\r\n\r\nI am aware of the existence of Dmitry's changes, but I haven't\r\nexamined them. I would like to know the relevant links on\r\nhttp://codereview.appspot.com. The GC is already parallel, so I am\r\nassuming that Dmitry's changes are about further improvements to\r\nrunning GC on multiple threads.\r\n\r\n> Dmitry's parallelization code is partially submitted. \u00a0I hope we can\r\n> get that fully submitted in the next couple weeks, and then I hope\r\n> that you'll be able to update this CL to use that, so that the changes\r\n> focus on the precise GC part.\r\n>\r\n> To that end, in this CL my plan is to review primarily the parts\r\n> concerned with precise GC and to ignore for now the parallelization\r\n> aspects, since I expect that they might change.\r\n>\r\n> Does that seem reasonable?\r\n\r\nIt seems reasonable to me.\r\n",
			"disapproval": false,
			"date": "2012-05-10 20:00:26.610288",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com, devon.odell@gmail.com, mirtchovski@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-07 08:00:57.202293",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch set 8 is the last major patch set in this code review. There will be no changes to this patch set, except for the cases of bugs in the code and except source code documentation additions and except coding style changes.\n\n* I would like somebody to start a review of the source code. *\n\nPatch set 8:\n\n- handle Go maps\n\n- handle interfaces (in C: Iface)\n\n- split stack preallocation at the start of GC (works on i386 only, not sure why it does not work on amd64 so it is disabled on amd64)\n\n- optimize mprof.goc",
			"disapproval": false,
			"date": "2012-05-07 08:19:47.072108",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com, devon.odell@gmail.com, mirtchovski@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-07 10:04:41.638626",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just a note: The more precise GC can handle the i386 build issue that started appearing at http://build.golang.org since revision 345cbca96c55.",
			"disapproval": false,
			"date": "2012-05-15 12:43:33.100174",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this.\r\n\r\nI understand that this code is primarily about adding precise garbage\r\ncollection, but it seems to be making quite a few changes to things\r\nlike the handoff algorithm and parallelization of the collection,\r\nwhich Dmitry already has in progress.  I am thrilled that both of you\r\nare improving the GC, and I don't want you to step on each other's\r\ntoes.\r\n\r\nDmitry's parallelization code is partially submitted.  I hope we can\r\nget that fully submitted in the next couple weeks, and then I hope\r\nthat you'll be able to update this CL to use that, so that the changes\r\nfocus on the precise GC part.\r\n\r\nTo that end, in this CL my plan is to review primarily the parts\r\nconcerned with precise GC and to ignore for now the parallelization\r\naspects, since I expect that they might change.\r\n\r\nDoes that seem reasonable?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-10 18:57:18.412285",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com, devon.odell@gmail.com, mirtchovski@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-09 12:04:45.380703",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "... some files were missing from the patches because I forgot to update the file list via \"hg change 6114046\".",
			"disapproval": false,
			"date": "2012-05-09 12:44:05.017321",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe these are the relevant CLs by Dmitry:\r\nhttp://codereview.appspot.com/5986054/\r\nhttp://codereview.appspot.com/5534044/\r\n\r\nThis was the original and has been the source for a sequence of smaller pieces:\r\nhttp://codereview.appspot.com/5279048/\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-10 20:04:32.857171",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mpimenov@google.com",
				"devon.odell@gmail.com",
				"mirtchovski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, mpimenov@google.com, devon.odell@gmail.com, mirtchovski@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-23 16:52:11.133500",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-01 16:45:18.098581",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I made a first pass through for style-related things.  I know it's annoying and avoids the point of the CL, but if we get these out of the way early, it should make the iterations faster.  I certainly didn't flag every variable declared mid-function, but please look through the code for them.\n\nI would also like to start cutting this up into smaller CLs that can be reviewed and submitted, like we did for Dmitriy's garbage collector changes.\n\nOne good first CL to separate out would be the change from byte* to uintptr in the various M and G fields, along with the casts required to keep the code compiling.  Please make that it's own CL, and then that will reduce the number of files here significantly.\n\nAnother good CL to separate out would be the hugestring change, since the idea of allocating one big string does not depend on having the new garbage collector code.\n\nI'll send more substantial comments in the next review.\n\nThanks.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode631\nsrc/cmd/ld/data.c:631: setuintxx(Sym *s, vlong r, uint64 v, int wid)\nPlease change r to off (as in offset).\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode831\nsrc/cmd/ld/data.c:831: align_symsize(int32 s)\ns/_// to match the rest of the functions here\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode841\nsrc/cmd/ld/data.c:841: align_datsize(int32 datsize, Sym *s)\ns/_//\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode860\nsrc/cmd/ld/data.c:860: gc_addsym(Sym *gc, Sym *s, int32 ofs)\ns/_//\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode901\nsrc/cmd/ld/data.c:901: Sym *data_gc, *bss_gc;\ns/_//\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/lib.h\nFile src/cmd/ld/lib.h (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/lib.h#newcode42\nsrc/cmd/ld/lib.h:42: SDATA_GC,\nPlease call these SGCDATA and SGCBSS, which match the naming of things like SRODATA and SNOPTRBSS.\n\nThis code tree tends to avoid _ in names, for what it's worth.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/lib.h#newcode325\nsrc/cmd/ld/lib.h:325: // The type.* symbols.\t This has to be in sync with\nruntime/type.h already has a copy of these.  Let's not add another.  Maybe move the enum into runtime/typekind.h and include it from the ld files that need this information.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode90\nsrc/pkg/runtime/mgc0.c:90: {\nPlease sync with dmitriy's latest code.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode434\nsrc/pkg/runtime/mgc0.c:434: if( ((uintptr)obj & ((uintptr)PtrSize-1)) != 0 ) {\nAvoid spaces inside if( ) parens.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode517\nsrc/pkg/runtime/mgc0.c:517: struct Y *ybufpos = ybuf;\nPlease move all variable declarations to top of function, and don't initialize and declare in the same statement.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode829\nsrc/pkg/runtime/mgc0.c:829: Hmap *h = (Hmap*)b;\nPlease move variables to top, avoiding { } around case blocks.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode1837\nsrc/pkg/runtime/mgc0.c:1837: case 2:\nunindent\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode2089\nsrc/pkg/runtime/mgc0.c:2089: int32 i;\nMove variables to top.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/runtime.c#newcode114\nsrc/pkg/runtime/runtime.c:114: //\truntime\u00b7dopanic(0);\nRemove this file from the CL?\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/sema.goc\nFile src/pkg/runtime/sema.goc (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/sema.goc#newcode46\nsrc/pkg/runtime/sema.goc:46: union semtable_t\ns/_t//\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/slice.c#newcode45\nsrc/pkg/runtime/slice.c:45: if(cap != 0) {\nInstead of writing\n\nif(xxx) {\n    long long block\n} else {\n    short block\n}\n\nIt is usually easier to follow to reverse the order, so that when as a reader you see the else you still remember what the if condition was.  In this case we can get rid of the else entirely too:\n\nif(cap == 0) {\n    ret->len = 0;\n    ret->cap = 0;\n    ret->array = (byte*)&zerobase;\n    return;\n}\n\nThis is the same as what we suggest for Go programs in http://golang.org/doc/effective_go.html#if\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c\nFile src/pkg/runtime/symtab.c (left):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c#oldcode208\nsrc/pkg/runtime/symtab.c:208: files[nfile].srcstring = runtime\u00b7gostring(srcbuf);\nI'm a little worried about losing gostring, because I believe gostring happened to NUL-terminate the strings so that you could use the pointer as a C string too, but maybe that's not depended on anymore.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c\nFile src/pkg/runtime/symtab.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c#newcode223\nsrc/pkg/runtime/symtab.c:223: if(!writestr) {\nThis block (the new code) should be its own function, since it appears here and then 10 lines later again.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c#newcode226\nsrc/pkg/runtime/symtab.c:226: if(l > 0) {\nWhy make l > 0 a special case?  The code here would work fine for l == 0 too.  Same below.",
			"disapproval": false,
			"date": "2012-05-24 16:36:45.295385",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's make a separate CL that does nothing but add the (unused for now) gc field to the reflect type information.  That touches a fair number of files so it's good to split out.\n\nThen let's also make a separate CL that is just the linker changes.\n\nI'm pretty comfortable with both of those.  Then we'll have left the compiler changes to generate the information and the garbage collector changes to use it.\n\nThanks again.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode860\nsrc/cmd/ld/data.c:860: gc_addsym(Sym *gc, Sym *s, int32 ofs)\nPlease s/ofs/off/ to match other code here.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode881\nsrc/cmd/ld/data.c:881: for(a=0; a<s->size; a++) {\nAvoid the conditional and all the unnecessary loop iterations:\n\nfor(a = -ofs&(PtrSize-1); a+PtrSize<=s->size; a+=PtrSize) {\n    adduintxx(gc, GC_APTR);\n    adduintxx(gc, off+a);\n}\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode883\nsrc/cmd/ld/data.c:883: if(PtrSize == 4) {\nUse adduintxx.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode956\nsrc/cmd/ld/data.c:956: /*\nI'm worried about needing to maintain two copies of this code, which changes more frequently than you might expect.\n\nInstead of this, can we do\n\n/*\n * Two passes: first pass creates gc information.\n * The addresses assigned during the first pass are incorrect\n * but harmless.\n */\nfor(pass=0; pass<2; pass++) {\n   ... the original copy of the code,\n   looking at pass only in the data and bss loops,\n   to determine whether to update the gc info ...\n}\n\nOr, another way to do this would be to put the gc-computing code in the original copy and then add a loop at the end that determines how far each address moves down to make room for the gc data and does\n\nfor(s=aftergc; s != nil; s = s->next)\n    s->value += delta;\nfor(sect=aftergcsect; sect != nil; sect = sect->next)\n    sect->addr += delta;\n\nor whatever the appropriate adjustments would be.\n\nI'd be happy with whichever one you think is easiest.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode964\nsrc/cmd/ld/data.c:964: if(PtrSize == 4) {\ncan avoid the if.\nadduintxx(data_gc, 0, PtrSize);\nadduintxx(bss_gc, 0, PtrSize);\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode1012\nsrc/cmd/ld/data.c:1012: if(PtrSize == 4) {\nSame.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode1135\nsrc/cmd/ld/data.c:1135: if(PtrSize == 4)\nUse setuintxx.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode1152\nsrc/cmd/ld/data.c:1152: if(PtrSize == 4)\nUse setuintxx.",
			"disapproval": false,
			"date": "2012-05-24 17:00:33.135321",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c\nFile src/pkg/runtime/symtab.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c#newcode223\nsrc/pkg/runtime/symtab.c:223: if(!writestr) {\nOn 2012/05/24 16:36:45, rsc wrote:\n> This block (the new code) should be its own function, since it appears here and\n> then 10 lines later again.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/symtab.c#newcode226\nsrc/pkg/runtime/symtab.c:226: if(l > 0) {\nOn 2012/05/24 16:36:45, rsc wrote:\n> Why make l > 0 a special case?  The code here would work fine for l == 0 too. \n> Same below.\n\nIf it is the last one and l==0, then hugestring.str+hugestring.len may point just beyond the memory region allocated for the hugestring. This may cause a memory leak if the pointed-to address belongs to a completely different object.",
			"disapproval": false,
			"date": "2012-05-27 19:44:07.506253",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode631\nsrc/cmd/ld/data.c:631: setuintxx(Sym *s, vlong r, uint64 v, int wid)\nOn 2012/05/24 16:36:45, rsc wrote:\n> Please change r to off (as in offset).\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode831\nsrc/cmd/ld/data.c:831: align_symsize(int32 s)\nOn 2012/05/24 16:36:45, rsc wrote:\n> s/_// to match the rest of the functions here\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode841\nsrc/cmd/ld/data.c:841: align_datsize(int32 datsize, Sym *s)\nOn 2012/05/24 16:36:45, rsc wrote:\n> s/_//\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode860\nsrc/cmd/ld/data.c:860: gc_addsym(Sym *gc, Sym *s, int32 ofs)\nOn 2012/05/24 16:36:45, rsc wrote:\n> s/_//\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode860\nsrc/cmd/ld/data.c:860: gc_addsym(Sym *gc, Sym *s, int32 ofs)\nOn 2012/05/24 17:00:33, rsc wrote:\n> Please s/ofs/off/ to match other code here.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode881\nsrc/cmd/ld/data.c:881: for(a=0; a<s->size; a++) {\nOn 2012/05/24 17:00:33, rsc wrote:\n> Avoid the conditional and all the unnecessary loop iterations:\n> \n> for(a = -ofs&(PtrSize-1); a+PtrSize<=s->size; a+=PtrSize) {\n>     adduintxx(gc, GC_APTR);\n>     adduintxx(gc, off+a);\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode883\nsrc/cmd/ld/data.c:883: if(PtrSize == 4) {\nOn 2012/05/24 17:00:33, rsc wrote:\n> Use adduintxx.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode901\nsrc/cmd/ld/data.c:901: Sym *data_gc, *bss_gc;\nOn 2012/05/24 16:36:45, rsc wrote:\n> s/_//\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode956\nsrc/cmd/ld/data.c:956: /*\nThinking.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode964\nsrc/cmd/ld/data.c:964: if(PtrSize == 4) {\nOn 2012/05/24 17:00:33, rsc wrote:\n> can avoid the if.\n> adduintxx(data_gc, 0, PtrSize);\n> adduintxx(bss_gc, 0, PtrSize);\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode1012\nsrc/cmd/ld/data.c:1012: if(PtrSize == 4) {\nOn 2012/05/24 17:00:33, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode1135\nsrc/cmd/ld/data.c:1135: if(PtrSize == 4)\nOn 2012/05/24 17:00:33, rsc wrote:\n> Use setuintxx.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/data.c#newcode1152\nsrc/cmd/ld/data.c:1152: if(PtrSize == 4)\nOn 2012/05/24 17:00:33, rsc wrote:\n> Use setuintxx.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/lib.h\nFile src/cmd/ld/lib.h (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/lib.h#newcode42\nsrc/cmd/ld/lib.h:42: SDATA_GC,\nOn 2012/05/24 16:36:45, rsc wrote:\n> Please call these SGCDATA and SGCBSS, which match the naming of things like\n> SRODATA and SNOPTRBSS.\n> \n> This code tree tends to avoid _ in names, for what it's worth.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/cmd/ld/lib.h#newcode325\nsrc/cmd/ld/lib.h:325: // The type.* symbols.\t This has to be in sync with\nThis was copied from cmd/ld/dwarf.c\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode90\nsrc/pkg/runtime/mgc0.c:90: {\nOn 2012/05/24 16:36:45, rsc wrote:\n> Please sync with dmitriy's latest code.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode434\nsrc/pkg/runtime/mgc0.c:434: if( ((uintptr)obj & ((uintptr)PtrSize-1)) != 0 ) {\nOn 2012/05/24 16:36:45, rsc wrote:\n> Avoid spaces inside if( ) parens.\n\nDone. But I am unable to quickly read it without the spaces.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode517\nsrc/pkg/runtime/mgc0.c:517: struct Y *ybufpos = ybuf;\nOn 2012/05/24 16:36:45, rsc wrote:\n> Please move all variable declarations to top of function, and don't initialize\n> and declare in the same statement.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode829\nsrc/pkg/runtime/mgc0.c:829: Hmap *h = (Hmap*)b;\nOn 2012/05/24 16:36:45, rsc wrote:\n> Please move variables to top, avoiding { } around case blocks.\n> \n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode1837\nsrc/pkg/runtime/mgc0.c:1837: case 2:\nOn 2012/05/24 16:36:45, rsc wrote:\n> unindent\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/mgc0.c#newcode2089\nsrc/pkg/runtime/mgc0.c:2089: int32 i;\nOn 2012/05/24 16:36:45, rsc wrote:\n> Move variables to top.\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/runtime.c#newcode114\nsrc/pkg/runtime/runtime.c:114: //\truntime\u00b7dopanic(0);\nOn 2012/05/24 16:36:45, rsc wrote:\n> Remove this file from the CL?\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/sema.goc\nFile src/pkg/runtime/sema.goc (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/sema.goc#newcode46\nsrc/pkg/runtime/sema.goc:46: union semtable_t\nOn 2012/05/24 16:36:45, rsc wrote:\n> s/_t//\n\nDone.\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/42001/src/pkg/runtime/slice.c#newcode45\nsrc/pkg/runtime/slice.c:45: if(cap != 0) {\nOn 2012/05/24 16:36:45, rsc wrote:\n> Instead of writing\n> \n> if(xxx) {\n>     long long block\n> } else {\n>     short block\n> }\n> \n> It is usually easier to follow to reverse the order, so that when as a reader\n> you see the else you still remember what the if condition was.  In this case we\n> can get rid of the else entirely too:\n> \n> if(cap == 0) {\n>     ret->len = 0;\n>     ret->cap = 0;\n>     ret->array = (byte*)&zerobase;\n>     return;\n> }\n> \n> This is the same as what we suggest for Go programs in\n> http://golang.org/doc/effective_go.html#if\n\nDone.",
			"disapproval": false,
			"date": "2012-06-01 16:45:47.190845",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch set 13:\n\n- a couple of bugfixes\n- support for slices\n- support for unsafe_New and unsafe_NewArray\n- minor performance improvements when GOMAXPROCS >= 2",
			"disapproval": false,
			"date": "2012-06-24 16:06:04.647722",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-24 16:00:22.500127",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/25 07:04:52, dvyukov wrote:\n> It seems that you hit the same issue as me:\n> http://codereview.appspot.com/6114046/diff2/49002:64001/src/pkg/runtime/parfor.c\n> \n> Can you revert SysAlloc with this change?\n> http://codereview.appspot.com/6339051/\n\nI reverted the SysAlloc, and rewrote the code so that calls to parforalloc() happen a bit sooner.",
			"disapproval": false,
			"date": "2012-06-25 08:00:10.181214",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 07:53:45.062214",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/24 16:06:04, atom wrote:\n> Patch set 13:\n> \n> - a couple of bugfixes\n> - support for slices\n> - support for unsafe_New and unsafe_NewArray\n> - minor performance improvements when GOMAXPROCS >= 2\n\nIt seems that you hit the same issue as me:\nhttp://codereview.appspot.com/6114046/diff2/49002:64001/src/pkg/runtime/parfor.c\n\nCan you revert SysAlloc with this change?\nhttp://codereview.appspot.com/6339051/",
			"disapproval": false,
			"date": "2012-06-25 07:04:52.231562",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/25 07:04:52, dvyukov wrote:\n> On 2012/06/24 16:06:04, atom wrote:\n> > Patch set 13:\n> > \n> > - a couple of bugfixes\n> > - support for slices\n> > - support for unsafe_New and unsafe_NewArray\n> > - minor performance improvements when GOMAXPROCS >= 2\n> \n> It seems that you hit the same issue as me:\n> http://codereview.appspot.com/6114046/diff2/49002:64001/src/pkg/runtime/parfor.c\n> \n> Can you revert SysAlloc with this change?\n> http://codereview.appspot.com/6339051/\n\n\nAh I see:\n 41         if(runtime\u00b7gcing)\n 42                 runtime\u00b7throw(\"malloc called while gcing\");",
			"disapproval": false,
			"date": "2012-06-25 07:08:24.416054",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 08:24:22.688079",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/25 08:00:10, atom wrote:\n> On 2012/06/25 07:04:52, dvyukov wrote:\n> > It seems that you hit the same issue as me:\n> >\n> http://codereview.appspot.com/6114046/diff2/49002:64001/src/pkg/runtime/parfor.c\n> > \n> > Can you revert SysAlloc with this change?\n> > http://codereview.appspot.com/6339051/\n> \n> I reverted the SysAlloc, and rewrote the code so that calls to parforalloc()\n> happen a bit sooner.\n\nPlease restore m->locks++/-- around parforalloc.",
			"disapproval": false,
			"date": "2012-06-25 08:05:46.910925",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello. This CL does not apply cleanly after d8bd45866999, could you\r\nplease re mail it, i'd like to see how it goes on arm.\r\n\r\nOn Mon, Jun 25, 2012 at 6:24 PM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> Hello dvyukov@google.com, rsc@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/6114046/\r\n",
			"disapproval": false,
			"date": "2012-06-27 01:58:30.354517",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some intersting results on linux/arm\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   37367981000  53971314000  +44.43%\nBenchmarkFannkuch11     34773498000  34745026000   -0.08%\nBenchmarkGobDecode        124826050    125396700   +0.46%\nBenchmarkGobEncode         59490960     59654540   +0.27%\nBenchmarkGzip            5533813000   5578705000   +0.81%\nBenchmarkGunzip          1193909000   1199798000   +0.49%\nBenchmarkJSONEncode       817492600    860882600   +5.31%\nBenchmarkJSONDecode      2742920000   2766296000   +0.85%\nBenchmarkMandelbrot200     45582280     45672620   +0.20%\nBenchmarkParse             63706660     70501700  +10.67%\nBenchmarkRevcomp          142904600    138769500   -2.89%\nBenchmarkTemplate        5985047000   6121277000   +2.28%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.15         6.12    1.00x\nBenchmarkGobEncode            12.90        12.87    1.00x\nBenchmarkGzip                  3.51         3.48    0.99x\nBenchmarkGunzip               16.25        16.17    1.00x\nBenchmarkJSONEncode            2.37         2.25    0.95x\nBenchmarkJSONDecode            0.71         0.70    0.99x\nBenchmarkParse                 0.91         0.82    0.90x\nBenchmarkRevcomp              17.79        18.32    1.03x\nBenchmarkTemplate              0.32         0.32    1.00x",
			"disapproval": false,
			"date": "2012-06-28 22:48:36.903505",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-27 07:40:53.769237",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/28 22:48:36, dfc wrote:\n> Some intersting results on linux/arm\n> \n> benchmark                 old ns/op    new ns/op    delta\n> BenchmarkBinaryTree17   37367981000  53971314000  +44.43%\n> BenchmarkParse             63706660     70501700  +10.67%\n\nThe slowdown (on i386: +17%) in BenchmarkBinaryTree17 is for the most part caused by setting type information of Go objects at allocation time. In this benchmark, the performance of GC itself is approximately the same as performance of the old GC. Maybe this is also happening on ARM. You can check this by executing:\n\n  GOGCTRACE=1 binary-tree -n=17\n\nand observing the number of milliseconds consumed by individual garbage collections.",
			"disapproval": false,
			"date": "2012-06-30 17:07:47.976128",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/28 22:48:36, dfc wrote:\n> Some intersting results on linux/arm\n> \n> benchmark                 old ns/op    new ns/op    delta\n> BenchmarkBinaryTree17   37367981000  53971314000  +44.43%\n> BenchmarkParse             63706660     70501700  +10.67%\n\nThe slowdown (on i386: +17%) in BenchmarkBinaryTree17 is for the most part caused by setting type information of Go objects at allocation time. In this benchmark, the performance of GC itself is approximately the same as performance of the old GC. Maybe this is also happening on ARM. You can check this by executing:\n\n  GOGCTRACE=1 binary-tree -n=17\n\nand observing the number of milliseconds consumed by individual garbage collections.",
			"disapproval": false,
			"date": "2012-06-30 17:07:48.083301",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patchset 17:\n\n- sync with the current tip of Go repository\n- fixes a bug in mgc0.c that was introduced in a previous patchset\n- adds memorydump() debugging function",
			"disapproval": false,
			"date": "2012-09-20 12:10:52.317300",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-20 12:04:47.427010",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi atom,\ncould you please hg sync and upload a new Patch Set against current tip?\n\nI tried to merge myself, but failed. Thank you.",
			"disapproval": false,
			"date": "2012-10-04 08:55:08.095670",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org, dave@cheney.net, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-04 10:13:43.957900",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi atom, I just applied Patch Set 18 to tip, and ./make.bash\nfailed when it tried to run go_bootstrap.\n\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x3 pc=0x444a3e]\n\ngoroutine 1 [running]:\n\ngoroutine 2 [runnable]:\ncreated by runtime.main\n        /home/minux/go/go.hg3/src/pkg/runtime/proc.c:222\n\nI'm using Linux/amd64 (Linux/386 works fine).\nmaybe because the recent 64-bit int change?",
			"disapproval": false,
			"date": "2012-10-05 09:24:57.938010",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello atom,\n\nIs it possible to update the patchset now that CL6569057 has been submitted?\n\nThanks.",
			"disapproval": false,
			"date": "2012-10-23 05:31:56.985890",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org, dave@cheney.net, minux.ma@gmail.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-23 06:59:25.750940",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c#newcode1930\nsrc/pkg/runtime/mgc0.c:1930: runtime\u00b7memorydump(void)\nIs it possible to send a separate review for memorydump or does it have dependencies?",
			"disapproval": false,
			"date": "2012-10-27 08:48:43.207650",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c#newcode516\nsrc/pkg/runtime/mgc0.c:516: // Nearly the same code as the single-threaded version.\nis it really necessary to duplicate the whole code?\ncan't we just have the ifs around the differences?\n\nhttp://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c#newcode2024\nsrc/pkg/runtime/mgc0.c:2024: // This allows the arguments to be easily passed via reflect\u00b7call.\nand what do the arguments mean?",
			"disapproval": false,
			"date": "2012-10-26 07:01:14.704070",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c#newcode516\nsrc/pkg/runtime/mgc0.c:516: // Nearly the same code as the single-threaded version.\nOn 2012/10/26 07:01:14, remyoudompheng wrote:\n> is it really necessary to duplicate the whole code?\n> can't we just have the ifs around the differences?\n\nThis is hard to say. It may happen that in year 2013 the C code for this function will be partially generated by a program. The reason why I think this may happen is that it is hard to see errors in the garbage collector implementation.\n\nAssuming the C code will be generated automatically, duplication of code pieces shouldn't be hard to implement in the generator.\n\nAlso, it is performance-sensitive code.\n\nhttps://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c#newcode2024\nsrc/pkg/runtime/mgc0.c:2024: // This allows the arguments to be easily passed via reflect\u00b7call.\nOn 2012/10/26 07:01:14, remyoudompheng wrote:\n> and what do the arguments mean?\n\nThe argument 'force' isn't documented in previous versions of mgc0.c, so I left it undocumented.",
			"disapproval": false,
			"date": "2012-10-27 10:33:51.699990",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6114046/diff/113001/src/pkg/runtime/mgc0.c#newcode1930\nsrc/pkg/runtime/mgc0.c:1930: runtime\u00b7memorydump(void)\nOn 2012/10/27 08:48:43, remyoudompheng wrote:\n> Is it possible to send a separate review for memorydump or does it have\n> dependencies? \n\nDone.",
			"disapproval": false,
			"date": "2012-10-27 10:40:48.117730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How do you suggest to proceed with the remaining 1500 lines of diffs? It is still a bit big to digest in one CL.\n\nThanks.",
			"disapproval": false,
			"date": "2012-11-01 18:48:51.459270",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/01 18:48:51, rsc wrote:\n> How do you suggest to proceed with the remaining 1500 lines of diffs? It is\n> still a bit big to digest in one CL.\n> \n> Thanks.\n\n1. CL1: Add moreframesize_minalloc to struct M and use reflect\u00b7call() to call function mgc0.c:gc()\n\n2. Ignore mprof.goc for now\n\n3. CL2: Temporarily use \"goto trailing_pointers\" in most cases in mgc0.c:/switch(pc[0]). This should reduce the size of function scanblock() and postpone the need to merge hashmap.{h,c}. Ignore the constants DebugTypeAtBlockEnd and DebugStat.   The resulting diff should be less than 1000 lines and scanblock() should be easier to review.\n\nIn CL2 certain code lines related to object marking will be duplicated 3 times. This seems unavoidable for now (the goal is to achieve higher performance, but the C compiler does not have enough information to specialize and inline functions).\n\nDoes the above seem reasonable?",
			"disapproval": false,
			"date": "2012-11-03 11:02:28.649350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/03 11:02:28, atom wrote:\n> 1. CL1: Add moreframesize_minalloc to struct M and use reflect\u00b7call() to call\n> function mgc0.c:gc()\n> \n> 2. Ignore mprof.goc for now\n> \n> 3. CL2: Temporarily use \"goto trailing_pointers\" in most cases in\n> mgc0.c:/switch(pc[0]). This should reduce the size of function scanblock() and\n> postpone the need to merge hashmap.{h,c}. Ignore the constants\n> DebugTypeAtBlockEnd and DebugStat.   The resulting diff should be less than 1000\n> lines and scanblock() should be easier to review.\n> \n> In CL2 certain code lines related to object marking will be duplicated 3 times.\n> This seems unavoidable for now (the goal is to achieve higher performance, but\n> the C compiler does not have enough information to specialize and inline\n> functions).\n> \n> Does the above seem reasonable?\n\nI suggest:\n 1. you send CL1\n 2. you send a non-duplicated CL2 (it may have poor performance, i'm not sure it's perceptible enough and people are not supposed to use tip in production)\n 3. you send a performance patch (that may duplicate code), the important parts will have been reviewed using a more comfortable codebase.\n\nI say we can discuss the best way we are going to maybe do something, but probably you should just prepare the CLs if it is quick and we'll see whether they look digestible.",
			"disapproval": false,
			"date": "2012-11-11 22:06:57.465000",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi atom,\n   after applying the latest patch set (20), and update to rev 7ea16cd2859c,\nencoding/xml fails with strange errors on darwin/amd64 (I suspect linux/amd64\nwill also fail). Also note that ./all.bash passes on darwin/386 and darwin/arm\non that revision.\n   the patch works quite well before that rev.\n   Do you have any ideas why?",
			"disapproval": false,
			"date": "2012-12-23 19:26:27.084660",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/23 19:26:27, minux wrote:\n> Hi atom,\n>    after applying the latest patch set (20), and update to rev 7ea16cd2859c,\n> encoding/xml fails with strange errors on darwin/amd64 (I suspect linux/amd64\n> will also fail). Also note that ./all.bash passes on darwin/386 and darwin/arm\n> on that revision.\n>    the patch works quite well before that rev.\n>    Do you have any ideas why?\n\nHi. I am unable to reproduce the issue on linux/amd64, rev 87f67aadaed6.\n\nIf it also fails with rev 87f67aadaed6 on your machine: Does the failure occur randomly, or every time you test encoding/xml?",
			"disapproval": false,
			"date": "2012-12-23 20:08:12.226360",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 24, 2012 at 4:08 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> If it also fails with rev 87f67aadaed6 on your machine: Does the failure\r\n> occur randomly, or every time you test encoding/xml?\r\n>\r\nrandomly but with a high probability of failure (all about the same\r\ntest TestUnmarshalFeed).\r\n\r\nfor example:\r\n--- FAIL: TestUnmarshalFeed (0.00 seconds)\r\nread_test.go:21: have xml.Feed{XMLName:xml.Name{Space:\"\r\nhttp://www.w3.org/2005/Atom\", Local:\"feed\"}, Title:\"Code Review - My\r\nissues\", Id:\"http://codereview.appspot.com/\",\r\nLink:[]xml.Link{xml.Link{Rel:\"alternate\", Href:\"\r\nhttp://codereview.appspot.com/\"}, xml.Link{Rel:\"self\", Href:\"\r\nhttp://codereview.appspot.com/rss/mine/rsc\"}},\r\nUpdated:time.Time{sec:63390216958, nsec:0,\r\nloc:(*time.Location)(0xc2000f4180)}, Author:xml.Person{Name:\"rietveld<>\",\r\nURI:\"\", Email:\"\", InnerXML:\"<name>rietveld&lt;&gt;</name>\"},\r\nEntry:[]xml.Entry{xml.Entry{Title:\"rietveld: an attempt at pubsubhubbub\\n\",\r\nId:\"urn:md5:134d9179c41f806be79b3a5f7877d19a\",\r\nLink:[]xml.Link{xml.Link{Rel:\"alternate\", Href:\"\r\nhttp://codereview.appspot.com/126085\"}}, Updated:time.Time{sec:63390216958,\r\nnsec:0, loc:(*time.Location)(0xc2000f41e0)},\r\nAuthor:xml.Person{Name:\"email-address-removed\", URI:\"\", Email:\"\",\r\nInnerXML:\"<name>email-address-removed</name>\"},\r\nSummary:xml.Text{Type:\"html\", Body:\"\\n  An attempt at adding pubsubhubbub\r\nsupport to Rietveld.\\nhttp://\r\ncode.google.com/p/pubsubhubbub\\nhttp://code.google.com/p/rietveld/issues/detail?id=155\\n\\nTheserver\r\nside of the protocol is trivial:\\n  1. add a &lt;link\r\nrel=&quot;hub&quot; href=&quot;hub-server&quot;&gt; tag to all\\n     feeds\r\nthat will be pubsubhubbubbed.\\n  2. every time one of those feeds changes,\r\ntell the hub\\n     with a simple POST request.\\n\\nI have tested this by\r\nadding debug prints to a local hub\\nserver and checking that the server got\r\nthe right publish\\nrequests.\\n\\nI can&#39;t quite get the server to work,\r\nbut I think the bug\\nis not in my code.  I think that the server expects to\r\nbe\\nable to grab the feed and see the feed&#39;s actual URL in\\nthe link\r\nrel=&quot;self&quot;, but the default value for that drops\\nthe :port from\r\nthe URL, and I cannot for the life of me\\nfigure out how to get the Atom\r\ngenerator deep inside\\ndjango not to do that, or even where it is doing\r\nthat,\\nor even what code is running to generate the Atom feed.\\n(I thought\r\nI knew but I added some assert False statements\\nand it kept\r\nrunning!)\\n\\nIgnoring that particular problem, I would appreciate\\nfeedback\r\non the right way to get the two values at\\nthe top of feeds.py marked\r\nNOTE(rsc).\\n\\n\\n\"}}, xml.Entry{Title:\"rietveld: correct tab handling\\n\",\r\nId:\"urn:md5:0a2a4f19bb815101f0ba2904aed7c35a\",\r\nLink:[]xml.Link{xml.Link{Rel:\"\\x00\\x18\\x0f\\x00\\xc2\\x00\\x00\\x00\\x01\",\r\nHref:\"\\x00f\\x0f\\x00\\xc2\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\\r\nx00w.appspot.com/124106\"}}, Updated:time.Time{sec:63390207737, nsec:0,\r\nloc:(*time.Location)(0xc2000f4240)},\r\nAuthor:xml.Person{Name:\"email-address-removed\", URI:\"\", Email:\"\",\r\nInnerXML:\"<name>email-address-removed</name>\"},\r\nSummary:xml.Text{Type:\"html\", Body:\"\\n  This fixes the buggy tab rendering\r\nthat can be seen\r\nat\\nhttp://codereview.appspot.com/116075/diff/1/2\\n\\nThefundamental\r\nproblem was that the tab code was\\nnot being told what column\r\nthe text began in, so it\\ndidn&#39;t know where to put the tab stops.\r\n Another problem\\nwas that some of the code assumed that string\r\nbyte\\noffsets were the same as column offsets, which is only\\ntrue if there\r\nare no tabs.\\n\\nIn the process of fixing this, I cleaned up the\r\narguments\\nto Fold and ExpandTabs and renamed them Break and\\n_ExpandTabs\r\nso that I could be sure that I found all the\\ncall sites.  I also wanted to\r\nverify that ExpandTabs was\\nnot being used from outside\r\nintra_region_diff.py.\\n\\n\\n\"}}}}\r\n want xml.Feed{XMLName:xml.Name{Space:\"http://www.w3.org/2005/Atom\",\r\nLocal:\"feed\"}, Title:\"Code Review - My issues\", Id:\"\r\nhttp://codereview.appspot.com/\", Link:[]xml.Link{xml.Link{Rel:\"alternate\",\r\nHref:\"http://codereview.appspot.com/\"}, xml.Link{Rel:\"self\", Href:\"\r\nhttp://codereview.appspot.com/rss/mine/rsc\"}},\r\nUpdated:time.Time{sec:63390216958, nsec:0,\r\nloc:(*time.Location)(0xc2000881e0)}, Author:xml.Person{Name:\"rietveld<>\",\r\nURI:\"\", Email:\"\", InnerXML:\"<name>rietveld&lt;&gt;</name>\"},\r\nEntry:[]xml.Entry{xml.Entry{Title:\"rietveld: an attempt at pubsubhubbub\\n\",\r\nId:\"urn:md5:134d9179c41f806be79b3a5f7877d19a\",\r\nLink:[]xml.Link{xml.Link{Rel:\"alternate\", Href:\"\r\nhttp://codereview.appspot.com/126085\"}}, Updated:time.Time{sec:63390216958,\r\nnsec:0, loc:(*time.Location)(0xc200088240)},\r\nAuthor:xml.Person{Name:\"email-address-removed\", URI:\"\", Email:\"\",\r\nInnerXML:\"<name>email-address-removed</name>\"},\r\nSummary:xml.Text{Type:\"html\", Body:\"\\n  An attempt at adding pubsubhubbub\r\nsupport to Rietveld.\\nhttp://\r\ncode.google.com/p/pubsubhubbub\\nhttp://code.google.com/p/rietveld/issues/detail?id=155\\n\\nTheserver\r\nside of the protocol is trivial:\\n  1. add a &lt;link\r\nrel=&quot;hub&quot; href=&quot;hub-server&quot;&gt; tag to all\\n     feeds\r\nthat will be pubsubhubbubbed.\\n  2. every time one of those feeds changes,\r\ntell the hub\\n     with a simple POST request.\\n\\nI have tested this by\r\nadding debug prints to a local hub\\nserver and checking that the server got\r\nthe right publish\\nrequests.\\n\\nI can&#39;t quite get the server to work,\r\nbut I think the bug\\nis not in my code.  I think that the server expects to\r\nbe\\nable to grab the feed and see the feed&#39;s actual URL in\\nthe link\r\nrel=&quot;self&quot;, but the default value for that drops\\nthe :port from\r\nthe URL, and I cannot for the life of me\\nfigure out how to get the Atom\r\ngenerator deep inside\\ndjango not to do that, or even where it is doing\r\nthat,\\nor even what code is running to generate the Atom feed.\\n(I thought\r\nI knew but I added some assert False statements\\nand it kept\r\nrunning!)\\n\\nIgnoring that particular problem, I would appreciate\\nfeedback\r\non the right way to get the two values at\\nthe top of feeds.py marked\r\nNOTE(rsc).\\n\\n\\n\"}}, xml.Entry{Title:\"rietveld: correct tab handling\\n\",\r\nId:\"urn:md5:0a2a4f19bb815101f0ba2904aed7c35a\",\r\nLink:[]xml.Link{xml.Link{Rel:\"alternate\", Href:\"\r\nhttp://codereview.appspot.com/124106\"}}, Updated:time.Time{sec:63390207737,\r\nnsec:0, loc:(*time.Location)(0xc2000882a0)},\r\nAuthor:xml.Person{Name:\"email-address-removed\", URI:\"\", Email:\"\",\r\nInnerXML:\"<name>email-address-removed</name>\"},\r\nSummary:xml.Text{Type:\"html\", Body:\"\\n  This fixes the buggy tab rendering\r\nthat can be seen\r\nat\\nhttp://codereview.appspot.com/116075/diff/1/2\\n\\nThefundamental\r\nproblem was that the tab code was\\nnot being told what column\r\nthe text began in, so it\\ndidn&#39;t know where to put the tab stops.\r\n Another problem\\nwas that some of the code assumed that string\r\nbyte\\noffsets were the same as column offsets, which is only\\ntrue if there\r\nare no tabs.\\n\\nIn the process of fixing this, I cleaned up the\r\narguments\\nto Fold and ExpandTabs and renamed them Break and\\n_ExpandTabs\r\nso that I could be sure that I found all the\\ncall sites.  I also wanted to\r\nverify that ExpandTabs was\\nnot being used from outside\r\nintra_region_diff.py.\\n\\n\\n\"}}}}\r\nFAIL\r\nFAIL encoding/xml 0.051s\r\n\r\nmaybe you can upload a newer version of your patch here and I can verify if\r\nI've made any errors in merging.\r\n",
			"disapproval": false,
			"date": "2012-12-25 07:17:16.530790",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/25 07:17:16, minux wrote:\n> On Mon, Dec 24, 2012 at 4:08 AM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> \n> > If it also fails with rev 87f67aadaed6 on your machine: Does the failure\n> > occur randomly, or every time you test encoding/xml?\n> >\n> randomly but with a high probability of failure (all about the same\n> test TestUnmarshalFeed).\n> \n> for example:\n> --- FAIL: TestUnmarshalFeed (0.00 seconds)\n> read_test.go:21: have xml.Feed{XMLName:xml.Name{Space:\"\n> [cut]\n> intra_region_diff.py.\\n\\n\\n\"}}}}\n> FAIL\n> FAIL encoding/xml 0.051s\n\nYou are right, the test does fail. I am getting the same results when running from command line like this:\n\n    while true; do ./xml.test; done\n\n> maybe you can upload a newer version of your patch here and I can verify if\n> I've made any errors in merging.",
			"disapproval": false,
			"date": "2012-12-25 08:14:24.423200",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/23 19:26:27, minux wrote:\n> Hi atom,\n>    after applying the latest patch set (20), and update to rev 7ea16cd2859c,\n> encoding/xml fails with strange errors on darwin/amd64 (I suspect linux/amd64\n> will also fail). Also note that ./all.bash passes on darwin/386 and darwin/arm\n> on that revision.\n>    the patch works quite well before that rev.\n>    Do you have any ideas why?\n\nThe cause of the problem is in package \"reflect\":\n\nhttp://code.google.com/p/go/source/browse/src/pkg/reflect/value.go?r=2c8a88c1efce4e4d78d75b5229d27e4c04031ff7#1494\nhttp://code.google.com/p/go/source/browse/src/pkg/reflect/value.go?r=2c8a88c1efce4e4d78d75b5229d27e4c04031ff7#1902\n\nThe garbage collector found the *[]byte and interpreted its contents as bytes instead of []xml.Link.\n\nFix: https://codereview.appspot.com/7000059/",
			"disapproval": false,
			"date": "2012-12-26 12:19:55.985840",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6114046: runtime, reflect, ld, gc: garbage collection precision ...",
	"created": "2012-04-24 09:04:40.582770",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		6028,
		17001,
		20002,
		25001,
		30001,
		33001,
		42001,
		49002,
		64001,
		71001,
		66030,
		73002,
		96001,
		103001,
		113001,
		126001,
		132001,
		142001,
		144001,
		149001,
		154001,
		163001,
		166001,
		169001,
		173001,
		178001,
		181001,
		184001,
		190002,
		201001,
		206001,
		210001,
		213001
	],
	"modified": "2012-12-26 12:19:55.985840",
	"closed": false,
	"issue": 6114046
}