{
	"description": "net/http: don't write out invalid cookie lines\n\nFixes issue 3033",
	"cc": [
		"golang-dev@googlegroups.com",
		"fvbommel@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-31 23:05:35.913060",
			"approval": false
		},
		{
			"sender": "fvbommel@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fvbommel@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go\nFile src/pkg/net/http/cookie.go (right):\n\nhttps://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go#newcode270\nsrc/pkg/net/http/cookie.go:270: return b > 0x20 && b != 0x22 && b != 0x2c && b != 0x3b && b != 0x5c && b != 0x7f\nYou forgot to exclude non-ASCII characters (by adding \"&& b < 0x80\" or folding it into the 0x7f case by using < instead of != there).\n\nhttps://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go#newcode270\nsrc/pkg/net/http/cookie.go:270: return b > 0x20 && b != 0x22 && b != 0x2c && b != 0x3b && b != 0x5c && b != 0x7f\nAlso, perhaps you should use rune constants here to make it more clear what it does?\n0x22, 0x2c, 0x3b and 0x5c are a bit less clear than '\"', ',', ';' and '\\\\'. Not sure about 0x20 <--> ' '.\nThis could be argued the other way given the RFC quote in the comment on sanitizeCookieValue, though maybe in that case the comment in question should be on *this* function instead of (or in addition to) there?\n\nhttps://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go#newcode273\nsrc/pkg/net/http/cookie.go:273: func validCookiePathByte(b byte) bool {\nMost of what I wrote about the previous function doesn't apply here, but part of the comment on sanitizeCookiePath could be moved or copied here.\n\nhttps://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go#newcode273\nsrc/pkg/net/http/cookie.go:273: func validCookiePathByte(b byte) bool {\nAlternatively, since this function and the one above it are so short, they could be inlined as function literals into the SanitizeCookie* functions that use them.",
			"disapproval": false,
			"date": "2013-08-01 07:20:39.839560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fvbommel@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go\nFile src/pkg/net/http/cookie.go (right):\n\nhttps://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go#newcode270\nsrc/pkg/net/http/cookie.go:270: return b > 0x20 && b != 0x22 && b != 0x2c && b != 0x3b && b != 0x5c && b != 0x7f\nOn 2013/08/01 07:20:39, fvb wrote:\n> You forgot to exclude non-ASCII characters (by adding \"&& b < 0x80\" or folding\n> it into the 0x7f case by using < instead of != there).\n\nWhoops, fixed. Thanks.\n\nhttps://codereview.appspot.com/12204043/diff/6001/src/pkg/net/http/cookie.go#newcode273\nsrc/pkg/net/http/cookie.go:273: func validCookiePathByte(b byte) bool {\nOn 2013/08/01 07:20:39, fvb wrote:\n> Most of what I wrote about the previous function doesn't apply here, but part of\n> the comment on sanitizeCookiePath could be moved or copied here.\n\nRearranged to put them next to their callers and docs.",
			"disapproval": false,
			"date": "2013-08-01 17:37:22.152340",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fvbommel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, fvbommel@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-01 17:38:35.137530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fvbommel@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go\nFile src/pkg/net/http/cookie.go (right):\n\nhttps://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go#newcode242\nsrc/pkg/net/http/cookie.go:242: return b > 0x20 && b != 0x22 && b != 0x2c && b != 0x3b && b != 0x5c && b < 0x7f\nWe usually make ranges clear by writing lo < x && x < hi (or <= as appropriate). I don't much care whether the != are all in the middle or at the end, but this line is different from the one in validCookiePathByte. I suggest doing the range first, but really I care about the consistency.\n\nreturn 0x20 < b && b < 0x7f && b != ...\n\nmakes clear that there's a range check and then some exceptions.\n\nhttps://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go#newcode252\nsrc/pkg/net/http/cookie.go:252: return b >= 0x20 && b < 0x7f && b != ';'\n0x20 <= b\n\nare spaces really okay in the path?\n\nhttps://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go#newcode268\nsrc/pkg/net/http/cookie.go:268: buf := bytes.NewBuffer(make([]byte, 0, len(v)))\nbytes.Buffer seems like overkill when you could use a []byte and append.",
			"disapproval": false,
			"date": "2013-08-01 18:08:57.302880",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fvbommel@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go\nFile src/pkg/net/http/cookie.go (right):\n\nhttps://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go#newcode242\nsrc/pkg/net/http/cookie.go:242: return b > 0x20 && b != 0x22 && b != 0x2c && b != 0x3b && b != 0x5c && b < 0x7f\nOn 2013/08/01 18:08:57, rsc wrote:\n> We usually make ranges clear by writing lo < x && x < hi (or <= as appropriate).\n> I don't much care whether the != are all in the middle or at the end, but this\n> line is different from the one in validCookiePathByte. I suggest doing the range\n> first, but really I care about the consistency.\n> \n> return 0x20 < b && b < 0x7f && b != ...\n> \n> makes clear that there's a range check and then some exceptions.\n\nWill do.\n\nhttps://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go#newcode252\nsrc/pkg/net/http/cookie.go:252: return b >= 0x20 && b < 0x7f && b != ';'\nOn 2013/08/01 18:08:57, rsc wrote:\n> 0x20 <= b\n> \n> are spaces really okay in the path?\n\nThat surprised me too. The spec sure makes it seems like it.\n\nhttps://codereview.appspot.com/12204043/diff/13001/src/pkg/net/http/cookie.go#newcode268\nsrc/pkg/net/http/cookie.go:268: buf := bytes.NewBuffer(make([]byte, 0, len(v)))\nOn 2013/08/01 18:08:57, rsc wrote:\n> bytes.Buffer seems like overkill when you could use a []byte and append.\n\nYeah it does. Will change.",
			"disapproval": false,
			"date": "2013-08-01 18:15:48.354980",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"fvbommel@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=65920aec044a ***\n\nnet/http: don't write out invalid cookie lines\n\nFixes issue 3033\n\nR=golang-dev, fvbommel, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/12204043",
			"disapproval": false,
			"date": "2013-08-01 19:16:41.111140",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 12204043: net/http: don't write out invalid cookie lines",
	"created": "2013-07-31 23:05:19.609020",
	"patchsets": [
		1,
		3001,
		6001,
		13001,
		20001
	],
	"modified": "2013-08-01 19:16:43.064500",
	"closed": true,
	"issue": 12204043
}