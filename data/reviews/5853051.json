{
	"description": "api: update go1.txt after adding functions to html/template\nFixes build, teaches lesson.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com",
		"r@google.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-20 03:51:50.903547",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 20, 2012, at 3:46 PM, Brad Fitzpatrick wrote:\n\n> LGTM yay it works!\n> \n> (I did test it failing. But this is more fun.)\n> \n\n\nVindication and verification.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-20 04:55:57.116059",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "diff -r f1259609b814 api/go1.txt\n--- a/api/go1.txt\tTue Mar 20 14:38:07 2012 +1100\n+++ b/api/go1.txt\tTue Mar 20 14:52:19 2012 +1100\n@@ -3348,10 +3348,17 @@\n pkg html/template, const ErrRangeLoopReentry ErrorCode\n pkg html/template, const ErrSlashAmbig ErrorCode\n pkg html/template, const OK ErrorCode\n+pkg html/template, func HTMLEscape(io.Writer, []byte)\n+pkg html/template, func HTMLEscapeString(string) string\n+pkg html/template, func HTMLEscaper(...interface{}) string\n+pkg html/template, func JSEscape(io.Writer, []byte)\n+pkg html/template, func JSEscapeString(string) string\n+pkg html/template, func JSEscaper(...interface{}) string\n pkg html/template, func Must(*Template, error) *Template\n pkg html/template, func New(string) *Template\n pkg html/template, func ParseFiles(...string) (*Template, error)\n pkg html/template, func ParseGlob(string) (*Template, error)\n+pkg html/template, func URLQueryEscaper(...interface{}) string\n pkg html/template, method (*Error) Error() string\n pkg html/template, method (*Template) AddParseTree(string, *parse.Tree) (*Template, error)\n pkg html/template, method (*Template) Clone() (*Template, error)\n@@ -3365,6 +3372,7 @@\n pkg html/template, method (*Template) Parse(string) (*Template, error)\n pkg html/template, method (*Template) ParseFiles(...string) (*Template, error)\n pkg html/template, method (*Template) ParseGlob(string) (*Template, error)\n+pkg html/template, method (*Template) Templates() []*Template\n pkg html/template, type CSS string\n pkg html/template, type Error struct\n pkg html/template, type Error struct, Description string\n\n",
			"disapproval": false,
			"date": "2012-03-20 03:52:42.002261",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0449267813c1 ***\n\napi: update go1.txt after adding functions to html/template\nFixes build, teaches lesson.\n\nR=golang-dev, r\nTBR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5853051",
			"disapproval": false,
			"date": "2012-03-20 03:53:24.017628",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM yay it works!\n\n(I did test it failing. But this is more fun.)\n On Mar 19, 2012 8:52 PM, \"Rob 'Commander' Pike\" <r@google.com> wrote:\n\n> diff -r f1259609b814 api/go1.txt\n> --- a/api/go1.txt       Tue Mar 20 14:38:07 2012 +1100\n> +++ b/api/go1.txt       Tue Mar 20 14:52:19 2012 +1100\n> @@ -3348,10 +3348,17 @@\n>  pkg html/template, const ErrRangeLoopReentry ErrorCode\n>  pkg html/template, const ErrSlashAmbig ErrorCode\n>  pkg html/template, const OK ErrorCode\n> +pkg html/template, func HTMLEscape(io.Writer, []byte)\n> +pkg html/template, func HTMLEscapeString(string) string\n> +pkg html/template, func HTMLEscaper(...interface{}) string\n> +pkg html/template, func JSEscape(io.Writer, []byte)\n> +pkg html/template, func JSEscapeString(string) string\n> +pkg html/template, func JSEscaper(...interface{}) string\n>  pkg html/template, func Must(*Template, error) *Template\n>  pkg html/template, func New(string) *Template\n>  pkg html/template, func ParseFiles(...string) (*Template, error)\n>  pkg html/template, func ParseGlob(string) (*Template, error)\n> +pkg html/template, func URLQueryEscaper(...interface{}) string\n>  pkg html/template, method (*Error) Error() string\n>  pkg html/template, method (*Template) AddParseTree(string, *parse.Tree)\n> (*Template, error)\n>  pkg html/template, method (*Template) Clone() (*Template, error)\n> @@ -3365,6 +3372,7 @@\n>  pkg html/template, method (*Template) Parse(string) (*Template, error)\n>  pkg html/template, method (*Template) ParseFiles(...string) (*Template,\n> error)\n>  pkg html/template, method (*Template) ParseGlob(string) (*Template, error)\n> +pkg html/template, method (*Template) Templates() []*Template\n>  pkg html/template, type CSS string\n>  pkg html/template, type Error struct\n>  pkg html/template, type Error struct, Description string\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-20 04:46:29.036378",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After Go 1 is cut, we will need to change the test\nso that diffs are okay as long as they do not include\nlines beginning with \"-\".\n",
			"disapproval": false,
			"date": "2012-03-26 14:59:51.915756",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5853051: api: update go1.txt after adding functions to html/template",
	"created": "2012-03-20 03:51:43.400886",
	"patchsets": [
		1,
		2002
	],
	"modified": "2012-03-26 14:59:52.039225",
	"closed": true,
	"issue": 5853051
}