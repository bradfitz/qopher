{
	"description": "allow copy of struct containing unexported fields\n\nAn experiment: allow structs to be copied even if they\ncontain unexported fields.  This gives packages the\nability to return opaque values in their APIs, like reflect\ndoes for reflect.Value but without the kludgy hacks reflect\nresorts to.\n\nIn general, we trust programmers not to do silly things\nlike *x = *y on a package's struct pointers, just as we trust\nprogrammers not to do unicode.Letter = unicode.Digit,\nbut packages that want a harder guarantee can introduce\nan extra level of indirection, like in the changes to os.File\nin this CL or by using an interface type.\n\nAll in one CL so that it can be rolled back more easily if\nwe decide this is a bad idea.\n\nOriginally discussed in March 2011.\nhttps://groups.google.com/group/golang-dev/t/3f5d30938c7c45ef",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"dvyukov@google.com",
		"r@golang.org",
		"bradfitz@golang.org",
		"jan.mercl@nic.cz",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-14 06:11:45.816079",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 14, 2011 at 01:26,  <dvyukov@google.com> wrote:\n> Additional level of indirection enforces sharing rather than prevents\n> copying. I am worry about structs like Mutexes. Copying is almost always\n> the wrong thing for them. Moreover what if it gets copied in a locked\n> state? Sharing and dynamic allocation is both expensive and does not\n> solve the problem. Is it just becomes a users problem?\n\nGenerally, if an API is returning pointers (like *os.File)\nyou should continue to use those pointers instead of making\ncopies.\n\nIt is true that we are giving up a capability here (prevent copying)\nbut we are gaining a capability too (allow APIs with opaque values).\nWe have a growing list of cases where the latter would be useful,\nand not too many examples where the former is critical.\n\nIt is probably worth noting in the sync docs that mutexes\nshould not be copied.  I will add that to this CL.\n\n> In C++ I can prevent copying of mutexes, moreover I still can return\n> them by value thanks to move constructors.\n\nIt is true: C++ can prevent many things.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-14 06:33:52.610575",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\ni think\n\nhttp://codereview.appspot.com/5372095/diff/2018/doc/go_spec.html\nFile doc/go_spec.html (left):\n\nhttp://codereview.appspot.com/5372095/diff/2018/doc/go_spec.html#oldcode1377\ndoc/go_spec.html:1377: </p>\nthis is good, but is there another place where it needs to be explicitly allowed? that is, is there another sentence that implies this, with less precision?",
			"disapproval": false,
			"date": "2011-11-14 16:20:09.668171",
			"approval": true
		},
		{
			"sender": "jan.mercl@nic.cz",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Monday, November 14, 2011 7:11:45 AM UTC+1, rsc wrote:\n>\n> In general, we trust programmers not to do silly things\n> like *x = *y on a package's struct pointers, just as we trust\n> programmers not to do unicode.Letter = unicode.Digit,\n>\nConsidering how many silly questions/attempts to do incredibly wrong things \nare routinely discussed at golang-nuts - I'm a bit skeptical about such \noptimism. It will give more power to responsible programmers while \nincreasing the potential to bite the others badly. I'm not able to estimate \nthe ratio of those two populations.\n\n>",
			"disapproval": false,
			"date": "2011-11-14 17:35:07.002336",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sun, Nov 13, 2011 at 10:33 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Mon, Nov 14, 2011 at 01:26,  <dvyukov@google.com> wrote:\n> > Additional level of indirection enforces sharing rather than prevents\n> > copying. I am worry about structs like Mutexes. Copying is almost always\n> > the wrong thing for them. Moreover what if it gets copied in a locked\n> > state? Sharing and dynamic allocation is both expensive and does not\n> > solve the problem. Is it just becomes a users problem?\n>\n> Generally, if an API is returning pointers (like *os.File)\n> you should continue to use those pointers instead of making\n> copies.\n>\n> It is true that we are giving up a capability here (prevent copying)\n> but we are gaining a capability too (allow APIs with opaque values).\n> We have a growing list of cases where the latter would be useful,\n> and not too many examples where the former is critical.\n>\n> It is probably worth noting in the sync docs that mutexes\n> should not be copied.  I will add that to this CL.\n>\n\ncould promote struct tag's convention to be a language thing...\n\ntype Mutex struct {\n        state int32 `go:\"nocopy\"`\n        sema  uint32\n}\n\n(mostly joking. nocopy doesn't really apply to a field, but rather the\nwhole struct, anyway.)\n",
			"disapproval": false,
			"date": "2011-11-14 16:30:18.211916",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 14, 2011 at 12:33, Jan Mercl <jan.mercl@nic.cz> wrote:\n> Considering how many silly questions/attempts to do incredibly wrong things\n> are routinely discussed at golang-nuts - I'm a bit skeptical about such\n> optimism. It will give more power to responsible programmers while\n> increasing the potential to bite the others badly. I'm not able to estimate\n> the ratio of those two populations.\n\nThis CL is not about giving power to responsible programmers.\nIt is about letting packages create a new, useful kind of API:\nsomething returning an opaque struct value.\n\nA side effect is that programmers can write a couple\nmore bad programs.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-14 17:45:26.400459",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6f8b9654e929 ***\n\nallow copy of struct containing unexported fields\n\nAn experiment: allow structs to be copied even if they\ncontain unexported fields.  This gives packages the\nability to return opaque values in their APIs, like reflect\ndoes for reflect.Value but without the kludgy hacks reflect\nresorts to.\n\nIn general, we trust programmers not to do silly things\nlike *x = *y on a package's struct pointers, just as we trust\nprogrammers not to do unicode.Letter = unicode.Digit,\nbut packages that want a harder guarantee can introduce\nan extra level of indirection, like in the changes to os.File\nin this CL or by using an interface type.\n\nAll in one CL so that it can be rolled back more easily if\nwe decide this is a bad idea.\n\nOriginally discussed in March 2011.\nhttps://groups.google.com/group/golang-dev/t/3f5d30938c7c45ef\n\nR=golang-dev, adg, dvyukov, r, bradfitz, jan.mercl, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5372095",
			"disapproval": false,
			"date": "2011-11-15 17:21:03.823167",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Additional level of indirection enforces sharing rather than prevents copying. I am worry about structs like Mutexes. Copying is almost always the wrong thing for them. Moreover what if it gets copied in a locked state? Sharing and dynamic allocation is both expensive and does not solve the problem. Is it just becomes a users problem?\nIn C++ I can prevent copying of mutexes, moreover I still can return them by value thanks to move constructors.",
			"disapproval": false,
			"date": "2011-11-14 06:26:15.077989",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 14, 2011 at 11:20,  <r@golang.org> wrote:\n> this is good, but is there another place where it needs to be explicitly\n> allowed? that is, is there another sentence that implies this, with less\n> precision?\n\nI don't believe there is.  Atom symbol pointed out back\nin March that it's not implied by any of the rest of the spec,\nwhich is what got me thinking about it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-14 16:23:17.845083",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI'm pretty happy with how much this removes from the spec, compiler, and tests. Looking forward to seeing what effect, if any, this has on client code.\n\nhttp://codereview.appspot.com/5372095/diff/2003/src/pkg/os/file_plan9.go\nFile src/pkg/os/file_plan9.go (right):\n\nhttp://codereview.appspot.com/5372095/diff/2003/src/pkg/os/file_plan9.go#newcode13\nsrc/pkg/os/file_plan9.go:13: type File {\nMissing 'struct'",
			"disapproval": false,
			"date": "2011-11-14 06:22:14.218441",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/14 06:33:52, rsc wrote:\n> On Mon, Nov 14, 2011 at 01:26,  <mailto:dvyukov@google.com> wrote:\n> > Additional level of indirection enforces sharing rather than prevents\n> > copying. I am worry about structs like Mutexes. Copying is almost always\n> > the wrong thing for them. Moreover what if it gets copied in a locked\n> > state? Sharing and dynamic allocation is both expensive and does not\n> > solve the problem. Is it just becomes a users problem?\n> \n> Generally, if an API is returning pointers (like *os.File)\n> you should continue to use those pointers instead of making\n> copies.\n> \n> It is true that we are giving up a capability here (prevent copying)\n> but we are gaining a capability too (allow APIs with opaque values).\n> We have a growing list of cases where the latter would be useful,\n> and not too many examples where the former is critical.\n> \n> It is probably worth noting in the sync docs that mutexes\n> should not be copied.  I will add that to this CL.\n\nOK, I see.\nYes, I think we should document what sync objects are copyable and what are not (WaitGroup, Once, etc). If an object with a non-trivial multi-threaded semantics becomes copyable we should document how copying interacts with muti-threading as well.",
			"disapproval": false,
			"date": "2011-11-14 06:39:04.420566",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-14 17:53:46.795525",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5372095: allow copy of struct containing unexported fields",
	"created": "2011-11-14 06:00:40.952108",
	"patchsets": [
		1,
		2001,
		2002,
		2003,
		6001,
		2018,
		7003
	],
	"modified": "2011-11-15 17:21:05.501312",
	"closed": true,
	"issue": 5372095
}