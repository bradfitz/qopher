{
	"description": "doc: Go for Java programmers\n\nThis is a doc intended to introduce Go to Java programmers\nwho may be unfamiliar with C/C++. It mirrors \"Go for C++\nprogrammers\". There is some overlap but the focus is\ndifferent: structs, pointers, and the address operator\nare discussed in detail, while GC and immutable strings\naren't covered. Also, there are examples of Go constructs\ncorresponding to classes and ArrayList in Java.\n\nThe choice of contents is based on user-testing with a\ncouple of undergrad and grad students at KTH in Stockholm.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-24 23:58:04.370289",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 25 January 2012 10:58,  <trolleriprofessorn@gmail.com> wrote:\n> Please review this at http://codereview.appspot.com/5573059/\n\nI can look at this, but it might take a few days to get back to you.\nTomorrow a public holiday down under.\n",
			"disapproval": false,
			"date": "2012-01-25 07:47:42.102358",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 25, 2012, at 1:33 PM, trolleriprofessorn@gmail.com wrote:\n\n> On 2012/01/25 19:15:35, r wrote:\n> \n>> but i'm not sure it's worth putting all these links here. more\n> important is to\n>> link *to* here from the other intro pages. look at where the C++ one\n> is linked\n>> from, and put the java link there.\n> \n> Currently, the only link to go_for_cpp_programmers under /doc seems to\n> be\n> the one in docs.html.\n\nThat's where it should go, and please include that edit in this CL.\n\n>> go does not have tuples, so it's confusing to use the term.\n>> just call this multiple assignment\n> \n> I agree, multiple assignment is better. However, the term \"tuple\n> assignment\"\n> is used in go_spec.html.\n> \n> \n> http://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.h...\n>> distracting. rewrite the example\n> \n> Did you think of the variable names or something else?\n\nThe panic.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-01-25 21:52:01.949358",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 18:40:05, rsc wrote:\n> On Thu, Jan 26, 2012 at 13:05,  <mailto:trolleriprofessorn@gmail.com> wrote:\n> > if you declare a direct value,\n> > chances are you wont escape its address.\n> \n> this is not true in go programs.\n> lots of code does things like\n> \n> var buf bytes.Buffer\n> \n> and then any use of buf will be using &buf.\n\nAh, I see! Then I'll skip Ian's suggestion for now.",
			"disapproval": false,
			"date": "2012-01-26 19:13:11.899603",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fine. Using all the good feedback, I'll finish a version and put it up in a week or two. It will, of course, be free for anyone to use, modify, and distribute. I'll announce the location in Go Nuts as soon as I'm ready.\n\nThanks for all the valuable input!",
			"disapproval": false,
			"date": "2012-01-27 10:17:27.435469",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for this. A few small comments.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html\nFile doc/go_for_java_programmers.html (right):\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode9\ndoc/go_for_java_programmers.html:9: \nPlease close all the <p> tags.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode50\ndoc/go_for_java_programmers.html:50: <li>Hash tables are provided by the language. They are called maps.\n<code>map</code>s.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode184\ndoc/go_for_java_programmers.html:184: Go permits multiple assignments, which are done in parallel.\nI don't know if parallel is the right word here, it might over promise to some readers. http://tip.golang.org/doc/go1.html#multiple_assignment\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode656\ndoc/go_for_java_programmers.html:656: type myInteger int\ntype myint int\n\nI know this is a FAQ for Java programmers, but no camel case please :)\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode685\ndoc/go_for_java_programmers.html:685: set(i int)\nIf this is an example of getters and setters maybe consider making them exported.  Looking at the C++ FAQ examples tend to favour capitalisation.",
			"disapproval": false,
			"date": "2012-01-25 14:30:03.364912",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/25 14:30:03, dfc wrote:\n\n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode50\n> doc/go_for_java_programmers.html:50: <li>Hash tables are provided by the\n> language. They are called maps.\n> <code>map</code>s.\n \n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode656\n> doc/go_for_java_programmers.html:656: type myInteger int\n> type myint int\n> \n> I know this is a FAQ for Java programmers, but no camel case please :)\n\nBut camel case is a Go convention as well, isn't it?\n \n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode685\n> doc/go_for_java_programmers.html:685: set(i int)\n> If this is an example of getters and setters maybe consider making them\n> exported.  Looking at the C++ FAQ examples tend to favour capitalisation.\n\nI switched to exported identifiers for all the types in this section.",
			"disapproval": false,
			"date": "2012-01-25 18:49:29.863816",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 26, 2012 at 8:14 PM, <trolleriprofessorn@gmail.com> wrote:\n\n> On 2012/01/26 06:57:40, dvyukov wrote:\n>\n> http://codereview.appspot.com/**5573059/diff/5003/doc/go_for_**\n> java_programmers.html<http://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html>\n>\n>> File doc/go_for_java_programmers.**html (right):\n>>\n>\n>\n> http://codereview.appspot.com/**5573059/diff/5003/doc/go_for_**\n> java_programmers.html#**newcode568<http://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html#newcode568>\n>\n>> doc/go_for_java_programmers.**html:568: has no equivalent in Java.\n>> On 2012/01/25 23:58:46, iant wrote:\n>> > Perhaps a sentence here mentioning that \"var v T\" can be more\n>>\n> efficient than\n>\n>> \"p\n>> > := new(T)\" as the var version may not create any garbage.\n>>\n>\n>  Aren't they equivalent now? \"var v T\" can definitely go to heap, and I\n>>\n> remember\n>\n>> something about \"new(T)\" can be a stack allocation now (after escape\n>>\n> analysis\n>\n>> patch).\n>> AFAIK, some Java impls also do escape analysis, and so... how is it\n>>\n> spelled in\n>\n>> Java... \"T obj = new T\" can also be a stack allocation.\n>> So I would consider all three as the same thing (expression type\n>>\n> aside). It's\n>\n>> not like C/C++'s \"int i\" vs \"int* i = new int\".\n>>\n>\n> A discussion of when data can be allocated on the stack or heap (and\n> when it\n> will or wont in different Java and Go implementations) might lead too\n> far\n> in an intro, but Ian's rule of thumb still gives useful guidance so I'd\n> like\n> to put it in. How about:\n>\n> The declaration var v T, which declares a variable that holds a value of\n> type T,\n> has no equivalent in Java. This version can be more efficient than p :=\n> new(T);\n> in some cases it creates less garbage.\n>\n>\nI think we need to ask lvd. Luuk, are \"var v T\" and \"v := new(T)\" currently\ndifferent in any way, shape or form (wrt memory allocation)? I thought for\nsome reason that they are effectively the same now.\n",
			"disapproval": false,
			"date": "2012-01-26 16:25:56.175300",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nigeltao@golang.org, bsiegert@gmail.com, dave@cheney.net, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-25 21:33:28.147346",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/25 19:15:35, r wrote:\n \n> but i'm not sure it's worth putting all these links here. more important is to\n> link *to* here from the other intro pages. look at where the C++ one is linked\n> from, and put the java link there.\n\nCurrently, the only link to go_for_cpp_programmers under /doc seems to be\nthe one in docs.html.\n\n> go does not have tuples, so it's confusing to use the term.\n> just call this multiple assignment\n\nI agree, multiple assignment is better. However, the term \"tuple assignment\"\nis used in go_spec.html.\n\n> http://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.h...\n> distracting. rewrite the example\n\nDid you think of the variable names or something else?\n\n(Off to sleep.)",
			"disapproval": false,
			"date": "2012-01-25 21:33:29.042603",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\n\nThanks for all your work on this, but I'd prefer not to add this to\nthe Go repository.\n\nI'm in the process of re-organizing golang.org for the Go 1 launch and\nI'm trying to pare down the amount of introductory material we\npresent. It's important that we provide a clear path for people to get\ninto Go, and presenting several introductory articles is not the way\nto achieve this. In the coming weeks several pages will be moved\noff-site, including the \"Go for C++ programmers\" article.\n\nCan you arrange to have it hosted elsewhere? I think the document\ndefinitely has value, and it would be a shame for the effort to go to\nwaste.\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-01-27 01:05:39.846185",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am happy to put this on GopherTimes\n\nSent from my iPhone\n\nOn Jan 26, 2012, at 8:05 PM, Andrew Gerrand <adg@golang.org> wrote:\n\n> Hi,\n> \n> Thanks for all your work on this, but I'd prefer not to add this to\n> the Go repository.\n> \n> I'm in the process of re-organizing golang.org for the Go 1 launch and\n> I'm trying to pare down the amount of introductory material we\n> present. It's important that we provide a clear path for people to get\n> into Go, and presenting several introductory articles is not the way\n> to achieve this. In the coming weeks several pages will be moved\n> off-site, including the \"Go for C++ programmers\" article.\n> \n> Can you arrange to have it hosted elsewhere? I think the document\n> definitely has value, and it would be a shame for the effort to go to\n> waste.\n> \n> Andrew\n",
			"disapproval": false,
			"date": "2012-01-27 02:26:35.146676",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nleaving for the others.",
			"disapproval": false,
			"date": "2012-01-25 18:49:58.548275",
			"approval": true
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are some comments from me. They mostly concern cases where the language does not match the spec.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html\nFile doc/go_for_java_programmers.html (right):\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode37\ndoc/go_for_java_programmers.html:37: <li>Go does not distinguish between primitive types and reference types.\nThis is not quite true. In Go, there are value types, pointer types and reference types. According to the spec, slices, maps and channels are reference types.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode45\ndoc/go_for_java_programmers.html:45: slices hold pointers into underlying arrays.\nslices are references to underlying arrays.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode56\ndoc/go_for_java_programmers.html:56: <li>Certain types (maps and channels) are passed by reference, not by value.\nand slices\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode68\ndoc/go_for_java_programmers.html:68: <li>Instead of exceptions, Go uses <a href=\"#Panic\">run-time panics</a>\nMaybe put the errors first, as they are hopefully the more common case.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode167\ndoc/go_for_java_programmers.html:167: In Go functions are first-class objects. Go's function type denotes the set of all functions\ns/Go /Go, /\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode217\ndoc/go_for_java_programmers.html:217: of a non-blank line as a semicolon unless the line is clearly\nimplicitly inserts a semicolon at the end of a non-blank line?\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode243\ndoc/go_for_java_programmers.html:243: than the initial <code>for</code> loop clause and cases where you want\nAnd, of course, the \"simple statement\" in if and switch.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode389\ndoc/go_for_java_programmers.html:389: defer close(fd)         // fd will be closed when this function returns.\nf, err := os.Open(\"filename\")\r\ndefer f.Close()\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode563\ndoc/go_for_java_programmers.html:563: s = &amp;a // Same as: s = a[0:len(a)]\nThis is more often (and more expressively, at least IMHO) written as:\r\n\r\ns = a[:]\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode571\ndoc/go_for_java_programmers.html:571: and pass the address of the array.\nand pass the array as a slice.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode602\ndoc/go_for_java_programmers.html:602: that map and channel values are passed by reference.\nthat maps and channels are reference types.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode610\ndoc/go_for_java_programmers.html:610: The <code>make</code> function may also be used to allocate a slice.\nThis should be under Slices above.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode634\ndoc/go_for_java_programmers.html:634: func (p *myType) get() int {\nI would prefer something different from get(). It is usual in Go to avoid the word \"get\" in method names.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode673\ndoc/go_for_java_programmers.html:673: Where Java provides classes, subclasses and interfaces,\nThe first sentence seems unnecessary.\n\nhttp://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode895\ndoc/go_for_java_programmers.html:895: To illustrate the simplicity and power of channels we show a complete\ns/channels/channels,/",
			"disapproval": false,
			"date": "2012-01-25 08:33:03.327532",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks for doing this.\ni think it's too thorough, but others may disagree\ni ran out of steam but this will get you started.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html\nFile doc/go_for_java_programmers.html (right):\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode6\ndoc/go_for_java_programmers.html:6: These are brief notes on the general-purpose systems programming language Go.\nd\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode7\ndoc/go_for_java_programmers.html:7: They are intended for experienced Java programmers and discuss the differences\nThese notes are intended to help experienced Java programmers come up to speed quickly with Go. They focus on the differences rather than the similarities.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode22\ndoc/go_for_java_programmers.html:22: For tips on writing clear idiomatic Go, see\ns/clear/clear,/\n\nbut i'm not sure it's worth putting all these links here. more important is to link *to* here from the other intro pages. look at where the C++ one is linked from, and put the java link there.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode40\ndoc/go_for_java_programmers.html:40: Interfaces are also used where Java uses generics.\nyou should mention, perhaps in a new paragraph here, the Go allows methods on any type without boxing.\nalso methods can have values or pointers for receiver.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode43\ndoc/go_for_java_programmers.html:43: For any type T, there is a corresponding pointer type *T,\nuse <code>*T</code> etc. for all code snippets, even this small.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode53\ndoc/go_for_java_programmers.html:53: array of bytes, but is immutable.\ns/an array/a slice/\n(the distinction matters for efficiency reasons)\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode70\ndoc/go_for_java_programmers.html:70: imports that package.\nthis paragraph isn't clear. moreover it mentions two things but only defines one.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode74\ndoc/go_for_java_programmers.html:74: for unrecoverable errors such as attempting to index an array out of bounds.\n\"unrecoverable\" is an unfortunate term.\nmaybe \"run-time\"\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode77\ndoc/go_for_java_programmers.html:77: different types require casts (called conversions in Go).\ndon't use the word cast. a conversion is not in general a type cast.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode80\ndoc/go_for_java_programmers.html:80: Functions in the same scope must have unique names.\ns/Functions/& and methods/\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode99\ndoc/go_for_java_programmers.html:99: <b>Go                         Approximate Java equivalent</b>\nuse an HTML table.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode192\ndoc/go_for_java_programmers.html:192: <h3>Tuple assignment</h3>\ngo does not have tuples, so it's confusing to use the term.\njust call this multiple assignment\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode273\ndoc/go_for_java_programmers.html:273: any other style, and familiarity will lead to comfort.\nmove this up higher.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode280\ndoc/go_for_java_programmers.html:280: Go does not require parentheses around the condition of an <code>if</code>\nit's not that it doesn't require them, it's that the syntax doesn't mention them.\nif you put () around a three-clause for, you'll get a syntax error.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode289\ndoc/go_for_java_programmers.html:289: if (a &lt; b) { f() }           // Valid (condition is a parenthesized expression)\nValid but unnecessary\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode313\ndoc/go_for_java_programmers.html:313: <code>do/while</code>\ns;/;-;\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode340\ndoc/go_for_java_programmers.html:340: For strings, which are UTF-8 encoded, <code>i</code> is an index to a byte\nstrings are not necessarily UTF-8-encoded. this is a common misperception you should not propagate.\nsource code is UTF-8-encoded.\n\nalso note that in english, adjectives use hyphens: red-blooded, UTF-8-encoded.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode407\ndoc/go_for_java_programmers.html:407: <code>n = i++</code>.\nthere are no prefix ++ and --\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode416\ndoc/go_for_java_programmers.html:416: Notice that the parameters of the deferred function are computed, and saved\nS/Notice that t/T/\n(you can't notice it because it's not visible)\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode440\ndoc/go_for_java_programmers.html:440: f(a + 1)  // untyped numeric constant 1 becomes typed as uint\nadd this too:\nf(a + 1e3) // 1e3 is also typed as uint.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode471\ndoc/go_for_java_programmers.html:471: Go does not support enums.  Instead, you can use the special name\nGo does not have enumerated types.\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode505\ndoc/go_for_java_programmers.html:505: p.s = \"Bob\"     // run-time panic: nil pointer dereference\ndistracting. rewrite the example\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode601\ndoc/go_for_java_programmers.html:601: That is, changes made using the new slice may be seen using <code>a</code>.\nchanges to the elements\n(the header is a different story)\n\nhttp://codereview.appspot.com/5573059/diff/7001/doc/go_for_java_programmers.html#newcode618\ndoc/go_for_java_programmers.html:618: you should declare the function parameter to have type <code>[]byte</code>,\ns/you should //",
			"disapproval": false,
			"date": "2012-01-25 19:15:35.772972",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 16:58:08, rsc wrote:\n> On Thu, Jan 26, 2012 at 11:25, Dmitry Vyukov <mailto:dvyukov@google.com> wrote:\n> > I think we need to ask lvd.&nbsp;Luuk, are \"var v T\" and \"v := new(T)\" currently\n> > different in any way, shape or form (wrt memory allocation)? I thought for\n> > some reason that they are effectively the same now.\n> \n> Well, one declares a variable of type T,\n> and the other declares a variable of type *T.\n> The allocation patterns are the same.\n> \n> Russ\n\nEven though the two are interchangeable, a declaration\nis also a statement of intent: if you declare a pointer,\nyou will probably use it (perhaps in a way that makes\noptimization more difficult), if you declare a direct value,\nchances are you wont escape its address. Wouldn't this\ngive some truth to such a rule of thumb?",
			"disapproval": false,
			"date": "2012-01-26 18:05:35.873782",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 22:35:37, r wrote:\n> a few more comments\n> \n> this is useful but i think it tries to be too thorough and expansive.\n\nYes, good directors cut. Before bringing out the knives let's just check\nif we agree on what to keep. How about:\n\nKeep: list of conceptual differences, small examples illustrating differences\n      and main concepts unfamiliar to Java programmers, explanation of how\n      to use error/panic as opposed to exceptions.\n      \nCut: performance and implementation details, reduce the formatting section,\n     skip the larger examples in the later sections.\n\nHowever, I believe the readability would benefit from one complete example showing\nhow all the main pieces fit together. Even if it adds a few lines to the document,\nit cuts the cognitive load for the reader. It's much easier to digest the new\ninformation if you know how the pieces are intended to be used. Perhaps a minimal\ngeneric stack implementation; it's an example familiar to most, it's short and\nit illustrates most of the major concepts except goroutines and channels. Also,\nit would make it possible to reduce the Methods and interfaces section.",
			"disapproval": false,
			"date": "2012-01-27 00:51:56.787642",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/25 08:33:03, bsiegert wrote:\n  \n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode243\n> doc/go_for_java_programmers.html:243: than the initial <code>for</code> loop\n> clause and cases where you want\n> And, of course, the \"simple statement\" in if and switch.\n\nI dropped the whole discussion instead. It really didn't add much. \n\n\n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode563\n> doc/go_for_java_programmers.html:563: s = &amp;a // Same as: s = a[0:len(a)]\n> This is more often (and more expressively, at least IMHO) written as:\n> \n> s = a[:]\n\nI kept the old version and added the shorter forms as a (better) alternative.\n\n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode610\n> doc/go_for_java_programmers.html:610: The <code>make</code> function may also be\n> used to allocate a slice.\n> This should be under Slices above.\n \nI added a pointer from the Slices section instead. It's nice to keep the discussion of make in one place.\n\n\n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode634\n> doc/go_for_java_programmers.html:634: func (p *myType) get() int {\n> I would prefer something different from get(). It is usual in Go to avoid the\n> word \"get\" in method names.\n\nI really couldn't come up with a better name. Do you have a suggestion? Get and set is simple, generic and easily understood and since the type is called MyType, no one is likely to mistake this for a realistic example.\n\n> http://codereview.appspot.com/5573059/diff/3002/doc/go_for_java_programmers.html#newcode673\n> doc/go_for_java_programmers.html:673: Where Java provides classes, subclasses\n> and interfaces,\n> The first sentence seems unnecessary.\n\nI removed both the first and second sentence. :)",
			"disapproval": false,
			"date": "2012-01-25 18:36:50.714617",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 06:57:40, dvyukov wrote:\n> http://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html\n> File doc/go_for_java_programmers.html (right):\n> \n> http://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html#newcode568\n> doc/go_for_java_programmers.html:568: has no equivalent in Java.\n> On 2012/01/25 23:58:46, iant wrote:\n> > Perhaps a sentence here mentioning that \"var v T\" can be more efficient than\n> \"p\n> > := new(T)\" as the var version may not create any garbage.\n> \n> Aren't they equivalent now? \"var v T\" can definitely go to heap, and I remember\n> something about \"new(T)\" can be a stack allocation now (after escape analysis\n> patch).\n> AFAIK, some Java impls also do escape analysis, and so... how is it spelled in\n> Java... \"T obj = new T\" can also be a stack allocation.\n> So I would consider all three as the same thing (expression type aside). It's\n> not like C/C++'s \"int i\" vs \"int* i = new int\".\n\nA discussion of when data can be allocated on the stack or heap (and when it\nwill or wont in different Java and Go implementations) might lead too far\nin an intro, but Ian's rule of thumb still gives useful guidance so I'd like\nto put it in. How about:\n\nThe declaration var v T, which declares a variable that holds a value of type T,\nhas no equivalent in Java. This version can be more efficient than p := new(T);\nin some cases it creates less garbage.",
			"disapproval": false,
			"date": "2012-01-26 16:14:58.844313",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 26, 2012 at 13:05,  <trolleriprofessorn@gmail.com> wrote:\n> if you declare a direct value,\n> chances are you wont escape its address.\n\nthis is not true in go programs.\nlots of code does things like\n\nvar buf bytes.Buffer\n\nand then any use of buf will be using &buf.\n",
			"disapproval": false,
			"date": "2012-01-26 18:40:05.588118",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "a few more comments\n\nthis is useful but i think it tries to be too thorough and expansive.\n\nhttp://codereview.appspot.com/5573059/diff/11002/doc/go_for_java_programmers.html\nFile doc/go_for_java_programmers.html (right):\n\nhttp://codereview.appspot.com/5573059/diff/11002/doc/go_for_java_programmers.html#newcode1033\ndoc/go_for_java_programmers.html:1033: Function literals, which Go implements as <em>closures</em>,\ndoesn't sound quite right. a function literal can be a closure, but needn't close over anything.\n\nmaybe: Go has function literals, which can act as closures and are powerful when coupled with the go statement.\n\nhttp://codereview.appspot.com/5573059/diff/11002/doc/go_for_java_programmers.html#newcode1044\ndoc/go_for_java_programmers.html:1044: }(1000)  // Passes argument 1000 to the function literal.\nthis is not a very compelling example.\n\nhttp://codereview.appspot.com/5573059/diff/11002/doc/go_for_java_programmers.html#newcode1056\ndoc/go_for_java_programmers.html:1056: A channel provides a cheap and quite efficient mechanism for two goroutines\ns/cheap and quite efficient //\nthose are operational details, not linguistic.\n\nhttp://codereview.appspot.com/5573059/diff/11002/doc/go_for_java_programmers.html#newcode1060\ndoc/go_for_java_programmers.html:1060: as a unary operator.\nthat's true, but incomplete. recv puts arrow to the left of the channel, send to the right. you'd be better to use a couple of trivial examples.\n\nhttp://codereview.appspot.com/5573059/diff/11002/doc/go_for_java_programmers.html#newcode1071\ndoc/go_for_java_programmers.html:1071: To illustrate the simplicity and power of channels,\nI don't like this example. It encourages high-level primitives to do low-level things, using channels just for synchronization and no sommunication. Morover, mixing Once into here uses the sync package. This is not well thought out.",
			"disapproval": false,
			"date": "2012-01-26 22:35:37.116887",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nigeltao@golang.org, bsiegert@gmail.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-25 18:46:07.342703",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 26, 2012 at 11:25, Dmitry Vyukov <dvyukov@google.com> wrote:\n> I think we need to ask lvd.\u00a0Luuk, are \"var v T\" and \"v := new(T)\" currently\n> different in any way, shape or form (wrt memory allocation)? I thought for\n> some reason that they are effectively the same now.\n\nWell, one declares a variable of type T,\nand the other declares a variable of type *T.\nThe allocation patterns are the same.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-26 16:58:08.658615",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html\nFile doc/go_for_java_programmers.html (right):\n\nhttp://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html#newcode568\ndoc/go_for_java_programmers.html:568: has no equivalent in Java.\nPerhaps a sentence here mentioning that \"var v T\" can be more efficient than \"p := new(T)\" as the var version may not create any garbage.\n\nhttp://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html#newcode593\ndoc/go_for_java_programmers.html:593: p := &amp;T{}\nThis implies that &T{} works for any type, which is incorrect.  Really &T{} is a magic syntax, it's somewhat distinct from the unary operator & which takes the address of a variable or other addressable entity.\n\nhttp://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html#newcode624\ndoc/go_for_java_programmers.html:624: s = &amp;a // Same as: s = a[0:len(a)], or the shorter s = a[:]\nActually s = &a doesn't work any more, you need to use the s = a[:] syntax.\n\nhttp://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html#newcode792\ndoc/go_for_java_programmers.html:792: This is a form a duck typing.\ns/form a duck/form of duck/",
			"disapproval": false,
			"date": "2012-01-25 23:58:46.569528",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html\nFile doc/go_for_java_programmers.html (right):\n\nhttp://codereview.appspot.com/5573059/diff/5003/doc/go_for_java_programmers.html#newcode568\ndoc/go_for_java_programmers.html:568: has no equivalent in Java.\nOn 2012/01/25 23:58:46, iant wrote:\n> Perhaps a sentence here mentioning that \"var v T\" can be more efficient than \"p\n> := new(T)\" as the var version may not create any garbage.\n\nAren't they equivalent now? \"var v T\" can definitely go to heap, and I remember something about \"new(T)\" can be a stack allocation now (after escape analysis patch).\nAFAIK, some Java impls also do escape analysis, and so... how is it spelled in Java... \"T obj = new T\" can also be a stack allocation.\nSo I would consider all three as the same thing (expression type aside). It's not like C/C++'s \"int i\" vs \"int* i = new int\".",
			"disapproval": false,
			"date": "2012-01-26 06:57:40.755527",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "run 'hg change 5573059' and add the file to the list\n",
			"disapproval": false,
			"date": "2012-01-26 22:01:53.690306",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nigeltao@golang.org, bsiegert@gmail.com, dave@cheney.net, r@golang.org, r@google.com, iant@golang.org, dvyukov@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-26 22:19:26.470243",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nigeltao@golang.org, bsiegert@gmail.com, dave@cheney.net, r@golang.org, r@google.com, iant@golang.org, dvyukov@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-26 21:29:20.018698",
			"approval": false
		},
		{
			"sender": "trolleriprofessorn@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"bsiegert@gmail.com",
				"dave@cheney.net",
				"r@golang.org",
				"r@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I intended to add a patch to docs.html to this patch set, but failed. What's the trick? (My naive attempt was to edit the file and run \"hg mail 5573059\".)",
			"disapproval": false,
			"date": "2012-01-26 21:43:31.276474",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:42:09.315470",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"trolleriprofessorn@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 19:46:20.766650",
			"approval": false
		}
	],
	"owner_email": "trolleriprofessorn@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Stefan Nilsson",
	"subject": "code review 5573059: doc: Go for Java programmers",
	"created": "2012-01-24 23:56:41.581699",
	"patchsets": [
		1,
		2001,
		3002,
		7001,
		5003,
		9001,
		11002
	],
	"modified": "2013-07-21 19:46:21.470840",
	"closed": false,
	"issue": 5573059
}