{
	"description": "sync/atomic: use cas64 to implement {Load,Store,Add}{Uint,Int}64 on Linux/ARM\n        Now with GOARM=5 our all.bash should pass on ARMv5 systems.\n        Fixes issue 3331.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"dvyukov@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi\n\nI'd rather leave the existing assembly alone, and then in the ARM case where you want to use Go code, have the assembly do a jump to the Go implementation.  This is the style we've used in other places, such as package big, and it seems to work well.\n\nThanks.",
			"disapproval": false,
			"date": "2012-05-21 17:39:08.750163",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-05-18 20:46:25.301391",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nOn Sat, May 19, 2012 at 5:02 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> If they're just calling CAS, it seems like you could write them in Go\r\n> instead of assembly?\r\n\r\nit seems I have to introduce one level of indirection to keep all function\r\ndeclaration\r\ntogether at doc.go?\r\n",
			"disapproval": false,
			"date": "2012-05-18 21:50:24.607231",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/19 10:41:54, minux wrote:\n> On 2012/05/19 10:32:36, dvyukov wrote:\n> http://codereview.appspot.com/6210071/diff/9002/src/pkg/sync/atomic/doc.go#newcode61\n> > src/pkg/sync/atomic/doc.go:61: return addUint64(val, delta)\n> > Is it inlined?\n> it won't.\n> IIUC, gc can only inline functions compiled by itself, so only linux/arm version\n> is eligible to inlining, but it won't either, because addUint64 isn't a leaf\n> function.\n\nI see.\n\n> I'm afraid, this change is going to slow every port down, if we keep these\n> declarations\n> in one place in doc.go. sync/atomic is performance critical code, so I think we\n> should\n> allow some documentation duplication and move related functions out of doc.go\n> \n> what do you think?\n\nI think it's nice to keep these function fast, because performance is usually the only reason for using them.\nFWIW, I do not mind if several functions and doc comments are duplicated. But I would wait for Russ answer before reimplementing it.",
			"disapproval": false,
			"date": "2012-05-19 11:00:33.316632",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nAlso exchanged the code for CompareAndSwapUint64 and\nCompareAndSwapInt64, because we usually implement the\nunsigned version, make the signed version jump to it.",
			"disapproval": false,
			"date": "2012-05-21 18:20:22.215195",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The code might seem to be doing a lot of needless load/store.\n\nBut the truth is, our calling convention dictate that nearly all register could\nbe clobbered after a function call and all arguments should be passed on\nstack. And each these functions must call cas64. What's worse, one code\npatch in cas64 involves calling another C function, so if don't split and \nprovide 3 implementations for each of these 3 functions (like we did for\ncas64), we can't do much optimization to them (except use LDRD/STRD\nto replace the register pair load/store), IMHO.\n\nOf course, if you have any optimization suggestion, I'm eager to learn.\n\nAlso note that, to make all.bash pass on ARMv5 systems, you must enlarge\nthe timeout values in run.bash (warning, it will take a long time to finish).",
			"disapproval": false,
			"date": "2012-05-18 20:54:28.178166",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If they're just calling CAS, it seems like you could write them in Go\r\ninstead of assembly?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-18 21:03:17.938246",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/19 10:32:36, dvyukov wrote:\nhttp://codereview.appspot.com/6210071/diff/9002/src/pkg/sync/atomic/doc.go#newcode61\n> src/pkg/sync/atomic/doc.go:61: return addUint64(val, delta)\n> Is it inlined?\nit won't.\nIIUC, gc can only inline functions compiled by itself, so only linux/arm version\nis eligible to inlining, but it won't either, because addUint64 isn't a leaf function.\n\nI'm afraid, this change is going to slow every port down, if we keep these declarations\nin one place in doc.go. sync/atomic is performance critical code, so I think we should\nallow some documentation duplication and move related functions out of doc.go\n\nwhat do you think?",
			"disapproval": false,
			"date": "2012-05-19 10:41:54.802549",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just out of curiosity\n\nhttp://codereview.appspot.com/6210071/diff/9002/src/pkg/sync/atomic/doc.go\nFile src/pkg/sync/atomic/doc.go (right):\n\nhttp://codereview.appspot.com/6210071/diff/9002/src/pkg/sync/atomic/doc.go#newcode61\nsrc/pkg/sync/atomic/doc.go:61: return addUint64(val, delta)\nIs it inlined?",
			"disapproval": false,
			"date": "2012-05-19 10:32:36.680473",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Mon, May 21, 2012 at 2:20 PM,  <minux.ma@gmail.com> wrote:\r\n> we usually implement the\r\n> unsigned version, make the signed version jump to it.\r\n\r\nThe signed and unsigned version are identical\r\nexcept for their type signatures, no?\r\nEither way, it's fine.\r\n",
			"disapproval": false,
			"date": "2012-05-22 03:11:11.518302",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1734b211731d ***\n\nsync/atomic: use cas64 to implement {Load,Store,Add}{Uint,Int}64 on Linux/ARM\n        Now with GOARM=5 our all.bash should pass on ARMv5 systems.\n        Fixes issue 3331.\n\nR=golang-dev, rsc, dvyukov\nCC=golang-dev\nhttp://codereview.appspot.com/6210071",
			"disapproval": false,
			"date": "2012-05-22 18:02:09.819466",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/22 03:11:11, rsc wrote:\n> On Mon, May 21, 2012 at 2:20 PM,  <mailto:minux.ma@gmail.com> wrote:\n> > we usually implement the\n> > unsigned version, make the signed version jump to it.\n> The signed and unsigned version are identical\n> except for their type signatures, no?\nYes. I changed that for consistency with other functions.",
			"disapproval": false,
			"date": "2012-05-22 18:03:51.491415",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6210071: sync/atomic: use cas64 to implement {Load,Store,Add}{Ui...",
	"created": "2012-05-18 20:41:05.056050",
	"patchsets": [
		1,
		2002,
		9002,
		3004,
		16001,
		1017
	],
	"modified": "2012-05-22 18:03:51.689930",
	"closed": true,
	"issue": 6210071
}