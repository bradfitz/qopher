{
	"description": "encoding/binary: Added boolean support.\n\nAll non-zero values are considered true when\nreading, whereas 0 and 1 are used as true and\nfalse, respectively, when writing.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"adg@google.com",
		"gri@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-04 00:13:58.859441",
			"approval": true
		},
		{
			"sender": "Yissakhar.Beck@gmail.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2011-12-25 19:27:07.620628",
			"approval": false
		},
		{
			"sender": "Yissakhar.Beck@gmail.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-03 14:53:05.710819",
			"approval": false
		},
		{
			"sender": "Yissakhar.Beck@gmail.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, adg@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-04 00:03:20.707013",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5502077/diff/4001/src/pkg/encoding/binary/binary.go\nFile src/pkg/encoding/binary/binary.go (right):\n\nhttp://codereview.appspot.com/5502077/diff/4001/src/pkg/encoding/binary/binary.go#newcode17\nsrc/pkg/encoding/binary/binary.go:17: // True determines what to use as true when sending values.\nI don't think these should be mutable globals, as many parts of a system may use the binary package. Just hard code them - these values are perfectly fine. If people want other behavior they can copy the package or trivially write their own encoder.",
			"disapproval": false,
			"date": "2012-01-03 01:08:57.172480",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5502077/diff/3/src/pkg/encoding/binary/binary.go\nFile src/pkg/encoding/binary/binary.go (right):\n\nhttp://codereview.appspot.com/5502077/diff/3/src/pkg/encoding/binary/binary.go#newcode153\nsrc/pkg/encoding/binary/binary.go:153: if b[0] != 0 {\n*v = b[0] != 0",
			"disapproval": false,
			"date": "2012-01-03 21:05:01.632034",
			"approval": false
		},
		{
			"sender": "Yissakhar.Beck@gmail.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/04 00:13:58, adg wrote:\n> LGTM\n\nUmmm... I've never done this before. Is there something I should do now?",
			"disapproval": false,
			"date": "2012-01-06 17:54:29.250898",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The comments in this package need to be adjusted. They don't mention bool values.\n\n- gri",
			"disapproval": false,
			"date": "2012-01-06 18:38:02.572651",
			"approval": false
		},
		{
			"sender": "Yissakhar.Beck@gmail.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/06 18:38:02, gri wrote:\n> The comments in this package need to be adjusted. They don't mention bool\n> values.\n> \n> - gri\n\nUpdated the comments.",
			"disapproval": false,
			"date": "2012-01-06 19:10:06.349176",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\n\nThanks for the CL, but this is not something we want to\nsupport in encoding/binary.  The goal for encoding/binary\nis explicitly not to handle every possible Go data type\n(for something approaching that, use gob or json).\nThe goal is only to handle fixed-size data values such as\nmight be defined by external protocols.  As the doc\ncomment says,\n\n    Package binary implements translation between unsigned integer values\n    and byte sequences and the reading and writing of fixed-size values.\n\nFixed-size means explicitly sized: binary handles uint8,\nuint16, uint32, and uint64.  Those fixed-size values\nhave exactly one possible encoding once the\nbyte order has been determined, but uint does not.\nIn contrast, binary doesn't handle uint, because its\nsize is unknown.  It doesn't handle string because\nthere are multiple possible encodings to use.\nThe same is true here of bool.  A bool is often a 0 or 1,\nbut not always, and even when it is a 0/1, the size is\nnot known.  Because there are many encodings,\nbool is off the table for encoding/binary.\n\nIf you are working with a binary protocol that sends a\nbool as a single-byte 0 or 1, my suggestion is to use\nthe data type uint8 or byte when defining your data\nstructures and then do the appropriate conversions\nwhen reading or writing that field.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-09 16:14:15.180661",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go\nFile src/pkg/encoding/binary/binary.go (right):\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode8\nsrc/pkg/encoding/binary/binary.go:8: // boolean values.\nAs written it sounds like boolean values are not fixed-size. I think you can just leave away this change: The first part of the comment (\"translation\") refers to the byte order code, the second to reading and writing. Bools are fixed size, so this is ok as is.\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode124\nsrc/pkg/encoding/binary/binary.go:124: // type (int8, uint8, int16, float32, complex64, ...) or a boolean\ns/or a boolean value/, a boolean value, /\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode127\nsrc/pkg/encoding/binary/binary.go:127: // and written to successive fields of the data. When reading\nWhen reading boolean values, a byte b is decoded as b != 0.\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode181\nsrc/pkg/encoding/binary/binary.go:181: \nfunc byteFor(x bool) byte {\n   if x {\n      return 1\n   }\n   return 0\n}\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode186\nsrc/pkg/encoding/binary/binary.go:186: // type (int8, uint8, int16, float32, complex64, ...) or a boolean\ns/or a boolean value/, a boolean value, /\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode189\nsrc/pkg/encoding/binary/binary.go:189: // and read from successive fields of the data. When writing\ns/values true/values, true/\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode246\nsrc/pkg/encoding/binary/binary.go:246: if *v {\nb[0] = byteFor(*v)\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode253\nsrc/pkg/encoding/binary/binary.go:253: if v {\nb[0] = byteFor(*v)\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode388\nsrc/pkg/encoding/binary/binary.go:388: if x {\ne.uint8(byteFor(x))\n\nhttp://codereview.appspot.com/5502077/diff/8002/src/pkg/encoding/binary/binary.go#newcode522\nsrc/pkg/encoding/binary/binary.go:522: // intDestSize returns the size of the integer that ptrType points to,\ninteger or boolean",
			"disapproval": false,
			"date": "2012-01-07 01:03:33.225887",
			"approval": false
		},
		{
			"sender": "Yissakhar.Beck@gmail.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, adg@google.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-09 16:03:37.221287",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please abandon this CL.\n",
			"disapproval": false,
			"date": "2012-01-09 17:54:46.052510",
			"approval": false
		},
		{
			"sender": "Yissakhar.Beck@gmail.com",
			"recipients": [
				"Yissakhar.Beck@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"adg@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-17 18:46:25.839586",
			"approval": false
		}
	],
	"owner_email": "Yissakhar.Beck@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DeedleFake",
	"subject": "code review 5502077: encoding/binary: Added boolean support.",
	"created": "2011-12-25 19:25:13.632517",
	"patchsets": [
		1,
		2001,
		4001,
		3,
		5003,
		8002,
		11002
	],
	"modified": "2012-01-17 18:46:27.698608",
	"closed": true,
	"issue": 5502077
}