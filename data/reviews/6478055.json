{
	"description": "math/big: added benchmarks to establish baseline for core functions\n\nBenchmarkAddVV_1          500000000        7.24 ns/op     8844.11 MB/s\nBenchmarkAddVV_2          100000000       10.4 ns/op     12290.41 MB/s\nBenchmarkAddVV_3          100000000       10.7 ns/op     17966.58 MB/s\nBenchmarkAddVV_4          100000000       12.3 ns/op     20848.67 MB/s\nBenchmarkAddVV_5          100000000       14.5 ns/op     21993.82 MB/s\nBenchmarkAddVV_1e1        100000000       24.0 ns/op     26720.65 MB/s\nBenchmarkAddVV_1e2         10000000      246 ns/op       26014.58 MB/s\nBenchmarkAddVV_1e3          1000000     2416 ns/op       26485.06 MB/s\nBenchmarkAddVV_1e4           100000    23874 ns/op       26806.36 MB/s\nBenchmarkAddVV_1e5            10000   241155 ns/op       26538.87 MB/s\nBenchmarkAddVW_1          500000000        6.12 ns/op    10461.91 MB/s\nBenchmarkAddVW_2          200000000       11.0 ns/op     11596.63 MB/s\nBenchmarkAddVW_3          200000000        8.97 ns/op    21409.82 MB/s\nBenchmarkAddVW_4          100000000       10.8 ns/op     23696.72 MB/s\nBenchmarkAddVW_5          100000000       12.5 ns/op     25524.88 MB/s\nBenchmarkAddVW_1e1        100000000       21.5 ns/op     29786.32 MB/s\nBenchmarkAddVW_1e2         10000000      168 ns/op       37925.36 MB/s\nBenchmarkAddVW_1e3          1000000     1658 ns/op       38579.15 MB/s\nBenchmarkAddVW_1e4           100000    16492 ns/op       38805.85 MB/s\nBenchmarkAddVW_1e5            10000   172155 ns/op       37175.69 MB/s\nBenchmarkAddMulVVW_1      100000000       12.9 ns/op      4968.49 MB/s\nBenchmarkAddMulVVW_2      100000000       15.5 ns/op      8279.42 MB/s\nBenchmarkAddMulVVW_3      100000000       13.4 ns/op     14340.53 MB/s\nBenchmarkAddMulVVW_4      100000000       15.8 ns/op     16194.94 MB/s\nBenchmarkAddMulVVW_5      100000000       18.9 ns/op     16906.61 MB/s\nBenchmarkAddMulVVW_1e1     50000000       32.3 ns/op     19838.35 MB/s\nBenchmarkAddMulVVW_1e2     10000000      285 ns/op       22427.28 MB/s\nBenchmarkAddMulVVW_1e3      1000000     2777 ns/op       23040.42 MB/s\nBenchmarkAddMulVVW_1e4       100000    27901 ns/op       22938.01 MB/s\nBenchmarkAddMulVVW_1e5        10000   281087 ns/op       22768.73 MB/s",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6478055/diff/5001/src/pkg/math/big/arith_test.go\nFile src/pkg/math/big/arith_test.go (right):\n\nhttp://codereview.appspot.com/6478055/diff/5001/src/pkg/math/big/arith_test.go#newcode107\nsrc/pkg/math/big/arith_test.go:107: var rnd = rand.New(rand.NewSource(0x43de683f473542af))\ndoes this particular seed have any significance? as in, what's wrong with 0?\n\nhttp://codereview.appspot.com/6478055/diff/5001/src/pkg/math/big/arith_test.go#newcode110\nsrc/pkg/math/big/arith_test.go:110: return Word(rnd.Int63()<<1 + rnd.Int63n(2))\ni'd use | rather than + but it's up to you",
			"disapproval": false,
			"date": "2012-08-23 22:48:25.815500",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6b1a31217a2c ***\n\nmath/big: added benchmarks to establish baseline for core functions\n\nBenchmarkAddVV_1          500000000        7.24 ns/op     8844.11 MB/s\nBenchmarkAddVV_2          100000000       10.4 ns/op     12290.41 MB/s\nBenchmarkAddVV_3          100000000       10.7 ns/op     17966.58 MB/s\nBenchmarkAddVV_4          100000000       12.3 ns/op     20848.67 MB/s\nBenchmarkAddVV_5          100000000       14.5 ns/op     21993.82 MB/s\nBenchmarkAddVV_1e1        100000000       24.0 ns/op     26720.65 MB/s\nBenchmarkAddVV_1e2         10000000      246 ns/op       26014.58 MB/s\nBenchmarkAddVV_1e3          1000000     2416 ns/op       26485.06 MB/s\nBenchmarkAddVV_1e4           100000    23874 ns/op       26806.36 MB/s\nBenchmarkAddVV_1e5            10000   241155 ns/op       26538.87 MB/s\nBenchmarkAddVW_1          500000000        6.12 ns/op    10461.91 MB/s\nBenchmarkAddVW_2          200000000       11.0 ns/op     11596.63 MB/s\nBenchmarkAddVW_3          200000000        8.97 ns/op    21409.82 MB/s\nBenchmarkAddVW_4          100000000       10.8 ns/op     23696.72 MB/s\nBenchmarkAddVW_5          100000000       12.5 ns/op     25524.88 MB/s\nBenchmarkAddVW_1e1        100000000       21.5 ns/op     29786.32 MB/s\nBenchmarkAddVW_1e2         10000000      168 ns/op       37925.36 MB/s\nBenchmarkAddVW_1e3          1000000     1658 ns/op       38579.15 MB/s\nBenchmarkAddVW_1e4           100000    16492 ns/op       38805.85 MB/s\nBenchmarkAddVW_1e5            10000   172155 ns/op       37175.69 MB/s\nBenchmarkAddMulVVW_1      100000000       12.9 ns/op      4968.49 MB/s\nBenchmarkAddMulVVW_2      100000000       15.5 ns/op      8279.42 MB/s\nBenchmarkAddMulVVW_3      100000000       13.4 ns/op     14340.53 MB/s\nBenchmarkAddMulVVW_4      100000000       15.8 ns/op     16194.94 MB/s\nBenchmarkAddMulVVW_5      100000000       18.9 ns/op     16906.61 MB/s\nBenchmarkAddMulVVW_1e1     50000000       32.3 ns/op     19838.35 MB/s\nBenchmarkAddMulVVW_1e2     10000000      285 ns/op       22427.28 MB/s\nBenchmarkAddMulVVW_1e3      1000000     2777 ns/op       23040.42 MB/s\nBenchmarkAddMulVVW_1e4       100000    27901 ns/op       22938.01 MB/s\nBenchmarkAddMulVVW_1e5        10000   281087 ns/op       22768.73 MB/s\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/6478055",
			"disapproval": false,
			"date": "2012-08-23 22:56:28.696140",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-23 22:46:16.228380",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6478055/diff/5001/src/pkg/math/big/arith_test.go\nFile src/pkg/math/big/arith_test.go (right):\n\nhttp://codereview.appspot.com/6478055/diff/5001/src/pkg/math/big/arith_test.go#newcode107\nsrc/pkg/math/big/arith_test.go:107: var rnd = rand.New(rand.NewSource(0x43de683f473542af))\nOn 2012/08/23 22:48:25, r wrote:\n> does this particular seed have any significance? as in, what's wrong with 0?\n\nno - 0 is fine. changed.\n\nhttp://codereview.appspot.com/6478055/diff/5001/src/pkg/math/big/arith_test.go#newcode110\nsrc/pkg/math/big/arith_test.go:110: return Word(rnd.Int63()<<1 + rnd.Int63n(2))\nOn 2012/08/23 22:48:25, r wrote:\n> i'd use | rather than + but it's up to you\n\nfunny - I thought I used |. changed.",
			"disapproval": false,
			"date": "2012-08-23 22:55:20.267520",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6478055: math/big: added benchmarks to establish baseline for co...",
	"created": "2012-08-23 22:45:28.216930",
	"patchsets": [
		1,
		2001,
		5001,
		9002
	],
	"modified": "2012-08-23 22:56:29.625290",
	"closed": true,
	"issue": 6478055
}