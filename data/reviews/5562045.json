{
	"description": "go: introduce support for \"go build\" with gccgo.\n\nThe use of gccgo is triggered by GC=gccgo in environment. It\nstill needs the standard distribution to behave properly, but\nallows using the test, build, run, install subcommands with\ngccgo.",
	"cc": [
		"rsc@golang.org",
		"iant@google.com",
		"fullung@gmail.com",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks very much for working on this.\nThe structure of what you have seems completely reasonable.\nI am not sure what the mechanism should be to trigger use of\ngccgo, but the GC=gccgo thing is fine for now.\n\nYou should be able to determine the correct paths to pass to\nthe linker (instead of assuming $WORK) by adding the actions\nthat build those packages to a.deps in the a.link case (grep\nfor 'if a.link' in (*builder).action).\nThen the linker paths for the link action a are just all the a1.target\nfor each a1 in a.deps.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-21 17:56:42.761778",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 21, 2012 at 14:25,  <remyoudompheng@gmail.com> wrote:\n> Archives full paths are passed for linking, but gccgo also needs to find\n> the file at compile time: to find export information it tries\n> $INCLUDEDIR/import/path/libpackage.a, for folders mentioned with the -I\n> flag (a bit like gc).\n\nI see.  It seems fine if the pkg tree is slightly different\nwhen you're using gccgo vs gc.  However, maybe it\nshould be in pkg/gccgo/linux_amd64/... instead of\npkg/linux_amd64/..., to avoid any possible confusion\nwith gc objects.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-21 19:31:30.565955",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> On Sat, Jan 21, 2012 at 14:25,  <remyoudompheng@gmail.com> wrote:\n>> Archives full paths are passed for linking, but gccgo also needs to find\n>> the file at compile time: to find export information it tries\n>> $INCLUDEDIR/import/path/libpackage.a, for folders mentioned with the -I\n>> flag (a bit like gc).\n>\n> I see.  It seems fine if the pkg tree is slightly different\n> when you're using gccgo vs gc.  However, maybe it\n> should be in pkg/gccgo/linux_amd64/... instead of\n> pkg/linux_amd64/..., to avoid any possible confusion\n> with gc objects.\n\nThat is probably wise, although it points out another reason that gccgo\nlooks for libfoo.a: it permits the gc and gccgo trees to overlap, since\ngc will create and look for foo.a.\n\nIan\n",
			"disapproval": false,
			"date": "2012-01-21 22:43:19.412864",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2012/01/21 17:17:33, remyoudompheng wrote:\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nJust a general comment: what about -fgo-prefix? We have packages like foo/os and foo/syscall in our project and I think this code needs to be built with -fgo-prefix to work.\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2012-01-22 05:27:00.169804",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nFor the moment this looks a bit ugly to me, but I'd like some comments about the structure of the go tool before trying to do some polishing.\n\nThe patch does the following:\n- check for an environment variable GC=gccgo (maybe it should be a boolean flag instead);\n- tries to non intrusively call gccgo where applicable, so  I've defined a toolchain interface where toolchain-dependant methods went.\n\nIt does not:\n- check appropriately if dependencies are installed (actually it only works if GOROOT points to an actual Go distribution and GOPATH has no installed packages, because it makes it thinks the standard library is installed and all GOPATH dependencies have to be rebuilt).\n\nI've tried it successfully with with of my executables that depends on a simple cgo module but got bitten by issue 2754.",
			"disapproval": false,
			"date": "2012-01-21 17:23:45.649901",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 21, 2012 at 14:11,  <remyoudompheng@gmail.com> wrote:\n> OK, I think I managed to get go build, go test and go install somewhat\n> work. The only drawback is that $GOPATH/pkg will be littered with\n> import/path/libpackage.a files because gccgo expects a \"lib\" prefix.\n\nThat surprises me.  It's true that if you say -lfoo linkers want libfoo.a,\nbut if you pass a full path name instead I would expect it to work.\n\nIan, is there something we're missing?\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-21 19:20:57.493391",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, iant@google.com, fullung@gmail.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-22 11:25:13.996066",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-21 17:17:33.501164",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for the link tip, it will be useful for use with the \"go test\" usecase. I'll give it a try.",
			"disapproval": false,
			"date": "2012-01-21 18:14:45.937202",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK, I think I managed to get go build, go test and go install somewhat work. The only drawback is that $GOPATH/pkg will be littered with import/path/libpackage.a files because gccgo expects a \"lib\" prefix.\n\nProbably in the future they should go in a separate path.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-01-21 19:11:18.589955",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-21 19:17:03.905139",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have one more question about flags. I'll try to test this on a big codebase today or tomorrow.\n\nhttp://codereview.appspot.com/5562045/diff/4005/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttp://codereview.appspot.com/5562045/diff/4005/src/cmd/go/build.go#newcode240\nsrc/cmd/go/build.go:240: // atexit(func() { os.RemoveAll(b.work) })\nDebugging leftover?\n\nhttp://codereview.appspot.com/5562045/diff/4005/src/cmd/go/build.go#newcode1052\nsrc/cmd/go/build.go:1052: return b.run(p.Dir, p.ImportPath, \"gcc\", \"-Wall\", \"-g\",\nI have questions about flags here. This is perhaps an issue that needs to be addressed at a higher level in the go tool:\n\n- Does it work to compile without -g? Would users want to turn it off or is stripping the binaries afterwards good enough?\n\n- How would I specify -On for the compile step?\n\n- Ian still needs to look at issue 1408, but how would I think if you want LTO you need to pass -flto to the compiler and the linker. And maybe that means the linker also needs -On.\n\n- I think -fplugin=./dragonegg.so (and other plugins) could be interesting\n\nI think there's a general problem of how the go tool deals with flags to commands it runs. The 6g toolset nicely dodged this issue by not having too many flags. :-) -B to 6g is maybe one exception. I think someone asked about this in another CL or issue a few days ago.",
			"disapproval": false,
			"date": "2012-01-22 12:33:33.440663",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/21 19:20:57, rsc wrote:\n> That surprises me.  It's true that if you say -lfoo linkers want libfoo.a,\n> but if you pass a full path name instead I would expect it to work.\n> \n> Ian, is there something we're missing?\n\nArchives full paths are passed for linking, but gccgo also needs to find the file at compile time: to find export information it tries $INCLUDEDIR/import/path/libpackage.a, for folders mentioned with the -I flag (a bit like gc).",
			"disapproval": false,
			"date": "2012-01-21 19:25:17.193358",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5562045/diff/4005/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttp://codereview.appspot.com/5562045/diff/4005/src/cmd/go/build.go#newcode240\nsrc/cmd/go/build.go:240: // atexit(func() { os.RemoveAll(b.work) })\nOn 2012/01/22 12:33:33, albert.strasheim wrote:\n> Debugging leftover?\n\nYes, sorry.\n\nhttp://codereview.appspot.com/5562045/diff/4005/src/cmd/go/build.go#newcode1052\nsrc/cmd/go/build.go:1052: return b.run(p.Dir, p.ImportPath, \"gcc\", \"-Wall\", \"-g\",\nOn 2012/01/22 12:33:33, albert.strasheim wrote:\n> I have questions about flags here. This is perhaps an issue that needs to be\n> addressed at a higher level in the go tool:\n\nI'd say only the minimal set of flags should be hardcoded, and other user defined flags should be specified in GCFLAGS. Maybe this should be adjusted after a working gccgo support is added.\n\nI added \"-g\" because I thought the absence of debugging symbols had broken the reporting of line numbers but it's actually not implemented.",
			"disapproval": false,
			"date": "2012-01-22 12:57:28.147756",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/21 19:31:30, rsc wrote:\n> I see.  It seems fine if the pkg tree is slightly different\n> when you're using gccgo vs gc.  However, maybe it\n> should be in pkg/gccgo/linux_amd64/... instead of\n> pkg/linux_amd64/..., to avoid any possible confusion\n> with gc objects.\n> \n> Russ\n\nI was afraid it would be horrible, but hooking into includeArgs and scanPackage made it.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-01-21 19:50:29.170180",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-21 19:50:45.387561",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/22 05:27:00, albert.strasheim wrote:\n> Hello\n> On 2012/01/21 17:17:33, remyoudompheng wrote:\n> > I'd like you to review this change to\n> > https://go.googlecode.com/hg/\n> Just a general comment: what about -fgo-prefix? We have packages like foo/os and\n> foo/syscall in our project and I think this code needs to be built with\n> -fgo-prefix to work.\n\nAny maybe more importantly, foo/bar/server and foo/baz/server.",
			"disapproval": false,
			"date": "2012-01-22 05:42:43.646683",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done for -fgo-prefix. I had horrible headaches trying to get the linking order right, especially when trying to make \"go test\" work with e.g. the standard sort package.\n\nI finally resorted to using -Wl,-( -Wl,-), and using different go-prefixes for fake packages, but it still looks a bit ugly to me.",
			"disapproval": false,
			"date": "2012-01-22 11:23:20.289343",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, iant@google.com, fullung@gmail.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-22 13:11:21.303508",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-27 22:01:22.782868",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d6a14e6fac0c ***\n\ngo: introduce support for \"go build\" with gccgo.\n\nThe use of gccgo is triggered by GC=gccgo in environment. It\nstill needs the standard distribution to behave properly, but\nallows using the test, build, run, install subcommands with\ngccgo.\n\nR=rsc, iant, fullung\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5562045\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-01-27 22:05:56.366730",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5562045: go: introduce support for \"go build\" with gccgo.",
	"created": "2012-01-21 17:15:04.215044",
	"patchsets": [
		1,
		1001,
		4001,
		5003,
		4004,
		4005,
		10006
	],
	"modified": "2012-01-31 07:17:33.803658",
	"closed": true,
	"issue": 5562045
}