{
	"description": "[release-branch.go1] mime: make ParseMediaType return zero results on error\n\n\u00ab\u00ab\u00ab CL 6119051 / 1384d7510575\nmime: make ParseMediaType return zero results on error\n\nFixes issue 3562\n\nR=golang-dev, adg, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6119051\n\u00bb\u00bb\u00bb\n",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Wed, Apr 25, 2012 at 12:42 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> [release-branch.go1] mime: make ParseMediaType return zero results on\r\n> error\r\n>\r\n> \u00ab\u00ab\u00ab CL 6119051 / 1384d7510575\r\n> mime: make ParseMediaType return zero results on error\r\n>\r\n> Fixes issue 3562\r\n>\r\n> R=golang-dev, adg, rsc\r\n> CC=golang-dev\r\n> http://codereview.appspot.com/**6119051<http://codereview.appspot.com/6119051>\r\n> \u00bb\u00bb\u00bb\r\n>\r\n>\r\n> Please review this at http://codereview.appspot.com/**6127045/<http://codereview.appspot.com/6127045/>\r\n>\r\n> Affected files:\r\n>  M src/pkg/mime/mediatype.go\r\n>  M src/pkg/mime/mediatype_test.go\r\n>\r\n>\r\n> Index: src/pkg/mime/mediatype.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/mime/mediatype.go\r\n> +++ b/src/pkg/mime/mediatype.go\r\n> @@ -99,7 +99,7 @@\r\n>\r\n>        err = checkMediaTypeDisposition(**mediatype)\r\n>        if err != nil {\r\n> -               return\r\n> +               return \"\", nil, err\r\n>        }\r\n>\r\n>        params = make(map[string]string)\r\n> Index: src/pkg/mime/mediatype_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/mime/mediatype_test.**go\r\n> +++ b/src/pkg/mime/mediatype_test.**go\r\n> @@ -244,13 +244,33 @@\r\n>        }\r\n>  }\r\n>\r\n> +type badMediaTypeTest struct {\r\n> +       in  string\r\n> +       err string\r\n> +}\r\n> +\r\n> +var badMediaTypeTests = []badMediaTypeTest{\r\n> +       {\"bogus ;=========\", \"mime: invalid media parameter\"},\r\n> +       {\"bogus/<script>alert</script>**\", \"mime: expected token after\r\n> slash\"},\r\n> +       {\"bogus/bogus<script>alert</**script>\", \"mime: unexpected content\r\n> after media subtype\"},\r\n> +}\r\n> +\r\n>  func TestParseMediaTypeBogus(t *testing.T) {\r\n> -       mt, params, err := ParseMediaType(\"bogus ;=========\")\r\n> -       if err == nil {\r\n> -               t.Fatalf(\"expected an error parsing invalid media type;\r\n> got type %q, params %#v\", mt, params)\r\n> -       }\r\n> -       if err.Error() != \"mime: invalid media parameter\" {\r\n> -               t.Errorf(\"expected invalid media parameter; got error %q\",\r\n> err)\r\n> +       for _, tt := range badMediaTypeTests {\r\n> +               mt, params, err := ParseMediaType(tt.in)\r\n> +               if err == nil {\r\n> +                       t.Errorf(\"ParseMediaType(%q) = nil error; want\r\n> parse error\", tt.in)\r\n> +                       continue\r\n> +               }\r\n> +               if err.Error() != tt.err {\r\n> +                       t.Errorf(\"ParseMediaType(%q) = err %q; want %q\",\r\n> tt.in, err.Error(), tt.err)\r\n> +               }\r\n> +               if params != nil {\r\n> +                       t.Errorf(\"ParseMediaType(%q): got non-nil params\r\n> on error\", tt.in)\r\n> +               }\r\n> +               if mt != \"\" {\r\n> +                       t.Errorf(\"ParseMediaType(%q): got non-empty media\r\n> type string on error\", tt.in)\r\n> +               }\r\n>        }\r\n>  }\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-04-25 19:43:58.806611",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-04-25 19:42:39.248376",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b0c2507ec455 ***\n\n[release-branch.go1] mime: make ParseMediaType return zero results on error\n\n\u00ab\u00ab\u00ab CL 6119051 / 1384d7510575\nmime: make ParseMediaType return zero results on error\n\nFixes issue 3562\n\nR=golang-dev, adg, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6119051\n\u00bb\u00bb\u00bb\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6127045",
			"disapproval": false,
			"date": "2012-04-25 19:44:36.408698",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6127045: [release-branch.go1] mime: make ParseMediaType return z...",
	"created": "2012-04-25 19:42:20.407094",
	"patchsets": [
		1,
		1002,
		5001
	],
	"modified": "2012-04-25 19:44:37.436604",
	"closed": true,
	"issue": 6127045
}