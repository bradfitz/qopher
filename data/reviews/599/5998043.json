{
	"description": "cmd/8c: fix store to complex uint64 ptr\n\nAssignment of a computed uint64 value to an\naddress derived with a function call was executing\nthe call after computing the value, which trashed\nthe value (held in registers).\n\nlong long *f(void) { return 0; }\nvoid g(int x, int y) {\n        *f() = (long long)x | (long long)y<<32;\n}\n\nBefore:\n\n(x.c:3)\tTEXT\tg+0(SB),(gok(71))\n...\n(x.c:4)\tORL\tAX,DX\n(x.c:4)\tORL\tCX,BX\n(x.c:4)\tCALL\t,f+0(SB)\n(x.c:4)\tMOVL\tDX,(AX)\n(x.c:4)\tMOVL\tBX,4(AX)\n\nAfter:\n(x.c:3)\tTEXT\tg+0(SB),(gok(71))\n(x.c:4)\tCALL\t,f+0(SB)\n...\n(x.c:4)\tORL\tCX,BX\n(x.c:4)\tORL\tDX,BP\n(x.c:4)\tMOVL\tBX,(AX)\n(x.c:4)\tMOVL\tBP,4(AX)\n\nFixes issue 3501.",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"ken@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=775ac193aad2 ***\n\ncmd/8c: fix store to complex uint64 ptr\n\nAssignment of a computed uint64 value to an\naddress derived with a function call was executing\nthe call after computing the value, which trashed\nthe value (held in registers).\n\nlong long *f(void) { return 0; }\nvoid g(int x, int y) {\n        *f() = (long long)x | (long long)y<<32;\n}\n\nBefore:\n\n(x.c:3)\tTEXT\tg+0(SB),(gok(71))\n...\n(x.c:4)\tORL\tAX,DX\n(x.c:4)\tORL\tCX,BX\n(x.c:4)\tCALL\t,f+0(SB)\n(x.c:4)\tMOVL\tDX,(AX)\n(x.c:4)\tMOVL\tBX,4(AX)\n\nAfter:\n(x.c:3)\tTEXT\tg+0(SB),(gok(71))\n(x.c:4)\tCALL\t,f+0(SB)\n...\n(x.c:4)\tORL\tCX,BX\n(x.c:4)\tORL\tDX,BP\n(x.c:4)\tMOVL\tBX,(AX)\n(x.c:4)\tMOVL\tBP,4(AX)\n\nFixes issue 3501.\n\nR=ken2\nCC=golang-dev\nhttp://codereview.appspot.com/5998043",
			"disapproval": false,
			"date": "2012-04-10 14:46:07.286183",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-10 14:45:56.169832",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this doesnt look like your code.\nit solves the specific problem at the top\nof cgen while introducing 2 miscompile\ndiagnostics.\n\nOn Tue, Apr 10, 2012 at 7:46 AM,  <rsc@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=775ac193aad2 ***\n>\n>\n> cmd/8c: fix store to complex uint64 ptr\n>\n> Assignment of a computed uint64 value to an\n> address derived with a function call was executing\n> the call after computing the value, which trashed\n> the value (held in registers).\n>\n> long long *f(void) { return 0; }\n> void g(int x, int y) {\n> \u00a0 \u00a0 \u00a0 \u00a0*f() = (long long)x | (long long)y<<32;\n> }\n>\n> Before:\n>\n> (x.c:3) TEXT \u00a0 \u00a0g+0(SB),(gok(71))\n> ...\n> (x.c:4) ORL \u00a0 \u00a0 AX,DX\n> (x.c:4) ORL \u00a0 \u00a0 CX,BX\n> (x.c:4) CALL \u00a0 \u00a0,f+0(SB)\n> (x.c:4) MOVL \u00a0 \u00a0DX,(AX)\n> (x.c:4) MOVL \u00a0 \u00a0BX,4(AX)\n>\n> After:\n> (x.c:3) TEXT \u00a0 \u00a0g+0(SB),(gok(71))\n> (x.c:4) CALL \u00a0 \u00a0,f+0(SB)\n> ...\n> (x.c:4) ORL \u00a0 \u00a0 CX,BX\n> (x.c:4) ORL \u00a0 \u00a0 DX,BP\n> (x.c:4) MOVL \u00a0 \u00a0BX,(AX)\n> (x.c:4) MOVL \u00a0 \u00a0BP,4(AX)\n>\n> Fixes issue 3501.\n>\n> R=ken2\n> CC=golang-dev\n> http://codereview.appspot.com/5998043\n>\n>\n> http://codereview.appspot.com/5998043/\n",
			"disapproval": false,
			"date": "2012-04-11 01:09:06.582826",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 10, 2012 at 21:09, Ken Thompson <ken@google.com> wrote:\n> this doesnt look like your code.\n> it solves the specific problem at the top\n> of cgen while introducing 2 miscompile\n> diagnostics.\n\nit's definitely not my best work.\nit is unclear to me what the conventions are\nin the cgen64 code, which i believe is brucee's,\nas far as whether to expect function calls or not.\ndmitriy got hit by a hard-to-find bug caused by\nregister smashing, and i wanted to make sure\nthere weren't any others lurking, hence the\ndiagnostics.  there are three calls to cgen64.\ni'll take a closer look at them tomorrow and try\nto handle the condition at the call sites, which\ni think the right place for it.  if i can ensure that\nfunction calls never make it into cgen64 to begin\nwith, then that's certainly cleaner.\n\nruss\n",
			"disapproval": false,
			"date": "2012-04-11 03:09:06.650299",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5998043: cmd/8c: fix store to complex uint64 ptr",
	"created": "2012-04-10 14:41:35.832841",
	"patchsets": [
		1,
		2001,
		3
	],
	"modified": "2012-04-11 01:09:06.707203",
	"closed": true,
	"issue": 5998043
}