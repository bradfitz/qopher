{
	"description": "graphics: generalized convolution",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://crawshaw%40google.com@code.google.com/p/graphics-go/",
			"disapproval": false,
			"date": "2011-10-06 03:22:55.367297",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode30\ngraphics/convolve.go:30: // Size returns the length of a side length of the matrix\nAdd a full stop.\n\nBut I don't think Size is necessary. Can't you just take an integer square-root of len(weights) inside Convolve?\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode97\ngraphics/convolve.go:97: s, ok := src.(*image.RGBA)\nIf you convert src to image.RGBA in convolveRGBASep, you should also do so in convolveRGBA (or move it back into the Convolve function like it was before). Or do neither in both.\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode209\ngraphics/convolve.go:209: func convolvePx(src image.Image, x, y int, k *FullKernel) (r, g, b, a uint16) {\ns/Px/Pixel/, but I think I'd inline the function into line 247 and suck up the deep nesting. Otherwise, you're doing things like calling src.Bounds on each pixel, when you could be doing that outside the loop.\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode228\ngraphics/convolve.go:228: if adj != 0.0 {\ns/0.0/0/.\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode268\ngraphics/convolve.go:268: case *FullKernel:\nI don't think you should special case a FullKernel. Instead, make convolveRGBA take a Kernel (the interface).",
			"disapproval": false,
			"date": "2011-10-07 07:06:21.047456",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode30\ngraphics/convolve.go:30: // Size returns the length of a side length of the matrix\nOn 2011/10/07 07:06:21, nigeltao wrote:\n> Add a full stop.\n> \n> But I don't think Size is necessary. Can't you just take an integer square-root\n> of len(weights) inside Convolve?\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode97\ngraphics/convolve.go:97: s, ok := src.(*image.RGBA)\nOn 2011/10/07 07:06:21, nigeltao wrote:\n> If you convert src to image.RGBA in convolveRGBASep, you should also do so in\n> convolveRGBA (or move it back into the Convolve function like it was before). Or\n> do neither in both.\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode209\ngraphics/convolve.go:209: func convolvePx(src image.Image, x, y int, k *FullKernel) (r, g, b, a uint16) {\nOn 2011/10/07 07:06:21, nigeltao wrote:\n> s/Px/Pixel/, but I think I'd inline the function into line 247 and suck up the\n> deep nesting. Otherwise, you're doing things like calling src.Bounds on each\n> pixel, when you could be doing that outside the loop.\n\nI know this is not perfect, but it makes it easy to write a convolveRGBA64 (and an inefficient convolveGray). Mind if I leave it like this, then in a later CL I can write some benchmarks and test the value of manually inlining this?\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode228\ngraphics/convolve.go:228: if adj != 0.0 {\nOn 2011/10/07 07:06:21, nigeltao wrote:\n> s/0.0/0/.\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode268\ngraphics/convolve.go:268: case *FullKernel:\nOn 2011/10/07 07:06:21, nigeltao wrote:\n> I don't think you should special case a FullKernel. Instead, make convolveRGBA\n> take a Kernel (the interface).\n\nDone.",
			"disapproval": false,
			"date": "2011-10-12 00:54:07.951840",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ping. I have another CL behind this one.\n\nOn Tue, Oct 11, 2011 at 5:54 PM,  <crawshaw@google.com> wrote:\n> PTAL\n>\n>\n> http://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go\n> File graphics/convolve.go (right):\n>\n> http://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode30\n> graphics/convolve.go:30: // Size returns the length of a side length of\n> the matrix\n> On 2011/10/07 07:06:21, nigeltao wrote:\n>>\n>> Add a full stop.\n>\n>> But I don't think Size is necessary. Can't you just take an integer\n>\n> square-root\n>>\n>> of len(weights) inside Convolve?\n>\n> Done.\n>\n> http://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode97\n> graphics/convolve.go:97: s, ok := src.(*image.RGBA)\n> On 2011/10/07 07:06:21, nigeltao wrote:\n>>\n>> If you convert src to image.RGBA in convolveRGBASep, you should also\n>\n> do so in\n>>\n>> convolveRGBA (or move it back into the Convolve function like it was\n>\n> before). Or\n>>\n>> do neither in both.\n>\n> Done.\n>\n> http://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode209\n> graphics/convolve.go:209: func convolvePx(src image.Image, x, y int, k\n> *FullKernel) (r, g, b, a uint16) {\n> On 2011/10/07 07:06:21, nigeltao wrote:\n>>\n>> s/Px/Pixel/, but I think I'd inline the function into line 247 and\n>\n> suck up the\n>>\n>> deep nesting. Otherwise, you're doing things like calling src.Bounds\n>\n> on each\n>>\n>> pixel, when you could be doing that outside the loop.\n>\n> I know this is not perfect, but it makes it easy to write a\n> convolveRGBA64 (and an inefficient convolveGray). Mind if I leave it\n> like this, then in a later CL I can write some benchmarks and test the\n> value of manually inlining this?\n>\n> http://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode228\n> graphics/convolve.go:228: if adj != 0.0 {\n> On 2011/10/07 07:06:21, nigeltao wrote:\n>>\n>> s/0.0/0/.\n>\n> Done.\n>\n> http://codereview.appspot.com/5212042/diff/5003/graphics/convolve.go#newcode268\n> graphics/convolve.go:268: case *FullKernel:\n> On 2011/10/07 07:06:21, nigeltao wrote:\n>>\n>> I don't think you should special case a FullKernel. Instead, make\n>\n> convolveRGBA\n>>\n>> take a Kernel (the interface).\n>\n> Done.\n>\n> http://codereview.appspot.com/5212042/\n>\n",
			"disapproval": false,
			"date": "2011-10-15 19:22:38.955430",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode28\ngraphics/convolve.go:28: // to int(math.Sqrt(len(Weights()))), the weight at (x,y) starts\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> \"int(math.Sqrt(len(Weights())))\" is awkward. Just say that \"Weights returns the\n> square matrix of weights in row major order.\"\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode46\ngraphics/convolve.go:46: s := len(k.X)\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> s is unusual. I'd call the variable n.\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode57\ngraphics/convolve.go:57: type fullKernel struct {\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> This can just be:\n> type fullKernel []float64\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode71\ngraphics/convolve.go:71: k := &fullKernel{w: w}\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> return &fullKernel{w: w}, nil\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode193\ngraphics/convolve.go:193: size := int(math.Sqrt(float64(len(w))))\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> Wow, doing a sqrt for each pixel is super-expensive. Pull it out of the loop.\n\nRight, that's why I had size originally calculated in the NewKernel call. I am still tempted to do that. If I had an example of where a convolution kernel where applied to a very large number of small images, I could probably convince you.\n\nFor now I have unrolled convolvePixel as you originally suggested, and deal with factoring in a later CL.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode198\ngraphics/convolve.go:198: if cy < bd.Min.Y || cy >= bd.Max.Y || cx < bd.Min.X || cx >= bd.Max.X {\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> if image.Point{cx, cy}.In(bd) {\n\nNice. Done.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode250\ngraphics/convolve.go:250: case *fullKernel:\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> This should be \"default:\".\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve_test.go\nFile graphics/convolve_test.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve_test.go#newcode31\ngraphics/convolve_test.go:31: func TestCmpFullSeparableKernel(t *testing.T) {\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> I'd just call it TestConvolve.\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve_test.go#newcode38\ngraphics/convolve_test.go:38: t.Error(err)\nOn 2011/10/16 11:20:23, nigeltao wrote:\n> t.Fatal(err) and drop the return on the next line. Similarly below.\n\nCheers, I hadn't seen Fatal.",
			"disapproval": false,
			"date": "2011-10-16 15:26:48.726749",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode28\ngraphics/convolve.go:28: // to int(math.Sqrt(len(Weights()))), the weight at (x,y) starts\n\"int(math.Sqrt(len(Weights())))\" is awkward. Just say that \"Weights returns the square matrix of weights in row major order.\"\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode46\ngraphics/convolve.go:46: s := len(k.X)\ns is unusual. I'd call the variable n.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode57\ngraphics/convolve.go:57: type fullKernel struct {\nThis can just be:\ntype fullKernel []float64\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode71\ngraphics/convolve.go:71: k := &fullKernel{w: w}\nreturn &fullKernel{w: w}, nil\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode193\ngraphics/convolve.go:193: size := int(math.Sqrt(float64(len(w))))\nWow, doing a sqrt for each pixel is super-expensive. Pull it out of the loop.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode198\ngraphics/convolve.go:198: if cy < bd.Min.Y || cy >= bd.Max.Y || cx < bd.Min.X || cx >= bd.Max.X {\nif image.Point{cx, cy}.In(bd) {\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve.go#newcode250\ngraphics/convolve.go:250: case *fullKernel:\nThis should be \"default:\".\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve_test.go\nFile graphics/convolve_test.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve_test.go#newcode31\ngraphics/convolve_test.go:31: func TestCmpFullSeparableKernel(t *testing.T) {\nI'd just call it TestConvolve.\n\nhttp://codereview.appspot.com/5212042/diff/11001/graphics/convolve_test.go#newcode38\ngraphics/convolve_test.go:38: t.Error(err)\nt.Fatal(err) and drop the return on the next line. Similarly below.",
			"disapproval": false,
			"date": "2011-10-16 11:20:23.277645",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve.go#newcode57\ngraphics/convolve.go:57: func (k *fullKernel) Weights() []float64 { return *k }\nDrop the two \"*\"s.\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve.go#newcode68\ngraphics/convolve.go:68: var k fullKernel = w\nreturn fullKernel(w), nil\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve_test.go\nFile graphics/convolve_test.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve_test.go#newcode60\ngraphics/convolve_test.go:60: t.Error(err)\nt.Fatal(err)",
			"disapproval": false,
			"date": "2011-10-17 05:26:35.092223",
			"approval": true
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5212042/diff/17002/graphics/convolve.go\nFile graphics/convolve.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve.go#newcode57\ngraphics/convolve.go:57: func (k *fullKernel) Weights() []float64 { return *k }\nOn 2011/10/17 05:26:35, nigeltao wrote:\n> Drop the two \"*\"s.\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve.go#newcode68\ngraphics/convolve.go:68: var k fullKernel = w\nOn 2011/10/17 05:26:35, nigeltao wrote:\n> return fullKernel(w), nil\n\nDone.\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve_test.go\nFile graphics/convolve_test.go (right):\n\nhttp://codereview.appspot.com/5212042/diff/17002/graphics/convolve_test.go#newcode60\ngraphics/convolve_test.go:60: t.Error(err)\nOn 2011/10/17 05:26:35, nigeltao wrote:\n> t.Fatal(err)\n\nDone.",
			"disapproval": false,
			"date": "2011-10-21 01:09:42.140377",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as c1ee317244e6 ***\n\ngraphics: generalized convolution\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5212042",
			"disapproval": false,
			"date": "2011-10-21 01:15:36.861438",
			"approval": false
		}
	],
	"owner_email": "crawshaw@google.com",
	"private": false,
	"base_url": "",
	"owner": "crawshaw1",
	"subject": "code review 5212042: graphics: generalized convolution",
	"created": "2011-10-06 01:18:29.636279",
	"patchsets": [
		1,
		2001,
		1002,
		5003,
		9001,
		11001,
		17002,
		22001,
		25001,
		28001,
		27003
	],
	"modified": "2011-10-21 01:15:39.316777",
	"closed": true,
	"issue": 5212042
}