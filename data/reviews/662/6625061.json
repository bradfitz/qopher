{
	"description": "test/bench/shootout: match gcc architecture to GOARCH\n\nIf we're benchmarking 8g, use gcc -m32.\nIf we're benchmarking 6g, use gcc -m64.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Should we start a timing.log for GOARCH=386 with some chosen measure points?",
			"disapproval": false,
			"date": "2012-10-07 19:37:23.022160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Oct 7, 2012 at 3:37 PM,  <remyoudompheng@gmail.com> wrote:\r\n> Should we start a timing.log for GOARCH=386 with some chosen measure\r\n> points?\r\n\r\nI don't think we need to do that, but I do think we should copy one or\r\ntwo of the FP tests into test/bench/go1.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-10-07 19:38:22.903940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-07 19:32:07.574190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d2bdff3cc2c3 ***\n\ntest/bench/shootout: match gcc architecture to GOARCH\n\nIf we're benchmarking 8g, use gcc -m32.\nIf we're benchmarking 6g, use gcc -m64.\n\nR=golang-dev, bradfitz, minux.ma, remyoudompheng\nCC=golang-dev\nhttp://codereview.appspot.com/6625061",
			"disapproval": false,
			"date": "2012-10-07 19:49:58.980320",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Sun, Oct 7, 2012 at 12:32 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> test/bench/shootout: match gcc architecture to GOARCH\r\n>\r\n> If we're benchmarking 8g, use gcc -m32.\r\n> If we're benchmarking 6g, use gcc -m64.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6625061/<http://codereview.appspot.com/6625061/>\r\n>\r\n> Affected files:\r\n>   M test/bench/shootout/timing.sh\r\n>\r\n>\r\n> Index: test/bench/shootout/timing.sh\r\n> ==============================**==============================**=======\r\n> --- a/test/bench/shootout/timing.**sh\r\n> +++ b/test/bench/shootout/timing.**sh\r\n> @@ -10,6 +10,14 @@\r\n>  GC=\"go tool ${O}g\"\r\n>  LD=\"go tool ${O}l\"\r\n>\r\n> +gccm=\"\"\r\n> +case \"$O\" in\r\n> +8)\r\n> +       gccm=-m32;;\r\n> +6)\r\n> +       gccm=-m64;;\r\n> +esac\r\n> +\r\n>  PATH=.:$PATH\r\n>\r\n>  havegccgo=false\r\n> @@ -78,7 +86,7 @@\r\n>\r\n>  fasta() {\r\n>         runonly echo 'fasta -n 25000000'\r\n> -       run 'gcc -O2 fasta.c' a.out 25000000\r\n> +       run \"gcc $gccm -O2 fasta.c\" a.out 25000000\r\n>         run 'gccgo -O2 fasta.go' a.out -n 25000000      #commented out\r\n> until WriteString is in bufio\r\n>         run 'gc fasta' $O.out -n 25000000\r\n>         run 'gc_B fasta' $O.out -n 25000000\r\n> @@ -88,7 +96,7 @@\r\n>         runonly gcc -O2 fasta.c\r\n>         runonly a.out 25000000 > x\r\n>         runonly echo 'reverse-complement < output-of-fasta-25000000'\r\n> -       run 'gcc -O2 reverse-complement.c' a.out < x\r\n> +       run \"gcc $gccm -O2 reverse-complement.c\" a.out < x\r\n>         run 'gccgo -O2 reverse-complement.go' a.out < x\r\n>         run 'gc reverse-complement' $O.out < x\r\n>         run 'gc_B reverse-complement' $O.out < x\r\n> @@ -97,7 +105,7 @@\r\n>\r\n>  nbody() {\r\n>         runonly echo 'nbody -n 50000000'\r\n> -       run 'gcc -O2 nbody.c -lm' a.out 50000000\r\n> +       run \"gcc $gccm -O2 nbody.c -lm\" a.out 50000000\r\n>         run 'gccgo -O2 nbody.go' a.out -n 50000000\r\n>         run 'gc nbody' $O.out -n 50000000\r\n>         run 'gc_B nbody' $O.out -n 50000000\r\n> @@ -105,7 +113,7 @@\r\n>\r\n>  binarytree() {\r\n>         runonly echo 'binary-tree 15 # too slow to use 20'\r\n> -       run 'gcc -O2 binary-tree.c -lm' a.out 15\r\n> +       run \"gcc $gccm -O2 binary-tree.c -lm\" a.out 15\r\n>         run 'gccgo -O2 binary-tree.go' a.out -n 15\r\n>         run 'gccgo -O2 binary-tree-freelist.go' a.out -n 15\r\n>         run 'gc binary-tree' $O.out -n 15\r\n> @@ -114,7 +122,7 @@\r\n>\r\n>  fannkuch() {\r\n>         runonly echo 'fannkuch 12'\r\n> -       run 'gcc -O2 fannkuch.c' a.out 12\r\n> +       run \"gcc $gccm -O2 fannkuch.c\" a.out 12\r\n>         run 'gccgo -O2 fannkuch.go' a.out -n 12\r\n>         run 'gccgo -O2 fannkuch-parallel.go' a.out -n 12\r\n>         run 'gc fannkuch' $O.out -n 12\r\n> @@ -126,7 +134,7 @@\r\n>         runonly gcc -O2 fasta.c\r\n>         runonly a.out 100000 > x\r\n>         runonly echo 'regex-dna 100000'\r\n> -       run 'gcc -O2 regex-dna.c -lpcre' a.out <x\r\n> +       run \"gcc $gccm -O2 regex-dna.c -lpcre\" a.out <x\r\n>         run 'gccgo -O2 regex-dna.go' a.out <x\r\n>         run 'gccgo -O2 regex-dna-parallel.go' a.out <x\r\n>         run 'gc regex-dna' $O.out <x\r\n> @@ -137,7 +145,7 @@\r\n>\r\n>  spectralnorm() {\r\n>         runonly echo 'spectral-norm 5500'\r\n> -       run 'gcc -O2 spectral-norm.c -lm' a.out 5500\r\n> +       run \"gcc $gccm -O2 spectral-norm.c -lm\" a.out 5500\r\n>         run 'gccgo -O2 spectral-norm.go' a.out -n 5500\r\n>         run 'gc spectral-norm' $O.out -n 5500\r\n>         run 'gc_B spectral-norm' $O.out -n 5500\r\n> @@ -160,7 +168,7 @@\r\n>\r\n>  mandelbrot() {\r\n>         runonly echo 'mandelbrot 16000'\r\n> -       run 'gcc -O2 mandelbrot.c' a.out 16000\r\n> +       run \"gcc $gccm -O2 mandelbrot.c\" a.out 16000\r\n>         run 'gccgo -O2 mandelbrot.go' a.out -n 16000\r\n>         run 'gc mandelbrot' $O.out -n 16000\r\n>         run 'gc_B mandelbrot' $O.out -n 16000\r\n> @@ -168,7 +176,7 @@\r\n>\r\n>  meteor() {\r\n>         runonly echo 'meteor 2098'\r\n> -       run 'gcc -O2 meteor-contest.c' a.out 2098\r\n> +       run \"gcc $gccm -O2 meteor-contest.c\" a.out 2098\r\n>         run 'gccgo -O2 meteor-contest.go' a.out -n 2098\r\n>         run 'gc meteor-contest' $O.out -n 2098\r\n>         run 'gc_B  meteor-contest' $O.out -n 2098\r\n> @@ -176,7 +184,7 @@\r\n>\r\n>  pidigits() {\r\n>         runonly echo 'pidigits 10000'\r\n> -       run 'gcc -O2 pidigits.c -lgmp' a.out 10000\r\n> +       run \"gcc $gccm -O2 pidigits.c -lgmp\" a.out 10000\r\n>         run 'gccgo -O2 pidigits.go' a.out -n 10000\r\n>         run 'gc pidigits' $O.out -n 10000\r\n>         run 'gc_B  pidigits' $O.out -n 10000\r\n> @@ -184,14 +192,14 @@\r\n>\r\n>  threadring() {\r\n>         runonly echo 'threadring 50000000'\r\n> -       run 'gcc -O2 threadring.c -lpthread' a.out 50000000\r\n> +       run \"gcc $gccm -O2 threadring.c -lpthread\" a.out 50000000\r\n>         run 'gccgo -O2 threadring.go' a.out -n 50000000\r\n>         run 'gc threadring' $O.out -n 50000000\r\n>  }\r\n>\r\n>  chameneos() {\r\n>         runonly echo 'chameneos 6000000'\r\n> -       run 'gcc -O2 chameneosredux.c -lpthread' a.out 6000000\r\n> +       run \"gcc $gccm -O2 chameneosredux.c -lpthread\" a.out 6000000\r\n>         run 'gccgo -O2 chameneosredux.go' a.out 6000000\r\n>         run 'gc chameneosredux' $O.out 6000000\r\n>  }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-07 19:34:29.724390",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "as 5g/5c use ARM instructions, it makes sense to force gcc\nto do the same.\n\nhttp://codereview.appspot.com/6625061/diff/4001/test/bench/shootout/timing.sh\nFile test/bench/shootout/timing.sh (right):\n\nhttp://codereview.appspot.com/6625061/diff/4001/test/bench/shootout/timing.sh#newcode18\ntest/bench/shootout/timing.sh:18: gccm=-m64;;\n5)\n   gccm=-marm;;",
			"disapproval": false,
			"date": "2012-10-07 19:36:01.678030",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6625061: test/bench/shootout: match gcc architecture to GOARCH",
	"created": "2012-10-07 19:29:19.867510",
	"patchsets": [
		1,
		2001,
		4001,
		10001
	],
	"modified": "2012-10-07 19:50:00.252450",
	"closed": true,
	"issue": 6625061
}