{
	"description": "go/doc: clean rewrite of go/doc internals\n\nThe implementation is divided into 4 phases:\n1) export filtering of an incoming AST if necessary (exports.go)\n2) reading of a possibly filtered AST (reader.go: type reader)\n3) method set computation (reader.go)\n4) sorting and creation of final documentation (reader.go)\n\nIn contrast to the old implementation, the presentation data\n(Names, Docs, Decls, etc.) are created immediately upon reading\nthe respective AST node. Also, all types are collected (embedded\nor not) in a uniform way.\n\nOnce the entire AST has been processed, all methods and types\nhave been collected and the method sets for each type can be\ncomputed (phase 3).\n\nTo produce the final documentation, the method sets and value\nmaps are sorted.\n\nThere are no API changes. Passes the existing test suite unchanged.",
	"cc": [
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nAlso resolved one of the outstanding TODOs.\n-gri\n\nhttp://codereview.appspot.com/5554044/diff/14012/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/14012/src/pkg/go/doc/reader.go#newcode55\nsrc/pkg/go/doc/reader.go:55: if mset[m.Name] == nil {\nOn 2012/01/24 11:26:23, rog wrote:\n> \tif old := mset[m.Name]; old == nil || m.Level < old.Level {\n> (see comment on collectEmbeddedMethods)\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/14012/src/pkg/go/doc/reader.go#newcode561\nsrc/pkg/go/doc/reader.go:561: // excluded.\nOn 2012/01/24 11:26:23, rog wrote:\n> I don't think this is sufficient. It will still exclude shallower embedded\n> methods that it finds later.\n> \n> One possiblility is that mset.add could add a method if the level is less than\n> the method already stored.\n> \n> It would be good to have some tests to test embedding behaviour specifically.\n\nGood catch. I tried a breadth-first version, but it's a bit more complicated than your suggestion.\nDone.",
			"disapproval": false,
			"date": "2012-01-24 19:23:46.852169",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, sigh. None of the existing code does handle this correctly.\nCurrent output is:\n\n//\nPACKAGE e\n\nIMPORTPATH\n\ttestdata/e\n\nFILENAMES\n\ttestdata/e.go\n\nTYPES\n\t//\n\ttype T struct {\n\t\t// contains filtered or unexported fields\n\t}\n\n\t//\n\tfunc (T) M()\n\nOk, back to the books for this one.\n- gri\n\nOn Tue, Jan 24, 2012 at 2:26 PM, Russ Cox <rsc@golang.org> wrote:\n> type t1 struct{}\n> func (t1) M() {}\n>\n> type t2 struct{}\n> func (t2) M() {}\n>\n> type T struct {\n> \u00a0 \u00a0t1\n> \u00a0 \u00a0t2\n> }\n",
			"disapproval": false,
			"date": "2012-01-24 22:34:30.667416",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 33ba00b4b777 ***\n\ngo/doc: clean rewrite of go/doc internals\n\nThe implementation is divided into 4 phases:\n1) export filtering of an incoming AST if necessary (exports.go)\n2) reading of a possibly filtered AST (reader.go: type reader)\n3) method set computation (reader.go)\n4) sorting and creation of final documentation (reader.go)\n\nIn contrast to the old implementation, the presentation data\n(Names, Docs, Decls, etc.) are created immediately upon reading\nthe respective AST node. Also, all types are collected (embedded\nor not) in a uniform way.\n\nOnce the entire AST has been processed, all methods and types\nhave been collected and the method sets for each type can be\ncomputed (phase 3).\n\nTo produce the final documentation, the method sets and value\nmaps are sorted.\n\nThere are no API changes. Passes the existing test suite unchanged.\n\nR=rsc, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/5554044",
			"disapproval": false,
			"date": "2012-01-25 17:53:30.956408",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Tue, Jan 24, 2012 at 17:13,  <gri@golang.org> wrote:\n> I believe this is correct. If a method m exists at level n, no other\n> method with the same name m should replace m in the set, unless it is at\n> a more shallow level. For the matter of embedding, only top-level\n> methods (level = 0) are considered, so this should be ok.\n\nAre you sure this handles\n\ntype t1 struct{}\nfunc (t1) M() {}\n\ntype t2 struct{}\nfunc (t2) M() {}\n\ntype T struct {\n    t1\n    t2\n}\n\n(T has no M method.)\n",
			"disapproval": false,
			"date": "2012-01-24 22:26:06.016963",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM modulo the comment below.\n\nhttp://codereview.appspot.com/5554044/diff/14012/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/14012/src/pkg/go/doc/reader.go#newcode55\nsrc/pkg/go/doc/reader.go:55: if mset[m.Name] == nil {\n\tif old := mset[m.Name]; old == nil || m.Level < old.Level {\n(see comment on collectEmbeddedMethods)\n\nhttp://codereview.appspot.com/5554044/diff/14012/src/pkg/go/doc/reader.go#newcode561\nsrc/pkg/go/doc/reader.go:561: // excluded.\nI don't think this is sufficient. It will still exclude shallower embedded methods that it finds later.\n\nOne possiblility is that mset.add could add a method if the level is less than the method already stored.\n\nIt would be good to have some tests to test embedding behaviour specifically.",
			"disapproval": false,
			"date": "2012-01-24 11:26:23.114733",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nAdded extra test cases.\n\nAt this point, this new implementation is more comprehensive and\ncorrect than the old code.\n\n- gri\n\nOn Tue, Jan 24, 2012 at 2:34 PM, Robert Griesemer <gri@golang.org> wrote:\n> Ah, sigh. None of the existing code does handle this correctly.\n> Current output is:\n>\n> //\n> PACKAGE e\n>\n> IMPORTPATH\n> \u00a0 \u00a0 \u00a0 \u00a0testdata/e\n>\n> FILENAMES\n> \u00a0 \u00a0 \u00a0 \u00a0testdata/e.go\n>\n> TYPES\n> \u00a0 \u00a0 \u00a0 \u00a0//\n> \u00a0 \u00a0 \u00a0 \u00a0type T struct {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// contains filtered or unexported fields\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0//\n> \u00a0 \u00a0 \u00a0 \u00a0func (T) M()\n>\n> Ok, back to the books for this one.\n> - gri\n>\n> On Tue, Jan 24, 2012 at 2:26 PM, Russ Cox <rsc@golang.org> wrote:\n>> type t1 struct{}\n>> func (t1) M() {}\n>>\n>> type t2 struct{}\n>> func (t2) M() {}\n>>\n>> type T struct {\n>> \u00a0 \u00a0t1\n>> \u00a0 \u00a0t2\n>> }\n",
			"disapproval": false,
			"date": "2012-01-24 23:34:46.338553",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-01-24 01:55:12.017206",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/doc.go#newcode8\nsrc/pkg/go/doc/doc.go:8: import \"go/ast\"\nimport (\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/exports.go\nFile src/pkg/go/doc/exports.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/exports.go#newcode11\nsrc/pkg/go/doc/exports.go:11: func filterIdentList(list []*ast.Ident) []*ast.Ident {\n// filterIdentList removes unexported names from list in place and returns the resulting list.\n\nPlease add doc comments to every function in this file, especially filterFieldList.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode27\nsrc/pkg/go/doc/reader.go:27: func (mset methodSet) set(f *ast.FuncDecl) {\ns/set/addFunc/?\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode30\nsrc/pkg/go/doc/reader.go:30: // a function with the same name has already been registered;\ns/a/A/\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode32\nsrc/pkg/go/doc/reader.go:32: // implementation and ignore it\ns/$/.  This does not happen if the caller is using\nbuild.ScanDir to determine the list of files implementing\na package.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode57\nsrc/pkg/go/doc/reader.go:57: // already contains a method with the same name at the same or a higher\nIf it contains a method with the same name at the same level,\nshouldn't the method get marked as unavailable?\nCan't just delete from mset, or else three methods at the same level\nwould use the third.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode66\nsrc/pkg/go/doc/reader.go:66: func (mset methodSet) sortedFuncs() []*Func {\ns/sortedF/f/\n\nThe important part is that it returns the functions in the set;\nthe fact that they are sorted is secondary.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode81\nsrc/pkg/go/doc/reader.go:81: func (mset methodSet) sortedMethods() []*Method {\ns/sortedM/m/\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode102\nsrc/pkg/go/doc/reader.go:102: func baseTypeName(x ast.Expr) (string, bool) {\n(name string, imported bool)\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode126\nsrc/pkg/go/doc/reader.go:126: doc   string\n// doc comment for type\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode127\nsrc/pkg/go/doc/reader.go:127: name  string\n// name of type (excluding package qualifier)\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode129\nsrc/pkg/go/doc/reader.go:129: order int\n// ?\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode142\nsrc/pkg/go/doc/reader.go:142: embedded.isEmbedded = true\ns/embedded/e/ ?\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode161\nsrc/pkg/go/doc/reader.go:161: filenames []string\ns/filenames/files/\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode171\nsrc/pkg/go/doc/reader.go:171: // isVisible returns true if name is visible in the documentation;\ns/returns true if/reports whether the/\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode172\nsrc/pkg/go/doc/reader.go:172: // otherwise it returns false.\nthen can delete this\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode202\nsrc/pkg/go/doc/reader.go:202: // but collect all of them since there are more then one.\ns/since/if/\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode212\nsrc/pkg/go/doc/reader.go:212: names := make([]string, len(specs)) // reasonable estimate\ns/,/, 0,/\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode222\nsrc/pkg/go/doc/reader.go:222: func (r *reader) readValue(decl *ast.GenDecl) {\n// readValue processes a var or const decl\n?\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode290\nsrc/pkg/go/doc/reader.go:290: // fields returns the list of fields for a struct or interface type.\nfields returns a struct's fields or an interface's methods.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode306\nsrc/pkg/go/doc/reader.go:306: func (r *reader) readType(decl *ast.GenDecl, spec *ast.TypeSpec) {\n// readType processes a type decl.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode347\nsrc/pkg/go/doc/reader.go:347: func (r *reader) readFunc(fun *ast.FuncDecl) {\n// readFunc processes a func or method decl.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode487\nsrc/pkg/go/doc/reader.go:487: // result is the same on different machines (32/64bit)\nresult does not depend on map iteration order\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode651\nsrc/pkg/go/doc/reader.go:651: func sortedImports(m map[string]int) []string {\nsortedKeys?\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode662\nsrc/pkg/go/doc/reader.go:662: func sortName(d *ast.GenDecl) string {\n// sortName returns the name to use when sorting d into place.\n\n(I thought it was actually sorting the specs inside d until I read the code.)",
			"disapproval": false,
			"date": "2012-01-24 19:43:39.586409",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI left out comments for some of the simpler functions in exports.go because they are a) internal and b) documenting them ends accurately ends up in more text then code (at least when I do it...).\n\n- gri\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/doc.go#newcode8\nsrc/pkg/go/doc/doc.go:8: import \"go/ast\"\nOn 2012/01/24 19:43:39, rsc wrote:\n> import (\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/exports.go\nFile src/pkg/go/doc/exports.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/exports.go#newcode11\nsrc/pkg/go/doc/exports.go:11: func filterIdentList(list []*ast.Ident) []*ast.Ident {\nOn 2012/01/24 19:43:39, rsc wrote:\n> // filterIdentList removes unexported names from list in place and returns the\n> resulting list.\n> \n> Please add doc comments to every function in this file, especially\n> filterFieldList.\n> \n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode27\nsrc/pkg/go/doc/reader.go:27: func (mset methodSet) set(f *ast.FuncDecl) {\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/set/addFunc/?\n\nPrefer to just leave it as \"set\", especially considering that Method may go away soon.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode30\nsrc/pkg/go/doc/reader.go:30: // a function with the same name has already been registered;\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/a/A/\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode32\nsrc/pkg/go/doc/reader.go:32: // implementation and ignore it\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/$/.  This does not happen if the caller is using\n> build.ScanDir to determine the list of files implementing\n> a package.  \n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode57\nsrc/pkg/go/doc/reader.go:57: // already contains a method with the same name at the same or a higher\nOn 2012/01/24 19:43:39, rsc wrote:\n> If it contains a method with the same name at the same level,\n> shouldn't the method get marked as unavailable?\n> Can't just delete from mset, or else three methods at the same level\n> would use the third.\n\nI believe this is correct. If a method m exists at level n, no other method with the same name m should replace m in the set, unless it is at a more shallow level. For the matter of embedding, only top-level methods (level = 0) are considered, so this should be ok.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode66\nsrc/pkg/go/doc/reader.go:66: func (mset methodSet) sortedFuncs() []*Func {\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/sortedF/f/\n> \n> The important part is that it returns the functions in the set;\n> the fact that they are sorted is secondary.\n\nPrefer to leave as is. Once Method is gone, there's only one of these functions, and what it does is return the sorted list of methods/funcs.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode81\nsrc/pkg/go/doc/reader.go:81: func (mset methodSet) sortedMethods() []*Method {\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/sortedM/m/\n\nsee above.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode102\nsrc/pkg/go/doc/reader.go:102: func baseTypeName(x ast.Expr) (string, bool) {\nOn 2012/01/24 19:43:39, rsc wrote:\n> (name string, imported bool)\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode126\nsrc/pkg/go/doc/reader.go:126: doc   string\nOn 2012/01/24 19:43:39, rsc wrote:\n> // doc comment for type\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode127\nsrc/pkg/go/doc/reader.go:127: name  string\nOn 2012/01/24 19:43:39, rsc wrote:\n> // name of type (excluding package qualifier)\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode129\nsrc/pkg/go/doc/reader.go:129: order int\nOn 2012/01/24 19:43:39, rsc wrote:\n> // ?\n\nfield removed\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode142\nsrc/pkg/go/doc/reader.go:142: embedded.isEmbedded = true\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/embedded/e/ ?\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode161\nsrc/pkg/go/doc/reader.go:161: filenames []string\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/filenames/files/\n\nLeaving as filenames in sync w/ the field in type Package.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode171\nsrc/pkg/go/doc/reader.go:171: // isVisible returns true if name is visible in the documentation;\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/returns true if/reports whether the/\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode172\nsrc/pkg/go/doc/reader.go:172: // otherwise it returns false.\nOn 2012/01/24 19:43:39, rsc wrote:\n> then can delete this\n> \n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode202\nsrc/pkg/go/doc/reader.go:202: // but collect all of them since there are more then one.\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/since/if/\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode212\nsrc/pkg/go/doc/reader.go:212: names := make([]string, len(specs)) // reasonable estimate\nOn 2012/01/24 19:43:39, rsc wrote:\n> s/,/, 0,/\ngood catch!\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode222\nsrc/pkg/go/doc/reader.go:222: func (r *reader) readValue(decl *ast.GenDecl) {\nOn 2012/01/24 19:43:39, rsc wrote:\n> // readValue processes a var or const decl\n> ?\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode290\nsrc/pkg/go/doc/reader.go:290: // fields returns the list of fields for a struct or interface type.\nOn 2012/01/24 19:43:39, rsc wrote:\n> fields returns a struct's fields or an interface's methods.\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode306\nsrc/pkg/go/doc/reader.go:306: func (r *reader) readType(decl *ast.GenDecl, spec *ast.TypeSpec) {\nOn 2012/01/24 19:43:39, rsc wrote:\n> // readType processes a type decl.\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode347\nsrc/pkg/go/doc/reader.go:347: func (r *reader) readFunc(fun *ast.FuncDecl) {\nOn 2012/01/24 19:43:39, rsc wrote:\n> // readFunc processes a func or method decl.\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode487\nsrc/pkg/go/doc/reader.go:487: // result is the same on different machines (32/64bit)\nOn 2012/01/24 19:43:39, rsc wrote:\n> result does not depend on map iteration order\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode651\nsrc/pkg/go/doc/reader.go:651: func sortedImports(m map[string]int) []string {\nOn 2012/01/24 19:43:39, rsc wrote:\n> sortedKeys?\n\nDone.\n\nhttp://codereview.appspot.com/5554044/diff/15019/src/pkg/go/doc/reader.go#newcode662\nsrc/pkg/go/doc/reader.go:662: func sortName(d *ast.GenDecl) string {\nOn 2012/01/24 19:43:39, rsc wrote:\n> // sortName returns the name to use when sorting d into place.\n> \n> (I thought it was actually sorting the specs inside d until I read the code.)\n\nDone.",
			"disapproval": false,
			"date": "2012-01-24 22:13:52.903671",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5554044: go/doc: clean rewrite of go/doc internals",
	"created": "2012-01-18 00:10:33.352101",
	"patchsets": [
		1,
		1002,
		3001,
		5001,
		6001,
		6002,
		7001,
		12,
		1009,
		8004,
		19,
		9001,
		2019,
		10004,
		11001,
		8008,
		10008,
		14001,
		16001,
		18001,
		15013,
		17004,
		14005,
		15014,
		14006,
		17008,
		14007,
		14008,
		20019,
		14012,
		18017,
		15019,
		14016,
		19013,
		17014
	],
	"modified": "2012-01-25 17:53:32.374694",
	"closed": true,
	"issue": 5554044
}