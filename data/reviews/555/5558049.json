{
	"description": "runtime: add type algorithms for zero-sized types\nBenchmarkChanSem old=127ns new=78.6ns",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"sameer@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 19, 2012 at 7:32 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n> On Thu, Jan 19, 2012 at 7:30 AM, <dvyukov@google.com> wrote:\n>\n>> On 2012/01/19 15:22:00, dvyukov wrote:\n>>\n>>> On Thu, Jan 19, 2012 at 7:15 PM, Brad Fitzpatrick\n>>>\n>> <bradfitz@golang.org>wrote:\n>>\n>>  > I'm curious how this came up. Did you actually have a program where\n>>>\n>> copy\n>>\n>>> > zero-sized values around was noticeable?  :-)\n>>>\n>>\n>>  Yes, it is a synthetic benchmark for something else :) I've noticed a\n>>>\n>> weird\n>>\n>>> difference in performance I can't explain when I assign 42 and\n>>>\n>> struct{} to\n>>\n>>> interface{}. For 42 specialized type algorithm kicks in, for struct{}\n>>>\n>> it\n>>\n>>> does not and so it is 2 times slower while the object is actually\n>>> infinitely smaller.\n>>>\n>>\n>> Btw, currently struct{} maps to AMEM0, so it's possible to define\n>> map[struct{}]int which makes very little sense (most likely a\n>> programming error). Don't we want to do something with it?\n>>\n>\n> map[string{}]int is actually kinda cool:  you can think of it as an\n> integer that may not be set.\n>\n\ner, map[struct{}]int, rather\n",
			"disapproval": false,
			"date": "2012-01-19 15:32:52.744497",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 19, 2012 at 7:38 PM, Sameer Ajmani <sameer@golang.org> wrote:\n\n> That's creepy and cool at the same time. But I expected *X is a better\n> implementation of \"optional X\" than map[struct{}]X.\n>\n\nOr perhaps struct { isset bool; val int}\n\n\n>  On Jan 19, 2012 10:33 AM, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\n>\n>>\n>>\n>> On Thu, Jan 19, 2012 at 7:32 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n>>\n>>> On Thu, Jan 19, 2012 at 7:30 AM, <dvyukov@google.com> wrote:\n>>>\n>>>> On 2012/01/19 15:22:00, dvyukov wrote:\n>>>>\n>>>>> On Thu, Jan 19, 2012 at 7:15 PM, Brad Fitzpatrick\n>>>>>\n>>>> <bradfitz@golang.org>wrote:\n>>>>\n>>>>  > I'm curious how this came up. Did you actually have a program where\n>>>>>\n>>>> copy\n>>>>\n>>>>> > zero-sized values around was noticeable?  :-)\n>>>>>\n>>>>\n>>>>  Yes, it is a synthetic benchmark for something else :) I've noticed a\n>>>>>\n>>>> weird\n>>>>\n>>>>> difference in performance I can't explain when I assign 42 and\n>>>>>\n>>>> struct{} to\n>>>>\n>>>>> interface{}. For 42 specialized type algorithm kicks in, for struct{}\n>>>>>\n>>>> it\n>>>>\n>>>>> does not and so it is 2 times slower while the object is actually\n>>>>> infinitely smaller.\n>>>>>\n>>>>\n>>>> Btw, currently struct{} maps to AMEM0, so it's possible to define\n>>>> map[struct{}]int which makes very little sense (most likely a\n>>>> programming error). Don't we want to do something with it?\n>>>>\n>>>\n>>> map[string{}]int is actually kinda cool:  you can think of it as an\n>>> integer that may not be set.\n>>>\n>>\n>> er, map[struct{}]int, rather\n>>\n>\n",
			"disapproval": false,
			"date": "2012-01-19 15:46:23.358458",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 19, 2012 at 7:30 AM, <dvyukov@google.com> wrote:\n\n> On 2012/01/19 15:22:00, dvyukov wrote:\n>\n>> On Thu, Jan 19, 2012 at 7:15 PM, Brad Fitzpatrick\n>>\n> <bradfitz@golang.org>wrote:\n>\n>  > I'm curious how this came up. Did you actually have a program where\n>>\n> copy\n>\n>> > zero-sized values around was noticeable?  :-)\n>>\n>\n>  Yes, it is a synthetic benchmark for something else :) I've noticed a\n>>\n> weird\n>\n>> difference in performance I can't explain when I assign 42 and\n>>\n> struct{} to\n>\n>> interface{}. For 42 specialized type algorithm kicks in, for struct{}\n>>\n> it\n>\n>> does not and so it is 2 times slower while the object is actually\n>> infinitely smaller.\n>>\n>\n> Btw, currently struct{} maps to AMEM0, so it's possible to define\n> map[struct{}]int which makes very little sense (most likely a\n> programming error). Don't we want to do something with it?\n>\n\nmap[string{}]int is actually kinda cool:  you can think of it as an integer\nthat may not be set.\n",
			"disapproval": false,
			"date": "2012-01-19 15:32:16.868417",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/19 15:22:00, dvyukov wrote:\n> On Thu, Jan 19, 2012 at 7:15 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n> \n> > I'm curious how this came up. Did you actually have a program where copy\n> > zero-sized values around was noticeable?  :-)\n> \n> Yes, it is a synthetic benchmark for something else :) I've noticed a weird\n> difference in performance I can't explain when I assign 42 and struct{} to\n> interface{}. For 42 specialized type algorithm kicks in, for struct{} it\n> does not and so it is 2 times slower while the object is actually\n> infinitely smaller.\n\nBtw, currently struct{} maps to AMEM0, so it's possible to define map[struct{}]int which makes very little sense (most likely a programming error). Don't we want to do something with it?",
			"disapproval": false,
			"date": "2012-01-19 15:30:27.173989",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-01-19 20:24:35.237096",
			"approval": true
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's creepy and cool at the same time. But I expected *X is a better\nimplementation of \"optional X\" than map[struct{}]X.\nOn Jan 19, 2012 10:33 AM, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\n\n>\n>\n> On Thu, Jan 19, 2012 at 7:32 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n>\n>> On Thu, Jan 19, 2012 at 7:30 AM, <dvyukov@google.com> wrote:\n>>\n>>> On 2012/01/19 15:22:00, dvyukov wrote:\n>>>\n>>>> On Thu, Jan 19, 2012 at 7:15 PM, Brad Fitzpatrick\n>>>>\n>>> <bradfitz@golang.org>wrote:\n>>>\n>>>  > I'm curious how this came up. Did you actually have a program where\n>>>>\n>>> copy\n>>>\n>>>> > zero-sized values around was noticeable?  :-)\n>>>>\n>>>\n>>>  Yes, it is a synthetic benchmark for something else :) I've noticed a\n>>>>\n>>> weird\n>>>\n>>>> difference in performance I can't explain when I assign 42 and\n>>>>\n>>> struct{} to\n>>>\n>>>> interface{}. For 42 specialized type algorithm kicks in, for struct{}\n>>>>\n>>> it\n>>>\n>>>> does not and so it is 2 times slower while the object is actually\n>>>> infinitely smaller.\n>>>>\n>>>\n>>> Btw, currently struct{} maps to AMEM0, so it's possible to define\n>>> map[struct{}]int which makes very little sense (most likely a\n>>> programming error). Don't we want to do something with it?\n>>>\n>>\n>> map[string{}]int is actually kinda cool:  you can think of it as an\n>> integer that may not be set.\n>>\n>\n> er, map[struct{}]int, rather\n>\n",
			"disapproval": false,
			"date": "2012-01-19 15:38:57.761972",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-19 15:05:13.511784",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm curious how this came up. Did you actually have a program where copy\nzero-sized values around was noticeable?  :-)\n\nOn Thu, Jan 19, 2012 at 7:05 AM, <dvyukov@google.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> runtime: add type algorithms for zero-sized types\n> BenchmarkChanSem old=127ns new=78.6ns\n>\n> Please review this at http://codereview.appspot.com/**5558049/<http://codereview.appspot.com/5558049/>\n>\n> Affected files:\n>  M src/cmd/gc/go.h\n>  M src/cmd/gc/subr.c\n>  M src/pkg/runtime/alg.c\n>  M src/pkg/runtime/chan_test.go\n>  M src/pkg/runtime/runtime.h\n>\n>\n> Index: src/cmd/gc/go.h\n> ==============================**==============================**=======\n> --- a/src/cmd/gc/go.h\n> +++ b/src/cmd/gc/go.h\n> @@ -40,12 +40,14 @@\n>        // These values are known by runtime.\n>        // The MEMx and NOEQx values must run in parallel.  See algtype.\n>        AMEM            = 0,\n> +       AMEM0,\n>        AMEM8,\n>        AMEM16,\n>        AMEM32,\n>        AMEM64,\n>        AMEM128,\n>        ANOEQ,\n> +       ANOEQ0,\n>        ANOEQ8,\n>        ANOEQ16,\n>        ANOEQ32,\n> Index: src/cmd/gc/subr.c\n> ==============================**==============================**=======\n> --- a/src/cmd/gc/subr.c\n> +++ b/src/cmd/gc/subr.c\n> @@ -586,6 +586,8 @@\n>                if(isslice(t))\n>                        return ASLICE;\n>                switch(t->width) {\n> +               case 0:\n> +                       return a + AMEM0 - AMEM;\n>                case 1:\n>                        return a + AMEM8 - AMEM;\n>                case 2:\n> Index: src/pkg/runtime/alg.c\n> ==============================**==============================**=======\n> --- a/src/pkg/runtime/alg.c\n> +++ b/src/pkg/runtime/alg.c\n> @@ -89,6 +89,23 @@\n>  }\n>\n>  void\n> +runtime\u00b7memequal0(bool *eq, uintptr s, void *a, void *b)\n> +{\n> +       USED(s);\n> +       USED(a);\n> +       USED(b);\n> +       *eq = true;\n> +}\n> +\n> +void\n> +runtime\u00b7memcopy0(uintptr s, void *a, void *b)\n> +{\n> +       USED(s);\n> +       USED(a);\n> +       USED(b);\n> +}\n> +\n> +void\n>  runtime\u00b7memequal8(bool *eq, uintptr s, void *a, void *b)\n>  {\n>        USED(s);\n> @@ -332,11 +349,13 @@\n>  [AINTER]       { runtime\u00b7interhash, runtime\u00b7interequal,\n> runtime\u00b7interprint, runtime\u00b7intercopy },\n>  [ANILINTER]    { runtime\u00b7nilinterhash, runtime\u00b7nilinterequal,\n> runtime\u00b7nilinterprint, runtime\u00b7nilintercopy },\n>  [ASLICE]       { runtime\u00b7nohash, runtime\u00b7noequal, runtime\u00b7memprint,\n> runtime\u00b7slicecopy },\n> +[AMEM0]                { runtime\u00b7memhash, runtime\u00b7memequal0,\n> runtime\u00b7memprint, runtime\u00b7memcopy0 },\n>  [AMEM8]                { runtime\u00b7memhash, runtime\u00b7memequal8,\n> runtime\u00b7memprint, runtime\u00b7memcopy8 },\n>  [AMEM16]       { runtime\u00b7memhash, runtime\u00b7memequal16, runtime\u00b7memprint,\n> runtime\u00b7memcopy16 },\n>  [AMEM32]       { runtime\u00b7memhash, runtime\u00b7memequal32, runtime\u00b7memprint,\n> runtime\u00b7memcopy32 },\n>  [AMEM64]       { runtime\u00b7memhash, runtime\u00b7memequal64, runtime\u00b7memprint,\n> runtime\u00b7memcopy64 },\n>  [AMEM128]      { runtime\u00b7memhash, runtime\u00b7memequal128, runtime\u00b7memprint,\n> runtime\u00b7memcopy128 },\n> +[ANOEQ0]       { runtime\u00b7nohash, runtime\u00b7noequal, runtime\u00b7memprint,\n> runtime\u00b7memcopy0 },\n>  [ANOEQ8]       { runtime\u00b7nohash, runtime\u00b7noequal, runtime\u00b7memprint,\n> runtime\u00b7memcopy8 },\n>  [ANOEQ16]      { runtime\u00b7nohash, runtime\u00b7noequal, runtime\u00b7memprint,\n> runtime\u00b7memcopy16 },\n>  [ANOEQ32]      { runtime\u00b7nohash, runtime\u00b7noequal, runtime\u00b7memprint,\n> runtime\u00b7memcopy32 },\n> Index: src/pkg/runtime/chan_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/runtime/chan_test.go\n> +++ b/src/pkg/runtime/chan_test.go\n> @@ -371,3 +371,12 @@\n>                <-c\n>        }\n>  }\n> +\n> +func BenchmarkChanSem(b *testing.B) {\n> +       type Empty struct{}\n> +       c := make(chan Empty, 1)\n> +       for i := 0; i < b.N; i++ {\n> +               c <- Empty{}\n> +               <-c\n> +       }\n> +}\n> Index: src/pkg/runtime/runtime.h\n> ==============================**==============================**=======\n> --- a/src/pkg/runtime/runtime.h\n> +++ b/src/pkg/runtime/runtime.h\n> @@ -358,12 +358,14 @@\n>  enum\n>  {\n>        AMEM,\n> +       AMEM0,\n>        AMEM8,\n>        AMEM16,\n>        AMEM32,\n>        AMEM64,\n>        AMEM128,\n>        ANOEQ,\n> +       ANOEQ0,\n>        ANOEQ8,\n>        ANOEQ16,\n>        ANOEQ32,\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-19 15:15:16.913682",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 19, 2012 at 7:15 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n> I'm curious how this came up. Did you actually have a program where copy\n> zero-sized values around was noticeable?  :-)\n\n\nYes, it is a synthetic benchmark for something else :) I've noticed a weird\ndifference in performance I can't explain when I assign 42 and struct{} to\ninterface{}. For 42 specialized type algorithm kicks in, for struct{} it\ndoes not and so it is 2 times slower while the object is actually\ninfinitely smaller.\n",
			"disapproval": false,
			"date": "2012-01-19 15:22:00.474426",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"sameer@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f131dc18714a ***\n\nruntime: add type algorithms for zero-sized types\nBenchmarkChanSem old=127ns new=78.6ns\n\nR=golang-dev, bradfitz, sameer, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5558049",
			"disapproval": false,
			"date": "2012-01-20 06:33:01.156334",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5558049: runtime: add type algorithms for zero-sized types",
	"created": "2012-01-19 14:52:53.664139",
	"patchsets": [
		1,
		2001,
		3,
		4,
		8001,
		2007
	],
	"modified": "2012-01-20 06:33:02.335359",
	"closed": true,
	"issue": 5558049
}