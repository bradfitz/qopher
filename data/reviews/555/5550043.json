{
	"description": "crypto/hmac: Add HMAC-SHA224 and HMAC-SHA384/512\n\nFirst was, apart from adding tests, a single line of code (to add the\nconstructor function). Adding SHA512-based hashing to crypto/hmac\nrequired minor rework of the package because of a previously hardcoded\nblock-size in it's implementation. Instead of using a hash.Hash\ngenerator function the constructor function now uses a crypto.Hash\ntype, which was extended to expose information about block size.\n\nThe only standard library package impacted by the change is\ncrypto/tls, for which the fix is included in this patch. It might be\nuseful to extend gofix to include this API change too.",
	"cc": [
		"agl@golang.org",
		"r@google.com",
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-17 22:27:24.431131",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now with CC: rsc, agl1 \n\n(sorry if you're not the right people to CC)",
			"disapproval": false,
			"date": "2012-01-17 22:48:51.866756",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 14:56:58, rsc wrote:\n> Please delete the additional import and helpers from crypto/hmac\n> in this CL.  Then this CL is only about making hmac work with\n> larger hashes (a certain improvement), and not about changing\n> the API (a less certain one).\n\nWill do. What about SHA256? And if that one is left in, SHA224? That one is practically the same thing...\n\nAlso, I'll rewrite the HMAC test cases to still enable testing bigger hashes. \n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 14:59:27.918646",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is it then. Who should be on CC for the future issue about possible dropping of NewMD5, NewSHA1 and NewSHA256?\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 15:21:28.209257",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 15:27:39, rsc wrote:\n> LGTM\n> \n> I will send the release note change separately.\n\nThanks. On a related note: is there a quicker way to build and test the std library on changes like this? $GOROOT/src/all.bash takes an immensely long time...",
			"disapproval": false,
			"date": "2012-01-18 15:32:24.349636",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The implication of the crypto API change is that for some\ncrypto.Hash h, h.BlockSize() != h.New().BlockSize()\n(otherwise you would not need an API change).\nWhy does that make sense?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-17 22:56:29.594034",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/17 23:25:41, agl1 wrote:\n> On Tue, Jan 17, 2012 at 6:23 PM,  <mailto:luitvd@gmail.com> wrote:\n> > It starting to look like there could better be a type BlockHash\n> > interface{hash.Hash;BlockSize()} implemented by MD5, SHA, et-al\n> \n> If we stuck interface BlockHash in crypto then I think I'd be ok with that.\n> \n> \n> Cheers\n> \n> AGL\n\nI'll get to that tomorrow! (in some 10 hours)\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-17 23:27:51.681356",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, r@google.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-18 09:44:30.800759",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, r@google.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-18 10:00:04.748200",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, r@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-18 15:12:24.340951",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 10:21,  <luitvd@gmail.com> wrote:\n> I think this is it then. Who should be on CC for the future issue about\n> possible dropping of NewMD5, NewSHA1 and NewSHA256?\n\nYou can just send it to golang-dev, but I think it is unlikely.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 15:21:57.774784",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure I fully understand what you're trying to say, but for h crypto.Hash; h.New() doesn't have a BlockSize method... Are you saying it should have one, so hash.Hash needs to be expanded?\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-17 23:07:56.382230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 09:53,  <luitvd@gmail.com> wrote:\n> Because I can't write one myself I'm not sure, but I think having gofix\n> add a simple rewrite takes out close to all the pain dropping NewSHA1\n> and NewMD5 could inflict.\n>\n> Of course, it's up to you (not just rsc specifically, just the Go core\n> team I mean)\n>\n> What do you (again, Go core team) want me to do?\n\nPlease delete the additional import and helpers from crypto/hmac\nin this CL.  Then this CL is only about making hmac work with\nlarger hashes (a certain improvement), and not about changing\nthe API (a less certain one).\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 14:56:58.607097",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "again, API change needs to be mentioned in go 1 release notes",
			"disapproval": false,
			"date": "2012-01-18 15:23:23.606046",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI will send the release note change separately.\n",
			"disapproval": false,
			"date": "2012-01-18 15:27:39.343085",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all.bash does important things for the developers,\nso the 2 minutes (or something like that) is probably\nreasonable there.  However, you are right that all.bash\nis too slow for ordinary Go users who just want to write\na Go program.  For that use case we will have binary\ndownloads before long.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 19:49:15.297025",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> The implication of the crypto API change is that for some\n> crypto.Hash h, h.BlockSize() != h.New().BlockSize()\n\nBut there isn't an h.BlockSize() because there's no BlockSize method on hash.Hash.\n\nhttp://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/crypto.go\nFile src/pkg/crypto/crypto.go (right):\n\nhttp://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/crypto.go#newcode64\nsrc/pkg/crypto/crypto.go:64: // size. It doesn't require that the hash function in question in question be\ntypo.\n\nhttp://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/hmac/hmac.go\nFile src/pkg/crypto/hmac/hmac.go (right):\n\nhttp://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/hmac/hmac.go#newcode72\nsrc/pkg/crypto/hmac/hmac.go:72: hm.size = hm.inner.Size()\nif h.New() returns nil, this will crash. It's also worth noting in the function comment that it will return nil if the hash function isn't linked in.",
			"disapproval": false,
			"date": "2012-01-17 23:08:00.379513",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What do you propose to fix the nil-returning New()?\n\nhttp://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/hmac/hmac.go\nFile src/pkg/crypto/hmac/hmac.go (right):\n\nhttp://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/hmac/hmac.go#newcode72\nsrc/pkg/crypto/hmac/hmac.go:72: hm.size = hm.inner.Size()\nI did add the underscore-imports for at least md5 and the sha-variations... still, fair points",
			"disapproval": false,
			"date": "2012-01-17 23:15:56.483589",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 17, 2012 at 6:23 PM,  <luitvd@gmail.com> wrote:\n> It starting to look like there could better be a type BlockHash\n> interface{hash.Hash;BlockSize()} implemented by MD5, SHA, et-al\n\nIf we stuck interface BlockHash in crypto then I think I'd be ok with that.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-01-17 23:25:41.169138",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 9:12 AM,  <rsc@golang.org> wrote:\n> I think the changes look fine, except that I do not want\n> to expand the crypto/hmac API, as I explained in my mail\n> earlier.\n\nI would prefer if we added a crypto.BlockHash interface with the added\nBlockSize() rather than adding to hash.Hash. The crypto hash functions\ncan return crypto.BlockHash, which would be compatible with hash.Hash\nwhere needed. BlockSize is just a really obscure method for hash.Hash\nto have.\n\n(I'll do the work rather than messing luitvd around.)\n\nrsc: if you really prefer adding to hash.Hash, I wont fight it.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-01-18 14:21:25.836819",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I realise it's close to Go 1, but after Go 1 it'll be impossible. Just my 2 cents.\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 14:54:38.760569",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 18, 2012, at 11:04 AM, luitvd@gmail.com wrote:\n\n> On 2012/01/18 15:35:17, r2 wrote:\n>> It takes a two or three minutes for me. \"Immensely long\" times for\n> software\n>> build in my experience implies times measured in hours or even days\n> (sic). So,\n>> does all.bash take you hours? If so, please explain.\n> \n>> -rob\n> \n> Yeah, well, Go pretty much is my point of reference for compile time I\n> guess, so I was indeed referring to the 2 to 3 minutes all.bash takes to\n> run the full build. I think I remember this took much less time a year\n> ago.\n\nI won't argue with you, but I don't believe it's that much different. The build has gotten bigger but there's been a lot of work to reduce testing times as a compensation. Still, I agree that all.bash takes longer than we'd like.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-01-18 19:13:53.927869",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/crypto.go\nFile src/pkg/crypto/crypto.go (right):\n\nhttp://codereview.appspot.com/5550043/diff/2001/src/pkg/crypto/crypto.go#newcode64\nsrc/pkg/crypto/crypto.go:64: // size. It doesn't require that the hash function in question in question be\nOn 2012/01/17 23:08:00, agl1 wrote:\n> typo.\n\nDone.",
			"disapproval": false,
			"date": "2012-01-17 23:17:45.098382",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 15:35:17, r2 wrote:\n> It takes a two or three minutes for me. \"Immensely long\" times for software\n> build in my experience implies times measured in hours or even days (sic). So,\n> does all.bash take you hours? If so, please explain.\n> \n> -rob\n\nYeah, well, Go pretty much is my point of reference for compile time I guess, so I was indeed referring to the 2 to 3 minutes all.bash takes to run the full build. I think I remember this took much less time a year ago. \n\n\"Immensely long\" was a bit of an overstatement, but it's pretty useless to re-build the whole compiler suite when I'm only hacking on the standard lib. I just wanted a make install && gotest for each package in standard lib, so I can run the full suite only for the final check before sending in a patch-set. Don't need a clean set of compilers for every test case I add or modify. \n\nAlso, this is a quote I'm going to remember: \n\n\"I am pleased that we have created a system where two minutes feels like an immensely long time.\" - rsc\n\nThat feat is part of why I enjoy trying to help out this language. I hope I'm doing well. Thanks guys!\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 19:04:03.415889",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-17 23:17:12.651453",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, r@google.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-18 09:40:40.518977",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm done now. I'm sorry if the volume of messages in this thread bothers anyone. \n\nRuss, I went ahead and did just that: hash.Hash now has `BlockSize() int` and everything broken in std by that change now seems to work again. I don't think this change in API (like for exp/ssh) can be gofix-able. Then again, I'm not sure exactly what gofix is capable of.\n\nAs for the NewSHA(224|384|512) functions, I'm not sure what is best. Maybe even RIPEMD should be included. If it's an easy thing for gofix to do though, I'd rather see them all go, and just have hmac.New(h func() hash.Hash, key) in there. \n\nIMHO hmac.New(sha1.New, key) is nicer than hmac.NewSHA1(key). It'll also avoid importing md5 and sha256 (and sha512 now) for nothing. I think it's a good thing to just scratch them all. We do need a gofix then. Any other thoughts about that?\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 10:11:16.296659",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the changes look fine, except that I do not want\nto expand the crypto/hmac API, as I explained in my mail\nearlier.\n\nThanks.\nRuss\n\nhttp://codereview.appspot.com/5550043/diff/11002/src/pkg/crypto/hmac/hmac.go\nFile src/pkg/crypto/hmac/hmac.go (right):\n\nhttp://codereview.appspot.com/5550043/diff/11002/src/pkg/crypto/hmac/hmac.go#newcode15\nsrc/pkg/crypto/hmac/hmac.go:15: \"crypto/sha512\"\nPlease delete.  I do not want to add more imports here.\n\nhttp://codereview.appspot.com/5550043/diff/11002/src/pkg/crypto/hmac/hmac.go#newcode92\nsrc/pkg/crypto/hmac/hmac.go:92: // NewSHA224 returns a new HMAC-SHA224 hash using the given key.\nDelete.\n\nhttp://codereview.appspot.com/5550043/diff/11002/src/pkg/crypto/hmac/hmac.go#newcode98\nsrc/pkg/crypto/hmac/hmac.go:98: // NewSHA384 returns a new HMAC-SHA384 hash using the given key.\nDelete.\n\nhttp://codereview.appspot.com/5550043/diff/11002/src/pkg/crypto/hmac/hmac.go#newcode101\nsrc/pkg/crypto/hmac/hmac.go:101: // NewSHA512 returns a new HMAC-SHA512 hash using the given key.\nDelete.",
			"disapproval": false,
			"date": "2012-01-18 14:11:59.716758",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 14:11:59, rsc wrote:\n> I think the changes look fine, except that I do not want\n> to expand the crypto/hmac API, as I explained in my mail\n> earlier.\n\nAgreed. Still, IMHO NewSHA256 then also doesn't deserve the special position... And what's the real benefit of having hmac.NewSHA1(key) instead of hmac.New(sha1.New, key)? Removing NewMD5, NewSHA1 and NewSHA256 would be something of which gofix could easily avert breaking stuff, and it's much cleaner (I don't need MD5, SHA1 and SHA256 linked into my program when only using HMAC-SHA-512).\n\nFair?\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 14:20:16.713283",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Don't really mind that as much, AGL, as I learn with every step in this.\n\nStill, I started off trying to implement it as crypto.BlockHash interface (as I proposed in this thread earlier), though trying this made me realize Russ's proposal seemed a cleaner fix to me. Still, I agree it's between you and rsc to decide I guess.\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 14:28:58.588025",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 09:20,  <luitvd@gmail.com> wrote:\n> Agreed. Still, IMHO NewSHA256 then also doesn't deserve the special\n> position... And what's the real benefit of having hmac.NewSHA1(key)\n> instead of hmac.New(sha1.New, key)? Removing NewMD5, NewSHA1 and\n> NewSHA256 would be something of which gofix could easily avert breaking\n> stuff, and it's much cleaner (I don't need MD5, SHA1 and SHA256 linked\n> into my program when only using HMAC-SHA-512).\n\nI agree that it is cleaner, but I don't want to change the existing API.\nWe've gotten to the point where we are trying to minimize the\nadditional pain inflicted on client code, and I expect that NewSHA1\nand NewMD5 are commonly used.  We could probably drop NewSHA256\nbut at this point I'd rather just leave it in.  The win is not big enough to\njustify the churn.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 14:38:51.169222",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 15:36:32, rsc wrote:\n> *** Submitted as http://code.google.com/p/go/source/detail?r=728321e6dbea ***\n> \n> crypto/hmac: Add HMAC-SHA224 and HMAC-SHA384/512\n> \n> First was, apart from adding tests, a single line of code (to add the\n> constructor function). Adding SHA512-based hashing to crypto/hmac\n> required minor rework of the package because of a previously hardcoded\n> block-size in it's implementation. Instead of using a hash.Hash\n> generator function the constructor function now uses a crypto.Hash\n> type, which was extended to expose information about block size.\n> \n> The only standard library package impacted by the change is\n> crypto/tls, for which the fix is included in this patch. It might be\n> useful to extend gofix to include this API change too.\n> \n> R=agl, r, rsc, r\n> CC=golang-dev\n> http://codereview.appspot.com/5550043\n> \n> Committer: Russ Cox <mailto:rsc@golang.org>\n\nShoot, the original commit message doesn't really apply anymore... can't go back now? ... it's a bit confusing at best, but IMHO just plain wrong now... Didn't look at it after the first patch-set commit...\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 15:45:27.335009",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I need to be talked into any API changes looming. Go 1 is in the pipe.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-17 23:26:56.364461",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/17 23:26:56, r2 wrote:\n> I need to be talked into any API changes looming. Go 1 is in the pipe.\n> \n> -rob\n> \n\nI'll update this issue on that too, tomorrow. It'll only hit crypto/hmac AFAICS. Also, I think it would be nice if someone could write a gofix for this too. I'm not sure I'm able to.",
			"disapproval": false,
			"date": "2012-01-17 23:30:44.850973",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 03:02:08, rsc wrote:\n> I think the simplest thing is to expand hash.Hash to include\n> \n> At that point, no changes are necessary in the API of\n> any other package.  crypto/hmac can keep its API and\n> use the new BlockSize method to address the TODO.\n\nIsn't changing hash.Hash an API change too? I think adding a new interface (either crypto.BlockHash or hash.BlockHash) as hash.Hash + BlockSize() might be better, having (md5|sha1|sha256|etc.).New() return that interface type, which will cleanly work as hash.Hash, so no real change on how it's used. We still need the API change in the crypto/hmac package, but it's much more minor than what I proposed in these patches so far.\n\n> \n> I do not believe that we should add SHA224, SHA384,\n> and SHA512 functions to the crypto/hmac package.\n> These are easily done with hmac.New(sha224.New, key)\n> once we have addressed the block size issue, and requiring\n> that invocation keeps from setting the precedent that\n> every possible hash function is linked in with crypto/hmac.\n> \n> Russ\n\nSHA-224 is in the crypto/sha256 package, so does that really matter that much? Also, there's only five approved hash functions for HMAC (and probably one legacy approved hash function, MD5), so that's just the md5, sha1, sha256 and sha512 packages being included... Excluding SHA-512 but including SHA-256 seems odd to me, so I'd vouch for taking out any hash functions, or just including the approved ones (but all of them). That would still be a gofix-able situation I think, but I'm not sure because I can't write a gofix rule (yet?).\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 08:38:11.005461",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 09:41:45, Luit wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:agl@golang.org, mailto:r@google.com (cc:\n> mailto:golang-dev@googlegroups.com, mailto:rsc@golang.org),\n> \n> Please take another look.\n\nMy apologies for the mail volume, I am doing something wrong; it's not including the new changes I made to files that are not in the original patch. Trying again.\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 09:43:13.608221",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/17 23:15:56, Luit wrote:\n> What do you propose to fix the nil-returning New()?\n\nThe NewXXX functions can't fail, which is fine. But I think that New() should now return a (hash.Hash, bool) in order to make it very clear that it can fail.",
			"disapproval": false,
			"date": "2012-01-17 23:18:25.008807",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I spent a while looking at this and toying with different\nchanges that would make these possible.\n\nI think the simplest thing is to expand hash.Hash to include\n\n// BlockSize returns the hash's underlying block size.\n// The Write method must be able to accept any amount\n// of data, but it may operate more efficiently if all writes\n// are a multiple of the block size.\nBlockSize() int\n\nThat will require adding BlockSize methods that return 1\nin adler32, crc32, crc64, and fnv, but that is easily done.\n\nAt that point, no changes are necessary in the API of\nany other package.  crypto/hmac can keep its API and\nuse the new BlockSize method to address the TODO.\n\nI do not believe that we should add SHA224, SHA384,\nand SHA512 functions to the crypto/hmac package.\nThese are easily done with hmac.New(sha224.New, key)\nonce we have addressed the block size issue, and requiring\nthat invocation keeps from setting the precedent that\nevery possible hash function is linked in with crypto/hmac.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 03:02:08.471170",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, r@google.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-18 09:41:45.956214",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 09:21, Adam Langley <agl@golang.org> wrote:\n> I would prefer if we added a crypto.BlockHash interface with the added\n> BlockSize() rather than adding to hash.Hash. The crypto hash functions\n> can return crypto.BlockHash, which would be compatible with hash.Hash\n> where needed. BlockSize is just a really obscure method for hash.Hash\n> to have.\n>\n> (I'll do the work rather than messing luitvd around.)\n>\n> rsc: if you really prefer adding to hash.Hash, I wont fight it.\n\nI really do prefer it.  At this point we are trying to minimize API churn,\nand splitting the concept of hash.Hash into two distinct concepts would\ncause significantly more churn than adding this new method does.\nEveryone writing code would have to decide whether they want to use\na hash.Hash or a crypto.BlockHash, and the effect will ripple through\nall the client code.\n\nLike with time.Time, I think the benefits of having a single concept\n(just hash.Hash, not separately hash.Hash and crypto.BlockHash)\noutweigh the inconvenience of defining BlockSize on CRC-32.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 14:34:56.912197",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Because I can't write one myself I'm not sure, but I think having gofix add a simple rewrite takes out close to all the pain dropping NewSHA1 and NewMD5 could inflict. \n\nOfcourse, it's up to you (not just rsc specifically, just the Go core team I mean)\n\nWhat do you (again, Go core team) want me to do?\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 14:53:42.886827",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 09:59,  <luitvd@gmail.com> wrote:\n> Will do. What about SHA256? And if that one is left in, SHA224? That one\n> is practically the same thing...\n\nLet's leave the API alone for now.\n\n> Also, I'll rewrite the HMAC test cases to still enable testing bigger\n> hashes.\n\nSounds good.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 15:00:11.908902",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 18, 2012, at 7:32 AM, luitvd@gmail.com wrote:\n\n> On 2012/01/18 15:27:39, rsc wrote:\n>> LGTM\n> \n>> I will send the release note change separately.\n> \n> Thanks. On a related note: is there a quicker way to build and test the\n> std library on changes like this? $GOROOT/src/all.bash takes an\n> immensely long time...\n\nIt takes a two or three minutes for me. \"Immensely long\" times for software build in my experience implies times measured in hours or even days (sic). So, does all.bash take you hours? If so, please explain.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-01-18 15:35:17.746120",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/18 19:13:53, r2 wrote:\n> I won't argue with you, but I don't believe it's that much different. The build\n> has gotten bigger but there's been a lot of work to reduce testing times as a\n> compensation. Still, I agree that all.bash takes longer than we'd like.\n\nOh, please correct me if I'm wrong, I can handle it. To be fair, I can't imagine you making an invalid point on anything related to this.\n\nI guess it's just my perception of the speed settling from \"damn it's fast!\" down to a more modest \"it's fast!\", making it feel like a slow-down, even though it could very well be the opposite. \n\nI think I should choose my words more carefully.\n\nCheers,\n-Luit",
			"disapproval": false,
			"date": "2012-01-18 19:44:49.665635",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/17 23:18:25, agl1 wrote:\n> The NewXXX functions can't fail, which is fine. But I think that New() should\n> now return a (hash.Hash, bool) in order to make it very clear that it can fail.\n\nIt starting to look like there could better be a type BlockHash interface{hash.Hash;BlockSize()} implemented by MD5, SHA, et-al",
			"disapproval": false,
			"date": "2012-01-17 23:23:17.971134",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, r@google.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-18 09:50:15.034074",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 18, 2012 at 10:32,  <luitvd@gmail.com> wrote:\n> Thanks. On a related note: is there a quicker way to build and test the\n> std library on changes like this? $GOROOT/src/all.bash takes an\n> immensely long time...\n\nYou can run 'go test std' to repeat the tests if all\nyou've changed is Go code (and not the compilers, etc).\nHowever, running all.bash once in a while is always\na good idea.\n\nI am pleased that we have created a system where\ntwo minutes feels like an immensely long time.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 15:35:45.401932",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=728321e6dbea ***\n\ncrypto/hmac: Add HMAC-SHA224 and HMAC-SHA384/512\n\nFirst was, apart from adding tests, a single line of code (to add the\nconstructor function). Adding SHA512-based hashing to crypto/hmac\nrequired minor rework of the package because of a previously hardcoded\nblock-size in it's implementation. Instead of using a hash.Hash\ngenerator function the constructor function now uses a crypto.Hash\ntype, which was extended to expose information about block size.\n\nThe only standard library package impacted by the change is\ncrypto/tls, for which the fix is included in this patch. It might be\nuseful to extend gofix to include this API change too.\n\nR=agl, r, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5550043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-01-18 15:36:32.444576",
			"approval": false
		}
	],
	"owner_email": "luitvd@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Luit",
	"subject": "code review 5550043: crypto/hmac: Add HMAC-SHA224 and HMAC-SHA384/512",
	"created": "2012-01-17 16:51:04.748552",
	"patchsets": [
		1,
		2001,
		13001,
		11002,
		10008
	],
	"modified": "2012-01-18 20:16:45.606638",
	"closed": true,
	"issue": 5550043
}