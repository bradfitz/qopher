{
	"description": "test: split golden.out into expected output per test\n\nThis will permit gccgo to check test output.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-18 22:59:02.199816",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5554056/diff/1/test/fixedbugs/bug067.go\nFile test/fixedbugs/bug067.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/fixedbugs/bug067.go#newcode13\ntest/fixedbugs/bug067.go:13: go func() { print(\"ok\\n\"); c <- 0 } ();\nOn 2012/01/18 23:19:49, r wrote:\n> just delete this print\n\nDone.\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx3.go\nFile test/ken/cplx3.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx3.go#newcode25\ntest/ken/cplx3.go:25: println(c)\nOn 2012/01/18 23:19:49, r wrote:\n> delete this print?\n> you could also do\n> r, i := real(c), imag(c)\n> and check that r and i are correct.\n\nRemoved all prints in this test.\n> but also you could leave it alone\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx5.go\nFile test/ken/cplx5.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx5.go#newcode51\ntest/ken/cplx5.go:51: println(m[complex(-5, 5)])\nOn 2012/01/18 23:19:49, r wrote:\n> i think these can all be ifs\n\nDone.\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/intervar.go\nFile test/ken/intervar.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/intervar.go#newcode63\ntest/ken/intervar.go:63: print(\"\\n\");\nOn 2012/01/18 23:19:49, r wrote:\n> return strings instead of print and use a golden string\n\nDone.\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/string.go\nFile test/ken/string.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/string.go#newcode26\ntest/ken/string.go:26: print(a+b, \"-\")\nOn 2012/01/18 23:19:49, r wrote:\n> these prints should be ifs\n\nI don't see the point of removing just some of the prints from this test.  I can go ahead and remove printing a string literal and printing a variable, since they are tested elsewhere anyhow.  Or I can leave the prints alone.  Any opinions?\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/string.go#newcode75\ntest/ken/string.go:75: panic(\"fail\")\nOn 2012/01/18 23:19:49, r wrote:\n> all these prints can be replaced by panics\n\nDone.",
			"disapproval": false,
			"date": "2012-01-18 23:59:32.062615",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=02273fd0c574 ***\n\ntest: split golden.out into expected output per test\n\nThis will permit gccgo to check test output.\n\nR=golang-dev, r\nCC=golang-dev\nhttp://codereview.appspot.com/5554056",
			"disapproval": false,
			"date": "2012-01-19 00:12:28.807384",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'd like as few of these as possible\n\nhttp://codereview.appspot.com/5554056/diff/1/test/fixedbugs/bug067.go\nFile test/fixedbugs/bug067.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/fixedbugs/bug067.go#newcode13\ntest/fixedbugs/bug067.go:13: go func() { print(\"ok\\n\"); c <- 0 } ();\njust delete this print\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx3.go\nFile test/ken/cplx3.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx3.go#newcode25\ntest/ken/cplx3.go:25: println(c)\ndelete this print?\nyou could also do\nr, i := real(c), imag(c)\nand check that r and i are correct.\nbut also you could leave it alone\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx5.go\nFile test/ken/cplx5.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/cplx5.go#newcode51\ntest/ken/cplx5.go:51: println(m[complex(-5, 5)])\ni think these can all be ifs\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/intervar.go\nFile test/ken/intervar.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/intervar.go#newcode63\ntest/ken/intervar.go:63: print(\"\\n\");\nreturn strings instead of print and use a golden string\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/string.go\nFile test/ken/string.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/string.go#newcode26\ntest/ken/string.go:26: print(a+b, \"-\")\nthese prints should be ifs\n\nhttp://codereview.appspot.com/5554056/diff/1/test/ken/string.go#newcode75\ntest/ken/string.go:75: panic(\"fail\")\nall these prints can be replaced by panics\n\nhttp://codereview.appspot.com/5554056/diff/1/test/printbig.go\nFile test/printbig.go (right):\n\nhttp://codereview.appspot.com/5554056/diff/1/test/printbig.go#newcode11\ntest/printbig.go:11: print((1<<63)-1, \"\\n\")\nthis is one of those lovely tests that doesn't say what it's trying to do, but i believe it's testing print and so must stay as it is\n\nplease, folks, put explanatory comments in all tests, at least the new ones you create",
			"disapproval": false,
			"date": "2012-01-18 23:19:48.976190",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-19 00:04:49.511794",
			"approval": true
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 5554056: test: split golden.out into expected output per test",
	"created": "2012-01-18 22:58:55.823570",
	"patchsets": [
		1,
		3002,
		2002
	],
	"modified": "2012-01-19 00:12:30.632213",
	"closed": true,
	"issue": 5554056
}