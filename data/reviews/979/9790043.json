{
	"description": "runtime: inline MCache_Alloc() into mallocgc()\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkMalloc8                    68           62   -8.63%\nBenchmarkMalloc16                   75           69   -7.94%\nBenchmarkMallocTypeInfo8           102           98   -3.73%\nBenchmarkMallocTypeInfo16          108          103   -4.63%",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"khr@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-26 16:33:11.737810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/26 16:33:11, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://dvyukov%2540google.com%40code.google.com/p/go/\n\nThis looks like a good change, do you have an profile data to show how much time mallocgc() was waiting on MCache_Alloc() ?",
			"disapproval": false,
			"date": "2013-05-26 23:57:33.827440",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 27, 2013 at 3:57 AM, <dave@cheney.net> wrote:\r\n\r\n> On 2013/05/26 16:33:11, dvyukov wrote:\r\n>\r\n>> Hello mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>,\r\n>>\r\n>\r\n>  I'd like you to review this change to\r\n>> https://dvyukov%2540google.com**%40code.google.com/p/go/\r\n>>\r\n>\r\n> This looks like a good change, do you have an profile data to show how\r\n> much time mallocgc() was waiting on MCache_Alloc() ?\r\n>\r\n\r\n\r\nWhat do you mean \"time mallocgc() was waiting on MCache_Alloc()\"?\r\nWe save roughly that on the function call:\r\nbenchmark                    old ns/op    new ns/op    delta\r\nBenchmarkMalloc8                    68           62   -8.63%\r\nBenchmarkMalloc16                   75           69   -7.94%\r\nBenchmarkMallocTypeInfo8           102           98   -3.73%\r\nBenchmarkMallocTypeInfo16          108          103   -4.63%\r\n",
			"disapproval": false,
			"date": "2013-05-27 04:22:17.587400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/arm pandaboard\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkMalloc8                   485          462   -4.74%\nBenchmarkMalloc16                  548          526   -4.01%\nBenchmarkMallocTypeInfo8           659          642   -2.58%\nBenchmarkMallocTypeInfo16          714          690   -3.36%\n\nnothing interesting in the go1 benchmarks\n\nalarm(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                         old ns/op    new ns/op    delta\nBenchmarkBinaryTree17           52538428682  50789882119   -3.33%\nBenchmarkFannkuch11             38953379120  38700417265   -0.65%\nBenchmarkFmtFprintfEmpty                963         1002   +4.05%\nBenchmarkFmtFprintfString              2944         2896   -1.63%\nBenchmarkFmtFprintfInt                 2304         2308   +0.17%\nBenchmarkFmtFprintfIntInt              3539         3524   -0.42%\nBenchmarkFmtFprintfPrefixedInt         3806         3772   -0.89%\nBenchmarkFmtFprintfFloat               8308         8102   -2.48%\nBenchmarkFmtManyArgs                  14363        14108   -1.78%\nBenchmarkGobDecode                139490656    135971956   -2.52%\nBenchmarkGobEncode                 69002525     69725796   +1.05%\nBenchmarkGzip                    6480846723   6443431928   -0.58%\nBenchmarkGunzip                   856426485    849669849   -0.79%\nBenchmarkHTTPClientServer            494461       489987   -0.90%\nBenchmarkJSONEncode               690281602    678056181   -1.77%\nBenchmarkJSONDecode              1587260111   1545816969   -2.61%\nBenchmarkMandelbrot200             57216559     57190924   -0.04%\nBenchmarkGoParse                   56833256     56244263   -1.04%\nBenchmarkRegexpMatchEasy0_32           1265         1263   -0.16%\nBenchmarkRegexpMatchEasy0_1K           5113         5103   -0.20%\nBenchmarkRegexpMatchEasy1_32           1331         1323   -0.60%\nBenchmarkRegexpMatchEasy1_1K          12895        12869   -0.20%\nBenchmarkRegexpMatchMedium_32          2386         2393   +0.29%\nBenchmarkRegexpMatchMedium_1K        802739       800649   -0.26%\nBenchmarkRegexpMatchHard_32           42871        42378   -1.15%\nBenchmarkRegexpMatchHard_1K         1320015      1302758   -1.31%\nBenchmarkRevcomp                  125495203    125284630   -0.17%\nBenchmarkTemplate                1478128539   1467233693   -0.74%\nBenchmarkTimeParse                    12890        13032   +1.10%\nBenchmarkTimeFormat                   13037        12213   -6.32%\n\nbenchmark                          old MB/s     new MB/s  speedup\nBenchmarkGobDecode                     5.50         5.64    1.03x\nBenchmarkGobEncode                    11.12        11.01    0.99x\nBenchmarkGzip                          2.99         3.01    1.01x\nBenchmarkGunzip                       22.66        22.84    1.01x\nBenchmarkJSONEncode                    2.81         2.86    1.02x\nBenchmarkJSONDecode                    1.22         1.26    1.03x\nBenchmarkGoParse                       1.02         1.03    1.01x\nBenchmarkRegexpMatchEasy0_32          25.28        25.32    1.00x\nBenchmarkRegexpMatchEasy0_1K         200.27       200.66    1.00x\nBenchmarkRegexpMatchEasy1_32          24.04        24.18    1.01x\nBenchmarkRegexpMatchEasy1_1K          79.41        79.57    1.00x\nBenchmarkRegexpMatchMedium_32          0.42         0.42    1.00x\nBenchmarkRegexpMatchMedium_1K          1.28         1.28    1.00x\nBenchmarkRegexpMatchHard_32            0.75         0.76    1.01x\nBenchmarkRegexpMatchHard_1K            0.78         0.79    1.01x\nBenchmarkRevcomp                      20.25        20.29    1.00x\nBenchmarkTemplate                      1.31         1.32    1.01x",
			"disapproval": false,
			"date": "2013-05-27 11:30:30.479830",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm just wondering if you have a figure for how large the overhead of\r\nthe function call was in relation to the time spent in MCache_Alloc.\r\nLooking at the benchmarks you posted, [4,9) %\r\n\r\nOn Mon, May 27, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Mon, May 27, 2013 at 3:57 AM, <dave@cheney.net> wrote:\r\n>>\r\n>> On 2013/05/26 16:33:11, dvyukov wrote:\r\n>>>\r\n>>> Hello mailto:golang-dev@googlegroups.com,\r\n>>\r\n>>\r\n>>> I'd like you to review this change to\r\n>>> https://dvyukov%2540google.com%40code.google.com/p/go/\r\n>>\r\n>>\r\n>> This looks like a good change, do you have an profile data to show how\r\n>> much time mallocgc() was waiting on MCache_Alloc() ?\r\n>\r\n>\r\n>\r\n> What do you mean \"time mallocgc() was waiting on MCache_Alloc()\"?\r\n> We save roughly that on the function call:\r\n> benchmark                    old ns/op    new ns/op    delta\r\n> BenchmarkMalloc8                    68           62   -8.63%\r\n> BenchmarkMalloc16                   75           69   -7.94%\r\n> BenchmarkMallocTypeInfo8           102           98   -3.73%\r\n> BenchmarkMallocTypeInfo16          108          103   -4.63%\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-27 04:30:50.303020",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 27, 2013 at 8:30 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I'm just wondering if you have a figure for how large the overhead of\r\n> the function call was in relation to the time spent in MCache_Alloc.\r\n> Looking at the benchmarks you posted, [4,9) %\r\n>\r\n\r\nI have not measured exactly. But function calls add significant overhead\r\nwith 6c. In this case it may be 50% or so.\r\n\r\n\r\nOn Mon, May 27, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> > On Mon, May 27, 2013 at 3:57 AM, <dave@cheney.net> wrote:\r\n> >>\r\n> >> On 2013/05/26 16:33:11, dvyukov wrote:\r\n> >>>\r\n> >>> Hello mailto:golang-dev@googlegroups.com,\r\n> >>\r\n> >>\r\n> >>> I'd like you to review this change to\r\n> >>> https://dvyukov%2540google.com%40code.google.com/p/go/\r\n> >>\r\n> >>\r\n> >> This looks like a good change, do you have an profile data to show how\r\n> >> much time mallocgc() was waiting on MCache_Alloc() ?\r\n> >\r\n> >\r\n> >\r\n> > What do you mean \"time mallocgc() was waiting on MCache_Alloc()\"?\r\n> > We save roughly that on the function call:\r\n> > benchmark                    old ns/op    new ns/op    delta\r\n> > BenchmarkMalloc8                    68           62   -8.63%\r\n> > BenchmarkMalloc16                   75           69   -7.94%\r\n> > BenchmarkMallocTypeInfo8           102           98   -3.73%\r\n> > BenchmarkMallocTypeInfo16          108          103   -4.63%\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-27 06:34:52.470960",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Excellent. I think this change is good, but im not skilled enough to review it, however I will try to generate some benchmarks on a variety of systems to validate it. \r\n\r\nOn 27/05/2013, at 16:34, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> On Mon, May 27, 2013 at 8:30 AM, Dave Cheney <dave@cheney.net> wrote:\r\n>> I'm just wondering if you have a figure for how large the overhead of\r\n>> the function call was in relation to the time spent in MCache_Alloc.\r\n>> Looking at the benchmarks you posted, [4,9) %\r\n> \r\n> I have not measured exactly. But function calls add significant overhead with 6c. In this case it may be 50% or so.\r\n> \r\n> \r\n>> On Mon, May 27, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>> > On Mon, May 27, 2013 at 3:57 AM, <dave@cheney.net> wrote:\r\n>> >>\r\n>> >> On 2013/05/26 16:33:11, dvyukov wrote:\r\n>> >>>\r\n>> >>> Hello mailto:golang-dev@googlegroups.com,\r\n>> >>\r\n>> >>\r\n>> >>> I'd like you to review this change to\r\n>> >>> https://dvyukov%2540google.com%40code.google.com/p/go/\r\n>> >>\r\n>> >>\r\n>> >> This looks like a good change, do you have an profile data to show how\r\n>> >> much time mallocgc() was waiting on MCache_Alloc() ?\r\n>> >\r\n>> >\r\n>> >\r\n>> > What do you mean \"time mallocgc() was waiting on MCache_Alloc()\"?\r\n>> > We save roughly that on the function call:\r\n>> > benchmark                    old ns/op    new ns/op    delta\r\n>> > BenchmarkMalloc8                    68           62   -8.63%\r\n>> > BenchmarkMalloc16                   75           69   -7.94%\r\n>> > BenchmarkMallocTypeInfo8           102           98   -3.73%\r\n>> > BenchmarkMallocTypeInfo16          108          103   -4.63%\r\n>> >\r\n>> >\r\n> \r\n",
			"disapproval": false,
			"date": "2013-05-27 07:49:36.811850",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is only a part of series of malloc-related changes.\r\n\r\n\r\n\r\nOn Mon, May 27, 2013 at 11:44 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Excellent. I think this change is good, but im not skilled enough to\r\n> review it, however I will try to generate some benchmarks on a variety of\r\n> systems to validate it.\r\n>\r\n> On 27/05/2013, at 16:34, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>\r\n> On Mon, May 27, 2013 at 8:30 AM, Dave Cheney <dave@cheney.net> wrote:\r\n>\r\n>> I'm just wondering if you have a figure for how large the overhead of\r\n>> the function call was in relation to the time spent in MCache_Alloc.\r\n>> Looking at the benchmarks you posted, [4,9) %\r\n>>\r\n>\r\n> I have not measured exactly. But function calls add significant overhead\r\n> with 6c. In this case it may be 50% or so.\r\n>\r\n>\r\n> On Mon, May 27, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>> > On Mon, May 27, 2013 at 3:57 AM, <dave@cheney.net> wrote:\r\n>> >>\r\n>> >> On 2013/05/26 16:33:11, dvyukov wrote:\r\n>> >>>\r\n>> >>> Hello mailto:golang-dev@googlegroups.com,\r\n>> >>\r\n>> >>\r\n>> >>> I'd like you to review this change to\r\n>> >>> https://dvyukov%2540google.com%40code.google.com/p/go/\r\n>> >>\r\n>> >>\r\n>> >> This looks like a good change, do you have an profile data to show how\r\n>> >> much time mallocgc() was waiting on MCache_Alloc() ?\r\n>> >\r\n>> >\r\n>> >\r\n>> > What do you mean \"time mallocgc() was waiting on MCache_Alloc()\"?\r\n>> > We save roughly that on the function call:\r\n>> > benchmark                    old ns/op    new ns/op    delta\r\n>> > BenchmarkMalloc8                    68           62   -8.63%\r\n>> > BenchmarkMalloc16                   75           69   -7.94%\r\n>> > BenchmarkMallocTypeInfo8           102           98   -3.73%\r\n>> > BenchmarkMallocTypeInfo16          108          103   -4.63%\r\n>> >\r\n>> >\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-27 08:07:35.985330",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-28 06:28:54.688920",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=598c883c08b8 ***\n\nruntime: inline MCache_Alloc() into mallocgc()\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkMalloc8                    68           62   -8.63%\nBenchmarkMalloc16                   75           69   -7.94%\nBenchmarkMallocTypeInfo8           102           98   -3.73%\nBenchmarkMallocTypeInfo16          108          103   -4.63%\n\nR=golang-dev, dave, khr\nCC=golang-dev\nhttps://codereview.appspot.com/9790043",
			"disapproval": false,
			"date": "2013-05-28 07:06:05.944160",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9790043: runtime: inline MCache_Alloc() into mallocgc()",
	"created": "2013-05-26 16:31:32.336690",
	"patchsets": [
		1,
		2001,
		1002,
		7001,
		16001
	],
	"modified": "2013-05-28 07:06:07.245290",
	"closed": true,
	"issue": 9790043
}