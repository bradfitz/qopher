{
	"description": "crypto/sha1: Make sha-1 do block mixup in place\n\nBenchmarks:\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          762          674  -11.55%\nBenchmarkHash1K             8791         7375  -16.11%\nBenchmarkHash8K            65094        54881  -15.69%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes        10.50        11.86    1.13x\nBenchmarkHash1K           116.48       138.84    1.19x\nBenchmarkHash8K           125.85       149.27    1.19x\n",
	"cc": [
		"dave@cheney.net",
		"rsc@golang.org",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"notcarl@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go\nFile src/pkg/crypto/sha1/sha1block.go (right):\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go#newcode35\nsrc/pkg/crypto/sha1/sha1block.go:35: for i := 0; i < 16; i++ {\nlifting i outside the for loop, then not initalising it again lower down gets another 2% on amd64\n\ni := 0\nfor ; i < 16 ; i++\n\nlucky(~/go/src/pkg/crypto/sha1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          863          819   -5.10%\nBenchmarkHash1K            10049         9499   -5.47%\nBenchmarkHash8K            74555        70395   -5.58%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         9.27         9.76    1.05x\nBenchmarkHash1K           101.90       107.80    1.06x\nBenchmarkHash8K           109.88       116.37    1.06x\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go#newcode42\nsrc/pkg/crypto/sha1/sha1block.go:42: for i := 16; i < 20; i++ {\nfor ; i < 20; i++ { .. }\nand so forth",
			"disapproval": false,
			"date": "2012-11-06 04:06:47.846000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please put the current benchcmp numbers in the CL description.\nLeaving for Dave.\n\nThanks.\nRuss",
			"disapproval": false,
			"date": "2012-11-06 19:38:57.985380",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hmmm, i can't replicate your benchmark results. \n\nlinux/amd64: Intel(R) Core(TM) i5-2520M CPU @ 2.50GHz\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          866          824   -4.85%\nBenchmarkHash1K            10058         9520   -5.35%\nBenchmarkHash8K            74567        70953   -4.85%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         9.24         9.71    1.05x\nBenchmarkHash1K           101.81       107.56    1.06x\nBenchmarkHash8K           109.86       115.46    1.05x",
			"disapproval": false,
			"date": "2012-11-06 21:46:54.267390",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-06 01:46:04.226530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good to me. will leave for dfc to lgtm and submit\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go\nFile src/pkg/crypto/sha1/sha1block.go (right):\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go#newcode39\nsrc/pkg/crypto/sha1/sha1block.go:39: t := a5 + f + e + w[i] + _K0\ni&0xf will get you something here.\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go#newcode42\nsrc/pkg/crypto/sha1/sha1block.go:42: for i := 16; i < 20; i++ {\nOn 2012/11/06 04:06:47, dfc wrote:\n> for ; i < 20; i++ { .. }\n> and so forth\n\nFWIW this is unlikely to matter.",
			"disapproval": false,
			"date": "2012-11-06 18:52:06.477100",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks pretty good to me as well. I'll run some benchmarks on 32 bit platforms once mine get through building the overnight changes.\n\nhttps://codereview.appspot.com/6820096/diff/4002/src/pkg/crypto/sha1/sha1block.go\nFile src/pkg/crypto/sha1/sha1block.go (right):\n\nhttps://codereview.appspot.com/6820096/diff/4002/src/pkg/crypto/sha1/sha1block.go#newcode26\nsrc/pkg/crypto/sha1/sha1block.go:26: j := i * 4\nj := i << 2 avoids the imul on intel. The compiler should be smarter about this.",
			"disapproval": false,
			"date": "2012-11-06 22:04:24.587230",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, LGTM.\r\n\r\nOn Wed, Nov 7, 2012 at 10:18 AM, Ian Lance Taylor <iant@google.com> wrote:\r\n> On Tue, Nov 6, 2012 at 3:07 PM,  <dave@cheney.net> wrote:\r\n>> Fair enough. The compiler should be able to do this for us eventually.\r\n>>\r\n>> I know you're a Googler, so most of the CLA process does not apply to\r\n>> you, but have you done whatever is needed on your side ?\r\n>\r\n> To be clear, are you approving this patch?  Let me know.\r\n>\r\n> We just need to get him into CONTRIBUTORS.\r\n>\r\n> Ian\r\n",
			"disapproval": false,
			"date": "2012-11-06 23:18:52.105310",
			"approval": true
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/06 19:38:57, rsc wrote:\n> Please put the current benchcmp numbers in the CL description.\n> Leaving for Dave.\n> \n> Thanks.\n> Russ\n\nDone.",
			"disapproval": false,
			"date": "2012-11-06 19:57:05.534680",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/06 19:08:54, rsc wrote:\n> >> i&0xf will get you something here.\n> >\n> > I am not sure I understand.  Since the loop only goes from [0, 15],\n> > anding with 0xf should be a no-op.\n> \n> The compiler isn't smart enough to recognize that i is guaranteed to\n> be in range here, but &0xf will force it to notice that and avoid the\n> bounds check. It is unlikely to matter much.\n> \n\nI adding this change, and got a small increase in speed.  \n\n\n> >> On 2012/11/06 04:06:47, dfc wrote:\n> >> > for ; i < 20; i++ { .. }\n> >> > and so forth\n> >\n> >> FWIW this is unlikely to matter.\n> >\n> > I was hoping that maybe the compiler saw this.  I didn't unroll the\n> > loops because the compiler should be doing it and it decreases\n> > readability.  In addition, the comments at the top of this file hint at\n> > it not being a priority to make this as fast as possible.\n> \n> Dave suggested a single i instead of 5 different i variables. My\n> comment was only that from a performance standpoint it is unlikely to\n> matter. The compiler does not unroll the loops, and in general I think\n> it is unreasonable to expect it to. The big win you can get from the\n> SHA1 block function is if you unroll the loops 5x and do the variable\n> renamings in each iteration, so that all the rotating assignments\n> disappear. If you want to do this it should be done in a separate CL\n> and the speed gain should justify the increase in code. The last time\n> I looked at this I think it was not quite enough. crypto/md5/gen.go is\n> the program that generates the MD5 block routine. You could use\n> something similar for SHA1.\n> \n> Russ\n\nThe fear is that unrolling the loop means potentially more i-cache misses, so I agree it should be in a future CL.  Hoisting i out of the loop in the meantime showed a little extra gain.",
			"disapproval": false,
			"date": "2012-11-06 19:31:11.415000",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "$ cat /proc/cpuinfo \nprocessor\t: 0\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 44\nmodel name\t: Intel(R) Xeon(R) CPU           W3690  @ 3.47GHz\n...",
			"disapproval": false,
			"date": "2012-11-06 21:50:20.253340",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/06 22:04:24, dfc wrote:\n> Looks pretty good to me as well. I'll run some benchmarks on 32 bit platforms\n> once mine get through building the overnight changes.\n> \n> https://codereview.appspot.com/6820096/diff/4002/src/pkg/crypto/sha1/sha1block.go\n> File src/pkg/crypto/sha1/sha1block.go (right):\n> \n> https://codereview.appspot.com/6820096/diff/4002/src/pkg/crypto/sha1/sha1block.go#newcode26\n> src/pkg/crypto/sha1/sha1block.go:26: j := i * 4\n> j := i << 2 avoids the imul on intel. The compiler should be smarter about this.\n\nI tried changing the variables to unsigned to see if it would change anything.  I also tried adding in the shift instead of the mult, but neither of these two changes affected the results of my benchmarks.  I think it would be safe to leave this alone for now.",
			"disapproval": false,
			"date": "2012-11-06 22:51:01.043170",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-06 02:12:48.149190",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough. The compiler should be able to do this for us eventually.\n\nI know you're a Googler, so most of the CLA process does not apply to you, but have you done whatever is needed on your side ?",
			"disapproval": false,
			"date": "2012-11-06 23:07:38.175040",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"notcarl@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/06 02:12:48, notcarl wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nlucky(~/go/src/pkg/crypto/sha1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          863          831   -3.71%\nBenchmarkHash1K            10049         9693   -3.54%\nBenchmarkHash8K            74555        72132   -3.25%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         9.27         9.62    1.04x\nBenchmarkHash1K           101.90       105.64    1.04x\nBenchmarkHash8K           109.88       113.57    1.03x\n\nI think this can be made a little faster.",
			"disapproval": false,
			"date": "2012-11-06 04:01:37.469650",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the quick review!\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go\nFile src/pkg/crypto/sha1/sha1block.go (right):\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go#newcode39\nsrc/pkg/crypto/sha1/sha1block.go:39: t := a5 + f + e + w[i] + _K0\nOn 2012/11/06 18:52:06, rsc wrote:\n> i&0xf will get you something here.\n\nI am not sure I understand.  Since the loop only goes from [0, 15], anding with 0xf should be a no-op.\n\nhttps://codereview.appspot.com/6820096/diff/6001/src/pkg/crypto/sha1/sha1block.go#newcode42\nsrc/pkg/crypto/sha1/sha1block.go:42: for i := 16; i < 20; i++ {\nOn 2012/11/06 18:52:06, rsc wrote:\n> On 2012/11/06 04:06:47, dfc wrote:\n> > for ; i < 20; i++ { .. }\n> > and so forth\n> \n> FWIW this is unlikely to matter.\n> \n\nI was hoping that maybe the compiler saw this.  I didn't unroll the loops because the compiler should be doing it and it decreases readability.  In addition, the comments at the top of this file hint at it not being a priority to make this as fast as possible.",
			"disapproval": false,
			"date": "2012-11-06 19:02:33.950490",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/06 23:07:38, dfc wrote:\n> Fair enough. The compiler should be able to do this for us eventually.\n> \n> I know you're a Googler, so most of the CLA process does not apply to you, but\n> have you done whatever is needed on your side ?\n\nChecked with other Googlers, I believe I'm good to go.  Thanks for the speedy review!",
			"disapproval": false,
			"date": "2012-11-06 23:23:11.552440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> i&0xf will get you something here.\r\n>\r\n> I am not sure I understand.  Since the loop only goes from [0, 15],\r\n> anding with 0xf should be a no-op.\r\n\r\nThe compiler isn't smart enough to recognize that i is guaranteed to\r\nbe in range here, but &0xf will force it to notice that and avoid the\r\nbounds check. It is unlikely to matter much.\r\n\r\n>> On 2012/11/06 04:06:47, dfc wrote:\r\n>> > for ; i < 20; i++ { .. }\r\n>> > and so forth\r\n>\r\n>> FWIW this is unlikely to matter.\r\n>\r\n> I was hoping that maybe the compiler saw this.  I didn't unroll the\r\n> loops because the compiler should be doing it and it decreases\r\n> readability.  In addition, the comments at the top of this file hint at\r\n> it not being a priority to make this as fast as possible.\r\n\r\nDave suggested a single i instead of 5 different i variables. My\r\ncomment was only that from a performance standpoint it is unlikely to\r\nmatter. The compiler does not unroll the loops, and in general I think\r\nit is unreasonable to expect it to. The big win you can get from the\r\nSHA1 block function is if you unroll the loops 5x and do the variable\r\nrenamings in each iteration, so that all the rotating assignments\r\ndisappear. If you want to do this it should be done in a separate CL\r\nand the speed gain should justify the increase in code. The last time\r\nI looked at this I think it was not quite enough. crypto/md5/gen.go is\r\nthe program that generates the MD5 block routine. You could use\r\nsomething similar for SHA1.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-11-06 19:08:54.156230",
			"approval": false
		},
		{
			"sender": "notcarl@google.com",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-06 19:27:01.699660",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 6, 2012 at 3:07 PM,  <dave@cheney.net> wrote:\r\n> Fair enough. The compiler should be able to do this for us eventually.\r\n>\r\n> I know you're a Googler, so most of the CLA process does not apply to\r\n> you, but have you done whatever is needed on your side ?\r\n\r\nTo be clear, are you approving this patch?  Let me know.\r\n\r\nWe just need to get him into CONTRIBUTORS.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-11-06 23:18:33.305770",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some results from \n\nlinux/arm:\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes         6487         6497   +0.15%\nBenchmarkHash1K            69794        70773   +1.40%\nBenchmarkHash8K           517529       525604   +1.56%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         1.23         1.23    1.00x\nBenchmarkHash1K            14.67        14.47    0.99x\nBenchmarkHash8K            15.83        15.59    0.98x\n\nWasn't expecting much, and it looks like my expectations were met. This is within the margin of error.",
			"disapproval": false,
			"date": "2012-11-06 23:24:36.812310",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"notcarl@google.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1369d7bb329d ***\n\ncrypto/sha1: Make sha-1 do block mixup in place\n\nBenchmarks:\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          762          674  -11.55%\nBenchmarkHash1K             8791         7375  -16.11%\nBenchmarkHash8K            65094        54881  -15.69%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes        10.50        11.86    1.13x\nBenchmarkHash1K           116.48       138.84    1.19x\nBenchmarkHash8K           125.85       149.27    1.19x\n\nR=dave, rsc, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6820096\n\nCommitter: Dave Cheney <dave@cheney.net>",
			"disapproval": false,
			"date": "2012-11-07 02:41:18.065580",
			"approval": false
		}
	],
	"owner_email": "notcarl@google.com",
	"private": false,
	"base_url": "",
	"owner": "notcarl",
	"subject": "code review 6820096: crypto/sha1: Make sha-1 do block mixup in place",
	"created": "2012-11-06 01:42:50.956730",
	"patchsets": [
		1,
		2001,
		6001,
		4002
	],
	"modified": "2012-11-07 19:21:05.401130",
	"closed": true,
	"issue": 6820096
}