{
	"description": "os/exec: add test that fails under race detector.\n\nThis seems like legitimate code to me, and naturally occurs\nif you wrap an *exec.Cmd in something that watches the output.\nI don't know the correct way to solve this race, if it is indeed valid.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"dvyukov@google.com",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 9, 2012 at 2:48 PM, David Symonds <dsymonds@golang.org> wrote:\r\n\r\n> On Fri, Nov 9, 2012 at 9:24 PM,  <dvyukov@google.com> wrote:\r\n>\r\n> > On 2012/11/09 10:22:08, dvyukov wrote:\r\n> >>\r\n> >> Perhaps you need to wait for the output reading goroutine to finish\r\n> >\r\n> > first, and\r\n> >>\r\n> >> only then call cmd.Wait() (merely to free resources).\r\n> >\r\n> >\r\n> > In this case you do not need the goroutine at all -- cmd.Start, read\r\n> > until EOF, cmd.Wait.\r\n>\r\n> The test is a little bit artificial in that regard, but imagine\r\n> passing the pipe off to something else as a plain io.Reader, and then\r\n> independently waiting for the command to finish.\r\n\r\n\r\nDo you mean that plain io.Writer can block and we do not want to wait for\r\nit? Because otherwise it seems fine w/o the goroutine.\r\n\r\n\r\n\r\n> There doesn't feel\r\n> like those should have to be coordinated, which is why I think perhaps\r\n> os/exec needs some locking.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-09 10:57:53.834520",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/09 10:22:08, dvyukov wrote:\n> Perhaps you need to wait for the output reading goroutine to finish first, and\n> only then call cmd.Wait() (merely to free resources).\n\nIn this case you do not need the goroutine at all -- cmd.Start, read until EOF, cmd.Wait.",
			"disapproval": false,
			"date": "2012-11-09 10:24:07.020780",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-11-12 09:28:20.085210",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-09 10:17:58.945540",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 9, 2012 at 9:57 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> Do you mean that plain io.Writer can block and we do not want to wait for\r\n> it? Because otherwise it seems fine w/o the goroutine.\r\n\r\nNo, I mean the operation using the io.Writer (from StdoutPipe) might\r\nbe completely unrelated to the main flow. Imagine, say, some sort of\r\nlogger that's reading from it (until io.EOF), maybe grepping for\r\nsomething, and is running in its own goroutine because it's logically\r\nseparable from the main part of our code, which is only interested in\r\nwaiting for the command to complete. The race can be avoided by the\r\nlogger having some signal to indicate it has reached io.EOF before the\r\nmain part calls cmd.Wait, but I'm suggesting that that should not be\r\nnecessary.\r\n",
			"disapproval": false,
			"date": "2012-11-09 11:02:48.186140",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Perhaps you need to wait for the output reading goroutine to finish first, and only then call cmd.Wait() (merely to free resources).",
			"disapproval": false,
			"date": "2012-11-09 10:22:08.857060",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 9, 2012 at 9:24 PM,  <dvyukov@google.com> wrote:\r\n\r\n> On 2012/11/09 10:22:08, dvyukov wrote:\r\n>>\r\n>> Perhaps you need to wait for the output reading goroutine to finish\r\n>\r\n> first, and\r\n>>\r\n>> only then call cmd.Wait() (merely to free resources).\r\n>\r\n>\r\n> In this case you do not need the goroutine at all -- cmd.Start, read\r\n> until EOF, cmd.Wait.\r\n\r\nThe test is a little bit artificial in that regard, but imagine\r\npassing the pipe off to something else as a plain io.Reader, and then\r\nindependently waiting for the command to finish. There doesn't feel\r\nlike those should have to be coordinated, which is why I think perhaps\r\nos/exec needs some locking.\r\n",
			"disapproval": false,
			"date": "2012-11-09 10:48:21.504720",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, if there is code out there that is relying on Wait to close the\r\npipe, then it will leak.\r\nThree points though:\r\n- We're fixing a bug (IMHO), and that's allowed.\r\n- Most reasonable code is going to see that StdoutPipe is returning an\r\nio.ReadCloser,\r\nand close it anyway.\r\n- It's not a permanent leak - the finalizer will get it eventually.\r\n\r\nOn 12 November 2012 09:07, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Mon, Nov 12, 2012 at 1:02 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n>>\r\n>> I think this is issue 4290.\r\n>>\r\n>> I have a CL that fixes it: https://codereview.appspot.com/6789043/\r\n>> (I have been waiting for a reply for a while now, as I'm not entirely\r\n>> sure about one aspect).\r\n>>\r\n>> Dmitry: waiting for the output reading goroutine to finish first is not\r\n>> always sufficient - when and whether you will get EOF on the output is\r\n>> actually independent of when Wait terminates (the process you've started\r\n>> may close its stdout early; or it may fork another process that keeps\r\n>> the pipe open while the original exits).\r\n>>\r\n>> I believe it's just wrong that Wait closes the client side of the pipe,\r\n>> as it means it is almost never correct to call Wait while\r\n>> reading from the output pipe. I think this will be the source of bugs in\r\n>> quite a few programs, but I am willing to be persuaded otherwise.\r\n>>\r\n>\r\n>\r\n> Doesn't your patch change public API and break existing programs? I mean it\r\n> may lead to leaked decriptors.\r\n>\r\n>\r\n>>\r\n>>\r\n>> On 9 November 2012 10:17,  <dsymonds@golang.org> wrote:\r\n>> > Reviewers: bradfitz, dvyukov,\r\n>> >\r\n>> > Message:\r\n>> > Hello bradfitz, dvyukov@google.com (cc: golang-dev@googlegroups.com),\r\n>> >\r\n>> > I'd like you to review this change to\r\n>> > https://code.google.com/p/go\r\n>> >\r\n>> >\r\n>> > Description:\r\n>> > os/exec: add test that fails under race detector.\r\n>> >\r\n>> > This seems like legitimate code to me, and naturally occurs\r\n>> > if you wrap an *exec.Cmd in something that watches the output.\r\n>> > I don't know the correct way to solve this race, if it is indeed valid.\r\n>> >\r\n>> > Please review this at http://codereview.appspot.com/6821099/\r\n>> >\r\n>> > Affected files:\r\n>> >   M src/pkg/os/exec/exec_test.go\r\n>> >\r\n>> >\r\n>> > Index: src/pkg/os/exec/exec_test.go\r\n>> > ===================================================================\r\n>> > --- a/src/pkg/os/exec/exec_test.go\r\n>> > +++ b/src/pkg/os/exec/exec_test.go\r\n>> > @@ -265,6 +265,44 @@\r\n>> >         }\r\n>> >  }\r\n>> >\r\n>> > +func TestConcurrentReadWait(t *testing.T) {\r\n>> > +       // Test that it is safe to concurrently read stdout and wait for\r\n>> > a\r\n>> > process to finish.\r\n>> > +       cmd := helperCommand(\"echo\", \"foo\")\r\n>> > +       out, err := cmd.StdoutPipe()\r\n>> > +       if err != nil {\r\n>> > +               t.Fatalf(\"cmd.StdoutPipe: %v\", err)\r\n>> > +       }\r\n>> > +\r\n>> > +       rd := make(chan string)\r\n>> > +       go func() {\r\n>> > +               r := bufio.NewReader(out)\r\n>> > +               var s string\r\n>> > +               for {\r\n>> > +                       line, _, err := r.ReadLine()\r\n>> > +                       if err != nil {\r\n>> > +                               if err != io.EOF {\r\n>> > +                                       t.Errorf(\"ReadLine: %v\", err)\r\n>> > +                               }\r\n>> > +                               break\r\n>> > +                       }\r\n>> > +                       s += string(line)\r\n>> > +               }\r\n>> > +               rd <- s\r\n>> > +       }()\r\n>> > +\r\n>> > +       if err := cmd.Start(); err != nil {\r\n>> > +               t.Fatalf(\"cmd.Start: %v\", err)\r\n>> > +       }\r\n>> > +       if err := cmd.Wait(); err != nil {\r\n>> > +               t.Fatalf(\"cmd.Wait: %v\", err)\r\n>> > +       }\r\n>> > +       s := <-rd\r\n>> > +\r\n>> > +       if s != \"foo\" {\r\n>> > +               t.Errorf(`Command output was %q, want \"foo\"`, s)\r\n>> > +       }\r\n>> > +}\r\n>> > +\r\n>> >  // TestHelperProcess isn't a real test. It's used as a helper process\r\n>> >  // for TestParameterRun.\r\n>> >  func TestHelperProcess(*testing.T) {\r\n>> >\r\n>> >\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-12 10:58:28.555330",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 9, 2012 at 3:02 PM, David Symonds <dsymonds@golang.org> wrote:\r\n\r\n> On Fri, Nov 9, 2012 at 9:57 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>\r\n> > Do you mean that plain io.Writer can block and we do not want to wait for\r\n> > it? Because otherwise it seems fine w/o the goroutine.\r\n>\r\n> No, I mean the operation using the io.Writer (from StdoutPipe) might\r\n> be completely unrelated to the main flow. Imagine, say, some sort of\r\n> logger that's reading from it (until io.EOF), maybe grepping for\r\n> something, and is running in its own goroutine because it's logically\r\n> separable from the main part of our code, which is only interested in\r\n> waiting for the command to complete. The race can be avoided by the\r\n> logger having some signal to indicate it has reached io.EOF before the\r\n> main part calls cmd.Wait, but I'm suggesting that that should not be\r\n> necessary.\r\n>\r\n\r\n\r\nYou can wrap the pipe into Writer that will automatically signal waiting\r\ngoroutine. Then you can pass it to the logger.\r\nIt can be done in os.exec as well. It may have some problems if the user\r\ndoes not read from the pipe till EOF, though.\r\n",
			"disapproval": false,
			"date": "2012-11-09 11:11:02.747050",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is issue 4290.\r\n\r\nI have a CL that fixes it: https://codereview.appspot.com/6789043/\r\n(I have been waiting for a reply for a while now, as I'm not entirely\r\nsure about one aspect).\r\n\r\nDmitry: waiting for the output reading goroutine to finish first is not\r\nalways sufficient - when and whether you will get EOF on the output is\r\nactually independent of when Wait terminates (the process you've started\r\nmay close its stdout early; or it may fork another process that keeps\r\nthe pipe open while the original exits).\r\n\r\nI believe it's just wrong that Wait closes the client side of the pipe,\r\nas it means it is almost never correct to call Wait while\r\nreading from the output pipe. I think this will be the source of bugs in\r\nquite a few programs, but I am willing to be persuaded otherwise.\r\n\r\n\r\nOn 9 November 2012 10:17,  <dsymonds@golang.org> wrote:\r\n> Reviewers: bradfitz, dvyukov,\r\n>\r\n> Message:\r\n> Hello bradfitz, dvyukov@google.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> os/exec: add test that fails under race detector.\r\n>\r\n> This seems like legitimate code to me, and naturally occurs\r\n> if you wrap an *exec.Cmd in something that watches the output.\r\n> I don't know the correct way to solve this race, if it is indeed valid.\r\n>\r\n> Please review this at http://codereview.appspot.com/6821099/\r\n>\r\n> Affected files:\r\n>   M src/pkg/os/exec/exec_test.go\r\n>\r\n>\r\n> Index: src/pkg/os/exec/exec_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/os/exec/exec_test.go\r\n> +++ b/src/pkg/os/exec/exec_test.go\r\n> @@ -265,6 +265,44 @@\r\n>         }\r\n>  }\r\n>\r\n> +func TestConcurrentReadWait(t *testing.T) {\r\n> +       // Test that it is safe to concurrently read stdout and wait for a\r\n> process to finish.\r\n> +       cmd := helperCommand(\"echo\", \"foo\")\r\n> +       out, err := cmd.StdoutPipe()\r\n> +       if err != nil {\r\n> +               t.Fatalf(\"cmd.StdoutPipe: %v\", err)\r\n> +       }\r\n> +\r\n> +       rd := make(chan string)\r\n> +       go func() {\r\n> +               r := bufio.NewReader(out)\r\n> +               var s string\r\n> +               for {\r\n> +                       line, _, err := r.ReadLine()\r\n> +                       if err != nil {\r\n> +                               if err != io.EOF {\r\n> +                                       t.Errorf(\"ReadLine: %v\", err)\r\n> +                               }\r\n> +                               break\r\n> +                       }\r\n> +                       s += string(line)\r\n> +               }\r\n> +               rd <- s\r\n> +       }()\r\n> +\r\n> +       if err := cmd.Start(); err != nil {\r\n> +               t.Fatalf(\"cmd.Start: %v\", err)\r\n> +       }\r\n> +       if err := cmd.Wait(); err != nil {\r\n> +               t.Fatalf(\"cmd.Wait: %v\", err)\r\n> +       }\r\n> +       s := <-rd\r\n> +\r\n> +       if s != \"foo\" {\r\n> +               t.Errorf(`Command output was %q, want \"foo\"`, s)\r\n> +       }\r\n> +}\r\n> +\r\n>  // TestHelperProcess isn't a real test. It's used as a helper process\r\n>  // for TestParameterRun.\r\n>  func TestHelperProcess(*testing.T) {\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-12 09:02:05.897420",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 12, 2012 at 1:02 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n\r\n> I think this is issue 4290.\r\n>\r\n> I have a CL that fixes it: https://codereview.appspot.com/6789043/\r\n> (I have been waiting for a reply for a while now, as I'm not entirely\r\n> sure about one aspect).\r\n>\r\n> Dmitry: waiting for the output reading goroutine to finish first is not\r\n> always sufficient - when and whether you will get EOF on the output is\r\n> actually independent of when Wait terminates (the process you've started\r\n> may close its stdout early; or it may fork another process that keeps\r\n> the pipe open while the original exits).\r\n>\r\n> I believe it's just wrong that Wait closes the client side of the pipe,\r\n> as it means it is almost never correct to call Wait while\r\n> reading from the output pipe. I think this will be the source of bugs in\r\n> quite a few programs, but I am willing to be persuaded otherwise.\r\n>\r\n>\r\n\r\nDoesn't your patch change public API and break existing programs? I mean it\r\nmay lead to leaked decriptors.\r\n\r\n\r\n\r\n>\r\n> On 9 November 2012 10:17,  <dsymonds@golang.org> wrote:\r\n> > Reviewers: bradfitz, dvyukov,\r\n> >\r\n> > Message:\r\n> > Hello bradfitz, dvyukov@google.com (cc: golang-dev@googlegroups.com),\r\n> >\r\n> > I'd like you to review this change to\r\n> > https://code.google.com/p/go\r\n> >\r\n> >\r\n> > Description:\r\n> > os/exec: add test that fails under race detector.\r\n> >\r\n> > This seems like legitimate code to me, and naturally occurs\r\n> > if you wrap an *exec.Cmd in something that watches the output.\r\n> > I don't know the correct way to solve this race, if it is indeed valid.\r\n> >\r\n> > Please review this at http://codereview.appspot.com/6821099/\r\n> >\r\n> > Affected files:\r\n> >   M src/pkg/os/exec/exec_test.go\r\n> >\r\n> >\r\n> > Index: src/pkg/os/exec/exec_test.go\r\n> > ===================================================================\r\n> > --- a/src/pkg/os/exec/exec_test.go\r\n> > +++ b/src/pkg/os/exec/exec_test.go\r\n> > @@ -265,6 +265,44 @@\r\n> >         }\r\n> >  }\r\n> >\r\n> > +func TestConcurrentReadWait(t *testing.T) {\r\n> > +       // Test that it is safe to concurrently read stdout and wait for\r\n> a\r\n> > process to finish.\r\n> > +       cmd := helperCommand(\"echo\", \"foo\")\r\n> > +       out, err := cmd.StdoutPipe()\r\n> > +       if err != nil {\r\n> > +               t.Fatalf(\"cmd.StdoutPipe: %v\", err)\r\n> > +       }\r\n> > +\r\n> > +       rd := make(chan string)\r\n> > +       go func() {\r\n> > +               r := bufio.NewReader(out)\r\n> > +               var s string\r\n> > +               for {\r\n> > +                       line, _, err := r.ReadLine()\r\n> > +                       if err != nil {\r\n> > +                               if err != io.EOF {\r\n> > +                                       t.Errorf(\"ReadLine: %v\", err)\r\n> > +                               }\r\n> > +                               break\r\n> > +                       }\r\n> > +                       s += string(line)\r\n> > +               }\r\n> > +               rd <- s\r\n> > +       }()\r\n> > +\r\n> > +       if err := cmd.Start(); err != nil {\r\n> > +               t.Fatalf(\"cmd.Start: %v\", err)\r\n> > +       }\r\n> > +       if err := cmd.Wait(); err != nil {\r\n> > +               t.Fatalf(\"cmd.Wait: %v\", err)\r\n> > +       }\r\n> > +       s := <-rd\r\n> > +\r\n> > +       if s != \"foo\" {\r\n> > +               t.Errorf(`Command output was %q, want \"foo\"`, s)\r\n> > +       }\r\n> > +}\r\n> > +\r\n> >  // TestHelperProcess isn't a real test. It's used as a helper process\r\n> >  // for TestParameterRun.\r\n> >  func TestHelperProcess(*testing.T) {\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-12 09:07:40.936270",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 12, 2012 at 8:02 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n\r\n> I think this is issue 4290.\r\n>\r\n> I have a CL that fixes it: https://codereview.appspot.com/6789043/\r\n> (I have been waiting for a reply for a while now, as I'm not entirely\r\n> sure about one aspect).\r\n\r\nYes, your CL subsumes this one. It's got essentially the same test, so\r\nI'll abandon this CL.\r\n",
			"disapproval": false,
			"date": "2012-11-12 09:27:33.593150",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 6821099: os/exec: add test that fails under race detector.",
	"created": "2012-11-09 10:17:04.203140",
	"patchsets": [
		1,
		2001,
		1002
	],
	"modified": "2012-11-12 09:28:22.482410",
	"closed": true,
	"issue": 6821099
}