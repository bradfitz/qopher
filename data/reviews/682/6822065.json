{
	"description": "image/png: degrade gracefully for palette index values that aren't\ndefined by the PLTE chunk. Such pixels decode to opaque black,\nwhich matches what libpng does.\n\nFixes issue 4319.\n\nOn my reading, the PNG spec isn't clear whether palette index values\noutside of those defined by the PLTE chunk is an error, and if not,\nwhat to do.\n\n\nLibpng 1.5.3 falls back to opaque black. png_set_PLTE says:\n\n/* Changed in libpng-1.2.1 to allocate PNG_MAX_PALETTE_LENGTH instead\n * of num_palette entries, in case of an invalid PNG file that has\n * too-large sample values.\n */\npng_ptr->palette = (png_colorp)png_calloc(png_ptr,\n        PNG_MAX_PALETTE_LENGTH * png_sizeof(png_color));\n\n\nImageMagick 6.5.7 returns an error:\n\n$ convert -version\nVersion: ImageMagick 6.5.7-8 2012-08-17 Q16 http://www.imagemagick.org\nCopyright: Copyright (C) 1999-2009 ImageMagick Studio LLC\nFeatures: OpenMP\n$ convert packetloss.png x.bmp\nconvert: Invalid colormap index `packetloss.png' @ image.c/SyncImage/3849.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"glennrp@gmail.com"
	],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6822065/diff/9001/src/pkg/image/png/reader.go\nFile src/pkg/image/png/reader.go (right):\n\nhttps://codereview.appspot.com/6822065/diff/9001/src/pkg/image/png/reader.go#newcode205\nsrc/pkg/image/png/reader.go:205: d.palette[i] = color.RGBA{0x00, 0x00, 0x00, 0xff}\nOn 2012/11/01 00:41:17, r wrote:\n> aha, that's better. that's not what was here before.\n\nYeah, s/transparent black/opaque black/, since libpng's struct png_color is RGB but no A.",
			"disapproval": false,
			"date": "2012-11-01 00:43:18.071610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "also - do we want to document this behavior in the package docs?",
			"disapproval": false,
			"date": "2012-11-01 00:36:22.765330",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think we need to document this. AIUI the spec doesn't, uh, specify what to do here.\n\nhttps://codereview.appspot.com/6822065/diff/5001/src/pkg/image/png/reader.go\nFile src/pkg/image/png/reader.go (right):\n\nhttps://codereview.appspot.com/6822065/diff/5001/src/pkg/image/png/reader.go#newcode206\nsrc/pkg/image/png/reader.go:206: }\nOn 2012/11/01 00:36:00, r wrote:\n> isn't this loop a no-op? the slice is already zeroed.\n\nIt's already zeroed to a nil color.Color (an interface), not a zero color.RGBA (a struct).\n\nhttps://codereview.appspot.com/6822065/diff/5001/src/pkg/image/png/reader.go#newcode430\nsrc/pkg/image/png/reader.go:430: if len(paletted.Palette) <= int(idx) {\nOn 2012/11/01 00:36:00, r wrote:\n> the code would be more readable if len(paletted.Pallete) was pulled out, and\n> also to have the type of idx (uint8)\n\nI don't understand \"pulled out\". Also, len(paletted.Palette) can be 256, which obviously overflows a uint8.",
			"disapproval": false,
			"date": "2012-11-01 00:39:01.874680",
			"approval": false
		},
		{
			"sender": "glennrp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n\r\nOn Wednesday, October 31, 2012 8:30:31 PM UTC-4, Nigel Tao wrote:\r\n \r\n\r\n>\r\n> On my reading, the PNG spec isn't clear whether palette index values \r\n> outside of those defined by the PLTE chunk is an error, and if not, \r\n> what to do. \r\n>\r\n\r\nI think it's pretty clear:\r\n\r\nClause 11.2.3 PLTE palette\r\nend of 5th paragraph:\r\nIt is permissible to have fewer entries than the bit depth would allow.  In\r\nthat case, any out-of-range pixel value found in the image data is an error.\r\n\r\nClause 13.2 Error handling, second paragraph, item 2:\r\nRecover from the error, if possible; otherwise fail gracefully.\r\n\r\nGlenn\r\n \r\n",
			"disapproval": false,
			"date": "2012-11-01 15:20:50.822930",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oops, s/transparent black/opaque black/.\r\n",
			"disapproval": false,
			"date": "2012-11-01 00:35:14.355670",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6822065/diff/9001/src/pkg/image/png/reader.go\nFile src/pkg/image/png/reader.go (right):\n\nhttps://codereview.appspot.com/6822065/diff/9001/src/pkg/image/png/reader.go#newcode205\nsrc/pkg/image/png/reader.go:205: d.palette[i] = color.RGBA{0x00, 0x00, 0x00, 0xff}\naha, that's better. that's not what was here before.",
			"disapproval": false,
			"date": "2012-11-01 00:41:17.240560",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-01 00:30:28.801680",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=58206fbe45a9 ***\n\nimage/png: degrade gracefully for palette index values that aren't\ndefined by the PLTE chunk. Such pixels decode to opaque black,\nwhich matches what libpng does.\n\nFixes issue 4319.\n\nOn my reading, the PNG spec isn't clear whether palette index values\noutside of those defined by the PLTE chunk is an error, and if not,\nwhat to do.\n\n\nLibpng 1.5.3 falls back to opaque black. png_set_PLTE says:\n\n/* Changed in libpng-1.2.1 to allocate PNG_MAX_PALETTE_LENGTH instead\n * of num_palette entries, in case of an invalid PNG file that has\n * too-large sample values.\n */\npng_ptr->palette = (png_colorp)png_calloc(png_ptr,\n        PNG_MAX_PALETTE_LENGTH * png_sizeof(png_color));\n\n\nImageMagick 6.5.7 returns an error:\n\n$ convert -version\nVersion: ImageMagick 6.5.7-8 2012-08-17 Q16 http://www.imagemagick.org\nCopyright: Copyright (C) 1999-2009 ImageMagick Studio LLC\nFeatures: OpenMP\n$ convert packetloss.png x.bmp\nconvert: Invalid colormap index `packetloss.png' @ image.c/SyncImage/3849.\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/6822065",
			"disapproval": false,
			"date": "2012-11-01 00:46:17.864400",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6822065/diff/5001/src/pkg/image/png/reader.go\nFile src/pkg/image/png/reader.go (right):\n\nhttp://codereview.appspot.com/6822065/diff/5001/src/pkg/image/png/reader.go#newcode206\nsrc/pkg/image/png/reader.go:206: }\nisn't this loop a no-op? the slice is already zeroed.\n\nhttp://codereview.appspot.com/6822065/diff/5001/src/pkg/image/png/reader.go#newcode430\nsrc/pkg/image/png/reader.go:430: if len(paletted.Palette) <= int(idx) {\nthe code would be more readable if len(paletted.Pallete) was pulled out, and also to have the type of idx (uint8)",
			"disapproval": false,
			"date": "2012-11-01 00:36:00.742060",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 2, 2012 at 2:20 AM,  <glennrp@gmail.com> wrote:\r\n> Clause 11.2.3 PLTE palette\r\n> end of 5th paragraph:\r\n> It is permissible to have fewer entries than the bit depth would allow.  In\r\n> that case, any out-of-range pixel value found in the image data is an error.\r\n\r\nThanks for that. I'm not sure how I missed it. I'll fix the reader.go comment.\r\n",
			"disapproval": false,
			"date": "2012-11-02 02:25:05.619530",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6822065: image/png: degrade gracefully for palette index values ...",
	"created": "2012-11-01 00:30:05.521240",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		2002
	],
	"modified": "2012-11-01 15:20:50.872720",
	"closed": true,
	"issue": 6822065
}