{
	"description": "crypto/x509: implement EncryptPEMBlock\n\nArbitrary decisions: order of the arguments and the\nfact it takes a block-type argument (rather than\nleaving to user to fill it in later); I'm happy whatever\ncolour we want to paint it.\n\nWe also change DecryptPEMBlock so that it won't\npanic when the IV has the wrong size.",
	"cc": [
		"agl@chromium.org",
		"agl@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go\nFile src/pkg/crypto/x509/pem_decrypt.go (right):\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode95\nsrc/pkg/crypto/x509/pem_decrypt.go:95: return nil, errors.New(\"x509: wrong IV size\")\ns/wrong/incorrect/\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode145\nsrc/pkg/crypto/x509/pem_decrypt.go:145: func EncryptPEMBlock(blockType string, rand io.Reader, data, password []byte, alg string) (*pem.Block, error) {\nrand is typically the first argument.\n\nI also think that alg should be type and not a generic string. \n\nSo\n\ntype PEMCipher int\n\nconst (\n  PEMCipherDES PEMCipher = iota\n  ...\n  PEMCipherAES256\n)\n\nAnd I'd add PEMCipher as an element of rfc1423Algo and turn rfc1423Algos into a slice, rather than a map. When we need to look one up, the code can just iterate over the members.\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode152\nsrc/pkg/crypto/x509/pem_decrypt.go:152: return nil, errors.New(\"cannot generate IV: \" + err.Error())\n\"x509: \"\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode154\nsrc/pkg/crypto/x509/pem_decrypt.go:154: key := ciph.deriveKey(password, iv[:8])\nI'll take your word that the IV is truncated for this but a reference would be nice if it's written down somewhere.\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode159\nsrc/pkg/crypto/x509/pem_decrypt.go:159: dec := cipher.NewCBCEncrypter(block, iv)\nsurely the /en/crypter shouldn't be called 'dec'?",
			"disapproval": false,
			"date": "2012-11-09 15:38:14.477940",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-07 19:18:36.168650",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9ef24096faf2 ***\n\ncrypto/x509: implement EncryptPEMBlock\n\nArbitrary decisions: order of the arguments and the\nfact it takes a block-type argument (rather than\nleaving to user to fill it in later); I'm happy whatever\ncolour we want to paint it.\n\nWe also change DecryptPEMBlock so that it won't\npanic when the IV has the wrong size.\n\nR=agl, agl\nCC=golang-dev\nhttp://codereview.appspot.com/6820114",
			"disapproval": false,
			"date": "2012-11-12 15:31:36.546910",
			"approval": false
		},
		{
			"sender": "agl@chromium.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Moving today. Reviews will be delayed I'm afraid.\r\nOn Nov 8, 2012 8:41 AM, <rogpeppe@gmail.com> wrote:\r\n\r\n> Hello agl@chromium.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6820114/<http://codereview.appspot.com/6820114/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-08 14:04:02.422850",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-08 13:41:47.994630",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-12 10:22:51.741040",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ha, more comments i forgot to publish\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go\nFile src/pkg/crypto/x509/pem_decrypt.go (right):\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode95\nsrc/pkg/crypto/x509/pem_decrypt.go:95: return nil, errors.New(\"x509: wrong IV size\")\nOn 2012/11/09 15:38:14, agl1 wrote:\n> s/wrong/incorrect/\n\nDone.\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode145\nsrc/pkg/crypto/x509/pem_decrypt.go:145: func EncryptPEMBlock(blockType string, rand io.Reader, data, password []byte, alg string) (*pem.Block, error) {\nOn 2012/11/09 15:38:14, agl1 wrote:\n> rand is typically the first argument.\n> \n> I also think that alg should be type and not a generic string. \n> \n> So\n> \n> type PEMCipher int\n> \n> const (\n>   PEMCipherDES PEMCipher = iota\n>   ...\n>   PEMCipherAES256\n> )\n> \n> And I'd add PEMCipher as an element of rfc1423Algo and turn rfc1423Algos into a\n> slice, rather than a map. When we need to look one up, the code can just iterate\n> over the members.\n\nDone. I considered keying the indexes of the slice by PEMCipher, but it seemed a bit too precious.\n\nI made the zero value an invalid cipher, but another possibility might be to make the zero value be strong (e.g. PEMCipherAES256).\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode152\nsrc/pkg/crypto/x509/pem_decrypt.go:152: return nil, errors.New(\"cannot generate IV: \" + err.Error())\nOn 2012/11/09 15:38:14, agl1 wrote:\n> \"x509: \"\n\nDone.\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode154\nsrc/pkg/crypto/x509/pem_decrypt.go:154: key := ciph.deriveKey(password, iv[:8])\nOn 2012/11/09 15:38:14, agl1 wrote:\n> I'll take your word that the IV is truncated for this but a reference would be\n> nice if it's written down somewhere.\n\nIt matches the deriveKey call in DecryptPEMBlock. I've added a comment to that effect.\n\nhttps://codereview.appspot.com/6820114/diff/6006/src/pkg/crypto/x509/pem_decrypt.go#newcode159\nsrc/pkg/crypto/x509/pem_decrypt.go:159: dec := cipher.NewCBCEncrypter(block, iv)\nOn 2012/11/09 15:38:14, agl1 wrote:\n> surely the /en/crypter shouldn't be called 'dec'?\n\nDone.",
			"disapproval": false,
			"date": "2012-11-12 15:26:04.557390",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-12 14:00:11.085080",
			"approval": true
		}
	],
	"owner_email": "rogpeppe@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rog",
	"subject": "code review 6820114: crypto/x509: implement EncryptPEMBlock",
	"created": "2012-11-07 19:15:58.692120",
	"patchsets": [
		1,
		3,
		2005,
		2006,
		1003,
		6006,
		4,
		11001,
		1006
	],
	"modified": "2012-11-12 15:31:39.716970",
	"closed": true,
	"issue": 6820114
}