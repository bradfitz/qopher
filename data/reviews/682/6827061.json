{
	"description": "go.crypto: add and adjust +build lines for 386 and gccgo",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n On Nov 7, 2012 10:04 PM, <iant@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go.**crypto<https://code.google.com/p/go.crypto>\r\n>\r\n>\r\n> Description:\r\n> go.crypto: add and adjust +build lines for 386 and gccgo\r\n>\r\n> Please review this at http://codereview.appspot.com/**6827061/<http://codereview.appspot.com/6827061/>\r\n>\r\n> Affected files:\r\n>   M curve25519/const_amd64.s\r\n>   M curve25519/cswap_amd64.s\r\n>   M curve25519/curve25519.go\r\n>   M curve25519/freeze_amd64.s\r\n>   M curve25519/ladderstep_amd64.s\r\n>   M curve25519/mont25519_amd64.go\r\n>   M curve25519/mul_amd64.s\r\n>   M curve25519/square_amd64.s\r\n>   M poly1305/const_amd64.s\r\n>   M poly1305/poly1305_amd64.s\r\n>   M poly1305/sum_amd64.go\r\n>   M poly1305/sum_ref.go\r\n>   M salsa20/salsa/salsa2020_amd64.**s\r\n>   M salsa20/salsa/salsa20_amd64.go\r\n>   M salsa20/salsa/salsa20_ref.go\r\n>\r\n>\r\n> Index: curve25519/const_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/const_amd64.s\r\n> +++ b/curve25519/const_amd64.s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  DATA \u00b7REDMASK51(SB)/8, $0x0007FFFFFFFFFFFF\r\n>  GLOBL \u00b7REDMASK51(SB), $8\r\n>\r\n> Index: curve25519/cswap_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/cswap_amd64.s\r\n> +++ b/curve25519/cswap_amd64.s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  // func cswap(inout *[5]uint64, v uint64)\r\n>  TEXT \u00b7cswap(SB),7,$0\r\n>         MOVQ inout+0(FP),DI\r\n> Index: curve25519/curve25519.go\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/curve25519.go\r\n> +++ b/curve25519/curve25519.go\r\n> @@ -3,8 +3,8 @@\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n>  // We have a implementation in amd64 assembly so this code is only run on\r\n> -// non-amd64 platforms.\r\n> -// +build !amd64\r\n> +// non-amd64 platforms.  The amd64 assembly does not support gccgo.\r\n> +// +build !amd64 gccgo\r\n>\r\n>  package curve25519\r\n>\r\n> Index: curve25519/freeze_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/freeze_amd64.s\r\n> +++ b/curve25519/freeze_amd64.s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  // func freeze(inout *[5]uint64)\r\n>  TEXT \u00b7freeze(SB),7,$96-8\r\n>         MOVQ inout+0(FP), DI\r\n> Index: curve25519/ladderstep_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/ladderstep_amd64.**s\r\n> +++ b/curve25519/ladderstep_amd64.**s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  // func ladderstep(inout *[5][5]uint64)\r\n>  TEXT \u00b7ladderstep(SB),0,$384-8\r\n>         MOVQ inout+0(FP),DI\r\n> Index: curve25519/mont25519_amd64.go\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/mont25519_amd64.**go\r\n> +++ b/curve25519/mont25519_amd64.**go\r\n> @@ -2,6 +2,8 @@\r\n>  // Use of this source code is governed by a BSD-style\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  package curve25519\r\n>\r\n>  // These functions are implemented in the .s files. The names of the\r\n> functions\r\n> Index: curve25519/mul_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/mul_amd64.s\r\n> +++ b/curve25519/mul_amd64.s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  // func mul(dest, a, b *[5]uint64)\r\n>  TEXT \u00b7mul(SB),0,$128-24\r\n>         MOVQ dest+0(FP), DI\r\n> Index: curve25519/square_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/curve25519/square_amd64.s\r\n> +++ b/curve25519/square_amd64.s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  // func square(out, in *[5]uint64)\r\n>  TEXT \u00b7square(SB),7,$96-16\r\n>         MOVQ out+0(FP), DI\r\n> Index: poly1305/const_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/poly1305/const_amd64.s\r\n> +++ b/poly1305/const_amd64.s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  DATA \u00b7SCALE(SB)/8, $0x37F4000000000000\r\n>  GLOBL \u00b7SCALE(SB), $8\r\n>  DATA \u00b7TWO32(SB)/8, $0x41F0000000000000\r\n> Index: poly1305/poly1305_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/poly1305/poly1305_amd64.s\r\n> +++ b/poly1305/poly1305_amd64.s\r\n> @@ -5,6 +5,8 @@\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  // func poly1305(out *[16]byte, m *byte, mlen uint64, key *[32]key)\r\n>  TEXT \u00b7poly1305(SB),0,$224-32\r\n>         MOVQ out+0(FP),DI\r\n> Index: poly1305/sum_amd64.go\r\n> ==============================**==============================**=======\r\n> --- a/poly1305/sum_amd64.go\r\n> +++ b/poly1305/sum_amd64.go\r\n> @@ -2,6 +2,8 @@\r\n>  // Use of this source code is governed by a BSD-style\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n> +// +build amd64,!gccgo\r\n> +\r\n>  package poly1305\r\n>\r\n>  // This function is implemented in poly1305_amd64.s\r\n> Index: poly1305/sum_ref.go\r\n> ==============================**==============================**=======\r\n> --- a/poly1305/sum_ref.go\r\n> +++ b/poly1305/sum_ref.go\r\n> @@ -2,7 +2,7 @@\r\n>  // Use of this source code is governed by a BSD-style\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n> -// +build !amd64\r\n> +// +build !amd64 gccgo\r\n>\r\n>  package poly1305\r\n>\r\n> Index: salsa20/salsa/salsa2020_amd64.**s\r\n> ==============================**==============================**=======\r\n> --- a/salsa20/salsa/salsa2020_**amd64.s\r\n> +++ b/salsa20/salsa/salsa2020_**amd64.s\r\n> @@ -2,7 +2,7 @@\r\n>  // Use of this source code is governed by a BSD-style\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n> -// +build !appengine\r\n> +// +build amd64,!appengine,!gccgo\r\n>\r\n>  // This code was translated into a form compatible with 6a from the public\r\n>  // domain sources in SUPERCOP: http://bench.cr.yp.to/**supercop.html<http://bench.cr.yp.to/supercop.html>\r\n> Index: salsa20/salsa/salsa20_amd64.go\r\n> ==============================**==============================**=======\r\n> --- a/salsa20/salsa/salsa20_amd64.**go\r\n> +++ b/salsa20/salsa/salsa20_amd64.**go\r\n> @@ -2,7 +2,7 @@\r\n>  // Use of this source code is governed by a BSD-style\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n> -// +build !appengine\r\n> +// +build amd64,!appengine,!gccgo\r\n>\r\n>  package salsa\r\n>\r\n> Index: salsa20/salsa/salsa20_ref.go\r\n> ==============================**==============================**=======\r\n> --- a/salsa20/salsa/salsa20_ref.go\r\n> +++ b/salsa20/salsa/salsa20_ref.go\r\n> @@ -2,7 +2,7 @@\r\n>  // Use of this source code is governed by a BSD-style\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n> -// +build !amd64 appengine\r\n> +// +build !amd64 appengine gccgo\r\n>\r\n>  package salsa\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-08 06:41:35.781020",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-11-08 06:04:16.357890",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9207b1f5850c&repo=crypto ***\n\ngo.crypto: add and adjust +build lines for 386 and gccgo\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6827061",
			"disapproval": false,
			"date": "2012-11-08 06:50:49.540710",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 6827061: go.crypto: add and adjust +build lines for 386 and gccgo",
	"created": "2012-11-08 06:04:08.698590",
	"patchsets": [
		1,
		17,
		3001
	],
	"modified": "2012-11-08 06:50:50.830750",
	"closed": true,
	"issue": 6827061
}