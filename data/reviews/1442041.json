{
	"description": "strconv.Ftoa: fixes a precision error\n\nFtoa64(float64(0.09), 'f', 1) should return \"0.1\", but returns \"0.0\"\nWith this changeset this is fixed, but now Atof64(\"4e-324\") returns 5e-324 and not 0 as it used to.\nprintf(\"%.1g\", 4e-324); prints 5e-324 in gcc 4.4.3 (glibc 2.10.1).\nFixes issue 822.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"danielfleischman@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-06-01 03:30:33.510436",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for looking into this.\nCould you please complete the CLA as described at\nhttp://golang.org/doc/contribute.html#copyright ?\n\nThanks.\nRuss\n\n\nOn Mon, May 31, 2010 at 20:30,  <danielfleischman@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change.\n>\n>\n> Description:\n> strconv.Ftoa: fixes a precision error\n>\n> Ftoa64(float64(0.09), 'f', 1) should return \"0.1\", but returns \"0.0\"\n> With this changeset this is fixed, but now Atof64(\"4e-324\") returns\n> 5e-324 and not 0 as it used to.\n> printf(\"%.1g\", 4e-324); prints 5e-324 in gcc 4.4.3.\n> Fixes issue 822.\n>\n> Please review this at http://codereview.appspot.com/1442041/show\n>\n> Affected files:\n> \u00a0M src/pkg/strconv/atof_test.go\n> \u00a0M src/pkg/strconv/decimal.go\n> \u00a0M src/pkg/strconv/ftoa_test.go\n>\n>\n> Index: src/pkg/strconv/atof_test.go\n> ===================================================================\n> --- a/src/pkg/strconv/atof_test.go\n> +++ b/src/pkg/strconv/atof_test.go\n> @@ -75,7 +75,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0// smallest denormal\n> \u00a0 \u00a0 \u00a0 \u00a0atofTest{\"5e-324\", \"5e-324\", nil},\n> \u00a0 \u00a0 \u00a0 \u00a0// too small\n> - \u00a0 \u00a0 \u00a0 atofTest{\"4e-324\", \"0\", nil},\n> + \u00a0 \u00a0 \u00a0 atofTest{\"4e-324\", \"5e-324\", nil},\n> \u00a0 \u00a0 \u00a0 \u00a0// way too small\n> \u00a0 \u00a0 \u00a0 \u00a0atofTest{\"1e-350\", \"0\", nil},\n> \u00a0 \u00a0 \u00a0 \u00a0atofTest{\"1e-400000\", \"0\", nil},\n> Index: src/pkg/strconv/decimal.go\n> ===================================================================\n> --- a/src/pkg/strconv/decimal.go\n> +++ b/src/pkg/strconv/decimal.go\n> @@ -289,7 +289,7 @@\n>\n> \u00a0// If we chop a at nd digits, should we round up?\n> \u00a0func shouldRoundUp(a *decimal, nd int) bool {\n> - \u00a0 \u00a0 \u00a0 if nd <= 0 || nd >= a.nd {\n> + \u00a0 \u00a0 \u00a0 if nd < 0 || nd >= a.nd {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return false\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0if a.d[nd] == '5' && nd+1 == a.nd { // exactly halfway - round to\n> even\n> @@ -302,7 +302,7 @@\n> \u00a0// Round a to nd digits (or fewer).\n> \u00a0// Returns receiver for convenience.\n> \u00a0func (a *decimal) Round(nd int) *decimal {\n> - \u00a0 \u00a0 \u00a0 if nd <= 0 || nd >= a.nd {\n> + \u00a0 \u00a0 \u00a0 if nd < 0 || nd >= a.nd {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return a\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0if shouldRoundUp(a, nd) {\n> @@ -314,7 +314,7 @@\n> \u00a0// Round a down to nd digits (or fewer).\n> \u00a0// Returns receiver for convenience.\n> \u00a0func (a *decimal) RoundDown(nd int) *decimal {\n> - \u00a0 \u00a0 \u00a0 if nd <= 0 || nd >= a.nd {\n> + \u00a0 \u00a0 \u00a0 if nd < 0 || nd >= a.nd {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return a\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0a.nd = nd\n> @@ -325,7 +325,7 @@\n> \u00a0// Round a up to nd digits (or fewer).\n> \u00a0// Returns receiver for convenience.\n> \u00a0func (a *decimal) RoundUp(nd int) *decimal {\n> - \u00a0 \u00a0 \u00a0 if nd <= 0 || nd >= a.nd {\n> + \u00a0 \u00a0 \u00a0 if nd < 0 || nd >= a.nd {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return a\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> Index: src/pkg/strconv/ftoa_test.go\n> ===================================================================\n> --- a/src/pkg/strconv/ftoa_test.go\n> +++ b/src/pkg/strconv/ftoa_test.go\n> @@ -97,6 +97,8 @@\n> \u00a0 \u00a0 \u00a0 \u00a0ftoaTest{-math.Inf(0), 'g', -1, \"-Inf\"},\n>\n> \u00a0 \u00a0 \u00a0 \u00a0ftoaTest{-1, 'b', -1, \"-4503599627370496p-52\"},\n> +\n> + \u00a0 \u00a0 \u00a0 ftoaTest{0.09, 'f', 1, \"0.1\"},\n> \u00a0}\n>\n> \u00a0func TestFtoa(t *testing.T) {\n>\n>\n>\n",
			"disapproval": false,
			"date": "2010-06-02 02:18:39.173114",
			"approval": false
		},
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Done.\n\nOn Tue, Jun 1, 2010 at 23:18, Russ Cox <rsc@golang.org> wrote:\n\n> Thanks for looking into this.\n> Could you please complete the CLA as described at\n> http://golang.org/doc/contribute.html#copyright ?\n>\n> Thanks.\n> Russ\n>\n>\n> On Mon, May 31, 2010 at 20:30,  <danielfleischman@gmail.com> wrote:\n> > Reviewers: golang-dev_googlegroups.com,\n> >\n> > Message:\n> > Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n> >\n> > I'd like you to review this change.\n> >\n> >\n> > Description:\n> > strconv.Ftoa: fixes a precision error\n> >\n> > Ftoa64(float64(0.09), 'f', 1) should return \"0.1\", but returns \"0.0\"\n> > With this changeset this is fixed, but now Atof64(\"4e-324\") returns\n> > 5e-324 and not 0 as it used to.\n> > printf(\"%.1g\", 4e-324); prints 5e-324 in gcc 4.4.3.\n> > Fixes issue 822.\n> >\n> > Please review this at http://codereview.appspot.com/1442041/show\n> >\n> > Affected files:\n> >  M src/pkg/strconv/atof_test.go\n> >  M src/pkg/strconv/decimal.go\n> >  M src/pkg/strconv/ftoa_test.go\n> >\n> >\n> > Index: src/pkg/strconv/atof_test.go\n> > ===================================================================\n> > --- a/src/pkg/strconv/atof_test.go\n> > +++ b/src/pkg/strconv/atof_test.go\n> > @@ -75,7 +75,7 @@\n> >        // smallest denormal\n> >        atofTest{\"5e-324\", \"5e-324\", nil},\n> >        // too small\n> > -       atofTest{\"4e-324\", \"0\", nil},\n> > +       atofTest{\"4e-324\", \"5e-324\", nil},\n> >        // way too small\n> >        atofTest{\"1e-350\", \"0\", nil},\n> >        atofTest{\"1e-400000\", \"0\", nil},\n> > Index: src/pkg/strconv/decimal.go\n> > ===================================================================\n> > --- a/src/pkg/strconv/decimal.go\n> > +++ b/src/pkg/strconv/decimal.go\n> > @@ -289,7 +289,7 @@\n> >\n> >  // If we chop a at nd digits, should we round up?\n> >  func shouldRoundUp(a *decimal, nd int) bool {\n> > -       if nd <= 0 || nd >= a.nd {\n> > +       if nd < 0 || nd >= a.nd {\n> >                return false\n> >        }\n> >        if a.d[nd] == '5' && nd+1 == a.nd { // exactly halfway - round to\n> > even\n> > @@ -302,7 +302,7 @@\n> >  // Round a to nd digits (or fewer).\n> >  // Returns receiver for convenience.\n> >  func (a *decimal) Round(nd int) *decimal {\n> > -       if nd <= 0 || nd >= a.nd {\n> > +       if nd < 0 || nd >= a.nd {\n> >                return a\n> >        }\n> >        if shouldRoundUp(a, nd) {\n> > @@ -314,7 +314,7 @@\n> >  // Round a down to nd digits (or fewer).\n> >  // Returns receiver for convenience.\n> >  func (a *decimal) RoundDown(nd int) *decimal {\n> > -       if nd <= 0 || nd >= a.nd {\n> > +       if nd < 0 || nd >= a.nd {\n> >                return a\n> >        }\n> >        a.nd = nd\n> > @@ -325,7 +325,7 @@\n> >  // Round a up to nd digits (or fewer).\n> >  // Returns receiver for convenience.\n> >  func (a *decimal) RoundUp(nd int) *decimal {\n> > -       if nd <= 0 || nd >= a.nd {\n> > +       if nd < 0 || nd >= a.nd {\n> >                return a\n> >        }\n> >\n> > Index: src/pkg/strconv/ftoa_test.go\n> > ===================================================================\n> > --- a/src/pkg/strconv/ftoa_test.go\n> > +++ b/src/pkg/strconv/ftoa_test.go\n> > @@ -97,6 +97,8 @@\n> >        ftoaTest{-math.Inf(0), 'g', -1, \"-Inf\"},\n> >\n> >        ftoaTest{-1, 'b', -1, \"-4503599627370496p-52\"},\n> > +\n> > +       ftoaTest{0.09, 'f', 1, \"0.1\"},\n> >  }\n> >\n> >  func TestFtoa(t *testing.T) {\n> >\n> >\n> >\n>\n",
			"disapproval": false,
			"date": "2010-06-02 04:29:47.776742",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"danielfleischman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for fixing this.\nI'm still not sure I understand where the bug is\nor why those changes would fix it.  However, I tried\nplaying around with it and added some more tests.\nIf you add the tests below I think you'll find that \nthe code crashes.  So something's not quite right.  ;-)\n\nhttp://codereview.appspot.com/1442041/diff/2001/3001\nFile src/pkg/strconv/atof_test.go (right):\n\nhttp://codereview.appspot.com/1442041/diff/2001/3001#newcode78\nsrc/pkg/strconv/atof_test.go:78: atofTest{\"4e-324\", \"5e-324\", nil},\nThis was trying to be a different test (and failing).\nPlease move it up a line and then add two more tests,\nso that the block looks like:\n\n\t// smallest denormal\n\tatofTest{\"5e-324\", \"5e-324\", nil},\n\tatofTest{\"4e-324\", \"5e-324\", nil},\n\tatofTest{\"3e-324\", \"5e-324\", nil},\n\t// too small\n\tatofTest{\"2e-324\", \"0\", nil},\n\t// way too small\n\nhttp://codereview.appspot.com/1442041/diff/2001/3003\nFile src/pkg/strconv/ftoa_test.go (right):\n\nhttp://codereview.appspot.com/1442041/diff/2001/3003#newcode101\nsrc/pkg/strconv/ftoa_test.go:101: ftoaTest{0.09, 'f', 1, \"0.1\"},\nThis is a really embarrassing bug.\nCould you add a few more tests?\n\n\tftoaTest{0.9, 'f', 1, \"0.9\"},\n\tftoaTest{0.09, 'f', 1, \"0.1\"},\n\tftoaTest{0.0999, 'f', 1, \"0.1\"},\n\tftoaTest{0.05, 'f', 1, \"0.1\"},\n\tftoaTest{0.05, 'f', 0, \"1\"},\n\tftoaTest{0.5, 'f', 1, \"0.5\"},\n\tftoaTest{0.5, 'f', 0, \"1\"},",
			"disapproval": false,
			"date": "2010-06-02 23:38:45.167560",
			"approval": false
		},
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"danielfleischman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Jun 2, 2010 at 20:38, <rsc@google.com> wrote:\n> Thanks for fixing this.\n:-)\n> I'm still not sure I understand where the bug is\n> or why those changes would fix it.\nIn the current code, if you try to round \"0.09\" to 1 decimal case, ftoa will call round with nd=0, and shouldRoundUp will return false. With this, it checks the a.d[0] digit.\n> However, I tried\n> playing around with it and added some more tests.\n> If you add the tests below I think you'll find that\n> the code crashes.  So something's not quite right.  ;-)\nThis was a great mistake. I have already fixed it. Thanks for pointing out.\n\nhttp://codereview.appspot.com/1442041/diff/2001/3001\nFile src/pkg/strconv/atof_test.go (right):\n\nhttp://codereview.appspot.com/1442041/diff/2001/3001#newcode78\nsrc/pkg/strconv/atof_test.go:78: atofTest{\"4e-324\", \"5e-324\", nil},\nOn 2010/06/02 23:38:45, rsc1 wrote:\n> This was trying to be a different test (and failing).\n> Please move it up a line and then add two more tests,\n> so that the block looks like:\n> \n> \t// smallest denormal\n> \tatofTest{\"5e-324\", \"5e-324\", nil},\n> \tatofTest{\"4e-324\", \"5e-324\", nil},\n> \tatofTest{\"3e-324\", \"5e-324\", nil},\n> \t// too small\n> \tatofTest{\"2e-324\", \"0\", nil},\n> \t// way too small\n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/1442041/diff/2001/3003\nFile src/pkg/strconv/ftoa_test.go (right):\n\nhttp://codereview.appspot.com/1442041/diff/2001/3003#newcode101\nsrc/pkg/strconv/ftoa_test.go:101: ftoaTest{0.09, 'f', 1, \"0.1\"},\nDone, but I disagree with you in two of these tests.\n\nOn 2010/06/02 23:38:45, rsc1 wrote:\n> This is a really embarrassing bug.\n> Could you add a few more tests?\n> \n> \tftoaTest{0.9, 'f', 1, \"0.9\"},\n> \tftoaTest{0.09, 'f', 1, \"0.1\"},\n> \tftoaTest{0.0999, 'f', 1, \"0.1\"},\n> \tftoaTest{0.05, 'f', 1, \"0.1\"},\n> \tftoaTest{0.05, 'f', 0, \"1\"},\nThe last test should result \"0\" and not \"1\"\n> \tftoaTest{0.5, 'f', 1, \"0.5\"},\n> \tftoaTest{0.5, 'f', 0, \"1\"},\nThe last test should result \"0\" and not \"1\", since we have to round to the nearest even number\n> \n> \n\nThis last case crashed my code, but it was a silly mistake. Sorry about missing that and thanks for the test case.",
			"disapproval": false,
			"date": "2010-06-03 00:41:50.173199",
			"approval": false
		},
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"danielfleischman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-03 00:46:06.064819",
			"approval": false
		},
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"danielfleischman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-03 00:51:42.895078",
			"approval": false
		},
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The last review was only to add one more test case that I think is\npertinent.\n\nOn Wed, Jun 2, 2010 at 21:51, <danielfleischman@gmail.com> wrote:\n\n> Hello rsc (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/1442041/show\n>\n",
			"disapproval": false,
			"date": "2010-06-03 00:54:03.742049",
			"approval": false
		},
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Following up.\n\nOn Wed, Jun 2, 2010 at 21:53, Daniel Fleischman\n<danielfleischman@gmail.com>wrote:\n\n> The last review was only to add one more test case that I think is\n> pertinent.\n>\n> On Wed, Jun 2, 2010 at 21:51, <danielfleischman@gmail.com> wrote:\n>\n>> Hello rsc (cc: golang-dev@googlegroups.com),\n>>\n>> Please take another look.\n>>\n>>\n>> http://codereview.appspot.com/1442041/show\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2010-06-06 07:45:22.023476",
			"approval": false
		},
		{
			"sender": "danielfleischman@gmail.com",
			"recipients": [
				"danielfleischman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-15 10:26:21.450350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for figuring this out.\nRob and I were working on a different\nfloating point bug and incorporated your\npatch (with credit) into 1738047.\nTo get your client back into\na good state you'll probably\nwant to run\n\nhg revert @1442041\nhg change -d 1442041\nhg sync\n\nThanks again for tracking this down.\nIt took us a while to puzzle through\n*why* it was the correct fix, but it was\na big help not to have to find the fix!\n\nRuss\n",
			"disapproval": false,
			"date": "2010-06-29 23:49:05.125356",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"danielfleischman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "(removing reviewers)",
			"disapproval": false,
			"date": "2010-07-29 01:19:21.917351",
			"approval": false
		}
	],
	"owner_email": "danielfleischman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "danielfleischman",
	"subject": "code review 1442041: strconv.Ftoa: fixes a precision error",
	"created": "2010-06-01 03:24:19.689180",
	"patchsets": [
		2001,
		11001,
		15001,
		21001
	],
	"modified": "2010-07-29 01:19:21.917579",
	"closed": false,
	"issue": 1442041
}