{
	"description": "exp/html: change a node's children from a slice to a linked list.\n\nAlso rename Node.{Add,Remove} to Node.{AppendChild,RemoveChild} to\nbe consistent with the DOM.\n\nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkParser                  4042040      3749618   -7.23%\n\nbenchmark                       old MB/s     new MB/s  speedup\nBenchmarkParser                    19.34        20.85    1.08x\n\nBenchmarkParser mallocs per iteration is also:\n10495 before / 7992 after",
	"cc": [
		"andybalholm@gmail.com",
		"r@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"andybalholm@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nI usually don't like linked lists, but the benchmarks show that it's more efficient here than slices are. (Probably because all of the nodes are heap-allocated anyway.)\n\nhttp://codereview.appspot.com/6495061/diff/5001/src/pkg/exp/html/node_test.go\nFile src/pkg/exp/html/node_test.go (right):\n\nhttp://codereview.appspot.com/6495061/diff/5001/src/pkg/exp/html/node_test.go#newcode52\nsrc/pkg/exp/html/node_test.go:52: return fmt.Errorf(\"html: forward list of children looks like an infinite loop\")\ns/forward/backward/",
			"disapproval": false,
			"date": "2012-08-30 15:14:25.715560",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"andybalholm@gmail.com",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=79c69dfde8dc ***\n\nexp/html: change a node's children from a slice to a linked list.\n\nAlso rename Node.{Add,Remove} to Node.{AppendChild,RemoveChild} to\nbe consistent with the DOM.\n\nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkParser                  4042040      3749618   -7.23%\n\nbenchmark                       old MB/s     new MB/s  speedup\nBenchmarkParser                    19.34        20.85    1.08x\n\nBenchmarkParser mallocs per iteration is also:\n10495 before / 7992 after\n\nR=andybalholm, r, adg\nCC=golang-dev\nhttp://codereview.appspot.com/6495061",
			"disapproval": false,
			"date": "2012-08-31 00:00:30.748080",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 30, 2012 at 8:33 AM, Andy Balholm <andybalholm@gmail.com> wrote:\r\n> On Aug 30, 2012, at 8:26 AM, Rob Pike wrote:\r\n>> I wonder if there's merit in using an arena allocator for the nodes.\r\n>\r\n> Do you mean that the parser would allocate an array of, say, 64 nodes when it starts up and use nodes out of the array? When it runs out it would allocate another array of nodes.\r\n>\r\n> It would definitely reduce the number of allocations still further. Whether it would actually help performance, I don't know.\r\n\r\nThat's what I meant. I'd pick a number north of 64, perhaps 256 or\r\n1024, but yeah. Fewer allocations (done right) can mean less\r\ncontention in the allocator. Given the target of this package, it's a\r\nroute worth exploring.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-08-30 16:38:41.937840",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"andybalholm@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello andybalholm@gmail.com (cc: adg@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-30 08:23:15.072360",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Easier to insert and delete too.\r\n\r\nI wonder if there's merit in using an arena allocator for the nodes.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-08-30 15:26:54.803250",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Aug 30, 2012, at 8:26 AM, Rob Pike wrote:\r\n> I wonder if there's merit in using an arena allocator for the nodes.\r\n\r\nDo you mean that the parser would allocate an array of, say, 64 nodes when it starts up and use nodes out of the array? When it runs out it would allocate another array of nodes.\r\n\r\nIt would definitely reduce the number of allocations still further. Whether it would actually help performance, I don't know.\r\n\r\nAndy",
			"disapproval": false,
			"date": "2012-08-30 15:33:04.793090",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"andybalholm@gmail.com",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-08-30 23:08:44.599110",
			"approval": true
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6495061: exp/html: change a node's children from a slice to a li...",
	"created": "2012-08-30 08:22:53.981420",
	"patchsets": [
		1,
		2001,
		5001,
		6008
	],
	"modified": "2012-08-31 00:00:32.997340",
	"closed": true,
	"issue": 6495061
}