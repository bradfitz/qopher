{
	"description": "cmd/gc: fix computation of equality class of types.\n\nA struct with a single field was considered as equivalent to the\nfield type, which is incorrect is the field is blank.\n\nFields with padding could make the compiler think some\ntypes are comparable when they are not.\n\nFixes issue 5698.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"bradfitz@golang.org",
		"gri@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-06-13 21:20:28.977160",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/13 21:20:28, remyoudompheng wrote:\n> Hello mailto:rsc@golang.org, mailto:golang-dev@googlegroups.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nI have a debate within myself about whether struct{ _ []int\u00a0}\nis a comparable type or not.\n\nThe compiler and the test suite say it should be comparable.\n\nBut the spec says that: \"Struct values are comparable if all their fields are comparable.\" It doesn't say what happens if those fields are blank.",
			"disapproval": false,
			"date": "2013-06-13 21:23:01.646640",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping? or is it delayed until runtime is fixed?",
			"disapproval": false,
			"date": "2013-06-18 06:57:50.848060",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nI don't think this is blocked on the runtime freeze, but wait for Russ.",
			"disapproval": false,
			"date": "2013-06-18 07:52:45.919640",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc",
			"disapproval": false,
			"date": "2013-06-21 16:17:24.555760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sorry, just overwhelmed by all the runtime stuff. will review tomorrow.\r\n",
			"disapproval": false,
			"date": "2013-06-27 03:17:50.736900",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure actually.\n\ntype T struct {\n    _ []byte\n    x int\n}\n\nvar t1, t2\nprintln(t1 == t2)\n\nIs this valid? If the _ were a real name, the struct would not have an == because of the slice field. I don't remember deciding that skipping comparison of _ meant ignoring the presence of uncomparable types.\n\nRobert, what do you think?\n\nMy suspicion is that this program should be rejected too, in which case the solution is to move the ANOEQ case up above the original two-clause if.",
			"disapproval": false,
			"date": "2013-06-27 15:45:43.611350",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What R\u00e9my says ( http://tip.golang.org/ref/spec#Comparison_operators ):\r\n\r\n\"Struct values are comparable if *all* their fields are comparable. Two\r\nstruct values are equal if their corresponding non-blank fields are equal.\"\r\n\r\n\"All their fields\" includes blank fields in my mind; and the 2nd sentence\r\nmakes this clear because it explicitly excludes blank fields for equality.\r\nThus if any blank field is not comparable, then the struct is not\r\ncomparable.\r\n\r\nMaybe that's a mistake (in the spec), and blank fields should always be\r\nignored, but at least as the spec stands, I think it's clear.\r\n\r\n- gri\r\n\r\n\r\n\r\nOn Thu, Jun 27, 2013 at 8:45 AM, <rsc@golang.org> wrote:\r\n\r\n> I'm not sure actually.\r\n>\r\n> type T struct {\r\n>     _ []byte\r\n>     x int\r\n> }\r\n>\r\n> var t1, t2\r\n> println(t1 == t2)\r\n>\r\n> Is this valid? If the _ were a real name, the struct would not have an\r\n> == because of the slice field. I don't remember deciding that skipping\r\n> comparison of _ meant ignoring the presence of uncomparable types.\r\n>\r\n> Robert, what do you think?\r\n>\r\n> My suspicion is that this program should be rejected too, in which case\r\n> the solution is to move the ANOEQ case up above the original two-clause\r\n> if.\r\n>\r\n> https://codereview.appspot.**com/10271046/<https://codereview.appspot.com/10271046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-27 16:29:55.826440",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The spec sounds right to me. It would feel wrong if changing the name\r\nof an unused field from \"foo\" to \"_\" makes a program with an ==\r\nsuddenly compile, all other things being equal.  Such a change should\r\nnot affect type correctness.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-06-27 16:53:45.683840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, we all agree that struct { _ []byte } is not comparable. Good.\r\n",
			"disapproval": false,
			"date": "2013-06-27 17:11:22.445530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add a test that struct { _ []byte } is not comparable.\n\nhttps://codereview.appspot.com/10271046/diff/5001/src/cmd/gc/subr.c\nFile src/cmd/gc/subr.c (right):\n\nhttps://codereview.appspot.com/10271046/diff/5001/src/cmd/gc/subr.c#newcode624\nsrc/cmd/gc/subr.c:624: // Blank fields and padding must be ignored,\nGiven the new understanding I think this loop body should be (in its entirety):\n\na = algtype1(t1->type, bad);\nif(a == ANOEQ)\n    return ANOEQ;\n\n// Blank fields, fields with padding, and fields with\n// non-memory equality need special compare.\nif(a != AMEM || isblanksym(t1->sym) || ispaddedfield(t1, t->width))\n    ret = -1;",
			"disapproval": false,
			"date": "2013-06-27 17:14:24.185280",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com, daniel.morsing@gmail.com, bradfitz@golang.org, gri@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-28 15:35:27.063700",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks very much.\n\nhttps://codereview.appspot.com/10271046/diff/18001/test/cmp.go\nFile test/cmp.go (right):\n\nhttps://codereview.appspot.com/10271046/diff/18001/test/cmp.go#newcode299\ntest/cmp.go:299: _ string\nNice. We all agreed on what it should mean and there was a test to the contrary. So it goes.",
			"disapproval": false,
			"date": "2013-07-02 01:49:40.788530",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3a652b14dccc ***\n\ncmd/gc: fix computation of equality class of types.\n\nA struct with a single field was considered as equivalent to the\nfield type, which is incorrect is the field is blank.\n\nFields with padding could make the compiler think some\ntypes are comparable when they are not.\n\nFixes issue 5698.\n\nR=rsc, golang-dev, daniel.morsing, bradfitz, gri, r\nCC=golang-dev\nhttps://codereview.appspot.com/10271046",
			"disapproval": false,
			"date": "2013-07-02 07:09:16.967310",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 10271046: cmd/gc: fix computation of equality class of types.",
	"created": "2013-06-13 21:18:26.553990",
	"patchsets": [
		1,
		3,
		1002,
		5001,
		18001,
		24001
	],
	"modified": "2013-07-02 07:09:19.704550",
	"closed": true,
	"issue": 10271046
}