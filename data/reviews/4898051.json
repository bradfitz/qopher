{
	"description": "sync: add Counter component\nCounter provides means to collects statistics in a scalable manner.\nThe object in intended for frequent modification and infrequent querying,\nif querying is frequent then sync/atomic should be used instead.\nCounter can be created as part of other structures;\na Counter is initialized to zero value.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-08-18 18:20:55.848477",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Sorry for the long delay.\nI will try to look at this next week.\nI need to think more about the implications.\n\nhttp://codereview.appspot.com/4898051/diff/18001/src/pkg/sync/counter.go\nFile src/pkg/sync/counter.go (right):\n\nhttp://codereview.appspot.com/4898051/diff/18001/src/pkg/sync/counter.go#newcode31\nsrc/pkg/sync/counter.go:31: // Sub subs v from the Counter value.\nI'd drop this. People can Add(-v).",
			"disapproval": false,
			"date": "2011-08-26 20:08:29.185016",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/08/26 20:08:29, rsc wrote:\n> Sorry for the long delay.\n> I will try to look at this next week.\n> I need to think more about the implications.\n\nNo problem, I understand that it's very different from bug fixes and performance improvements.\n\nBtw, take a look at the Cache component:\nhttp://codereview.appspot.com/4928043/\nI am not submitting it because it depends on this CL. I've changed public interface to be simpler (in particular, zero initialization). I replaced format/scan chan-based caches in fmt package with this, and it provides significant performance/scalability improvement.",
			"disapproval": false,
			"date": "2011-08-30 12:34:17.340176",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-08-31 10:23:51.179791",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nI've implemented the idea of \"inline finalizers\" (called directly from sweep phase). It indeed speeds up things somewhat, however \"inline finalizers\" turned out to be quite fragile - they can't allocate normal memory. I had to switch to SysAlloc in proclocal, then I had to manually set/reset allocated bit in GC bitmap (looks like a dirty hack), since pointers in SysAlloc'ated memory does not prevent object from GC.\nSo, it works and it's reasonably fast. However it looks over-optimized, I would happily revert all these changes (use normal finalizer instead).",
			"disapproval": false,
			"date": "2011-11-15 18:21:26.822993",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 4898051: sync: add Counter component",
	"created": "2011-08-16 12:26:49.266925",
	"patchsets": [
		1,
		2001,
		8001,
		2002,
		12001,
		6002,
		2011,
		1004,
		9008,
		6003,
		18001,
		25002,
		31001,
		28009,
		37001,
		39001,
		42001,
		43010,
		48001,
		43011,
		45003
	],
	"modified": "2011-11-15 18:21:26.822993",
	"closed": false,
	"issue": 4898051
}