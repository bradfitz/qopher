{
	"description": "go.crypto/sha3: change keccakF to stateless function\n\nTaken from my implementation: https://bitbucket.org/ede/sha3\nPerformance gain from using less memory and more registers.\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkPermutationFunction         1484         1118  -24.66%\nBenchmarkBulkKeccak512             374993       295178  -21.28%\nBenchmarkBulkKeccak256             215496       172335  -20.03%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkPermutationFunction       134.76       178.80    1.33x\nBenchmarkBulkKeccak512              43.69        55.51    1.27x\nBenchmarkBulkKeccak256              76.03        95.07    1.25x",
	"cc": [
		"jcb@google.com",
		"agl@golang.org",
		"golang-dev@googlegroups.com",
		"nigeltao@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2013-03-31 06:23:13.842610",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"jcb@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Go code LGTM but give jcb or agl a chance to review this for crypto expertise.\n\nhttps://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go\nFile sha3/keccakf.go (right):\n\nhttps://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go#newcode8\nsha3/keccakf.go:8: // This is implemented in a separate file as a stand-alone function to allow for replacement\nI'd revert this change.\n\nhttps://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go#newcode43\nsha3/keccakf.go:43: func keccakF(st *[25]uint64) {\ns/25/numLanes/\n\nAlso, IANAKeccakExpert, but I would call the argument a, not st, to match the digest.a field.",
			"disapproval": false,
			"date": "2013-04-02 01:15:00.012950",
			"approval": true
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"jcb@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/02 01:15:00, nigeltao wrote:\n> Go code LGTM but give jcb or agl a chance to review this for crypto expertise.\n> \n> https://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go\n> File sha3/keccakf.go (right):\n> \n> https://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go#newcode8\n> sha3/keccakf.go:8: // This is implemented in a separate file as a stand-alone\n> function to allow for replacement\n> I'd revert this change.\n\nDone.\n\nhttps://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go#newcode43\n> sha3/keccakf.go:43: func keccakF(st *[25]uint64) {\n> s/25/numLanes/\n\nDone.\n\n> Also, IANAKeccakExpert, but I would call the argument a, not st, to match the\n> digest.a field.\n\nDone. The variable naming is leftover from the source I ported from (http://keccak.noekeon.org/readable_code.html), and not terribly significant.",
			"disapproval": false,
			"date": "2013-04-02 06:33:59.614690",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM- this change shouldn't have any bearing on security. Personally I\r\nthink it's incrementally cleaner to have keccakF be a member function of d\r\n(keeping all the other changes here), but I'm not sure what the best Go\r\nstyle is.\r\n\r\nThanks for the CL Eric.\r\n\r\n\r\nOn Tue, Apr 2, 2013 at 2:33 AM, <eric.d.eisner@gmail.com> wrote:\r\n\r\n> On 2013/04/02 01:15:00, nigeltao wrote:\r\n>\r\n>> Go code LGTM but give jcb or agl a chance to review this for crypto\r\n>>\r\n> expertise.\r\n>\r\n>  https://codereview.appspot.**com/8088044/diff/8001/sha3/**keccakf.go<https://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go>\r\n>> File sha3/keccakf.go (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/8088044/diff/8001/sha3/**\r\n> keccakf.go#newcode8<https://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go#newcode8>\r\n>\r\n>> sha3/keccakf.go:8: // This is implemented in a separate file as a\r\n>>\r\n> stand-alone\r\n>\r\n>> function to allow for replacement\r\n>> I'd revert this change.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8088044/diff/8001/sha3/**\r\n> keccakf.go#newcode43<https://codereview.appspot.com/8088044/diff/8001/sha3/keccakf.go#newcode43>\r\n>\r\n>> sha3/keccakf.go:43: func keccakF(st *[25]uint64) {\r\n>> s/25/numLanes/\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n>  Also, IANAKeccakExpert, but I would call the argument a, not st, to\r\n>>\r\n> match the\r\n>\r\n>> digest.a field.\r\n>>\r\n>\r\n> Done. The variable naming is leftover from the source I ported from\r\n> (http://keccak.noekeon.org/**readable_code.html<http://keccak.noekeon.org/readable_code.html>),\r\n> and not terribly\r\n> significant.\r\n>\r\n> https://codereview.appspot.**com/8088044/<https://codereview.appspot.com/8088044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-02 12:58:37.479780",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"jcb@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I agree that the function is, conceptually, a member of the digest. But this does introduce an obvious point for an asm implementation in the future (if any). So LGTM. Will land.",
			"disapproval": false,
			"date": "2013-04-02 14:30:59.219880",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"jcb@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=2e6f4675f294&repo=crypto ***\n\ngo.crypto/sha3: change keccakF to stateless function\n\nTaken from my implementation: https://bitbucket.org/ede/sha3\nPerformance gain from using less memory and more registers.\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkPermutationFunction         1484         1118  -24.66%\nBenchmarkBulkKeccak512             374993       295178  -21.28%\nBenchmarkBulkKeccak256             215496       172335  -20.03%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkPermutationFunction       134.76       178.80    1.33x\nBenchmarkBulkKeccak512              43.69        55.51    1.27x\nBenchmarkBulkKeccak256              76.03        95.07    1.25x\n\nR=jcb, agl\nCC=golang-dev, nigeltao\nhttps://codereview.appspot.com/8088044\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2013-04-02 14:42:58.663750",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "jcb: between this CL and the compiler change\r\n(https://codereview.appspot.com/7944043/) I recently submitted, I'm\r\ncurious how the go.crypto/sha3 benchmark compares to C/C++. We may not\r\nneed an asm version after all.\r\n\r\nTo rebuild the compiler, run $GOROOT/src/make.bash after \"hg sync\"ing.\r\n",
			"disapproval": false,
			"date": "2013-04-02 23:47:36.546320",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it possible to cycle-count level benchmarking in Go? All of the\r\nbenchmarks published for asm versions of SHA3 are in cycles/per byte, and\r\nthis is what their testing code measures. To compare fairly I'd either need\r\nto get cycle-count measurements here, or convert the published Keccak\r\nbenchmarking code to do wall-clock time.\r\n\r\n\r\n\r\n\r\nOn Tue, Apr 2, 2013 at 7:47 PM, Nigel Tao <nigeltao@golang.org> wrote:\r\n\r\n> jcb: between this CL and the compiler change\r\n> (https://codereview.appspot.com/7944043/) I recently submitted, I'm\r\n> curious how the go.crypto/sha3 benchmark compares to C/C++. We may not\r\n> need an asm version after all.\r\n>\r\n> To rebuild the compiler, run $GOROOT/src/make.bash after \"hg sync\"ing.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-03 01:26:46.427390",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Apr 3, 2013 at 12:26 PM, Joseph Bonneau <jcb@google.com> wrote:\r\n> Is it possible to cycle-count level benchmarking in Go? All of the\r\n> benchmarks published for asm versions of SHA3 are in cycles/per byte\r\n\r\nAh, I misremembered that you'd previously compared to C/C++.\r\nhttps://codereview.appspot.com/7760044/#msg8 instead says that \"it's\r\nnow about twice as fast, and about 75% as fast as SHA512\".\r\n",
			"disapproval": false,
			"date": "2013-04-03 02:45:04.616820",
			"approval": false
		},
		{
			"sender": "jcb@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, I made a script to compare all the hashes. With the optimizations,\r\nFWIW:\r\n\r\nSHA3 (512):     5000     310782 ns/op   52.72 MB/s\r\nSHA3 (384):    10000     222662 ns/op   73.58 MB/s\r\nSHA3 (256):    10000     175829 ns/op   93.18 MB/s\r\nSHA3 (224):    10000     167646 ns/op   97.73 MB/s\r\nSHA2 (512):    10000    115677 ns/op 141.64 MB/s\r\nSHA2 (384):    10000     108905 ns/op  150.44 MB/s\r\nSHA2 (256):    10000     169985 ns/op   96.38 MB/s\r\nSHA2 (224):    10000    174803 ns/op  93.73 MB/s\r\nSHA1 (160):    50000     31968 ns/op 512.51 MB/s\r\nMD5  (128):   100000      22044 ns/op  743.23 MB/s\r\n\r\nStill a performance hit for SHA3 compared to any others\r\n\r\n\r\n\r\nOn Tue, Apr 2, 2013 at 10:45 PM, Nigel Tao <nigeltao@golang.org> wrote:\r\n\r\n> On Wed, Apr 3, 2013 at 12:26 PM, Joseph Bonneau <jcb@google.com> wrote:\r\n> > Is it possible to cycle-count level benchmarking in Go? All of the\r\n> > benchmarks published for asm versions of SHA3 are in cycles/per byte\r\n>\r\n> Ah, I misremembered that you'd previously compared to C/C++.\r\n> https://codereview.appspot.com/7760044/#msg8 instead says that \"it's\r\n> now about twice as fast, and about 75% as fast as SHA512\".\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-03 03:20:59.762770",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"jcb@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 10:22:07.539790",
			"approval": false
		}
	],
	"owner_email": "eric.d.eisner@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Eric Roshan Eisner",
	"subject": "code review 8088044: go.crypto/sha3: change keccakF to stateless function",
	"created": "2013-03-31 06:12:36.253830",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		17001
	],
	"modified": "2013-07-21 10:22:07.767630",
	"closed": false,
	"issue": 8088044
}