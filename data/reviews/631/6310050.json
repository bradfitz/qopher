{
	"description": "go fix: update comment handling\n\nCL for discussion.\n\nThis is more controversial: Several important\ncomments are lost because the respective nodes\nhave disappeared from the AST in the rewrite.\nOn the other hand, some unrelevant comments\nhave correctly been eliminated.\n\nOne way to solve this (while keeping the ability\nto correctly track nodes) is to update the\ncomment map manually.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "gofix should throw away comments associated with nodes that\r\ndisappeared entirely. For instance, if a function disappears as a\r\nresult of a gofix (conceivable), the comments in that function\r\nshouldn't simply show up before the next function (which they now\r\nwould).\r\n\r\nThe problem is that some comments need to be re-attached, which can be\r\ndone. But that is a more complex change.\r\n\r\nThe easiest is to just leave this alone for now.\r\n\r\n- gri\r\n\r\nOn Fri, Jun 15, 2012 at 3:01 PM, David Symonds <dsymonds@golang.org> wrote:\r\n> I don't think this is going to fly as-is. Throwing away comments is\r\n> not something that gofix should ever consider. The change to\r\n> src/cmd/fix/testdata/reflect.encoder.go.out, for instance, throws away\r\n> a comment on top of a switch.\r\n",
			"disapproval": false,
			"date": "2012-06-15 22:04:13.418164",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-06-15 22:57:42.996587",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-15 21:58:24.765854",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this is going to fly as-is. Throwing away comments is\r\nnot something that gofix should ever consider. The change to\r\nsrc/cmd/fix/testdata/reflect.encoder.go.out, for instance, throws away\r\na comment on top of a switch.\r\n",
			"disapproval": false,
			"date": "2012-06-15 22:01:14.724159",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This can be fixed correctly. Please ignore this one.\n- gri\n\nOn Fri, Jun 15, 2012 at 2:58 PM,  <gri@golang.org> wrote:\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> go fix: update comment handling\n>\n> CL for discussion.\n>\n> This is more controversial: Several important\n> comments are lost because the respective nodes\n> have disappeared from the AST in the rewrite.\n> On the other hand, some unrelevant comments\n> have correctly been eliminated.\n>\n> One way to solve this (while keeping the ability\n> to correctly track nodes) is to update the\n> comment map manually.\n>\n> Please review this at http://codereview.appspot.com/6310050/\n>\n> Affected files:\n> \u00a0M src/cmd/fix/import_test.go\n> \u00a0M src/cmd/fix/main.go\n> \u00a0M src/cmd/fix/main_test.go\n> \u00a0M src/cmd/fix/testdata/reflect.datafmt.go.out\n> \u00a0M src/cmd/fix/testdata/reflect.decode.go.out\n> \u00a0M src/cmd/fix/testdata/reflect.encoder.go.out\n> \u00a0M src/cmd/fix/testdata/reflect.read.go.out\n> \u00a0M src/cmd/fix/testdata/reflect.type.go.out\n>\n>\n> Index: src/cmd/fix/import_test.go\n> ===================================================================\n> --- a/src/cmd/fix/import_test.go\n> +++ b/src/cmd/fix/import_test.go\n> @@ -143,7 +143,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Out: `package main\n>\n> \u00a0import (\n> - \u00a0 \u00a0 \u00a0 // a\n> \u00a0 \u00a0 \u00a0 \u00a0\"os\" \u00a0 // b\n> \u00a0 \u00a0 \u00a0 \u00a0\"utf8\" // c\n> \u00a0)\n> @@ -164,7 +163,7 @@\n>\n> \u00a0import (\n> \u00a0 \u00a0 \u00a0 \u00a0\"io\" // a\n> - \u00a0 \u00a0 \u00a0 // b\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0\"utf8\" // c\n> \u00a0)\n> \u00a0`,\n> @@ -185,7 +184,7 @@\n> \u00a0import (\n> \u00a0 \u00a0 \u00a0 \u00a0\"io\" // a\n> \u00a0 \u00a0 \u00a0 \u00a0\"os\" // b\n> - \u00a0 \u00a0 \u00a0 // c\n> +\n> \u00a0)\n> \u00a0`,\n> \u00a0 \u00a0 \u00a0 \u00a0},\n> Index: src/cmd/fix/main.go\n> ===================================================================\n> --- a/src/cmd/fix/main.go\n> +++ b/src/cmd/fix/main.go\n> @@ -108,14 +108,16 @@\n> \u00a0 \u00a0 \u00a0 \u00a0Tabwidth: tabWidth,\n> \u00a0}\n>\n> -func gofmtFile(f *ast.File) ([]byte, error) {\n> +func gofmtFile(f *ast.File, cmap ast.CommentMap) ([]byte, error) {\n> \u00a0 \u00a0 \u00a0 \u00a0var buf bytes.Buffer\n>\n> \u00a0 \u00a0 \u00a0 \u00a0ast.SortImports(fset, f)\n> + \u00a0 \u00a0 \u00a0 f.Comments = cmap.Filter(f).Comments()\n> \u00a0 \u00a0 \u00a0 \u00a0err := printConfig.Fprint(&buf, fset, f)\n> \u00a0 \u00a0 \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return nil, err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0return buf.Bytes(), nil\n> \u00a0}\n>\n> @@ -143,6 +145,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> + \u00a0 \u00a0 \u00a0 cmap := ast.NewCommentMap(fset, file.Comments, file)\n>\n> \u00a0 \u00a0 \u00a0 \u00a0// Apply all fixes to file.\n> \u00a0 \u00a0 \u00a0 \u00a0newFile := file\n> @@ -158,7 +161,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// AST changed.\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Print and parse, to update any missing scoping\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// or position information for subsequent fixers.\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newSrc, err := gofmtFile(newFile)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newSrc, err := gofmtFile(newFile, cmap)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> @@ -171,6 +174,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cmap = ast.NewCommentMap(fset, newFile.Comments,\n> newFile)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0if !fixed {\n> @@ -184,7 +188,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0// output of the printer run on a standard AST generated by the\n> parser,\n> \u00a0 \u00a0 \u00a0 \u00a0// but the source we generated inside the loop above is the\n> \u00a0 \u00a0 \u00a0 \u00a0// output of the printer run on a mangled AST generated by a fixer.\n> - \u00a0 \u00a0 \u00a0 newSrc, err := gofmtFile(newFile)\n> + \u00a0 \u00a0 \u00a0 newSrc, err := gofmtFile(newFile, cmap)\n> \u00a0 \u00a0 \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> Index: src/cmd/fix/main_test.go\n> ===================================================================\n> --- a/src/cmd/fix/main_test.go\n> +++ b/src/cmd/fix/main_test.go\n> @@ -40,8 +40,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0t.Errorf(\"%s: parsing: %v\", desc, err)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> + \u00a0 \u00a0 \u00a0 cmap := ast.NewCommentMap(fset, file.Comments, file)\n>\n> - \u00a0 \u00a0 \u00a0 outb, err := gofmtFile(file)\n> + \u00a0 \u00a0 \u00a0 outb, err := gofmtFile(file, cmap)\n> \u00a0 \u00a0 \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0t.Errorf(\"%s: printing: %v\", desc, err)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return\n> @@ -63,7 +64,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fixed = fn(file)\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> - \u00a0 \u00a0 \u00a0 outb, err = gofmtFile(file)\n> + \u00a0 \u00a0 \u00a0 outb, err = gofmtFile(file, cmap)\n> \u00a0 \u00a0 \u00a0 \u00a0if err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0t.Errorf(\"%s: printing: %v\", desc, err)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return\n> Index: src/cmd/fix/testdata/reflect.datafmt.go.out\n> ===================================================================\n> --- a/src/cmd/fix/testdata/reflect.datafmt.go.out\n> +++ b/src/cmd/fix/testdata/reflect.datafmt.go.out\n> @@ -501,7 +501,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// field value is current value\n>\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case \"*\":\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // indirection: operation is type-specific\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0switch v := value; v.Kind() {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case reflect.Array:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if v.Len() <= index {\n> Index: src/cmd/fix/testdata/reflect.decode.go.out\n> ===================================================================\n> --- a/src/cmd/fix/testdata/reflect.decode.go.out\n> +++ b/src/cmd/fix/testdata/reflect.decode.go.out\n> @@ -309,7 +309,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0v = pv\n>\n> - \u00a0 \u00a0 \u00a0 // Decoding into nil interface? \u00a0Switch to non-reflect code.\n> \u00a0 \u00a0 \u00a0 \u00a0iv := v\n> \u00a0 \u00a0 \u00a0 \u00a0ok := iv.Kind() == reflect.Interface\n> \u00a0 \u00a0 \u00a0 \u00a0if ok {\n> @@ -317,7 +316,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> - \u00a0 \u00a0 \u00a0 // Check type of target.\n> \u00a0 \u00a0 \u00a0 \u00a0av := v\n> \u00a0 \u00a0 \u00a0 \u00a0if av.Kind() != reflect.Array && av.Kind() != reflect.Slice {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0d.saveError(&UnmarshalTypeError{\"array\", v.Type()})\n> @@ -406,7 +404,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0v = pv\n>\n> - \u00a0 \u00a0 \u00a0 // Decoding into nil interface? \u00a0Switch to non-reflect code.\n> \u00a0 \u00a0 \u00a0 \u00a0iv := v\n> \u00a0 \u00a0 \u00a0 \u00a0if iv.Kind() == reflect.Interface {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0iv.Set(reflect.ValueOf(d.objectInterface()))\n> Index: src/cmd/fix/testdata/reflect.encoder.go.out\n> ===================================================================\n> --- a/src/cmd/fix/testdata/reflect.encoder.go.out\n> +++ b/src/cmd/fix/testdata/reflect.encoder.go.out\n> @@ -108,7 +108,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0if ut.user != ut.base {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enc.sent[ut.user] = info.id\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 // Now send the inner types\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0switch st := actual; st.Kind() {\n> \u00a0 \u00a0 \u00a0 \u00a0case reflect.Struct:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0for i := 0; i < st.NumField(); i++ {\n> @@ -129,7 +129,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return enc.sendActualType(w, state, ut, ut.user)\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> - \u00a0 \u00a0 \u00a0 // It's a concrete value, so drill down to the base type.\n> \u00a0 \u00a0 \u00a0 \u00a0switch rt := ut.base; rt.Kind() {\n> \u00a0 \u00a0 \u00a0 \u00a0default:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Basic types and interfaces do not need to be described.\n> Index: src/cmd/fix/testdata/reflect.read.go.out\n> ===================================================================\n> --- a/src/cmd/fix/testdata/reflect.read.go.out\n> +++ b/src/cmd/fix/testdata/reflect.read.go.out\n> @@ -478,10 +478,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err == nil\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> - \u00a0 \u00a0 \u00a0 // Save accumulated data and comments\n> \u00a0 \u00a0 \u00a0 \u00a0switch t := saveData; t.Kind() {\n> \u00a0 \u00a0 \u00a0 \u00a0case reflect.Invalid:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Probably a comment, handled below\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0default:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return os.NewError(\"cannot happen: unknown type \" +\n> t.Type().String())\n> \u00a0 \u00a0 \u00a0 \u00a0case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32,\n> reflect.Int64:\n> Index: src/cmd/fix/testdata/reflect.type.go.out\n> ===================================================================\n> --- a/src/cmd/fix/testdata/reflect.type.go.out\n> +++ b/src/cmd/fix/testdata/reflect.type.go.out\n> @@ -430,10 +430,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0types[rt] = nil, false\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}()\n> - \u00a0 \u00a0 \u00a0 // Install the top-level type before the subtypes (e.g. struct\n> before\n> - \u00a0 \u00a0 \u00a0 // fields) so recursive types can be constructed safely.\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0switch t := rt; t.Kind() {\n> - \u00a0 \u00a0 \u00a0 // All basic types are easy: they are predefined.\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0case reflect.Bool:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return tBool.gobType(), nil\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-06-15 22:57:10.984683",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6310050: go fix: update comment handling",
	"created": "2012-06-15 21:58:00.841657",
	"patchsets": [
		1,
		2001,
		4009
	],
	"modified": "2012-06-15 22:57:43.833212",
	"closed": true,
	"issue": 6310050
}