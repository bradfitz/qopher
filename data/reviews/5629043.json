{
	"description": "strings: add Fields example",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"r@golang.org"
	],
	"reviewers": [
		"r@google.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-03 18:55:43.020422",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n%#v is fine; %q is shorter and maybe more interesting.  Either way.\n",
			"disapproval": false,
			"date": "2012-02-03 18:59:58.878458",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 3, 2012 at 14:15, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Ah, I hadn't seen %q on a []string before.\n\nFor aggregates like slices and maps, the format\nfilters down to the elements, so %q on a []string\nmeans %q on each string; %.2f on a []float64 works too.\n",
			"disapproval": false,
			"date": "2012-02-03 19:33:58.258919",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 04/02/2012, at 6:33 AM, Russ Cox wrote:\n\n> On Fri, Feb 3, 2012 at 14:15, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n>> Ah, I hadn't seen %q on a []string before.\n> \n> For aggregates like slices and maps, the format\n> filters down to the elements, so %q on a []string\n> means %q on each string; %.2f on a []float64 works too.\n\nThis ain't your old C printf.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-03 19:39:12.349135",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5629043/diff/3001/src/pkg/strings/example_test.go\nFile src/pkg/strings/example_test.go (right):\n\nhttp://codereview.appspot.com/5629043/diff/3001/src/pkg/strings/example_test.go#newcode14\nsrc/pkg/strings/example_test.go:14: fmt.Printf(\"Fields are: %#v\", strings.Fields(\"  foo bar  baz   \"))\nwhen you know it's a string, i think it's better to use a string format so the output is more predictable. in this case, i'd go with %q, but if you insist it be go-syntax output you can leave it as is, redundant and noisy though it is.",
			"disapproval": false,
			"date": "2012-02-03 19:08:23.034184",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, I hadn't seen %q on a []string before. That works. %#v is just my go-to\nformat.\n\nOn Fri, Feb 3, 2012 at 11:08 AM, <r@golang.org> wrote:\n\n> LGTM\n>\n>\n> http://codereview.appspot.com/**5629043/diff/3001/src/pkg/**\n> strings/example_test.go<http://codereview.appspot.com/5629043/diff/3001/src/pkg/strings/example_test.go>\n> File src/pkg/strings/example_test.**go (right):\n>\n> http://codereview.appspot.com/**5629043/diff/3001/src/pkg/**\n> strings/example_test.go#**newcode14<http://codereview.appspot.com/5629043/diff/3001/src/pkg/strings/example_test.go#newcode14>\n> src/pkg/strings/example_test.**go:14: fmt.Printf(\"Fields are: %#v\",\n>\n> strings.Fields(\"  foo bar  baz   \"))\n> when you know it's a string, i think it's better to use a string format\n> so the output is more predictable. in this case, i'd go with %q, but if\n> you insist it be go-syntax output you can leave it as is, redundant and\n> noisy though it is.\n>\n> http://codereview.appspot.com/**5629043/<http://codereview.appspot.com/5629043/>\n>\n",
			"disapproval": false,
			"date": "2012-02-03 19:15:50.154427",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2631a7b6fb8e ***\n\nstrings: add Fields example\n\nR=golang-dev, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5629043",
			"disapproval": false,
			"date": "2012-02-03 19:17:59.007850",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5629043: strings: add Fields example",
	"created": "2012-02-03 18:55:08.181835",
	"patchsets": [
		1,
		1002,
		3001,
		7001
	],
	"modified": "2012-02-03 19:39:12.403693",
	"closed": true,
	"issue": 5629043
}