{
	"description": "net: use LockOSThread instead of global mutexes\n\nGlobal mutexes not only harm concurrency by allowing only\none lookup at a time, but are also misleading: user code\nmay make identical syscalls from other goroutines without\nprotection of the same mutex. When lookup code uses its\nresults it might be executing on another thread and\nconcurrent calls will overwrite that data.\n\nThis change depends on CL 7197050 to work correctly.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"alex.brainman@gmail.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I guess you should change it as per rsc suggestion on your other CL. Thank you.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-23 22:42:59.615980",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why can't we use the newLookup method ? That appears to solve all the problems\r\n\r\nOn Thu, Jan 24, 2013 at 9:42 AM,  <alex.brainman@gmail.com> wrote:\r\n> I guess you should change it as per rsc suggestion on your other CL.\r\n> Thank you.\r\n>\r\n> Alex\r\n>\r\n> https://codereview.appspot.com/7202045/\r\n",
			"disapproval": false,
			"date": "2013-01-23 22:56:59.950660",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/23 23:21:13, dfc wrote:\n> i thought i heard someone say xp sp2 and above?\n> \n> \n\nThat is, probably, what is required, but I am not sure. Go just look for the function, if it is not there, it falls back to \"old ways\".\n\nAlex",
			"disapproval": false,
			"date": "2013-01-24 00:10:18.543370",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "newLookup method uses windows API that is only available on \"newer\" versions of OS.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-23 23:19:07.942180",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i thought i heard someone say xp sp2 and above?\r\n\r\nOn Thursday, January 24, 2013, wrote:\r\n\r\n> newLookup method uses windows API that is only available on \"newer\"\r\n> versions of OS.\r\n>\r\n> Alex\r\n>\r\n> https://codereview.appspot.**com/7202045/<https://codereview.appspot.com/7202045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-23 23:21:13.624830",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-23 19:58:23.183510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Alex's suggestion SGTM.\r\n",
			"disapproval": false,
			"date": "2013-01-24 02:50:42.872500",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-01-30 17:15:57.505950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW, I don't believe anyone is implementing Alex's suggestion (I thought\r\nyou would in this CL).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-30 17:28:47.158740",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 17:28:47, rsc wrote:\n> FWIW, I don't believe anyone is implementing Alex's suggestion (I thought\n> you would in this CL).\n\nOh? I didn't think you really meant that. I think spawning a new goroutine would be an overkill in this case. Not only it might lead to two wasted threads during the call (in case caller's thread is already locked), you'd need a channel (which includes a lock) to communicate the result (which might or might not result in runtime\u00b7semacreate which means CreateEvent on Windows), and most importantly we don't get rid of LockOSThread, we create an ugly workaround due to inability to know whether's it's locked already or not.\n\nThis begs the question, why not just use cgo, which automatically locks only when necessary? (since it's part of runtime and can see the internals) Except it seems cgo is not currently used in net package on Windows, for easier cross-compilation I assume?",
			"disapproval": false,
			"date": "2013-01-30 17:58:08.583790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Alex's suggestion is to figure out whether we are on a new enough system to\r\nuse newLookup. If so, use it. If not, use the current slower code (but it's\r\nan ancient system so who cares).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-30 17:59:18.501260",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 17:59:18, rsc wrote:\n> Alex's suggestion is to figure out whether we are on a new enough system to\n> use newLookup. If so, use it. If not, use the current slower code (but it's\n> an ancient system so who cares).\n\nIsn't it already like that on tip? (see fd_windows.go, function sysInit, if the new function is available it uses newLookup) But I wasn't creating this CL because of DNS lookup, I was creating it because the current use of locks is wrong, it only works by accident, because you don't usually call syscall.GetProtoByName and syscall.GetServByName directly. If you do call them directly you may be scheduled to the same thread that did the call in lookup_windows.go, and then you'll change the buffer that was supposedly \"locked\". (which it wasn't, really)",
			"disapproval": false,
			"date": "2013-01-30 18:07:10.763660",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 17:59:18, rsc wrote:\n> Alex's suggestion is to figure out whether we are on a new enough system to\n> use newLookup. If so, use it. If not, use the current slower code (but it's\n> an ancient system so who cares).\n\nAlso, I think we are talking about different things somehow, because earlier Alex wrote:\n\n\"I guess you should change it as per rsc suggestion on your other CL. Thank you.\"\n\nAnd in my other you said:\n\n\"It is easy to simulate what you need by launching a new goroutine, having it lock, and then waiting for it to finish. It's probably not even that much more expensive.\"\n\nAbout which I replied above.",
			"disapproval": false,
			"date": "2013-01-30 18:18:55.320790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, I didn't realize we already used newLookup where appropriate.\r\n\r\nI understand how the old code is 'accidentally' working. I am fine with\r\nleaving the code as is - people who call syscall routines directly must\r\naccept the consequences - and I am fine with putting in an extra goroutine.\r\n\r\nI assume this is not actually causing problems for you in real code.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-30 19:01:45.744220",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 19:01:45, rsc wrote:\n> I assume this is not actually causing problems for you in real code.\n\nNo, not in real code, but I thought it could cause weird interactions with cgo. When I tried to make an example:\n\nhttp://play.golang.org/p/9GVEFDXZDF\n\nIt doesn't cause a problem that I thought about though: immediately after syscall.GetServByName there's not enough gomaxprocs, so the result is scheduled on another thread, but this thread happens to unlock and get a cgo goroutine in the mean time, which locks os thread, calls getservbyname and corrupts the port. For some reason this doesn't happen though, so either my reasoning is wrong or it's harder than I thought. In any case this would be minor.",
			"disapproval": false,
			"date": "2013-01-30 19:38:05.047530",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 00:24:25, brainman wrote:\n> On 2013/01/30 19:01:45, rsc wrote:\n> > Thanks, I didn't realize we already used newLookup where appropriate.\n> \n> We do. ...\n\nLooked at our code and discovered that we still use \"old windows socket\" functions in LookupPort and LookupProtocol. Here is a replacement for LookupPort - https://codereview.appspot.com/7252045/. I do not know an alternative for GetProtoByName in LookupProtocol. I will, probably, just use \"create new thread\" trick for LookupProtocol, since it is rarely called anyway.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-01 06:20:09.328570",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 19:01:45, rsc wrote:\n> Thanks, I didn't realize we already used newLookup where appropriate.\n\nWe do. My windows xp system uses it, so, I suspect, most users are covered. Windows 2000 will still runs old code. Maybe some others ...\n\n> ... people who call syscall routines directly must\n> accept the consequences ...\n\nTrue, but ...\n\n> ... and I am fine with putting in an extra goroutine.\n\nthis should plug existing hole, and is easy to implement. I am not worried about speed, given small user base. Also we do not know how slow is it going to be.\n\nI am happy to do it, if no one will.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-31 00:24:25.948960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM\r\n",
			"disapproval": false,
			"date": "2013-01-31 01:22:21.303820",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 01:22:21, rsc wrote:\n> SGTM\n\nhttps://codereview.appspot.com/7293043/\n\nAlex",
			"disapproval": false,
			"date": "2013-02-04 01:50:29.406330",
			"approval": false
		}
	],
	"owner_email": "snaury@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "snaury",
	"subject": "code review 7202045: net: use LockOSThread instead of global mutexes",
	"created": "2013-01-23 19:57:54.342730",
	"patchsets": [
		1,
		2001,
		4002
	],
	"modified": "2013-02-04 01:50:29.611860",
	"closed": true,
	"issue": 7202045
}