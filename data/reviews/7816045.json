{
	"description": "spec: define method values\n\nFixes issue 2280.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"bradfitz@golang.org",
		"iant@golang.org",
		"andybalholm@gmail.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-19 15:55:45.263510",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3438\ndoc/go_spec.html:3438: <a href=\"#Method_values\">method value</a>.\nmaybe function liiteral or method value? the old way still works.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3449\ndoc/go_spec.html:3449: If the expression <code>x</code> has type <code>T</code> and\nyou are using the definite article.\ns/the/an/\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3449\ndoc/go_spec.html:3449: If the expression <code>x</code> has type <code>T</code> and\nit must have static type T?\nif x is an interface value, the receiver is the interface value? or not?\nit needs explanation.\nit might be nicer to go with the dynamic type, actually.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3451\ndoc/go_spec.html:3451: <code>x.M</code> occurring outside a <a href=\"#Calls\">method call</a>\nwhy does it need to be outside? is\nx.M()\nnot a call of the method value x.M?\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3455\ndoc/go_spec.html:3455: The expression <code>x</code> is evaluated during the construction of the\nconstruction is not well defined. \nmaybe\nThe expression x is evaluated during the evaluation of the method value, and then used as the receiver in the call, which may be executed later.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3520\ndoc/go_spec.html:3520: Like in <a href=\"#Selectors\">selectors</a>, a reference to a method with a value receiver\ns/Like in/As with/\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3525\ndoc/go_spec.html:3525: Like in <a href=\"#Calls\">method calls</a>, a reference to a method with a pointer receiver\nditto",
			"disapproval": false,
			"date": "2013-03-19 16:09:21.159740",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes issue 1517? Or update?\r\n\r\nOn Tue, Mar 19, 2013 at 8:55 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> spec: define method values\r\n>\r\n> Fixes issue 1517.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7816045/<https://codereview.appspot.com/7816045/>\r\n>\r\n> Affected files:\r\n>   M doc/go_spec.html\r\n>\r\n>\r\n> Index: doc/go_spec.html\r\n> ==============================**==============================**=======\r\n> --- a/doc/go_spec.html\r\n> +++ b/doc/go_spec.html\r\n> @@ -3349,6 +3349,7 @@\r\n>  }\r\n>  func (tv  T) Mv(a int) int         { return 0 }  // value receiver\r\n>  func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver\r\n> +\r\n>  var t T\r\n>  </pre>\r\n>\r\n> @@ -3434,7 +3435,7 @@\r\n>  That is, given <code>f := T.Mv</code>, <code>f</code> is invoked\r\n>  as <code>f(t, 7)</code> not <code>t.f(7)</code>.\r\n>  To construct a function that binds the receiver, use a\r\n> -<a href=\"#Function_literals\">**closure</a>.\r\n> +<a href=\"#Method_values\">method value</a>.\r\n>  </p>\r\n>\r\n>  <p>\r\n> @@ -3442,6 +3443,97 @@\r\n>  The resulting function takes an explicit receiver of that interface type.\r\n>  </p>\r\n>\r\n> +<h3 id=\"Method_values\">Method values</h3>\r\n> +\r\n> +<p>\r\n> +If the expression <code>x</code> has type <code>T</code> and\r\n> +<code>M</code> is in the <a href=\"#Method_sets\">method set</a> of type\r\n> <code>T</code>,\r\n> +<code>x.M</code> occurring outside a <a href=\"#Calls\">method call</a>\r\n> +is called a <i>method value</i>.\r\n> +The method value <code>x.M</code> is a function value that is callable\r\n> +with the same arguments as a method call of <code>x.M</code>.\r\n> +The expression <code>x</code> is evaluated during the construction of the\r\n> +method value and then used as the receiver in the call.\r\n> +</p>\r\n> +\r\n> +<p>\r\n> +As in the discussion of <a href=\"#Method_expressions\">**method\r\n> expressions</a> above,\r\n> +consider a struct type <code>T</code> with two methods,\r\n> +<code>Mv</code>, whose receiver is of type <code>T</code>, and\r\n> +<code>Mp</code>, whose receiver is of type <code>*T</code>.\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +type T struct {\r\n> +       a int\r\n> +}\r\n> +func (tv  T) Mv(a int) int         { return 0 }  // value receiver\r\n> +func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver\r\n> +\r\n> +var t T\r\n> +var pt *T\r\n> +func makeT() T\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +The expression\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +t.Mv\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +yields a function value of type\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +func(int) int\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +These two invocations are equivalent:\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +t.Mv(7)\r\n> +f := t.Mv; f(7)\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +Similarly, the expression\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +pt.Mp\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +yields a function value of type\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +func(float32) float32\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +Like in <a href=\"#Selectors\">selectors</**a>, a reference to a method\r\n> with a value receiver\r\n> +using a pointer will automatically dereference that pointer:\r\n> <pre>pt.Mv</pre> is equivalent to <pre>(*pt).Mv</pre>.\r\n> +</p>\r\n> +\r\n> +<p>\r\n> +Like in <a href=\"#Calls\">method calls</a>, a reference to a method with a\r\n> pointer receiver\r\n> +using an addressable value will automatically take the address of that\r\n> value: <pre>t.Mv</pre> is equivalent to <pre>(&amp;t).Mv</pre>.\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +f := t.Mv; f(7)   // like t.Mv(7)\r\n> +f := pt.Mp; f(7)  // like pt.Mp(7)\r\n> +f := pt.Mv; f(7)  // like (*pt).Mv(7)\r\n> +f := t.Mp; f(7)   // like (&t).Mp(7)\r\n> +f := makeT().Mp   // invalid: result of makeT() is not addressable\r\n> +</pre>\r\n> +\r\n>  <h3 id=\"Conversions\">Conversions</**h3>\r\n>\r\n>  <p>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-19 17:16:55.897130",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 19, 2013 at 10:22 AM, <rsc@golang.org> wrote:\r\n\r\n>\r\n> Brad, I think it already says Fixes issue 1517. Were you objecting to\r\n> that?\r\n\r\n\r\nYes, but only because I assumed that fixing issue 1517 would involve code\r\ntoo, not just spec work.\r\n",
			"disapproval": false,
			"date": "2013-03-19 17:24:47.806980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI also added some text in the Selectors section to clarify when x.f is legal and not. The old text there was wrong (it disallowed calling a method on a nil pointer of concrete type).\n\nBrad, I think it already says Fixes issue 1517. Were you objecting to that?\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3438\ndoc/go_spec.html:3438: <a href=\"#Method_values\">method value</a>.\nOn 2013/03/19 16:09:21, r wrote:\n> maybe function liiteral or method value? the old way still works.\n\nDone.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3449\ndoc/go_spec.html:3449: If the expression <code>x</code> has type <code>T</code> and\nOn 2013/03/19 16:09:21, r wrote:\n> it must have static type T?\n> if x is an interface value, the receiver is the interface value? or not?\n> it needs explanation.\n> it might be nicer to go with the dynamic type, actually.\n\nAdded 'static'.\nIt must be static, we do not allow\n\nvar x interface{} = new(bytes.Buffer)\nr := x.Read\n\nI added the same note at the bottom of this section that we use for interface values in the previous section.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3451\ndoc/go_spec.html:3451: <code>x.M</code> occurring outside a <a href=\"#Calls\">method call</a>\nOn 2013/03/19 16:09:21, r wrote:\n> why does it need to be outside? is\n> x.M()\n> not a call of the method value x.M?\n\nIt is, but I was defining method values in terms of method calls so I didn't want to be circular. Dropped the outside clause.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3455\ndoc/go_spec.html:3455: The expression <code>x</code> is evaluated during the construction of the\nOn 2013/03/19 16:09:21, r wrote:\n> construction is not well defined. \n> maybe\n> The expression x is evaluated during the evaluation of the method value, and\n> then used as the receiver in the call, which may be executed later.\n\nDone.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3455\ndoc/go_spec.html:3455: The expression <code>x</code> is evaluated during the construction of the\nOn 2013/03/19 16:09:21, r wrote:\n> construction is not well defined. \n> maybe\n> The expression x is evaluated during the evaluation of the method value, and\n> then used as the receiver in the call, which may be executed later.\n\nDone.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3520\ndoc/go_spec.html:3520: Like in <a href=\"#Selectors\">selectors</a>, a reference to a method with a value receiver\nOn 2013/03/19 16:09:21, r wrote:\n> s/Like in/As with/\n\nDone.\n\nhttps://codereview.appspot.com/7816045/diff/5001/doc/go_spec.html#newcode3525\ndoc/go_spec.html:3525: Like in <a href=\"#Calls\">method calls</a>, a reference to a method with a pointer receiver\nOn 2013/03/19 16:09:21, r wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2013-03-19 17:22:58.950170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have the compiler change sitting here. I'll make it fix issue 1517 too.\r\n",
			"disapproval": false,
			"date": "2013-03-19 17:40:03.252430",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I understand the issue number confusion. s/1517/2280/. Sorry.\r\n",
			"disapproval": false,
			"date": "2013-03-19 19:25:53.862070",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of March 15, 2013\",\nUpdate date.\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3462\ndoc/go_spec.html:3462: The expression <code>x</code> is evaluated during the evaluation of the\nI think we need to say somehow that this makes a copy of x.\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3546\ndoc/go_spec.html:3546: It is legal to derive a method value from a value of an interface type.\nand doing so makes a copy of the interface value.",
			"disapproval": false,
			"date": "2013-03-19 22:06:45.483110",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3546\ndoc/go_spec.html:3546: It is legal to derive a method value from a value of an interface type.\nDoes the method value still indirect through the interface, or does it directly call the method on the underlying value?\n\nI dont suppose it makes a semantic difference, but it would affect performance. Is it left implementation-defined?\n\nOn 2013/03/19 23:26:26, rsc wrote:\n> On 2013/03/19 22:06:45, iant wrote:\n> > and doing so makes a copy of the interface value.\n> \n> Instead of this I tried to emphasize that the description at the beginning of\n> this section applies equally to interface and non-interface types.",
			"disapproval": false,
			"date": "2013-03-19 23:33:11.645450",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a5c202b53a58 ***\n\nspec: define method values\n\nFixes issue 2280.\n\nR=golang-dev, r, bradfitz, iant, andybalholm, gri\nCC=golang-dev\nhttps://codereview.appspot.com/7816045",
			"disapproval": false,
			"date": "2013-03-20 20:54:11.689470",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As written, the current CL does not require copying an interface value. It\r\nrequires that the evaluation of x happens once and that value used for\r\nlater calls. There is no semantic difference between saving the interface\r\nvalue for x or its underlying concrete value. (I also believe there is no\r\nsignificant performance difference, but this CL isn't the right place to go\r\ninto that.)\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-20 00:20:12.105270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of March 15, 2013\",\nOn 2013/03/19 22:06:45, iant wrote:\n> Update date.\n\nDone.\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3462\ndoc/go_spec.html:3462: The expression <code>x</code> is evaluated during the evaluation of the\nOn 2013/03/19 22:06:45, iant wrote:\n> I think we need to say somehow that this makes a copy of x.\n\nThe expression <code>x</code> is evaluated and saved during the evaluation of the\nmethod value; the saved copy is then used as the receiver in any calls,\nwhich may be executed later.\n\nhttps://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3546\ndoc/go_spec.html:3546: It is legal to derive a method value from a value of an interface type.\nOn 2013/03/19 22:06:45, iant wrote:\n> and doing so makes a copy of the interface value.\n\nInstead of this I tried to emphasize that the description at the beginning of this section applies equally to interface and non-interface types.",
			"disapproval": false,
			"date": "2013-03-19 23:26:25.741570",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7816045/diff/23001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/23001/doc/go_spec.html#newcode3468\ndoc/go_spec.html:3468: The type T may be either a non-interface type or an interface type.\nThe type T may be an interface or non-interface type.",
			"disapproval": false,
			"date": "2013-03-19 23:31:59.666630",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 19, 2013 at 7:33 PM, <andybalholm@gmail.com> wrote:\r\n\r\n> https://codereview.appspot.**com/7816045/diff/11001/doc/go_**\r\n> spec.html#newcode3546<https://codereview.appspot.com/7816045/diff/11001/doc/go_spec.html#newcode3546>\r\n> doc/go_spec.html:3546: It is legal to derive a method value from a value\r\n> of an interface type.\r\n> Does the method value still indirect through the interface, or does it\r\n> directly call the method on the underlying value?\r\n\r\n\r\n> I dont suppose it makes a semantic difference, but it would affect\r\n> performance. Is it left implementation-defined?\r\n\r\n\r\nLike you say, it doesn't make a semantic difference, so it is not\r\nspecified. While there may be a performance difference, I am pretty\r\nskeptical that it's significant. Either way it's two indirect function\r\ncalls to get to the real implementation.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-19 23:37:35.110300",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The only time a perfoemance difference would be potentially significant\r\nwould be when the method value was assigned to a variable outside a loop\r\nand used in the loop. Then the interface indirection would only need to\r\nhappen once, right?\r\n",
			"disapproval": false,
			"date": "2013-03-19 23:48:28.680680",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is a spec change and you're arguing about the performance of the\r\nimplementation.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-19 23:50:06.392420",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was thinking about Ian's comment. Specifying that the interface value is\r\ncopied would require a particular implementation, which _might_ have lower\r\nperformance in some situations.\r\nOn Mar 19, 2013 4:49 PM, \"Rob Pike\" <r@golang.org> wrote:\r\n\r\n> This is a spec change and you're arguing about the performance of the\r\n> implementation.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-19 23:59:34.596230",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm.",
			"disapproval": false,
			"date": "2013-03-20 00:29:14.906760",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-20 03:54:52.309610",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3485\ndoc/go_spec.html:3485: var t T\nAbove you are consistently using tv, tp, Mv, Mp, but then here it's t and pt: One would expect vt and pt, if you want to go with this pattern. But it's not clear to me why the receiver should be tp and the variable pt.\n\nI find the permutations totally confusing. How about one of these two schemes:\n\n1) Variables incl. receivers: t T, pt *T; Methods: M, pM.\n\nor:\n\n2) Variables incl. receivers: v T,  p *T; Methods: V, P.\n\n\nThe same change should be made for Method expressions.\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3533\ndoc/go_spec.html:3533: using a pointer will automatically dereference that pointer: <pre>pt.Mv</pre> is equivalent to <pre>(*pt).Mv</pre>.\ns/pre/code/ (4x)\n\nAlternatively, use </p> first and put this explicitly on separate lines (for readability of the source), like above. As is, this screws up formatting, at least in my browser (Chrome).\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3537\ndoc/go_spec.html:3537: As with <a href=\"#Calls\">method calls</a>, a reference to a non-interface method with a pointer receiver\nSo one might store the method value in a variable f, modify the receiver, and then invoke f, which at that point operates using the modified receiver.\n\nNot inconsistent, just something to be aware of (can cause subtle bugs).\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3538\ndoc/go_spec.html:3538: using an addressable value will automatically take the address of that value: <pre>t.Mv</pre> is equivalent to <pre>(&amp;t).Mv</pre>.\ns/pre/code/ (4x)\n\nas above",
			"disapproval": false,
			"date": "2013-03-20 17:00:54.951220",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3537\ndoc/go_spec.html:3537: As with <a href=\"#Calls\">method calls</a>, a reference to a non-interface method with a pointer receiver\nit's no different from writing down a pointer in any other data structure and using it later; what the pointer references may have changed in the interim.",
			"disapproval": false,
			"date": "2013-03-20 17:29:56.326830",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3537\ndoc/go_spec.html:3537: As with <a href=\"#Calls\">method calls</a>, a reference to a non-interface method with a pointer receiver\nOn 2013/03/20 17:29:56, r wrote:\n> it's no different from writing down a pointer in any other data structure and\n> using it later; what the pointer references may have changed in the interim.\n\nSure - I am not saying this should be any different. It's simply a new mechanism that has not been available before and thus its implications are likely not internalized by programmers. This is a case where I suspect future bugs (which is fine).",
			"disapproval": false,
			"date": "2013-03-20 17:39:00.353080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3485\ndoc/go_spec.html:3485: var t T\nOn 2013/03/20 17:00:55, gri wrote:\n> Above you are consistently using tv, tp, Mv, Mp, but then here it's t and pt:\n> One would expect vt and pt, if you want to go with this pattern. But it's not\n> clear to me why the receiver should be tp and the variable pt.\n> \n> I find the permutations totally confusing. How about one of these two schemes:\n> \n> 1) Variables incl. receivers: t T, pt *T; Methods: M, pM.\n> \n> or:\n> \n> 2) Variables incl. receivers: v T,  p *T; Methods: V, P.\n> \n> \n> The same change should be made for Method expressions.\n\nCan it be done in a different CL? I believe the examples and naming in this section are consistent with the previous section (primarily because I copied them from there). I don't want to rewrite the other section as part of this change.\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3533\ndoc/go_spec.html:3533: using a pointer will automatically dereference that pointer: <pre>pt.Mv</pre> is equivalent to <pre>(*pt).Mv</pre>.\nOn 2013/03/20 17:00:55, gri wrote:\n> s/pre/code/ (4x)\n> \n> Alternatively, use </p> first and put this explicitly on separate lines (for\n> readability of the source), like above. As is, this screws up formatting, at\n> least in my browser (Chrome).\n\nDone.\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3538\ndoc/go_spec.html:3538: using an addressable value will automatically take the address of that value: <pre>t.Mv</pre> is equivalent to <pre>(&amp;t).Mv</pre>.\nOn 2013/03/20 17:00:55, gri wrote:\n> s/pre/code/ (4x)\n> \n> as above\n\nDone.",
			"disapproval": false,
			"date": "2013-03-20 18:10:01.230130",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"andybalholm@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7816045/diff/28001/doc/go_spec.html#newcode3485\ndoc/go_spec.html:3485: var t T\nOn 2013/03/20 18:10:01, rsc wrote:\n> On 2013/03/20 17:00:55, gri wrote:\n> > Above you are consistently using tv, tp, Mv, Mp, but then here it's t and pt:\n> > One would expect vt and pt, if you want to go with this pattern. But it's not\n> > clear to me why the receiver should be tp and the variable pt.\n> > \n> > I find the permutations totally confusing. How about one of these two schemes:\n> > \n> > 1) Variables incl. receivers: t T, pt *T; Methods: M, pM.\n> > \n> > or:\n> > \n> > 2) Variables incl. receivers: v T,  p *T; Methods: V, P.\n> > \n> > \n> > The same change should be made for Method expressions.\n> \n> Can it be done in a different CL? I believe the examples and naming in this\n> section are consistent with the previous section (primarily because I copied\n> them from there). I don't want to rewrite the other section as part of this\n> change.\n\nsure.",
			"disapproval": false,
			"date": "2013-03-20 18:11:23.136980",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7816045: spec: define method values",
	"created": "2013-03-19 15:55:31.280700",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		18001,
		21001,
		23001,
		28001,
		39001,
		43001
	],
	"modified": "2013-03-20 20:54:14.286360",
	"closed": true,
	"issue": 7816045
}