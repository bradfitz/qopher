{
	"description": "cmd/5g: fix build",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-23 06:54:43.244090",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tuesday, September 25, 2012, minux wrote:\r\n>\r\n> Maybe that problem just doesn't occur on arm?\r\n>\r\nReally strange, I reverted that CL, and bug444.go still run without panic.\r\n",
			"disapproval": false,
			"date": "2012-09-24 17:20:34.389680",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=bbb1a6dfcd58 ***\n\ncmd/5g: fix build\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6552061",
			"disapproval": false,
			"date": "2012-09-23 07:06:11.585480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I thought it shouldn't be that simple too, but the test you introduced in\r\n> the CL passed,\r\n> so I just went on with the minimum change that fixes the build.\r\n>\r\n> Maybe that problem just doesn't occur on arm?\r\n\r\nI think if you do the move you get a 0 as the effective address, and\r\nthen when you try to read the slice base pointer it will panic. It's\r\nnot supposed to panic until it dereferences the slice base pointer but\r\nthe test is not that specific. That is, I believe\r\n\r\nx := []byte(nil)[0]\r\n\r\nprobably generates a nil pointer dereference instead of an index\r\nbounds check panic.\r\n",
			"disapproval": false,
			"date": "2012-09-24 16:44:11.656220",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> On Tuesday, September 25, 2012, minux wrote:\r\n>>\r\n>> Maybe that problem just doesn't occur on arm?\r\n>\r\n> Really strange, I reverted that CL, and bug444.go still run without panic.\r\n\r\nProbably 5g never gets there for that case. Exactly when agen gets\r\ncalled may vary from compiler to compiler.\r\n",
			"disapproval": false,
			"date": "2012-09-24 17:22:21.900910",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-23 06:35:16.621970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6552061/diff/8001/src/cmd/5g/cgen.c\nFile src/cmd/5g/cgen.c (right):\n\nhttp://codereview.appspot.com/6552061/diff/8001/src/cmd/5g/cgen.c#newcode565\nsrc/cmd/5g/cgen.c:565: gins(AMOVW, &n1, &n2);\nApologies for breaking the build. However, this looks wrong to me too.\nShould probably just be\n\nagen(&n1, res);\ngoto ret;\n\nand avoid the regallocs entirely. I will do this in all three once I finish with the 64-bit stuff.",
			"disapproval": false,
			"date": "2012-09-24 16:27:44.605410",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tuesday, September 25, 2012, rsc wrote:\r\n>\r\n> http://codereview.appspot.com/**6552061/diff/8001/src/cmd/5g/**\r\n> cgen.c#newcode565<http://codereview.appspot.com/6552061/diff/8001/src/cmd/5g/cgen.c#newcode565>\r\n> src/cmd/5g/cgen.c:565: gins(AMOVW, &n1, &n2);\r\n> Should probably just be\r\n>\r\n> agen(&n1, res);\r\n> goto ret;\r\n>\r\n> and avoid the regallocs entirely. I will do this in all three once I\r\n> finish with the 64-bit stuff.\r\n>\r\nI thought it shouldn't be that simple too, but the test you introduced in\r\nthe CL passed,\r\nso I just went on with the minimum change that fixes the build.\r\n\r\nMaybe that problem just doesn't occur on arm?\r\n",
			"disapproval": false,
			"date": "2012-09-24 16:35:04.106050",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6552061: cmd/5g: fix build",
	"created": "2012-09-23 06:34:18.062720",
	"patchsets": [
		1,
		2001,
		8001
	],
	"modified": "2012-09-24 16:27:44.914640",
	"closed": true,
	"issue": 6552061
}