{
	"description": "runtime: Wait until panics have been printed before exiting.\n\nFixes issue 3934.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 21, 2012 at 1:33 AM,  <alex.brainman@gmail.com> wrote:\r\n> I assume that you could write a little go program to demonstrate the\r\n> bug. Then you could run this program from inside your test and verify\r\n> that it behaves in a particular way (prints expected message or\r\n> something). You could see something similar in\r\n> src/pkg/runtime/crash_test.go, but, I suspect, your test will be even\r\n> simpler.\r\n\r\nThe big problem I have is figuring out how to evaluate success. The\r\ntruncated part of the panic trace is dependent on the path that go was\r\ncompiled in, so I can't test it against a known good version.\r\n",
			"disapproval": false,
			"date": "2012-08-21 06:18:08.792580",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tuesday, 21 August 2012 07:07:36 UTC+10, Daniel Morsing wrote:\n> On Mon, Aug 20, 2012 at 12:24 AM, brainman <alex.b...@gmail.com> wrote:\n> > Can you write a test for it?\n> >\n> > Alex\n> \n> I've tried, but i can't find a way to make one that works with go's\n> testing library.\n\nI assume that you could write a little go program to demonstrate the bug. Then you could run this program from inside your test and verify that it behaves in a particular way (prints expected message or something). You could see something similar in src/pkg/runtime/crash_test.go, but, I suspect, your test will be even simpler.\n\nAlex",
			"disapproval": false,
			"date": "2012-08-20 23:33:32.335240",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's probably bad form to submit a CL for a bug that hasn't been accepted, but the bug seemed valid and the fix was fairly trivial",
			"disapproval": false,
			"date": "2012-08-19 14:13:00.317990",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-19 14:09:22.241020",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/21 06:18:08, DMorsing wrote:\n> \n> The big problem I have is figuring out how to evaluate success. The\n> truncated part of the panic trace is dependent on the path that go was\n> compiled in, so I can't test it against a known good version.\n\nPerhaps I do not understand what your problem is, but anything \"close enough\" is better then no test. Perhaps, you could use regex to match last line of your output. Or something similar.\n\nAlex",
			"disapproval": false,
			"date": "2012-08-21 06:26:22.326020",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I figured out how to test this change pretty trivially. Just check the\r\nreturn value of the program. If it's 2, it exited from the panic and\r\nif it's 0, it exited from main.\r\n\r\nHowever, there's no support for checking for the explicit return value\r\nof a test in run.go, and I have a feeling that tests that use bash\r\nscripting isn't welcome in new code.\r\n\r\nI would add it to run.go and testlib, but I'm not sure what would be a\r\ngood syntax to use for this feature. Any suggestions?\r\n",
			"disapproval": false,
			"date": "2012-08-27 17:30:19.602000",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/27 17:30:19, DMorsing wrote:\n> I figured out how to test this change pretty trivially. Just check the\n> return value of the program. If it's 2, it exited from the panic and\n> if it's 0, it exited from main.\n> \n\nSounds good.\n\n> However, there's no support for checking for the explicit return value\n> of a test in run.go, and I have a feeling that tests that use bash\n> scripting isn't welcome in new code.\n> \n> I would add it to run.go and testlib, but I'm not sure what would be a\n> good syntax to use for this feature. Any suggestions?\n\nI do not think you should fiddle with test/run.go. Just create new test in runtime, like src/pkg/runtime/crash_test.go.\n\nAlex",
			"disapproval": false,
			"date": "2012-08-28 01:48:52.267430",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Your new test fails\n\n# go test -v -run=Panic\n=== RUN TestPanicWhileReturning\n--- FAIL: TestPanicWhileReturning (0.06 seconds)\npanic_test.go:33:       program exited without error. Output:\n                FAIL\nexit status 1\nFAIL    runtime 0.069s\n\non my linux/386 - hg id is 3b78b41a4b50+ tip. It is single cpu, if it makes any difference.\n\nThe same test PASS on my windows/386 pc.\n\nAlex\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/panic_test.go\nFile src/pkg/runtime/panic_test.go (right):\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/panic_test.go#newcode25\nsrc/pkg/runtime/panic_test.go:25: defer os.Remove(f.Name())\ndefer os.Remove ...\n\nline should go before\n\ndefer f.Close()\n\nos.Remove while file is opened will work on unix, but will fail on windows. You do not want to leave files in people tmp directories.\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/proc.c#newcode249\nsrc/pkg/runtime/proc.c:249: static Lock deadlock;\nDo you really need this variable to be \"static\"?\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/proc.c#newcode249\nsrc/pkg/runtime/proc.c:249: static Lock deadlock;\nRuss likes all local variables to be defined at the start of function.\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/proc.c#newcode251\nsrc/pkg/runtime/proc.c:251: runtime\u00b7lock(&deadlock);\nWhy two lock lines?",
			"disapproval": false,
			"date": "2012-08-29 01:20:58.416260",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-28 17:37:30.962100",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test failure is a bit surprising. It worked fine on this machine, failing on go 1.0.2 and passing on tip+CL.\n\nMy immediate instinct would be that the os/exec package is sourcing the go command used in the test from somewhere other than the shell.\n\nAnyway, PTAL\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/panic_test.go\nFile src/pkg/runtime/panic_test.go (right):\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/panic_test.go#newcode25\nsrc/pkg/runtime/panic_test.go:25: defer os.Remove(f.Name())\nOn 2012/08/29 01:20:58, brainman wrote:\n> defer os.Remove ...\n> \n> line should go before\n> \n> defer f.Close()\n> \n> os.Remove while file is opened will work on unix, but will fail on windows. You\n> do not want to leave files in people tmp directories.\n\nDone.\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/proc.c#newcode249\nsrc/pkg/runtime/proc.c:249: static Lock deadlock;\nOn 2012/08/29 01:20:58, brainman wrote:\n> Do you really need this variable to be \"static\"?\n\nThis part of the CL was taken almost verbatim from the dopanic function in panic.c. I figured that was the right way to do things.\n\nhttp://codereview.appspot.com/6454170/diff/14001/src/pkg/runtime/proc.c#newcode251\nsrc/pkg/runtime/proc.c:251: runtime\u00b7lock(&deadlock);\nOn 2012/08/29 01:20:58, brainman wrote:\n> Why two lock lines?\n\nThe purpose of this sequence is to deadlock the current thread. When a panic is being printed, it will end by calling exit. So, here we can just deadlock and let the panics exit call do the work.",
			"disapproval": false,
			"date": "2012-08-29 15:54:02.522660",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/30 08:07:06, DMorsing wrote:\n> \n> ...\n\nI am not right person to make judgment about this, but I think you have a problem with this patch. Your test fails in some instances and succeeds in others. It, obviously not a very hood test. Furthermore, as we go further, it gets less clear to me what the problem is:\n\n- perhaps your test is not good (perhaps it is racy);\n- perhaps your runtime fix is not correct;\n- perhaps we do not have a problem here - perhaps it is impossible to guarantee that unhandled panic will print full stack trace;\n\nI suggest you wait for Russ to get around to this ...\n\nAlex",
			"disapproval": false,
			"date": "2012-08-31 01:12:40.882190",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-08-31 15:32:54.437990",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/29 15:54:02, DMorsing wrote:\n> The test failure is a bit surprising. ...\n\nI do not know enough about runtime to comment. But what I am seeing here is your test program exits \"normally\", because wg.Wait() exits, because defer wg.Done() line in foo is executed.\n\n> ... It worked fine on this machine, failing on\n> go 1.0.2 and passing on tip+CL.\n\nIt works here on another pc of mine (windows/386) too.\n\n> My immediate instinct would be that the os/exec package is sourcing the go\n> command used in the test from somewhere other than the shell.\n\nPerhaps, but I do not think so.\n\n> On 2012/08/29 01:20:58, brainman wrote:\n> > Why two lock lines?\n> \n> The purpose of this sequence is to deadlock the current thread. When a panic is\n> being printed, it will end by calling exit. So, here we can just deadlock and\n> let the panics exit call do the work.\n\nSure. My bad here. I understand the code now - first lock locks it, second lock blocks on it.\n\nAlex",
			"disapproval": false,
			"date": "2012-08-30 00:26:57.926710",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/30 00:26:57, brainman wrote:\n> I do not know enough about runtime to comment. But what I am seeing here is your\n> test program exits \"normally\", because wg.Wait() exits, because defer wg.Done()\n> line in foo is executed.\n\nAfter thinking a bit about it, I think I've found the problem. There is time between when a panic is caused and when it's printed. In this time, the panic flag is not set. I'm guessing main returns within that  period on your machine.\n\nYou could fix this by saying that main should wait until all panics  has been handled before returning, even if they don't reach the top of the stack. I'm a bit cautious to that approach. That seems like it's overprotecting the user from making mistakes by returning from main.",
			"disapproval": false,
			"date": "2012-08-30 08:07:06.155900",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Test is failing on my machine now, so closing this, and letting it lie until someone who knows what they're doing comes along and fixes it.",
			"disapproval": false,
			"date": "2012-08-31 15:32:17.956810",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 6454170: runtime: Wait until panics have been printed before exiting.",
	"created": "2012-08-19 13:50:41.463750",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		14001,
		18001
	],
	"modified": "2012-08-31 15:32:55.587970",
	"closed": true,
	"issue": 6454170
}