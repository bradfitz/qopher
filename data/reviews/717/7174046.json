{
	"description": "misc/dashboard/builder: automatic update functionality",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/main.go\nFile misc/dashboard/builder/main.go (left):\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/main.go#oldcode51\nmisc/dashboard/builder/main.go:51: commitFlag    = flag.Bool(\"commit\", false, \"upload information about new commits\")\nso essentially every builder will be a commit builder?\nWill it pose extra load on slower builders?\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go\nFile misc/dashboard/builder/update.go (right):\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go#newcode25\nmisc/dashboard/builder/update.go:25: const builderVersion = \"TBA\" // TODO(adg): set after this code is committed\ntake a look at -ldflags -X?\nwe can embed the version in the binary itself\n(but please write it to log when the builder\nstarts)\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go#newcode55\nmisc/dashboard/builder/update.go:55: binary := filepath.Join(*buildroot, \"builder-\"+rev)\nproper clean up of old builder binary? \n(but we need a fallback mechanism when the new\nbinary doesn't start correctly)\n\ni think every system supports renaming a binary even\nwhen a process is executing it.\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go#newcode65\nmisc/dashboard/builder/update.go:65: if err := syscall.Exec(binary, os.Args[1:], os.Environ()); err != nil {\nsyscall.Exec is not supported on windows,\nyou'd better just use os/exec and a pipe for notification.",
			"disapproval": false,
			"date": "2013-01-22 13:28:13.228230",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/main.go\nFile misc/dashboard/builder/main.go (left):\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/main.go#oldcode51\nmisc/dashboard/builder/main.go:51: commitFlag    = flag.Bool(\"commit\", false, \"upload information about new commits\")\nOn 2013/01/22 13:28:13, minux wrote:\n> so essentially every builder will be a commit builder?\n> Will it pose extra load on slower builders?\n\nSee http://golang.org/cl/7178046",
			"disapproval": false,
			"date": "2013-01-23 03:28:13.564640",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go\nFile misc/dashboard/builder/update.go (right):\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go#newcode25\nmisc/dashboard/builder/update.go:25: const builderVersion = \"TBA\" // TODO(adg): set after this code is committed\nOn 2013/01/22 13:28:13, minux wrote:\n> take a look at -ldflags -X?\n> we can embed the version in the binary itself\n> (but please write it to log when the builder\n> starts)\n\nWe don't want this. This const value should be set manually by us when we want the builders to update to a newer version.\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go#newcode55\nmisc/dashboard/builder/update.go:55: binary := filepath.Join(*buildroot, \"builder-\"+rev)\nOn 2013/01/22 13:28:13, minux wrote:\n> proper clean up of old builder binary? \n> (but we need a fallback mechanism when the new\n> binary doesn't start correctly)\n> \n> i think every system supports renaming a binary even\n> when a process is executing it.\n\nI don't mind leaving the old binary around. We may not even have write access to it.\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go#newcode65\nmisc/dashboard/builder/update.go:65: if err := syscall.Exec(binary, os.Args[1:], os.Environ()); err != nil {\nOn 2013/01/22 13:28:13, minux wrote:\n> syscall.Exec is not supported on windows,\n> you'd better just use os/exec and a pipe for notification.\n\nDone.\n\nI don't think a pipe is necessary. If the update failed, we're screwed by this point anyway. I'm not sure it's worth updating cautiously. If there are problems there'll need to be manual intervention anyway.",
			"disapproval": false,
			"date": "2013-01-23 05:25:50.390240",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go\nFile misc/dashboard/builder/update.go (right):\n\nhttps://codereview.appspot.com/7174046/diff/2001/misc/dashboard/builder/update.go#newcode55\nmisc/dashboard/builder/update.go:55: binary := filepath.Join(*buildroot, \"builder-\"+rev)\nOn 2013/01/23 05:25:50, adg wrote:\n> On 2013/01/22 13:28:13, minux wrote:\n> > proper clean up of old builder binary? \n> > (but we need a fallback mechanism when the new\n> > binary doesn't start correctly)\n> > \n> > i think every system supports renaming a binary even\n> > when a process is executing it.\n> \n> I don't mind leaving the old binary around. We may not even have write access to\n> it.\nI'm just slightly concerned about old binaries filling the\nspace as some builders run on tmpfs.",
			"disapproval": false,
			"date": "2013-01-23 11:15:24.061620",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-01-24 23:34:14.915660",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-24 23:34:32.640810",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/23 11:15:24, minux wrote:\n> I'm just slightly concerned about old binaries filling the\n> space as some builders run on tmpfs.\n\nCan you suggest a strategy for disposing of the old binaries? Should the running binary rm itself after executing the new builder?",
			"disapproval": false,
			"date": "2013-01-30 00:50:59.399620",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 30, 2013 at 8:50 AM, <adg@golang.org> wrote:\r\n\r\n> On 2013/01/23 11:15:24, minux wrote:\r\n>\r\n>> I'm just slightly concerned about old binaries filling the\r\n>> space as some builders run on tmpfs.\r\n>>\r\n>\r\n> Can you suggest a strategy for disposing of the old binaries? Should the\r\n> running binary rm itself after executing the new builder?\r\n>\r\nOn windows at least you can't remove the binary when the program is current\r\nexecuting (not without very very tricky hacks). But we can rename the binary\r\nto another name (for example, gobuilder.old(.exe) and overwrite that name,\r\nso\r\nthat we always keep at most two builder binaries: the current one and the\r\nprevious\r\none)\r\n\r\nPS: please consider display the builder version at startup or provide a way\r\nto\r\nquery it.\r\n",
			"disapproval": false,
			"date": "2013-01-30 08:21:38.725810",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 30 January 2013 19:21, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Wed, Jan 30, 2013 at 8:50 AM, <adg@golang.org> wrote:\r\n>\r\n>> On 2013/01/23 11:15:24, minux wrote:\r\n>>\r\n>>> I'm just slightly concerned about old binaries filling the\r\n>>> space as some builders run on tmpfs.\r\n>>>\r\n>>\r\n>> Can you suggest a strategy for disposing of the old binaries? Should the\r\n>> running binary rm itself after executing the new builder?\r\n>>\r\n> On windows at least you can't remove the binary when the program is current\r\n> executing (not without very very tricky hacks). But we can rename the\r\n> binary\r\n> to another name (for example, gobuilder.old(.exe) and overwrite that name,\r\n> so\r\n> that we always keep at most two builder binaries: the current one and the\r\n> previous\r\n> one)\r\n>\r\n\r\nOK, done. PTAL.\r\n\r\nPS: please consider display the builder version at startup or provide a way\r\n> to\r\n> query it.\r\n>\r\n\r\nDone.\r\n",
			"disapproval": false,
			"date": "2013-02-01 00:13:50.230290",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 24 February 2013 09:33, <dave@cheney.net> wrote:\r\n\r\n> 2. determines the builder version it needs to run\r\n\r\n\r\nHow does it do this?\r\n",
			"disapproval": false,
			"date": "2013-02-26 00:15:28.049520",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2013-02-21 02:42:57.111730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"adg@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nIn general I am wary of a binary replacing itself, I think it is fraught with dangers and edge cases. However if the builder was able fork a child builder which actually did the building, and it was that child that was replaced, I would be more comfortable with that approach. \n\nThis would mean that on startup, the builder could do the following steps\n\n1. checks $WORKSPACE/goroot exists and is current\n2. determines the builder version it needs to run \n3. checks if an existing builder exists in $WORKSPACE, say $WORKSPACE/builder-$REV, and builds it if it does not exist\n4. builder calls $WORKSPACE/builder-$REV will os.Args[1:] + '-child'\n5. the child builder does the build loop check, and has some logic to tell if its rev does not match the required rev, and if so, quits and the logic returns to point 3 in the parent.\n\nI can't speak for how others run their builders, but I generally run them under daemontools in an account that does not have go in its $PATH. Obviously this would have to change to implement this feature, but it sounds like a reasonable compromise.",
			"disapproval": false,
			"date": "2013-02-23 22:33:00.321920",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's a lot more complex than what I have here.\r\n\r\nThe way I figure it: if a builder replaces itself and then the new one is\r\nbroken, that's something we need to fix anyway, right?\r\n\r\nI don't necessarily think your proposal is a bad idea, but I don't see\r\nmyself implementing it any time soon.\r\n\r\n\r\n\r\nOn 24 February 2013 09:33, <dave@cheney.net> wrote:\r\n\r\n> Hello,\r\n>\r\n> In general I am wary of a binary replacing itself, I think it is fraught\r\n> with dangers and edge cases. However if the builder was able fork a\r\n> child builder which actually did the building, and it was that child\r\n> that was replaced, I would be more comfortable with that approach.\r\n>\r\n> This would mean that on startup, the builder could do the following\r\n> steps\r\n>\r\n> 1. checks $WORKSPACE/goroot exists and is current\r\n> 2. determines the builder version it needs to run\r\n> 3. checks if an existing builder exists in $WORKSPACE, say\r\n> $WORKSPACE/builder-$REV, and builds it if it does not exist\r\n> 4. builder calls $WORKSPACE/builder-$REV will os.Args[1:] + '-child'\r\n> 5. the child builder does the build loop check, and has some logic to\r\n> tell if its rev does not match the required rev, and if so, quits and\r\n> the logic returns to point 3 in the parent.\r\n>\r\n> I can't speak for how others run their builders, but I generally run\r\n> them under daemontools in an account that does not have go in its $PATH.\r\n> Obviously this would have to change to implement this feature, but it\r\n> sounds like a reasonable compromise.\r\n>\r\n> https://codereview.appspot.**com/7174046/<https://codereview.appspot.com/7174046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 00:08:30.995940",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is the logic that I had in mind\r\n\r\n1. parent starts, creates or updates $WORKSPACE/goroot\r\n2. parent builds child from source in $WORKSPACE/goroot (if required),\r\nusing some tag inside the source itself (waves hands)\r\n3. parent executes child with an additional flag to avoid the child\r\nthinking it is the parent.\r\n4. the child executes the commit watcher and builder until it notices\r\nthat the source of $WORKSPACE/goroot says that it is not the current\r\nrevision then it returns to the parent\r\n5. the parent goes to step 2.\r\n\r\n\r\n\r\nOn Tue, Feb 26, 2013 at 11:19 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n> On 26 February 2013 11:17, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> I hadn't really thought about it too much, probably by inspecting the\r\n>> source in $WORKSPACE/goroot/...\r\n>\r\n>\r\n> So which running binary is responsible for keeping goroot up to date?\r\n",
			"disapproval": false,
			"date": "2013-02-26 00:24:37.825860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That is a fair statement, this doesn't sound like the most important\r\nthing for you at the moment. If there is general agreement in my\r\nproposal then I can tackle that next week.\r\n\r\nOn Tue, Feb 26, 2013 at 11:08 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n> That's a lot more complex than what I have here.\r\n>\r\n> The way I figure it: if a builder replaces itself and then the new one is\r\n> broken, that's something we need to fix anyway, right?\r\n>\r\n> I don't necessarily think your proposal is a bad idea, but I don't see\r\n> myself implementing it any time soon.\r\n>\r\n>\r\n>\r\n> On 24 February 2013 09:33, <dave@cheney.net> wrote:\r\n>>\r\n>> Hello,\r\n>>\r\n>> In general I am wary of a binary replacing itself, I think it is fraught\r\n>> with dangers and edge cases. However if the builder was able fork a\r\n>> child builder which actually did the building, and it was that child\r\n>> that was replaced, I would be more comfortable with that approach.\r\n>>\r\n>> This would mean that on startup, the builder could do the following\r\n>> steps\r\n>>\r\n>> 1. checks $WORKSPACE/goroot exists and is current\r\n>> 2. determines the builder version it needs to run\r\n>> 3. checks if an existing builder exists in $WORKSPACE, say\r\n>> $WORKSPACE/builder-$REV, and builds it if it does not exist\r\n>> 4. builder calls $WORKSPACE/builder-$REV will os.Args[1:] + '-child'\r\n>> 5. the child builder does the build loop check, and has some logic to\r\n>> tell if its rev does not match the required rev, and if so, quits and\r\n>> the logic returns to point 3 in the parent.\r\n>>\r\n>> I can't speak for how others run their builders, but I generally run\r\n>> them under daemontools in an account that does not have go in its $PATH.\r\n>> Obviously this would have to change to implement this feature, but it\r\n>> sounds like a reasonable compromise.\r\n>>\r\n>> https://codereview.appspot.com/7174046/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 00:10:20.567340",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I hadn't really thought about it too much, probably by inspecting the\r\nsource in $WORKSPACE/goroot/...\r\n\r\nOn Tue, Feb 26, 2013 at 11:14 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n> On 24 February 2013 09:33, <dave@cheney.net> wrote:\r\n>>\r\n>> 2. determines the builder version it needs to run\r\n>\r\n>\r\n> How does it do this?\r\n",
			"disapproval": false,
			"date": "2013-02-26 00:17:32.529140",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 26 February 2013 11:17, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I hadn't really thought about it too much, probably by inspecting the\r\n> source in $WORKSPACE/goroot/...\r\n>\r\n\r\nSo which running binary is responsible for keeping goroot up to date?\r\n",
			"disapproval": false,
			"date": "2013-02-26 00:20:28.324210",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems reasonable. I guess you can re-use the parts of this CL that relate\r\nto step 4.\r\n\r\n\r\nOn 26 February 2013 11:24, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Here is the logic that I had in mind\r\n>\r\n> 1. parent starts, creates or updates $WORKSPACE/goroot\r\n> 2. parent builds child from source in $WORKSPACE/goroot (if required),\r\n> using some tag inside the source itself (waves hands)\r\n> 3. parent executes child with an additional flag to avoid the child\r\n> thinking it is the parent.\r\n> 4. the child executes the commit watcher and builder until it notices\r\n> that the source of $WORKSPACE/goroot says that it is not the current\r\n> revision then it returns to the parent\r\n> 5. the parent goes to step 2.\r\n>\r\n>\r\n>\r\n> On Tue, Feb 26, 2013 at 11:19 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n> >\r\n> > On 26 February 2013 11:17, Dave Cheney <dave@cheney.net> wrote:\r\n> >>\r\n> >> I hadn't really thought about it too much, probably by inspecting the\r\n> >> source in $WORKSPACE/goroot/...\r\n> >\r\n> >\r\n> > So which running binary is responsible for keeping goroot up to date?\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-28 02:21:47.192690",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Cool. It is on my todo list for next week.\r\n\r\nOn Thu, Feb 28, 2013 at 1:21 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n> Seems reasonable. I guess you can re-use the parts of this CL that relate to\r\n> step 4.\r\n>\r\n>\r\n> On 26 February 2013 11:24, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> Here is the logic that I had in mind\r\n>>\r\n>> 1. parent starts, creates or updates $WORKSPACE/goroot\r\n>> 2. parent builds child from source in $WORKSPACE/goroot (if required),\r\n>> using some tag inside the source itself (waves hands)\r\n>> 3. parent executes child with an additional flag to avoid the child\r\n>> thinking it is the parent.\r\n>> 4. the child executes the commit watcher and builder until it notices\r\n>> that the source of $WORKSPACE/goroot says that it is not the current\r\n>> revision then it returns to the parent\r\n>> 5. the parent goes to step 2.\r\n>>\r\n>>\r\n>>\r\n>> On Tue, Feb 26, 2013 at 11:19 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n>> >\r\n>> > On 26 February 2013 11:17, Dave Cheney <dave@cheney.net> wrote:\r\n>> >>\r\n>> >> I hadn't really thought about it too much, probably by inspecting the\r\n>> >> source in $WORKSPACE/goroot/...\r\n>> >\r\n>> >\r\n>> > So which running binary is responsible for keeping goroot up to date?\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-28 02:22:46.920630",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 7174046: misc/dashboard/builder: automatic update functionality",
	"created": "2013-01-22 04:04:08.781620",
	"patchsets": [
		1,
		2001,
		7001,
		10001,
		13001,
		7008,
		17001,
		18002,
		21001,
		24001,
		27001,
		31001
	],
	"modified": "2013-02-28 02:22:46.920630",
	"closed": false,
	"issue": 7174046
}