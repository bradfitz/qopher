{
	"description": "compress: make flate, gzip and zlib's NewWriterXxx functions all return\n(*Writer, error) if they take a compression level, and *Writer otherwise.\nRename gzip's Compressor and Decompressor to Writer and Reader, similar to\nflate and zlib.\n\nClarify commentary when writing gzip metadata that is not representable\nas Latin-1, and fix io.EOF comment bug.\n\nAlso refactor gzip_test to be more straightforward.\n\nFixes issue 2839.",
	"cc": [
		"rsc@golang.org",
		"rsc@google.com",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@google.com",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-08 05:18:18.357600",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 8 February 2012 16:51,  <rsc@google.com> wrote:\n> // The compression level can be ...\n>\n> But now you also have to define what happens if it is not.\n\nOK, I will fix compress/flate in this CL to no longer drop the error\nif a bad level is passed.\n\nI propose that each of compress/{flate,gzip,zlib} have two functions:\nNewWriter does not return an error, NewWriterXxx does:\n\nflate.NewWriter(w io.Writer) *Writer\nflate.NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)\ngzip.NewWriter(w io.Writer) *Writer\ngzip.NewWriterLevel(w io.Writer, level int) (*Writer, error)\nzlib.NewWriter(w io.Writer) *Writer\nzlib.NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)\n\nThe flate and zlib functions that take a level but not a dict will be removed.\n\ngzip's Compressor and Decompressor types will be renamed to Writer and Reader.\n\nWDYT?\n",
			"disapproval": false,
			"date": "2012-02-08 06:12:04.515019",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 8 February 2012 17:21, Russ Cox <rsc@google.com> wrote:\n> I'd rather not force Dict just to use Level.\n> Level is common; Dict is rare.\n\nOK, how about all three NewWriter funcs take a level, and return an error:\n\nflate.NewWriter(w io.Writer, level int) (*Writer, error)\nflate.NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)\ngzip.NewWriter(w io.Writer, level int) (*Writer, error)\nzlib.NewWriter(w io.Writer, level int) (*Writer, error)\nzlib.NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)\n",
			"disapproval": false,
			"date": "2012-02-08 21:40:22.703060",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 16:40, Nigel Tao <nigeltao@golang.org> wrote:\n> OK, how about all three NewWriter funcs take a level, and return an error:\n>\n> flate.NewWriter(w io.Writer, level int) (*Writer, error)\n> flate.NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)\n> gzip.NewWriter(w io.Writer, level int) (*Writer, error)\n> zlib.NewWriter(w io.Writer, level int) (*Writer, error)\n\nBut the whole point of this cleanup was to remove\nthe error from common cases.  If NewWriter takes a level,\nthen you get these cannot-happen errors to check when\nthe level is DefaultCompression (which it will be often).\n\nFor flate that's not a big deal, but for gzip and zlib I think it is.\nFlate is an implementation package.\n\n // document that if level is in range then err will be nil\n flate.NewWriter(w io.Writer, level int, dict []byte) (*Writer, error)\n\n gzip.NewWriter(w io.Writer) *Writer\n gzip.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n\n zlib.NewWriter(w io.Writer) *Writer\n zlib.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n\n?\nRuss\n",
			"disapproval": false,
			"date": "2012-02-08 21:45:04.387341",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm\n",
			"disapproval": false,
			"date": "2012-02-08 22:36:46.285008",
			"approval": true
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5639057/diff/1002/src/pkg/compress/gzip/gzip.go\nFile src/pkg/compress/gzip/gzip.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/1002/src/pkg/compress/gzip/gzip.go#newcode54\nsrc/pkg/compress/gzip/gzip.go:54: // level is the compression level, which can be DefaultCompression, NoCompression,\nSentences begin with capital letters.\n\n// The compression level can be ...\n\nBut now you also have to define what happens if it is not.",
			"disapproval": false,
			"date": "2012-02-08 05:51:20.802980",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd rather not force Dict just to use Level.\nLevel is common; Dict is rare.\n",
			"disapproval": false,
			"date": "2012-02-08 06:21:50.102774",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9 February 2012 08:45, Russ Cox <rsc@google.com> wrote:\n> \u00a0flate.NewWriter(w io.Writer, level int, dict []byte) (*Writer, error)\n>\n> \u00a0gzip.NewWriter(w io.Writer) *Writer\n> \u00a0gzip.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n>\n> \u00a0zlib.NewWriter(w io.Writer) *Writer\n> \u00a0zlib.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n\nIt turns out that zlib.NewWriter has to return an error, since it\nwrites the ZLIB header to the underlying writer.\n\nGiven that, it looked odd for gzip.NewWriter to not return an error\nwhen all the other NewWriterXxx functions did.\n\nI've changed it so all such functions return (*Writer, error), but\ngzip.NewWriter's doc comment says that the error is always nil. If you\nwould still prefer that gzip.NewWriter returned just *Writer, then\nI'll change it back.\n\nPTAL.\n",
			"disapproval": false,
			"date": "2012-02-09 02:48:52.374030",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "missing go1 release note",
			"disapproval": false,
			"date": "2012-02-08 05:20:00.744094",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "zlib.NewWriter could write its header on first Write or Close?\n\nOn Wed, Feb 8, 2012 at 6:48 PM, Nigel Tao <nigeltao@golang.org> wrote:\n\n> On 9 February 2012 08:45, Russ Cox <rsc@google.com> wrote:\n> >  flate.NewWriter(w io.Writer, level int, dict []byte) (*Writer, error)\n> >\n> >  gzip.NewWriter(w io.Writer) *Writer\n> >  gzip.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n> >\n> >  zlib.NewWriter(w io.Writer) *Writer\n> >  zlib.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n>\n> It turns out that zlib.NewWriter has to return an error, since it\n> writes the ZLIB header to the underlying writer.\n>\n> Given that, it looked odd for gzip.NewWriter to not return an error\n> when all the other NewWriterXxx functions did.\n>\n> I've changed it so all such functions return (*Writer, error), but\n> gzip.NewWriter's doc comment says that the error is always nil. If you\n> would still prefer that gzip.NewWriter returned just *Writer, then\n> I'll change it back.\n>\n> PTAL.\n>\n",
			"disapproval": false,
			"date": "2012-02-09 02:57:15.319082",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 21:48, Nigel Tao <nigeltao@golang.org> wrote:\n> It turns out that zlib.NewWriter has to return an error, since it\n> writes the ZLIB header to the underlying writer.\n>\n> Given that, it looked odd for gzip.NewWriter to not return an error\n> when all the other NewWriterXxx functions did.\n>\n> I've changed it so all such functions return (*Writer, error), but\n> gzip.NewWriter's doc comment says that the error is always nil. If you\n> would still prefer that gzip.NewWriter returned just *Writer, then\n> I'll change it back.\n\nPlease change it back, and zlib too.\nzlib can postpone the writing of the header\n(or even just the reporting of the error, if you\nwant to minimize the code delta) until the\nWrite.  Logically, that seems fine: the Write\nreports a Write error.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-09 03:27:33.876287",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 8 February 2012 16:20,  <r@golang.org> wrote:\n> missing go1 release note\n\nDone.\n",
			"disapproval": false,
			"date": "2012-02-08 05:48:08.691258",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9 February 2012 08:45, Russ Cox <rsc@google.com> wrote:\n> \u00a0// document that if level is in range then err will be nil\n> \u00a0flate.NewWriter(w io.Writer, level int, dict []byte) (*Writer, error)\n>\n> \u00a0gzip.NewWriter(w io.Writer) *Writer\n> \u00a0gzip.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n>\n> \u00a0zlib.NewWriter(w io.Writer) *Writer\n> \u00a0zlib.NewWriterLevel(w io.Writer, level int) (*Writer, error)\n\nOK with me, plus (for completeness):\nflate.NewWriterDict(w io.Writer, level int, dict []byte) (*Writer, error)\nzlib.NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)\n",
			"disapproval": false,
			"date": "2012-02-08 22:36:23.638340",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9 February 2012 14:27, Russ Cox <rsc@google.com> wrote:\n> Please change it back, and zlib too.\n> zlib can postpone the writing of the header\n> (or even just the reporting of the error, if you\n> want to minimize the code delta) until the\n> Write. \u00a0Logically, that seems fine: the Write\n> reports a Write error.\n\nDuh, of course. Done.\n",
			"disapproval": false,
			"date": "2012-02-09 03:36:35.374211",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "you didn't address my comments.\n\n-rob\n",
			"disapproval": false,
			"date": "2012-02-10 12:05:50.360844",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"rsc@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM modulo comments.\nMaybe someone in Sydney can reread the comments\nbefore you submit.  Please file an issue to create a gofix\nfor this (the renamings, and maybe also w, _ := NewWriter -> w := NewWriter,\nand flagging the others).\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/flate/deflate_test.go\nFile src/pkg/compress/flate/deflate_test.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/flate/deflate_test.go#newcode84\nsrc/pkg/compress/flate/deflate_test.go:84: w, _ := NewWriter(&buf, h.level)\nCheck error please.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go\nFile src/pkg/compress/gzip/gzip.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode47\nsrc/pkg/compress/gzip/gzip.go:47: // It is the caller's responsibility to call Close on the WriteCloser when done.\nPlease move this text and the next paragraph up to the NewWriter comment.\nPeople will be looking at that one more often.\n\n// NewWriterLevel is like NewWriter but specifies the compression level\n// instead of assuming DefaultCompression.\n//\n// The compression level can ...\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode104\nsrc/pkg/compress/gzip/gzip.go:104: needconv := false\n// gzip stores Latin-1 strings; error if non-Latin-1; convert if non-ASCII\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/zlib/writer.go\nFile src/pkg/compress/zlib/writer.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/zlib/writer.go#newcode49\nsrc/pkg/compress/zlib/writer.go:49: // NewWriterLevelDict creates a new Writer that satisfies writes by compressing\nSame comment about moving the general text up to NewWriter.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/crypto/rand/rand_test.go\nFile src/pkg/crypto/rand/rand_test.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/crypto/rand/rand_test.go#newcode25\nsrc/pkg/crypto/rand/rand_test.go:25: f, _ := flate.NewWriter(&z, 5)\nNewWriter(&z) should be fine",
			"disapproval": false,
			"date": "2012-02-10 00:33:48.421273",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"rsc@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Submitting...\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/flate/deflate_test.go\nFile src/pkg/compress/flate/deflate_test.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/flate/deflate_test.go#newcode84\nsrc/pkg/compress/flate/deflate_test.go:84: w, _ := NewWriter(&buf, h.level)\nOn 2012/02/10 00:33:48, rsc wrote:\n> Check error please.\n\nDone.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go\nFile src/pkg/compress/gzip/gzip.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode47\nsrc/pkg/compress/gzip/gzip.go:47: // It is the caller's responsibility to call Close on the WriteCloser when done.\nOn 2012/02/10 00:33:48, rsc wrote:\n> Please move this text and the next paragraph up to the NewWriter comment.\n> People will be looking at that one more often.\n> \n> // NewWriterLevel is like NewWriter but specifies the compression level\n> // instead of assuming DefaultCompression.\n> //\n> // The compression level can ...\n\nDone.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode52\nsrc/pkg/compress/gzip/gzip.go:52: // UTF-8 strings in Go, but the underlying format is NUL-terminated ISO 8859-1\nOn 2012/02/10 01:53:57, r wrote:\n> UTF-8 isn't relevant, quite. strings aren't UTF-8 necessarily.  maybe\n> \"general Go strings\"\n\nThe wording is tricky. The in-memory Go string is in UTF-8 format. The on-disk GZIP bytes are in Latin-1 format. I want to explicitly mention UTF-8 to avoid people trying to use a Latin-1 Go string literal like \"Gau\\xdf\".\n\n\n> s/is/requires/\n\nDone.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode57\nsrc/pkg/compress/gzip/gzip.go:57: // integer value between BestSpeed and BestCompression (inclusive). The error\nOn 2012/02/10 01:53:57, r wrote:\n> s/[()]//g\n\nDone.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode104\nsrc/pkg/compress/gzip/gzip.go:104: needconv := false\nOn 2012/02/10 00:33:48, rsc wrote:\n> // gzip stores Latin-1 strings; error if non-Latin-1; convert if non-ASCII\n\nDone.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/zlib/writer.go\nFile src/pkg/compress/zlib/writer.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/zlib/writer.go#newcode49\nsrc/pkg/compress/zlib/writer.go:49: // NewWriterLevelDict creates a new Writer that satisfies writes by compressing\nOn 2012/02/10 00:33:48, rsc wrote:\n> Same comment about moving the general text up to NewWriter.\n\nDone.\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/crypto/rand/rand_test.go\nFile src/pkg/crypto/rand/rand_test.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/crypto/rand/rand_test.go#newcode25\nsrc/pkg/crypto/rand/rand_test.go:25: f, _ := flate.NewWriter(&z, 5)\nOn 2012/02/10 00:33:48, rsc wrote:\n> NewWriter(&z) should be fine\n\nNo, flate.NewWriter requires a compression level.",
			"disapproval": false,
			"date": "2012-02-10 07:33:22.535733",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"rsc@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=caf7dca9d711 ***\n\ncompress: make flate, gzip and zlib's NewWriterXxx functions all return\n(*Writer, error) if they take a compression level, and *Writer otherwise.\nRename gzip's Compressor and Decompressor to Writer and Reader, similar to\nflate and zlib.\n\nClarify commentary when writing gzip metadata that is not representable\nas Latin-1, and fix io.EOF comment bug.\n\nAlso refactor gzip_test to be more straightforward.\n\nFixes issue 2839.\n\nR=rsc, r, rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5639057",
			"disapproval": false,
			"date": "2012-02-10 07:49:29.090152",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@google.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5639057/diff/13001/doc/go1.tmpl\nFile doc/go1.tmpl (right):\n\nhttp://codereview.appspot.com/5639057/diff/13001/doc/go1.tmpl#newcode788\ndoc/go1.tmpl:788: In Go 1, the NewWriterXxx functions in compress/flate, compress/gzip and\n<code>NewWriterXxx</code>\nalso link the packages.\n\nhttp://codereview.appspot.com/5639057/diff/13001/doc/go1.tmpl#newcode789\ndoc/go1.tmpl:789: compress/zlib all return (*Writer, error) if they take a compression level,\n<code> throughout here.",
			"disapproval": false,
			"date": "2012-02-10 22:33:20.757077",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"rsc@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after fixing .html\n\nhttp://codereview.appspot.com/5639057/diff/3011/doc/go1.tmpl\nFile doc/go1.tmpl (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/doc/go1.tmpl#newcode795\ndoc/go1.tmpl:795: <em>Updating</em>:\n.html and .tmpl differ - run make\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go\nFile src/pkg/compress/gzip/gzip.go (right):\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode52\nsrc/pkg/compress/gzip/gzip.go:52: // UTF-8 strings in Go, but the underlying format is NUL-terminated ISO 8859-1\nUTF-8 isn't relevant, quite. strings aren't UTF-8 necessarily.  maybe\n\"general Go strings\"\n\ns/is/requires/\n\nhttp://codereview.appspot.com/5639057/diff/3011/src/pkg/compress/gzip/gzip.go#newcode57\nsrc/pkg/compress/gzip/gzip.go:57: // integer value between BestSpeed and BestCompression (inclusive). The error\ns/[()]//g",
			"disapproval": false,
			"date": "2012-02-10 01:53:57.081788",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 10 February 2012 23:05, Rob 'Commander' Pike <r@golang.org> wrote:\n> you didn't address my comments.\n\nI thought I did. Which ones did I miss?\n",
			"disapproval": false,
			"date": "2012-02-10 22:23:16.521314",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 11/02/2012, at 9:23 AM, Nigel Tao wrote:\n\n> On 10 February 2012 23:05, Rob 'Commander' Pike <r@golang.org> wrote:\n>> you didn't address my comments.\n> \n> I thought I did. Which ones did I miss?\n\nhmmm..... maybe it was in some other context. i'll send again.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-10 22:33:03.870839",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 5639057: compress/gzip: NewWriter no longer returns an error.",
	"created": "2012-02-08 05:17:52.867582",
	"patchsets": [
		1,
		2001,
		4001,
		1002,
		5007,
		6010,
		3011,
		8002,
		13001
	],
	"modified": "2012-02-10 22:33:21.039213",
	"closed": true,
	"issue": 5639057
}