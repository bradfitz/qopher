{
	"description": "syscalls: annotate Sendfile() for race detector\nFixes issue 4306.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-29 18:51:09.973630",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Mon, Oct 29, 2012 at 11:51 AM,  <dvyukov@google.com> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> syscalls: annotate Sendfile() for race detector\r\n> Fixes issue 4306.\r\n>\r\n> Please review this at http://codereview.appspot.com/6816054/\r\n>\r\n> Affected files:\r\n>   M src/pkg/syscall/syscall_darwin.go\r\n>   M src/pkg/syscall/syscall_freebsd_386.go\r\n>   M src/pkg/syscall/syscall_freebsd_amd64.go\r\n>   M src/pkg/syscall/syscall_freebsd_arm.go\r\n>   M src/pkg/syscall/syscall_linux_386.go\r\n>   M src/pkg/syscall/syscall_linux_amd64.go\r\n>   M src/pkg/syscall/syscall_linux_arm.go\r\n>   M src/pkg/syscall/syscall_netbsd.go\r\n>   M src/pkg/syscall/syscall_openbsd.go\r\n>   M src/pkg/syscall/syscall_unix.go\r\n>   M src/pkg/syscall/zsyscall_linux_386.go\r\n>   M src/pkg/syscall/zsyscall_linux_amd64.go\r\n>   M src/pkg/syscall/zsyscall_linux_arm.go\r\n>\r\n>\r\n> Index: src/pkg/syscall/syscall_darwin.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_darwin.go\r\n> +++ b/src/pkg/syscall/syscall_darwin.go\r\n> @@ -97,7 +97,7 @@\r\n>  }\r\n>\r\n>  // TODO\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         return -1, ENOSYS\r\n>  }\r\n>\r\n> @@ -334,7 +334,7 @@\r\n>  // __pthread_canceled\r\n>  // __semwait_signal\r\n>  // Proc_info\r\n> -// Sendfile\r\n> +// sendfile\r\n>  // Stat64_extended\r\n>  // Lstat64_extended\r\n>  // Fstat64_extended\r\n> Index: src/pkg/syscall/syscall_freebsd_386.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_freebsd_386.go\r\n> +++ b/src/pkg/syscall/syscall_freebsd_386.go\r\n> @@ -43,7 +43,7 @@\r\n>         cmsg.Len = uint32(length)\r\n>  }\r\n>\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         var writtenOut uint64 = 0\r\n>         _, _, e1 := Syscall9(SYS_SENDFILE, uintptr(infd), uintptr(outfd),\r\n> uintptr(*offset), uintptr((*offset)>>32), uintptr(count), 0,\r\n> uintptr(unsafe.Pointer(&writtenOut)), 0, 0)\r\n>\r\n> Index: src/pkg/syscall/syscall_freebsd_amd64.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_freebsd_amd64.go\r\n> +++ b/src/pkg/syscall/syscall_freebsd_amd64.go\r\n> @@ -43,7 +43,7 @@\r\n>         cmsg.Len = uint32(length)\r\n>  }\r\n>\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         var writtenOut uint64 = 0\r\n>         _, _, e1 := Syscall9(SYS_SENDFILE, uintptr(infd), uintptr(outfd),\r\n> uintptr(*offset), uintptr(count), 0, uintptr(unsafe.Pointer(&writtenOut)),\r\n> 0, 0, 0)\r\n>\r\n> Index: src/pkg/syscall/syscall_freebsd_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_freebsd_arm.go\r\n> +++ b/src/pkg/syscall/syscall_freebsd_arm.go\r\n> @@ -43,7 +43,7 @@\r\n>         cmsg.Len = uint32(length)\r\n>  }\r\n>\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         var writtenOut uint64 = 0\r\n>         _, _, e1 := Syscall9(SYS_SENDFILE, uintptr(infd), uintptr(outfd),\r\n> uintptr(*offset), uintptr((*offset)>>32), uintptr(count), 0,\r\n> uintptr(unsafe.Pointer(&writtenOut)), 0, 0)\r\n>\r\n> Index: src/pkg/syscall/syscall_linux_386.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_linux_386.go\r\n> +++ b/src/pkg/syscall/syscall_linux_386.go\r\n> @@ -41,7 +41,7 @@\r\n>  //sys  Lstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\r\n>  //sys  Pread(fd int, p []byte, offset int64) (n int, err error) =\r\n> SYS_PREAD64\r\n>  //sys  Pwrite(fd int, p []byte, offset int64) (n int, err error) =\r\n> SYS_PWRITE64\r\n> -//sys  Sendfile(outfd int, infd int, offset *int64, count int) (written\r\n> int, err error) = SYS_SENDFILE64\r\n> +//sys  sendfile(outfd int, infd int, offset *int64, count int) (written\r\n> int, err error) = SYS_SENDFILE64\r\n>  //sys  Setfsgid(gid int) (err error) = SYS_SETFSGID32\r\n>  //sys  Setfsuid(uid int) (err error) = SYS_SETFSUID32\r\n>  //sysnb        Setgid(gid int) (err error) = SYS_SETGID32\r\n> Index: src/pkg/syscall/syscall_linux_amd64.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_linux_amd64.go\r\n> +++ b/src/pkg/syscall/syscall_linux_amd64.go\r\n> @@ -23,7 +23,7 @@\r\n>  //sys  Pwrite(fd int, p []byte, offset int64) (n int, err error) =\r\n> SYS_PWRITE64\r\n>  //sys  Seek(fd int, offset int64, whence int) (off int64, err error) =\r\n> SYS_LSEEK\r\n>  //sys  Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n\r\n> int, err error)\r\n> -//sys  Sendfile(outfd int, infd int, offset *int64, count int) (written\r\n> int, err error)\r\n> +//sys  sendfile(outfd int, infd int, offset *int64, count int) (written\r\n> int, err error)\r\n>  //sys  Setfsgid(gid int) (err error)\r\n>  //sys  Setfsuid(uid int) (err error)\r\n>  //sysnb        Setgid(gid int) (err error)\r\n> Index: src/pkg/syscall/syscall_linux_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_linux_arm.go\r\n> +++ b/src/pkg/syscall/syscall_linux_arm.go\r\n> @@ -55,7 +55,7 @@\r\n>  //sys  Lchown(path string, uid int, gid int) (err error) = SYS_LCHOWN32\r\n>  //sys  Listen(s int, n int) (err error)\r\n>  //sys  Lstat(path string, stat *Stat_t) (err error) = SYS_LSTAT64\r\n> -//sys  Sendfile(outfd int, infd int, offset *int64, count int) (written\r\n> int, err error) = SYS_SENDFILE64\r\n> +//sys  sendfile(outfd int, infd int, offset *int64, count int) (written\r\n> int, err error) = SYS_SENDFILE64\r\n>  //sys  Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n\r\n> int, err error) = SYS__NEWSELECT\r\n>  //sys  Setfsgid(gid int) (err error) = SYS_SETFSGID32\r\n>  //sys  Setfsuid(uid int) (err error) = SYS_SETFSUID32\r\n> Index: src/pkg/syscall/syscall_netbsd.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_netbsd.go\r\n> +++ b/src/pkg/syscall/syscall_netbsd.go\r\n> @@ -133,7 +133,7 @@\r\n>  }\r\n>\r\n>  // TODO\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         return -1, ENOSYS\r\n>  }\r\n>\r\n> Index: src/pkg/syscall/syscall_openbsd.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_openbsd.go\r\n> +++ b/src/pkg/syscall/syscall_openbsd.go\r\n> @@ -91,7 +91,7 @@\r\n>  }\r\n>\r\n>  // TODO\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         return -1, ENOSYS\r\n>  }\r\n>\r\n> Index: src/pkg/syscall/syscall_unix.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_unix.go\r\n> +++ b/src/pkg/syscall/syscall_unix.go\r\n> @@ -143,4 +143,11 @@\r\n>         return write(fd, p)\r\n>  }\r\n>\r\n> +func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +       if raceenabled {\r\n> +               raceReleaseMerge(unsafe.Pointer(&ioSync))\r\n> +       }\r\n> +       return sendfile(outfd, infd, offset, count)\r\n> +}\r\n> +\r\n>  var ioSync int64\r\n> Index: src/pkg/syscall/zsyscall_linux_386.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/zsyscall_linux_386.go\r\n> +++ b/src/pkg/syscall/zsyscall_linux_386.go\r\n> @@ -1371,7 +1371,7 @@\r\n>\r\n>  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         r0, _, e1 := Syscall6(SYS_SENDFILE64, uintptr(outfd), uintptr(infd),\r\n> uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)\r\n>         written = int(r0)\r\n>         if e1 != 0 {\r\n> Index: src/pkg/syscall/zsyscall_linux_amd64.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/zsyscall_linux_amd64.go\r\n> +++ b/src/pkg/syscall/zsyscall_linux_amd64.go\r\n> @@ -1423,7 +1423,7 @@\r\n>\r\n>  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         r0, _, e1 := Syscall6(SYS_SENDFILE, uintptr(outfd), uintptr(infd),\r\n> uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)\r\n>         written = int(r0)\r\n>         if e1 != 0 {\r\n> Index: src/pkg/syscall/zsyscall_linux_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/zsyscall_linux_arm.go\r\n> +++ b/src/pkg/syscall/zsyscall_linux_arm.go\r\n> @@ -1484,7 +1484,7 @@\r\n>\r\n>  // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n>\r\n> -func Sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n> +func sendfile(outfd int, infd int, offset *int64, count int) (written int,\r\n> err error) {\r\n>         r0, _, e1 := Syscall6(SYS_SENDFILE64, uintptr(outfd), uintptr(infd),\r\n> uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)\r\n>         written = int(r0)\r\n>         if e1 != 0 {\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-29 19:06:28.481490",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=24784984063b ***\n\nsyscalls: annotate Sendfile() for race detector\nFixes issue 4306.\n\nR=golang-dev, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6816054",
			"disapproval": false,
			"date": "2012-10-29 19:16:13.971930",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6816054: syscalls: annotate Sendfile() for race detector",
	"created": "2012-10-29 18:37:15.771880",
	"patchsets": [
		1,
		2001,
		3,
		6001,
		9001
	],
	"modified": "2012-10-29 19:16:15.085590",
	"closed": true,
	"issue": 6816054
}