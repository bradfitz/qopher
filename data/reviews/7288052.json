{
	"description": "time: deal a bit better with time zones in Parse\n\n* Document Parse's zone interpretation.\n* Add ParseInLocation (API change).\n* Recognize \"wrong\" time zone names, like daylight savings time in winter.\n* Disambiguate time zone names using offset (like winter EST vs summer EST in Sydney).\n\nThe final two are backwards-incompatible changes, but I believe\nthey are both buggy behavior in the Go 1.0 versions; the old results\nwere more wrong than the new ones.\n\nFixes issue 3604.\nFixes issue 3653.\nFixes issue 4001.",
	"cc": [
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-04 02:04:07.897670",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7288052/diff/2001/src/pkg/time/example_test.go\nFile src/pkg/time/example_test.go (right):\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/example_test.go#newcode71\nsrc/pkg/time/example_test.go:71: const long = \"Jan 2, 2006 at 3:04pm (MST)\"\nIt's not clear to me which of these is the format string and which is the string to be parsed. Perhaps use two constants descriptively named?\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go#newcode565\nsrc/pkg/time/time_test.go:565: t.Fatalf(\"ParseInLocation(Feb 01 2013 EST, Sydney) = %v, want %v\", t1, t2)\ns/Feb/Aug/\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go#newcode568\nsrc/pkg/time/time_test.go:568: if offset != 10*60*60 {\nif want := 10*60*60; offset != want {\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go#newcode569\nsrc/pkg/time/time_test.go:569: t.Fatalf(\"ParseInLocation(Feb 01 2013 EST, Sydney).Zone = _, %d, want _, %d\", offset, 10*60*60)\ns/Feb/Aug/\ns/10*60*60/want/",
			"disapproval": false,
			"date": "2013-02-04 02:43:07.283920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 03:46:40.514620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7288052/diff/2001/src/pkg/time/example_test.go\nFile src/pkg/time/example_test.go (right):\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/example_test.go#newcode71\nsrc/pkg/time/example_test.go:71: const long = \"Jan 2, 2006 at 3:04pm (MST)\"\nOn 2013/02/04 02:43:07, adg wrote:\n> It's not clear to me which of these is the format string and which is the string\n> to be parsed. Perhaps use two constants descriptively named?\n\nRemember that this example will be showing immediately under the docs for the method. I had hoped that the use of a const at all would suggest 'format string', because if the thing you're parsing was a constant you wouldn't need to use Parse in the first place. To emphasize this I renamed the constants to longForm and shortForm (instead of long and short). I'd prefer not to introduce a constant for the variable part of the call, for the reason just given.\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go#newcode565\nsrc/pkg/time/time_test.go:565: t.Fatalf(\"ParseInLocation(Feb 01 2013 EST, Sydney) = %v, want %v\", t1, t2)\nOn 2013/02/04 02:43:07, adg wrote:\n> s/Feb/Aug/\n\nDone.\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go#newcode568\nsrc/pkg/time/time_test.go:568: if offset != 10*60*60 {\nOn 2013/02/04 02:43:07, adg wrote:\n> if want := 10*60*60; offset != want {\n\nThanks, but no thanks. I think that form is overused. It's just as easy to see that it says 10*60*60 in both places as it is to see that it says 'want' in both places. For trivial cases the indirection hurts readability more than it helps.\n\nhttps://codereview.appspot.com/7288052/diff/2001/src/pkg/time/time_test.go#newcode569\nsrc/pkg/time/time_test.go:569: t.Fatalf(\"ParseInLocation(Feb 01 2013 EST, Sydney).Zone = _, %d, want _, %d\", offset, 10*60*60)\nOn 2013/02/04 02:43:07, adg wrote:\n> s/Feb/Aug/\n> s/10*60*60/want/\n\nDone half.",
			"disapproval": false,
			"date": "2013-02-04 03:46:55.788530",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-04 03:50:59.628530",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=36925180b9ef ***\n\ntime: deal a bit better with time zones in Parse\n\n* Document Parse's zone interpretation.\n* Add ParseInLocation (API change).\n* Recognize \"wrong\" time zone names, like daylight savings time in winter.\n* Disambiguate time zone names using offset (like winter EST vs summer EST in Sydney).\n\nThe final two are backwards-incompatible changes, but I believe\nthey are both buggy behavior in the Go 1.0 versions; the old results\nwere more wrong than the new ones.\n\nFixes issue 3604.\nFixes issue 3653.\nFixes issue 4001.\n\nR=adg\nCC=golang-dev\nhttps://codereview.appspot.com/7288052",
			"disapproval": false,
			"date": "2013-02-04 04:02:17.636430",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7288052: time: deal a bit better with time zones in Parse",
	"created": "2013-02-04 01:09:35.139380",
	"patchsets": [
		1,
		2001,
		9001,
		14001
	],
	"modified": "2013-02-04 04:02:18.720120",
	"closed": true,
	"issue": 7288052
}