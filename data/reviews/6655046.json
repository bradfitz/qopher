{
	"description": "go.crypto/ssh: add terminal modes to ssh.RequestPty()",
	"cc": [
		"agl@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6655046/diff/2001/ssh/session.go\nFile ssh/session.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/2001/ssh/session.go#newcode188\nssh/session.go:188: func (s *Session) RequestPty(term string, h, w int, termmodes TerminalModes) error {\nFair enough. Well put. Does passing a nil here imply the old emptyModeList ?",
			"disapproval": false,
			"date": "2012-10-12 06:14:23.101200",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you very much. This looks like a good start.\n\nIn addition to these comments, I suggest adding a few sample ModeLists, ie, the EmptyModeList, for non interactive sessions, and some sample ones that would get someone going with an interactive terminal.\n\nThink about adding a test that at least uses this function. If there isn't the facility in our ssh server to verify the modelist, maybe try the ssh/test subpackage.\n\nhttps://codereview.appspot.com/6655046/diff/2001/ssh/session.go\nFile ssh/session.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/2001/ssh/session.go#newcode54\nssh/session.go:54: const (\nLuckily these will be coerced into a byte when they are used in the append([]byte, byte) statement, so you can drop the uint8's\n\nhttps://codereview.appspot.com/6655046/diff/2001/ssh/session.go#newcode188\nssh/session.go:188: func (s *Session) RequestPty(term string, h, w int, termmodes TerminalModes) error {\nI'm not sure a map is the right data structure for this. I would make a Mode struct, then callers can use the compact literal syntax\n\nhttp://play.golang.org/p/3u7T3PFm6K\n\nhttps://codereview.appspot.com/6655046/diff/2001/ssh/session.go#newcode194\nssh/session.go:194: termModes = append(termModes, TTY_OP_END)\nAs this is the only mode that takes no value, I don't think you should export a constant for it, ie, make it tty_OP_ENV.",
			"disapproval": false,
			"date": "2012-10-12 05:25:47.628250",
			"approval": false
		},
		{
			"sender": "willemvds@gmail.com",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6655046/diff/2001/ssh/session.go\nFile ssh/session.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/2001/ssh/session.go#newcode188\nssh/session.go:188: func (s *Session) RequestPty(term string, h, w int, termmodes TerminalModes) error {\nI was not sure about the map type either but I do think it works out quite nicely:\n1) Creation syntax is simple\n2) Modifying the modes after creation is easy and duplicates are automatically handled\n\nhttp://play.golang.org/p/v2ftpYKipb\n\nOn 2012/10/12 05:25:47, dfc wrote:\n> I'm not sure a map is the right data structure for this. I would make a Mode\n> struct, then callers can use the compact literal syntax\n> \n> http://play.golang.org/p/3u7T3PFm6K\n>",
			"disapproval": false,
			"date": "2012-10-12 06:10:56.241850",
			"approval": false
		},
		{
			"sender": "willemvds@gmail.com",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6655046/diff/2001/ssh/session.go\nFile ssh/session.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/2001/ssh/session.go#newcode188\nssh/session.go:188: func (s *Session) RequestPty(term string, h, w int, termmodes TerminalModes) error {\nCorrect. Passing ssh.TerminalModes{} or nil will both have the same effect as the old emptyModeList.\n\nOn 2012/10/12 06:14:23, dfc wrote:\n> Fair enough. Well put. Does passing a nil here imply the old emptyModeList ?",
			"disapproval": false,
			"date": "2012-10-15 05:45:06.763170",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is looking very good. One more round should do it.\n\nhttps://codereview.appspot.com/6655046/diff/16001/ssh/example_test.go\nFile ssh/example_test.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/16001/ssh/example_test.go#newcode154\nssh/example_test.go:154: // Create client config\nSkip everything down to // Set up terminal modes\n\nhttps://codereview.appspot.com/6655046/diff/16001/ssh/example_test.go#newcode175\nssh/example_test.go:175: ECHO:          0,\nfor examples sake, please annotate each of these, ie\n\nECHO: 0 // do not echo\nTTY_OP_ISPEED: 14400 // 14.4 kbaud\n\nhttps://codereview.appspot.com/6655046/diff/16001/ssh/session.go\nFile ssh/session.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/16001/ssh/session.go#newcode189\nssh/session.go:189: termModes := make([]byte, 0, 276)\nIs 276 a magic number ?\n\nhttps://codereview.appspot.com/6655046/diff/16001/ssh/test/session_test.go\nFile ssh/test/session_test.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/16001/ssh/test/session_test.go#newcode160\nssh/test/session_test.go:160: bytes := make([]byte, 1024)\nI would use io.Copy into a bytes.Buffer, then rc <- buf.String()",
			"disapproval": false,
			"date": "2012-10-16 23:07:15.781200",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Excellent. I think this is good to go now. Can you please do a hg mail 6655046 so it is published to golang-dev.\n\nThe authors will also need to do a bit of paperwork behind the scenes to add your name to the A+C files.\n\nhttps://codereview.appspot.com/6655046/diff/21001/ssh/test/session_test.go\nFile ssh/test/session_test.go (right):\n\nhttps://codereview.appspot.com/6655046/diff/21001/ssh/test/session_test.go#newcode158\nssh/test/session_test.go:158: go func() {\nyou can also do\n\nvar buf bytes.Buffer\nif _, err := io.Copy(&buf, stdout) { \n    t.Fatalf(\"reading failed: %s\", err)\n}",
			"disapproval": false,
			"date": "2012-10-18 08:59:05.777340",
			"approval": false
		},
		{
			"sender": "willemvds@gmail.com",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-10-18 13:00:17.590920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ffee30e1c207&repo=crypto ***\n\ngo.crypto/ssh: add terminal modes to ssh.RequestPty()\n\nR=dave, agl\nCC=golang-dev\nhttp://codereview.appspot.com/6655046\n\nCommitter: Dave Cheney <dave@cheney.net>",
			"disapproval": false,
			"date": "2012-10-21 05:17:02.221450",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Have you signed the ICLA?\n\nhttp://golang.org/doc/contribute.html#copyright",
			"disapproval": false,
			"date": "2012-10-18 14:02:59.070660",
			"approval": false
		},
		{
			"sender": "willemvds@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought I already did, but I submitted it again just now to be sure.\r\n\r\nOn Thu, Oct 18, 2012 at 4:02 PM, <agl@golang.org> wrote:\r\n\r\n> Have you signed the ICLA?\r\n>\r\n> http://golang.org/doc/**contribute.html#copyright<http://golang.org/doc/contribute.html#copyright>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6655046/<https://codereview.appspot.com/6655046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-18 14:36:48.810100",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Willem,\n\nAs it has been several months since we added to the ssh pkg API, and the first breaking change in a while, would you please write a brief [ANN] to golang-nuts explaining the change, what it does and how people can update their code.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-10-21 05:18:42.124820",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"willemvds@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 21:23:21.581650",
			"approval": false
		}
	],
	"owner_email": "willemvds@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "willemvds",
	"subject": "code review 6655046: go.crypto/ssh: add terminal modes to ssh.RequestPty()",
	"created": "2012-10-11 16:59:09.373480",
	"patchsets": [
		1,
		2001,
		8001,
		13001,
		16001,
		21001,
		27001,
		30001
	],
	"modified": "2013-07-20 21:23:21.866150",
	"closed": false,
	"issue": 6655046
}