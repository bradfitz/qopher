{
	"description": "archive/zip: handle corrupt extra data records\n\nFixes issue 4302.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 30, 2012 at 2:46 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> > src/pkg/archive/zip/zip_test.go:206: // TODO(dfc) revisit this when\r\n> > bytes.Buffer implements ReadAt.\r\n> > delete this line.  It both makes no sense (to me at least) and also it\r\n> > implies that bytes.Buffer will one day support ReadAt.  It won't.\r\n>\r\n> My mistake, I thought that there was a CL in progress to add this.\r\n>\r\n\r\nSome ReaderFrom additions went in (and WriterTo?), but not ReaderAt.\r\n\r\nA *bytes.Buffer could never implement ReaderAt because the ReaderAt\r\ncontract says it's not allowed to be affected by a Seek or Read call, yet a\r\nRead call on a *Buffer destroys the read data and shifts around the \"seek\r\noffset\" (if it had one).\r\n",
			"disapproval": false,
			"date": "2012-10-30 13:52:33.073320",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 31 October 2012 00:57, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> On Tue, Oct 30, 2012 at 2:56 PM, <adg@golang.org> wrote:\r\n>>\r\n>> NOT LGTM\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go\r\n>> File src/pkg/archive/zip/reader.go (right):\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go#newcode23\r\n>>\r\n>> src/pkg/archive/zip/reader.go:23: errCorruptExtra = errors.New(\"zip:\r\n>> corrupt extra data\")\r\n>> I don't see a need for this extra error. It should just be ErrFormat.\r\n>\r\n>\r\n> it's lowercase, not an API addition.\r\n\r\nI saw that, and the discussion, but I think it should just be\r\nErrFormat. That's what you get for a malformed zip file. There's no\r\nneed to return anything else.\r\n",
			"disapproval": false,
			"date": "2012-10-30 14:01:26.151860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttp://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/reader.go#newcode23\nsrc/pkg/archive/zip/reader.go:23: ErrCorruptExtra = errors.New(\"zip: corrupt extra data\")\nOn 2012/10/29 21:58:52, bradfitz wrote:\n> is this common enough to warrant its own error type variable?  the first two\n> seem like yes. the checksum one, maybe. this one is starting to really stretch\n> it.  I'd prefer to make this lowercase for now, and export it later if anybody\n> actually cares.\n\nDone.\n\nhttp://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/zip_test.go\nFile src/pkg/archive/zip/zip_test.go (right):\n\nhttp://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/zip_test.go#newcode183\nsrc/pkg/archive/zip/zip_test.go:183: defer z.Close()\nOn 2012/10/29 21:58:52, bradfitz wrote:\n> don't you have to do this after fh.Write and before buf.Bytes to ensure a flush\n> happens?  and check the return value from it.\n\nDone.",
			"disapproval": false,
			"date": "2012-10-30 16:51:21.167310",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> src/pkg/archive/zip/zip_test.go:206: // TODO(dfc) revisit this when\r\n> bytes.Buffer implements ReadAt.\r\n> delete this line.  It both makes no sense (to me at least) and also it\r\n> implies that bytes.Buffer will one day support ReadAt.  It won't.\r\n\r\nMy mistake, I thought that there was a CL in progress to add this.\r\n",
			"disapproval": false,
			"date": "2012-10-30 13:46:19.516930",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-29 21:47:28.943850",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-30 13:20:13.095170",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\n\nhttps://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttps://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go#newcode23\nsrc/pkg/archive/zip/reader.go:23: errCorruptExtra = errors.New(\"zip: corrupt extra data\")\nI don't see a need for this extra error. It should just be ErrFormat.",
			"disapproval": true,
			"date": "2012-10-30 13:56:26.123470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. PTAL.\r\n\r\nOn Wed, Oct 31, 2012 at 1:00 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n> On 31 October 2012 00:57, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>> On Tue, Oct 30, 2012 at 2:56 PM, <adg@golang.org> wrote:\r\n>>>\r\n>>> NOT LGTM\r\n>>>\r\n>>>\r\n>>>\r\n>>> https://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go\r\n>>> File src/pkg/archive/zip/reader.go (right):\r\n>>>\r\n>>>\r\n>>> https://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go#newcode23\r\n>>>\r\n>>> src/pkg/archive/zip/reader.go:23: errCorruptExtra = errors.New(\"zip:\r\n>>> corrupt extra data\")\r\n>>> I don't see a need for this extra error. It should just be ErrFormat.\r\n>>\r\n>>\r\n>> it's lowercase, not an API addition.\r\n>\r\n> I saw that, and the discussion, but I think it should just be\r\n> ErrFormat. That's what you get for a malformed zip file. There's no\r\n> need to return anything else.\r\n",
			"disapproval": false,
			"date": "2012-10-30 14:28:26.304680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6811048/diff/1002/src/pkg/archive/zip/zip_test.go\nFile src/pkg/archive/zip/zip_test.go (right):\n\nhttps://codereview.appspot.com/6811048/diff/1002/src/pkg/archive/zip/zip_test.go#newcode182\nsrc/pkg/archive/zip/zip_test.go:182: func() {\nwhat the func?\n\nhttps://codereview.appspot.com/6811048/diff/1002/src/pkg/archive/zip/zip_test.go#newcode204\nsrc/pkg/archive/zip/zip_test.go:204: }()\nwhy?",
			"disapproval": false,
			"date": "2012-10-29 21:52:44.579210",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=58c77d337d81 ***\n\narchive/zip: handle corrupt extra data records\n\nFixes issue 4302.\n\nR=golang-dev, bradfitz, adg\nCC=golang-dev\nhttp://codereview.appspot.com/6811048",
			"disapproval": false,
			"date": "2012-10-30 16:52:04.664730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6811048/diff/1002/src/pkg/archive/zip/zip_test.go\nFile src/pkg/archive/zip/zip_test.go (right):\n\nhttps://codereview.appspot.com/6811048/diff/1002/src/pkg/archive/zip/zip_test.go#newcode182\nsrc/pkg/archive/zip/zip_test.go:182: func() {\nOn 2012/10/29 21:52:44, bradfitz wrote:\n> what the func?\n\nSorry, this was part of the original failing sample, but makes no sense in this context.\n\nhttps://codereview.appspot.com/6811048/diff/1002/src/pkg/archive/zip/zip_test.go#newcode204\nsrc/pkg/archive/zip/zip_test.go:204: }()\nOn 2012/10/29 21:52:44, bradfitz wrote:\n> why?\n\nDone.",
			"disapproval": false,
			"date": "2012-10-29 21:54:30.076430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 30, 2012 at 2:56 PM, <adg@golang.org> wrote:\r\n\r\n> NOT LGTM\r\n>\r\n>\r\n> https://codereview.appspot.**com/6811048/diff/12002/src/**\r\n> pkg/archive/zip/reader.go<https://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go>\r\n> File src/pkg/archive/zip/reader.go (right):\r\n>\r\n> https://codereview.appspot.**com/6811048/diff/12002/src/**\r\n> pkg/archive/zip/reader.go#**newcode23<https://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/reader.go#newcode23>\r\n>\r\n> src/pkg/archive/zip/reader.go:**23: errCorruptExtra = errors.New(\"zip:\r\n> corrupt extra data\")\r\n> I don't see a need for this extra error. It should just be ErrFormat.\r\n>\r\n\r\nit's lowercase, not an API addition.\r\n",
			"disapproval": false,
			"date": "2012-10-30 13:57:38.200960",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-30 15:38:07.681980",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-29 21:54:52.796900",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/zip_test.go\nFile src/pkg/archive/zip/zip_test.go (right):\n\nhttps://codereview.appspot.com/6811048/diff/12002/src/pkg/archive/zip/zip_test.go#newcode206\nsrc/pkg/archive/zip/zip_test.go:206: // TODO(dfc) revisit this when bytes.Buffer implements ReadAt.\ndelete this line.  It both makes no sense (to me at least) and also it implies that bytes.Buffer will one day support ReadAt.  It won't.",
			"disapproval": false,
			"date": "2012-10-30 13:42:20.872630",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttps://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/reader.go#newcode23\nsrc/pkg/archive/zip/reader.go:23: ErrCorruptExtra = errors.New(\"zip: corrupt extra data\")\nis this common enough to warrant its own error type variable?  the first two seem like yes. the checksum one, maybe. this one is starting to really stretch it.  I'd prefer to make this lowercase for now, and export it later if anybody actually cares.\n\nhttps://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/zip_test.go\nFile src/pkg/archive/zip/zip_test.go (right):\n\nhttps://codereview.appspot.com/6811048/diff/6002/src/pkg/archive/zip/zip_test.go#newcode183\nsrc/pkg/archive/zip/zip_test.go:183: defer z.Close()\ndon't you have to do this after fh.Write and before buf.Bytes to ensure a flush happens?  and check the return value from it.",
			"disapproval": false,
			"date": "2012-10-29 21:58:52.657620",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6811048: archive/zip: handle corrupt extra data records",
	"created": "2012-10-29 21:41:47.995790",
	"patchsets": [
		1,
		3,
		1002,
		6002,
		4,
		13001,
		12002,
		4003,
		3003
	],
	"modified": "2012-10-30 16:52:06.259050",
	"closed": true,
	"issue": 6811048
}