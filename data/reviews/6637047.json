{
	"description": "encoding/gob: fix data race in Register\nFixes issue 4214.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-09 00:24:57.986360",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This seems like an obvious use case for sync.RWMutex instead: an\r\ninitial few writes, but then almost always reads after that.\r\n",
			"disapproval": false,
			"date": "2012-10-09 00:26:54.939230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "RWMutex?\r\n\r\nOn Mon, Oct 8, 2012 at 5:24 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> encoding/gob: fix data race in Register\r\n> Fixes issue 4214.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6637047/<http://codereview.appspot.com/6637047/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/encoding/gob/decode.go\r\n>   M src/pkg/encoding/gob/encode.go\r\n>   M src/pkg/encoding/gob/type.go\r\n>   M src/pkg/encoding/gob/type_**test.go\r\n>\r\n>\r\n> Index: src/pkg/encoding/gob/decode.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/decode.**go\r\n> +++ b/src/pkg/encoding/gob/decode.**go\r\n> @@ -717,7 +717,9 @@\r\n>                 errorf(\"name too long (%d bytes): %.20q...\", len(name),\r\n> name)\r\n>         }\r\n>         // The concrete type must be registered.\r\n> +       registerLock.Lock()\r\n>         typ, ok := nameToConcreteType[name]\r\n> +       registerLock.Unlock()\r\n>         if !ok {\r\n>                 errorf(\"name not registered for interface: %q\", name)\r\n>         }\r\n> Index: src/pkg/encoding/gob/encode.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/encode.**go\r\n> +++ b/src/pkg/encoding/gob/encode.**go\r\n> @@ -441,7 +441,9 @@\r\n>         }\r\n>\r\n>         ut := userType(iv.Elem().Type())\r\n> +       registerLock.Lock()\r\n>         name, ok := concreteTypeToName[ut.base]\r\n> +       registerLock.Unlock()\r\n>         if !ok {\r\n>                 errorf(\"type not registered for interface: %s\", ut.base)\r\n>         }\r\n> Index: src/pkg/encoding/gob/type.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/type.go\r\n> +++ b/src/pkg/encoding/gob/type.go\r\n> @@ -712,6 +712,7 @@\r\n>  }\r\n>\r\n>  var (\r\n> +       registerLock       sync.Mutex\r\n>         nameToConcreteType = make(map[string]reflect.Type)\r\n>         concreteTypeToName = make(map[reflect.Type]string)\r\n>  )\r\n> @@ -723,6 +724,8 @@\r\n>                 // reserved for nil\r\n>                 panic(\"attempt to register empty name\")\r\n>         }\r\n> +       registerLock.Lock()\r\n> +       defer registerLock.Unlock()\r\n>         ut := userType(reflect.TypeOf(value)**)\r\n>         // Check for incompatible duplicates. The name must refer to the\r\n>         // same user type, and vice versa.\r\n> Index: src/pkg/encoding/gob/type_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/type_**test.go\r\n> +++ b/src/pkg/encoding/gob/type_**test.go\r\n> @@ -177,7 +177,10 @@\r\n>                 Register(tc.t)\r\n>\r\n>                 tct := reflect.TypeOf(tc.t)\r\n> -               if ct := nameToConcreteType[tc.name]; ct != tct {\r\n> +               registerLock.Lock()\r\n> +               ct := nameToConcreteType[tc.name]\r\n> +               registerLock.Unlock()\r\n> +               if ct != tct {\r\n>                         t.Errorf(\"nameToConcreteType[%**q] = %v, want\r\n> %v\", tc.name, ct, tct)\r\n>                 }\r\n>                 // concreteTypeToName is keyed off the base type.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-09 00:26:58.702830",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Mon, Oct 8, 2012 at 5:43 PM, <r@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, dsymonds@golang.org,\r\n> bradfitz@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6637047/<http://codereview.appspot.com/6637047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-09 00:44:17.979350",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-09 00:43:13.960860",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-09 00:49:42.824960",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ddfae026505a ***\n\nencoding/gob: fix data race in Register\nFixes issue 4214.\n\nR=golang-dev, dsymonds, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6637047",
			"disapproval": false,
			"date": "2012-10-09 00:56:53.978200",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6637047: encoding/gob: fix data race in Register",
	"created": "2012-10-09 00:24:49.262680",
	"patchsets": [
		1,
		3001,
		1006,
		4006
	],
	"modified": "2012-10-09 00:56:55.671270",
	"closed": true,
	"issue": 6637047
}