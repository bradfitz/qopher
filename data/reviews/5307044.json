{
	"description": "exp/template/html: use rune\n\nNothing terribly interesting here.",
	"cc": [
		"mikesamuel@gmail.com",
		"nigeltao@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "it's a new alias for int, one day an alias for uint32.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-19 18:28:34.025245",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikesamuel, nigeltao (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-19 17:27:41.754722",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't see a type def for rune.  Assuming that's a new intrinsic, LGTM.\n\n\n2011/10/19  <rsc@golang.org>:\n> Reviewers: MikeSamuel, nigeltao,\n>\n> Message:\n> Hello mikesamuel, nigeltao (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> exp/template/html: use rune\n>\n> Nothing terribly interesting here.\n>\n> Please review this at http://codereview.appspot.com/5307044/\n>\n> Affected files:\n> \u00a0M src/pkg/exp/template/html/css.go\n> \u00a0M src/pkg/exp/template/html/css_test.go\n> \u00a0M src/pkg/exp/template/html/html.go\n> \u00a0M src/pkg/exp/template/html/js.go\n>\n>\n> Index: src/pkg/exp/template/html/css.go\n> ===================================================================\n> --- a/src/pkg/exp/template/html/css.go\n> +++ b/src/pkg/exp/template/html/css.go\n> @@ -35,19 +35,19 @@\n> \u00a0}\n>\n> \u00a0// isCSSNmchar returns whether rune is allowed anywhere in a CSS\n> identifier.\n> -func isCSSNmchar(rune int) bool {\n> - \u00a0 \u00a0 \u00a0 // Based on the CSS3 nmchar production but ignores multi-rune escape\n> +func isCSSNmchar(r rune) bool {\n> + \u00a0 \u00a0 \u00a0 // Based on the CSS3 nmchar production but ignores multi-r escape\n> \u00a0 \u00a0 \u00a0 \u00a0// sequences.\n> \u00a0 \u00a0 \u00a0 \u00a0// http://www.w3.org/TR/css3-syntax/#SUBTOK-nmchar\n> - \u00a0 \u00a0 \u00a0 return 'a' <= rune && rune <= 'z' ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'A' <= rune && rune <= 'Z' ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '0' <= rune && rune <= '9' ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '-' == rune ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '_' == rune ||\n> + \u00a0 \u00a0 \u00a0 return 'a' <= r && r <= 'z' ||\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'A' <= r && r <= 'Z' ||\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '0' <= r && r <= '9' ||\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r == '-' ||\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r == '_' ||\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Non-ASCII cases below.\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x80 <= rune && rune <= 0xd7ff ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0xe000 <= rune && rune <= 0xfffd ||\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x10000 <= rune && rune <= 0x10ffff\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x80 <= r && r <= 0xd7ff ||\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0xe000 <= r && r <= 0xfffd ||\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x10000 <= r && r <= 0x10ffff\n> \u00a0}\n>\n> \u00a0// decodeCSS decodes CSS3 escapes given a sequence of stringchars.\n> @@ -81,11 +81,11 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0for j < len(s) && j < 7 && isHex(s[j]) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0j++\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rune := hexDecode(s[1:j])\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if rune > unicode.MaxRune {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rune, j = rune/16, j-1\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r := hexDecode(s[1:j])\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if r > unicode.MaxRune {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r, j = r/16, j-1\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n := utf8.EncodeRune(b[len(b):cap(b)], rune)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n := utf8.EncodeRune(b[len(b):cap(b)], r)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// The optional space at the end allows a hex\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// sequence to be followed by a literal hex.\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// string(decodeCSS([]byte(`\\A B`))) == \"\\nB\"\n> @@ -105,17 +105,17 @@\n> \u00a0}\n>\n> \u00a0// hexDecode decodes a short hex digit sequence: \"10\" -> 16.\n> -func hexDecode(s []byte) int {\n> - \u00a0 \u00a0 \u00a0 n := 0\n> +func hexDecode(s []byte) rune {\n> + \u00a0 \u00a0 \u00a0 n := rune(0)\n> \u00a0 \u00a0 \u00a0 \u00a0for _, c := range s {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0n <<= 4\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0switch {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '0' <= c && c <= '9':\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n |= int(c - '0')\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n |= rune(c - '0')\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case 'a' <= c && c <= 'f':\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n |= int(c-'a') + 10\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n |= rune(c-'a') + 10\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case 'A' <= c && c <= 'F':\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n |= int(c-'A') + 10\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 n |= rune(c-'A') + 10\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0default:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0panic(fmt.Sprintf(\"Bad hex digit in %q\", s))\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> @@ -251,11 +251,11 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case '-':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Disallow <!-- or -->.\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// -- should not appear in valid identifiers.\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if i != 0 && '-' == b[i-1] {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if i != 0 && b[i-1] == '-' {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return filterFailsafe\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0default:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if c < 0x80 && isCSSNmchar(int(c)) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if c < 0x80 && isCSSNmchar(rune(c)) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0id = append(id, c)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> Index: src/pkg/exp/template/html/css_test.go\n> ===================================================================\n> --- a/src/pkg/exp/template/html/css_test.go\n> +++ b/src/pkg/exp/template/html/css_test.go\n> @@ -35,7 +35,7 @@\n>\n> \u00a0func TestIsCSSNmchar(t *testing.T) {\n> \u00a0 \u00a0 \u00a0 \u00a0tests := []struct {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rune int\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rune rune\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0want bool\n> \u00a0 \u00a0 \u00a0 \u00a0}{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{0, false},\n> @@ -114,11 +114,11 @@\n> \u00a0func TestHexDecode(t *testing.T) {\n> \u00a0 \u00a0 \u00a0 \u00a0for i := 0; i < 0x200000; i += 101 /* coprime with 16 */ {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0s := strconv.Itob(i, 16)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if got := hexDecode([]byte(s)); got != i {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if got := int(hexDecode([]byte(s))); got != i {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0t.Errorf(\"%s: want %d but got %d\", s, i, got)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0s = strings.ToUpper(s)\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if got := hexDecode([]byte(s)); got != i {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if got := int(hexDecode([]byte(s))); got != i {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0t.Errorf(\"%s: want %d but got %d\", s, i, got)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> Index: src/pkg/exp/template/html/html.go\n> ===================================================================\n> --- a/src/pkg/exp/template/html/html.go\n> +++ b/src/pkg/exp/template/html/html.go\n> @@ -139,7 +139,7 @@\n> \u00a0func htmlReplacer(s string, replacementTable []string, badRunes bool)\n> string {\n> \u00a0 \u00a0 \u00a0 \u00a0written, b := 0, new(bytes.Buffer)\n> \u00a0 \u00a0 \u00a0 \u00a0for i, r := range s {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if r < len(replacementTable) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if int(r) < len(replacementTable) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if repl := replacementTable[r]; len(repl) != 0 {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.WriteString(s[written:i])\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0b.WriteString(repl)\n> Index: src/pkg/exp/template/html/js.go\n> ===================================================================\n> --- a/src/pkg/exp/template/html/js.go\n> +++ b/src/pkg/exp/template/html/js.go\n> @@ -85,7 +85,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Look for an IdentifierName and see if it is a keyword that\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// can precede a regular expression.\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0j := n\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for j > 0 && isJSIdentPart(int(s[j-1])) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for j > 0 && isJSIdentPart(rune(s[j-1])) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0j--\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if regexpPrecederKeywords[string(s[j:])] {\n> @@ -234,7 +234,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0for i, r := range s {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0var repl string\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0switch {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case r < len(replacementTable) && replacementTable[r] != \"\":\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case int(r) < len(replacementTable) && replacementTable[r]\n> != \"\":\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0repl = replacementTable[r]\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case r == '\\u2028':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0repl = `\\u2028`\n> @@ -329,17 +329,17 @@\n> \u00a0// It does not handle all the non-Latin letters, joiners, and combining\n> marks,\n> \u00a0// but it does handle every codepoint that can occur in a numeric literal\n> or\n> \u00a0// a keyword.\n> -func isJSIdentPart(rune int) bool {\n> +func isJSIdentPart(r rune) bool {\n> \u00a0 \u00a0 \u00a0 \u00a0switch {\n> - \u00a0 \u00a0 \u00a0 case '$' == rune:\n> + \u00a0 \u00a0 \u00a0 case r == '$':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true\n> - \u00a0 \u00a0 \u00a0 case '0' <= rune && rune <= '9':\n> + \u00a0 \u00a0 \u00a0 case '0' <= r && r <= '9':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true\n> - \u00a0 \u00a0 \u00a0 case 'A' <= rune && rune <= 'Z':\n> + \u00a0 \u00a0 \u00a0 case 'A' <= r && r <= 'Z':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true\n> - \u00a0 \u00a0 \u00a0 case '_' == rune:\n> + \u00a0 \u00a0 \u00a0 case r == '_':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true\n> - \u00a0 \u00a0 \u00a0 case 'a' <= rune && rune <= 'z':\n> + \u00a0 \u00a0 \u00a0 case 'a' <= r && r <= 'z':\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0return false\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-19 17:37:09.992849",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> it's a new alias for int, one day an alias for uint32.\n\nint32.\n",
			"disapproval": false,
			"date": "2011-10-19 19:03:26.904555",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Oct 19, 2011, at 12:03 PM, Russ Cox wrote:\n\n>> it's a new alias for int, one day an alias for uint32.\n> \n> int32.\n\nyes\n\n",
			"disapproval": false,
			"date": "2011-10-19 19:53:48.173820",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/5307044/diff/4001/src/pkg/exp/template/html/css.go\nFile src/pkg/exp/template/html/css.go (right):\n\nhttp://codereview.appspot.com/5307044/diff/4001/src/pkg/exp/template/html/css.go#newcode39\nsrc/pkg/exp/template/html/css.go:39: // Based on the CSS3 nmchar production but ignores multi-r escape\nRevert this line.",
			"disapproval": false,
			"date": "2011-10-20 00:24:07.737550",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Fixed, sorry.\n",
			"disapproval": false,
			"date": "2011-10-20 15:14:43.375973",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=85a91c18c661 ***\n\nexp/template/html: use rune\n\nNothing terribly interesting here.\n\nR=mikesamuel, nigeltao, r\nCC=golang-dev\nhttp://codereview.appspot.com/5307044",
			"disapproval": false,
			"date": "2011-10-26 05:22:30.240441",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5307044: exp/template/html: use rune",
	"created": "2011-10-19 03:52:49.363564",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		15001
	],
	"modified": "2011-10-26 05:22:31.710212",
	"closed": true,
	"issue": 5307044
}