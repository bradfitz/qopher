{
	"description": "snappy-go: Add snappy C++ implementation benchmarks.\r\n\r\nThe benchmark test data files are automatically downloaded from the\r\nsnappy subversion server and used for benchmark with the command:\r\ngo test -bench=Benchmark_.* -download\r\n\r\nUValidate benchmarks are not supported since snappy-go doesn't support\r\nvalidating a packet without decompressing it.",
	"cc": [
		"nigeltao@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "maruel@chromium.org",
			"recipients": [
				"maruel@chromium.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go\nFile snappy/snappy_test.go (right):\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode132\nsnappy/snappy_test.go:132: // Note: the file is OS-language dependent so the resulting values are not\nFor example in my system this file contains French words. I just added a warning but I'm not fixing this \"potential problem\".",
			"disapproval": false,
			"date": "2013-02-04 19:06:33.159170",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go\nFile snappy/snappy_test.go (right):\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode21\nsnappy/snappy_test.go:21: var flagDownload = flag.Bool(\"download\", false, \"If true, download any missing files before running benchmarks\")\ns/flagDownload/download/\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode94\nsnappy/snappy_test.go:94: b.StartTimer()\nIf you make this b.ResetTimer(), you won't need the \"This function assumes the timer was stopped already\" comment above. I don't think ResetTimer was in the API when this test was originally written.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode110\nsnappy/snappy_test.go:110: func readContent(b *testing.B, filepath string) []byte {\nI would s/readContent/readFile/, and s/filepath/filename/ would be consistent with ioutil.ReadFile.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode113\nsnappy/snappy_test.go:113: b.Fatalf(\"Failed reading %s: %s\", filepath, err)\ns/Failed/failed/ and similarly below. Go error messages typically do not form complete sentences, as they're often prefixed by more context.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode121\nsnappy/snappy_test.go:121: func expand(src []byte, n int) []byte {\nAdd a doc comment above:\n\n// expand returns a slice of length n containing copies of src.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode132\nsnappy/snappy_test.go:132: // Note: the file is OS-language dependent so the resulting values are not\nOn 2013/02/04 19:06:33, M-A wrote:\n> For example in my system this file contains French words. I just added a warning\n> but I'm not fixing this \"potential problem\".\n\nAck.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode151\nsnappy/snappy_test.go:151: var testData = []struct {\ns/testData/testFiles/ and s/benchData/benchFile/ ?\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode155\nsnappy/snappy_test.go:155: // The label are not used but the data is kept as-is so it can be copy pasted\nMove this a few lines up:\n\n// testData's values are copied directly from\n// https://code.google.com/p/snappy/source/browse/trunk/snappy_unittest.cc\n// The label field is unused in snappy-go.\nvar testData = []struct {\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode178\nsnappy/snappy_test.go:178: // testDataExists ensures all test data files are present in $PWD/testdata/.\n\"all\" isn't right since it takes (n int) as arguments, but I'd just inline this function where it's called (at line 222).\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode180\nsnappy/snappy_test.go:180: fileName := filepath.Join(\"testdata\", testData[n].filename)\ns/fileName/filename/ and similarly below is consistent with the standard library.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode187\nsnappy/snappy_test.go:187: // downloadSnappyTestdata downloads the official snappy C implementation\ns/C/C++/\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode189\nsnappy/snappy_test.go:189: func downloadSnappyTestdata() error {\ns/Snappy//, since we're already in package snappy.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode190\nsnappy/snappy_test.go:190: baseUrl := \"https://snappy.googlecode.com/svn/trunk/testdata/\"\ns/baseUrl/baseURL/\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode194\nsnappy/snappy_test.go:194: for n := range testData {\nAlternatively:\nfor _, td := range testData {\n  etc(td.filename)\n}\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode195\nsnappy/snappy_test.go:195: fileName := filepath.Join(\"testdata\", testData[n].filename)\nIt might work better if the code inside this loop here was its own function (with a named return), and used defers instead of manual clean-ups:\n\nfunc downloadTestdata(n int) (errRet error) {\n  const baseURL = \"https://etc/\"\n  filename := filepath.Join(\"testdata\", testData[n].filename)\n  f, err := os.Create(filename)\n  if err != nil {\n    return fmt.Errorf(etc, err)\n  }\n  defer f.Close()\n  defer func(){\n    if errRet != nil {\n      os.Remove(filename)\n    }\n  }()\n  resp, err := http.Get(baseURL + testData[n].filename)\n  if err != nil {\n    return fmt.Errorf(etc, err)\n  }\n  defer resp.Body.Close()\n  _, err = io.Copy(f, resp.Body)\n  if err != nil {\n    return fmt.Errorf(etc, err)\n  }\n  return nil\n}\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode238\nsnappy/snappy_test.go:238: // Naming convention is kept similar to what snappy's C implementation uses.\nC++.",
			"disapproval": false,
			"date": "2013-02-05 03:46:20.462440",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please also add this patch:\ndiff -r e70163b7ede0 .hgignore\n--- a/.hgignore Wed Jun 06 19:42:12 2012 +1000\n+++ b/.hgignore Fri Feb 08 03:19:12 2013 +0800\n@@ -1,4 +1,5 @@\n syntax:glob\n+snappy/testdata\n .DS_Store\n .git\n .gitignore",
			"disapproval": false,
			"date": "2013-02-07 19:19:39.072900",
			"approval": false
		},
		{
			"sender": "maruel@chromium.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/snappy-go",
			"disapproval": false,
			"date": "2013-02-07 20:49:01.981590",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, February 8, 2013, maruel wrote:\r\n\r\n> [Newbie here, is there a way to upload without sending an email?]\r\n\r\nuse \"hg upload 7271049\"\r\n\r\n>\r\n> Also added .hgignore but I noticed it's really full of unrelated stuff.\r\n>\r\nuse \"hg file 7271049 .hgignore\" to include that file in this cl,\r\nand re-\"hg upload 7271049\".\r\n",
			"disapproval": false,
			"date": "2013-02-07 21:10:39.183560",
			"approval": false
		},
		{
			"sender": "maruel@chromium.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "[Newbie here, is there a way to upload without sending an email?]\n\nAlso added .hgignore but I noticed it's really full of unrelated stuff.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go\nFile snappy/snappy_test.go (right):\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode21\nsnappy/snappy_test.go:21: var flagDownload = flag.Bool(\"download\", false, \"If true, download any missing files before running benchmarks\")\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> s/flagDownload/download/\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode94\nsnappy/snappy_test.go:94: b.StartTimer()\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> If you make this b.ResetTimer(), you won't need the \"This function assumes the\n> timer was stopped already\" comment above. I don't think ResetTimer was in the\n> API when this test was originally written.\n\nThanks, I didn't realize about this method.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode110\nsnappy/snappy_test.go:110: func readContent(b *testing.B, filepath string) []byte {\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> I would s/readContent/readFile/, and s/filepath/filename/ would be consistent\n> with ioutil.ReadFile.\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode113\nsnappy/snappy_test.go:113: b.Fatalf(\"Failed reading %s: %s\", filepath, err)\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> s/Failed/failed/ and similarly below. Go error messages typically do not form\n> complete sentences, as they're often prefixed by more context.\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode121\nsnappy/snappy_test.go:121: func expand(src []byte, n int) []byte {\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> Add a doc comment above:\n> \n> // expand returns a slice of length n containing copies of src.\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode151\nsnappy/snappy_test.go:151: var testData = []struct {\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> s/testData/testFiles/ and s/benchData/benchFile/ ?\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode155\nsnappy/snappy_test.go:155: // The label are not used but the data is kept as-is so it can be copy pasted\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> Move this a few lines up:\n> \n> // testData's values are copied directly from\n> // https://code.google.com/p/snappy/source/browse/trunk/snappy_unittest.cc\n> // The label field is unused in snappy-go.\n> var testData = []struct {\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode178\nsnappy/snappy_test.go:178: // testDataExists ensures all test data files are present in $PWD/testdata/.\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> \"all\" isn't right since it takes (n int) as arguments, but I'd just inline this\n> function where it's called (at line 222).\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode180\nsnappy/snappy_test.go:180: fileName := filepath.Join(\"testdata\", testData[n].filename)\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> s/fileName/filename/ and similarly below is consistent with the standard\n> library.\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode187\nsnappy/snappy_test.go:187: // downloadSnappyTestdata downloads the official snappy C implementation\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> s/C/C++/\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode189\nsnappy/snappy_test.go:189: func downloadSnappyTestdata() error {\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> s/Snappy//, since we're already in package snappy.\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode190\nsnappy/snappy_test.go:190: baseUrl := \"https://snappy.googlecode.com/svn/trunk/testdata/\"\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> s/baseUrl/baseURL/\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode194\nsnappy/snappy_test.go:194: for n := range testData {\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> Alternatively:\n> for _, td := range testData {\n>   etc(td.filename)\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode195\nsnappy/snappy_test.go:195: fileName := filepath.Join(\"testdata\", testData[n].filename)\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> It might work better if the code inside this loop here was its own function\n> (with a named return), and used defers instead of manual clean-ups:\n\nI hadn't realized yet you could read the return value from a deferred function. That's awesome, thanks!\n\nDone but passed basename instead of the index.\n\nhttps://codereview.appspot.com/7271049/diff/2001/snappy/snappy_test.go#newcode238\nsnappy/snappy_test.go:238: // Naming convention is kept similar to what snappy's C implementation uses.\nOn 2013/02/05 03:46:20, nigeltao wrote:\n> C++.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-07 20:50:02.565950",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, submitting...\n\nhttps://codereview.appspot.com/7271049/diff/16002/snappy/snappy_test.go\nFile snappy/snappy_test.go (right):\n\nhttps://codereview.appspot.com/7271049/diff/16002/snappy/snappy_test.go#newcode87\nsnappy/snappy_test.go:87: // bandwidth is in amount of uncompressed data.\ns/band/Band/\n\nhttps://codereview.appspot.com/7271049/diff/16002/snappy/snappy_test.go#newcode146\nsnappy/snappy_test.go:146: // testFiles's values are copied directly from\nDrop the s after the '.",
			"disapproval": false,
			"date": "2013-02-12 03:03:37.948740",
			"approval": true
		},
		{
			"sender": "maruel@chromium.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/07 21:10:39, minux wrote:\n> use \"hg file 7271049 .hgignore\" to include that file in this cl,\n> and re-\"hg upload 7271049\".\n\nThanks, updated.",
			"disapproval": false,
			"date": "2013-02-07 21:17:20.239820",
			"approval": false
		},
		{
			"sender": "maruel@chromium.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go\nFile snappy/snappy_test.go (right):\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode88\nsnappy/snappy_test.go:88: l, err := DecodedLen(src)\nOn 2013/02/10 01:09:06, nigeltao wrote:\n> I would s/l/n/, but isn't l just len(src), where src is the shadowed func\n> argument and not the encoded bytes? Maybe the\n> src, err := Encode(nil, src)\n> should instead be\n> encoded, err := Encode(nil, src)\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode123\nsnappy/snappy_test.go:123: n := copy(x, src)\nOn 2013/02/10 01:09:06, nigeltao wrote:\n> I think that s/n/i/ would be clearer.\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode176\nsnappy/snappy_test.go:176: // The test data files are present at this canonical url.\nOn 2013/02/10 01:09:06, nigeltao wrote:\n> s/url/URL/\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode203\nsnappy/snappy_test.go:203: // downloadTestdata downloads the official snappy C++ implementation\nOn 2013/02/10 01:09:06, nigeltao wrote:\n> Missing final 's' on \"downloadTestdatas\", but I'd just inline it into benchFile:\n> \n> if !*download {\n>   b.Fatal(\"test data not found; skipping benchmark without\n>       the -download flag\")\n> }\n> // Download the official snappy C++ implementation reference\n> // test data files for benchmarking.\n> if err := os.Mkdir(\"testdata\", 0777); err != nil && !os.IsExist(err) {\n>   b.Fatalf(\"failed to create testdata: %s\", err)\n> }\n> for _, tf := range testFiles {\n>   etc\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode209\nsnappy/snappy_test.go:209: for _, td := range testFiles {\nOn 2013/02/10 01:09:06, nigeltao wrote:\n> s/td/tf/\n\nDone.\n\nhttps://codereview.appspot.com/7271049/diff/16002/snappy/snappy_test.go\nFile snappy/snappy_test.go (left):\n\nhttps://codereview.appspot.com/7271049/diff/16002/snappy/snappy_test.go#oldcode99\nsnappy/snappy_test.go:99: b.SetBytes(int64(len(src)))\nI did a significant change to match how snappy C++ implementation measure performance.\nhttps://code.google.com/p/snappy/source/browse/trunk/snappy_unittest.cc#1068\n\nIt measures in uncompressed bytes for UFlat tests so I changed it here to match.",
			"disapproval": false,
			"date": "2013-02-11 20:10:03.055720",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go\nFile snappy/snappy_test.go (right):\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode88\nsnappy/snappy_test.go:88: l, err := DecodedLen(src)\nI would s/l/n/, but isn't l just len(src), where src is the shadowed func argument and not the encoded bytes? Maybe the\nsrc, err := Encode(nil, src)\nshould instead be\nencoded, err := Encode(nil, src)\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode123\nsnappy/snappy_test.go:123: n := copy(x, src)\nI think that s/n/i/ would be clearer.\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode176\nsnappy/snappy_test.go:176: // The test data files are present at this canonical url.\ns/url/URL/\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode203\nsnappy/snappy_test.go:203: // downloadTestdata downloads the official snappy C++ implementation\nMissing final 's' on \"downloadTestdatas\", but I'd just inline it into benchFile:\n\nif !*download {\n  b.Fatal(\"test data not found; skipping benchmark without\n      the -download flag\")\n}\n// Download the official snappy C++ implementation reference\n// test data files for benchmarking.\nif err := os.Mkdir(\"testdata\", 0777); err != nil && !os.IsExist(err) {\n  b.Fatalf(\"failed to create testdata: %s\", err)\n}\nfor _, tf := range testFiles {\n  etc\n}\n\nhttps://codereview.appspot.com/7271049/diff/13001/snappy/snappy_test.go#newcode209\nsnappy/snappy_test.go:209: for _, td := range testFiles {\ns/td/tf/",
			"disapproval": false,
			"date": "2013-02-10 01:09:06.101930",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"maruel@chromium.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/snappy-go/source/detail?r=f20185d4bf23 ***\n\nsnappy-go: Add snappy C++ implementation benchmarks.\n\nThe benchmark test data files are automatically downloaded from the\nsnappy subversion server and used for benchmark with the command:\ngo test -bench=Benchmark_.* -download\n\nUValidate benchmarks are not supported since snappy-go doesn't support\nvalidating a packet without decompressing it.\n\nR=nigeltao, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7271049\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2013-02-12 03:39:19.426930",
			"approval": false
		}
	],
	"owner_email": "maruel@chromium.org",
	"private": false,
	"base_url": "",
	"owner": "M-A",
	"subject": "code review 7271049: snappy-go: Add snappy C++ implementation benchmarks.",
	"created": "2013-02-04 19:04:34.973360",
	"patchsets": [
		1,
		2001,
		8001,
		13001,
		16002
	],
	"modified": "2013-02-26 20:05:17.508650",
	"closed": true,
	"issue": 7271049
}