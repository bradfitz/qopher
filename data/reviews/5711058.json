{
	"description": "godoc: support $GOPATH, simplify file system code\n\nThe motivation for this CL is to support $GOPATH well.\nSince we already have a FileSystem interface, implement a\nPlan 9-style name space.  Bind each of the $GOPATH src\ndirectories onto the $GOROOT src/pkg directory: now\neverything is laid out exactly like a normal $GOROOT and\nneeds very little special case code.\n\nThe filter files are no longer used (by us), so I think they\ncan just be deleted.  Similarly, the Mapping code and the\nFileSystem interface were two different ways to accomplish\nthe same end, so delete the Mapping code.\n\nWithin the implementation, since FileSystem is defined to be\nslash-separated, use package path consistently, leaving\npath/filepath only for manipulating operating system paths.\n\nI kept the -path flag, but I think it can be deleted too.\n\nFixes issue 2234.\nFixes issue 3046.",
	"cc": [
		"gri@golang.org",
		"r@golang.org",
		"r@google.com",
		"rsc@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-01 22:08:36.135503",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some preliminary comments. Still digesting this.\n\nPlease add better documentation to the new filesystem ops for those poor non Plan-9 aficionados like my.\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/filesystem.go\nFile src/cmd/godoc/filesystem.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/filesystem.go#newcode60\nsrc/cmd/godoc/filesystem.go:60: return filepath.Join(string(root), pathpkg.Clean(\"/\"+path))\nwhy is the \"/\" needed? is it for \"symmetry\" with the code below? isn't Join adding a separator? should have a comment\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/filesystem.go#newcode97\nsrc/cmd/godoc/filesystem.go:97: type nameSpace map[string][]mountedFS\nthis could use a more elaborate comment - for instance it's not clear why this is not just map[string]mountedFS\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/filesystem.go#newcode141\nsrc/cmd/godoc/filesystem.go:141: const (\n// mode values for Bind\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/filesystem.go#newcode193\nsrc/cmd/godoc/filesystem.go:193: // fmt.Printf(\"resolve %s: %v\\n\", path, m)\nmaybe:\n\nif debug {\n   ...\n}\n\n(could be useful down the line)\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/filesystem.go#newcode208\nsrc/cmd/godoc/filesystem.go:208: // fmt.Printf(\"tx %s: %v\\n\", path, m.translate(path))\nsame here\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/godoc.go#newcode125\nsrc/cmd/godoc/godoc.go:125: // isParentOf returns true if p is a parent of (or the same as) q\nis this still used? if in another file, it should be moved\n\nhttp://codereview.appspot.com/5711058/diff/2001/src/cmd/godoc/godoc.go#newcode132\nsrc/cmd/godoc/godoc.go:132: func initDirTrees() {\nstill needed? if so, comment please",
			"disapproval": false,
			"date": "2012-03-01 23:28:07.496835",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go\nFile src/cmd/godoc/filesystem.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go#newcode349\nsrc/cmd/godoc/filesystem.go:349: return ns.stat(path, FileSystem.Stat)\nBy the way, first time I've gotten to use an interface method function in real code.",
			"disapproval": false,
			"date": "2012-03-02 03:38:09.373817",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 2, 2012, at 3:20 PM, Russ Cox wrote:\n\n> On Thu, Mar 1, 2012 at 23:16,  <r@golang.org> wrote:\n>> all these examples would be easier to read if the first two elements\n>> were swapped. that would put the two names together. i suggest making\n>> that change throughout, even in the struct.\n>> {fs: OS(`c:\\Go`), old: \"/src/pkg\", new: \"/src/pkg\"},\n> \n> I started to do this but I think it confuses things:\n> old is being evaluated in the name space,\n> but new is being evaluated in fs.  So the current\n> order:\n> \n> {old: \"/src/pkg\", fs: OS(`d:\\Work1`), new: \"/src\"}\n> \n> should be read as (mentally merging fs+new):\n> \n> \"/src/pkg\" -> d:\\Work1\\src\n\nok\n\n",
			"disapproval": false,
			"date": "2012-03-02 04:21:16.616604",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 2, 2012, at 3:25 PM, Russ Cox wrote:\n\n> I expanded the comment to show the fs+new reading:\n> \n> // Given this name space, a ReadDir of /src/pkg/code will check each prefix\n> // of the path for a mount point (first /src/pkg/code, then /src/pkg, then /src,\n> // then /), stopping when it finds one.  For the above example, /src/pkg/code\n> // will find the mount point at /src/pkg:\n> //\n> //\t{old: \"/src/pkg\", fs: OS(`c:\\Go`), new: \"/src/pkg\"},\n> //\t{old: \"/src/pkg\", fs: OS(`d:\\Work1`), new: \"/src\"},\n> //\t{old: \"/src/pkg\", fs: OS(`d:\\Work2`), new: \"/src\"},\n> //\n> // ReadDir will when execute these three calls and merge the results:\n> //\n> //\tOS(`c:\\Go`).ReadDir(\"/src/pkg/code\")\n> //\tOS(`d:\\Work1').ReadDir(\"/src/code\")\n> //\tOS(`d:\\Work2').ReadDir(\"/src/code\")\n> //\n> // Note that the \"/src/pkg\" in \"/src/pkg/code\" has been replaced by\n> // just \"/src\" in the final two calls.\n> //\n> // OS is itself an implementation of a file system: it implements\n> // OS(`c:\\Go`).ReadDir(\"/src/pkg/code\") as ioutil.ReadDir(`c:\\Go\\src\\pkg\\code`).\n> //\n> // Because the new path is evaluated by fs (here OS(root)), another way\n> // to read the mount table for is to mentally combine fs+new, so that\n> this table:\n> //\n> //\t{old: \"/src/pkg\", fs: OS(`c:\\Go`), new: \"/src/pkg\"},\n> //\t{old: \"/src/pkg\", fs: OS(`d:\\Work1`), new: \"/src\"},\n> //\t{old: \"/src/pkg\", fs: OS(`d:\\Work2`), new: \"/src\"},\n> //\n> // reads as:\n> //\n> //\t\"/src/pkg\" -> c:\\Go\\src\\pkg\n> //\t\"/src/pkg\" -> d:\\Work1\\src\n> //\t\"/src/pkg\" -> d:\\Work2\\src\n\nlgtm\n\n",
			"disapproval": false,
			"date": "2012-03-02 04:28:53.032694",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI made the suggested changes and added a few large comments\nand worked examples explaining the name space.\n",
			"disapproval": false,
			"date": "2012-03-02 03:29:51.359171",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 1, 2012 at 23:16,  <r@golang.org> wrote:\n> all these examples would be easier to read if the first two elements\n> were swapped. that would put the two names together. i suggest making\n> that change throughout, even in the struct.\n> {fs: OS(`c:\\Go`), old: \"/src/pkg\", new: \"/src/pkg\"},\n\nI started to do this but I think it confuses things:\nold is being evaluated in the name space,\nbut new is being evaluated in fs.  So the current\norder:\n\n{old: \"/src/pkg\", fs: OS(`d:\\Work1`), new: \"/src\"}\n\nshould be read as (mentally merging fs+new):\n\n\"/src/pkg\" -> d:\\Work1\\src\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-02 04:20:15.561106",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I expanded the comment to show the fs+new reading:\n\n// Given this name space, a ReadDir of /src/pkg/code will check each prefix\n// of the path for a mount point (first /src/pkg/code, then /src/pkg, then /src,\n// then /), stopping when it finds one.  For the above example, /src/pkg/code\n// will find the mount point at /src/pkg:\n//\n//\t{old: \"/src/pkg\", fs: OS(`c:\\Go`), new: \"/src/pkg\"},\n//\t{old: \"/src/pkg\", fs: OS(`d:\\Work1`), new: \"/src\"},\n//\t{old: \"/src/pkg\", fs: OS(`d:\\Work2`), new: \"/src\"},\n//\n// ReadDir will when execute these three calls and merge the results:\n//\n//\tOS(`c:\\Go`).ReadDir(\"/src/pkg/code\")\n//\tOS(`d:\\Work1').ReadDir(\"/src/code\")\n//\tOS(`d:\\Work2').ReadDir(\"/src/code\")\n//\n// Note that the \"/src/pkg\" in \"/src/pkg/code\" has been replaced by\n// just \"/src\" in the final two calls.\n//\n// OS is itself an implementation of a file system: it implements\n// OS(`c:\\Go`).ReadDir(\"/src/pkg/code\") as ioutil.ReadDir(`c:\\Go\\src\\pkg\\code`).\n//\n// Because the new path is evaluated by fs (here OS(root)), another way\n// to read the mount table for is to mentally combine fs+new, so that\nthis table:\n//\n//\t{old: \"/src/pkg\", fs: OS(`c:\\Go`), new: \"/src/pkg\"},\n//\t{old: \"/src/pkg\", fs: OS(`d:\\Work1`), new: \"/src\"},\n//\t{old: \"/src/pkg\", fs: OS(`d:\\Work2`), new: \"/src\"},\n//\n// reads as:\n//\n//\t\"/src/pkg\" -> c:\\Go\\src\\pkg\n//\t\"/src/pkg\" -> d:\\Work1\\src\n//\t\"/src/pkg\" -> d:\\Work2\\src\n",
			"disapproval": false,
			"date": "2012-03-02 04:25:22.912160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LVGTM\n\nhttp://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go\nFile src/cmd/godoc/filesystem.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go#newcode148\nsrc/cmd/godoc/filesystem.go:148: //\t\t\t{old: \"/src/pkg\", fs: OS(`d:\\Work2`), new: \"/src\"},\nall these examples would be easier to read if the first two elements were swapped. that would put the two names together. i suggest making that change throughout, even in the struct.\n{fs: OS(`c:\\Go`), old: \"/src/pkg\", new: \"/src/pkg\"},\n\nhttp://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go#newcode241\nsrc/cmd/godoc/filesystem.go:241: bindReplace = iota\nworth in-line comments defining them, or even just put most of the Bind comment here.\n\nhttp://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go#newcode261\nsrc/cmd/godoc/filesystem.go:261: mtpt = append(mtpt, ns.resolve(old)...)\nwow\n\nhttp://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go#newcode276\nsrc/cmd/godoc/filesystem.go:276: panic(\"invalid Bind\")\npanic(fmt.Sprintf(...))\n\nhttp://codereview.appspot.com/5711058/diff/11001/src/cmd/godoc/filesystem.go#newcode289\nsrc/cmd/godoc/filesystem.go:289: const debugNS = false\nmove this to the top of the file",
			"disapproval": false,
			"date": "2012-03-02 04:16:09.806323",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.  My plan is to wait to submit this until\nafter Andrew cuts the weekly.\n",
			"disapproval": false,
			"date": "2012-03-02 22:28:25.182193",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM just in case",
			"disapproval": false,
			"date": "2012-03-02 21:10:52.628965",
			"approval": true
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go\nFile src/cmd/godoc/filesystem.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode29\nsrc/cmd/godoc/filesystem.go:29: // system, which helps keep things simple.\nOn 2012/03/02 18:59:33, gri wrote:\n> s/keep/keeping/ ?\n\nI think keep is correct.\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode43\nsrc/cmd/godoc/filesystem.go:43: // even on Windows.\nOn 2012/03/02 18:59:33, gri wrote:\n> Can you say which functions use OS-specific paths? maybe as comment with the\n> function?\n\nRewrote:\n\n// The use of this virtual file system means that almost all code processing\n// paths can assume they are slash-separated and should be using\n// package path (often imported as pathpkg) to manipulate them,\n// even on Windows.  The only code that should use filepath is code\n// that is bypassing the virtual file system and making direct calls\n// to package os.\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode95\nsrc/cmd/godoc/filesystem.go:95: path = pathpkg.Clean(\"/\" + path)\nOn 2012/03/02 18:59:33, gri wrote:\n> shouldn't this be filepath.Clean? Or is path not OS-specific? and if not, why is\n> is filepath below and not pathpkg?\n\nAdded to type FileSystem comment:\n\n\n// The FileSystem interface specifies the methods godoc is using\n// to access the file system for which it serves documentation.\n// The path argument to each method is always a slash-separated path.\n\nAdded comment here:\n\n// resolve converts a slash-separated file system path\n// (given to a FileSystem method) to the underlying\n// operating system path that should be used with package os.\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode159\nsrc/cmd/godoc/filesystem.go:159: //\tns.Bind(\"/\", OS(`c:\\Go`), \"/\", bindReplace)\nOn 2012/03/02 18:59:33, gri wrote:\n> is this causing two entries? or is a ns.Bind missing here?\n\nIt causes one entry at first, but then the first ns.Bind of /src/pkg\nhas to create a new mount point at /src/pkg, and because it says\nbindAfter it makes a copy of the existing mapping for /src/pkg\n(which is the mapping from /).\n\nRewrote:\n\n// This is created by executing:\n//\n//\tns := nameSpace{}\n//\tns.Bind(\"/\", OS(`c:\\Go`), \"/\", bindReplace)\n//\tns.Bind(\"/src/pkg\", OS(`d:\\Work1`), \"/src\", bindAfter)\n//\tns.Bind(\"/src/pkg\", OS(`d:\\Work2`), \"/src\", bindAfter)\n//\n// (There are three entries in the /src/pkg mount point above but\n// only two ns.Bind calls because the first ns.Bind on /src/pkg\n// uses bindAfter, which copies the existing effective mapping from /\n// to create a new /src/pkg mount point before adding its own mapping.)\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (left):\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/godoc.go#oldcode725\nsrc/cmd/godoc/godoc.go:725: PkgRoots  []string\nOn 2012/03/02 18:59:33, gri wrote:\n> this means we lost the ability to show -path added filesystems directly\n\nThey appear as directories under /src/pkg.\nI couldn't find anything in templates mentioning PkgRoots\nbut maybe I looked in the wrong place.\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/main.go#newcode377\nsrc/cmd/godoc/main.go:377: fs.Bind(\"/target\", OS(path), \"/\", bindReplace)\nOn 2012/03/02 18:59:33, gri wrote:\n> I assume OS is taking an OS-specific path\n\nYes.\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/main.go#newcode377\nsrc/cmd/godoc/main.go:377: fs.Bind(\"/target\", OS(path), \"/\", bindReplace)\nOn 2012/03/02 18:59:33, gri wrote:\n> const target = \"/target\" and a comment?\n\nDone.",
			"disapproval": false,
			"date": "2012-03-02 19:24:56.450632",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "New comments are great, but I still have some questions.\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go\nFile src/cmd/godoc/filesystem.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode29\nsrc/cmd/godoc/filesystem.go:29: // system, which helps keep things simple.\ns/keep/keeping/ ?\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode43\nsrc/cmd/godoc/filesystem.go:43: // even on Windows.\nCan you say which functions use OS-specific paths? maybe as comment with the function?\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode95\nsrc/cmd/godoc/filesystem.go:95: path = pathpkg.Clean(\"/\" + path)\nshouldn't this be filepath.Clean? Or is path not OS-specific? and if not, why is is filepath below and not pathpkg?\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/filesystem.go#newcode159\nsrc/cmd/godoc/filesystem.go:159: //\tns.Bind(\"/\", OS(`c:\\Go`), \"/\", bindReplace)\nis this causing two entries? or is a ns.Bind missing here?\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (left):\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/godoc.go#oldcode725\nsrc/cmd/godoc/godoc.go:725: PkgRoots  []string\nthis means we lost the ability to show -path added filesystems directly\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (right):\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/main.go#newcode377\nsrc/cmd/godoc/main.go:377: fs.Bind(\"/target\", OS(path), \"/\", bindReplace)\nI assume OS is taking an OS-specific path\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/main.go#newcode377\nsrc/cmd/godoc/main.go:377: fs.Bind(\"/target\", OS(path), \"/\", bindReplace)\nconst target = \"/target\" and a comment?",
			"disapproval": false,
			"date": "2012-03-02 18:59:33.470361",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ea5cd2b9ca6c ***\n\ngodoc: support $GOPATH, simplify file system code\n\nThe motivation for this CL is to support $GOPATH well.\nSince we already have a FileSystem interface, implement a\nPlan 9-style name space.  Bind each of the $GOPATH src\ndirectories onto the $GOROOT src/pkg directory: now\neverything is laid out exactly like a normal $GOROOT and\nneeds very little special case code.\n\nThe filter files are no longer used (by us), so I think they\ncan just be deleted.  Similarly, the Mapping code and the\nFileSystem interface were two different ways to accomplish\nthe same end, so delete the Mapping code.\n\nWithin the implementation, since FileSystem is defined to be\nslash-separated, use package path consistently, leaving\npath/filepath only for manipulating operating system paths.\n\nI kept the -path flag, but I think it can be deleted too.\n\nFixes issue 2234.\nFixes issue 3046.\n\nR=gri, r, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5711058",
			"disapproval": false,
			"date": "2012-03-05 15:02:51.102785",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (left):\n\nhttp://codereview.appspot.com/5711058/diff/12018/src/cmd/godoc/godoc.go#oldcode725\nsrc/cmd/godoc/godoc.go:725: PkgRoots  []string\nOn 2012/03/02 19:24:56, rsc1 wrote:\n> On 2012/03/02 18:59:33, gri wrote:\n> > this means we lost the ability to show -path added filesystems directly\n> \n> They appear as directories under /src/pkg.\n> I couldn't find anything in templates mentioning PkgRoots\n> but maybe I looked in the wrong place.\n\nThey used to be there but got lost when adg revamped the godoc UI.",
			"disapproval": false,
			"date": "2012-03-02 19:56:03.808086",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5711058: godoc: support $GOPATH, simplify file system code",
	"created": "2012-03-01 22:07:36.862388",
	"patchsets": [
		1,
		2001,
		2002,
		4014,
		8001,
		11001,
		13002,
		12017,
		12018,
		16002,
		20001,
		14005
	],
	"modified": "2012-03-06 02:57:29.559513",
	"closed": true,
	"issue": 5711058
}