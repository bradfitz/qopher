{
	"description": "cmd/5g, cmd/6g, cmd/8g: flush return parameters in case of panic.\n\nFixes issue 4066.",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease make the CL description say cmd/5g, cmd/6g, cmd/8g.\nThe shorthands like *g or {5,6,8}g are more difficult to find with\nhg log -k.\n\nAlso s/Flush/flush/.\n\nFWIW, the bug is not that they are not spilled 'eagerly enough', it's that they're\nnot flushed back at all in the case where the value appears to be dead.",
			"disapproval": false,
			"date": "2013-01-04 15:28:44.135180",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nAdded a test.\n\nhttps://codereview.appspot.com/7040044/diff/5001/src/cmd/5g/reg.c\nFile src/cmd/5g/reg.c (right):\n\nhttps://codereview.appspot.com/7040044/diff/5001/src/cmd/5g/reg.c#newcode1078\nsrc/cmd/5g/reg.c:1078: // flush modified globals and return parameters before each instruction.\nOn 2013/01/02 20:08:27, rsc wrote:\n> You should be able to avoid this unless the function body contains a defer. That\n> is already known.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-02 23:32:44.098090",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please add a test for it.\r\n\r\nso we keep working around the real issue instead of adopting the\r\nother solution russ commented in issue 1304 or finding another that\r\ndoesn't affect performance?\r\n",
			"disapproval": false,
			"date": "2013-01-01 16:44:11.917220",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=be6ca9f6bfe8 ***\n\ncmd/5g, cmd/6g, cmd/8g: flush return parameters in case of panic.\n\nFixes issue 4066.\n\nR=rsc, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7040044",
			"disapproval": false,
			"date": "2013-01-04 16:07:50.726670",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-01 16:36:25.108250",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Before and afters for the test in issue 4066:\n\nbefore:\n--- prog list \"foo\" ---\n0028 (/home/daniel/src/test/test.go:13) TEXT    foo+0(SB),$40-8\n0029 (/home/daniel/src/test/test.go:13) MOVQ    $0,DX\n0030 (/home/daniel/src/test/test.go:14) MOVQ    $0,val+0(FP)\n0031 (/home/daniel/src/test/test.go:17) PUSHQ   $func\u00b7001+0(SB),\n0032 (/home/daniel/src/test/test.go:17) PUSHQ   $0,\n0033 (/home/daniel/src/test/test.go:17) CALL    ,runtime.deferproc+0(SB)\n0034 (/home/daniel/src/test/test.go:17) POPQ    ,CX\n0035 (/home/daniel/src/test/test.go:17) POPQ    ,CX\n0036 (/home/daniel/src/test/test.go:17) TESTQ   AX,AX\n0037 (/home/daniel/src/test/test.go:17) JNE     $0,40\n0038 (/home/daniel/src/test/test.go:24) CALL    ,foo1+0(SB)\n0039 (/home/daniel/src/test/test.go:18) JMP     ,38\n0040 (/home/daniel/src/test/test.go:27) CALL    ,runtime.deferreturn+0(SB)\n0041 (/home/daniel/src/test/test.go:27) RET     ,\n\nAfter:\n--- prog list \"foo\" ---\n0028 (/home/daniel/src/test/test.go:13) TEXT    foo+0(SB),$40-8\n0029 (/home/daniel/src/test/test.go:13) MOVQ    $0,DX\n0030 (/home/daniel/src/test/test.go:14) MOVQ    $0,val+0(FP)\n0031 (/home/daniel/src/test/test.go:17) PUSHQ   $func\u00b7001+0(SB),\n0032 (/home/daniel/src/test/test.go:17) PUSHQ   $0,\n0033 (/home/daniel/src/test/test.go:17) CALL    ,runtime.deferproc+0(SB)\n0034 (/home/daniel/src/test/test.go:17) POPQ    ,CX\n0035 (/home/daniel/src/test/test.go:17) POPQ    ,CX\n0036 (/home/daniel/src/test/test.go:17) TESTQ   AX,AX\n0037 (/home/daniel/src/test/test.go:17) JNE     $0,41\n0038 (/home/daniel/src/test/test.go:19) MOVQ    $2,val+0(FP)\n0039 (/home/daniel/src/test/test.go:24) CALL    ,foo1+0(SB)\n0040 (/home/daniel/src/test/test.go:18) JMP     ,38\n0041 (/home/daniel/src/test/test.go:27) CALL    ,runtime.deferreturn+0(SB)\n0042 (/home/daniel/src/test/test.go:27) RET     ,\n\nLong term, This fix should be replaced by one that looks up if an instruction or address might panic instead of this sledgehammer. Ideally something only spills the last time before a panicking instruction.",
			"disapproval": false,
			"date": "2013-01-01 16:52:35.524230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't mind this as the long-term fix. It's fairly cheap.\n\nhttps://codereview.appspot.com/7040044/diff/5001/src/cmd/5g/reg.c\nFile src/cmd/5g/reg.c (right):\n\nhttps://codereview.appspot.com/7040044/diff/5001/src/cmd/5g/reg.c#newcode1078\nsrc/cmd/5g/reg.c:1078: // flush modified globals and return parameters before each instruction.\nYou should be able to avoid this unless the function body contains a defer. That is already known.",
			"disapproval": false,
			"date": "2013-01-02 20:08:26.954550",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/04 15:28:44, rsc wrote:\n> FWIW, the bug is not that they are not spilled 'eagerly enough', it's that\n> they're\n> not flushed back at all in the case where the value appears to be dead.\n\nI think eagerly works in this case. The bug would also trigger on:\n\nfunc foo() (n int) {\n    defer func() { _ = recover() }()\n    n = 10\n    panicingfunc()\n    n = 20\n}\n\nHowever we describe it, the important part is that the bug is gone :)",
			"disapproval": false,
			"date": "2013-01-04 16:21:27.394550",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 7040044: cmd/*g: Flush return parameters in case of panic.",
	"created": "2013-01-01 16:31:56.541970",
	"patchsets": [
		1,
		2001,
		5001,
		7004,
		11001,
		14001
	],
	"modified": "2013-01-04 16:21:27.564560",
	"closed": true,
	"issue": 7040044
}