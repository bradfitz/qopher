{
	"description": "time: add a comment about how to use the Duration constants",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@google.com"
	],
	"reviewers": [
		"dsymonds@golang.org",
		"crawshaw@google.com",
		"bradfitz@google.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-26 09:23:31.339167",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-26 08:59:19.387986",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 26/02/2012, at 8:10 PM, Brad Fitzpatrick wrote:\n\n> Feels weird to write docs assuming the author is already in package \"time\".\n> \n> I'd qualify all these symbols with \"time.\".  We do that for ExampleFoo generally, don't we?\n\nI went back and forth on that issue. Most docs are in the package, but perhaps this one is special.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-26 09:23:50.545863",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5696078/diff/6/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5696078/diff/6/src/pkg/time/time.go#newcode389\nsrc/pkg/time/time.go:389: //\tsecond := time.Second\n\"time.\" here\n\nhttp://codereview.appspot.com/5696078/diff/6/src/pkg/time/time.go#newcode390\nsrc/pkg/time/time.go:390: //\tfmt.Print(int64(second/time.Millisecond)) // prints 1000\n... and here\n\nhttp://codereview.appspot.com/5696078/diff/6/src/pkg/time/time.go#newcode394\nsrc/pkg/time/time.go:394: //\tfmt.Print(Duration(seconds)*Second) // prints 10s\nbut not here.",
			"disapproval": false,
			"date": "2012-02-26 11:21:09.187145",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=84582b0431a1 ***\n\ntime: add a comment about how to use the Duration constants\n\nR=golang-dev, bradfitz, r, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/5696078",
			"disapproval": false,
			"date": "2012-02-26 11:24:56.686545",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 26, 2012 at 9:25 AM,  <bradfitz@google.com> wrote:\n>\n> http://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go\n> File src/pkg/time/time.go (right):\n>\n> http://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go#newcode394\n> src/pkg/time/time.go:394:\n> // \u00a0 \u00a0 \u00a0fmt.Print(time.Duration(seconds)*time.Second) // prints 10s\n> On 2012/02/26 14:22:53, bradfitzgoog wrote:\n>>\n>> On 2012/02/26 14:21:27, crawshaw1 wrote:\n>> > equivalent: s/time.Duration(seconds)/seconds/\n>\n>\n>> That's not the idiom, though.\n>\n>\n> Not to mention your \"equivalent\" way wouldn't even compile (an int * an\n> time.Duration). But even if \"secs\" were a constant (not an int, as\n> above), it still wouldn't be the idiom. \u00a0We always write:\n>\n> time.Duration(identifier) * time.Unit\n>\n> And we tend to even include 1 when doing something like:\n>\n> 1 * time.Minute\n>\n> http://codereview.appspot.com/5696078/\n\nAh you're right, I took the easy but very different shortcut when\ntesting, 10*time.Second. I'll be quiet now.\n",
			"disapproval": false,
			"date": "2012-02-26 14:54:56.404609",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, r@google.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-26 11:19:38.141482",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, r@google.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-26 11:21:57.618076",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sigh.\n\n",
			"disapproval": false,
			"date": "2012-02-26 11:19:06.047188",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i wrote them, compiled them, ran them, took out the times, mailed them.\nyou said put the times back. then things started to go wrong. no excuses.\n\ni've run them again. they work now. promise.\n\ni suppose this is an argument for an executable example, and there should perhaps be one, but there's also something to be said for simple code snippets in the doc comment.\n\nwhat a fiasco.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-26 11:24:10.873576",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"crawshaw@google.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go#newcode394\nsrc/pkg/time/time.go:394: //\tfmt.Print(time.Duration(seconds)*time.Second) // prints 10s\nOn 2012/02/26 14:21:27, crawshaw1 wrote:\n> equivalent: s/time.Duration(seconds)/seconds/\n\nThat's not the idiom, though.",
			"disapproval": false,
			"date": "2012-02-26 14:22:52.698786",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Feels weird to write docs assuming the author is already in package \"time\".\n\nI'd qualify all these symbols with \"time.\".  We do that for ExampleFoo\ngenerally, don't we?\n\n\nOn Sun, Feb 26, 2012 at 12:59 AM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> time: add a comment about how to use the Duration constants\n>\n> Please review this at http://codereview.appspot.com/**5696078/<http://codereview.appspot.com/5696078/>\n>\n> Affected files:\n>  M src/pkg/time/time.go\n>\n>\n> Index: src/pkg/time/time.go\n> ==============================**==============================**=======\n> --- a/src/pkg/time/time.go\n> +++ b/src/pkg/time/time.go\n> @@ -384,6 +384,15 @@\n>\n>  // Common durations.  There is no definition for units of Day or larger\n>  // to avoid confusion across daylight savings time zone transitions.\n> +//\n> +// To count the number of units in a duration, divide:\n> +//     second := Duration(Second)\n> +//     fmt.Print(int64(second/**Millisecond)) // prints 1000\n> +//\n> +// To convert an integer number of units to a duration, multiply:\n> +//     seconds := 10\n> +//     fmt.Print(Duration(seconds)***Second) // prints 10s\n> +//\n>  const (\n>        Nanosecond  Duration = 1\n>        Microsecond          = 1000 * Nanosecond\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-26 09:10:04.172269",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You'd never write time.Duration(time.Second); time.Second is already that\ntype.\n",
			"disapproval": false,
			"date": "2012-02-26 10:34:35.088342",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-26 11:23:54.476277",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-26 12:00:47.138227",
			"approval": true
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"crawshaw@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go#newcode394\nsrc/pkg/time/time.go:394: //\tfmt.Print(time.Duration(seconds)*time.Second) // prints 10s\nequivalent: s/time.Duration(seconds)/seconds/",
			"disapproval": false,
			"date": "2012-02-26 14:21:27.522090",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"crawshaw@google.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5696078/diff/7002/src/pkg/time/time.go#newcode394\nsrc/pkg/time/time.go:394: //\tfmt.Print(time.Duration(seconds)*time.Second) // prints 10s\nOn 2012/02/26 14:22:53, bradfitzgoog wrote:\n> On 2012/02/26 14:21:27, crawshaw1 wrote:\n> > equivalent: s/time.Duration(seconds)/seconds/\n> \n> That's not the idiom, though.\n\nNot to mention your \"equivalent\" way wouldn't even compile (an int * an time.Duration). But even if \"secs\" were a constant (not an int, as above), it still wouldn't be the idiom.  We always write:\n\ntime.Duration(identifier) * time.Unit\n\nAnd we tend to even include 1 when doing something like:\n\n1 * time.Minute",
			"disapproval": false,
			"date": "2012-02-26 14:25:57.775674",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5696078: time: add a comment about how to use the Duration constants",
	"created": "2012-02-26 08:59:10.013422",
	"patchsets": [
		1,
		3,
		3001,
		6001,
		6,
		6004,
		7002
	],
	"modified": "2012-02-26 14:25:58.177835",
	"closed": true,
	"issue": 5696078
}