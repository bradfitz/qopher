{
	"description": "documentation: Debugging Go code with GDB tutorial.",
	"cc": [
		"adg@golang.org",
		"cw@f00f.org",
		"lvd@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "thanks for your feedback. all valid points.\n\nOn Fri, Sep 30, 2011 at 22:49, <cw@f00f.org> wrote:\n\n> Might want to mention\n>\n>  p slice[..] doesn't always work (yet)\n>\n>  (try it on a string for example)\n>\n>\n>  p localVar before it's encountered/initialized shows garbage (i guess\n> gdb can't robustly tell when it's scope starts)\n>\n\n\n>  b line (that has no code for it) doesn't actually do anything useful\n>\n>\nshould set breakpoint just before the next actual code.  if you have an\nexample where it doesn't please fwd.\n\n\n>\n> when looking at goroutines which have been created but never scheduled\n> (ie. under a debugger this might happen) their PC state is usually\n> runnable runtime.goexit\n>\n>\n>\n> http://codereview.appspot.com/**5168046/<http://codereview.appspot.com/5168046/>\n>\n",
			"disapproval": false,
			"date": "2011-10-01 08:55:04.597446",
			"approval": false
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sat, Oct 1, 2011 at 01:54, Luuk van Dijk <lvd@golang.org> wrote:\n\n> thanks for your feedback. all valid points.\n>\n> On Fri, Sep 30, 2011 at 22:49, <cw@f00f.org> wrote:\n>\n>> Might want to mention\n>>\n>>  p slice[..] doesn't always work (yet)\n>>\n>\nExplained, plus workaround\n\n\n>\n>>  (try it on a string for example)\n>>\n>>\n>>  p localVar before it's encountered/initialized shows garbage (i guess\n>> gdb can't robustly tell when it's scope starts)\n>>\n>\n>\nAdded\n\n\n>\n>>  b line (that has no code for it) doesn't actually do anything useful\n>>\n>>\n> should set breakpoint just before the next actual code.  if you have an\n> example where it doesn't please fwd.\n>\n>\n>>\n>> when looking at goroutines which have been created but never scheduled\n>> (ie. under a debugger this might happen) their PC state is usually\n>> runnable runtime.goexit\n>>\n>>\n>>\nNot sure what useful things i could say about the goroutine state, but\nsuggestions are welcome, as are suggestions for modifications to the GDB/Go\nRuntime support to print things that would really help in real-world\ndebugging situations.\n\n\n>\n>> http://codereview.appspot.com/**5168046/<http://codereview.appspot.com/5168046/>\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-01 16:56:38.932064",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"lvd@golang.org",
				"adg@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5168046/diff/11001/doc/debugging_with_gdb.html\nFile doc/debugging_with_gdb.html (right):\n\nhttp://codereview.appspot.com/5168046/diff/11001/doc/debugging_with_gdb.html#newcode451\ndoc/debugging_with_gdb.html:451: The extension functions $len and $cap work on strings, arrays and slices:\n$cap doesn't work on strings",
			"disapproval": false,
			"date": "2011-10-02 04:45:30.356072",
			"approval": true
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"lvd@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-01 00:07:31.867432",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"lvd@golang.org",
				"adg@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Might want to mention\n\n  p slice[..] doesn't always work (yet)\n\n  (try it on a string for example)\n\n\n  p localVar before it's encountered/initialized shows garbage (i guess gdb can't robustly tell when it's scope starts)\n\n\n  b line (that has no code for it) doesn't actually do anything useful\n\n\nwhen looking at goroutines which have been created but never scheduled (ie. under a debugger this might happen) their PC state is usually runnable runtime.goexit",
			"disapproval": false,
			"date": "2011-10-01 05:49:05.881980",
			"approval": false
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sat, Oct 1, 2011 at 21:56, Chris Wedgwood <cw@f00f.org> wrote:\n\n> > Not sure what useful things i could say about the goroutine state,\n> > but suggestions are welcome, as are suggestions for modifications to\n> > the GDB/Go Runtime support to print things that would really help in\n> > real-world debugging situations.\n>\n> (more long term)\n>\n> i think it would be nice to get more natural slice printing working,\n> as well a derived types (type myInt int)\n>\n> i'm not sure how much work that would be inside of gdb and how the\n> mantainers there would feel about that\n>\n> certainly not a priority\n>\n\nI just talked to one of the gdb maintainers.  currently the language Go has\nit's dwarf enum, but gdb just falls back to the C handler for language\nspecific things.  The longer term solution would be to have a real go\nvariant. It's on the agenda, which is a\nlatin word for '[list of things] to do' :-)\n",
			"disapproval": false,
			"date": "2011-10-02 05:43:01.388913",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Not sure what useful things i could say about the goroutine state,\n> but suggestions are welcome, as are suggestions for modifications to\n> the GDB/Go Runtime support to print things that would really help in\n> real-world debugging situations.\n\n(more long term)\n\ni think it would be nice to get more natural slice printing working,\nas well a derived types (type myInt int)\n\ni'm not sure how much work that would be inside of gdb and how the\nmantainers there would feel about that\n\ncertainly not a priority\n",
			"disapproval": false,
			"date": "2011-10-02 04:56:18.263486",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"lvd@golang.org",
				"adg@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html\nFile doc/debugging_with_gdb.html (right):\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html#newcode218\ndoc/debugging_with_gdb.html:218: <code>'regexp.*Regexp\u00b7doParse'</code>. (Note that the second dot is a \"middot,\"\nIs this still the case with the middot? I thought rsc said not.\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html#newcode250\ndoc/debugging_with_gdb.html:250: Execution has paused at the breakpoint. Then see which goroutines are running, and what they're doing:\n\\n</p> after \"breakpoint.\"\n<p>\nSee which goroutines...\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html#newcode260\ndoc/debugging_with_gdb.html:260: the one marked with the '*' is the current goroutine.\nwrap '*' with <code></code>\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html#newcode280\ndoc/debugging_with_gdb.html:280: The other goroutine, number 1, is stuck in gosched, blocked on a channel read:\ns_gosched_<code>runtime.gosched</code>_\ns_read_receive (<code>runtime.chanrecv</code>_\n\nhttp://codereview.appspot.com/5168046/diff/11001/doc/debugging_with_gdb.html\nFile doc/debugging_with_gdb.html (right):\n\nhttp://codereview.appspot.com/5168046/diff/11001/doc/debugging_with_gdb.html#newcode318\ndoc/debugging_with_gdb.html:318: dangerous to use, since it will also try to print uninitialized variables. Uninitialized slices may cause gdb to try\ns_gdb_GDB_\n\nhttp://codereview.appspot.com/5168046/diff/11001/doc/debugging_with_gdb.html#newcode319\ndoc/debugging_with_gdb.html:319: to print arbitrary large arrays.\ns/arbitrary/arbitrarily/\n\nhttp://codereview.appspot.com/5168046/diff/11001/doc/debugging_with_gdb.html#newcode334\ndoc/debugging_with_gdb.html:334: on the right-hand side of the type name and made up a 'struct' keyword, in traditional C style.\ns_'struct'_<code>'struct'</code>_\n\nhttp://codereview.appspot.com/5168046/diff/11001/doc/debugging_with_gdb.html#newcode393\ndoc/debugging_with_gdb.html:393: (gdb) bt\ndupe line",
			"disapproval": false,
			"date": "2011-10-04 15:38:21.519304",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"lvd@golang.org",
				"adg@golang.org",
				"cw@f00f.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=320d83ed794a ***\n\ndocumentation: Debugging Go code with GDB tutorial.\n\nR=adg, cw, lvd\nCC=golang-dev\nhttp://codereview.appspot.com/5168046\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2011-10-05 17:49:51.100496",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@golang.org",
				"adg@golang.org",
				"cw@f00f.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "all done.  i ran all tests and nothing broke!\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html\nFile doc/debugging_with_gdb.html (right):\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html#newcode218\ndoc/debugging_with_gdb.html:218: <code>'regexp.*Regexp\u00b7doParse'</code>. (Note that the second dot is a \"middot,\"\nOn 2011/10/04 15:38:21, adg wrote:\n> Is this still the case with the middot? I thought rsc said not.\n\nDone.\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html#newcode250\ndoc/debugging_with_gdb.html:250: Execution has paused at the breakpoint. Then see which goroutines are running, and what they're doing:\nOn 2011/10/04 15:38:21, adg wrote:\n> \\n</p> after \"breakpoint.\"\n> <p>\n> See which goroutines...\n\nDone.\n\nhttp://codereview.appspot.com/5168046/diff/7001/doc/debugging_with_gdb.html#newcode280\ndoc/debugging_with_gdb.html:280: The other goroutine, number 1, is stuck in gosched, blocked on a channel read:\nOn 2011/10/04 15:38:21, adg wrote:\n> s_gosched_<code>runtime.gosched</code>_\n> s_read_receive (<code>runtime.chanrecv</code>_\n\nDone.",
			"disapproval": false,
			"date": "2011-10-04 18:08:49.199930",
			"approval": false
		}
	],
	"owner_email": "lvd@golang.org",
	"private": false,
	"base_url": "",
	"owner": "lvd1",
	"subject": "code review 5168046: documentation: Debugging Go code with GDB tutorial.",
	"created": "2011-10-01 00:06:06.856318",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		10001,
		11001,
		18001
	],
	"modified": "2011-10-06 08:35:58.863118",
	"closed": true,
	"issue": 5168046
}