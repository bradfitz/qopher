{
	"description": "net: fix broken setDefaultSockopts",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5536068/diff/7007/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5536068/diff/7007/src/pkg/net/unicast_test.go#newcode16\nsrc/pkg/net/unicast_test.go:16: reuse  bool\ndocument what this means. I thought it meant \"set reuse addr bit on the fd\", but it actually means use the previous test case's local addr.\n\nmaybe ditch this field and use laddr == \"previous\" to mean previous instead?\n\nhttp://codereview.appspot.com/5536068/diff/7007/src/pkg/net/unicast_test.go#newcode19\nsrc/pkg/net/unicast_test.go:19: {\"tcp4\", \"127.0.0.1:0\", false, false, false},\nThis is shorter:\n{net: \"tcp4\", laddr: \"127.0.0.1:0\"}\n\nAnd naming these fields is more readable than:\nfalse, false, true, false, true, false, false",
			"disapproval": false,
			"date": "2012-01-19 19:59:26.687174",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-19 20:19:10.904258",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-19 20:26:02.505215",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=669536c0ba8c ***\n\nnet: fix broken setDefaultSockopts\n\nR=rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5536068",
			"disapproval": false,
			"date": "2012-01-19 22:31:17.238622",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-19 19:20:21.157520",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 20, 2012 at 4:24 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n\n> It'd be neat if there were a test or two for this.\n\nyup, makes sense. will do.\n\nPS: I hate wildcard games ;-<\n",
			"disapproval": false,
			"date": "2012-01-19 19:32:01.072971",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5536068/diff/7007/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5536068/diff/7007/src/pkg/net/unicast_test.go#newcode16\nsrc/pkg/net/unicast_test.go:16: reuse  bool\nOn 2012/01/19 19:59:26, bradfitz wrote:\n> document what this means. I thought it meant \"set reuse addr bit on the fd\", but\n> it actually means use the previous test case's local addr.\n> \n> maybe ditch this field and use laddr == \"previous\" to mean previous instead?\n\nDone.\n\nhttp://codereview.appspot.com/5536068/diff/7007/src/pkg/net/unicast_test.go#newcode19\nsrc/pkg/net/unicast_test.go:19: {\"tcp4\", \"127.0.0.1:0\", false, false, false},\nOn 2012/01/19 19:59:26, bradfitz wrote:\n> This is shorter:\n> {net: \"tcp4\", laddr: \"127.0.0.1:0\"}\n> \n> And naming these fields is more readable than:\n> false, false, true, false, true, false, false\n\nDone.",
			"disapproval": false,
			"date": "2012-01-19 20:18:49.759341",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-19 19:53:42.775691",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "tests look much better now, thanks.\n\nleaving for Russ or whoever normally reviews networking stuff.",
			"disapproval": false,
			"date": "2012-01-19 20:23:27.114117",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks",
			"disapproval": false,
			"date": "2012-01-19 22:19:56.546666",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It'd be neat if there were a test or two for this.\n\nOn Thu, Jan 19, 2012 at 11:20 AM, <mikioh.mikioh@gmail.com> wrote:\n\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> net: fix broken setDefaultSockopts\n>\n> Please review this at http://codereview.appspot.com/**5536068/<http://codereview.appspot.com/5536068/>\n>\n> Affected files:\n>  M src/pkg/net/fd.go\n>  M src/pkg/net/ipsock_posix.go\n>  M src/pkg/net/sock.go\n>  M src/pkg/net/sockopt_bsd.go\n>  M src/pkg/net/sockopt_linux.go\n>  M src/pkg/net/unixsock_posix.go\n>\n>\n> Index: src/pkg/net/fd.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/fd.go\n> +++ b/src/pkg/net/fd.go\n> @@ -24,7 +24,7 @@\n>        // immutable until Close\n>        sysfd   int\n>        family  int\n> -       proto   int\n> +       sotype  int\n>        sysfile *os.File\n>        cr      chan bool\n>        cw      chan bool\n> @@ -274,7 +274,7 @@\n>        pollserver = p\n>  }\n>\n> -func newFD(fd, family, proto int, net string) (f *netFD, err error) {\n> +func newFD(fd, family, sotype int, net string) (f *netFD, err error) {\n>        onceStartServer.Do(**startServer)\n>        if e := syscall.SetNonblock(fd, true); e != nil {\n>                return nil, e\n> @@ -282,7 +282,7 @@\n>        f = &netFD{\n>                sysfd:  fd,\n>                family: family,\n> -               proto:  proto,\n> +               sotype: sotype,\n>                net:    net,\n>        }\n>        f.cr = make(chan bool, 1)\n> @@ -397,7 +397,7 @@\n>                }\n>                if err != nil {\n>                        n = 0\n> -               } else if n == 0 && err == nil && fd.proto !=\n> syscall.SOCK_DGRAM {\n> +               } else if n == 0 && err == nil && fd.sotype !=\n> syscall.SOCK_DGRAM {\n>                        err = io.EOF\n>                }\n>                break\n> @@ -599,7 +599,7 @@\n>        syscall.CloseOnExec(s)\n>        syscall.ForkLock.RUnlock()\n>\n> -       if nfd, err = newFD(s, fd.family, fd.proto, fd.net); err != nil {\n> +       if nfd, err = newFD(s, fd.family, fd.sotype, fd.net); err != nil {\n>                syscall.Close(s)\n>                return nil, err\n>        }\n> Index: src/pkg/net/ipsock_posix.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/ipsock_posix.go\n> +++ b/src/pkg/net/ipsock_posix.go\n> @@ -101,7 +101,7 @@\n>        family() int\n>  }\n>\n> -func internetSocket(net string, laddr, raddr sockaddr, socktype, proto\n> int, mode string, toAddr func(syscall.Sockaddr) Addr) (fd *netFD, err\n> error) {\n> +func internetSocket(net string, laddr, raddr sockaddr, sotype, proto int,\n> mode string, toAddr func(syscall.Sockaddr) Addr) (fd *netFD, err error) {\n>        var oserr error\n>        var la, ra syscall.Sockaddr\n>        family := favoriteAddrFamily(net, raddr, laddr, mode)\n> @@ -115,7 +115,7 @@\n>                        goto Error\n>                }\n>        }\n> -       fd, oserr = socket(net, family, socktype, proto, la, ra, toAddr)\n> +       fd, oserr = socket(net, family, sotype, proto, la, ra, toAddr)\n>        if oserr != nil {\n>                goto Error\n>        }\n> Index: src/pkg/net/sock.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/sock.go\n> +++ b/src/pkg/net/sock.go\n> @@ -17,10 +17,10 @@\n>  var listenerBacklog = maxListenerBacklog()\n>\n>  // Generic socket creation.\n> -func socket(net string, f, p, t int, la, ra syscall.Sockaddr, toAddr\n> func(syscall.Sockaddr) Addr) (fd *netFD, err error) {\n> +func socket(net string, f, t, p int, la, ra syscall.Sockaddr, toAddr\n> func(syscall.Sockaddr) Addr) (fd *netFD, err error) {\n>        // See ../syscall/exec.go for description of ForkLock.\n>        syscall.ForkLock.RLock()\n> -       s, err := syscall.Socket(f, p, t)\n> +       s, err := syscall.Socket(f, t, p)\n>        if err != nil {\n>                syscall.ForkLock.RUnlock()\n>                return nil, err\n> @@ -28,7 +28,7 @@\n>        syscall.CloseOnExec(s)\n>        syscall.ForkLock.RUnlock()\n>\n> -       setDefaultSockopts(s, f, p)\n> +       setDefaultSockopts(s, f, t)\n>\n>        if la != nil {\n>                err = syscall.Bind(s, la)\n> @@ -38,7 +38,7 @@\n>                }\n>        }\n>\n> -       if fd, err = newFD(s, f, p, net); err != nil {\n> +       if fd, err = newFD(s, f, t, net); err != nil {\n>                closesocket(s)\n>                return nil, err\n>        }\n> Index: src/pkg/net/sockopt_bsd.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/sockopt_bsd.go\n> +++ b/src/pkg/net/sockopt_bsd.go\n> @@ -12,14 +12,15 @@\n>        \"syscall\"\n>  )\n>\n> -func setDefaultSockopts(s, f, p int) {\n> +func setDefaultSockopts(s, f, t int) {\n>        switch f {\n>        case syscall.AF_INET6:\n>                // Allow both IP versions even if the OS default is\n> otherwise.\n>                syscall.SetsockoptInt(s, syscall.IPPROTO_IPV6,\n> syscall.IPV6_V6ONLY, 0)\n>        }\n>\n> -       if f == syscall.AF_UNIX || p == syscall.IPPROTO_TCP {\n> +       if f == syscall.AF_UNIX ||\n> +               (f == syscall.AF_INET || f == syscall.AF_INET6) && t ==\n> syscall.SOCK_STREAM {\n>                // Allow reuse of recently-used addresses.\n>                syscall.SetsockoptInt(s, syscall.SOL_SOCKET,\n> syscall.SO_REUSEADDR, 1)\n>\n> Index: src/pkg/net/sockopt_linux.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/sockopt_linux.go\n> +++ b/src/pkg/net/sockopt_linux.go\n> @@ -10,14 +10,15 @@\n>        \"syscall\"\n>  )\n>\n> -func setDefaultSockopts(s, f, p int) {\n> +func setDefaultSockopts(s, f, t int) {\n>        switch f {\n>        case syscall.AF_INET6:\n>                // Allow both IP versions even if the OS default is\n> otherwise.\n>                syscall.SetsockoptInt(s, syscall.IPPROTO_IPV6,\n> syscall.IPV6_V6ONLY, 0)\n>        }\n>\n> -       if f == syscall.AF_UNIX || p == syscall.IPPROTO_TCP {\n> +       if f == syscall.AF_UNIX ||\n> +               (f == syscall.AF_INET || f == syscall.AF_INET6) && t ==\n> syscall.SOCK_STREAM {\n>                // Allow reuse of recently-used addresses.\n>                syscall.SetsockoptInt(s, syscall.SOL_SOCKET,\n> syscall.SO_REUSEADDR, 1)\n>        }\n> Index: src/pkg/net/unixsock_posix.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/unixsock_posix.**go\n> +++ b/src/pkg/net/unixsock_posix.**go\n> @@ -15,16 +15,16 @@\n>  )\n>\n>  func unixSocket(net string, laddr, raddr *UnixAddr, mode string) (fd\n> *netFD, err error) {\n> -       var proto int\n> +       var sotype int\n>        switch net {\n>        default:\n>                return nil, UnknownNetworkError(net)\n>        case \"unix\":\n> -               proto = syscall.SOCK_STREAM\n> +               sotype = syscall.SOCK_STREAM\n>        case \"unixgram\":\n> -               proto = syscall.SOCK_DGRAM\n> +               sotype = syscall.SOCK_DGRAM\n>        case \"unixpacket\":\n> -               proto = syscall.SOCK_SEQPACKET\n> +               sotype = syscall.SOCK_SEQPACKET\n>        }\n>\n>        var la, ra syscall.Sockaddr\n> @@ -38,7 +38,7 @@\n>                }\n>                if raddr != nil {\n>                        ra = &syscall.SockaddrUnix{Name: raddr.Name}\n> -               } else if proto != syscall.SOCK_DGRAM || laddr == nil {\n> +               } else if sotype != syscall.SOCK_DGRAM || laddr == nil {\n>                        return nil, &OpError{Op: mode, Net: net, Err:\n> errMissingAddress}\n>                }\n>\n> @@ -53,13 +53,13 @@\n>        }\n>\n>        f := sockaddrToUnix\n> -       if proto == syscall.SOCK_DGRAM {\n> +       if sotype == syscall.SOCK_DGRAM {\n>                f = sockaddrToUnixgram\n> -       } else if proto == syscall.SOCK_SEQPACKET {\n> +       } else if sotype == syscall.SOCK_SEQPACKET {\n>                f = sockaddrToUnixpacket\n>        }\n>\n> -       fd, oserr := socket(net, syscall.AF_UNIX, proto, 0, la, ra, f)\n> +       fd, oserr := socket(net, syscall.AF_UNIX, sotype, 0, la, ra, f)\n>        if oserr != nil {\n>                goto Error\n>        }\n> @@ -94,8 +94,8 @@\n>        return nil\n>  }\n>\n> -func protoToNet(proto int) string {\n> -       switch proto {\n> +func sotypeToNet(sotype int) string {\n> +       switch sotype {\n>        case syscall.SOCK_STREAM:\n>                return \"unix\"\n>        case syscall.SOCK_SEQPACKET:\n> @@ -103,7 +103,7 @@\n>        case syscall.SOCK_DGRAM:\n>                return \"unixgram\"\n>        default:\n> -               panic(\"protoToNet unknown protocol\")\n> +               panic(\"sotypeToNet unknown socket type\")\n>        }\n>        return \"\"\n>  }\n> @@ -221,7 +221,7 @@\n>        n, sa, err := c.fd.ReadFrom(b)\n>        switch sa := sa.(type) {\n>        case *syscall.SockaddrUnix:\n> -               addr = &UnixAddr{sa.Name, protoToNet(c.fd.proto)}\n> +               addr = &UnixAddr{sa.Name, sotypeToNet(c.fd.sotype)}\n>        }\n>        return\n>  }\n> @@ -245,7 +245,7 @@\n>        if !c.ok() {\n>                return 0, os.EINVAL\n>        }\n> -       if addr.Net != protoToNet(c.fd.proto) {\n> +       if addr.Net != sotypeToNet(c.fd.sotype) {\n>                return 0, os.EAFNOSUPPORT\n>        }\n>        sa := &syscall.SockaddrUnix{Name: addr.Name}\n> @@ -271,7 +271,7 @@\n>        n, oobn, flags, sa, err := c.fd.ReadMsg(b, oob)\n>        switch sa := sa.(type) {\n>        case *syscall.SockaddrUnix:\n> -               addr = &UnixAddr{sa.Name, protoToNet(c.fd.proto)}\n> +               addr = &UnixAddr{sa.Name, sotypeToNet(c.fd.sotype)}\n>        }\n>        return\n>  }\n> @@ -281,7 +281,7 @@\n>                return 0, 0, os.EINVAL\n>        }\n>        if addr != nil {\n> -               if addr.Net != protoToNet(c.fd.proto) {\n> +               if addr.Net != sotypeToNet(c.fd.sotype) {\n>                        return 0, 0, os.EAFNOSUPPORT\n>                }\n>                sa := &syscall.SockaddrUnix{Name: addr.Name}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-19 19:24:42.032161",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 5536068: net: fix broken setDefaultSockopts",
	"created": "2012-01-19 19:04:59.384399",
	"patchsets": [
		3017,
		6008,
		7007,
		7008,
		5022,
		5023
	],
	"modified": "2012-01-19 22:31:19.229053",
	"closed": true,
	"issue": 5536068
}