{
	"description": "go.net/ipv6: new package\n\nPackage ipv6 implements IP-level socket options for the Internet\nProtocol version 6. It also provides datagram based network I/O\nmethods specific to the IPv6 and higher layer protocols.\n\nFixes issue 5538.",
	"cc": [
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-05-30 23:44:13.876190",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Description:\r\n> go.net/ipv6: new package\r\n\r\nAs per discussion\r\nhttps://groups.google.com/d/msg/golang-dev/zbMTkiAq-Hw/N2Q6zZ4EjRYJ,\r\nwe've decided to keep IP-level options out of stdlib, and removed\r\nalmost all IP-level options for both IPv4 and IPv6 from stdlib (except\r\nLinstenMulticastUDP). The options for IPv4 already exists at\r\ngo.net/ipv4, so this CL fills a gap for IPv6.\r\n",
			"disapproval": false,
			"date": "2013-05-30 23:50:34.898190",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nI think this CL is pretty close, and I don't want to spend too long polishing it as I have a feeling we'll be doing a few followups.\n\nPlease take a look at these comments. \n\nI'd like to hear from the windows and *bsd's to head off any breakage on their builders.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go\nFile ipv6/control.go (right):\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode15\nipv6/control.go:15: errNotSupported    = errors.New(\"not supported\")\nthis is a policy question, i've noticed that some packages are adding a prefix to their error messages, ie, \"ipv6: not supported\"\n\nI am not sure if this is appropriate here.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode42\nipv6/control.go:42: func (c *rawOpt) set(f ControlFlags)        { c.cflags |= f }\ncould you please add a small unit test for these flags, esp as they are not holding the mutex when called.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode46\nipv6/control.go:46: type ControlFlags uint\nThis public symbol needs a comment.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode58\nipv6/control.go:58: // packet basis IP-level socket option data.\n// A ControlMessage represents per package based IP-level socket control options.\n\n^ maybe.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode67\nipv6/control.go:67: //\nCan these two be uint8s rather than ints ?\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/endpoint.go\nFile ipv6/endpoint.go (right):\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/endpoint.go#newcode26\nipv6/endpoint.go:26: // with the endpoint.\na path MTU value, or the path MTU value ?\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/helper.go\nFile ipv6/helper.go (right):\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/helper.go#newcode25\nipv6/helper.go:25: }\nis it worth handling the default case here ? Is that an error ?",
			"disapproval": false,
			"date": "2013-06-01 05:32:07.410480",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks for your review, as usual.\n\n> I'd like to hear from the windows and *bsd's to head off any breakage on their builders.\n\nCross compilations passed a few days ago and almost all tests are disabled on Windows. BSD bros are always fine.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go\nFile ipv6/control.go (right):\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode15\nipv6/control.go:15: errNotSupported    = errors.New(\"not supported\")\nI'd like to keep as it is until when we fix issue 4856.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode42\nipv6/control.go:42: func (c *rawOpt) set(f ControlFlags)        { c.cflags |= f }\nOn 2013/06/01 05:32:07, dfc wrote:\n> could you please add a small unit test for these flags, esp as they are not\n> holding the mutex when called.\n\nDone.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode46\nipv6/control.go:46: type ControlFlags uint\nOn 2013/06/01 05:32:07, dfc wrote:\n> This public symbol needs a comment.\n\nDone.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode58\nipv6/control.go:58: // packet basis IP-level socket option data.\nChanged; also the comment on SetControlMessage.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode67\nipv6/control.go:67: //\nWe use those for both sticky and per-packet options. So let's leave it as it is.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/endpoint.go\nFile ipv6/endpoint.go (right):\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/endpoint.go#newcode26\nipv6/endpoint.go:26: // with the endpoint.\nHm, probably \"a path MTU\" because it's one of many; uh-oh path MTU/packetization layer path MTU over multiple paths consist of multiple hops.\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/helper.go\nFile ipv6/helper.go (right):\n\nhttps://codereview.appspot.com/9843044/diff/7049/ipv6/helper.go#newcode25\nipv6/helper.go:25: }\nIt's fine as is; see ReadFrom in payload_cmsg.go.",
			"disapproval": false,
			"date": "2013-06-04 03:46:08.518640",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Obviously this is the first of several CLs, so lets get it in early in the 1.2 cycle and iterate from there. \r\n\r\nAlso, lol @ BSD bros. \r\n\r\n\r\n\r\nOn 04/06/2013, at 13:46, mikioh.mikioh@gmail.com wrote:\r\n\r\n> PTAL\r\n> \r\n> Thanks for your review, as usual.\r\n> \r\n>> I'd like to hear from the windows and *bsd's to head off any breakage\r\n> on their builders.\r\n> \r\n> Cross compilations passed a few days ago and almost all tests are\r\n> disabled on Windows. BSD bros are always fine.\r\n> \r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/control.go\r\n> File ipv6/control.go (right):\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode15\r\n> ipv6/control.go:15: errNotSupported    = errors.New(\"not supported\")\r\n> I'd like to keep as it is until when we fix issue 4856.\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode42\r\n> ipv6/control.go:42: func (c *rawOpt) set(f ControlFlags)        {\r\n> c.cflags |= f }\r\n> On 2013/06/01 05:32:07, dfc wrote:\r\n>> could you please add a small unit test for these flags, esp as they\r\n> are not\r\n>> holding the mutex when called.\r\n> \r\n> Done.\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode46\r\n> ipv6/control.go:46: type ControlFlags uint\r\n> On 2013/06/01 05:32:07, dfc wrote:\r\n>> This public symbol needs a comment.\r\n> \r\n> Done.\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode58\r\n> ipv6/control.go:58: // packet basis IP-level socket option data.\r\n> Changed; also the comment on SetControlMessage.\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/control.go#newcode67\r\n> ipv6/control.go:67: //\r\n> We use those for both sticky and per-packet options. So let's leave it\r\n> as it is.\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/endpoint.go\r\n> File ipv6/endpoint.go (right):\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/endpoint.go#newcode26\r\n> ipv6/endpoint.go:26: // with the endpoint.\r\n> Hm, probably \"a path MTU\" because it's one of many; uh-oh path\r\n> MTU/packetization layer path MTU over multiple paths consist of multiple\r\n> hops.\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/helper.go\r\n> File ipv6/helper.go (right):\r\n> \r\n> https://codereview.appspot.com/9843044/diff/7049/ipv6/helper.go#newcode25\r\n> ipv6/helper.go:25: }\r\n> It's fine as is; see ReadFrom in payload_cmsg.go.\r\n> \r\n> https://codereview.appspot.com/9843044/\r\n",
			"disapproval": false,
			"date": "2013-06-04 03:56:25.776210",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=2893ed4717f2&repo=net ***\n\ngo.net/ipv6: new package\n\nPackage ipv6 implements IP-level socket options for the Internet\nProtocol version 6. It also provides datagram based network I/O\nmethods specific to the IPv6 and higher layer protocols.\n\nFixes issue 5538.\n\nR=dave\nCC=golang-dev\nhttps://codereview.appspot.com/9843044",
			"disapproval": false,
			"date": "2013-06-04 08:43:07.488210",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 9843044: go.net/ipv6: new package",
	"created": "2013-05-29 10:40:45.302530",
	"patchsets": [
		24001,
		7049,
		33001,
		34049
	],
	"modified": "2013-06-04 08:43:11.409460",
	"closed": true,
	"issue": 9843044
}