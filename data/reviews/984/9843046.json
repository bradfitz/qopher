{
	"description": "runtime: introduce preemption function (not used for now)\nThis is part of preemptive scheduler.",
	"cc": [
		"golang-dev@googlegroups.com",
		"cshapiro@google.com",
		"dvyukov@google.com"
	],
	"reviewers": [
		"jeremyjackins@gmail.com",
		"iant@golang.org",
		"ality@pbrane.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-30 10:11:17.424760",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can this be part of a change with more context?",
			"disapproval": false,
			"date": "2013-05-31 04:23:23.182540",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/31 04:23:23, cshapiro1 wrote:\n> Can this be part of a change with more context?\n\ndunno\nI used to do it this way, because people here asked for small CLs.",
			"disapproval": false,
			"date": "2013-05-31 05:41:59.222820",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9843046/diff/8001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9843046/diff/8001/src/pkg/runtime/proc.c#newcode2071\nsrc/pkg/runtime/proc.c:2071: preemptall(void)\nPlease add a comment before these new functions explaining what they do and explaining what locks need to be held before calling them.\n\nhttps://codereview.appspot.com/9843046/diff/8001/src/pkg/runtime/proc.c#newcode2096\nsrc/pkg/runtime/proc.c:2096: gp->stackguard = StackPreempt;\nIf I understand this correctly, this g might actually be running in parallel.  So this assignment to gp->stackguard might be overwritten before it takes effect.  If I'm right I think there needs to be a comment explaining that.",
			"disapproval": false,
			"date": "2013-06-01 00:24:46.744660",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/01 00:24:46, iant wrote:\n> https://codereview.appspot.com/9843046/diff/8001/src/pkg/runtime/proc.c\n> File src/pkg/runtime/proc.c (right):\n> \n> https://codereview.appspot.com/9843046/diff/8001/src/pkg/runtime/proc.c#newcode2071\n> src/pkg/runtime/proc.c:2071: preemptall(void)\n> Please add a comment before these new functions explaining what they do and\n> explaining what locks need to be held before calling them.\n> \n> https://codereview.appspot.com/9843046/diff/8001/src/pkg/runtime/proc.c#newcode2096\n> src/pkg/runtime/proc.c:2096: gp->stackguard = StackPreempt;\n> If I understand this correctly, this g might actually be running in parallel. \n> So this assignment to gp->stackguard might be overwritten before it takes\n> effect.  If I'm right I think there needs to be a comment explaining that.\n\nAdded the comments.\nThe semantics are formally very weak, by no locks needs to be held.\nThanks!",
			"disapproval": false,
			"date": "2013-06-01 19:36:42.734110",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c#newcode2074\nsrc/pkg/runtime/proc.c:2074: // Issue preemption signal to all running goroutines.\nDon't use the word signal here.  It sounds like, well, a signal, via the kill function.  Which is not what happens here.\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c#newcode2077\nsrc/pkg/runtime/proc.c:2077: // the signal to a wrong goroutine that has already finished running.\nI'm not sure what you mean by \"a wrong goroutine\" here.  And why do we even need to say anything about that case?  It seems that trying to preempt a goroutine that has finished will do nothing in any case.\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c#newcode2080\nsrc/pkg/runtime/proc.c:2080: preemptall(void)\nTell all goroutines that they have been preempted and they should stop.\nThis function is purely best-effort.  It can fail to inform a goroutine if a processor just started running it.\nNo locks need to be held.\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c#newcode2099\nsrc/pkg/runtime/proc.c:2099: static void\nTell the goroutine running on processor P to stop.\nThis function is purely best-effort.  It can incorrectly fail to inform the goroutine.  It can send inform the wrong goroutine.  Even if it informs the correct goroutine, that goroutine might ignore the request if it is simultaneously executing runtime\u00b7newstack.\nNo lock needs to be held.\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/stack.h#newcode112\nsrc/pkg/runtime/stack.h:112: StackPreempt = (uintptr)-42,\nIn practice people looking at stackguard0 are going to see a number printed in hex, so I think this number should be something recognizable in hex.  Perhaps something like (uintptr)(intptr)0xfffffade ?",
			"disapproval": false,
			"date": "2013-06-03 04:41:44.423570",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c#newcode2077\nsrc/pkg/runtime/proc.c:2077: // the signal to a wrong goroutine that has already finished running.\nOn 2013/06/03 04:41:44, iant wrote:\n> I'm not sure what you mean by \"a wrong goroutine\" here.  And why do we even need\n> to say anything about that case?  It seems that trying to preempt a goroutine\n> that has finished will do nothing in any case.\n\nI mean that if P finishes running g0 and starts running g1; this code can notify g0, while from user point of view the correct goroutine is g1 in this case, and g0 is the wrong goroutine to notify.\nWell, actually, if the thread that executes preemptall() is preempted by OS after reading p->m->curg but before notifying, later it will notify essentially a random goroutine (e.g. the goroutine can finish and be reused several times, and be e.g. in a syscall).\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c#newcode2080\nsrc/pkg/runtime/proc.c:2080: preemptall(void)\nOn 2013/06/03 04:41:44, iant wrote:\n> Tell all goroutines that they have been preempted and they should stop.\n> This function is purely best-effort.  It can fail to inform a goroutine if a\n> processor just started running it.\n> No locks need to be held.\n\nDone.\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/proc.c#newcode2099\nsrc/pkg/runtime/proc.c:2099: static void\nOn 2013/06/03 04:41:44, iant wrote:\n> Tell the goroutine running on processor P to stop.\n> This function is purely best-effort.  It can incorrectly fail to inform the\n> goroutine.  It can send inform the wrong goroutine.  Even if it informs the\n> correct goroutine, that goroutine might ignore the request if it is\n> simultaneously executing runtime\u00b7newstack.\n> No lock needs to be held.\n\nDone.\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/9843046/diff/15001/src/pkg/runtime/stack.h#newcode112\nsrc/pkg/runtime/stack.h:112: StackPreempt = (uintptr)-42,\nOn 2013/06/03 04:41:44, iant wrote:\n> In practice people looking at stackguard0 are going to see a number printed in\n> hex, so I think this number should be something recognizable in hex.  Perhaps\n> something like (uintptr)(intptr)0xfffffade ?\n\nDone.",
			"disapproval": false,
			"date": "2013-06-03 09:17:51.069230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=01810e5c68e9 ***\n\nruntime: introduce preemption function (not used for now)\nThis is part of preemptive scheduler.\n\nR=golang-dev, cshapiro, iant\nCC=golang-dev\nhttps://codereview.appspot.com/9843046",
			"disapproval": false,
			"date": "2013-06-03 09:20:33.860710",
			"approval": false
		},
		{
			"sender": "jeremyjackins@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"jeremyjackins@gmail.com",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9843046/diff/28001/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/9843046/diff/28001/src/pkg/runtime/stack.h#newcode112\nsrc/pkg/runtime/stack.h:112: StackPreempt = (uintptr)(intptr)0xfffffade,\nThis line breaks the Plan 9 build:\n\n/usr/ec2/src/go/src/cmd/8l/../ld/../../pkg/runtime/stack.h:112 /usr/ec2/src/go/src/cmd/8l/../ld/lib.c:35 name not declared: intptr\n/usr/ec2/src/go/src/cmd/8l/../ld/../../pkg/runtime/stack.h:112 /usr/ec2/src/go/src/cmd/8l/../ld/lib.c:35 enum not a constant: StackPreempt\n/usr/ec2/src/go/src/cmd/8l/../ld/../../pkg/runtime/stack.h:112 /usr/ec2/src/go/src/cmd/8l/../ld/lib.c:35 syntax error, last name: 0xfffffade\n\nchanging it to\n\nStackPreempt = (uintptr)0xfffffade,\n\nmakes the error go away. Is plan9 missing a def somewhere?",
			"disapproval": false,
			"date": "2013-06-04 18:13:37.109680",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"jeremyjackins@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/04 18:13:37, jnj wrote:\n> https://codereview.appspot.com/9843046/diff/28001/src/pkg/runtime/stack.h\n> File src/pkg/runtime/stack.h (right):\n> \n> https://codereview.appspot.com/9843046/diff/28001/src/pkg/runtime/stack.h#newcode112\n> src/pkg/runtime/stack.h:112: StackPreempt = (uintptr)(intptr)0xfffffade,\n> This line breaks the Plan 9 build:\n> \n> /usr/ec2/src/go/src/cmd/8l/../ld/../../pkg/runtime/stack.h:112\n> /usr/ec2/src/go/src/cmd/8l/../ld/lib.c:35 name not declared: intptr\n> /usr/ec2/src/go/src/cmd/8l/../ld/../../pkg/runtime/stack.h:112\n> /usr/ec2/src/go/src/cmd/8l/../ld/lib.c:35 enum not a constant: StackPreempt\n> /usr/ec2/src/go/src/cmd/8l/../ld/../../pkg/runtime/stack.h:112\n> /usr/ec2/src/go/src/cmd/8l/../ld/lib.c:35 syntax error, last name: 0xfffffade\n> \n> changing it to\n> \n> StackPreempt = (uintptr)0xfffffade,\n> \n> makes the error go away. Is plan9 missing a def somewhere?\n\nThe cast to intptr matters because we want to sign extend if necessary, to ensure that we get an invalid address.  intptr is a typedef in runtime.h.  I see now that cmd/ld also includes stack.h, naturally without including runtime.h.  I also see that intptr is a typedef in include/u.h, though, and 8l/l.h includes u.h.  Why isn't intptr defined there?\n\nIan",
			"disapproval": false,
			"date": "2013-06-04 18:43:44.834800",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "iant@golang.org once said:\r\n> The cast to intptr matters because we want to sign extend if necessary,\r\n> to ensure that we get an invalid address.  intptr is a typedef in\r\n> runtime.h.  I see now that cmd/ld also includes stack.h, naturally\r\n> without including runtime.h.  I also see that intptr is a typedef in\r\n> include/u.h, though, and 8l/l.h includes u.h.  Why isn't intptr defined\r\n> there?\r\n\r\nSorry. I forgot to add intptr when I originally added\r\nthe Plan 9 includes. \r\n\r\nFix is here: https://codereview.appspot.com/10023043/\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-06-04 22:54:44.002670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 4, 2013 at 2:43 PM, <iant@golang.org> wrote:\r\n\r\n> The cast to intptr matters because we want to sign extend if necessary,\r\n> to ensure that we get an invalid address.  intptr is a typedef in\r\n> runtime.h.  I see now that cmd/ld also includes stack.h, naturally\r\n> without including runtime.h.  I also see that intptr is a typedef in\r\n> include/u.h, though, and 8l/l.h includes u.h.  Why isn't intptr defined\r\n> there?\r\n>\r\n\r\nOne reason not to have intptr is so that it cannot be used incorrectly.\r\nThere are very few correct uses for it.\r\n\r\nIf we are on a 32-bit machine, then I think we all agree that\r\n(uintptr)(intptr)0xfffffade == (uintptr)0xfffffade.\r\n\r\nIf we are on a 64-bit machine, then: 0xfffffade has type unsigned int,\r\nmeaning it is an unsigned 32-bit int, intptr is a signed 64-bit int. A\r\nconversion of a uint32 to an int64 can be injective, and so it should be,\r\nmeaning that (intptr)0xfffffade has zeros in its high bits. So\r\n(uintptr)(intptr)0xfffffade == (uintptr)0xfffffade.\r\n\r\nReally this code should say (uintptr)(int32)0xfffffade, with the inner cast\r\nforcing the high bit of the value to become a sign bit, which will in turn\r\ncause the int32->uintptr conversion to sign extend as described.\r\n\r\nThis code is even more sketchy because it is being used to initialize an\r\nenum value. The standard is super vague about what the representation type\r\nof an enum is, and compilers disagree. 6c uses the \"maximum\" type of the\r\ninitializers, which in this case ends up being uintptr. But that's not\r\nsomething you really want to rely on (and it still doesn't lead to correct\r\nbehavior here).\r\n\r\nI included stack.h in runtime.c and added\r\n\r\n{ uintptr p = StackPreempt;\r\nif((p>>32) == 0) runtime\u00b7throw(\"StackPreempt -> uintptr is small\"); }\r\n\r\nto runtime.check. It fails.\r\n\r\nI can't see how the preemption check is working, except that maybe Dmitriy\r\nis not really testing with this specific code.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-10 19:30:01.593470",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 10, 2013 at 11:29 PM, Russ Cox <rsc@golang.org> wrote:\r\n> On Tue, Jun 4, 2013 at 2:43 PM, <iant@golang.org> wrote:\r\n>>\r\n>> The cast to intptr matters because we want to sign extend if necessary,\r\n>> to ensure that we get an invalid address.  intptr is a typedef in\r\n>> runtime.h.  I see now that cmd/ld also includes stack.h, naturally\r\n>> without including runtime.h.  I also see that intptr is a typedef in\r\n>> include/u.h, though, and 8l/l.h includes u.h.  Why isn't intptr defined\r\n>> there?\r\n>\r\n>\r\n> One reason not to have intptr is so that it cannot be used incorrectly.\r\n> There are very few correct uses for it.\r\n>\r\n> If we are on a 32-bit machine, then I think we all agree that\r\n> (uintptr)(intptr)0xfffffade == (uintptr)0xfffffade.\r\n>\r\n> If we are on a 64-bit machine, then: 0xfffffade has type unsigned int,\r\n> meaning it is an unsigned 32-bit int, intptr is a signed 64-bit int. A\r\n> conversion of a uint32 to an int64 can be injective, and so it should be,\r\n> meaning that (intptr)0xfffffade has zeros in its high bits. So\r\n> (uintptr)(intptr)0xfffffade == (uintptr)0xfffffade.\r\n>\r\n> Really this code should say (uintptr)(int32)0xfffffade, with the inner cast\r\n> forcing the high bit of the value to become a sign bit, which will in turn\r\n> cause the int32->uintptr conversion to sign extend as described.\r\n>\r\n> This code is even more sketchy because it is being used to initialize an\r\n> enum value. The standard is super vague about what the representation type\r\n> of an enum is, and compilers disagree. 6c uses the \"maximum\" type of the\r\n> initializers, which in this case ends up being uintptr. But that's not\r\n> something you really want to rely on (and it still doesn't lead to correct\r\n> behavior here).\r\n>\r\n> I included stack.h in runtime.c and added\r\n>\r\n> { uintptr p = StackPreempt;\r\n> if((p>>32) == 0) runtime\u00b7throw(\"StackPreempt -> uintptr is small\"); }\r\n>\r\n> to runtime.check. It fails.\r\n>\r\n> I can't see how the preemption check is working, except that maybe Dmitriy\r\n> is not really testing with this specific code.\r\n\r\n\r\nIt's not yet used, it's blocked on several other changes.\r\nMost likely it would be discovered later :)\r\n",
			"disapproval": false,
			"date": "2013-06-10 19:38:46.427630",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 10, 2013 at 12:29 PM, Russ Cox <rsc@golang.org> wrote:\r\n>\r\n> If we are on a 64-bit machine, then: 0xfffffade has type unsigned int,\r\n> meaning it is an unsigned 32-bit int, intptr is a signed 64-bit int. A\r\n> conversion of a uint32 to an int64 can be injective, and so it should be,\r\n> meaning that (intptr)0xfffffade has zeros in its high bits. So\r\n> (uintptr)(intptr)0xfffffade == (uintptr)0xfffffade.\r\n\r\nSorry about that.  I hope that was just a bad day.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-06-10 21:05:13.818050",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9843046: runtime: introduce preemption function (not used for now)",
	"created": "2013-05-30 10:08:53.246910",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		15001,
		7003,
		28001
	],
	"modified": "2013-06-10 21:05:14.044770",
	"closed": true,
	"issue": 9843046
}