{
	"description": "runtime: allocate maps' first bucket table lazily\n\nMotivated by garbage profiling in HTTP benchmarks. This\nchanges means new empty maps are just one small allocation\n(the HMap) instead the HMap + the relatively larger h->buckets\nallocation. This helps maps which remain empty throughout\ntheir life.\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkNewEmptyMap          196          107  -45.41%\n\nbenchmark              old allocs   new allocs    delta\nBenchmarkNewEmptyMap            2            1  -50.00%\n\nbenchmark               old bytes    new bytes    delta\nBenchmarkNewEmptyMap          195           50  -74.36%",
	"cc": [
		"khr@golang.org",
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [
		"mtj@google.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello khr@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-27 22:46:48.926440",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "why?\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:47:33.727870",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To make empty maps cheaper.\r\n\r\nI noticed this during garbage profiling of the HTTP server.  We make new\r\nmaps for handlers, and clone them, but they're not always used (e.g. not\r\nsetting any particular response headers).\r\n\r\nOn Wed, Mar 27, 2013 at 3:47 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> why?\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:53:45.056750",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-27 22:55:52.729720",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6efdf4f2924b ***\n\nruntime: allocate maps' first bucket table lazily\n\nMotivated by garbage profiling in HTTP benchmarks. This\nchanges means new empty maps are just one small allocation\n(the HMap) instead the HMap + the relatively larger h->buckets\nallocation. This helps maps which remain empty throughout\ntheir life.\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkNewEmptyMap          196          107  -45.41%\n\nbenchmark              old allocs   new allocs    delta\nBenchmarkNewEmptyMap            2            1  -50.00%\n\nbenchmark               old bytes    new bytes    delta\nBenchmarkNewEmptyMap          195           50  -74.36%\n\nR=khr, golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7722046",
			"disapproval": false,
			"date": "2013-03-27 23:28:56.541220",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad, I have a question about your analysis. Do you have any sense how\r\ncommonly Map updates have the general pattern:\r\n\r\nif a, present := map[index]; if present { // or !present\r\n    ....\r\n\r\n}\r\n\r\nIt seems that I'm doing this maybe half of the time\r\n\r\n\r\n\r\nOn Wed, Mar 27, 2013 at 4:28 PM, <bradfitz@golang.org> wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=6efdf4f2924b<https://code.google.com/p/go/source/detail?r=6efdf4f2924b>***\r\n>\r\n> runtime: allocate maps' first bucket table lazily\r\n>\r\n> Motivated by garbage profiling in HTTP benchmarks. This\r\n> changes means new empty maps are just one small allocation\r\n> (the HMap) instead the HMap + the relatively larger h->buckets\r\n> allocation. This helps maps which remain empty throughout\r\n> their life.\r\n>\r\n>\r\n> benchmark               old ns/op    new ns/op    delta\r\n> BenchmarkNewEmptyMap          196          107  -45.41%\r\n>\r\n> benchmark              old allocs   new allocs    delta\r\n> BenchmarkNewEmptyMap            2            1  -50.00%\r\n>\r\n> benchmark               old bytes    new bytes    delta\r\n> BenchmarkNewEmptyMap          195           50  -74.36%\r\n>\r\n> R=khr, golang-dev, r\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/7722046<https://codereview.appspot.com/7722046>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7722046/<https://codereview.appspot.com/7722046/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-28 14:17:44.624990",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "[...grrr...]\r\n\r\nif a, present := map[index]; if present { // or !present\r\n    ....\r\n    map[index] = newValue\r\n}\r\n\r\nIt seems that I'm doing this maybe half of the time and there is the\r\nopportunity to do just one key value computation in such cases. (with an\r\nappropriate way of saying so or caching the result and comparing keys.)\r\n\r\nJust wondering of your analysis shows this to be frequent.\r\n\r\n\r\nOn Thu, Mar 28, 2013 at 7:17 AM, Michael Jones <mtj@google.com> wrote:\r\n\r\n> Brad, I have a question about your analysis. Do you have any sense how\r\n> commonly Map updates have the general pattern:\r\n>\r\n> if a, present := map[index]; if present { // or !present\r\n>     ....\r\n>\r\n> }\r\n>\r\n> It seems that I'm doing this maybe half of the time\r\n>\r\n>\r\n>\r\n> On Wed, Mar 27, 2013 at 4:28 PM, <bradfitz@golang.org> wrote:\r\n>\r\n>> *** Submitted as\r\n>> https://code.google.com/p/go/**source/detail?r=6efdf4f2924b<https://code.google.com/p/go/source/detail?r=6efdf4f2924b>***\r\n>>\r\n>> runtime: allocate maps' first bucket table lazily\r\n>>\r\n>> Motivated by garbage profiling in HTTP benchmarks. This\r\n>> changes means new empty maps are just one small allocation\r\n>> (the HMap) instead the HMap + the relatively larger h->buckets\r\n>> allocation. This helps maps which remain empty throughout\r\n>> their life.\r\n>>\r\n>>\r\n>> benchmark               old ns/op    new ns/op    delta\r\n>> BenchmarkNewEmptyMap          196          107  -45.41%\r\n>>\r\n>> benchmark              old allocs   new allocs    delta\r\n>> BenchmarkNewEmptyMap            2            1  -50.00%\r\n>>\r\n>> benchmark               old bytes    new bytes    delta\r\n>> BenchmarkNewEmptyMap          195           50  -74.36%\r\n>>\r\n>> R=khr, golang-dev, r\r\n>> CC=golang-dev\r\n>> https://codereview.appspot.**com/7722046<https://codereview.appspot.com/7722046>\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/7722046/<https://codereview.appspot.com/7722046/>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>\r\n>\r\n>\r\n> --\r\n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n> 650-335-5765\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-28 14:20:18.609080",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 28, 2013 at 7:19 AM, Michael Jones <mtj@google.com> wrote:\r\n\r\n>\r\n> if a, present := map[index]; if present { // or !present\r\n>     ....\r\n>     map[index] = newValue\r\n> }\r\n>\r\n> It seems that I'm doing this maybe half of the time and there is the\r\n> opportunity to do just one key value computation in such cases. (with an\r\n> appropriate way of saying so or caching the result and comparing keys.)\r\n>\r\n> Just wondering of your analysis shows this to be frequent.\r\n>\r\n\r\nI didn't specifically look for that, but I agree that such a pattern is\r\ncommon.  I do that all the time as well.\r\n\r\nThat's an interesting optimization idea (not for Go 1.1).  It would likely\r\nenlarge Hmap, so it would really need to be worth it to justify that,\r\nthough.  The cost of caching the last key's hash value in Hmap could be\r\navoided in most cases since the pattern you describe above is known\r\nstatically.  The compiler could pass a hint to the runtime map functions\r\nwhen the pattern above is detected.  Actually, you probably wouldn't even\r\nneed to enlarge and put it in Hmap--- the cached hash value could be saved\r\nin the P.\r\n\r\nI've filed https://code.google.com/p/go/issues/detail?id=5147\r\n",
			"disapproval": false,
			"date": "2013-03-28 15:08:32.557470",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Cool, thanks. If we had this then such loops might be more than twice as\r\nfast--you'd know the hash value and could know the exact point to do the\r\ninsertion (when the bucket was not full). The second map call would largely\r\nbe a pointer copy and an index update.\r\n\r\n\r\nOn Thu, Mar 28, 2013 at 8:08 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> On Thu, Mar 28, 2013 at 7:19 AM, Michael Jones <mtj@google.com> wrote:\r\n>\r\n>>\r\n>> if a, present := map[index]; if present { // or !present\r\n>>     ....\r\n>>     map[index] = newValue\r\n>> }\r\n>>\r\n>> It seems that I'm doing this maybe half of the time and there is the\r\n>> opportunity to do just one key value computation in such cases. (with an\r\n>> appropriate way of saying so or caching the result and comparing keys.)\r\n>>\r\n>> Just wondering of your analysis shows this to be frequent.\r\n>>\r\n>\r\n> I didn't specifically look for that, but I agree that such a pattern is\r\n> common.  I do that all the time as well.\r\n>\r\n> That's an interesting optimization idea (not for Go 1.1).  It would likely\r\n> enlarge Hmap, so it would really need to be worth it to justify that,\r\n> though.  The cost of caching the last key's hash value in Hmap could be\r\n> avoided in most cases since the pattern you describe above is known\r\n> statically.  The compiler could pass a hint to the runtime map functions\r\n> when the pattern above is detected.  Actually, you probably wouldn't even\r\n> need to enlarge and put it in Hmap--- the cached hash value could be saved\r\n> in the P.\r\n>\r\n> I've filed https://code.google.com/p/go/issues/detail?id=5147\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-28 15:23:40.171220",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've prototyped this in https://codereview.appspot.com/8160043 if you want\r\nto play.  The patch isn't very clean yet.  I'm not proposing it for Go 1.1.\r\n\r\nOn Thu, Mar 28, 2013 at 8:23 AM, Michael Jones <mtj@google.com> wrote:\r\n\r\n> Cool, thanks. If we had this then such loops might be more than twice as\r\n> fast--you'd know the hash value and could know the exact point to do the\r\n> insertion (when the bucket was not full). The second map call would largely\r\n> be a pointer copy and an index update.\r\n>\r\n>\r\n> On Thu, Mar 28, 2013 at 8:08 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>\r\n>> On Thu, Mar 28, 2013 at 7:19 AM, Michael Jones <mtj@google.com> wrote:\r\n>>\r\n>>>\r\n>>> if a, present := map[index]; if present { // or !present\r\n>>>     ....\r\n>>>     map[index] = newValue\r\n>>> }\r\n>>>\r\n>>> It seems that I'm doing this maybe half of the time and there is the\r\n>>> opportunity to do just one key value computation in such cases. (with an\r\n>>> appropriate way of saying so or caching the result and comparing keys.)\r\n>>>\r\n>>> Just wondering of your analysis shows this to be frequent.\r\n>>>\r\n>>\r\n>> I didn't specifically look for that, but I agree that such a pattern is\r\n>> common.  I do that all the time as well.\r\n>>\r\n>> That's an interesting optimization idea (not for Go 1.1).  It would\r\n>> likely enlarge Hmap, so it would really need to be worth it to justify\r\n>> that, though.  The cost of caching the last key's hash value in Hmap could\r\n>> be avoided in most cases since the pattern you describe above is known\r\n>> statically.  The compiler could pass a hint to the runtime map functions\r\n>> when the pattern above is detected.  Actually, you probably wouldn't even\r\n>> need to enlarge and put it in Hmap--- the cached hash value could be saved\r\n>> in the P.\r\n>>\r\n>> I've filed https://code.google.com/p/go/issues/detail?id=5147\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n> 650-335-5765\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 17:10:58.917700",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7722046: runtime: allocate first bucket table lazily",
	"created": "2013-03-27 22:46:26.614460",
	"patchsets": [
		1,
		2001,
		1002,
		10001
	],
	"modified": "2013-03-28 18:14:17.018380",
	"closed": true,
	"issue": 7722046
}