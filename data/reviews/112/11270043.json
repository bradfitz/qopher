{
	"description": "go.text/encoding: new package that provides character set encodings.\n\nOnly IBM Code Page 437 and Windows 1252 encodings for now. Others will\ncome in follow-up CLs once the infrastructure's settled.",
	"cc": [
		"r@golang.org",
		"mpvl@golang.org",
		"andybalholm@gmail.com",
		"golang-dev@googlegroups.com",
		"rogpeppe@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode75\nencoding/charmap.go:75: synchronize bool\nMaybe explain very briefly why you are using synchronize?: bookkeeping for gobbling consecutive unexpected continuation bytes.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode94\nencoding/charmap.go:94: if z.synchronize {\nz.synchronize should also be set to false if nSrc == len(src) && atEOF. Perhaps check for this at the end of the block. If you then return, instead of break at ErrShortDst, this could be done with \t\n    z.synchronize = !atEOF && nSrc < len(src)\n\nI think this would also allow you to move this block into the size == 1 block below and out of the ASCII fast path.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go\nFile encoding/charmap_gen.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode10\nencoding/charmap_gen.go:10: //\tgo run charmap_gen.go |gofmt >charmap_table.go\nThe file names of all generation code in go.text start with make.  For table generation code, the file name is conventionally maketables.go and the generated tables are called tables.go.  Would be good to be consistent.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode55\nencoding/charmap_gen.go:55: fmt.Printf(\"// generated by go run gen.go; DO NOT EDIT\\n\\n\")\nIt is not called gen.go.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go\nFile encoding/encoding.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode23\nencoding/encoding.go:23: // specific replacement character such as '?' or '\\uFFFD'.\nIs this a spec thing? \n\nOn 2013/07/15 16:22:46, andybalholm wrote:\n> When decoding, shouldn't invalid input always result in \\uFFFD, since we're\n> going _to_ Unicode?\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode31\nencoding/encoding.go:31: // instead, prepend a UTF8Validator by using transform.NewChain.\nIt is currently called transform.Chain.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding_test.go\nFile encoding/encoding_test.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding_test.go#newcode244\nencoding/encoding_test.go:244: resetter.Reset()\nIf we remove the Reset interface, calling Transform(dst, nil, true) should be enough with the above changes.  More generally you could  you can copy and use the little reset function in transform_test.go.",
			"disapproval": false,
			"date": "2013-07-15 18:51:00.370070",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, mpvl@golang.org (cc: andybalholm@gmail.com, golang-dev@googlegroups.com, rogpeppe@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.text",
			"disapproval": false,
			"date": "2013-07-15 07:46:08.697970",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode52\nencoding/charmap.go:52: func (z charmapDecoder) Transform(dst, src []byte, atEOF bool) (nDst, nSrc int, err error) {\nThere could be a fast path for ASCII here, too. But maybe that should wait till later.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode60\nencoding/charmap.go:60: if decode[2] != 0 {\nWhy not if decode[0] > 1?\n\nIf the charmap contains inconsistent data, you could get a panic from an index being out of range this way. Of course, if the data is inconsistent, maybe you _should_ get a panic.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go\nFile encoding/charmap_gen.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode34\nencoding/charmap_gen.go:34: '?',\nI used ? in mahonia, but some sources recommend ^Z. It's supposed to have security advantages, I think. But I don't understand what they are.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go\nFile encoding/encoding.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode23\nencoding/encoding.go:23: // specific replacement character such as '?' or '\\uFFFD'.\nWhen decoding, shouldn't invalid input always result in \\uFFFD, since we're going _to_ Unicode?\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode30\nencoding/encoding.go:30: // character '\\uFFFD' prior to encoding. To return early with error\nIs this where the encoding-specific replacement character comes in?",
			"disapproval": false,
			"date": "2013-07-15 16:22:45.821650",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode13\nencoding/charmap.go:13: // charmap is a 8-bit character set encoding.\ncharmap describes an 8-bit character set encoding\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode17\nencoding/charmap.go:17: // ascii is whether the encoding is a superset of ASCII.\ns/is/states/\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode23\nencoding/charmap.go:23: // bytes in the UTF-8 representation that is the next N bytes.\ns/that is/stored in/\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode31\nencoding/charmap.go:31: // NewDecoder implements the Encoding interface.\nin isolation, this comment doesn't help much\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode36\nencoding/charmap.go:36: // NewEncoder implements the Encoding interface.\nditto\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode37\nencoding/charmap.go:37: func (z *charmap) NewEncoder() transform.Transformer {\nz?\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode51\nencoding/charmap.go:51: // Transform implements the transform.Transformer interface.\nditto\n\nremember that the user might not have package transformer internalized\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode94\nencoding/charmap.go:94: // Transform implements the transform.Transformer interface.\nditto\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go\nFile encoding/encoding.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode5\nencoding/encoding.go:5: // Package encoding provides character set encodings such as IBM Code Page 437\nPackage encoding provides mappings from simple character encodings, such as IBM Code Page 437 and Windows 1252, to and from UTF-8. Mappings for rare or large encodings are provided in other packages, such as code.google.com/p/go.text/encoding/shiftjis.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode21\nencoding/encoding.go:21: // Transforming source bytes that aren't of that encoding will not\ns/aren't/are not/\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode22\nencoding/encoding.go:22: // result in an error per se. They will be replaced by '\\uFFFD'.\ns/They.*/Each byte that cannot be transcoded will be represented in the output by the UTF-8 encoding of '\\uFFFD', the replacement rune.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode27\nencoding/encoding.go:27: // Transforming source bytes that aren't valid UTF-8 will not result in\ns/aren't/are not/\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode28\nencoding/encoding.go:28: // an error per se. They will be replaced by an encoding-specific\nas above\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode30\nencoding/encoding.go:30: // instead, prepend a UTF8Validator by using transform.Chain.\ns/prepend.*/use transform.Chain to preprocess the data with a UTF8Validator.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode38\nencoding/encoding.go:38: // input byte that is not valid UTF-8.\nadd an example_test that shows how to use this\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode46\nencoding/encoding.go:46: if i >= len(dst) {\nyou can move this if outside to avoid doing it every time. speeds up the fast path.\nthen you have a more complex, one-time test after the loop.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-utf-8.txt\nFile encoding/testdata/candide-utf-8.txt (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-utf-8.txt#newcode1\nencoding/testdata/candide-utf-8.txt:1: CANDIDE,\nprovenance\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-windows-1252.txt\nFile encoding/testdata/candide-windows-1252.txt (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-windows-1252.txt#newcode23\nencoding/testdata/candide-windows-1252.txt:23: Comment Candide fut \u00e9lev\u00e9 dans un beau ch\u00e2teau, et comment il fut\nare you sure these are in the correct encoding? codereview may be hiding that.",
			"disapproval": false,
			"date": "2013-07-16 07:07:34.621640",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode52\nencoding/charmap.go:52: func (z charmapDecoder) Transform(dst, src []byte, atEOF bool) (nDst, nSrc int, err error) {\nOn 2013/07/15 16:22:46, andybalholm wrote:\n> There could be a fast path for ASCII here, too. But maybe that should wait till\n> later.\n\nI put a fast path in.\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCharmapDecoder        63317        59511   -6.01%\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode60\nencoding/charmap.go:60: if decode[2] != 0 {\nOn 2013/07/15 16:22:46, andybalholm wrote:\n> Why not if decode[0] > 1?\n\nThey're equivalent, by construction, but this way could possibly be a little faster (although probably noise).\n\n\n> If the charmap contains inconsistent data, you could get a panic from an index\n> being out of range this way. Of course, if the data is inconsistent, maybe you\n> _should_ get a panic.\n\nThe charmaps are generated beforehand, if they're inconsistent then I think we should panic.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode75\nencoding/charmap.go:75: synchronize bool\nOn 2013/07/15 18:51:00, mpvl wrote:\n> Maybe explain very briefly why you are using synchronize?: bookkeeping for\n> gobbling consecutive unexpected continuation bytes.\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode94\nencoding/charmap.go:94: if z.synchronize {\nOn 2013/07/15 18:51:00, mpvl wrote:\n> z.synchronize should also be set to false if nSrc == len(src) && atEOF.\n\nI'm not sure about this. At the local level, it shouldn't make a difference since if nSrc == len(src) && atEOF then we're not expecting any more source bytes, so z.synchronize's value shouldn't matter.\n\nAt the global level, I think you're asking for an implicit reset, but as I've said elsewhere, I'm not convinced by implicit resets. For example, if we return ErrShortDst, we may or may not be called again on the same stream, so we can't tell if we're supposed to reset or not.\n\nI've added a TODO in the struct definition.\n\n\n> I think this would also allow you to move this block into the size == 1 block\n> below and out of the ASCII fast path.\n\nMoving the z.synchronize check out of the ASCII fast path helped:\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCharmapEncoder        83214        76644   -7.90%\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go\nFile encoding/charmap_gen.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode10\nencoding/charmap_gen.go:10: //\tgo run charmap_gen.go |gofmt >charmap_table.go\nOn 2013/07/15 18:51:00, mpvl wrote:\n> The file names of all generation code in go.text start with make.  For table\n> generation code, the file name is conventionally maketables.go and the generated\n> tables are called tables.go.  Would be good to be consistent.\n\nDone. The ones in go.net/{html/atom,publicsuffix} are called gen.go, but I'll use maketables.go.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode34\nencoding/charmap_gen.go:34: '?',\nOn 2013/07/15 16:22:46, andybalholm wrote:\n> I used ? in mahonia, but some sources recommend ^Z. It's supposed to have\n> security advantages, I think. But I don't understand what they are.\n\nDo you have a link? Otherwise, I'm happy to use '?' for now.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode55\nencoding/charmap_gen.go:55: fmt.Printf(\"// generated by go run gen.go; DO NOT EDIT\\n\\n\")\nOn 2013/07/15 18:51:00, mpvl wrote:\n> It is not called gen.go.\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go\nFile encoding/encoding.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode23\nencoding/encoding.go:23: // specific replacement character such as '?' or '\\uFFFD'.\nOn 2013/07/15 16:22:46, andybalholm wrote:\n> When decoding, shouldn't invalid input always result in \\uFFFD, since we're\n> going _to_ Unicode?\n\nOops, you're right.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode30\nencoding/encoding.go:30: // character '\\uFFFD' prior to encoding. To return early with error\nOn 2013/07/15 16:22:46, andybalholm wrote:\n> Is this where the encoding-specific replacement character comes in?\n\nOops, yes.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode31\nencoding/encoding.go:31: // instead, prepend a UTF8Validator by using transform.NewChain.\nOn 2013/07/15 18:51:00, mpvl wrote:\n> It is currently called transform.Chain.\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding_test.go\nFile encoding/encoding_test.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding_test.go#newcode244\nencoding/encoding_test.go:244: resetter.Reset()\nOn 2013/07/15 18:51:00, mpvl wrote:\n> If we remove the Reset interface, calling Transform(dst, nil, true) should be\n> enough with the above changes.  More generally you could  you can copy and use\n> the little reset function in transform_test.go.\n\nIt's a separate discussion, but I don't think that calling Transform(dst, nil, true) can imply resetting. The callee can't unconditionally reset its state; it may have buffers that need flushing. This call can return ErrShortDst, and it is up to the caller as to whether or not the transformer is done, since only the caller knows if it can find a bigger dst.\n\nSince we haven't settled on a Resetter API yet, I now create a new Transformer each time: passing Windows1252.NewDecoder without parens instead of passing Windows1252.NewDecoder() with parens.",
			"disapproval": false,
			"date": "2013-07-16 05:17:01.984910",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode13\nencoding/charmap.go:13: // charmap is a 8-bit character set encoding.\nOn 2013/07/16 07:07:35, r wrote:\n> charmap describes an 8-bit character set encoding\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode17\nencoding/charmap.go:17: // ascii is whether the encoding is a superset of ASCII.\nOn 2013/07/16 07:07:35, r wrote:\n> s/is/states/\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode23\nencoding/charmap.go:23: // bytes in the UTF-8 representation that is the next N bytes.\nOn 2013/07/16 07:07:35, r wrote:\n> s/that is/stored in/\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode31\nencoding/charmap.go:31: // NewDecoder implements the Encoding interface.\nOn 2013/07/16 07:07:35, r wrote:\n> in isolation, this comment doesn't help much\n\nOK, I've just deleted these comments. The charmap type isn't exported.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/charmap.go#newcode37\nencoding/charmap.go:37: func (z *charmap) NewEncoder() transform.Transformer {\nOn 2013/07/16 07:07:35, r wrote:\n> z?\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go\nFile encoding/encoding.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode5\nencoding/encoding.go:5: // Package encoding provides character set encodings such as IBM Code Page 437\nOn 2013/07/16 07:07:35, r wrote:\n> Package encoding provides mappings from simple character encodings, such as IBM\n> Code Page 437 and Windows 1252, to and from UTF-8. Mappings for rare or large\n> encodings are provided in other packages, such as\n> code.google.com/p/go.text/encoding/shiftjis.\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode21\nencoding/encoding.go:21: // Transforming source bytes that aren't of that encoding will not\nOn 2013/07/16 07:07:35, r wrote:\n> s/aren't/are not/\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode22\nencoding/encoding.go:22: // result in an error per se. They will be replaced by '\\uFFFD'.\nOn 2013/07/16 07:07:35, r wrote:\n> s/They.*/Each byte that cannot be transcoded will be represented in the output\n> by the UTF-8 encoding of '\\uFFFD', the replacement rune.\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode27\nencoding/encoding.go:27: // Transforming source bytes that aren't valid UTF-8 will not result in\nOn 2013/07/16 07:07:35, r wrote:\n> s/aren't/are not/\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode28\nencoding/encoding.go:28: // an error per se. They will be replaced by an encoding-specific\nOn 2013/07/16 07:07:35, r wrote:\n> as above\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode30\nencoding/encoding.go:30: // instead, prepend a UTF8Validator by using transform.Chain.\nOn 2013/07/16 07:07:35, r wrote:\n> s/prepend.*/use transform.Chain to preprocess the data with a UTF8Validator.\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode38\nencoding/encoding.go:38: // input byte that is not valid UTF-8.\nOn 2013/07/16 07:07:35, r wrote:\n> add an example_test that shows how to use this\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/encoding.go#newcode46\nencoding/encoding.go:46: if i >= len(dst) {\nOn 2013/07/16 07:07:35, r wrote:\n> you can move this if outside to avoid doing it every time. speeds up the fast\n> path.\n> then you have a more complex, one-time test after the loop.\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-utf-8.txt\nFile encoding/testdata/candide-utf-8.txt (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-utf-8.txt#newcode1\nencoding/testdata/candide-utf-8.txt:1: CANDIDE,\nOn 2013/07/16 07:07:35, r wrote:\n> provenance\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-windows-1252.txt\nFile encoding/testdata/candide-windows-1252.txt (right):\n\nhttps://codereview.appspot.com/11270043/diff/20001/encoding/testdata/candide-windows-1252.txt#newcode23\nencoding/testdata/candide-windows-1252.txt:23: Comment Candide fut \u00e9lev\u00e9 dans un beau ch\u00e2teau, et comment il fut\nOn 2013/07/16 07:07:35, r wrote:\n> are you sure these are in the correct encoding? codereview may be hiding that.\n\nYeah, it's definitely Windows 1252 on my machine. I suspect codereview is being too helpful.",
			"disapproval": false,
			"date": "2013-07-16 07:54:40.702440",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap.go#newcode94\nencoding/charmap.go:94: if z.synchronize {\nI know we may add a Reset.  Even so, it would leave the transformer in a predictable state when it completed, which seems like a nice property to have for this cheap check.   Either way, I'm fine with the TODO.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding_test.go\nFile encoding/encoding_test.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding_test.go#newcode244\nencoding/encoding_test.go:244: resetter.Reset()\nI realize it is not the same as Reset, but I believe it would be sufficient for this test.  In general one would have to do do a loop, indeed.  What you do now is also fine.\n\nhttps://codereview.appspot.com/11270043/diff/23002/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/23002/encoding/charmap.go#newcode140\nencoding/charmap.go:140: if m.charmap.ascii {\nYou could keep this value in the charmap and assign it.  Saves a branch.",
			"disapproval": false,
			"date": "2013-07-16 15:44:00.024220",
			"approval": true
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go\nFile encoding/charmap_gen.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode34\nencoding/charmap_gen.go:34: '?',\nOn 2013/07/16 05:17:02, nigeltao wrote:\n> On 2013/07/15 16:22:46, andybalholm wrote:\n> > I used ? in mahonia, but some sources recommend ^Z. It's supposed to have\n> > security advantages, I think. But I don't understand what they are.\n> \n> Do you have a link? Otherwise, I'm happy to use '?' for now.\n\nAt http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default:\n\nCode that converts unknown characters to ? is broken, stupid, braindead, and runs contrary to the standard recommendation, which says NOT TO DO THAT! RTFM for why not.\n\n(I wish he gave a link for his RTFM!)\n\nAt http://unicode.org/reports/tr36/#Text_Comparison:\n\nWhen converting charsets, never simply omit characters that cannot be converted; at least substitute U+FFFD (when converting to Unicode) or 0x1A (when converting to bytes) to reduce security problems. See also [UTS22].\n\nBut the previous section recommends '?':\nWhere U+FFFD is not available, a common alternative is \"?\". While this character may occur syntactically, it appears to be less subject to attack than most others.\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go\nFile encoding/encoding.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/encoding.go#newcode23\nencoding/encoding.go:23: // specific replacement character such as '?' or '\\uFFFD'.\nOn 2013/07/15 18:51:00, mpvl wrote:\n> Is this a spec thing? \n\nNo spec that I can think of; it just seems like the comments about replacement characters got swapped between NewDecoder and NewEncoder.",
			"disapproval": false,
			"date": "2013-07-16 15:50:56.109170",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go\nFile encoding/charmap_gen.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/6001/encoding/charmap_gen.go#newcode34\nencoding/charmap_gen.go:34: '?',\nOn 2013/07/16 15:50:56, andybalholm wrote:\n> At http://unicode.org/reports/tr36/#Text_Comparison:\n> \n> When converting charsets, never simply omit characters that cannot be converted;\n> at least substitute U+FFFD (when converting to Unicode) or 0x1A (when converting\n> to bytes) to reduce security problems.\n\nAh, I suppose when encoding a URL like\nhttp://example.com/foo\u4e2dbar\nconverting it to\nhttp://example.com/foo?bar\ncould be problematic. It's not like foo\\x1abar is great either, but \\x1a is probably safer. We'll go with that.\n\nhttps://codereview.appspot.com/11270043/diff/23002/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/23002/encoding/charmap.go#newcode140\nencoding/charmap.go:140: if m.charmap.ascii {\nOn 2013/07/16 15:44:00, mpvl wrote:\n> You could keep this value in the charmap and assign it.  Saves a branch. \n\nDone.",
			"disapproval": false,
			"date": "2013-07-17 06:21:10.189070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go#newcode18\nencoding/charmap.go:18: ascii bool\nmaybe it should be called asciiSuperset\n\nhttps://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go#newcode25\nencoding/charmap.go:25: // bytes long. The first byte N, either 1, 2 or 3, is the number of\nThe first byte, N, is either 1, 2 or 3 and specifies the number of bytes in the UTF-8 representation that follows.\n\nit would be the same storage and maybe a little cleaner to do\n\ndecode [256]utf\n\ntype utf struct {\n   uint8 len\n   [3]byte\n}",
			"disapproval": false,
			"date": "2013-07-17 06:49:44.779280",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "make that\r\n\r\ntype utf struct {\r\n  len uint8\r\n  data [3]byte\r\n}\r\n\r\ni'm being more productive lately by suggesting crappy code to slow down\r\nothers.\r\n\r\n\r\nOn Wed, Jul 17, 2013 at 4:49 PM, <r@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/11270043/diff/41001/**encoding/charmap.go<https://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go>\r\n> File encoding/charmap.go (right):\r\n>\r\n> https://codereview.appspot.**com/11270043/diff/41001/**\r\n> encoding/charmap.go#newcode18<https://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go#newcode18>\r\n> encoding/charmap.go:18: ascii bool\r\n> maybe it should be called asciiSuperset\r\n>\r\n> https://codereview.appspot.**com/11270043/diff/41001/**\r\n> encoding/charmap.go#newcode25<https://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go#newcode25>\r\n> encoding/charmap.go:25: // bytes long. The first byte N, either 1, 2 or\r\n> 3, is the number of\r\n> The first byte, N, is either 1, 2 or 3 and specifies the number of bytes\r\n> in the UTF-8 representation that follows.\r\n>\r\n> it would be the same storage and maybe a little cleaner to do\r\n>\r\n> decode [256]utf\r\n>\r\n> type utf struct {\r\n>    uint8 len\r\n>    [3]byte\r\n> }\r\n>\r\n> https://codereview.appspot.**com/11270043/<https://codereview.appspot.com/11270043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-17 06:54:54.502380",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go#newcode18\nencoding/charmap.go:18: ascii bool\nOn 2013/07/17 06:49:45, r wrote:\n> maybe it should be called asciiSuperset\n\nDone.\n\nhttps://codereview.appspot.com/11270043/diff/41001/encoding/charmap.go#newcode25\nencoding/charmap.go:25: // bytes long. The first byte N, either 1, 2 or 3, is the number of\nOn 2013/07/17 06:49:45, r wrote:\n> The first byte, N, is either 1, 2 or 3 and specifies the number of bytes in the\n> UTF-8 representation that follows.\n> \n> it would be the same storage and maybe a little cleaner to do\n> \n> decode [256]utf\n> \n> type utf struct {\n>    uint8 len\n>    [3]byte\n> }\n> \n\nDone.",
			"disapproval": false,
			"date": "2013-07-17 07:10:02.542050",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-07-17 15:06:32.493320",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/47001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/47001/encoding/charmap.go#newcode73\nencoding/charmap.go:73: dst[nDst+0] = decode.data[0]\nlet's just loop from 0 to decode.len. otherwise why have it? you could even just use copy\n\nif copy(dst[nDst:], decode.data[:decode.len]) != decode.len {\n   err = transform.ErrshortDst\n   break\n}",
			"disapproval": false,
			"date": "2013-07-18 03:00:39.271630",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11270043/diff/47001/encoding/charmap.go\nFile encoding/charmap.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/47001/encoding/charmap.go#newcode73\nencoding/charmap.go:73: dst[nDst+0] = decode.data[0]\nOn 2013/07/18 03:00:39, r wrote:\n> let's just loop from 0 to decode.len. otherwise why have it? you could even just\n> use copy\n> \n> if copy(dst[nDst:], decode.data[:decode.len]) != decode.len {\n>    err = transform.ErrshortDst\n>    break\n> }\n> \n> \n\nDone.",
			"disapproval": false,
			"date": "2013-07-18 03:14:01.305070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11270043/diff/54001/encoding/example_test.go\nFile encoding/example_test.go (right):\n\nhttps://codereview.appspot.com/11270043/diff/54001/encoding/example_test.go#newcode28\nencoding/example_test.go:28: transformer = transform.Chain(encoding.UTF8Validator, transformer)\ncomment out this example for now",
			"disapproval": false,
			"date": "2013-07-18 04:08:03.724290",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"mpvl@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4d356e5c87fb&repo=text ***\n\ngo.text/encoding: new package that provides character set encodings.\n\nOnly IBM Code Page 437 and Windows 1252 encodings for now. Others will\ncome in follow-up CLs once the infrastructure's settled.\n\nR=r, mpvl, andybalholm\nCC=golang-dev, rogpeppe\nhttps://codereview.appspot.com/11270043",
			"disapproval": false,
			"date": "2013-07-18 04:24:43.420820",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 11270043: go.text/encoding: new package that provides character s...",
	"created": "2013-07-15 07:45:16.004320",
	"patchsets": [
		1,
		3001,
		6001,
		16001,
		18008,
		20001,
		23002,
		41001,
		47001,
		54001,
		60001
	],
	"modified": "2013-07-18 04:24:47.410730",
	"closed": true,
	"issue": 11270043
}