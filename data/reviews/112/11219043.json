{
	"description": "cmd/go, testing: streamline direct use of test binaries\n\nBefore:\n\n        $ go test -c -cover fmt\n        $ ./fmt.test -test.covermode=set\n        PASS\n        coverage: 65.1% of statements in strconv\n        $\n\nAfter:\n\n        $ go test -c -cover fmt\n        $ ./fmt.test\n        PASS\n        coverage: 65.1% of statements in strconv\n        $\n\nIn addition to being cumbersome, the old flag didn't make sense:\nthe cover mode cannot be changed after the binary has been built.\n\nAnother useful effect of this CL is that if you happen to do\n\n        $ go test -c -covermode=atomic fmt\n\nand then forget you did that and run benchmarks,\nthe final line of the output (the coverage summary) reminds you\nthat you are benchmarking with coverage enabled, which might\nnot be what you want.\n\n        $ ./fmt.test -test.bench .\n        PASS\n        BenchmarkSprintfEmpty\t10000000\t       217 ns/op\n        BenchmarkSprintfString\t 2000000\t       755 ns/op\n        BenchmarkSprintfInt\t 2000000\t       774 ns/op\n        BenchmarkSprintfIntInt\t 1000000\t      1363 ns/op\n        BenchmarkSprintfPrefixedInt\t 1000000\t      1501 ns/op\n        BenchmarkSprintfFloat\t 1000000\t      1257 ns/op\n        BenchmarkManyArgs\t  500000\t      5346 ns/op\n        BenchmarkScanInts\t    1000\t   2562402 ns/op\n        BenchmarkScanRecursiveInt\t     500\t   3189457 ns/op\n        coverage: 91.4% of statements\n        $\n\nAs part of passing the new mode setting in via _testmain.go, merge\nthe two registration mechanisms into one extensible mechanism\n(a struct).",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-12 16:00:38.877120",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11219043/diff/3001/src/cmd/go/test.go\nFile src/cmd/go/test.go (right):\n\nhttps://codereview.appspot.com/11219043/diff/3001/src/cmd/go/test.go#newcode142\nsrc/cmd/go/test.go:142: Implies -cover.\nwhile you're here, please change these \"Implies -cover\" to \"Sets -cover\"\n\nhttps://codereview.appspot.com/11219043/diff/3001/src/pkg/testing/cover.go\nFile src/pkg/testing/cover.go (right):\n\nhttps://codereview.appspot.com/11219043/diff/3001/src/pkg/testing/cover.go#newcode25\nsrc/pkg/testing/cover.go:25: var cover CoverSettings\ns/CoverSettings/Cover/\n\nbesides the fact most of the fields aren't settings, it reads better.",
			"disapproval": false,
			"date": "2013-07-12 23:22:10.741480",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=074696c98950 ***\n\ncmd/go, testing: streamline direct use of test binaries\n\nBefore:\n\n        $ go test -c -cover fmt\n        $ ./fmt.test -test.covermode=set\n        PASS\n        coverage: 65.1% of statements in strconv\n        $\n\nAfter:\n\n        $ go test -c -cover fmt\n        $ ./fmt.test\n        PASS\n        coverage: 65.1% of statements in strconv\n        $\n\nIn addition to being cumbersome, the old flag didn't make sense:\nthe cover mode cannot be changed after the binary has been built.\n\nAnother useful effect of this CL is that if you happen to do\n\n        $ go test -c -covermode=atomic fmt\n\nand then forget you did that and run benchmarks,\nthe final line of the output (the coverage summary) reminds you\nthat you are benchmarking with coverage enabled, which might\nnot be what you want.\n\n        $ ./fmt.test -test.bench .\n        PASS\n        BenchmarkSprintfEmpty\t10000000\t       217 ns/op\n        BenchmarkSprintfString\t 2000000\t       755 ns/op\n        BenchmarkSprintfInt\t 2000000\t       774 ns/op\n        BenchmarkSprintfIntInt\t 1000000\t      1363 ns/op\n        BenchmarkSprintfPrefixedInt\t 1000000\t      1501 ns/op\n        BenchmarkSprintfFloat\t 1000000\t      1257 ns/op\n        BenchmarkManyArgs\t  500000\t      5346 ns/op\n        BenchmarkScanInts\t    1000\t   2562402 ns/op\n        BenchmarkScanRecursiveInt\t     500\t   3189457 ns/op\n        coverage: 91.4% of statements\n        $\n\nAs part of passing the new mode setting in via _testmain.go, merge\nthe two registration mechanisms into one extensible mechanism\n(a struct).\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/11219043",
			"disapproval": false,
			"date": "2013-07-13 00:40:33.812060",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 11219043: cmd/go, testing: streamline direct use of test binaries",
	"created": "2013-07-12 15:59:04.307460",
	"patchsets": [
		1,
		3001,
		10001
	],
	"modified": "2013-07-13 00:40:36.638030",
	"closed": true,
	"issue": 11219043
}