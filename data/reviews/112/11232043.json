{
	"description": "go.tools/go/types: cleanups\n\nObjects:\n- provide IsExported, SameName, uniqueName methods\n- clean up a lot of dependent code\n\nScopes:\n- don't add children to Universe scope (!)\n- document Node, WriteTo\n\nTypes:\n- remove Deref in favor of internal function deref\n\nssa, ssa/interp:\n- introduced local deref, adjusted code\n- fixed some \"Underlying\" bugs (pun intended)",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-13 01:01:20.671490",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nNIce cleanups.\n\nhttps://codereview.appspot.com/11232043/diff/12001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/go/types/objects.go#newcode28\ngo/types/objects.go:28: IsExported() bool // reports whether the name starts with a capital letter\nDoes this warrant being in the interface?  It can be derived from Name().\n\nhttps://codereview.appspot.com/11232043/diff/12001/go/types/scope.go\nFile go/types/scope.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/go/types/scope.go#newcode47\ngo/types/scope.go:47: // which may be one of the following:\nThanks.\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/builder.go#newcode1739\nssa/builder.go:1739: if arr, ok := deref(x.Type()).Underlying().(*types.Array); ok {\nThanks for fixing.\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/interp/interp.go\nFile ssa/interp/interp.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/interp/interp.go#newcode627\nssa/interp/interp.go:627: // typ. However, the code as is works fine. Which one is correct?\nThe one with Underlying() is correct per its previous spec.\nJust because the tests don't break doesn't mean it's safe. :)\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/util.go\nFile ssa/util.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/util.go#newcode61\nssa/util.go:61: // typ. However, the code as is works fine. Which one is correct?\nPlease add Underlying back.",
			"disapproval": false,
			"date": "2013-07-13 01:17:56.252210",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11232043/diff/12001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/go/types/objects.go#newcode28\ngo/types/objects.go:28: IsExported() bool // reports whether the name starts with a capital letter\nOn 2013/07/13 01:17:56, adonovan wrote:\n> Does this warrant being in the interface?  It can be derived from Name().\n\nYes, I was wondering about that. But it's a pretty central object property.\n\nAlso, this is probably functionality one would want as a client: Say given a package returned from Check, the returned pkg's scope directly describes which objects are exported and which not.\n\nAlso, the numbers of ast.IsExported() calls all over the place convinced me to keep it.\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/interp/interp.go\nFile ssa/interp/interp.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/interp/interp.go#newcode627\nssa/interp/interp.go:627: // typ. However, the code as is works fine. Which one is correct?\nOn 2013/07/13 01:17:56, adonovan wrote:\n> The one with Underlying() is correct per its previous spec.\n> Just because the tests don't break doesn't mean it's safe. :)\n\nI'll put it back but I repeat that in go/types there was only one place where calling Underlying() first was correct, all other places were subtly incorrect.\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/util.go\nFile ssa/util.go (right):\n\nhttps://codereview.appspot.com/11232043/diff/12001/ssa/util.go#newcode61\nssa/util.go:61: // typ. However, the code as is works fine. Which one is correct?\nOn 2013/07/13 01:17:56, adonovan wrote:\n> Please add Underlying back.\n\nDone.",
			"disapproval": false,
			"date": "2013-07-13 03:50:54.252490",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=14c833355869&repo=tools ***\n\ngo.tools/go/types: cleanups\n\nObjects:\n- provide IsExported, SameName, uniqueName methods\n- clean up a lot of dependent code\n\nScopes:\n- don't add children to Universe scope (!)\n- document Node, WriteTo\n\nTypes:\n- remove Deref in favor of internal function deref\n\nssa, ssa/interp:\n- introduced local deref, adjusted code\n- fixed some \"Underlying\" bugs (pun intended)\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/11232043",
			"disapproval": false,
			"date": "2013-07-13 04:10:23.974110",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11232043: go.tools/go/types: cleanups",
	"created": "2013-07-13 00:20:55.779740",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		12001,
		22001
	],
	"modified": "2013-07-13 04:10:25.851180",
	"closed": true,
	"issue": 11232043
}