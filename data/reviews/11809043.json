{
	"description": "net: make protocol-specific WriteTo, WriteMsg methods return error instead of crash",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org",
		"adg@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-25 03:43:10.084810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/25 03:43:10, mikio wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nThe changes to the test look fine. I am not sure that there is a string precedent for check if arguments passed to pkg/net methods are non nil. How did this come up, is there a compelling reason for protecting the caller who carelessly passed a nil addr to these methods ?\n\nAlso, please fix the typo in the issue title.",
			"disapproval": false,
			"date": "2013-07-25 11:07:53.855280",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jul 25, 2013 at 8:07 PM,  <dave@cheney.net> wrote:\r\n\r\n> How did this come up, is there a compelling reason for protecting the\r\n> caller who carelessly passed a nil addr to these methods ?\r\n\r\nDial rejects nil address for its target, destination address (and\r\nnever crashes).\r\nWhat's the difference btw Dial and WriteTo?\r\n\r\n> Also, please fix the typo in the issue title.\r\n\r\nThanks.\r\n",
			"disapproval": false,
			"date": "2013-07-25 14:54:32.797360",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+cc adg/rsc\n\nIf you're talking about DialTCP, then I see your reasoning. I think this is a reasonable improvement to the current behavior, but I would like to hear from adg or rsc for confirmation.",
			"disapproval": false,
			"date": "2013-07-26 03:38:24.746910",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-07-31 03:33:03.561380",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=r\r\n\r\nIf you squint right, this looks like an API change.  Where we once paniced,\r\nwe now return an error.\r\n\r\nI don't care either way, though.  I doubt it matters.\r\n\r\n\r\n\r\nOn Wed, Jul 24, 2013 at 8:43 PM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: make protocol-specific WriteTo, WriteMsg methods return error\r\n> instaed of crash\r\n>\r\n> Please review this at https://codereview.appspot.**com/11809043/<https://codereview.appspot.com/11809043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/iprawsock_posix.go\r\n>   M src/pkg/net/protoconn_test.go\r\n>   M src/pkg/net/udpsock_plan9.go\r\n>   src/pkg/net/udpsock_posix.go\r\n>   M src/pkg/net/unixsock_posix.go\r\n>\r\n>\r\n> Index: src/pkg/net/iprawsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/iprawsock_posix.**go\r\n> +++ b/src/pkg/net/iprawsock_posix.**go\r\n> @@ -125,6 +125,9 @@\r\n>         if !c.ok() {\r\n>                 return 0, syscall.EINVAL\r\n>         }\r\n> +       if addr == nil {\r\n> +               return 0, &OpError{Op: \"write\", Net: c.fd.net, Addr: nil,\r\n> Err: errMissingAddress}\r\n> +       }\r\n>         sa, err := addr.sockaddr(c.fd.family)\r\n>         if err != nil {\r\n>                 return 0, &OpError{\"write\", c.fd.net, addr, err}\r\n> @@ -151,6 +154,9 @@\r\n>         if !c.ok() {\r\n>                 return 0, 0, syscall.EINVAL\r\n>         }\r\n> +       if addr == nil {\r\n> +               return 0, 0, &OpError{Op: \"write\", Net: c.fd.net, Addr:\r\n> nil, Err: errMissingAddress}\r\n> +       }\r\n>         sa, err := addr.sockaddr(c.fd.family)\r\n>         if err != nil {\r\n>                 return 0, 0, &OpError{\"write\", c.fd.net, addr, err}\r\n> Index: src/pkg/net/protoconn_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/protoconn_test.**go\r\n> +++ b/src/pkg/net/protoconn_test.**go\r\n> @@ -160,6 +160,15 @@\r\n>         } else {\r\n>                 f.Close()\r\n>         }\r\n> +\r\n> +       defer func() {\r\n> +               if p := recover(); p != nil {\r\n> +                       t.Fatalf(\"UDPConn.WriteToUDP or WriteMsgUDP\r\n> panicked: %v\", p)\r\n> +               }\r\n> +       }()\r\n> +\r\n> +       c.WriteToUDP(wb, nil)\r\n> +       c.WriteMsgUDP(wb, nil, nil)\r\n>  }\r\n>\r\n>  func TestIPConnSpecificMethods(t *testing.T) {\r\n> @@ -217,6 +226,15 @@\r\n>         } else {\r\n>                 f.Close()\r\n>         }\r\n> +\r\n> +       defer func() {\r\n> +               if p := recover(); p != nil {\r\n> +                       t.Fatalf(\"IPConn.WriteToIP or WriteMsgIP panicked:\r\n> %v\", p)\r\n> +               }\r\n> +       }()\r\n> +\r\n> +       c.WriteToIP(wb, nil)\r\n> +       c.WriteMsgIP(wb, nil, nil)\r\n>  }\r\n>\r\n>  func TestUnixListenerSpecificMethod**s(t *testing.T) {\r\n> @@ -357,4 +375,15 @@\r\n>         } else {\r\n>                 f.Close()\r\n>         }\r\n> +\r\n> +       defer func() {\r\n> +               if p := recover(); p != nil {\r\n> +                       t.Fatalf(\"UnixConn.WriteToUnix or WriteMsgUnix\r\n> panicked: %v\", p)\r\n> +               }\r\n> +       }()\r\n> +\r\n> +       c1.WriteToUnix(wb, nil)\r\n> +       c1.WriteMsgUnix(wb, nil, nil)\r\n> +       c3.WriteToUnix(wb, nil)\r\n> +       c3.WriteMsgUnix(wb, nil, nil)\r\n>  }\r\n> Index: src/pkg/net/udpsock_plan9.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/udpsock_plan9.go\r\n> +++ b/src/pkg/net/udpsock_plan9.go\r\n> @@ -73,6 +73,9 @@\r\n>         if !c.ok() || c.fd.data == nil {\r\n>                 return 0, syscall.EINVAL\r\n>         }\r\n> +       if addr == nil {\r\n> +               return 0, &OpError{Op: \"write\", Net: c.fd.dir, Addr: nil,\r\n> errMissingAddress}\r\n> +       }\r\n>         h := new(udpHeader)\r\n>         h.raddr = addr.IP.To16()\r\n>         h.laddr = c.fd.laddr.(*UDPAddr).IP.To16(**)\r\n> Index: src/pkg/net/udpsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/udpsock_posix.go\r\n> +++ b/src/pkg/net/udpsock_posix.go\r\n> @@ -121,6 +121,9 @@\r\n>         if c.fd.isConnected {\r\n>                 return 0, &OpError{\"write\", c.fd.net, addr,\r\n> ErrWriteToConnected}\r\n>         }\r\n> +       if addr == nil {\r\n> +               return 0, &OpError{Op: \"write\", Net: c.fd.net, Addr: nil,\r\n> Err: errMissingAddress}\r\n> +       }\r\n>         sa, err := addr.sockaddr(c.fd.family)\r\n>         if err != nil {\r\n>                 return 0, &OpError{\"write\", c.fd.net, addr, err}\r\n> @@ -150,6 +153,9 @@\r\n>         if c.fd.isConnected {\r\n>                 return 0, 0, &OpError{\"write\", c.fd.net, addr,\r\n> ErrWriteToConnected}\r\n>         }\r\n> +       if addr == nil {\r\n> +               return 0, 0, &OpError{Op: \"write\", Net: c.fd.net, Addr:\r\n> nil, Err: errMissingAddress}\r\n> +       }\r\n>         sa, err := addr.sockaddr(c.fd.family)\r\n>         if err != nil {\r\n>                 return 0, 0, &OpError{\"write\", c.fd.net, addr, err}\r\n> Index: src/pkg/net/unixsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/unixsock_posix.**go\r\n> +++ b/src/pkg/net/unixsock_posix.**go\r\n> @@ -172,7 +172,9 @@\r\n>         if !c.ok() {\r\n>                 return 0, syscall.EINVAL\r\n>         }\r\n> -       if addr.Net != sotypeToNet(c.fd.sotype) {\r\n> +       if addr == nil {\r\n> +               return 0, &OpError{Op: \"write\", Net: c.fd.net, Addr: nil,\r\n> Err: errMissingAddress}\r\n> +       } else if addr.Net != sotypeToNet(c.fd.sotype) {\r\n>                 return 0, syscall.EAFNOSUPPORT\r\n>         }\r\n>         sa := &syscall.SockaddrUnix{Name: addr.Name}\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-01 21:27:27.670680",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-08-12 21:55:07.779220",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11809043/diff/13001/src/pkg/net/unixsock_posix.go\nFile src/pkg/net/unixsock_posix.go (right):\n\nhttps://codereview.appspot.com/11809043/diff/13001/src/pkg/net/unixsock_posix.go#newcode177\nsrc/pkg/net/unixsock_posix.go:177: } else if addr.Net != sotypeToNet(c.fd.sotype) {\nno else after body that returns or goto's etc\n\nif addr == nil {\n   return ...\n}\nif addr.Net != ...",
			"disapproval": false,
			"date": "2013-08-13 20:19:04.501200",
			"approval": true
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 11809043: net: make protocol-specific WriteTo, WriteMsg methods r...",
	"created": "2013-07-25 03:32:38.358980",
	"patchsets": [
		1,
		3001,
		8001,
		13001
	],
	"modified": "2013-08-13 20:19:05.136230",
	"closed": false,
	"issue": 11809043
}