{
	"description": "gc: do not use vlong in switch expressions\n\nThis fails when using 8c on Plan 9 since\nswitch expressions must be no larger than\nthe machine's word size.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"lucio.dere@gmail.com",
		"rsc@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 13, 2011, at 12:16 PM, Russ Cox wrote:\n\n> How about fixing the Plan 9 C compiler instead?\n> Try http://codereview.appspot.com/5485063\n\nYes, do that. It's standard C.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-13 20:33:39.873874",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I'm curious to know whether I'm being careless or Anthony is being too cautious (just for future reference).\n\nLucio.\n\nhttp://codereview.appspot.com/5486049/diff/3001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/5486049/diff/3001/src/cmd/gc/reflect.c#newcode977\nsrc/cmd/gc/reflect.c:977: if(t->width <= 16) {\nI don't think it's necessary to go to this extreme.  Merely casting to int suffices, any much bigger value will be caught by the default rule.  Later, there is no default rule and no action outside of the given sizes is required.  My recommendation is simply to cast these, not to check them asy more carefully.\n\nhttp://codereview.appspot.com/5486049/diff/3001/src/cmd/gc/subr.c\nFile src/cmd/gc/subr.c (right):\n\nhttp://codereview.appspot.com/5486049/diff/3001/src/cmd/gc/subr.c#newcode2647\nsrc/cmd/gc/subr.c:2647: if(size <= 16) {\nOverkill, as I explained earlier.",
			"disapproval": false,
			"date": "2011-12-13 14:13:54.195727",
			"approval": true
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lucio.dere@gmail.com once said:\n> http://codereview.appspot.com/5486049/diff/3001/src/cmd/gc/reflect.c#newcode977\n> src/cmd/gc/reflect.c:977: if(t->width <= 16) {\n> I don't think it's necessary to go to this extreme.  Merely casting to\n> int suffices, any much bigger value will be caught by the default rule.\n> Later, there is no default rule and no action outside of the given sizes\n> is required.  My recommendation is simply to cast these, not to check\n> them asy more carefully.\n\nNot true.  What happens when you cast the\nvlong 0x0000000100000010 (4294967312) to\nan int?  It becomes 0x10\n\nSure you would need an enormous struct or\narray to hit this (at least 2^32+16 bytes)\nbut I'd rather be on the safe side.\n\nhttp://codereview.appspot.com/5486049/\n",
			"disapproval": false,
			"date": "2011-12-13 14:24:20.440195",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-14 06:45:50.988736",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lucio.dere@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2011-12-13 13:51:49.414986",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought I was the most pedantic person I knew :-)\n\nThing is, and Russ can arbitrate, these are connected to comparisons\nbetween complicated data objects.  If these objects are 4GiB or\ngreater, comparisons make little sense and I would vote in favour of a\nbit of speed rather than cater for extreme behaviour.\n\nStill, I appreciate your caution.\n\nLucio.\n\nOn 12/13/11, Anthony Martin <ality@pbrane.org> wrote:\n> lucio.dere@gmail.com once said:\n>> http://codereview.appspot.com/5486049/diff/3001/src/cmd/gc/reflect.c#newcode977\n>> src/cmd/gc/reflect.c:977: if(t->width <= 16) {\n>> I don't think it's necessary to go to this extreme.  Merely casting to\n>> int suffices, any much bigger value will be caught by the default rule.\n>> Later, there is no default rule and no action outside of the given sizes\n>> is required.  My recommendation is simply to cast these, not to check\n>> them asy more carefully.\n>\n> Not true.  What happens when you cast the\n> vlong 0x0000000100000010 (4294967312) to\n> an int?  It becomes 0x10\n>\n> Sure you would need an enormous struct or\n> array to hit this (at least 2^32+16 bytes)\n> but I'd rather be on the safe side.\n>\n> http://codereview.appspot.com/5486049/\n>\n",
			"disapproval": false,
			"date": "2011-12-13 14:31:16.893017",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lucio.dere@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-13 15:05:48.394944",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How about fixing the Plan 9 C compiler instead?\nTry http://codereview.appspot.com/5485063\n",
			"disapproval": false,
			"date": "2011-12-13 20:16:15.500544",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 5486049: gc: do not use vlong in switch expressions",
	"created": "2011-12-13 13:51:25.847879",
	"patchsets": [
		1,
		2001,
		3001,
		5002
	],
	"modified": "2011-12-14 06:45:52.565174",
	"closed": true,
	"issue": 5486049
}