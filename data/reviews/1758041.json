{
	"description": "io/ioutil: add CopyFile",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-07-08 09:52:00.796458",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1758041/diff/2001/3001\nFile src/pkg/io/ioutil/ioutil.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/2001/3001#newcode50\nsrc/pkg/io/ioutil/ioutil.go:50: func CopyFile(fromFile, toFile string) os.Error {\ns/fromFile/inFilename/\ns/toFile/outFilename/\n\nhttp://codereview.appspot.com/1758041/diff/2001/3001#newcode58\nsrc/pkg/io/ioutil/ioutil.go:58: fOut, err := os.Open(toFile, os.O_WRONLY|os.O_TRUNC|os.O_CREAT, int(stat.Mode))\ns/fOut/out/\n\nhttp://codereview.appspot.com/1758041/diff/2001/3001#newcode61\nsrc/pkg/io/ioutil/ioutil.go:61: }\nAfter each Open, put the Close in a defer. Eg, here:\ndefer out.Close()\n\nhttp://codereview.appspot.com/1758041/diff/2001/3001#newcode64\nsrc/pkg/io/ioutil/ioutil.go:64: fIn, err := os.Open(fromFile, os.O_RDONLY, 0)\ns/fIn/in/\n\nhttp://codereview.appspot.com/1758041/diff/2001/3001#newcode70\nsrc/pkg/io/ioutil/ioutil.go:70: _, err = io.Copy(fOut, fIn)\nI wonder if it's worth returning the number of bytes written.\n\nhttp://codereview.appspot.com/1758041/diff/2001/3001#newcode76\nsrc/pkg/io/ioutil/ioutil.go:76: err = fIn.Close()\nUse the defer blocks instead. The error return value of a Close is irrelevant.\n\nhttp://codereview.appspot.com/1758041/diff/2001/3001#newcode88\nsrc/pkg/io/ioutil/ioutil.go:88: stat, err = os.Stat(fromFile)\nWhy perform Stat twice?",
			"disapproval": false,
			"date": "2010-07-08 10:38:49.611335",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\n> While I think this function is a great addition, I'm not convinced\n> that it shouldn't be in os. Here's why:\n> 1) I'd expect it to be in os if I didn't know where it was.\n>    \nThis I would agree with completely.  I might also expect it to be called \nCopy(), but would that be too close to io.Copy and cause confusion?\n> It's already established that syscall is going to be different on\n> different OSes, so it's okay if not all of them have file copying\n> system calls. The os package can have different implementations for\n> different OSes, as it does with many other functions. It just needs a\n> consistent interface.\n>\n> On Windows, you can use the CopyFile Windows API function. Darwin has\n> copyfile. Linux can use mmap, though I'm not positive this will be\n> better than read/write.\n>    \nUnfortunately, my darwin box is currently unavailable for development, \nand I don't have any live windows installs at present.  If the consensus \nis that it should be in os, should I put it in os and let darwin/windows \ndevelopers add in the appropriate hooks?\n\n~Kyle\n",
			"disapproval": false,
			"date": "2010-07-09 04:24:37.190816",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Jul 8, 2010 at 4:52 AM,  <etherealflaim@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change.\n>\n>\n> Description:\n> Added CopyFile(from, to string) os.Error\n>\n> This can't really be in syscall because some $GOOS don't support\n> SYS_COPYFILE or similar, and\n> this can't really be in os because the code for it isn't using anything\n> OS dependent. \u00a0It seems\n> similar enough to things like ReadFile and WriteFile that I think\n> ioutil.CopyFile is appropriate.\n>\n> Please review this at http://codereview.appspot.com/1758041/show\n>\n> Affected files:\n> \u00a0M src/pkg/io/ioutil/ioutil.go\n> \u00a0M src/pkg/io/ioutil/ioutil_test.go\n>\n>\n>\n\nWhile I think this function is a great addition, I'm not convinced\nthat it shouldn't be in os. Here's why:\n1) I'd expect it to be in os if I didn't know where it was.\n2) Most (if not all) OSes provide a way of copying one file to another\nthat is probably more efficient than this method. If they don't, they\ncan fall back to the read/write syscalls.\n\nIt's already established that syscall is going to be different on\ndifferent OSes, so it's okay if not all of them have file copying\nsystem calls. The os package can have different implementations for\ndifferent OSes, as it does with many other functions. It just needs a\nconsistent interface.\n\nOn Windows, you can use the CopyFile Windows API function. Darwin has\ncopyfile. Linux can use mmap, though I'm not positive this will be\nbetter than read/write.\n\n- Evan\n",
			"disapproval": false,
			"date": "2010-07-08 15:16:56.432740",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "this seemingly trivial operation is actually pretty complex. doing it right will require operating-system dependent code.  there will also be pressure to enhance it or add variants with features to maintain permissions, control the open bits, and so on.\n\ni therefore vote against having this in the standard library. its existence presumes thoroughness, correctness, and portability we cannot provide.",
			"disapproval": false,
			"date": "2010-07-12 19:35:42.942322",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-09 04:45:00.122445",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> i'm pretty scared by all the suggestions about mmap\n> and Windows CopyFile API and sys_copyfile and such.\nI would personally agree...  And this is one reason why I chose to put it in ioutil instead of os.  If I saw an os.Copy, I would assume that that copy operation was suited to my os, whereas if I see ioutil,CopyFile, I would be more likely to assume it's simply a helper and not necessarily an optimal or even marginal solution, simply a convenient one.\n\n> i agree that the really complex one doesn't belong here.\n> given that we already have ReadFile and WriteFile though,\n> i think a CopyFile that just did copyingno messing with\n> mtimes or permissions or special system calls or atomic\n> rename or anything else - would be okay\nSo, strip out the mtime and permission copies?  That probably makes sense; the os functions are there if the caller wants to make those changes as well.\n\n> but only if it stays that way.  i can't tel whether it would.\nI think the community thus far has, by and large, remained pretty diligent on the simplicity front, so I am not too worried about that.  As long as the people who review code and those who can commit it are committed to keeping the language lean have that goal in mind, I think we're good.\n\nThat's also why I won't feel heartbroken if this CL is rejected... while it might simplify some people's code, it doesn't simplify the language, and we all know that perfection is when there is nothing left to remove ;).\n~Kyle",
			"disapproval": false,
			"date": "2010-07-13 04:18:02.268762",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1758041/diff/13001/14001\nFile src/pkg/io/ioutil/ioutil.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/13001/14001#newcode50\nsrc/pkg/io/ioutil/ioutil.go:50: func CopyFile(inFilename, outFilename string) (numbytes int64, err os.Error) {\ns/numbytes/written/\n\nhttp://codereview.appspot.com/1758041/diff/13001/14001#newcode51\nsrc/pkg/io/ioutil/ioutil.go:51: // Initialize the return values\nWe don't need to initialise the return values, as the default zero-values (0 and nil) are perfectly reasonable as-is. (-1 is not idiomatic)\n\nhttp://codereview.appspot.com/1758041/diff/13001/14002\nFile src/pkg/io/ioutil/ioutil_test.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/13001/14002#newcode96\nsrc/pkg/io/ioutil/ioutil_test.go:96: filename := \"/etc/fstab\"\nInstead of /etc/fstab (which won't exist on some systems), just read ioutil_test.go (which will always exist).",
			"disapproval": false,
			"date": "2010-07-09 23:20:12.003150",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\n> s/numbytes/written/\nFixed.\n \n> We don't need to initialise the return values, as the default zero-values (0 and\n> nil) are perfectly reasonable as-is. (-1 is not idiomatic)\nNot sure what I was thinking... fixed.\n\n> Instead of /etc/fstab (which won't exist on some systems), just read\n> ioutil_test.go (which will always exist).\nSo simple!  Fixed.",
			"disapproval": false,
			"date": "2010-07-10 02:51:25.447623",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1758041/diff/21001/22001\nFile src/pkg/io/ioutil/ioutil.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/21001/22001#newcode49\nsrc/pkg/io/ioutil/ioutil.go:49: // CopyFile copies the named file's contents, m/atime, and permissions to the named file\nThis function should not be OS dependent; it is.",
			"disapproval": false,
			"date": "2010-07-10 04:37:13.464342",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> This function should not be OS dependent; it is.\n\nAre you refering to the fact that it uses *nix semantics for copying the mode and m/atime?\n\nAll of the functions used within CopyFile are in the os package, and thus should map the *nix concepts to the host OS as appropriate.  For instance, the mode passed to os.Open is the same mode that comes from os.Stat, as are the arguments to os.Chtimes.  As long as an OS interprets the mode in Open the same way it generates the mode for Stat, it should behave as expected.\n\nIn the test case, only the mode (as reported by os), the contents (as reported by ReadFile) and the mtime (as reported by os) are compared, and only against the values returned by the os package functions, and thus should be self-consistent.  This function is completely isolated from the syscall package, where all OS dependent functionality should be implemented.  Or so was my understanding.\n~Kyle",
			"disapproval": false,
			"date": "2010-07-10 04:45:43.396280",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nPassing it on to Rob and Russ to see what they think.",
			"disapproval": false,
			"date": "2010-07-10 06:03:02.405466",
			"approval": true
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/12 19:35:42, r wrote:\n> this seemingly trivial operation is actually pretty complex. doing it right will\n> require operating-system dependent code.  there will also be pressure to enhance\n> it or add variants with features to maintain permissions, control the open bits,\n> and so on.\n> \n> i therefore vote against having this in the standard library. its existence\n> presumes thoroughness, correctness, and portability we cannot provide.\n\ni'm pretty scared by all the suggestions about mmap\nand Windows CopyFile API and sys_copyfile and such.\ni agree that the really complex one doesn't belong here.\ngiven that we already have ReadFile and WriteFile though,\ni think a CopyFile that just did copying - no messing with\nmtimes or permissions or special system calls or atomic\nrename or anything else - would be okay, but only if\nit stays that way.  i can't tel whether it would.",
			"disapproval": false,
			"date": "2010-07-12 20:25:01.588834",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Fix comment\n\nhttp://codereview.appspot.com/1758041/diff/40001/35002\nFile src/pkg/io/ioutil/ioutil.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/40001/35002#newcode49\nsrc/pkg/io/ioutil/ioutil.go:49: // CopyFile copies the named file's contents\nCopyFile reads data from a file named by inFilename, and writes the data to a file named by outFilename (which, if it exists, will be truncated).",
			"disapproval": false,
			"date": "2010-07-19 03:59:33.035705",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Sorry for the delay here, work's been getting in the way.\n\nPTAL.\n\nAs was suggested, the CopyFile has been stripped down so it merely copies from one file to another, with a minimum of fluff.\n\nI can also close the CL if we'd rather let application designers do this entirely on their own, implementing OS-specific optimizations as necessary.",
			"disapproval": false,
			"date": "2010-07-18 21:22:44.679980",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The comment needs to be updated.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2010-07-18 22:16:39.885022",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This function seems a bit out of place.\n\nReading and Writing files is something people do all the time, it makes sense to have those in the base packages.\n\nCopying files seems much more niche.  Certainly there are interfaces to remotely copy files, just as there are interfaces to have a file system to a shallow (CoW) of a file; those seem highly specific and I think belong outside of the base packages.",
			"disapproval": false,
			"date": "2010-07-22 03:22:45.249003",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r, rsc, rsc1 (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-19 00:41:45.307973",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1758041/diff/40001/35002\nFile src/pkg/io/ioutil/ioutil.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/40001/35002#newcode49\nsrc/pkg/io/ioutil/ioutil.go:49: // CopyFile copies the named file's contents\nIf there is an error during the CopyFile function, what happens and why?\nIf CopyFile copies a file to itself, what happens and why?",
			"disapproval": false,
			"date": "2010-07-19 04:20:06.774209",
			"approval": false
		},
		{
			"sender": "etherealflaim@gmail.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r, rsc, rsc1, adg, PeterGo (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-19 09:19:11.185598",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I remain skeptical this function is worth its weight.  Deferring to rsc.\n\nhttp://codereview.appspot.com/1758041/diff/46001/47001\nFile src/pkg/io/ioutil/ioutil.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/46001/47001#newcode54\nsrc/pkg/io/ioutil/ioutil.go:54: // The file creation mode will be the os (package) defined interpretation of 0644, a\nthe grammar of this sentence could be simplified.\n\nThe file creation mode, as defined by package os, is 0644: read/write by creator, read-only for others.",
			"disapproval": false,
			"date": "2010-07-19 20:27:09.503442",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think this is fine as long as it is simple.\nThere's still some work to make it simple.\n\nhttp://codereview.appspot.com/1758041/diff/46001/47001\nFile src/pkg/io/ioutil/ioutil.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/46001/47001#newcode49\nsrc/pkg/io/ioutil/ioutil.go:49: // CopyFile copies the contents of the first named file into the second named file\nway too much detail here\n\n// CopyFile copies data from the file named by src to the file named by dst.\n// If the destination file does not exist, CopyFile creates it with permissions 0644;\n// otherwise CopyFile truncates it before copying.\n\nis all that's necessary.\n\nhttp://codereview.appspot.com/1758041/diff/46001/47001#newcode57\nsrc/pkg/io/ioutil/ioutil.go:57: func CopyFile(inFilename, outFilename string) (written int64, err os.Error) {\nplease name the parameters dst, src.\nNote that dst should come first, just like io.Copy.\n\nhttp://codereview.appspot.com/1758041/diff/46001/47001#newcode58\nsrc/pkg/io/ioutil/ioutil.go:58: // Open the output file (mode depends on os/syscall's interpretation)\nthese comments aren't really useful.\nit's obvious that the next line opens the output file.\ni'd delete all the comments in this function.\n\nhttp://codereview.appspot.com/1758041/diff/46001/47001#newcode73\nsrc/pkg/io/ioutil/ioutil.go:73: written, err = io.Copy(out, in)\nreturn io.Copy(out, in)\n\nhttp://codereview.appspot.com/1758041/diff/46001/47002\nFile src/pkg/io/ioutil/ioutil_test.go (right):\n\nhttp://codereview.appspot.com/1758041/diff/46001/47002#newcode95\nsrc/pkg/io/ioutil/ioutil_test.go:95: //func CopyFile(fromFile, toFile string) os.Error\ncomment is wrong.  delete.\n\nhttp://codereview.appspot.com/1758041/diff/46001/47002#newcode99\nsrc/pkg/io/ioutil/ioutil_test.go:99: // Try the file copy\ncomment can go.  the next line calls CopyFile\nso that should be pretty clear.\n\nhttp://codereview.appspot.com/1758041/diff/46001/47002#newcode100\nsrc/pkg/io/ioutil/ioutil_test.go:100: if _, err := CopyFile(filename, targetname); err != nil {\nn, err := CopyFile...\n\nand then check n below.",
			"disapproval": false,
			"date": "2010-08-26 16:56:51.452834",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"etherealflaim@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"go.peter.90@gmail.com",
				"cw@f00f.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Also please update the CL description to be\n\nio/ioutil: add CopyFile\n\nthere's no need for more detail there.",
			"disapproval": false,
			"date": "2010-08-26 16:57:18.042908",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"etherealflaim@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2010-10-19 03:50:50.929616",
			"approval": false
		}
	],
	"owner_email": "etherealflaim@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Kyle Lemons",
	"subject": "code review 1758041: io/ioutil: add CopyFile",
	"created": "2010-07-08 09:50:16.085374",
	"patchsets": [
		1,
		2001,
		9001,
		13001,
		21001,
		31001,
		35001,
		40001,
		46001
	],
	"modified": "2010-12-24 19:30:14.552128",
	"closed": false,
	"issue": 1758041
}