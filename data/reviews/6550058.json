{
	"description": "build: make int 64 bits on amd64\n\nThe assembly offsets were converted mechanically using\ncode.google.com/p/rsc/cmd/asmlint. The instruction\nchanges were done by hand.\n\nFixes issue 2188.",
	"cc": [
		"iant@golang.org",
		"r@golang.org",
		"bradfitz@golang.org",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"mtj@google.com",
		"tru64ufs@gmail.com",
		"iant@google.com",
		"uriel@berlinblue.org"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6550058/diff/6001/src/pkg/bytes/asm_amd64.s\nFile src/pkg/bytes/asm_amd64.s (right):\n\nhttp://codereview.appspot.com/6550058/diff/6001/src/pkg/bytes/asm_amd64.s#newcode97\nsrc/pkg/bytes/asm_amd64.s:97: CMPL\tBX, CX\nthis looks wrong",
			"disapproval": false,
			"date": "2012-09-24 19:18:29.400680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/24 19:18:29, remyoudompheng wrote:\n> http://codereview.appspot.com/6550058/diff/6001/src/pkg/bytes/asm_amd64.s\n> File src/pkg/bytes/asm_amd64.s (right):\n> \n> http://codereview.appspot.com/6550058/diff/6001/src/pkg/bytes/asm_amd64.s#newcode97\n> src/pkg/bytes/asm_amd64.s:97: CMPL\tBX, CX\n> this looks wrong\n\nThanks. Fixed.",
			"disapproval": false,
			"date": "2012-09-24 19:21:42.807220",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nwait for r",
			"disapproval": false,
			"date": "2012-09-24 20:06:17.994700",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-24 19:10:21.973260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/24 19:15:12, bradfitz wrote:\n> How do benchmarks look?\n\nDunno.",
			"disapproval": false,
			"date": "2012-09-24 19:21:33.383770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How do benchmarks look?\r\n",
			"disapproval": false,
			"date": "2012-09-24 19:15:12.150350",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i would like this CL to include at least the key pieces of associated documentation, which include updates to\n\ninstall  (should mention the different in size of int)\ninstall-source.html (should mention the different in size of int)\ngo_faq.html\n\nin the CL as it stands, nowhere does it mention that int is 64 bits on amd64. it kinda doesn't say anything about it anywhere i can find, 32 bits before or 64 bits now. please fix",
			"disapproval": false,
			"date": "2012-09-24 20:48:40.630270",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The natural size of a 64-bit machine with 64-bit pointers and 64-bit\r\nfile system addresses is arguably 64-bits.\r\n\r\nOn Tue, Sep 25, 2012 at 10:50 AM,  <tru64ufs@gmail.com> wrote:\r\n> On 2012/09/24 19:10:21, rsc wrote:\r\n>>\r\n>> Hello iant, r (cc: mailto:golang-dev@googlegroups.com),\r\n>\r\n>\r\n>> I'd like you to review this change to\r\n>> https://go.googlecode.com/hg/\r\n>\r\n>\r\n>\r\n> I was wondering if this is ok by everybody.\r\n> All the codes that supposed to take up 32bit now occupies 64bit\r\n> unnecessarily.\r\n>\r\n> This is sort of like the change we saw when 32bit application complied\r\n> on 64bit: now every pointer becomes 64bit, hence enlarging memory\r\n> footprint, resident set size, thus sometimes slows down computation.\r\n>\r\n> I think people have been using int64 if they want 64 bit integer, and we\r\n> should use explicit int64 when we want 64bit integer (long long).\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/6550058/\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-09-25 05:26:21.101540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nOn Mon, Sep 24, 2012 at 4:48 PM,  <r@golang.org> wrote:\r\n> i would like this CL to include at least the key pieces of associated\r\n> documentation, which include updates to\r\n>\r\n> install  (should mention the different in size of int)\r\n> install-source.html (should mention the different in size of int)\r\n> go_faq.html\r\n\r\nI updated the FAQ. I could not figure out where to work the int size\r\ninto the install docs. It's unclear to me that that level of detail\r\nbelongs there: we don't talk about pointer sizes, for example.\r\nInstead, I created a new placeholder for the Go 1.1 release notes\r\n(go1.1.html) and wrote the int section. I can dial back the detail if\r\nnecessary.\r\n\r\n> in the CL as it stands, nowhere does it mention that int is 64 bits on\r\n> amd64. it kinda doesn't say anything about it anywhere i can find, 32\r\n> bits before or 64 bits now. please fix\r\n\r\nI think the release notes are the right canonical place for this\r\ndetail, at least in the absence of a new, detailed document about the\r\nimplementations.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-25 00:15:38.588010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthanks.\n\nplease run tidy on the new doc to double-check formatting. here's my script\n\ntmp=/tmp/tidy.$USER.$$\ntidy -quiet -utf8 -e $file 2>$tmp\n\ncat $tmp | 9 grep -v '^Info:' | 9 sed '\n\ts|line ([0-9]+) column [0-9]+ - |'$file:'\\1 |\n'",
			"disapproval": false,
			"date": "2012-09-25 00:26:04.285780",
			"approval": true
		},
		{
			"sender": "tru64ufs@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"tru64ufs@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I understand. I was at DEC when that happens as well ;)\n\nanyways, the problem is we still have 32bit Linux running on many servers at IDC, while there exists many 64bit Linux machine as well.\n\nWhen we push code to these machine, the build happens on that machine.\nWe need to be really careful on 32/64bit interoperability.\nNow we need to make sure that we run/test our code on 32bit machine to \nensure the code works correctly, not the way around. \n\n\nCould you reconsider this change, please?\n\n\nOn 2012/09/25 05:35:36, mtj1 wrote:\n> Yes, I suffered through all of this at SGI when we moved from 32 to 64\n> machines and all the same concerns. Once we finally made the switch we\n> and our customers never wanted to go back. That was 1998. ;-)\n> \n> On Tue, Sep 25, 2012 at 11:01 AM,  <mailto:tru64ufs@gmail.com> wrote:\n> > Here's a link to LP64 vs. ILP64\n> >\n> > http://www.unix.org/version2/whatsnew/lp64_wp.html\n> >\n> > The problem is that you will loose 64 -> 32bit backward compatibility.\n> > When it works great on 64bit machine, now the same code may be broken\n> > for 32bit machine.\n> \n> -- \n> Michael T. Jones | Chief Technology Advocate  | mailto:mtj@google.com |  +1\n> 650-335-5765",
			"disapproval": false,
			"date": "2012-09-25 05:40:23.302540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ad78acd6f0bb ***\n\nbuild: make int 64 bits on amd64\n\nThe assembly offsets were converted mechanically using\ncode.google.com/p/rsc/cmd/asmlint. The instruction\nchanges were done by hand.\n\nFixes issue 2188.\n\nR=iant, r, bradfitz, remyoudompheng\nCC=golang-dev\nhttp://codereview.appspot.com/6550058",
			"disapproval": false,
			"date": "2012-09-25 00:57:49.415380",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow. I'm amazed at how painless this was. I was honestly not expecting\r\nthis til the next major version of Go.\r\n\r\nOn Tue, Sep 25, 2012 at 10:57 AM,  <rsc@golang.org> wrote:\r\n> *** Submitted as\r\n> http://code.google.com/p/go/source/detail?r=ad78acd6f0bb ***\r\n>\r\n>\r\n> build: make int 64 bits on amd64\r\n>\r\n> The assembly offsets were converted mechanically using\r\n> code.google.com/p/rsc/cmd/asmlint. The instruction\r\n> changes were done by hand.\r\n>\r\n> Fixes issue 2188.\r\n>\r\n> R=iant, r, bradfitz, remyoudompheng\r\n> CC=golang-dev\r\n> http://codereview.appspot.com/6550058\r\n>\r\n>\r\n> http://codereview.appspot.com/6550058/\r\n",
			"disapproval": false,
			"date": "2012-09-25 01:01:17.521580",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is not my call. The core Go team has been talking about it for\r\nquite some time... (That does not make it \"right\" in some sense, but\r\nit would probably have been good  to bring it up before.) If you've\r\nbeen watching the change lists the magic \"switch\" from 32 to 64 was\r\nreduced to a single small change. I suppose there could be a \"Go for\r\nsmall systems\" build mode. That's what I suggest you ask for rather\r\nthan a repeal of what feels like the future.\r\n\r\nOn Tue, Sep 25, 2012 at 11:10 AM,  <tru64ufs@gmail.com> wrote:\r\n>\r\n> I understand. I was at DEC when that happens as well ;)\r\n>\r\n> anyways, the problem is we still have 32bit Linux running on many\r\n> servers at IDC, while there exists many 64bit Linux machine as well.\r\n>\r\n> When we push code to these machine, the build happens on that machine.\r\n> We need to be really careful on 32/64bit interoperability.\r\n> Now we need to make sure that we run/test our code on 32bit machine to\r\n> ensure the code works correctly, not the way around.\r\n>\r\n>\r\n> Could you reconsider this change, please?\r\n>\r\n>\r\n>\r\n> On 2012/09/25 05:35:36, mtj1 wrote:\r\n>>\r\n>> Yes, I suffered through all of this at SGI when we moved from 32 to 64\r\n>> machines and all the same concerns. Once we finally made the switch we\r\n>> and our customers never wanted to go back. That was 1998. ;-)\r\n>\r\n>\r\n>> On Tue, Sep 25, 2012 at 11:01 AM,  <mailto:tru64ufs@gmail.com> wrote:\r\n>> > Here's a link to LP64 vs. ILP64\r\n>> >\r\n>> > http://www.unix.org/version2/whatsnew/lp64_wp.html\r\n>> >\r\n>> > The problem is that you will loose 64 -> 32bit backward\r\n>\r\n> compatibility.\r\n>>\r\n>> > When it works great on 64bit machine, now the same code may be\r\n>\r\n> broken\r\n>>\r\n>> > for 32bit machine.\r\n>\r\n>\r\n>> --\r\n>>\r\n>> Michael T. Jones | Chief Technology Advocate  | mailto:mtj@google.com\r\n>\r\n> |  +1\r\n>>\r\n>> 650-335-5765\r\n>\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/6550058/\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-09-25 05:44:26.231290",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, I suffered through all of this at SGI when we moved from 32 to 64\r\nmachines and all the same concerns. Once we finally made the switch we\r\nand our customers never wanted to go back. That was 1998. ;-)\r\n\r\nOn Tue, Sep 25, 2012 at 11:01 AM,  <tru64ufs@gmail.com> wrote:\r\n> Here's a link to LP64 vs. ILP64\r\n>\r\n> http://www.unix.org/version2/whatsnew/lp64_wp.html\r\n>\r\n> The problem is that you will loose 64 -> 32bit backward compatibility.\r\n> When it works great on 64bit machine, now the same code may be broken\r\n> for 32bit machine.\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-09-25 05:35:36.969540",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Running extensive integer application benchmarks now.\r\n\r\nOn Tue, Sep 25, 2012 at 6:31 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Wow. I'm amazed at how painless this was. I was honestly not expecting\r\n> this til the next major version of Go.\r\n>\r\n> On Tue, Sep 25, 2012 at 10:57 AM,  <rsc@golang.org> wrote:\r\n> > *** Submitted as\r\n> > http://code.google.com/p/go/source/detail?r=ad78acd6f0bb ***\r\n> >\r\n> >\r\n> > build: make int 64 bits on amd64\r\n> >\r\n> > The assembly offsets were converted mechanically using\r\n> > code.google.com/p/rsc/cmd/asmlint. The instruction\r\n> > changes were done by hand.\r\n> >\r\n> > Fixes issue 2188.\r\n> >\r\n> > R=iant, r, bradfitz, remyoudompheng\r\n> > CC=golang-dev\r\n> > http://codereview.appspot.com/6550058\r\n> >\r\n> >\r\n> > http://codereview.appspot.com/6550058/\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-09-25 01:08:24.842930",
			"approval": false
		},
		{
			"sender": "tru64ufs@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"tru64ufs@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/24 19:10:21, rsc wrote:\n> Hello iant, r (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\n\nI was wondering if this is ok by everybody.\nAll the codes that supposed to take up 32bit now occupies 64bit unnecessarily.\n\nThis is sort of like the change we saw when 32bit application complied on 64bit: now every pointer becomes 64bit, hence enlarging memory footprint, resident set size, thus sometimes slows down computation.\n\nI think people have been using int64 if they want 64 bit integer, and we should use explicit int64 when we want 64bit integer (long long).",
			"disapproval": false,
			"date": "2012-09-25 05:20:17.514610",
			"approval": false
		},
		{
			"sender": "tru64ufs@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"tru64ufs@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here's a link to LP64 vs. ILP64\n\nhttp://www.unix.org/version2/whatsnew/lp64_wp.html\n\nThe problem is that you will loose 64 -> 32bit backward compatibility.\nWhen it works great on 64bit machine, now the same code may be broken for 32bit machine.\n\n\nOn 2012/09/25 05:26:21, mtj1 wrote:\n> The natural size of a 64-bit machine with 64-bit pointers and 64-bit\n> file system addresses is arguably 64-bits.\n> \n> On Tue, Sep 25, 2012 at 10:50 AM,  <mailto:tru64ufs@gmail.com> wrote:\n> > On 2012/09/24 19:10:21, rsc wrote:\n> >>\n> >> Hello iant, r (cc: mailto:golang-dev@googlegroups.com),\n> >\n> >\n> >> I'd like you to review this change to\n> >> https://go.googlecode.com/hg/\n> >\n> >\n> >\n> > I was wondering if this is ok by everybody.\n> > All the codes that supposed to take up 32bit now occupies 64bit\n> > unnecessarily.\n> >\n> > This is sort of like the change we saw when 32bit application complied\n> > on 64bit: now every pointer becomes 64bit, hence enlarging memory\n> > footprint, resident set size, thus sometimes slows down computation.\n> >\n> > I think people have been using int64 if they want 64 bit integer, and we\n> > should use explicit int64 when we want 64bit integer (long long).\n> >\n> >\n> >\n> > http://codereview.appspot.com/6550058/\n> \n> \n> \n> -- \n> Michael T. Jones | Chief Technology Advocate  | mailto:mtj@google.com |  +1\n> 650-335-5765",
			"disapproval": false,
			"date": "2012-09-25 05:31:35.191310",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> This is sort of like the change we saw when 32bit application complied\r\n> on 64bit: now every pointer becomes 64bit, hence enlarging memory\r\n> footprint, resident set size, thus sometimes slows down computation.\r\n\r\nPointers in Go, uintptr, have always been the native word size. This\r\nchange affects only the int type, which is now effectively an alias\r\nfor uintptr, rather than int32. Being the default type for constant\r\nexpressions and used in indexing and slicing operations, this allows\r\nfor slices and arrays greater than 2Gb. This also allows for 64bit\r\nprocessors to operate naturally on 64 bit quantities without shifting\r\nor masking, which may lead to less pipeline stalls and faster\r\nexecution.\r\n\r\nYou are correct that _some_ structures will have a larger memory\r\nfootprint (but don't forget about padding that may have previously\r\nbeen added), but this can be mitigated by authors using the correct\r\ninteger type, right down to uint8 if they prefer.\r\n\r\nCheers\r\n\r\nDave\r\n\r\n* note for the pedantic: discussion of uint omitted for brevity.\r\n",
			"disapproval": false,
			"date": "2012-09-25 05:33:15.777140",
			"approval": false
		},
		{
			"sender": "uriel@berlinblue.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> On Tue, Sep 25, 2012 at 11:10 AM,  <tru64ufs@gmail.com> wrote:\r\n>> When we push code to these machine, the build happens on that machine.\r\n>> We need to be really careful on 32/64bit interoperability.\r\n>> Now we need to make sure that we run/test our code on 32bit machine to\r\n>> ensure the code works correctly, not the way around.\r\n\r\nI don't understand, this should not affect Go's excellent support for\r\ncross-compilation, building with 8g on a 64bit systems should produce\r\nbinaries that use 32bit ints, just as always.\r\n\r\nCode built with 6g will use 64bit ints, but only runs on 64bit systems anyway.\r\n\r\nUriel\r\n",
			"disapproval": false,
			"date": "2012-09-25 05:53:23.743070",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 24, 2012 at 10:20 PM,  <tru64ufs@gmail.com> wrote:\r\n>\r\n> I was wondering if this is ok by everybody.\r\n> All the codes that supposed to take up 32bit now occupies 64bit\r\n> unnecessarily.\r\n>\r\n> This is sort of like the change we saw when 32bit application complied\r\n> on 64bit: now every pointer becomes 64bit, hence enlarging memory\r\n> footprint, resident set size, thus sometimes slows down computation.\r\n>\r\n> I think people have been using int64 if they want 64 bit integer, and we\r\n> should use explicit int64 when we want 64bit integer (long long).\r\n\r\nGo uses int as the size of objects, e.g., it is the return type of\r\nlen, cap, and unsafe.Sizeof.  This is generally convenient and\r\nappropriate.  However, it means that on a 64-bit system with a 32-bit\r\nint it is impossible to have objects larger than 2G.  There are\r\nvarious different ways to address that.  Making int 64-bits solves the\r\nproblem without requiring any new language concepts.  Since 64-bit\r\nmachines have 64-bit registers, it costs little at runtime.\r\n\r\nYou're quite right that structures with int fields are now larger.\r\nThis is notably true of slices and strings.  However, if you have\r\nstructures for which the size matters, then I think it would have been\r\nappropriate to use int32 all along.  The language has always clearly\r\nstated that the int type can be 64 bits.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-09-25 05:53:17.336000",
			"approval": false
		},
		{
			"sender": "tru64ufs@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"tru64ufs@gmail.com",
				"iant@google.com",
				"uriel@berlinblue.org",
				"iant@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK. Got it.\nI just started following this list.\nThanks everybody for straighten up this issue.\n\n\nOn 2012/09/25 05:53:17, iant2 wrote:\n> On Mon, Sep 24, 2012 at 10:20 PM,  <mailto:tru64ufs@gmail.com> wrote:\n> >\n> > I was wondering if this is ok by everybody.\n> > All the codes that supposed to take up 32bit now occupies 64bit\n> > unnecessarily.\n> >\n> > This is sort of like the change we saw when 32bit application complied\n> > on 64bit: now every pointer becomes 64bit, hence enlarging memory\n> > footprint, resident set size, thus sometimes slows down computation.\n> >\n> > I think people have been using int64 if they want 64 bit integer, and we\n> > should use explicit int64 when we want 64bit integer (long long).\n> \n> Go uses int as the size of objects, e.g., it is the return type of\n> len, cap, and unsafe.Sizeof.  This is generally convenient and\n> appropriate.  However, it means that on a 64-bit system with a 32-bit\n> int it is impossible to have objects larger than 2G.  There are\n> various different ways to address that.  Making int 64-bits solves the\n> problem without requiring any new language concepts.  Since 64-bit\n> machines have 64-bit registers, it costs little at runtime.\n> \n> You're quite right that structures with int fields are now larger.\n> This is notably true of slices and strings.  However, if you have\n> structures for which the size matters, then I think it would have been\n> appropriate to use int32 all along.  The language has always clearly\n> stated that the int type can be 64 bits.\n> \n> Ian",
			"disapproval": false,
			"date": "2012-09-25 11:03:00.196970",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6550058: build: make int 64 bits on amd64",
	"created": "2012-09-24 02:05:38.663930",
	"patchsets": [
		1,
		2001,
		3001,
		6001,
		10001,
		12002,
		13025
	],
	"modified": "2012-09-25 11:03:00.451960",
	"closed": true,
	"issue": 6550058
}