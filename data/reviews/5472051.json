{
	"description": "godoc: text wrapping\n\nExample:\n\nPACKAGE\n\npackage utf8\n    import \"unicode/utf8\"\n\n    Package utf8 implements functions and constants to support text\n    encoded in UTF-8.  This package calls a Unicode character a rune for\n    brevity.\n\nCONSTANTS\n\nconst (\n    RuneError = unicode.ReplacementChar // the \"error\" Rune or \"replacement character\".\n    RuneSelf  = 0x80                    // characters below Runeself are represented as themselves in a single byte.\n    UTFMax    = 4                       // maximum number of bytes of a UTF-8 encoded Unicode character.\n)\n    Numbers fundamental to the encoding.\n\n\nFUNCTIONS\n\nfunc DecodeLastRune(p []byte) (r rune, size int)\n    DecodeLastRune unpacks the last UTF-8 encoding in p and returns the\n    rune and its width in bytes.\n\nfunc DecodeLastRuneInString(s string) (r rune, size int)\n    DecodeLastRuneInString is like DecodeLastRune but its input is a\n    string.\n\nfunc DecodeRune(p []byte) (r rune, size int)\n    DecodeRune unpacks the first UTF-8 encoding in p and returns the rune\n    and its width in bytes.\n\nfunc DecodeRuneInString(s string) (r rune, size int)\n    DecodeRuneInString is like DecodeRune but its input is a string.\n\nfunc EncodeRune(p []byte, r rune) int\n    EncodeRune writes into p (which must be large enough) the UTF-8\n    encoding of the rune.  It returns the number of bytes written.\n\nfunc FullRune(p []byte) bool\n    FullRune reports whether the bytes in p begin with a full UTF-8\n    encoding of a rune.  An invalid encoding is considered a full Rune\n    since it will convert as a width-1 error rune.\n\nfunc FullRuneInString(s string) bool\n    FullRuneInString is like FullRune but its input is a string.\n\nfunc RuneCount(p []byte) int\n    RuneCount returns the number of runes in p.  Erroneous and short\n    encodings are treated as single runes of width 1 byte.\n\nfunc RuneCountInString(s string) (n int)\n    RuneCountInString is like RuneCount but its input is a string.\n\nfunc RuneLen(r rune) int\n    RuneLen returns the number of bytes required to encode the rune.\n\nfunc RuneStart(b byte) bool\n    RuneStart reports whether the byte could be the first byte of an\n    encoded rune.  Second and subsequent bytes always have the top two\n    bits set to 10.\n\nfunc Valid(p []byte) bool\n    Valid reports whether p consists entirely of valid UTF-8-encoded\n    runes.\n\nfunc ValidString(s string) bool\n    ValidString reports whether s consists entirely of valid UTF-8-encoded\n    runes.\n\n\nTYPES\n\ntype String struct {\n    // contains filtered or unexported fields\n}\n    String wraps a regular string with a small structure that provides\n    more efficient indexing by code point index, as opposed to byte index.\n    Scanning incrementally forwards or backwards is O(1) per index\n    operation (although not as fast a range clause going forwards).\n    Random access is O(N) in the length of the string, but the overhead is\n    less than always scanning from the beginning.  If the string is ASCII,\n    random access is O(1).  Unlike the built-in string type, String has\n    internal mutable state and is not thread-safe.\n\nfunc NewString(contents string) *String\n    NewString returns a new UTF-8 string with the provided contents.\n\nfunc (s *String) At(i int) rune\n    At returns the rune with index i in the String.  The sequence of runes\n    is the same as iterating over the contents with a \"for range\" clause.\n\nfunc (s *String) Init(contents string) *String\n    Init initializes an existing String to hold the provided contents.\n    It returns a pointer to the initialized String.\n\nfunc (s *String) IsASCII() bool\n    IsASCII returns a boolean indicating whether the String contains only\n    ASCII bytes.\n\nfunc (s *String) RuneCount() int\n    RuneCount returns the number of runes (Unicode code points) in the\n    String.\n\nfunc (s *String) Slice(i, j int) string\n    Slice returns the string sliced at rune positions [i:j].\n\nfunc (s *String) String() string\n    String returns the contents of the String.  This method also means the\n    String is directly printable by fmt.Print.\n\nFixes issue 2479.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"mattn.jp@gmail.com",
		"r@golang.org",
		"gri@golang.org",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-13 07:38:54.396248",
			"approval": true
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you fix comment_text in '$GOROOT/lib/godoc/package.txt'?\n\nOn 2011/12/13 05:44:00, rsc wrote:\n> PTAL\n> \n> I pulled the double-space logic.",
			"disapproval": false,
			"date": "2011-12-13 12:13:42.933212",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "const punchCardWidth = 80\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-13 18:28:34.636996",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ed101f828092 ***\n\ngodoc: text wrapping\n\nExample:\n\nPACKAGE\n\npackage utf8\n    import \"unicode/utf8\"\n\n    Package utf8 implements functions and constants to support text\n    encoded in UTF-8.  This package calls a Unicode character a rune for\n    brevity.\n\nCONSTANTS\n\nconst (\n    RuneError = unicode.ReplacementChar // the \"error\" Rune or \"replacement character\".\n    RuneSelf  = 0x80                    // characters below Runeself are represented as themselves in a single byte.\n    UTFMax    = 4                       // maximum number of bytes of a UTF-8 encoded Unicode character.\n)\n    Numbers fundamental to the encoding.\n\n\nFUNCTIONS\n\nfunc DecodeLastRune(p []byte) (r rune, size int)\n    DecodeLastRune unpacks the last UTF-8 encoding in p and returns the\n    rune and its width in bytes.\n\nfunc DecodeLastRuneInString(s string) (r rune, size int)\n    DecodeLastRuneInString is like DecodeLastRune but its input is a\n    string.\n\nfunc DecodeRune(p []byte) (r rune, size int)\n    DecodeRune unpacks the first UTF-8 encoding in p and returns the rune\n    and its width in bytes.\n\nfunc DecodeRuneInString(s string) (r rune, size int)\n    DecodeRuneInString is like DecodeRune but its input is a string.\n\nfunc EncodeRune(p []byte, r rune) int\n    EncodeRune writes into p (which must be large enough) the UTF-8\n    encoding of the rune.  It returns the number of bytes written.\n\nfunc FullRune(p []byte) bool\n    FullRune reports whether the bytes in p begin with a full UTF-8\n    encoding of a rune.  An invalid encoding is considered a full Rune\n    since it will convert as a width-1 error rune.\n\nfunc FullRuneInString(s string) bool\n    FullRuneInString is like FullRune but its input is a string.\n\nfunc RuneCount(p []byte) int\n    RuneCount returns the number of runes in p.  Erroneous and short\n    encodings are treated as single runes of width 1 byte.\n\nfunc RuneCountInString(s string) (n int)\n    RuneCountInString is like RuneCount but its input is a string.\n\nfunc RuneLen(r rune) int\n    RuneLen returns the number of bytes required to encode the rune.\n\nfunc RuneStart(b byte) bool\n    RuneStart reports whether the byte could be the first byte of an\n    encoded rune.  Second and subsequent bytes always have the top two\n    bits set to 10.\n\nfunc Valid(p []byte) bool\n    Valid reports whether p consists entirely of valid UTF-8-encoded\n    runes.\n\nfunc ValidString(s string) bool\n    ValidString reports whether s consists entirely of valid UTF-8-encoded\n    runes.\n\n\nTYPES\n\ntype String struct {\n    // contains filtered or unexported fields\n}\n    String wraps a regular string with a small structure that provides\n    more efficient indexing by code point index, as opposed to byte index.\n    Scanning incrementally forwards or backwards is O(1) per index\n    operation (although not as fast a range clause going forwards).\n    Random access is O(N) in the length of the string, but the overhead is\n    less than always scanning from the beginning.  If the string is ASCII,\n    random access is O(1).  Unlike the built-in string type, String has\n    internal mutable state and is not thread-safe.\n\nfunc NewString(contents string) *String\n    NewString returns a new UTF-8 string with the provided contents.\n\nfunc (s *String) At(i int) rune\n    At returns the rune with index i in the String.  The sequence of runes\n    is the same as iterating over the contents with a \"for range\" clause.\n\nfunc (s *String) Init(contents string) *String\n    Init initializes an existing String to hold the provided contents.\n    It returns a pointer to the initialized String.\n\nfunc (s *String) IsASCII() bool\n    IsASCII returns a boolean indicating whether the String contains only\n    ASCII bytes.\n\nfunc (s *String) RuneCount() int\n    RuneCount returns the number of runes (Unicode code points) in the\n    String.\n\nfunc (s *String) Slice(i, j int) string\n    Slice returns the string sliced at rune positions [i:j].\n\nfunc (s *String) String() string\n    String returns the contents of the String.  This method also means the\n    String is directly printable by fmt.Print.\n\nFixes issue 2479.\n\nR=golang-dev, dsymonds, mattn.jp, r, gri, r\nCC=golang-dev\nhttp://codereview.appspot.com/5472051",
			"disapproval": false,
			"date": "2011-12-13 18:33:46.641875",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 12, 2011 at 22:40,  <mattn.jp@gmail.com> wrote:\n> Is it possible to add indent into left of text body. I hope that godoc\n> make text outline which can make color syntax for other tools\n\nIt's hard to tell in email but yes, this CL does that.\nLook at the example at http://codereview.appspot.com/5472051/.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-13 03:47:41.607555",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 12, 2011 at 22:34,  <dsymonds@golang.org> wrote:\n> http://codereview.appspot.com/5472051/diff/7001/src/cmd/godoc/godoc.go#newcode465\n> src/cmd/godoc/godoc.go:465: doc.ToText(&buf, comment, indent, preIndent,\n> 80-2*len(indent))\n> add a TODO to make that 80 configurable (e.g. via $COLUMNS).\n\nI am not planning to consult the environment.\nAmong other things, doing what you suggest would mean\nthat people visiting http://golang.org/pkg/math/?m=text would\nsee text wrapped for the width of the terminal where the\ngodoc server was started.  80 is fine.\n\n> http://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go\n> File src/pkg/go/doc/comment.go (right):\n>\n> http://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go#newcode463\n> src/pkg/go/doc/comment.go:463: var space = []byte(\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \")\n> I have no idea how many spaces that is. Can you use strings.Repeat?\n\nDone.\n\n> http://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go#newcode509\n> src/pkg/go/doc/comment.go:509: if strings.ContainsAny(s[len(s)-1:],\n> \".!?\") {\n> if strings.Index(\".!?\", s[len(s)-1]) {\n\nThat doesn't type-check.\nThis seems exactly what ContainsAny is for.\n\n> http://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go#newcode510\n> src/pkg/go/doc/comment.go:510: return 2\n> do we have to codify this anachronism? I realise it's what you're used\n> to, but most people don't do this any more, and it's discouraged by the\n> Chicago style manual, the AP stylebook and others.\n>\n> please?\n\nI don't understand the fuss, but I went looking for an explanation.\nThis was the first I found:\nhttp://www.slate.com/articles/technology/technology/2011/01/space_invaders.html\nIt explicitly says that the two space rule makes sense in monospace\nfonts, but goes on to say that monospace fonts went out in the 1970s,\nthus everyone should be using one space.  However, this formatting\ncode is preparing text precisely for a monospace font - otherwise how\ncan you justify the use of code point count for line length?\nSo two spaces seems fine here.\n\nIt is no more anachronistic than the vt100 simulator on your screen.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-13 03:46:47.996649",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\ngreat!\n\nOn 2011/12/13 05:44:00, rsc wrote:\n> PTAL\n> \n> I pulled the double-space logic.",
			"disapproval": false,
			"date": "2011-12-13 07:45:34.114189",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 03:13:01.836389",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Probably, most utilities that make color syntax expect:\n\n\nPACKAGE\n\n  package utf8\n      import \"unicode/utf8\"\n  \n      Package utf8 implements functions and constants to support text\n      encoded in UTF-8.  This package calls a Unicode character a rune for\n      brevity.\n\nCONSTANTS\n\n  const (\n      RuneError = unicode.ReplacementChar // the \"error\" Rune or \"replacement\n  character\".\n      RuneSelf  = 0x80                    // characters below Runeself are\n  represented as themselves in a single byte.\n      UTFMax    = 4                       // maximum number of bytes of a UTF-8\n  encoded Unicode character.\n  )\n      Numbers fundamental to the encoding.\n\nProbably, most of them should define token like \"^(PACKAGE|CONSTANTS|FUNCTIONS)$\".\n\nOn 2011/12/13 03:47:41, rsc wrote:\n> On Mon, Dec 12, 2011 at 22:40,  <mailto:mattn.jp@gmail.com> wrote:\n> > Is it possible to add indent into left of text body. I hope that godoc\n> > make text outline which can make color syntax for other tools\n> \n> It's hard to tell in email but yes, this CL does that.\n> Look at the example at http://codereview.appspot.com/5472051/.\n> \n> Russ",
			"disapproval": false,
			"date": "2011-12-13 03:54:39.972968",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI like.\n\nhttp://codereview.appspot.com/5472051/diff/7001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5472051/diff/7001/src/cmd/godoc/godoc.go#newcode465\nsrc/cmd/godoc/godoc.go:465: doc.ToText(&buf, comment, indent, preIndent, 80-2*len(indent))\nadd a TODO to make that 80 configurable (e.g. via $COLUMNS).\n\nhttp://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go#newcode463\nsrc/pkg/go/doc/comment.go:463: var space = []byte(\"                 \")\nI have no idea how many spaces that is. Can you use strings.Repeat?\n\nhttp://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go#newcode509\nsrc/pkg/go/doc/comment.go:509: if strings.ContainsAny(s[len(s)-1:], \".!?\") {\nif strings.Index(\".!?\", s[len(s)-1]) {\n\nhttp://codereview.appspot.com/5472051/diff/7001/src/pkg/go/doc/comment.go#newcode510\nsrc/pkg/go/doc/comment.go:510: return 2\ndo we have to codify this anachronism? I realise it's what you're used to, but most people don't do this any more, and it's discouraged by the Chicago style manual, the AP stylebook and others.\n\nplease?",
			"disapproval": false,
			"date": "2011-12-13 03:34:36.173733",
			"approval": true
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it possible to add indent into left of text body. I hope that godoc make text outline which can make color syntax for other tools\n\nOn 2011/12/13 03:13:01, rsc wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 03:40:14.089221",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for gri?",
			"disapproval": false,
			"date": "2011-12-13 06:29:38.132599",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5472051/diff/9003/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5472051/diff/9003/src/cmd/godoc/godoc.go#newcode465\nsrc/cmd/godoc/godoc.go:465: doc.ToText(&buf, comment, indent, preIndent, 80-2*len(indent))\nMy terminal window is wider than 80 chars. Should this really be hardwired? If not a flag, at least a named constant would be appropriate.",
			"disapproval": false,
			"date": "2011-12-13 18:14:26.805977",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI pulled the double-space logic.\n",
			"disapproval": false,
			"date": "2011-12-13 05:44:00.366455",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 07:13,  <mattn.jp@gmail.com> wrote:\n> Can you fix comment_text in '$GOROOT/lib/godoc/package.txt'?\n\nWhat do you mean by fix?\n",
			"disapproval": false,
			"date": "2011-12-13 17:54:33.762410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 13:14,  <gri@golang.org> wrote:\n> My terminal window is wider than 80 chars. Should this really be\n> hardwired? If not a flag, at least a named constant would be\n> appropriate.\n\nI am happy to name a constant.  I think it's fine not to\nuse the entire width of a terminal window, and few people\nhave terminals smaller than 80 columns.  Others have\nsuggested sniffing the environment or the tty to find a\nwidth, but I would rather not do that, because it is useful\nfor godoc to produce the same output consistently in\nall situations, so that when used for things like writing to\na file or showing a web page, the environment or terminal\nin which the godoc was run does not affect the behavior.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-13 18:25:00.758840",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fine w/ me. A named constant it shall be.\n- gri\n\nOn Tue, Dec 13, 2011 at 10:25 AM, Russ Cox <rsc@golang.org> wrote:\n> On Tue, Dec 13, 2011 at 13:14, \u00a0<gri@golang.org> wrote:\n>> My terminal window is wider than 80 chars. Should this really be\n>> hardwired? If not a flag, at least a named constant would be\n>> appropriate.\n>\n> I am happy to name a constant. \u00a0I think it's fine not to\n> use the entire width of a terminal window, and few people\n> have terminals smaller than 80 columns. \u00a0Others have\n> suggested sniffing the environment or the tty to find a\n> width, but I would rather not do that, because it is useful\n> for godoc to produce the same output consistently in\n> all situations, so that when used for things like writing to\n> a file or showing a web page, the environment or terminal\n> in which the godoc was run does not affect the behavior.\n>\n> Russ\n",
			"disapproval": false,
			"date": "2011-12-13 18:27:54.087330",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5472051: godoc: text wrapping",
	"created": "2011-12-09 14:28:00.951608",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		7006,
		9003,
		10010
	],
	"modified": "2011-12-13 18:27:54.087330",
	"closed": true,
	"issue": 5472051
}