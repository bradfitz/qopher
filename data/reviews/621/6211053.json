{
	"description": "cmd/go: invoke godoc with import path when possible\nAlso add -n -x flags to doc, fmt, vet.\nAlso shorten unknown command error.\n\nFixes issue 3612.\nFixes issue 3613.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\ni wonder what the -n and -x flags do.\n\nhttp://codereview.appspot.com/6211053/diff/2001/src/cmd/go/main.go\nFile src/cmd/go/main.go (right):\n\nhttp://codereview.appspot.com/6211053/diff/2001/src/cmd/go/main.go#newcode343\nsrc/cmd/go/main.go:343: fmt.Printf(\"%s\\n\", strings.Join(cmdline, \" \"))\nmildly disagree. the quoting of %q is different enough to be wrong for the shell in interesting cases. given that almost always the strings will not need quoting (in fact, will they ever?) it seems wiser to let it be broken naturally in the rare case they are rather than quote them always incorrectly. replacing one erroneous representation with another isn't a fix.",
			"disapproval": false,
			"date": "2012-05-15 15:41:52.258681",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 15, 2012 at 8:41 AM, <r@golang.org> wrote:\r\n\r\n> LGTM\r\n> i wonder what the -n and -x flags do.\r\n>\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6211053/diff/2001/src/cmd/go/**main.go<http://codereview.appspot.com/6211053/diff/2001/src/cmd/go/main.go>\r\n> File src/cmd/go/main.go (right):\r\n>\r\n> http://codereview.appspot.com/**6211053/diff/2001/src/cmd/go/**\r\n> main.go#newcode343<http://codereview.appspot.com/6211053/diff/2001/src/cmd/go/main.go#newcode343>\r\n> src/cmd/go/main.go:343: fmt.Printf(\"%s\\n\", strings.Join(cmdline, \" \"))\r\n> mildly disagree. the quoting of %q is different enough to be wrong for\r\n> the shell in interesting cases. given that almost always the strings\r\n> will not need quoting (in fact, will they ever?) it seems wiser to let\r\n> it be broken naturally in the rare case they are rather than quote them\r\n> always incorrectly. replacing one erroneous representation with another\r\n> isn't a fix.\r\n>\r\n\r\nI meant more %q in the general sense of quoting.  But it can be done later\r\nif needed.\r\n",
			"disapproval": false,
			"date": "2012-05-15 15:49:51.754235",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-15 15:24:58.861156",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6211053/diff/2001/src/cmd/go/main.go\nFile src/cmd/go/main.go (right):\n\nhttp://codereview.appspot.com/6211053/diff/2001/src/cmd/go/main.go#newcode343\nsrc/cmd/go/main.go:343: fmt.Printf(\"%s\\n\", strings.Join(cmdline, \" \"))\n%q on command-line args with shell meta characters or spaces would be nice, at least when runtime.GOOS != \"windows\".",
			"disapproval": false,
			"date": "2012-05-15 15:33:00.811138",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the -n and -x output is never quoted right now.\r\nit's meant to be suggestive, not exact.\r\n",
			"disapproval": false,
			"date": "2012-05-15 16:54:05.547661",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5b1e024a5e89 ***\n\ncmd/go: invoke godoc with import path when possible\nAlso add -n -x flags to doc, fmt, vet.\nAlso shorten unknown command error.\n\nFixes issue 3612.\nFixes issue 3613.\n\nR=golang-dev, bradfitz, r\nCC=golang-dev\nhttp://codereview.appspot.com/6211053",
			"disapproval": false,
			"date": "2012-05-15 16:54:05.602389",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "for the record.\n\nhttp://codereview.appspot.com/6211053/diff/3/src/cmd/go/main.go\nFile src/cmd/go/main.go (right):\n\nhttp://codereview.appspot.com/6211053/diff/3/src/cmd/go/main.go#newcode147\nsrc/cmd/go/main.go:147: fmt.Fprintf(os.Stderr, \"go: unknown subcommand %#q\\nRun 'go help' for usage.\\n\", args[0])\nnow that i think about it, this is an odd place to use %#q",
			"disapproval": false,
			"date": "2012-05-15 16:59:34.950364",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6211053: cmd/go: invoke godoc with import path when possible",
	"created": "2012-05-15 15:24:45.140494",
	"patchsets": [
		1,
		2001,
		3
	],
	"modified": "2012-05-15 16:59:35.454368",
	"closed": true,
	"issue": 6211053
}