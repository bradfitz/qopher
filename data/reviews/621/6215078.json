{
	"description": "runtime: handle and test large map values\n\nThis is from CL 5451105 but was dropped from that CL.\nSee also CL 6137051.\n\nThe only change compared to 5451105 is to check for\nh != nil in reflect\u00b7mapiterinit; allowing use of nil maps\nmust have happened after that original CL.\n\nFixes issue 3573.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-24 21:54:42.647914",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hi rsc,\n\nthis CL may cause a regression for small key types. \n\nlinux/amd64 atom n455 @ 1.66ghz\n\n\nlucky(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkMapUint8Get1           307          317   +3.26%\nBenchmarkMapUint8Get2           315          329   +4.44%\nBenchmarkMapUint8Put            383          413   +7.83%\nBenchmarkMapUint16Get1          349          378   +8.31%\nBenchmarkMapUint16Get2          354          390  +10.17%\nBenchmarkMapUint16Put           421          466  +10.69%\nBenchmarkMapUint32Get1          391          391   +0.00%\nBenchmarkMapUint32Get2          396          435   +9.85%\nBenchmarkMapUint32Put           457          482   +5.47%\nBenchmarkMapUint64Get1          460          469   +1.96%\nBenchmarkMapUint64Get2          465          483   +3.87%\nBenchmarkMapUint64Put           525          555   +5.71%\n\nsource for benchmarks is https://gist.github.com/c382a1c0a723b81a2fff.",
			"disapproval": false,
			"date": "2012-05-24 22:38:15.685977",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "for comparison, here are the numbers on a 5g panda board\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkMapUint8Get1           685          715   +4.38%\nBenchmarkMapUint8Get2           732          724   -1.09%\nBenchmarkMapUint8Put            809          840   +3.83%\nBenchmarkMapUint16Get1          703          719   +2.28%\nBenchmarkMapUint16Get2          717          744   +3.77%\nBenchmarkMapUint16Put           805          826   +2.61%\nBenchmarkMapUint32Get1          712          731   +2.67%\nBenchmarkMapUint32Get2          726          734   +1.10%\nBenchmarkMapUint32Put           841          854   +1.55%\nBenchmarkMapUint64Get1          767          796   +3.78%\nBenchmarkMapUint64Get2          782          809   +3.45%\nBenchmarkMapUint64Put           880          905   +2.84%",
			"disapproval": false,
			"date": "2012-05-24 22:40:59.335636",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6215078/diff/8001/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttp://codereview.appspot.com/6215078/diff/8001/src/pkg/runtime/hashmap.c#newcode9\nsrc/pkg/runtime/hashmap.c:9: #define IndirectVal  (1<<0)\t/* storing pointers to values */\n/* Hmap flags */",
			"disapproval": false,
			"date": "2012-05-24 23:13:43.009814",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 24, 2012 at 6:38 PM,  <dave@cheney.net> wrote:\r\n> BenchmarkMapUint32Get2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0396 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0435 \u00a0 +9.85%\r\n\r\ni see about +1% on my laptop.  i'd like to understand it, but\r\ni don't see anything obvious, and in any event correctness\r\nbeats performance.  if someone wants to try to track it down,\r\nthat'd be fine with me.  the chips are complex.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-05-25 02:38:05.771795",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=98488e2e38ee ***\n\nruntime: handle and test large map values\n\nThis is from CL 5451105 but was dropped from that CL.\nSee also CL 6137051.\n\nThe only change compared to 5451105 is to check for\nh != nil in reflect\u00b7mapiterinit; allowing use of nil maps\nmust have happened after that original CL.\n\nFixes issue 3573.\n\nR=golang-dev, dave, r\nCC=golang-dev\nhttp://codereview.appspot.com/6215078",
			"disapproval": false,
			"date": "2012-05-25 02:41:15.634332",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6215078: runtime: handle and test large map values",
	"created": "2012-05-22 17:44:20.551177",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		14002
	],
	"modified": "2012-05-25 02:41:18.073820",
	"closed": true,
	"issue": 6215078
}