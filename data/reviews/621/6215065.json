{
	"description": "runtime: faster GC sweep phase\nbenchmark                              old ns/op    new ns/op    delta\n\ngarbage.BenchmarkParser               3731065750   3715543750   -0.41%\ngarbage.BenchmarkParser-2             3631299750   3495248500   -3.75%\ngarbage.BenchmarkParser-4             3386486000   3339353000   -1.39%\ngarbage.BenchmarkParser-8             3267632000   3286422500   +0.58%\ngarbage.BenchmarkParser-16            3299203000   3316081750   +0.51%\n\ngarbage.BenchmarkTree                  977532888    919453833   -5.94%\ngarbage.BenchmarkTree-2                919948555    853478000   -7.23%\ngarbage.BenchmarkTree-4                841329000    790207000   -6.08%\ngarbage.BenchmarkTree-8                787792777    740380666   -6.01%\ngarbage.BenchmarkTree-16               899257166    846594555   -5.86%\n\ngarbage.BenchmarkTree2                 574876300    571885800   -0.52%\ngarbage.BenchmarkTree2-2               348162700    345888900   -0.65%\ngarbage.BenchmarkTree2-4               184912500    179137000   -3.22%\ngarbage.BenchmarkTree2-8               104243900    103485600   -0.73%\ngarbage.BenchmarkTree2-16               97269500     85137100  -14.25%\n\ngarbage.BenchmarkParserPause           141101976    157746974  +11.80%\ngarbage.BenchmarkParserPause-2         103096051     83043048  -19.45%\ngarbage.BenchmarkParserPause-4          52153133     45951111  -11.89%\ngarbage.BenchmarkParserPause-8          36730190     38901024   +5.91%\ngarbage.BenchmarkParserPause-16         32678875     29578585   -9.49%\n\ngarbage.BenchmarkTreePause              29487065     29648439   +0.55%\ngarbage.BenchmarkTreePause-2            22443494     21306159   -5.07%\ngarbage.BenchmarkTreePause-4            15799691     14985647   -5.15%\ngarbage.BenchmarkTreePause-8            10768112     9531420   -12.97%\ngarbage.BenchmarkTreePause-16           16329891     15205158   -6.89%\n\ngarbage.BenchmarkTree2Pause           2586957240   2577533200   -0.36%\ngarbage.BenchmarkTree2Pause-2         1683383760   1673923800   -0.56%\ngarbage.BenchmarkTree2Pause-4         1102860320   1074040280   -2.68%\ngarbage.BenchmarkTree2Pause-8          902627920    886122400   -1.86%\ngarbage.BenchmarkTree2Pause-16         856470920    804152320   -6.50%\n\ngarbage.BenchmarkParserLastPause       277316000    280839000   +1.25%\ngarbage.BenchmarkParserLastPause-2     179446000    163687000   -8.78%\ngarbage.BenchmarkParserLastPause-4     106752000     94144000  -11.81%\ngarbage.BenchmarkParserLastPause-8      57758000     61640000   +6.72%\ngarbage.BenchmarkParserLastPause-16     51235000     42552000  -16.95%\n\ngarbage.BenchmarkTreeLastPause          45244000     50786000  +12.25%\ngarbage.BenchmarkTreeLastPause-2        37163000     34654000   -6.75%\ngarbage.BenchmarkTreeLastPause-4        24178000     21967000   -9.14%\ngarbage.BenchmarkTreeLastPause-8        20390000     15648000  -30.30%\ngarbage.BenchmarkTreeLastPause-16       22398000     20180000   -9.90%\n\ngarbage.BenchmarkTree2LastPause       5748706000   5718809000   -0.52%\ngarbage.BenchmarkTree2LastPause-2     3481570000   3458844000   -0.65%\ngarbage.BenchmarkTree2LastPause-4     1849073000   1791330000   -3.22%\ngarbage.BenchmarkTree2LastPause-8     1042375000   1034811000   -0.73%\ngarbage.BenchmarkTree2LastPause-16     972637000    851323000  -14.25%\n\nThere is also visible improvement in consumed CPU time:\ntree2 -heapsize=8000000000 -cpus=12\nbefore: 248.74user 6.36system 0:52.74elapsed 483%CPU\nafter:  229.86user 6.33system 0:51.08elapsed 462%CPU\n-1.66s of real time, but -18.91s of consumed CPU time",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FTR, log of running test/bench/garbage/tree2 -heapsize=8000000000 -cpus=12\n\nBEFORE:\n*** built heap: 7629 MB; (290805077 objects * 32 bytes)\ngc7(8): 1848+444+0 ms, 9506 -> 9506 MB 290815155 -> 290815153 (290815223-70) objects, 39985(207670) handoff, 22530/123/9 yields\ngc pause: 2292.620 ms; collect:        0 MB; heapsize:     9506 MB\ngc8(10): 1682+394+0 ms, 9506 -> 9506 MB 290815166 -> 290815165 (290815236-71) objects, 48350(250821) handoff, 22209/165/11 yields\ngc pause: 2077.233 ms; collect:        0 MB; heapsize:     9506 MB\ngc9(12): 1583+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 43776(222419) handoff, 18579/272/24 yields\ngc pause: 1953.393 ms; collect:        0 MB; heapsize:     9506 MB\ngc10(12): 1665+349+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 89392(429419) handoff, 35336/333/24 yields\ngc pause: 2015.338 ms; collect:        0 MB; heapsize:     9506 MB\ngc11(12): 1642+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 90853(436690) handoff, 36438/243/17 yields\ngc pause: 2012.556 ms; collect:        0 MB; heapsize:     9506 MB\ngc12(12): 1609+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 36309(194234) handoff, 15327/205/12 yields\ngc pause: 1979.943 ms; collect:        0 MB; heapsize:     9506 MB\ngc13(12): 1562+375+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 52900(256044) handoff, 22166/327/22 yields\ngc pause: 1937.505 ms; collect:        0 MB; heapsize:     9506 MB\ngc14(12): 1529+351+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 29773(164911) handoff, 12133/96/6 yields\ngc pause: 1881.571 ms; collect:        0 MB; heapsize:     9506 MB\ngc15(12): 1623+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 49463(260378) handoff, 20307/144/10 yields\ngc pause: 1994.790 ms; collect:        0 MB; heapsize:     9506 MB\ngc16(12): 1637+352+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 77748(377604) handoff, 30901/286/19 yields\ngc pause: 1989.721 ms; collect:        0 MB; heapsize:     9506 MB\ngarbage.BenchmarkTree2Mem-12 Alloc=9968014176/9968029664 Heap=10796328664 NextGC=59808060480 Mallocs=290815249\ngarbage.BenchmarkTree2-12 10 198978900 ns/op\ngarbage.BenchmarkTree2LastPause-12 1 1989721000 ns/op\ngarbage.BenchmarkTree2Pause-12 16 1303487625 ns/op\ngarbage.BenchmarkTree2Pause5-12: 345000 131644000 1953393000 2012556000 2292620000\n248.74user 6.36system 0:52.74elapsed 483%CPU (0avgtext+0avgdata 40056608maxresident)k\n\nAFTER:\n*** built heap: 7629 MB; (290805077 objects * 32 bytes)\ngc7(8): 1769+245+0 ms, 9506 -> 9506 MB 290815166 -> 290815164 (290815233-69) objects, 24874(128969) handoff, 184(402983) steal, 14367/196/4 yields\ngc pause: 2014.709 ms; collect:        0 MB; heapsize:     9507 MB\ngc8(10): 1628+236+0 ms, 9506 -> 9506 MB 290815177 -> 290815176 (290815246-70) objects, 19599(92807) handoff, 351(902263) steal, 10585/327/10 yields\ngc pause: 1865.282 ms; collect:        0 MB; heapsize:     9507 MB\ngc9(12): 1531+218+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 27546(131117) handoff, 549(1367027) steal, 14012/743/1607 yields\ngc pause: 1750.154 ms; collect:        0 MB; heapsize:     9507 MB\ngc10(12): 1530+223+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 55413(281245) handoff, 766(1870244) steal, 23980/475/15 yields\ngc pause: 1754.019 ms; collect:        0 MB; heapsize:     9507 MB\ngc11(12): 1559+230+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 57997(279389) handoff, 907(2288474) steal, 26079/779/28 yields\ngc pause: 1789.805 ms; collect:        0 MB; heapsize:     9507 MB\ngc12(12): 1518+224+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 30653(154882) handoff, 1080(2735051) steal, 15216/856/1411 yields\ngc pause: 1742.951 ms; collect:        0 MB; heapsize:     9507 MB\ngc13(12): 1462+232+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 24578(115897) handoff, 1258(3231391) steal, 14264/1159/3696 yields\ngc pause: 1695.023 ms; collect:        0 MB; heapsize:     9507 MB\ngc14(12): 1485+247+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 33227(161523) handoff, 1434(3539513) steal, 17393/1216/3693 yields\ngc pause: 1733.579 ms; collect:        0 MB; heapsize:     9507 MB\ngc15(12): 1553+230+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 36256(166940) handoff, 1631(3977215) steal, 19195/1356/3691 yields\ngc pause: 1784.037 ms; collect:        0 MB; heapsize:     9507 MB\ngc16(12): 1538+230+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 31168(150588) handoff, 1805(4389393) steal, 17589/1423/3691 yields\ngc pause: 1769.606 ms; collect:        0 MB; heapsize:     9507 MB\ngarbage.BenchmarkTree2Mem-12 Alloc=9968574656/9968590064 Heap=10796328664 NextGC=59811423360 Mallocs=290815259\ngarbage.BenchmarkTree2-12 10 176967900 ns/op\ngarbage.BenchmarkTree2LastPause-12 1 1769606000 ns/op\ngarbage.BenchmarkTree2Pause-12 16 1165969750 ns/op\ngarbage.BenchmarkTree2Pause5-12: 328000 122911000 1742951000 1784037000 2014709000\n229.86user 6.33system 0:51.08elapsed 462%CPU (0avgtext+0avgdata 40057824maxresident)k\n\n---\n\nSome lines in comparison:\ngc10(12): 1665+349+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 89392(429419) handoff, 35336/333/24 yields\ngc10(12): 1530+223+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 55413(281245) handoff, 766(1870244) steal, 23980/475/15 yields\n\ngc13(12): 1562+375+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 52900(256044) handoff, 22166/327/22 yields\ngc13(12): 1462+232+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 24578(115897) handoff, 1258(3231391) steal, 14264/1159/3696 yields",
			"disapproval": false,
			"date": "2012-05-19 14:03:31.787682",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-19 13:55:59.220875",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FTR, log of running test/bench/garbage/tree2 -heapsize=8000000000 -cpus=12\n\nBEFORE:\n*** built heap: 7629 MB; (290805077 objects * 32 bytes)\ngc7(8): 1848+444+0 ms, 9506 -> 9506 MB 290815155 -> 290815153 (290815223-70) objects, 39985(207670) handoff, 22530/123/9 yields\ngc pause: 2292.620 ms; collect:        0 MB; heapsize:     9506 MB\ngc8(10): 1682+394+0 ms, 9506 -> 9506 MB 290815166 -> 290815165 (290815236-71) objects, 48350(250821) handoff, 22209/165/11 yields\ngc pause: 2077.233 ms; collect:        0 MB; heapsize:     9506 MB\ngc9(12): 1583+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 43776(222419) handoff, 18579/272/24 yields\ngc pause: 1953.393 ms; collect:        0 MB; heapsize:     9506 MB\ngc10(12): 1665+349+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 89392(429419) handoff, 35336/333/24 yields\ngc pause: 2015.338 ms; collect:        0 MB; heapsize:     9506 MB\ngc11(12): 1642+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 90853(436690) handoff, 36438/243/17 yields\ngc pause: 2012.556 ms; collect:        0 MB; heapsize:     9506 MB\ngc12(12): 1609+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 36309(194234) handoff, 15327/205/12 yields\ngc pause: 1979.943 ms; collect:        0 MB; heapsize:     9506 MB\ngc13(12): 1562+375+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 52900(256044) handoff, 22166/327/22 yields\ngc pause: 1937.505 ms; collect:        0 MB; heapsize:     9506 MB\ngc14(12): 1529+351+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 29773(164911) handoff, 12133/96/6 yields\ngc pause: 1881.571 ms; collect:        0 MB; heapsize:     9506 MB\ngc15(12): 1623+370+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 49463(260378) handoff, 20307/144/10 yields\ngc pause: 1994.790 ms; collect:        0 MB; heapsize:     9506 MB\ngc16(12): 1637+352+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 77748(377604) handoff, 30901/286/19 yields\ngc pause: 1989.721 ms; collect:        0 MB; heapsize:     9506 MB\ngarbage.BenchmarkTree2Mem-12 Alloc=9968014176/9968029664 Heap=10796328664 NextGC=59808060480 Mallocs=290815249\ngarbage.BenchmarkTree2-12 10 198978900 ns/op\ngarbage.BenchmarkTree2LastPause-12 1 1989721000 ns/op\ngarbage.BenchmarkTree2Pause-12 16 1303487625 ns/op\ngarbage.BenchmarkTree2Pause5-12: 345000 131644000 1953393000 2012556000 2292620000\n248.74user 6.36system 0:52.74elapsed 483%CPU (0avgtext+0avgdata 40056608maxresident)k\n\nAFTER:\n*** built heap: 7629 MB; (290805077 objects * 32 bytes)\ngc7(8): 1769+245+0 ms, 9506 -> 9506 MB 290815166 -> 290815164 (290815233-69) objects, 24874(128969) handoff, 184(402983) steal, 14367/196/4 yields\ngc pause: 2014.709 ms; collect:        0 MB; heapsize:     9507 MB\ngc8(10): 1628+236+0 ms, 9506 -> 9506 MB 290815177 -> 290815176 (290815246-70) objects, 19599(92807) handoff, 351(902263) steal, 10585/327/10 yields\ngc pause: 1865.282 ms; collect:        0 MB; heapsize:     9507 MB\ngc9(12): 1531+218+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 27546(131117) handoff, 549(1367027) steal, 14012/743/1607 yields\ngc pause: 1750.154 ms; collect:        0 MB; heapsize:     9507 MB\ngc10(12): 1530+223+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 55413(281245) handoff, 766(1870244) steal, 23980/475/15 yields\ngc pause: 1754.019 ms; collect:        0 MB; heapsize:     9507 MB\ngc11(12): 1559+230+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 57997(279389) handoff, 907(2288474) steal, 26079/779/28 yields\ngc pause: 1789.805 ms; collect:        0 MB; heapsize:     9507 MB\ngc12(12): 1518+224+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 30653(154882) handoff, 1080(2735051) steal, 15216/856/1411 yields\ngc pause: 1742.951 ms; collect:        0 MB; heapsize:     9507 MB\ngc13(12): 1462+232+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 24578(115897) handoff, 1258(3231391) steal, 14264/1159/3696 yields\ngc pause: 1695.023 ms; collect:        0 MB; heapsize:     9507 MB\ngc14(12): 1485+247+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 33227(161523) handoff, 1434(3539513) steal, 17393/1216/3693 yields\ngc pause: 1733.579 ms; collect:        0 MB; heapsize:     9507 MB\ngc15(12): 1553+230+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 36256(166940) handoff, 1631(3977215) steal, 19195/1356/3691 yields\ngc pause: 1784.037 ms; collect:        0 MB; heapsize:     9507 MB\ngc16(12): 1538+230+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 31168(150588) handoff, 1805(4389393) steal, 17589/1423/3691 yields\ngc pause: 1769.606 ms; collect:        0 MB; heapsize:     9507 MB\ngarbage.BenchmarkTree2Mem-12 Alloc=9968574656/9968590064 Heap=10796328664 NextGC=59811423360 Mallocs=290815259\ngarbage.BenchmarkTree2-12 10 176967900 ns/op\ngarbage.BenchmarkTree2LastPause-12 1 1769606000 ns/op\ngarbage.BenchmarkTree2Pause-12 16 1165969750 ns/op\ngarbage.BenchmarkTree2Pause5-12: 328000 122911000 1742951000 1784037000 2014709000\n229.86user 6.33system 0:51.08elapsed 462%CPU (0avgtext+0avgdata 40057824maxresident)k\n\n---\n\nSome lines in comparison:\ngc10(12): 1665+349+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 89392(429419) handoff, 35336/333/24 yields\ngc10(12): 1530+223+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 55413(281245) handoff, 766(1870244) steal, 23980/475/15 yields\n\ngc13(12): 1562+375+0 ms, 9506 -> 9506 MB 290815177 -> 290815177 (290815248-71) objects, 52900(256044) handoff, 22166/327/22 yields\ngc13(12): 1462+232+0 ms, 9506 -> 9506 MB 290815188 -> 290815188 (290815258-70) objects, 24578(115897) handoff, 1258(3231391) steal, 14264/1159/3696 yields",
			"disapproval": false,
			"date": "2012-05-19 14:02:34.358482",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4f0a49b9d0c9 ***\n\nruntime: faster GC sweep phase\nbenchmark                              old ns/op    new ns/op    delta\n\ngarbage.BenchmarkParser               3731065750   3715543750   -0.41%\ngarbage.BenchmarkParser-2             3631299750   3495248500   -3.75%\ngarbage.BenchmarkParser-4             3386486000   3339353000   -1.39%\ngarbage.BenchmarkParser-8             3267632000   3286422500   +0.58%\ngarbage.BenchmarkParser-16            3299203000   3316081750   +0.51%\n\ngarbage.BenchmarkTree                  977532888    919453833   -5.94%\ngarbage.BenchmarkTree-2                919948555    853478000   -7.23%\ngarbage.BenchmarkTree-4                841329000    790207000   -6.08%\ngarbage.BenchmarkTree-8                787792777    740380666   -6.01%\ngarbage.BenchmarkTree-16               899257166    846594555   -5.86%\n\ngarbage.BenchmarkTree2                 574876300    571885800   -0.52%\ngarbage.BenchmarkTree2-2               348162700    345888900   -0.65%\ngarbage.BenchmarkTree2-4               184912500    179137000   -3.22%\ngarbage.BenchmarkTree2-8               104243900    103485600   -0.73%\ngarbage.BenchmarkTree2-16               97269500     85137100  -14.25%\n\ngarbage.BenchmarkParserPause           141101976    157746974  +11.80%\ngarbage.BenchmarkParserPause-2         103096051     83043048  -19.45%\ngarbage.BenchmarkParserPause-4          52153133     45951111  -11.89%\ngarbage.BenchmarkParserPause-8          36730190     38901024   +5.91%\ngarbage.BenchmarkParserPause-16         32678875     29578585   -9.49%\n\ngarbage.BenchmarkTreePause              29487065     29648439   +0.55%\ngarbage.BenchmarkTreePause-2            22443494     21306159   -5.07%\ngarbage.BenchmarkTreePause-4            15799691     14985647   -5.15%\ngarbage.BenchmarkTreePause-8            10768112     9531420   -12.97%\ngarbage.BenchmarkTreePause-16           16329891     15205158   -6.89%\n\ngarbage.BenchmarkTree2Pause           2586957240   2577533200   -0.36%\ngarbage.BenchmarkTree2Pause-2         1683383760   1673923800   -0.56%\ngarbage.BenchmarkTree2Pause-4         1102860320   1074040280   -2.68%\ngarbage.BenchmarkTree2Pause-8          902627920    886122400   -1.86%\ngarbage.BenchmarkTree2Pause-16         856470920    804152320   -6.50%\n\ngarbage.BenchmarkParserLastPause       277316000    280839000   +1.25%\ngarbage.BenchmarkParserLastPause-2     179446000    163687000   -8.78%\ngarbage.BenchmarkParserLastPause-4     106752000     94144000  -11.81%\ngarbage.BenchmarkParserLastPause-8      57758000     61640000   +6.72%\ngarbage.BenchmarkParserLastPause-16     51235000     42552000  -16.95%\n\ngarbage.BenchmarkTreeLastPause          45244000     50786000  +12.25%\ngarbage.BenchmarkTreeLastPause-2        37163000     34654000   -6.75%\ngarbage.BenchmarkTreeLastPause-4        24178000     21967000   -9.14%\ngarbage.BenchmarkTreeLastPause-8        20390000     15648000  -30.30%\ngarbage.BenchmarkTreeLastPause-16       22398000     20180000   -9.90%\n\ngarbage.BenchmarkTree2LastPause       5748706000   5718809000   -0.52%\ngarbage.BenchmarkTree2LastPause-2     3481570000   3458844000   -0.65%\ngarbage.BenchmarkTree2LastPause-4     1849073000   1791330000   -3.22%\ngarbage.BenchmarkTree2LastPause-8     1042375000   1034811000   -0.73%\ngarbage.BenchmarkTree2LastPause-16     972637000    851323000  -14.25%\n\nThere is also visible improvement in consumed CPU time:\ntree2 -heapsize=8000000000 -cpus=12\nbefore: 248.74user 6.36system 0:52.74elapsed 483%CPU\nafter:  229.86user 6.33system 0:51.08elapsed 462%CPU\n-1.66s of real time, but -18.91s of consumed CPU time\n\nR=golang-dev\nCC=golang-dev\nhttp://codereview.appspot.com/6215065\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-05-22 17:35:57.281859",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6215065: runtime: faster GC sweep phase",
	"created": "2012-05-19 13:43:04.299278",
	"patchsets": [
		1,
		2001,
		4001,
		4
	],
	"modified": "2012-05-23 12:28:17.574797",
	"closed": true,
	"issue": 6215065
}