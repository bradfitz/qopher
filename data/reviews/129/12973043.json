{
	"description": "cmd/gc: remove mentions of \"ideal\" from error messages.\n        _ = complex(\"foo\", 0)\n        _ = complex(true, 0)\nnow trigger:\n        x.go:4: invalid operation: complex(\"foo\", 0) (mismatched types untyped string and untyped number)\n        x.go:5: invalid operation: complex(true, 0) (mismatched types untyped bool and untyped number)\n\nFixes issue 4521",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-15 04:47:47.826880",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12973043/diff/1/src/cmd/gc/const.c\nFile src/cmd/gc/const.c (right):\n\nhttps://codereview.appspot.com/12973043/diff/1/src/cmd/gc/const.c#newcode1059\nsrc/cmd/gc/const.c:1059: // but for an arbitrary \"ideal\" (untyped constant) expression.\nit can be untyped as a constant or as a shift\n\nhttps://codereview.appspot.com/12973043/diff/1/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttps://codereview.appspot.com/12973043/diff/1/src/cmd/gc/fmt.c#newcode580\nsrc/cmd/gc/fmt.c:580: [TIDEAL]\t= \"untyped constant\",\nnow for \n\nfunc main() {\n      s := uint(2)\n      _ = complex(\"foo\", 1<<s)\n}\n\nit says:\nz.go:5: invalid operation: complex(\"foo\", 1 << s) (mismatched types untyped string and untyped constant)\n\nbut 1<<s doesn't look like a constant.",
			"disapproval": false,
			"date": "2013-08-15 08:42:31.757270",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here's what it used to say:\r\n\r\n./x.go:11: invalid operation: complex(\"foo\", 1 << s) (mismatched types\r\nideal string and ideal)\r\n\r\n\"ideal\" is no better than \"untyped constant\" here. it's the 1 it's\r\ncomplaining about, not 1<<s.\r\n\r\n\r\nsuggestions welcome. i claim it's no worse than before, and avoids the\r\nbad word, but if you have a better solution i'm happy to try it.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-08-15 09:47:51.116290",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "it used to say ideal number. is untyped number okay?\r\n",
			"disapproval": false,
			"date": "2013-08-16 01:02:34.376110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f9fc4689c414 ***\n\ncmd/gc: remove mentions of \"ideal\" from error messages.\n        _ = complex(\"foo\", 0)\n        _ = complex(true, 0)\nnow trigger:\n        x.go:4: invalid operation: complex(\"foo\", 0) (mismatched types untyped string and untyped number)\n        x.go:5: invalid operation: complex(true, 0) (mismatched types untyped bool and untyped number)\n\nFixes issue 4521\n\nR=golang-dev, remyoudompheng, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/12973043",
			"disapproval": false,
			"date": "2013-08-16 02:40:10.962560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK\r\n",
			"disapproval": false,
			"date": "2013-08-16 01:20:39.067750",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It appears to be up to gri. There is no such term as 'ideal number'\r\nany more. I think 'untyped number' would be fine, but so would\r\n'untyped constant', which is more general.\r\n",
			"disapproval": false,
			"date": "2013-08-16 01:04:26.764510",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-16 01:23:38.742310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(that is, the array in typecheck.c used to say ideal number. i don't know\r\nwhy the array in fmt.c didn't.)\r\n",
			"disapproval": false,
			"date": "2013-08-16 01:03:06.309770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-16 01:56:56.252610",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i think untyped number is the more general of the two terms. if s is a\r\nvariable, then 1<<s is an untyped number but not a constant.\r\n",
			"disapproval": false,
			"date": "2013-08-16 01:10:30.553710",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 12973043: cmd/gc: remove mentions of \"ideal\" from error messages.",
	"created": "2013-08-15 04:47:39.358950",
	"patchsets": [
		1,
		12001,
		16001
	],
	"modified": "2013-08-16 02:40:13.958860",
	"closed": true,
	"issue": 12973043
}