{
	"description": "testing: add TB, an interface common to T and B",
	"cc": [
		"golang-dev@googlegroups.com",
		"kevlar@google.com",
		"rsc@golang.org",
		"adg@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-14 23:16:29.036480",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think I'd rather have some smaller interfaces that more clearly express\r\nintent and that both T and B happen to implement, and I also don't really\r\nfeel the need to include all of the variants of those methods.  As a straw\r\nman:\r\n\r\ntype Logger interface {\r\n  Logf\r\n}\r\n\r\ntype Failer interface {\r\n  Errorf\r\n  Fatalf\r\n}\r\n\r\ntype Skipper Interface {\r\n  Skipf\r\n}\r\n\r\nof course, I just define these for myself when I need them.  Having a giant\r\n15-method interface seems like overkill.\r\n\r\n\r\nOn Wed, Aug 14, 2013 at 4:16 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> testing: add an interface for methods shared by T and B\r\n>\r\n> Please review this at https://codereview.appspot.**com/12962043/<https://codereview.appspot.com/12962043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/testing/testing.go\r\n>\r\n>\r\n> Index: src/pkg/testing/testing.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/testing/testing.go\r\n> +++ b/src/pkg/testing/testing.go\r\n> @@ -196,6 +196,30 @@\r\n>         return buf.String()\r\n>  }\r\n>\r\n> +// Interface is the interface shared by both T and B.\r\n> +type Interface interface {\r\n> +       Error(args ...interface{})\r\n> +       Errorf(format string, args ...interface{})\r\n> +       Fail()\r\n> +       FailNow()\r\n> +       Failed() bool\r\n> +       Fatal(args ...interface{})\r\n> +       Fatalf(format string, args ...interface{})\r\n> +       Log(args ...interface{})\r\n> +       Logf(format string, args ...interface{})\r\n> +       Skip(args ...interface{})\r\n> +       SkipNow()\r\n> +       Skipf(format string, args ...interface{})\r\n> +       Skipped() bool\r\n> +\r\n> +       // And a private method, so we're allowed to add methods to\r\n> +       // this over time.\r\n> +       private()\r\n> +}\r\n> +\r\n> +var _ Interface = (*T)(nil)\r\n> +var _ Interface = (*B)(nil)\r\n> +\r\n>  // T is a type passed to Test functions to manage test state and support\r\n> formatted test logs.\r\n>  // Logs are accumulated during execution and dumped to standard error\r\n> when done.\r\n>  type T struct {\r\n> @@ -204,6 +228,8 @@\r\n>         startParallel chan bool // Parallel tests will wait on this.\r\n>  }\r\n>\r\n> +func (c *common) private() {}\r\n> +\r\n>  // Fail marks the function as having failed but continues execution.\r\n>  func (c *common) Fail() {\r\n>         c.mu.Lock()\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-14 23:38:02.570600",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That doesn't seem like a win.  It actually seems worse.\r\n\r\na) it pollutes the testing package and godoc\r\nb) I still have to think about which one I want and read over the body of\r\nmy test/benchmark function to figure out which set of methods I ended up\r\nusing.\r\n\r\nThe point of this is to be there so I don't have to define it every time,\r\nand don't need to think about what the intersection of T and B I need is.\r\n\r\n\r\n\r\n\r\nOn Wed, Aug 14, 2013 at 4:37 PM, Kyle Lemons <kevlar@google.com> wrote:\r\n\r\n> I think I'd rather have some smaller interfaces that more clearly express\r\n> intent and that both T and B happen to implement, and I also don't really\r\n> feel the need to include all of the variants of those methods.  As a straw\r\n> man:\r\n>\r\n> type Logger interface {\r\n>   Logf\r\n> }\r\n>\r\n> type Failer interface {\r\n>   Errorf\r\n>   Fatalf\r\n> }\r\n>\r\n> type Skipper Interface {\r\n>   Skipf\r\n> }\r\n>\r\n> of course, I just define these for myself when I need them.  Having a\r\n> giant 15-method interface seems like overkill.\r\n>\r\n>\r\n> On Wed, Aug 14, 2013 at 4:16 PM, <bradfitz@golang.org> wrote:\r\n>\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://go.googlecode.com/hg/\r\n>>\r\n>>\r\n>> Description:\r\n>> testing: add an interface for methods shared by T and B\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/12962043/<https://codereview.appspot.com/12962043/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/testing/testing.go\r\n>>\r\n>>\r\n>> Index: src/pkg/testing/testing.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/testing/testing.go\r\n>> +++ b/src/pkg/testing/testing.go\r\n>> @@ -196,6 +196,30 @@\r\n>>         return buf.String()\r\n>>  }\r\n>>\r\n>> +// Interface is the interface shared by both T and B.\r\n>> +type Interface interface {\r\n>> +       Error(args ...interface{})\r\n>> +       Errorf(format string, args ...interface{})\r\n>> +       Fail()\r\n>> +       FailNow()\r\n>> +       Failed() bool\r\n>> +       Fatal(args ...interface{})\r\n>> +       Fatalf(format string, args ...interface{})\r\n>> +       Log(args ...interface{})\r\n>> +       Logf(format string, args ...interface{})\r\n>> +       Skip(args ...interface{})\r\n>> +       SkipNow()\r\n>> +       Skipf(format string, args ...interface{})\r\n>> +       Skipped() bool\r\n>> +\r\n>> +       // And a private method, so we're allowed to add methods to\r\n>> +       // this over time.\r\n>> +       private()\r\n>> +}\r\n>> +\r\n>> +var _ Interface = (*T)(nil)\r\n>> +var _ Interface = (*B)(nil)\r\n>> +\r\n>>  // T is a type passed to Test functions to manage test state and support\r\n>> formatted test logs.\r\n>>  // Logs are accumulated during execution and dumped to standard error\r\n>> when done.\r\n>>  type T struct {\r\n>> @@ -204,6 +228,8 @@\r\n>>         startParallel chan bool // Parallel tests will wait on this.\r\n>>  }\r\n>>\r\n>> +func (c *common) private() {}\r\n>> +\r\n>>  // Fail marks the function as having failed but continues execution.\r\n>>  func (c *common) Fail() {\r\n>>         c.mu.Lock()\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-14 23:40:33.183190",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 14, 2013 at 4:40 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> That doesn't seem like a win.  It actually seems worse.\r\n>\r\n> a) it pollutes the testing package and godoc\r\n> b) I still have to think about which one I want and read over the body of\r\n> my test/benchmark function to figure out which set of methods I ended up\r\n> using.\r\n>\r\n> The point of this is to be there so I don't have to define it every time,\r\n> and don't need to think about what the intersection of T and B I need is.\r\n>\r\n\r\nYou're right.  I suppose as long as it's an interface that I can't\r\nimplement, I won't be tempted to do so, and I won't really be bothered by\r\nthe excessive number of methods.  Having something that just works would be\r\nnice.\r\n\r\n\r\n> On Wed, Aug 14, 2013 at 4:37 PM, Kyle Lemons <kevlar@google.com> wrote:\r\n>\r\n>> I think I'd rather have some smaller interfaces that more clearly express\r\n>> intent and that both T and B happen to implement, and I also don't really\r\n>> feel the need to include all of the variants of those methods.  As a straw\r\n>> man:\r\n>>\r\n>> type Logger interface {\r\n>>   Logf\r\n>> }\r\n>>\r\n>> type Failer interface {\r\n>>   Errorf\r\n>>   Fatalf\r\n>> }\r\n>>\r\n>> type Skipper Interface {\r\n>>   Skipf\r\n>> }\r\n>>\r\n>> of course, I just define these for myself when I need them.  Having a\r\n>> giant 15-method interface seems like overkill.\r\n>>\r\n>>\r\n>>  On Wed, Aug 14, 2013 at 4:16 PM, <bradfitz@golang.org> wrote:\r\n>>\r\n>>>  Reviewers: golang-dev1,\r\n>>>\r\n>>> Message:\r\n>>> Hello golang-dev@googlegroups.com,\r\n>>>\r\n>>> I'd like you to review this change to\r\n>>> https://go.googlecode.com/hg/\r\n>>>\r\n>>>\r\n>>> Description:\r\n>>> testing: add an interface for methods shared by T and B\r\n>>>\r\n>>> Please review this at https://codereview.appspot.**com/12962043/<https://codereview.appspot.com/12962043/>\r\n>>>\r\n>>> Affected files:\r\n>>>   M src/pkg/testing/testing.go\r\n>>>\r\n>>>\r\n>>> Index: src/pkg/testing/testing.go\r\n>>> ==============================**==============================**=======\r\n>>> --- a/src/pkg/testing/testing.go\r\n>>> +++ b/src/pkg/testing/testing.go\r\n>>> @@ -196,6 +196,30 @@\r\n>>>         return buf.String()\r\n>>>  }\r\n>>>\r\n>>> +// Interface is the interface shared by both T and B.\r\n>>> +type Interface interface {\r\n>>> +       Error(args ...interface{})\r\n>>> +       Errorf(format string, args ...interface{})\r\n>>> +       Fail()\r\n>>> +       FailNow()\r\n>>> +       Failed() bool\r\n>>> +       Fatal(args ...interface{})\r\n>>> +       Fatalf(format string, args ...interface{})\r\n>>> +       Log(args ...interface{})\r\n>>> +       Logf(format string, args ...interface{})\r\n>>> +       Skip(args ...interface{})\r\n>>> +       SkipNow()\r\n>>> +       Skipf(format string, args ...interface{})\r\n>>> +       Skipped() bool\r\n>>> +\r\n>>> +       // And a private method, so we're allowed to add methods to\r\n>>> +       // this over time.\r\n>>> +       private()\r\n>>> +}\r\n>>> +\r\n>>> +var _ Interface = (*T)(nil)\r\n>>> +var _ Interface = (*B)(nil)\r\n>>> +\r\n>>>  // T is a type passed to Test functions to manage test state and\r\n>>> support formatted test logs.\r\n>>>  // Logs are accumulated during execution and dumped to standard error\r\n>>> when done.\r\n>>>  type T struct {\r\n>>> @@ -204,6 +228,8 @@\r\n>>>         startParallel chan bool // Parallel tests will wait on this.\r\n>>>  }\r\n>>>\r\n>>> +func (c *common) private() {}\r\n>>> +\r\n>>>  // Fail marks the function as having failed but continues execution.\r\n>>>  func (c *common) Fail() {\r\n>>>         c.mu.Lock()\r\n>>>\r\n>>>\r\n>>>\r\n>>> --\r\n>>>\r\n>>> ---You received this message because you are subscribed to the Google\r\n>>> Groups \"golang-dev\" group.\r\n>>> To unsubscribe from this group and stop receiving emails from it, send\r\n>>> an email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>>> .\r\n>>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>>> .\r\n>>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-14 23:45:21.124860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The sheer size of the interface here gives me pause. It wouldn't be the\r\nlargest interface we have, but it wouldn't be far behind.\r\n\r\n$ cat go1.txt go1.1.txt next.txt | sed -n 's/ interface,.*//p' | uniq -c |\r\nsort -nr | sed 10q\r\n  28 pkg reflect, type Type\r\n   8 pkg net, type Conn\r\n   7 pkg net, type PacketConn\r\n   7 pkg encoding/binary, type ByteOrder\r\n   6 pkg os, type FileInfo\r\n   6 pkg hash, type Hash64\r\n   6 pkg hash, type Hash32\r\n   6 pkg fmt, type ScanState\r\n   6 pkg crypto/elliptic, type Curve\r\n   5 pkg net/http, type File\r\n",
			"disapproval": false,
			"date": "2013-08-14 23:48:18.490150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree. Hence putting the private method on it, to signal that it's not\r\nmeant to be implemented.  It's meant to be used.\r\n\r\nYou know I like small interfaces in general.\r\n\r\n\r\n\r\nOn Wed, Aug 14, 2013 at 4:48 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> The sheer size of the interface here gives me pause. It wouldn't be the\r\n> largest interface we have, but it wouldn't be far behind.\r\n>\r\n> $ cat go1.txt go1.1.txt next.txt | sed -n 's/ interface,.*//p' | uniq -c |\r\n> sort -nr | sed 10q\r\n>   28 pkg reflect, type Type\r\n>    8 pkg net, type Conn\r\n>    7 pkg net, type PacketConn\r\n>    7 pkg encoding/binary, type ByteOrder\r\n>    6 pkg os, type FileInfo\r\n>    6 pkg hash, type Hash64\r\n>    6 pkg hash, type Hash32\r\n>    6 pkg fmt, type ScanState\r\n>    6 pkg crypto/elliptic, type Curve\r\n>    5 pkg net/http, type File\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-14 23:49:49.618460",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Testing is weird in general, so I don't mind the large interface here.\r\n\r\nI think this is a sound idea.\r\n",
			"disapproval": false,
			"date": "2013-08-15 00:40:38.579710",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe the name should be different, though. testing.Interface makes me\r\nthink of sort.Interface, which *is* something to be implemented.\r\n\r\ntesting.Common?\r\n",
			"disapproval": false,
			"date": "2013-08-15 00:41:56.380760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wait for Rob whatever you do.\r\n",
			"disapproval": false,
			"date": "2013-08-15 00:50:54.922050",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Common is better than Interface.  I would even settle for TB since that\r\nmakes it sound like a fatal disease, which testing is.\r\n\r\nI don't like this much but can't come up with a counterargument beyond\r\ndistaste, so I might cave.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-08-15 01:15:40.604770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "// TB is the interface common to T and B.\r\n\r\nship it\r\n",
			"disapproval": false,
			"date": "2013-08-15 01:41:06.179010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM\r\n",
			"disapproval": false,
			"date": "2013-08-15 01:42:05.778640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, kevlar@google.com, rsc@golang.org, adg@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-15 01:47:22.575530",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.  Updated the database/sql package to use it, too.\r\n\r\n\r\n\r\nOn Wed, Aug 14, 2013 at 6:41 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> SGTM\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-15 01:48:39.457380",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-15 01:54:15.545160",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after edit\n\nhttps://codereview.appspot.com/12962043/diff/12002/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttps://codereview.appspot.com/12962043/diff/12002/src/pkg/testing/testing.go#newcode218\nsrc/pkg/testing/testing.go:218: // API contract.\ntake the 'we' out, and it's not a contract.\n\nA private method to prevent users implementing the interface\nand so future additions to it will not violate Go 1 compatibility.",
			"disapproval": false,
			"date": "2013-08-15 02:45:09.915180",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d2170d3d1ac8 ***\n\ntesting: add TB, an interface common to T and B\n\nR=golang-dev, kevlar, rsc, adg, r\nCC=golang-dev\nhttps://codereview.appspot.com/12962043",
			"disapproval": false,
			"date": "2013-08-15 06:21:37.426110",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 12962043: testing: add TB, an interface common to T and B",
	"created": "2013-08-14 23:16:15.264130",
	"patchsets": [
		1,
		2002,
		5001,
		12002,
		23001
	],
	"modified": "2013-08-15 06:21:40.984550",
	"closed": true,
	"issue": 12962043
}