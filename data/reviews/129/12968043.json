{
	"description": "misc/emacs: Refactor coverage code into multiple functions\n\nAlso fixes color gradient being calculated against the wrong maximum.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-15 00:24:35.872930",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "1) lisp really makes for terrible unified diffs, sorry about that\n2) Brad, if you want to wait for Alan to return, I can understand that. For now this is the last big misc/emacs CL, but I have 3 small ones (~3 line changes each) queued up.",
			"disapproval": false,
			"date": "2013-08-15 00:23:59.138790",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LG, but I have some questions mostly about the preexisting code.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1018\nmisc/emacs/go-mode.el:1018: \"Create a coverage overlay for a range of coverd/uncovered code.\"\nCan you document range and divisor?  (BTW: docstrings typically use ALL-CAPS to refer to parameter names.)\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1022\nmisc/emacs/go-mode.el:1022: -0.1)\nWhence -0.1?\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1024\nmisc/emacs/go-mode.el:1024: 0.8)\nWhence 0.8?\n\nConsider making a separate function from (count, divisor) to face.  \"go-coverage-face\"?\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1045\nmisc/emacs/go-mode.el:1045: (make-overlay\nThe rule for Lisp indentation is that all arguments are either on the same line or each on their own line, and the first argument is generally on the same line as the function.  So:\n\n(overlay-put (make-overlay (point-min) (point-max))\n             'face\n             'go-coverage-untracked)\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1053\nmisc/emacs/go-mode.el:1053: (let ((ranges '())\nUse nil instead of '(), or just don't initialize it at all:\n\n(let (ranges\n      (max-count 0))\n  ...)\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1065\nmisc/emacs/go-mode.el:1065: (mapcar 'string-to-number rest)\nUse #'string-to-number when quoting a function symbol.\n(The difference isn't critical in Emacs Lisp but it helps the reader and the compiler optimiser.)\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1070\nmisc/emacs/go-mode.el:1070: (push\nRemove linebreak.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1071\nmisc/emacs/go-mode.el:1071: (make-go--covered\nRemove linebreak.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1099\nmisc/emacs/go-mode.el:1099: (with-current-buffer (or\nRemove linebreak.",
			"disapproval": false,
			"date": "2013-08-15 01:44:10.689990",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1018\nmisc/emacs/go-mode.el:1018: \"Create a coverage overlay for a range of coverd/uncovered code.\"\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Can you document range and divisor?  (BTW: docstrings typically use ALL-CAPS to\n> refer to parameter names.)\n\nDone. (Am aware of the convention, but this use of \"range\" in the docstring was not directly related to the argument. Not mentally when I was writing it, anyway.)\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1022\nmisc/emacs/go-mode.el:1022: -0.1)\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Whence -0.1?\n\nn = 1 + floor(-0.1 * 9) == 0\n\nI.e., uncovered code.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1024\nmisc/emacs/go-mode.el:1024: 0.8)\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Whence 0.8?\n> \n> Consider making a separate function from (count, divisor) to face. \n> \"go-coverage-face\"?\n\ngo-coverage-face or go--coverage-face? That is, do you see any merit in making it part of the public API? Went with go--coverage-face for now.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1024\nmisc/emacs/go-mode.el:1024: 0.8)\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Whence 0.8?\n\n0.8 is taken from the original algorithm in go.tools/cmd/cover. When the mode is `set` and not `count`, all covered code uses the 8 (out of 10) intensity.\n\nGenerally this entire function is a direct translation of the algorithm used in cmd/cover, to produce identical output.\n\n> \n> Consider making a separate function from (count, divisor) to face. \n> \"go-coverage-face\"?\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1045\nmisc/emacs/go-mode.el:1045: (make-overlay\nOn 2013/08/15 01:44:10, adonovan wrote:\n> The rule for Lisp indentation is that all arguments are either on the same line\n> or each on their own line, and the first argument is generally on the same line\n> as the function.  So:\n> \n> (overlay-put (make-overlay (point-min) (point-max))\n>              'face\n>              'go-coverage-untracked)\n> \n\nDone.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1053\nmisc/emacs/go-mode.el:1053: (let ((ranges '())\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Use nil instead of '(), or just don't initialize it at all:\n> \n> (let (ranges\n>       (max-count 0))\n>   ...)\n\nDone.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1065\nmisc/emacs/go-mode.el:1065: (mapcar 'string-to-number rest)\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Use #'string-to-number when quoting a function symbol.\n> (The difference isn't critical in Emacs Lisp but it helps the reader and the\n> compiler optimiser.)\n\nDone.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1070\nmisc/emacs/go-mode.el:1070: (push\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Remove linebreak.\n\nDone.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1071\nmisc/emacs/go-mode.el:1071: (make-go--covered\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Remove linebreak.\n\nDone.\n\nhttps://codereview.appspot.com/12968043/diff/7001/misc/emacs/go-mode.el#newcode1099\nmisc/emacs/go-mode.el:1099: (with-current-buffer (or\nOn 2013/08/15 01:44:10, adonovan wrote:\n> Remove linebreak.\n\nDone.",
			"disapproval": false,
			"date": "2013-08-15 02:25:16.225440",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI'll patch/commit it tomorrow when I'm at my workstation.\n\nhttps://codereview.appspot.com/12968043/diff/12001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/12968043/diff/12001/misc/emacs/go-mode.el#newcode1026\nmisc/emacs/go-mode.el:1026: -0.1) ;; Uncovered code, set to -0.1 so n becomes 0.\nYou can use single-; comments at end-of-line.",
			"disapproval": false,
			"date": "2013-08-15 02:36:12.183700",
			"approval": true
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/15 02:36:12, adonovan wrote:\n> LGTM\n> \n> I'll patch/commit it tomorrow when I'm at my workstation.\n> \n> https://codereview.appspot.com/12968043/diff/12001/misc/emacs/go-mode.el\n> File misc/emacs/go-mode.el (right):\n> \n> https://codereview.appspot.com/12968043/diff/12001/misc/emacs/go-mode.el#newcode1026\n> misc/emacs/go-mode.el:1026: -0.1) ;; Uncovered code, set to -0.1 so n becomes 0.\n> You can use single-; comments at end-of-line.\n\nNoted. Already using ;; for end-of-line comments in some other places though. I can either keep it that way or change it globally in a follow-up CL.",
			"disapproval": false,
			"date": "2013-08-15 02:41:56.180790",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8345604e9545 ***\n\nmisc/emacs: Refactor coverage code into multiple functions\n\nAlso fixes color gradient being calculated against the wrong maximum.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/12968043\n\nCommitter: Alan Donovan <adonovan@google.com>",
			"disapproval": false,
			"date": "2013-08-16 02:37:18.478450",
			"approval": false
		}
	],
	"owner_email": "dominik.honnef@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dominik Honnef",
	"subject": "code review 12968043: misc/emacs: Refactor coverage code into multiple functions",
	"created": "2013-08-15 00:20:11.873470",
	"patchsets": [
		1,
		3001,
		7001,
		12001
	],
	"modified": "2013-08-16 02:39:21.579250",
	"closed": true,
	"issue": 12968043
}