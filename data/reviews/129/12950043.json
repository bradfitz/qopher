{
	"description": "archive/zip: speed up Zip64 test\n\nTook 76 seconds or so before. By avoiding flate and crc32 on\n4GB of data, it's now only 12 seconds.  Still a slow test, but\nnot painful to run anymore when you forget -short.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-14 20:18:22.906150",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "bored indeed!\n\nhttps://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go\nFile src/pkg/archive/zip/zip_test.go (right):\n\nhttps://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go#newcode135\nsrc/pkg/archive/zip/zip_test.go:135: // Fast path, if p is entirely the same byte repeated.\nhow much faster is this fast path? it just seems to avoid a bunch of increment operations... is it really worth it?\n\nhttps://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go#newcode166\nsrc/pkg/archive/zip/zip_test.go:166: wantN := len(p)\nis this variable really worth it? you don't reslice p\n\nhttps://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go#newcode198\nsrc/pkg/archive/zip/zip_test.go:198: b.Write(want)\nyou should test multiple writes, and this doesn't test the fast path",
			"disapproval": false,
			"date": "2013-08-14 22:13:11.768020",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go\nFile src/pkg/archive/zip/zip_test.go (right):\n\nhttps://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go#newcode135\nsrc/pkg/archive/zip/zip_test.go:135: // Fast path, if p is entirely the same byte repeated.\nOn 2013/08/14 22:13:11, adg wrote:\n> how much faster is this fast path? it just seems to avoid a bunch of increment\n> operations... is it really worth it?\n\nit's nearly twice as fast.  I was surprised too.\n\nhttps://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go#newcode166\nsrc/pkg/archive/zip/zip_test.go:166: wantN := len(p)\nOn 2013/08/14 22:13:11, adg wrote:\n> is this variable really worth it? you don't reslice p\n\nDone.  (I did before)\n\nhttps://codereview.appspot.com/12950043/diff/6001/src/pkg/archive/zip/zip_test.go#newcode198\nsrc/pkg/archive/zip/zip_test.go:198: b.Write(want)\nOn 2013/08/14 22:13:11, adg wrote:\n> you should test multiple writes, and this doesn't test the fast path\n\nDone.",
			"disapproval": false,
			"date": "2013-08-14 22:46:03.776510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-14 22:46:05.289610",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nBut use the new testing.TB.",
			"disapproval": false,
			"date": "2013-08-15 01:54:48.855400",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Will wait for Rob's blessed LGTM on the TB first.\r\n\r\n\r\n\r\nOn Wed, Aug 14, 2013 at 6:54 PM, <adg@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> But use the new testing.TB.\r\n>\r\n> https://codereview.appspot.**com/12950043/<https://codereview.appspot.com/12950043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-15 01:59:11.244970",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5c0a32c41738 ***\n\narchive/zip: speed up Zip64 test\n\nTook 76 seconds or so before. By avoiding flate and crc32 on\n4GB of data, it's now only 12 seconds.  Still a slow test, but\nnot painful to run anymore when you forget -short.\n\nR=golang-dev, adg\nCC=golang-dev\nhttps://codereview.appspot.com/12950043",
			"disapproval": false,
			"date": "2013-08-15 06:22:03.262870",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 12950043: archive/zip: speed up Zip64 test",
	"created": "2013-08-14 20:17:50.065570",
	"patchsets": [
		1,
		3001,
		6001,
		12001,
		18001
	],
	"modified": "2013-08-15 06:22:05.178840",
	"closed": true,
	"issue": 12950043
}