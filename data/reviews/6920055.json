{
	"description": "go-tour/gotour: find html root through running directory if package lookup fails.",
	"cc": [
		"adg@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go-tour/",
			"disapproval": false,
			"date": "2012-12-12 19:29:43.708310",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/12 19:29:43, gocampoy wrote:\n> Hello mailto:adg@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go-tour/\n\nPTAL\n\ngenzip.sh generates gotour.zip containing a directory structure that allows running \"go run run.go\" in the decompressed folder and everything works.\n\nI think that this is pretty much what we were trying to do, but let me know how you feel about it.",
			"disapproval": false,
			"date": "2012-12-13 02:40:44.545620",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's discuss this live\n\nhttps://codereview.appspot.com/6920055/diff/3005/gotour/local.go\nFile gotour/local.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode45\ngotour/local.go:45: func findServerRoot() (string, error) {\nOn 2012/12/13 06:02:18, adg wrote:\n> it's not really a server root, it's the tour root\n> \n> findRoot() is probably fine\n\nDone.\n\nhttps://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode46\ngotour/local.go:46: isRoot := func(p string) bool {\nOn 2012/12/13 06:02:18, adg wrote:\n> s/isRoot/exists/\n> \n> and make it a top-level function\n\nDone.\n\nhttps://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode59\ngotour/local.go:59: return \"\", fmt.Errorf(\"Couldn't find server root: %v\", err)\nOn 2012/12/13 06:02:18, adg wrote:\n> return \"\", err\n> \n> this fmt.Errorf adds nothing\n\nDone.\n\nhttps://codereview.appspot.com/6920055/diff/3005/run.go\nFile run.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/3005/run.go#newcode19\nrun.go:19: if err := os.Setenv(\"GOPATH\", wd); err != nil {\nOn 2012/12/13 06:02:18, adg wrote:\n> we should only set mutate GOPATH for the user's processes, not for the gotour\n> process itself\n> \n> and we should only do that if the user doesn't have GOPATH set or if the tour\n> packages are not inside that GOPATH\n\nI agree with doing it only when the user doesn't have a GOPATH set, but if we don't set the GOPATH for the gotour itself, how can it compile any code?\n\nLet's discuss this and the rest of comments in the file live",
			"disapproval": false,
			"date": "2012-12-13 20:56:48.202170",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6920055/diff/3005/gotour/local.go\nFile gotour/local.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode45\ngotour/local.go:45: func findServerRoot() (string, error) {\nit's not really a server root, it's the tour root\n\nfindRoot() is probably fine\n\nhttps://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode46\ngotour/local.go:46: isRoot := func(p string) bool {\ns/isRoot/exists/\n\nand make it a top-level function\n\nhttps://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode59\ngotour/local.go:59: return \"\", fmt.Errorf(\"Couldn't find server root: %v\", err)\nreturn \"\", err\n\nthis fmt.Errorf adds nothing\n\nhttps://codereview.appspot.com/6920055/diff/3005/run.go\nFile run.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/3005/run.go#newcode19\nrun.go:19: if err := os.Setenv(\"GOPATH\", wd); err != nil {\nwe should only set mutate GOPATH for the user's processes, not for the gotour process itself\n\nand we should only do that if the user doesn't have GOPATH set or if the tour packages are not inside that GOPATH\n\nhttps://codereview.appspot.com/6920055/diff/3005/run.go#newcode35\nrun.go:35: run(\"go\", \"build\", \"code.google.com/p/go-tour/gotour\")\nwhy build the gotour here? what's the purpose of this file?\n\nI suggested the gotour binary itself might build the dependent packages on startup. But there's no point in providing a separate bootstrap binary to build the gotour binary itself.",
			"disapproval": false,
			"date": "2012-12-13 06:02:18.621570",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's a really great idea minux. The next step would be to modify the dist\r\ntool to include the tour when creating the bundle.\r\n\r\nMaybe we could just do that instead of writing this script?\r\n\r\n\r\nOn 15 December 2012 04:49, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Sat, Dec 15, 2012 at 1:46 AM, Francesc Campoy Flores <campoy@golang.org\r\n> > wrote:\r\n>\r\n>> We think that providing an easy way to tun the go-tour, without requiring\r\n>> anything else than installing Go, will help the newcomers to the language.\r\n>>\r\n> I think we can bundle a copy of go-tour in official Go binary\r\n> distributions, and point\r\n> to it in the documentation for the binary distribution.\r\n> Won't take much space, and will be a huge help for newcomers.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-16 23:08:36.934910",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6920055/diff/3005/run.go\nFile run.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/3005/run.go#newcode35\nrun.go:35: run(\"go\", \"build\", \"code.google.com/p/go-tour/gotour\")\nAh, I see. You want the user to run \"go run run.go\"? I think we should just give them gotour.exe or whatever.",
			"disapproval": false,
			"date": "2012-12-13 06:03:43.438370",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 15, 2012 at 1:46 AM, Francesc Campoy Flores\r\n<campoy@golang.org>wrote:\r\n\r\n> We think that providing an easy way to tun the go-tour, without requiring\r\n> anything else than installing Go, will help the newcomers to the language.\r\n>\r\nI think we can bundle a copy of go-tour in official Go binary\r\ndistributions, and point\r\nto it in the documentation for the binary distribution.\r\nWon't take much space, and will be a huge help for newcomers.\r\n",
			"disapproval": false,
			"date": "2012-12-14 17:50:05.760610",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're guessing correctly :-)\r\n\r\nWe think that providing an easy way to tun the go-tour, without requiring\r\nanything else than installing Go, will help the newcomers to the language.\r\n\r\nCheers,\r\n\r\n\r\nOn Fri, Dec 14, 2012 at 1:05 AM, <minux.ma@gmail.com> wrote:\r\n\r\n> On 2012/12/14 00:17:14, gocampoy wrote:\r\n>\r\n>> Now genzip.sh generates a zip containing the executable gotour binary.\r\n>>\r\n> If GOPATH\r\n>\r\n>> is not set it will be set to the current directory by the gotour\r\n>>\r\n> are we going to provide official binary distributions for go-tour?\r\n>\r\n> https://codereview.appspot.**com/6920055/<https://codereview.appspot.com/6920055/>\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2012-12-14 17:46:49.070070",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nNow genzip.sh generates a zip containing the executable gotour binary. If GOPATH is not set it will be set to the current directory by the gotour\n\nOn 2012/12/13 20:56:48, gocampoy wrote:\n> Let's discuss this live\n> \n> https://codereview.appspot.com/6920055/diff/3005/gotour/local.go\n> File gotour/local.go (right):\n> \n> https://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode45\n> gotour/local.go:45: func findServerRoot() (string, error) {\n> On 2012/12/13 06:02:18, adg wrote:\n> > it's not really a server root, it's the tour root\n> > \n> > findRoot() is probably fine\n> \n> Done.\n> \n> https://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode46\n> gotour/local.go:46: isRoot := func(p string) bool {\n> On 2012/12/13 06:02:18, adg wrote:\n> > s/isRoot/exists/\n> > \n> > and make it a top-level function\n> \n> Done.\n> \n> https://codereview.appspot.com/6920055/diff/3005/gotour/local.go#newcode59\n> gotour/local.go:59: return \"\", fmt.Errorf(\"Couldn't find server root: %v\", err)\n> On 2012/12/13 06:02:18, adg wrote:\n> > return \"\", err\n> > \n> > this fmt.Errorf adds nothing\n> \n> Done.\n> \n> https://codereview.appspot.com/6920055/diff/3005/run.go\n> File run.go (right):\n> \n> https://codereview.appspot.com/6920055/diff/3005/run.go#newcode19\n> run.go:19: if err := os.Setenv(\"GOPATH\", wd); err != nil {\n> On 2012/12/13 06:02:18, adg wrote:\n> > we should only set mutate GOPATH for the user's processes, not for the gotour\n> > process itself\n> > \n> > and we should only do that if the user doesn't have GOPATH set or if the tour\n> > packages are not inside that GOPATH\n> \n> I agree with doing it only when the user doesn't have a GOPATH set, but if we\n> don't set the GOPATH for the gotour itself, how can it compile any code?\n> \n> Let's discuss this and the rest of comments in the file live",
			"disapproval": false,
			"date": "2012-12-14 00:17:14.333280",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/14 00:17:14, gocampoy wrote:\n> Now genzip.sh generates a zip containing the executable gotour binary. If GOPATH\n> is not set it will be set to the current directory by the gotour\nare we going to provide official binary distributions for go-tour?",
			"disapproval": false,
			"date": "2012-12-14 09:05:00.888420",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 17, 2012 at 7:08 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> That's a really great idea minux. The next step would be to modify the\r\n> dist tool to include the tour when creating the bundle.\r\n>\r\nwhere do you want go-tour to live in the binary distribution?\r\n",
			"disapproval": false,
			"date": "2012-12-17 17:10:30.798710",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 18 December 2012 04:10, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Mon, Dec 17, 2012 at 7:08 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n>> That's a really great idea minux. The next step would be to modify the\r\n>> dist tool to include the tour when creating the bundle.\r\n>>\r\n> where do you want go-tour to live in the binary distribution?\r\n>\r\n\r\nLet's take this to a separate discussion thread.\r\n",
			"disapproval": false,
			"date": "2012-12-17 23:04:32.034080",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is supposed to complement our packaging of the tour inside $GOROOT/misc/tour, right? As per this CL https://codereview.appspot.com/6976045/ ?\n\nIt seems that when running \"go tool tour\" the content won't be in the current directory.\n\nInstead, this CL should change the tour binary to \n1. try to find the tour in GOPATH (as it does already), \n2. if not found, look inside filepath.Join(runtime.GOROOT(), \"misc\", \"tour\") for the static content, and set a temporary GOPATH that points to that same directory when calling \"go build\".",
			"disapproval": false,
			"date": "2013-01-10 23:32:13.442730",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go\nFile gotour/local.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go#newcode50\ngotour/local.go:50: func environ(replacement ...string) (env []string) {\nOn 2013/01/24 21:48:10, adg wrote:\n> I think you're right, there's no reason not to pass GOPATH through to the\n> running executable as well, and this function is more complex than it needs to\n> be.\n> \n> It could be simply:\n> \n> func environ() (env []string) {\n> for _, v := range os.Environ() {\n>   if !strings.HasPrefix(v, \"GO\") {\n>     continue\n>   }\n>   if strings.HasPrefix(v, \"GOPATH=\") {\n>     v = \"GOPATH=\"+gopath\n>   }\n>   env = append(env, v)\n> }\n> return\n> }\n\nDone.\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go#newcode50\ngotour/local.go:50: func environ(replacement ...string) (env []string) {\nOn 2013/01/24 21:48:10, adg wrote:\n> put this function below run()\n\nDone.\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go#newcode77\ngotour/local.go:77: ctx := build.Default\nbuild.Default is a Context struct, not a pointer.\nShould I do a deepcopy instead? I think they way I do it does a copy already.\n\nOn 2013/01/24 21:48:10, adg wrote:\n> ctx := *build.Default // make a copy",
			"disapproval": false,
			"date": "2013-01-24 22:05:17.376600",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go-tour/source/detail?r=884c45414de8 ***\n\ngo-tour/gotour: find html root through running directory if package lookup fails.\n\nR=adg, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/6920055",
			"disapproval": false,
			"date": "2013-01-24 22:16:55.105080",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6920055/diff/40001/gotour/local.go\nFile gotour/local.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go#newcode50\ngotour/local.go:50: func environ(replacement ...string) (env []string) {\nput this function below run()\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go#newcode50\ngotour/local.go:50: func environ(replacement ...string) (env []string) {\nI think you're right, there's no reason not to pass GOPATH through to the running executable as well, and this function is more complex than it needs to be.\n\nIt could be simply:\n\nfunc environ() (env []string) {\nfor _, v := range os.Environ() {\n  if !strings.HasPrefix(v, \"GO\") {\n    continue\n  }\n  if strings.HasPrefix(v, \"GOPATH=\") {\n    v = \"GOPATH=\"+gopath\n  }\n  env = append(env, v)\n}\nreturn\n}\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go#newcode77\ngotour/local.go:77: ctx := build.Default\nctx := *build.Default // make a copy",
			"disapproval": false,
			"date": "2013-01-24 21:48:10.786740",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6920055/diff/31002/gotour/local.go\nFile gotour/local.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/31002/gotour/local.go#newcode46\ngotour/local.go:46: // Set GOPATH to the current directory if it wasn't set yet.\nDone with little differences:\n\nI return tourRoot instead of p.Dir after replacing the GOPATH in ctx. That root directory is used to obtain the static files, p.Dir won't work.\n\nAdded environ function to handle custom environments.\n\nQUESTION: Why not using the amended environment also for running the binary? That way I wouldn't need to pass it as a parameter, and I don't think having a different GOPATH should matter for the program execution.\n\nOn 2013/01/24 01:54:53, adg wrote:\n> I don't think we should just override GOPATH. We should be more specific about\n> what's going on.\n> \n> Only set the GOPATH variable in the environment when invoking the Go tool in\n> run(). (This means you'll need to add an env []string argument to the run\n> function.)\n> \n> Introduce a global variable:\n> \n> var gopath = os.Getenv(\"GOPATH\")\n> \n> And when running \"go build\", pass in the GO* environment variables to cmd.Env,\n> with GOPATH overridden by the gopath global.\n> \n> Then findRoot should use its own version of build.Context to override GOPATH\n> when searching for the package:\n> \n> ctx := *build.Default // copy default context\n> // First just look in the user's environment.\n> p, err := ctx.Import(basePkg, \"\", build.FindOnly)\n> if err == nil && isRoot(p.Dir) {\n>     return p.Dir, nil\n> }\n> // See if the tour has been packaged with the Go distribution.\n> tourRoot := filepath.Join(runtime.GOROOT(), \"misc\", \"tour\")\n> ctx.GOPATH = tourRoot\n> p, err := ctx.Import(basePkg, \"\", build.FindOnly)\n> if err == nil && isRoot(p.Dir) {\n>     gopath = tourRoot\n>     return p.Dir, nil\n> }\n> return nil, errors.New(\"could not find go-tour content; check $GOROOT and\n> $GOPATH\")",
			"disapproval": false,
			"date": "2013-01-24 17:33:40.863440",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI modified the code to take into account your CL. I have tested it with CL https://codereview.appspot.com/6976045 and everything works fine.\n\nOn 2013/01/10 23:32:13, adg wrote:\n> This is supposed to complement our packaging of the tour inside\n> $GOROOT/misc/tour, right? As per this CL https://codereview.appspot.com/6976045/\n> ?\n> \n> It seems that when running \"go tool tour\" the content won't be in the current\n> directory.\n> \n> Instead, this CL should change the tour binary to \n> 1. try to find the tour in GOPATH (as it does already), \n> 2. if not found, look inside filepath.Join(runtime.GOROOT(), \"misc\", \"tour\") for\n> the static content, and set a temporary GOPATH that points to that same\n> directory when calling \"go build\".",
			"disapproval": false,
			"date": "2013-01-24 01:03:32.739220",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6920055/diff/31002/gotour/local.go\nFile gotour/local.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/31002/gotour/local.go#newcode46\ngotour/local.go:46: // Set GOPATH to the current directory if it wasn't set yet.\nI don't think we should just override GOPATH. We should be more specific about what's going on.\n\nOnly set the GOPATH variable in the environment when invoking the Go tool in run(). (This means you'll need to add an env []string argument to the run function.)\n\nIntroduce a global variable:\n\nvar gopath = os.Getenv(\"GOPATH\")\n\nAnd when running \"go build\", pass in the GO* environment variables to cmd.Env, with GOPATH overridden by the gopath global.\n\nThen findRoot should use its own version of build.Context to override GOPATH when searching for the package:\n\nctx := *build.Default // copy default context\n// First just look in the user's environment.\np, err := ctx.Import(basePkg, \"\", build.FindOnly)\nif err == nil && isRoot(p.Dir) {\n    return p.Dir, nil\n}\n// See if the tour has been packaged with the Go distribution.\ntourRoot := filepath.Join(runtime.GOROOT(), \"misc\", \"tour\")\nctx.GOPATH = tourRoot\np, err := ctx.Import(basePkg, \"\", build.FindOnly)\nif err == nil && isRoot(p.Dir) {\n    gopath = tourRoot\n    return p.Dir, nil\n}\nreturn nil, errors.New(\"could not find go-tour content; check $GOROOT and $GOPATH\")",
			"disapproval": false,
			"date": "2013-01-24 01:54:52.896650",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go\nFile gotour/local.go (right):\n\nhttps://codereview.appspot.com/6920055/diff/40001/gotour/local.go#newcode77\ngotour/local.go:77: ctx := build.Default\nOn 2013/01/24 22:05:17, gocampoy wrote:\n> build.Default is a Context struct, not a pointer.\n> Should I do a deepcopy instead? I think they way I do it does a copy already.\n\nOh yeah, I thought build.Default was a *Context, not Context. You're right.",
			"disapproval": false,
			"date": "2013-01-24 22:09:11.193180",
			"approval": true
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 6920055: go-tour/gotour: find html root through running director...",
	"created": "2012-12-12 19:27:33.970790",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		9001,
		1003,
		7002,
		13001,
		13002,
		3005,
		18001,
		11006,
		11007,
		25001,
		29001,
		31002,
		29002,
		37002,
		40001,
		31003,
		35006
	],
	"modified": "2013-01-24 22:16:57.247240",
	"closed": true,
	"issue": 6920055
}