{
	"description": "runtime: allocate heap metadata at run time\n\nBefore, the mheap structure was in the bss,\nbut it's quite large (today, 256 MB, much of\nwhich is never actually paged in), and it makes\nGo binaries run afoul of exec-time bss size\nlimits on some BSD systems.\n\nFixes issue 4447.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"remyoudompheng@gmail.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e7b206201e2a ***\n\nruntime: allocate heap metadata at run time\n\nBefore, the mheap structure was in the bss,\nbut it's quite large (today, 256 MB, much of\nwhich is never actually paged in), and it makes\nGo binaries run afoul of exec-time bss size\nlimits on some BSD systems.\n\nFixes issue 4447.\n\nR=golang-dev, dave, minux.ma, remyoudompheng, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7307122",
			"disapproval": false,
			"date": "2013-02-15 19:27:09.305130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-15 04:46:38.530550",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks rsc, I'll run some tests on 32 bit systems tonight.",
			"disapproval": false,
			"date": "2013-02-15 06:35:57.473260",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307122/diff/5001/src/pkg/runtime/race.c\nFile src/pkg/runtime/race.c (right):\n\nhttps://codereview.appspot.com/7307122/diff/5001/src/pkg/runtime/race.c#newcode43\nsrc/pkg/runtime/race.c:43: sz = (byte*)runtime\u00b7mheap - noptrdata;\nthis seems to make some assumption based on\nmheap layout (in .noptrbss).",
			"disapproval": false,
			"date": "2013-02-15 06:37:37.474520",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 15 Feb 2013 05:46, <rsc@golang.org> wrote:\r\n>\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> runtime: allocate heap metadata at run time\r\n>\r\n> Before, the mheap structure was in the bss,\r\n> but it's quite large (today, 256 MB, much of\r\n> which is never actually paged in), and it makes\r\n> Go binaries run afoul of exec-time bss size\r\n> limits on some BSD systems.\r\n\r\nFixes issue 4447?\r\n",
			"disapproval": false,
			"date": "2013-02-15 06:57:50.798390",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307122/diff/5001/src/pkg/runtime/race.c\nFile src/pkg/runtime/race.c (right):\n\nhttps://codereview.appspot.com/7307122/diff/5001/src/pkg/runtime/race.c#newcode43\nsrc/pkg/runtime/race.c:43: sz = (byte*)runtime\u00b7mheap - noptrdata;\nOn 2013/02/15 06:37:37, minux wrote:\n> this seems to make some assumption based on\n> mheap layout (in .noptrbss).\n\nAgreed.  This code needs to change.  I think it should simply be\n\nruntime\u2215race\u00b7MapShadow(noptrdata, enoptrbss - noptrdata);",
			"disapproval": false,
			"date": "2013-02-15 15:12:26.677240",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is a data point from a 32bit atom system\n\n220887(~/go/test/bench/go1) % go version\ngo version devel +41ab0ca75ea3 Fri Feb 15 16:55:51 2013 +1100 linux/386\n220887(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    2147483647   2147483647  -17.72%\nBenchmarkFannkuch11      2147483647   2147483647   +2.43%\nBenchmarkGobDecode        117198594     90299821  -22.95%\nBenchmarkGobEncode         44873231     37907496  -15.52%\nBenchmarkGzip            2147483647   2147483647   -1.18%\nBenchmarkGunzip           582749174    584835948   +0.36%\nBenchmarkJSONEncode       380500998    379802906   -0.18%\nBenchmarkJSONDecode       902289013    894152629   -0.90%\nBenchmarkMandelbrot200     33310667     33329347   +0.06%\nBenchmarkParse             37263346     37267311   +0.01%\nBenchmarkRevcomp         2147483647   2147483647   -0.26%\nBenchmarkTemplate        1518277080   1550416780   +2.12%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.55         8.50    1.30x\nBenchmarkGobEncode            17.10        20.25    1.18x\nBenchmarkGzip                  5.72         5.79    1.01x\nBenchmarkGunzip               33.30        33.18    1.00x\nBenchmarkJSONEncode            5.10         5.11    1.00x\nBenchmarkJSONDecode            2.15         2.17    1.01x\nBenchmarkParse                 1.55         1.55    1.00x\nBenchmarkRevcomp              54.07        54.21    1.00x\nBenchmarkTemplate              1.28         1.25    0.98x\n\nThese results are consistent across several runs",
			"disapproval": false,
			"date": "2013-02-15 11:44:05.567490",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Results are less consistent for linux/arm, nexus7.\n\nnexus7(~/go/test/bench/go1) % go version\ngo version devel +41ab0ca75ea3 Fri Feb 15 16:55:51 2013 +1100 linux/arm\nnexus7(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    2147483647   2147483647   +0.71%\nBenchmarkFannkuch11      2147483647   2147483647   +5.19%\nBenchmarkGobDecode        124440750    122867300   -1.26%\nBenchmarkGobEncode         45218240     43464740   -3.88%\nBenchmarkGzip            2147483647   2147483647   -0.50%\nBenchmarkGunzip           710857000    704859600   -0.84%\nBenchmarkJSONEncode       501282600    504572600   +0.66%\nBenchmarkJSONDecode      1127346000   1148390000   +1.87%\nBenchmarkMandelbrot200     38328919     38360100   +0.08%\nBenchmarkParse             49816260     51052780   +2.48%\nBenchmarkRevcomp           93411650     92312500   -1.18%\nBenchmarkTemplate        1397807000   1364438000   -2.39%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.17         6.25    1.01x\nBenchmarkGobEncode            16.97        17.66    1.04x\nBenchmarkGzip                  4.43         4.45    1.00x\nBenchmarkGunzip               27.30        27.53    1.01x\nBenchmarkJSONEncode            3.87         3.85    0.99x\nBenchmarkJSONDecode            1.72         1.69    0.98x\nBenchmarkParse                 1.16         1.13    0.97x\nBenchmarkRevcomp              27.21        27.53    1.01x\nBenchmarkTemplate              1.39         1.42    1.02x",
			"disapproval": false,
			"date": "2013-02-15 12:23:40.143640",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-15 18:58:26.724600",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, minux.ma@gmail.com, remyoudompheng@gmail.com, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-15 18:13:02.326880",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7307122: runtime: allocate heap metadata at run time",
	"created": "2013-02-15 04:46:05.897800",
	"patchsets": [
		1,
		2001,
		5001,
		14001,
		12002
	],
	"modified": "2013-02-15 19:27:10.858710",
	"closed": true,
	"issue": 7307122
}