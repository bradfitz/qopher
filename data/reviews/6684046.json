{
	"description": "image/jpeg: decode progressive JPEGs.\n\nTo be clear, this supports decoding the bytes on the wire into an\nin-memory image. There is no API change: jpeg.Decode will still not\nreturn until the entire image is decoded.\n\nThe code is obviously more complicated, and costs around 10% in\nperformance on baseline JPEGs. The processSOS code could be cleaned up a\nbit, and maybe some of that loss can be reclaimed, but I'll leave that\nfor follow-up CLs, to keep the diff for this one as small as possible.\n\nBefore:\nBenchmarkDecode\t    1000\t   2855637 ns/op\t  21.64 MB/s\nAfter:\nBenchmarkDecodeBaseline\t     500\t   3178960 ns/op\t  19.44 MB/s\nBenchmarkDecodeProgressive\t     500\t   4082640 ns/op\t  15.14 MB/s\n\nFixes issue 3976.\n\nThe test data was generated by:\n# Create intermediate files; cjpeg on Ubuntu 10.04 can't read PNG.\nconvert video-001.png video-001.bmp\nconvert video-005.gray.png video-005.gray.pgm\n# Create new test files.\ncjpeg -quality 100 -sample 1x1,1x1,1x1 -progressive video-001.bmp > video-001.progressive.jpeg\ncjpeg -quality 50 -sample 2x2,1x1,1x1 video-001.bmp > video-001.q50.420.jpeg\ncjpeg -quality 50 -sample 2x1,1x1,1x1 video-001.bmp > video-001.q50.422.jpeg\ncjpeg -quality 50 -sample 1x1,1x1,1x1 video-001.bmp > video-001.q50.444.jpeg\ncjpeg -quality 50 -sample 2x2,1x1,1x1 -progressive video-001.bmp > video-001.q50.420.progressive.jpeg\ncjpeg -quality 50 -sample 2x1,1x1,1x1 -progressive video-001.bmp > video-001.q50.422.progressive.jpeg\ncjpeg -quality 50 -sample 1x1,1x1,1x1 -progressive video-001.bmp > video-001.q50.444.progressive.jpeg\ncjpeg -quality 50 video-005.gray.pgm > video-005.gray.q50.jpeg\ncjpeg -quality 50 -progressive video-005.gray.pgm > video-005.gray.q50.progressive.jpeg\n# Delete intermediate files.\nrm video-001.bmp video-005.gray.pgm",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=51f26e36ba98 ***\n\nimage/jpeg: decode progressive JPEGs.\n\nTo be clear, this supports decoding the bytes on the wire into an\nin-memory image. There is no API change: jpeg.Decode will still not\nreturn until the entire image is decoded.\n\nThe code is obviously more complicated, and costs around 10% in\nperformance on baseline JPEGs. The processSOS code could be cleaned up a\nbit, and maybe some of that loss can be reclaimed, but I'll leave that\nfor follow-up CLs, to keep the diff for this one as small as possible.\n\nBefore:\nBenchmarkDecode\t    1000\t   2855637 ns/op\t  21.64 MB/s\nAfter:\nBenchmarkDecodeBaseline\t     500\t   3178960 ns/op\t  19.44 MB/s\nBenchmarkDecodeProgressive\t     500\t   4082640 ns/op\t  15.14 MB/s\n\nFixes issue 3976.\n\nThe test data was generated by:\n# Create intermediate files; cjpeg on Ubuntu 10.04 can't read PNG.\nconvert video-001.png video-001.bmp\nconvert video-005.gray.png video-005.gray.pgm\n# Create new test files.\ncjpeg -quality 100 -sample 1x1,1x1,1x1 -progressive video-001.bmp > video-001.progressive.jpeg\ncjpeg -quality 50 -sample 2x2,1x1,1x1 video-001.bmp > video-001.q50.420.jpeg\ncjpeg -quality 50 -sample 2x1,1x1,1x1 video-001.bmp > video-001.q50.422.jpeg\ncjpeg -quality 50 -sample 1x1,1x1,1x1 video-001.bmp > video-001.q50.444.jpeg\ncjpeg -quality 50 -sample 2x2,1x1,1x1 -progressive video-001.bmp > video-001.q50.420.progressive.jpeg\ncjpeg -quality 50 -sample 2x1,1x1,1x1 -progressive video-001.bmp > video-001.q50.422.progressive.jpeg\ncjpeg -quality 50 -sample 1x1,1x1,1x1 -progressive video-001.bmp > video-001.q50.444.progressive.jpeg\ncjpeg -quality 50 video-005.gray.pgm > video-005.gray.q50.jpeg\ncjpeg -quality 50 -progressive video-005.gray.pgm > video-005.gray.q50.progressive.jpeg\n# Delete intermediate files.\nrm video-001.bmp video-005.gray.pgm\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/6684046",
			"disapproval": false,
			"date": "2012-10-15 00:21:38.098830",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader.go\nFile src/pkg/image/jpeg/reader.go (right):\n\nhttp://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader.go#newcode317\nsrc/pkg/image/jpeg/reader.go:317: // pixel co-ordinates is (16, 8) is the third block in the first row:\ns/is/are/\n\nhttp://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader.go#newcode318\nsrc/pkg/image/jpeg/reader.go:318: // mx0 is 2 and my0 is 0, even though it is in the second MCU.\ns/it/the pixel/\n\nhttp://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader.go#newcode348\nsrc/pkg/image/jpeg/reader.go:348: //\t3 4 5\nare all these possibilities covered by the test data?\n\nhttp://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader_test.go\nFile src/pkg/image/jpeg/reader_test.go (right):\n\nhttp://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader_test.go#newcode20\nsrc/pkg/image/jpeg/reader_test.go:20: check := func(prefix string, bounds image.Rectangle, pix0, pix1 []byte, stride0, stride1 int) (ok bool) {\nthis is a big function. why not move it outside? other than t you're not capturing any state.",
			"disapproval": false,
			"date": "2012-10-14 21:33:26.539610",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader.go\nFile src/pkg/image/jpeg/reader.go (right):\n\nhttps://codereview.appspot.com/6684046/diff/6017/src/pkg/image/jpeg/reader.go#newcode348\nsrc/pkg/image/jpeg/reader.go:348: //\t3 4 5\nOn 2012/10/14 21:33:26, r wrote:\n> are all these possibilities covered by the test data?\n\nAll the src/pkg/image/testdata images are 150x103 pixels, or 19x13 blocks, which don't span all the possibilities, but it does exercise this case. I do have a larger set of real-world progressive JPEGs of varying sizes and chroma subsampling ratios, based on a web crawl sample, but I don't think that it's appropriate to check those in.",
			"disapproval": false,
			"date": "2012-10-15 00:12:56.724260",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-14 07:25:52.931140",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6684046: image/jpeg: decode progressive JPEGs.",
	"created": "2012-10-14 07:25:05.345210",
	"patchsets": [
		1,
		3,
		1003,
		13003,
		12002,
		14003,
		6017,
		7024
	],
	"modified": "2012-10-15 00:21:39.892830",
	"closed": true,
	"issue": 6684046
}