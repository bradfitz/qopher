{
	"description": "go.crypto/ssh: add support for remote tcpip forwarding\n\nAdd support for server (remote) forwarded tcpip channels.\nSee RFC4254 Section 7.1",
	"cc": [
		"gustav.paul@gmail.com",
		"jeff@somethingsimilar.com",
		"agl@golang.org",
		"lieqiewang@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Works for me. I haven't driven anything fast through it but I tested the basic functionality and it works.\n\nhttp://codereview.appspot.com/6038047/diff/5003/ssh/tcpip.go\nFile ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/5003/ssh/tcpip.go#newcode50\nssh/tcpip.go:50: false, // no reply, assume it works\nis that a safe assumption?\n\nhttp://codereview.appspot.com/6038047/diff/5003/ssh/tcpip.go#newcode92\nssh/tcpip.go:92: l.forwards[i] = l.forwards[len(l.forwards)]\nshouldn't this be l.forwards[len(l.forwards)-1] ?",
			"disapproval": false,
			"date": "2012-04-16 20:46:01.759614",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"jeff@somethingsimilar.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6038047/diff/5003/ssh/tcpip.go\nFile ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/5003/ssh/tcpip.go#newcode50\nssh/tcpip.go:50: false, // no reply, assume it works\nMostly harmless.\n\nThis comment relates to the TODO at the top of the file, if the port is 0, then a reply message will contain the actual port chosen by the remote side. To support that, I need to support the reply message first.\n\nOn 2012/04/16 20:46:01, gpaul wrote:\n> is that a safe assumption?\n\nhttp://codereview.appspot.com/6038047/diff/5003/ssh/tcpip.go#newcode92\nssh/tcpip.go:92: l.forwards[i] = l.forwards[len(l.forwards)]\nYup - barf worthy. I'll rewrite it.\n\nOn 2012/04/16 20:46:01, gpaul wrote:\n> shouldn't this be l.forwards[len(l.forwards)-1] ?",
			"disapproval": false,
			"date": "2012-04-17 11:59:48.889984",
			"approval": false
		},
		{
			"sender": "lieqiewang@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "so let's assume \nssh server: ssh.example.com:22\n\nafter\nl, err := client.Listen(\"tcp\", \":1080\")\ndefer l.Close()\n\thttp.Serve(l, http.HandlerFunc(func(resp http.ResponseWriter, req\n*http.Request) {\n \t\t\tfmt.Fprintf(resp, \"Hello world!\\n\")\n \t}))\n\nhow can we get to the \"Hello world!\" web page.\n\nhttp://localhost:1080/\nhttp://ssh.example.com:1080/\nall refused.\nthe ssh server hasn't filter client ip.\nssh into ssh.example.com:22\nin the shell do\nwget http://localhost:1080/ \nrefused too.",
			"disapproval": false,
			"date": "2012-04-25 07:05:44.858492",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, jeff@somethingsimilar.com, agl@golang.org, lieqiewang@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-26 10:32:18.125721",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode278\nssh/client.go:278: return\nDone. I have no idea why I did not do that, I do later on in the method.\n\nOn 2012/04/23 15:12:04, agl1 wrote:\n> send channelOpenFailureMsg back?\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode313\nssh/client.go:313: func decodeAddr(b []byte) (*net.TCPAddr, error) {\nAdded, and I use the error in the failure message.\n\nOn 2012/04/23 15:12:04, agl1 wrote:\n> Needs a comment, probably referencing an RFC section.\n> \n> Also, since the caller ignores the contents of the error, maybe just return a\n> bool for that?\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode322\nssh/client.go:322: ip, err := net.ResolveIPAddr(\"tcp\", string(addr))\nOn 2012/04/23 15:12:04, agl1 wrote:\n> addr must be an IP address? If so, net.ParseIP may be better. ResolveIPAddr also\n> disallows \"tcp\" as a value of the net argument.\n\nAlthough net.Conn#RemoteAddr and friends return net.Adds', they dont' define equality so are hard to use internally. Also, this type of tunneled connection is only useful for stream connections, so *net.TCPAddr makes sense here. \n\nHaving said that, I don't want to try to resolve it, as it's already an IP, in string form, not a name, so you are correct that ParseIP is a better choice.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/example_test.go\nFile ssh/example_test.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/example_test.go#newcode141\nssh/example_test.go:141: l, err := conn.Listen(\"tcp\", \"0.0.0.0:8080\")\nOn 2012/04/24 04:48:16, lieqie wrote:\n> It doesn't open the specified port in fact.\n> I think in this case should need a \n> net.Dial(\"tcp\", \"127.0.0.1:8080\") to test it.\n\nThis is just an example, all the test harness guarantees is that it compiles. Is that what you meant ?\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go\nFile ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode67\nssh/tcpip.go:67: // forwardlist stores a mappin between remote\nOn 2012/04/23 15:12:04, agl1 wrote:\n> typo: mapping.\n\nDone.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode76\nssh/tcpip.go:76: c chan struct {\nOn 2012/04/23 15:12:04, agl1 wrote:\n> this struct has been written a few times - it probably deserves a name.\n\nYup - it was an interesting experiment with anon structs, but clearly neither the time nor the place.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode88\nssh/tcpip.go:88: f := forward{\nOn 2012/04/23 15:12:04, agl1 wrote:\n> Check for duplicates before appending? Otherwise Remove goes wrong.\n\nIs it possible to have a duplicate ? That would imply that the remote end had accepted two connections with the same IP:Port raddr.",
			"disapproval": false,
			"date": "2012-04-24 12:40:55.748513",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/client.go#newcode304\nssh/client.go:304: l <- struct {\nThis has a name now, right?\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go\nFile ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode76\nssh/tcpip.go:76: *net.TCPAddr\nI worry that this is excessive embedding. By not naming it, it's not clear what this is the address of. (The server's local address?)\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode106\nssh/tcpip.go:106: func (l *forwardlist) Lookup(addr *net.TCPAddr) (chan forwardEntry, bool) {\nforwardList?\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode129\nssh/tcpip.go:129: return &tcpchanconn{\ntcpChanConn?\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode130\nssh/tcpip.go:130: tcpchan: &tcpchan{\ntcpChan?",
			"disapproval": false,
			"date": "2012-04-24 15:03:30.385663",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, jeff@somethingsimilar.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-04-21 22:37:27.977240",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6038047/diff/22001/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode278\nssh/client.go:278: return\nsend channelOpenFailureMsg back?\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode313\nssh/client.go:313: func decodeAddr(b []byte) (*net.TCPAddr, error) {\nNeeds a comment, probably referencing an RFC section.\n\nAlso, since the caller ignores the contents of the error, maybe just return a bool for that?\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode322\nssh/client.go:322: ip, err := net.ResolveIPAddr(\"tcp\", string(addr))\naddr must be an IP address? If so, net.ParseIP may be better. ResolveIPAddr also disallows \"tcp\" as a value of the net argument.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go\nFile ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode67\nssh/tcpip.go:67: // forwardlist stores a mappin between remote\ntypo: mapping.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode76\nssh/tcpip.go:76: c chan struct {\nthis struct has been written a few times - it probably deserves a name.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode88\nssh/tcpip.go:88: f := forward{\nCheck for duplicates before appending? Otherwise Remove goes wrong.",
			"disapproval": false,
			"date": "2012-04-23 15:12:04.723628",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments agl, I will address them this evening. \n\nOn 24/04/2012, at 1:12, agl@golang.org wrote:\n\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/client.go\n> File ssh/client.go (right):\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode278\n> ssh/client.go:278: return\n> send channelOpenFailureMsg back?\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode313\n> ssh/client.go:313: func decodeAddr(b []byte) (*net.TCPAddr, error) {\n> Needs a comment, probably referencing an RFC section.\n> \n> Also, since the caller ignores the contents of the error, maybe just\n> return a bool for that?\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/client.go#newcode322\n> ssh/client.go:322: ip, err := net.ResolveIPAddr(\"tcp\", string(addr))\n> addr must be an IP address? If so, net.ParseIP may be better.\n> ResolveIPAddr also disallows \"tcp\" as a value of the net argument.\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go\n> File ssh/tcpip.go (right):\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode67\n> ssh/tcpip.go:67: // forwardlist stores a mappin between remote\n> typo: mapping.\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode76\n> ssh/tcpip.go:76: c chan struct {\n> this struct has been written a few times - it probably deserves a name.\n> \n> http://codereview.appspot.com/6038047/diff/22001/ssh/tcpip.go#newcode88\n> ssh/tcpip.go:88: f := forward{\n> Check for duplicates before appending? Otherwise Remove goes wrong.\n> \n> http://codereview.appspot.com/6038047/\n",
			"disapproval": false,
			"date": "2012-04-23 22:01:36.541649",
			"approval": false
		},
		{
			"sender": "lieqiewang@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It doesn't open the specified port in fact.\nI think in this case should need a \nnet.Dial(\"tcp\", \"127.0.0.1:8080\") to test it.\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/example_test.go\nFile ssh/example_test.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/22001/ssh/example_test.go#newcode141\nssh/example_test.go:141: l, err := conn.Listen(\"tcp\", \"0.0.0.0:8080\")\nIt doesn't open the specified port in fact.\nI think in this case should need a \nnet.Dial(\"tcp\", \"127.0.0.1:8080\") to test it.\n\nos:win7 msys go:go1",
			"disapproval": false,
			"date": "2012-04-24 04:48:16.553069",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, jeff@somethingsimilar.com, agl@golang.org, lieqiewang@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-24 13:04:43.732272",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, jeff@somethingsimilar.com, agl@golang.org, lieqiewang@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-25 03:14:34.391134",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=306e41c8d097&repo=crypto ***\n\ngo.crypto/ssh: add support for remote tcpip forwarding\n\nAdd support for server (remote) forwarded tcpip channels.\nSee RFC4254 Section 7.1\n\nR=gustav.paul, jeff, agl, lieqiewang\nCC=golang-dev\nhttp://codereview.appspot.com/6038047",
			"disapproval": false,
			"date": "2012-04-26 10:37:16.990758",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. I've rejigged the forward/forwardList/ForwardEntry to make a little more sense, and remove the excessive embedding.\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/client.go#newcode304\nssh/client.go:304: l <- struct {\nOn 2012/04/24 15:03:30, agl1 wrote:\n> This has a name now, right?\n\nDone.\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go\nFile ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode76\nssh/tcpip.go:76: *net.TCPAddr\nOn 2012/04/24 15:03:30, agl1 wrote:\n> I worry that this is excessive embedding. By not naming it, it's not clear what\n> this is the address of. (The server's local address?)\n\nThat is a fair comment, they don't need to be embedded, as forwardEntry shouldn't acquire any of their methods.\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode106\nssh/tcpip.go:106: func (l *forwardlist) Lookup(addr *net.TCPAddr) (chan forwardEntry, bool) {\nOn 2012/04/24 15:03:30, agl1 wrote:\n> forwardList?\n\nDone.\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode129\nssh/tcpip.go:129: return &tcpchanconn{\nOn 2012/04/24 15:03:30, agl1 wrote:\n> tcpChanConn?\n\nI'm fine with doing camel case, but I'd like to save it for a follow up CL. I have some other cleanup things I'd like to submit\n\nhttp://codereview.appspot.com/6038047/diff/29003/ssh/tcpip.go#newcode130\nssh/tcpip.go:130: tcpchan: &tcpchan{\nOn 2012/04/24 15:03:30, agl1 wrote:\n> tcpChan?\n\nSee above",
			"disapproval": false,
			"date": "2012-04-25 03:16:06.941018",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What you may be seeing is your ssh server filtering the hosts that can connect to it. For example on my system, no matter what I pass to client.Listen, the ssh daemon will only listen on the loopback. \n\n> if I change \n> l, err := client.Listen(\"tcp\", \":1080\")\n> to\n> l, err = net.Listen(\"tcp\", \":1080\") \n\nThis is because (assuming your connecting to an ssh daemon on your local machine), the first bind bound 127.0.0.1:1080 to your ssh daemon, the second net.Listen will bind :1080 on any other interface.\n\nLets take this discussion to the golang-nuts mailing list.",
			"disapproval": false,
			"date": "2012-04-25 05:57:22.035845",
			"approval": false
		},
		{
			"sender": "lieqiewang@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "// Request the remote side to open a port.\n\tl, err := client.Listen(\"tcp\", \":1080\")\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to register tcp forward: %v\", err)\n\t}\n\tlog.Println(\"ssh start successful on :1080\")\n\tdefer l.Close()\n\thttp.Serve(l, http.HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {\n \t\t\tfmt.Fprintf(resp, \"Hello world!\\n\")\n \t}))\n-----------------------------------\nthis code compile ok, run ok, but don't open port 1080 to listen for connections.\n-----------------------------------\nif I change \nl, err := client.Listen(\"tcp\", \":1080\")\nto\nl, err = net.Listen(\"tcp\", \":1080\") \nit works ok.",
			"disapproval": false,
			"date": "2012-04-25 04:06:38.618957",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"jeff@somethingsimilar.com",
				"agl@golang.org",
				"lieqiewang@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for the feedback. agl: I make the change to tcpChan{,Conn} in this CL.",
			"disapproval": false,
			"date": "2012-04-26 10:38:07.213648",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6038047: go.crypto/ssh: add support for remote tcpip forwarding",
	"created": "2012-04-15 05:15:40.088973",
	"patchsets": [
		1,
		2001,
		3,
		3003,
		8001,
		3004,
		9001,
		5003,
		14001,
		17001,
		20001,
		22001,
		30001,
		29003,
		34001,
		20010,
		36001
	],
	"modified": "2012-04-26 10:38:07.605755",
	"closed": true,
	"issue": 6038047
}