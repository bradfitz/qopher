{
	"description": "net/http/httputil: Clean up ReverseProxy maxLatencyWriter goroutines.\n\nWhen FlushInterval is specified on ReverseProxy, the ResponseWriter is\nwrapped with a maxLatencyWriter that periodically flushes in a\ngoroutine. That goroutine was not being cleaned up at the end of the\nrequest. This resulted in a panic when Flush() was being called on a\nResponseWriter that was closed.\n\nThe code was updated to always send the done message to the flushLoop()\ngoroutine after copying the body. Futhermore, the code was refactored to\nallow the test to verify the maxLatencyWriter behavior.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "cranger@google.com",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-04-13 18:51:07.887332",
			"approval": false
		},
		{
			"sender": "cranger@google.com",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-13 19:33:05.342474",
			"approval": false
		},
		{
			"sender": "cranger@google.com",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-16 17:34:16.657827",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go\nFile src/pkg/net/http/httputil/reverseproxy.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go#newcode40\nsrc/pkg/net/http/httputil/reverseproxy.go:40: wrapWriterCallback func(io.Writer)\nwhat is this?  just for testing?\n\nReverseProxy had no unexported state before.  I'd prefer it still didn't.  This could be a global variable instead, taking a *ReverseProxy first parameter.  but it still needs docs and/or a better name.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go#newcode170\nsrc/pkg/net/http/httputil/reverseproxy.go:170: m.done = nil\nwhy does it need to be zeroed?  just make the channel capacity 2, if that's the issue.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go#newcode182\nsrc/pkg/net/http/httputil/reverseproxy.go:182: if m.done != nil {\nthis seems racy, and you're reading/writing this field from different goroutines without any locking.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go\nFile src/pkg/net/http/httputil/reverseproxy_test.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go#newcode113\nsrc/pkg/net/http/httputil/reverseproxy_test.go:113: func TestReverseProxyFlushInterval(t *testing.T) {\nThe issue in the CL description is that goroutines are kept around.  Maybe you should test for that--- do a dozen requests and see if NumGoroutine holds steady, at least within some threshold.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go#newcode129\nsrc/pkg/net/http/httputil/reverseproxy_test.go:129: proxyHandler.wrapWriterCallback = func(dst io.Writer) {\nif this is part of the test, you should probably also verify that this function is ever called at all.\n\nI'd probably just make(chan bool, 1) and write a single value to it in the funtion:\n\nselect {\ncase callbackc <- true:\ndefault:\n}\n\nAnd verify it at the end of the function.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go#newcode150\nsrc/pkg/net/http/httputil/reverseproxy_test.go:150: frontend.Close()\njust defer this on line 136",
			"disapproval": false,
			"date": "2012-04-16 16:47:36.526429",
			"approval": false
		},
		{
			"sender": "cranger@google.com",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go\nFile src/pkg/net/http/httputil/reverseproxy.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go#newcode40\nsrc/pkg/net/http/httputil/reverseproxy.go:40: wrapWriterCallback func(io.Writer)\nOn 2012/04/16 16:47:36, bradfitz wrote:\n> what is this?  just for testing?\n> \n> ReverseProxy had no unexported state before.  I'd prefer it still didn't.  This\n> could be a global variable instead, taking a *ReverseProxy first parameter.  but\n> it still needs docs and/or a better name.\n\nDone. This is just for testing.  I wasn't sure about the best practice for this.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go#newcode111\nsrc/pkg/net/http/httputil/reverseproxy.go:111: res, err := transport.RoundTrip(outreq)\ndoesn't the body need to be closed too?\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go#newcode170\nsrc/pkg/net/http/httputil/reverseproxy.go:170: m.done = nil\nOn 2012/04/16 16:47:36, bradfitz wrote:\n> why does it need to be zeroed?  just make the channel capacity 2, if that's the\n> issue.\n\nIt doesn't need to be zero'd. removed.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy.go#newcode182\nsrc/pkg/net/http/httputil/reverseproxy.go:182: if m.done != nil {\nOn 2012/04/16 16:47:36, bradfitz wrote:\n> this seems racy, and you're reading/writing this field from different goroutines\n> without any locking.\n\nI'll remove the \"nil\" in the flushLoop so it doesn't seem racy.\n\nThis guard is only needed to protect against Write() never being called.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go\nFile src/pkg/net/http/httputil/reverseproxy_test.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go#newcode113\nsrc/pkg/net/http/httputil/reverseproxy_test.go:113: func TestReverseProxyFlushInterval(t *testing.T) {\nOn 2012/04/16 16:47:36, bradfitz wrote:\n> The issue in the CL description is that goroutines are kept around.  Maybe you\n> should test for that--- do a dozen requests and see if NumGoroutine holds\n> steady, at least within some threshold.\n\nDone.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go#newcode129\nsrc/pkg/net/http/httputil/reverseproxy_test.go:129: proxyHandler.wrapWriterCallback = func(dst io.Writer) {\nOn 2012/04/16 16:47:36, bradfitz wrote:\n> if this is part of the test, you should probably also verify that this function\n> is ever called at all.\n> \n> I'd probably just make(chan bool, 1) and write a single value to it in the\n> funtion:\n> \n> select {\n> case callbackc <- true:\n> default:\n> }\n> \n> And verify it at the end of the function.\n\nI'll just return the maxLatencyWriter on a blocking channel.\n\nhttp://codereview.appspot.com/6033043/diff/4005/src/pkg/net/http/httputil/reverseproxy_test.go#newcode150\nsrc/pkg/net/http/httputil/reverseproxy_test.go:150: frontend.Close()\nOn 2012/04/16 16:47:36, bradfitz wrote:\n> just defer this on line 136\n\nDone.",
			"disapproval": false,
			"date": "2012-04-16 17:34:36.255099",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go\nFile src/pkg/net/http/httputil/reverseproxy.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go#newcode22\nsrc/pkg/net/http/httputil/reverseproxy.go:22: var beforeCopyResponse func(io.Writer)\nmight as well name the parameter (\"dst\") here\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go#newcode185\nsrc/pkg/net/http/httputil/reverseproxy.go:185: if m.done != nil {\ndone is guarded by m.lk.  You should Lock & Unlock it here like is done in lines 158 & 159 probably.\n\nOr: why don't we just always initialize the done channel on line 130, if we're always writing to it now, right?  What's the advantage of setting it up lazily?\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go\nFile src/pkg/net/http/httputil/reverseproxy_test.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode143\nsrc/pkg/net/http/httputil/reverseproxy_test.go:143: for i := 0; i < 100; i++ {\nhow long goes this test take?  I'm wondering if it should be behind test.Short()\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode151\nsrc/pkg/net/http/httputil/reverseproxy_test.go:151: t.Errorf(\"got body %q; expected %q\", string(bodyBytes), expected)\ndon't need the string() here.  %q works on bytes too.\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode153\nsrc/pkg/net/http/httputil/reverseproxy_test.go:153: if mlw := <-mlwChan; mlw.done == nil {\nthis will block forever if it wasn't called, though, so you'll never get your error message on the next line.\n\nYou might do instead:\n\ncalled := false\nselect {\ncase mlw := <-mlwChan:\n    if mlw.done != nil { called = true }\ndefault:\n}\nif !called {\n  ....\n}\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode159\nsrc/pkg/net/http/httputil/reverseproxy_test.go:159: if num := runtime.NumGoroutine(); initGoroutines+20 < num {\nI'd say:\n\nif delta := runtime.NumGoroutine() - initGoroutines; delta > 20 {\n      t.Errorf(\"grew %d goroutines; leak?\", delta)\n}",
			"disapproval": false,
			"date": "2012-04-16 20:22:40.318541",
			"approval": false
		},
		{
			"sender": "cranger@google.com",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go\nFile src/pkg/net/http/httputil/reverseproxy.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go#newcode22\nsrc/pkg/net/http/httputil/reverseproxy.go:22: var beforeCopyResponse func(io.Writer)\nOn 2012/04/16 20:22:40, bradfitz wrote:\n> might as well name the parameter (\"dst\") here\n\nDone.\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go#newcode185\nsrc/pkg/net/http/httputil/reverseproxy.go:185: if m.done != nil {\nOn 2012/04/16 20:22:40, bradfitz wrote:\n> done is guarded by m.lk.  You should Lock & Unlock it here like is done in lines\n> 158 & 159 probably.\n> \n> Or: why don't we just always initialize the done channel on line 130, if we're\n> always writing to it now, right?  What's the advantage of setting it up lazily?\n\nDone.\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go\nFile src/pkg/net/http/httputil/reverseproxy_test.go (right):\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode143\nsrc/pkg/net/http/httputil/reverseproxy_test.go:143: for i := 0; i < 100; i++ {\nOn 2012/04/16 20:22:40, bradfitz wrote:\n> how long goes this test take?  I'm wondering if it should be behind test.Short()\n\nIt seems to take about 80ms on my machine. I added the guard.\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode151\nsrc/pkg/net/http/httputil/reverseproxy_test.go:151: t.Errorf(\"got body %q; expected %q\", string(bodyBytes), expected)\nOn 2012/04/16 20:22:40, bradfitz wrote:\n> don't need the string() here.  %q works on bytes too.\n\nDone.\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode153\nsrc/pkg/net/http/httputil/reverseproxy_test.go:153: if mlw := <-mlwChan; mlw.done == nil {\nOn 2012/04/16 20:22:40, bradfitz wrote:\n> this will block forever if it wasn't called, though, so you'll never get your\n> error message on the next line.\n> \n> You might do instead:\n> \n> called := false\n> select {\n> case mlw := <-mlwChan:\n>     if mlw.done != nil { called = true }\n> default:\n> }\n> if !called {\n>   ....\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode159\nsrc/pkg/net/http/httputil/reverseproxy_test.go:159: if num := runtime.NumGoroutine(); initGoroutines+20 < num {\nOn 2012/04/16 20:22:40, bradfitz wrote:\n> I'd say:\n> \n> if delta := runtime.NumGoroutine() - initGoroutines; delta > 20 {\n>       t.Errorf(\"grew %d goroutines; leak?\", delta)\n> }\n\nDone. I had to up the max delta to 50 too.",
			"disapproval": false,
			"date": "2012-04-16 21:32:43.538739",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Apr 16, 2012 at 2:32 PM, <cranger@google.com> wrote:\n\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy.go<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go>\n> File src/pkg/net/http/httputil/**reverseproxy.go (right):\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy.go#**newcode22<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go#newcode22>\n> src/pkg/net/http/httputil/**reverseproxy.go:22: var beforeCopyResponse\n> func(io.Writer)\n> On 2012/04/16 20:22:40, bradfitz wrote:\n>\n>> might as well name the parameter (\"dst\") here\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy.go#**newcode185<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy.go#newcode185>\n> src/pkg/net/http/httputil/**reverseproxy.go:185: if m.done != nil {\n> On 2012/04/16 20:22:40, bradfitz wrote:\n>\n>> done is guarded by m.lk.  You should Lock & Unlock it here like is\n>>\n> done in lines\n>\n>> 158 & 159 probably.\n>>\n>\n>  Or: why don't we just always initialize the done channel on line 130,\n>>\n> if we're\n>\n>> always writing to it now, right?  What's the advantage of setting it\n>>\n> up lazily?\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy_**test.go<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go>\n> File src/pkg/net/http/httputil/**reverseproxy_test.go (right):\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy_**test.go#newcode143<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode143>\n> src/pkg/net/http/httputil/**reverseproxy_test.go:143: for i := 0; i < 100;\n> i++ {\n> On 2012/04/16 20:22:40, bradfitz wrote:\n>\n>> how long goes this test take?  I'm wondering if it should be behind\n>>\n> test.Short()\n>\n> It seems to take about 80ms on my machine. I added the guard.\n>\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy_**test.go#newcode151<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode151>\n> src/pkg/net/http/httputil/**reverseproxy_test.go:151: t.Errorf(\"got body\n> %q; expected %q\", string(bodyBytes), expected)\n> On 2012/04/16 20:22:40, bradfitz wrote:\n>\n>> don't need the string() here.  %q works on bytes too.\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy_**test.go#newcode153<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode153>\n> src/pkg/net/http/httputil/**reverseproxy_test.go:153: if mlw := <-mlwChan;\n> mlw.done == nil {\n> On 2012/04/16 20:22:40, bradfitz wrote:\n>\n>> this will block forever if it wasn't called, though, so you'll never\n>>\n> get your\n>\n>> error message on the next line.\n>>\n>\n>  You might do instead:\n>>\n>\n>  called := false\n>> select {\n>> case mlw := <-mlwChan:\n>>     if mlw.done != nil { called = true }\n>> default:\n>> }\n>> if !called {\n>>   ....\n>> }\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**6033043/diff/2004/src/pkg/net/**\n> http/httputil/reverseproxy_**test.go#newcode159<http://codereview.appspot.com/6033043/diff/2004/src/pkg/net/http/httputil/reverseproxy_test.go#newcode159>\n> src/pkg/net/http/httputil/**reverseproxy_test.go:159: if num :=\n> runtime.NumGoroutine(); initGoroutines+20 < num {\n> On 2012/04/16 20:22:40, bradfitz wrote:\n>\n>> I'd say:\n>>\n>\n>  if delta := runtime.NumGoroutine() - initGoroutines; delta > 20 {\n>>       t.Errorf(\"grew %d goroutines; leak?\", delta)\n>> }\n>>\n>\n> Done. I had to up the max delta to 50 too.\n>\n> http://codereview.appspot.com/**6033043/<http://codereview.appspot.com/6033043/>\n>\n",
			"disapproval": false,
			"date": "2012-04-18 18:32:49.457118",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cranger@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a615b796570a ***\n\nnet/http/httputil: Clean up ReverseProxy maxLatencyWriter goroutines.\n\nWhen FlushInterval is specified on ReverseProxy, the ResponseWriter is\nwrapped with a maxLatencyWriter that periodically flushes in a\ngoroutine. That goroutine was not being cleaned up at the end of the\nrequest. This resulted in a panic when Flush() was being called on a\nResponseWriter that was closed.\n\nThe code was updated to always send the done message to the flushLoop()\ngoroutine after copying the body. Futhermore, the code was refactored to\nallow the test to verify the maxLatencyWriter behavior.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6033043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-04-18 18:34:29.703877",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"cranger@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "--- FAIL: TestReverseProxyFlushInterval-42 (0.07 seconds)\nreverseproxy_test.go:165: grew 88 goroutines; leak?\n\nOn 2012/04/18 18:34:29, bradfitz wrote:\n> *** Submitted as http://code.google.com/p/go/source/detail?r=a615b796570a ***\n> \n> net/http/httputil: Clean up ReverseProxy maxLatencyWriter goroutines.\n> \n> When FlushInterval is specified on ReverseProxy, the ResponseWriter is\n> wrapped with a maxLatencyWriter that periodically flushes in a\n> goroutine. That goroutine was not being cleaned up at the end of the\n> request. This resulted in a panic when Flush() was being called on a\n> ResponseWriter that was closed.\n> \n> The code was updated to always send the done message to the flushLoop()\n> goroutine after copying the body. Futhermore, the code was refactored to\n> allow the test to verify the maxLatencyWriter behavior.\n> \n> R=golang-dev, bradfitz\n> CC=golang-dev\n> http://codereview.appspot.com/6033043\n> \n> Committer: Brad Fitzpatrick <mailto:bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-04-19 06:11:08.372467",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is that GOMAXPROCS > 1?\n\nCould you try adding a runtime.Gosched / GC / time.Sleep (yes, gross) in\nthere somewhere just to narrow down where it is?  I'll look tomorrow too.\n\nOn Wed, Apr 18, 2012 at 11:11 PM, <fullung@gmail.com> wrote:\n\n> --- FAIL: TestReverseProxyFlushInterval-**42 (0.07 seconds)\n> reverseproxy_test.go:165: grew 88 goroutines; leak?\n>\n>\n> On 2012/04/18 18:34:29, bradfitz wrote:\n>\n>> *** Submitted as\n>>\n> http://code.google.com/p/go/**source/detail?r=a615b796570a<http://code.google.com/p/go/source/detail?r=a615b796570a>***\n>\n>  net/http/httputil: Clean up ReverseProxy maxLatencyWriter goroutines.\n>>\n>\n>  When FlushInterval is specified on ReverseProxy, the ResponseWriter is\n>> wrapped with a maxLatencyWriter that periodically flushes in a\n>> goroutine. That goroutine was not being cleaned up at the end of the\n>> request. This resulted in a panic when Flush() was being called on a\n>> ResponseWriter that was closed.\n>>\n>\n>  The code was updated to always send the done message to the\n>>\n> flushLoop()\n>\n>> goroutine after copying the body. Futhermore, the code was refactored\n>>\n> to\n>\n>> allow the test to verify the maxLatencyWriter behavior.\n>>\n>\n>  R=golang-dev, bradfitz\n>> CC=golang-dev\n>> http://codereview.appspot.com/**6033043<http://codereview.appspot.com/6033043>\n>>\n>\n>  Committer: Brad Fitzpatrick <mailto:bradfitz@golang.org>\n>>\n>\n>\n> http://codereview.appspot.com/**6033043/<http://codereview.appspot.com/6033043/>\n>\n",
			"disapproval": false,
			"date": "2012-04-19 06:16:47.879135",
			"approval": false
		},
		{
			"sender": "cranger@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This test seems too dependent on the behavior of the scheduler.  I could\ngreatly simplify this if I just checked that the flushLoop() returned. Here\nis what I am thinking:\nhttp://codereview.appspot.com/6068046\n\nOn Wed, Apr 18, 2012 at 11:23 PM, <fullung@gmail.com> wrote:\n\n> I think it's GOMAXPROCS 42 based on the test name that was printed:\n>\n> TestReverseProxyFlushInterval-**42\n>\n> We've started doing the following in our ~/.bash_profiles and in Jenkins\n> jobs:\n>\n> export GOMAXPROCS=$[ 1 + $[ RANDOM % 128 ]]\n>\n> Seems crazy, but it's very useful.\n>\n>\n> On 2012/04/19 06:16:47, bradfitz wrote:\n>\n>> Is that GOMAXPROCS > 1?\n>>\n>\n>  Could you try adding a runtime.Gosched / GC / time.Sleep (yes, gross)\n>>\n> in\n>\n>> there somewhere just to narrow down where it is?  I'll look tomorrow\n>>\n> too.\n>\n>  On Wed, Apr 18, 2012 at 11:11 PM, <mailto:fullung@gmail.com> wrote:\n>>\n>\n>  > --- FAIL: TestReverseProxyFlushInterval-****42 (0.07 seconds)\n>>\n>> > reverseproxy_test.go:165: grew 88 goroutines; leak?\n>> >\n>> >\n>> > On 2012/04/18 18:34:29, bradfitz wrote:\n>> >\n>> >> *** Submitted as\n>> >>\n>> >\n>>\n>\n> http://code.google.com/p/go/****source/detail?r=a615b796570a%**\n> 3Chttp://code.google.com/p/go/**source/detail?r=a615b796570a%**3E***<http://code.google.com/p/go/**source/detail?r=a615b796570a%3Chttp://code.google.com/p/go/source/detail?r=a615b796570a%3E***>\n>\n>  >\n>> >  net/http/httputil: Clean up ReverseProxy maxLatencyWriter\n>>\n> goroutines.\n>\n>> >>\n>> >\n>> >  When FlushInterval is specified on ReverseProxy, the ResponseWriter\n>>\n> is\n>\n>> >> wrapped with a maxLatencyWriter that periodically flushes in a\n>> >> goroutine. That goroutine was not being cleaned up at the end of\n>>\n> the\n>\n>> >> request. This resulted in a panic when Flush() was being called on\n>>\n> a\n>\n>> >> ResponseWriter that was closed.\n>> >>\n>> >\n>> >  The code was updated to always send the done message to the\n>> >>\n>> > flushLoop()\n>> >\n>> >> goroutine after copying the body. Futhermore, the code was\n>>\n> refactored\n>\n>> >>\n>> > to\n>> >\n>> >> allow the test to verify the maxLatencyWriter behavior.\n>> >>\n>> >\n>> >  R=golang-dev, bradfitz\n>> >> CC=golang-dev\n>> >>\n>>\n>\n> http://codereview.appspot.com/****6033043%3Chttp://codereview.**\n> appspot.com/6033043<http://codereview.appspot.com/**6033043%3Chttp://codereview.appspot.com/6033043>\n> >\n>\n>  >>\n>> >\n>> >  Committer: Brad Fitzpatrick <mailto:bradfitz@golang.org>\n>> >>\n>> >\n>> >\n>> >\n>>\n>\n> http://codereview.appspot.com/****6033043/%3Chttp://**\n> codereview.appspot.com/**6033043/<http://codereview.appspot.com/**6033043/%3Chttp://codereview.appspot.com/6033043/>\n> >\n>\n>> >\n>>\n>\n>\n> http://codereview.appspot.com/**6033043/<http://codereview.appspot.com/6033043/>\n>\n",
			"disapproval": false,
			"date": "2012-04-19 15:24:54.171198",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"cranger@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it's GOMAXPROCS 42 based on the test name that was printed:\n\nTestReverseProxyFlushInterval-42\n\nWe've started doing the following in our ~/.bash_profiles and in Jenkins jobs:\n\nexport GOMAXPROCS=$[ 1 + $[ RANDOM % 128 ]]\n\nSeems crazy, but it's very useful.\n\nOn 2012/04/19 06:16:47, bradfitz wrote:\n> Is that GOMAXPROCS > 1?\n> \n> Could you try adding a runtime.Gosched / GC / time.Sleep (yes, gross) in\n> there somewhere just to narrow down where it is?  I'll look tomorrow too.\n> \n> On Wed, Apr 18, 2012 at 11:11 PM, <mailto:fullung@gmail.com> wrote:\n> \n> > --- FAIL: TestReverseProxyFlushInterval-**42 (0.07 seconds)\n> > reverseproxy_test.go:165: grew 88 goroutines; leak?\n> >\n> >\n> > On 2012/04/18 18:34:29, bradfitz wrote:\n> >\n> >> *** Submitted as\n> >>\n> >\n> http://code.google.com/p/go/**source/detail?r=a615b796570a%3Chttp://code.google.com/p/go/source/detail?r=a615b796570a%3E***\n> >\n> >  net/http/httputil: Clean up ReverseProxy maxLatencyWriter goroutines.\n> >>\n> >\n> >  When FlushInterval is specified on ReverseProxy, the ResponseWriter is\n> >> wrapped with a maxLatencyWriter that periodically flushes in a\n> >> goroutine. That goroutine was not being cleaned up at the end of the\n> >> request. This resulted in a panic when Flush() was being called on a\n> >> ResponseWriter that was closed.\n> >>\n> >\n> >  The code was updated to always send the done message to the\n> >>\n> > flushLoop()\n> >\n> >> goroutine after copying the body. Futhermore, the code was refactored\n> >>\n> > to\n> >\n> >> allow the test to verify the maxLatencyWriter behavior.\n> >>\n> >\n> >  R=golang-dev, bradfitz\n> >> CC=golang-dev\n> >>\n> http://codereview.appspot.com/**6033043%3Chttp://codereview.appspot.com/6033043>\n> >>\n> >\n> >  Committer: Brad Fitzpatrick <mailto:bradfitz@golang.org>\n> >>\n> >\n> >\n> >\n> http://codereview.appspot.com/**6033043/%3Chttp://codereview.appspot.com/6033043/>\n> >",
			"disapproval": false,
			"date": "2012-04-19 06:23:40.534731",
			"approval": false
		}
	],
	"owner_email": "cranger@google.com",
	"private": false,
	"base_url": "",
	"owner": "cranger",
	"subject": "code review 6033043: net/http/httputil: Clean up ReverseProxy maxLatencyWrit...",
	"created": "2012-04-13 18:40:13.900422",
	"patchsets": [
		2001,
		11001,
		4005,
		2004,
		18001
	],
	"modified": "2012-04-19 06:23:40.691096",
	"closed": true,
	"issue": 6033043
}