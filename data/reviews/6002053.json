{
	"description": "net: fix race between Close and Read\n\nFixes issue 3507.\n\nApplied the suggested fix from rsc. If the connection\nis in closing state then errClosing will bubble up to\nthe caller.\n\nThe fix has been applied to udp, ip and unix as well as\ntheir code path include nil'ing c.fd on close. Func\ntests are available in the linked issue that verified\nthe bug existed there as well.",
	"cc": [
		"rsc@golang.org",
		"fullung@gmail.com",
		"alex.brainman@gmail.com",
		"mikioh.mikioh@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"n13m3y3r@gmail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello Devon, Alex and Mikio. \n\nWould you please review this change. Functional test cases are available in the comments of issue 3507.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-04-14 10:11:07.379305",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Removed the local err variable, just return c.fd.Close()",
			"disapproval": false,
			"date": "2012-04-14 09:12:25.533804",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this only a TCP socket problem or could UNIX and UDP also be affected?",
			"disapproval": false,
			"date": "2012-04-14 09:27:04.213617",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-04-14 09:10:20.953635",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I could not run your netstress.go from http://code.google.com/p/go/issues/detail?id=3507#c2. It fails with WSAEADDRINUSE:\n\ndial tcp 127.0.0.1:9999: Only one usage of each socket address (protocol/network address/port) is normally permitted.\n\nIf I ignore these, I get different error (ERROR_NETNAME_DELETED):\n\nAcceptEx tcp 127.0.0.1:9999: The specified network name is no longer available.\n\nIf I ignore these, I get different error (ERROR_OPERATION_ABORTED):\n\nAcceptEx tcp 127.0.0.1:9999: The I/O operation has been aborted because of either a thread exit or an application request.\n\nan so on. So your test program is very flaky on Windows. I can't check if your fix makes any difference.\n\nYour udpstress.go test runs fine before and after your CL applied. So no difference here.\n\nunixstress.go does not work, because Windows does not have unix sockets.\n\nI didn't look into your issue enough to make a judgement. Leaving up to others to decide on this change. Even if it will break some windows programs we could investigate it then.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-16 01:53:09.700465",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-14 09:11:39.872216",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Excellent point.\n\nI had reviewed tcpsock_posix.go for potential side effects of this\nchange but neglected the other protocols (udp, ip, unix).\n",
			"disapproval": false,
			"date": "2012-04-14 09:45:07.087473",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Alex. I'll have another look at the TCP test this evening. \n\nOn 16/04/2012, at 11:53, alex.brainman@gmail.com wrote:\n\n> I could not run your netstress.go from\n> http://code.google.com/p/go/issues/detail?id=3507#c2. It fails with\n> WSAEADDRINUSE:\n> \n> dial tcp 127.0.0.1:9999: Only one usage of each socket address\n> (protocol/network address/port) is normally permitted.\n> \n> If I ignore these, I get different error (ERROR_NETNAME_DELETED):\n> \n> AcceptEx tcp 127.0.0.1:9999: The specified network name is no longer\n> available.\n> \n> If I ignore these, I get different error (ERROR_OPERATION_ABORTED):\n> \n> AcceptEx tcp 127.0.0.1:9999: The I/O operation has been aborted because\n> of either a thread exit or an application request.\n> \n> an so on. So your test program is very flaky on Windows. I can't check\n> if your fix makes any difference.\n> \n> Your udpstress.go test runs fine before and after your CL applied. So no\n> difference here.\n> \n> unixstress.go does not work, because Windows does not have unix sockets.\n> \n> I didn't look into your issue enough to make a judgement. Leaving up to\n> others to decide on this change. Even if it will break some windows\n> programs we could investigate it then.\n> \n> Alex\n> \n> http://codereview.appspot.com/6002053/\n",
			"disapproval": false,
			"date": "2012-04-16 02:30:48.598826",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for late response.\n\nhttp://codereview.appspot.com/6002053/diff/6002/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttp://codereview.appspot.com/6002053/diff/6002/src/pkg/net/iprawsock_posix.go#newcode63\nsrc/pkg/net/iprawsock_posix.go:63: func (c *IPConn) ok() bool { return c != nil && c.fd != nil }\nyou may drop \"c.fd != nil\" and add other validation if you like.",
			"disapproval": false,
			"date": "2012-04-17 01:25:08.958082",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your review Mikio.\n\nhttp://codereview.appspot.com/6002053/diff/6002/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttp://codereview.appspot.com/6002053/diff/6002/src/pkg/net/iprawsock_posix.go#newcode63\nsrc/pkg/net/iprawsock_posix.go:63: func (c *IPConn) ok() bool { return c != nil && c.fd != nil }\nOn 2012/04/17 01:25:09, mikioh wrote:\n> you may drop \"c.fd != nil\" and add other validation if you like.\n\nI'm not sure about removing the c.fd != nil check just yet. I'd like to think about the cases where c.fd is assigned a bit more.",
			"disapproval": false,
			"date": "2012-04-17 09:17:38.545028",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "@brainman, could you please try this version of the tcp test\n\nhttp://code.google.com/p/go/issues/detail?id=3507#c9\n\nI've bound the listening and dialing sockets to tcp4 which may (I hope) have been the problem.",
			"disapproval": false,
			"date": "2012-04-18 06:52:49.991215",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/18 06:52:49, dfc wrote:\n> @brainman, could you please try this version of the tcp test\n> \n\nSame as before:\n\n2012/04/19 09:35:36 AcceptEx tcp4 127.0.0.1:9999: The specified network name is no longer available.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-18 23:40:05.803565",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 20, 2012 at 1:12 AM, Dave Cheney <dave@cheney.net> wrote:\n>\n> ... My best guess is\n> this is a problem resolving the dns name inside net.Dial.\n>\n> Can you please try this version, setting GOMAXPROCS=100\n>\n\nSure. Same error message:\n\n2012/04/20 11:11:04 AcceptEx tcp4 127.0.0.1:2222: The specified network name is no longer available.\n\nI do not think this has anything to do with dns. I think new connection arrives and gets disconnected so quick, that by the time Accept discover new connection and tries accepting it, it is already gone. I think Accept is confused. It reports new connection back to us, but since connection is already disconnected, it signals error.\n\nI am guessing here :-)\n\nDave, I suggest, you ignore windows. Proceed with your change. I am not concerned about your sample program does not work on windows. No one should be doing that anyway.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-20 01:25:33.782338",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Alex,\n\nThank you for your diagnosis, your explanation sounds plausible. The\nstress test does rely on some uncivilised socket usage to trigger the\noriginal race.\n\nAssuming no further discussion, I plan to submit this tomorrow morning\nwhen I'll have time to debug any build breakage.\n\nCheers\n\nDave\n\nOn Fri, Apr 20, 2012 at 11:25 AM,  <alex.brainman@gmail.com> wrote:\n> On Fri, Apr 20, 2012 at 1:12 AM, Dave Cheney <dave@cheney.net> wrote:\n>\n>> ... My best guess is\n>>\n>> this is a problem resolving the dns name inside net.Dial.\n>\n>\n>> Can you please try this version, setting GOMAXPROCS=100\n>\n>\n>\n> Sure. Same error message:\n>\n> 2012/04/20 11:11:04 AcceptEx tcp4 127.0.0.1:2222: The specified network\n>\n> name is no longer available.\n>\n> I do not think this has anything to do with dns. I think new connection\n> arrives and gets disconnected so quick, that by the time Accept discover\n> new connection and tries accepting it, it is already gone. I think\n> Accept is confused. It reports new connection back to us, but since\n> connection is already disconnected, it signals error.\n>\n> I am guessing here :-)\n>\n> Dave, I suggest, you ignore windows. Proceed with your change. I am not\n> concerned about your sample program does not work on windows. No one\n> should be doing that anyway.\n>\n> Alex\n>\n> http://codereview.appspot.com/6002053/\n",
			"disapproval": false,
			"date": "2012-04-20 02:02:30.960325",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5f24ff99b5f1 ***\n\nnet: fix race between Close and Read\n\nFixes issue 3507.\n\nApplied the suggested fix from rsc. If the connection\nis in closing state then errClosing will bubble up to\nthe caller.\n\nThe fix has been applied to udp, ip and unix as well as\ntheir code path include nil'ing c.fd on close. Func\ntests are available in the linked issue that verified\nthe bug existed there as well.\n\nR=rsc, fullung, alex.brainman, mikioh.mikioh\nCC=golang-dev\nhttp://codereview.appspot.com/6002053",
			"disapproval": false,
			"date": "2012-04-21 00:01:51.653826",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"alex.brainman@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the fix Dave. Just got a report from someone\naffected by this bug as well.",
			"disapproval": false,
			"date": "2012-04-25 18:01:53.358787",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6002053: net: fix race between Close and Read",
	"created": "2012-04-14 08:33:46.836881",
	"patchsets": [
		1,
		2001,
		5001,
		4003,
		6002,
		19001
	],
	"modified": "2012-04-25 18:01:53.558429",
	"closed": true,
	"issue": 6002053
}