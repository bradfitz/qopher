{
	"description": "bytes/cord: new package for Cord type.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1037042/diff/5001/6002\nFile src/pkg/bytes/cord.go (right):\n\nhttp://codereview.appspot.com/1037042/diff/5001/6002#newcode15\nsrc/pkg/bytes/cord.go:15: seq   *list.List\nIs insertion int the middle ever desirable?  If so you could use a (doubly) linked list of []byte ?\n\nhttp://codereview.appspot.com/1037042/diff/5001/6002#newcode38\nsrc/pkg/bytes/cord.go:38: }\nn = len(p)\nif n > {\n  c.seq.PushBack(p)\n  c.total += len(p)\n}\nreturn",
			"disapproval": false,
			"date": "2010-05-01 06:55:03.128486",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-05-01 04:40:59.249819",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "It's a good idea to discuss design before writing significant new code.  This medium is not the best for design discussions.\n\nhttp://codereview.appspot.com/1037042/diff/5001/6002\nFile src/pkg/bytes/cord.go (right):\n\nhttp://codereview.appspot.com/1037042/diff/5001/6002#newcode8\nsrc/pkg/bytes/cord.go:8: \"container/list\"\npackage bytes is fundamental. it must have very few dependencies. this adds one and it should not.  it should certainly not add one of the containers, which are placeholders at best.\n\nanother option is that this package should not be part of bytes. i don't think it should, since it is sure to grow and acquire all the intricate interfaces of the strings and bytes packages.\n\nhttp://codereview.appspot.com/1037042/diff/5001/6002#newcode42\nsrc/pkg/bytes/cord.go:42: // WriteStart prepends the contents of p to the cord.\nprepend is not a word.",
			"disapproval": false,
			"date": "2010-05-01 05:02:09.372695",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sat, May 1, 2010 at 5:02 AM,  <r@golang.org> wrote:\n\n> It's a good idea to discuss design before writing significant new code.\n> This medium is not the best for design discussions.\n\nI really didn't think this was a significant enough amount of code to\nwarrant that, but sure.\n\n> package bytes is fundamental. it must have very few dependencies. this\n> adds one and it should not. \u00a0it should certainly not add one of the\n> containers, which are placeholders at best.\n\nOkay, I can implement this without container/list. How about making it\na [][]byte where the outer slice is resized on-demand?\n\n> another option is that this package should not be part of bytes. i don't\n> think it should, since it is sure to grow and acquire all the intricate\n> interfaces of the strings and bytes packages.\n\nHere's a few alternatives. Let me know what you'd like:\n  - bytes/cord\n  - cord\n  - container/cord\n\n\nDave.\n",
			"disapproval": false,
			"date": "2010-05-01 06:41:04.315038",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1037042/diff/5001/6002\nFile src/pkg/bytes/cord.go (right):\n\nhttp://codereview.appspot.com/1037042/diff/5001/6002#newcode15\nsrc/pkg/bytes/cord.go:15: seq   *list.List\nOn 2010/05/01 06:55:03, cw wrote:\n> Is insertion int the middle ever desirable?  If so you could use a (doubly)\n> linked list of []byte ?\n\nThere is no intention to support inserting anywhere but the start or end.\n\nAs Rob mentioned, a dependence on container/list (which implements a doubly-linked list) needs to be removed from here.",
			"disapproval": false,
			"date": "2010-05-01 07:00:17.413875",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "bytes/cord sounds good; even there it would be best\nnot to depend on container/list.\n",
			"disapproval": false,
			"date": "2010-05-01 19:59:45.216529",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "why is it a cord?\n\nOn Saturday, May 1, 2010, Russ Cox <rsc@google.com> wrote:\n> bytes/cord sounds good; even there it would be best\n> not to depend on container/list.\n>\n",
			"disapproval": false,
			"date": "2010-05-01 20:28:05.479295",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1037042/diff/15001/7\nFile src/pkg/cord/cord.go (right):\n\nhttp://codereview.appspot.com/1037042/diff/15001/7#newcode5\nsrc/pkg/cord/cord.go:5: package cord\nIs the name 'cord' used in a software context elsewhere? I couldn't find it.\n\nI like the name, though, in the sense that a cord is a piece of rope made from entwined pieces of thread. (syn: a cord is a slice of bytes made from concatenated slices of bytes)\n\nhttp://codereview.appspot.com/1037042/diff/15001/7#newcode72\nsrc/pkg/cord/cord.go:72: func (c *Cord) WriteStart(p []byte) {\nWriteStart is a confusing name to me. Whether 'Start' is a noun or a verb is ambiguous and drastically changes its meaning. What about 'Insert'?\n\nhttp://codereview.appspot.com/1037042/diff/15001/7#newcode91\nsrc/pkg/cord/cord.go:91: func (c *Cord) WriteCord(oc *Cord) {\nThis should have a doc comment.",
			"disapproval": false,
			"date": "2010-05-02 00:24:05.246034",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "- Gone with bytes/cord\n\n- A cord data structure is similar to a rope. A rope is a binary tree\nwhere the leaves are strings, so you can think of a cord as a\nflattened rope. It's a trade-off between the space efficiency and the\nspeed of operations such as concatenation and iteration.\n\n- WriteStart is now WriteFront. I avoided Insert because it makes it\nsound like you can insert into the middle of the cord.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2010-05-02 01:23:11.103678",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn May 1, 2010, at 6:23 PM, David Symonds wrote:\n\n> - Gone with bytes/cord\n> \n> - A cord data structure is similar to a rope. A rope is a binary tree\n> where the leaves are strings, so you can think of a cord as a\n> flattened rope. It's a trade-off between the space efficiency and the\n> speed of operations such as concatenation and iteration.\n> \n> - WriteStart is now WriteFront. I avoided Insert because it makes it\n> sound like you can insert into the middle of the cord.\n\nif there's a tradition for this idea outside of google i'll back off, but this data structure seems too specialized.  what i was expecting to see was more like an editable slice of bytes where i could cut and paste pieces at any valid offset in the slice.  if we had such a thing, it would completely subsume this package and would probably be used more often.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2010-05-02 15:36:36.702670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The name and idea originated at Xerox.\n\n    Boehm, Atkinson, and Plass, \"Ropes: An Alternative to Strings\",\n    Software Practice and Experience 25, 12 (Dec 1995), pp. 1315-1330.\n\nCords are slimmed down ropes.\n\nI just got a chance to look at the implementation.\nI too was expecting a richer API, with ReadAt, WriteAt, Insert,\nmaybe even Seek.\n\nDavid, if all you need is Write at beginning *and* you know ahead\nof time how much you're going to need to write (just not what),\nyou can write zero bytes as a placeholder and then go back\nlater and copy(b.Bytes(), realdata).  This pattern happens in a\ncouple places in existing Go code.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-05-02 20:32:11.899610",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "There's obviously a path forward to enhance this API to add methods\nlike what Russ mentions, but I have no immediate need for them. I'll\njust drop this CL and go back to the previous implementation I had in\ngoprotobuf which was two Buffers.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2010-05-02 22:34:27.437410",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2010-10-19 03:51:04.906680",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2010-12-04 02:52:55.187151",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 1037042: bytes: add a Cord type.",
	"created": "2010-05-01 04:37:45.674503",
	"patchsets": [
		1,
		2001,
		5001,
		13001,
		15001,
		20001
	],
	"modified": "2010-12-04 02:52:55.187151",
	"closed": false,
	"issue": 1037042
}