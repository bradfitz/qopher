{
	"description": "bufio: make Reader buffer transient\n\nShare garbage between different bufio Readers. When a Reader\nhas zero buffered data, put its buffer into a pool.\n\nThis acknowledges that most bufio.Readers eventually get\nread to completion, and their buffers are then no longer\nneeded.\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkReaderEmpty         2993         1058  -64.65%\n\nbenchmark              old allocs   new allocs    delta\nBenchmarkReaderEmpty            3            2  -33.33%\n\nbenchmark               old bytes    new bytes    delta\nBenchmarkReaderEmpty         4278          133  -96.89%\n\nUpdate Issue 5100",
	"cc": [
		"r@golang.org",
		"adg@golang.org",
		"dvyukov@google.com",
		"gobot@golang.org",
		"golang-dev@googlegroups.com",
		"rogpeppe@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-12 23:26:53.981140",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go#newcode193\nsrc/pkg/bufio/bufio.go:193: if b.r == b.w {\nI think you can drop this comparison. You make it inside putBuf anyway (maybe make it the first comparison in putBuf?)\n\nhttps://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go#newcode222\nsrc/pkg/bufio/bufio.go:222: if b.buf == nil {\nditto this one",
			"disapproval": false,
			"date": "2013-05-12 23:55:23.719070",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go#newcode79\nsrc/pkg/bufio/bufio.go:79: for i := range b.buf {\nwhy zero this?",
			"disapproval": false,
			"date": "2013-05-12 23:57:53.556600",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go#newcode79\nsrc/pkg/bufio/bufio.go:79: for i := range b.buf {\nOn 2013/05/12 23:57:53, adg wrote:\n> why zero this?\n\nthe same question I wanted to ask",
			"disapproval": false,
			"date": "2013-05-13 04:00:32.453790",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go#newcode79\nsrc/pkg/bufio/bufio.go:79: for i := range b.buf {\nOn 2013/05/13 04:00:32, dvyukov wrote:\n> On 2013/05/12 23:57:53, adg wrote:\n> > why zero this?\n> \n> the same question I wanted to ask\n\nJust so the behavior is observably identical as before.\n\nWithout this, it's possible for a user to use ReadSlice and extend the slice past its length and see a different user's old buffer.  The contract permits that, but I wanted to show that you can act the same as behavior and still be faster.\n\nOnce https://code.google.com/p/go/issues/detail?id=5373 is fixed, this will matter much less. I'd prefer to keep it.",
			"disapproval": false,
			"date": "2013-05-13 04:07:59.980300",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go#newcode78\nsrc/pkg/bufio/bufio.go:78: case b.buf = <-bufCache:\nis this right when b.bufSize != defaultBufSize?\nISTM that we can return a buffer that's not of the size requested by NewReaderSize in that case.",
			"disapproval": false,
			"date": "2013-05-14 16:00:33.637230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, dvyukov@google.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-14 16:19:27.758150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Good catch!\r\n\r\nPTAL.\r\n\r\n\r\n\r\nOn Tue, May 14, 2013 at 9:00 AM, <rogpeppe@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/8819049/diff/8001/src/pkg/**\r\n> bufio/bufio.go<https://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go>\r\n> File src/pkg/bufio/bufio.go (right):\r\n>\r\n> https://codereview.appspot.**com/8819049/diff/8001/src/pkg/**\r\n> bufio/bufio.go#newcode78<https://codereview.appspot.com/8819049/diff/8001/src/pkg/bufio/bufio.go#newcode78>\r\n> src/pkg/bufio/bufio.go:78: case b.buf = <-bufCache:\r\n> is this right when b.bufSize != defaultBufSize?\r\n> ISTM that we can return a buffer that's not of the size requested by\r\n> NewReaderSize in that case.\r\n>\r\n> https://codereview.appspot.**com/8819049/<https://codereview.appspot.com/8819049/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-14 16:19:35.686110",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=r (assigned by bradfitz)",
			"disapproval": false,
			"date": "2013-05-14 22:14:36.658070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode61\nsrc/pkg/bufio/bufio.go:61: if size != defaultBufSize {\nwhy not\nif size > defaultBufSize\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode76\nsrc/pkg/bufio/bufio.go:76: // bufCache only holds byte slices of defaultBufSize\n// bufCache holds byte slices only of length defaultBufSize\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode77\nsrc/pkg/bufio/bufio.go:77: var bufCache = make(chan []byte, 8)\npull 8 out as a named (private) constant? makes it nicer and safer to change later if we want.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode81\nsrc/pkg/bufio/bufio.go:81: func (b *Reader) allocBuf() {\nshould be getBuf to complement putBuf\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode111\nsrc/pkg/bufio/bufio.go:111: if b.buf == nil {\nlooks like it should be above the if b.r > 0 case, although i doubt it actually matters.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode195\nsrc/pkg/bufio/bufio.go:195: if b.r == b.w {\nmy gut tells me this is too aggressive. there are synchronization operations involved in putbuf and allocbuf so it feels expensive, but it does reduce the memory maybe faster. but i haven't thought it out. what's your reasoning?\n\nalso, every call is guarded by b.r==b.w. i suggest putting that check into putBuf, which makes the code nicer but also means we can put the policy in exactly one place.",
			"disapproval": false,
			"date": "2013-05-15 19:48:35.596530",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"dvyukov@google.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bce231eb0fdd ***\n\nbufio: make Reader buffer transient\n\nShare garbage between different bufio Readers. When a Reader\nhas zero buffered data, put its buffer into a pool.\n\nThis acknowledges that most bufio.Readers eventually get\nread to completion, and their buffers are then no longer\nneeded.\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkReaderEmpty         2993         1058  -64.65%\n\nbenchmark              old allocs   new allocs    delta\nBenchmarkReaderEmpty            3            2  -33.33%\n\nbenchmark               old bytes    new bytes    delta\nBenchmarkReaderEmpty         4278          133  -96.89%\n\nUpdate Issue 5100\n\nR=r\nCC=adg, dvyukov, gobot, golang-dev, rogpeppe\nhttps://codereview.appspot.com/8819049",
			"disapproval": false,
			"date": "2013-05-17 22:16:14.708970",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done. PTAL.\n\nThe buffer is only recycled on EOF now.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode61\nsrc/pkg/bufio/bufio.go:61: if size != defaultBufSize {\nOn 2013/05/15 19:48:35, r wrote:\n> why not\n> if size > defaultBufSize\n\nDone.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode76\nsrc/pkg/bufio/bufio.go:76: // bufCache only holds byte slices of defaultBufSize\nOn 2013/05/15 19:48:35, r wrote:\n> // bufCache holds byte slices only of length defaultBufSize\n\nDone.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode77\nsrc/pkg/bufio/bufio.go:77: var bufCache = make(chan []byte, 8)\nOn 2013/05/15 19:48:35, r wrote:\n> pull 8 out as a named (private) constant? makes it nicer and safer to change\n> later if we want.\n\nDone.  Better: added a TODO to make this a sync.Cache.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode81\nsrc/pkg/bufio/bufio.go:81: func (b *Reader) allocBuf() {\nOn 2013/05/15 19:48:35, r wrote:\n> should be getBuf to complement putBuf\n\nIt doesn't return anything, though, so getBuf sounds wrong.  It makes the buf exist, but it doesn't get it.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode111\nsrc/pkg/bufio/bufio.go:111: if b.buf == nil {\nOn 2013/05/15 19:48:35, r wrote:\n> looks like it should be above the if b.r > 0 case, although i doubt it actually\n> matters.\n\nIf b.r > 0, there has to be a buf, but done.\n\nhttps://codereview.appspot.com/8819049/diff/18001/src/pkg/bufio/bufio.go#newcode195\nsrc/pkg/bufio/bufio.go:195: if b.r == b.w {\nOn 2013/05/15 19:48:35, r wrote:\n> my gut tells me this is too aggressive. there are synchronization operations\n> involved in putbuf and allocbuf so it feels expensive, but it does reduce the\n> memory maybe faster. but i haven't thought it out. what's your reasoning?\n> \n> also, every call is guarded by b.r==b.w. i suggest putting that check into\n> putBuf, which makes the code nicer but also means we can put the policy in\n> exactly one place.\n\nI changed it to only return the buffer on io.EOF, which is the common case.",
			"disapproval": false,
			"date": "2013-05-17 21:31:31.406260",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"rogpeppe@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-17 21:50:30.241960",
			"approval": true
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8819049: bufio: make Reader buffer transient",
	"created": "2013-04-28 06:34:53.584330",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		18001,
		24001,
		27002
	],
	"modified": "2013-05-17 21:50:30.241960",
	"closed": true,
	"issue": 8819049
}