{
	"description": "image/jpeg: change block from [64]int to [64]int32.\n\nOn 6g/linux:\nbenchmark                     old ns/op    new ns/op    delta\nBenchmarkFDCT                      4606         4241   -7.92%\nBenchmarkIDCT                      4187         3923   -6.31%\nBenchmarkDecodeBaseline         3154864      3170224   +0.49%\nBenchmarkDecodeProgressive      4072812      4017132   -1.37%\nBenchmarkEncode                39406920     34596760  -12.21%\n\nStack requirements before (from 'go tool 6g -S'):\n(scan.go:37) TEXT    (*decoder).processSOS+0(SB),$1352-32\n(writer.go:448) TEXT    (*encoder).writeSOS+0(SB),$5344-24\n\nafter:\n(scan.go:37) TEXT    (*decoder).processSOS+0(SB),$1064-32\n(writer.go:448) TEXT    (*encoder).writeSOS+0(SB),$2520-24\n\nAlso, in encoder.writeSOS, re-use the yBlock scratch buffer for Cb and\nCr. This reduces the stack requirement slightly, but also avoids an\nunlucky coincidence where a BenchmarkEncode stack split lands between\nencoder.writeByte and bufio.Writer.WriteByte, which occurs very often\nduring Huffman encoding and is otherwise disasterous for the final\nbenchmark number. FWIW, the yBlock re-use *without* the s/int/int32/\nchange does not have a noticable effect on the benchmarks.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=959dee37d03d ***\n\nimage/jpeg: change block from [64]int to [64]int32.\n\nOn 6g/linux:\nbenchmark                     old ns/op    new ns/op    delta\nBenchmarkFDCT                      4606         4241   -7.92%\nBenchmarkIDCT                      4187         3923   -6.31%\nBenchmarkDecodeBaseline         3154864      3170224   +0.49%\nBenchmarkDecodeProgressive      4072812      4017132   -1.37%\nBenchmarkEncode                39406920     34596760  -12.21%\n\nStack requirements before (from 'go tool 6g -S'):\n(scan.go:37) TEXT    (*decoder).processSOS+0(SB),$1352-32\n(writer.go:448) TEXT    (*encoder).writeSOS+0(SB),$5344-24\n\nafter:\n(scan.go:37) TEXT    (*decoder).processSOS+0(SB),$1064-32\n(writer.go:448) TEXT    (*encoder).writeSOS+0(SB),$2520-24\n\nAlso, in encoder.writeSOS, re-use the yBlock scratch buffer for Cb and\nCr. This reduces the stack requirement slightly, but also avoids an\nunlucky coincidence where a BenchmarkEncode stack split lands between\nencoder.writeByte and bufio.Writer.WriteByte, which occurs very often\nduring Huffman encoding and is otherwise disasterous for the final\nbenchmark number. FWIW, the yBlock re-use *without* the s/int/int32/\nchange does not have a noticable effect on the benchmarks.\n\nR=r\nCC=golang-dev, rsc\nhttp://codereview.appspot.com/6823043",
			"disapproval": false,
			"date": "2012-10-30 00:11:08.479720",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-29 05:22:15.538130",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-29 14:42:50.167400",
			"approval": true
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6823043: image/jpeg: change block from [64]int to [64]int32.",
	"created": "2012-10-29 05:21:54.013450",
	"patchsets": [
		1,
		2001,
		2002,
		5007
	],
	"modified": "2012-10-30 00:11:10.595410",
	"closed": true,
	"issue": 6823043
}