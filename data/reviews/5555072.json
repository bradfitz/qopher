{
	"description": "gc: softer criteria for inlinability.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-23 12:50:13.528234",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode272\nsrc/cmd/gc/inl.c:272: n->op = OCONVNOP;\nPlease put the old code back.  I want the logic about how to\nattach a ninit to an arbitrary expression node in exactly one\nplace.  It is too subtle to duplicate.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode312\nsrc/cmd/gc/inl.c:312: reordercallleft(Node *n)\nOkay, take 2:\n\nstatic NodeList*\ninllist(Node *n)\n{\n    NodeList *l;\n\n    if(n->op != OINLCALL || n->list == nil)\n        fatal(\"inllist\");\n\n    l = n->list;\n    addinit(&n->list->n, n->ninit);\n    return l;\n}\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode435\nsrc/cmd/gc/inl.c:435: reordercallleft(n);\nn->list = inllist(n->list->n);\n\nNo reordercallleft; no inlgluelist.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode452\nsrc/cmd/gc/inl.c:452: reorderas2list(n);\nn->rlist = inllist(n->rlist->n);\n\nNo reorderas2list; no inlgluerlist.",
			"disapproval": false,
			"date": "2012-01-26 14:40:49.959099",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/23 12:50:13, lvd wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\n(this was pulled out of the CL that now just has the ordering fixes)",
			"disapproval": false,
			"date": "2012-01-23 15:09:13.942238",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 26, 2012 at 15:13,  <rsc@golang.org> wrote:\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c\n> File src/cmd/gc/inl.c (right):\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode17\n> src/cmd/gc/inl.c:17: // \u00a0 \u00a0 \u00a05: transitive inlining\n> // These additional levels (beyond -l) may be buggy and are not\n> supported.\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode87\n> src/cmd/gc/inl.c:87: // not a definition.\n> // If fn has no body (is defined outside of Go), cannot inline it.\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode96\n> src/cmd/gc/inl.c:96: // old tight criterion for inlining\n> Delete. \u00a0If we're going to do this, let's make it the\n> default and start finding bugs. \u00a0Otherwise it won't\n> happen for Go 1.\n\nok.\n\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode272\n> src/cmd/gc/inl.c:272: n->op = OCONVNOP;\n> Please put the old code back.\n> It avoided creating unnecessary OCONVNOPs.\n\ni dont think so.  because INLCALL->rlist->n is always an ONAME, so\naddinit would just create a new OCONVNOP and tag the members of this\none on it.  Now we reuse what was the OCALLxxx.  (In an earlier\nversion, before i introduced OINLCALL, i'd directly convet the OCALL\nto a OCONVNOP with an ninit, but later i introduced the separate node\ntype because the decision of how to patch it in, as a statment,\nexpression, or otherwise is best made after the mkinlcall returns)\n\n\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode312\n> src/cmd/gc/inl.c:312: reordercallleft(Node *n)\n> Delete.\n> The inliner has no business worrying about this stuff.\n> If these are necessary, then order.c is broken.\n> I am assuming these are dregs from before your order.c fix.\n\nnope.  apart from conv2stmt and conv2expr, there are 2 cases in which\nthe OINLCALL itself is disposed of and its list has to be glued into\nthe enclosing list or rlist.  we then have to put the inlbody\n/somewhere/ and it can only go on the ninit of the enclosing node.\nthere's noway order() can fix that if i mess it up here.\n\n\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode331\n> src/cmd/gc/inl.c:331: reorderas2list(Node *n)\n> Delete.\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode435\n> src/cmd/gc/inl.c:435: reordercallleft(n);\n> Delete.\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode452\n> src/cmd/gc/inl.c:452: reorderas2list(n);\n> Delete.\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode680\n> src/cmd/gc/inl.c:680: // transitive inlining\n> // Transitive inlining (experimental, not supported).\n>\n> http://codereview.appspot.com/5555072/\n",
			"disapproval": false,
			"date": "2012-01-26 14:19:05.276573",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=47fe3b1af323 ***\n\ngc: softer criteria for inlinability.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5555072",
			"disapproval": false,
			"date": "2012-01-26 16:20:54.375023",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5555072/diff/11004/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5555072/diff/11004/src/cmd/gc/inl.c#newcode97\nsrc/cmd/gc/inl.c:97: // old tight criterion for inlining\n// Allow inlining of code with fewer than 40 nodes.\n\n(not sure what \"old\" means)\n\nhttp://codereview.appspot.com/5555072/diff/11004/src/cmd/gc/inl.c#newcode122\nsrc/cmd/gc/inl.c:122: ishairylist(NodeList *ll, int* budget)\ns/* / */\n\nhttp://codereview.appspot.com/5555072/diff/11004/src/cmd/gc/inl.c#newcode163\nsrc/cmd/gc/inl.c:163: return 1;\nadd\nbreak;\n\njust so that when we add more cases we don't forget?\ni forget regularly when coming from Go code.\n\nhttp://codereview.appspot.com/5555072/diff/11004/src/cmd/gc/inl.c#newcode277\nsrc/cmd/gc/inl.c:277: addinit(&n->rlist->n, concat(n->ninit, n->nbody));\ns/n->rlist/l/\n\nhttp://codereview.appspot.com/5555072/diff/11004/src/cmd/gc/inl.c#newcode352\nsrc/cmd/gc/inl.c:352: n ->list = inlconv2list(n->list->n);\ns/n ->/n->/\n\nhttp://codereview.appspot.com/5555072/diff/11004/src/cmd/gc/inl.c#newcode364\nsrc/cmd/gc/inl.c:364: n ->list = inlconv2list(n->list->n);\ns/n ->/n->/",
			"disapproval": false,
			"date": "2012-01-26 16:05:38.664665",
			"approval": true
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-26 13:58:08.595122",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode17\nsrc/cmd/gc/inl.c:17: //      5: transitive inlining\n// These additional levels (beyond -l) may be buggy and are not supported.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode87\nsrc/cmd/gc/inl.c:87: // not a definition.\n// If fn has no body (is defined outside of Go), cannot inline it.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode96\nsrc/cmd/gc/inl.c:96: // old tight criterion for inlining\nDelete.  If we're going to do this, let's make it the\ndefault and start finding bugs.  Otherwise it won't\nhappen for Go 1.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode272\nsrc/cmd/gc/inl.c:272: n->op = OCONVNOP;\nPlease put the old code back.\nIt avoided creating unnecessary OCONVNOPs.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode312\nsrc/cmd/gc/inl.c:312: reordercallleft(Node *n)\nDelete.\nThe inliner has no business worrying about this stuff.\nIf these are necessary, then order.c is broken.\nI am assuming these are dregs from before your order.c fix.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode331\nsrc/cmd/gc/inl.c:331: reorderas2list(Node *n)\nDelete.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode435\nsrc/cmd/gc/inl.c:435: reordercallleft(n);\nDelete.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode452\nsrc/cmd/gc/inl.c:452: reorderas2list(n);\nDelete.\n\nhttp://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode680\nsrc/cmd/gc/inl.c:680: // transitive inlining\n// Transitive inlining (experimental, not supported).",
			"disapproval": false,
			"date": "2012-01-26 14:13:36.039369",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all done and everything passes with the default -l\n\nOn Thu, Jan 26, 2012 at 15:40,  <rsc@golang.org> wrote:\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c\n> File src/cmd/gc/inl.c (right):\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode272\n> src/cmd/gc/inl.c:272: n->op = OCONVNOP;\n> Please put the old code back. \u00a0I want the logic about how to\n> attach a ninit to an arbitrary expression node in exactly one\n> place. \u00a0It is too subtle to duplicate.\n>\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode312\n> src/cmd/gc/inl.c:312: reordercallleft(Node *n)\n> Okay, take 2:\n\naaah, thats cheating.  of course. genius.\n\n>\n> static NodeList*\n> inllist(Node *n)\n> {\n> \u00a0 \u00a0NodeList *l;\n>\n> \u00a0 \u00a0if(n->op != OINLCALL || n->list == nil)\n> \u00a0 \u00a0 \u00a0 \u00a0fatal(\"inllist\");\n>\n> \u00a0 \u00a0l = n->list;\n\nyou mean rlist, but it works nicely.  maybe i can also merge the return case in.\n\n> \u00a0 \u00a0addinit(&n->list->n, n->ninit);\n> \u00a0 \u00a0return l;\n>\n> }\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode435\n> src/cmd/gc/inl.c:435: reordercallleft(n);\n> n->list = inllist(n->list->n);\n>\n> No reordercallleft; no inlgluelist.\n>\n>\n> http://codereview.appspot.com/5555072/diff/9001/src/cmd/gc/inl.c#newcode452\n> src/cmd/gc/inl.c:452: reorderas2list(n);\n> n->rlist = inllist(n->rlist->n);\n>\n> No reorderas2list; no inlgluerlist.\n>\n> http://codereview.appspot.com/5555072/\n",
			"disapproval": false,
			"date": "2012-01-26 15:54:36.359098",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5555072: gc: softer criteria for inlinability.",
	"created": "2012-01-22 11:19:22.591366",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		4004,
		9001,
		11004,
		13001,
		12002
	],
	"modified": "2012-01-26 16:20:56.694188",
	"closed": true,
	"issue": 5555072
}