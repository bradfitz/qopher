{
	"description": "net/url: parse file URL with host omitted\r\n\r\nModified both url.Parse and url.String to explicitely account for differences in the file:// scheme\r\nFixes issue 4189",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"adg@golang.org"
	],
	"messages": [
		{
			"sender": "alakriti@gmail.com",
			"recipients": [
				"alakriti@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/12 03:58:16, rsc wrote:\n> s/properly // too\n\nupdated. PTAL",
			"disapproval": false,
			"date": "2012-12-12 04:00:22.795800",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 12, 2012 at 6:00 AM, <alakriti@gmail.com> wrote:\r\n\r\n> Does this raise a bigger question between this issue and the other of\r\n> whether or url.Parse should be ok with ///, and it's up to the caller to\r\n> determine whether the empty host/authority is valid for that particular\r\n> scheme? do we put clauses in for specific schemes, or do we parse\r\n> everything we can, then return that along with possibly an error\r\n> specific to the scheme that they could choose to ignore?\r\n>\r\n\r\nGo 1 already allowed successful parses of http URLs without Hosts:\r\n\r\n     http://play.golang.org/p/fur6PZdZXu\r\n\r\nurl.Parse(\"http:///path\") -> &url.URL{Scheme:\"http\", Opaque:\"\",\r\nUser:(*url.Userinfo)(nil), Host:\"\", Path:\"///path\", RawQuery:\"\",\r\nFragment:\"\"}\r\n\r\nSo I think it's fine to keep doing that.  Let's just fix the Path to be\r\ncorrect for all schemes (file, http(s), etc).\r\n\r\nI've made the error message for HTTP readable in\r\nhttp://code.google.com/p/go/source/detail?r=61e3278a earlier today.\r\n",
			"disapproval": false,
			"date": "2012-12-12 21:29:36.570820",
			"approval": false
		},
		{
			"sender": "alakriti@gmail.com",
			"recipients": [
				"alakriti@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I've modified the description as requested.\n\nThanks,\nErik",
			"disapproval": false,
			"date": "2012-12-12 01:38:09.463230",
			"approval": false
		},
		{
			"sender": "alakriti@gmail.com",
			"recipients": [
				"alakriti@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No worries, i'll pickup the formatting etc. of these types of things you guys like along the way.\n\nI considered that it might be too specific as well, doing a check for file, but it turns out that each scheme can define it's own idea of whether an empty host/authority is acceptable, or defaulted.\n\nhttps://code.google.com/p/go/issues/detail?id=4271 is a prime example, for http and https schemes a missing host is considered invalid. I plan on submitting a patch to account for that case as well once a decision has been made if url.Parse should return an error, or if the caller is responsible for checking for an empty host.\n\nOn 2012/12/12 04:24:16, rsc wrote:\n> Thanks for putting up with the subject bikeshedding.\n> I think the fix might be too narrowly applied.\n> \n> https://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go\n> File src/pkg/net/url/url.go (right):\n> \n> https://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go#newcode390\n> src/pkg/net/url/url.go:390: if (url.Scheme != \"\" || !viaRequest) &&\n> strings.HasPrefix(rest, \"//\") && (!strings.HasPrefix(rest, \"///\") || url.Scheme\n> == \"file\") {\n> I understand that the CL is trying to make sure file:///foo ends up with Path ==\n> \"/foo\" and not Path == \"///foo\".\n> \n> However, why is file a special case? We still turn https:///foo into Path ==\n> \"///foo. What's different about file? \n> \n> I don't understand why this isn't a more general fix, like removing the ///\n> clause entirely.\n> \n> https://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go#newcode446\n> src/pkg/net/url/url.go:446: // file scheme can have an empty host\n> Is file:/tmp a valid URL? That's what this code used to produce. Unless it's\n> invalid, we should preserve the existing behavior. I would support\n> || strings.HasPrefix(u.Path, \"//\") instead of || u.Scheme == \"file\".",
			"disapproval": false,
			"date": "2012-12-12 04:32:30.978730",
			"approval": false
		},
		{
			"sender": "alakriti@gmail.com",
			"recipients": [
				"alakriti@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this raise a bigger question between this issue and the other of whether or url.Parse should be ok with ///, and it's up to the caller to determine whether the empty host/authority is valid for that particular scheme? do we put clauses in for specific schemes, or do we parse everything we can, then return that along with possibly an error specific to the scheme that they could choose to ignore?\n\nI'm happy to modify this patch to go with popular opinion.\n\nOn 2012/12/12 04:32:30, erikstmartin wrote:\n> No worries, i'll pickup the formatting etc. of these types of things you guys\n> like along the way.\n> \n> I considered that it might be too specific as well, doing a check for file, but\n> it turns out that each scheme can define it's own idea of whether an empty\n> host/authority is acceptable, or defaulted.\n> \n> https://code.google.com/p/go/issues/detail?id=4271 is a prime example, for http\n> and https schemes a missing host is considered invalid. I plan on submitting a\n> patch to account for that case as well once a decision has been made if\n> url.Parse should return an error, or if the caller is responsible for checking\n> for an empty host.\n> \n> On 2012/12/12 04:24:16, rsc wrote:\n> > Thanks for putting up with the subject bikeshedding.\n> > I think the fix might be too narrowly applied.\n> > \n> > https://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go\n> > File src/pkg/net/url/url.go (right):\n> > \n> >\n> https://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go#newcode390\n> > src/pkg/net/url/url.go:390: if (url.Scheme != \"\" || !viaRequest) &&\n> > strings.HasPrefix(rest, \"//\") && (!strings.HasPrefix(rest, \"///\") ||\n> url.Scheme\n> > == \"file\") {\n> > I understand that the CL is trying to make sure file:///foo ends up with Path\n> ==\n> > \"/foo\" and not Path == \"///foo\".\n> > \n> > However, why is file a special case? We still turn https:///foo into Path ==\n> > \"///foo. What's different about file? \n> > \n> > I don't understand why this isn't a more general fix, like removing the ///\n> > clause entirely.\n> > \n> >\n> https://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go#newcode446\n> > src/pkg/net/url/url.go:446: // file scheme can have an empty host\n> > Is file:/tmp a valid URL? That's what this code used to produce. Unless it's\n> > invalid, we should preserve the existing behavior. I would support\n> > || strings.HasPrefix(u.Path, \"//\") instead of || u.Scheme == \"file\".",
			"disapproval": false,
			"date": "2012-12-12 14:00:26.133540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Subject could be more clear:\r\n\r\nproperly parse file URL with host omitted\r\nOn Dec 11, 2012 4:53 PM, <alakriti@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n>       net/url: properly parse url with file scheme and host omitted\r\n>\r\n> Modified both url.Parse and url.String to explicitely account for\r\n> differences in the file:// scheme\r\n> Fixes issue 4189\r\n>\r\n> Please review this at https://codereview.appspot.**com/6931047/<https://codereview.appspot.com/6931047/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/url/url.go\r\n>   M src/pkg/net/url/url_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/url/url.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/url/url.go\r\n> +++ b/src/pkg/net/url/url.go\r\n> @@ -386,7 +386,8 @@\r\n>                 }\r\n>         }\r\n>\r\n> -       if (url.Scheme != \"\" || !viaRequest) && strings.HasPrefix(rest,\r\n> \"//\") && !strings.HasPrefix(rest, \"///\") {\r\n> +       // file scheme can have an empty host, which would appear as ///,\r\n> so it's ignored\r\n> +       if (url.Scheme != \"\" || !viaRequest) && strings.HasPrefix(rest,\r\n> \"//\") && (!strings.HasPrefix(rest, \"///\") || url.Scheme == \"file\") {\r\n>                 var authority string\r\n>                 authority, rest = split(rest[2:], '/', false)\r\n>                 url.User, url.Host, err = parseAuthority(authority)\r\n> @@ -442,7 +443,8 @@\r\n>         if u.Opaque != \"\" {\r\n>                 result += u.Opaque\r\n>         } else {\r\n> -               if u.Host != \"\" || u.User != nil {\r\n> +               // file scheme can have an empty host\r\n> +               if u.Host != \"\" || u.User != nil || u.Scheme == \"file\" {\r\n>                         result += \"//\"\r\n>                         if u := u.User; u != nil {\r\n>                                 result += u.String() + \"@\"\r\n> Index: src/pkg/net/url/url_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/url/url_test.go\r\n> +++ b/src/pkg/net/url/url_test.go\r\n> @@ -242,6 +242,26 @@\r\n>                 },\r\n>                 \"http://www.google.com/?q=go+**language#foo&bar<http://www.google.com/?q=go+language#foo&bar>\r\n> \",\r\n>         },\r\n> +       // file scheme with host\r\n> +       {\r\n> +               \"file://localhost/foo\",\r\n> +               &URL{\r\n> +                       Scheme: \"file\",\r\n> +                       Host:   \"localhost\",\r\n> +                       Path:   \"/foo\",\r\n> +               },\r\n> +               \"file://localhost/foo\",\r\n> +       },\r\n> +       // file scheme with host omitted\r\n> +       {\r\n> +               \"file:///foo/bar\",\r\n> +               &URL{\r\n> +                       Scheme: \"file\",\r\n> +                       Host:   \"\",\r\n> +                       Path:   \"/foo/bar\",\r\n> +               },\r\n> +               \"file:///foo/bar\",\r\n> +       },\r\n>  }\r\n>\r\n>  // more useful string for debugging than fmt's struct printer\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-11 22:04:12.478190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "s/properly // too\r\n",
			"disapproval": false,
			"date": "2012-12-12 03:58:16.965560",
			"approval": false
		},
		{
			"sender": "alakriti@gmail.com",
			"recipients": [
				"alakriti@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-11 20:40:53.580930",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alakriti@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for putting up with the subject bikeshedding.\nI think the fix might be too narrowly applied.\n\nhttps://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttps://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go#newcode390\nsrc/pkg/net/url/url.go:390: if (url.Scheme != \"\" || !viaRequest) && strings.HasPrefix(rest, \"//\") && (!strings.HasPrefix(rest, \"///\") || url.Scheme == \"file\") {\nI understand that the CL is trying to make sure file:///foo ends up with Path == \"/foo\" and not Path == \"///foo\".\n\nHowever, why is file a special case? We still turn https:///foo into Path == \"///foo. What's different about file? \n\nI don't understand why this isn't a more general fix, like removing the /// clause entirely.\n\nhttps://codereview.appspot.com/6931047/diff/3003/src/pkg/net/url/url.go#newcode446\nsrc/pkg/net/url/url.go:446: // file scheme can have an empty host\nIs file:/tmp a valid URL? That's what this code used to produce. Unless it's invalid, we should preserve the existing behavior. I would support\n|| strings.HasPrefix(u.Path, \"//\") instead of || u.Scheme == \"file\".",
			"disapproval": false,
			"date": "2012-12-12 04:24:16.847540",
			"approval": false
		},
		{
			"sender": "alakriti@gmail.com",
			"recipients": [
				"alakriti@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've updated the description as requested. PTAL\n\nErik\n\nOn 2012/12/11 22:04:12, bradfitz wrote:\n> Subject could be more clear:\n> \n> properly parse file URL with host omitted\n> On Dec 11, 2012 4:53 PM, <mailto:alakriti@gmail.com> wrote:\n> \n> > Reviewers: http://golang-dev_googlegroups.com,\n> >\n> > Message:\n> > Hello mailto:golang-dev@googlegroups.com,\n> >\n> > I'd like you to review this change to\n> > https://code.google.com/p/go\n> >\n> >\n> > Description:\n> >       net/url: properly parse url with file scheme and host omitted\n> >\n> > Modified both url.Parse and url.String to explicitely account for\n> > differences in the file:// scheme\n> > Fixes issue 4189\n> >\n> > Please review this at\n> https://codereview.appspot.**com/6931047/%3Chttps://codereview.appspot.com/6931047/>\n> >\n> > Affected files:\n> >   M src/pkg/net/url/url.go\n> >   M src/pkg/net/url/url_test.go\n> >\n> >\n> > Index: src/pkg/net/url/url.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/net/url/url.go\n> > +++ b/src/pkg/net/url/url.go\n> > @@ -386,7 +386,8 @@\n> >                 }\n> >         }\n> >\n> > -       if (url.Scheme != \"\" || !viaRequest) && strings.HasPrefix(rest,\n> > \"//\") && !strings.HasPrefix(rest, \"///\") {\n> > +       // file scheme can have an empty host, which would appear as ///,\n> > so it's ignored\n> > +       if (url.Scheme != \"\" || !viaRequest) && strings.HasPrefix(rest,\n> > \"//\") && (!strings.HasPrefix(rest, \"///\") || url.Scheme == \"file\") {\n> >                 var authority string\n> >                 authority, rest = split(rest[2:], '/', false)\n> >                 url.User, url.Host, err = parseAuthority(authority)\n> > @@ -442,7 +443,8 @@\n> >         if u.Opaque != \"\" {\n> >                 result += u.Opaque\n> >         } else {\n> > -               if u.Host != \"\" || u.User != nil {\n> > +               // file scheme can have an empty host\n> > +               if u.Host != \"\" || u.User != nil || u.Scheme == \"file\" {\n> >                         result += \"//\"\n> >                         if u := u.User; u != nil {\n> >                                 result += u.String() + \"@\"\n> > Index: src/pkg/net/url/url_test.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/net/url/url_test.go\n> > +++ b/src/pkg/net/url/url_test.go\n> > @@ -242,6 +242,26 @@\n> >                 },\n> >                \n> \"http://www.google.com/?q=go+**language#foo&bar<http://www.google.com/?q=go+language#foo&bar>\n> > \",\n> >         },\n> > +       // file scheme with host\n> > +       {\n> > +               \"file://localhost/foo\",\n> > +               &URL{\n> > +                       Scheme: \"file\",\n> > +                       Host:   \"localhost\",\n> > +                       Path:   \"/foo\",\n> > +               },\n> > +               \"file://localhost/foo\",\n> > +       },\n> > +       // file scheme with host omitted\n> > +       {\n> > +               \"file:///foo/bar\",\n> > +               &URL{\n> > +                       Scheme: \"file\",\n> > +                       Host:   \"\",\n> > +                       Path:   \"/foo/bar\",\n> > +               },\n> > +               \"file:///foo/bar\",\n> > +       },\n> >  }\n> >\n> >  // more useful string for debugging than fmt's struct printer\n> >\n> >\n> >",
			"disapproval": false,
			"date": "2012-12-12 01:35:54.648590",
			"approval": false
		},
		{
			"sender": "alakriti@gmail.com",
			"recipients": [
				"alakriti@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/12 21:29:36, bradfitz wrote:\n> On Wed, Dec 12, 2012 at 6:00 AM, <mailto:alakriti@gmail.com> wrote:\n> \n> > Does this raise a bigger question between this issue and the other of\n> > whether or url.Parse should be ok with ///, and it's up to the caller to\n> > determine whether the empty host/authority is valid for that particular\n> > scheme? do we put clauses in for specific schemes, or do we parse\n> > everything we can, then return that along with possibly an error\n> > specific to the scheme that they could choose to ignore?\n> >\n> \n> Go 1 already allowed successful parses of http URLs without Hosts:\n> \n>      http://play.golang.org/p/fur6PZdZXu\n> \n> url.Parse(\"http:///path\") -> &url.URL{Scheme:\"http\", Opaque:\"\",\n> User:(*url.Userinfo)(nil), Host:\"\", Path:\"///path\", RawQuery:\"\",\n> Fragment:\"\"}\n> \n> So I think it's fine to keep doing that.  Let's just fix the Path to be\n> correct for all schemes (file, http(s), etc).\n> \n> I've made the error message for HTTP readable in\n> http://code.google.com/p/go/source/detail?r=61e3278a earlier today.\n\nOk, so the approach we're looking for here is to just allow the /// for all schemes and leave host empty, and put it on the implementor to determine whether the empty host is invalid or not?",
			"disapproval": false,
			"date": "2012-12-19 15:24:27.773110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 19, 2012 at 7:24 AM, <alakriti@gmail.com> wrote:\r\n\r\n> On 2012/12/12 21:29:36, bradfitz wrote:\r\n>\r\n>  On Wed, Dec 12, 2012 at 6:00 AM, <mailto:alakriti@gmail.com> wrote:\r\n>>\r\n>\r\n>  > Does this raise a bigger question between this issue and the other\r\n>>\r\n> of\r\n>\r\n>> > whether or url.Parse should be ok with ///, and it's up to the\r\n>>\r\n> caller to\r\n>\r\n>> > determine whether the empty host/authority is valid for that\r\n>>\r\n> particular\r\n>\r\n>> > scheme? do we put clauses in for specific schemes, or do we parse\r\n>> > everything we can, then return that along with possibly an error\r\n>> > specific to the scheme that they could choose to ignore?\r\n>> >\r\n>>\r\n>\r\n>  Go 1 already allowed successful parses of http URLs without Hosts:\r\n>>\r\n>\r\n>        http://play.golang.org/p/**fur6PZdZXu<http://play.golang.org/p/fur6PZdZXu>\r\n>>\r\n>\r\n>  url.Parse(\"http:///path\") -> &url.URL{Scheme:\"http\", Opaque:\"\",\r\n>> User:(*url.Userinfo)(nil), Host:\"\", Path:\"///path\", RawQuery:\"\",\r\n>> Fragment:\"\"}\r\n>>\r\n>\r\n>  So I think it's fine to keep doing that.  Let's just fix the Path to\r\n>>\r\n> be\r\n>\r\n>> correct for all schemes (file, http(s), etc).\r\n>>\r\n>\r\n>  I've made the error message for HTTP readable in\r\n>> http://code.google.com/p/go/**source/detail?r=61e3278a<http://code.google.com/p/go/source/detail?r=61e3278a>earlier today.\r\n>>\r\n>\r\n> Ok, so the approach we're looking for here is to just allow the /// for\r\n> all schemes and leave host empty, and put it on the implementor to\r\n> determine whether the empty host is invalid or not?\r\n>\r\n\r\nYes.\r\n\r\nUnless you find some case where we were stricter in Go 1 for some scheme,\r\nin which case we should remain strict for that scheme.\r\n\r\nBut if it's just the case that we allowed some input in Go 1 but returned\r\nsomething broken, we can be more correct now.\r\n",
			"disapproval": false,
			"date": "2012-12-19 16:47:15.531500",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"alakriti@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Work continues here: https://codereview.appspot.com/7135051",
			"disapproval": false,
			"date": "2013-01-17 23:28:49.947900",
			"approval": false
		}
	],
	"owner_email": "alakriti@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "erikstmartin",
	"subject": "code review 6931047: net/url: properly parse file URL with host omitted",
	"created": "2012-12-11 20:35:02.820110",
	"patchsets": [
		1,
		2001,
		3003
	],
	"modified": "2013-01-17 23:28:49.947900",
	"closed": false,
	"issue": 6931047
}