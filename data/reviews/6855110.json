{
	"description": "net: fix data races on deadline vars\n\nFixes issue 4434.",
	"cc": [
		"mikioh.mikioh@gmail.com",
		"bradfitz@golang.org",
		"dvyukov@google.com",
		"alex.brainman@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, bradfitz@golang.org, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-28 10:13:47.070380",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/29 04:19:15, dfc wrote:\n> ... I don't know why my\n> crosscompile script didn't pick this up, maybe it isn't actually cross compiling\n> :(\n> \n\nPerhaps your script compiles and install windows packages, but you are not building tests. You could do both.\n\nAlex",
			"disapproval": false,
			"date": "2012-11-29 04:21:56.628560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Brad. I need to wait for Alex and Mikio to confirm I haven't broken the freebsd and windows builds.\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode223\nsrc/pkg/net/fd_unix.go:223: var deadline = s.deadline\nOn 2012/11/29 06:41:46, bradfitz wrote:\n> :=\n\nDone.\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode225\nsrc/pkg/net/fd_unix.go:225: deadline -= time.Now().UnixNano()\nOn 2012/11/29 06:41:46, bradfitz wrote:\n> but now it's not a deadline, right?  WaitFD takes a timeout or zero?\n> \n> yeah, looking at fd_linux.go, that goes right to epoll_wait, which take a\n> timeout.\n> \n\nI'd really like to leave this as untouched as possible for the moment, i've reverted back to the previous patch set and added a TODO.\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go\nFile src/pkg/net/sock_posix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go#newcode61\nsrc/pkg/net/sock_posix.go:61: fd.wdeadline.set(deadline.UnixNano())\nOn 2012/11/29 06:41:46, bradfitz wrote:\n> setTime ?\n\nDone.",
			"disapproval": false,
			"date": "2012-11-29 06:50:06.797830",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, bradfitz@golang.org, dvyukov@google.com, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-29 23:41:01.524150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode44\nsrc/pkg/net/fd_unix.go:44: // read and write deadlines (nsec since 1970 or 0 if not set)\nI'd move the parenthetical part to the deadline type's docs\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode54\nsrc/pkg/net/fd_unix.go:54: type deadline struct {\nno need for the struct.  just:\n\n// deadline is an atomically-accessed number of nanoseconds since 1970\n// or 0, if no deadline is set.\ntype deadline int64\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode63\nsrc/pkg/net/fd_unix.go:63: func (d *deadline) set(v int64) {\nalso add\n\nfunc (d *deadline) setTime(t time.Time) {\n   if t.IsZero() {\n      d.set(0)\n   } else {\n      d.set(t.UnixNano())\n   }\n}\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode213\nsrc/pkg/net/fd_unix.go:213: t = t - time.Now().UnixNano()\nmake a new variable for this now.\n\ntime.Time is a deadline, which can use variable \"t\".\na timeout is a time.Duration, which shouldn't use \"t\".\n\nno need to stay in pre-Go1 int64 world here just because that's when this code was written.\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode617\nsrc/pkg/net/fd_unix.go:617: if t.IsZero() {\nthese can be both simplified now with fd.[rw]deadline.setTime(t)\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode635\nsrc/pkg/net/fd_unix.go:635: if err := setReadDeadline(fd, t); err != nil {\nunnecessary err check.  I'd just do:\n\nfd.rdeadline.setTime(t)\nfd.wdeadline.setTime(t)\nreturn nil\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sock_posix.go\nFile src/pkg/net/sock_posix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sock_posix.go#newcode61\nsrc/pkg/net/sock_posix.go:61: fd.wdeadline.set(deadline.UnixNano())\nsetTime\n\ncould drop the if too. up to you. adds an atomic op per connect, but that's probably noise.",
			"disapproval": false,
			"date": "2012-11-28 14:21:03.498760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, bradfitz@golang.org, dvyukov@google.com, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-29 21:58:05.251880",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/28 10:29:34, dvyukov wrote:\n> https://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sockopt_posix.go\n> File src/pkg/net/sockopt_posix.go (left):\n> \n> https://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sockopt_posix.go#oldcode122\n> src/pkg/net/sockopt_posix.go:122: func setReadDeadline(fd *netFD, t time.Time)\n> error {\n> This was also used for windows. Windows build will be broken with this change.\n\nOk, thanks. I did do a cross compile build to check this, but I will check again.",
			"disapproval": false,
			"date": "2012-11-28 11:06:39.502750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode223\nsrc/pkg/net/fd_unix.go:223: var deadline = s.deadline\n:=\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode225\nsrc/pkg/net/fd_unix.go:225: deadline -= time.Now().UnixNano()\nbut now it's not a deadline, right?  WaitFD takes a timeout or zero?\n\nyeah, looking at fd_linux.go, that goes right to epoll_wait, which take a timeout.\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go\nFile src/pkg/net/sock_posix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go#newcode61\nsrc/pkg/net/sock_posix.go:61: fd.wdeadline.set(deadline.UnixNano())\nsetTime ?",
			"disapproval": false,
			"date": "2012-11-29 06:41:45.768400",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-29 23:41:35.412190",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> LGTM\n\nHold on, sendfile_freebsd.go needs a twiddle too.",
			"disapproval": false,
			"date": "2012-11-29 13:25:53.683570",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=869253ef7009 ***\n\nnet: fix data races on deadline vars\n\nFixes issue 4434.\n\nR=mikioh.mikioh, bradfitz, dvyukov, alex.brainman\nCC=golang-dev\nhttps://codereview.appspot.com/6855110",
			"disapproval": false,
			"date": "2012-11-30 07:27:05.438650",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sockopt_posix.go\nFile src/pkg/net/sockopt_posix.go (left):\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sockopt_posix.go#oldcode122\nsrc/pkg/net/sockopt_posix.go:122: func setReadDeadline(fd *netFD, t time.Time) error {\nThis was also used for windows. Windows build will be broken with this change.",
			"disapproval": false,
			"date": "2012-11-28 10:29:34.148590",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, bradfitz@golang.org, dvyukov@google.com, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-29 06:32:17.104620",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855110/diff/12008/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/12008/src/pkg/net/fd_unix.go#newcode225\nsrc/pkg/net/fd_unix.go:225: // TODO(dfc) is this a time, or a duration\ns.deadline is a duration and what you pass to WaitFD is a timeout.\n\nthe confusion is that this code uses a variable which starts as one type (deadline) and changes to another type (by subtracting time.Now() from it)\n\nI would rewrite this like this:\n\nvar timeout int64 // nsec, or 0 for none\nif s.deadline > 0 {\n    timeout = s.deadline - unix.Now().UnixNano()\n    if timeout <= 0 {\n            ...\n    }\n}\nfd, mode, err := ....",
			"disapproval": false,
			"date": "2012-11-29 22:47:15.243500",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855110/diff/12008/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/12008/src/pkg/net/fd_unix.go#newcode225\nsrc/pkg/net/fd_unix.go:225: // TODO(dfc) is this a time, or a duration\nOn 2012/11/29 22:47:15, bradfitz wrote:\n> s.deadline is a duration and what you pass to WaitFD is a timeout.\n\nARGH, typo, sorry.\n\ns.deadline is a deadline (a time.Time, absolute point in time)\n\nt is a timeout (a duration)\n\nSorry for the typo.  Not helpful.",
			"disapproval": false,
			"date": "2012-11-29 22:48:18.767160",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/28 11:06:39, dfc wrote:\n> ...\n> ... I did do a cross compile build to check this, ...\n\nI cannot build test now:\n\n# GOOS=windows go test -c\n# net\n./net.go:161: undefined: setDeadline\n./net.go:169: undefined: setReadDeadline\n./net.go:177: undefined: setWriteDeadline\n./sock_posix.go:61: fd.wdeadline.set undefined (type int64 has no field or method set)\n./sock_posix.go:69: fd.wdeadline.set undefined (type int64 has no field or method set)\n./tcpsock_posix.go:272: undefined: setDeadline\n./unixsock_posix.go:328: undefined: setDeadline\n\nAlex",
			"disapproval": false,
			"date": "2012-11-29 04:17:19.888050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments, I had missed hg add'ing sendfile_freebsd.go. PTAL.\n\nhttps://codereview.appspot.com/6855110/diff/7014/src/pkg/net/fd_posix_test.go\nFile src/pkg/net/fd_posix_test.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/7014/src/pkg/net/fd_posix_test.go#newcode14\nsrc/pkg/net/fd_posix_test.go:14: var deadlineSetTimeTests = []struct {\nOn 2012/11/29 12:39:47, mikio wrote:\n> deadlineSetValueTests?\n\nI've renamed the test, it used to be testing the round trip from set -> value, but setTime -> value was more useful.",
			"disapproval": false,
			"date": "2012-11-29 21:58:30.853640",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-29 22:37:05.632270",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-29 23:09:39.451480",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ok, all done. Going to smoke test this a bit more, then submit after work tonight.\n\nhttps://codereview.appspot.com/6855110/diff/12008/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/12008/src/pkg/net/fd_unix.go#newcode225\nsrc/pkg/net/fd_unix.go:225: // TODO(dfc) is this a time, or a duration\nOn 2012/11/29 22:48:18, bradfitz wrote:\n> On 2012/11/29 22:47:15, bradfitz wrote:\n> > s.deadline is a duration and what you pass to WaitFD is a timeout.\n> \n> ARGH, typo, sorry.\n> \n> s.deadline is a deadline (a time.Time, absolute point in time)\n> \n> t is a timeout (a duration)\n> \n> Sorry for the typo.  Not helpful.\n\nDone. I think",
			"disapproval": false,
			"date": "2012-11-29 23:40:36.567050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments. I'm addressing them and will post another patch set this evening.\n\ndmitry/alex - I will fix the windows/setDeadline breakage - I don't know why my crosscompile script didn't pick this up, maybe it isn't actually cross compiling :(\n\nbradfitz - I have one more point in your comments to address then I will post a new patch set.",
			"disapproval": false,
			"date": "2012-11-29 04:19:15.122330",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6855110/diff/7014/src/pkg/net/fd_posix_test.go\nFile src/pkg/net/fd_posix_test.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/7014/src/pkg/net/fd_posix_test.go#newcode14\nsrc/pkg/net/fd_posix_test.go:14: var deadlineSetTimeTests = []struct {\ndeadlineSetValueTests?",
			"disapproval": false,
			"date": "2012-11-29 12:39:47.128740",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nNone of those are real problems.  I just don't like the name of that\r\nvariable, which is a timeout and not a deadline.\r\n\r\nI didn't review the Windows changes as closely.\r\n\r\n\r\nOn Wed, Nov 28, 2012 at 10:41 PM, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n> net/fd_unix.go<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go>\r\n> File src/pkg/net/fd_unix.go (right):\r\n>\r\n> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n> net/fd_unix.go#newcode223<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode223>\r\n> src/pkg/net/fd_unix.go:223: var deadline = s.deadline\r\n> :=\r\n>\r\n> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n> net/fd_unix.go#newcode225<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode225>\r\n> src/pkg/net/fd_unix.go:225: deadline -= time.Now().UnixNano()\r\n> but now it's not a deadline, right?  WaitFD takes a timeout or zero?\r\n>\r\n> yeah, looking at fd_linux.go, that goes right to epoll_wait, which take\r\n> a timeout.\r\n>\r\n> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n> net/sock_posix.go<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go>\r\n> File src/pkg/net/sock_posix.go (right):\r\n>\r\n> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n> net/sock_posix.go#newcode61<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go#newcode61>\r\n> src/pkg/net/sock_posix.go:61: fd.wdeadline.set(deadline.**UnixNano())\r\n> setTime ?\r\n>\r\n> https://codereview.appspot.**com/6855110/<https://codereview.appspot.com/6855110/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-29 06:44:08.490360",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments and your testing. In order to resolve the changes to sockopt_posix.go I have converted fd_windows.go to use a deadline type. Other solutions exist, but they probably mean more code duplication. If it turns out that the same race exists on Windows as it does in Unix, then resolving it would be simple.\n\n// TODO(dfc) I'd be interested in merging the common fields and methods from fd_unix.go:netFD and fd_windows.go:netFD\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode44\nsrc/pkg/net/fd_unix.go:44: // read and write deadlines (nsec since 1970 or 0 if not set)\nOn 2012/11/28 14:21:03, bradfitz wrote:\n> I'd move the parenthetical part to the deadline type's docs\n\nDone.\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode54\nsrc/pkg/net/fd_unix.go:54: type deadline struct {\nOn 2012/11/28 14:21:03, bradfitz wrote:\n> no need for the struct.  just:\n> \n> // deadline is an atomically-accessed number of nanoseconds since 1970\n> // or 0, if no deadline is set.\n> type deadline int64\n\nDone. Originally having this as a struct allowed me to find all the places in the code (like sendfile_linux.go) where fd.{r,w}deadline was being accessed.\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode63\nsrc/pkg/net/fd_unix.go:63: func (d *deadline) set(v int64) {\nOn 2012/11/28 14:21:03, bradfitz wrote:\n> also add\n> \n> func (d *deadline) setTime(t time.Time) {\n>    if t.IsZero() {\n>       d.set(0)\n>    } else {\n>       d.set(t.UnixNano())\n>    }\n> }\n\nDone.\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode213\nsrc/pkg/net/fd_unix.go:213: t = t - time.Now().UnixNano()\nOn 2012/11/28 14:21:03, bradfitz wrote:\n> make a new variable for this now.\n> \n> time.Time is a deadline, which can use variable \"t\".\n> a timeout is a time.Duration, which shouldn't use \"t\".\n> \n> no need to stay in pre-Go1 int64 world here just because that's when this code\n> was written.\n\nActually the logic is a little tricky, t is use later int the method, i've renamed t to deadline, PTAL.\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode617\nsrc/pkg/net/fd_unix.go:617: if t.IsZero() {\nOn 2012/11/28 14:21:03, bradfitz wrote:\n> these can be both simplified now with fd.[rw]deadline.setTime(t)\n\nDone. I have added a TODO to see if can be further improved.\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/fd_unix.go#newcode635\nsrc/pkg/net/fd_unix.go:635: if err := setReadDeadline(fd, t); err != nil {\nOn 2012/11/28 14:21:03, bradfitz wrote:\n> unnecessary err check.  I'd just do:\n> \n> fd.rdeadline.setTime(t)\n> fd.wdeadline.setTime(t)\n> return nil\n\nDone, see above, I want to make this simpler in general\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sockopt_posix.go\nFile src/pkg/net/sockopt_posix.go (left):\n\nhttps://codereview.appspot.com/6855110/diff/8001/src/pkg/net/sockopt_posix.go#oldcode122\nsrc/pkg/net/sockopt_posix.go:122: func setReadDeadline(fd *netFD, t time.Time) error {\nOn 2012/11/28 10:29:34, dvyukov wrote:\n> This was also used for windows. Windows build will be broken with this change.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-29 06:31:36.280300",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nNevermind, the Windows changes are identical to the POSIX ones, which is\r\nwhy I didn't remember them.\r\n\r\nOn Wed, Nov 28, 2012 at 10:44 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> LGTM\r\n>\r\n> None of those are real problems.  I just don't like the name of that\r\n> variable, which is a timeout and not a deadline.\r\n>\r\n> I didn't review the Windows changes as closely.\r\n>\r\n>\r\n> On Wed, Nov 28, 2012 at 10:41 PM, <bradfitz@golang.org> wrote:\r\n>\r\n>>\r\n>> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n>> net/fd_unix.go<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go>\r\n>> File src/pkg/net/fd_unix.go (right):\r\n>>\r\n>> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n>> net/fd_unix.go#newcode223<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode223>\r\n>> src/pkg/net/fd_unix.go:223: var deadline = s.deadline\r\n>> :=\r\n>>\r\n>> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n>> net/fd_unix.go#newcode225<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/fd_unix.go#newcode225>\r\n>> src/pkg/net/fd_unix.go:225: deadline -= time.Now().UnixNano()\r\n>> but now it's not a deadline, right?  WaitFD takes a timeout or zero?\r\n>>\r\n>> yeah, looking at fd_linux.go, that goes right to epoll_wait, which take\r\n>> a timeout.\r\n>>\r\n>> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n>> net/sock_posix.go<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go>\r\n>> File src/pkg/net/sock_posix.go (right):\r\n>>\r\n>> https://codereview.appspot.**com/6855110/diff/7012/src/pkg/**\r\n>> net/sock_posix.go#newcode61<https://codereview.appspot.com/6855110/diff/7012/src/pkg/net/sock_posix.go#newcode61>\r\n>> src/pkg/net/sock_posix.go:61: fd.wdeadline.set(deadline.**UnixNano())\r\n>> setTime ?\r\n>>\r\n>> https://codereview.appspot.**com/6855110/<https://codereview.appspot.com/6855110/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-29 06:44:51.098850",
			"approval": true
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6855110: net: fix data races on deadline vars",
	"created": "2012-11-28 08:42:03.804490",
	"patchsets": [
		1,
		2001,
		4001,
		2002,
		8001,
		13001,
		7012,
		7014,
		5022,
		12008,
		9012,
		9013
	],
	"modified": "2012-11-30 08:06:20.272740",
	"closed": true,
	"issue": 6855110
}