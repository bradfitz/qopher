{
	"description": "go.tools/ssa: utility functions mapping source intervals to ast.Nodes.\n\nPathEnclosingInterval: \tmaps a source position to an ast.Node.\nEnclosingFunction:   \tfinds ssa.Function enclosing an ast.Node.\nHasEnclosingFunction:   cheaper impl of EnclosingFunction()!=nil\nNodeDescription:        user friendly node type descriptions.\n\n+ tests.\n\nAlso: make ssa.Package.TypeInfo field a pointer.",
	"cc": [
		"gri@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI.\n\nhttps://codereview.appspot.com/9639045/diff/4001/ssa/source_ast.go\nFile ssa/source_ast.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/4001/ssa/source_ast.go#newcode16\nssa/source_ast.go:16: // visitor is a closure-based implementation of ast.Visitor, a\nCan't you just use go/ast.Inspect?\n\nhttps://codereview.appspot.com/9639045/diff/4001/ssa/source_ast.go#newcode201\nssa/source_ast.go:201: // TODO(adonovan): consider merging the logic of ast.Walk()\nMerging seems fine.\n\nhttps://codereview.appspot.com/9639045/diff/4001/ssa/source_ast.go#newcode204\nssa/source_ast.go:204: // need to sort.  Then we can use it in PathContainingPos too\nI don't see any PathContainingPos",
			"disapproval": false,
			"date": "2013-05-24 16:29:58.978170",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9639045/diff/11008/ssa/source.go\nFile ssa/source.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/11008/ssa/source.go#newcode50\nssa/source.go:50: func FindEnclosingFunction(pkg *Package, path []ast.Node) *Function {\nOn 2013/05/24 21:28:01, r wrote:\n> Find==Get and can be replaced with the empty string.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-24 21:31:54.306690",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-05-24 20:57:14.895010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9639045/diff/11008/ssa/source.go\nFile ssa/source.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/11008/ssa/source.go#newcode50\nssa/source.go:50: func FindEnclosingFunction(pkg *Package, path []ast.Node) *Function {\nFind==Get and can be replaced with the empty string.",
			"disapproval": false,
			"date": "2013-05-24 21:28:01.612580",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go\nFile ssa/source.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode21\nssa/source.go:21: // enclose extent [start, end), and all the node's ancestors up to the\ns/enclose/contains/ ?\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode41\nssa/source.go:41: // EnclosingFunction returns the function that encloses the syntax\ns/encloses/contains/ ?\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode80\nssa/source.go:80: // is (conceptually) enclosed within some function, possibly and\ns/enclosed // ?\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode80\nssa/source.go:80: // is (conceptually) enclosed within some function, possibly and\nconceptually?\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode80\nssa/source.go:80: // is (conceptually) enclosed within some function, possibly and\nthis sentence is unclear\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go\nFile ssa/source_ast.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode27\nssa/source_ast.go:27: // the ast.BinaryExpr(+) subtree is considered to enclose extent B\nI am not a big fan of the word \"extent\", it sounds very technical but is still not precise. What about TextRange, SourceRange, SourceInterval, Interval?\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode32\nssa/source_ast.go:32: // This function treats tokens as subtrees, though they are not\ns/subtrees/nodes/ ?\n\nYes, it's technically a subtree, but it's just a node.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode38\nssa/source_ast.go:38: // The 'exact' result is true if the extent contains only path[0] and\nExamples (like above) would be helpful here.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode135\nssa/source_ast.go:135: for i, l := 0, len(path); i < l/2; i++ {\nfor i, j := 0, len(path)-1; i < j; i++, j-- {\n   path[i], path[j] = path[j], path[i]\n}\n\nis much easier to reason about\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode603\nssa/source_ast.go:603: panic(fmt.Sprintf(\"oops: %T\", n))\nreplace \"oops\" with something that is clearer\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_test.go\nFile ssa/source_test.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_test.go#newcode48\nssa/source_test.go:48: if i == -1 {\nif i < 0 { ....\n\nI don't like testing against -1. It always makes me wonder if there are other meaningful negative values (-2, etc.). It's an overspecification.",
			"disapproval": false,
			"date": "2013-05-28 05:20:37.998630",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go\nFile ssa/source_ast.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode135\nssa/source_ast.go:135: for i, l := 0, len(path); i < l/2; i++ {\nOn 2013/05/28 05:20:38, gri wrote:\n> for i, j := 0, len(path)-1; i < j; i++, j-- {\n>    path[i], path[j] = path[j], path[i]\n> }\n> \n> is much easier to reason about\n\nI meant:\n\nfor i, j := 0, len(path)-1; i < j; i, j = i+1, j-1 {\n...\n\nof course",
			"disapproval": false,
			"date": "2013-05-28 05:39:52.055630",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9639045/diff/17001/ssa/source.go\nFile ssa/source.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode21\nssa/source.go:21: // enclose extent [start, end), and all the node's ancestors up to the\nOn 2013/05/28 05:20:38, gri wrote:\n> s/enclose/contains/ ?\n\nDone.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode41\nssa/source.go:41: // EnclosingFunction returns the function that encloses the syntax\nOn 2013/05/28 05:20:38, gri wrote:\n> s/encloses/contains/ ?\n\nDone.\n\nNow:\n\n// EnclosingFunction returns the function that contains the syntax\n// node denoted by path.\n//\n// Syntax associated with package-level variable specifications is\n// enclosed by the package's init() function.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source.go#newcode80\nssa/source.go:80: // is (conceptually) enclosed within some function, possibly and\nOn 2013/05/28 05:20:38, gri wrote:\n> this sentence is unclear\n\nNow:\n\n// HasEnclosingFunction returns true if the AST node denoted by path\n// is contained within the declaration of some function or\n// package-level variable.\n//\n// Unlike EnclosingFunction, the behaviour of this function does not\n// depend on whether SSA code for pkg has been built, so it can be\n// used to quickly reject check inputs that will cause\n// EnclosingFunction to fail, prior to SSA building.\n//\nfunc HasEnclosingFunction(pkg *Package, path []ast.Node) bool {\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go\nFile ssa/source_ast.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode27\nssa/source_ast.go:27: // the ast.BinaryExpr(+) subtree is considered to enclose extent B\nOn 2013/05/28 05:20:38, gri wrote:\n> I am not a big fan of the word \"extent\", it sounds very technical but is still\n> not precise. What about TextRange, SourceRange, SourceInterval, Interval?\n\n\"Interval\" it is.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode32\nssa/source_ast.go:32: // This function treats tokens as subtrees, though they are not\nOn 2013/05/28 05:20:38, gri wrote:\n> s/subtrees/nodes/ ?\n> \n> Yes, it's technically a subtree, but it's just a node.\n\nDone.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode38\nssa/source_ast.go:38: // The 'exact' result is true if the extent contains only path[0] and\nOn 2013/05/28 05:20:38, gri wrote:\n> Examples (like above) would be helpful here.\n\nDone.\n\n// In this example:\n//\n// \t\tz := x + y // add them\n//                <--C-->     <---E-->\n//                  ^\n//                  D\n//\n// intervals C, D and E are inexact.  C is contained by the\n// z-assignment statement, because it spans three of its children (:=,\n// x, +).  So too is the 1-char interval D, because it contains only\n// interior whitespace of the assignment.  E is considered interior\n// whitespace of the BlockStmt containing the assignment.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode135\nssa/source_ast.go:135: for i, l := 0, len(path); i < l/2; i++ {\nOn 2013/05/28 05:39:52, gri wrote:\n> On 2013/05/28 05:20:38, gri wrote:\n> > for i, j := 0, len(path)-1; i < j; i++, j-- {\n> >    path[i], path[j] = path[j], path[i]\n> > }\n> > \n> > is much easier to reason about\n> \n> I meant:\n> \n> for i, j := 0, len(path)-1; i < j; i, j = i+1, j-1 {\n> ...\n> \n> of course\n\nI think your response is an argument for keeping the original. :)\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_ast.go#newcode603\nssa/source_ast.go:603: panic(fmt.Sprintf(\"oops: %T\", n))\nOn 2013/05/28 05:20:38, gri wrote:\n> replace \"oops\" with something that is clearer\n\nDone.\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_test.go\nFile ssa/source_test.go (right):\n\nhttps://codereview.appspot.com/9639045/diff/17001/ssa/source_test.go#newcode48\nssa/source_test.go:48: if i == -1 {\nOn 2013/05/28 05:20:38, gri wrote:\n> if i < 0 { ....\n> \n> I don't like testing against -1. It always makes me wonder if there are other\n> meaningful negative values (-2, etc.). It's an overspecification.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-28 19:27:32.011340",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=399682188b8b&repo=tools ***\n\ngo.tools/ssa: utility functions mapping source intervals to ast.Nodes.\n\nPathEnclosingInterval: \tmaps a source position to an ast.Node.\nEnclosingFunction:   \tfinds ssa.Function enclosing an ast.Node.\nHasEnclosingFunction:   cheaper impl of EnclosingFunction()!=nil\nNodeDescription:        user friendly node type descriptions.\n\n+ tests.\n\nAlso: make ssa.Package.TypeInfo field a pointer.\n\nR=gri, r\nCC=golang-dev\nhttps://codereview.appspot.com/9639045",
			"disapproval": false,
			"date": "2013-05-28 19:28:48.721240",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 9639045: go.tools/ssa: utility functions for source positions and ast.Nodes",
	"created": "2013-05-23 02:52:38.736260",
	"patchsets": [
		1,
		2001,
		4001,
		9001,
		11008,
		17001,
		26001
	],
	"modified": "2013-05-28 19:28:49.691660",
	"closed": true,
	"issue": 9639045
}