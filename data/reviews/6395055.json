{
	"description": "net: avoid nil pointer dereference when RemoteAddr.String method chain is called\n\nFixes issue 3721.",
	"cc": [
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-22 13:46:46.436230",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-17 11:36:34.265090",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-23 09:41:11.766770",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-19 11:12:52.495160",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Mikio,\n\nThank you for fixing this issue. I'm not keen on those empty sentinel values, is there a way to avoid using them ?\n\nCheers\n\nDave\n\nhttp://codereview.appspot.com/6395055/diff/5001/src/pkg/net/ipraw_test.go\nFile src/pkg/net/ipraw_test.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/5001/src/pkg/net/ipraw_test.go#newcode28\nsrc/pkg/net/ipraw_test.go:28: t.Logf(\"test disabled; must be root\")\ntest skipped;\n\nhttp://codereview.appspot.com/6395055/diff/5001/src/pkg/net/ipraw_test.go#newcode40\nsrc/pkg/net/ipraw_test.go:40: c.LocalAddr()\nI think you should log these values. Maybe leave a comment to issue 3721, as it is not clear from reading what these are testing.\n\nhttp://codereview.appspot.com/6395055/diff/11001/src/pkg/net/tcpsock.go\nFile src/pkg/net/tcpsock.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/11001/src/pkg/net/tcpsock.go#newcode22\nsrc/pkg/net/tcpsock.go:22: case nil, tcpAddrNull:\nIf I revert this line, to be just\n\ncase nil:\n\nThe test still passes\n\nhttp://codereview.appspot.com/6395055/diff/11001/src/pkg/net/udp_test.go\nFile src/pkg/net/udp_test.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/11001/src/pkg/net/udp_test.go#newcode29\nsrc/pkg/net/udp_test.go:29: }\nCan I suggest a comment outlining what these method calls are testing.\n\nhttp://codereview.appspot.com/6395055/diff/11001/src/pkg/net/udpsock.go\nFile src/pkg/net/udpsock.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/11001/src/pkg/net/udpsock.go#newcode25\nsrc/pkg/net/udpsock.go:25: case nil, udpAddrNull:\nSame, \n\ncase nil:\n\nstill passes",
			"disapproval": false,
			"date": "2012-07-20 05:07:57.811010",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank your for your comments. I revised CL to focus on the issue\r\nrelated a datagram, unconnected socket. Please take another look.\r\n\r\nOn Fri, Jul 20, 2012 at 2:07 PM,  <dave@cheney.net> wrote:\r\n\r\n> Thank you for fixing this issue. I'm not keen on those empty sentinel\r\n> values, is there a way to avoid using them ?\r\n\r\nI guess, there's no way to avoid nil pointer dereference in method chain\r\ncalls without method holders.\r\n",
			"disapproval": false,
			"date": "2012-07-22 14:01:34.456340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for looking into this. I think I helped someone else with this offline recently too. I am all for making RemoteAddr always return non-nil, but I think we should do it without requiring Getsockname and Getpeername to succeed always. Sockets are strange enough that I can't promise that they will always succeed, and given the choice between a connection that works but returns no address information and a socket that closes itself, I would rather have the first.\n\nhttp://codereview.appspot.com/6395055/diff/5037/src/pkg/net/fd.go\nFile src/pkg/net/fd.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/5037/src/pkg/net/fd.go#newcode642\nsrc/pkg/net/fd.go:642: lsa, err := syscall.Getsockname(netfd.sysfd)\nI was ignoring the error on purpose. I'd really rather have a working connection with no local addr than make this an error. We managed to create the socket: we should return it.\n\nhttp://codereview.appspot.com/6395055/diff/5037/src/pkg/net/file.go\nFile src/pkg/net/file.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/5037/src/pkg/net/file.go#newcode28\nsrc/pkg/net/file.go:28: lsa, err := syscall.Getsockname(fd)\nSame.\n\nhttp://codereview.appspot.com/6395055/diff/5037/src/pkg/net/sock.go\nFile src/pkg/net/sock.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/5037/src/pkg/net/sock.go#newcode65\nsrc/pkg/net/sock.go:65: lsa, err := syscall.Getsockname(s)\nAgain.\n\nhttp://codereview.appspot.com/6395055/diff/5037/src/pkg/net/sock.go#newcode78\nsrc/pkg/net/sock.go:78: rsa, err := syscall.Getpeername(s)\nAgain.",
			"disapproval": false,
			"date": "2012-07-30 01:23:43.502230",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-07 14:19:14.732020",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good to me, modulo the comment below. Thanks.\n\nhttp://codereview.appspot.com/6395055/diff/32001/src/pkg/net/sock.go\nFile src/pkg/net/sock.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/32001/src/pkg/net/sock.go#newcode99\nsrc/pkg/net/sock.go:99: )\nYou can use typed nils instead of sentinels here:\n\nfunc nullProtocolAddr(f, t int) Addr {\n        switch f {\n        case syscall.AF_INET, syscall.AF_INET6:\n                switch t {\n                case syscall.SOCK_STREAM:\n                        return (*TCPAddr)(nil)\n                case syscall.SOCK_DGRAM:\n                        return (*UDPAddr)(nil)\n                case syscall.SOCK_RAW:\n                        return (*IPAddr)(nil)\n                }\n        case syscall.AF_UNIX:\n                switch t {\n                case syscall.SOCK_STREAM, syscall.SOCK_DGRAM, syscall.SOCK_SEQPACKET:\n                        return (*UnixAddr)(nil)\n                }\n        }\n        panic(\"unreachable\")\n}",
			"disapproval": false,
			"date": "2012-08-12 05:58:17.531490",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Aug 12, 2012 at 2:58 PM,  <dave@cheney.net> wrote:\r\n\r\n> You can use typed nils instead of sentinels here:\r\n\r\nNice catch. I thought that those placeholders might be useful\r\nfor fixing issue 3838, but should be another CL. Thanks.\r\n",
			"disapproval": false,
			"date": "2012-08-12 06:22:32.100610",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping ?",
			"disapproval": false,
			"date": "2012-08-21 00:41:35.643670",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. My only remaining comment would be to consider if it is possible to replace the multiple occurrences of this\n\n+\t\tif lsa, _ := syscall.Getsockname(s); lsa == nil {\n+\t\t\tladdr = nullProtocolAddr(fd.family, fd.sotype)\n+\t\t} else {\n+\t\t\tladdr = toAddr(lsa)\n+\t\t}\n\nWith a helper method.",
			"disapproval": false,
			"date": "2012-08-12 06:52:09.065730",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/30 01:23:43, rsc wrote:\n> Thanks for looking into this. I think I helped someone else with this offline\n> recently too. I am all for making RemoteAddr always return non-nil, but I think\n> we should do it without requiring Getsockname and Getpeername to succeed always.\n> Sockets are strange enough that I can't promise that they will always succeed,\n> and given the choice between a connection that works but returns no address\n> information and a socket that closes itself, I would rather have the first.\n\nagreed, all done, ptal.",
			"disapproval": false,
			"date": "2012-08-07 14:18:47.458110",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you. I'm very happy with how this turned out.",
			"disapproval": false,
			"date": "2012-08-21 13:00:04.901210",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-12 04:38:57.422550",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-12 06:49:08.690250",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-21 12:48:14.830350",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2518eee18c4f ***\n\nnet: avoid nil pointer dereference when RemoteAddr.String method chain is called\n\nFixes issue 3721.\n\nR=dave, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6395055",
			"disapproval": false,
			"date": "2012-08-23 11:54:10.643190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the delayed review. I'm not sure about this.\n\nhttp://codereview.appspot.com/6395055/diff/39001/src/pkg/net/fd.go\nFile src/pkg/net/fd.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/39001/src/pkg/net/fd.go#newcode618\nsrc/pkg/net/fd.go:618: netfd.setAddr(localSockname(fd, toAddr), toAddr(rsa))\nIt may not matter, but a direct translation of the old code would have used netfd, not fd, in the call to localSockname. netfd is the accepted connection, while fd is the listener.\n\nhttp://codereview.appspot.com/6395055/diff/39001/src/pkg/net/sock.go\nFile src/pkg/net/sock.go (right):\n\nhttp://codereview.appspot.com/6395055/diff/39001/src/pkg/net/sock.go#newcode103\nsrc/pkg/net/sock.go:103: return (*TCPAddr)(nil)\nThis is unusual. Normally we do not put typed nils inside interface values. Instead we return interface nils instead. I understand that this may keep .String() from crashing, but it doesn't help callers who expect a successful .(*TCPAddr) to result in a real data structure.",
			"disapproval": false,
			"date": "2012-08-31 11:09:52.065200",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6395055: net: avoid nil pointer dereference when RemoteAddr.Stri...",
	"created": "2012-07-17 11:27:40.373810",
	"patchsets": [
		5001,
		8001,
		11001,
		22001,
		5037,
		23002,
		32001,
		24007,
		23003,
		39001
	],
	"modified": "2012-08-31 11:09:52.293190",
	"closed": true,
	"issue": 6395055
}