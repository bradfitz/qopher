{
	"description": "net/http: Handle 100 Continue responses from servers, including the\nunsolicited 100 Continue that precedes POST/PUT responses from IIS/5.1.\n(This is valid for compatability with RFC 2068 according to RFC 2616,\n8.2.3.)\n\nFixes issue 2184.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm wondering: This also handles 100 Continue in general. (The response \"leaking\" would be an issue if you set the Expect in a request anyway.) Perhaps it should only skip the 100 Continue if req.Header doesn't have \"Expect\" (to solve issue 2184), but not when somebody explicitly Expects 100-continue? Then that should be handled another way to avoid causing the same problem.",
			"disapproval": false,
			"date": "2012-02-05 17:12:08.308489",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-05 17:09:46.723625",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like to leave this until after Go 1, unless \nBrad feels strongly that it should go in.\n\nI think it should only read at most one continue\nheader.  That might mean renaming ReadResponse to\nreadResponse and then making the new ReadResponse\ncall readResponse, and then if the status is 100,\ncall it again (but not check for another continue).\n\nPlease remind us about this CL after Go 1 is out.\nThanks.",
			"disapproval": false,
			"date": "2012-02-10 16:17:21.512239",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:43:39.385356",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-29 02:34:25.113262",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-29 02:41:49.368329",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ugh. I need to learn to restrain my 'hg mail' trigger finger.\n\nOnly major changes from the CL is that I've moved the test from transport_test where it made no sense to readresponse_test.go (need to be in package http_test for http/httptest), and I've implemented Russ' suggestion to only skip one 100 Continue header.",
			"disapproval": false,
			"date": "2012-06-29 03:53:47.468854",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-29 03:47:31.204709",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Something to consider: The RFC states that 100 Continue responses are allowed only in response to requests with an Expect: 100-continue header, with the exception of POST/PUT requests (but only for HTTP/1.1)\n\nPerhaps it's more correct to check the request type and/or presence of that header, but is it worth the overhead?",
			"disapproval": false,
			"date": "2012-07-02 21:53:56.008864",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL might fix Issue 2184, but any CL should probably also fix Issue 3665, or at least not be incompatible with its eventual fix.",
			"disapproval": false,
			"date": "2012-08-07 04:13:56.166520",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just to let you know, I'm planning on doing the former when I have some time, unless you are already working on it.",
			"disapproval": false,
			"date": "2012-08-14 22:00:38.058540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not working on it.  All yours.  :)\r\n\r\nOn Wed, Aug 15, 2012 at 8:00 AM, <patrick@patrickmn.com> wrote:\r\n\r\n> Just to let you know, I'm planning on doing the former when I have some\r\n> time, unless you are already working on it.\r\n>\r\n> http://codereview.appspot.com/**5629061/<http://codereview.appspot.com/5629061/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 05:47:10.895160",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This was fixed by https://code.google.com/p/go/source/detail?r=466040fd273e a different way.  Doing it here would've broken packages that read a 1xx directly, like websocket does for 101 upgrades.",
			"disapproval": false,
			"date": "2013-04-02 02:54:29.089580",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/02 02:54:29, bradfitz wrote:\n> This was fixed by https://code.google.com/p/go/source/detail?r=466040fd273e a\n> different way.  Doing it here would've broken packages that read a 1xx directly,\n> like websocket does for 101 upgrades.\n\ncool, thanks",
			"disapproval": false,
			"date": "2013-04-02 09:24:23.651810",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-04-02 09:32:12.903720",
			"approval": false
		}
	],
	"owner_email": "patrick@patrickmn.com",
	"private": false,
	"base_url": "",
	"owner": "pmylund",
	"subject": "code review 5629061: net/http: Handle 100 Continue responses from servers, i...",
	"created": "2012-02-05 16:59:24.477102",
	"patchsets": [
		1,
		1001,
		2003,
		9001,
		10002,
		13001,
		10004
	],
	"modified": "2013-04-02 09:32:14.884270",
	"closed": true,
	"issue": 5629061
}