{
	"description": "leveldb: add a FileSystem to db.Options.\n\nA future CL will test the leveldb end-to-end machinery against a fake\nfile system.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2012-04-19 12:10:12.793301",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go\nFile leveldb/db/file.go (right):\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode27\nleveldb/db/file.go:27: Create(name string) (File, error)\nspecify whether these are path or filepath names.\n\nhttp.FileSystem, for instance, specifies that they're always '/' delimited. \n\nthese appear to be filepath, though. worth mentioning, especially considering the difference from http.FileSystem.\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode51\nleveldb/db/file.go:51: var MemFileSystem FileSystem = memFS{}\nI'd drop the FileSystem type from here, so this variable can't be replaced.\n\nReplacing DefaultFileSystem is fine, but I don't like the idea of somebody replacing what the value of \"in memory\" means.\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode78\nleveldb/db/file.go:78: if m.m == nil {\nthis is unnecessary.  reading from a nil map is okay.\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode92\nleveldb/db/file.go:92: if m.m == nil {\nlikewise\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode119\nleveldb/db/file.go:119: return time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)\nadd a TODO here?  seems easy to implement, even in this CL.",
			"disapproval": false,
			"date": "2012-04-19 16:05:57.779700",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Submitting...\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go\nFile leveldb/db/file.go (right):\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode27\nleveldb/db/file.go:27: Create(name string) (File, error)\nOn 2012/04/19 16:05:57, bradfitz wrote:\n> specify whether these are path or filepath names.\n> \n> http.FileSystem, for instance, specifies that they're always '/' delimited. \n> \n> these appear to be filepath, though. worth mentioning, especially considering\n> the difference from http.FileSystem.\n\nDone.\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode51\nleveldb/db/file.go:51: var MemFileSystem FileSystem = memFS{}\nOn 2012/04/19 16:05:57, bradfitz wrote:\n> I'd drop the FileSystem type from here, so this variable can't be replaced.\n\nI'm not too fussed if people want to replace memFS with their own thing, and it's more consistent if I leave it as is.\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode78\nleveldb/db/file.go:78: if m.m == nil {\nOn 2012/04/19 16:05:57, bradfitz wrote:\n> this is unnecessary.  reading from a nil map is okay.\n\nIt may be unnecessary, but I prefer the consistent preamble across memFS's methods.\n\nhttp://codereview.appspot.com/6067046/diff/4001/leveldb/db/file.go#newcode119\nleveldb/db/file.go:119: return time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)\nOn 2012/04/19 16:05:57, bradfitz wrote:\n> add a TODO here?  seems easy to implement, even in this CL.\n\nDone.",
			"disapproval": false,
			"date": "2012-04-19 23:03:32.978475",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/leveldb-go/source/detail?r=a4a78e8f7b3a ***\n\nleveldb: add a FileSystem to db.Options.\n\nA future CL will test the leveldb end-to-end machinery against a fake\nfile system.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6067046",
			"disapproval": false,
			"date": "2012-04-19 23:06:30.193351",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6067046: leveldb: add a FileSystem to db.Options.",
	"created": "2012-04-19 12:08:07.782107",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		9001
	],
	"modified": "2012-04-19 23:06:33.049477",
	"closed": true,
	"issue": 6067046
}