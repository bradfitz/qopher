{
	"description": "big.nat: Improved speed of nat-to-string conversion\n\nThree optimizations: First, special-case power of two bases\nthat partion a Word(), bases 2, 4, 16, and 256. These can\nbe moved directly from internal Word() storage to the output\nwithout multiprecision operations. Next, same approach for\nthe other power-of-two bases, 8, 32, 64, and 128. These\ndon't fill a Word() evenly, so special handling is needed\nfor those cases where input spans the high-bits of one Word\nand the low bis of the next one.  Finally, implement the\ngeneral case for others bases in 2 <= base <= 256 using\nsuperbases, the largest power of base representable in a\nWord(). For base ten, this is 9 digits and a superbase of\n10^9 for 32-bit Words and 19 digits and 10^19 for 64-bit\ncompiles. This way we do just 1/9th or 1/19th of the expensive\nmultiprecision divisions, unpacking superdigits using fast\nnative machine arithmetic. The resulting code runs 7x to\n800x the speed of the previous approach, depending on the\nlength of the number to be converted--longer is relatively\nfaster.\n\nAlso, extended the tests and benchmarks for string to nat\n(scan()) and nat to string (string()) functions. A further\nenhancement awaits the next CL to make general cases about\n7x faster for long cases.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "michael.jones@gmail.com",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "ready to go.",
			"disapproval": false,
			"date": "2011-06-07 22:24:37.683911",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=082e18eba53b ***\n\nbig.nat: Improved speed of nat-to-string conversion\n\nThree optimizations: First, special-case power of two bases\nthat partion a Word(), bases 2, 4, 16, and 256. These can\nbe moved directly from internal Word() storage to the output\nwithout multiprecision operations. Next, same approach for\nthe other power-of-two bases, 8, 32, 64, and 128. These\ndon't fill a Word() evenly, so special handling is needed\nfor those cases where input spans the high-bits of one Word\nand the low bis of the next one.  Finally, implement the\ngeneral case for others bases in 2 <= base <= 256 using\nsuperbases, the largest power of base representable in a\nWord(). For base ten, this is 9 digits and a superbase of\n10^9 for 32-bit Words and 19 digits and 10^19 for 64-bit\ncompiles. This way we do just 1/9th or 1/19th of the expensive\nmultiprecision divisions, unpacking superdigits using fast\nnative machine arithmetic. The resulting code runs 7x to\n800x the speed of the previous approach, depending on the\nlength of the number to be converted--longer is relatively\nfaster.\n\nAlso, extended the tests and benchmarks for string to nat\n(scan()) and nat to string (string()) functions. A further\nenhancement awaits the next CL to make general cases about\n7x faster for long cases.\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/4595041\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2011-06-07 23:02:36.673865",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n(per our off-line review).\n\nFantastic.\n- gri",
			"disapproval": false,
			"date": "2011-06-07 22:36:25.298652",
			"approval": true
		}
	],
	"owner_email": "michael.jones@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mtj",
	"subject": "big.nat: Improved speed of nat-to-string conversion",
	"created": "2011-06-07 22:07:33.766245",
	"patchsets": [
		1,
		2001
	],
	"modified": "2011-06-07 22:36:25.298652",
	"closed": false,
	"issue": 4595041
}