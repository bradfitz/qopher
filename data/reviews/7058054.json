{
	"description": "lib9: declare __fixargv0 before use in flag.c\n\nThe Plan 9 compilers complain about not\nhaving type information for the function,\nwhich sets off type signature problems\nduring the linking stage.",
	"cc": [
		"rsc@golang.org",
		"ality@pbrane.org",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Akshat Kumar <seed@mail.nanosouffle.net> once said:\r\n> On 9 January 2013 11:03, Russ Cox <rsc@golang.org> wrote:\r\n> > Copy and paste the char *argv0; and fixargv0 definitions into flag.c\r\n> > and delete argv0.c entirely.\r\n> > Then flag.c doesn't need to call fixargv0 either.\r\n>\r\n> sysfatal.c uses argv0/fixargv0 as well, iirc. Should perhaps argv0 go into a\r\n> header file that ought to be included by the sources that need it?\r\n\r\nargv0 is already defined (with extern) in libc.h\r\n\r\nJust remove argv0.c and both references to __fixargv0,\r\nin sysfatal.c and flag.c.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-01-09 23:19:21.759190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, please do NOT remove __fixargv0 from lib9. It's there for a\r\nreason (there's a comment).\r\n",
			"disapproval": false,
			"date": "2013-01-10 15:33:28.799150",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems too specific. We're only building one file from lib9\r\nthat needs the function -- and only peripherally so. Nor\r\ndoes it seem like this will propagate to other files we'll build,\r\nhence a local change here seems sufficient.\r\n\r\n\r\nOn 8 January 2013 03:59, Lucio De Re <lucio.dere@gmail.com> wrote:\r\n> I was going to include a declaration of __fixargv0()  in\r\n> \"include/plan9/libc.h\", then thought that it seemed unnecessary to\r\n> advertise it outside osx.  Now it seems plan 9 also needs to be\r\n> alerted to it.\r\n>\r\n> Lucio.\r\n",
			"disapproval": false,
			"date": "2013-01-08 04:11:55.319440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Copy and paste the char *argv0; and fixargv0 definitions into flag.c\r\nand delete argv0.c entirely.\r\nThen flag.c doesn't need to call fixargv0 either.\r\n",
			"disapproval": false,
			"date": "2013-01-09 19:03:20.664570",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sysfatal.c uses argv0/fixargv0 as well, iirc. Should perhaps argv0 go into a\r\nheader file that ought to be included by the sources that need it?\r\n\r\nOn 9 January 2013 11:03, Russ Cox <rsc@golang.org> wrote:\r\n> Copy and paste the char *argv0; and fixargv0 definitions into flag.c\r\n> and delete argv0.c entirely.\r\n> Then flag.c doesn't need to call fixargv0 either.\r\n",
			"disapproval": false,
			"date": "2013-01-09 20:25:42.476940",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-08 02:58:45.929100",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was going to include a declaration of __fixargv0()  in\r\n\"include/plan9/libc.h\", then thought that it seemed unnecessary to\r\nadvertise it outside osx.  Now it seems plan 9 also needs to be\r\nalerted to it.\r\n\r\nLucio.\r\n",
			"disapproval": false,
			"date": "2013-01-08 03:59:29.579000",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Good enough for me, then.\r\n\r\nLucio.\r\n\r\nOn 1/8/13, Akshat Kumar <seed@mail.nanosouffle.net> wrote:\r\n> It seems too specific. We're only building one file from lib9\r\n> that needs the function -- and only peripherally so. Nor\r\n> does it seem like this will propagate to other files we'll build,\r\n> hence a local change here seems sufficient.\r\n>\r\n>\r\n> On 8 January 2013 03:59, Lucio De Re <lucio.dere@gmail.com> wrote:\r\n>> I was going to include a declaration of __fixargv0()  in\r\n>> \"include/plan9/libc.h\", then thought that it seemed unnecessary to\r\n>> advertise it outside osx.  Now it seems plan 9 also needs to be\r\n>> alerted to it.\r\n>>\r\n>> Lucio.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-08 04:14:04.328570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sysfatal was already working. This is only about the complexities\r\nadded by flag.c. They go away if we just put argv0.c into flag.c.\r\n",
			"disapproval": false,
			"date": "2013-01-09 20:43:25.878910",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI've just added __fixargv0 into flag.c and removed argv0.c for now. I can also remove all mentions of __fixargv0 from lib9 if that's preferred.\n\nPlease let me know.",
			"disapproval": false,
			"date": "2013-01-10 02:58:01.854940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7058054/diff/2002/src/lib9/argv0.c\nFile src/lib9/argv0.c (left):\n\nhttps://codereview.appspot.com/7058054/diff/2002/src/lib9/argv0.c#oldcode32\nsrc/lib9/argv0.c:32: * Mac OS can't deal with files that only declare data.\nPlease copy this comment to the new location. Thank you.",
			"disapproval": false,
			"date": "2013-01-10 15:34:14.103080",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> once said:\r\n> Yes, please do NOT remove __fixargv0 from lib9. It's there for a\r\n> reason (there's a comment).\r\n\r\nI read the comment.\r\n\r\nHow is it relevant now that the argv0 declaration is\r\nin a file that declares more than data?\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-01-11 05:06:44.791030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> How is it relevant now that the argv0 declaration is\r\n> in a file that declares more than data?\r\n\r\nThe problem is that old linkers (such as Darwin's) do not bring in an\r\nobject file from an archive just to satisfy a data reference. It only\r\ndoes it to satisfy function references. Referring to __fixargv0 is a\r\nway to bring in the object file containing argv0. ARGBEGIN does this;\r\notherwise the link will fail. There is no need for a use of __fixargv0\r\nin flag.c because argv0 is now in the same file. But the definition\r\nneeds to be there, so that ARGBEGIN can continue to use it.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-18 20:18:20.812710",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nRemoved the call to __fixargv0 in flag.c .\n\nhttps://codereview.appspot.com/7058054/diff/2002/src/lib9/argv0.c\nFile src/lib9/argv0.c (left):\n\nhttps://codereview.appspot.com/7058054/diff/2002/src/lib9/argv0.c#oldcode32\nsrc/lib9/argv0.c:32: * Mac OS can't deal with files that only declare data.\nOn 2013/01/10 15:34:14, rsc wrote:\n> Please copy this comment to the new location. Thank you.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-18 23:15:50.805570",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 18, 2013 at 12:18 PM, Russ Cox <rsc@golang.org> wrote:\r\n>> How is it relevant now that the argv0 declaration is\r\n>> in a file that declares more than data?\r\n>\r\n> The problem is that old linkers (such as Darwin's) do not bring in an\r\n> object file from an archive just to satisfy a data reference. It only\r\n> does it to satisfy function references. Referring to __fixargv0 is a\r\n> way to bring in the object file containing argv0. ARGBEGIN does this;\r\n> otherwise the link will fail. There is no need for a use of __fixargv0\r\n> in flag.c because argv0 is now in the same file. But the definition\r\n> needs to be there, so that ARGBEGIN can continue to use it.\r\n\r\nThat doesn't sound right.  If your object file says \"int i;\" and the\r\narchive says \"int i = 2;\" then I believe that the Darwin linker\r\ndoesn't bring in the object from the archive.  But if your object file\r\nsays \"extern int i;\" then I would expect the linker to pull in the\r\nobject from the archive.  That said, if your object says \"extern int\r\ni;\" and the archive says \"int i;\", then the object might not be pulled\r\nin; different systems have different behaviour for that.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-01-19 00:12:46.887510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 18, 2013 at 7:12 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n\r\n> That doesn't sound right.  If your object file says \"int i;\" and the\r\n> archive says \"int i = 2;\" then I believe that the Darwin linker\r\n> doesn't bring in the object from the archive.  But if your object file\r\n> says \"extern int i;\" then I would expect the linker to pull in the\r\n> object from the archive.  That said, if your object says \"extern int\r\n> i;\" and the archive says \"int i;\", then the object might not be pulled\r\n> in; different systems have different behaviour for that.\r\n>\r\n\r\nYes, the bss case is the problem I ran into.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-22 18:30:04.210730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"ality@pbrane.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-22 22:23:06.616690",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"ality@pbrane.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4adf815d56df ***\n\nlib9: declare __fixargv0 before use in flag.c\n\nThe Plan 9 compilers complain about not\nhaving type information for the function,\nwhich sets off type signature problems\nduring the linking stage.\n\nR=rsc, ality, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7058054\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-22 22:23:40.105040",
			"approval": false
		}
	],
	"owner_email": "seed@mail.nanosouffle.net",
	"private": false,
	"base_url": "",
	"owner": "akumar",
	"subject": "code review 7058054: lib9: declare __fixargv0 before use in flag.c",
	"created": "2013-01-08 02:57:29.841840",
	"patchsets": [
		1,
		2001,
		5001,
		2002,
		16001
	],
	"modified": "2013-01-22 23:06:13.427330",
	"closed": true,
	"issue": 7058054
}