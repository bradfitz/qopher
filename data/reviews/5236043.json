{
	"description": "gob: avoid one copy for every message written.\nPlus the need for a second in-memory buffer.\nPlays a bit fast and loose with the contents of a byte buffer,\nbut saves a potentially huge allocation. The gotest\nrun is about 10% faster overall after this change.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-07 21:37:37.961921",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "per verbal discussion, LGTM.\n- gri\n\nOn Fri, Oct 7, 2011 at 10:14 PM,  <r@golang.org> wrote:\n> I don't understand. How can you reserve space before the write when that\n> is after the data has been encoded in the buffer?\n>\n> http://codereview.appspot.com/5236043/\n>\n",
			"disapproval": false,
			"date": "2011-10-10 18:45:22.679346",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "hold on\n\n",
			"disapproval": false,
			"date": "2011-10-07 21:41:16.859993",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-07 21:45:10.265236",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nMy only question is why it's not possible to reserve the space before (and together) with the corresponding write as opposed before the next write. It would see that the former should be easier to understand and perhaps be simpler.",
			"disapproval": false,
			"date": "2011-10-08 04:05:11.874026",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't understand. How can you reserve space before the write when that is after the data has been encoded in the buffer?",
			"disapproval": false,
			"date": "2011-10-08 05:14:22.553837",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b4311778f494 ***\n\ngob: avoid one copy for every message written.\nPlus the need for a second in-memory buffer.\nPlays a bit fast and loose with the contents of a byte buffer,\nbut saves a potentially huge allocation. The gotest\nrun is about 10% faster overall after this change.\n\nR=golang-dev, r, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5236043",
			"disapproval": false,
			"date": "2011-10-10 19:38:54.316146",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5236043: gob: avoid one allocation for every message written.",
	"created": "2011-10-07 21:37:34.814085",
	"patchsets": [
		1,
		3001,
		7001,
		11002
	],
	"modified": "2011-10-10 19:38:55.735840",
	"closed": true,
	"issue": 5236043
}