{
	"description": "json.Unmarshal: convert nulls to zero values\n\nAs discussed in issue 2540, nulls are allowed for any type in JSON so they should not result in an error during Unmarshal.\nFixes issue 2540.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-24 01:43:57.398190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6759043/diff/3003/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/6759043/diff/3003/src/pkg/encoding/json/decode.go#newcode619\nsrc/pkg/encoding/json/decode.go:619: v.Set(reflect.Zero(v.Type()))\nI think the old code should stay; just delete the default case.\nIf we get\n\n\"f\": null\n\nwhere \"f\" is a float64, I don't mind just ignoring the null but I don't think it's appropriate to set f to 0.",
			"disapproval": false,
			"date": "2012-11-01 16:41:57.721280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also please update the test to verify that null does not zero values\r\nof non-reference type.\r\n",
			"disapproval": false,
			"date": "2012-11-01 16:42:39.212400",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-02 01:00:08.832700",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done. PTAL\r\n\r\nOn Thursday, November 1, 2012 12:42:39 PM UTC-4, rsc wrote:\r\n>\r\n> Also please update the test to verify that null does not zero values \r\n> of non-reference type. \r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-04 20:59:06.927840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-12 20:17:39.814250",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9a07c3da6c44 ***\n\nencoding/json: skip unexpected null values\n\nAs discussed in issue 2540, nulls are allowed for any type in JSON so they should not result in an error during Unmarshal.\nFixes issue 2540.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6759043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-11-12 20:35:14.944020",
			"approval": false
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 6759043: json.Unmarshal: convert nulls to zero values",
	"created": "2012-10-24 01:38:46.969870",
	"patchsets": [
		1,
		2001,
		3003,
		10002
	],
	"modified": "2012-11-13 01:35:26.295970",
	"closed": true,
	"issue": 6759043
}