{
	"description": "time: accept .999 in Parse\n\nThe recent shuffle in parsing formats exposed probably unintentional\nbehavior in time.Parse, namely that it was mostly ignoring \".99999\"\nin the format, producing the following behavior:\n\nfmt.Println(time.Parse(\"03:04:05.999 MST\", \"12:00:00.888 PDT\")) // error (.888 unexpected)\nfmt.Println(time.Parse(\"03:04:05.999\", \"12:00:00\")) // error (input too short)\nfmt.Println(time.Parse(\"03:04:05.999 MST\", \"12:00:00 PDT\"))  // ok (extra bytes on input make it ok)\n\nhttp://play.golang.org/p/ESJ1UYXzq2\n\nAPI CHANGE:\n\nThis CL makes all three examples valid: \".999\" can match an\nempty string or else a fractional second with at most nine digits.\n\nFixes issue 3701.",
	"cc": [
		"r@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"jgold.bg@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-04 16:34:38.051941",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nAPI change approved",
			"disapproval": false,
			"date": "2012-06-04 16:36:48.181142",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4f82ce08466d ***\n\ntime: accept .999 in Parse\n\nThe recent shuffle in parsing formats exposed probably unintentional\nbehavior in time.Parse, namely that it was mostly ignoring \".99999\"\nin the format, producing the following behavior:\n\nfmt.Println(time.Parse(\"03:04:05.999 MST\", \"12:00:00.888 PDT\")) // error (.888 unexpected)\nfmt.Println(time.Parse(\"03:04:05.999\", \"12:00:00\")) // error (input too short)\nfmt.Println(time.Parse(\"03:04:05.999 MST\", \"12:00:00 PDT\"))  // ok (extra bytes on input make it ok)\n\nhttp://play.golang.org/p/ESJ1UYXzq2\n\nAPI CHANGE:\n\nThis CL makes all three examples valid: \".999\" can match an\nempty string or else a fractional second with at most nine digits.\n\nFixes issue 3701.\n\nR=r, r\nCC=golang-dev\nhttp://codereview.appspot.com/6267045",
			"disapproval": false,
			"date": "2012-06-04 17:09:28.852335",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "relevant to issue 3523?\r\n\r\n-rob\r\n\r\n",
			"disapproval": false,
			"date": "2012-06-04 16:37:46.460468",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nThe code is unchanged.  The description now reads:\r\n\r\n\tThis CL makes all three examples valid: \".999\" can match an\r\n\tempty string or else a fractional second with at most nine digits.\r\n\r\n(It used to say at most the given number of digits.)\r\n\r\nI went back and forth on this and forgot to update the description after\r\nmy last flip-flop. The issue is that\r\n\r\n    05 accepts 12\r\n    05 accepts 12.3\r\n    05 accepts 12.345\r\n\r\n    05.0 rejects 12\r\n    05.0 accepts 12.3\r\n    05.0 rejects 12.345\r\n\r\n    05.9 accepts 12\r\n    05.9 accepts 12.3\r\n    05.9 ??? 12.345\r\n\r\nIt seemed better to be lax than to be picky: especially since layouts\r\nare prohibited from putting other digits at the end of a .999,\r\ninterpreting the extras as more fractional second digits is the only\r\npossible non-error interpretation.\r\n\r\nBeing lax makes 05.9 behave exactly like 05, instead of introducing a\r\nthird kind of format.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-04 16:43:42.605430",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6267045/diff/2001/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/6267045/diff/2001/src/pkg/time/format.go#newcode861\nsrc/pkg/time/format.go:861: if len(value) < 2 || value[0] != '.' || value[1] < '0' || value[1] > '9' {\nrewrite for my peeve:\n\nif len(value) < 2 || value[0] != '.' || value[1] < '0' || '9' < value[1]",
			"disapproval": false,
			"date": "2012-06-04 16:52:17.586465",
			"approval": true
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW, I just synced and rebuilt and can confirm that this addresses my original\r\nproblem from 3523.\r\n\r\njonathan\r\n\r\nOn Mon, Jun 04, 2012 at 09:37:43AM -0700, Rob 'Commander' Pike wrote:\r\n> relevant to issue 3523?\r\n> \r\n> -rob\r\n",
			"disapproval": false,
			"date": "2012-06-04 17:53:20.072917",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6267045: time: accept .999 in Parse",
	"created": "2012-06-04 16:25:46.533262",
	"patchsets": [
		1,
		2001,
		7002
	],
	"modified": "2012-06-04 17:53:20.286177",
	"closed": true,
	"issue": 6267045
}