{
	"description": "exp/ssa: (#5 of 5): the SSA interpreter and 'ssadump' tool.",
	"cc": [
		"gri@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-30 19:53:02.998330",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.  PTAL.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/dump/main.go\nFile src/pkg/exp/ssa/dump/main.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/dump/main.go#newcode1\nsrc/pkg/exp/ssa/dump/main.go:1: package main\nOn 2013/02/07 01:50:18, iant wrote:\n> I'm not sure how this program should be handled.  What happens when you do an\n> ordinary build?  Does this program get installed?  We probably do not want that\n> to happen.  In which case you should add \"// +build ignore\".  And in that case\n> it can move into exp/ssa--it doesn't need to be in a subdirectory.  E.g., see\n> net/http/triv.go or unicode/maketables.go.\n\nAh, I didn't understand the 'go build' logic until now.  I've moved this into the parent directory as suggested.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/dump/main.go#newcode97\nsrc/pkg/exp/ssa/dump/main.go:97: // TODO(adonovan): permit naming a package directly instead of\nOn 2013/02/07 01:50:18, iant wrote:\n> Until you do that, perhaps give an error if there are any arguments that are not\n> recognized.  Currently it just ignores them, which seems confusing.\n\nNot exactly: if you don't specify any .go files---and this includes the case where you specify just a directory name---then you get a fatal error.  The remaining arguments are not ignored but are passed on to the target program.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/external.go\nFile src/pkg/exp/ssa/interp/external.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/external.go#newcode1\nsrc/pkg/exp/ssa/interp/external.go:1: package interp\nOn 2013/02/07 01:50:18, iant wrote:\n> Where is the package comment for this package?\n\nIt was next to the sole exported function.  I've moved it up to the top of interp.go now.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/external.go#newcode18\nsrc/pkg/exp/ssa/interp/external.go:18: // That little dot \u06f0 is an Arabic zero numeral.\nOn 2013/02/07 01:50:18, iant wrote:\n> The Go sources use Unicode middle dot == \\u00b7.  Is that the character you are\n> using?\n\nNo; the middle dot is not considered a letter and so never appears in any valid Go identifier.  (The Plan9 C compiler will accept it, though, and this feature is exploited extensively in the runtime/ package.)\n\nThis is U+06F0, categories [Nd], and so is valid in identifiers.  Clarified.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go\nFile src/pkg/exp/ssa/interp/interp.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go#newcode135\nsrc/pkg/exp/ssa/interp/interp.go:135: x := fr.get(instr.X)\nOn 2013/02/07 01:50:18, iant wrote:\n> I would recommend putting this and other long cases into subroutines.\n\nDone for Slice, UnOp(ARROW), TypeAssert and Lookup but not Select: although it's long, it makes frequent use of fr, and I prefer to localise all use of frames to interp.go where possible.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go#newcode267\nsrc/pkg/exp/ssa/interp/interp.go:267: case map[value]value, *hashmap:\nOn 2013/02/07 01:50:18, iant wrote:\n> I don't quite understand when the map[value]value case will occur.\n\nmap[value]value is used only for maps whose key type T satisfies usesBuiltinMap(keyType), i.e. the equivalence relation of the interpreter's representation of T is identical to the equivalence relation of T itself.  For all other types we must implement our own hashtable.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go#newcode578\nsrc/pkg/exp/ssa/interp/interp.go:578: // * \"sync/atomic\" operations are not currently atomic due to the\nOn 2013/02/07 01:50:18, iant wrote:\n> You could use your own mutex to implement the sync/atomic functions.\n\nIndeed; I just haven't had time yet.  I've added this TODO:\n\n// TODO(adonovan): provide a metacircular\n// implementation of Mutex avoiding the broken\n// atomic primitives.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/map.go\nFile src/pkg/exp/ssa/interp/map.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/map.go#newcode31\nsrc/pkg/exp/ssa/interp/map.go:31: length int // sum of sizes of hash buckets.\nOn 2013/02/07 01:50:18, iant wrote:\n> aka number of entries in map.\n\nChanged as suggested.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/ops.go\nFile src/pkg/exp/ssa/interp/ops.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/ops.go#newcode33\nsrc/pkg/exp/ssa/interp/ops.go:33: return int(l.Int64())\nOn 2013/02/07 01:50:18, iant wrote:\n> Note that this is what I would call a host/target confusion: you are\n> interpreting a system that is identical to the system on which the interpreter\n> is running.  I think you will find it useful to separate that, so that a 64-bit\n> Go install can run a 32-bit Go program.  Not that you have to do anything now,\n> but maybe a few TODO comments.\n\nGood point; done.",
			"disapproval": false,
			"date": "2013-02-07 19:11:16.016150",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-07 19:42:44.229340",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/dump/main.go\nFile src/pkg/exp/ssa/dump/main.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/dump/main.go#newcode1\nsrc/pkg/exp/ssa/dump/main.go:1: package main\nI'm not sure how this program should be handled.  What happens when you do an ordinary build?  Does this program get installed?  We probably do not want that to happen.  In which case you should add \"// +build ignore\".  And in that case it can move into exp/ssa--it doesn't need to be in a subdirectory.  E.g., see net/http/triv.go or unicode/maketables.go.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/dump/main.go#newcode97\nsrc/pkg/exp/ssa/dump/main.go:97: // TODO(adonovan): permit naming a package directly instead of\nUntil you do that, perhaps give an error if there are any arguments that are not recognized.  Currently it just ignores them, which seems confusing.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/external.go\nFile src/pkg/exp/ssa/interp/external.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/external.go#newcode1\nsrc/pkg/exp/ssa/interp/external.go:1: package interp\nWhere is the package comment for this package?\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/external.go#newcode18\nsrc/pkg/exp/ssa/interp/external.go:18: // That little dot \u06f0 is an Arabic zero numeral.\nThe Go sources use Unicode middle dot == \\u00b7.  Is that the character you are using?\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go\nFile src/pkg/exp/ssa/interp/interp.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go#newcode135\nsrc/pkg/exp/ssa/interp/interp.go:135: x := fr.get(instr.X)\nI would recommend putting this and other long cases into subroutines.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go#newcode267\nsrc/pkg/exp/ssa/interp/interp.go:267: case map[value]value, *hashmap:\nI don't quite understand when the map[value]value case will occur.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/interp.go#newcode578\nsrc/pkg/exp/ssa/interp/interp.go:578: // * \"sync/atomic\" operations are not currently atomic due to the\nYou could use your own mutex to implement the sync/atomic functions.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/map.go\nFile src/pkg/exp/ssa/interp/map.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/map.go#newcode31\nsrc/pkg/exp/ssa/interp/map.go:31: length int // sum of sizes of hash buckets.\naka number of entries in map.\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/ops.go\nFile src/pkg/exp/ssa/interp/ops.go (right):\n\nhttps://codereview.appspot.com/7226065/diff/16001/src/pkg/exp/ssa/interp/ops.go#newcode33\nsrc/pkg/exp/ssa/interp/ops.go:33: return int(l.Int64())\nNote that this is what I would call a host/target confusion: you are interpreting a system that is identical to the system on which the interpreter is running.  I think you will find it useful to separate that, so that a 64-bit Go install can run a 32-bit Go program.  Not that you have to do anything now, but maybe a few TODO comments.",
			"disapproval": false,
			"date": "2013-02-07 01:50:18.349900",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6094e6f45477 ***\n\nexp/ssa: (#5 of 5): the SSA interpreter and 'ssadump' tool.\n\nR=gri, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7226065",
			"disapproval": false,
			"date": "2013-02-08 15:43:58.422900",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7226065: exp/ssa: (#5 of 5): the SSA interpreter and 'dump' tool.",
	"created": "2013-01-30 19:28:36.882300",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		3009,
		4010,
		16001,
		24001,
		26002,
		18002,
		24003
	],
	"modified": "2013-02-08 15:43:59.379340",
	"closed": true,
	"issue": 7226065
}