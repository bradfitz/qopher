{
	"description": "cmd/8l: fix misassembling of MOVB involving (AX)(BX*1)\n\nThe linker accepts MOVB involving non-byte-addressable\nregisters, by generating XCHG instructions to AX or BX.\nIt does not handle the case where nor AX nor BX are available.\n\nSee also revision 1470920a2804.\n\nAssembling\n    TEXT \u00b7Truc(SB),7,$0\n    MOVB BP, (BX)(AX*1)\n    RET\n\ngives before:\n   08048c60 <main.Truc>:\n    8048c60:       87 dd         xchg   %ebx,%ebp\n    8048c62:       88 1c 03      mov    %bl,(%ebx,%eax,1)\n    8048c65:       87 dd         xchg   %ebx,%ebp\n    8048c67:       c3            ret\n\nand after:\n   08048c60 <main.Truc>:\n    8048c60:       87 cd         xchg   %ecx,%ebp\n    8048c62:       88 0c 03      mov    %cl,(%ebx,%eax,1)\n    8048c65:       87 cd         xchg   %ecx,%ebp\n    8048c67:       c3            ret",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9ff35ff05de6 ***\n\ncmd/8l: fix misassembling of MOVB involving (AX)(BX*1)\n\nThe linker accepts MOVB involving non-byte-addressable\nregisters, by generating XCHG instructions to AX or BX.\nIt does not handle the case where nor AX nor BX are available.\n\nSee also revision 1470920a2804.\n\nAssembling\n    TEXT \u00b7Truc(SB),7,$0\n    MOVB BP, (BX)(AX*1)\n    RET\n\ngives before:\n   08048c60 <main.Truc>:\n    8048c60:       87 dd         xchg   %ebx,%ebp\n    8048c62:       88 1c 03      mov    %bl,(%ebx,%eax,1)\n    8048c65:       87 dd         xchg   %ebx,%ebp\n    8048c67:       c3            ret\n\nand after:\n   08048c60 <main.Truc>:\n    8048c60:       87 cd         xchg   %ecx,%ebp\n    8048c62:       88 0c 03      mov    %cl,(%ebx,%eax,1)\n    8048c65:       87 cd         xchg   %ecx,%ebp\n    8048c67:       c3            ret\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7226066\n\nhttps://codereview.appspot.com/7226066/diff/5001/src/cmd/8l/span.c\nFile src/cmd/8l/span.c (right):\n\nhttps://codereview.appspot.com/7226066/diff/5001/src/cmd/8l/span.c#newcode857\nsrc/cmd/8l/span.c:857: diag(\"impossible\");\nOn 2013/01/31 01:33:34, rsc wrote:\n> impossible byte register\n> (something a little more distinctive)\n\nDone.\n\nhttps://codereview.appspot.com/7226066/diff/5001/src/cmd/8l/span.c#newcode1325\nsrc/cmd/8l/span.c:1325: // We certainly don't want to exchange\nOn 2013/01/31 01:33:34, rsc wrote:\n> How about:\n> \n> if((breg = byteswapreg(&p->to)) != D_AX) {\n> \n> and make byteswapreg (formerly isax) handle the p->to.type == D_NONE case.\n> On the other hand maybe that doesn't work. I don't know why we're skipping AX on\n> the to.type==D_NONE case anyway.\n> \n\nDone.\n\n(the D_NONE case was for unary MULB/DIVB)",
			"disapproval": false,
			"date": "2013-01-31 07:53:11.794530",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-30 22:18:41.452830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7226066/diff/5001/src/cmd/8l/span.c\nFile src/cmd/8l/span.c (right):\n\nhttps://codereview.appspot.com/7226066/diff/5001/src/cmd/8l/span.c#newcode857\nsrc/cmd/8l/span.c:857: diag(\"impossible\");\nimpossible byte register\n(something a little more distinctive)\n\nhttps://codereview.appspot.com/7226066/diff/5001/src/cmd/8l/span.c#newcode1325\nsrc/cmd/8l/span.c:1325: // We certainly don't want to exchange\nHow about:\n\nif((breg = byteswapreg(&p->to)) != D_AX) {\n\nand make byteswapreg (formerly isax) handle the p->to.type == D_NONE case.\nOn the other hand maybe that doesn't work. I don't know why we're skipping AX on the to.type==D_NONE case anyway.",
			"disapproval": false,
			"date": "2013-01-31 01:33:34.873520",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can only imagine the debugging session that led you to discover this. My\r\ncondolences.\r\n",
			"disapproval": false,
			"date": "2013-01-31 01:33:52.415190",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7226066: cmd/8l: fix misassembling of MOVB involving (AX)(BX*1)",
	"created": "2013-01-30 22:18:23.225300",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		9001
	],
	"modified": "2013-01-31 07:53:13.134090",
	"closed": true,
	"issue": 7226066
}