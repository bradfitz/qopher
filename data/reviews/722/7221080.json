{
	"description": "runtime: Add support for loading auxv from /proc/self/auxv.\r\n\r\nIf support for creating shared libraries in go is implemented, the kernel\r\nsupplied auxv supplied on the main thread of an executable will no longer be\r\navailable. In that case, load the necessary information from /proc/self/auxv.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"dave@cheney.net",
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the refactoring of the auxv parsing is good, but does this\r\nintroduce a requirement that /proc is mounted? I believe this is a new\r\nrequirement. What problem does it solve ?\r\n\r\nOn Fri, Feb 1, 2013 at 10:15 AM,  <iant@golang.org> wrote:\r\n> Sorry if I missed something, but when is this useful?\r\n>\r\n> https://codereview.appspot.com/7221080/\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-31 23:18:03.057310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The context here is that this is trying to find the auxv when called as a\r\nGo .so loaded into a non-Go (let's say C) program that has already started.\r\n\r\nIs there really no way to find the auxv without using /proc? Can the C side\r\nfind it and pass it in?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-31 23:45:06.911090",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 23:45:06, rsc wrote:\n> The context here is that this is trying to find the auxv when called as a\n> Go .so loaded into a non-Go (let's say C) program that has already started.\n> \n> Is there really no way to find the auxv without using /proc? Can the C side\n> find it and pass it in?\n> \n> \n\nThe best I could find regarding auxv without /proc was\n\nhttp://sourceware.org/ml/gdb-patches/2010-01/msg00233.html\n\nIt's a slightly different context (gdb wanting auxv from an inferior process), but the method seems a tad convoluted and brittle, namely finding the _dl_auxv symbol in ld.so.\nAuxv is located in a known position relative to the main thread stack, but as far as I can tell, that stack is gone if and when the main thread pthread_exit()s before dlopen()ing our go implemented library. From pthread_exit(3):\n\n\"The  value pointed to by retval should not be located on the calling thread's stack, since the contents of that stack are undefined after the thread\nterminates.\"\n\nAn alternative solution is to stop relying on auxv altogether, which currently means finding a replacement for the auxv provided AT_RANDOM seed (used on arm currently). ARM also uses AT_PLATFORM and AT_HWCAPS, but I guess they can be inferred with assembly.\nThe vdso library used by x64 can be linked in by the dynamic linker, as long as we're not building a static executable.",
			"disapproval": false,
			"date": "2013-02-01 09:16:38.761230",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-31 18:29:45.663840",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry if I missed something, but when is this useful?",
			"disapproval": false,
			"date": "2013-01-31 23:15:24.229410",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/05 22:09:35, dfc wrote:\n> Could I ask that this set of CLs is deferred til after Go 1.1. This\n> plumbing sounds deep and invasive.\n\nI think this CL is fairly safe.  The auxv parsing is already there.  And this CL won't use the new code ordinarily.\n\nIan",
			"disapproval": false,
			"date": "2013-02-05 22:16:42.745200",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 6, 2013 at 5:58 AM, <iant@golang.org> wrote:\r\n\r\n> On 2013/02/05 16:46:18, minux wrote:\r\n>\r\n>  i can eliminate the dependency on AT_PLATFORM and AT_HWCAPS now\r\n>> as i just discovered a kernel that's not providing the info correctly\r\n>> anyway.\r\n>>\r\n>\r\n> Should we hold off on this CL until you do that?\r\n>\r\nOnce I get the recent signal handling and backtracer changes done,\r\ni will prepare CL for that.\r\n",
			"disapproval": false,
			"date": "2013-02-06 01:18:13.885750",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks basically fine.\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c\nFile src/pkg/runtime/signal_linux_arm.c (right):\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c#newcode174\nsrc/pkg/runtime/signal_linux_arm.c:174: runtime\u00b7parse_auxv_entry(uint32 key, uint32 val) {\nYou don't need the runtime\u00b7 prefix for a static function.\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c#newcode200\nsrc/pkg/runtime/signal_linux_arm.c:200: runtime\u00b7setup_auxv_from_proc(void)\nDon't need runtime\u00b7 prefix.\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c#newcode215\nsrc/pkg/runtime/signal_linux_arm.c:215: runtime\u00b7setup_auxv_from_argv(int32 argc, byte **argv)\nDon't need runtime\u00b7 prefix.\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c\nFile src/pkg/runtime/vdso_linux_amd64.c (right):\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c#newcode304\nsrc/pkg/runtime/vdso_linux_amd64.c:304: runtime\u00b7atolhex(byte *s, uint32 count)\nDon't need runtime\u00b7 prefix.\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c#newcode325\nsrc/pkg/runtime/vdso_linux_amd64.c:325: runtime\u00b7linux_setup_vdso_from_argv(int32 argc, uint8** argv)\nDon't need runtime\u00b7 prefix.\n\nhttps://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c#newcode349\nsrc/pkg/runtime/vdso_linux_amd64.c:349: runtime\u00b7linux_setup_vdso_from_proc(void)\nDon't need runtime\u00b7 prefix.",
			"disapproval": false,
			"date": "2013-02-05 15:11:31.413600",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2013/02/05 15:11:31, iant wrote:\n> Looks basically fine.\n> \n> https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c\n> File src/pkg/runtime/signal_linux_arm.c (right):\n> \n> https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c#newcode174\n> src/pkg/runtime/signal_linux_arm.c:174: runtime\u00b7parse_auxv_entry(uint32 key,\n> uint32 val) {\n> You don't need the runtime\u00b7 prefix for a static function.\n> \n\ndone.\n\n> https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c#newcode200\n> src/pkg/runtime/signal_linux_arm.c:200: runtime\u00b7setup_auxv_from_proc(void)\n> Don't need runtime\u00b7 prefix.\n> \n> \n\ndone.\n\n>https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/signal_linux_arm.c#newcode215\n> src/pkg/runtime/signal_linux_arm.c:215: runtime\u00b7setup_auxv_from_argv(int32 argc,\n> byte **argv)\n> Don't need runtime\u00b7 prefix.\n>\n\ndone.\n \n> https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c\n> File src/pkg/runtime/vdso_linux_amd64.c (right):\n> \n> https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c#newcode304\n> src/pkg/runtime/vdso_linux_amd64.c:304: runtime\u00b7atolhex(byte *s, uint32 count)\n> Don't need runtime\u00b7 prefix.\n> \n\ndone.\n\n> https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c#newcode325\n> src/pkg/runtime/vdso_linux_amd64.c:325: runtime\u00b7linux_setup_vdso_from_argv(int32\n> argc, uint8** argv)\n> Don't need runtime\u00b7 prefix.\n> \n\ndone.\n\n> https://codereview.appspot.com/7221080/diff/3005/src/pkg/runtime/vdso_linux_amd64.c#newcode349\n> src/pkg/runtime/vdso_linux_amd64.c:349: runtime\u00b7linux_setup_vdso_from_proc(void)\n> Don't need runtime\u00b7 prefix.\n\ndone.\n\nThanks!",
			"disapproval": false,
			"date": "2013-02-05 15:50:53.089610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now that we have code to read /proc/self/auxv can we drop the code to read /proc/self/maps?",
			"disapproval": false,
			"date": "2013-02-05 15:46:31.839450",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/05 16:46:18, minux wrote:\n> On Fri, Feb 1, 2013 at 5:16 PM, <mailto:elias.naur@gmail.com> wrote:\n> >\n> > An alternative solution is to stop relying on auxv altogether, which\n> > currently means finding a replacement for the auxv provided AT_RANDOM\n> > seed (used on arm currently). ARM also uses AT_PLATFORM and AT_HWCAPS,\n> > but I guess they can be inferred with assembly.\n> > The vdso library used by x64 can be linked in by the dynamic linker, as\n> > long as we're not building a static executable.\n> >\n> i can eliminate the dependency on AT_PLATFORM and AT_HWCAPS now\n> as i just discovered a kernel that's not providing the info correctly\n> anyway.\n> On arm, we can't get the required info in user space, but we can catch\n> SIGILL\n> generated from unsupported instructions, and that will make the goarm\n> checking\n> code a little portable.\n>\n> Regarding AT_RANDOM, this is unfortunate as we don't use it, we have to\n> read random bytes from /dev/urandom at program startup; or we don't rely\n> on random IVs for hashing.\n\nIs there a reason AT_RANDOM is only used for linux/arm?\nI can see that AT_RANDOM seeds cputicks which in turn seeds fastrand1, but on amd64 and i386, the high precision RDTSC instruction is used for cputicks instead. Is RDTSC simply random enough to use as hash IV? And if so, is there a n equivalent feature on ARM to replace AT_RANDOM?",
			"disapproval": false,
			"date": "2013-02-05 20:03:39.291280",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2013/02/05 15:46:31, rsc wrote:\n> Now that we have code to read /proc/self/auxv can we drop the code to read\n> /proc/self/maps?\n\nDone.\n\nAccording to proc(5), /proc/self/auxv is available from kernel version 2.6.0, while /proc/self/maps is presumably much older (in posix?). But since /proc/self/auxv is needed on linux/arm, it's much easier to load the VDSO address from /proc/self/auxv also.",
			"disapproval": false,
			"date": "2013-02-05 16:30:01.084980",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/05 16:46:18, minux wrote:\n\n> i can eliminate the dependency on AT_PLATFORM and AT_HWCAPS now\n> as i just discovered a kernel that's not providing the info correctly\n> anyway.\n\nShould we hold off on this CL until you do that?",
			"disapproval": false,
			"date": "2013-02-05 21:58:49.297550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't know the exact kernel version require but I am confident that >=\r\n2.6.0 is an underestimate. So that seems fine.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-05 16:35:04.992540",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 6, 2013 at 4:03 AM, <elias.naur@gmail.com> wrote:\r\n\r\n> On 2013/02/05 16:46:18, minux wrote:\r\n> Regarding AT_RANDOM, this is unfortunate as we don't use it, we have\r\n> to\r\n>\r\n>> read random bytes from /dev/urandom at program startup; or we don't\r\n>>\r\n> rely\r\n>\r\n>> on random IVs for hashing.\r\n>>\r\n>\r\n> Is there a reason AT_RANDOM is only used for linux/arm?\r\n> I can see that AT_RANDOM seeds cputicks which in turn seeds fastrand1,\r\n> but on amd64 and i386, the high precision RDTSC instruction is used for\r\n> cputicks instead. Is RDTSC simply random enough to use as hash IV? And\r\n>\r\ni think it's because the cycle counter is increasing so fast that it's\r\npractically\r\nimpossible to predict and thus be regarded as random enough.\r\nAfter Go 1.1, maybe we can switch to a collision-resistant hashing algorithm\r\n(e.g. siphash24) for map hashing and don't rely on random IV any more.\r\n\r\n> if so, is there a n equivalent feature on ARM to replace AT_RANDOM?\r\n>\r\nthe sad truth is: no. although a lot of ARM cores do have cycle counters,\r\nnormally they are not exposed to user space (even if they did, we still have\r\nproblems for cpus that lack this features).\r\n",
			"disapproval": false,
			"date": "2013-02-05 21:14:47.477320",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 1, 2013 at 5:16 PM, <elias.naur@gmail.com> wrote:\r\n>\r\n> An alternative solution is to stop relying on auxv altogether, which\r\n> currently means finding a replacement for the auxv provided AT_RANDOM\r\n> seed (used on arm currently). ARM also uses AT_PLATFORM and AT_HWCAPS,\r\n> but I guess they can be inferred with assembly.\r\n> The vdso library used by x64 can be linked in by the dynamic linker, as\r\n> long as we're not building a static executable.\r\n>\r\ni can eliminate the dependency on AT_PLATFORM and AT_HWCAPS now\r\nas i just discovered a kernel that's not providing the info correctly\r\nanyway.\r\nOn arm, we can't get the required info in user space, but we can catch\r\nSIGILL\r\ngenerated from unsupported instructions, and that will make the goarm\r\nchecking\r\ncode a little portable.\r\n\r\nRegarding AT_RANDOM, this is unfortunate as we don't use it, we have to\r\nread random bytes from /dev/urandom at program startup; or we don't rely\r\non random IVs for hashing.\r\n",
			"disapproval": false,
			"date": "2013-02-05 16:46:18.866140",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Could I ask that this set of CLs is deferred til after Go 1.1. This\r\nplumbing sounds deep and invasive.\r\n\r\nOn Wed, Feb 6, 2013 at 8:58 AM,  <iant@golang.org> wrote:\r\n> On 2013/02/05 16:46:18, minux wrote:\r\n>\r\n>> i can eliminate the dependency on AT_PLATFORM and AT_HWCAPS now\r\n>> as i just discovered a kernel that's not providing the info correctly\r\n>> anyway.\r\n>\r\n>\r\n> Should we hold off on this CL until you do that?\r\n>\r\n> https://codereview.appspot.com/7221080/\r\n",
			"disapproval": false,
			"date": "2013-02-05 22:09:35.200110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=iant",
			"disapproval": false,
			"date": "2013-06-18 02:38:50.455490",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Closed, superseded by https://codereview.appspot.com/9738047/",
			"disapproval": false,
			"date": "2013-06-24 15:25:31.506640",
			"approval": false
		}
	],
	"owner_email": "elias.naur@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "elias.naur",
	"subject": "code review 7221080: runtime: Avoid dependency on the auxillary vector, auxv...",
	"created": "2013-01-31 18:27:38.575600",
	"patchsets": [
		1,
		2001,
		3005,
		11002,
		12001,
		19001
	],
	"modified": "2013-06-24 15:25:32.006040",
	"closed": true,
	"issue": 7221080
}