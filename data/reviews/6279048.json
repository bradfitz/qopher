{
	"description": "CLs to include in Go 1.0.2\n\nThis file is not for checking in. It's here to make per-line commenting easier.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dsymonds@golang.org",
		"r@golang.org",
		"bsiegert@gmail.com",
		"alex.brainman@gmail.com",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"iant@golang.org",
		"adg@golang.org",
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode9\ngo102:9: bug fixes that are trivial or important enough to take a non-trivial fix:\nI think it's fairly important, and very safe, to include 5e1544310d03, which avoids leaving a binary in /tmp after running the tests.",
			"disapproval": false,
			"date": "2012-06-04 04:52:52.960872",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 3, 2012 at 12:16 AM,  <r@golang.org> wrote:\r\n> your criteria mystify me.\r\n\r\nI believe the rule is the same as last time: The benefit of the change\r\nhas to outweigh the risk of making it.\r\n\r\nFor most code, that means two things. First, a change has to fix a\r\nbug, not be adding a new feature. Second, the fix has to be trivial,\r\nor if not the bug has to be very important to fix (like the map key\r\nbug). To evaluate that, you have to inspect the CL itself, and I\r\nlooked at every CL since Go 1.0.1, using the commands at the top of\r\nthe file to generate the list and the plumb rule I posted to 9fans to\r\nview the changes. Last time Andrew also inspected the changes, and\r\nthen we compared our lists. I assume he will do that again. There have\r\nbeen 280 CLs since Go 1.0.1. My bug fix list contains 54. We have been\r\nfocusing a lot of attention on bug fixes, so the percentage is just\r\nunder 20%. The \"NOT TAKEN\" section only shows bug fixes that I thought\r\nwere below the bar but that I also thought people might disagree with\r\nme about. There are still nearly 200 CLs not listed at all.\r\n\r\nThere are also some categories that we just always take, because the\r\nrisk is little to none and taking them now will avoid merge conflicts\r\nwhen there's something we want later. A+C files and documentation-only\r\nchanges have no risk, and changes to godoc have minor risk - if godoc\r\nfails in some minor way it doesn't make other go programs crash. In\r\nthis round I also applied that to misc/emacs, which has seen a lot of\r\nfixes recently including one fix for an editor deadlock. I originally\r\nlisted these first in the file, because they were shorter, but they\r\nreally are secondary, so I've moved them farther down.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-03 14:22:12.850134",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "your criteria mystify me.",
			"disapproval": false,
			"date": "2012-06-03 04:16:38.509375",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6279048/diff/4002/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/4002/go102#newcode105\ngo102:105: 32a8b0e41031\tmime/multipart: fix handling of empty parts without CRLF before next part\nIt'd be nice to include this. It's big, but it's also now better tested, and it's a pretty high-level package. The failure case that this fixes was non-trivial to track down, too.",
			"disapproval": false,
			"date": "2012-06-03 02:06:27.760711",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6279048/diff/4002/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/4002/go102#newcode118\ngo102:118: 85e2b70e9d44\truntime: handle windows exceptions, even in cgo programs\nIt would be good to include this IMHO. Even though it is big, it seems to be an important bugfix for Windows.",
			"disapproval": false,
			"date": "2012-06-03 10:43:37.849947",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6279048/diff/4002/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/4002/go102#newcode101\ngo102:101: 4ef88bab4b0d\tpath/filepath: implement documented SkipDir behavior\nPlease, include\n45d1063d8520 syscall: correct Win32finddata definition\nIt fixes memory corruption.",
			"disapproval": false,
			"date": "2012-06-03 11:11:59.645926",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please consider adding this (see Russ's comment #4):\n31e36672e3df    2: +30/-28      syscall: fix 32-bit uid calls",
			"disapproval": false,
			"date": "2012-06-03 17:43:09.323270",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode58\ngo102:58: 4849e2acf1e9\t2: +76/-3\tnet/http: flush server response gracefully when ignoring request body\nI don't care that this one goes in. This was just a precursor to the one that's still out for review which is more important.\n\nTaking 50% of net/http patches for each 1.0.x release will get merge-painful eventually.  I'm not even sure how important taking the hasToken ones are.  You're doing the work, though, so up to you.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode108\ngo102:108: 32a8b0e41031\t2: +292/-66\tmime/multipart: fix handling of empty parts without CRLF before next part\nCould you look at this one again?  It's relatively big for a bug fix, but we'd assumed this was going into 1.0.2 to fix the App Engine blobstore bug with empty post values.\n\nI spent a fair bit of time writing comments, tests, seeing what various clients did, and simplifying the code to the point I was more comfortable with the code than I was before.",
			"disapproval": false,
			"date": "2012-06-03 19:26:10.532573",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6279048/diff/11001/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode9\ngo102:9: bug fixes that are trivial or important enough to take a non-trivial fix:\nif you're categorizing it would be worthwhile to separate 'trivial' and 'too important to miss' into separate sections\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode15\ngo102:15: d063a7844d48\t1: +33/-27\tcgo: rename C names for Go types to avoid conflicting with package\nis this an API change?\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode34\ngo102:34: c6213d8a9118\t1: +1/-0\tcrypto/rsa: add SHA-224 hash prefix\nthis seems like a feature rather than a fix\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode115\ngo102:115: 1734b211731d\t2: +46/-10\tsync/atomic: use cas64 to implement {Load,Store,Add}{Uint,Int}64 on Linux/ARM\nthese last two sound important",
			"disapproval": false,
			"date": "2012-06-04 18:30:39.281533",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6279048/diff/4002/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/4002/go102#newcode101\ngo102:101: 4ef88bab4b0d\tpath/filepath: implement documented SkipDir behavior\nOn 2012/06/03 11:11:59, brainman wrote:\n> Please, include\n> 45d1063d8520 syscall: correct Win32finddata definition\n> It fixes memory corruption.\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/4002/go102#newcode105\ngo102:105: 32a8b0e41031\tmime/multipart: fix handling of empty parts without CRLF before next part\nOn 2012/06/03 02:06:27, dsymonds wrote:\n> It'd be nice to include this. It's big, but it's also now better tested, and\n> it's a pretty high-level package. The failure case that this fixes was\n> non-trivial to track down, too.\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/4002/go102#newcode118\ngo102:118: 85e2b70e9d44\truntime: handle windows exceptions, even in cgo programs\nIt's bigger than I'm comfortable with. Alex, any opinion on how important it is?\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode9\ngo102:9: bug fixes that are trivial or important enough to take a non-trivial fix:\nOn 2012/06/04 18:30:39, r wrote:\n> if you're categorizing it would be worthwhile to separate 'trivial' and 'too\n> important to miss' into separate sections\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode9\ngo102:9: bug fixes that are trivial or important enough to take a non-trivial fix:\nOn 2012/06/04 04:52:53, iant wrote:\n> I think it's fairly important, and very safe, to include 5e1544310d03, which\n> avoids leaving a binary in /tmp after running the tests.\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode9\ngo102:9: bug fixes that are trivial or important enough to take a non-trivial fix:\nOn 2012/06/04 04:52:53, iant wrote:\n> I think it's fairly important, and very safe, to include 5e1544310d03, which\n> avoids leaving a binary in /tmp after running the tests.\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode15\ngo102:15: d063a7844d48\t1: +33/-27\tcgo: rename C names for Go types to avoid conflicting with package\nOn 2012/06/04 18:30:39, r wrote:\n> is this an API change?\n\nNo, it's just a change to what code gcc sees.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode34\ngo102:34: c6213d8a9118\t1: +1/-0\tcrypto/rsa: add SHA-224 hash prefix\nOn 2012/06/04 18:30:39, r wrote:\n> this seems like a feature rather than a fix\n\nI am treating this as a fix for a missing entry in a table.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode58\ngo102:58: 4849e2acf1e9\t2: +76/-3\tnet/http: flush server response gracefully when ignoring request body\nOn 2012/06/03 19:26:10, bradfitz wrote:\n> I don't care that this one goes in. This was just a precursor to the one that's\n> still out for review which is more important.\n> \n> Taking 50% of net/http patches for each 1.0.x release will get merge-painful\n> eventually.  I'm not even sure how important taking the hasToken ones are. \n> You're doing the work, though, so up to you.\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode108\ngo102:108: 32a8b0e41031\t2: +292/-66\tmime/multipart: fix handling of empty parts without CRLF before next part\nOn 2012/06/03 19:26:10, bradfitz wrote:\n> Could you look at this one again?  It's relatively big for a bug fix, but we'd\n> assumed this was going into 1.0.2 to fix the App Engine blobstore bug with empty\n> post values.\n> \n> I spent a fair bit of time writing comments, tests, seeing what various clients\n> did, and simplifying the code to the point I was more comfortable with the code\n> than I was before.\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode115\ngo102:115: 1734b211731d\t2: +46/-10\tsync/atomic: use cas64 to implement {Load,Store,Add}{Uint,Int}64 on Linux/ARM\nThese make 64-bit compare-and-swap work on ARMv5. They're big and complex, and I didn't hear anyone clamoring for it so I left them out. I'm willing to reconsider if someone makes the case.",
			"disapproval": false,
			"date": "2012-06-06 22:29:31.962550",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please include:\n\n008b163fb38a doc/install: we don't print 'The compiler is 6g' anymore\n222a28e46943 doc: mention 'hg update default' in contribution guidelines\nae0301294b9b go spec: clarify promotion rules for methods/fields of anonymous fields",
			"disapproval": false,
			"date": "2012-06-06 22:56:36.725390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The current version of this file corresponds to\nhttp://code.google.com/r/rsc-go1-0-2-test-3/.\nI think it's pretty close to what we'll use.",
			"disapproval": false,
			"date": "2012-06-08 21:15:50.961099",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/06 22:29:31, rsc wrote:\n> \n> http://codereview.appspot.com/6279048/diff/4002/go102#newcode118\n> go102:118: 85e2b70e9d44\truntime: handle windows exceptions, even in cgo programs\n> It's bigger than I'm comfortable with. Alex, any opinion on how important it is?\n> \n\nYes it could bite us. This change affects only cgo programs. It has (should have <g>) no effect on non-cgo programs.\n\nAt this moment, if cgo program gets any exceptional error (memory access error, division on zero and such), it will crash in unexpected way - no stack trace, no running recover(), it might end-up invoking system debugger (depending on particular pc setup). To make matters worse, this behavior will only happens to all threads, but first. So, very unpleasant situation.\n\nOn the other hand, it only affect handful of people - those who use cgo on windows. I hope there aren't many sufferers :-). And these should be proficient enough to be able to use tip for the time being, if we direct them so.\n\nAlex",
			"disapproval": false,
			"date": "2012-06-06 23:26:49.280902",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6279048/diff/25002/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/25002/go102#newcode13\ngo102:13: 9b455eb64690\t3: +3/-3\tcmd/5c, cmd/5g, cmd/5l: fix array indexing warning under Clang 3.1\nperhaps we should wait for issue 3708 to accompany this change.\n\nhttp://codereview.appspot.com/6279048/diff/25002/go102#newcode78\ngo102:78: ac7250065a04\t1: +3/-1\tsyscall: simplify text returned by Errno.Error() when FormatMessage fails\nduplicate.\n\nhttp://codereview.appspot.com/6279048/diff/25002/go102#newcode147\ngo102:147: 66a5ac82dc70\t4: +62/-16\tsyscall: implement SetsockoptLinger for windows\nstrange, rev 66a5ac82dc70 is both taken and not taken.",
			"disapproval": false,
			"date": "2012-06-07 19:58:45.922660",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think I will leave windows/cgo to fend for itself, at least for now.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 05:02:52.999568",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 7, 2012 at 3:00 PM,  <remyoudompheng@gmail.com> wrote:\r\n> Aren't these names used in exported functions? maybe the code remains\r\n> compatible anyway?\r\n\r\nI think they only appear in the cgo-generated code, as seen by gcc.\r\nI don't believe they are used by people writing cgo input.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 19:03:06.270034",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6279048/diff/15001/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/15001/go102#newcode9\ngo102:9: bug fixes that are important:\n31e36672e3df    2: +30/-28      syscall: fix 32-bit uid calls\n\ni think this fix is fairly important, because failed getuid() can cause lots of\nother troubles; and this fix is pretty trivial.\n\nhttp://codereview.appspot.com/6279048/diff/15001/go102#newcode65\ngo102:65: 5538444d6f32\t2: +2227/-1\tapi: add Linux/ARM to go1 API\nd8e47164f8dd    2: +4064/-7     api: add FreeBSD to go1 API\n\nhttp://codereview.appspot.com/6279048/diff/15001/go102#newcode95\ngo102:95: d7030ef36339\t1: +1/-0\tCONTRIBUTORS: Add Ryan Barrett (Google CLA)\nand two more:\na6e2b17a16d7    2: +2/-0        A+C: Markus Sonderegger (individua CLA)\na47632179cb7    2: +2/-0        A+C: Daniel Morsing (individual CLA)",
			"disapproval": false,
			"date": "2012-06-07 06:42:04.101896",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6279048/diff/11001/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/11001/go102#newcode15\ngo102:15: d063a7844d48\t1: +33/-27\tcgo: rename C names for Go types to avoid conflicting with package\nAren't these names used in exported functions? maybe the code remains compatible anyway?",
			"disapproval": false,
			"date": "2012-06-07 19:00:16.899304",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 7, 2012 at 3:58 PM,  <minux.ma@gmail.com> wrote:\r\n> strange, rev 66a5ac82dc70 is both taken and not taken.\r\n\r\neverything below the NOT TAKEN line is ignored by my program.\r\ni had to add some things that i hadn't planned to take, like this one,\r\nin order to be able to apply later patches. in this case it was one\r\nor two tiny syscall additions. the windows syscall story is still\r\nup in the air.\r\n",
			"disapproval": false,
			"date": "2012-06-07 20:06:04.074311",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "List updated again. This time it's a valid set of patches that produces a working tree.\n\nhttp://codereview.appspot.com/6279048/diff/15001/go102\nFile go102 (right):\n\nhttp://codereview.appspot.com/6279048/diff/15001/go102#newcode9\ngo102:9: bug fixes that are important:\nOn 2012/06/07 06:42:04, minux wrote:\n> 31e36672e3df    2: +30/-28      syscall: fix 32-bit uid calls\n> \n> i think this fix is fairly important, because failed getuid() can cause lots of\n> other troubles; and this fix is pretty trivial.\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/15001/go102#newcode65\ngo102:65: 5538444d6f32\t2: +2227/-1\tapi: add Linux/ARM to go1 API\nOn 2012/06/07 06:42:04, minux wrote:\n> d8e47164f8dd    2: +4064/-7     api: add FreeBSD to go1 API\n\nDone.\n\nhttp://codereview.appspot.com/6279048/diff/15001/go102#newcode95\ngo102:95: d7030ef36339\t1: +1/-0\tCONTRIBUTORS: Add Ryan Barrett (Google CLA)\nOn 2012/06/07 06:42:04, minux wrote:\n> and two more:\n> a6e2b17a16d7    2: +2/-0        A+C: Markus Sonderegger (individua CLA)\n> a47632179cb7    2: +2/-0        A+C: Daniel Morsing (individual CLA)\n\nDone.",
			"disapproval": false,
			"date": "2012-06-07 18:56:24.938833",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"bsiegert@gmail.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-06-24 23:39:16.735404",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "CLs to include in Go 1.0.2",
	"created": "2012-06-03 00:36:42.070589",
	"patchsets": [
		1,
		2001,
		4002,
		4,
		11001,
		15001,
		24001,
		25002,
		28001,
		28002,
		29001,
		25005
	],
	"modified": "2012-06-24 23:39:17.977912",
	"closed": true,
	"issue": 6279048
}