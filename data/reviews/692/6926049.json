{
	"description": "6l/5l: PIC and shared library support for the linkers.\r\n\r\nAdded the -shared flag to 5l/6l to output a PIC executable with the required\r\ndynamic relocations and RIP-relative addressing in machine code.\r\nAdded dummy support to 8l to avoid compilation errors\r\n\r\nSee also:\r\nhttps://codereview.appspot.com/6822078\r\nhttps://codereview.appspot.com/7064048\r\n\r\nand\r\n\r\nhttps://groups.google.com/d/topic/golang-nuts/P05BDjLcQ5k/discussion",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-24 17:32:43.986600",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/24 17:32:43, elias.naur wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nThe linker outputs a static ELF binary when no external libraries are needed. Since shared libraries cannot be static, I've uploaded a change that avoids that when linking with -U.",
			"disapproval": false,
			"date": "2012-12-27 17:20:28.474030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this. I want to make sure we proceed carefully: there are definitely some high-level details we need to work out, such as what initialization means in this mode. \n\nLet's make this CL only about position-independent code generation. That means we can move the cmd/go changes to another CL. It should be possible to set GO_GCFLAGS and GO_LDFLAGS for now.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6c/sgen.c\nFile src/cmd/6c/sgen.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6c/sgen.c#newcode129\nsrc/cmd/6c/sgen.c:129: if (!debug['U'])\nno space between if and (.\n\nI have CL 7035043 pending to allow longer flag names. Once that it is in, please update this CL to use it, to add a flag called \"pic\". Then the cc.h can declare an EXTERN int flag_pic; and this can be if(!flag_pic). That should be clearer than -U. You can still update the code to use this variable before my CL is in by inserting\nflag_pic = debug['U'];\nafter the ARGEND in cc/lex.c.\n\n\nAlso, where possible please make the pic branch the special case, which should remove some !s:\n\nif(flag_pic)\n   n->addable = 9;\nelse\n   n->addable = 10;\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/cgen.c#newcode740\nsrc/cmd/6g/cgen.c:740: if (!debug['U']) {\nSame. (No space, remove !, use flag_pic.)\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/ggen.c\nFile src/cmd/6g/ggen.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/ggen.c#newcode80\nsrc/cmd/6g/ggen.c:80: if (!debug['U'])\nSame.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/gsubr.c\nFile src/cmd/6g/gsubr.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/gsubr.c#newcode558\nsrc/cmd/6g/gsubr.c:558: if (debug['U'])\nNo space, use flag_pic.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c\nFile src/cmd/6l/asm.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode193\nsrc/cmd/6l/asm.c:193: if (!debug['U'])\nNo space, use flag_pic.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode195\nsrc/cmd/6l/asm.c:195: else\nno else after return\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode609\nsrc/cmd/6l/asm.c:609: if (debug['U'])\nno space between if and (\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode713\nsrc/cmd/6l/asm.c:713: if (debug['U']) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode714\nsrc/cmd/6l/asm.c:714: Sym *init_sym = lookup(LIBINITENTRY, 0);\ndeclare variables at top, without initializers.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode717\nsrc/cmd/6l/asm.c:717: Reloc *r = addrel(s);\nsame\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode1204\nsrc/cmd/6l/asm.c:1204: if (debug['U'])\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/l.h\nFile src/cmd/6l/l.h (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/l.h#newcode182\nsrc/cmd/6l/l.h:182: int rel_ro;\nint tab\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c\nFile src/cmd/6l/span.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode375\nsrc/cmd/6l/span.c:375: if (!debug['U'])\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode377\nsrc/cmd/6l/span.c:377: /* else fallthrough */\ns/else //\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode736\nsrc/cmd/6l/span.c:736: if (!debug['U'])\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode766\nsrc/cmd/6l/span.c:766: if (!debug['U']) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode770\nsrc/cmd/6l/span.c:770: } /* else, fallthrough */\ns/else, //\nmove comment to new line\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode1794\nsrc/cmd/6l/span.c:1794: if (rexflag)\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode1796\nsrc/cmd/6l/span.c:1796: if (r->type == D_PCREL)\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode1797\nsrc/cmd/6l/span.c:1797: r->add -= p->pc + n - (r->off + r->siz);\nI don't understand what the goal is here. The relocation should have been added during doasm called above. Why did it not set r->add correctly then?\nIf the only time an adjustment is needed is when the rexflag byte is added, then this can be simpler and not moved from above.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/go/build.go#newcode112\nsrc/cmd/go/build.go:112: var buildLib bool            // -shared\nPlease move the cmd/go files into a separate CL. I am happy to work on tool support but adding a flag to the go command is a commitment I don't think we're ready for yet.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode285\nsrc/cmd/ld/data.c:285: Sym *rela = lookup(\".rela\", 0);\nMove var to top, uninitialized.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode288\nsrc/cmd/ld/data.c:288: if(r->sym != S && r->sym->type == SDYNIMPORT || r->type >= 256 || debug['U'] && r->type == D_ADDR && r->sym != S && (s->type == SDATA || s->type == SGOSTRING || s->type == STYPE || s->type == SRODATA)) {\nWow.\nUse a continue or two to simplify this.\nOr maybe write a function to call.\nMaybe:\n\nstatic int\nneeddynrel(Sym *s, Reloc *r)\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode289\nsrc/cmd/ld/data.c:289: if (debug['U'] && r->sym != S && r->type == D_ADDR && (s->type == SDATA || s->type == SGOSTRING || s->type == STYPE || s->type == SRODATA)) { // Create address based RELATIVE relocation\nWow again.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode290\nsrc/cmd/ld/data.c:290: Reloc *rel_r = addrel(rela);\nMove var to top, uninitialized.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode297\nsrc/cmd/ld/data.c:297: adduint64(rela, R_X86_64_RELATIVE);\nThis is inappropriate in the ld directory. This directory is for architecture-independent code. Instead, wrap this into a separate function like adddynrel (which is provided by the architecture-dependent directory).\nI am not sure what to call it because I am not quite sure how it differs\nfrom adddynrel, but adddynrela or addrelrel might be appropriate.\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1009\nsrc/cmd/ld/data.c:1009: if (debug['U']) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1010\nsrc/cmd/ld/data.c:1010: for (s=datap; s != nil; s = s->next) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1058\nsrc/cmd/ld/data.c:1058: if (debug['U']) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1076\nsrc/cmd/ld/data.c:1076: if (s->type == SDATARELRO) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1329\nsrc/cmd/ld/data.c:1329: if (datarelro != nil) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/go.c\nFile src/cmd/ld/go.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/go.c#newcode735\nsrc/cmd/ld/go.c:735: if (debug['U'])\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/lib.c#newcode107\nsrc/cmd/ld/lib.c:107: if (debug['U']) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/symtab.c\nFile src/cmd/ld/symtab.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/symtab.c#newcode344\nsrc/cmd/ld/symtab.c:344: if (debug['U']) {\nno space\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/make.bash\nFile src/make.bash (right):\n\nhttps://codereview.appspot.com/6926049/diff/18001/src/make.bash#newcode26\nsrc/make.bash:26: # GO_FLAGS: Additional go_bootstrap arguments to use when\nPlease move this to the CL with the cmd/go files.",
			"disapproval": false,
			"date": "2013-01-02 21:15:21.344440",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nI managed to add linux/arm support (only the linker needed changes), so a\r\nlook on those changes would be great.\r\n\r\nAdditionally, I've cleaned up and simplified the changes in a few places.\r\n\r\nOn Wed, Jan 2, 2013 at 10:15 PM, <rsc@golang.org> wrote:\r\n\r\n> Thanks for working on this. I want to make sure we proceed carefully:\r\n> there are definitely some high-level details we need to work out, such\r\n> as what initialization means in this mode.\r\n>\r\n> Let's make this CL only about position-independent code generation. That\r\n> means we can move the cmd/go changes to another CL. It should be\r\n> possible to set GO_GCFLAGS and GO_LDFLAGS for now.\r\n>\r\n>\r\n>\r\nI wasn't comfortable with a new flag to go either, but I didn't think of\r\nthe obvious env flags. I've simply deleted the go tool changes, since\r\nthey're easily redone if needed.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/6c/sgen.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6c/sgen.c>\r\n> File src/cmd/6c/sgen.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6c/sgen.c#newcode129<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6c/sgen.c#newcode129>\r\n> src/cmd/6c/sgen.c:129: if (!debug['U'])\r\n> no space between if and (.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> I have CL 7035043 pending to allow longer flag names. Once that it is\r\n> in, please update this CL to use it, to add a flag called \"pic\". Then\r\n> the cc.h can declare an EXTERN int flag_pic; and this can be\r\n> if(!flag_pic). That should be clearer than -U. You can still update the\r\n> code to use this variable before my CL is in by inserting\r\n> flag_pic = debug['U'];\r\n> after the ARGEND in cc/lex.c.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n>\r\n> Also, where possible please make the pic branch the special case, which\r\n> should remove some !s:\r\n>\r\n> if(flag_pic)\r\n>    n->addable = 9;\r\n> else\r\n>    n->addable = 10;\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/6g/cgen.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/cgen.c>\r\n> File src/cmd/6g/cgen.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6g/cgen.c#newcode740<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/cgen.c#newcode740>\r\n> src/cmd/6g/cgen.c:740: if (!debug['U']) {\r\n> Same. (No space, remove !, use flag_pic.)\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/6g/ggen.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/ggen.c>\r\n> File src/cmd/6g/ggen.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6g/ggen.c#newcode80<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/ggen.c#newcode80>\r\n> src/cmd/6g/ggen.c:80: if (!debug['U'])\r\n> Same.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/6g/gsubr.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/gsubr.c>\r\n> File src/cmd/6g/gsubr.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6g/gsubr.c#newcode558<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6g/gsubr.c#newcode558>\r\n> src/cmd/6g/gsubr.c:558: if (debug['U'])\r\n> No space, use flag_pic.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/6l/asm.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c>\r\n> File src/cmd/6l/asm.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/asm.c#newcode193<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode193>\r\n> src/cmd/6l/asm.c:193: if (!debug['U'])\r\n> No space, use flag_pic.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/asm.c#newcode195<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode195>\r\n> src/cmd/6l/asm.c:195: else\r\n> no else after return\r\n>\r\n>\r\nDone (change was reverted)\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/asm.c#newcode609<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode609>\r\n> src/cmd/6l/asm.c:609: if (debug['U'])\r\n> no space between if and (\r\n>\r\n>\r\nDone\r\n\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/asm.c#newcode713<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode713>\r\n> src/cmd/6l/asm.c:713: if (debug['U']) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/asm.c#newcode714<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode714>\r\n> src/cmd/6l/asm.c:714: Sym *init_sym = lookup(LIBINITENTRY, 0);\r\n> declare variables at top, without initializers.\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/asm.c#newcode717<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode717>\r\n> src/cmd/6l/asm.c:717: Reloc *r = addrel(s);\r\n> same\r\n>\r\n>\r\nDone (change was reverted)\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/asm.c#newcode1204<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/asm.c#newcode1204>\r\n> src/cmd/6l/asm.c:1204: if (debug['U'])\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/6l/l.h<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/l.h>\r\n> File src/cmd/6l/l.h (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/l.h#newcode182<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/l.h#newcode182>\r\n> src/cmd/6l/l.h:182: int rel_ro;\r\n> int tab\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/6l/span.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c>\r\n> File src/cmd/6l/span.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode375<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode375>\r\n> src/cmd/6l/span.c:375: if (!debug['U'])\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode377<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode377>\r\n> src/cmd/6l/span.c:377: /* else fallthrough */\r\n> s/else //\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode736<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode736>\r\n> src/cmd/6l/span.c:736: if (!debug['U'])\r\n> no space\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode766<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode766>\r\n> src/cmd/6l/span.c:766: if (!debug['U']) {\r\n> no space\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode770<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode770>\r\n> src/cmd/6l/span.c:770: } /* else, fallthrough */\r\n> s/else, //\r\n> move comment to new line\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode1794<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode1794>\r\n> src/cmd/6l/span.c:1794: if (rexflag)\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode1796<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode1796>\r\n> src/cmd/6l/span.c:1796: if (r->type == D_PCREL)\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/6l/span.c#newcode1797<https://codereview.appspot.com/6926049/diff/18001/src/cmd/6l/span.c#newcode1797>\r\n> src/cmd/6l/span.c:1797: r->add -= p->pc + n - (r->off + r->siz);\r\n> I don't understand what the goal is here. The relocation should have\r\n> been added during doasm called above. Why did it not set r->add\r\n> correctly then?\r\n> If the only time an adjustment is needed is when the rexflag byte is\r\n> added, then this can be simpler and not moved from above.\r\n>\r\n>\r\nThe D_PCREL computation in cmd/ld/data.c\r\n\r\n            o = 0;\r\n            if(r->sym)\r\n                o += symaddr(r->sym);\r\n            o += r->add - (s->value + r->off + r->siz);\r\n\r\nassumes that the desired PC relative offset is the difference between the\r\ntarget address and the address of the word containing the resulting pc\r\nrelative offset, plus the word size. However, the RIP \"register\" is defined\r\nas pointing to the end of the current instruction, so for instructions\r\nwhere the PC relative offset is not last in the instruction, that\r\nassumption won't hold. So I simply compensated with r->add, which can be\r\ndone generally by computing the distance of the relocation offset from the\r\ninstruction end.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/go/build.go<https://codereview.appspot.com/6926049/diff/18001/src/cmd/go/build.go>\r\n> File src/cmd/go/build.go (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/go/build.go#newcode112<https://codereview.appspot.com/6926049/diff/18001/src/cmd/go/build.go#newcode112>\r\n> src/cmd/go/build.go:112: var buildLib bool            // -shared\r\n> Please move the cmd/go files into a separate CL. I am happy to work on\r\n> tool support but adding a flag to the go command is a commitment I don't\r\n> think we're ready for yet.\r\n>\r\n>\r\nDone (I removed the changes altogether)\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/ld/data.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c>\r\n> File src/cmd/ld/data.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode285<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode285>\r\n> src/cmd/ld/data.c:285: Sym *rela = lookup(\".rela\", 0);\r\n> Move var to top, uninitialized.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode288<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode288>\r\n> src/cmd/ld/data.c:288: if(r->sym != S && r->sym->type == SDYNIMPORT ||\r\n> r->type >= 256 || debug['U'] && r->type == D_ADDR && r->sym != S &&\r\n> (s->type == SDATA || s->type == SGOSTRING || s->type == STYPE || s->type\r\n> == SRODATA)) {\r\n> Wow.\r\n> Use a continue or two to simplify this.\r\n>\r\n\r\nDone.\r\n\r\n\r\n> Or maybe write a function to call.\r\n> Maybe:\r\n>\r\n> static int\r\n> needdynrel(Sym *s, Reloc *r)\r\n>\r\n>\r\nThe ARM changes needed access to the got symbol, so I didn't put the checn\r\nin a function\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode289<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode289>\r\n> src/cmd/ld/data.c:289: if (debug['U'] && r->sym != S && r->type ==\r\n> D_ADDR && (s->type == SDATA || s->type == SGOSTRING || s->type == STYPE\r\n> || s->type == SRODATA)) { // Create address based RELATIVE relocation\r\n> Wow again.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode290<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode290>\r\n> src/cmd/ld/data.c:290: Reloc *rel_r = addrel(rela);\r\n> Move var to top, uninitialized.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode297<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode297>\r\n> src/cmd/ld/data.c:297: adduint64(rela, R_X86_64_RELATIVE);\r\n> This is inappropriate in the ld directory. This directory is for\r\n> architecture-independent code. Instead, wrap this into a separate\r\n> function like adddynrel (which is provided by the architecture-dependent\r\n> directory).\r\n> I am not sure what to call it because I am not quite sure how it differs\r\n> from adddynrel, but adddynrela or addrelrel might be appropriate.\r\n>\r\n>\r\nDone.\r\n\r\nadddynrel is symbolic, while adddynrela (R_*_RELATIVE) address based\r\n(basically, the linker simply adds the relocation offset to the given\r\naddress), which is much simpler thus faster at link time. adddynrel is\r\nneeded for external and global symbols, but adddynrela can be used for the\r\nnumerous places in the resulting binary that needs compenation for the\r\ndynamic relocation offset.\r\n\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode1009<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1009>\r\n> src/cmd/ld/data.c:1009: if (debug['U']) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode1010<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1010>\r\n> src/cmd/ld/data.c:1010: for (s=datap; s != nil; s = s->next) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode1058<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1058>\r\n> src/cmd/ld/data.c:1058: if (debug['U']) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode1076<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1076>\r\n> src/cmd/ld/data.c:1076: if (s->type == SDATARELRO) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/data.c#newcode1329<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/data.c#newcode1329>\r\n> src/cmd/ld/data.c:1329: if (datarelro != nil) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/ld/go.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/go.c>\r\n> File src/cmd/ld/go.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/go.c#newcode735<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/go.c#newcode735>\r\n> src/cmd/ld/go.c:735: if (debug['U'])\r\n> no space\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/ld/lib.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/lib.c>\r\n> File src/cmd/ld/lib.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/lib.c#newcode107<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/lib.c#newcode107>\r\n> src/cmd/ld/lib.c:107: if (debug['U']) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**cmd/ld/symtab.c<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/symtab.c>\r\n> File src/cmd/ld/symtab.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> cmd/ld/symtab.c#newcode344<https://codereview.appspot.com/6926049/diff/18001/src/cmd/ld/symtab.c#newcode344>\r\n> src/cmd/ld/symtab.c:344: if (debug['U']) {\r\n> no space\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**make.bash<https://codereview.appspot.com/6926049/diff/18001/src/make.bash>\r\n> File src/make.bash (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/18001/src/**\r\n> make.bash#newcode26<https://codereview.appspot.com/6926049/diff/18001/src/make.bash#newcode26>\r\n> src/make.bash:26: # GO_FLAGS: Additional go_bootstrap arguments to use\r\n> when\r\n> Please move this to the CL with the cmd/go files.\r\n>\r\n>\r\nDone. I had to add GO_CCFLAGS instead, to allow -U to be passed to 6c.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/<https://codereview.appspot.com/6926049/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-06 04:17:29.760370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's still more going on here than I'm comfortable doing in one pass. I think things will move faster if you could split the cc and gc changes out of this CL into a separate CL, leaving the linker changes in this CL.\n\nAlso, please 'hg sync' to incorporate my recent changes. The new flag code I mentioned is in, so you should be able to use a long flag name now like -pic. Also, I refactored things to eliminate the various duplication in triplicate for ELF generation. You will probably run into merge conflicts that you'll need to fix and resolve, but the net effect should be less work for this CL.\n\n\"pic\" does not seem to be an accurate description of the changes here. I wonder if we can come up with better flag names. \n\nIn the 6g and 6c compilers, the changes are not making the code position-independent so much as they are making it relocatable to an address above the 4 GB boundary, by removing uses of instructions that assume 32-bit address encodings. I think a better flag would be something like\n\nif(thechar == '6')\n    flagcount(\"addr64\", &flag_addr64, \"do not assume 32-bit code and data addresses\");\n\nPerhaps someone reading this will volunteer a better name.\n\nIn the linkers, the changes are not making the code position-independent either. They are generating a relocatable shared object, so the flag should probably be -shared, as in:\n\nflagcount(\"shared\", &flag_shared, \"generate shared object\");\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/l.h\nFile src/cmd/5l/l.h (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/l.h#newcode197\nsrc/cmd/5l/l.h:197: char\tflags;\nPlease change this back to flag (singular).\nIt's fine in this tree to have a set of flag bits (a flag word, or char in this case) named flag. Although the code you started with never sets more than one bit at a time, other versions of this code have done so, and they've always used 'flag'.\n\nIn general this is quite old code, and I expect it to still be in use years from now, so if there's something that doesn't need to change, it's good not to change it, to make comparison easier. Little changes add up.\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/noop.c\nFile src/cmd/5l/noop.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/noop.c#newcode49\nsrc/cmd/5l/noop.c:49: linkcase(Prog *case_p)\ncasep (no _) would be more idiomatic for a simple argument.\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/noop.c#newcode51\nsrc/cmd/5l/noop.c:51: int jt = 0;\nPlease initialize variables in separate assignments, not in declarations.\nThat said, this code can be made simpler without the flag.\n\nstatic void\nlinkcase(Prog *p)\n{\n    Prog *p;\n\n    for(p = casep; p != P; p = p->link) {\n        if(p->as == ABCASE) {\n            for(; p != P && p->as == ABCASE; p = p->link)\n                p->pcrel = casep;      \n            break;\n        }\n    }\n}\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/span.c\nFile src/cmd/5l/span.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/span.c#newcode573\nsrc/cmd/5l/span.c:573: return flag_pic ? C_LCONADDR : C_LCON;\nPlease avoid ?:. They're too easy to get out of control.\nThink about writing the code so that it would be as easy as possible to delete\nthe flag_pic code. By inserting two lines:\n\nif(flag_pic)\n    return C_LCONADDR;\n\nyou can avoid touching any of the existing code. I'm not saying the\nflag_pic code will be deleted any time soon, but when someone else\nis reading the code and wants to ignore the flag_pic parts, they need\nto delete it mentally, and this makes that mental deletion easier.\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/6g/gsubr.c\nFile src/cmd/6g/gsubr.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/6g/gsubr.c#newcode560\nsrc/cmd/6g/gsubr.c:560: /* fallthrough */\nplease make this an explicit break.\nthen new cases can be added without introducing bugs.\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/l.h\nFile src/cmd/6l/l.h (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/l.h#newcode182\nsrc/cmd/6l/l.h:182: int\t\trel_ro;\nindented much farther than surrounding code\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/span.c\nFile src/cmd/6l/span.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/span.c#newcode377\nsrc/cmd/6l/span.c:377: /* fallthrough */\nif(flag_pic)\n    return Yiauto;\nreturn Yi32; /* TO DO: Yi64 */\n\nAlways make the pic code the special case.\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/span.c#newcode766\nsrc/cmd/6l/span.c:766: if(!flag_pic) {\nif(flag_pic)\n   goto bad;\n\nand then the other code can be left as is.\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/8l/asm.c\nFile src/cmd/8l/asm.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/8l/asm.c#newcode137\nsrc/cmd/8l/asm.c:137: }\nDoes something need to go here?\nIf it should never be called or needs to be implemented, \n    sysfatal(\"adddynrela not implemented\");\nwould be a good choice.\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttps://codereview.appspot.com/6926049/diff/31001/src/cmd/ld/data.c#newcode1040\nsrc/cmd/ld/data.c:1040: if(s->align != 0)\nWhen you sync you will need to add\n\ns->sect = sect;\n\nto the beginning of this loop body.",
			"disapproval": false,
			"date": "2013-01-07 02:24:20.842220",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/07 02:24:20, rsc wrote:\n> \n> \"pic\" does not seem to be an accurate description of the changes here. I wonder\n> if we can come up with better flag names. \n> \n> In the 6g and 6c compilers, the changes are not making the code\n> position-independent so much as they are making it relocatable to an address\n> above the 4 GB boundary, by removing uses of instructions that assume 32-bit\n> address encodings. I think a better flag would be something like\n> \n> if(thechar == '6')\n>     flagcount(\"addr64\", &flag_addr64, \"do not assume 32-bit code and data\n> addresses\");\n> \n> Perhaps someone reading this will volunteer a better name.\n\nI haven't looked at the code, but based on this comment, in the GCC world this is known as the model, controlled by the -mcmodel option.  The default is -mcmodel=small, which means that the program and data (but not heap or stack) must be in the low 2G of memory.  -mcmodel=medium means the program must be in the low 2G but the data can be anywhere.  -mcmodel=large means the program and data can be anywhere in memory.\n\nThis is not the same as the GCC option -fpic, which directs the compiler to generate code suitable for putting into a shared library.  The -fpic option produces code that may be loaded anywhere in memory, using runtime dynamic relocation.  When using the default -mcmodel=small option, the entire shared library text and data (but not heap or stack) must be less than 2G.",
			"disapproval": false,
			"date": "2013-01-07 20:24:08.702060",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nOn Mon, Jan 7, 2013 at 3:24 AM, <rsc@golang.org> wrote:\r\n\r\n> There's still more going on here than I'm comfortable doing in one pass.\r\n> I think things will move faster if you could split the cc and gc changes\r\n> out of this CL into a separate CL, leaving the linker changes in this\r\n> CL.\r\n>\r\n>\r\nDone. See\r\n\r\nhttps://codereview.appspot.com/7064048\r\n\r\nI'm not entirely happy with the need to change 6g and 6c (and later, 8c and\r\n8g) in such a brittle way, but I'm not sure how else to support pic code.\r\nOn way would be to reserve a link scratch register like ARM, at the cost of\r\nefficiency. And that definitely won't be fast on i386 with the lack of\r\nregisters.\r\n\r\n\r\n> Also, please 'hg sync' to incorporate my recent changes. The new flag\r\n> code I mentioned is in, so you should be able to use a long flag name\r\n> now like -pic. Also, I refactored things to eliminate the various\r\n> duplication in triplicate for ELF generation. You will probably run into\r\n> merge conflicts that you'll need to fix and resolve, but the net effect\r\n> should be less work for this CL.\r\n>\r\n>\r\nDone. And thanks, the single-character flags space were getting pretty\r\ncramped.\r\n\r\n\r\n> \"pic\" does not seem to be an accurate description of the changes here. I\r\n> wonder if we can come up with better flag names.\r\n>\r\n> In the 6g and 6c compilers, the changes are not making the code\r\n> position-independent so much as they are making it relocatable to an\r\n> address above the 4 GB boundary, by removing uses of instructions that\r\n> assume 32-bit address encodings. I think a better flag would be\r\n> something like\r\n>\r\n> if(thechar == '6')\r\n>     flagcount(\"addr64\", &flag_addr64, \"do not assume 32-bit code and\r\n> data addresses\");\r\n>\r\n> Perhaps someone reading this will volunteer a better name.\r\n>\r\n>\r\nYes, because of the way plan9 assembler is designed, 6g and 6c don't have\r\nto generate pic code directly. Instead, they avoid instructions\r\nincompatible with generating position independent code in the linker. In\r\nthat view, \"-pic\" is not entirely precise, but I'm not sure I like\r\n\"-addr64\" over \"-pic\". When I made the 6g and 6c changes, 32/64 bit\r\naddresses never crossed my mind, I only found and replaced the instructions\r\nthat were incompatible with the x86_64 RIP addressing mode. With that in\r\nmind, \"addr64\" could be a  confusing name for a user that simply wants to\r\ncreate a shared library.\r\n\r\nHow about \"-relocatable\"/\"-reloc\"?\r\n\r\n\r\n> In the linkers, the changes are not making the code position-independent\r\n> either. They are generating a relocatable shared object, so the flag\r\n> should probably be -shared, as in:\r\n>\r\n> flagcount(\"shared\", &flag_shared, \"generate shared object\");\r\n>\r\n>\r\nDone. Note that gcc -pie (position independent executable) use the same elf\r\nobject type (ET_DYN). Go executables generated with -shared can also be run\r\nas a normal executable.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/5l/l.h<https://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/l.h>\r\n> File src/cmd/5l/l.h (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/5l/l.h#newcode197<https://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/l.h#newcode197>\r\n> src/cmd/5l/l.h:197: char        flags;\r\n> Please change this back to flag (singular).\r\n> It's fine in this tree to have a set of flag bits (a flag word, or char\r\n> in this case) named flag. Although the code you started with never sets\r\n> more than one bit at a time, other versions of this code have done so,\r\n> and they've always used 'flag'.\r\n>\r\n> In general this is quite old code, and I expect it to still be in use\r\n> years from now, so if there's something that doesn't need to change,\r\n> it's good not to change it, to make comparison easier. Little changes\r\n> add up.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/5l/noop.c<https://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/noop.c>\r\n> File src/cmd/5l/noop.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/5l/noop.c#newcode49<https://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/noop.c#newcode49>\r\n> src/cmd/5l/noop.c:49: linkcase(Prog *case_p)\r\n> casep (no _) would be more idiomatic for a simple argument.\r\n>\r\n>\r\nDone\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/5l/noop.c#newcode51<https://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/noop.c#newcode51>\r\n> src/cmd/5l/noop.c:51: int jt = 0;\r\n> Please initialize variables in separate assignments, not in\r\n> declarations.\r\n> That said, this code can be made simpler without the flag.\r\n>\r\n> static void\r\n> linkcase(Prog *p)\r\n> {\r\n>     Prog *p;\r\n>\r\n>     for(p = casep; p != P; p = p->link) {\r\n>         if(p->as == ABCASE) {\r\n>             for(; p != P && p->as == ABCASE; p = p->link)\r\n>                 p->pcrel = casep;\r\n>             break;\r\n>         }\r\n>     }\r\n> }\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/5l/span.c<https://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/span.c>\r\n> File src/cmd/5l/span.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/5l/span.c#newcode573<https://codereview.appspot.com/6926049/diff/31001/src/cmd/5l/span.c#newcode573>\r\n> src/cmd/5l/span.c:573: return flag_pic ? C_LCONADDR : C_LCON;\r\n> Please avoid ?:. They're too easy to get out of control.\r\n> Think about writing the code so that it would be as easy as possible to\r\n> delete\r\n> the flag_pic code. By inserting two lines:\r\n>\r\n> if(flag_pic)\r\n>     return C_LCONADDR;\r\n>\r\n> you can avoid touching any of the existing code. I'm not saying the\r\n> flag_pic code will be deleted any time soon, but when someone else\r\n> is reading the code and wants to ignore the flag_pic parts, they need\r\n> to delete it mentally, and this makes that mental deletion easier.\r\n>\r\n>\r\nI understand. Done.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/6g/gsubr.c<https://codereview.appspot.com/6926049/diff/31001/src/cmd/6g/gsubr.c>\r\n> File src/cmd/6g/gsubr.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/6g/gsubr.c#newcode560<https://codereview.appspot.com/6926049/diff/31001/src/cmd/6g/gsubr.c#newcode560>\r\n> src/cmd/6g/gsubr.c:560: /* fallthrough */\r\n> please make this an explicit break.\r\n> then new cases can be added without introducing bugs.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/6l/l.h<https://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/l.h>\r\n> File src/cmd/6l/l.h (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/6l/l.h#newcode182<https://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/l.h#newcode182>\r\n> src/cmd/6l/l.h:182: int         rel_ro;\r\n> indented much farther than surrounding code\r\n>\r\n>\r\nDone. I used 2 tabs to compensate for the short \"int\". Maybe a space and a\r\ntab is better?\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/6l/span.c<https://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/span.c>\r\n> File src/cmd/6l/span.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/6l/span.c#newcode377<https://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/span.c#newcode377>\r\n> src/cmd/6l/span.c:377: /* fallthrough */\r\n> if(flag_pic)\r\n>     return Yiauto;\r\n> return Yi32; /* TO DO: Yi64 */\r\n>\r\n> Always make the pic code the special case.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/6l/span.c#newcode766<https://codereview.appspot.com/6926049/diff/31001/src/cmd/6l/span.c#newcode766>\r\n> src/cmd/6l/span.c:766: if(!flag_pic) {\r\n> if(flag_pic)\r\n>    goto bad;\r\n>\r\n> and then the other code can be left as is.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/8l/asm.c<https://codereview.appspot.com/6926049/diff/31001/src/cmd/8l/asm.c>\r\n> File src/cmd/8l/asm.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/8l/asm.c#newcode137<https://codereview.appspot.com/6926049/diff/31001/src/cmd/8l/asm.c#newcode137>\r\n> src/cmd/8l/asm.c:137: }\r\n> Does something need to go here?\r\n> If it should never be called or needs to be implemented,\r\n>     sysfatal(\"adddynrela not implemented\");\r\n> would be a good choice.\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**cmd/ld/data.c<https://codereview.appspot.com/6926049/diff/31001/src/cmd/ld/data.c>\r\n> File src/cmd/ld/data.c (right):\r\n>\r\n> https://codereview.appspot.**com/6926049/diff/31001/src/**\r\n> cmd/ld/data.c#newcode1040<https://codereview.appspot.com/6926049/diff/31001/src/cmd/ld/data.c#newcode1040>\r\n> src/cmd/ld/data.c:1040: if(s->align != 0)\r\n> When you sync you will need to add\r\n>\r\n> s->sect = sect;\r\n>\r\n> to the beginning of this loop body.\r\n>\r\n>\r\nThanks. Done.\r\n\r\n\r\n> https://codereview.appspot.**com/6926049/<https://codereview.appspot.com/6926049/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-07 12:29:52.994340",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"elias.naur@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've hg sync'ed and updated mgc0.c to use relative offsets for the GC_CALL gc instruction, to match what will be output by the linker by CL 6822078.",
			"disapproval": false,
			"date": "2013-01-19 13:59:17.905970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-30 16:29:43.214840",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I will submit this without this one line change:\r\n\r\n  //print(\"gcaddsym:    %s    %d    %s\\n\", s->name, s->size, gotype->name);\r\n  adduintxx(gc, GC_CALL, PtrSize);\r\n  adduintxx(gc, off, PtrSize);\r\n- addaddrplus(gc, decodetype_gc(gotype), 1*PtrSize);\r\n+ addaddrplus(gc, decodetype_gc(gotype), 4*PtrSize);\r\n  } else {\r\n  //print(\"gcaddsym:    %s    %d    <unknown type>\\n\", s->name, s->size);\r\n  for(a = -off&(PtrSize-1); a+PtrSize<=s->size; a+=PtrSize) {\r\n\r\nThat must go in at the same time as the change to mgc0.c, so they must be\r\nin the same CL.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-30 16:39:03.248000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"elias.naur@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1eadf11dd1b7 ***\n\n6l/5l: PIC and shared library support for the linkers.\n\nAdded the -shared flag to 5l/6l to output a PIC executable with the required\ndynamic relocations and RIP-relative addressing in machine code.\nAdded dummy support to 8l to avoid compilation errors\n\nSee also:\nhttps://codereview.appspot.com/6822078\nhttps://codereview.appspot.com/7064048\n\nand\n\nhttps://groups.google.com/d/topic/golang-nuts/P05BDjLcQ5k/discussion\n\nR=rsc, iant\nCC=golang-dev\nhttps://codereview.appspot.com/6926049\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-30 16:46:59.392460",
			"approval": false
		}
	],
	"owner_email": "elias.naur@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "elias.naur",
	"subject": "code review 6926049: 6c/6g/6l/go: PIC and shared library support.",
	"created": "2012-12-11 15:11:58.853320",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		14001,
		18001,
		31001,
		40001,
		43001,
		47001
	],
	"modified": "2013-02-17 21:28:09.171510",
	"closed": true,
	"issue": 6926049
}