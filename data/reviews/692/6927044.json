{
	"description": "openpgp: improve parser resilience & flexibility, add PublicKey.BitLength()\n\nThese are improvements I've made as necessary to develop Hockeypuck,\nan OpenPGP keyserver (https://launchpad.net/hockeypuck).\n\nThe max armor line length was increased to 96 because some keyservers (SKS)\nwill output armor with lines greater than 64 (the prior max).\n\nI've exposed packet.ReadEntity to support stream-parsing, useful for\nlarge SKS dump files.\n\nReadKeyRing attempts to recover in the event of malformed data.\n\nBecause many packet types are not yet supported, I added OpaquePacket to\ncapture unsupported types for offline storage and later reparsing.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"agl@golang.org"
	],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"casey.marshall@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6927044/diff/2001/openpgp/keys.go\nFile openpgp/keys.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/keys.go#newcode209\nopenpgp/keys.go:209: // Skip unreadable badly-formatted keys\ncomma after 'unreadable'.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go\nFile openpgp/packet/opaque.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode9\nopenpgp/packet/opaque.go:9: // An opaque packet represents an OpenPGP packet as raw unparsed\ns/An opaque packet /OpaquePacket /\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode9\nopenpgp/packet/opaque.go:9: // An opaque packet represents an OpenPGP packet as raw unparsed\ncomma after 'raw'.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode24\nopenpgp/packet/opaque.go:24: buf := bytes.NewBuffer([]byte{})\nThis looks like http://golang.org/pkg/io/ioutil/#ReadAll\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode30\nopenpgp/packet/opaque.go:30: // Serialize the packet to a writer in its original form including\ncomma after 'form'.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode30\nopenpgp/packet/opaque.go:30: // Serialize the packet to a writer in its original form including\nSerialize marshals the packet...\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode40\nopenpgp/packet/opaque.go:40: // Attempt to parse the opaque contents into a structure supported\n// Parse attempts to parse...\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode42\nopenpgp/packet/opaque.go:42: // will still be an opaque packet.\nwill be op.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode44\nopenpgp/packet/opaque.go:44: hdr := bytes.NewBuffer([]byte{})\ns/[]byte{}/nil/\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode49\nopenpgp/packet/opaque.go:49: return Read(io.MultiReader(bytes.NewBuffer(hdr.Bytes()), bytes.NewBuffer(op.Contents)))\nI'm not sure why you're creating a new bytes.Buffer for the first argument here.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode52\nopenpgp/packet/opaque.go:52: // Reads OpaquePackets from an io.Reader.\nOpaqueReader reads OpaquePackets from an io.Reader.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode75\nopenpgp/packet/opaque.go:75: // Read a subpacket from the opaque contents.\nOpaqueSubpacket represents an unparsed OpenPGP subpacket, as found in signature and user attribute packets.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode83\nopenpgp/packet/opaque.go:83: func OpaqueSubpackets(contents []byte) (result []*OpaqueSubpacket, err error) {\n// OpaqueSubpackets ...\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode84\nopenpgp/packet/opaque.go:84: result = []*OpaqueSubpacket{}\nvar result []*OpaqueSubpacket\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode86\nopenpgp/packet/opaque.go:86: subHeaderLen uint32\nyou're trying too hard to use named return values here.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/packet.go\nFile openpgp/packet/packet.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/packet.go#newcode345\nopenpgp/packet/packet.go:345: backup := bytes.NewBuffer([]byte{})\nthe argument can just be nil, I think.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/packet.go#newcode348\nopenpgp/packet/packet.go:348: var retry bool\nrather than use this bool, I think you can just:\n\nswitch err.(type) {\ncase errors.UnsupportedError, errors.UnkownPacketTypeError:\n  p = &OpaquePacket{...}\n}\n\nalthough maybe that doesn't work for some reason.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/public_key.go\nFile openpgp/packet/public_key.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/public_key.go#newcode416\nopenpgp/packet/public_key.go:416: // Return the bit length for the given public key.\n// BitLength returns the bit length for the given public key.",
			"disapproval": false,
			"date": "2012-12-11 15:08:41.495280",
			"approval": false
		},
		{
			"sender": "casey.marshall@gmail.com",
			"recipients": [
				"casey.marshall@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Adam,\nThanks for reviewing today. I've uploaded a patch with your recommended changes.\n\nBest,\nCasey\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/keys.go\nFile openpgp/keys.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/keys.go#newcode209\nopenpgp/keys.go:209: // Skip unreadable badly-formatted keys\nOn 2012/12/11 15:08:41, agl1 wrote:\n> comma after 'unreadable'.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go\nFile openpgp/packet/opaque.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode9\nopenpgp/packet/opaque.go:9: // An opaque packet represents an OpenPGP packet as raw unparsed\nOn 2012/12/11 15:08:41, agl1 wrote:\n> s/An opaque packet /OpaquePacket /\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode9\nopenpgp/packet/opaque.go:9: // An opaque packet represents an OpenPGP packet as raw unparsed\nOn 2012/12/11 15:08:41, agl1 wrote:\n> comma after 'raw'.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode9\nopenpgp/packet/opaque.go:9: // An opaque packet represents an OpenPGP packet as raw unparsed\nOn 2012/12/11 15:08:41, agl1 wrote:\n> s/An opaque packet /OpaquePacket /\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode24\nopenpgp/packet/opaque.go:24: buf := bytes.NewBuffer([]byte{})\nOn 2012/12/11 15:08:41, agl1 wrote:\n> This looks like http://golang.org/pkg/io/ioutil/#ReadAll\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode30\nopenpgp/packet/opaque.go:30: // Serialize the packet to a writer in its original form including\nOn 2012/12/11 15:08:41, agl1 wrote:\n> comma after 'form'.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode40\nopenpgp/packet/opaque.go:40: // Attempt to parse the opaque contents into a structure supported\nOn 2012/12/11 15:08:41, agl1 wrote:\n> // Parse attempts to parse...\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode42\nopenpgp/packet/opaque.go:42: // will still be an opaque packet.\nOn 2012/12/11 15:08:41, agl1 wrote:\n> will be op.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode44\nopenpgp/packet/opaque.go:44: hdr := bytes.NewBuffer([]byte{})\nOn 2012/12/11 15:08:41, agl1 wrote:\n> s/[]byte{}/nil/\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode49\nopenpgp/packet/opaque.go:49: return Read(io.MultiReader(bytes.NewBuffer(hdr.Bytes()), bytes.NewBuffer(op.Contents)))\nOn 2012/12/11 15:08:41, agl1 wrote:\n> I'm not sure why you're creating a new bytes.Buffer for the first argument here.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode52\nopenpgp/packet/opaque.go:52: // Reads OpaquePackets from an io.Reader.\nOn 2012/12/11 15:08:41, agl1 wrote:\n> OpaqueReader reads OpaquePackets from an io.Reader.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode75\nopenpgp/packet/opaque.go:75: // Read a subpacket from the opaque contents.\nOn 2012/12/11 15:08:41, agl1 wrote:\n> OpaqueSubpacket represents an unparsed OpenPGP subpacket, as found in signature\n> and user attribute packets.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode83\nopenpgp/packet/opaque.go:83: func OpaqueSubpackets(contents []byte) (result []*OpaqueSubpacket, err error) {\nOn 2012/12/11 15:08:41, agl1 wrote:\n> // OpaqueSubpackets ...\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode84\nopenpgp/packet/opaque.go:84: result = []*OpaqueSubpacket{}\nOn 2012/12/11 15:08:41, agl1 wrote:\n> var result []*OpaqueSubpacket\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/opaque.go#newcode86\nopenpgp/packet/opaque.go:86: subHeaderLen uint32\nOn 2012/12/11 15:08:41, agl1 wrote:\n> you're trying too hard to use named return values here.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/packet.go\nFile openpgp/packet/packet.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/packet.go#newcode345\nopenpgp/packet/packet.go:345: backup := bytes.NewBuffer([]byte{})\nOn 2012/12/11 15:08:41, agl1 wrote:\n> the argument can just be nil, I think.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/packet.go#newcode348\nopenpgp/packet/packet.go:348: var retry bool\nOn 2012/12/11 15:08:41, agl1 wrote:\n> rather than use this bool, I think you can just:\n> \n> switch err.(type) {\n> case errors.UnsupportedError, errors.UnkownPacketTypeError:\n>   p = &OpaquePacket{...}\n> }\n> \n> although maybe that doesn't work for some reason.\n\nDone.\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/public_key.go\nFile openpgp/packet/public_key.go (right):\n\nhttps://codereview.appspot.com/6927044/diff/2001/openpgp/packet/public_key.go#newcode416\nopenpgp/packet/public_key.go:416: // Return the bit length for the given public key.\nOn 2012/12/11 15:08:41, agl1 wrote:\n> // BitLength returns the bit length for the given public key.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-12 02:23:32.024050",
			"approval": false
		},
		{
			"sender": "casey.marshall@gmail.com",
			"recipients": [
				"casey.marshall@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Added copyright to new file opaque.go per contributor guidelines.",
			"disapproval": false,
			"date": "2012-12-12 20:50:18.629950",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"casey.marshall@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=040ebe98531e&repo=crypto ***\n\nopenpgp: improve parser resilience & flexibility, add PublicKey.BitLength()\n\nThese are improvements I've made as necessary to develop Hockeypuck,\nan OpenPGP keyserver (https://launchpad.net/hockeypuck).\n\nThe max armor line length was increased to 96 because some keyservers (SKS)\nwill output armor with lines greater than 64 (the prior max).\n\nI've exposed packet.ReadEntity to support stream-parsing, useful for\nlarge SKS dump files.\n\nReadKeyRing attempts to recover in the event of malformed data.\n\nBecause many packet types are not yet supported, I added OpaquePacket to\ncapture unsupported types for offline storage and later reparsing.\n\nR=agl\nCC=golang-dev\nhttps://codereview.appspot.com/6927044\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-12-15 19:30:18.306190",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"casey.marshall@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I submitted this with trivial changes. One of which was to add a FIXME because the TeeReader sadly breaks the ability to process PGP files as a stream:\n\nPreviously it was possible to feed a multi-gigabyte file through without using much memory but now the TeeReader will spool all of it. Probably not too hard to fix in the future so I've added a FIXME.",
			"disapproval": false,
			"date": "2012-12-15 19:31:42.738410",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"casey.marshall@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 19:50:55.582740",
			"approval": false
		}
	],
	"owner_email": "casey.marshall@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "cmars",
	"subject": "openpgp: improve parser resilience & flexibility, add P...",
	"created": "2012-12-11 06:19:04.668860",
	"patchsets": [
		1,
		2001,
		9,
		5002
	],
	"modified": "2013-07-21 19:50:55.677100",
	"closed": false,
	"issue": 6927044
}