{
	"description": "encoding/hex: canonicalize error type names\nAlso simplify the tests.\n\nFixes issue 2849.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ErrLength shouldn't be a type.\n On Feb 6, 2012 7:48 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> encoding/hex: canonicalize error type names\n>\n> Fixes issue 2849.\n>\n> Please review this at http://codereview.appspot.com/**5643045/<http://codereview.appspot.com/5643045/>\n>\n> Affected files:\n>  M src/pkg/encoding/hex/hex.go\n>\n>\n> Index: src/pkg/encoding/hex/hex.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/hex/hex.go\n> +++ b/src/pkg/encoding/hex/hex.go\n> @@ -29,15 +29,15 @@\n>        return len(src) * 2\n>  }\n>\n> -// OddLengthInputError results from decoding an odd length slice.\n> -type OddLengthInputError struct{}\n> +// ErrLength results from decoding an odd length slice.\n> +type ErrLength struct{}\n>\n> -func (OddLengthInputError) Error() string { return \"odd length hex\n> string\" }\n> +func (ErrLength) Error() string { return \"odd length hex string\" }\n>\n> -// InvalidHexCharError results from finding an invalid character in a hex\n> string.\n> -type InvalidHexCharError byte\n> +// ErrInvalid results from finding an invalid character in a hex string.\n> +type ErrInvalid byte\n>\n> -func (e InvalidHexCharError) Error() string {\n> +func (e ErrInvalid) Error() string {\n>        return \"invalid hex char: \" + strconv.Itoa(int(e))\n>  }\n>\n> @@ -46,21 +46,21 @@\n>  // Decode decodes src into DecodedLen(len(src)) bytes, returning the\n> actual\n>  // number of bytes written to dst.\n>  //\n> -// If Decode encounters invalid input, it returns an OddLengthInputError\n> or an\n> -// InvalidHexCharError.\n> +// If Decode encounters invalid input, it returns an ErrLength or an\n> +// ErrInvalid.\n>  func Decode(dst, src []byte) (int, error) {\n>        if len(src)%2 == 1 {\n> -               return 0, OddLengthInputError{}\n> +               return 0, ErrLength{}\n>        }\n>\n>        for i := 0; i < len(src)/2; i++ {\n>                a, ok := fromHexChar(src[i*2])\n>                if !ok {\n> -                       return 0, InvalidHexCharError(src[i*2])\n> +                       return 0, ErrInvalid(src[i*2])\n>                }\n>                b, ok := fromHexChar(src[i*2+1])\n>                if !ok {\n> -                       return 0, InvalidHexCharError(src[i*2+1]**)\n> +                       return 0, ErrInvalid(src[i*2+1])\n>                }\n>                dst[i] = (a << 4) | b\n>        }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-07 04:05:52.596173",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-07 05:53:04.251407",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Tue, Feb 7, 2012 at 4:14 PM, <r@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, bradfitz@golang.org, r@google.com\n> (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5643045/<http://codereview.appspot.com/5643045/>\n>\n",
			"disapproval": false,
			"date": "2012-02-08 00:50:34.177224",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-07 03:48:00.096090",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-07 05:19:08.633572",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5643045/diff/1002/src/pkg/encoding/hex/hex.go\nFile src/pkg/encoding/hex/hex.go (right):\n\nhttp://codereview.appspot.com/5643045/diff/1002/src/pkg/encoding/hex/hex.go#newcode37\nsrc/pkg/encoding/hex/hex.go:37: type ErrInvalid byte\nEverywhere(?) else in the standard library, ErrFoo is a variable and FooError is a type.\n\nYou're changing it away from the normal convention here.  Is that intentional?",
			"disapproval": false,
			"date": "2012-02-07 05:33:30.814789",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-07 06:23:14.242866",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hold on.\n\nthis error thing is bogus. (not my fault!) let me fix and test\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-07 05:55:02.920035",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i need coffee.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-07 05:53:13.569419",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "InvalidByteError with /or$/\n\nHolding, per your last email.\n\nBut wheels up shortly here.\n On Feb 6, 2012 9:53 PM, <r@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5643045/<http://codereview.appspot.com/5643045/>\n>\n",
			"disapproval": false,
			"date": "2012-02-07 05:57:29.929725",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-08 00:14:43.566668",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5643045/diff/1006/src/pkg/encoding/hex/hex.go\nFile src/pkg/encoding/hex/hex.go (right):\n\nhttp://codereview.appspot.com/5643045/diff/1006/src/pkg/encoding/hex/hex.go#newcode48\nsrc/pkg/encoding/hex/hex.go:48: // If Decode encounters invalid input, it returns an ErrLength or an\ns/an //\n\nhttp://codereview.appspot.com/5643045/diff/1006/src/pkg/encoding/hex/hex.go#newcode49\nsrc/pkg/encoding/hex/hex.go:49: // ErrInvalid.\ns/ErrInvalid/error of type InvalidByteError/",
			"disapproval": false,
			"date": "2012-02-08 00:07:47.294821",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=320932bfe991 ***\n\nencoding/hex: canonicalize error type names\nAlso simplify the tests.\n\nFixes issue 2849.\n\nR=golang-dev, bradfitz, r\nCC=golang-dev\nhttp://codereview.appspot.com/5643045",
			"disapproval": false,
			"date": "2012-02-08 00:53:39.121371",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5643045: encoding/hex: canonicalize error type names",
	"created": "2012-02-07 03:47:53.661941",
	"patchsets": [
		1,
		1002,
		3002,
		3003,
		1005,
		6,
		7006,
		1006,
		1007,
		3005
	],
	"modified": "2012-02-08 00:53:41.449187",
	"closed": true,
	"issue": 5643045
}