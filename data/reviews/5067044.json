{
	"description": "xml: Fix inconsistant XMLName behaviour for xml.Marshal/Unmarshal\n\nWhen xml.Marshal is called on a struct it will happily reflect the information in the \"tag\" of an XMLName member regardless of the type to give the struct a tag-name in it's XML form. This is backed up by the documentation which says:\n\nHowever xml.Unmarshal *does* care about the XMLName field being of type xml.Name, and currently returns the error \"field XMLName does not have type xml.Name\" if you have it set to something else.\n\nThis is firstly inconsistant with xml.Marshal but it also makes it impossible to use xml.Marshal alongside other Marshallers (like json/bson) without poluting the state's namespace with XMLName fields. Inorder to exclude fields from other Marshallers the convention has been started to tag fields as \"omitempty\"; which will cause the field not to display if it is at it's \"zero\" state, XMLName cannot have such as zero-state since it is a struct, so it is nicer to use a pointer/bool value for XMLName so it can be easily excluded when I want to Marshal my struct by some other wire format.\n\nAttached is the proposed minor change, that simply stops erring if it can't set the name on the XMLName field, which is just optional metadata anyway.\nFixes issue 2265.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "chrisfarms@gmail.com",
			"recipients": [
				"chrisfarms@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-20 11:53:39.121865",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"chrisfarms@gmail.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI would update the description, though, to be something like:\n\nxml: only write to XMLName if it's a Name in Unmarshal\n\nCurrently, Unmarshal returns an error, but Marshal() simply ignores it.  This change makes the behavior consistent.",
			"disapproval": false,
			"date": "2011-09-20 19:04:52.294655",
			"approval": true
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"chrisfarms@gmail.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Oh, you might also add a test or two.",
			"disapproval": false,
			"date": "2011-09-20 19:06:47.192547",
			"approval": false
		},
		{
			"sender": "chrisfarms@gmail.com",
			"recipients": [
				"chrisfarms@gmail.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, kevlar@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-11 20:55:36.033126",
			"approval": false
		},
		{
			"sender": "chrisfarms@gmail.com",
			"recipients": [
				"chrisfarms@gmail.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "sorry didn't add the test file ... *quickly learns process*.. brb",
			"disapproval": false,
			"date": "2011-10-11 20:57:07.842935",
			"approval": false
		},
		{
			"sender": "chrisfarms@gmail.com",
			"recipients": [
				"chrisfarms@gmail.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, kevlar@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-11 21:00:23.884255",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"chrisfarms@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Setting rsc as the reviewer.",
			"disapproval": false,
			"date": "2011-10-13 03:03:42.204348",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-10-14 21:28:20.907887",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"chrisfarms@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=94bf75f51cbe ***\n\nxml: match Marshal's XMLName behavior in Unmarshal\n\nWhen xml.Marshal is called on a struct it will happily\nreflect the information in the \"tag\" of an XMLName member\nregardless of the type to give the struct a tag-name in\nit's XML form. This is backed up by the documentation which\nsays:\n\nHowever xml.Unmarshal *does* care about the XMLName field\nbeing of type xml.Name, and currently returns the error\n\"field XMLName does not have type xml.Name\" if you have it\nset to something else.\n\nThis is firstly inconsistant with xml.Marshal but it also\nmakes it impossible to use xml.Marshal alongside other\nMarshallers (like json/bson) without poluting the state's\nnamespace with XMLName fields. Inorder to exclude fields\nfrom other Marshallers the convention has been started to\ntag fields as \"omitempty\"; which will cause the field not\nto display if it is at it's \"zero\" state, XMLName cannot\nhave such as zero-state since it is a struct, so it is nicer\nto use a pointer/bool value for XMLName so it can be easily\nexcluded when I want to Marshal my struct by some other\nwire format.\n\nAttached is the proposed minor change, that simply stops\nerring if it can't set the name on the XMLName field, which\nis just optional metadata anyway.\nFixes issue 2265.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5067044\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-10-14 21:29:57.437273",
			"approval": false
		}
	],
	"owner_email": "chrisfarms@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "chrisfarms",
	"subject": "code review 5067044: xml: Fix inconsistant XMLName behaviour for xml.Marshal...",
	"created": "2011-09-19 17:04:38.452401",
	"patchsets": [
		1,
		2001,
		8001,
		11001
	],
	"modified": "2011-11-02 00:58:30.076160",
	"closed": true,
	"issue": 5067044
}