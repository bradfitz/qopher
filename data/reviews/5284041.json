{
	"description": "http: RoundTrippers shouldn't mutate Request\n\nFixes issue 2146",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-13 20:36:57.578975",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Two questions.\n\n1. What parts of the request actually need to be modified?\nCan we write the code so that they don't need to be modified?\n\n2. This looks like a royal pain.  Why are we not instead\njust documenting that the RoundTripper can edit the request?\n\n",
			"disapproval": false,
			"date": "2011-10-14 16:44:45.001875",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-14 19:49:53.325988",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-13 17:44:59.225786",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "yeah...\n\nOn Thu, Oct 13, 2011 at 12:38 PM, <rsc@golang.org> wrote:\n\n> Can we make it not actually mutate the Request?\n> If not, we should explicitly allow it.\n> Breaking it and putting it back together fails\n> mysteriously in a concurrent world.\n>\n>\n>\n> http://codereview.appspot.com/**5284041/diff/6001/src/pkg/**http/client.go<http://codereview.appspot.com/5284041/diff/6001/src/pkg/http/client.go>\n> File src/pkg/http/client.go (right):\n>\n> http://codereview.appspot.com/**5284041/diff/6001/src/pkg/**\n> http/client.go#newcode99<http://codereview.appspot.com/5284041/diff/6001/src/pkg/http/client.go#newcode99>\n> src/pkg/http/client.go:99: err = os.NewError(\"http: no\n> http.Client.Transport or http.DefaultTransport\")\n> s/http.//g\n>\n> http://codereview.appspot.com/**5284041/diff/6001/src/pkg/**\n> http/transport.go<http://codereview.appspot.com/5284041/diff/6001/src/pkg/http/transport.go>\n> File src/pkg/http/transport.go (right):\n>\n> http://codereview.appspot.com/**5284041/diff/6001/src/pkg/**\n> http/transport.go#newcode309<http://codereview.appspot.com/5284041/diff/6001/src/pkg/http/transport.go#newcode309>\n> src/pkg/http/transport.go:309: pconn.mutateRequestFunc = func(req\n> *Request) func(*Request) {\n> Could you add a comment or two here about what is\n> going on?  At first glance this looks like it is mutating\n> the request, which is exactly what the RoundTripper is\n> not supposed to do.\n>\n> http://codereview.appspot.com/**5284041/diff/6001/src/pkg/**\n> http/transport.go#newcode464<http://codereview.appspot.com/5284041/diff/6001/src/pkg/http/transport.go#newcode464>\n> src/pkg/http/transport.go:464: // written.  It returns a function to\n> undo its mutations after\n> Oh, I see.  This is actually worse than mutating the request,\n> because you can't tell that it got changed once the\n> function returns.\n>\n> The failure mode is going to be people making the same\n> request in multiple goroutines simultaneously and\n> wondering why sometimes it works and sometimes they\n> get weird behavior.\n>\n> If the RoundTripper isn't supposed to edit the request,\n> it shouldn't edit the request.\n>\n> http://codereview.appspot.com/**5284041/<http://codereview.appspot.com/5284041/>\n>\n",
			"disapproval": false,
			"date": "2011-10-13 19:53:10.580005",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Can we make it not actually mutate the Request?\nIf not, we should explicitly allow it.\nBreaking it and putting it back together fails\nmysteriously in a concurrent world.\n\nhttp://codereview.appspot.com/5284041/diff/6001/src/pkg/http/client.go\nFile src/pkg/http/client.go (right):\n\nhttp://codereview.appspot.com/5284041/diff/6001/src/pkg/http/client.go#newcode99\nsrc/pkg/http/client.go:99: err = os.NewError(\"http: no http.Client.Transport or http.DefaultTransport\")\ns/http.//g\n\nhttp://codereview.appspot.com/5284041/diff/6001/src/pkg/http/transport.go\nFile src/pkg/http/transport.go (right):\n\nhttp://codereview.appspot.com/5284041/diff/6001/src/pkg/http/transport.go#newcode309\nsrc/pkg/http/transport.go:309: pconn.mutateRequestFunc = func(req *Request) func(*Request) {\nCould you add a comment or two here about what is\ngoing on?  At first glance this looks like it is mutating\nthe request, which is exactly what the RoundTripper is\nnot supposed to do.\n\nhttp://codereview.appspot.com/5284041/diff/6001/src/pkg/http/transport.go#newcode464\nsrc/pkg/http/transport.go:464: // written.  It returns a function to undo its mutations after\nOh, I see.  This is actually worse than mutating the request,\nbecause you can't tell that it got changed once the \nfunction returns.\n\nThe failure mode is going to be people making the same\nrequest in multiple goroutines simultaneously and \nwondering why sometimes it works and sometimes they\nget weird behavior.\n\nIf the RoundTripper isn't supposed to edit the request,\nit shouldn't edit the request.",
			"disapproval": false,
			"date": "2011-10-13 19:38:50.395478",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "If we're just talking about two headers, how bad is it to just\nhave a Request.Write that takes care of those two headers \nspecially?  We already have variants that filter out certain\nheaders, so it seems like we're pretty close.\n\nI'm of two minds about being able to mutate the request.\nOn the one hand, it *does* mutate the Body (by reading it).\nOn the other hand, a large number of important requests\ndo not have bodies.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-14 17:06:03.181154",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\nNo test changes were required, but since I hit a (useful) test failure\nduring development, I cleaned up one of the tests in the process.\n\nOn Thu, Oct 13, 2011 at 1:36 PM, <bradfitz@golang.org> wrote:\n\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5284041/<http://codereview.appspot.com/5284041/>\n>\n",
			"disapproval": false,
			"date": "2011-10-13 20:38:14.207027",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Oct 14, 2011 at 9:44 AM, Russ Cox <rsc@golang.org> wrote:\n\n> Two questions.\n>\n> 1. What parts of the request actually need to be modified?\n>\n\na) Proxy-Authorization header\nb) Accept-Encoding: gzip header\n\n\n> Can we write the code so that they don't need to be modified?\n>\n\nWe'd need a way to write a request + body with extra headers, but adding\nsuch a function is still several hops away from a\nClientConn.Write(*Request).\n\n\n> 2. This looks like a royal pain.\n\n\nyes.  but mostly the cloning code, but I think that could be useful\ngenerally and should be exported at some point.\n\nI think this CL is much simpler than the previous version.\n\n\n> Why are we not instead\n> just documenting that the RoundTripper can edit the request?\n>\n\nThat's how it was documented, but people complained (leading to earlier\nfixes cleaning up after gzip header), and logically it really shouldn't\nmutate the request.  You originally made the request that this shouldn't\nmutate the request, hence my filing the bug.\n",
			"disapproval": false,
			"date": "2011-10-14 16:49:52.325174",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nUp to you whether to mention Body.\n",
			"disapproval": false,
			"date": "2011-10-14 21:09:43.701026",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Oct 14, 2011 at 10:05 AM, Russ Cox <rsc@golang.org> wrote:\n\n> If we're just talking about two headers, how bad is it to just\n> have a Request.Write that takes care of those two headers\n> specially?  We already have variants that filter out certain\n> headers, so it seems like we're pretty close.\n>\n\ntrue.\n\nDone.  PTAL.\n\nI'm of two minds about being able to mutate the request.\n> On the one hand, it *does* mutate the Body (by reading it).\n>\n\nWant me to clarify that Body may be consumed?\n\n\n> On the other hand, a large number of important requests\n> do not have bodies.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-10-14 19:58:31.099642",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=18eaae34f73e ***\n\nhttp: RoundTrippers shouldn't mutate Request\n\nFixes issue 2146\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5284041",
			"disapproval": false,
			"date": "2011-10-14 21:16:22.756706",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5284041: http: RoundTrippers shouldn't mutate Request",
	"created": "2011-10-13 17:43:11.741742",
	"patchsets": [
		1,
		2001,
		1002,
		6001,
		9001,
		14001,
		18001
	],
	"modified": "2011-10-14 21:16:23.941057",
	"closed": true,
	"issue": 5284041
}