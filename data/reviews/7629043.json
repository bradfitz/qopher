{
	"description": "cmd/ld: external linking fixes for linux/386\n\nThe sticking point on 386 has been the \"PC relative\" relocations\nused to point the garbage collection metadata at the type info.\nThese aren't in the code segment, and I don't trust that the linker\nisn't doing something special that would be okay in code but\nnot when interpreting the pointers as data (for example, a PLT\njump table would be terrible).\n\nSolve the problem in two steps:\n\n1. Handle \"PC relative\" relocations within a section internally,\nso that the external linker never sees them.\n\n2. Move the gcdata and gcbss tables into the rodata section,\nwhere the type information lives, so that the relocations can\nbe handled internally.\n\n(To answer the obvious question, we make the gc->type\nreferences relative so that they need not be relocated\nindividually when generating a shared object file.)",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-03-08 06:28:33.101370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+iant\r\n",
			"disapproval": false,
			"date": "2013-03-08 18:48:33.749900",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PLT table construction is controlled by the type of the symbol.  You can get a PLT entry for an STT_FUNC symbol, but not for an STT_OBJECT symbol.",
			"disapproval": false,
			"date": "2013-03-08 22:44:45.589660",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-08 22:48:12.645830",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=01c40d533367 ***\n\ncmd/ld: external linking fixes for linux/386\n\nThe sticking point on 386 has been the \"PC relative\" relocations\nused to point the garbage collection metadata at the type info.\nThese aren't in the code segment, and I don't trust that the linker\nisn't doing something special that would be okay in code but\nnot when interpreting the pointers as data (for example, a PLT\njump table would be terrible).\n\nSolve the problem in two steps:\n\n1. Handle \"PC relative\" relocations within a section internally,\nso that the external linker never sees them.\n\n2. Move the gcdata and gcbss tables into the rodata section,\nwhere the type information lives, so that the relocations can\nbe handled internally.\n\n(To answer the obvious question, we make the gc->type\nreferences relative so that they need not be relocated\nindividually when generating a shared object file.)\n\nR=golang-dev, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7629043",
			"disapproval": false,
			"date": "2013-03-09 04:22:41.082430",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7629043: cmd/ld: external linking fixes for linux/386",
	"created": "2013-03-08 05:48:22.405970",
	"patchsets": [
		1,
		2001,
		5001,
		12001
	],
	"modified": "2013-03-09 22:49:55.529970",
	"closed": true,
	"issue": 7629043
}