{
	"description": "cmd/gc: add temporary-merging optimization pass\n\nThe compilers assume they can generate temporary variables\nas needed to preserve the right semantics or simplify code\ngeneration and the back end will still generate good code.\nThis turns out not to be true. The back ends will only\ntrack the first 128 variables per function and give up\non the remainder. That needs to be fixed too, in a later CL.\n\nThis CL merges temporary variables with equal types and\nnon-overlapping lifetimes using the greedy algorithm in\nPoletto and Sarkar, \"Linear Scan Register Allocation\",\nACM TOPLAS 1999.\n\nThe result can be striking in the right functions.\n\nTop 20 frame size changes in a 6g godoc binary by bytes saved:\n\n5464 1984 (-3480, -63.7%) go/build.(*Context).Import\n4456 1824 (-2632, -59.1%) go/printer.(*printer).expr1\n2560   80 (-2480, -96.9%) time.nextStdChunk\n3496 1608 (-1888, -54.0%) go/printer.(*printer).stmt\n1896  272 (-1624, -85.7%) net/http.init\n2688 1400 (-1288, -47.9%) fmt.(*pp).printReflectValue\n2800 1512 (-1288, -46.0%) main.main\n3296 2016 (-1280, -38.8%) crypto/tls.(*Conn).clientHandshake\n1664  488 (-1176, -70.7%) time.loadZoneZip\n1760  608 (-1152, -65.5%) time.parse\n4104 3072 (-1032, -25.1%) runtime/pprof.writeHeap\n1680  712 ( -968, -57.6%) go/ast.Walk\n2488 1560 ( -928, -37.3%) crypto/x509.parseCertificate\n1128  392 ( -736, -65.2%) math/big.nat.divLarge\n1528  864 ( -664, -43.5%) go/printer.(*printer).fieldList\n1360  712 ( -648, -47.6%) regexp/syntax.(*parser).factor\n2104 1528 ( -576, -27.4%) encoding/asn1.parseField\n1064  504 ( -560, -52.6%) encoding/xml.(*Decoder).text\n 584   48 ( -536, -91.8%) html.init\n1400  864 ( -536, -38.3%) go/doc.playExample\n\nIn the same godoc build, cuts the number of functions with\ntoo many vars from 83 to 32.",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"ken@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-13 04:09:29.212930",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=df2050eeba3a ***\n\ncmd/gc: add temporary-merging optimization pass\n\nThe compilers assume they can generate temporary variables\nas needed to preserve the right semantics or simplify code\ngeneration and the back end will still generate good code.\nThis turns out not to be true. The back ends will only\ntrack the first 128 variables per function and give up\non the remainder. That needs to be fixed too, in a later CL.\n\nThis CL merges temporary variables with equal types and\nnon-overlapping lifetimes using the greedy algorithm in\nPoletto and Sarkar, \"Linear Scan Register Allocation\",\nACM TOPLAS 1999.\n\nThe result can be striking in the right functions.\n\nTop 20 frame size changes in a 6g godoc binary by bytes saved:\n\n5464 1984 (-3480, -63.7%) go/build.(*Context).Import\n4456 1824 (-2632, -59.1%) go/printer.(*printer).expr1\n2560   80 (-2480, -96.9%) time.nextStdChunk\n3496 1608 (-1888, -54.0%) go/printer.(*printer).stmt\n1896  272 (-1624, -85.7%) net/http.init\n2688 1400 (-1288, -47.9%) fmt.(*pp).printReflectValue\n2800 1512 (-1288, -46.0%) main.main\n3296 2016 (-1280, -38.8%) crypto/tls.(*Conn).clientHandshake\n1664  488 (-1176, -70.7%) time.loadZoneZip\n1760  608 (-1152, -65.5%) time.parse\n4104 3072 (-1032, -25.1%) runtime/pprof.writeHeap\n1680  712 ( -968, -57.6%) go/ast.Walk\n2488 1560 ( -928, -37.3%) crypto/x509.parseCertificate\n1128  392 ( -736, -65.2%) math/big.nat.divLarge\n1528  864 ( -664, -43.5%) go/printer.(*printer).fieldList\n1360  712 ( -648, -47.6%) regexp/syntax.(*parser).factor\n2104 1528 ( -576, -27.4%) encoding/asn1.parseField\n1064  504 ( -560, -52.6%) encoding/xml.(*Decoder).text\n 584   48 ( -536, -91.8%) html.init\n1400  864 ( -536, -38.3%) go/doc.playExample\n\nIn the same godoc build, cuts the number of functions with\ntoo many vars from 83 to 32.\n\nR=ken2\nCC=golang-dev\nhttps://codereview.appspot.com/12829043",
			"disapproval": false,
			"date": "2013-08-13 04:09:34.862240",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/13 04:09:34, rsc wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=df2050eeba3a ***\n> \n> cmd/gc: add temporary-merging optimization pass\n> \n> The compilers assume they can generate temporary variables\n> as needed to preserve the right semantics or simplify code\n> generation and the back end will still generate good code.\n> This turns out not to be true. The back ends will only\n> track the first 128 variables per function and give up\n> on the remainder. That needs to be fixed too, in a later CL.\n> \n> This CL merges temporary variables with equal types and\n> non-overlapping lifetimes using the greedy algorithm in\n> Poletto and Sarkar, \"Linear Scan Register Allocation\",\n> ACM TOPLAS 1999.\n> \n> The result can be striking in the right functions.\n> \n> Top 20 frame size changes in a 6g godoc binary by bytes saved:\n> \n> 5464 1984 (-3480, -63.7%) go/build.(*Context).Import\n> 4456 1824 (-2632, -59.1%) go/printer.(*printer).expr1\n> 2560   80 (-2480, -96.9%) time.nextStdChunk\n> 3496 1608 (-1888, -54.0%) go/printer.(*printer).stmt\n> 1896  272 (-1624, -85.7%) net/http.init\n> 2688 1400 (-1288, -47.9%) fmt.(*pp).printReflectValue\n> 2800 1512 (-1288, -46.0%) main.main\n> 3296 2016 (-1280, -38.8%) crypto/tls.(*Conn).clientHandshake\n> 1664  488 (-1176, -70.7%) time.loadZoneZip\n> 1760  608 (-1152, -65.5%) time.parse\n> 4104 3072 (-1032, -25.1%) runtime/pprof.writeHeap\n> 1680  712 ( -968, -57.6%) go/ast.Walk\n> 2488 1560 ( -928, -37.3%) crypto/x509.parseCertificate\n> 1128  392 ( -736, -65.2%) math/big.nat.divLarge\n> 1528  864 ( -664, -43.5%) go/printer.(*printer).fieldList\n> 1360  712 ( -648, -47.6%) regexp/syntax.(*parser).factor\n> 2104 1528 ( -576, -27.4%) encoding/asn1.parseField\n> 1064  504 ( -560, -52.6%) encoding/xml.(*Decoder).text\n>  584   48 ( -536, -91.8%) html.init\n> 1400  864 ( -536, -38.3%) go/doc.playExample\n> \n> In the same godoc build, cuts the number of functions with\n> too many vars from 83 to 32.\n> \n> R=ken2\n> CC=golang-dev\n> https://codereview.appspot.com/12829043\n\nlttm",
			"disapproval": false,
			"date": "2013-08-13 10:34:32.993590",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 12829043: cmd/gc: add temporary-merging optimization pass",
	"created": "2013-08-13 03:32:17.119710",
	"patchsets": [
		1,
		3001,
		4008
	],
	"modified": "2013-08-13 10:34:33.226980",
	"closed": true,
	"issue": 12829043
}