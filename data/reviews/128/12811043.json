{
	"description": "cmd/vet: flag redundant invocations of String and Error methods in printf calls.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12811043/diff/6001/cmd/vet/print.go\nFile cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/6001/cmd/vet/print.go#newcode396\ncmd/vet/print.go:396: func (f *File) checkIfArgIsRedundant(arg ast.Expr) {\ncomment\n\nhttps://codereview.appspot.com/12811043/diff/6001/cmd/vet/print.go#newcode405\ncmd/vet/print.go:405: if n := sel.Sel.Name; n == \"String\" || n == \"Error\" {\nyou need to check the type. it must be string.",
			"disapproval": false,
			"date": "2013-08-13 01:07:41.415970",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-08-12 22:22:56.977160",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12811043/diff/6001/cmd/vet/print.go\nFile cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/6001/cmd/vet/print.go#newcode396\ncmd/vet/print.go:396: func (f *File) checkIfArgIsRedundant(arg ast.Expr) {\nOn 2013/08/13 01:07:41, r wrote:\n> comment\n\nDone.\n\nhttps://codereview.appspot.com/12811043/diff/6001/cmd/vet/print.go#newcode405\ncmd/vet/print.go:405: if n := sel.Sel.Name; n == \"String\" || n == \"Error\" {\nOn 2013/08/13 01:07:41, r wrote:\n\n> you need to check the type. it must be string.\n\nI also want to use this in situations where type checking fails. Are we that worried for this purpose that someone might have a method String() returning int? If it doesn't return a string-ish then matchArgType will flag it.",
			"disapproval": false,
			"date": "2013-08-13 01:24:41.335240",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "if type checking fails, you can still complain, but if it doesn't you\r\nshould check. Error() for instance is the one i'm more worried about. it's\r\na fine method name.\r\n",
			"disapproval": false,
			"date": "2013-08-13 01:33:55.720070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "matchArgType will complain if it can. it might not be able to.\r\n",
			"disapproval": false,
			"date": "2013-08-13 01:34:53.959800",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12811043/diff/21001/cmd/vet/types.go\nFile cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/21001/cmd/vet/types.go#newcode287\ncmd/vet/types.go:287: func (f *File) returnsString(sel *ast.SelectorExpr) bool {\nOn 2013/08/13 03:26:36, r wrote:\n\n> should just be an Expr so it can be used more broadly. also would be nice to\n> find a way to share the code one line above\n\nMade this take an ast.Expr.\n\nThe subtlety of behaving the desired way if type checking failed makes it impossible to reuse the previous method.",
			"disapproval": false,
			"date": "2013-08-13 03:32:32.636370",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-13 01:49:40.844410",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12811043/diff/16001/cmd/vet/testdata/print.go\nFile cmd/vet/testdata/print.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/16001/cmd/vet/testdata/print.go#newcode192\ncmd/vet/testdata/print.go:192: Printf(\"%s\", stringerv.String()) // ERROR \"redundant invocation of String method of stringerv\"\nan Error one too\n\nhttps://codereview.appspot.com/12811043/diff/16001/cmd/vet/types.go\nFile cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/16001/cmd/vet/types.go#newcode287\ncmd/vet/types.go:287: func (f *File) doesNotReturnString(sel *ast.SelectorExpr) bool {\nnegative true method call: no.\n\nreturnsString\n\nput the negation at the call site.",
			"disapproval": false,
			"date": "2013-08-13 02:18:54.709370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12811043/diff/23007/cmd/vet/types.go\nFile cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/23007/cmd/vet/types.go#newcode276\ncmd/vet/types.go:276: // Finally the real questions.\ns/s//\n\nhttps://codereview.appspot.com/12811043/diff/23007/cmd/vet/types.go#newcode280\ncmd/vet/types.go:280: // returnsString reports whether expr is a function that returns a string.\ns/function/call of a function/\n\nhttps://codereview.appspot.com/12811043/diff/23007/cmd/vet/types.go#newcode294\ncmd/vet/types.go:294: func hasStringReturn(sig *types.Signature) bool {\n// hasStringReturn reports whether the function signature has exactly one return value, of universe type string.",
			"disapproval": false,
			"date": "2013-08-13 03:44:19.719280",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-13 03:45:55.842680",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/12811043/diff/16001/cmd/vet/testdata/print.go\nFile cmd/vet/testdata/print.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/16001/cmd/vet/testdata/print.go#newcode192\ncmd/vet/testdata/print.go:192: Printf(\"%s\", stringerv.String()) // ERROR \"redundant invocation of String method of stringerv\"\nOn 2013/08/13 02:18:54, r wrote:\n\n> an Error one too\n\nDone, with an expression to exercise the type checker.\n\nhttps://codereview.appspot.com/12811043/diff/16001/cmd/vet/types.go\nFile cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/16001/cmd/vet/types.go#newcode287\ncmd/vet/types.go:287: func (f *File) doesNotReturnString(sel *ast.SelectorExpr) bool {\nOn 2013/08/13 02:18:54, r wrote:\n\n> negative true method call: no.\n> \n> returnsString\n> \n> put the negation at the call site.\n\nI was concerned about the type checking subtlety here and was trying to cover the bases, but I guess it's not worth it. Done.",
			"disapproval": false,
			"date": "2013-08-13 02:27:26.516880",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12811043/diff/21001/cmd/vet/types.go\nFile cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/12811043/diff/21001/cmd/vet/types.go#newcode287\ncmd/vet/types.go:287: func (f *File) returnsString(sel *ast.SelectorExpr) bool {\nshould just be an Expr so it can be used more broadly. also would be nice to find a way to share the code one line above",
			"disapproval": false,
			"date": "2013-08-13 03:26:35.938610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "that's not what i meant. sorry for being unclear. i meant, take that horrible final line from the last two functions in this file and make it a helper function",
			"disapproval": false,
			"date": "2013-08-13 03:39:09.158220",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-13 03:40:53.329800",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-13 03:47:18.836950",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=44387735a77d&repo=tools ***\n\ncmd/vet: flag redundant invocations of String and Error methods in printf calls.\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/12811043",
			"disapproval": false,
			"date": "2013-08-13 03:48:06.718770",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 12811043: cmd/vet: flag redundant invocations of String and Error...",
	"created": "2013-08-12 22:22:09.503110",
	"patchsets": [
		1,
		3001,
		6001,
		11001,
		16001,
		21001,
		29001,
		23007,
		34001,
		37001
	],
	"modified": "2013-08-13 03:48:09.371070",
	"closed": true,
	"issue": 12811043
}