{
	"description": "go.tools/go/types: clean up assignment checks (round 1)\n\nVarious bug fixes:\n- don't allow := to redeclare non-variables\n- don't permit a comma-ok expression as a two-value function return\n\nLots of dead code removed.\n\nFixes issue 5500.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-08 05:11:52.374770",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nVery nice.\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go\nFile go/types/assignments.go (right):\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go#newcode42\ngo/types/assignments.go:42: if !isConstType(x.typ) {\nJust curious: the only constant expression of nonconstant type is a nil literal.  Is that right?\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go#newcode60\ngo/types/assignments.go:60: // if the lhs doesn't have a type yet, use the type of x\n\"// If ... x.\" \n(Capitalize and append period, here and elsewhere.)\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go#newcode187\ngo/types/assignments.go:187: if scope.Insert(obj) == nil {\nEvery call to scope.Insert is dominated by the condition name!=\"_\".  Perhaps make this an explicit precondition of Insert and add an assertion.\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/testdata/stmt0.src\nFile go/types/testdata/stmt0.src (right):\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/testdata/stmt0.src#newcode62\ngo/types/testdata/stmt0.src:62: a, b, c /* ERROR \"cannot assign\" */  := 1, \"zwei\", 3.0\nPerhaps add a case for 'type' too:\n\ntype d int\na, b, c, d := 1, \"zwei\", 3.0, 4\n\nunless it's already covered.\n\nhttps://codereview.appspot.com/10792044/diff/30001/ssa/interp/testdata/mrvchain.go\nFile ssa/interp/testdata/mrvchain.go (right):\n\nhttps://codereview.appspot.com/10792044/diff/30001/ssa/interp/testdata/mrvchain.go#newcode44\nssa/interp/testdata/mrvchain.go:44: func h() (i interface{}, ok bool) {\nI'd be tempted to eliminate this test-case since it's no longer an instance of MRV chaining.  I would hope the logic it exercises is covered by other tests.",
			"disapproval": false,
			"date": "2013-07-08 14:26:11.929980",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go\nFile go/types/assignments.go (right):\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go#newcode42\ngo/types/assignments.go:42: if !isConstType(x.typ) {\nOn 2013/07/08 14:26:12, adonovan wrote:\n> Just curious: the only constant expression of nonconstant type is a nil literal.\n>  Is that right?\n\nI believe that's true.\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go#newcode60\ngo/types/assignments.go:60: // if the lhs doesn't have a type yet, use the type of x\nOn 2013/07/08 14:26:12, adonovan wrote:\n> \"// If ... x.\" \n> (Capitalize and append period, here and elsewhere.)\n\nDone.\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/assignments.go#newcode187\ngo/types/assignments.go:187: if scope.Insert(obj) == nil {\nOn 2013/07/08 14:26:12, adonovan wrote:\n> Every call to scope.Insert is dominated by the condition name!=\"_\".  Perhaps\n> make this an explicit precondition of Insert and add an assertion.\n\nDone.\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/testdata/stmt0.src\nFile go/types/testdata/stmt0.src (right):\n\nhttps://codereview.appspot.com/10792044/diff/30001/go/types/testdata/stmt0.src#newcode62\ngo/types/testdata/stmt0.src:62: a, b, c /* ERROR \"cannot assign\" */  := 1, \"zwei\", 3.0\nOn 2013/07/08 14:26:12, adonovan wrote:\n> Perhaps add a case for 'type' too:\n> \n> type d int\n> a, b, c, d := 1, \"zwei\", 3.0, 4\n> \n> unless it's already covered.\n\nDone.\n\nhttps://codereview.appspot.com/10792044/diff/30001/ssa/interp/testdata/mrvchain.go\nFile ssa/interp/testdata/mrvchain.go (right):\n\nhttps://codereview.appspot.com/10792044/diff/30001/ssa/interp/testdata/mrvchain.go#newcode44\nssa/interp/testdata/mrvchain.go:44: func h() (i interface{}, ok bool) {\nOn 2013/07/08 14:26:12, adonovan wrote:\n> I'd be tempted to eliminate this test-case since it's no longer an instance of\n> MRV chaining.  I would hope the logic it exercises is covered by other tests.\n\nACK",
			"disapproval": false,
			"date": "2013-07-08 16:34:57.121090",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0b8c3f043f83&repo=tools ***\n\ngo.tools/go/types: clean up assignment checks (round 1)\n\nVarious bug fixes:\n- don't allow := to redeclare non-variables\n- don't permit a comma-ok expression as a two-value function return\n\nLots of dead code removed.\n\nFixes issue 5500.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/10792044",
			"disapproval": false,
			"date": "2013-07-08 16:40:33.405690",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 10792044: go.tools/go/types: clean up assignment checks (round 1)",
	"created": "2013-07-04 04:53:10.338670",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		12001,
		14001,
		17001,
		20001,
		23001,
		26001,
		24006,
		30001,
		26002
	],
	"modified": "2013-07-08 16:40:36.655310",
	"closed": true,
	"issue": 10792044
}