{
	"description": "runtime: introduce helper persistentalloc() function\r\nIt is a caching wrapper around SysAlloc() that can allocate small chunks.\r\nUse it for symtab allocations. Reduces number of symtab walks from 4 to 3\r\n(reduces buildfuncs time from 10ms to 7.5ms on a large binary,\r\nreduces initial heap size by 680K on the same binary).\r\nAlso can be used for type info allocation, itab allocation.\r\nThere are also several places in GC where we do the same thing,\r\nthey can be changed to use persistentalloc().\r\nAlso can be used in FixAlloc, because each instance of FixAlloc allocates\r\nin 128K regions, which is too eager.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"khr@google.com"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-27 09:33:37.995930",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nhttps://codereview.appspot.com/9805043/diff/4001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/9805043/diff/4001/src/pkg/runtime/malloc.goc#newcode507\nsrc/pkg/runtime/malloc.goc:507: runtime\u00b7throw(\"persistentalloc: align is now a power of 2\");\ns/now/not/",
			"disapproval": false,
			"date": "2013-05-27 14:20:26.123250",
			"approval": true
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI'd define a second constant, PersistentAllocMaxBlock, and allocate\r\ndirectly above that size (instead of PersistentAllocChunk/2).  I think it\r\nalso makes sense to lower that constant a bit, to\r\nPersistentAllocChunk/4 or PersistentAllocChunk/8\r\nso we don't waste a lot of memory.\r\n\r\n\r\nOn Mon, May 27, 2013 at 7:20 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> LGTM.\r\n>\r\n>\r\n> https://codereview.appspot.**com/9805043/diff/4001/src/pkg/**\r\n> runtime/malloc.goc<https://codereview.appspot.com/9805043/diff/4001/src/pkg/runtime/malloc.goc>\r\n> File src/pkg/runtime/malloc.goc (right):\r\n>\r\n> https://codereview.appspot.**com/9805043/diff/4001/src/pkg/**\r\n> runtime/malloc.goc#newcode507<https://codereview.appspot.com/9805043/diff/4001/src/pkg/runtime/malloc.goc#newcode507>\r\n> src/pkg/runtime/malloc.goc:**507: runtime\u00b7throw(\"**persistentalloc: align\r\n> is\r\n>\r\n> now a power of 2\");\r\n> s/now/not/\r\n>\r\n> https://codereview.appspot.**com/9805043/<https://codereview.appspot.com/9805043/>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-27 21:35:17.571590",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 28, 2013 at 1:35 AM, Keith Randall <khr@google.com> wrote:\r\n\r\n> LGTM\r\n>\r\n> I'd define a second constant, PersistentAllocMaxBlock, and allocate\r\n> directly above that size (instead of PersistentAllocChunk/2).  I think it\r\n> also makes sense to lower that constant a bit, to PersistentAllocChunk/4\r\n> or PersistentAllocChunk/8 so we don't waste a lot of memory.\r\n>\r\n>\r\n\r\nOn Windows minimum allocation granularity is 64K. If you ask for 4K, it\r\nwill commit 4K, but reserve 64K of virtual address space. It is especially\r\nunpleasant on 32-bits.\r\nProbably we can increase PersistentAllocChunk to 256K, then\r\nPersistentAllocMaxBlock will be 1/4.\r\n",
			"disapproval": false,
			"date": "2013-05-28 04:01:47.614590",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/28 04:01:47, dvyukov wrote:\n> On Tue, May 28, 2013 at 1:35 AM, Keith Randall <mailto:khr@google.com> wrote:\n> \n> > LGTM\n> >\n> > I'd define a second constant, PersistentAllocMaxBlock, and allocate\n> > directly above that size (instead of PersistentAllocChunk/2).  I think it\n> > also makes sense to lower that constant a bit, to PersistentAllocChunk/4\n> > or PersistentAllocChunk/8 so we don't waste a lot of memory.\n> >\n> >\n> \n> On Windows minimum allocation granularity is 64K. If you ask for 4K, it\n> will commit 4K, but reserve 64K of virtual address space. It is especially\n> unpleasant on 32-bits.\n> Probably we can increase PersistentAllocChunk to 256K, then\n> PersistentAllocMaxBlock will be 1/4.\n\n\nIntroduced PersistentAllocMaxBlock=64K constant, and bumped PersistentAllocChunk to 256K.\nI think it should be fine, because on a large binary we allocate ~500K only for symtab.",
			"disapproval": false,
			"date": "2013-05-28 06:47:18.074240",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=776aba85ece8 ***\n\nruntime: introduce helper persistentalloc() function\nIt is a caching wrapper around SysAlloc() that can allocate small chunks.\nUse it for symtab allocations. Reduces number of symtab walks from 4 to 3\n(reduces buildfuncs time from 10ms to 7.5ms on a large binary,\nreduces initial heap size by 680K on the same binary).\nAlso can be used for type info allocation, itab allocation.\nThere are also several places in GC where we do the same thing,\nthey can be changed to use persistentalloc().\nAlso can be used in FixAlloc, because each instance of FixAlloc allocates\nin 128K regions, which is too eager.\n\nR=golang-dev, daniel.morsing, khr\nCC=golang-dev\nhttps://codereview.appspot.com/9805043",
			"disapproval": false,
			"date": "2013-05-28 06:47:51.171850",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/28 06:47:51, dvyukov wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=776aba85ece8 ***\n> \n> runtime: introduce helper persistentalloc() function\n> It is a caching wrapper around SysAlloc() that can allocate small chunks.\n> Use it for symtab allocations. Reduces number of symtab walks from 4 to 3\n> (reduces buildfuncs time from 10ms to 7.5ms on a large binary,\n> reduces initial heap size by 680K on the same binary).\n> Also can be used for type info allocation, itab allocation.\n> There are also several places in GC where we do the same thing,\n> they can be changed to use persistentalloc().\n> Also can be used in FixAlloc, because each instance of FixAlloc allocates\n> in 128K regions, which is too eager.\n> \n> R=golang-dev, daniel.morsing, khr\n> CC=golang-dev\n> https://codereview.appspot.com/9805043\n\nThis is causing build failures across all the amd64 builders. Please revert the change.",
			"disapproval": false,
			"date": "2013-05-28 07:02:51.905410",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "weird\r\n\r\nundo cl:\r\nhttps://codereview.appspot.com/9822043\r\n\r\n\r\n\r\nOn Tue, May 28, 2013 at 11:02 AM, <dave@cheney.net> wrote:\r\n\r\n> On 2013/05/28 06:47:51, dvyukov wrote:\r\n>\r\n>> *** Submitted as\r\n>>\r\n> https://code.google.com/p/go/**source/detail?r=776aba85ece8<https://code.google.com/p/go/source/detail?r=776aba85ece8>***\r\n>\r\n>  runtime: introduce helper persistentalloc() function\r\n>> It is a caching wrapper around SysAlloc() that can allocate small\r\n>>\r\n> chunks.\r\n>\r\n>> Use it for symtab allocations. Reduces number of symtab walks from 4\r\n>>\r\n> to 3\r\n>\r\n>> (reduces buildfuncs time from 10ms to 7.5ms on a large binary,\r\n>> reduces initial heap size by 680K on the same binary).\r\n>> Also can be used for type info allocation, itab allocation.\r\n>> There are also several places in GC where we do the same thing,\r\n>> they can be changed to use persistentalloc().\r\n>> Also can be used in FixAlloc, because each instance of FixAlloc\r\n>>\r\n> allocates\r\n>\r\n>> in 128K regions, which is too eager.\r\n>>\r\n>\r\n>  R=golang-dev, daniel.morsing, khr\r\n>> CC=golang-dev\r\n>> https://codereview.appspot.**com/9805043<https://codereview.appspot.com/9805043>\r\n>>\r\n>\r\n> This is causing build failures across all the amd64 builders. Please\r\n> revert the change.\r\n>\r\n> https://codereview.appspot.**com/9805043/<https://codereview.appspot.com/9805043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-28 07:14:18.195100",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9805043: runtime: introduce helper persistentalloc() function",
	"created": "2013-05-27 09:28:19.538100",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		17001
	],
	"modified": "2013-06-14 13:56:14.445280",
	"closed": true,
	"issue": 9805043
}