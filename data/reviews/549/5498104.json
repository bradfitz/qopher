{
	"description": "net/textproto: always copy the data from bufio to avoid corruption\n\nFixes issue 2621.",
	"cc": [
		"rsc@golang.org",
		"rsc@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-01-04 05:23:48.502416",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.",
			"disapproval": false,
			"date": "2012-01-11 21:24:27.503815",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks.  Now it's more obviously correct.",
			"disapproval": false,
			"date": "2012-01-12 02:51:39.239513",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not completely comfortable with this CL.\nReadSlice's result is not guaranteed to be valid\nafter another read operation, like the ReadByte\nin the test.  This code is making and testing\nproperties that are not guarantees of the API.\n\nWhy can't we just make net/textproto not make\nundocumented assumptions about bufio?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-11 21:28:51.212953",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 January 2012 08:28, Russ Cox <rsc@golang.org> wrote:\n> I am not completely comfortable with this CL.\n> ReadSlice's result is not guaranteed to be valid\n> after another read operation, like the ReadByte\n> in the test. \u00a0This code is making and testing\n> properties that are not guarantees of the API.\n\nFair enough. I wasn't sure if my reading of the API was correct. I\nwill send a documentation CL for bufio separately.\n\n> Why can't we just make net/textproto not make\n> undocumented assumptions about bufio?\n\nWe can. PTAL.\n",
			"disapproval": false,
			"date": "2012-01-11 23:00:18.605249",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go\nFile src/pkg/net/textproto/reader.go (right):\n\nhttp://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go#newcode130\nsrc/pkg/net/textproto/reader.go:130: line = trim(line)\nOn 2012/01/12 02:38:06, rsc1 wrote:\n> d\n\nDone.\n\nhttp://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go#newcode134\nsrc/pkg/net/textproto/reader.go:134: r.buf = append(r.buf[:0], line...)\nOn 2012/01/12 02:38:06, rsc1 wrote:\n> trim(line)...\n\nDone.\n\nhttp://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go#newcode137\nsrc/pkg/net/textproto/reader.go:137: for {\nOn 2012/01/12 02:38:06, rsc1 wrote:\n> If you make skipSpace return the number of spaces seen,\n> you can write\n> \n> for r.skipSpace() > 0 {\n> \n> and delete the next 6 lines\n\nDone.",
			"disapproval": false,
			"date": "2012-01-12 02:50:04.616551",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-11 22:58:21.472511",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8c6f3122826c ***\n\nnet/textproto: always copy the data from bufio to avoid corruption\n\nFixes issue 2621.\n\nR=rsc, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5498104",
			"disapproval": false,
			"date": "2012-01-12 03:16:07.804755",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5498104/diff/4001/src/pkg/net/textproto/reader.go\nFile src/pkg/net/textproto/reader.go (right):\n\nhttp://codereview.appspot.com/5498104/diff/4001/src/pkg/net/textproto/reader.go#newcode125\nsrc/pkg/net/textproto/reader.go:125: return line, err\nreturn nil, err\n\nhttp://codereview.appspot.com/5498104/diff/4001/src/pkg/net/textproto/reader.go#newcode135\nsrc/pkg/net/textproto/reader.go:135: defer func() {\nThis is too complicated.\n\nr.buf = append(r.buf[:0], line...)\n\n// Read continuation lines.\nfor {\n    c, err := r.R.ReadByte()\n    if err != nil {\n        break\n    }\n    if c != ' ' && c != '\\t' {\n        r.R.UnreadByte()\n        break\n    }\n    // Consume leading spaces.\n    for {\n        c, err = r.R.ReadByte()\n        if err != nil {\n            break\n        }\n        if c != ' ' && c != '\\t' {\n            r.R.UnreadByte()\n            break\n        }\n    }\n    line, err = r.readLineSlice()\n    if err != nil {\n        break\n    }\n    r.buf = append(r.buf, ' ')\n    r.buf = append(r.buf, line...)\n}\n\nreturn r.buf, nil",
			"disapproval": false,
			"date": "2012-01-12 01:43:20.721516",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5498104/diff/4001/src/pkg/net/textproto/reader.go\nFile src/pkg/net/textproto/reader.go (right):\n\nhttp://codereview.appspot.com/5498104/diff/4001/src/pkg/net/textproto/reader.go#newcode125\nsrc/pkg/net/textproto/reader.go:125: return line, err\nOn 2012/01/12 01:43:20, rsc wrote:\n> return nil, err\n\nDone.\n\nhttp://codereview.appspot.com/5498104/diff/4001/src/pkg/net/textproto/reader.go#newcode135\nsrc/pkg/net/textproto/reader.go:135: defer func() {\nOn 2012/01/12 01:43:20, rsc wrote:\n> This is too complicated.\n> \n> r.buf = append(r.buf[:0], line...)\n> \n> // Read continuation lines.\n> for {\n>     c, err := r.R.ReadByte()\n>     if err != nil {\n>         break\n>     }\n>     if c != ' ' && c != '\\t' {\n>         r.R.UnreadByte()\n>         break\n>     }\n>     // Consume leading spaces.\n>     for {\n>         c, err = r.R.ReadByte()\n>         if err != nil {\n>             break\n>         }\n>         if c != ' ' && c != '\\t' {\n>             r.R.UnreadByte()\n>             break\n>         }\n>     }\n>     line, err = r.readLineSlice()\n>     if err != nil {\n>         break\n>     }\n>     r.buf = append(r.buf, ' ')\n>     r.buf = append(r.buf, line...)\n> }\n> \n> return r.buf, nil\n\nDone.",
			"disapproval": false,
			"date": "2012-01-12 02:33:24.031795",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go\nFile src/pkg/net/textproto/reader.go (right):\n\nhttp://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go#newcode130\nsrc/pkg/net/textproto/reader.go:130: line = trim(line)\nd\n\nhttp://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go#newcode134\nsrc/pkg/net/textproto/reader.go:134: r.buf = append(r.buf[:0], line...)\ntrim(line)...\n\nhttp://codereview.appspot.com/5498104/diff/2003/src/pkg/net/textproto/reader.go#newcode137\nsrc/pkg/net/textproto/reader.go:137: for {\nIf you make skipSpace return the number of spaces seen,\nyou can write\n\nfor r.skipSpace() > 0 {\n\nand delete the next 6 lines",
			"disapproval": false,
			"date": "2012-01-12 02:38:06.319107",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-12 02:23:53.081443",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5498104: net/textproto: always copy the data from bufio to avoid...",
	"created": "2012-01-04 05:23:38.128724",
	"patchsets": [
		1,
		4001,
		7001,
		2003,
		2004,
		2007
	],
	"modified": "2012-01-12 03:16:10.170397",
	"closed": true,
	"issue": 5498104
}