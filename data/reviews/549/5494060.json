{
	"description": "strconv: implement fast path for rounding already short numbers.\n\nbenchmark                   old ns/op   new ns/op   delta\nBenchmarkFormatFloatDecimal      3765        1386    -63%",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go#newcode189\nsrc/pkg/strconv/ftoa.go:189: // If d is not denormal, then 2^exp < d < 10^dp.\nfirst < should be <=, no?\n\nhttp://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go#newcode190\nsrc/pkg/strconv/ftoa.go:190: // The distance to the closest shorter number is less than 5 * 10^(dp-nd).\ns/less than/at most/\n\nhttp://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go#newcode191\nsrc/pkg/strconv/ftoa.go:191: // The distance to the lower/upper bounds is more than 2^(exp-mantbits-1).\ns/more than/at least/\n\nhttp://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go#newcode192\nsrc/pkg/strconv/ftoa.go:192: // So if 10^(dp-nd+1) > 2^(exp-mantbits) we already have the\nIt would help future programmers to spell out the step here, namely:\n\n// So if 5*10^(dp-nd) < 2^(exp-mantbits-1), we already have the shortest number.\n// That is equivalent to 10^(dp-nd+1) < 2^(exp-mantbits). \n\nAnd then I lost you.  I don't see the leap to mantbits/10 > (nd-1)/3.\nWhere did dp and exp go?",
			"disapproval": false,
			"date": "2011-12-19 20:30:19.624721",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-16 22:52:31.902731",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go#newcode189\nsrc/pkg/strconv/ftoa.go:189: // If d is not denormal, then 2^exp < d < 10^dp.\nSure, the important consequence is that 2^exp < 10^dp.\n\nhttp://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go#newcode190\nsrc/pkg/strconv/ftoa.go:190: // The distance to the closest shorter number is less than 5 * 10^(dp-nd).\nSorry for that, French language habits.\n\nhttp://codereview.appspot.com/5494060/diff/1002/src/pkg/strconv/ftoa.go#newcode192\nsrc/pkg/strconv/ftoa.go:192: // So if 10^(dp-nd+1) > 2^(exp-mantbits) we already have the\nRight, I was a bit greedy on the math details. The reasoning here is that we know that 10^dp > 2^exp.\n\nIt is thus sufficient to get 10^(-nd+1) > 2^(-mantbits) to obtain the required inequality, which is 5*10^(dp-nd) > 2^(exp-mantbits-1).\n\nTaking reciprocals, we want to obtain 10^(nd-1) < 2^mantbits.\n\nNow, 10^(nd-1) = 1000^((nd-1)/3) and 2^mantbits = 1024^(mantbits/10), so a sufficient condition for the whole thing is (nd-1) < 3*mantbits/10 (something like nd<=16).\n\nIf this seems valid to youn I can edit the CL to give more detailed comments.",
			"disapproval": false,
			"date": "2011-12-19 20:59:56.336049",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-19 22:09:43.057658",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That reasoning looks good to me.\nPlease put it in a comment.\n\nThanks!\nRuss\n",
			"disapproval": false,
			"date": "2011-12-19 21:07:45.566407",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/19 Russ Cox <rsc@golang.org> wrote:\n> That reasoning looks good to me.\n> Please put it in a comment.\n\nAfter rewriting it, I realize it's wrong: you are sure to be shortest\nwith 15 digits, but certainly not with 16 digits since 2^-52 is a bit\nmore than 2e-16.\n\nI'm correcting the CL, I think the test cases were not strong enough\nto catch this.\n\nR\u00e9my.\n",
			"disapproval": false,
			"date": "2011-12-19 21:48:13.616615",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5494060/diff/3004/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5494060/diff/3004/src/pkg/strconv/ftoa.go#newcode201\nsrc/pkg/strconv/ftoa.go:201: // will suffice. For example, 2^-52 is about 2.22e-16, hence 15 decimal\nSomething is not right here.  You need 17 digits in general\nto fully specify a float64.  For example, these are distinct:\n\n1.0000000000000002\n1.0000000000000004",
			"disapproval": false,
			"date": "2012-01-10 20:37:01.138083",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5494060/diff/3004/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5494060/diff/3004/src/pkg/strconv/ftoa.go#newcode197\nsrc/pkg/strconv/ftoa.go:197: // Since already 10^dp > 2^exp, it is enough to arrange for\nI asked before about the leap here, and you explained it well, but\nI am still not sure it is the right thing to do.  It is definitely correct,\nbut 10^dp / 2^exp can be in the range (1, 10], and the simplification\nhere only takes advantage of the fact that it is >= 1.  In particular,\nif 10^dp / 2^exp >= 2.22 or so, then even a 16-digit representation\ncan be shortest and stop here.  3351200045039316 is such a number.\n\nI suggest making this part say:\n\n// So the number is already shortest if 10^(dp-nd) > 2^(exp-mantbits),\n// or equivalently log2(10)*(dp-nd) > exp-mantbits,\n// or equivalently 332*(dp-nd) > 100*(exp-mantbits).\nminexp := flt.bias + 1 // minimum possible exponent\nif exp > minexp && 332*(d.dp-d.nd) >= 100*(exp-int(flt.mantbits)) {\n    // The number is already shortest.\n    return\n}\n\nThat's less to explain and triggers in more cases.  Just running the \ncurrent test suite I found that it triggered (where this CL's current code\ndoes not) for\n\n412321923223059.5\n55136109853548720\n169307312997611200\n6910451436370337\n2459097028550238\n51320142329528640\n8515811600646302\n8532065512384777\n3905791496339036\n62160630055645.25\n3351200045039316\n4642390149040519\n23737736847187060",
			"disapproval": false,
			"date": "2012-01-12 05:35:39.383123",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as aa208a81cc08 ***\n\nstrconv: implement fast path for rounding already short numbers.\n\nbenchmark                   old ns/op   new ns/op   delta\nBenchmarkFormatFloatDecimal      3765        1386    -63%\n\nR=rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5494060\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-01-12 19:34:08.581305",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/10 20:37:01, rsc wrote:\n> http://codereview.appspot.com/5494060/diff/3004/src/pkg/strconv/ftoa.go\n> File src/pkg/strconv/ftoa.go (right):\n> \n> http://codereview.appspot.com/5494060/diff/3004/src/pkg/strconv/ftoa.go#newcode201\n> src/pkg/strconv/ftoa.go:201: // will suffice. For example, 2^-52 is about\n> 2.22e-16, hence 15 decimal\n> Something is not right here.  You need 17 digits in general\n> to fully specify a float64.  For example, these are distinct:\n> \n> 1.0000000000000002\n> 1.0000000000000004\n\nHum, this looks like a different problem: the question is how many digits ensure the shortest-ness of the number. 17 digits do not ensure the number is shortest, because there might be a 16-digit representation.\n\nHowever, if the number has only a few digits (15, for example), a shorter number is necessarily very far away, so it can't be a better representation. So if the number is *longer* that the limit (15 digits), there is doubt and a long computation must be done. But, as I got myself totally confused here, I am absolutely for a careful review of this.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-01-10 21:20:38.898509",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-12 19:31:45.199924",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-12 19:27:07.290830",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5494060: strconv: implement fast path for rounding already short...",
	"created": "2011-12-16 22:52:18.806915",
	"patchsets": [
		1,
		2001,
		1002,
		3004,
		11001
	],
	"modified": "2012-01-12 23:32:48.744629",
	"closed": true,
	"issue": 5494060
}