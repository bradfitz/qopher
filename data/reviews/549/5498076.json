{
	"description": "net/url: cleaned up URL interface (v2)\n\nDuplicated fields from URL were dropped so that its behavior\nis simple and expected when being stringified and when being\noperated by packages like http. Most of the preserved fields\nare in unencoded form, except for RawQuery which continues to\nexist and be more easily handled via url.Query().\n\nThe RawUserinfo field was also replaced since it wasn't practical\nto use and had limitations when operating with empty usernames\nand passwords which are allowed by the RFC. In its place the\nUserinfo type was introduced and made accessible through the\nurl.User and url.UserPassword functions.\n\nWhat was previous built as:\n\n        url.URL{RawUserinfo: url.EncodeUserinfo(\"user\", \"\"), ...}\n\nIs now built as:\n\n        url.URL{User: url.User(\"user\"), ...}",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"gustavo@niemeyer.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, all.bash caught some out of date logic in websocket. Fixed and uploading with all tests passing now.",
			"disapproval": false,
			"date": "2011-12-23 02:57:14.547046",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-23 02:49:25.360789",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-23 02:57:42.481821",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Are we looking at different RFCs?  I am looking at\nhttp://tools.ietf.org/html/rfc3986#appendix-A\nand it sure looks like everything with a scheme\nhas a ?query and a #fragment.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-13 23:29:38.790100",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "very nice, thanks.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode369\nsrc/pkg/net/url/url.go:369: // drop necessary information. E.g.: mailto:a@b.c?subject=d%26e&cc=f\nThis is an interesting example.  Reading RFC 3986 it seems like\nthe correct representation of this would be\n\nURL{Scheme: \"mailto\", Opaque: \"a@b.c\", Query: \"subject=d%26e&cc=f\"}\n\nbut that is not what we did in the original code, nor here.\nIn fact the original code says \"It doesn't even have a ?query\"\nbut I don't know where I got that from.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode439\nsrc/pkg/net/url/url.go:439: if url.Opaque != \"\" {\nSame comment as above.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode447\nsrc/pkg/net/url/url.go:447: // TODO: This needs at most two allocations.\n// TODO: Rewrite to use bytes.Buffer\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode658\nsrc/pkg/net/url/url.go:658: // QueryPath assembles the encoded <path>?<query> string\nQueryPath is a confusing name for something that is really Path+Query.\nAll the places this gets used, it is for creating an HTTP \"request URI\".\nLet's call it RequestURI.  It makes the meaning clearer at every call site\nin this CL.\n\n// RequestURI returns the path?query string to use in an HTTP request for the URL u.\n// If u is an opaque URL, RequestURI returns u.Opaque.\n\nAlso the comments in the package typically don't use <> around names\nbut I think this is the only instance.",
			"disapproval": false,
			"date": "2012-01-13 17:13:57.609117",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode233\nsrc/pkg/net/url/url.go:233: RawQuery string // encoded query values\nwith or without the leading \"?\"?\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode234\nsrc/pkg/net/url/url.go:234: Fragment string // fragment for references\nwith or without the leading \"#\" ?\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode266\nsrc/pkg/net/url/url.go:266: return u.username\nWhat about returning \"\" if u is nil?  Then people can call u.User.Username() safely if they want.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode279\nsrc/pkg/net/url/url.go:279: func (u *Userinfo) String() string {\nlikewise?\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode622\nsrc/pkg/net/url/url.go:622: url := *ref\nI was going to comment about shallow copy of the userinfo, but I see it's immutable.  Nice.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode664\nsrc/pkg/net/url/url.go:664: return u.Opaque\ndo you need to prepend scheme?\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode671\nsrc/pkg/net/url/url.go:671: result += \"?\" + u.RawQuery\nah, so RawQuery doesn't include the question mark.\n\nI'm debating whether it would ever matter to not be able to distinguish an HTTP request of\n\nGET /foo? HTTP/1.1\nvs.\n\nGET /foo HTTP/1.1\n\nProbably not.",
			"disapproval": false,
			"date": "2012-01-13 18:15:45.812189",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 13, 2012 at 15:37, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> Oops.. indeed, I'm sorry. I was consulting RFC 2396 as referred to by\n> most of the code (missed the reference at the package comment).\n\nSorry about that.  I have that problem too, but I learned a trick.\nThe trick is to always view the RFC using tools.ietf.org,\nwhich says at the top when an RFC is obsoleted by a\nnew one.  For example, a search for [tools.ietf.org 2396]\nproduces http://tools.ietf.org/html/rfc2396, which says\nat the top: Obsoleted by: 3986 (with link).\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-13 23:41:00.858876",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 13, 2012 at 3:41 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Fri, Jan 13, 2012 at 15:37, Gustavo Niemeyer <gustavo@niemeyer.net>\n> wrote:\n> > Oops.. indeed, I'm sorry. I was consulting RFC 2396 as referred to by\n> > most of the code (missed the reference at the package comment).\n>\n> Sorry about that.  I have that problem too, but I learned a trick.\n> The trick is to always view the RFC using tools.ietf.org,\n> which says at the top when an RFC is obsoleted by a\n> new one.  For example, a search for [tools.ietf.org 2396]\n> produces http://tools.ietf.org/html/rfc2396, which says\n> at the top: Obsoleted by: 3986 (with link).\n\n\noh, cute: the top bar color also changes from sad red to happy green, to\nlet you know you're reading the right one.\n",
			"disapproval": false,
			"date": "2012-01-13 23:44:34.389862",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e889f27eff10 ***\n\nnet/url: cleaned up URL interface (v2)\n\nDuplicated fields from URL were dropped so that its behavior\nis simple and expected when being stringified and when being\noperated by packages like http. Most of the preserved fields\nare in unencoded form, except for RawQuery which continues to\nexist and be more easily handled via url.Query().\n\nThe RawUserinfo field was also replaced since it wasn't practical\nto use and had limitations when operating with empty usernames\nand passwords which are allowed by the RFC. In its place the\nUserinfo type was introduced and made accessible through the\nurl.User and url.UserPassword functions.\n\nWhat was previous built as:\n\n        url.URL{RawUserinfo: url.EncodeUserinfo(\"user\", \"\"), ...}\n\nIs now built as:\n\n        url.URL{User: url.User(\"user\"), ...}\n\nR=rsc, bradfitz, gustavo\nCC=golang-dev\nhttp://codereview.appspot.com/5498076",
			"disapproval": false,
			"date": "2012-01-17 02:49:16.853701",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode233\nsrc/pkg/net/url/url.go:233: RawQuery string // encoded query values\nOn 2012/01/13 18:15:45, bradfitz wrote:\n> with or without the leading \"?\"?\n\nWithout. Improved the comment.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode234\nsrc/pkg/net/url/url.go:234: Fragment string // fragment for references\nOn 2012/01/13 18:15:45, bradfitz wrote:\n> with or without the leading \"#\" ?\n\nWithout. Improved the comment.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode266\nsrc/pkg/net/url/url.go:266: return u.username\nOn 2012/01/13 18:15:45, bradfitz wrote:\n> What about returning \"\" if u is nil?  Then people can call u.User.Username()\n> safely if they want.\n\nThere's a distinction between an empty username and a non-provided one according to RFC 1738:\n\n`Note that an empty user name or password is different than no user name or password; there is no way to specify a password without specifying a user name.`\n\nConsidering that doing != nil is just as easy as doing != \"\", I'd rather not encourage people to break that.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode369\nsrc/pkg/net/url/url.go:369: // drop necessary information. E.g.: mailto:a@b.c?subject=d%26e&cc=f\nOn 2012/01/13 17:13:57, rsc1 wrote:\n> This is an interesting example.  Reading RFC 3986 it seems like\n> the correct representation of this would be\n> \n> URL{Scheme: \"mailto\", Opaque: \"a@b.c\", Query: \"subject=d%26e&cc=f\"}\n\nThe example was hand-picked indeed to expose the issue. There are two different ways to see this instance:\n\nThe first one is that the RFC actually makes it clear that the generic notation for URIs does not attribute any special meaning to its content, and the query component is only defined for hierarchical URIs, which mailto is not.\n\nThe second view takes a more pragmatic approach and ignores the fact the RFC doesn't define query for opaque_part and splits it off anyway.\n\nThe first approach makes URLs like 'mailto' inconvenient to use. The second approach means people might have to re-join a badly broken URL by hand or use RequestURI.\n\nI'm happy to switch the code to the second approach and have a more pragmatic and useful behavior. Most non-standard URIs I've seen in the wild tend to mimic the query format anyway, so this sounds like a good reason to diverge from the RFC.\n\nAs a minor note, for this to make sense we have to go one step further and split off the fragment too when dealing with references.\n\nI'm pushing that change to see how it feels. Please take a look and see what you think.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode447\nsrc/pkg/net/url/url.go:447: // TODO: This needs at most two allocations.\nOn 2012/01/13 17:13:57, rsc1 wrote:\n> // TODO: Rewrite to use bytes.Buffer\n\nDone.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode658\nsrc/pkg/net/url/url.go:658: // QueryPath assembles the encoded <path>?<query> string\nOn 2012/01/13 17:13:57, rsc1 wrote:\n> QueryPath is a confusing name for something that is really Path+Query.\n> All the places this gets used, it is for creating an HTTP \"request URI\".\n> Let's call it RequestURI.  It makes the meaning clearer at every call site\n> in this CL.\n> \n> // RequestURI returns the path?query string to use in an HTTP request for the\n> URL u.\n> // If u is an opaque URL, RequestURI returns u.Opaque.\n> \n> Also the comments in the package typically don't use <> around names\n> but I think this is the only instance.\n\nDone.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode664\nsrc/pkg/net/url/url.go:664: return u.Opaque\nOn 2012/01/13 18:15:45, bradfitz wrote:\n> do you need to prepend scheme?\n\nNot if we want to make it consistent with the rest of this function.\n\nhttp://codereview.appspot.com/5498076/diff/5023/src/pkg/net/url/url.go#newcode671\nsrc/pkg/net/url/url.go:671: result += \"?\" + u.RawQuery\nOn 2012/01/13 18:15:45, bradfitz wrote:\n> ah, so RawQuery doesn't include the question mark.\n> \n> I'm debating whether it would ever matter to not be able to distinguish an HTTP\n> request of\n> \n> GET /foo? HTTP/1.1\n> vs.\n> \n> GET /foo HTTP/1.1\n> \n> Probably not.\n\nWe've made a decision not to allow non-standard escaping to satisfy weird servers. This seems to fall onto the same category.",
			"disapproval": false,
			"date": "2012-01-13 22:50:12.031139",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 13, 2012 at 14:50,  <n13m3y3r@gmail.com> wrote:\n> The first one is that the RFC actually makes it clear that the generic\n> notation for URIs does not attribute any special meaning to its content,\n> and the query component is only defined for hierarchical URIs, which\n> mailto is not.\n\nCitation?\n",
			"disapproval": false,
			"date": "2012-01-13 23:11:16.274481",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Sorry about that. \u00a0I have that problem too, but I learned a trick.\n> The trick is to always view the RFC using tools.ietf.org,\n> which says at the top when an RFC is obsoleted by a\n> new one. \u00a0For example, a search for [tools.ietf.org 2396]\n> produces http://tools.ietf.org/html/rfc2396, which says\n> at the top: Obsoleted by: 3986 (with link).\n\nThat's very nice indeed, thanks for the hint.\n\nI've improved the documentation around Opaque and added a test for\nresolving references to it.\n\nPTAL\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-14 03:15:37.582732",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 14, 2012 at 00:11, Russ Cox <rsc@golang.org> wrote:\n> On Fri, Jan 13, 2012 at 14:50, \u00a0<n13m3y3r@gmail.com> wrote:\n>> The first one is that the RFC actually makes it clear that the generic\n>> notation for URIs does not attribute any special meaning to its content,\n>> and the query component is only defined for hierarchical URIs, which\n>> mailto is not.\n>\n> Citation?\n\nAgain, I'm happy to split it off. It sounds useful.\n\nAs for the citation,\n\nShort version:\n\n      A. Collected BNF for URI\n\n      absoluteURI   = scheme \":\" ( hier_part | opaque_part )\n      relativeURI   = ( net_path | abs_path | rel_path ) [ \"?\" query ]\n      hier_part     = ( net_path | abs_path ) [ \"?\" query ]\n      opaque_part   = uric_no_slash *uric\n\nLong version:\n\n   3. 3. URI Syntactic Components\n   (...)\n   The URI syntax does not require that the scheme-specific-part have\n   any general structure or set of semantics which is common among all\n   URI.  However, a subset of URI do share a common syntax for\n   representing hierarchical relationships within the namespace.  This\n   \"generic URI\" syntax consists of a sequence of four main components:\n\n      <scheme>://<authority><path>?<query>\n\n   each of which, except <scheme>, may be absent from a particular URI.\n   For example, some URI schemes do not allow an <authority> component,\n   and others do not use a <query> component.\n\n      absoluteURI   = scheme \":\" ( hier_part | opaque_part )\n\n   URI that are hierarchical in nature use the slash \"/\" character for\n   separating hierarchical components.  For some file systems, a \"/\"\n   character (used to denote the hierarchical structure of a URI) is the\n   delimiter used to construct a file name hierarchy, and thus the URI\n   path will look similar to a file pathname.  This does NOT imply that\n   the resource is a file or that the URI maps to an actual filesystem\n   pathname.\n\n      hier_part     = ( net_path | abs_path ) [ \"?\" query ]\n      net_path      = \"//\" authority [ abs_path ]\n      abs_path      = \"/\"  path_segments\n\n   URI that do not make use of the slash \"/\" character for separating\n   hierarchical components are considered opaque by the generic URI\n   parser.\n\n      opaque_part   = uric_no_slash *uric\n\n      uric_no_slash = unreserved | escaped | \";\" | \"?\" | \":\" | \"@\" |\n                      \"&\" | \"=\" | \"+\" | \"$\" | \",\"\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-13 23:24:13.101786",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5498076/diff/8018/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttp://codereview.appspot.com/5498076/diff/8018/src/pkg/net/url/url.go#newcode650\nsrc/pkg/net/url/url.go:650: // RequestURI assembles the encoded path?query or opaque?query\ns/assembles the encoded/returns the/\n\nhttp://codereview.appspot.com/5498076/diff/8018/src/pkg/net/url/url.go#newcode651\nsrc/pkg/net/url/url.go:651: // string that is used to query for this resource.\n// string that would be used in an HTTP request for u.",
			"disapproval": false,
			"date": "2012-01-16 23:02:38.149613",
			"approval": true
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Are we looking at different RFCs? \u00a0I am looking at\n> http://tools.ietf.org/html/rfc3986#appendix-A\n> and it sure looks like everything with a scheme\n> has a ?query and a #fragment.\n\nOops.. indeed, I'm sorry. I was consulting RFC 2396 as referred to by\nmost of the code (missed the reference at the package comment).\n\nSo yes, there are no questions that the new behavior is the correct\none. I'll fix the comment.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-13 23:38:08.329424",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 5498076: net/url: cleaned up URL interface (v2)",
	"created": "2011-12-23 00:49:38.200388",
	"patchsets": [
		1,
		2001,
		3,
		1002,
		2014,
		15,
		6001,
		6002,
		5023,
		11001,
		14003,
		8018,
		11030
	],
	"modified": "2012-01-17 02:49:19.680382",
	"closed": true,
	"issue": 5498076
}