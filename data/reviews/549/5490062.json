{
	"description": "exp/proxy: new package\n\nexp/proxy provides client support for tunneling connections through\nvarious proxies.\n\nThis is an initial, incomplete sketch of the code to lay down an\nAPI.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"r@golang.org",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-17 17:14:24.575561",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The CL desc still says net/proxy.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-20 18:48:21.220039",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "no real input on the API here, as i'm not qualified.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go\nFile src/pkg/exp/proxy/per_host.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode23\nsrc/pkg/exp/proxy/per_host.go:23: func NewPerHost(defaultProxy, bypass Proxy) *PerHost {\ncomment?\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode30\nsrc/pkg/exp/proxy/per_host.go:30: func (p *PerHost) Dial(network, addr string) (c net.Conn, err error) {\ncomment?\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode72\nsrc/pkg/exp/proxy/per_host.go:72: // AddFromString parses a string that contains comma separated values\ns/comma separated/comma-separated/ (adjectives use hyphens)\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode104\nsrc/pkg/exp/proxy/per_host.go:104: // this will only take effect if the IP is dialed specifically. A connection to\n\"specifically\"?\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode111\nsrc/pkg/exp/proxy/per_host.go:111: // will only take effect if an IP is dialed specifically. A connection to a\nditto.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode118\nsrc/pkg/exp/proxy/per_host.go:118: // \"example.com\" matches \"example.com\" and all of it's subdomains.\ns/it's/its/\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode129\nsrc/pkg/exp/proxy/per_host.go:129: // AddHost specifies a hostname which should use the bypass proxy.\nnot sure what 'should' implies.\ns/which/that/\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go\nFile src/pkg/exp/proxy/proxy.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode52\nsrc/pkg/exp/proxy/proxy.go:52: // RegisterProxyType takes a URL scheme and a function to generate Proxy's from\ns/Proxy's/Proxies/\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode63\nsrc/pkg/exp/proxy/proxy.go:63: // Proxy for it to make network requests. It returns nil on error.\nwhy not return an error too?\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go\nFile src/pkg/exp/proxy/socks5.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go#newcode14\nsrc/pkg/exp/proxy/socks5.go:14: // SOCKS5 returns a Proxy which makes SOCKSv5 connections to the given address\ns/which/that/\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go#newcode59\nsrc/pkg/exp/proxy/socks5.go:59: func (s *socks5) Dial(network, addr string) (net.Conn, error) {\ncomment?\n(not sure if Dial needs one, generally)",
			"disapproval": false,
			"date": "2011-12-20 18:55:58.079152",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 20, 2011 at 1:48 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> The CL desc still says net/proxy.\n\nUpdated, thanks.\n\n\nAGL\n",
			"disapproval": false,
			"date": "2011-12-20 18:50:03.970078",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/direct.go\nFile src/pkg/exp/proxy/direct.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/direct.go#newcode11\nsrc/pkg/exp/proxy/direct.go:11: type direct int\nOn 2011/12/20 19:07:12, bradfitz wrote:\n> type direct struct{}\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/direct.go#newcode16\nsrc/pkg/exp/proxy/direct.go:16: func (d direct) Dial(network, addr string) (net.Conn, error) {\nOn 2011/12/20 19:07:12, bradfitz wrote:\n> drop the receiver name\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go\nFile src/pkg/exp/proxy/per_host.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode23\nsrc/pkg/exp/proxy/per_host.go:23: func NewPerHost(defaultProxy, bypass Proxy) *PerHost {\nOn 2011/12/20 18:55:58, r wrote:\n> comment?\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode30\nsrc/pkg/exp/proxy/per_host.go:30: func (p *PerHost) Dial(network, addr string) (c net.Conn, err error) {\nOn 2011/12/20 18:55:58, r wrote:\n> comment?\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode72\nsrc/pkg/exp/proxy/per_host.go:72: // AddFromString parses a string that contains comma separated values\nOn 2011/12/20 18:55:58, r wrote:\n> s/comma separated/comma-separated/ (adjectives use hyphens)\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode104\nsrc/pkg/exp/proxy/per_host.go:104: // this will only take effect if the IP is dialed specifically. A connection to\nOn 2011/12/20 18:55:58, r wrote:\n> \"specifically\"?\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode111\nsrc/pkg/exp/proxy/per_host.go:111: // will only take effect if an IP is dialed specifically. A connection to a\nOn 2011/12/20 18:55:58, r wrote:\n> ditto.\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode118\nsrc/pkg/exp/proxy/per_host.go:118: // \"example.com\" matches \"example.com\" and all of it's subdomains.\nOn 2011/12/20 18:55:58, r wrote:\n> s/it's/its/\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/per_host.go#newcode129\nsrc/pkg/exp/proxy/per_host.go:129: // AddHost specifies a hostname which should use the bypass proxy.\nOn 2011/12/20 18:55:58, r wrote:\n> not sure what 'should' implies.\n> s/which/that/\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go\nFile src/pkg/exp/proxy/proxy.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode17\nsrc/pkg/exp/proxy/proxy.go:17: type Proxy interface {\nOn 2011/12/20 19:07:12, bradfitz wrote:\n> rather than Proxy, what about Dialer?\n\nYep, I like that. Dialer it is.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode22\nsrc/pkg/exp/proxy/proxy.go:22: // DefaultProxy returns the default proxy specified by the environment.\nOn 2011/12/20 19:07:12, bradfitz wrote:\n> is this a spec or something?  I seem to recall somebody else referencing some\n> informal docs on this for the http package's\n> http://weekly.golang.org/pkg/net/http/#ProxyFromEnvironment which I think is\n> similar?\n\nYes, that code is similar. I don't actually know if this is a spec, but it's respected by wget, curl, Chrome etc and setting the Gnome proxy settings affects it. So it's a pretty good convention at least.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode52\nsrc/pkg/exp/proxy/proxy.go:52: // RegisterProxyType takes a URL scheme and a function to generate Proxy's from\nOn 2011/12/20 18:55:58, r wrote:\n> s/Proxy's/Proxies/\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode63\nsrc/pkg/exp/proxy/proxy.go:63: // Proxy for it to make network requests. It returns nil on error.\nOn 2011/12/20 18:55:58, r wrote:\n> why not return an error too?\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go\nFile src/pkg/exp/proxy/socks5.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go#newcode14\nsrc/pkg/exp/proxy/socks5.go:14: // SOCKS5 returns a Proxy which makes SOCKSv5 connections to the given address\nOn 2011/12/20 18:55:58, r wrote:\n> s/which/that/\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go#newcode16\nsrc/pkg/exp/proxy/socks5.go:16: func SOCKS5(user, password, network, addr string, forward Proxy) Proxy {\nOn 2011/12/20 19:07:12, bradfitz wrote:\n> so many position parameters of the same type.\n> \n> I wouldn't remember whether user/pass or net/addr came first.  Can auth be some\n> separate nilable struct?  Is auth always required anyway?\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go#newcode59\nsrc/pkg/exp/proxy/socks5.go:59: func (s *socks5) Dial(network, addr string) (net.Conn, error) {\nOn 2011/12/20 18:55:58, r wrote:\n> comment?\n> (not sure if Dial needs one, generally)\n\nDone.",
			"disapproval": false,
			"date": "2011-12-21 21:47:07.992037",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/direct.go\nFile src/pkg/exp/proxy/direct.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/direct.go#newcode11\nsrc/pkg/exp/proxy/direct.go:11: type direct int\ntype direct struct{}\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/direct.go#newcode16\nsrc/pkg/exp/proxy/direct.go:16: func (d direct) Dial(network, addr string) (net.Conn, error) {\ndrop the receiver name\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go\nFile src/pkg/exp/proxy/proxy.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode17\nsrc/pkg/exp/proxy/proxy.go:17: type Proxy interface {\nrather than Proxy, what about Dialer?\n\nThen the type name is proxy.Dialer, which is more suggestive of what it does anyway, if people know the Dial interface.\n\nfor instance, http.Transport has a Dial hook:\n\nhttp://weekly.golang.org/pkg/net/http/#Transport\n\nMaking that be a proxy.Dialer type instead of a func could be nice.  Note that http.Transport already has a field named Proxy, which is something else entirely (picking an HTTP-level proxy, not picking the means of dialing)\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/proxy.go#newcode22\nsrc/pkg/exp/proxy/proxy.go:22: // DefaultProxy returns the default proxy specified by the environment.\nis this a spec or something?  I seem to recall somebody else referencing some informal docs on this for the http package's http://weekly.golang.org/pkg/net/http/#ProxyFromEnvironment which I think is similar?\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go\nFile src/pkg/exp/proxy/socks5.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go#newcode16\nsrc/pkg/exp/proxy/socks5.go:16: func SOCKS5(user, password, network, addr string, forward Proxy) Proxy {\nso many position parameters of the same type.\n\nI wouldn't remember whether user/pass or net/addr came first.  Can auth be some separate nilable struct?  Is auth always required anyway?\n\nhttp://codereview.appspot.com/5490062/diff/3008/src/pkg/exp/proxy/socks5.go#newcode32\nsrc/pkg/exp/proxy/socks5.go:32: const socks5Version = 5\n:)",
			"disapproval": false,
			"date": "2011-12-20 19:07:11.743417",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "post holiday poke, it this worthy of exp/?",
			"disapproval": false,
			"date": "2012-01-12 20:53:29.271921",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 12, 2012 at 1:43 PM, <agl@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5490062/diff/10001/src/pkg/**\n> exp/proxy/proxy.go<http://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go>\n> File src/pkg/exp/proxy/proxy.go (right):\n>\n> http://codereview.appspot.com/**5490062/diff/10001/src/pkg/**\n> exp/proxy/proxy.go#newcode17<http://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode17>\n> src/pkg/exp/proxy/proxy.go:17: // Dialer is an interface for things that\n> can tunnel a connection.\n> On 2012/01/12 21:39:08, bradfitz wrote:\n>\n>> a proxy may not even be involved (e.g. Direct), or may only be\n>>\n> involved for some\n>\n>> hosts.\n>>\n>\n> Fair point. How's this: \"// A Dialer is a means to establish a\n> connection.\"?\n\n\nsgtm\n\n\n> http://codereview.appspot.com/**5490062/diff/16001/src/pkg/**\n> exp/proxy/socks5.go<http://codereview.appspot.com/5490062/diff/16001/src/pkg/exp/proxy/socks5.go>\n> File src/pkg/exp/proxy/socks5.go (right):\n>\n> http://codereview.appspot.com/**5490062/diff/16001/src/pkg/**\n> exp/proxy/socks5.go#newcode69<http://codereview.appspot.com/5490062/diff/16001/src/pkg/exp/proxy/socks5.go#newcode69>\n> src/pkg/exp/proxy/socks5.go:**69: return nil, errors.New(\"proxy: no\n> support for SOCKS5 proxy connections of type \" + network)\n> On 2012/01/12 21:39:09, bradfitz wrote:\n>\n>> add a TODO for UDP support?\n>>\n>\n> Have you ever seen a SOCKS proxy which does UDP? If such a thing exists,\n> then I'll add the TODO!\n>\n\nhah, fair enough.\n\nI haven't used a SOCKS proxy since the nineties, so I don't remember.\n\nI thought they were dead until somebody was asking me how to make the http\npackage work with them, which is when I added the Dialer option to\nTransport.\n",
			"disapproval": false,
			"date": "2012-01-12 21:47:29.070486",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm in favor of this going into exp/, at least.\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go\nFile src/pkg/exp/proxy/proxy.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode30\nsrc/pkg/exp/proxy/proxy.go:30: func DefaultDialer() Dialer {\nthe http package calls this \"ProxyFromEnvironment\".\n\nthey should probably be consistent, one way or the other.\n\nproxy.FromEnvironment() ?\nproxy.DialerFromEnvironment() ?\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode31\nsrc/pkg/exp/proxy/proxy.go:31: all_proxy := os.Getenv(\"all_proxy\")\nremove underscore?\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode45\nsrc/pkg/exp/proxy/proxy.go:45: no_proxy := os.Getenv(\"no_proxy\")\nunderscore\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode71\nsrc/pkg/exp/proxy/proxy.go:71: func FromURL(u *url.URL, forward Dialer) (Dialer, error) {\nthis is already of form FromURL, suggesting FromEnvironment isn't crazy\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/socks5.go\nFile src/pkg/exp/proxy/socks5.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/socks5.go#newcode69\nsrc/pkg/exp/proxy/socks5.go:69: return nil, errors.New(\"SOCKS5 proxy can't proxy connections of type \" + network)\nSOCKS5 can do UDP.  Just *this code* can't, which isn't what the error message suggests.\n\nshould also start with the package name and a colon.",
			"disapproval": false,
			"date": "2012-01-12 21:04:10.722980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm in favor of having this in exp/.\nHappy to let you and Brad work out the API.\n",
			"disapproval": false,
			"date": "2012-01-12 21:17:53.591233",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go\nFile src/pkg/exp/proxy/proxy.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode30\nsrc/pkg/exp/proxy/proxy.go:30: func DefaultDialer() Dialer {\nOn 2012/01/12 21:04:11, bradfitz wrote:\n> they should probably be consistent, one way or the other.\n> \n> proxy.FromEnvironment() ?\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode31\nsrc/pkg/exp/proxy/proxy.go:31: all_proxy := os.Getenv(\"all_proxy\")\nOn 2012/01/12 21:04:11, bradfitz wrote:\n> remove underscore?\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode45\nsrc/pkg/exp/proxy/proxy.go:45: no_proxy := os.Getenv(\"no_proxy\")\nOn 2012/01/12 21:04:11, bradfitz wrote:\n> underscore\n\nDone.\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/socks5.go\nFile src/pkg/exp/proxy/socks5.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/socks5.go#newcode69\nsrc/pkg/exp/proxy/socks5.go:69: return nil, errors.New(\"SOCKS5 proxy can't proxy connections of type \" + network)\nOn 2012/01/12 21:04:11, bradfitz wrote:\n> SOCKS5 can do UDP.  Just *this code* can't, which isn't what the error message\n> suggests.\n> \n> should also start with the package name and a colon.\n\nDone.",
			"disapproval": false,
			"date": "2012-01-12 21:32:53.452860",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go\nFile src/pkg/exp/proxy/proxy.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode17\nsrc/pkg/exp/proxy/proxy.go:17: // Dialer is an interface for things that can tunnel a connection.\na proxy may not even be involved (e.g. Direct), or may only be involved for some hosts.\n\nbut we can play with wording later.\n\nthe API itself is fine.\n\nhttp://codereview.appspot.com/5490062/diff/16001/src/pkg/exp/proxy/socks5.go\nFile src/pkg/exp/proxy/socks5.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/16001/src/pkg/exp/proxy/socks5.go#newcode69\nsrc/pkg/exp/proxy/socks5.go:69: return nil, errors.New(\"proxy: no support for SOCKS5 proxy connections of type \" + network)\nadd a TODO for UDP support?",
			"disapproval": false,
			"date": "2012-01-12 21:39:08.734888",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go\nFile src/pkg/exp/proxy/proxy.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/10001/src/pkg/exp/proxy/proxy.go#newcode17\nsrc/pkg/exp/proxy/proxy.go:17: // Dialer is an interface for things that can tunnel a connection.\nOn 2012/01/12 21:39:08, bradfitz wrote:\n> a proxy may not even be involved (e.g. Direct), or may only be involved for some\n> hosts.\n\nFair point. How's this: \"// A Dialer is a means to establish a connection.\"?\n\nhttp://codereview.appspot.com/5490062/diff/16001/src/pkg/exp/proxy/socks5.go\nFile src/pkg/exp/proxy/socks5.go (right):\n\nhttp://codereview.appspot.com/5490062/diff/16001/src/pkg/exp/proxy/socks5.go#newcode69\nsrc/pkg/exp/proxy/socks5.go:69: return nil, errors.New(\"proxy: no support for SOCKS5 proxy connections of type \" + network)\nOn 2012/01/12 21:39:09, bradfitz wrote:\n> add a TODO for UDP support?\n\nHave you ever seen a SOCKS proxy which does UDP? If such a thing exists, then I'll add the TODO!",
			"disapproval": false,
			"date": "2012-01-12 21:43:50.577263",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=06cebc7f3a29 ***\n\nexp/proxy: new package\n\nexp/proxy provides client support for tunneling connections through\nvarious proxies.\n\nThis is an initial, incomplete sketch of the code to lay down an\nAPI.\n\nR=golang-dev, r, r, bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5490062",
			"disapproval": false,
			"date": "2012-01-14 15:44:43.899763",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 5490062: exp/proxy: new package",
	"created": "2011-12-17 17:13:16.092867",
	"patchsets": [
		1,
		2001,
		3008,
		10001,
		16001,
		21001
	],
	"modified": "2012-01-14 15:58:05.433086",
	"closed": true,
	"issue": 5490062
}