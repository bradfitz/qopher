{
	"description": "runtime: make more build-friendly\n\nCollapse the arch,os-specific directories into the main directory\nby renaming xxx/foo.c to foo_xxx.c, and so on.\n\nThere are no substantial edits here, except to the Makefile.\nThe assumption is that the Go tool will #define GOOS_darwin\nand GOARCH_amd64 and will make any file named something\nlike signals_darwin.h available as signals_GOOS.h during the\nbuild.  This replaces what used to be done with -I$(GOOS).\n\nThere is still work to be done to make runtime build with\nstandard tools, but this is a big step.  After this we will have\nto write a script to generate all the generated files so they\ncan be checked in (instead of generated during the build).",
	"cc": [
		"r@golang.org",
		"iant@google.com",
		"r@google.com",
		"lucio.dere@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i just spotted this thread and I'd like to contribute just a small\nfactor that I'm sure was not overlooked, but has not been raised:\nthere is a multiplicative factor arising from the OS platforms and\narchitectures on which Go is able to be used.  If we continue to\nexpand the range of header files within a single directory, we're\nliable to get lost.  It certainly does not seem to encourage expanding\nthe range of platforms and that ought to be a bad thing.\n\nAlso, it is my understanding that in Plan 9 the approach to\nmultiplicity of architectures (and platforms are hopefully some sort\nof extension here) is to use the target as the development directory\nand the \"port\" directory as an input (../port/*).\n\nI have noticed that the combination of (OS/arch)es would give Plan 9\nindigestion too, despite its traditionally cleaner approach, but I do\nbelieve the problem of proliferation ought to be resolved as early as\npossible.  Naturally I'm assuming that dumping everything in one\ndirectory is not what anyone would choose, I'm hoping that there is a\nbetter way that will be discovered if enough minds are applied to the\nproblem (and the problem is formulated correctly).\n\nLucio.\n\nOn 12/16/11, Ian Lance Taylor <iant@google.com> wrote:\n> Russ Cox <rsc@golang.org> writes:\n>\n>> I believe those rules exist, as far as file selection is concerned,\n>> but C is not as helpful as Go here.  In Go you can take a bunch\n>> of files and hand them all to the compiler, and as long as\n>> everything is there somewhere, the compiler figures it out.\n>> In contrast, C needs every file to refer to the same #include\n>> file by name so they agree on the declarations.  If that #include\n>> file happens to be per-architecture, there is no good name.\n>>\n>> We could define that the go tool takes every foo_$GOOS.h file\n>> and copies it into the work directory as foo.h automatically,\n>> but that would be a C-specific rule in a Go tool.  The ugliness\n>> here contains the C rules in the runtime directory.\n>\n> I'm not necessarily recommending this but there is another way.  In your\n> .c file write\n>\n> #include ARCH_H\n>\n> and compile the file with -DARCH_H=\\\"arch_i386.h\\\".\n>\n> Ian\n>\n",
			"disapproval": false,
			"date": "2011-12-16 15:30:31.593109",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I need to adjust my Plan 9 build infrastructure to match, and this\nseems a very practical approach.  I really can't measure the impact\nbefore I've tried that, but it does seem to be heading towards greater\nMakefile simplicity and I do like that.\n\nLucio.\n\n\nOn 12/16/11, rsc@golang.org <rsc@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=479bba71fb07 ***\n>\n> runtime: make more build-friendly\n>\n> Collapse the arch,os-specific directories into the main directory\n> by renaming xxx/foo.c to foo_xxx.c, and so on.\n>\n> There are no substantial edits here, except to the Makefile.\n> The assumption is that the Go tool will #define GOOS_darwin\n> and GOARCH_amd64 and will make any file named something\n> like signals_darwin.h available as signals_GOOS.h during the\n> build.  This replaces what used to be done with -I$(GOOS).\n>\n> There is still work to be done to make runtime build with\n> standard tools, but this is a big step.  After this we will have\n> to write a script to generate all the generated files so they\n> can be checked in (instead of generated during the build).\n>\n> R=r, iant, r, lucio.dere\n> CC=golang-dev\n> http://codereview.appspot.com/5490053\n>\n>\n> http://codereview.appspot.com/5490053/\n>\n",
			"disapproval": false,
			"date": "2011-12-17 04:58:15.211062",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 16, 2011 at 01:08,  <r@golang.org> wrote:\n> it might be nice if the new ugly foo.h files failed in place if no\n> #ifdef was satisfied instead of some later, mysterious place.\n>\n> other people will have to do this sort of thing and it's O(N) at the\n> best of times. can the go command not do this for you? if there's a rule\n> for _$GOOS.go, why not _$GOOS.[ch]?\n\nI believe those rules exist, as far as file selection is concerned,\nbut C is not as helpful as Go here.  In Go you can take a bunch\nof files and hand them all to the compiler, and as long as\neverything is there somewhere, the compiler figures it out.\nIn contrast, C needs every file to refer to the same #include\nfile by name so they agree on the declarations.  If that #include\nfile happens to be per-architecture, there is no good name.\n\nWe could define that the go tool takes every foo_$GOOS.h file\nand copies it into the work directory as foo.h automatically,\nbut that would be a C-specific rule in a Go tool.  The ugliness\nhere contains the C rules in the runtime directory.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-16 12:24:00.368967",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 16, 2011 at 01:26, Ian Lance Taylor <iant@google.com> wrote:\n> I can understand the constraint about putting everything into one\n> directory, but I'm somewhat concerned about not providing any way to\n> automatically generate a file which is then compiled. \u00a0Lots of code does\n> this for perfectly good reasons. \u00a0Can we think of a way to make that\n> work, like a comment at the start of the file which gives a command to\n> run? \u00a0Or is there a good reason not to do that?\n\nIn package runtime and in the few other packages that have generated\ncode, I expect that there will be a makefile describing the generation\nof the code, and that when you edit stuff there, you have to run make\nto update that code before you run the go tool.\n\nI am explicitly not implementing the case where files get generated\nduring a build by 'go'.  We do not implement that case in goinstall\neither, and so far that has been just fine.  In fact, I think it is preferable.\nWithout that case, people can use whatever tools they like to write\nthe programs for them, but then those generated programs have to\nbe checked into the repository.  There's a tradeoff here: this is a little\nmore work for the developer of a package, who has to check in the\ngenerated files, but it is significantly less work for the users of the\npackage, who do not have to find, build, and install the tools that the\ndeveloper happens to use.  I think the internet has tipped the scales\nin favor of making life easier for the people installing the package.\nIf we do this, all the effort that goes into things like configure scripts\nto decide that you have the right version of yacc evaporates.\n\nThis has worked pretty well in package syscall, where we decided\nearly on that we could not depend on the inputs to the code generators\nbeing available on every machine that would need to build Go.\nIt is more work for us when editing syscall but significantly less work\nthan trying to make something that every user can run.\nIt is also similar to checking in both the .tmpl and .html files for our\ndocumentation instead of requiring the web server to know how to\ndo that conversion on the fly.\n\nJust to take one more example, suppose that the Google APIs for\ninteracting with Docs and so on used protocol buffers (thankfully they\ndo not!).  As a client of a package for interacting with Docs, I don't care.\nI don't want to know.  I just want to install that package and then call\nthe functions that it provides.  If installing that package requires that\nI first go find out what a \"protocol compiler\" is, and then that I download\nand install it (oh, and g++ too!), then I'm not going to use that package.\nThis is not entirely hypothetical: installing the protocol compiler is\ndifficult enough that I think we all agree it is beyond the scope of the\ngo tool, and yet I have written packages that interact with web services\nusing protocol buffers.  Checking in the pb.go is far easier on the\nusers of those packages than forcing them to have the same tools I do.\n\nThat's really just the argument for not invoking tools during the build.\nIf we turned around and decided we did want to invoke tools during\npackage builds, then we would also have to solve all the usual problems\nthat arise when building a make.  Those are moot as long as we decide\nnot to invoke tools in the first place.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-16 13:04:44.041946",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "it might be nice if the new ugly foo.h files failed in place if no #ifdef was satisfied instead of some later, mysterious place.\n\nother people will have to do this sort of thing and it's O(N) at the best of times. can the go command not do this for you? if there's a rule for _$GOOS.go, why not _$GOOS.[ch]?",
			"disapproval": false,
			"date": "2011-12-16 06:08:27.332008",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 15, 2011, at 10:26 PM, Ian Lance Taylor wrote:\n\n> Russ Cox <rsc@golang.org> writes:\n> \n>> I welcome better suggestions than the ugly arch.h etc\n>> files, but if everything has to be in one directory\n>> (and that is the convention we have established)\n>> then I don't see any other way to make #include \"arch.h\"\n>> do the right thing.\n> \n> I can understand the constraint about putting everything into one\n> directory, but I'm somewhat concerned about not providing any way to\n> automatically generate a file which is then compiled.  Lots of code does\n> this for perfectly good reasons.  Can we think of a way to make that\n> work, like a comment at the start of the file which gives a command to\n> run?  Or is there a good reason not to do that?\n\nWe've got to be careful this doesn't turn into make, but I'd like to understand the plan better.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-12-16 06:45:18.825244",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nNow the behavior expected from the Go tool is\nto compile/assemble with\n\n-DGOOS_$(GOOS) -DGOARCH_$(GOARCH)\n\nand\n\ncp foo_$(GOOS).h foo_GOOS.h\ncp foo_$(GOARCH).h foo_GOARCH.h\ncp foo_$(GOOS)_$(GOARCH).h foo_GOOS_GOARCH.h\n\nfor all possible foo.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-16 20:18:59.157093",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"iant@google.com",
				"r@google.com",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=479bba71fb07 ***\n\nruntime: make more build-friendly\n\nCollapse the arch,os-specific directories into the main directory\nby renaming xxx/foo.c to foo_xxx.c, and so on.\n\nThere are no substantial edits here, except to the Makefile.\nThe assumption is that the Go tool will #define GOOS_darwin\nand GOARCH_amd64 and will make any file named something\nlike signals_darwin.h available as signals_GOOS.h during the\nbuild.  This replaces what used to be done with -I$(GOOS).\n\nThere is still work to be done to make runtime build with\nstandard tools, but this is a big step.  After this we will have\nto write a script to generate all the generated files so they\ncan be checked in (instead of generated during the build).\n\nR=r, iant, r, lucio.dere\nCC=golang-dev\nhttp://codereview.appspot.com/5490053",
			"disapproval": false,
			"date": "2011-12-16 20:34:04.957096",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-16 06:02:52.126830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 16, 2011 at 01:08,  <r@golang.org> wrote:\n> it might be nice if the new ugly foo.h files failed in place if no\n> #ifdef was satisfied instead of some later, mysterious place.\n\nDone + uploaded.\n\n> other people will have to do this sort of thing and it's O(N) at the\n> best of times. can the go command not do this for you? if there's a rule\n> for _$GOOS.go, why not _$GOOS.[ch]?\n\nIn addition to what I wrote earlier, I do not believe other people\nwill have to do this sort of thing.  The ugliness here is all caused\nby C code, and we want other people to be writing Go code.\nRuntime is special in almost every way.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-16 13:14:57.573793",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> I believe those rules exist, as far as file selection is concerned,\n> but C is not as helpful as Go here.  In Go you can take a bunch\n> of files and hand them all to the compiler, and as long as\n> everything is there somewhere, the compiler figures it out.\n> In contrast, C needs every file to refer to the same #include\n> file by name so they agree on the declarations.  If that #include\n> file happens to be per-architecture, there is no good name.\n>\n> We could define that the go tool takes every foo_$GOOS.h file\n> and copies it into the work directory as foo.h automatically,\n> but that would be a C-specific rule in a Go tool.  The ugliness\n> here contains the C rules in the runtime directory.\n\nI'm not necessarily recommending this but there is another way.  In your\n.c file write\n\n#include ARCH_H\n\nand compile the file with -DARCH_H=\\\"arch_i386.h\\\".\n\nIan\n",
			"disapproval": false,
			"date": "2011-12-16 14:49:40.604996",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"iant@google.com",
				"r@google.com",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nit turned out well.",
			"disapproval": false,
			"date": "2011-12-16 20:25:03.728972",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I welcome better suggestions than the ugly arch.h etc\nfiles, but if everything has to be in one directory\n(and that is the convention we have established)\nthen I don't see any other way to make #include \"arch.h\"\ndo the right thing.\n",
			"disapproval": false,
			"date": "2011-12-16 06:04:27.921052",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> I welcome better suggestions than the ugly arch.h etc\n> files, but if everything has to be in one directory\n> (and that is the convention we have established)\n> then I don't see any other way to make #include \"arch.h\"\n> do the right thing.\n\nI can understand the constraint about putting everything into one\ndirectory, but I'm somewhat concerned about not providing any way to\nautomatically generate a file which is then compiled.  Lots of code does\nthis for perfectly good reasons.  Can we think of a way to make that\nwork, like a comment at the start of the file which gives a command to\nrun?  Or is there a good reason not to do that?\n\nIan\n",
			"disapproval": false,
			"date": "2011-12-16 06:26:43.332840",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5490053: runtime: make more build-friendly",
	"created": "2011-12-16 05:56:39.534318",
	"patchsets": [
		1,
		2001,
		4001,
		2382,
		7001,
		4128,
		2384,
		5287
	],
	"modified": "2011-12-16 20:34:06.680863",
	"closed": true,
	"issue": 5490053
}