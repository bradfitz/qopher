{
	"description": "net/http: ignore 100-continue responses in Transport\n\n\"There are only two hard problems in computer science:\ncache invalidation, naming things, and off-by-one errors.\"\n\nThe HTTP server code already strips Expect: 100-continue on\nrequests, so httputil.ReverseProxy should be unaffected, but\nsome servers send unsolicited HTTP/1.1 100 Continue responses,\nso we need to skip over them if they're seen to avoid getting\noff-by-one on Transport requests/responses.\n\nThis does change the behavior of people who were using Client\nor Transport directly and explicitly setting \"Expect: 100-continue\"\nthemselves, but it didn't work before anyway. Now instead of the\nuser code seeing a 100 response and then things blowing up, now\nit basically works, except the Transport will still blast away\nthe full request body immediately.  That's the part that needs\nto be finished to close this issue.\n\nThis is the safe quick fix.\n\nUpdate Issue 3665",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"dave@cheney.net",
		"jgrahamc@gmail.com"
	],
	"reviewers": [
		"fullung@gmail.com",
		"swhite@dena.jp"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-30 00:04:33.211070",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Don't be afraid of the CL size.  It's all test.  The actual fix is tiny:\r\n\r\ndiff -r 192e257c6507 src/pkg/net/http/transport.go\r\n--- a/src/pkg/net/http/transport.go Fri Mar 29 14:17:09 2013 -0700\r\n+++ b/src/pkg/net/http/transport.go Fri Mar 29 17:06:06 2013 -0700\r\n@@ -686,6 +686,12 @@\r\n  var resp *Response\r\n  if err == nil {\r\n  resp, err = ReadResponse(pc.br, rc.req)\r\n+ if err == nil && resp.StatusCode == 100 {\r\n+ // Issue 2184. Skip unsolicited 100-continue.\r\n+ // TODO: if actually requested, actually signal the caller.\r\n+ // For now we eat it, since we're never expecting one.\r\n+ resp, err = ReadResponse(pc.br, rc.req)\r\n+ }\r\n  }\r\n  hasBody := resp != nil && rc.req.Method != \"HEAD\" && resp.ContentLength\r\n!= 0\r\n\r\n\r\n\r\n\r\nOn Fri, Mar 29, 2013 at 5:04 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net/http: ignore 100-continue responses in Transport\r\n>\r\n> \"There are only two hard problems in computer science:\r\n> cache invalidation, naming things, and off-by-one errors.\"\r\n>\r\n> The HTTP server code already strips Expect: 100-continue on\r\n> requests, so httputil.ReverseProxy should be unaffected, but\r\n> some servers send unsolicited HTTP/1.1 100 Continue responses,\r\n> so we need to skip over them if they're seen to avoid getting\r\n> off-by-one on Transport requests/responses.\r\n>\r\n> This does change the behavior of people who were using Client\r\n> or Transport directly and explicitly setting \"Expect: 100-continue\"\r\n> themselves, but it didn't work before anyway. Now instead of the\r\n> user code seeing a 100 response and then things blowing up, now\r\n> it basically works, except the Transport will still blast away\r\n> the full request body immediately.  That's the part that needs\r\n> to be finished to close this issue.\r\n>\r\n> This is the safe quick fix.\r\n>\r\n> Update Issue 3665\r\n>\r\n> Please review this at https://codereview.appspot.**com/8166045/<https://codereview.appspot.com/8166045/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/transport.go\r\n>   M src/pkg/net/http/transport_**test.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-30 00:06:46.746290",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nBut drop the second \"actually\" in the comment.\r\n",
			"disapproval": false,
			"date": "2013-03-30 00:20:43.483530",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"jgrahamc@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+cc jgc as the CloudFlare folks must hate 100-Continue as much as I do.",
			"disapproval": false,
			"date": "2013-03-30 00:53:44.027840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"jgrahamc@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8166045/diff/4003/src/pkg/net/http/transport_test.go\nFile src/pkg/net/http/transport_test.go (right):\n\nhttps://codereview.appspot.com/8166045/diff/4003/src/pkg/net/http/transport_test.go#newcode1411\nsrc/pkg/net/http/transport_test.go:1411: registerPipe := func(pw *io.PipeWriter) {\nI like this local function declaration style you have going on here.\n\nhttps://codereview.appspot.com/8166045/diff/4003/src/pkg/net/http/transport_test.go#newcode1487\nsrc/pkg/net/http/transport_test.go:1487: t.Fatalf(\"Response Statuscode=%d; want 200 (i=%d): %v\", res.StatusCode, i, err)\nIf I roll back the change to transport.go, then the test fails (as expected), but also whinges about leaking a transport. I am not sure if that is worth addressing.\n\n--- FAIL: TestTransportReading100Continue (1.00 seconds)\n        transport_test.go:1487: Response Statuscode=100; want 200 (i=1): <nil>\n        transport_test.go:1437: EOF\n        z_last_test.go:96: Test appears to have leaked a Transport:\n                net/http.(*persistConn).readLoop(0xc201e80a00)\n                        /home/dfc/go/src/pkg/net/http/transport.go:684 +0x29a\n                created by net/http.(*Transport).dialConn\n                        /home/dfc/go/src/pkg/net/http/transport.go:511 +0x574\n\n                net/http.(*persistConn).writeLoop(0xc201e80a00)\n                        /home/dfc/go/src/pkg/net/http/transport.go:763 +0x26f\n                created by net/http.(*Transport).dialConn\n                        /home/dfc/go/src/pkg/net/http/transport.go:512 +0x58b\n--- FAIL: TestGoroutinesRunning (0.00 seconds)\n        z_last_test.go:58: num goroutines = 2\n        z_last_test.go:60: Too many goroutines.\n        z_last_test.go:62: 1 instances of:\n                net/http.(*persistConn).readLoop(0xc201e80a00)\n                        /home/dfc/go/src/pkg/net/http/transport.go:684 +0x29a\n                created by net/http.(*Transport).dialConn\n                        /home/dfc/go/src/pkg/net/http/transport.go:511 +0x574\n        z_last_test.go:62: 1 instances of:\n                net/http.(*persistConn).writeLoop(0xc201e80a00)\n                        /home/dfc/go/src/pkg/net/http/transport.go:763 +0x26f\n                created by net/http.(*Transport).dialConn\n                        /home/dfc/go/src/pkg/net/http/transport.go:512 +0x58b\nFAIL\nexit status 1",
			"disapproval": false,
			"date": "2013-03-30 01:10:08.200890",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"jgrahamc@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=466040fd273e ***\n\nnet/http: ignore 100-continue responses in Transport\n\n\"There are only two hard problems in computer science:\ncache invalidation, naming things, and off-by-one errors.\"\n\nThe HTTP server code already strips Expect: 100-continue on\nrequests, so httputil.ReverseProxy should be unaffected, but\nsome servers send unsolicited HTTP/1.1 100 Continue responses,\nso we need to skip over them if they're seen to avoid getting\noff-by-one on Transport requests/responses.\n\nThis does change the behavior of people who were using Client\nor Transport directly and explicitly setting \"Expect: 100-continue\"\nthemselves, but it didn't work before anyway. Now instead of the\nuser code seeing a 100 response and then things blowing up, now\nit basically works, except the Transport will still blast away\nthe full request body immediately.  That's the part that needs\nto be finished to close this issue.\n\nThis is the safe quick fix.\n\nUpdate Issue 3665\n\nR=golang-dev, dsymonds, dave, jgrahamc\nCC=golang-dev\nhttps://codereview.appspot.com/8166045",
			"disapproval": false,
			"date": "2013-03-30 03:25:19.297840",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"jgrahamc@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/03/30 03:25:19, bradfitz wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=466040fd273e ***\n> net/http: ignore 100-continue responses in Transport\n\nSeeing quite a few of these on linux/386:\n\n--- FAIL: TestTransportReading100Continue-74 (0.00 seconds)\ntransport_test.go:1484: Do (i=3): Post http://dummy.tld/: malformed HTTP status code \"/\"\ntransport_test.go:1437: EOF\nFAIL\n\nThere's also other crashes in net/http due to some GC/runtime issue, but this looks like something separate from that.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-03-30 05:32:51.905630",
			"approval": false
		},
		{
			"sender": "swhite@dena.jp",
			"recipients": [
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"swhite@dena.jp",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"jgrahamc@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.  This should fix my off-by-one issue on keep-alives with 100's in the response stream.",
			"disapproval": false,
			"date": "2013-03-30 16:41:39.231910",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 29, 2013 at 10:32 PM, <fullung@gmail.com> wrote:\r\n\r\n> Hello\r\n>\r\n>\r\n> On 2013/03/30 03:25:19, bradfitz wrote:\r\n>\r\n>> *** Submitted as\r\n>>\r\n> https://code.google.com/p/go/**source/detail?r=466040fd273e<https://code.google.com/p/go/source/detail?r=466040fd273e>***\r\n>\r\n>> net/http: ignore 100-continue responses in Transport\r\n>>\r\n>\r\n> Seeing quite a few of these on linux/386:\r\n>\r\n> --- FAIL: TestTransportReading100Continu**e-74 (0.00 seconds)\r\n> transport_test.go:1484: Do (i=3): Post http://dummy.tld/: malformed HTTP\r\n> status code \"/\"\r\n> transport_test.go:1437: EOF\r\n> FAIL\r\n>\r\n\r\nI can reproduce.\r\n\r\nSorry. One day I'll be able to write a test that works on your systems on\r\nthe first try.\r\n\r\nTrying to figure out the fix now.\r\n",
			"disapproval": false,
			"date": "2013-03-30 16:51:08.371530",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8166045: net/http: ignore 100-continue responses in Transport",
	"created": "2013-03-30 00:04:20.887060",
	"patchsets": [
		1,
		2001,
		4003,
		13001
	],
	"modified": "2013-03-30 16:41:39.232380",
	"closed": true,
	"issue": 8166045
}