{
	"description": "encoding/json: Speed up decoding by 50%\n\n* Avoid recalculating len(data) while decoding.\n* Avoid excessive byte to int castings.\n* Avoid creating temporary slices in nextValue(), returning\nan offset suffices.\n* Cache key <=> field lookups. They use strings.EqualFold,\nwhich is pretty slow.\n* Avoid converting keys to strings when possible.\n\nBenchmarks:\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkCodeUnmarshal          146540233     98708913  -32.64%\nBenchmarkCodeUnmarshalMethod    148930131     98619151  -33.78%\nBenchmarkCodeUnmarshalReuse     143297363     90978323  -36.51%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkCodeUnmarshal              13.24        19.66    1.48x\nBenchmarkCodeUnmarshalMethod        13.03        19.68    1.51x\nBenchmarkCodeUnmarshalReuse         13.54        21.33    1.58x\n\nbenchmark                      old allocs   new allocs    delta\nBenchmarkCodeUnmarshal             195377       105750  -45.87%\nBenchmarkCodeUnmarshalMethod       195376       105748  -45.87%\nBenchmarkCodeUnmarshalReuse        180345        89892  -50.16%\n\nbenchmark                       old bytes    new bytes    delta\nBenchmarkCodeUnmarshal            4274092      3457209  -19.11%\nBenchmarkCodeUnmarshalMethod      4273988      3456867  -19.12%\nBenchmarkCodeUnmarshalReuse       2937147      2047975  -30.27%\n",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"rogpeppe@gmail.com",
		"r@golang.org",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"iant@golang.org"
	],
	"messages": [
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 10:36:18, dsymonds wrote:\n> Please use misc/benchcmp to compare benchmark output, and include it in the\n> CL description.\n\nThanks, done!",
			"disapproval": false,
			"date": "2013-08-01 10:52:46.630330",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-01 10:28:01.508460",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it possible for you to post CPU profiles?\r\nI would like to know if the improvement is consistent across various\r\nstack splitting positions.\r\n\r\nR\u00e9my.\r\n\r\n2013/8/1, David Symonds <dsymonds@golang.org>:\r\n> Please use misc/benchcmp to compare benchmark output, and include it in the\r\n> CL description.\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-01 10:50:52.087710",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are some benchmarks before and after applying this patch set:\n\nBefore:\nBenchmarkCodeUnmarshal\t      10\t 156293404 ns/op\t  12.42 MB/s\nBenchmarkCodeUnmarshalReuse\t      10\t 150102989 ns/op\n\n\nAfter:\nBenchmarkCodeUnmarshal\t      20\t  97127556 ns/op\t  19.98 MB/s\nBenchmarkCodeUnmarshalMethod\t      20\t  97804487 ns/op\t  19.84 MB/s\nBenchmarkCodeUnmarshalReuse\t      20\t  89162147 ns/op\t  21.76 MB/s\n\nThe difference is quite substantial.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-01 10:31:27.305580",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please use misc/benchcmp to compare benchmark output, and include it in the\r\nCL description.\r\n",
			"disapproval": false,
			"date": "2013-08-01 10:36:18.258490",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 10:50:52, remyoudompheng wrote:\n> Is it possible for you to post CPU profiles?\n> I would like to know if the improvement is consistent across various\n> stack splitting positions.\n> \n> R\u00e9my.\n\nSure, no problem. Here are the CPU profiles for BenchmarkCodeUnmarshal before and after:\n\nfiam@ubuntu:~/go/src/pkg/encoding/json$ go test -v -run=none -bench=CodeUnmarshal$ -cpuprofile=cpu.old.prof\nPASS\nBenchmarkCodeUnmarshal\t      10\t 149568191 ns/op\t  12.97 MB/s\n\nhttps://dl.dropboxusercontent.com/u/3193787/cpu.old.prof\n\n\nfiam@ubuntu:~/go/src/pkg/encoding/json$ go test -v -run=none -bench=CodeUnmarshal$ -cpuprofile=cpu.new.prof\nPASS\nBenchmarkCodeUnmarshal\t      20\t  96215951 ns/op\t  20.17 MB/s\nok  \tencoding/json\t2.257s\n\nhttps://dl.dropboxusercontent.com/u/3193787/cpu.new.prof\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-01 10:57:29.658590",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like to see the incremental effect of each\nchange included in this CL, rather than bundling\nthem all together. Particularly the unsafe change,\nif we even want to contemplate that one.\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go#newcode21\nsrc/pkg/encoding/json/decode.go:21: \"unsafe\"\nI think this is a no-no. We don't want to\nadd new unsafe packages.",
			"disapproval": false,
			"date": "2013-08-01 13:45:19.473170",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 13:45:19, rog wrote:\n> I'd like to see the incremental effect of each\n> change included in this CL, rather than bundling\n> them all together. Particularly the unsafe change,\n> if we even want to contemplate that one.\n\nThe difference is significant for that change, specially when it comes to allocations:\n\nfiam@ubuntu:~/go/src/pkg/encoding/json$ ~/go/misc/benchcmp unsafe.txt safe.txt \nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkCodeUnmarshal           82400716     90397421   +9.70%\nBenchmarkCodeUnmarshalMethod     85276712     92357337   +8.30%\nBenchmarkCodeUnmarshalReuse      76710096     84389386  +10.01%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkCodeUnmarshal              23.55        21.47    0.91x\nBenchmarkCodeUnmarshalMethod        22.76        21.01    0.92x\nBenchmarkCodeUnmarshalReuse         25.30        22.99    0.91x\n\nbenchmark                      old allocs   new allocs    delta\nBenchmarkCodeUnmarshal             105749       195386   84.76%\nBenchmarkCodeUnmarshalMethod       105748       195384   84.76%\nBenchmarkCodeUnmarshalReuse         89892       179521   99.71%\n\nbenchmark                       old bytes    new bytes    delta\nBenchmarkCodeUnmarshal            3457194      4275326   23.66%\nBenchmarkCodeUnmarshalMethod      3456840      4274932   23.67%\nBenchmarkCodeUnmarshalReuse       2047975      2864786   39.88%\n\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go\n> File src/pkg/encoding/json/decode.go (right):\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go#newcode21\n> src/pkg/encoding/json/decode.go:21: \"unsafe\"\n> I think this is a no-no. We don't want to\n> add new unsafe packages.\n\nIf there's a big concern, I could a \"safe\" version of the string to []byte conversion which could be conditionally\ncompiled using build tags. I really can't find any valid reason to not take advantage of unsafe package in this\nsituation, because the string is thrown away as soon as the lookup in the map is completed. Of course, if the\nunderlying []byte is modified by another goroutine while the lookup is taking place, the result of the lookup is going to be wrong,\nbut if you're modifying the []byte while parsing it as JSON (you definitely shouldn't!) the deserialization is also going to be wrong.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-01 14:29:28.609050",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do not use the unsafe package just to gain performance in the standard\r\nlibraries.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-08-01 14:45:42.587310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad also has a pending CL to make json faster.\r\nI think we all agree it can be faster.\r\nI'd like some more time to think about what the best approach is.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-08-01 14:47:28.553480",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 14:47:28, rsc wrote:\n> Brad also has a pending CL to make json faster.\n> I think we all agree it can be faster.\n> I'd like some more time to think about what the best approach is.\n> \n> Thanks.\n> Russ\n\nBrad's CL is about encoding, this one speeds up decoding.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-01 15:23:01.886770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Everything I wrote still applies. I didn't mention encoding vs decoding.\r\n",
			"disapproval": false,
			"date": "2013-08-01 15:24:06.800940",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 14:45:42, r wrote:\n> Do not use the unsafe package just to gain performance in the standard\n> libraries.\n> \n> -rob\n\nunsafe it's used by math and encoding/binary just to gain performance. Why can't encoding/json use it to gain performance too?",
			"disapproval": false,
			"date": "2013-08-01 15:27:34.436970",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any ETA on that thinking?  Or guidelines for what class of performance\r\nimprovements (if any) are acceptable?\r\n\r\nIn the meantime I've just stopped doing things related to performance or\r\ngarbage.\r\n\r\nMy JSON encoding CL just does what encoding/gob does, but without unsafe.\r\n (caching per-Type encoders)\r\n\r\n\r\n\r\nOn Thu, Aug 1, 2013 at 7:47 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Brad also has a pending CL to make json faster.\r\n> I think we all agree it can be faster.\r\n> I'd like some more time to think about what the best approach is.\r\n>\r\n> Thanks.\r\n> Russ\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-01 17:29:54.944400",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Because I don't want any more of this in the library. Because I'd rather\r\nsee the compiler improve. Because packages that use unsafe can't be\r\ndeployed in some environments, which means we need two versions of the\r\ncode, which makes the code harder to maintain and test. Because it's ugly\r\nand unreadable.\r\n\r\nMost important, because it's unsafe.\r\n\r\n-rob\r\n\r\n\r\n\r\nOn Fri, Aug 2, 2013 at 1:27 AM, <alberto.garcia.hierro@gmail.com> wrote:\r\n\r\n> On 2013/08/01 14:45:42, r wrote:\r\n>\r\n>> Do not use the unsafe package just to gain performance in the standard\r\n>> libraries.\r\n>>\r\n>\r\n>  -rob\r\n>>\r\n>\r\n> unsafe it's used by math and encoding/binary just to gain performance.\r\n> Why can't encoding/json use it to gain performance too?\r\n>\r\n> https://codereview.appspot.**com/12243043/<https://codereview.appspot.com/12243043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-01 21:43:30.990060",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 21:43:30, r wrote:\n> Because I don't want any more of this in the library. Because I'd rather\n> see the compiler improve. Because packages that use unsafe can't be\n> deployed in some environments, which means we need two versions of the\n> code, which makes the code harder to maintain and test. Because it's ugly\n> and unreadable.\n> \n> Most important, because it's unsafe.\n> \n\nThe only environment that I know of which doesn't allow package unsafe to be used\nis App Engine, and that's for user code, not standard library code (otherwise, the math\npackage would have a safe version of Float32bits and the other functions in math/unsafe.go).\nFurthermore, I'm sure the majority of Go users don't care about App Engine (but obviously Google does).\n\nI'd also love the compiler to improve when it comes to []byte to string conversion, but we have to be pragmatic\nin the meantime. The usage of the unsafe package we're discussing involves *one line*, which\nspeeds up the code significantly and reduces the number of allocations by 50%, which in turn\nbenefits real world code immensely because the pressure on the GC is reduced. Heck, most people\nwould call that an epic win.\n\nIn an ideal world, the compiler would produce a []byte to string conversion without copying and/or the\nruntime would have no problem dealing with the additional garbage generated, but it's not the case right\nnow. By adding one ugly line we can ship a way better JSON decoder which is gonna help a lot of\nGo users. When the compiler and/or runtime improve, that line can be changed to a simple cast and the\ncode will be beautiful again, and everyone will be happy.\n\nIn the meantime, I take full responsibility for that ugly line of code. You can punch me in the face once for every\nproblem it causes down the line. And, yes, you can get that on writing, signed by me.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-02 11:48:09.523430",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 15:24:06, rsc wrote:\n> Everything I wrote still applies. I didn't mention encoding vs decoding.\n\nNo worries, I got that. Just wanted to make clear that, while the two CLs are about speeding up JSON, they touch different parts of the package.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-02 11:49:01.907070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It was a mistake to export reflect.StructHeader. It's another mistake to\r\nbuild on that mistake. I stand by what I wrote before.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-08-02 12:56:18.056410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> In the meantime, I take full responsibility for that ugly line of code. You can\n> punch me in the face once for every\n> problem it causes down the line. And, yes, you can get that on writing, signed\n> by me.\n\nI'm sorry, but that's not how this works. We are the maintainers of the Go standard library code, and some of the things we maintain are the cleanliness, portability, correctness, and debugability of the code. That's one of the significant strengths of the standard library.\n\nWe often push back on changes that we believe will hurt those things. An appropriate response is to find a way to achieve your goal while addressing whatever concerns we have raised.\n\nYou cannot \"take full responsibility\" for the code. We're the ones who are going to be debugging it later, not you.\n\nRuss",
			"disapproval": false,
			"date": "2013-08-06 16:39:21.063830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand your first bullet in the CL description \"avoid recalculating len(data)\". I can't find what part of the code you are trying to describe with that, and also len(data) is a variable, not a calculation.\n\nPlease cut this CL down to just the name cache, and once that is settled we can worry about whether the other things matter.\n\nThanks.\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go#newcode65\nsrc/pkg/encoding/json/decode.go:65: // Don't check for well-formedness beforehand. It\nThis is even worse than using unsafe. You are changing the semantics of the function. I disagree with the new semantics, but even if I agreed, we can't make a change like this before Go 2. And you didn't even mention this part in the CL description.\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go#newcode562\nsrc/pkg/encoding/json/decode.go:562: // WARNING: This []byte to string conversion is the fastest one\nThis is not okay. Please stop arguing with us about it.\nYou changed the type of key above from string to []byte.\nChange it back to string, and then this is fine.\nAlso, you can define\n\ntype fieldKey struct {\n    typ reflect.Type\n    name string\n}\n\nand then use a single map[fieldKey]*field.\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode_test.go\nFile src/pkg/encoding/json/decode_test.go (right):\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode_test.go#newcode618\nsrc/pkg/encoding/json/decode_test.go:618: if isSpace(byte(c)) {\nPlease revert all these conversions. Perhaps byte is faster on some compilers, but it is no doubt slower on others, and there's no reason for this churn. Measure this change by itself and I think you will find that it is a wash. If not, there is a compiler bug to fix.\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/scanner.go\nFile src/pkg/encoding/json/scanner.go (right):\n\nhttps://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/scanner.go#newcode37\nsrc/pkg/encoding/json/scanner.go:37: func nextValue(data []byte, scan *scanner) (idx int, err error) {\nAnother rewrite that may or may not be important by itself.\nIf you want to measure it by itself and submit it as a separate CL, that's fine.\nOne of the problems with this CL is that it does too much, and we can't tell what is a win and what is noise.\n\nPlease make this CL only about the name lookup cache, since that's what we've spent the most time discussing.",
			"disapproval": false,
			"date": "2013-08-06 17:05:10.870850",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/06 17:05:10, rsc wrote:\n> I don't understand your first bullet in the CL description \"avoid recalculating\n> len(data)\". I can't find what part of the code you are trying to describe with\n> that, and also len(data) is a variable, not a calculation.\n\nIt should have said len(d.data), my mistake. When I first profiled the code, decodeState.scanWhile() was consuming a very significant amount of time and was calling len(d.data) on every iteration. I changed the code to call len(d.data) once, on the decodeState initialization, and store in in a field in decodeState. This increased performance, but I can't remember exactly by how much.\n\n> \n> Please cut this CL down to just the name cache, and once that is settled we can\n> worry about whether the other things matter.\n> \n> Thanks.\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go\n> File src/pkg/encoding/json/decode.go (right):\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go#newcode65\n> src/pkg/encoding/json/decode.go:65: // Don't check for well-formedness\n> beforehand. It\n> This is even worse than using unsafe. You are changing the semantics of the\n> function. I disagree with the new semantics, but even if I agreed, we can't make\n> a change like this before Go 2. And you didn't even mention this part in the CL\n> description.\n\nIt's not changing the semantics of the function. The returned error in the case of invalid syntax errors is going to be exactly the same\nthan before. However, the JSON is not checked before-hand, but rather when parsing it. This speeds up parsing valid JSON by ~20%, slows down invalid JSON by ~15% and keeps the\nfunction semantics. There's some extra bookkeeping in the parsing code, because it can no longer assume that the JSON is valid, but since most of the time the JSON is going to be valid, it's a good tradeoff for real-word applications.\n\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode.go#newcode562\n> src/pkg/encoding/json/decode.go:562: // WARNING: This []byte to string\n> conversion is the fastest one\n> This is not okay. Please stop arguing with us about it.\n> You changed the type of key above from string to []byte.\n> Change it back to string, and then this is fine.\n> Also, you can define\n> \n> type fieldKey struct {\n>     typ reflect.Type\n>     name string\n> }\n> \n> and then use a single map[fieldKey]*field.\n\nI've already changed that in my local copy. I'm now preloading the cache for the reflect.Type (e.g. typeCache := fieldCache[typ] before entering the loop which obtains the keys, which just does field := typeCache[key]. This way there's one lookup for the reflect.Type and then only one lookup for each key (rather than 2 lookups per key, like this CL does). I'm also keeping the typeCache in a field when parsing slices, to avoid as many lookups as possible.\n\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode_test.go\n> File src/pkg/encoding/json/decode_test.go (right):\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/decode_test.go#newcode618\n> src/pkg/encoding/json/decode_test.go:618: if isSpace(byte(c)) {\n> Please revert all these conversions. Perhaps byte is faster on some compilers,\n> but it is no doubt slower on others, and there's no reason for this churn.\n> Measure this change by itself and I think you will find that it is a wash. If\n> not, there is a compiler bug to fix.\n\nI didn't add any conversions, I removed them. The code was casting byte to int and then to rune all over the place, calling isSpace(rune(c)). The only cast left is in that test. I measured it and it made a 1-2% difference. It's not a big one, but there's no good reason to cast a byte to a int and then to a rune when both isSpace() and the step functions can work with bytes directly.\n\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/scanner.go\n> File src/pkg/encoding/json/scanner.go (right):\n> \n> https://codereview.appspot.com/12243043/diff/5001/src/pkg/encoding/json/scanner.go#newcode37\n> src/pkg/encoding/json/scanner.go:37: func nextValue(data []byte, scan *scanner)\n> (idx int, err error) {\n> Another rewrite that may or may not be important by itself.\n> If you want to measure it by itself and submit it as a separate CL, that's fine.\n> One of the problems with this CL is that it does too much, and we can't tell\n> what is a win and what is noise.\n> \n> Please make this CL only about the name lookup cache, since that's what we've\n> spent the most time discussing.\n\nI'm sorry, but I don't have the time nor the desire to do that. I just want my apps to parse JSON more efficiently. With your current development model, if I have to send a CL for a small change, wait until it's accepted (usually weeks) and then make another small change. Rinse, repeat. This wastes a lot of my time and between once CL and the next one I might have even forgot about I was doing. That's why this CL is a big one and my intention was making it even bigger, by adding a lot more optimizations I have in my local copy. In fact, by now I have rewritten most of the code to make the scanner event based rather than byte based. The current scanner is fed one byte a a time. On the other hand, the implementation I have right now receives all the data and reads and decodes as much JSON as possible on every call. This makes it several times faster (I haven't finished optimizing it yet, but right now it's 3-4x faster than encoding/json).\n\n I'll drop this CL now, since the kind of changes that I plan to make don't seem to be welcome and, at this point, it's easier for me to just keep the code in our internal Go fork.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-06 21:58:32.582080",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-08-06 21:59:32.947510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 6, 2013 at 2:58 PM, <alberto.garcia.hierro@gmail.com> wrote:\r\n\r\n>  I'll drop this CL now, since the kind of changes that I plan to make\r\n> don't seem to be welcome and, at this point, it's easier for me to just\r\n> keep the code in our internal Go fork.\r\n>\r\n\r\nThat's certainly works.\r\n\r\nThere are three main reasons to get something into the standard library:\r\n\r\n1) get a lot of users (it's there by default)\r\n2) get a thorough review\r\n3) ease maintenance burden on you (no need for an internal version)\r\n\r\nI don't know what your internal review process is like, nor how many users\r\nyou have internally, but if you're going to maintain a fork anyway, you\r\nmight want to consider putting your forked copy of encoding/json on github.\r\n There you'd get more eyeballs & bug reports & users.\r\n\r\nThe risk is that it could split the community and people would use your\r\n\"fastjson\" package instead of the standard library's encoding/json.  I\r\nthink that's acceptable, if we're really that much slower.\r\n\r\nIn any case, the license permits that.\r\n",
			"disapproval": false,
			"date": "2013-08-07 01:45:53.621890",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/07 01:45:53, bradfitz wrote:\n> I don't know what your internal review process is like, nor how many users\n> you have internally, but if you're going to maintain a fork anyway, you\n> might want to consider putting your forked copy of encoding/json on github.\n>  There you'd get more eyeballs & bug reports & users.\n\nOur fork is just used at Rainy Cape (my company) to build our websites. Our review process is basically if it works, has good test coverage and the code does nothing stupid, it's fine for us (we are perfectly fine with our code using package unsafe for speed, since we don't use App Engine). Right now, there are 5 developers besides me using it, so the user base is not big at all.\n\nI try to submit all our changes to the standard packages and the compilers as CLs, but due to your development process it takes a lot of time. e.g. we have had support for calling C function pointers for almost 2 months now. I submitted a CL for adding support for C function pointer variables (since the code for calling them wasn't tested enough at the time) 2 months and a week ago and it's still sitting there. If it gets accepted, then I have to dig up our commit (or commits) which added support for calling C function pointers, its tests, etc\u2026 apply it to a clean Go checkout, check any open Go issues that it might fix and submit it as a CL. Again, this takes a lot of time and some times the reviews are not very friendly (e.g. some reviews feel like \"this is our language and we get to decide, so shut up now. Oh, and you're stupid for suggesting that\").\n\nLately, I've opted for adding most of the code we develop to our internal web framework (which we hope to release some day), rather than submitting it for inclusion in Go. e.g. we have full i18n support, which extracts the strings from Go code, generates standard .po files and them compiles those .po files to .go files rather than .mo. This way, packages with translations are still \"go get-able\". As you may know, po translation files include a formula for choosing a plural form for a given number. I initially wrote a simple register based VM to interpret those formulas, but it felt kind of slow (it took ~2x time than go compiled code), so I wrote a JIT for it which even outperforms the gc compiler (for these formulas, which are quite simple). If I were to submit this for inclusion in Go, I'm pretty sure the JIT wouldn't get accepted and I would probably have to argue for weeks or months about every choice I made during the design of the i18n support. It's really not worth it.\n\nWhat I'm trying to say is that I feel that the process of contributing code to Go as an outsider to Google is way more difficult than it should be and, in the long term, this hurts the Go ecosystem.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-07 12:12:15.624650",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 7, 2013 at 5:12 AM,  <alberto.garcia.hierro@gmail.com> wrote:\r\n>\r\n> I try to submit all our changes to the standard packages and the\r\n> compilers as CLs, but due to your development process it takes a lot of\r\n> time. e.g. we have had support for calling C function pointers for\r\n> almost 2 months now. I submitted a CL for adding support for C function\r\n> pointer variables (since the code for calling them wasn't tested enough\r\n> at the time) 2 months and a week ago and it's still sitting there. If it\r\n> gets accepted, then I have to dig up our commit (or commits) which added\r\n> support for calling C function pointers, its tests, etc\u2026 apply it to a\r\n> clean Go checkout, check any open Go issues that it might fix and submit\r\n> it as a CL. Again, this takes a lot of time and some times the reviews\r\n> are not very friendly (e.g. some reviews feel like \"this is our language\r\n> and we get to decide, so shut up now. Oh, and you're stupid for\r\n> suggesting that\").\r\n>\r\n> Lately, I've opted for adding most of the code we develop to our\r\n> internal web framework (which we hope to release some day), rather than\r\n> submitting it for inclusion in Go. e.g. we have full i18n support, which\r\n> extracts the strings from Go code, generates standard .po files and them\r\n> compiles those .po files to .go files rather than .mo. This way,\r\n> packages with translations are still \"go get-able\". As you may know, po\r\n> translation files include a formula for choosing a plural form for a\r\n> given number. I initially wrote a simple register based VM to interpret\r\n> those formulas, but it felt kind of slow (it took ~2x time than go\r\n> compiled code), so I wrote a JIT for it which even outperforms the gc\r\n> compiler (for these formulas, which are quite simple). If I were to\r\n> submit this for inclusion in Go, I'm pretty sure the JIT wouldn't get\r\n> accepted and I would probably have to argue for weeks or months about\r\n> every choice I made during the design of the i18n support. It's really\r\n> not worth it.\r\n>\r\n> What I'm trying to say is that I feel that the process of contributing\r\n> code to Go as an outsider to Google is way more difficult than it should\r\n> be and, in the long term, this hurts the Go ecosystem.\r\n\r\nI'm sorry you find the process frustrating.  You're not alone in that.\r\nWe do tend to move slowly and incrementally in the standard\r\nrepository, because we know that decisions made there last a long\r\ntime, and require maintenance.  Significant changes to the standard\r\nrepository are discussed on golang-dev before they become a CL, and\r\nmany of them have a design document.\r\n\r\nYour function pointer CL did get a reply 5 days ago.  I agree it sat\r\nthere too long.  That long-delayed comment was reasonable: significant\r\nnew functionality like your CL does require a test.  I also just added\r\na few more comments to the CL and I hope you will push it forward.\r\n\r\nYour i18n code sounds useful for many people.  It wouldn't go into the\r\nstandard repository in any case--the i18n support is currently in the\r\nseparate go.text repository (http://code.google.com/p/go.text).  If\r\nyou would like to send a design doc to golang-dev, I think it would be\r\nwell received, but, you're right, people would discuss it for a\r\nwhile.  I hope you will at least consider releasing it yourself on\r\ngithub or wherever.\r\n\r\nI want to be clear that this is not an inside/outside Google thing;\r\nthe same issues arise for people inside Google.  There are ways to get\r\nchanges in: discuss the design first, send small incremental CLs,\r\nbuild a track record of success.  But, yes, it's slow and often\r\nfrustrating.  It's not a free-for-all for anybody.\r\n\r\nI don't have any real comments on this encoding/json CL except to\r\nobserve that although App Engine is understandably not important for\r\nyou, it is important for many people.  We simply can't change a\r\nfundamental package like encoding/json such that it can not be used on\r\nApp Engine.  That's a non-starter.\r\n\r\nI hope you can continue to use Go happily.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-08-07 14:41:35.064350",
			"approval": false
		}
	],
	"owner_email": "alberto.garcia.hierro@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Hierro",
	"subject": "code review 12243043: encoding/json: Speed up decoding by 50%",
	"created": "2013-08-01 10:26:11.915840",
	"patchsets": [
		1002,
		5001
	],
	"modified": "2013-08-07 14:41:35.581700",
	"closed": true,
	"issue": 12243043
}