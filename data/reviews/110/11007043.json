{
	"description": "go.tools/go/types: report correct type for untyped conversion arguments\n\nFixes issue 5849.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-08 18:45:37.930720",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/08 18:45:37, gri wrote:\n> Hello adonovan (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go.tools\n\nLGTM.\nThanks",
			"disapproval": false,
			"date": "2013-07-08 18:47:21.184510",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11007043/diff/3001/go/types/conversions.go\nFile go/types/conversions.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/3001/go/types/conversions.go#newcode72\ngo/types/conversions.go:72: final = typ\nConsider:\n\n type I interface{}\n _ = I(1)\n\nThe type inferred for the literal 1 in this code is I, which is not what we want.  You'll need something like this:\n\nif isUntyped(final) {\n  if _, ok := typ.Underlying().(*Interface); ok {\n    final = defaultType(final)\n  } else {\n    final = typ\n  }\n}",
			"disapproval": false,
			"date": "2013-07-08 19:19:06.127240",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/11007043/diff/3001/go/types/conversions.go\nFile go/types/conversions.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/3001/go/types/conversions.go#newcode72\ngo/types/conversions.go:72: final = typ\nOn 2013/07/08 19:19:06, adonovan wrote:\n> Consider:\n> \n>  type I interface{}\n>  _ = I(1)\n> \n> The type inferred for the literal 1 in this code is I, which is not what we\n> want.  You'll need something like this:\n> \n> if isUntyped(final) {\n>   if _, ok := typ.Underlying().(*Interface); ok {\n>     final = defaultType(final)\n>   } else {\n>     final = typ\n>   }\n> }\n\nDone.",
			"disapproval": false,
			"date": "2013-07-08 19:56:08.731980",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11007043/diff/9001/go/types/conversions.go\nFile go/types/conversions.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/9001/go/types/conversions.go#newcode74\ngo/types/conversions.go:74: final = defaultType(final)\ndefaultType(UntypedNil)==Invalid, so I don't think this does what you intend.  Could you add a testcase?\n\nhttps://codereview.appspot.com/11007043/diff/9001/go/types/issues_test.go\nFile go/types/issues_test.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/9001/go/types/issues_test.go#newcode48\ngo/types/issues_test.go:48: case `1`:\nConsider adding\n   \"x = uint32(2 << s)\"\nand:\ncase `2`: \n  want=Typ[Uint32]\nto exercise the top-down attribute flow from the conversion through the shift to the literal.",
			"disapproval": false,
			"date": "2013-07-08 20:01:43.566080",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nThis time for sure.\n\nhttps://codereview.appspot.com/11007043/diff/9001/go/types/conversions.go\nFile go/types/conversions.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/9001/go/types/conversions.go#newcode74\ngo/types/conversions.go:74: final = defaultType(final)\nOn 2013/07/08 20:01:43, adonovan wrote:\n> defaultType(UntypedNil)==Invalid, so I don't think this does what you intend. \n> Could you add a testcase?\n\nDone.\n\nhttps://codereview.appspot.com/11007043/diff/9001/go/types/issues_test.go\nFile go/types/issues_test.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/9001/go/types/issues_test.go#newcode48\ngo/types/issues_test.go:48: case `1`:\nOn 2013/07/08 20:01:43, adonovan wrote:\n> Consider adding\n>    \"x = uint32(2 << s)\"\n> and:\n> case `2`: \n>   want=Typ[Uint32]\n> to exercise the top-down attribute flow from the conversion through the shift to\n> the literal. \n\nDone.",
			"disapproval": false,
			"date": "2013-07-08 20:36:57.939690",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11007043/diff/12002/go/types/issues_test.go\nFile go/types/issues_test.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/12002/go/types/issues_test.go#newcode55\ngo/types/issues_test.go:55: if id.Name == \"nil\" && !IsIdentical(obj.Type(), Typ[UntypedNil]) {\nCan't you replace this with:\n  case `nil`:\n     want = typ[UntypedNil]\nbelow?",
			"disapproval": false,
			"date": "2013-07-08 20:44:00.659270",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=088133ed831d&repo=tools ***\n\ngo.tools/go/types: report correct type for untyped conversion arguments\n\nFixes issue 5849.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/11007043\n\nhttps://codereview.appspot.com/11007043/diff/12002/go/types/issues_test.go\nFile go/types/issues_test.go (right):\n\nhttps://codereview.appspot.com/11007043/diff/12002/go/types/issues_test.go#newcode55\ngo/types/issues_test.go:55: if id.Name == \"nil\" && !IsIdentical(obj.Type(), Typ[UntypedNil]) {\nOn 2013/07/08 20:44:01, adonovan wrote:\n> Can't you replace this with:\n>   case `nil`:\n>      want = typ[UntypedNil]\n> below?\n\nDone.",
			"disapproval": false,
			"date": "2013-07-08 20:51:23.114240",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-08 20:51:27.246690",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11007043: go.tools/go/types: report correct type for untyped conv...",
	"created": "2013-07-08 18:45:33.138070",
	"patchsets": [
		1,
		3001,
		5001,
		9001,
		17001,
		12002,
		21001,
		25001
	],
	"modified": "2013-07-08 20:51:27.487220",
	"closed": true,
	"issue": 11007043
}