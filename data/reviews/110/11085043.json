{
	"description": "cmd/ld, runtime: new in-memory symbol table format\n\nDesign at http://golang.org/s/go12symtab.\n\nThis enables some cleanup of the garbage collector metadata\nthat will be done in future CLs.\n\nThis CL does not move the old symtab and pclntab back into\nan unmapped section of the file. That's a bit tricky and will be\ndone separately.\n\nFixes issue 4020.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"cshapiro@google.com",
		"iant@golang.org",
		"r@golang.org",
		"nigeltao@golang.org"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-11 03:18:40.023070",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As usual there is something not 100% right on arm. 386 and amd64 are fine.\r\n",
			"disapproval": false,
			"date": "2013-07-11 03:19:12.327100",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11085043/diff/11001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/11085043/diff/11001/src/cmd/ld/lib.c#newcode1370\nsrc/cmd/ld/lib.c:1370: if(0 && debug['O'])\nRevert.\n\nSimilarly below.",
			"disapproval": false,
			"date": "2013-07-11 05:12:50.558970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nNow arm works a lot better, though still not 100%. Funny story: 5l inserts calls to special routines called _div, _divu, _mod, and _modu to implement the DIV and MOD pseudo-instructions. Those calls used to be mentioned by the arm traceback routines, because the frame size was slightly off during those calls. Now that the frame offset is recorded correctly, that special case is gone from the traceback, so nothing was holding up those routines to keep them in the binary, yet the linker was still trying to use them. Now it knows to keep them from the start.",
			"disapproval": false,
			"date": "2013-07-12 03:53:28.261500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\narm is at 100% now. The final problem was the traceback didn't know to stop\r\nat runtime.mcall, which can be at the top of an m stack.\r\n",
			"disapproval": false,
			"date": "2013-07-12 04:27:49.693610",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/12 04:27:49, rsc wrote:\n> PTAL\n> \n> arm is at 100% now. The final problem was the traceback didn't know to stop\n> at runtime.mcall, which can be at the top of an m stack.\n\nCompilation failure on my arm chromebook.\n\npkg/runtime\nwarning: /home/dfc/go/src/pkg/runtime/traceback_arm.c:99 format mismatch S IND STRUCT String, arg 2\n/home/dfc/go/src/pkg/runtime/traceback_arm.c:210 not a member of struct/union: src\nwarning: /home/dfc/go/src/pkg/runtime/traceback_arm.c:209 set and not used: line\ngo tool dist: FAILED: /home/dfc/go/pkg/tool/linux_arm/5c -F -V -w -I $WORK -I /home/dfc/go/pkg/linux_arm -D GOOS_linux -D GOARCH_arm -o $WORK/traceback_arm.o /home/dfc/go/src/pkg/runtime/traceback_arm.c",
			"disapproval": false,
			"date": "2013-07-13 14:36:09.721190",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/13 14:36:09, dfc wrote:\n> On 2013/07/12 04:27:49, rsc wrote:\n> > PTAL\n> > \n> > arm is at 100% now. The final problem was the traceback didn't know to stop\n> > at runtime.mcall, which can be at the top of an m stack.\n> \n> Compilation failure on my arm chromebook.\n> \n> pkg/runtime\n> warning: /home/dfc/go/src/pkg/runtime/traceback_arm.c:99 format mismatch S IND\n> STRUCT String, arg 2\n> /home/dfc/go/src/pkg/runtime/traceback_arm.c:210 not a member of struct/union:\n> src\n> warning: /home/dfc/go/src/pkg/runtime/traceback_arm.c:209 set and not used: line\n> go tool dist: FAILED: /home/dfc/go/pkg/tool/linux_arm/5c -F -V -w -I $WORK -I\n> /home/dfc/go/pkg/linux_arm -D GOOS_linux -D GOARCH_arm -o $WORK/traceback_arm.o\n> /home/dfc/go/src/pkg/runtime/traceback_arm.c\n\nThe compilation errors were just debug prints, after fixing them ./all.bash built find on linux/arm",
			"disapproval": false,
			"date": "2013-07-15 06:03:05.185530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.\r\n",
			"disapproval": false,
			"date": "2013-07-15 21:04:49.971060",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Two compile errors on arm. Sorry I cannot review further.\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/pkg/runtime/traceback_arm.c\nFile src/pkg/runtime/traceback_arm.c (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/pkg/runtime/traceback_arm.c#newcode99\nsrc/pkg/runtime/traceback_arm.c:99: runtime\u00b7printf(\"runtime: unknown argument frame size for %S\\n\", f->name);\ns/f->name/*f->name/\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/pkg/runtime/traceback_arm.c#newcode210\nsrc/pkg/runtime/traceback_arm.c:210: runtime\u00b7printf(\"\\t%S:%d\", f->src, line);\nI think has to be *f->src as well.",
			"disapproval": false,
			"date": "2013-07-15 23:44:36.280840",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"r@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "code seems fine but commentary is required\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode1459\nsrc/cmd/ld/lib.c:1459: pctofileline(Sym *sym, int32 oldval, Prog *p, int32 phase, int32 arg)\nha ha you jester\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode1492\nsrc/cmd/ld/lib.c:1492: return p->to.offset;\nOn 2013/07/15 23:59:08, iant wrote:\n> Check for overflow?\n\nprevious functions too?\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode2170\nsrc/cmd/ld/lib.c:2170: struct Hist\nsome commentary about the format, the location in the object file, the decoding, how it works in memory, etc. would be most welcome\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode2389\nsrc/cmd/ld/lib.c:2389: return setuint32(f, off, start);\noverflow?",
			"disapproval": false,
			"date": "2013-07-16 00:23:42.840070",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11085043/diff/23001/src/cmd/5l/5.out.h\nFile src/cmd/5l/5.out.h (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/5l/5.out.h#newcode204\nsrc/cmd/5l/5.out.h:204: // TODO: Remove these.\nWhy isn't the ATYPE value in this list?  Does anything use it now?  It is not needed for GC.\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/pkg/runtime/runtime.h#newcode417\nsrc/pkg/runtime/runtime.h:417: int32\tpcsp;\nHaving comments for all of these members would be helpful.",
			"disapproval": false,
			"date": "2013-07-15 23:49:22.558230",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/go.c\nFile src/cmd/ld/go.c (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/go.c#newcode804\nsrc/cmd/ld/go.c:804: // NOTE: Keep in sync with ../gc/go.c:/^Zconv.\ns/go.c/fmt.c/\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode1459\nsrc/cmd/ld/lib.c:1459: pctofileline(Sym *sym, int32 oldval, Prog *p, int32 phase, int32 arg)\nWould it be consistent with the commenting practices of this program to have a comment explaining the phase and arg parameters?\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode1492\nsrc/cmd/ld/lib.c:1492: return p->to.offset;\nCheck for overflow?\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode2425\nsrc/cmd/ld/lib.c:2425: npcdata = p->from.offset+1;\nCheck for overflow?\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode2558\nsrc/cmd/ld/lib.c:2558: setaddrplus(ftab, f->value*PtrSize, defgostring(f->name), 0);\nCan just use setaddr.",
			"disapproval": false,
			"date": "2013-07-15 23:59:07.446120",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, cshapiro@google.com, iant@golang.org, r@golang.org (cc: golang-dev@googlegroups.com, nigeltao@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-16 00:58:13.090030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode1459\nsrc/cmd/ld/lib.c:1459: pctofileline(Sym *sym, int32 oldval, Prog *p, int32 phase, int32 arg)\nOn 2013/07/15 23:59:08, iant wrote:\n> Would it be consistent with the commenting practices of this program to have a\n> comment explaining the phase and arg parameters?\n\nDone.\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode1492\nsrc/cmd/ld/lib.c:1492: return p->to.offset;\nOn 2013/07/15 23:59:08, iant wrote:\n> Check for overflow?\n\nDone.\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode2170\nsrc/cmd/ld/lib.c:2170: struct Hist\nOn 2013/07/16 00:23:43, r wrote:\n> some commentary about the format, the location in the object file, the decoding,\n> how it works in memory, etc. would be most welcome\n\nDone.\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode2389\nsrc/cmd/ld/lib.c:2389: return setuint32(f, off, start);\nOn 2013/07/16 00:23:43, r wrote:\n> overflow?\n\nDone.\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/ld/lib.c#newcode2558\nsrc/cmd/ld/lib.c:2558: setaddrplus(ftab, f->value*PtrSize, defgostring(f->name), 0);\nOn 2013/07/15 23:59:08, iant wrote:\n> Can just use setaddr.\n\nDone.",
			"disapproval": false,
			"date": "2013-07-16 00:58:34.968260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11085043/diff/23001/src/cmd/5l/5.out.h\nFile src/cmd/5l/5.out.h (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/cmd/5l/5.out.h#newcode204\nsrc/cmd/5l/5.out.h:204: // TODO: Remove these.\nOn 2013/07/15 23:49:22, cshapiro1 wrote:\n> Why isn't the ATYPE value in this list?  Does anything use it now?  It is not\n> needed for GC.\n\nTYPE instructions are the only ones that specify types for local variables. Without them, the DWARF generation code will not have the right information to send to gdb.\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/11085043/diff/23001/src/pkg/runtime/runtime.h#newcode417\nsrc/pkg/runtime/runtime.h:417: int32\tpcsp;\nOn 2013/07/15 23:49:22, cshapiro1 wrote:\n> Having comments for all of these members would be helpful.\n\nI added a link to the doc.",
			"disapproval": false,
			"date": "2013-07-16 01:00:56.983360",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11085043/diff/54001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/11085043/diff/54001/src/cmd/ld/lib.c#newcode1546\nsrc/cmd/ld/lib.c:1546: // transmitted in zig-zag form, where the sign bit is placed in bit 0,\nit's not the sign bit, it's the complement bit, isn't it?\notherwise it would save no space.",
			"disapproval": false,
			"date": "2013-07-16 04:24:00.813240",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"r@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8b12d6f12155 ***\n\ncmd/ld, runtime: new in-memory symbol table format\n\nDesign at http://golang.org/s/go12symtab.\n\nThis enables some cleanup of the garbage collector metadata\nthat will be done in future CLs.\n\nThis CL does not move the old symtab and pclntab back into\nan unmapped section of the file. That's a bit tricky and will be\ndone separately.\n\nFixes issue 4020.\n\nR=golang-dev, dave, cshapiro, iant, r\nCC=golang-dev, nigeltao\nhttps://codereview.appspot.com/11085043",
			"disapproval": false,
			"date": "2013-07-16 13:41:50.700650",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"cshapiro@google.com",
				"iant@golang.org",
				"r@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI. This broke windows build\n\n# ..\\misc\\cgo\\test\n# testmain\nhistory stack phase error: bad offset in pop\nFAIL\t_/c_/gobuilder/windows-amd64-8b12d6f12155/go/misc/cgo/test [build failed]\nBuild complete, duration 8m55.837s. Result: error: exit status 1\n\nAlex",
			"disapproval": false,
			"date": "2013-07-17 01:40:02.316940",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 11085043: cmd/ld, runtime: new in-memory symbol table format",
	"created": "2013-07-10 04:15:34.663730",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		11001,
		17001,
		20001,
		23001,
		54001,
		61001
	],
	"modified": "2013-07-17 01:40:02.671110",
	"closed": true,
	"issue": 11085043
}