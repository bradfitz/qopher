{
	"description": "runtime: faster segmented stacks\nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkStackGrowth                 665          548  -17.59%\nBenchmarkStackGrowth-2               333          274  -17.72%\nBenchmarkStackGrowth-4               224          168  -25.00%\nBenchmarkStackGrowth-8               124           91  -26.21%\nBenchmarkStackGrowth-16               82           70  -14.55%\nBenchmarkStackGrowth-32               73           59  -19.49%",
	"cc": [
		"nigeltao@golang.org",
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-03 15:27:50.471420",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7026044/diff/7001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7026044/diff/7001/src/pkg/runtime/proc.c#newcode1125\nsrc/pkg/runtime/proc.c:1125: label.sp = top->gobuf.sp;\nCan this be\nlabel = top->gobuf;",
			"disapproval": false,
			"date": "2013-01-04 01:03:33.800530",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please review the following change",
			"disapproval": false,
			"date": "2013-01-03 14:31:58.837050",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7026044/diff/7001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7026044/diff/7001/src/pkg/runtime/proc.c#newcode1125\nsrc/pkg/runtime/proc.c:1125: label.sp = top->gobuf.sp;\nOn 2013/01/04 01:03:33, nigeltao wrote:\n> Can this be\n> label = top->gobuf;\n\nYou're right. Thanks!\nDone.\nCompiler generates inefficient code for copy of whole Stktop struct (as in original code). But  Gobuf is smaller, and struct copy code for it is equivalent to my manual member-by-member copy.",
			"disapproval": false,
			"date": "2013-01-04 05:30:31.178570",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1117\nsrc/pkg/runtime/proc.c:1117: dstend = dst + argsize/PtrSize;\nhow about s/PtrSize/sizeof(*dst)/ ?\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1168\nsrc/pkg/runtime/proc.c:1168: if(reflectcall) {\nso for non reflect.calls, framesize will always be bigger\nthan minalloc?\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1223\nsrc/pkg/runtime/proc.c:1223: dstend = dst + argsize/PtrSize;\nditto.",
			"disapproval": false,
			"date": "2013-01-05 14:09:00.462420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1117\nsrc/pkg/runtime/proc.c:1117: dstend = dst + argsize/PtrSize;\nOn 2013/01/05 14:09:00, minux wrote:\n> how about s/PtrSize/sizeof(*dst)/ ?\n\nYes please.\n\nHowever, this word-based copy is only correct if we know argsize is always an exact multiple of PtrSize. That's reasonable to demand, but I am not sure if the compilers guarantee it just yet. If you change the linkers to reject object files with non-conforming argument sizes, then I'll feel a lot more comfortable about this.\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1119\nsrc/pkg/runtime/proc.c:1119: for(; dst != dstend; dst++, src++)\nwhile(dst < dstend)\n    *dst++ = *src++;\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1168\nsrc/pkg/runtime/proc.c:1168: if(reflectcall) {\nOn 2013/01/05 14:09:00, minux wrote:\n> so for non reflect.calls, framesize will always be bigger\n> than minalloc?\n\nminalloc is a clumsy hack added so that the garbage collector can use\na reflect call to get running on a fresh stack frame. It doesn't get used\notherwise.\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1223\nsrc/pkg/runtime/proc.c:1223: dstend = dst + argsize/PtrSize;\nditto.",
			"disapproval": false,
			"date": "2013-01-07 05:28:47.461250",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1117\nsrc/pkg/runtime/proc.c:1117: dstend = dst + argsize/PtrSize;\nOn 2013/01/05 14:09:00, minux wrote:\n> how about s/PtrSize/sizeof(*dst)/ ?\n\nDone.\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1117\nsrc/pkg/runtime/proc.c:1117: dstend = dst + argsize/PtrSize;\nOn 2013/01/07 05:28:47, rsc wrote:\n> On 2013/01/05 14:09:00, minux wrote:\n> > how about s/PtrSize/sizeof(*dst)/ ?\n> \n> Yes please.\n> \n> However, this word-based copy is only correct if we know argsize is always an\n> exact multiple of PtrSize. That's reasonable to demand, but I am not sure if the\n> compilers guarantee it just yet. If you change the linkers to reject object\n> files with non-conforming argument sizes, then I'll feel a lot more comfortable\n> about this.\n\nBut newstack() contains:\nif(argsize % sizeof(uintptr) != 0) throw();\nDoesn't argsize is the same in newstack and oldstack?\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1119\nsrc/pkg/runtime/proc.c:1119: for(; dst != dstend; dst++, src++)\nOn 2013/01/07 05:28:47, rsc wrote:\n> while(dst < dstend)\n>     *dst++ = *src++;\n\nDone.\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1168\nsrc/pkg/runtime/proc.c:1168: if(reflectcall) {\nOn 2013/01/07 05:28:47, rsc wrote:\n> On 2013/01/05 14:09:00, minux wrote:\n> > so for non reflect.calls, framesize will always be bigger\n> > than minalloc?\n> \n> minalloc is a clumsy hack added so that the garbage collector can use\n> a reflect call to get running on a fresh stack frame. It doesn't get used\n> otherwise.\n\nI've added a comment here.\n\nhttps://codereview.appspot.com/7026044/diff/3008/src/pkg/runtime/proc.c#newcode1223\nsrc/pkg/runtime/proc.c:1223: dstend = dst + argsize/PtrSize;\nOn 2013/01/05 14:09:00, minux wrote:\n> ditto.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-08 12:59:02.037160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-09 19:13:24.826480",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c8c8cc10a3da ***\n\nruntime: faster segmented stacks\nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkStackGrowth                 665          548  -17.59%\nBenchmarkStackGrowth-2               333          274  -17.72%\nBenchmarkStackGrowth-4               224          168  -25.00%\nBenchmarkStackGrowth-8               124           91  -26.21%\nBenchmarkStackGrowth-16               82           70  -14.55%\nBenchmarkStackGrowth-32               73           59  -19.49%\n\nR=nigeltao, minux.ma, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7026044",
			"disapproval": false,
			"date": "2013-01-10 07:45:35.194600",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 7026044: runtime: faster segmented stacks",
	"created": "2012-12-30 13:43:43.324050",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		3008,
		14001,
		18001,
		21001,
		18003,
		24003,
		18004
	],
	"modified": "2013-01-10 07:45:36.648510",
	"closed": true,
	"issue": 7026044
}