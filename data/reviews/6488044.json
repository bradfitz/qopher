{
	"description": "os: detect and handle console in File.Write on windows\n\nFixes issue 3376.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bsiegert@gmail.com",
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 29, 2012 at 12:44 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> On 2012/08/29 03:46:13, minux wrote:\r\n>\r\n>> (http://code.google.com/p/go/**issues/detail?id=3376#c2<http://code.google.com/p/go/issues/detail?id=3376#c2>\r\n>> )\r\n>\r\n> How can you tell it is Go stack trace?\r\n>\r\nthat comment doesn't mention stack trace, but i assume if we use WriteFile\r\nto write a very long stack trace the same overflow problem could occur.\r\n",
			"disapproval": false,
			"date": "2012-08-29 04:56:37.546920",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-08-28 05:53:24.229410",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think you also need to do the same for the runtime package\n(possibly in a follow-up CL)\nhttp://tip.golang.org/src/pkg/runtime/thread_windows.c#L117",
			"disapproval": false,
			"date": "2012-08-28 17:04:59.753400",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 29, 2012 at 10:33 AM, <alex.brainman@gmail.com> wrote:\r\n\r\n> On 2012/08/28 17:04:59, minux wrote:\r\n>\r\n>> I think you also need to do the same for the runtime package\r\n>> (possibly in a follow-up CL)\r\n>> http://tip.golang.org/src/pkg/**runtime/thread_windows.c#L117<http://tip.golang.org/src/pkg/runtime/thread_windows.c#L117>\r\n>>\r\n>\r\n> I disagree here. I think print and println can stay as is. These are for\r\n> debugging only. I do not think complications are worth it. But feel free\r\n> to pursue your proposal one way or the other.\r\n\r\nruntime.write is used by runtime.printf, which in turn is used by traceback\r\ncode. if a program uses a lot of goroutines, i think the same console\r\noverflow\r\nproblem could occur during trackback\r\n(http://code.google.com/p/go/issues/detail?id=3376#c2)\r\n",
			"disapproval": false,
			"date": "2012-08-29 03:46:13.488980",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am wondering if the code in consoleWrite can be simplified by casting the byte array to []rune somewhere. Maybe after prepending lastbits, check if the rune at the end is incomplete, if yes cut it off, then convert the whole slice.\n\nhttp://codereview.appspot.com/6488044/diff/1001/src/pkg/os/file_windows.go\nFile src/pkg/os/file_windows.go (right):\n\nhttp://codereview.appspot.com/6488044/diff/1001/src/pkg/os/file_windows.go#newcode242\nsrc/pkg/os/file_windows.go:242: // console writes len(b) bytes to the console File.\ncorrect function name, s/console/consoleWrite/\n\nhttp://codereview.appspot.com/6488044/diff/1001/src/pkg/os/file_windows.go#newcode244\nsrc/pkg/os/file_windows.go:244: func (f *File) consoleWrite(b []byte) (n int, err error) {\nMaybe I would call this writeConsole.",
			"disapproval": false,
			"date": "2012-08-28 08:24:40.532430",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "can we test it?\n\nthis is a important issue, and i think it's worthwhile even we have to\nchange run.bat to add a specific test for it.",
			"disapproval": false,
			"date": "2012-08-28 08:27:31.106090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nVery happy to see this fixed.\n\nhttp://codereview.appspot.com/6488044/diff/8001/src/pkg/os/file_windows.go\nFile src/pkg/os/file_windows.go (right):\n\nhttp://codereview.appspot.com/6488044/diff/8001/src/pkg/os/file_windows.go#newcode261\nsrc/pkg/os/file_windows.go:261: if len(runes) > 0 {\nDo we know that WriteConsole will gracefully handle too much data and do a short write instead of giving an error? If not, maybe\n\nconst max = 16000\nfor len(runes) > 0 {\n    m := len(runes)\n    if m > maxWrite {\n        m = maxWrite\n    }\n    chunk = runes[:m]\n    runes = runes[m:]\n    uint16s := utf16.Encode(runes)\n    ...\n}\n\nEither way, whatever you think is best.",
			"disapproval": false,
			"date": "2012-09-11 01:18:22.312970",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bsiegert@gmail.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-29 02:33:09.077970",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ffe134f40269 ***\n\nos: detect and handle console in File.Write on windows\n\nFixes issue 3376.\n\nR=golang-dev, bsiegert, minux.ma, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6488044\n\nhttp://codereview.appspot.com/6488044/diff/8001/src/pkg/os/file_windows.go\nFile src/pkg/os/file_windows.go (right):\n\nhttp://codereview.appspot.com/6488044/diff/8001/src/pkg/os/file_windows.go#newcode261\nsrc/pkg/os/file_windows.go:261: if len(runes) > 0 {\nOn 2012/09/11 01:18:22, rsc wrote:\n> Do we know that WriteConsole will gracefully handle too much data and do a short\n> write instead of giving an error? ...\n> \n\nI do not know yet. I will submit this one as is and deal with big writes in a separate CL. I might even come up with a test for it.\n\nI am not very keen on fiddling with io buffers \"under the covers\", but I see no better way to fix our problem. Having to do it for \"console\" io only makes it easier for me. Oh well.",
			"disapproval": false,
			"date": "2012-09-12 02:04:58.145320",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/28 08:24:40, bsiegert wrote:\n> I am wondering if the code in consoleWrite can be simplified by casting the byte\n> array to []rune somewhere. Maybe after prepending lastbits, check if the rune at\n> the end is incomplete, if yes cut it off, then convert the whole slice.\n> \n\nI think it is simple enough, but if you show your version, I will consider it.\n\nOn 2012/08/28 08:27:31, minux wrote:\n> can we test it?\n> \n\nI would love a test. But I can't even imaging how to do it.\n\n> this is a important issue, and i think it's worthwhile even we have to\n> change run.bat to add a specific test for it.\n\nAgain, I am open to suggestions.\n\nOn 2012/08/28 17:04:59, minux wrote:\n> I think you also need to do the same for the runtime package\n> (possibly in a follow-up CL)\n> http://tip.golang.org/src/pkg/runtime/thread_windows.c#L117\n\nI disagree here. I think print and println can stay as is. These are for debugging only. I do not think complications are worth it. But feel free to pursue your proposal one way or the other.\n\nIf we are here talking about things I didn't do, then I should mention similar code for console input. But, again, I do not see it as a big miss, so I would like to keep things simple until we really need it.\n\nAlex\n\nhttp://codereview.appspot.com/6488044/diff/1001/src/pkg/os/file_windows.go\nFile src/pkg/os/file_windows.go (right):\n\nhttp://codereview.appspot.com/6488044/diff/1001/src/pkg/os/file_windows.go#newcode242\nsrc/pkg/os/file_windows.go:242: // console writes len(b) bytes to the console File.\nOn 2012/08/28 08:24:40, bsiegert wrote:\n> correct function name, s/console/consoleWrite/\n\nDone.\n\nhttp://codereview.appspot.com/6488044/diff/1001/src/pkg/os/file_windows.go#newcode244\nsrc/pkg/os/file_windows.go:244: func (f *File) consoleWrite(b []byte) (n int, err error) {\nOn 2012/08/28 08:24:40, bsiegert wrote:\n> Maybe I would call this writeConsole.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-29 02:33:16.195200",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/29 03:46:13, minux wrote:\n> (http://code.google.com/p/go/issues/detail?id=3376#c2)\n\nHow can you tell it is Go stack trace?\n\nAlex",
			"disapproval": false,
			"date": "2012-08-29 04:44:18.667050",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/29 04:56:37, minux wrote:\n> >\n> that comment doesn't mention stack trace, but i assume if we use WriteFile\n> to write a very long stack trace the same overflow problem could occur.\n\nFrom what I can tell, it is how much of data you supply in one api call (it tends to break if buffer is ~ 32K). And we do not supply as much during stack trace, are we? Also, I think WriteConsole will have same problem ...\n\nAlex",
			"disapproval": false,
			"date": "2012-08-29 05:09:58.884130",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 6488044: os: detect and handle console in File.Write on windows",
	"created": "2012-08-28 05:42:43.283260",
	"patchsets": [
		1,
		1001,
		8001,
		2007
	],
	"modified": "2012-09-12 02:05:00.604620",
	"closed": true,
	"issue": 6488044
}