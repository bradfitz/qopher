{
	"description": "errors: new package\n\nThe only function is errors.New, at least for now.",
	"cc": [
		"r@golang.org",
		"gustavo@niemeyer.net",
		"adg@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "it's an easier property to fix than to document.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-10-28 15:14:08.114534",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-28 04:04:11.301565",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "sorry, i don't understand the New thing\n\nhttp://codereview.appspot.com/5321061/diff/4001/src/pkg/errors/errors.go\nFile src/pkg/errors/errors.go (right):\n\nhttp://codereview.appspot.com/5321061/diff/4001/src/pkg/errors/errors.go#newcode5\nsrc/pkg/errors/errors.go:5: // Package errors implements functions to manipulate errors.\ns/errors/error values/ would read better and be less confusing.\n\nhttp://codereview.appspot.com/5321061/diff/4001/src/pkg/errors/errors.go#newcode9\nsrc/pkg/errors/errors.go:9: // New(text) == New(text) even for different calls to New.\ni don't understand what you're trying to say.\n\nhttp://codereview.appspot.com/5321061/diff/4001/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5321061/diff/4001/src/pkg/errors/errors_test.go#newcode13\nsrc/pkg/errors/errors_test.go:13: if New(\"abc\") != New(\"abc\") {\nwhat??",
			"disapproval": false,
			"date": "2011-10-28 04:13:54.732362",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Oct 28, 2011 at 07:50, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> There will be some significant breakage, I believe.\n> There's quite a bit of code that does something like:\n>\n> \u00a0 \u00a0foo, err := pkg.Foo()\n> \u00a0 \u00a0if err == pkg.ErrSomethingBad {\n> \u00a0 \u00a0 \u00a0 \u00a0...\n> \u00a0 \u00a0}\n>\n> Where ErrSomethinBad is purposefully declared today as\n>\n> \u00a0 \u00a0var ErrSomethingBad = os.NewError(...)\n>\n> If that changes, people will have to redeclare these errors with a\n> different type to preserve the idiom, or change the idiom.\n\nNo, that will continue to work fine.  The property in question\nis not whether == works at all.  It is whether, if you call New twice\nwith the same text, the two results are == to each other.\n\nThe surprising behavior is this:\n\npackage rpc\nvar ErrInternal = errors.New(\"internal error\")\n\npackage math\nvar ErrInternal = errors.New(\"internal error\")\n\npackage main\nerr := Foo()\nassert(err == math.ErrInternal)  // that's what Foo returns\nassert(err == rpc.ErrInternal)  // because it's the same text!\n\nI should probably just fix the behavior and see what breaks.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-28 14:55:47.459282",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gustavo@niemeyer.net",
				"adg@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b1c079c01a0a ***\n\nerrors: new package\n\nThe only function is errors.New, at least for now.\n\nR=r, gustavo, adg, r\nCC=golang-dev\nhttp://codereview.appspot.com/5321061",
			"disapproval": false,
			"date": "2011-11-02 01:47:02.807124",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Oct 28, 2011 at 07:55, Russ Cox <rsc@golang.org> wrote:\n> I should probably just fix the behavior and see what breaks.\n\nJust to be clear, this behavior exists today with os.NewError.\nIt's not that I thought it was a good design for errors.New\nbut instead that I was trying not to break existing code.\nHowever, I think the point can be made that existing code\ndepending on this is already broken.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-28 15:03:24.554909",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Oct 27, 2011 at 21:13,  <r@golang.org> wrote:\n> i don't understand what you're trying to say.\n\nif you call New twice with the same string,\nthe two different results are == to each other\n",
			"disapproval": false,
			"date": "2011-10-28 04:14:46.803891",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Oct 27, 2011 at 9:14 PM, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Oct 27, 2011 at 21:13, \u00a0<r@golang.org> wrote:\n>> i don't understand what you're trying to say.\n>\n> if you call New twice with the same string,\n> the two different results are == to each other\n\nyes, but so what? it seems such an odd thing to single out. upon\nreflection i think i see what you're after, but the message is\ncryptic. you mean, i believe, that although the function is called\nNew, it doesn't work like other New functions in that the return\nvalues compare. but is that worth saying? is code likely to depend on\nmultiple calls being unequal?\n\nanyway, a statement of intent rather than a bald fact might help.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-10-28 06:08:29.423606",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gustavo@niemeyer.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-01 16:23:26.135915",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Oct 27, 2011 at 23:08, Rob 'Commander' Pike <r@golang.org> wrote:\n> yes, but so what? it seems such an odd thing to single out. upon\n> reflection i think i see what you're after, but the message is\n> cryptic. you mean, i believe, that although the function is called\n> New, it doesn't work like other New functions in that the return\n> values compare. but is that worth saying? is code likely to depend on\n> multiple calls being unequal?\n>\n> anyway, a statement of intent rather than a bald fact might help.\n\nIt is a property that has surprised people and that people\nmay or may not be depending on.  I would be happy to\nchange it so that New(\"abc\") != New(\"abc\") and then drop\nthe sentence, but I have no idea what will break.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-28 14:38:54.184153",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> It is a property that has surprised people and that people\n> may or may not be depending on. \u00a0I would be happy to\n> change it so that New(\"abc\") != New(\"abc\") and then drop\n> the sentence, but I have no idea what will break.\n\nThere will be some significant breakage, I believe.\nThere's quite a bit of code that does something like:\n\n    foo, err := pkg.Foo()\n    if err == pkg.ErrSomethingBad {\n        ...\n    }\n\nWhere ErrSomethinBad is purposefully declared today as\n\n    var ErrSomethingBad = os.NewError(...)\n\nIf that changes, people will have to redeclare these errors with a\ndifferent type to preserve the idiom, or change the idiom.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-10-28 14:51:08.129063",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": ">> I should probably just fix the behavior and see what breaks.\n>\n> Just to be clear, this behavior exists today with os.NewError.\n> It's not that I thought it was a good design for errors.New\n> but instead that I was trying not to break existing code.\n> However, I think the point can be made that existing code\n> depending on this is already broken.\n\nAgreed, this sounds like a relevant improvement. I misunderstood the\nconversation as hinting that equality shouldn't work for errors, which\nsounded strange.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-10-28 15:11:50.631068",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org, gustavo@niemeyer.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-01 05:26:52.582732",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gustavo@niemeyer.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5321061/diff/15001/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5321061/diff/15001/src/pkg/errors/errors_test.go#newcode18\nsrc/pkg/errors/errors_test.go:18: t.Errorf(`New(\"abc\") == New(\"abc\")`)\nerror message should be `New(\"abc\") == New(\"xyz\")`",
			"disapproval": false,
			"date": "2011-11-01 06:12:28.384279",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 1, 2011, at 9:23 AM, r@golang.org wrote:\n\n> LGTM\n\n(after addressing adg's point)\n",
			"disapproval": false,
			"date": "2011-11-01 16:24:17.461749",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5321061: errors: new package",
	"created": "2011-10-28 01:08:22.500542",
	"patchsets": [
		1,
		2001,
		4001,
		12001,
		15001,
		4007
	],
	"modified": "2011-11-02 01:47:04.384779",
	"closed": true,
	"issue": 5321061
}