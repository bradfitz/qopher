{
	"description": "exp/types/staging: more flexible API, cleanups\n\n- Changed Check signature to take function parameters for\n  more flexibility: Now a client can interrupt type checking\n  early (via panic in one the upcalls) once the desired\n  type information or number of errors is reached. Default\n  use is still simple.\n\n- Cleaned up main typechecking loops. Now does not neglect\n  _ declarations anymore.\n\n- Various other cleanups.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/check.go\nFile src/pkg/exp/types/staging/check.go (right):\n\nhttps://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/check.go#newcode286\nsrc/pkg/exp/types/staging/check.go:286: // TODO(gri) why is _ special here?\nI can imagine it might be special in that you still want to type-check the declaration. That is:\n\nvar _ int = \"hello\"\n\nshould not be thrown away before being type-checked. But that's also true of case TypeSpec.\n\nhttps://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/types.go\nFile src/pkg/exp/types/staging/types.go (right):\n\nhttps://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/types.go#newcode24\nsrc/pkg/exp/types/staging/types.go:24: // is found. A nil record is not invoked.\nOn 2012/10/06 22:25:59, r wrote:\n> what does \"A nil record is not invoked\" mean?\n\ns//If record is nil, it is not invoked./\n\nAnd maybe chage record to f or save or something more obviously a function or verb.",
			"disapproval": false,
			"date": "2012-10-06 22:49:46.166950",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/check.go\nFile src/pkg/exp/types/staging/check.go (right):\n\nhttps://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/check.go#newcode286\nsrc/pkg/exp/types/staging/check.go:286: // TODO(gri) why is _ special here?\nOn 2012/10/06 22:49:46, rsc wrote:\n> I can imagine it might be special in that you still want to type-check the\n> declaration. That is:\n> \n> var _ int = \"hello\"\n> \n> should not be thrown away before being type-checked. But that's also true of\n> case TypeSpec.\n\nCorrect. There's a failure here that I haven't tracked down yet.\n\nhttps://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/types.go\nFile src/pkg/exp/types/staging/types.go (right):\n\nhttps://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/types.go#newcode24\nsrc/pkg/exp/types/staging/types.go:24: // is found. A nil record is not invoked.\nOn 2012/10/06 22:49:46, rsc wrote:\n> On 2012/10/06 22:25:59, r wrote:\n> > what does \"A nil record is not invoked\" mean?\n> \n> s//If record is nil, it is not invoked./\n> \n> And maybe chage record to f or save or something more obviously a function or\n> verb.\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-10-07 23:40:47.404800",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/types.go\nFile src/pkg/exp/types/staging/types.go (right):\n\nhttp://codereview.appspot.com/6612049/diff/7001/src/pkg/exp/types/staging/types.go#newcode24\nsrc/pkg/exp/types/staging/types.go:24: // is found. A nil record is not invoked.\nwhat does \"A nil record is not invoked\" mean?",
			"disapproval": false,
			"date": "2012-10-06 22:25:59.827080",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-05 02:35:46.255870",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ad44ea247aa4 ***\n\nexp/types/staging: more flexible API, cleanups\n\n- Changed Check signature to take function parameters for\n  more flexibility: Now a client can interrupt type checking\n  early (via panic in one the upcalls) once the desired\n  type information or number of errors is reached. Default\n  use is still simple.\n\n- Cleaned up main typechecking loops. Now does not neglect\n  _ declarations anymore.\n\n- Various other cleanups.\n\nR=golang-dev, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6612049",
			"disapproval": false,
			"date": "2012-10-08 01:02:29.274440",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6612049: exp/types/staging: more flexible API, cleanups",
	"created": "2012-10-05 02:33:21.366890",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		11001,
		12002
	],
	"modified": "2012-10-08 01:02:30.558120",
	"closed": true,
	"issue": 6612049
}