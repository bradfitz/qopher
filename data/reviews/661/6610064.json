{
	"description": "race: syscall changes\nThis is a part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044\nThe purpose of this patch is to provide coarse-grained synchronization\nbetween all Read() and Write() calls.",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"alex.brainman@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go\nFile src/pkg/syscall/syscall_darwin.go (left):\n\nhttps://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go#oldcode165\nsrc/pkg/syscall/syscall_darwin.go:165: //sys\tRead(fd int, p []byte) (n int, err error)\nPlease let mksyscall do the generation of the system call. Instead, you can do\n\n//sys read \n\nhere and then write \n\nfunc Read(fd int, p []byte) (n int, err error) {\n    n, err = read(fd, p)\n    racestuff\n    return\n}\n\nSame for Write.",
			"disapproval": false,
			"date": "2012-10-07 14:22:55.768510",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "makes sense\r\n\r\n\r\nOn Sun, Oct 7, 2012 at 7:22 AM, <rsc@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6610064/diff/6019/src/pkg/**\r\n> syscall/syscall_darwin.go<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go>\r\n> File src/pkg/syscall/syscall_**darwin.go (left):\r\n>\r\n> https://codereview.appspot.**com/6610064/diff/6019/src/pkg/**\r\n> syscall/syscall_darwin.go#**oldcode165<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go#oldcode165>\r\n> src/pkg/syscall/syscall_**darwin.go:165: //sys    Read(fd int, p []byte)\r\n> (n\r\n> int, err error)\r\n> Please let mksyscall do the generation of the system call. Instead, you\r\n> can do\r\n>\r\n> //sys read\r\n>\r\n> here and then write\r\n>\r\n> func Read(fd int, p []byte) (n int, err error) {\r\n>     n, err = read(fd, p)\r\n>     racestuff\r\n>     return\r\n> }\r\n>\r\n> Same for Write.\r\n>\r\n> https://codereview.appspot.**com/6610064/<https://codereview.appspot.com/6610064/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-07 14:37:29.517150",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/07 14:37:29, dvyukov wrote:\n> makes sense\n> \n> \n> On Sun, Oct 7, 2012 at 7:22 AM, <mailto:rsc@golang.org> wrote:\n> \n> >\n> > https://codereview.appspot.**com/6610064/diff/6019/src/pkg/**\n> >\n> syscall/syscall_darwin.go<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go>\n> > File src/pkg/syscall/syscall_**darwin.go (left):\n> >\n> > https://codereview.appspot.**com/6610064/diff/6019/src/pkg/**\n> >\n> syscall/syscall_darwin.go#**oldcode165<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go#oldcode165>\n> > src/pkg/syscall/syscall_**darwin.go:165: //sys    Read(fd int, p []byte)\n> > (n\n> > int, err error)\n> > Please let mksyscall do the generation of the system call. Instead, you\n> > can do\n> >\n> > //sys read\n> >\n> > here and then write\n> >\n> > func Read(fd int, p []byte) (n int, err error) {\n> >     n, err = read(fd, p)\n> >     racestuff\n> >     return\n> > }\n> >\n> > Same for Write.\n> >\n> >\n> https://codereview.appspot.**com/6610064/%3Chttps://codereview.appspot.com/6610064/>\n\n\nI've renamed:\nread->readlen\nwrite->writelen\nRead->read\nWrite->write\nand provided common Read/Write in syscall.go\n\nNow I can't understand why api says:\n\n-pkg syscall (linux-amd64), func Read(int, []byte) (int, error)\n-pkg syscall (linux-amd64), func Write(int, []byte) (int, error)\n\nwhile\n\n$ go doc syscall | egrep \"Read|Write\"\nfunc Read(fd int, p []byte) (n int, err error)\nfunc ReadDirent(fd int, buf []byte) (n int, err error)\nfunc Readlink(path string, buf []byte) (n int, err error)\nfunc Write(fd int, p []byte) (n int, err error)\n\n?",
			"disapproval": false,
			"date": "2012-10-07 17:57:57.926780",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/08 00:32:37, brainman wrote:\n> > ...\n> > any ideas?\n> \n> Like Brad said, syscall.Read and syscall.Write have different signature on\n> windows. In fact, your CL does not compile on windows. You can see it yourself:\n> http://code.google.com/p/go-wiki/wiki/WindowsCrossCompiling.\n> \n> The obvious way to fix your problem is to move Read and Write functions into\n> different source file with // +build !windows\n>  in it. Unfortunately, we do not have one yet, so create one. You would also\n> need to add windows versions of Read and Write in syscall_windows.go\n\n\nThanks! Done. PTAL.\n\nNow I have version of Read/Write in syscall_unix.go, syscall_windows.go and syscall_plan9.go. The tests pass now on Linux, and I've cross-built Windows version as well.",
			"disapproval": false,
			"date": "2012-10-08 11:27:18.958820",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-07 14:01:50.062660",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, bradfitz@golang.org, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-08 11:25:43.804260",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ba847b110365 ***\n\nrace: syscall changes\nThis is a part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044\nThe purpose of this patch is to provide coarse-grained synchronization\nbetween all Read() and Write() calls.\n\nR=rsc, bradfitz, alex.brainman\nCC=golang-dev\nhttp://codereview.appspot.com/6610064",
			"disapproval": false,
			"date": "2012-10-09 16:52:24.507840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/07 17:57:57, dvyukov wrote:\n> On 2012/10/07 14:37:29, dvyukov wrote:\n> > makes sense\n> > \n> > \n> > On Sun, Oct 7, 2012 at 7:22 AM, <mailto:rsc@golang.org> wrote:\n> > \n> > >\n> > > https://codereview.appspot.**com/6610064/diff/6019/src/pkg/**\n> > >\n> >\n> syscall/syscall_darwin.go<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go>\n> > > File src/pkg/syscall/syscall_**darwin.go (left):\n> > >\n> > > https://codereview.appspot.**com/6610064/diff/6019/src/pkg/**\n> > >\n> >\n> syscall/syscall_darwin.go#**oldcode165<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go#oldcode165>\n> > > src/pkg/syscall/syscall_**darwin.go:165: //sys    Read(fd int, p []byte)\n> > > (n\n> > > int, err error)\n> > > Please let mksyscall do the generation of the system call. Instead, you\n> > > can do\n> > >\n> > > //sys read\n> > >\n> > > here and then write\n> > >\n> > > func Read(fd int, p []byte) (n int, err error) {\n> > >     n, err = read(fd, p)\n> > >     racestuff\n> > >     return\n> > > }\n> > >\n> > > Same for Write.\n> > >\n> > >\n> >\n> https://codereview.appspot.**com/6610064/%253Chttps://codereview.appspot.com/6610064/>\n> \n> \n> I've renamed:\n> read->readlen\n> write->writelen\n> Read->read\n> Write->write\n> and provided common Read/Write in syscall.go\n> \n> Now I can't understand why api says:\n> \n> -pkg syscall (linux-amd64), func Read(int, []byte) (int, error)\n> -pkg syscall (linux-amd64), func Write(int, []byte) (int, error)\n> \n> while\n> \n> $ go doc syscall | egrep \"Read|Write\"\n> func Read(fd int, p []byte) (n int, err error)\n> func ReadDirent(fd int, buf []byte) (n int, err error)\n> func Readlink(path string, buf []byte) (n int, err error)\n> func Write(fd int, p []byte) (n int, err error)\n> \n> ?\n\nApi says:\n\n-pkg syscall (darwin-386), func Read(int, []byte) (int, error)\n-pkg syscall (darwin-386), func Write(int, []byte) (int, error)\n-pkg syscall (darwin-386-cgo), func Read(int, []byte) (int, error)\n-pkg syscall (darwin-386-cgo), func Write(int, []byte) (int, error)\n-pkg syscall (darwin-amd64), func Read(int, []byte) (int, error)\n-pkg syscall (darwin-amd64), func Write(int, []byte) (int, error)\n-pkg syscall (darwin-amd64-cgo), func Read(int, []byte) (int, error)\n-pkg syscall (darwin-amd64-cgo), func Write(int, []byte) (int, error)\n-pkg syscall (freebsd-386), func Read(int, []byte) (int, error)\n-pkg syscall (freebsd-386), func Write(int, []byte) (int, error)\n-pkg syscall (freebsd-amd64), func Read(int, []byte) (int, error)\n-pkg syscall (freebsd-amd64), func Write(int, []byte) (int, error)\n-pkg syscall (linux-386), func Read(int, []byte) (int, error)\n-pkg syscall (linux-386), func Write(int, []byte) (int, error)\n-pkg syscall (linux-386-cgo), func Read(int, []byte) (int, error)\n-pkg syscall (linux-386-cgo), func Write(int, []byte) (int, error)\n-pkg syscall (linux-amd64), func Read(int, []byte) (int, error)\n-pkg syscall (linux-amd64), func Write(int, []byte) (int, error)\n-pkg syscall (linux-amd64-cgo), func Read(int, []byte) (int, error)\n-pkg syscall (linux-amd64-cgo), func Write(int, []byte) (int, error)\n-pkg syscall (linux-arm), func Read(int, []byte) (int, error)\n-pkg syscall (linux-arm), func Write(int, []byte) (int, error)\n-pkg syscall (windows-386), func Read(Handle, []byte) (int, error)\n-pkg syscall (windows-386), func Write(Handle, []byte) (int, error)\n-pkg syscall (windows-amd64), func Read(Handle, []byte) (int, error)\n-pkg syscall (windows-amd64), func Write(Handle, []byte) (int, error)\n\nany ideas?",
			"disapproval": false,
			"date": "2012-10-07 17:59:42.953940",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's a Windows issue.  Note this part of the diff:\r\n\r\n-pkg syscall (windows-amd64), func Read(Handle, []byte) (int, error)\r\n-pkg syscall (windows-amd64), func Write(Handle, []byte) (int, error)\r\n+pkg syscall (windows-amd64), func WriteConsole(Handle, *uint16, uint32,\r\n*uint32, *byte) error\r\n+pkg syscall, func Read(int, []byte) (int, error)\r\n+pkg syscall, func Write(int, []byte) (int, error)\r\n\r\nYou added your Read & Wrap wrappers to syscall.go, but Windows takes a\r\nHandle, not an int.\r\n\r\n\r\nOn Sun, Oct 7, 2012 at 10:59 AM, <dvyukov@google.com> wrote:\r\n\r\n> On 2012/10/07 17:57:57, dvyukov wrote:\r\n>\r\n>> On 2012/10/07 14:37:29, dvyukov wrote:\r\n>> > makes sense\r\n>> >\r\n>> >\r\n>> > On Sun, Oct 7, 2012 at 7:22 AM, <mailto:rsc@golang.org> wrote:\r\n>> >\r\n>> > >\r\n>> > > https://codereview.appspot.****com/6610064/diff/6019/src/pkg/****\r\n>> > >\r\n>> >\r\n>>\r\n>\r\n> syscall/syscall_darwin.go<http**s://codereview.appspot.com/**\r\n> 6610064/diff/6019/src/pkg/**syscall/syscall_darwin.go<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go>\r\n> >\r\n>\r\n>> > > File src/pkg/syscall/syscall_****darwin.go (left):\r\n>> > >\r\n>> > > https://codereview.appspot.****com/6610064/diff/6019/src/pkg/****\r\n>> > >\r\n>> >\r\n>>\r\n>\r\n> syscall/syscall_darwin.go#****oldcode165<https://codereview.**\r\n> appspot.com/6610064/diff/6019/**src/pkg/syscall/syscall_**\r\n> darwin.go#oldcode165<https://codereview.appspot.com/6610064/diff/6019/src/pkg/syscall/syscall_darwin.go#oldcode165>\r\n> >\r\n>\r\n>> > > src/pkg/syscall/syscall_****darwin.go:165: //sys    Read(fd int, p\r\n>>\r\n> []byte)\r\n>\r\n>> > > (n\r\n>> > > int, err error)\r\n>> > > Please let mksyscall do the generation of the system call.\r\n>>\r\n> Instead, you\r\n>\r\n>> > > can do\r\n>> > >\r\n>> > > //sys read\r\n>> > >\r\n>> > > here and then write\r\n>> > >\r\n>> > > func Read(fd int, p []byte) (n int, err error) {\r\n>> > >     n, err = read(fd, p)\r\n>> > >     racestuff\r\n>> > >     return\r\n>> > > }\r\n>> > >\r\n>> > > Same for Write.\r\n>> > >\r\n>> > >\r\n>> >\r\n>>\r\n>\r\n> https://codereview.appspot.****com/6610064/%253Chttps://coder**\r\n> eview.appspot.com/6610064/ <http://codereview.appspot.com/6610064/>>\r\n>\r\n>\r\n>\r\n>  I've renamed:\r\n>> read->readlen\r\n>> write->writelen\r\n>> Read->read\r\n>> Write->write\r\n>> and provided common Read/Write in syscall.go\r\n>>\r\n>\r\n>  Now I can't understand why api says:\r\n>>\r\n>\r\n>  -pkg syscall (linux-amd64), func Read(int, []byte) (int, error)\r\n>> -pkg syscall (linux-amd64), func Write(int, []byte) (int, error)\r\n>>\r\n>\r\n>  while\r\n>>\r\n>\r\n>  $ go doc syscall | egrep \"Read|Write\"\r\n>> func Read(fd int, p []byte) (n int, err error)\r\n>> func ReadDirent(fd int, buf []byte) (n int, err error)\r\n>> func Readlink(path string, buf []byte) (n int, err error)\r\n>> func Write(fd int, p []byte) (n int, err error)\r\n>>\r\n>\r\n>  ?\r\n>>\r\n>\r\n> Api says:\r\n>\r\n> -pkg syscall (darwin-386), func Read(int, []byte) (int, error)\r\n> -pkg syscall (darwin-386), func Write(int, []byte) (int, error)\r\n> -pkg syscall (darwin-386-cgo), func Read(int, []byte) (int, error)\r\n> -pkg syscall (darwin-386-cgo), func Write(int, []byte) (int, error)\r\n> -pkg syscall (darwin-amd64), func Read(int, []byte) (int, error)\r\n> -pkg syscall (darwin-amd64), func Write(int, []byte) (int, error)\r\n> -pkg syscall (darwin-amd64-cgo), func Read(int, []byte) (int, error)\r\n> -pkg syscall (darwin-amd64-cgo), func Write(int, []byte) (int, error)\r\n> -pkg syscall (freebsd-386), func Read(int, []byte) (int, error)\r\n> -pkg syscall (freebsd-386), func Write(int, []byte) (int, error)\r\n> -pkg syscall (freebsd-amd64), func Read(int, []byte) (int, error)\r\n> -pkg syscall (freebsd-amd64), func Write(int, []byte) (int, error)\r\n> -pkg syscall (linux-386), func Read(int, []byte) (int, error)\r\n> -pkg syscall (linux-386), func Write(int, []byte) (int, error)\r\n> -pkg syscall (linux-386-cgo), func Read(int, []byte) (int, error)\r\n> -pkg syscall (linux-386-cgo), func Write(int, []byte) (int, error)\r\n>\r\n> -pkg syscall (linux-amd64), func Read(int, []byte) (int, error)\r\n> -pkg syscall (linux-amd64), func Write(int, []byte) (int, error)\r\n> -pkg syscall (linux-amd64-cgo), func Read(int, []byte) (int, error)\r\n> -pkg syscall (linux-amd64-cgo), func Write(int, []byte) (int, error)\r\n> -pkg syscall (linux-arm), func Read(int, []byte) (int, error)\r\n> -pkg syscall (linux-arm), func Write(int, []byte) (int, error)\r\n> -pkg syscall (windows-386), func Read(Handle, []byte) (int, error)\r\n> -pkg syscall (windows-386), func Write(Handle, []byte) (int, error)\r\n> -pkg syscall (windows-amd64), func Read(Handle, []byte) (int, error)\r\n> -pkg syscall (windows-amd64), func Write(Handle, []byte) (int, error)\r\n>\r\n> any ideas?\r\n>\r\n> https://codereview.appspot.**com/6610064/<https://codereview.appspot.com/6610064/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-07 18:43:32.555910",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> ...\n> any ideas?\n\nLike Brad said, syscall.Read and syscall.Write have different signature on windows. In fact, your CL does not compile on windows. You can see it yourself: http://code.google.com/p/go-wiki/wiki/WindowsCrossCompiling.\n\nThe obvious way to fix your problem is to move Read and Write functions into different source file with // +build !windows\n in it. Unfortunately, we do not have one yet, so create one. You would also need to add windows versions of Read and Write in syscall_windows.go\n\nAlex",
			"disapproval": false,
			"date": "2012-10-08 00:32:37.444170",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/08 11:27:18, dvyukov wrote:\n> ...\n> Now I have version of Read/Write in syscall_unix.go, syscall_windows.go and\n> syscall_plan9.go. The tests pass now on Linux, and I've cross-built Windows\n> version as well.\n\nwindows part\n\nLGTM\n\nEven better then my suggestion (I have forgotten about syscall_unix.go).\n\nFull build runs to success on windows/386\n\nAlex",
			"disapproval": false,
			"date": "2012-10-08 22:34:44.195760",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 9, 2012 at 2:34 AM, <alex.brainman@gmail.com> wrote:\r\n\r\n> On 2012/10/08 11:27:18, dvyukov wrote:\r\n>\r\n>> ...\r\n>>\r\n>> Now I have version of Read/Write in syscall_unix.go,\r\n>>\r\n> syscall_windows.go and\r\n>\r\n>> syscall_plan9.go. The tests pass now on Linux, and I've cross-built\r\n>>\r\n> Windows\r\n>\r\n>> version as well.\r\n>>\r\n>\r\n> windows part\r\n>\r\n> LGTM\r\n>\r\n> Even better then my suggestion (I have forgotten about syscall_unix.go).\r\n>\r\n> Full build runs to success on windows/386\r\n>\r\n\r\nRuss?\r\n",
			"disapproval": false,
			"date": "2012-10-09 03:57:52.226570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-10-09 15:44:50.259350",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6610064: race: syscall changes",
	"created": "2012-10-07 13:41:38.890930",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		8001,
		10001,
		6019,
		2011,
		10002,
		6020,
		6021,
		11011,
		10025,
		1031,
		17001,
		15002
	],
	"modified": "2012-10-09 16:53:51.376370",
	"closed": true,
	"issue": 6610064
}