{
	"description": "syscall: fix Statfs and Fstatfs on Linux/ARM",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-07 08:45:37.012340",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it possible to have a test, possible in the is pkg?\r\n\r\nOn 07/10/2012, at 19:45, minux.ma@gmail.com wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n> \r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n> \r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n> \r\n> \r\n> Description:\r\n> syscall: fix Statfs and Fstatfs on Linux/ARM\r\n> \r\n> Please review this at http://codereview.appspot.com/6615055/\r\n> \r\n> Affected files:\r\n>  M src/pkg/syscall/syscall_linux_arm.go\r\n>  M src/pkg/syscall/zsyscall_linux_arm.go\r\n> \r\n> \r\n> Index: src/pkg/syscall/syscall_linux_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/syscall_linux_arm.go\r\n> +++ b/src/pkg/syscall/syscall_linux_arm.go\r\n> @@ -4,6 +4,8 @@\r\n> \r\n> package syscall\r\n> \r\n> +import \"unsafe\"\r\n> +\r\n> func Getpagesize() int { return 4096 }\r\n> \r\n> func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)*1e9 + int64(ts.Nsec) }\r\n> @@ -46,7 +48,6 @@\r\n> //sys    Chown(path string, uid int, gid int) (err error) = SYS_CHOWN32\r\n> //sys    Fchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32\r\n> //sys    Fstat(fd int, stat *Stat_t) (err error) = SYS_FSTAT64\r\n> -//sys    Fstatfs(fd int, buf *Statfs_t) (err error) = SYS_FSTATFS64\r\n> //sysnb    Getegid() (egid int) = SYS_GETEGID32\r\n> //sysnb    Geteuid() (euid int) = SYS_GETEUID32\r\n> //sysnb    Getgid() (gid int) = SYS_GETGID32\r\n> @@ -66,7 +67,6 @@\r\n> //sys    Shutdown(fd int, how int) (err error)\r\n> //sys    Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int, err error)\r\n> //sys    Stat(path string, stat *Stat_t) (err error) = SYS_STAT64\r\n> -//sys    Statfs(path string, buf *Statfs_t) (err error) = SYS_STATFS64\r\n> \r\n> // Vsyscalls on amd64.\r\n> //sysnb    Gettimeofday(tv *Timeval) (err error)\r\n> @@ -79,6 +79,26 @@\r\n> \r\n> //sys    mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error)\r\n> \r\n> +func Fstatfs(fd int, buf *Statfs_t) (err error) {\r\n> +    _, _, e := Syscall(SYS_FSTATFS64, uintptr(fd), unsafe.Sizeof(*buf), uintptr(unsafe.Pointer(buf)))\r\n> +    if e != 0 {\r\n> +        err = e\r\n> +    }\r\n> +    return\r\n> +}\r\n> +\r\n> +func Statfs(path string, buf *Statfs_t) (err error) {\r\n> +    pathp, err := BytePtrFromString(path)\r\n> +    if err != nil {\r\n> +        return err\r\n> +    }\r\n> +    _, _, e := Syscall(SYS_STATFS64, uintptr(unsafe.Pointer(pathp)), unsafe.Sizeof(*buf), uintptr(unsafe.Pointer(buf)))\r\n> +    if e != 0 {\r\n> +        err = e\r\n> +    }\r\n> +    return\r\n> +}\r\n> +\r\n> func mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) {\r\n>    page := uintptr(offset / 4096)\r\n>    if offset != int64(page)*4096 {\r\n> Index: src/pkg/syscall/zsyscall_linux_arm.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/zsyscall_linux_arm.go\r\n> +++ b/src/pkg/syscall/zsyscall_linux_arm.go\r\n> @@ -1412,16 +1412,6 @@\r\n> \r\n> // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n> \r\n> -func Fstatfs(fd int, buf *Statfs_t) (err error) {\r\n> -    _, _, e1 := Syscall(SYS_FSTATFS64, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)\r\n> -    if e1 != 0 {\r\n> -        err = e1\r\n> -    }\r\n> -    return\r\n> -}\r\n> -\r\n> -// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n> -\r\n> func Getegid() (egid int) {\r\n>    r0, _, _ := RawSyscall(SYS_GETEGID32, 0, 0, 0)\r\n>    egid = int(r0)\r\n> @@ -1622,21 +1612,6 @@\r\n> \r\n> // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n> \r\n> -func Statfs(path string, buf *Statfs_t) (err error) {\r\n> -    var _p0 *byte\r\n> -    _p0, err = BytePtrFromString(path)\r\n> -    if err != nil {\r\n> -        return\r\n> -    }\r\n> -    _, _, e1 := Syscall(SYS_STATFS64, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)\r\n> -    if e1 != 0 {\r\n> -        err = e1\r\n> -    }\r\n> -    return\r\n> -}\r\n> -\r\n> -// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\r\n> -\r\n> func Gettimeofday(tv *Timeval) (err error) {\r\n>    _, _, e1 := RawSyscall(SYS_GETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)\r\n>    if e1 != 0 {\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2012-10-07 09:15:36.978630",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=abd56df63b8f ***\n\nsyscall: fix Statfs and Fstatfs on Linux/ARM\n\nR=golang-dev, dave, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6615055",
			"disapproval": false,
			"date": "2012-10-07 16:14:42.002970",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Oct 7, 2012 at 5:15 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Is it possible to have a test, possible in the is pkg?\r\n\r\nPossible. The main difficulty is how to determine whether the returned\r\nerrno is\r\nacceptable.\r\n\r\nFor example, in the os package, we have a test that mkdir(\"/somedir\"), we\r\ncorrectly\r\nignore any permission errors, but, on one of my systems which uses a\r\nreadonly rootfs\r\n(embedded system, so not unreasonable), and that test will fail. If we test\r\nany file\r\nsystem related syscalls, we'd better consider all possible outcomes, which\r\nis messy.\r\n\r\nHaving said that, i'm sure we do need a test here (at least EINVAL is\r\nunacceptable),\r\nand i'm open to suggestions.\r\n",
			"disapproval": false,
			"date": "2012-10-07 09:48:52.545750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI'm not sure there's a reliable test for this. Glad it's fixed though.\r\n",
			"disapproval": false,
			"date": "2012-10-07 14:11:08.170680",
			"approval": true
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6615055: syscall: fix Statfs and Fstatfs on Linux/ARM",
	"created": "2012-10-07 08:25:08.702110",
	"patchsets": [
		1,
		2001,
		5001,
		2003,
		11001
	],
	"modified": "2012-10-07 16:15:00.773490",
	"closed": true,
	"issue": 6615055
}