{
	"description": "cmd/gc: escape analysis to track flow of in to out parameters.\n\nincludes step 0: synthesize outparams, from 6600044\nstep 1: give outparams loopdepth 0 and verify unchanged results\nstep 2: generate esc:$mask tags, but still tie to sink if a param has mask != 0\nnext step: use in esccall (and ORETURN with implicit OAS2FUNC) to avoid tying to sink",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-18 15:57:31.826050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6610054/diff/7001/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttps://codereview.appspot.com/6610054/diff/7001/src/cmd/gc/esc.c#newcode511\nsrc/cmd/gc/esc.c:511: // OAS2FUNC in disguise\nSeems like we need to hook these up?",
			"disapproval": false,
			"date": "2012-10-21 21:59:53.692810",
			"approval": true
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6610054/diff/7001/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttps://codereview.appspot.com/6610054/diff/7001/src/cmd/gc/esc.c#newcode511\nsrc/cmd/gc/esc.c:511: // OAS2FUNC in disguise\nOn 2012/10/21 21:59:53, rsc wrote:\n> Seems like we need to hook these up?\n\nnot until the next step.  here, return values of n->list->n still leak on account of their loopdepth being zero (which has the same effect as tying them to the sink before)",
			"disapproval": false,
			"date": "2012-10-22 08:13:07.601580",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=dede8dc61bf6 ***\n\ncmd/gc: escape analysis to track flow of in to out parameters.\n\nincludes step 0: synthesize outparams, from 6600044\nstep 1: give outparams loopdepth 0 and verify unchanged results\nstep 2: generate esc:$mask tags, but still tie to sink if a param has mask != 0\nnext step: use in esccall (and ORETURN with implicit OAS2FUNC) to avoid tying to sink\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6610054",
			"disapproval": false,
			"date": "2012-10-22 08:18:22.760330",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"lvd@google.com",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6610054/diff/10002/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttps://codereview.appspot.com/6610054/diff/10002/src/cmd/gc/esc.c#newcode214\nsrc/cmd/gc/esc.c:214: static Strlit *tags[16] = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil };\nisn't the initialiser unnecessary.?",
			"disapproval": false,
			"date": "2012-10-22 10:13:08.401990",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "of course.  I'll fix that in 6741044\r\n\r\n\r\nOn Mon, Oct 22, 2012 at 12:13 PM, <rogpeppe@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6610054/diff/10002/src/**cmd/gc/esc.c<https://codereview.appspot.com/6610054/diff/10002/src/cmd/gc/esc.c>\r\n> File src/cmd/gc/esc.c (right):\r\n>\r\n> https://codereview.appspot.**com/6610054/diff/10002/src/**\r\n> cmd/gc/esc.c#newcode214<https://codereview.appspot.com/6610054/diff/10002/src/cmd/gc/esc.c#newcode214>\r\n> src/cmd/gc/esc.c:214: static Strlit *tags[16] = { nil, nil, nil, nil,\r\n> nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil };\r\n> isn't the initialiser unnecessary.?\r\n>\r\n> https://codereview.appspot.**com/6610054/<https://codereview.appspot.com/6610054/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-22 11:32:34.514650",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 6610054: cmd/gc: escape analysis to track flow of in to out para...",
	"created": "2012-10-05 14:51:51.955180",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		10002
	],
	"modified": "2012-10-22 10:13:08.666000",
	"closed": true,
	"issue": 6610054
}