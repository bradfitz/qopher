{
	"description": "sort: Reverse and some missing docs",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't mind the comments but I am not convinced about the Reverse.\n\nhttp://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttp://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go#newcode198\nsrc/pkg/sort/sort.go:198: // IsSorted returns whether data is sorted.\nIsSorted returns true if data is sorted. (?)\n\nhttp://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go#newcode257\nsrc/pkg/sort/sort.go:257: // Reverse sorts data in reverse.\nI'd rather leave this to the implementer of Less. As is, this is probably quite a bit slower then \"forward\" Sort, which is probably not great.",
			"disapproval": false,
			"date": "2011-12-16 23:11:03.931397",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\"reports whether\"\n\nReverse might be a nice wiki example.\n",
			"disapproval": false,
			"date": "2011-12-16 23:29:23.339561",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-16 23:06:26.508581",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "it's hard to get excited about Reverse.\ni like the doc comment for Sort.\n",
			"disapproval": false,
			"date": "2011-12-16 23:08:11.184059",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 16, 2011 at 3:11 PM, <gri@golang.org> wrote:\n\n> I don't mind the comments but I am not convinced about the Reverse.\n>\n>\n> http://codereview.appspot.com/**5496059/diff/4001/src/pkg/**sort/sort.go<http://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go>\n> File src/pkg/sort/sort.go (right):\n>\n> http://codereview.appspot.com/**5496059/diff/4001/src/pkg/**\n> sort/sort.go#newcode198<http://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go#newcode198>\n> src/pkg/sort/sort.go:198: // IsSorted returns whether data is sorted.\n> IsSorted returns true if data is sorted. (?)\n>\n\nWe've been gradually converging on \"whether\" for bools.  Not if, not iff,\nnot if & only if.  Or, so I thought.\n\n\n> http://codereview.appspot.com/**5496059/diff/4001/src/pkg/**\n> sort/sort.go#newcode257<http://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go#newcode257>\n> src/pkg/sort/sort.go:257: // Reverse sorts data in reverse.\n> I'd rather leave this to the implementer of Less. As is, this is\n> probably quite a bit slower then \"forward\" Sort, which is probably not\n> great.\n>\n\nI don't care about Reverse either, but I'm very confused by this statement.\n How would it be \"quite a bit slower\"?\n",
			"disapproval": false,
			"date": "2011-12-16 23:17:27.741517",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 16, 2011 at 3:17 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> On Fri, Dec 16, 2011 at 3:11 PM, <gri@golang.org> wrote:\n>>\n>> I don't mind the comments but I am not convinced about the Reverse.\n>>\n>>\n>> http://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go\n>> File src/pkg/sort/sort.go (right):\n>>\n>>\n>> http://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go#newcode198\n>> src/pkg/sort/sort.go:198: // IsSorted returns whether data is sorted.\n>> IsSorted returns true if data is sorted. (?)\n>\n>\n> We've been gradually converging on \"whether\" for bools. \u00a0Not if, not iff,\n> not if & only if. \u00a0Or, so I thought.\n\nok\n>\n>>\n>>\n>> http://codereview.appspot.com/5496059/diff/4001/src/pkg/sort/sort.go#newcode257\n>> src/pkg/sort/sort.go:257: // Reverse sorts data in reverse.\n>> I'd rather leave this to the implementer of Less. As is, this is\n>> probably quite a bit slower then \"forward\" Sort, which is probably not\n>> great.\n>\n>\n> I don't care about Reverse either, but I'm very confused by this statement.\n> \u00a0How would it be \"quite a bit slower\"?\n\nThere's an extra indirection (call) for each call to Less. Probably not great.\n",
			"disapproval": false,
			"date": "2011-12-16 23:23:39.104564",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5496059: sort: Reverse and some missing docs",
	"created": "2011-12-16 23:00:52.928095",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-01-19 00:14:02.425666",
	"closed": true,
	"issue": 5496059
}