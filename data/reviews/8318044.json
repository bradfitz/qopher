{
	"description": "net: fix possible runtime.PollDesc leak when connect or listen fails\n\nMakes it possible to return the spent runtime.PollDesc to\nruntime.pollcache descriptor pool when netFD.connect or\nsyscall.Listen fails.\n\nFixes issue 5219.",
	"cc": [
		"dave@cheney.net",
		"bradfitz@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-05 05:38:04.432210",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ouch!\n\nPlease add a test for this. OS tests somehow examine number of open fds, it should now grow after failed connect/listen. Or perhaps do a lots of them and see for ENFILE.",
			"disapproval": false,
			"date": "2013-04-05 16:30:12.887610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this a real leak or would the finalizer eventually get it?\r\n\r\nIt should be fixed in either case, of course, but I'm wondering how\r\ncritical it is for Go1.1.\r\n\r\nMikioh--- please file an issue with more details regardless.\r\n\r\n\r\n\r\nOn Fri, Apr 5, 2013 at 9:30 AM, <dvyukov@google.com> wrote:\r\n\r\n> Ouch!\r\n>\r\n> Please add a test for this. OS tests somehow examine number of open fds,\r\n> it should now grow after failed connect/listen. Or perhaps do a lots of\r\n> them and see for ENFILE.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8318044/<https://codereview.appspot.com/8318044/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-05 23:42:44.639230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8318044/diff/4004/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/4004/src/pkg/net/fd_unix.go#newcode136\nsrc/pkg/net/fd_unix.go:136: func (fd *netFD) close() error {\nWhy can't we use Close() instead of close()?\nAs far as I see it would do the same.",
			"disapproval": false,
			"date": "2013-04-05 16:30:19.210620",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Filed https://code.google.com/p/go/issues/detail?id=5219\nPlease add \"Fixes issue 5219\".",
			"disapproval": false,
			"date": "2013-04-05 16:32:51.005870",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Mikio,\r\n\r\nI've been trying to to review this CL but am concerned over the\r\nexplosion of things to close and the number of the ways they are\r\nclosed. Can the close sequence be,\r\n\r\n1, documented in a comment (possibly in fd_{unix,windows}.go#Close())\r\n2, converged towards a single code path.\r\n\r\nI think the outliers are the close paths on the variuos Listen\r\nmethods. Right now I am leaning towards a comment block and en\r\nexplicit invocation of all the parts, ie fd.pd.Evict(), fd.pd.close(),\r\netc.\r\n\r\nOn Sat, Apr 6, 2013 at 3:32 AM,  <dvyukov@google.com> wrote:\r\n> Filed https://code.google.com/p/go/issues/detail?id=5219\r\n> Please add \"Fixes issue 5219\".\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/8318044/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-05 22:24:28.975560",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8318044/diff/4004/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/4004/src/pkg/net/fd_unix.go#newcode136\nsrc/pkg/net/fd_unix.go:136: func (fd *netFD) close() error {\nOn 2013/04/05 16:30:19, dvyukov wrote:\n> Why can't we use Close() instead of close()?\n> As far as I see it would do the same.\n\nI just don't want to break R\u00e9my's changeset: 15019:6ec24fe2e501.",
			"disapproval": false,
			"date": "2013-04-06 07:42:12.853090",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/05 22:24:28, dfc wrote:\n\n> 1, documented in a comment (possibly in fd_{unix,windows}.go#Close())\n\nWill add a bit.\n\n> 2, converged towards a single code path.\n\nIf once we land on the concrete poller stuff, but not now.",
			"disapproval": false,
			"date": "2013-04-06 07:53:54.070430",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/05 23:42:44, bradfitz wrote:\n\n> Is this a real leak or would the finalizer eventually get it?\n\nPerhaps it's a real, I guess. netFD.setAddr sets up finalizer but this \nhappens btw newFD and netFD.setAddr.\n\n> It should be fixed in either case, of course, but I'm wondering how\n> critical it is for Go1.1.",
			"disapproval": false,
			"date": "2013-04-06 08:08:51.941910",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/05 16:30:12, dvyukov wrote:\n\n> Please add a test for this. OS tests somehow examine number of open fds, it\n> should now grow after failed connect/listen. Or perhaps do a lots of them and\n> see for ENFILE.\n\nyup.",
			"disapproval": false,
			"date": "2013-04-06 08:11:32.231840",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-06 10:41:21.721970",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> Please add a test for this. OS tests somehow examine number of open fds, it\r\n>> should now grow after failed connect/listen. Or perhaps do a lots of them and\r\n>> see for ENFILE.\r\n>\r\n> yup.\r\n\r\nsorry i misunderstood. the problem is not a file descriptor leak,\r\nit's a simple memory leak. do you need a test for it? it might be\r\na long-run test.\r\n",
			"disapproval": false,
			"date": "2013-04-06 10:49:03.238340",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Surely you can count something and see it rising or not rising in a test?\r\n\r\nAnyway, leaving for Dmitry and Dave.\r\n\r\n\r\nOn Sat, Apr 6, 2013 at 3:49 AM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> >> Please add a test for this. OS tests somehow examine number of open\r\n> fds, it\r\n> >> should now grow after failed connect/listen. Or perhaps do a lots of\r\n> them and\r\n> >> see for ENFILE.\r\n> >\r\n> > yup.\r\n>\r\n> sorry i misunderstood. the problem is not a file descriptor leak,\r\n> it's a simple memory leak. do you need a test for it? it might be\r\n> a long-run test.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-06 19:33:34.355020",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8318044/diff/19001/src/pkg/net/fd_windows.go\nFile src/pkg/net/fd_windows.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/19001/src/pkg/net/fd_windows.go#newcode436\nsrc/pkg/net/fd_windows.go:436: // integrated poll descriptor.\nExplain that \"and an associated runtime integrated poll descriptor\" is a no-op, because the integrated poll is not yet implemented on windows.\nOtherwise it's confusing.\n\nhttps://codereview.appspot.com/8318044/diff/19001/src/pkg/net/sock_posix.go\nFile src/pkg/net/sock_posix.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/19001/src/pkg/net/sock_posix.go#newcode61\nsrc/pkg/net/sock_posix.go:61: fd.closeSocket()\nWhy do you use closeSocket() here and Close() in listen?\nDon't they do the same thing?",
			"disapproval": false,
			"date": "2013-04-07 04:27:38.954480",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8318044/diff/19001/src/pkg/net/fd_windows.go\nFile src/pkg/net/fd_windows.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/19001/src/pkg/net/fd_windows.go#newcode436\nsrc/pkg/net/fd_windows.go:436: // integrated poll descriptor.\nOn 2013/04/07 04:27:39, dvyukov wrote:\n> Explain that \"and an associated runtime integrated poll descriptor\" is a no-op,\n> because the integrated poll is not yet implemented on windows.\n> Otherwise it's confusing.\n\nDone.\n\nhttps://codereview.appspot.com/8318044/diff/19001/src/pkg/net/sock_posix.go\nFile src/pkg/net/sock_posix.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/19001/src/pkg/net/sock_posix.go#newcode61\nsrc/pkg/net/sock_posix.go:61: fd.closeSocket()\nOn 2013/04/07 04:27:39, dvyukov wrote:\n> Why do you use closeSocket() here and Close() in listen?\n> Don't they do the same thing?\n\nNope, closeSocket is just a closer for a larval phase netFD\nbefore finalizer is settled, and Close is for a hatched one.",
			"disapproval": false,
			"date": "2013-04-07 15:10:26.634960",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-07 15:10:58.682700",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/07 15:10:26, mikio wrote:\n> https://codereview.appspot.com/8318044/diff/19001/src/pkg/net/sock_posix.go#newcode61\n> src/pkg/net/sock_posix.go:61: fd.closeSocket()\n> On 2013/04/07 04:27:39, dvyukov wrote:\n> > Why do you use closeSocket() here and Close() in listen?\n> > Don't they do the same thing?\n> \n> Nope, closeSocket is just a closer for a larval phase netFD\n> before finalizer is settled, and Close is for a hatched one.\n\n\nBut the net effect is the same, right?\nI would use the following invariant: if newFD() returns a non-nil netFD, it always must be closed with Close(). netFD implementation can handle own phases (if any) internally.\n\n\nThis also brings another question: now netFD contains another non-managed resource (runtime PollDesc). Do we want to set finalizers for netFD to release them? What is the practice of using os.File/net.Conn w/o closing them? I would expect it to broke sooner or later anyway. Sooner is better.",
			"disapproval": false,
			"date": "2013-04-07 22:01:04.441140",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n(and a bit late to say, but thanks for fixing runtime stuff!)\n\n> But the net effect is the same, right?\n> I would use the following invariant: if newFD() returns a non-nil netFD, it\n> always must be closed with Close(). netFD implementation can handle own phases\n> (if any) internally.\n\nThat is Dave mentioned previously and I said not now because anyway\nwe have to tweak such code paths for implementing new poller to BSD\nvariants in Go 1.2 development. But both of you say so, okay, I changed\nmy mind, will do so.\n\n> This also brings another question: now netFD contains another non-managed\n> resource (runtime PollDesc). Do we want to set finalizers for netFD to release\n> them? What is the practice of using os.File/net.Conn w/o closing them? I would\n> expect it to broke sooner or later anyway. Sooner is better.\n\nFinalizer is good as a side bet (an insurance) and providing explicit closer is\nalso nice. What's the matter? Are you suggesting that eventually we should\ntake Finalizer out of netFD?",
			"disapproval": false,
			"date": "2013-04-08 05:00:22.909200",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How critical is it that this gets into the 1.1 release? And how risky is its inclusion?\n\nI want to issue a 1.1 release candidate in the next couple of days.",
			"disapproval": false,
			"date": "2013-04-08 06:43:42.145830",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As a followup, prior to this CL, this short program would leak memory at a frightening rate\n\npackage main\n\nimport (\n        \"net\"\n)\n\nfunc main() {\n        for i := 0; ; i++ {\n                conn, err := net.Dial(\"tcp\", \"localhost:1\")\n                if err != nil {\n                        continue\n                }\n                conn.Close()\n        }\n}",
			"disapproval": false,
			"date": "2013-04-08 07:44:30.601040",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we are arguing about style, not substance. Please allow me to\r\nreview this CL again tonight, I believe it is important enough to\r\nwarrant inclusion for the release candidate.\r\n\r\nOn Mon, Apr 8, 2013 at 4:43 PM,  <adg@golang.org> wrote:\r\n> How critical is it that this gets into the 1.1 release? And how risky is\r\n> its inclusion?\r\n>\r\n> I want to issue a 1.1 release candidate in the next couple of days.\r\n>\r\n> https://codereview.appspot.com/8318044/\r\n",
			"disapproval": false,
			"date": "2013-04-08 06:44:41.894750",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you, sorry this took so long.\n\nAfter 1.1 ships, I'd like to see the shared responsibility for the underlying fd that is currently split between fd.sysfd and fd.sysfile revisited.\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_unix.go#newcode121\nsrc/pkg/net/fd_unix.go:121: // (and there are no references left.)\nplease revert this documentation change, just close the bracket on the second line.\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_unix.go#newcode125\nsrc/pkg/net/fd_unix.go:125: if fd.closing && fd.sysref == 0 {\nin the previous version fd.sysfile != nil was the final assertion that prevented the closing behavior from firing twice. Now we have falled back to fd.sysref == 0, which I think is safe, but makes me feel a little uncomfortable.\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_unix.go#newcode132\nsrc/pkg/net/fd_unix.go:132: } else {\ncould you please add a comment explaining why fd.sysfile is nil, something like\n\n// fd.sysfile can be nil if fd.Close() was called from socket() before\n// the socket was fully created.\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_windows.go\nFile src/pkg/net/fd_windows.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_windows.go#newcode418\nsrc/pkg/net/fd_windows.go:418: // (and there are no references left.)\nditto",
			"disapproval": false,
			"date": "2013-04-08 07:19:28.908910",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 7, 2013 at 11:43 PM, <adg@golang.org> wrote:\r\n\r\n> How critical is it that this gets into the 1.1 release?\r\n\r\n\r\nI think it is. Because failed TCP connect leaks memory. Some servers will\r\ncrash periodically.\r\n\r\n\r\n\r\n\r\n> And how risky is\r\n> its inclusion?\r\n>\r\n> I want to issue a 1.1 release candidate in the next couple of days.\r\n>\r\n> https://codereview.appspot.**com/8318044/<https://codereview.appspot.com/8318044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-08 15:06:27.287820",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Then there's our test.\r\n\r\nI thought a test would be difficult?\r\n On Apr 8, 2013 12:44 AM, <dave@cheney.net> wrote:\r\n\r\n> As a followup, prior to this CL, this short program would leak memory at\r\n> a frightening rate\r\n>\r\n> package main\r\n>\r\n> import (\r\n>         \"net\"\r\n> )\r\n>\r\n> func main() {\r\n>         for i := 0; ; i++ {\r\n>                 conn, err := net.Dial(\"tcp\", \"localhost:1\")\r\n>                 if err != nil {\r\n>                         continue\r\n>                 }\r\n>                 conn.Close()\r\n>         }\r\n> }\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/8318044/<https://codereview.appspot.com/8318044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-08 16:30:10.986610",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it is difficult to observe the leak inside a Go program as the\r\nruntime.PollDesc allocations do not go through mallogc (Dmitry, is\r\nthis correct?). For example, compare the output of running this\r\nprogram in GOGCTRACE=1 to the output of top.\r\n\r\nOn Tue, Apr 9, 2013 at 2:30 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Then there's our test.\r\n>\r\n> I thought a test would be difficult?\r\n>\r\n> On Apr 8, 2013 12:44 AM, <dave@cheney.net> wrote:\r\n>>\r\n>> As a followup, prior to this CL, this short program would leak memory at\r\n>> a frightening rate\r\n>>\r\n>> package main\r\n>>\r\n>> import (\r\n>>         \"net\"\r\n>> )\r\n>>\r\n>> func main() {\r\n>>         for i := 0; ; i++ {\r\n>>                 conn, err := net.Dial(\"tcp\", \"localhost:1\")\r\n>>                 if err != nil {\r\n>>                         continue\r\n>>                 }\r\n>>                 conn.Close()\r\n>>         }\r\n>> }\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/8318044/\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 00:07:24.330000",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's always syscall.Getrusage like I did in test/mapnan.go\r\n\r\n\r\nOn Mon, Apr 8, 2013 at 5:07 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I think it is difficult to observe the leak inside a Go program as the\r\n> runtime.PollDesc allocations do not go through mallogc (Dmitry, is\r\n> this correct?). For example, compare the output of running this\r\n> program in GOGCTRACE=1 to the output of top.\r\n>\r\n> On Tue, Apr 9, 2013 at 2:30 AM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n> > Then there's our test.\r\n> >\r\n> > I thought a test would be difficult?\r\n> >\r\n> > On Apr 8, 2013 12:44 AM, <dave@cheney.net> wrote:\r\n> >>\r\n> >> As a followup, prior to this CL, this short program would leak memory at\r\n> >> a frightening rate\r\n> >>\r\n> >> package main\r\n> >>\r\n> >> import (\r\n> >>         \"net\"\r\n> >> )\r\n> >>\r\n> >> func main() {\r\n> >>         for i := 0; ; i++ {\r\n> >>                 conn, err := net.Dial(\"tcp\", \"localhost:1\")\r\n> >>                 if err != nil {\r\n> >>                         continue\r\n> >>                 }\r\n> >>                 conn.Close()\r\n> >>         }\r\n> >> }\r\n> >>\r\n> >>\r\n> >>\r\n> >> https://codereview.appspot.com/8318044/\r\n> >\r\n> > --\r\n> >\r\n> > ---\r\n> > You received this message because you are subscribed to the Google Groups\r\n> > \"golang-dev\" group.\r\n> > To unsubscribe from this group and stop receiving emails from it, send an\r\n> > email to golang-dev+unsubscribe@googlegroups.com.\r\n> > For more options, visit https://groups.google.com/groups/opt_out.\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 00:15:39.251520",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 8, 2013 at 5:07 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> I think it is difficult to observe the leak inside a Go program as the\r\n> runtime.PollDesc allocations do not go through mallogc (Dmitry, is\r\n> this correct?). For example, compare the output of running this\r\n> program in GOGCTRACE=1 to the output of top.\r\n\r\n\r\nYes, that's correct.\r\nBut I think it should be accounted in MemStats in Sys/SysOther.\r\n\r\n\r\n> On Tue, Apr 9, 2013 at 2:30 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>> Then there's our test.\r\n>>\r\n>> I thought a test would be difficult?\r\n>>\r\n>> On Apr 8, 2013 12:44 AM, <dave@cheney.net> wrote:\r\n>>>\r\n>>> As a followup, prior to this CL, this short program would leak memory at\r\n>>> a frightening rate\r\n>>>\r\n>>> package main\r\n>>>\r\n>>> import (\r\n>>>         \"net\"\r\n>>> )\r\n>>>\r\n>>> func main() {\r\n>>>         for i := 0; ; i++ {\r\n>>>                 conn, err := net.Dial(\"tcp\", \"localhost:1\")\r\n>>>                 if err != nil {\r\n>>>                         continue\r\n>>>                 }\r\n>>>                 conn.Close()\r\n>>>         }\r\n>>> }\r\n>>>\r\n>>>\r\n>>>\r\n>>> https://codereview.appspot.com/8318044/\r\n>>\r\n>> --\r\n>>\r\n>> ---\r\n>> You received this message because you are subscribed to the Google Groups\r\n>> \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-04-09 00:24:50.682970",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is my attempt at a test, \n\nhttps://codereview.appspot.com/8547043\n\nIt detects the leak on my system but I am not sure how stable it will be across all the platforms we support.",
			"disapproval": false,
			"date": "2013-04-09 00:55:51.419040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nUpdate CL description to say the word \"Issue\" before the number (\"Update\r\nIssue\r\nnnnnn\") and then add a t.Skip line at the top.  The fix commit later can\r\nremove\r\nthe line.\r\n\r\n\r\n\r\nOn Mon, Apr 8, 2013 at 5:55 PM, <dave@cheney.net> wrote:\r\n\r\n> Here is my attempt at a test,\r\n>\r\n> https://codereview.appspot.**com/8547043<https://codereview.appspot.com/8547043>\r\n>\r\n> It detects the leak on my system but I am not sure how stable it will be\r\n> across all the platforms we support.\r\n>\r\n> https://codereview.appspot.**com/8318044/<https://codereview.appspot.com/8318044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 01:03:28.057760",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM for Dave's test, that is.\r\n\r\n\r\n\r\nOn Mon, Apr 8, 2013 at 6:03 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> LGTM\r\n>\r\n> Update CL description to say the word \"Issue\" before the number (\"Update\r\n> Issue\r\n> nnnnn\") and then add a t.Skip line at the top.  The fix commit later can\r\n> remove\r\n> the line.\r\n>\r\n>\r\n>\r\n> On Mon, Apr 8, 2013 at 5:55 PM, <dave@cheney.net> wrote:\r\n>\r\n>> Here is my attempt at a test,\r\n>>\r\n>> https://codereview.appspot.**com/8547043<https://codereview.appspot.com/8547043>\r\n>>\r\n>> It detects the leak on my system but I am not sure how stable it will be\r\n>> across all the platforms we support.\r\n>>\r\n>> https://codereview.appspot.**com/8318044/<https://codereview.appspot.com/8318044/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 01:03:50.186640",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c40f15e9e5ca ***\n\nnet: fix possible runtime.PollDesc leak when connect or listen fails\n\nMakes it possible to return the spent runtime.PollDesc to\nruntime.pollcache descriptor pool when netFD.connect or\nsyscall.Listen fails.\n\nFixes issue 5219.\n\nR=dvyukov, dave, bradfitz, adg\nCC=golang-dev\nhttps://codereview.appspot.com/8318044",
			"disapproval": false,
			"date": "2013-04-09 03:42:06.688700",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThank you for adding a new test, Dave. But it doesn't work well\non my freebsd/386 vm sometimes, so I simplified it a bit.\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_unix.go#newcode121\nsrc/pkg/net/fd_unix.go:121: // (and there are no references left.)\nOn 2013/04/08 07:19:29, dfc wrote:\n> please revert this documentation change, just close the bracket on the second\n> line.\n\ni'll leave it to you.\nfeel free to send a cl at the appropriate time, thx.\n\nhttps://codereview.appspot.com/8318044/diff/36001/src/pkg/net/fd_unix.go#newcode132\nsrc/pkg/net/fd_unix.go:132: } else {\nOn 2013/04/08 07:19:29, dfc wrote:\n> could you please add a comment explaining why fd.sysfile is nil, something like\n> \n> // fd.sysfile can be nil if fd.Close() was called from socket() before\n> // the socket was fully created.\n\nthanks but no thanks.\nit's obvious that that's a chicken or egg test.",
			"disapproval": false,
			"date": "2013-04-09 02:06:33.991430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> i'll leave it to you.\n> feel free to send a cl at the appropriate time, thx.\n\nWill do.\n\n> thanks but no thanks.\n> it's obvious that that's a chicken or egg test.\n\nSGTM. I'd like to see the close logic overhauled as part of the 1.2 development cycle.",
			"disapproval": false,
			"date": "2013-04-09 02:11:09.467950",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go\nFile src/pkg/net/dial_test.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode344\nsrc/pkg/net/dial_test.go:344: const attempts = 60000 // poll descriptor pool grows linearly, so we need enough attempts to identfy memory leak\nidentify\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode346\nsrc/pkg/net/dial_test.go:346: c, err := (&Dialer{Timeout: time.Nanosecond}).Dial(\"tcp\", \"127.0.0.1:1\")\njust make the dialer once above the loop and re-use it.\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode357\nsrc/pkg/net/dial_test.go:357: case r < 1.3:\npretty arbitrary?\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode358\nsrc/pkg/net/dial_test.go:358: t.Logf(\"pretty moderate: %v\", r)\ndelete. weird message.",
			"disapproval": false,
			"date": "2013-04-09 02:11:25.585030",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you for making my test more robust -- leaving for bradfitz.\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go\nFile src/pkg/net/dial_test.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode346\nsrc/pkg/net/dial_test.go:346: c, err := (&Dialer{Timeout: time.Nanosecond}).Dial(\"tcp\", \"127.0.0.1:1\")\nI think this is overkill, nothing is listening on 127.0.0.1:1",
			"disapproval": false,
			"date": "2013-04-09 02:17:30.190610",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go\nFile src/pkg/net/dial_test.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode344\nsrc/pkg/net/dial_test.go:344: const attempts = 60000 // poll descriptor pool grows linearly, so we need enough attempts to identfy memory leak\nOn 2013/04/09 02:11:25, bradfitz wrote:\n> identify\n\nDone.\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode346\nsrc/pkg/net/dial_test.go:346: c, err := (&Dialer{Timeout: time.Nanosecond}).Dial(\"tcp\", \"127.0.0.1:1\")\nOn 2013/04/09 02:11:25, bradfitz wrote:\n> just make the dialer once above the loop and re-use it.\n\nDone.\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode357\nsrc/pkg/net/dial_test.go:357: case r < 1.3:\nOn 2013/04/09 02:11:25, bradfitz wrote:\n> pretty arbitrary?\n\nnot precisely, but comes from measured values on a few \nplatforms. alos when leak happens, the value would be \ngreater than 3.x.\n\nhttps://codereview.appspot.com/8318044/diff/53001/src/pkg/net/dial_test.go#newcode358\nsrc/pkg/net/dial_test.go:358: t.Logf(\"pretty moderate: %v\", r)\nOn 2013/04/09 02:11:25, bradfitz wrote:\n> delete. weird message.\n\nDone.",
			"disapproval": false,
			"date": "2013-04-09 02:26:43.397290",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-09 02:27:15.261410",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sorry, my test (or perhaps my vm) is still broken, can not get\r\nconsistent results.\r\nso i'll go with Dave's test for Go 1.1 and will add\r\nruntime_PollerStats or similars\r\nto collect poller's memory allocation. thanks.\r\n\r\n\r\nOn Tue, Apr 9, 2013 at 11:27 AM,  <mikioh.mikioh@gmail.com> wrote:\r\n> Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org,\r\n> adg@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.com/8318044/\r\n",
			"disapproval": false,
			"date": "2013-04-09 03:25:26.792220",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. Maybe only run the test on platforms that have the new poller ?\r\n\r\nOn Tue, Apr 9, 2013 at 1:25 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> sorry, my test (or perhaps my vm) is still broken, can not get\r\n> consistent results.\r\n> so i'll go with Dave's test for Go 1.1 and will add\r\n> runtime_PollerStats or similars\r\n> to collect poller's memory allocation. thanks.\r\n>\r\n>\r\n> On Tue, Apr 9, 2013 at 11:27 AM,  <mikioh.mikioh@gmail.com> wrote:\r\n>> Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org,\r\n>> adg@golang.org (cc: golang-dev@googlegroups.com),\r\n>>\r\n>>\r\n>> Please take another look.\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/8318044/\r\n",
			"disapproval": false,
			"date": "2013-04-09 03:29:33.492180",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Or just on Linux.\r\n\r\nFor lots of tests like this just catching a rare regression, having any\r\nbuilder fail (especially a popular one like darwin or linux) is sufficient.\r\n I'd rather have reliable OS-specific tests than flaky tests.\r\n\r\n\r\n\r\nOn Mon, Apr 8, 2013 at 8:29 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> SGTM. Maybe only run the test on platforms that have the new poller ?\r\n>\r\n> On Tue, Apr 9, 2013 at 1:25 PM, Mikio Hara <mikioh.mikioh@gmail.com>\r\n> wrote:\r\n> > sorry, my test (or perhaps my vm) is still broken, can not get\r\n> > consistent results.\r\n> > so i'll go with Dave's test for Go 1.1 and will add\r\n> > runtime_PollerStats or similars\r\n> > to collect poller's memory allocation. thanks.\r\n> >\r\n> >\r\n> > On Tue, Apr 9, 2013 at 11:27 AM,  <mikioh.mikioh@gmail.com> wrote:\r\n> >> Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org,\r\n> >> adg@golang.org (cc: golang-dev@googlegroups.com),\r\n> >>\r\n> >>\r\n> >> Please take another look.\r\n> >>\r\n> >>\r\n> >> https://codereview.appspot.com/8318044/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 03:32:00.863860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Even better, make it so.\r\n\r\nOn Tue, Apr 9, 2013 at 1:31 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Or just on Linux.\r\n>\r\n> For lots of tests like this just catching a rare regression, having any\r\n> builder fail (especially a popular one like darwin or linux) is sufficient.\r\n> I'd rather have reliable OS-specific tests than flaky tests.\r\n>\r\n>\r\n>\r\n> On Mon, Apr 8, 2013 at 8:29 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> SGTM. Maybe only run the test on platforms that have the new poller ?\r\n>>\r\n>> On Tue, Apr 9, 2013 at 1:25 PM, Mikio Hara <mikioh.mikioh@gmail.com>\r\n>> wrote:\r\n>> > sorry, my test (or perhaps my vm) is still broken, can not get\r\n>> > consistent results.\r\n>> > so i'll go with Dave's test for Go 1.1 and will add\r\n>> > runtime_PollerStats or similars\r\n>> > to collect poller's memory allocation. thanks.\r\n>> >\r\n>> >\r\n>> > On Tue, Apr 9, 2013 at 11:27 AM,  <mikioh.mikioh@gmail.com> wrote:\r\n>> >> Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org,\r\n>> >> adg@golang.org (cc: golang-dev@googlegroups.com),\r\n>> >>\r\n>> >>\r\n>> >> Please take another look.\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/8318044/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 03:35:19.011230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-09 04:03:47.274850",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 9, 2013 at 12:29 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> SGTM. Maybe only run the test on platforms that have the new poller ?\r\n\r\nNot sure. Just 1hr ago it worked on both amd64 and 386 but right now\r\nit fails on 386. Probably we have an another issue on 386 platform.\r\n",
			"disapproval": false,
			"date": "2013-04-09 03:39:33.632850",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "yup, will do so in go 1.2.\r\n\r\nOn Tue, Apr 9, 2013 at 12:31 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Or just on Linux.\r\n>\r\n> For lots of tests like this just catching a rare regression, having any\r\n> builder fail (especially a popular one like darwin or linux) is sufficient.\r\n> I'd rather have reliable OS-specific tests than flaky tests.\r\n>\r\n>\r\n>\r\n> On Mon, Apr 8, 2013 at 8:29 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> SGTM. Maybe only run the test on platforms that have the new poller ?\r\n>>\r\n>> On Tue, Apr 9, 2013 at 1:25 PM, Mikio Hara <mikioh.mikioh@gmail.com>\r\n>> wrote:\r\n>> > sorry, my test (or perhaps my vm) is still broken, can not get\r\n>> > consistent results.\r\n>> > so i'll go with Dave's test for Go 1.1 and will add\r\n>> > runtime_PollerStats or similars\r\n>> > to collect poller's memory allocation. thanks.\r\n>> >\r\n>> >\r\n>> > On Tue, Apr 9, 2013 at 11:27 AM,  <mikioh.mikioh@gmail.com> wrote:\r\n>> >> Hello dvyukov@google.com, dave@cheney.net, bradfitz@golang.org,\r\n>> >> adg@golang.org (cc: golang-dev@googlegroups.com),\r\n>> >>\r\n>> >>\r\n>> >> Please take another look.\r\n>> >>\r\n>> >>\r\n>> >> https://codereview.appspot.com/8318044/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-09 03:40:20.743590",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8318044/diff/55006/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/8318044/diff/55006/src/pkg/net/fd_unix.go#newcode128\nsrc/pkg/net/fd_unix.go:128: fd.pd.Close()\nThis can not be called twice, right?",
			"disapproval": false,
			"date": "2013-04-09 04:07:47.744210",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 9, 2013 at 1:07 PM,  <dvyukov@google.com> wrote:\r\n\r\n> src/pkg/net/fd_unix.go:128: fd.pd.Close()\r\n> This can not be called twice, right?\r\n\r\nRight. A combo of sysref and closing protects it.\r\n",
			"disapproval": false,
			"date": "2013-04-09 04:36:29.999720",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 8318044: net: fix possible runtime.PollDesc leak when connect or...",
	"created": "2013-04-05 05:36:29.615370",
	"patchsets": [
		1,
		2001,
		5001,
		4004,
		19001,
		28001,
		36001,
		53001,
		62001,
		55006
	],
	"modified": "2013-04-09 04:36:29.999720",
	"closed": true,
	"issue": 8318044
}