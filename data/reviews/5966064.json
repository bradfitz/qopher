{
	"description": "exp/locale/collate: added trie for associating colElems to runes.\nThe trie code looks a lot like the trie in exp/norm. It uses different\ntypes, however.  Also, there is only a lookup for []byte and the unsafe\nlookup methods have been dropped, as well as sparse mode.\nThere is now a method for generating a trie. To output Go code, one now needs\nto first generate a trie and then call print() on it.",
	"cc": [
		"r@google.com",
		"r@golang.org",
		"mpvl@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-04-02 16:34:34.059989",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "some of the comments from the contraction CL will apply here.\n\ncan you give a guide to how to approach these CLs? i'm missing the big picture.",
			"disapproval": false,
			"date": "2012-04-10 06:38:57.545947",
			"approval": false
		},
		{
			"sender": "mpvl@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 10, 2012 at 8:38 AM, <r@golang.org> wrote:\n>\n> can you give a guide to how to approach these CLs? i'm missing the big\n> picture.\n>\nI wanted to 1) break up CLs so that it was not one big CL and 2) check them\nin in an order such that the code compiles at all time.  The missing pieces\nare:\n\n   - a table type, that pieces together the various tries and allows\n   writing the table to a Go compilable file.\n   - a Collator type that provides the API and uses the table.\n   - a Builder for generating tables/Collator.\n   - a maketables tool that uses Builder to generate a table.\n\nCL http://codereview.appspot.com/5999053 includes a lot of the relevant\ncontext. I did not include the code itself in this CL, just the skeleton.\n\nType table is the glue between the public API and the lower-level types of\nthe other CLs.  To provide some more context, a lookup for collation data\nproceeds as follows:\n\n   1. Look up the colelem for the next rune in the input string.\n   2. The result can either be a single collation element, an expansion,\n   contraction, or a decomposition.\n   3. If the colelem indicates the rune can be the start of a contraction,\n   fetch the contraction trie and find the longest matching contraction.  The\n   resulting is either a single colElem or an expansion.\n   4. If the lookup indicates the rune should be decomposed, use NFKC\n   decomposition and compute the colElems for the resulting runes.\n   5. Return the collation elements for the single collation element,\n   expansion, or matched contraction.\n\nThe obtained weights can either be used to compare directly or be converted\nto a comparison key.  The latter is faster in case of repeated compares,\nsuch as with sorting.\n\nHope this helps,\n\nMarcel\n\n\n-- \nTrying this for a while: http://go/OnlyCheckEmailTwiceADay.\nMarcel van Lohuizen -- Google Switzerland GmbH -- Identifikationsnummer:\nCH-020.4.028.116-1\n",
			"disapproval": false,
			"date": "2012-04-11 17:06:25.069232",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 12/04/2012, at 3:06 AM, Marcel van Lohuizen wrote:\n\n> \n> \n> On Tue, Apr 10, 2012 at 8:38 AM, <r@golang.org> wrote:\n> can you give a guide to how to approach these CLs? i'm missing the big\n> picture.\n> I wanted to 1) break up CLs so that it was not one big CL and 2) check them in in an order such that the code compiles at all time.  The missing pieces are:\n> a table type, that pieces together the various tries and allows writing the table to a Go compilable file.\nthis is part of what confused me. seeing code to print source to the output inside the package made it unclear to me what goes into the package clients use and what is needed to generate the tables. can the code generator stuff be pulled into separate files at least? (easy to do, and //build tags help you control that.) or perhaps i misunderstand and the collate package is entirely for generation and not part of the client's use.\n> a Collator type that provides the API and uses the table.\n> a Builder for generating tables/Collator.\n> a maketables tool that uses Builder to generate a table. \n> CL http://codereview.appspot.com/5999053 includes a lot of the relevant context. I did not include the code itself in this CL, just the skeleton.\n> \n> Type table is the glue between the public API and the lower-level types of the other CLs.  To provide some more context, a lookup for collation data proceeds as follows:\n> Look up the colelem for the next rune in the input string.\n> The result can either be a single collation element, an expansion, contraction, or a decomposition.\n> If the colelem indicates the rune can be the start of a contraction, fetch the contraction trie and find the longest matching contraction.  The resulting is either a single colElem or an expansion.\n> If the lookup indicates the rune should be decomposed, use NFKC decomposition and compute the colElems for the resulting runes.\n> Return the collation elements for the single collation element, expansion, or matched contraction.\n> The obtained weights can either be used to compare directly or be converted to a comparison key.  The latter is faster in case of repeated compares, such as with sorting.\n> \n> Hope this helps,\n> \n> Marcel\n> \n> \n> -- \n> Trying this for a while: http://go/OnlyCheckEmailTwiceADay.\n> Marcel van Lohuizen -- Google Switzerland GmbH -- Identifikationsnummer: CH-020.4.028.116-1\n> \n> \n\n",
			"disapproval": false,
			"date": "2012-04-11 23:18:53.989245",
			"approval": false
		},
		{
			"sender": "mpvl@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 12, 2012 at 1:18 AM, Rob 'Commander' Pike <r@google.com> wrote:\n\n>\n> On 12/04/2012, at 3:06 AM, Marcel van Lohuizen wrote:\n>\n>\n>\n> On Tue, Apr 10, 2012 at 8:38 AM, <r@golang.org> wrote:\n>>\n>> can you give a guide to how to approach these CLs? i'm missing the big\n>> picture.\n>>\n> I wanted to 1) break up CLs so that it was not one big CL and 2) check\n> them in in an order such that the code compiles at all time.  The missing\n> pieces are:\n>\n>    - a table type, that pieces together the various tries and allows\n>    writing the table to a Go compilable file.\n>\n> this is part of what confused me. seeing code to print source to the\n> output inside the package made it unclear to me what goes into the package\n> clients use and what is needed to generate the tables. can the code\n> generator stuff be pulled into separate files at least? (easy to do, and\n> //build tags help you control that.) or perhaps i misunderstand and the\n> collate package is entirely for generation and not part of the client's use.\n>\nThe collate package is both for generation and for client's use.  It makes\nsense to expose table generation in the API. I think your point is that it\ndoesn't make sense to include the printing code in the package as the\ngenerated code could only be included in the collate package itself.  Is\nthat the issue?  That makes sense.  I can factor out the printing code. It\nstill makes sense to include table generation in the package, though.\n Unlike with normalization, there are various collation standards.  Users\nmight want to create a special tailoring of the root table, or load a\ndifferent root table altogether.  They could use Builder to generate these\non the fly.\n\n\n>\n>    - a Collator type that provides the API and uses the table.\n>    - a Builder for generating tables/Collator.\n>    - a maketables tool that uses Builder to generate a table.\n>\n> CL http://codereview.appspot.com/5999053 includes a lot of the relevant\n> context. I did not include the code itself in this CL, just the skeleton.\n>\n> Type table is the glue between the public API and the lower-level types of\n> the other CLs.  To provide some more context, a lookup for collation data\n> proceeds as follows:\n>\n>    1. Look up the colelem for the next rune in the input string.\n>    2. The result can either be a single collation element, an expansion,\n>    contraction, or a decomposition.\n>    3. If the colelem indicates the rune can be the start of a\n>    contraction, fetch the contraction trie and find the longest matching\n>    contraction.  The resulting is either a single colElem or an expansion.\n>    4. If the lookup indicates the rune should be decomposed, use NFKC\n>    decomposition and compute the colElems for the resulting runes.\n>    5. Return the collation elements for the single collation element,\n>    expansion, or matched contraction.\n>\n> The obtained weights can either be used to compare directly or be\n> converted to a comparison key.  The latter is faster in case of repeated\n> compares, such as with sorting.\n>\n> Hope this helps,\n>\n> Marcel\n>\n>\n> --\n> Trying this for a while: http://go/OnlyCheckEmailTwiceADay.\n> Marcel van Lohuizen -- Google Switzerland GmbH -- Identifikationsnummer:\n> CH-020.4.028.116-1\n>\n>\n>\n>\n\n\n-- \nTrying this for a while: http://go/OnlyCheckEmailTwiceADay.\nMarcel van Lohuizen -- Google Switzerland GmbH -- Identifikationsnummer:\nCH-020.4.028.116-1\n",
			"disapproval": false,
			"date": "2012-04-12 09:34:28.369940",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@google.com",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@google.com, r@golang.org, mpvl@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-17 07:45:04.667001",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@google.com",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM as a checkpoint.\nthe CL desc says write but means print.\nnot sure that's a good name either, because it shadows the built-in function, but it'll do until a better idea comes along.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go\nFile src/pkg/exp/locale/collate/build/trie.go (right):\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode6\nsrc/pkg/exp/locale/collate/build/trie.go:6: // in an UTF-8 string to a collation element.\ns/an/a/\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode8\nsrc/pkg/exp/locale/collate/build/trie.go:8: // used to lookup offsets in the index table to be used for the next byte.\ns/lookup/look up/\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode46\nsrc/pkg/exp/locale/collate/build/trie.go:46: log.Fatalf(\"trie:isInternal: node contains both leaf and non-leaf children (%v)\", n)\nin the long run, i doubt we'll be able to have log be a dependency of this package, but it's fine for now.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode92\nsrc/pkg/exp/locale/collate/build/trie.go:92: hasher := crc32.New(crc32.MakeTable(crc32.IEEE))\nthat's unexpected.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode158\nsrc/pkg/exp/locale/collate/build/trie.go:158: // Values for 7-bit ASCII are stored in first two block, followed by nil block.\ns/two block/first of &s/\ns/nil/a nil/\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode189\nsrc/pkg/exp/locale/collate/build/trie.go:189: // print writes a compilable trie to w.  It returns the size of generated structure\ns/generated/the generated/\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode190\nsrc/pkg/exp/locale/collate/build/trie.go:190: // in bytes and the number of characters printed n.\nflip the order of the words in the comment and you can avoid saying 'n'.\nIt returns the number of characters printed and the size of the generated structure in bytes.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode223\nsrc/pkg/exp/locale/collate/build/trie.go:223: p(\"\\n// Block %#x, offset %#x\", i/blockSize, i)\nthe inner pieces should be indented one tab stop. the test goldens will need to be updated too.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/trie_test.go\nFile src/pkg/exp/locale/collate/trie_test.go (right):\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/trie_test.go#newcode79\nsrc/pkg/exp/locale/collate/trie_test.go:79: 0x0140: 0x0000000c, 0x0141: 0x0000000d, 0x0142: 0x0000000e,\ndoes gofmt leave this alone? cool if so.",
			"disapproval": false,
			"date": "2012-04-24 03:38:11.675858",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@google.com",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go\nFile src/pkg/exp/locale/collate/build/trie.go (right):\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode6\nsrc/pkg/exp/locale/collate/build/trie.go:6: // in an UTF-8 string to a collation element.\nOn 2012/04/24 03:38:11, r wrote:\n> s/an/a/\n\nDone.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode8\nsrc/pkg/exp/locale/collate/build/trie.go:8: // used to lookup offsets in the index table to be used for the next byte.\nOn 2012/04/24 03:38:11, r wrote:\n> s/lookup/look up/\n\nDone.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode92\nsrc/pkg/exp/locale/collate/build/trie.go:92: hasher := crc32.New(crc32.MakeTable(crc32.IEEE))\nOn 2012/04/24 03:38:11, r wrote:\n> that's unexpected.\nBecause fnv is more appropriate? Changed. Mindlessly took this over from exp/norm.  Don't remember why I used it there.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode158\nsrc/pkg/exp/locale/collate/build/trie.go:158: // Values for 7-bit ASCII are stored in first two block, followed by nil block.\nOn 2012/04/24 03:38:11, r wrote:\n> s/two block/first of &s/\n> s/nil/a nil/\n\nDone.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode158\nsrc/pkg/exp/locale/collate/build/trie.go:158: // Values for 7-bit ASCII are stored in first two block, followed by nil block.\nOn 2012/04/24 03:38:11, r wrote:\n> s/two block/first of &s/\n> s/nil/a nil/\n\nDone.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode189\nsrc/pkg/exp/locale/collate/build/trie.go:189: // print writes a compilable trie to w.  It returns the size of generated structure\nOn 2012/04/24 03:38:11, r wrote:\n> s/generated/the generated/\n\nDone.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode190\nsrc/pkg/exp/locale/collate/build/trie.go:190: // in bytes and the number of characters printed n.\nOn 2012/04/24 03:38:11, r wrote:\n> flip the order of the words in the comment and you can avoid saying 'n'.\n> It returns the number of characters printed and the size of the generated\n> structure in bytes.\n\nDone.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode190\nsrc/pkg/exp/locale/collate/build/trie.go:190: // in bytes and the number of characters printed n.\nOn 2012/04/24 03:38:11, r wrote:\n> flip the order of the words in the comment and you can avoid saying 'n'.\n> It returns the number of characters printed and the size of the generated\n> structure in bytes.\n\nDone.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/build/trie.go#newcode223\nsrc/pkg/exp/locale/collate/build/trie.go:223: p(\"\\n// Block %#x, offset %#x\", i/blockSize, i)\nOn 2012/04/24 03:38:11, r wrote:\n> the inner pieces should be indented one tab stop. the test goldens will need to\n> be updated too.\nI was relying on using gofmt in the makefile (like in unicode), but this works too. Done.\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/trie_test.go\nFile src/pkg/exp/locale/collate/trie_test.go (right):\n\nhttp://codereview.appspot.com/5966064/diff/21001/src/pkg/exp/locale/collate/trie_test.go#newcode79\nsrc/pkg/exp/locale/collate/trie_test.go:79: 0x0140: 0x0000000c, 0x0141: 0x0000000d, 0x0142: 0x0000000e,\nOn 2012/04/24 03:38:11, r wrote:\n> does gofmt leave this alone? cool if so.\nYes.  hg upload won't let you upload files without running gofmt. :)",
			"disapproval": false,
			"date": "2012-04-24 11:39:37.702636",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@google.com",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7879d542e125 ***\n\nexp/locale/collate: added trie for associating colElems to runes.\nThe trie code looks a lot like the trie in exp/norm. It uses different\ntypes, however.  Also, there is only a lookup for []byte and the unsafe\nlookup methods have been dropped, as well as sparse mode.\nThere is now a method for generating a trie. To output Go code, one now needs\nto first generate a trie and then call print() on it.\n\nR=r, r, mpvl\nCC=golang-dev\nhttp://codereview.appspot.com/5966064",
			"disapproval": false,
			"date": "2012-04-25 11:17:01.301075",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 5966064: exp/locale/collate: added trie for associating colElems...",
	"created": "2012-04-02 16:29:38.996193",
	"patchsets": [
		1,
		3,
		4,
		6001,
		11001,
		13006,
		21001,
		29001,
		31001
	],
	"modified": "2012-04-25 11:17:03.510085",
	"closed": true,
	"issue": 5966064
}