{
	"description": "src/pkg: fixed various typos",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Wed, Mar 20, 2013 at 4:28 PM, <gri@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> src/pkg: fixed various typos\r\n>\r\n> Please review this at https://codereview.appspot.**com/7936043/<https://codereview.appspot.com/7936043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/go/build/build.go\r\n>   M src/pkg/mime/multipart/**multipart.go\r\n>   M src/pkg/net/http/server.go\r\n>   M src/pkg/net/interface_darwin.**go\r\n>   M src/pkg/net/interface_freebsd.**go\r\n>   M src/pkg/net/iprawsock_plan9.go\r\n>   M src/pkg/net/iprawsock_posix.go\r\n>   M src/pkg/net/udpsock_plan9.go\r\n>   M src/pkg/net/udpsock_posix.go\r\n>   M src/pkg/os/file_windows.go\r\n>   M src/pkg/reflect/type.go\r\n>\r\n>\r\n> Index: src/pkg/go/build/build.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/build/build.go\r\n> +++ b/src/pkg/go/build/build.go\r\n> @@ -485,7 +485,7 @@\r\n>                         return p, fmt.Errorf(\"import %q: cannot import\r\n> absolute path\", path)\r\n>                 }\r\n>\r\n> -               // tried records the location of unsucsessful package\r\n> lookups\r\n> +               // tried records the location of unsuccessful package\r\n> lookups\r\n>                 var tried struct {\r\n>                         goroot string\r\n>                         gopath []string\r\n> Index: src/pkg/mime/multipart/**multipart.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/mime/multipart/**multipart.go\r\n> +++ b/src/pkg/mime/multipart/**multipart.go\r\n> @@ -268,7 +268,7 @@\r\n>  }\r\n>\r\n>  // isFinalBoundary returns whether line is the final boundary line\r\n> -// indiciating that all parts are over.\r\n> +// indicating that all parts are over.\r\n>  // It matches `^--boundary--[ \\t]*(\\r\\n)?$`\r\n>  func (mr *Reader) isFinalBoundary(line []byte) bool {\r\n>         if !bytes.HasPrefix(line, mr.dashBoundaryDash) {\r\n> Index: src/pkg/net/http/server.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/server.go\r\n> +++ b/src/pkg/net/http/server.go\r\n> @@ -655,7 +655,7 @@\r\n>  //\r\n>  // Handler starts. No header has been sent. The handler can either\r\n>  // write a header, or just start writing.  Writing before sending a header\r\n> -// sends an implicity empty 200 OK header.\r\n> +// sends an implicitly empty 200 OK header.\r\n>  //\r\n>  // If the handler didn't declare a Content-Length up front, we either\r\n>  // go into chunking mode or, if the handler finishes running before\r\n> Index: src/pkg/net/interface_darwin.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/interface_**darwin.go\r\n> +++ b/src/pkg/net/interface_**darwin.go\r\n> @@ -50,7 +50,7 @@\r\n>                 case *syscall.SockaddrInet6:\r\n>                         ifma := &IPAddr{IP: make(IP, IPv6len)}\r\n>                         copy(ifma.IP, sa.Addr[:])\r\n> -                       // NOTE: KAME based IPv6 protcol stack usually\r\n> embeds\r\n> +                       // NOTE: KAME based IPv6 protocol stack usually\r\n> embeds\r\n>                         // the interface index in the interface-local or\r\n> link-\r\n>                         // local address as the kernel-internal form.\r\n>                         if ifma.IP.**IsInterfaceLocalMulticast() ||\r\n> ifma.IP.IsLinkLocalMulticast() {\r\n> Index: src/pkg/net/interface_freebsd.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/interface_**freebsd.go\r\n> +++ b/src/pkg/net/interface_**freebsd.go\r\n> @@ -50,7 +50,7 @@\r\n>                 case *syscall.SockaddrInet6:\r\n>                         ifma := &IPAddr{IP: make(IP, IPv6len)}\r\n>                         copy(ifma.IP, sa.Addr[:])\r\n> -                       // NOTE: KAME based IPv6 protcol stack usually\r\n> embeds\r\n> +                       // NOTE: KAME based IPv6 protocol stack usually\r\n> embeds\r\n>                         // the interface index in the interface-local or\r\n> link-\r\n>                         // local address as the kernel-internal form.\r\n>                         if ifma.IP.**IsInterfaceLocalMulticast() ||\r\n> ifma.IP.IsLinkLocalMulticast() {\r\n> Index: src/pkg/net/iprawsock_plan9.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/iprawsock_plan9.**go\r\n> +++ b/src/pkg/net/iprawsock_plan9.**go\r\n> @@ -34,7 +34,7 @@\r\n>  }\r\n>\r\n>  // ReadMsgIP reads a packet from c, copying the payload into b and the\r\n> -// associdated out-of-band data into oob.  It returns the number of\r\n> +// associated out-of-band data into oob.  It returns the number of\r\n>  // bytes copied into b, the number of bytes copied into oob, the flags\r\n>  // that were set on the packet and the source address of the packet.\r\n>  func (c *IPConn) ReadMsgIP(b, oob []byte) (n, oobn, flags int, addr\r\n> *IPAddr, err error) {\r\n> Index: src/pkg/net/iprawsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/iprawsock_posix.**go\r\n> +++ b/src/pkg/net/iprawsock_posix.**go\r\n> @@ -98,7 +98,7 @@\r\n>  }\r\n>\r\n>  // ReadMsgIP reads a packet from c, copying the payload into b and the\r\n> -// associdated out-of-band data into oob.  It returns the number of\r\n> +// associated out-of-band data into oob.  It returns the number of\r\n>  // bytes copied into b, the number of bytes copied into oob, the flags\r\n>  // that were set on the packet and the source address of the packet.\r\n>  func (c *IPConn) ReadMsgIP(b, oob []byte) (n, oobn, flags int, addr\r\n> *IPAddr, err error) {\r\n> Index: src/pkg/net/udpsock_plan9.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/udpsock_plan9.go\r\n> +++ b/src/pkg/net/udpsock_plan9.go\r\n> @@ -58,7 +58,7 @@\r\n>  }\r\n>\r\n>  // ReadMsgUDP reads a packet from c, copying the payload into b and\r\n> -// the associdated out-of-band data into oob.  It returns the number\r\n> +// the associated out-of-band data into oob.  It returns the number\r\n>  // of bytes copied into b, the number of bytes copied into oob, the\r\n>  // flags that were set on the packet and the source address of the\r\n>  // packet.\r\n> Index: src/pkg/net/udpsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/udpsock_posix.go\r\n> +++ b/src/pkg/net/udpsock_posix.go\r\n> @@ -89,7 +89,7 @@\r\n>  }\r\n>\r\n>  // ReadMsgUDP reads a packet from c, copying the payload into b and\r\n> -// the associdated out-of-band data into oob.  It returns the number\r\n> +// the associated out-of-band data into oob.  It returns the number\r\n>  // of bytes copied into b, the number of bytes copied into oob, the\r\n>  // flags that were set on the packet and the source address of the\r\n>  // packet.\r\n> Index: src/pkg/os/file_windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/os/file_windows.go\r\n> +++ b/src/pkg/os/file_windows.go\r\n> @@ -243,7 +243,7 @@\r\n>         return fi, nil\r\n>  }\r\n>\r\n> -// readConsole reads utf16 charcters from console File,\r\n> +// readConsole reads utf16 characters from console File,\r\n>  // encodes them into utf8 and stores them in buffer b.\r\n>  // It returns the number of utf8 bytes read and an error, if any.\r\n>  func (f *File) readConsole(b []byte) (n int, err error) {\r\n> Index: src/pkg/reflect/type.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/type.go\r\n> +++ b/src/pkg/reflect/type.go\r\n> @@ -1246,7 +1246,7 @@\r\n>  }\r\n>\r\n>  // typelinks is implemented in package runtime.\r\n> -// It retuns a slice of all the 'typelink' information in the binary,\r\n> +// It returns a slice of all the 'typelink' information in the binary,\r\n>  // which is to say a slice of known types, sorted by string.\r\n>  // Note that strings are not unique identifiers for types:\r\n>  // there can be more than one with a given string.\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-20 23:31:03.379510",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=74e65f07a0c8 ***\n\nsrc/pkg: fixed various typos\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7936043",
			"disapproval": false,
			"date": "2013-03-20 23:32:40.496460",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-20 23:28:52.707820",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7936043: src/pkg: fixed various typos",
	"created": "2013-03-20 23:27:35.298520",
	"patchsets": [
		1,
		2001,
		2002,
		8001
	],
	"modified": "2013-03-20 23:32:41.461030",
	"closed": true,
	"issue": 7936043
}