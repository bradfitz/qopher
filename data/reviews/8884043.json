{
	"description": "sort: add StringSlice.{SortNoCase,IsSortedNoCase}\n\na copy of the string slice will have upper-case versions. Less() and Swap() will have implementations utilizing the second list.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"extemporalgenome@gmail.com",
		"r@golang.org",
		"daniel.morsing@gmail.com",
		"dr.volker.dobler@gmail.com"
	],
	"messages": [
		{
			"sender": "jfcgauss@gmail.com",
			"recipients": [
				"jfcgauss@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-20 13:50:42.842110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this is an acceptable new dependency edge.\r\n On Apr 20, 2013 8:47 AM, <jfcgauss@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> sort: add StringSlice.{SortNoCase,**IsSortedNoCase}\r\n>\r\n> a copy of the string slice will have upper-case versions. Less() and\r\n> Swap() will have implementations utilizing the second list.\r\n>\r\n> Please review this at https://codereview.appspot.**com/8884043/<https://codereview.appspot.com/8884043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/go/build/deps_test.go\r\n>   M src/pkg/sort/sort.go\r\n>   M src/pkg/sort/sort_test.go\r\n>\r\n>\r\n> Index: src/pkg/go/build/deps_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/build/deps_test.**go\r\n> +++ b/src/pkg/go/build/deps_test.**go\r\n> @@ -47,7 +47,7 @@\r\n>         \"math\":          {\"unsafe\"},\r\n>         \"math/cmplx\":    {\"math\"},\r\n>         \"math/rand\":     {\"L0\", \"math\"},\r\n> -       \"sort\":          {\"math\"},\r\n> +       \"sort\":          {\"math\", \"strings\"},\r\n>         \"strconv\":       {\"L0\", \"unicode/utf8\", \"math\"},\r\n>         \"unicode/utf16\": {},\r\n>         \"unicode/utf8\":  {},\r\n> Index: src/pkg/sort/sort.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/sort/sort.go\r\n> +++ b/src/pkg/sort/sort.go\r\n> @@ -6,7 +6,10 @@\r\n>  // collections.\r\n>  package sort\r\n>\r\n> -import \"math\"\r\n> +import (\r\n> +       \"math\"\r\n> +       \"strings\"\r\n> +)\r\n>\r\n>  // A type, typically a collection, that satisfies sort.Interface can be\r\n>  // sorted by the routines in this package.  The methods require that the\r\n> @@ -261,6 +264,38 @@\r\n>  // Sort is a convenience method.\r\n>  func (p StringSlice) Sort() { Sort(p) }\r\n>\r\n> +// SortNoCase sorts ignoring case (via strings.ToUpper).\r\n> +func (p StringSlice) SortNoCase() {\r\n> +       a := &nocase{p, make(StringSlice, len(p))}\r\n> +\r\n> +       for i := 0; i < len(p); i++ {\r\n> +               a.u[i] = strings.ToUpper(p[i])\r\n> +       }\r\n> +       Sort(a)\r\n> +}\r\n> +\r\n> +// IsSortedNoCase reports whether StringSlice is sorted, ignoring case\r\n> (via strings.ToUpper).\r\n> +func (p StringSlice) IsSortedNoCase() bool {\r\n> +       a := &nocase{p, make(StringSlice, len(p))}\r\n> +\r\n> +       for i := 0; i < len(p); i++ {\r\n> +               a.u[i] = strings.ToUpper(p[i])\r\n> +       }\r\n> +       return IsSorted(a)\r\n> +}\r\n> +\r\n> +// internal definitions for SortNoCase & IsSortedNoCase of StringSlice\r\n> +type nocase struct {\r\n> +       p, u StringSlice // u := ToUpper(p)\r\n> +}\r\n> +\r\n> +func (a *nocase) Len() int           { return len(a.p) }\r\n> +func (a *nocase) Less(i, j int) bool { return a.u[i] < a.u[j] } // case\r\n> insensitive\r\n> +func (a *nocase) Swap(i, j int) {\r\n> +       a.p[i], a.p[j] = a.p[j], a.p[i] // swap on both lists\r\n> +       a.u[i], a.u[j] = a.u[j], a.u[i]\r\n> +}\r\n> +\r\n>  // Convenience wrappers for common cases\r\n>\r\n>  // Ints sorts a slice of ints in increasing order.\r\n> Index: src/pkg/sort/sort_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/sort/sort_test.go\r\n> +++ b/src/pkg/sort/sort_test.go\r\n> @@ -15,7 +15,7 @@\r\n>\r\n>  var ints = [...]int{74, 59, 238, -784, 9845, 959, 905, 0, 0, 42, 7586,\r\n> -5467984, 7586}\r\n>  var float64s = [...]float64{74.3, 59.0, math.Inf(1), 238.2, -784.0, 2.3,\r\n> math.NaN(), math.NaN(), math.Inf(-1), 9845.768, -959.7485, 905, 7.8, 7.8}\r\n> -var strings = [...]string{\"\", \"Hello\", \"foo\", \"bar\", \"foo\", \"f00\",\r\n> \"%*&^*&^&\", \"***\"}\r\n> +var strings = [...]string{\"\", \"Hello\", \"foo\", \"bar\", \"foo\", \"heLlo\",\r\n> \"baR\", \"f00\", \"%*&^*&^&\", \"***\"}\r\n>\r\n>  func TestSortIntSlice(t *testing.T) {\r\n>         data := ints\r\n> @@ -45,6 +45,14 @@\r\n>                 t.Errorf(\"sorted %v\", strings)\r\n>                 t.Errorf(\"   got %v\", data)\r\n>         }\r\n> +\r\n> +       data = strings\r\n> +       a = StringSlice(data[0:])\r\n> +       a.SortNoCase()\r\n> +       if !a.IsSortedNoCase() {\r\n> +               t.Errorf(\"sorted %v\", strings)\r\n> +               t.Errorf(\"   got %v\", data)\r\n> +       }\r\n>  }\r\n>\r\n>  func TestInts(t *testing.T) {\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-20 16:09:37.064620",
			"approval": false
		},
		{
			"sender": "jfcgauss@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "20 Nisan 2013 Cumartesi 19:09:35 UTC+3 tarihinde Brad Fitzpatrick yazd\u0131:\r\n>\r\n> I don't think this is an acceptable new dependency edge.\r\n>\r\nThe extension is backwards-compatible with Go 1, no api change. Also, sort \r\npackage has a StringSlice type. Having a dependency on strings package \r\nshould not be that irrelevant, i think..\r\n",
			"disapproval": false,
			"date": "2013-04-20 16:34:39.699200",
			"approval": false
		},
		{
			"sender": "extemporalgenome@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Both SortNoCase and IsSortedNoCase make upper-cased copies of the strings, \r\nand the original through the copy as a proxy. That's a linear amount of \r\ngarbage, which is much more than users expect from the stdlib (in the sort \r\npackage, users expect no garbage, or at most a small fixed amount). If the \r\nstrings library had something like CompareFold, and the dependency edge \r\nweren't an issue, you'd want to use that. Since it doesn't, it should be \r\ntrivial enough to make your own, though that'd add unicode as a dependency \r\nif you did it correctly (which is also too large of a dependency), and \r\nwould be limited to ASCII case handling if you didn't (and stdlib users \r\nexpect case-awareness to be specifically be unicode case awareness, unless \r\nnoted and named otherwise).\r\n\r\nOn Saturday, April 20, 2013 7:50:42 AM UTC-6, jfcg...@gmail.com wrote:\r\n>\r\n> Reviewers: golang-dev1, \r\n>\r\n> Message: \r\n> Hello golan...@googlegroups.com <javascript:>, \r\n>\r\n> I'd like you to review this change to \r\n> https://code.google.com/p/go \r\n>\r\n>\r\n> Description: \r\n> sort: add StringSlice.{SortNoCase,IsSortedNoCase} \r\n>\r\n> a copy of the string slice will have upper-case versions. Less() and \r\n> Swap() will have implementations utilizing the second list. \r\n>\r\n> Please review this at https://codereview.appspot.com/8884043/ \r\n>\r\n> Affected files: \r\n>    M src/pkg/go/build/deps_test.go \r\n>    M src/pkg/sort/sort.go \r\n>    M src/pkg/sort/sort_test.go \r\n>\r\n>\r\n> Index: src/pkg/go/build/deps_test.go \r\n> =================================================================== \r\n> --- a/src/pkg/go/build/deps_test.go \r\n> +++ b/src/pkg/go/build/deps_test.go \r\n> @@ -47,7 +47,7 @@ \r\n>           \"math\":          {\"unsafe\"}, \r\n>           \"math/cmplx\":    {\"math\"}, \r\n>           \"math/rand\":     {\"L0\", \"math\"}, \r\n> -        \"sort\":          {\"math\"}, \r\n> +        \"sort\":          {\"math\", \"strings\"}, \r\n>           \"strconv\":       {\"L0\", \"unicode/utf8\", \"math\"}, \r\n>           \"unicode/utf16\": {}, \r\n>           \"unicode/utf8\":  {}, \r\n> Index: src/pkg/sort/sort.go \r\n> =================================================================== \r\n> --- a/src/pkg/sort/sort.go \r\n> +++ b/src/pkg/sort/sort.go \r\n> @@ -6,7 +6,10 @@ \r\n>   // collections. \r\n>   package sort \r\n>\r\n> -import \"math\" \r\n> +import ( \r\n> +        \"math\" \r\n> +        \"strings\" \r\n> +) \r\n>\r\n>   // A type, typically a collection, that satisfies sort.Interface can be \r\n>   // sorted by the routines in this package.  The methods require that the \r\n> @@ -261,6 +264,38 @@ \r\n>   // Sort is a convenience method. \r\n>   func (p StringSlice) Sort() { Sort(p) } \r\n>\r\n> +// SortNoCase sorts ignoring case (via strings.ToUpper). \r\n> +func (p StringSlice) SortNoCase() { \r\n> +        a := &nocase{p, make(StringSlice, len(p))} \r\n> + \r\n> +        for i := 0; i < len(p); i++ { \r\n> +                a.u[i] = strings.ToUpper(p[i]) \r\n> +        } \r\n> +        Sort(a) \r\n> +} \r\n> + \r\n> +// IsSortedNoCase reports whether StringSlice is sorted, ignoring case   \r\n> (via strings.ToUpper). \r\n> +func (p StringSlice) IsSortedNoCase() bool { \r\n> +        a := &nocase{p, make(StringSlice, len(p))} \r\n> + \r\n> +        for i := 0; i < len(p); i++ { \r\n> +                a.u[i] = strings.ToUpper(p[i]) \r\n> +        } \r\n> +        return IsSorted(a) \r\n> +} \r\n> + \r\n> +// internal definitions for SortNoCase & IsSortedNoCase of StringSlice \r\n> +type nocase struct { \r\n> +        p, u StringSlice // u := ToUpper(p) \r\n> +} \r\n> + \r\n> +func (a *nocase) Len() int           { return len(a.p) } \r\n> +func (a *nocase) Less(i, j int) bool { return a.u[i] < a.u[j] } // case   \r\n> insensitive \r\n> +func (a *nocase) Swap(i, j int) { \r\n> +        a.p[i], a.p[j] = a.p[j], a.p[i] // swap on both lists \r\n> +        a.u[i], a.u[j] = a.u[j], a.u[i] \r\n> +} \r\n> + \r\n>   // Convenience wrappers for common cases \r\n>\r\n>   // Ints sorts a slice of ints in increasing order. \r\n> Index: src/pkg/sort/sort_test.go \r\n> =================================================================== \r\n> --- a/src/pkg/sort/sort_test.go \r\n> +++ b/src/pkg/sort/sort_test.go \r\n> @@ -15,7 +15,7 @@ \r\n>\r\n>   var ints = [...]int{74, 59, 238, -784, 9845, 959, 905, 0, 0, 42, 7586,   \r\n> -5467984, 7586} \r\n>   var float64s = [...]float64{74.3, 59.0, math.Inf(1), 238.2, -784.0, 2.3, \r\n>   \r\n> math.NaN(), math.NaN(), math.Inf(-1), 9845.768, -959.7485, 905, 7.8, 7.8} \r\n> -var strings =   \r\n> [...]string{\"\", \"Hello\", \"foo\", \"bar\", \"foo\", \"f00\", \"%*&^*&^&\", \"***\"} \r\n> +var strings =   \r\n> [...]string{\"\", \"Hello\", \"foo\", \"bar\", \"foo\", \"heLlo\", \"baR\", \"f00\", \r\n> \"%*&^*&^&\", \"***\"} \r\n>\r\n>   func TestSortIntSlice(t *testing.T) { \r\n>           data := ints \r\n> @@ -45,6 +45,14 @@ \r\n>                   t.Errorf(\"sorted %v\", strings) \r\n>                   t.Errorf(\"   got %v\", data) \r\n>           } \r\n> + \r\n> +        data = strings \r\n> +        a = StringSlice(data[0:]) \r\n> +        a.SortNoCase() \r\n> +        if !a.IsSortedNoCase() { \r\n> +                t.Errorf(\"sorted %v\", strings) \r\n> +                t.Errorf(\"   got %v\", data) \r\n> +        } \r\n>   } \r\n>\r\n>   func TestInts(t *testing.T) { \r\n>\r\n>\r\n>",
			"disapproval": false,
			"date": "2013-04-20 16:36:02.956590",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not arguing against API compatibility or whether this compiles.\r\n\r\nI'm saying this is an unacceptable new dependency edge. Sort is supposed to\r\nbe a leaf-y package.\r\n\r\nThere are various \"sortutil\" packages on github for helpers like this.\r\n On Apr 20, 2013 9:34 AM, <jfcgauss@gmail.com> wrote:\r\n\r\n> 20 Nisan 2013 Cumartesi 19:09:35 UTC+3 tarihinde Brad Fitzpatrick yazd\u0131:\r\n>>\r\n>> I don't think this is an acceptable new dependency edge.\r\n>>\r\n> The extension is backwards-compatible with Go 1, no api change. Also, sort\r\n> package has a StringSlice type. Having a dependency on strings package\r\n> should not be that irrelevant, i think..\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-20 17:02:41.035760",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad is correct. The sort package should not depend on strings. In\r\nfact, the existing dependence on the math package should be removed.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-20 17:08:59.422700",
			"approval": false
		},
		{
			"sender": "jfcgauss@gmail.com",
			"recipients": [
				"jfcgauss@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"extemporalgenome@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/20 16:36:02, extemporalgenome wrote:\n> Both SortNoCase and IsSortedNoCase make upper-cased copies of the strings, \n> and the original through the copy as a proxy. That's a linear amount of \n> garbage,\n\nYes, i deliberately make a 2nd list for upper-case versions, instead of having ToUpper(p[i]) < ToUpper(p[j]) in Less() because Less() will be called n*logn times. With an extra copy we are calling ToUpper just n times.\nA better way is to have some function like\nstrings.CompareNoCase(a,b string) int\nthat will compare ignoring case (wrt unicode or locale).\n\nI do not make an exact copy of the original list, do I? what do u mean by proxy?\n\n> trivial enough to make your own, though that'd add unicode as a dependency \n> if you did it correctly (which is also too large of a dependency), and \n> would be limited to ASCII case handling if you didn't (and stdlib users \n> expect case-awareness to be specifically be unicode case awareness, unless \n> noted and named otherwise).\n\nCase-sensitivity wrt unicode or locale is not a concern for sort package. ToUpper may or may not take those into account, we just need to use something like ToUpper or CompareNoCase, and we document it in the sort package.",
			"disapproval": false,
			"date": "2013-04-20 17:09:27.256380",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Apr 20, 2013 at 7:08 PM, Rob Pike <r@golang.org> wrote:\r\n> Brad is correct. The sort package should not depend on strings. In\r\n> fact, the existing dependence on the math package should be removed.\r\n>\r\n> -rob\r\n>\r\n\r\nThe math dependency is just for a NaN check in Float64Slice. We could\r\njust change it to x != x\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-20 17:59:53.015390",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Indeed. Sent out https://codereview.appspot.com/8886043/ if Rob wants it.\r\nCould wait until later too.\r\n\r\n\r\n\r\nOn Sat, Apr 20, 2013 at 10:59 AM, Daniel Morsing\r\n<daniel.morsing@gmail.com>wrote:\r\n\r\n> On Sat, Apr 20, 2013 at 7:08 PM, Rob Pike <r@golang.org> wrote:\r\n> > Brad is correct. The sort package should not depend on strings. In\r\n> > fact, the existing dependence on the math package should be removed.\r\n> >\r\n> > -rob\r\n> >\r\n>\r\n> The math dependency is just for a NaN check in Float64Slice. We could\r\n> just change it to x != x\r\n> > --\r\n> >\r\n> > ---\r\n> > You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> > To unsubscribe from this group and stop receiving emails from it, send\r\n> an email to golang-dev+unsubscribe@googlegroups.com.\r\n> > For more options, visit https://groups.google.com/groups/opt_out.\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-20 18:45:44.873610",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Am Samstag, 20. April 2013 19:09:27 UTC+2 schrieb jfcg...@gmail.com:\r\n\r\n> > would be limited to ASCII case handling if you didn't (and stdlib \r\n> users \r\n> > expect case-awareness to be specifically be unicode case awareness, \r\n> unless \r\n> > noted and named otherwise). \r\n>\r\n> Case-sensitivity wrt unicode or locale is not a concern for sort \r\n> package. ToUpper may or may not take those into account, we just need to \r\n> use something like ToUpper or CompareNoCase, and we document it in the \r\n> sort package. \r\n>\r\n\r\nSorry, this is an oversimplification. Clear \"no\" from my side  to any such\r\nhalf baked stuff.\r\n\r\nV.\r\n",
			"disapproval": false,
			"date": "2013-04-20 21:59:01.993120",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jfcgauss@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"extemporalgenome@gmail.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"dr.volker.dobler@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-06-17 18:05:14.974610",
			"approval": false
		}
	],
	"owner_email": "jfcgauss@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jfcg",
	"subject": "code review 8884043: sort: add StringSlice.{SortNoCase,IsSortedNoCase}",
	"created": "2013-04-20 13:44:35.993250",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-06-17 18:05:15.234130",
	"closed": false,
	"issue": 8884043
}