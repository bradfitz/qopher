{
	"description": "net: fix nil pointer defererence in selfConnect for TCP\n\nlocalSockname and remoteSockname return (*TCPAddr)(nil)\nwhen syscall getsockname, getpeername fail.\n\nFixes issue 4033.",
	"cc": [
		"golang-dev@googlegroups.com",
		"mirtchovski@gmail.com",
		"gobot@golang.org"
	],
	"reviewers": [
		"rsc@golang.org",
		"dave@cheney.net",
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks to Dave Chaney who alerted me to this CL. I had built a somewhat reproducible case which panic-ed pointing at this function. After the CL was applied I haven't seen the error in about 500 retries.",
			"disapproval": false,
			"date": "2012-08-27 23:13:35.242140",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcp_test.go#newcode121\nsrc/pkg/net/tcp_test.go:121: func TestTCPSelfConenct(t *testing.T) {\nOn 2012/08/25 09:35:46, dfc wrote:\n> s/Conenct/Connect/\n\nDone.\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcp_test.go#newcode128\nsrc/pkg/net/tcp_test.go:128: selfConnect(fd2, nil)\nOn 2012/08/25 09:35:46, dfc wrote:\n\n> I think you need an additional test for something that isn't nil and isn't a\n> (*net.TCPAddr)\n\nNot necessary for args that passed DialTCP gate.\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcpsock_posix.go\nFile src/pkg/net/tcpsock_posix.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcpsock_posix.go#newcode203\nsrc/pkg/net/tcpsock_posix.go:203: if fd.laddr == nil || fd.laddr == (*TCPAddr)(nil) || fd.raddr == nil || fd.raddr == (*TCPAddr)(nil) {\nditto.",
			"disapproval": false,
			"date": "2012-08-25 13:43:26.393100",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-25 08:56:37.189070",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-25 13:44:04.539920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for fixing this so quickly.\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcp_test.go#newcode121\nsrc/pkg/net/tcp_test.go:121: func TestTCPSelfConenct(t *testing.T) {\ns/Conenct/Connect/\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcp_test.go#newcode128\nsrc/pkg/net/tcp_test.go:128: selfConnect(fd2, nil)\nI think you need an additional test for something that isn't nil and isn't a (*net.TCPAddr)\n\n        fd3 := &netFD{}\n        fd3.setAddr(nullProtocolAddr(syscall.AF_INET, syscall.SOCK_DGRAM), nullProtocolAddr(syscall.AF_INET, syscall.SOCK_DGRAM))\n        selfConnect(fd3, nil)\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcpsock_posix.go\nFile src/pkg/net/tcpsock_posix.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/2002/src/pkg/net/tcpsock_posix.go#newcode203\nsrc/pkg/net/tcpsock_posix.go:203: if fd.laddr == nil || fd.laddr == (*TCPAddr)(nil) || fd.raddr == nil || fd.raddr == (*TCPAddr)(nil) {\nWe still have to check that {l,r}addr is (*TCPAddr). Maybe something like this:\n\n        l, ok1 := fd.laddr.(*TCPAddr)\n        r, ok2 := fd.raddr.(*TCPAddr)\n        if !ok1 || !ok2 || l == nil || r == nil {\n                return true\n        }\n        return l.Port == r.Port && l.IP.Equal(r.IP)\n\nBut I think you could also make the argument that selfConnect expects to only be called with two tcp endpoints, so you can make the cast without a check.",
			"disapproval": false,
			"date": "2012-08-25 09:35:45.884800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"mirtchovski@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't believe this is the correct fix. This was created by returning the typed nil in Mikio's earlier CL. I think the correct fix is to undo that and accept that RemoteAddr can return nil.\n\nRuss",
			"disapproval": false,
			"date": "2012-09-10 16:15:13.450690",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, mirtchovski@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-28 03:24:06.300970",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by rsc)",
			"disapproval": false,
			"date": "2012-09-01 14:40:26.454280",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, mirtchovski@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-29 10:48:27.611610",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go\nFile src/pkg/net/tcp_posix_test.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go#newcode19\nsrc/pkg/net/tcp_posix_test.go:19: {&netFD{laddr: nil, raddr: nil}, nil, true},\nWhy do we need to test this? selfConnect is only called from DialTCP and the type of {l,r}addr is assured to be *TCPAddr, right?\n\nhttp://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcpsock_posix.go\nFile src/pkg/net/tcpsock_posix.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcpsock_posix.go#newcode203\nsrc/pkg/net/tcpsock_posix.go:203: if fd.laddr == nil || fd.laddr == (*TCPAddr)(nil) || fd.raddr == nil || fd.raddr == (*TCPAddr)(nil) {\nSee comment in other file",
			"disapproval": false,
			"date": "2012-08-29 10:33:07.280520",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go\nFile src/pkg/net/tcp_posix_test.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go#newcode19\nsrc/pkg/net/tcp_posix_test.go:19: {&netFD{laddr: nil, raddr: nil}, nil, true},\nright, I said so. ;) thx.\n\nhttp://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go#newcode19\nsrc/pkg/net/tcp_posix_test.go:19: {&netFD{laddr: nil, raddr: nil}, nil, true},\nOn 2012/08/29 10:33:07, dfc wrote:\n> Why do we need to test this? selfConnect is only called from DialTCP and the\n> type of {l,r}addr is assured to be *TCPAddr, right?\n\nDone.\n\nhttp://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcpsock_posix.go\nFile src/pkg/net/tcpsock_posix.go (right):\n\nhttp://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcpsock_posix.go#newcode203\nsrc/pkg/net/tcpsock_posix.go:203: if fd.laddr == nil || fd.laddr == (*TCPAddr)(nil) || fd.raddr == nil || fd.raddr == (*TCPAddr)(nil) {\nOn 2012/08/29 10:33:07, dfc wrote:\n> See comment in other file\n\nDone.",
			"disapproval": false,
			"date": "2012-08-29 10:48:28.177840",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> LGTM, but maybe wait for rsc.\n\nas usual.",
			"disapproval": false,
			"date": "2012-08-29 10:54:13.725310",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/29 10:48:28, mikio wrote:\n> http://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go\n> File src/pkg/net/tcp_posix_test.go (right):\n> \n> http://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go#newcode19\n> src/pkg/net/tcp_posix_test.go:19: {&netFD{laddr: nil, raddr: nil}, nil, true},\n> right, I said so. ;) thx.\n> \n> http://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcp_posix_test.go#newcode19\n> src/pkg/net/tcp_posix_test.go:19: {&netFD{laddr: nil, raddr: nil}, nil, true},\n> On 2012/08/29 10:33:07, dfc wrote:\n> > Why do we need to test this? selfConnect is only called from DialTCP and the\n> > type of {l,r}addr is assured to be *TCPAddr, right?\n> \n> Done.\n> \n> http://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcpsock_posix.go\n> File src/pkg/net/tcpsock_posix.go (right):\n> \n> http://codereview.appspot.com/6479053/diff/16003/src/pkg/net/tcpsock_posix.go#newcode203\n> src/pkg/net/tcpsock_posix.go:203: if fd.laddr == nil || fd.laddr ==\n> (*TCPAddr)(nil) || fd.raddr == nil || fd.raddr == (*TCPAddr)(nil) {\n> On 2012/08/29 10:33:07, dfc wrote:\n> > See comment in other file\n> \n> Done.\n\nLGTM, but maybe wait for rsc.",
			"disapproval": false,
			"date": "2012-08-29 10:50:38.574190",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"mirtchovski@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/01 14:40:26, gobot wrote:\n> R=rsc (assigned by rsc)\n\nping.",
			"disapproval": false,
			"date": "2012-09-07 09:25:04.239830",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"mirtchovski@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping?\n\nOn 2012/09/10 16:15:13, rsc wrote:\n> I don't believe this is the correct fix. This was created by returning the typed\n> nil in Mikio's earlier CL. I think the correct fix is to undo that and accept\n> that RemoteAddr can return nil.\n> \n> Russ",
			"disapproval": false,
			"date": "2012-09-18 08:34:22.754400",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"mirtchovski@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/10 16:15:13, rsc wrote:\n\n> I don't believe this is the correct fix. This was created by returning the typed\n> nil in Mikio's earlier CL. I think the correct fix is to undo that and accept\n> that RemoteAddr can return nil.\n\nsure, will do.",
			"disapproval": false,
			"date": "2012-09-18 10:44:58.802350",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"mirtchovski@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-18 16:36:45.994020",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6479053: net: fix nil pointer defererence in selfConnect for TCP",
	"created": "2012-08-25 05:37:26.953150",
	"patchsets": [
		2001,
		2002,
		10001,
		16003,
		18003
	],
	"modified": "2012-09-18 16:36:49.037000",
	"closed": true,
	"issue": 6479053
}