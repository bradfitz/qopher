{
	"description": "cmd/6g, cmd/8g: eliminate short integer arithmetic when possible.\n\nFixes issue 3909.\nFixes issue 3910.",
	"cc": [
		"rsc@golang.org",
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch intends to replace CL 6446088 and CL 6459046 by eliminating short integer instructions whenever possible. It passes the tests but can cause more issues: there were some with the carry bit (needc is not complete) and a use of ORB with arguments being actual ints and not bytes (in the uint64 -> float64 conversion).",
			"disapproval": false,
			"date": "2012-08-11 12:22:46.796300",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6442114/diff/7001/src/cmd/6g/peep.c\nFile src/cmd/6g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/7001/src/cmd/6g/peep.c#newcode139\nsrc/cmd/6g/peep.c:139: // byte, word arithmetic elimination.\nOn 2012/08/13 07:36:26, nigeltao wrote:\n> s/spaces/tabs/. Similarly on the next line.\n\nDone.\n\nhttp://codereview.appspot.com/6442114/diff/7001/src/cmd/8g/peep.c\nFile src/cmd/8g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/7001/src/cmd/8g/peep.c#newcode133\nsrc/cmd/8g/peep.c:133: // byte, word arithmetic elimination.\nOn 2012/08/13 07:36:26, nigeltao wrote:\n> s/spaces/tabs/.\n\nDone.\n\nhttp://codereview.appspot.com/6442114/diff/7001/test/fixedbugs/bug440_64.go\nFile test/fixedbugs/bug440_64.go (right):\n\nhttp://codereview.appspot.com/6442114/diff/7001/test/fixedbugs/bug440_64.go#newcode1\ntest/fixedbugs/bug440_64.go:1: // run\nThe patch says \"copy from test/bugs/bug440.go\"\n\nhttp://codereview.appspot.com/6442114/diff/7001/test/fixedbugs/bug440_64.go#newcode4\ntest/fixedbugs/bug440_64.go:4: // about 64- vs 64-bit moves during splitContractIndex.\nOn 2012/08/13 07:36:26, nigeltao wrote:\n> \"64- vs 64-bit\" makes no sense.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-13 07:59:23.574510",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6442114/diff/7001/src/cmd/6g/peep.c\nFile src/cmd/6g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/7001/src/cmd/6g/peep.c#newcode139\nsrc/cmd/6g/peep.c:139: // byte, word arithmetic elimination.\ns/spaces/tabs/. Similarly on the next line.\n\nhttp://codereview.appspot.com/6442114/diff/7001/src/cmd/8g/peep.c\nFile src/cmd/8g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/7001/src/cmd/8g/peep.c#newcode133\nsrc/cmd/8g/peep.c:133: // byte, word arithmetic elimination.\ns/spaces/tabs/.\n\nhttp://codereview.appspot.com/6442114/diff/7001/test/fixedbugs/bug440_64.go\nFile test/fixedbugs/bug440_64.go (right):\n\nhttp://codereview.appspot.com/6442114/diff/7001/test/fixedbugs/bug440_64.go#newcode1\ntest/fixedbugs/bug440_64.go:1: // run\nDumb question: is this file new? Why don't I see it in my tree?\n\nhttp://codereview.appspot.com/6442114/diff/7001/test/fixedbugs/bug440_64.go#newcode4\ntest/fixedbugs/bug440_64.go:4: // about 64- vs 64-bit moves during splitContractIndex.\n\"64- vs 64-bit\" makes no sense.",
			"disapproval": false,
			"date": "2012-08-13 07:36:26.901520",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-08-11 12:15:43.699960",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-13 07:58:11.580590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLooks fantastic. Thank you.\n\nhttp://codereview.appspot.com/6442114/diff/5006/src/cmd/6g/peep.c\nFile src/cmd/6g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/5006/src/cmd/6g/peep.c#newcode469\nsrc/cmd/6g/peep.c:469: elimshortmov(Reg *r) {\n{ on next line (sorry)\n\nhttp://codereview.appspot.com/6442114/diff/5006/src/cmd/6g/peep.c#newcode494\nsrc/cmd/6g/peep.c:494: // movb into register.\n// move or arithmetic into partial register.\n\nis multiply not uniform enough to be handled here too?\n\nhttp://codereview.appspot.com/6442114/diff/5006/src/cmd/8g/peep.c\nFile src/cmd/8g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/5006/src/cmd/8g/peep.c#newcode313\nsrc/cmd/8g/peep.c:313: elimshortmov(Reg *r) {\n{ on next line",
			"disapproval": false,
			"date": "2012-08-31 11:37:17.844210",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-01 10:41:25.475020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6442114/diff/15001/src/cmd/6g/peep.c\nFile src/cmd/6g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/15001/src/cmd/6g/peep.c#newcode499\nsrc/cmd/6g/peep.c:499: // TODO: also consider eliminating 32-bit ops?\nYou can drop this TODO. The problem with the byte and word ops is that they are defined to preserve the high bits of the destination register, meaning that even though _we_ don't care, the processor must treat the destination as an additional input where it might otherwise not be (especially for MOV, less so for this arithmetic). That constrains register renaming which makes operations less fast than they might otherwise be. The 32-bit ops do not have this problem because they are defined to clear the top 32 bits of the destination register always.",
			"disapproval": false,
			"date": "2012-09-01 14:10:41.773630",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=79225d9f3ced ***\n\ncmd/6g, cmd/8g: eliminate short integer arithmetic when possible.\n\nFixes issue 3909.\nFixes issue 3910.\n\nR=rsc, nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/6442114\n\nhttp://codereview.appspot.com/6442114/diff/15001/src/cmd/6g/peep.c\nFile src/cmd/6g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/15001/src/cmd/6g/peep.c#newcode499\nsrc/cmd/6g/peep.c:499: // TODO: also consider eliminating 32-bit ops?\nOn 2012/09/01 14:10:41, rsc wrote:\n> You can drop this TODO. The problem with the byte and word ops is that they are\n> defined to preserve the high bits of the destination register, meaning that even\n> though _we_ don't care, the processor must treat the destination as an\n> additional input where it might otherwise not be (especially for MOV, less so\n> for this arithmetic). That constrains register renaming which makes operations\n> less fast than they might otherwise be. The 32-bit ops do not have this problem\n> because they are defined to clear the top 32 bits of the destination register\n> always.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-01 14:41:02.945870",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "one possible typo\n\nhttp://codereview.appspot.com/6442114/diff/21002/src/cmd/8g/peep.c\nFile src/cmd/8g/peep.c (right):\n\nhttp://codereview.appspot.com/6442114/diff/21002/src/cmd/8g/peep.c#newcode310\nsrc/cmd/8g/peep.c:310: // can smash the entire 64-bit register without\n64-bit register?",
			"disapproval": false,
			"date": "2012-09-02 19:25:24.664810",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6442114: cmd/6g, cmd/8g: eliminate short integer arithmetic when...",
	"created": "2012-08-11 12:14:26.555980",
	"patchsets": [
		1,
		1002,
		4001,
		7001,
		5006,
		15001,
		15002,
		21002
	],
	"modified": "2012-09-09 06:39:15.636420",
	"closed": true,
	"issue": 6442114
}