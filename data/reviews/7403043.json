{
	"description": "exp/ssa: add dedicated Panic instruction.\n\nBy avoiding the need for self-loops following calls to panic,\nwe reduce the number of basic blocks considerably.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I get\r\n\r\nerror: old chunk mismatch\r\n\r\nfor all files in this CL (last version). Can you re-upload? Thanks.\r\n- gri\r\n\r\n\r\nOn Wed, Feb 20, 2013 at 2:51 PM, <adonovan@google.com> wrote:\r\n>\r\n> Reviewers: gri,\r\n>\r\n> Message:\r\n> Hello gri@golang.org (cc: golang-dev@googlegroups.com, iant@golang.org),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> exp/ssa: add dedicated Panic instruction.\r\n>\r\n> By avoiding the need for self-loops following calls to panic,\r\n> we reduce the number of basic blocks considerably.\r\n>\r\n> Please review this at https://codereview.appspot.com/7403043/\r\n>\r\n> Affected files:\r\n>   src/pkg/exp/ssa/builder.go\r\n>   src/pkg/exp/ssa/emit.go\r\n>   src/pkg/exp/ssa/interp/interp.go\r\n>   src/pkg/exp/ssa/print.go\r\n>   src/pkg/exp/ssa/sanity.go\r\n>   src/pkg/exp/ssa/ssa.go\r\n>\r\n>\r\n> Index: src/pkg/exp/ssa/builder.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/builder.go\r\n> +++ b/src/pkg/exp/ssa/builder.go\r\n> @@ -62,6 +62,7 @@\r\n>         tInvalid    = types.Typ[types.Invalid]\r\n>         tUntypedNil = types.Typ[types.UntypedNil]\r\n>         tRangeIter  = &types.Basic{Name: \"iter\"} // the type of all\r\n\"range\" iterators\r\n> +       tEface      = new(types.Interface)\r\n>\r\n>         // The result type of a \"select\".\r\n>         tSelect = &types.Result{Values: []*types.Var{\r\n> @@ -511,6 +512,11 @@\r\n>                         return intLiteral(at.Len)\r\n>                 }\r\n>                 // Otherwise treat as normal.\r\n> +\r\n> +       case \"panic\":\r\n> +               fn.emit(&Panic{X: emitConv(fn, b.expr(fn, args[0]),\r\ntEface)})\r\n> +               fn.currentBlock = fn.newBasicBlock(\"unreachable\")\r\n> +               return vFalse // any non-nil Value will do\r\n>         }\r\n>         return nil // treat all others as a regular function call\r\n>  }\r\n> @@ -773,32 +779,20 @@\r\n>                         // Type conversion, e.g. string(x) or big.Int(x)\r\n>                         return emitConv(fn, b.expr(fn, e.Args[0]), typ)\r\n>                 }\r\n> -               // Call to \"intrinsic\" built-ins, e.g. new, make.\r\n> -               wasPanic := false\r\n> +               // Call to \"intrinsic\" built-ins, e.g. new, make, panic.\r\n>                 if id, ok := e.Fun.(*ast.Ident); ok {\r\n>                         obj := b.obj(id)\r\n>                         if _, ok := fn.Prog.Builtins[obj]; ok {\r\n>                                 if v := b.builtin(fn, id.Name, e.Args,\r\ntyp); v != nil {\r\n>                                         return v\r\n>                                 }\r\n> -                               wasPanic = id.Name == \"panic\"\r\n>                         }\r\n>                 }\r\n>                 // Regular function call.\r\n>                 var v Call\r\n>                 b.setCall(fn, e, &v.CallCommon)\r\n>                 v.setType(typ)\r\n> -               fn.emit(&v)\r\n> -\r\n> -               // Compile panic as if followed by for{} so that its\r\n> -               // successor is unreachable.\r\n> -               // TODO(adonovan): consider a dedicated Panic instruction\r\n> -               // (in which case, don't forget Go and Defer).\r\n> -               if wasPanic {\r\n> -                       emitSelfLoop(fn)\r\n> -                       fn.currentBlock = fn.newBasicBlock(\"unreachable\")\r\n> -               }\r\n> -               return &v\r\n> +               return fn.emit(&v)\r\n>\r\n>         case *ast.UnaryExpr:\r\n>                 switch e.Op {\r\n> @@ -1160,7 +1154,7 @@\r\n>                         bptypes = append(bptypes, nil) // map\r\n>                         bptypes = append(bptypes, nil) // key\r\n>                 case \"print\", \"println\": // print{,ln}(any, ...any)\r\n> -                       vt = new(types.Interface) // variadic\r\n> +                       vt = tEface // variadic\r\n>                         if !c.HasEllipsis {\r\n>                                 args, varargs = args[:1], args[1:]\r\n>                         }\r\n> @@ -1187,7 +1181,7 @@\r\n>                         }\r\n>                         bptypes = append(bptypes, argType, argType)\r\n>                 case \"panic\":\r\n> -                       bptypes = append(bptypes, new(types.Interface))\r\n> +                       bptypes = append(bptypes, tEface)\r\n>                 case \"recover\":\r\n>                         // no-op\r\n>                 default:\r\n> @@ -2256,14 +2250,14 @@\r\n>\r\n>         case *ast.GoStmt:\r\n>                 // The \"intrinsics\" new/make/len/cap are forbidden here.\r\n> -               // panic() is not forbidden, but is not (yet) an\r\nintrinsic.\r\n> +               // panic is treated like an ordinary function call.\r\n>                 var v Go\r\n>                 b.setCall(fn, s.Call, &v.CallCommon)\r\n>                 fn.emit(&v)\r\n>\r\n>         case *ast.DeferStmt:\r\n>                 // The \"intrinsics\" new/make/len/cap are forbidden here.\r\n> -               // panic() is not forbidden, but is not (yet) an\r\nintrinsic.\r\n> +               // panic is treated like an ordinary function call.\r\n>                 var v Defer\r\n>                 b.setCall(fn, s.Call, &v.CallCommon)\r\n>                 fn.emit(&v)\r\n> Index: src/pkg/exp/ssa/emit.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/emit.go\r\n> +++ b/src/pkg/exp/ssa/emit.go\r\n> @@ -247,15 +247,3 @@\r\n>         f.emit(&ret)\r\n>         f.currentBlock = nil\r\n>  }\r\n> -\r\n> -// emitSelfLoop emits to f a self-loop.\r\n> -// This is a defensive measure to ensure control-flow integrity.\r\n> -// It should never be reachable.\r\n> -// Postcondition: f.currentBlock is nil.\r\n> -//\r\n> -func emitSelfLoop(f *Function) {\r\n> -       loop := f.newBasicBlock(\"selfloop\")\r\n> -       emitJump(f, loop)\r\n> -       f.currentBlock = loop\r\n> -       emitJump(f, loop)\r\n> -}\r\n> Index: src/pkg/exp/ssa/interp/interp.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/interp/interp.go\r\n> +++ b/src/pkg/exp/ssa/interp/interp.go\r\n> @@ -171,6 +171,9 @@\r\n>                 }\r\n>                 return kReturn\r\n>\r\n> +       case *ssa.Panic:\r\n> +               panic(targetPanic{fr.get(instr.X)})\r\n> +\r\n>         case *ssa.Send:\r\n>                 fr.get(instr.Chan).(chan value) <-\r\ncopyVal(fr.get(instr.X))\r\n>\r\n> Index: src/pkg/exp/ssa/print.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/print.go\r\n> +++ b/src/pkg/exp/ssa/print.go\r\n> @@ -274,6 +274,10 @@\r\n>         return printCall(&s.CallCommon, \"go \", s)\r\n>  }\r\n>\r\n> +func (s *Panic) String() string {\r\n> +       return \"panic \" + relName(s.X, s)\r\n> +}\r\n> +\r\n>  func (s *Ret) String() string {\r\n>         var b bytes.Buffer\r\n>         b.WriteString(\"ret\")\r\n> Index: src/pkg/exp/ssa/sanity.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/sanity.go\r\n> +++ b/src/pkg/exp/ssa/sanity.go\r\n> @@ -96,7 +96,7 @@\r\n>\r\n>  func (s *sanity) checkInstr(idx int, instr Instruction) {\r\n>         switch instr := instr.(type) {\r\n> -       case *If, *Jump, *Ret:\r\n> +       case *If, *Jump, *Ret, *Panic:\r\n>                 s.errorf(\"control flow instruction not at end of block\")\r\n>         case *Phi:\r\n>                 if idx == 0 {\r\n> @@ -172,6 +172,12 @@\r\n>                 }\r\n>                 // TODO(adonovan): check number and types of results\r\n>\r\n> +       case *Panic:\r\n> +               if nsuccs := len(s.block.Succs); nsuccs != 0 {\r\n> +                       s.errorf(\"Panic-terminated block has %d\r\nsuccessors; expected none\", nsuccs)\r\n> +                       return\r\n> +               }\r\n> +\r\n>         default:\r\n>                 s.errorf(\"non-control flow instruction at end of block\")\r\n>         }\r\n> Index: src/pkg/exp/ssa/ssa.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/ssa.go\r\n> +++ b/src/pkg/exp/ssa/ssa.go\r\n> @@ -248,7 +248,7 @@\r\n>  // An SSA basic block.\r\n>  //\r\n>  // The final element of Instrs is always an explicit transfer of\r\n> -// control (If, Jump or Ret).\r\n> +// control (If, Jump, Ret or Panic).\r\n>  //\r\n>  // A block may contain no Instructions only if it is unreachable,\r\n>  // i.e. Preds is nil.  Empty blocks are typically pruned.\r\n> @@ -835,6 +835,22 @@\r\n>         Results []Value\r\n>  }\r\n>\r\n> +// Panic initiates a panic with value X.\r\n> +//\r\n> +// A Panic instruction must be the last instruction of its containing\r\n> +// BasicBlock, which must have no successors.\r\n> +//\r\n> +// NB: 'go panic(x)' and 'defer panic(x)' do not use this instruction;\r\n> +// they are treated as calls to a built-in function.\r\n> +//\r\n> +// Example printed form:\r\n> +//     panic t0\r\n> +//\r\n> +type Panic struct {\r\n> +       anInstruction\r\n> +       X Value // an interface{}\r\n> +}\r\n> +\r\n>  // Go creates a new goroutine and calls the specified function\r\n>  // within it.\r\n>  //\r\n> @@ -1118,6 +1134,7 @@\r\n>  func (*MakeSlice) ImplementsInstruction()       {}\r\n>  func (*MapUpdate) ImplementsInstruction()       {}\r\n>  func (*Next) ImplementsInstruction()            {}\r\n> +func (*Panic) ImplementsInstruction()           {}\r\n>  func (*Phi) ImplementsInstruction()             {}\r\n>  func (*Range) ImplementsInstruction()           {}\r\n>  func (*Ret) ImplementsInstruction()             {}\r\n> @@ -1220,6 +1237,10 @@\r\n>         return append(rands, &v.Iter)\r\n>  }\r\n>\r\n> +func (s *Panic) Operands(rands []*Value) []*Value {\r\n> +       return append(rands, &s.X)\r\n> +}\r\n> +\r\n>  func (v *Phi) Operands(rands []*Value) []*Value {\r\n>         for i := range v.Edges {\r\n>                 rands = append(rands, &v.Edges[i])\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-21 03:14:13.759380",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com, iant@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-20 22:51:09.109160",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a46b7f530ba9 ***\n\nexp/ssa: add dedicated Panic instruction.\n\nBy avoiding the need for self-loops following calls to panic,\nwe reduce the number of basic blocks considerably.\n\nR=gri\nCC=golang-dev, iant\nhttps://codereview.appspot.com/7403043",
			"disapproval": false,
			"date": "2013-02-21 17:14:38.554360",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-21 16:52:14.215680",
			"approval": true
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7403043: exp/ssa: add dedicated Panic instruction.",
	"created": "2013-02-20 22:45:51.626110",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		12002,
		4013
	],
	"modified": "2013-02-21 17:14:39.762310",
	"closed": true,
	"issue": 7403043
}