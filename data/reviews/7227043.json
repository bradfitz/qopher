{
	"description": "net, syscall: use accept4 and SOCK_CLOEXEC on Linux",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"mikioh.mikioh@gmail.com",
		"dave@cheney.net",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Ian, this is looking very promising.\n\nGOMAXPROCS=1\n\n220887(~) % siege -b -t 10s -c 20 localhost:8081\n** SIEGE 2.70\n** Preparing 20 concurrent users for battle.\nThe server is now under siege...\nLifting the server siege...      done.                                                                                                                                   Transactions:                   14327 hits\nAvailability:                 100.00 %\nElapsed time:                   9.70 secs\nData transferred:               0.36 MB\nResponse time:                  0.01 secs\nTransaction rate:            1477.01 trans/sec\nThroughput:                     0.04 MB/sec\nConcurrency:                   19.81\nSuccessful transactions:       14327\nFailed transactions:               0\nLongest transaction:            0.02\nShortest transaction:           0.00\n\nGOMAXPROCS=4\n220887(~) % siege -b -t 10s -c 20 localhost:8081\n** SIEGE 2.70\n** Preparing 20 concurrent users for battle.\nThe server is now under siege...\nLifting the server siege...      done.                                                                                                                                   Transactions:                   19190 hits\nAvailability:                 100.00 %\nElapsed time:                   9.52 secs\nData transferred:               0.48 MB\nResponse time:                  0.01 secs\nTransaction rate:            2015.76 trans/sec\nThroughput:                     0.05 MB/sec\nConcurrency:                   19.63\nSuccessful transactions:       19190\nFailed transactions:               0\nLongest transaction:            0.05\nShortest transaction:           0.00\n\nLink to previous benchmarks for comparison: https://groups.google.com/d/msg/golang-nuts/g0GxIPNml8o/wxQXDGA5dPMJ\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sys_cloexec.go\nFile src/pkg/net/sys_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sys_cloexec.go#newcode5\nsrc/pkg/net/sys_cloexec.go:5: // This version used on Unix systems that are not Linux.\nThis doesn't really explain what the file does, how about\n\n// This file implements sysSocket and accept for platforms that do not provide a fast path for setting SetNonblocking and SetCloseOnExec.\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/syscall/syscall_linux.go\nFile src/pkg/syscall/syscall_linux.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/syscall/syscall_linux.go#newcode429\nsrc/pkg/syscall/syscall_linux.go:429: \nIf you plan to make this function call a sysnb syscall, you should mention that callers must call this on an fd that is already nonblocking.",
			"disapproval": false,
			"date": "2013-01-27 08:42:34.451860",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I mean, throse three variables need to be declared.",
			"disapproval": false,
			"date": "2013-01-28 06:24:48.266920",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7227043/diff/3021/src/pkg/net/sock_cloexec.go\nFile src/pkg/net/sock_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/3021/src/pkg/net/sock_cloexec.go#newcode14\nsrc/pkg/net/sock_cloexec.go:14: var haveSockCloexec = true\naren't these racy?  (and haveAccept4 below)\n\nif not, why not?",
			"disapproval": false,
			"date": "2013-01-28 05:17:16.361960",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-28 05:32:29.746080",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sock_cloexec.go\nFile src/pkg/net/sock_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sock_cloexec.go#newcode34\nsrc/pkg/net/sock_cloexec.go:34: }\npersonal preference, but I'd put a redundant return here just for clarity:\n\n}\nreturn s, nil\n}\nreturn -1, err\n\nAnd in the other 3 places.  But I know this is just code moving around mostly, so I don't care too much.",
			"disapproval": false,
			"date": "2013-01-27 03:08:01.597760",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7227043/diff/3021/src/pkg/net/sock_cloexec.go\nFile src/pkg/net/sock_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/3021/src/pkg/net/sock_cloexec.go#newcode14\nsrc/pkg/net/sock_cloexec.go:14: var haveSockCloexec = true\nOn 2013/01/28 05:17:16, bradfitz wrote:\n> aren't these racy?  (and haveAccept4 below)\n> \n> if not, why not?\n\nOh yeah.  Sorry for the dumb patch.  It's not worth atomics here, since almost always the single call will work, so I took this out again.",
			"disapproval": false,
			"date": "2013-01-28 05:23:05.858540",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM except\n\nhttps://codereview.appspot.com/7227043/diff/15/src/pkg/net/sys_cloexec.go\nFile src/pkg/net/sys_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/15/src/pkg/net/sys_cloexec.go#newcode41\nsrc/pkg/net/sys_cloexec.go:41: nfd, sa, err = syscall.Accept(fd)\nnfd, sa, err := syscall.Accept(fd)",
			"disapproval": false,
			"date": "2013-01-28 11:14:08.062320",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-27 02:53:12.162350",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sock_cloexec.go\nFile src/pkg/net/sock_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sock_cloexec.go#newcode46\nsrc/pkg/net/sock_cloexec.go:46: if err == nil || err != syscall.ENOSYS {\nshould we remember the fact rather than\nmaking two syscalls each time for older kernels?",
			"disapproval": false,
			"date": "2013-01-27 10:59:31.770240",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.\n\nhttps://codereview.appspot.com/7227043/diff/15/src/pkg/net/sys_cloexec.go\nFile src/pkg/net/sys_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/15/src/pkg/net/sys_cloexec.go#newcode41\nsrc/pkg/net/sys_cloexec.go:41: nfd, sa, err = syscall.Accept(fd)\nOn 2013/01/28 11:14:08, mikio wrote:\n> nfd, sa, err := syscall.Accept(fd)\n\nDone.",
			"disapproval": false,
			"date": "2013-01-28 16:53:43.062230",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1b4f2eb45509 ***\n\nnet, syscall: use accept4 and SOCK_CLOEXEC on Linux\n\nR=golang-dev, bradfitz, mikioh.mikioh, dave, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7227043",
			"disapproval": false,
			"date": "2013-01-28 16:54:22.235460",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "will look tomorrow.\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sys_cloexec.go\nFile src/pkg/net/sys_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sys_cloexec.go#newcode39\nsrc/pkg/net/sys_cloexec.go:39: nfd, sa, err = syscall.Accept(fd)\ndecl shorthand?",
			"disapproval": false,
			"date": "2013-01-27 08:06:53.567200",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sock_cloexec.go\nFile src/pkg/net/sock_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sock_cloexec.go#newcode34\nsrc/pkg/net/sock_cloexec.go:34: }\nOn 2013/01/27 03:08:01, bradfitz wrote:\n> personal preference, but I'd put a redundant return here just for clarity:\n> \n> }\n> return s, nil\n> }\n> return -1, err\n> \n> And in the other 3 places.  But I know this is just code moving around mostly,\n> so I don't care too much.\n\nI rearranged the code to use the more typical err != nil.\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sock_cloexec.go#newcode46\nsrc/pkg/net/sock_cloexec.go:46: if err == nil || err != syscall.ENOSYS {\nOn 2013/01/27 10:59:31, minux wrote:\n> should we remember the fact rather than\n> making two syscalls each time for older kernels?\n\nDone.\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sys_cloexec.go\nFile src/pkg/net/sys_cloexec.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sys_cloexec.go#newcode5\nsrc/pkg/net/sys_cloexec.go:5: // This version used on Unix systems that are not Linux.\nOn 2013/01/27 08:42:34, dfc wrote:\n> This doesn't really explain what the file does, how about\n> \n> // This file implements sysSocket and accept for platforms that do not provide a\n> fast path for setting SetNonblocking and SetCloseOnExec.\n\nDone.\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/net/sys_cloexec.go#newcode39\nsrc/pkg/net/sys_cloexec.go:39: nfd, sa, err = syscall.Accept(fd)\nOn 2013/01/27 08:06:53, mikio wrote:\n> decl shorthand?\n\nI'd rather not.  The shorthand is good for returning an error, but this is err == nil, not the usual form.\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/syscall/syscall_linux.go\nFile src/pkg/syscall/syscall_linux.go (right):\n\nhttps://codereview.appspot.com/7227043/diff/7002/src/pkg/syscall/syscall_linux.go#newcode429\nsrc/pkg/syscall/syscall_linux.go:429: \nOn 2013/01/27 08:42:34, dfc wrote:\n> If you plan to make this function call a sysnb syscall, you should mention that\n> callers must call this on an fd that is already nonblocking.\n\nI don't think we should make that change.  That was just a suggestion for testing whether a non-blocking accept makes a difference.  syscall.Accept4 should always be blocking.  We could consider syscall.Accept4NB if we go that route.",
			"disapproval": false,
			"date": "2013-01-28 05:10:58.606900",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I'd rather not.  The shorthand is good for returning an error, but this is err == nil, not the usual form.\n\nthen you need to tweek func signature to\navoid build failures on BSD bros.",
			"disapproval": false,
			"date": "2013-01-28 06:19:34.397380",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 7227043: net, syscall: use accept4 on Linux",
	"created": "2013-01-26 01:47:21.372390",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		7002,
		3021,
		15,
		15001
	],
	"modified": "2013-01-28 16:54:24.686240",
	"closed": true,
	"issue": 7227043
}