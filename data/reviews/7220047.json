{
	"description": "go.net/proxy: fix desired destination address in SOCKS5 CONNECT\n\nBoth types IPv6 IPv4-mapped address and IPv4-compatible\naddress are not allowed to be used in wire protocols.\n\nFixes issue 4709.\n\nThank you raptium for original CL 6922050.",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"raptium@gmail.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"raptium@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org (cc: golang-dev@googlegroups.com, raptium@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-28 12:27:53.106180",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 28, 2013 at 1:23 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> Oh please. Flip-flopping btw Go and C/C++ becomes really hard\r\n> to me recently. No break in switch statements at Go land (and\r\n> playing with break statements at C/C++ lands) is the only way to\r\n> make me happy. ;)\r\n\r\nI do try to be polite in code reviews but that was not intended to be\r\nan optional request.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2013-01-28 18:28:18.378860",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 29, 2013 at 3:28 AM, Adam Langley <agl@golang.org> wrote:\r\n\r\n> I do try to be polite in code reviews but that was not intended to be\r\n> an optional request.\r\n\r\nYes, thank you for the review.\r\n\r\nOn Tue, Jan 29, 2013 at 3:31 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I've found it useful in those cases to write:\r\n>\r\n>   // ok\r\n>\r\n> instead of break. Then it's clear that you're marking an empty body\r\n> explicitly.\r\n\r\nWill try, thanks.\r\n",
			"disapproval": false,
			"date": "2013-01-28 18:46:33.714330",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"raptium@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7220047/diff/12002/proxy/socks5.go\nFile proxy/socks5.go (left):\n\nhttps://codereview.appspot.com/7220047/diff/12002/proxy/socks5.go#oldcode67\nproxy/socks5.go:67: break\nah, indeed. I didn't have my Go hat on firmly. None the less, I worry that this is a little too magical. I would prefer to waste an extra line of code to be clear.",
			"disapproval": false,
			"date": "2013-01-28 15:57:30.977040",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"raptium@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go\nFile proxy/proxy_test.go (right):\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode55\nproxy/proxy_test.go:55: type testSOCKS5Dialer struct{}\nOn 2013/01/26 15:23:43, agl1 wrote:\n> This is just a Direct.\n\naha, thanks.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode62\nproxy/proxy_test.go:62: es, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\nOn 2013/01/26 15:23:43, agl1 wrote:\n> es -> ?\n\nchanged to endSystem\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode67\nproxy/proxy_test.go:67: gw, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\nOn 2013/01/26 15:23:43, agl1 wrote:\n> gw -> gateway?\n\nDone.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode79\nproxy/proxy_test.go:79: t.Errorf(\"SOCKS5 failed: %v\", err)\nOn 2013/01/26 15:23:43, agl1 wrote:\n> t.Fatalf rather than return.\n\nDone.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode83\nproxy/proxy_test.go:83: t.Errorf(\"SOCKS5.Dial failed: %v\", err)\nOn 2013/01/26 15:23:43, agl1 wrote:\n> ditto (and throughout).\n\nDone.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode93\nproxy/proxy_test.go:93: defer func() { wg.Done() }()\nOn 2013/01/26 15:23:43, agl1 wrote:\n> I don't think that you need to wrap this in a closure.\n\nyup, thx.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode95\nproxy/proxy_test.go:95: gw.(*net.TCPListener).SetDeadline(time.Now().Add(100 * time.Millisecond))\nOn 2013/01/26 15:23:43, agl1 wrote:\n> I'm wary of making this flakey on slower hardware. Can we do without the\n> timeout?\n\nokay, will drop.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode103\nproxy/proxy_test.go:103: c.SetDeadline(time.Now().Add(100 * time.Millisecond))\nOn 2013/01/26 15:23:43, agl1 wrote:\n> (same here)\n\nDone.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode106\nproxy/proxy_test.go:106: // at your service\nOn 2013/01/26 15:23:43, agl1 wrote:\n> comment seems superfluous.\n\nDone.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode107\nproxy/proxy_test.go:107: if _, err := c.Read(b); err != nil {\nOn 2013/01/26 15:23:43, agl1 wrote:\n> I think this should be a ReadFull to make sure that all the expected bytes are\n> read.\n\nDone.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode117\nproxy/proxy_test.go:117: n, err := c.Read(b)\nOn 2013/01/26 15:23:43, agl1 wrote:\n> also a ReadFull?\n\nDone.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/socks5.go\nFile proxy/socks5.go (left):\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/socks5.go#oldcode67\nproxy/socks5.go:67: break\nnope.",
			"disapproval": false,
			"date": "2013-01-28 12:28:51.877630",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 29, 2013 at 12:57 AM,  <agl@golang.org> wrote:\r\n\r\n> ah, indeed. I didn't have my Go hat on firmly. None the less, I worry\r\n> that this is a little too magical.\r\n\r\nWhen in Rome, we'll do as Romans do.\r\n\r\n> I would prefer to waste an extra line of code to be clear.\r\n\r\nOh please. Flip-flopping btw Go and C/C++ becomes really hard\r\nto me recently. No break in switch statements at Go land (and\r\nplaying with break statements at C/C++ lands) is the only way to\r\nmake me happy. ;)\r\n",
			"disapproval": false,
			"date": "2013-01-28 18:23:46.872450",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"raptium@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, raptium@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-01-26 12:22:27.402750",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"raptium@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go\nFile proxy/proxy_test.go (right):\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode55\nproxy/proxy_test.go:55: type testSOCKS5Dialer struct{}\nThis is just a Direct.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode62\nproxy/proxy_test.go:62: es, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\nes -> ?\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode67\nproxy/proxy_test.go:67: gw, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\ngw -> gateway?\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode79\nproxy/proxy_test.go:79: t.Errorf(\"SOCKS5 failed: %v\", err)\nt.Fatalf rather than return.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode83\nproxy/proxy_test.go:83: t.Errorf(\"SOCKS5.Dial failed: %v\", err)\nditto (and throughout).\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode93\nproxy/proxy_test.go:93: defer func() { wg.Done() }()\nI don't think that you need to wrap this in a closure.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode95\nproxy/proxy_test.go:95: gw.(*net.TCPListener).SetDeadline(time.Now().Add(100 * time.Millisecond))\nI'm wary of making this flakey on slower hardware. Can we do without the timeout?\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode103\nproxy/proxy_test.go:103: c.SetDeadline(time.Now().Add(100 * time.Millisecond))\n(same here)\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode106\nproxy/proxy_test.go:106: // at your service\ncomment seems superfluous.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode107\nproxy/proxy_test.go:107: if _, err := c.Read(b); err != nil {\nI think this should be a ReadFull to make sure that all the expected bytes are read.\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/proxy_test.go#newcode117\nproxy/proxy_test.go:117: n, err := c.Read(b)\nalso a ReadFull?\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/socks5.go\nFile proxy/socks5.go (left):\n\nhttps://codereview.appspot.com/7220047/diff/8001/proxy/socks5.go#oldcode67\nproxy/socks5.go:67: break\nDoesn't this break everything?",
			"disapproval": false,
			"date": "2013-01-26 15:23:43.864500",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"raptium@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=944169afe891&repo=net ***\n\ngo.net/proxy: fix desired destination address in SOCKS5 CONNECT\n\nBoth types IPv6 IPv4-mapped address and IPv4-compatible\naddress are not allowed to be used in wire protocols.\n\nFixes issue 4709.\n\nThank you raptium for original CL 6922050.\n\nR=golang-dev, agl\nCC=golang-dev, raptium\nhttps://codereview.appspot.com/7220047",
			"disapproval": false,
			"date": "2013-01-28 18:24:50.252260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've found it useful in those cases to write:\r\n\r\n  // ok\r\n\r\ninstead of break. Then it's clear that you're marking an empty body\r\nexplicitly.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-28 18:31:09.963130",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"raptium@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, raptium@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-26 13:20:46.613860",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 7220047: go.net/proxy: fix desired destination address in SOCKS5...",
	"created": "2013-01-26 12:19:31.639180",
	"patchsets": [
		1,
		4001,
		8001,
		12002,
		11003
	],
	"modified": "2013-01-28 18:31:10.017420",
	"closed": true,
	"issue": 7220047
}