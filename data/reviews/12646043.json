{
	"description": "reflect: avoid allocation when interface's contents are not addressable\nSee issue 4949 for a full explanation.\n\nAllocs go from 1 to zero in the non-addressable case.\nFixes issue 4949.\n\nBenchmarkInterfaceBig             90           14  -84.01%\nBenchmarkInterfaceSmall           14           14   +0.00%",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-08 03:31:11.251840",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12646043/diff/1/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/12646043/diff/1/src/pkg/reflect/all_test.go#newcode3437\nsrc/pkg/reflect/all_test.go:3437: t.Logf(\"allocs per run: %g\\n\", testing.AllocsPerRun(100, func() { v.Interface() }))\nwhy not test this instead of just log it?\n\nhttps://codereview.appspot.com/12646043/diff/1/src/pkg/reflect/all_test.go#newcode3449\nsrc/pkg/reflect/all_test.go:3449: t.Logf(\"allocs per small interface: %g\\n\", testing.AllocsPerRun(100, func() { v.Interface() }))\nwhy not test this instead of just log it?",
			"disapproval": false,
			"date": "2013-08-08 20:56:00.884340",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e7db7a0c79a4 ***\n\nreflect: avoid allocation when interface's contents are not addressable\nSee issue 4949 for a full explanation.\n\nAllocs go from 1 to zero in the non-addressable case.\nFixes issue 4949.\n\nBenchmarkInterfaceBig             90           14  -84.01%\nBenchmarkInterfaceSmall           14           14   +0.00%\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12646043",
			"disapproval": false,
			"date": "2013-08-09 00:49:09.178210",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThis is consistent with cvtDirect too.\r\n",
			"disapproval": false,
			"date": "2013-08-09 01:40:32.341730",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 12646043: reflect: avoid allocation when interface's contents are...",
	"created": "2013-08-08 03:31:01.963570",
	"patchsets": [
		1,
		6001
	],
	"modified": "2013-08-09 01:40:32.405520",
	"closed": true,
	"issue": 12646043
}