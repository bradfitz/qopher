{
	"description": "go.net/spdy: update SPDY/2 to SPDY/3\n\nUpdate to SPDY/3\nhttp://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3",
	"cc": [
		"adg@golang.org",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"mikioh.mikioh@gmail.com"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not familiar with spdy, so I can only point out\nsome minor (or stylistic) issues.\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go\nFile spdy/dictionary.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go#newcode1\nspdy/dictionary.go:1: // Copyright 2011 The Go Authors. All rights reserved.\nupdate the years to 2013.\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go#newcode10\nspdy/dictionary.go:10: const HeaderDictionary = \"\" +\ndo you want to export this?\n\nalso, if you ultimately want it to be used as []byte,\ni'd suggest you do this:\n\nvar HeaderDictionary = []byte { /* ... */ }\n\nto save the runtime conversion (and copy).",
			"disapproval": false,
			"date": "2013-01-14 17:46:54.034360",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\r\n\r\nOn Mon, Jan 14, 2013 at 5:19 AM,  <block.rxckin.beats@gmail.com> wrote:\r\n\r\n> Update to SPDY/3 (actually following RFC of HTTP2.0 same of spdy/3)\r\n> http://tools.ietf.org/html/draft-ietf-httpbis-http2-00\r\n\r\nIt's still I-D and charters say that the due date will be the end of CY14.\r\n\r\nWell, I have no objection to just following standardized one only and\r\ndrop pre-mature, in-devel or old version support such as spdy/4, spdy/2.\r\n\r\nBut would like to hear others' opinion.\r\n",
			"disapproval": false,
			"date": "2013-01-15 01:57:17.257320",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net/",
			"disapproval": false,
			"date": "2013-01-13 20:19:10.694120",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "fix commenting out to skipping tests.\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/spdy_test.go#newcode616\nspdy/spdy_test.go:616: // func TestNoZeroStreamId(t *testing.T) {\nOn 2013/01/14 00:40:39, adg wrote:\n> rather than commenting them out, just add this to the top:\n> \n> t.Log(\"skipping\") // TODO: update to work with SPDY3\n> return\n\nDone.",
			"disapproval": false,
			"date": "2013-01-14 15:54:38.394960",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we should try to stay updated, especially if somebody has time.  No\r\npoint retaining spdy/2 code at this point.\r\n\r\nOn Mon, Jan 14, 2013 at 5:57 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Hi,\r\n>\r\n> On Mon, Jan 14, 2013 at 5:19 AM,  <block.rxckin.beats@gmail.com> wrote:\r\n>\r\n> > Update to SPDY/3 (actually following RFC of HTTP2.0 same of spdy/3)\r\n> > http://tools.ietf.org/html/draft-ietf-httpbis-http2-00\r\n>\r\n> It's still I-D and charters say that the due date will be the end of CY14.\r\n>\r\n> Well, I have no objection to just following standardized one only and\r\n> drop pre-mature, in-devel or old version support such as spdy/4, spdy/2.\r\n>\r\n> But would like to hear others' opinion.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-15 02:02:01.579820",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7092050/diff/5001/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/spdy_test.go#newcode616\nspdy/spdy_test.go:616: // func TestNoZeroStreamId(t *testing.T) {\nrather than commenting them out, just add this to the top:\n\nt.Log(\"skipping\") // TODO: update to work with SPDY3\nreturn",
			"disapproval": false,
			"date": "2013-01-14 00:40:39.283250",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi, all.\r\n\r\n> It's still I-D and charters say that the due date will be the end of CY14.\r\nyes, HTTP2 is draft now. But this is not go.net/http2 but go.net/spdy.\r\n\r\nso I found out I needed to say \"following SPDY/3 by google \r\nhttp://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3\" (even if \r\nsame spec).\r\n\r\nSome services (i.e. Google, Twitter etc) using SPDY/3 now, and Google \r\nstarts discussing SPDY/4.\r\nso I think it's so natural to update spdy/2 to spdy/3.\r\n\r\nthanks\r\nJxck\r\n\r\nOn Tuesday, January 15, 2013 11:01:59 AM UTC+9, Brad Fitzpatrick wrote:\r\n>\r\n> I think we should try to stay updated, especially if somebody has time. \r\n>  No point retaining spdy/2 code at this point.\r\n>\r\n> On Mon, Jan 14, 2013 at 5:57 PM, Mikio Hara <mikioh...@gmail.com<javascript:>\r\n> > wrote:\r\n>\r\n>> Hi,\r\n>>\r\n>> On Mon, Jan 14, 2013 at 5:19 AM,  <block.rxc...@gmail.com <javascript:>> \r\n>> wrote:\r\n>>\r\n>> > Update to SPDY/3 (actually following RFC of HTTP2.0 same of spdy/3)\r\n>> > http://tools.ietf.org/html/draft-ietf-httpbis-http2-00\r\n>>\r\n>> It's still I-D and charters say that the due date will be the end of CY14.\r\n>>\r\n>> Well, I have no objection to just following standardized one only and\r\n>> drop pre-mature, in-devel or old version support such as spdy/4, spdy/2.\r\n>>\r\n>> But would like to hear others' opinion.\r\n>>\r\n>\r\n>",
			"disapproval": false,
			"date": "2013-01-15 03:25:23.125680",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-14 15:51:49.324650",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 15 January 2013 04:46, <minux.ma@gmail.com> wrote:\r\n\r\n> I'm not familiar with spdy, so I can only point out\r\n> some minor (or stylistic) issues.\r\n>\r\n\r\nSorry, I just added you to this CL because you had authored the most\r\nchanges in go.net/spdy.\r\n",
			"disapproval": false,
			"date": "2013-01-15 04:01:50.559550",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7092050/diff/1002/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode46\nspdy/read.go:46: // Read a frame to SettingFrame\nI would drop all these comments like this one (above and below too).  Only keep the ones that add clarity to the code.  These are just implementing an interface, so it's obvious what they do.\n\nIt just looks noisy and confusing as is, and they're not even in the conventional Go full-sentence style.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode5\nspdy/types.go:5: // Package spdy implements HTTP2.0 (SPDY/3) protocol which is described in\nHTTP/2.0 would be the correct punctuation, but it's not HTTP/2.0 yet, so I'd just say:\n\n// Package spdy implements the SPDY protocol (currently SPDY/3), described in .....\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode53\nspdy/types.go:53: // Separator for multiple Header Values\nCorrect Go style is to use a complete sentence here, starting with the subject, so it stands alone.\n\n// HeaderValueSepator separates multiple header values.\n\nBut really: why is this exported?  Who is expected to need this?\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode164\nspdy/types.go:164: STREAM_IN_USE                       = 8\nWrong case.  See the lines above for Go style.",
			"disapproval": false,
			"date": "2013-01-15 21:17:22.608800",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go\nFile spdy/dictionary.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode1\nspdy/dictionary.go:1: // Copyright 2011 The Go Authors. All rights reserved.\ns/2011/2013/\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode8\nspdy/dictionary.go:8: // This dictionary defined in\nThe dictionary is defined in...\nBut I'd like to drop this line once we pointed out the reference \nin the package description.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode10\nspdy/dictionary.go:10: const HeaderDictionary = \"\" +\nPlease have a look at minux's comments carefully.\n\nI agree with minux, no need to expose HeaderDictionary\nas a part of API and it would be nice to avoid runtime \nconversion in  NewFramer.\n\nvar headerDictionary = []byte { /* ... */ }\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode59\nspdy/read.go:59: // |     value(32)    |\nno need to keep protocol wire format fragments here.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode79\nspdy/read.go:79: // frame.CFHeader.Flags should be 0\nplease drop\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode92\nspdy/read.go:92: // frame.CFHeader.Flags should be 0\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode96\nspdy/read.go:96: // frame.CFHeader.length should be 8\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode118\nspdy/read.go:118: // frame.CFHeader.Flags should be 0\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode122\nspdy/read.go:122: // frame.CFHeader.length should be 8\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode176\nspdy/read.go:176: // | 1 | Version(15) | Type(16) |\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode190\nspdy/read.go:190: // | Flags (8) | Length (24) |\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode198\nspdy/read.go:198: if err = cframe.read(header, f); err != nil { // delegating each Frames read()\nuseful comment?\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode264\nspdy/read.go:264: \nremove blank line\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode286\nspdy/read.go:286: // check Request Header doesn't includes invalid Header\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode293\nspdy/read.go:293: //       listed in mustReqHeaders(type.go)\nif you think it's really needed, you should do. otherwise please drop.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode311\nspdy/read.go:311: // set a decompressor using HeaderDictionary to f.headerDecompressor\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode347\nspdy/read.go:347: // set a decompressor using HeaderDictionary to f.headerDecompressor\nditto\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode23\nspdy/types.go:23: const ( // Noop (0x0005) removed spdy/3\ndrop the comment\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode50\nspdy/types.go:50: // that can be stored in one frame.\nwhy folding?\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode65\nspdy/types.go:65: //  Control Frame Format\ni don't think the wire format in the package docs is helpful.\nplease run godoc and see your changes to the docs.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode154\nspdy/types.go:154: type RSTStatusCode uint32\nperhaps RstStreamStatus might be better because\nspdy/3 defines both session and stream error\nhandlings and RstStreamStatus is used for handling\nstream errors.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode156\nspdy/types.go:156: const ( // 0 is invalid\ndrop the comment\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode157\nspdy/types.go:157: ProtocolError         RSTStatusCode = 1\nperhaps,\n\nRstProtocolError RstStreamStatus = iota + 1\nRstInvalidStream\nRstRefusedStream\n  :\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode271\nspdy/types.go:271: StatusCode       uint32\nyou can make new type GoAwayStatus or SessionStatus\nand provide protocol constants to users.\n\nconst (\n  GoAwayOK GoAwayStatus = 0\n  GoAwayProtocolError = 1\n  GoAwayInternalError = 11\n)\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode384\nspdy/types.go:384: // TODO: need this ?\ndo it or drop.",
			"disapproval": false,
			"date": "2013-01-15 22:44:39.408320",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7092050/diff/1002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode157\nspdy/types.go:157: ProtocolError         RSTStatusCode = 1\nor\n\nconst (\n        ProtocolError RstStreamStatus = iota + 1\n        InvalidStream\n        RefusedStream\n        UnsupportedVersion\n        Cancel\n        InternalError\n        FlowControlError\n        StreamInUse\n        StreamAlreadyClosed\n        InvalidCredentials\n        FlameTooLarge\n)",
			"disapproval": false,
			"date": "2013-01-16 03:02:15.927930",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-20 16:49:30.014070",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All comments has Done.\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go\nFile spdy/dictionary.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go#newcode1\nspdy/dictionary.go:1: // Copyright 2011 The Go Authors. All rights reserved.\nOn 2013/01/14 17:46:54, minux wrote:\n> update the years to 2013.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go#newcode10\nspdy/dictionary.go:10: const HeaderDictionary = \"\" +\nOn 2013/01/14 17:46:54, minux wrote:\n> do you want to export this?\n> \n> also, if you ultimately want it to be used as []byte,\n> i'd suggest you do this:\n> \n> var HeaderDictionary = []byte { /* ... */ }\n> \n> to save the runtime conversion (and copy).\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go\nFile spdy/dictionary.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode1\nspdy/dictionary.go:1: // Copyright 2011 The Go Authors. All rights reserved.\nOn 2013/01/15 22:44:39, mikio wrote:\n> s/2011/2013/\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode8\nspdy/dictionary.go:8: // This dictionary defined in\nOn 2013/01/15 22:44:39, mikio wrote:\n> The dictionary is defined in...\n> But I'd like to drop this line once we pointed out the reference \n> in the package description.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode10\nspdy/dictionary.go:10: const HeaderDictionary = \"\" +\nOn 2013/01/15 22:44:39, mikio wrote:\n> Please have a look at minux's comments carefully.\n> \n> I agree with minux, no need to expose HeaderDictionary\n> as a part of API and it would be nice to avoid runtime \n> conversion in  NewFramer.\n> \n> var headerDictionary = []byte { /* ... */ }\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode46\nspdy/read.go:46: // Read a frame to SettingFrame\nOn 2013/01/15 21:17:22, bradfitz wrote:\n> I would drop all these comments like this one (above and below too).  Only keep\n> the ones that add clarity to the code.  These are just implementing an\n> interface, so it's obvious what they do.\n> \n> It just looks noisy and confusing as is, and they're not even in the\n> conventional Go full-sentence style.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode59\nspdy/read.go:59: // |     value(32)    |\nOn 2013/01/15 22:44:39, mikio wrote:\n> no need to keep protocol wire format fragments here.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode79\nspdy/read.go:79: // frame.CFHeader.Flags should be 0\nOn 2013/01/15 22:44:39, mikio wrote:\n> please drop\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode92\nspdy/read.go:92: // frame.CFHeader.Flags should be 0\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode92\nspdy/read.go:92: // frame.CFHeader.Flags should be 0\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode96\nspdy/read.go:96: // frame.CFHeader.length should be 8\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode96\nspdy/read.go:96: // frame.CFHeader.length should be 8\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode118\nspdy/read.go:118: // frame.CFHeader.Flags should be 0\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode122\nspdy/read.go:122: // frame.CFHeader.length should be 8\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode176\nspdy/read.go:176: // | 1 | Version(15) | Type(16) |\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode190\nspdy/read.go:190: // | Flags (8) | Length (24) |\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode198\nspdy/read.go:198: if err = cframe.read(header, f); err != nil { // delegating each Frames read()\nOn 2013/01/15 22:44:39, mikio wrote:\n> useful comment?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode264\nspdy/read.go:264: \nOn 2013/01/15 22:44:39, mikio wrote:\n> remove blank line\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode286\nspdy/read.go:286: // check Request Header doesn't includes invalid Header\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode293\nspdy/read.go:293: //       listed in mustReqHeaders(type.go)\nI'll think about this implementation later.\nremove now for pending.\nOn 2013/01/15 22:44:39, mikio wrote:\n> if you think it's really needed, you should do. otherwise please drop.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode311\nspdy/read.go:311: // set a decompressor using HeaderDictionary to f.headerDecompressor\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode347\nspdy/read.go:347: // set a decompressor using HeaderDictionary to f.headerDecompressor\nOn 2013/01/15 22:44:39, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode5\nspdy/types.go:5: // Package spdy implements HTTP2.0 (SPDY/3) protocol which is described in\nOn 2013/01/15 21:17:22, bradfitz wrote:\n> HTTP/2.0 would be the correct punctuation, but it's not HTTP/2.0 yet, so I'd\n> just say:\n> \n> // Package spdy implements the SPDY protocol (currently SPDY/3), described in\n> .....\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode23\nspdy/types.go:23: const ( // Noop (0x0005) removed spdy/3\nOn 2013/01/15 22:44:39, mikio wrote:\n> drop the comment\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode50\nspdy/types.go:50: // that can be stored in one frame.\nOn 2013/01/15 22:44:39, mikio wrote:\n> why folding?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode53\nspdy/types.go:53: // Separator for multiple Header Values\nOn 2013/01/15 21:17:22, bradfitz wrote:\n> Correct Go style is to use a complete sentence here, starting with the subject,\n> so it stands alone.\n> \n> // HeaderValueSepator separates multiple header values.\n> \n> But really: why is this exported?  Who is expected to need this?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode65\nspdy/types.go:65: //  Control Frame Format\nOn 2013/01/15 22:44:39, mikio wrote:\n> i don't think the wire format in the package docs is helpful.\n> please run godoc and see your changes to the docs.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode154\nspdy/types.go:154: type RSTStatusCode uint32\nOn 2013/01/15 22:44:39, mikio wrote:\n> perhaps RstStreamStatus might be better because\n> spdy/3 defines both session and stream error\n> handlings and RstStreamStatus is used for handling\n> stream errors.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode156\nspdy/types.go:156: const ( // 0 is invalid\nOn 2013/01/15 22:44:39, mikio wrote:\n> drop the comment\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode157\nspdy/types.go:157: ProtocolError         RSTStatusCode = 1\nOn 2013/01/16 03:02:16, mikio wrote:\n> or\n> \n> const (\n>         ProtocolError RstStreamStatus = iota + 1\n>         InvalidStream\n>         RefusedStream\n>         UnsupportedVersion\n>         Cancel\n>         InternalError\n>         FlowControlError\n>         StreamInUse\n>         StreamAlreadyClosed\n>         InvalidCredentials\n>         FlameTooLarge\n> )\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode157\nspdy/types.go:157: ProtocolError         RSTStatusCode = 1\nOn 2013/01/16 03:02:16, mikio wrote:\n> or\n> \n> const (\n>         ProtocolError RstStreamStatus = iota + 1\n>         InvalidStream\n>         RefusedStream\n>         UnsupportedVersion\n>         Cancel\n>         InternalError\n>         FlowControlError\n>         StreamInUse\n>         StreamAlreadyClosed\n>         InvalidCredentials\n>         FlameTooLarge\n> )\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode164\nspdy/types.go:164: STREAM_IN_USE                       = 8\nOn 2013/01/15 21:17:22, bradfitz wrote:\n> Wrong case.  See the lines above for Go style.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode271\nspdy/types.go:271: StatusCode       uint32\nOn 2013/01/15 22:44:39, mikio wrote:\n> you can make new type GoAwayStatus or SessionStatus\n> and provide protocol constants to users.\n> \n> const (\n>   GoAwayOK GoAwayStatus = 0\n>   GoAwayProtocolError = 1\n>   GoAwayInternalError = 11\n> )\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode384\nspdy/types.go:384: // TODO: need this ?\nI'll think about this implementation later.\nso remove this for pending.\nOn 2013/01/15 22:44:39, mikio wrote:\n> do it or drop.",
			"disapproval": false,
			"date": "2013-01-20 16:52:30.842640",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi all.\r\n\r\nI'm sorry but I'm not familier with this contributing flow.\r\nbut I think that I solved all comments for my patch.\r\n\r\nso please review my new commit.\r\n\r\nthanks\r\nJxck\r\n\r\n2013/1/21 <block.rxckin.beats@gmail.com>\r\n\r\n> All comments has Done.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/5001/spdy/**dictionary.go<https://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go>\r\n> File spdy/dictionary.go (right):\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/5001/spdy/**\r\n> dictionary.go#newcode1<https://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go#newcode1>\r\n> spdy/dictionary.go:1: // Copyright 2011 The Go Authors. All rights\r\n> reserved.\r\n> On 2013/01/14 17:46:54, minux wrote:\r\n>\r\n>> update the years to 2013.\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/5001/spdy/**\r\n> dictionary.go#newcode10<https://codereview.appspot.com/7092050/diff/5001/spdy/dictionary.go#newcode10>\r\n>\r\n> spdy/dictionary.go:10: const HeaderDictionary = \"\" +\r\n> On 2013/01/14 17:46:54, minux wrote:\r\n>\r\n>> do you want to export this?\r\n>>\r\n>\r\n>  also, if you ultimately want it to be used as []byte,\r\n>> i'd suggest you do this:\r\n>>\r\n>\r\n>  var HeaderDictionary = []byte { /* ... */ }\r\n>>\r\n>\r\n>  to save the runtime conversion (and copy).\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**dictionary.go<https://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go>\r\n> File spdy/dictionary.go (right):\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> dictionary.go#newcode1<https://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode1>\r\n> spdy/dictionary.go:1: // Copyright 2011 The Go Authors. All rights\r\n> reserved.\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> s/2011/2013/\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> dictionary.go#newcode8<https://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode8>\r\n> spdy/dictionary.go:8: // This dictionary defined in\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> The dictionary is defined in...\r\n>> But I'd like to drop this line once we pointed out the reference\r\n>> in the package description.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> dictionary.go#newcode10<https://codereview.appspot.com/7092050/diff/1002/spdy/dictionary.go#newcode10>\r\n> spdy/dictionary.go:10: const HeaderDictionary = \"\" +\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> Please have a look at minux's comments carefully.\r\n>>\r\n>\r\n>  I agree with minux, no need to expose HeaderDictionary\r\n>> as a part of API and it would be nice to avoid runtime\r\n>> conversion in  NewFramer.\r\n>>\r\n>\r\n>  var headerDictionary = []byte { /* ... */ }\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**read.go<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go>\r\n> File spdy/read.go (right):\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode46<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode46>\r\n> spdy/read.go:46: // Read a frame to SettingFrame\r\n> On 2013/01/15 21:17:22, bradfitz wrote:\r\n>\r\n>> I would drop all these comments like this one (above and below too).\r\n>>\r\n> Only keep\r\n>\r\n>> the ones that add clarity to the code.  These are just implementing an\r\n>> interface, so it's obvious what they do.\r\n>>\r\n>\r\n>  It just looks noisy and confusing as is, and they're not even in the\r\n>> conventional Go full-sentence style.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode59<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode59>\r\n> spdy/read.go:59: // |     value(32)    |\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> no need to keep protocol wire format fragments here.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode79<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode79>\r\n> spdy/read.go:79: // frame.CFHeader.Flags should be 0\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> please drop\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode92<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode92>\r\n> spdy/read.go:92: // frame.CFHeader.Flags should be 0\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode92<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode92>\r\n> spdy/read.go:92: // frame.CFHeader.Flags should be 0\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode96<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode96>\r\n> spdy/read.go:96: // frame.CFHeader.length should be 8\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode96<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode96>\r\n> spdy/read.go:96: // frame.CFHeader.length should be 8\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode118<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode118>\r\n> spdy/read.go:118: // frame.CFHeader.Flags should be 0\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode122<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode122>\r\n> spdy/read.go:122: // frame.CFHeader.length should be 8\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode176<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode176>\r\n> spdy/read.go:176: // | 1 | Version(15) | Type(16) |\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode190<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode190>\r\n> spdy/read.go:190: // | Flags (8) | Length (24) |\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode198<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode198>\r\n> spdy/read.go:198: if err = cframe.read(header, f); err != nil { //\r\n> delegating each Frames read()\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> useful comment?\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode264<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode264>\r\n> spdy/read.go:264:\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> remove blank line\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode286<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode286>\r\n> spdy/read.go:286: // check Request Header doesn't includes invalid\r\n> Header\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode293<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode293>\r\n> spdy/read.go:293: //       listed in mustReqHeaders(type.go)\r\n> I'll think about this implementation later.\r\n> remove now for pending.\r\n>\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> if you think it's really needed, you should do. otherwise please drop.\r\n>>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode311<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode311>\r\n> spdy/read.go:311: // set a decompressor using HeaderDictionary to\r\n> f.headerDecompressor\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> read.go#newcode347<https://codereview.appspot.com/7092050/diff/1002/spdy/read.go#newcode347>\r\n> spdy/read.go:347: // set a decompressor using HeaderDictionary to\r\n> f.headerDecompressor\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**types.go<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go>\r\n> File spdy/types.go (right):\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode5<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode5>\r\n> spdy/types.go:5: // Package spdy implements HTTP2.0 (SPDY/3) protocol\r\n> which is described in\r\n> On 2013/01/15 21:17:22, bradfitz wrote:\r\n>\r\n>> HTTP/2.0 would be the correct punctuation, but it's not HTTP/2.0 yet,\r\n>>\r\n> so I'd\r\n>\r\n>> just say:\r\n>>\r\n>\r\n>  // Package spdy implements the SPDY protocol (currently SPDY/3),\r\n>>\r\n> described in\r\n>\r\n>> .....\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode23<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode23>\r\n> spdy/types.go:23: const ( // Noop (0x0005) removed spdy/3\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> drop the comment\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode50<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode50>\r\n> spdy/types.go:50: // that can be stored in one frame.\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> why folding?\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode53<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode53>\r\n> spdy/types.go:53: // Separator for multiple Header Values\r\n> On 2013/01/15 21:17:22, bradfitz wrote:\r\n>\r\n>> Correct Go style is to use a complete sentence here, starting with the\r\n>>\r\n> subject,\r\n>\r\n>> so it stands alone.\r\n>>\r\n>\r\n>  // HeaderValueSepator separates multiple header values.\r\n>>\r\n>\r\n>  But really: why is this exported?  Who is expected to need this?\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode65<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode65>\r\n> spdy/types.go:65: //  Control Frame Format\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> i don't think the wire format in the package docs is helpful.\r\n>> please run godoc and see your changes to the docs.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode154<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode154>\r\n> spdy/types.go:154: type RSTStatusCode uint32\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> perhaps RstStreamStatus might be better because\r\n>> spdy/3 defines both session and stream error\r\n>> handlings and RstStreamStatus is used for handling\r\n>> stream errors.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode156<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode156>\r\n> spdy/types.go:156: const ( // 0 is invalid\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> drop the comment\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode157<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode157>\r\n> spdy/types.go:157: ProtocolError         RSTStatusCode = 1\r\n> On 2013/01/16 03:02:16, mikio wrote:\r\n>\r\n>> or\r\n>>\r\n>\r\n>  const (\r\n>>          ProtocolError RstStreamStatus = iota + 1\r\n>>          InvalidStream\r\n>>          RefusedStream\r\n>>          UnsupportedVersion\r\n>>          Cancel\r\n>>          InternalError\r\n>>          FlowControlError\r\n>>          StreamInUse\r\n>>          StreamAlreadyClosed\r\n>>          InvalidCredentials\r\n>>          FlameTooLarge\r\n>> )\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode157<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode157>\r\n> spdy/types.go:157: ProtocolError         RSTStatusCode = 1\r\n> On 2013/01/16 03:02:16, mikio wrote:\r\n>\r\n>> or\r\n>>\r\n>\r\n>  const (\r\n>>          ProtocolError RstStreamStatus = iota + 1\r\n>>          InvalidStream\r\n>>          RefusedStream\r\n>>          UnsupportedVersion\r\n>>          Cancel\r\n>>          InternalError\r\n>>          FlowControlError\r\n>>          StreamInUse\r\n>>          StreamAlreadyClosed\r\n>>          InvalidCredentials\r\n>>          FlameTooLarge\r\n>> )\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode164<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode164>\r\n> spdy/types.go:164: STREAM_IN_USE                       = 8\r\n> On 2013/01/15 21:17:22, bradfitz wrote:\r\n>\r\n>> Wrong case.  See the lines above for Go style.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode271<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode271>\r\n> spdy/types.go:271: StatusCode       uint32\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> you can make new type GoAwayStatus or SessionStatus\r\n>> and provide protocol constants to users.\r\n>>\r\n>\r\n>  const (\r\n>>    GoAwayOK GoAwayStatus = 0\r\n>>    GoAwayProtocolError = 1\r\n>>    GoAwayInternalError = 11\r\n>> )\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/diff/1002/spdy/**\r\n> types.go#newcode384<https://codereview.appspot.com/7092050/diff/1002/spdy/types.go#newcode384>\r\n> spdy/types.go:384: // TODO: need this ?\r\n> I'll think about this implementation later.\r\n> so remove this for pending.\r\n>\r\n> On 2013/01/15 22:44:39, mikio wrote:\r\n>\r\n>> do it or drop.\r\n>>\r\n>\r\n> https://codereview.appspot.**com/7092050/<https://codereview.appspot.com/7092050/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-20 16:55:22.583140",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all done\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/dictionary.go\nFile spdy/dictionary.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/dictionary.go#newcode7\nspdy/dictionary.go:7: // http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3\nOn 2013/01/21 12:04:24, mikio wrote:\n> I think this line is redundant because you already specified \n> protocol version in the package description, so pls drop.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go\nFile spdy/read.go (left):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go#oldcode119\nspdy/read.go:119: // ReadFrame reads SPDY encoded data and returns a decompressed Frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> please revert this line\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go#newcode1\nspdy/read.go:1: // Copyright 2013 The Go Authors. All rights reserved.\nOn 2013/01/21 12:04:24, mikio wrote:\n> apology if we didn't mention that no need to edit copyright lines,\n> no need to update the year. just add it to new files.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/spdy_test.go#newcode1\nspdy/spdy_test.go:1: // Copyright 2013 The Go Authors. All rights reserved.\nOn 2013/01/21 12:04:24, mikio wrote:\n> pls revert\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode1\nspdy/types.go:1: // Copyright 2013 The Go Authors. All rights reserved.\nOn 2013/01/21 12:04:24, mikio wrote:\n> pls revert\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode6\nspdy/types.go:6: // http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3\nOn 2013/01/21 12:04:24, mikio wrote:\n> pls add a full stop\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode56\nspdy/types.go:56: // Use Framer to read and write it.\nOn 2013/01/21 12:04:24, mikio wrote:\n> i think original codes keep around 80 chars long\n> and consistency. why break?\n\nSorry, It's all my fault.\nI'll fix all.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode77\nspdy/types.go:77: // in-memory representation of a SYN_STREAM frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode90\nspdy/types.go:90: // in-memory representation of a SYN_REPLY frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode97\nspdy/types.go:97: // RstStreamStatus represents the status that led to a RST_STREAM\nOn 2013/01/21 12:04:24, mikio wrote:\n> full stop?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode102\nspdy/types.go:102: ProtocolError RstStreamStatus = iota\nOn 2013/01/21 12:04:24, mikio wrote:\n> drop iota for ProtocolError, you've already started w/ blank id.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode116\nspdy/types.go:116: // in-memory representation of a RST_STREAM\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto (revert+full stop)\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode136\nspdy/types.go:136: SettingsUploadBandwidth             SettingsId = 1\nOn 2013/01/21 12:04:24, mikio wrote:\n> iota?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode136\nspdy/types.go:136: SettingsUploadBandwidth             SettingsId = 1\nOn 2013/01/21 12:04:24, mikio wrote:\n> iota?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode148\nspdy/types.go:148: // flag/id/value for a setting in a SETTINGS frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode156\nspdy/types.go:156: // in-memory representation of a SPDY SETTINGS frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode170\nspdy/types.go:170: // in-memory representation of a GOAWAY frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode182\nspdy/types.go:182: GoAwayStatus     uint32\nOn 2013/01/21 12:04:24, mikio wrote:\n> s/uint32/GoAwayStatus/\n\nOh I miss understood sorry. :(\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode186\nspdy/types.go:186: // in-memory representation of a HEADERS frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode194\nspdy/types.go:194: // in-memory representation of a WINDOW_UPDATE frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode201\nspdy/types.go:201: //  TODO: Unused, so not implemented\nOn 2013/01/21 12:04:24, mikio wrote:\n> maybe;\n> \n> TODO: Implement credential frame and related methods\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode202\nspdy/types.go:202: //  Control Frame: CREDENTIAL\nOn 2013/01/21 12:04:24, mikio wrote:\n> no need to keep the wire format here\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode220\nspdy/types.go:220: // in-memory representation of a DATA frame.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode223\nspdy/types.go:223: // Should be 0 for data frames.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode270\nspdy/types.go:270: // including compressing/decompressing payloads.\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go\nFile spdy/write.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode1\nspdy/write.go:1: // Copyright 2013 The Go Authors. All rights reserved.\nOn 2013/01/21 12:04:24, mikio wrote:\n> pls revert\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode15\nspdy/write.go:15: // delegating framer.writeSynStreamFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> pls drop.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode21\nspdy/write.go:21: // delegating framer.writeSynReplayFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode26\nspdy/write.go:26: // Writes a frame to RstStreamFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode44\nspdy/write.go:44: // RST_STREAM Status should not be 0\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode53\nspdy/write.go:53: // Writes a frame to SettingsFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode78\nspdy/write.go:78: // Writes a frame to PingFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode98\nspdy/write.go:98: // Writes a frame to GoAwayFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode118\nspdy/write.go:118: // Writes a frame to HeadersFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode123\nspdy/write.go:123: // Writes a frame to WindowUpdateFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode143\nspdy/write.go:143: // Writes a frame to DataFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode149\nspdy/write.go:149: // Delegates each frames write()\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode154\nspdy/write.go:154: // Write Control bit 1, Version, Type, Flags, Length to buffer\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode156\nspdy/write.go:156: controlBit := uint16(0x8000)\nOn 2013/01/21 12:04:24, mikio wrote:\n> pls revert\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode172\nspdy/write.go:172: // repeats length of name & name, length of value & value\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode204\nspdy/write.go:204: // writes a name/value using zlib.NewWriterLevelDict\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode212\nspdy/write.go:212: writer = f.headerCompressor // zlib.NewWriterLevelDict\nOn 2013/01/21 12:04:24, mikio wrote:\n> drop the comment\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode251\nspdy/write.go:251: // writes a name/value using zlib.NewWriterLevelDict\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode259\nspdy/write.go:259: writer = f.headerCompressor // zlib.NewWriterLevelDict\nOn 2013/01/21 12:04:24, mikio wrote:\n> drop the comment\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode289\nspdy/write.go:289: // writes a name/value using zlib.NewWriterLevelDict\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode297\nspdy/write.go:297: writer = f.headerCompressor // zlib.NewWriterLevelDict\nOn 2013/01/21 12:04:24, mikio wrote:\n> drop the comment\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode325\nspdy/write.go:325: // Writes a frame to DataFrame\nOn 2013/01/21 12:04:24, mikio wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2013-01-22 15:56:26.932720",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sorry, still minor, stylistic comments.\n\nI think it would be nice to keep your changes small, \nconcise and consistent because it makes us easy to \nfocus on the subject of this CL.\n\nthanks for tackling this.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/dictionary.go\nFile spdy/dictionary.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/dictionary.go#newcode7\nspdy/dictionary.go:7: // http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3\nI think this line is redundant because you already specified \nprotocol version in the package description, so pls drop.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go\nFile spdy/read.go (left):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go#oldcode119\nspdy/read.go:119: // ReadFrame reads SPDY encoded data and returns a decompressed Frame.\nplease revert this line\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/read.go#newcode1\nspdy/read.go:1: // Copyright 2013 The Go Authors. All rights reserved.\napology if we didn't mention that no need to edit copyright lines,\nno need to update the year. just add it to new files.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/spdy_test.go#newcode1\nspdy/spdy_test.go:1: // Copyright 2013 The Go Authors. All rights reserved.\npls revert\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode1\nspdy/types.go:1: // Copyright 2013 The Go Authors. All rights reserved.\npls revert\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode6\nspdy/types.go:6: // http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3\npls add a full stop\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode56\nspdy/types.go:56: // Use Framer to read and write it.\ni think original codes keep around 80 chars long\nand consistency. why break?\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode77\nspdy/types.go:77: // in-memory representation of a SYN_STREAM frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode90\nspdy/types.go:90: // in-memory representation of a SYN_REPLY frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode97\nspdy/types.go:97: // RstStreamStatus represents the status that led to a RST_STREAM\nfull stop?\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode102\nspdy/types.go:102: ProtocolError RstStreamStatus = iota\ndrop iota for ProtocolError, you've already started w/ blank id.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode116\nspdy/types.go:116: // in-memory representation of a RST_STREAM\nditto (revert+full stop)\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode136\nspdy/types.go:136: SettingsUploadBandwidth             SettingsId = 1\niota?\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode148\nspdy/types.go:148: // flag/id/value for a setting in a SETTINGS frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode156\nspdy/types.go:156: // in-memory representation of a SPDY SETTINGS frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode170\nspdy/types.go:170: // in-memory representation of a GOAWAY frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode182\nspdy/types.go:182: GoAwayStatus     uint32\ns/uint32/GoAwayStatus/\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode186\nspdy/types.go:186: // in-memory representation of a HEADERS frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode194\nspdy/types.go:194: // in-memory representation of a WINDOW_UPDATE frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode201\nspdy/types.go:201: //  TODO: Unused, so not implemented\nmaybe;\n\nTODO: Implement credential frame and related methods\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode202\nspdy/types.go:202: //  Control Frame: CREDENTIAL\nno need to keep the wire format here\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode220\nspdy/types.go:220: // in-memory representation of a DATA frame.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode223\nspdy/types.go:223: // Should be 0 for data frames.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode270\nspdy/types.go:270: // including compressing/decompressing payloads.\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go\nFile spdy/write.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode1\nspdy/write.go:1: // Copyright 2013 The Go Authors. All rights reserved.\npls revert\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode15\nspdy/write.go:15: // delegating framer.writeSynStreamFrame\npls drop.\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode21\nspdy/write.go:21: // delegating framer.writeSynReplayFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode26\nspdy/write.go:26: // Writes a frame to RstStreamFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode44\nspdy/write.go:44: // RST_STREAM Status should not be 0\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode53\nspdy/write.go:53: // Writes a frame to SettingsFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode78\nspdy/write.go:78: // Writes a frame to PingFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode98\nspdy/write.go:98: // Writes a frame to GoAwayFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode118\nspdy/write.go:118: // Writes a frame to HeadersFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode123\nspdy/write.go:123: // Writes a frame to WindowUpdateFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode143\nspdy/write.go:143: // Writes a frame to DataFrame\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode149\nspdy/write.go:149: // Delegates each frames write()\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode154\nspdy/write.go:154: // Write Control bit 1, Version, Type, Flags, Length to buffer\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode156\nspdy/write.go:156: controlBit := uint16(0x8000)\npls revert\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode172\nspdy/write.go:172: // repeats length of name & name, length of value & value\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode204\nspdy/write.go:204: // writes a name/value using zlib.NewWriterLevelDict\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode212\nspdy/write.go:212: writer = f.headerCompressor // zlib.NewWriterLevelDict\ndrop the comment\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode251\nspdy/write.go:251: // writes a name/value using zlib.NewWriterLevelDict\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode259\nspdy/write.go:259: writer = f.headerCompressor // zlib.NewWriterLevelDict\ndrop the comment\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode289\nspdy/write.go:289: // writes a name/value using zlib.NewWriterLevelDict\nditto\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode297\nspdy/write.go:297: writer = f.headerCompressor // zlib.NewWriterLevelDict\ndrop the comment\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/write.go#newcode325\nspdy/write.go:325: // Writes a frame to DataFrame\nditto",
			"disapproval": false,
			"date": "2013-01-21 12:04:23.936990",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7092050/diff/17001/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/17001/spdy/types.go#newcode182\nspdy/types.go:182: GoAwayStatus     uint32\nand\n\ns/^\\tGoAwayStatus/^\\tStatus/",
			"disapproval": false,
			"date": "2013-01-21 16:09:38.559130",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks.\n\njust realized there's no client/server test cases so far.\ndo you plan to implement those tests in following CLs?\ne.g.,\nhg mv spdy_test.go framer_test.go\nhg add client_test.go server_test.go\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go#newcode11\nspdy/spdy_test.go:11: \"fmt\"\nnot used\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go#newcode615\nspdy/spdy_test.go:615: t.Log(\"skipping\") // TODO: update to work with SPDY3\nyou can use t.Skipf(\"skipping: TODO: update to work with SPDY/3\")\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode38\nspdy/types.go:38: ControlFlagFin ControlFlags = 0x01\nother flags?\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode82\nspdy/types.go:82: // Note, only 3 highest bits currently used\nlooks like this comment is wrong as an API description.\nor should we, I mean API users, set the Priority field of\nSynStreamFrame to pri<<5 before WriteFrame?\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode161\nspdy/types.go:161: // in-memory representation of a PING frame.\nrevert\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode167\nspdy/types.go:167: // GoAwayFrame is the unpacked, in-memory representation of a GOAWAY frame.\nmove to just before type GoAwayFrame line.\nalso pls document not only GoAwayFrame but GoAwayStatus.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode173\nspdy/types.go:173: GoAwayInternalError              = 11\nyou can also use iota here,\nthe value 11 is just an errata and spdy/3 already fixed it.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/write.go\nFile spdy/write.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/write.go#newcode302\nspdy/write.go:302: // Validate DataFrame.\ndrop",
			"disapproval": false,
			"date": "2013-01-23 02:24:23.656560",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-22 15:56:17.044770",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "still in progress but some confirm.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go#newcode615\nspdy/spdy_test.go:615: t.Log(\"skipping\") // TODO: update to work with SPDY3\nOn 2013/01/23 02:24:23, mikio wrote:\n> you can use t.Skipf(\"skipping: TODO: update to work with SPDY/3\")\n\nIs that implemented ?\nhttp://golang.org/pkg/testing/\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode82\nspdy/types.go:82: // Note, only 3 highest bits currently used\nNo, users dosen't need to care about that.\nthis notes says about implementation.\nso, Should I drop this Notes ?\n\nOn 2013/01/23 02:24:23, mikio wrote:\n> looks like this comment is wrong as an API description.\n> or should we, I mean API users, set the Priority field of\n> SynStreamFrame to pri<<5 before WriteFrame?\n>",
			"disapproval": false,
			"date": "2013-01-25 03:57:46.583140",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 25, 2013 at 12:57 PM,  <block.rxckin.beats@gmail.com> wrote:\r\n\r\n>> you can use t.Skipf(\"skipping: TODO: update to work with SPDY/3\")\r\n>\r\n> Is that implemented ?\r\n\r\nsubmitted to tip yesterday.\r\nbut I think you can fix that test for spdy/3, so please do.\r\n\r\n> spdy/types.go:82: // Note, only 3 highest bits currently used\r\n> No, users dosen't need to care about that.\r\n> this notes says about implementation.\r\n> so, Should I drop this Notes ?\r\n\r\nyup.\r\n\r\nalso I'd recommend to add a simple comment to each exposed field which\r\nseems vague.\r\n\r\ne.g.,\r\n\r\n// SynStreamFrame is the unpacked, in-memory representation of a SYN_STREAM\r\n// frame.\r\ntype SynStreamFrame struct {\r\n        CFHeader             ControlFrameHeader\r\n        StreamId             uint32 // stream identifier\r\n        AssociatedToStreamId uint32 // stream identifer for a stream\r\nwhich this stream is associated to\r\n        Priority uint8 // 3-bit priority\r\n        Slot     uint8 // index in the server's credential vector of\r\nthe client certificate\r\n        Headers  http.Header\r\n}\r\n",
			"disapproval": false,
			"date": "2013-01-25 04:15:17.326570",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> just realized there's no client/server test cases so far.\n> do you plan to implement those tests in following CLs?\n\nnever mind, someone will add it someday.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode100\nspdy/types.go:100: _ RstStreamStatus = iota\nProtocolError RstStreamStatus = iota +1\n\ngodoc doesn't display unexposed things.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode134\nspdy/types.go:134: _ SettingsId = iota\nditto",
			"disapproval": false,
			"date": "2013-01-25 04:28:48.888320",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all done.\n\n>> just realized there's no client/server test cases so far.\n>> do you plan to implement those tests in following CLs?\n\n> never mind, someone will add it someday.\n\nI want to focus this CL for parser. I'll do that in another CLs.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go#newcode11\nspdy/spdy_test.go:11: \"fmt\"\nOn 2013/01/23 02:24:23, mikio wrote:\n> not used\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/spdy_test.go#newcode615\nspdy/spdy_test.go:615: t.Log(\"skipping\") // TODO: update to work with SPDY3\nOn 2013/01/25 03:57:46, Jxck wrote:\n> On 2013/01/23 02:24:23, mikio wrote:\n> > you can use t.Skipf(\"skipping: TODO: update to work with SPDY/3\")\n> \n> Is that implemented ?\n> http://golang.org/pkg/testing/\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode38\nspdy/types.go:38: ControlFlagFin ControlFlags = 0x01\nOn 2013/01/23 02:24:23, mikio wrote:\n> other flags?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode82\nspdy/types.go:82: // Note, only 3 highest bits currently used\nOn 2013/01/25 03:57:46, Jxck wrote:\n> No, users dosen't need to care about that.\n> this notes says about implementation.\n> so, Should I drop this Notes ?\n> \n> On 2013/01/23 02:24:23, mikio wrote:\n> > looks like this comment is wrong as an API description.\n> > or should we, I mean API users, set the Priority field of\n> > SynStreamFrame to pri<<5 before WriteFrame?\n> > \n> \n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode100\nspdy/types.go:100: _ RstStreamStatus = iota\nOn 2013/01/25 04:28:49, mikio wrote:\n> ProtocolError RstStreamStatus = iota +1\n> \n> godoc doesn't display unexposed things.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode134\nspdy/types.go:134: _ SettingsId = iota\nOn 2013/01/25 04:28:49, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode161\nspdy/types.go:161: // in-memory representation of a PING frame.\nOn 2013/01/23 02:24:23, mikio wrote:\n> revert\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode167\nspdy/types.go:167: // GoAwayFrame is the unpacked, in-memory representation of a GOAWAY frame.\nOn 2013/01/23 02:24:23, mikio wrote:\n> move to just before type GoAwayFrame line.\n> also pls document not only GoAwayFrame but GoAwayStatus.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/types.go#newcode173\nspdy/types.go:173: GoAwayInternalError              = 11\nOn 2013/01/23 02:24:23, mikio wrote:\n> you can also use iota here,\n> the value 11 is just an errata and spdy/3 already fixed it.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/write.go\nFile spdy/write.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/24002/spdy/write.go#newcode302\nspdy/write.go:302: // Validate DataFrame.\nOn 2013/01/23 02:24:23, mikio wrote:\n> drop\n\nDone.",
			"disapproval": false,
			"date": "2013-01-27 21:47:51.137220",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-27 21:48:48.355060",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks close. have you already signed the CLA per http://golang.org/doc/contribute.html#copyright ?\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode151\nspdy/read.go:151: if (firstWord & 0x80000000) != 0 {\nunnecessary parens\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode153\nspdy/read.go:153: version := uint16(0x7fff & (firstWord >> 16))\n version := uint16(firstWord >> 16 & 0x7fff)\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode244\nspdy/read.go:244: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nunnecessary parens\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode276\nspdy/read.go:276: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode308\nspdy/read.go:308: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/spdy_test.go#newcode614\nspdy/spdy_test.go:614: t.Skipf(\"skipping: TODO: update to work with SPDY/3\")\nsorry, I changed my mind; opting not to apply t.Skip to to the subrepos makes sense for both Go 1 and 1.1. so pls revert testing.Skip here. thanks.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode81\nspdy/types.go:81: StreamId             uint32\nwouldn't StreamId be the better type here?\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode116\nspdy/types.go:116: StreamId uint32\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode182\nspdy/types.go:182: StreamId uint32\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode199\nspdy/types.go:199: StreamId uint32\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode222\nspdy/types.go:222: StreamId uint32\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go\nFile spdy/write.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode60\nspdy/write.go:60: flagId := (uint32(flagIdValue.Flag) << 24) | uint32(flagIdValue.Id)\nunnecessary parens\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode148\nspdy/write.go:148: flagsAndLength := (uint32(h.Flags) << 24) | h.length\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode310\nspdy/write.go:310: flagsAndLength := (uint32(frame.Flags) << 24) | uint32(len(frame.Data))\nditto\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode317\nspdy/write.go:317: \ndrop blank line",
			"disapproval": false,
			"date": "2013-01-31 13:12:24.417930",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all done.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode151\nspdy/read.go:151: if (firstWord & 0x80000000) != 0 {\nOn 2013/01/31 13:12:24, mikio wrote:\n> unnecessary parens\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode153\nspdy/read.go:153: version := uint16(0x7fff & (firstWord >> 16))\nOn 2013/01/31 13:12:24, mikio wrote:\n>  version := uint16(firstWord >> 16 & 0x7fff)\n>  \n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode244\nspdy/read.go:244: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nOn 2013/01/31 13:12:24, mikio wrote:\n> unnecessary parens\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode276\nspdy/read.go:276: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode308\nspdy/read.go:308: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/spdy_test.go\nFile spdy/spdy_test.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/spdy_test.go#newcode614\nspdy/spdy_test.go:614: t.Skipf(\"skipping: TODO: update to work with SPDY/3\")\nOn 2013/01/31 13:12:24, mikio wrote:\n> sorry, I changed my mind; opting not to apply t.Skip to to the subrepos makes\n> sense for both Go 1 and 1.1. so pls revert testing.Skip here. thanks.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode81\nspdy/types.go:81: StreamId             uint32\nOn 2013/01/31 13:12:24, mikio wrote:\n> wouldn't StreamId be the better type here?\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode116\nspdy/types.go:116: StreamId uint32\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode182\nspdy/types.go:182: StreamId uint32\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode199\nspdy/types.go:199: StreamId uint32\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode222\nspdy/types.go:222: StreamId uint32\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go\nFile spdy/write.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode60\nspdy/write.go:60: flagId := (uint32(flagIdValue.Flag) << 24) | uint32(flagIdValue.Id)\nOn 2013/01/31 13:12:24, mikio wrote:\n> unnecessary parens\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode148\nspdy/write.go:148: flagsAndLength := (uint32(h.Flags) << 24) | h.length\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode310\nspdy/write.go:310: flagsAndLength := (uint32(frame.Flags) << 24) | uint32(len(frame.Data))\nOn 2013/01/31 13:12:24, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode317\nspdy/write.go:317: \nOn 2013/01/31 13:12:24, mikio wrote:\n> drop blank line\n\nDone.",
			"disapproval": false,
			"date": "2013-02-02 14:05:44.593150",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-03 07:41:27.496030",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> done\r\n\r\nnot all.\r\n",
			"disapproval": false,
			"date": "2013-02-03 09:07:39.191630",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this would be final tweaks.\n\nPlease change the CL description to refer the correct one, not IETF I-D.\n\nAlso please fix a minor typo in the CL description:\n\n>But CREDENTIAL frame is not implemented, because this frame\n>is under discussion and SPEC is unclear.\n>And I commented out some test because they are too fragile\n>(havily depends on frame definition).\n\ns/havily/heavily/\n\nWait, hm, I'd like to drop those lines from the CL description because\nit looks not accurate. Thanks.\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode47\nspdy/types.go:47: DataFlagCompressed           = 0x02\nas per chap. 4.5 in the spec, this flag is obsoleted in spdy/3.\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode66\nspdy/types.go:66: version   uint16 // spdy version number (15-bit)\n// spdy version number\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode69\nspdy/types.go:69: length    uint32 // length of data field (24-bit)\n// length of data field\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode77\nspdy/types.go:77: type StreamId uint32\npls add a comment.\n// StreamId represents a 31-bit value identifying the stream.\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode83\nspdy/types.go:83: StreamId             StreamId\nwe now have a concrete type StreamId, so it looks a bit redundant.\nyou can do;\n    s/StreamId/Id/,\n    s/AssociatedToStreamId/AssociatedToId/,\n    s/LastGoodStreamId/LastGoodId/,\nif you'd like to do.",
			"disapproval": false,
			"date": "2013-02-04 06:58:17.665420",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-02 14:08:25.277590",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> looks close. have you already signed the CLA per\nYes. now processing.\n\nOn 2013/01/31 13:12:24, mikio wrote:\n> looks close. have you already signed the CLA per\n> http://golang.org/doc/contribute.html#copyright ?\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/read.go\n> File spdy/read.go (right):\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode151\n> spdy/read.go:151: if (firstWord & 0x80000000) != 0 {\n> unnecessary parens\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode153\n> spdy/read.go:153: version := uint16(0x7fff & (firstWord >> 16))\n>  version := uint16(firstWord >> 16 & 0x7fff)\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode244\n> spdy/read.go:244: if !f.headerCompressionDisabled && ((err == io.EOF &&\n> f.headerReader.N == 0) || f.headerReader.N != 0) {\n> unnecessary parens\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode276\n> spdy/read.go:276: if !f.headerCompressionDisabled && ((err == io.EOF &&\n> f.headerReader.N == 0) || f.headerReader.N != 0) {\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode308\n> spdy/read.go:308: if !f.headerCompressionDisabled && ((err == io.EOF &&\n> f.headerReader.N == 0) || f.headerReader.N != 0) {\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/spdy_test.go\n> File spdy/spdy_test.go (right):\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/spdy_test.go#newcode614\n> spdy/spdy_test.go:614: t.Skipf(\"skipping: TODO: update to work with SPDY/3\")\n> sorry, I changed my mind; opting not to apply t.Skip to to the subrepos makes\n> sense for both Go 1 and 1.1. so pls revert testing.Skip here. thanks.\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/types.go\n> File spdy/types.go (right):\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode81\n> spdy/types.go:81: StreamId             uint32\n> wouldn't StreamId be the better type here?\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode116\n> spdy/types.go:116: StreamId uint32\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode182\n> spdy/types.go:182: StreamId uint32\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode199\n> spdy/types.go:199: StreamId uint32\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/types.go#newcode222\n> spdy/types.go:222: StreamId uint32\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/write.go\n> File spdy/write.go (right):\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode60\n> spdy/write.go:60: flagId := (uint32(flagIdValue.Flag) << 24) |\n> uint32(flagIdValue.Id)\n> unnecessary parens\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode148\n> spdy/write.go:148: flagsAndLength := (uint32(h.Flags) << 24) | h.length\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode310\n> spdy/write.go:310: flagsAndLength := (uint32(frame.Flags) << 24) |\n> uint32(len(frame.Data))\n> ditto\n> \n> https://codereview.appspot.com/7092050/diff/34001/spdy/write.go#newcode317\n> spdy/write.go:317: \n> drop blank line",
			"disapproval": false,
			"date": "2013-02-02 14:09:53.547430",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7092050/diff/34001/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode244\nspdy/read.go:244: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nOn 2013/02/02 14:05:44, Jxck wrote:\n> On 2013/01/31 13:12:24, mikio wrote:\n> > unnecessary parens\n> \n> Done.\n\nare these the same?\n\nif A && B || C\n  and\nif A && (B || C)",
			"disapproval": false,
			"date": "2013-02-02 16:04:41.214740",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/34001/spdy/read.go#newcode244\nspdy/read.go:244: if !f.headerCompressionDisabled && ((err == io.EOF && f.headerReader.N == 0) || f.headerReader.N != 0) {\nooops !\nsorry :(\n\nOn 2013/02/02 16:04:41, mikio wrote:\n> On 2013/02/02 14:05:44, Jxck wrote:\n> > On 2013/01/31 13:12:24, mikio wrote:\n> > > unnecessary parens\n> > \n> > Done.\n> \n> are these the same?\n> \n> if A && B || C\n>   and\n> if A && (B || C)",
			"disapproval": false,
			"date": "2013-02-03 07:44:43.274020",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com, minux.ma@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-03 23:10:37.083210",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7092050/diff/46002/spdy/read.go\nFile spdy/read.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/read.go#newcode276\nspdy/read.go:276: if !f.headerCompressionDisabled && (err == io.EOF && f.headerReader.N == 0 || f.headerReader.N != 0) {\nerr == EOF && N == 0 || N != 0\n\nis equivalent to\n\nerr == EOF || N != 0\n\nIs that what you mean?",
			"disapproval": false,
			"date": "2013-02-04 07:49:12.047120",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi R\u00e9my,\n\n> Is that what you mean?\n\nI guess it just wants to caputure the wrong compressed\npayload size error from the results of io.LimitedReader.\nio.LimitedReader returns 0, io.EOF when N <= 0.",
			"disapproval": false,
			"date": "2013-02-05 04:36:18.466120",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go\nFile spdy/types.go (right):\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode47\nspdy/types.go:47: DataFlagCompressed           = 0x02\nOn 2013/02/04 06:58:17, mikio wrote:\n> as per chap. 4.5 in the spec, this flag is obsoleted in spdy/3.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode66\nspdy/types.go:66: version   uint16 // spdy version number (15-bit)\nOn 2013/02/04 06:58:17, mikio wrote:\n> // spdy version number\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode69\nspdy/types.go:69: length    uint32 // length of data field (24-bit)\nOn 2013/02/04 06:58:17, mikio wrote:\n> // length of data field \n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode77\nspdy/types.go:77: type StreamId uint32\nOn 2013/02/04 06:58:17, mikio wrote:\n> pls add a comment.\n> // StreamId represents a 31-bit value identifying the stream.\n\nDone.\n\nhttps://codereview.appspot.com/7092050/diff/46002/spdy/types.go#newcode83\nspdy/types.go:83: StreamId             StreamId\nThis name is compatible with frame spec.\nso won't fix.\n\nOn 2013/02/04 06:58:17, mikio wrote:\n> we now have a concrete type StreamId, so it looks a bit redundant.\n> you can do;\n>     s/StreamId/Id/,\n>     s/AssociatedToStreamId/AssociatedToId/,\n>     s/LastGoodStreamId/LastGoodId/,\n> if you'd like to do.",
			"disapproval": false,
			"date": "2013-02-05 14:52:31.156030",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Next step: want to write the server implementation? There's a hook now.\r\n\r\nThen test with Chrome. Once working, so the http.RoundTripper\r\nimplementation.\r\n On Feb 6, 2013 5:48 AM, \"yusuke\" <block.rxckin.beats@gmail.com> wrote:\r\n\r\n> Thanks so much !!\r\n>\r\n> 2013/2/6 <mikioh.mikioh@gmail.com>\r\n>\r\n>> *** Submitted as\r\n>> https://code.google.com/p/go/**source/detail?r=71409a1c89f0&**repo=net<https://code.google.com/p/go/source/detail?r=71409a1c89f0&repo=net>***\r\n>>\r\n>>\r\n>> go.net/spdy: update SPDY/2 to SPDY/3\r\n>>\r\n>> Update to SPDY/3\r\n>> http://www.chromium.org/spdy/**spdy-protocol/spdy-protocol-**draft3<http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3>\r\n>>\r\n>> R=adg, mikioh.mikioh, minux.ma, bradfitz, remyoudompheng\r\n>> CC=golang-dev\r\n>> https://codereview.appspot.**com/7092050<https://codereview.appspot.com/7092050>\r\n>>\r\n>> Committer: Mikio Hara <mikioh.mikioh@gmail.com>\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/7092050/<https://codereview.appspot.com/7092050/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-06 19:34:24.453790",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks so much !!\r\n\r\n2013/2/6 <mikioh.mikioh@gmail.com>\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=71409a1c89f0&**repo=net<https://code.google.com/p/go/source/detail?r=71409a1c89f0&repo=net>***\r\n>\r\n>\r\n> go.net/spdy: update SPDY/2 to SPDY/3\r\n>\r\n> Update to SPDY/3\r\n> http://www.chromium.org/spdy/**spdy-protocol/spdy-protocol-**draft3<http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3>\r\n>\r\n> R=adg, mikioh.mikioh, minux.ma, bradfitz, remyoudompheng\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/7092050<https://codereview.appspot.com/7092050>\r\n>\r\n> Committer: Mikio Hara <mikioh.mikioh@gmail.com>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7092050/<https://codereview.appspot.com/7092050/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-06 13:48:57.981920",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"remyoudompheng@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/05 14:59:41, Jxck wrote:\n> R\u00e9my and Mikio\n> \n> > Is that what you mean?\n> \n> I think it's not equivalent because this case need to\n> find whether payload size is correct or not.\n\nA && B || !B is always equivalent to A || !B\n\nWhy do you think it's different?",
			"disapproval": false,
			"date": "2013-02-11 08:14:46.518310",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, mikioh.mikioh@gmail.com, minux.ma@gmail.com, bradfitz@golang.org, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-05 14:53:16.902930",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Mikioh, feel free to submit when you're happy.\r\n\r\nOn Tue, Feb 5, 2013 at 3:56 PM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> LGTM, thanks.\r\n>\r\n> Wait a half day for others.\r\n>\r\n> https://codereview.appspot.**com/7092050/<https://codereview.appspot.com/7092050/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-06 00:58:39.600520",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm just trying to write server implementation.\r\nbut I think it takes a bit of time for me.\r\n\r\nIf I finish implementation of that,\r\nI'll post here again.\r\n\r\nthanks\r\n\r\n2013/2/7 Brad Fitzpatrick <bradfitz@golang.org>\r\n\r\n> Next step: want to write the server implementation? There's a hook now.\r\n>\r\n> Then test with Chrome. Once working, so the http.RoundTripper\r\n> implementation.\r\n>  On Feb 6, 2013 5:48 AM, \"yusuke\" <block.rxckin.beats@gmail.com> wrote:\r\n>\r\n>> Thanks so much !!\r\n>>\r\n>> 2013/2/6 <mikioh.mikioh@gmail.com>\r\n>>\r\n>>> *** Submitted as\r\n>>> https://code.google.com/p/go/**source/detail?r=71409a1c89f0&**repo=net<https://code.google.com/p/go/source/detail?r=71409a1c89f0&repo=net>***\r\n>>>\r\n>>>\r\n>>> go.net/spdy: update SPDY/2 to SPDY/3\r\n>>>\r\n>>> Update to SPDY/3\r\n>>> http://www.chromium.org/spdy/**spdy-protocol/spdy-protocol-**draft3<http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3>\r\n>>>\r\n>>> R=adg, mikioh.mikioh, minux.ma, bradfitz, remyoudompheng\r\n>>> CC=golang-dev\r\n>>> https://codereview.appspot.**com/7092050<https://codereview.appspot.com/7092050>\r\n>>>\r\n>>> Committer: Mikio Hara <mikioh.mikioh@gmail.com>\r\n>>>\r\n>>>\r\n>>> https://codereview.appspot.**com/7092050/<https://codereview.appspot.com/7092050/>\r\n>>>\r\n>>\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-02-11 07:17:38.611660",
			"approval": false
		},
		{
			"sender": "block.rxckin.beats@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R\u00e9my and Mikio\n\n> Is that what you mean?\n\nI think it's not equivalent because this case need to\nfind whether payload size is correct or not.",
			"disapproval": false,
			"date": "2013-02-05 14:59:41.238130",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, thanks.\n\nWait a half day for others.",
			"disapproval": false,
			"date": "2013-02-05 23:56:18.627150",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"adg@golang.org",
				"mikioh.mikioh@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=71409a1c89f0&repo=net ***\n\ngo.net/spdy: update SPDY/2 to SPDY/3\n\nUpdate to SPDY/3\nhttp://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3\n\nR=adg, mikioh.mikioh, minux.ma, bradfitz, remyoudompheng\nCC=golang-dev\nhttps://codereview.appspot.com/7092050\n\nCommitter: Mikio Hara <mikioh.mikioh@gmail.com>",
			"disapproval": false,
			"date": "2013-02-06 10:24:58.628340",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> A && B || !B is always equivalent to A || !B\n\nyup, addressed in https://codereview.appspot.com/7325046/.\nthanks.",
			"disapproval": false,
			"date": "2013-02-15 06:42:42.396630",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"block.rxckin.beats@gmail.com",
				"mikioh.mikioh@gmail.com",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 20:13:12.497960",
			"approval": false
		}
	],
	"owner_email": "block.rxckin.beats@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Jxck",
	"subject": "code review 7092050: go.net/spdy: update SPDY/2 to SPDY/3",
	"created": "2013-01-13 10:09:54.907260",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		17001,
		24002,
		34001,
		41001,
		47001,
		46002,
		54001
	],
	"modified": "2013-07-20 20:13:13.709370",
	"closed": false,
	"issue": 7092050
}