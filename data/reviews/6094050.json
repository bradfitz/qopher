{
	"description": "runtime: avoid unnecessary zeroization of huge memory blocks\n+move zeroization out of the heap mutex",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-23 12:41:33.541958",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for rsc\n\nhttp://codereview.appspot.com/6094050/diff/8001/src/pkg/runtime/mcentral.c\nFile src/pkg/runtime/mcentral.c (right):\n\nhttp://codereview.appspot.com/6094050/diff/8001/src/pkg/runtime/mcentral.c#newcode210\nsrc/pkg/runtime/mcentral.c:210: s = runtime\u00b7MHeap_Alloc(&runtime\u00b7mheap, npages, c->sizeclass, 0, 1);\nJust a note: since this code is going to walk the whole span anyhow to set up the free list, it would be easy to mark each block as needing to be zeroed when doing that.  I don't know if that would tend to be a win or not.",
			"disapproval": false,
			"date": "2012-05-02 00:25:53.516133",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-02 01:26:38.353262",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/02 00:25:53, iant wrote:\n> LGTM but wait for rsc\n> \n> http://codereview.appspot.com/6094050/diff/8001/src/pkg/runtime/mcentral.c\n> File src/pkg/runtime/mcentral.c (right):\n> \n> http://codereview.appspot.com/6094050/diff/8001/src/pkg/runtime/mcentral.c#newcode210\n> src/pkg/runtime/mcentral.c:210: s = runtime\u00b7MHeap_Alloc(&runtime\u00b7mheap, npages,\n> c->sizeclass, 0, 1);\n> Just a note: since this code is going to walk the whole span anyhow to set up\n> the free list, it would be easy to mark each block as needing to be zeroed when\n> doing that.  I don't know if that would tend to be a win or not.\n\nWell, yes, perhaps mcentral can just mark all blocks as \"needs to be zeroed\".\n\nI would also like to be able to ask mcache/mheap to not zeroize memory, but then still get to know as to whether it's zeroized or not (i.e. you ask mheap to not zeroize, but it says that the block is zeroized anyway).\n\nI have another CL that reduces zeroization during sliceglow:\nhttp://codereview.appspot.com/6100051/diff/5001/src/pkg/runtime/slice.c\nIt would benefit from such feature as well.",
			"disapproval": false,
			"date": "2012-05-02 13:55:13.626553",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=deddee9ec796 ***\n\nruntime: avoid unnecessary zeroization of huge memory blocks\n+move zeroization out of the heap mutex\n\nR=golang-dev, iant, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6094050",
			"disapproval": false,
			"date": "2012-05-02 14:01:33.466567",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6094050: runtime: avoid unnecessary zeroization of huge memory blocks",
	"created": "2012-04-23 10:23:29.740979",
	"patchsets": [
		1,
		3,
		4001,
		6001,
		8001,
		17001
	],
	"modified": "2012-05-02 14:01:35.646196",
	"closed": true,
	"issue": 6094050
}