{
	"description": "strconv: reduce buffer size for multi-precision decimals.\n\nThe longest numbers we have to represent are the smallest denormals.\nTheir decimal mantissa is not longer than 5^1100. Taking into\naccount some extra size for in-place operations, 800 digits are\nenough. This saves time used for zero intiialization of extra\nbytes.\n\n                                        old ns/op  new ns/op    delta\nstrconv_test.BenchmarkAtof64Decimal           521        334   -35.9%\nstrconv_test.BenchmarkAtof64Float             572        391   -31.6%\nstrconv_test.BenchmarkAtof64FloatExp        10242      10036    -2.0%\nstrconv_test.BenchmarkAtof64Big              4229       4029    -4.7%\nstrconv_test.BenchmarkFormatFloatDecimal     1396        934   -33.1%\nstrconv_test.BenchmarkFormatFloat            4295       3341   -22.2%\nstrconv_test.BenchmarkFormatFloatExp        12035      11181    -7.1%\nstrconv_test.BenchmarkFormatFloatBig         4213       3229   -23.4%\nstrconv_test.BenchmarkAppendFloatDecimal     1031        600   -41.8%\nstrconv_test.BenchmarkAppendFloat            3971       3044   -23.3%\nstrconv_test.BenchmarkAppendFloatExp        11699      11003    -5.9%\nstrconv_test.BenchmarkAppendFloatBig         3836       2915   -24.0%",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-16 23:08:23.797492",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Update the TODO that's in that struct?\n\nOn Fri, Dec 16, 2011 at 3:08 PM, <remyoudompheng@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n> remy@archlinux.org),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> strconv: reduce buffer size for multi-precision decimals.\n>\n> The longest numbers we have to represent are the smallest denormals.\n> Their decimal mantissa is not longer than 5^1100. Taking into\n> account some extra size for in-place operations, 800 digits are\n> enough. This saves time used for zero intiialization of extra\n> bytes.\n>\n>                                        old ns/op  new ns/op    delta\n> strconv_test.**BenchmarkAtof64Decimal           521        334   -35.9%\n> strconv_test.**BenchmarkAtof64Float             572        391   -31.6%\n> strconv_test.**BenchmarkAtof64FloatExp        10242      10036    -2.0%\n> strconv_test.**BenchmarkAtof64Big              4229       4029    -4.7%\n> strconv_test.**BenchmarkFormatFloatDecimal     1396        934   -33.1%\n> strconv_test.**BenchmarkFormatFloat            4295       3341   -22.2%\n> strconv_test.**BenchmarkFormatFloatExp        12035      11181    -7.1%\n> strconv_test.**BenchmarkFormatFloatBig         4213       3229   -23.4%\n> strconv_test.**BenchmarkAppendFloatDecimal     1031        600   -41.8%\n> strconv_test.**BenchmarkAppendFloat            3971       3044   -23.3%\n> strconv_test.**BenchmarkAppendFloatExp        11699      11003    -5.9%\n> strconv_test.**BenchmarkAppendFloatBig         3836       2915   -24.0%\n>\n> Please review this at http://codereview.appspot.com/**5491064/<http://codereview.appspot.com/5491064/>\n>\n> Affected files:\n>  M src/pkg/strconv/decimal.go\n>\n>\n> Index: src/pkg/strconv/decimal.go\n> ==============================**==============================**=======\n> --- a/src/pkg/strconv/decimal.go\n> +++ b/src/pkg/strconv/decimal.go\n> @@ -14,9 +14,9 @@\n>  type decimal struct {\n>        // TODO(rsc): Can make d[] a bit smaller and add\n>        // truncated bool;\n> -       d   [2000]byte // digits\n> -       nd  int        // number of digits used\n> -       dp  int        // decimal point\n> +       d   [800]byte // digits\n> +       nd  int       // number of digits used\n> +       dp  int       // decimal point\n>        neg bool\n>  }\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-12-16 23:10:48.591962",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The TODO is for a different idea, which may or may not be possible.\n",
			"disapproval": false,
			"date": "2011-12-16 23:12:11.132751",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-12-19 20:03:50.157388",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ac6c5970cc33 ***\n\nstrconv: reduce buffer size for multi-precision decimals.\n\nThe longest numbers we have to represent are the smallest denormals.\nTheir decimal mantissa is not longer than 5^1100. Taking into\naccount some extra size for in-place operations, 800 digits are\nenough. This saves time used for zero intiialization of extra\nbytes.\n\n                                        old ns/op  new ns/op    delta\nstrconv_test.BenchmarkAtof64Decimal           521        334   -35.9%\nstrconv_test.BenchmarkAtof64Float             572        391   -31.6%\nstrconv_test.BenchmarkAtof64FloatExp        10242      10036    -2.0%\nstrconv_test.BenchmarkAtof64Big              4229       4029    -4.7%\nstrconv_test.BenchmarkFormatFloatDecimal     1396        934   -33.1%\nstrconv_test.BenchmarkFormatFloat            4295       3341   -22.2%\nstrconv_test.BenchmarkFormatFloatExp        12035      11181    -7.1%\nstrconv_test.BenchmarkFormatFloatBig         4213       3229   -23.4%\nstrconv_test.BenchmarkAppendFloatDecimal     1031        600   -41.8%\nstrconv_test.BenchmarkAppendFloat            3971       3044   -23.3%\nstrconv_test.BenchmarkAppendFloatExp        11699      11003    -5.9%\nstrconv_test.BenchmarkAppendFloatBig         3836       2915   -24.0%\n\nR=golang-dev, bradfitz, rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5491064\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-19 20:03:57.352514",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5491064: strconv: reduce buffer size for multi-precision decimals.",
	"created": "2011-12-16 23:08:12.398297",
	"patchsets": [
		1,
		2001,
		3001
	],
	"modified": "2011-12-19 20:20:51.274244",
	"closed": true,
	"issue": 5491064
}