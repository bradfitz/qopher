{
	"description": "go spec: restrictions for index and slice expressions\n\nAt the moment, gc and gccgo report compile-\ntime errors for certain constant indexes that\nare out of bounds. The spec however requests\na run-time panic for out-of-bounds indexes\n(http://tip.golang.org/ref/spec#Indexes).\n\nDocument the status quo.\n\nFixes issue 4231.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6699048/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6699048/diff/4001/doc/go_spec.html#newcode2504\ndoc/go_spec.html:2504: <li>if <code>x</code> is a <a href=\"#Constant_expressions\">constant expression</a> it must be in range\nThis doesn't work, because in general the compiler can not know the length of a slice.  That is, the compiler can not whether a non-negative constant expression is in range or not.",
			"disapproval": false,
			"date": "2012-10-15 23:41:58.718390",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-15 23:24:29.802790",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6699048/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6699048/diff/4001/doc/go_spec.html#newcode2504\ndoc/go_spec.html:2504: <li>if <code>x</code> is a <a href=\"#Constant_expressions\">constant expression</a> it must be in range\nOn 2012/10/15 23:41:59, iant wrote:\n> This doesn't work, because in general the compiler can not know the length of a\n> slice.  That is, the compiler can not whether a non-negative constant expression\n> is in range or not.\n\nSigh, of course not. I meant to separate the two (after all, I just coded this in the type checker), but in the rush I missed that this is both for arrays and slices. Update forthcoming.",
			"disapproval": false,
			"date": "2012-10-16 03:33:26.489160",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-16 04:51:36.595180",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nWhat about slice expressions?",
			"disapproval": false,
			"date": "2012-10-16 13:04:48.635760",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-16 16:44:35.286460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The semantics look good to me. Some wording nits.\n\n\"run time\" is a noun, \"run-time\" is an adjective.\nSo \"at run time\" but \"run-time error\".\n\nThe spec does not have any mention of \"compile time\" before this CL. It talks about programs being valid or invalid. Perhaps we should do the same here.",
			"disapproval": false,
			"date": "2012-10-16 19:04:20.525980",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-17 03:36:34.691890",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=370bc7ed6c28 ***\n\ngo spec: restrictions for index and slice expressions\n\nAt the moment, gc and gccgo report compile-\ntime errors for certain constant indexes that\nare out of bounds. The spec however requests\na run-time panic for out-of-bounds indexes\n(http://tip.golang.org/ref/spec#Indexes).\n\nDocument the status quo.\n\nFixes issue 4231.\n\nR=r, rsc, iant, ken\nCC=golang-dev\nhttp://codereview.appspot.com/6699048\n\nhttp://codereview.appspot.com/6699048/diff/23002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6699048/diff/23002/doc/go_spec.html#newcode2531\ndoc/go_spec.html:2531: if the string <code>a</code> is constant, too</li>\nOn 2012/10/17 17:12:21, iant wrote:\n> s/constant, too/also constant/\n\nDone.",
			"disapproval": false,
			"date": "2012-10-17 18:08:55.609940",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI wouldn't want to push it much farther in the spec.\n\nWe already have the notion of a constant and of a constant expressions and they are important for the language as they define what can be used in types (array lengths), const declarations, and untyped values. For instance, we already say that array lengths must be constant and >= 0. It seems reasonable to restrict other related constructs (like indices and make arguments).\n\nThere's much more that a good compiler could report at compile-time, and I think perhaps it should. But I would be hesitant to make it part of the language spec. As suggested by r, perhaps a serious discussion is warranted.\n\nhttps://codereview.appspot.com/6699048/diff/22002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6699048/diff/22002/doc/go_spec.html#newcode2634\ndoc/go_spec.html:2634: A <a href=\"#Constant_expressions\">constant</a> index must not be negative, and if both indexes\nOn 2012/10/16 22:01:25, r wrote:\n> s/indexes/indices/\n> i looked into it because i was unsure.  according to chanmbers, indexes is the\n> plural for the thing in the back of the book, indices for all other uses\n> including math.\n> there are a couple of other appearances that should be changed too, to be\n> consistent\n\nDone.",
			"disapproval": false,
			"date": "2012-10-16 23:23:18.522190",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6699048/diff/23002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6699048/diff/23002/doc/go_spec.html#newcode2531\ndoc/go_spec.html:2531: if the string <code>a</code> is constant, too</li>\ns/constant, too/also constant/",
			"disapproval": false,
			"date": "2012-10-17 17:12:21.287500",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-16 20:08:52.389560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nalthough i share gri's nervousness.\n\nwe should probably have a serious talk about how much we want to specify what the compiler catches vs. what the execution catches. consider\n\nvar x []int\nx[0] = 1\n\nor the even likelier\n\nvar m map[int]int\nm[0] = 1\n\nthe current spec defines that the compiler cannot report this mistake. do we want to be so prescriptive?\n\nhttp://codereview.appspot.com/6699048/diff/22002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6699048/diff/22002/doc/go_spec.html#newcode2634\ndoc/go_spec.html:2634: A <a href=\"#Constant_expressions\">constant</a> index must not be negative, and if both indexes\ns/indexes/indices/\ni looked into it because i was unsure.  according to chanmbers, indexes is the plural for the thing in the back of the book, indices for all other uses including math.\nthere are a couple of other appearances that should be changed too, to be consistent",
			"disapproval": false,
			"date": "2012-10-16 22:01:25.131440",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6699048: go spec: restrictions for index and slice expressions",
	"created": "2012-10-15 23:23:53.385360",
	"patchsets": [
		1,
		2001,
		4001,
		6002,
		3002,
		10001,
		14002,
		17001,
		19001,
		22001,
		22002,
		23002,
		23003
	],
	"modified": "2012-10-17 18:08:58.952090",
	"closed": true,
	"issue": 6699048
}