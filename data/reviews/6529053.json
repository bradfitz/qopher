{
	"description": "race: sync changes\nThis is a part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-19 22:01:27.796290",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6529053/diff/3007/src/pkg/sync/rwmutex.go\nFile src/pkg/sync/rwmutex.go (right):\n\nhttps://codereview.appspot.com/6529053/diff/3007/src/pkg/sync/rwmutex.go#newcode37\nsrc/pkg/sync/rwmutex.go:37: if raceenabled {\nIt seems for such simple instrumentation raceenabled flag is not actually required, because when !race the functions are empty, and so inliner eliminates the calls. However currently it does eliminate them completely, here is what I see in objdump when if raceenabled is commented out:\n\n        //if raceenabled {\n                raceEnable()\n                raceAcquire(unsafe.Pointer(&rw.readerSem))\n  450e3e:       48 8b 44 24 20          mov    0x20(%rsp),%rax\n  450e43:       48 83 c0 0c             add    $0xc,%rax\n        //}\n\nCan we make the compiler eliminate this completely? The address computation does not have any side effects.",
			"disapproval": false,
			"date": "2012-09-19 22:05:04.566430",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-19 22:01:03.933850",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6529053/diff/3007/src/pkg/sync/rwmutex.go\nFile src/pkg/sync/rwmutex.go (right):\n\nhttps://codereview.appspot.com/6529053/diff/3007/src/pkg/sync/rwmutex.go#newcode9\nsrc/pkg/sync/rwmutex.go:9: \"unsafe\"\nCurrently this breaks build because of the unexpected dependency between packages.\nWhat would be the best solution?\nI can make this dependency legal. Or import unsafe only into race.go (make raceAcquire() accept *uint32), then I want to disable dependency check with -race anyway.",
			"disapproval": false,
			"date": "2012-09-19 22:11:59.485620",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by dsymonds)",
			"disapproval": false,
			"date": "2012-09-20 06:47:38.004090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Code seems fine but I don't understand the part about the import cycle.\n\nhttp://codereview.appspot.com/6529053/diff/3007/src/pkg/sync/rwmutex.go\nFile src/pkg/sync/rwmutex.go (right):\n\nhttp://codereview.appspot.com/6529053/diff/3007/src/pkg/sync/rwmutex.go#newcode9\nsrc/pkg/sync/rwmutex.go:9: \"unsafe\"\nOn 2012/09/19 22:11:59, dvyukov wrote:\n> Currently this breaks build because of the unexpected dependency between\n> packages.\n> What would be the best solution?\n> I can make this dependency legal. Or import unsafe only into race.go (make\n> raceAcquire() accept *uint32), then I want to disable dependency check with\n> -race anyway.\n\nI don't understand what dependency we are talking about. Surely unsafe does not import sync.",
			"disapproval": false,
			"date": "2012-09-24 15:13:40.279390",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Monday, September 24, 2012, rsc wrote:\r\n>\r\n> I don't understand what dependency we are talking about. Surely unsafe\r\n> does not import sync.\r\n>\r\nI think he talks about go/build/deps_test.go\r\nWe don't allow sync to depend on unsafe.\r\n",
			"disapproval": false,
			"date": "2012-09-24 15:37:38.666200",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I think he talks about go/build/deps_test.go\r\n> We don't allow sync to depend on unsafe.\r\n\r\nIf that's all it is, allowing sync to use unsafe is fine.\r\n",
			"disapproval": false,
			"date": "2012-09-24 16:49:15.007410",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, it's go/build/deps_test.\r\nI will update the patch to allow the dep.\r\n\r\n\r\nOn Mon, Sep 24, 2012 at 9:49 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> > I think he talks about go/build/deps_test.go\r\n> > We don't allow sync to depend on unsafe.\r\n>\r\n> If that's all it is, allowing sync to use unsafe is fine.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-24 20:30:25.295290",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/24 20:30:25, dvyukov wrote:\n> Yes, it's go/build/deps_test.\n> I will update the patch to allow the dep.\n\nDone. PTAL.\n\n> On Mon, Sep 24, 2012 at 9:49 AM, Russ Cox <mailto:rsc@golang.org> wrote:\n> \n> > > I think he talks about go/build/deps_test.go\n> > > We don't allow sync to depend on unsafe.\n> >\n> > If that's all it is, allowing sync to use unsafe is fine.\n> >",
			"disapproval": false,
			"date": "2012-09-25 03:47:55.988730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-01 20:18:33.989560",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b1a9967aa474 ***\n\nrace: sync changes\nThis is a part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044\n\nR=rsc, minux.ma\nCC=gobot, golang-dev\nhttp://codereview.appspot.com/6529053",
			"disapproval": false,
			"date": "2012-10-07 18:07:17.275110",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6529053: race: sync changes",
	"created": "2012-09-19 21:37:02.688650",
	"patchsets": [
		1,
		2001,
		5001,
		3007,
		14001,
		18001
	],
	"modified": "2012-10-07 18:07:18.504510",
	"closed": true,
	"issue": 6529053
}