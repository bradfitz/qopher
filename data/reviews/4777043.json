{
	"description": "test: disable sigchld test on Windows\n\nAlex Brainman reports that this is the only test\nthat keeps us from running test/run.",
	"cc": [
		"alex.brainman@gmail.com",
		"lucio.dere@gmail.com",
		"bradfitz@golang.org",
		"hectorchu@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-07-19 14:26:09.235942",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 7/19/11, rsc@golang.org <rsc@golang.org> wrote:\n> Reviewers: brainman,\n>\n> Message:\n> Hello brainman (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> test: disable sigchld test on Windows\n>\n> Alex Brainman reports that this is the only test\n> that keeps us from running test/run.\n>\n> Please review this at http://codereview.appspot.com/4777043/\n>\n> Affected files:\n>    M src/run.bash\n>    M test/sigchld.go\n>\n>\n> Index: src/run.bash\n> ===================================================================\n> --- a/src/run.bash\n> +++ b/src/run.bash\n> @@ -93,7 +93,6 @@\n>   ./timing.sh -test\n>   ) || exit $?\n>\n> -[ \"$GOHOSTOS\" == windows ] ||\n>   (xcd ../test\n>   ./run\n>   ) || exit $?\n> Index: test/sigchld.go\n> ===================================================================\n> --- a/test/sigchld.go\n> +++ b/test/sigchld.go\n> @@ -1,3 +1,4 @@\n> +// [ \"$GOOS\" = windows ] ||\n>   // $G $D/$F.go && $L $F.$A && ./$A.out\n>\n>   // Copyright 2009 The Go Authors. All rights reserved.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-07-19 14:30:35.586133",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Huh?  Could I have pressed the wrong button?  Which one?\n\nLucio.\n\nOn 7/19/11, Lucio De Re <lucio.dere@gmail.com> wrote:\n> On 7/19/11, rsc@golang.org <rsc@golang.org> wrote:\n>> Reviewers: brainman,\n>>\n>> Message:\n>> Hello brainman (cc: golang-dev@googlegroups.com),\n>>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg\n>>\n>>\n>> Description:\n>> test: disable sigchld test on Windows\n>>\n>> Alex Brainman reports that this is the only test\n>> that keeps us from running test/run.\n>>\n>> Please review this at http://codereview.appspot.com/4777043/\n>>\n>> Affected files:\n>>    M src/run.bash\n>>    M test/sigchld.go\n>>\n>>\n>> Index: src/run.bash\n>> ===================================================================\n>> --- a/src/run.bash\n>> +++ b/src/run.bash\n>> @@ -93,7 +93,6 @@\n>>   ./timing.sh -test\n>>   ) || exit $?\n>>\n>> -[ \"$GOHOSTOS\" == windows ] ||\n>>   (xcd ../test\n>>   ./run\n>>   ) || exit $?\n>> Index: test/sigchld.go\n>> ===================================================================\n>> --- a/test/sigchld.go\n>> +++ b/test/sigchld.go\n>> @@ -1,3 +1,4 @@\n>> +// [ \"$GOOS\" = windows ] ||\n>>   // $G $D/$F.go && $L $F.$A && ./$A.out\n>>\n>>   // Copyright 2009 The Go Authors. All rights reserved.\n>>\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2011-07-19 15:00:16.558020",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Tried it:\n\n$ time ./run\n./run: line 42: ulimit: virtual memory: cannot modify limit: Invalid argument\nfail: ./sigchld.go\n47c47\n< survived SIGCHLD\n---\n> cannot open file: sigchld.8\n0 known bugs; 0 unexpected bugs; test output differs\nFAILED\n\nreal    9m42.358s\nuser    0m30.091s\nsys     1m42.747s\n\n$\n\nIt doesn't work as is. I would try and use os *Process.Kill instead to implement it. I'm happy to have a go.\n\nI am more concerned abouth the time it takes to run this test. This is extra 10 minutes (your millage might vary) for every build. Our windows go builder is slowest to finish as is, this change will make it even longer. Perhaps we could enable this test, but run it condition of an environment variable (like I do with DISABLE_CGO). I will set this variable for windows gobuilder, so it doesn't run this test. Alternatively, we could make gobuilder run this test, but only once in a while.\n\nAlex",
			"disapproval": false,
			"date": "2011-07-19 23:41:29.048132",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I lied. I can't make it work on windows.\n\nos *Process.Kill will terminate process immediately and unconditionally. We want the opposite, because it is SIGCHLD - we want it to be ignored. There is no such thing on Windows.\n\nThe closest I can think of is RaiseException (http://msdn.microsoft.com/en-us/library/ms680552%28v=vs.85%29.aspx). But all this will do, it will call our exception handler. Our exception handler just terminates process at this moment (only EXCEPTION_BREAKPOINT is treated differently). We would have to change it. But I'm not sure what to do, just ignore an exception?\n\nI think you were correct from the start. This test is too unix specific. We would just write it in such way that test PASSes on windows.\n\nAlex",
			"disapproval": false,
			"date": "2011-07-20 00:41:23.635624",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "We can just delete the test if that will make the directory work.\nThere is enough other signal handling going on now that it\nis not as helpful as it once was.\n",
			"disapproval": false,
			"date": "2011-07-20 00:46:02.482476",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jul 19, 2011 at 5:48 PM, <alex.brainman@gmail.com> wrote:\n\n> On 2011/07/20 00:46:02, rsc wrote:\n>\n>> We can just delete the test ...\n>>\n>\n> That should do the trick.\n> What about extra time to run the test in windows gobuilder?\n\n\nIt kinda sucks on Linux too.  Windows having slow process creation just\nexacerbates the problem. Rather than the test/run script, we should have a\nGo harness that runs them in parallel and interleaves any error output\nsanely.\n",
			"disapproval": false,
			"date": "2011-07-20 00:51:35.010223",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/07/20 00:46:02, rsc wrote:\n> We can just delete the test ...\n\nThat should do the trick.\nWhat about extra time to run the test in windows gobuilder?",
			"disapproval": false,
			"date": "2011-07-20 00:48:14.758722",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/07/20 00:51:35, bradfitz wrote:\n> \n> ... Rather than the test/run script, we should have a\n> Go harness that runs them in parallel and interleaves any error output\n> sanely.\n\nI agree. I suspect it would improve speed. But we need to try to see it.\n\nAlso, if we reshuffle this process, we might solve another issue that I'm stuck with at this moment: http://code.google.com/p/go/issues/detail?id=1899. This will certainly bite us once we start using Windows 7 on fast PCs.\n\nI have done some work in rewriting this in go, but only the Perl part. I stopped working on it, because we have perl in mingw now. But I could bring it back.\n\nAlso, people with slow PCs will suffer anyways.\n\nAlex",
			"disapproval": false,
			"date": "2011-07-20 01:13:04.019011",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": ">> That should do the trick.\n>> What about extra time to run the test in windows gobuilder?\n>\n> It kinda sucks on Linux too. \u00a0Windows having slow process creation just\n> exacerbates the problem. Rather than the test/run script, we should have a\n> Go harness that runs them in parallel and interleaves any error output\n> sanely.\n\nI really hope we can not spend time on this.\nMaking the test/run directory depend on Go to\nrun the tests is going to really suck for\nbootstrapping.\n\nIt's just cycles.\n",
			"disapproval": false,
			"date": "2011-07-20 01:17:25.336751",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/07/20 00:46:02, rsc wrote:\n> There is enough other signal handling going on ...\n\nWhile we're talking about syscall.Kill, I looked at time package. One of the tests that still fails on windows is TestSleep. TestSleep does syscall.Kill(os.Getpid(), syscall.SIGCHLD) and expects time.Sleep to exit early. This will not work on windows for the same reason. On the other hand we were talking about redoing time.Sleep so it doesn't occupy os thread. Perhaps, we could go ahead with this plan and rewrite TestSleep at the same time. I have no idea where to start, but if you give me some pointers, I will have a go.\n\nAlex",
			"disapproval": false,
			"date": "2011-07-20 01:52:29.848623",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Is there any reason why this can't go in?  I don't mind gobuilder taking longer if it means better test coverage.  I think the diff needs to delete sigchld.go, though.",
			"disapproval": false,
			"date": "2011-09-20 15:14:57.136267",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/20 15:14:57, hector wrote:\n> Is there any reason why this can't go in?  I don't mind gobuilder taking longer\n> if it means better test coverage.  ...\n\n\"Gobuilder taking longer\" is the only reason I know. I do not like the extra time it will take to see builder succeed or fail. In my estimation this will add ~10 minutes to every build (It takes ~15 minutes to build windows build now). That means extra ~20 minutes (currently building build to finish and newest build to start and complete) wait to see if you submit fails or succeeds. If that does not bother anyone, then we should proceed. I will go along with whatever others will decide.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-20 23:41:19.290232",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> \"Gobuilder taking longer\" is the only reason I know. I do not like the\n> extra time it will take to see builder succeed or fail. In my estimation\n> this will add ~10 minutes to every build (It takes ~15 minutes to build\n> windows build now). That means extra ~20 minutes (currently building\n> build to finish and newest build to start and complete) wait to see if\n> you submit fails or succeeds. If that does not bother anyone, then we\n> should proceed. I will go along with whatever others will decide.\n\nWhat takes so long?  Running the tests leaves\na $GOROOT/test/timing.log file that shows what\ntook the time, assuming it is not the compilation\nand linking.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-21 00:34:51.064500",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/21 00:34:51, rsc wrote:\n> \n> What takes so long?  ...\n\n$ time run\n./run: line 6: gomake: command not found\n./run: line 42: ulimit: virtual memory: cannot modify limit: Invalid argument\nfail: ./sigchld.go\n43c43,44\n< survived SIGCHLD\n---\n> ./sigchld.go:12: undefined: syscall.Kill\n> ./sigchld.go:12: undefined: syscall.SIGCHLD\n1 known bugs; 0 unexpected bugs; test output differs\nFAILED\n\nreal    7m30.793s\nuser    0m37.616s\nsys     2m28.080s\n\n$ cat times.out\n0.68 ./235\n26.76 ./64bit\n3.14 ./append\n0.29 ./args\n1.95 ./assign\n0.20 ./assign1\n0.20 ./bigalg\n0.18 ./bigmap\n0.56 ./blank\n0.20 ./blank1\n0.20 ./chancap\n0.29 ./char_lit\n0.18 ./char_lit1\n0.25 ./closedchan\n0.18 ./closure\n0.20 ./cmp1\n0.15 ./cmp2\n0.18 ./cmp3\n0.20 ./cmp4\n0.18 ./cmp5\n0.18 ./cmp6\n0.18 ./cmplx\n1.14 ./cmplxdivide\n0.06 ./cmplxdivide1\n0.18 ./complit\n0.17 ./compos\n0.18 ./const\n0.18 ./const1\n0.18 ./const2\n0.62 ./const3\n0.48 ./convert\n0.20 ./convert3\n0.21 ./convlit\n0.20 ./convlit1\n1.28 ./copy\n0.23 ./ddd\n0.18 ./ddd1\n0.07 ./ddd2\n0.23 ./ddd3\n0.18 ./decl\n0.20 ./declbad\n0.56 ./defer\n0.20 ./deferprint\n0.51 ./divide\n0.07 ./empty\n0.26 ./env\n0.07 ./eof\n0.09 ./eof1\n0.20 ./escape\n0.28 ./escape2\n0.15 ./escape3\n0.18 ./float_lit\n0.31 ./floatcmp\n0.20 ./for\n0.18 ./func\n0.18 ./func1\n0.09 ./func2\n0.20 ./func3\n0.21 ./func4\n0.18 ./func5\n0.09 ./func6\n0.20 ./func7\n0.18 ./gc\n0.20 ./gc1\n0.81 ./gc2\n1.10 ./goprint\n0.21 ./goto\n0.18 ./hashmap\n0.20 ./helloworld\n0.20 ./if\n0.09 ./import\n0.32 ./import1\n0.06 ./import2\n0.09 ./import3\n0.34 ./import4\n3.65 ./index\n0.18 ./indirect\n0.17 ./indirect1\n0.17 ./init\n0.31 ./initcomma\n0.56 ./initialize\n0.21 ./initializerr\n0.35 ./initsyscall\n0.28 ./int_lit\n0.18 ./intcvt\n0.18 ./iota\n0.18 ./label\n0.18 ./label1\n0.20 ./literal\n0.56 ./malloc1\n4.32 ./mallocfin\n0.89 ./mallocrand\n0.68 ./mallocrep\n1.28 ./mallocrep1\n0.67 ./map\n0.18 ./method\n0.20 ./method1\n0.18 ./method2\n0.18 ./method3\n0.20 ./named\n0.18 ./named1\n0.62 ./nil\n0.70 ./nul1\n0.09 ./parentype\n0.29 ./peano\n0.18 ./printbig\n0.21 ./range\n0.20 ./recover\n0.18 ./recover1\n0.31 ./recover2\n0.32 ./recover3\n0.60 ./rename\n0.18 ./rename1\n0.18 ./runtime\n0.18 ./shift1\n0.09 ./shift2\n0.14 ./sieve\n0.09 ./sigchld\n0.18 ./simassign\n0.14 ./sinit\n0.07 ./sizeof\n0.14 ./solitaire\n0.25 ./stack\n0.29 ./string_lit\n0.51 ./stringrange\n0.18 ./struct0\n0.18 ./switch\n0.29 ./switch1\n0.20 ./test0\n0.28 ./turing\n0.28 ./typeswitch\n0.50 ./typeswitch1\n0.18 ./typeswitch2\n0.18 ./undef\n0.20 ./utf\n0.20 ./varerr\n0.21 ./varinit\n0.31 ./vectors\n0.64 ./zerodivide\n0.17 ken/array\n0.35 ken/chan\n0.17 ken/chan1\n0.23 ken/complit\n0.23 ken/convert\n0.18 ken/cplx0\n0.17 ken/cplx1\n0.21 ken/cplx2\n0.48 ken/cplx3\n0.57 ken/cplx4\n0.18 ken/cplx5\n1.14 ken/divconst\n0.23 ken/divmod\n0.21 ken/embed\n0.18 ken/for\n0.18 ken/interbasic\n0.18 ken/interfun\n0.17 ken/intervar\n0.18 ken/label\n0.17 ken/litfun\n0.18 ken/mfunc\n1.14 ken/modconst\n0.17 ken/ptrfun\n0.17 ken/ptrvar\n0.20 ken/range\n0.17 ken/rob1\n0.25 ken/rob2\n0.20 ken/robfor\n0.18 ken/robfunc\n0.17 ken/shift\n0.17 ken/simparray\n0.17 ken/simpbool\n0.18 ken/simpconv\n0.17 ken/simpfun\n0.20 ken/simpprint\n0.15 ken/simpswitch\n0.17 ken/simpvar\n0.18 ken/slicearray\n0.18 ken/sliceslice\n0.18 ken/string\n0.20 ken/strvar\n1.26 chan/doubleselect\n0.28 chan/fifo\n0.43 chan/goroutines\n0.62 chan/nonblock\n0.18 chan/perm\n0.29 chan/powser1\n0.34 chan/powser2\n0.18 chan/select\n0.36 chan/select2\n1.35 chan/select3\n0.20 chan/select4\n3.82 chan/select5\n0.20 chan/select6\n0.17 chan/sendstmt\n0.26 chan/sieve1\n0.42 chan/sieve2\n0.17 chan/zerosize\n0.18 interface/bigdata\n0.18 interface/convert\n0.18 interface/convert1\n0.20 interface/convert2\n0.26 interface/embed\n0.06 interface/embed0\n0.25 interface/embed1\n0.18 interface/embed2\n0.18 interface/explicit\n0.20 interface/fail\n0.46 interface/fake\n0.18 interface/pointer\n0.20 interface/private\n0.06 interface/private1\n0.17 interface/receiver\n0.18 interface/receiver1\n0.09 interface/recursive\n0.18 interface/returntype\n0.29 interface/struct\n0.23 nilptr/arrayindex\n9.54 nilptr/arrayindex1\n9.32 nilptr/arraytoslice\n15.36 nilptr/arraytoslice1\n14.71 nilptr/arraytoslice2\n16.89 nilptr/slicearray\n3.73 nilptr/structfield\n3.21 nilptr/structfield1\n3.09 nilptr/structfield2\n4.92 nilptr/structfieldaddr\n1.92 syntax/chan\n0.20 syntax/chan1\n0.18 syntax/else\n0.18 syntax/forvar\n0.18 syntax/if\n0.25 syntax/import\n0.18 syntax/interface\n0.18 syntax/semi1\n0.20 syntax/semi2\n0.18 syntax/semi3\n0.18 syntax/semi4\n0.20 syntax/semi5\n0.20 syntax/semi6\n0.18 syntax/semi7\n0.18 syntax/topexpr\n0.20 syntax/typesw\n0.23 syntax/vareq\n0.32 syntax/vareq1\n0.86 dwarf/linedirectives\n0.23 dwarf/main\n0.06 dwarf/z1\n0.07 dwarf/z10\n0.07 dwarf/z11\n0.09 dwarf/z12\n0.09 dwarf/z13\n0.07 dwarf/z14\n0.07 dwarf/z15\n0.07 dwarf/z16\n0.07 dwarf/z17\n0.42 dwarf/z18\n0.09 dwarf/z19\n0.06 dwarf/z2\n0.06 dwarf/z20\n0.07 dwarf/z3\n0.18 dwarf/z4\n0.09 dwarf/z5\n0.07 dwarf/z6\n0.12 dwarf/z7\n0.09 dwarf/z8\n0.07 dwarf/z9\n0.39 fixedbugs/bug000\n0.32 fixedbugs/bug002\n0.18 fixedbugs/bug003\n0.17 fixedbugs/bug004\n0.21 fixedbugs/bug005\n2.92 fixedbugs/bug006\n0.17 fixedbugs/bug007\n0.17 fixedbugs/bug008\n0.20 fixedbugs/bug009\n0.20 fixedbugs/bug010\n0.17 fixedbugs/bug011\n0.18 fixedbugs/bug012\n0.17 fixedbugs/bug013\n0.23 fixedbugs/bug014\n0.18 fixedbugs/bug015\n0.18 fixedbugs/bug016\n0.18 fixedbugs/bug017\n0.09 fixedbugs/bug020\n0.18 fixedbugs/bug021\n0.18 fixedbugs/bug022\n0.20 fixedbugs/bug023\n0.15 fixedbugs/bug024\n0.15 fixedbugs/bug026\n0.17 fixedbugs/bug027\n0.17 fixedbugs/bug028\n0.18 fixedbugs/bug030\n0.17 fixedbugs/bug031\n0.32 fixedbugs/bug035\n0.25 fixedbugs/bug036\n0.31 fixedbugs/bug037\n0.11 fixedbugs/bug038\n0.18 fixedbugs/bug039\n0.09 fixedbugs/bug040\n0.18 fixedbugs/bug045\n0.18 fixedbugs/bug046\n0.20 fixedbugs/bug047\n0.20 fixedbugs/bug048\n0.18 fixedbugs/bug049\n0.18 fixedbugs/bug050\n0.20 fixedbugs/bug051\n0.17 fixedbugs/bug052\n0.17 fixedbugs/bug053\n0.20 fixedbugs/bug054\n0.18 fixedbugs/bug055\n0.18 fixedbugs/bug056\n0.11 fixedbugs/bug057\n0.21 fixedbugs/bug058\n0.87 fixedbugs/bug059\n0.29 fixedbugs/bug060\n0.21 fixedbugs/bug061\n0.18 fixedbugs/bug062\n0.09 fixedbugs/bug063\n0.09 fixedbugs/bug064\n0.20 fixedbugs/bug065\n0.40 fixedbugs/bug066\n0.18 fixedbugs/bug067\n0.25 fixedbugs/bug068\n0.11 fixedbugs/bug069\n0.93 fixedbugs/bug070\n0.10 fixedbugs/bug071\n0.20 fixedbugs/bug072\n0.21 fixedbugs/bug073\n0.20 fixedbugs/bug074\n0.39 fixedbugs/bug075\n0.32 fixedbugs/bug076\n0.10 fixedbugs/bug077\n0.21 fixedbugs/bug078\n0.17 fixedbugs/bug080\n0.40 fixedbugs/bug081\n0.28 fixedbugs/bug082\n0.70 fixedbugs/bug083\n0.25 fixedbugs/bug084\n0.25 fixedbugs/bug085\n0.26 fixedbugs/bug086\n0.10 fixedbugs/bug087\n0.14 fixedbugs/bug088\n0.17 fixedbugs/bug089\n0.28 fixedbugs/bug090\n0.20 fixedbugs/bug091\n0.90 fixedbugs/bug092\n0.23 fixedbugs/bug093\n0.09 fixedbugs/bug094\n0.10 fixedbugs/bug096\n0.37 fixedbugs/bug097\n0.10 fixedbugs/bug098\n0.23 fixedbugs/bug099\n0.79 fixedbugs/bug101\n0.25 fixedbugs/bug102\n0.20 fixedbugs/bug103\n0.70 fixedbugs/bug104\n0.17 fixedbugs/bug106\n0.21 fixedbugs/bug107\n0.21 fixedbugs/bug108\n0.34 fixedbugs/bug109\n0.18 fixedbugs/bug110\n0.21 fixedbugs/bug111\n0.09 fixedbugs/bug112\n...\n\nI had to cut this, because of codereview.",
			"disapproval": false,
			"date": "2011-09-21 00:57:50.064440",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "It would be interesting to see exactly what percentage of the time is spent running make/8g/8l.  Firstly the list can be sorted in descending order to find out if there are any outliers, and then the times can be summed to find out the total time spent running Go code.",
			"disapproval": false,
			"date": "2011-09-21 14:36:05.844360",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/21 14:36:05, hector wrote:\n> It would be interesting to see exactly what percentage of the time is spent\n> running make/8g/8l.  Firstly the list can be sorted in descending order to find\n> out if there are any outliers, and then the times can be summed to find out the\n> total time spent running Go code.\n\n# cat times.out | sort -n -k1 | tail -n 20\n1.67 fixedbugs/bug323\n1.92 syntax/chan\n1.95 ./assign\n1.98 fixedbugs/bug257\n2.42 fixedbugs/bug206\n2.92 fixedbugs/bug006\n3.09 nilptr/structfield2\n3.14 ./append\n3.21 nilptr/structfield1\n3.65 ./index\n3.73 nilptr/structfield\n3.82 chan/select5\n4.32 ./mallocfin\n4.92 nilptr/structfieldaddr\n9.32 nilptr/arraytoslice\n9.54 nilptr/arrayindex1\n14.71 nilptr/arraytoslice2\n15.36 nilptr/arraytoslice1\n16.89 nilptr/slicearray\n26.76 ./64bit\n# cat times.out | awk '{SUM+=$1} END{print SUM}'\n297\n#",
			"disapproval": false,
			"date": "2011-09-22 00:16:13.237245",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Note that the times are to run the entire tiny\nshell script at the top of the test case, so\nit includes compile + link + run.\n\nThe most interesting case to look into is why\nnilptr/* takes so long.  It does on QEMU too.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-23 02:24:20.870229",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Since all the tests that are slow are committing a large chunk of memory\nit's probably due to Windows having to grow the page file or swapping that's\ncausing the delay.  Incidentally on machines with more memory these tests\nrun in under a second.  If I may inquire Alex, what is the configuration of\nthe virtual memory on your machine?  For instance how much physical memory,\nconfiguration and size of page file and total and limit commit charge, as\nvisible in Task Manager.\nOn Sep 23, 2011 3:24 AM, \"Russ Cox\" <rsc@golang.org> wrote:\n> Note that the times are to run the entire tiny\n> shell script at the top of the test case, so\n> it includes compile + link + run.\n>\n> The most interesting case to look into is why\n> nilptr/* takes so long. It does on QEMU too.\n>\n> Russ\n",
			"disapproval": false,
			"date": "2011-09-23 17:06:50.116661",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/23 17:06:50, hector wrote:\n> run in under a second.  If I may inquire Alex, what is the configuration of\n> the virtual memory on your machine?  For instance how much physical memory,\n> configuration and size of page file and total and limit commit charge, as\n> visible in Task Manager.\n\nIt is a vmware hosted PC, so take it with a grain of salt:\nphysical memory: 2G\nconfiguration and size of page file: on C: drive, initial size of 0.75G, max of 1.5G\ntotal and limit commit charge: 2G and 3G\n\nAlex",
			"disapproval": false,
			"date": "2011-09-24 00:58:49.399398",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/24 00:58:49, brainman wrote:\n> It is a vmware hosted PC, so take it with a grain of salt:\n> physical memory: 2G\n> configuration and size of page file: on C: drive, initial size of 0.75G, max of\n> 1.5G\n> total and limit commit charge: 2G and 3G\n\nThanks. Are we able to time the nilptr tests (or indeed, the whole test suite) on the Windows builder to see whether the problems with virtual memory exist there?",
			"disapproval": false,
			"date": "2011-09-24 12:49:57.144650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=821669218333 ***\n\ntest: disable sigchld test on Windows\n\nAlex Brainman reports that this is the only test\nthat keeps us from running test/run.\n\nR=alex.brainman, lucio.dere, bradfitz, hectorchu\nCC=golang-dev\nhttp://codereview.appspot.com/4777043",
			"disapproval": false,
			"date": "2011-09-26 17:11:26.306489",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"lucio.dere@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/24 12:49:57, hector wrote:\n> \n> ... Are we able to time the nilptr tests (or indeed, the whole test suite)\n> on the Windows builder to see whether the problems with virtual memory exist\n> there?\n\nI don't have access to it. It is Brad's PC. Ask him to help you.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-24 12:58:40.961669",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 4777043: test: disable sigchld test on Windows",
	"created": "2011-07-19 14:23:57.763939",
	"patchsets": [
		1,
		3,
		4,
		24001
	],
	"modified": "2011-09-26 17:11:28.096963",
	"closed": true,
	"issue": 4777043
}