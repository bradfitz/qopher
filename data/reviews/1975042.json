{
	"description": "Client certificate support for crypto/tls\n\nThis changeset implements client certificate support in crypto/tls\nfor both handshake_server.go and handshake_client.go\n\nThe updated server implementation sends an empty certificateAuthorities\nfield in the certificateRequestMsg, thus allowing clients to send any\ncertificates they wish. Likewise, the client code will only respond\nwith its certificate when the server requests a certificate with this\nfield empty.\nThe reason for not implementing this is that I'm not sure how widely\nused this list of allowed DNs of CAs is in practice. I tried a couple of\napplications to see if they would send me something back in this field,\none being Apache HTTPD. They all sent an empty CA list in the\ncertificateRequestMsg, so it would seem that the decision of accepting\na certificate or not is often delegated to until after the TLS handshake\nis done. I'd like some feedback on this if someone knows more about it.\n\nThe scripted server handshake test in handshake_server_test.go has also\nbeen updated to include the extra handshake messages this changeset\nimplements.",
	"cc": [
		"agl@chromium.org",
		"rsc@golang.org",
		"agl@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ca3b155f1eaa ***\n\ncrypto/tls: client certificate support.\n\nThis changeset implements client certificate support in crypto/tls\nfor both handshake_server.go and handshake_client.go\n\nThe updated server implementation sends an empty CertificateAuthorities\nfield in the CertificateRequest, thus allowing clients to send any\ncertificates they wish. Likewise, the client code will only respond\nwith its certificate when the server requests a certificate with this\nfield empty.\n\nR=agl, rsc, agl1\nCC=golang-dev\nhttp://codereview.appspot.com/1975042\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2010-08-16 15:22:30.039578",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello agl, rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-08-11 20:45:06.598953",
			"approval": false
		},
		{
			"sender": "agl@chromium.org",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1975042/diff/1/2\nFile src/pkg/crypto/rsa/pkcs1v15.go (right):\n\nhttp://codereview.appspot.com/1975042/diff/1/2#newcode149\nsrc/pkg/crypto/rsa/pkcs1v15.go:149: HashMD5SHA1\nNeeds a comment here about why we need to have this.\n\nhttp://codereview.appspot.com/1975042/diff/1/4\nFile src/pkg/crypto/tls/conn.go (right):\n\nhttp://codereview.appspot.com/1975042/diff/1/4#newcode48\nsrc/pkg/crypto/tls/conn.go:48: Certificate *x509.Certificate\nThis should go into peerCertificates. (peerCertificates is the server's cert for a client connection, and the client's certs for a server connection.)\n\nhttp://codereview.appspot.com/1975042/diff/1/5\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttp://codereview.appspot.com/1975042/diff/1/5#newcode180\nsrc/pkg/crypto/tls/handshake_client.go:180: if transmitCert && len(c.config.Certificates) > 0 && len(c.config.Certificates[0].Certificate) > 0 {\nthe 'transmitCert' clause here is superfluous.\n\nhttp://codereview.appspot.com/1975042/diff/1/5#newcode183\nsrc/pkg/crypto/tls/handshake_client.go:183: certMsg.certificates = c.config.Certificates[0].Certificate\nClients can have certificate chains. It seems that the code should support that since it's almost more fiddly not to.\n\nhttp://codereview.appspot.com/1975042/diff/1/6\nFile src/pkg/crypto/tls/handshake_messages.go (right):\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode683\nsrc/pkg/crypto/tls/handshake_messages.go:683: var i int\ni := 0\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode700\nsrc/pkg/crypto/tls/handshake_messages.go:700: for _, octet := range m.certificateTypes {\nlooks like you can use copy() here.\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode739\nsrc/pkg/crypto/tls/handshake_messages.go:739: for i, _ := range m.certificateTypes {\ncopy() again?\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode749\nsrc/pkg/crypto/tls/handshake_messages.go:749: m.certificateAuthorities = make([][]byte, numCA)\nmove inside the if on the next line.\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode752\nsrc/pkg/crypto/tls/handshake_messages.go:752: if len(y) < 3 {\nI think you can delete this check.\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode757\nsrc/pkg/crypto/tls/handshake_messages.go:757: CAlen := uint16(y[0])<<16 | uint16(y[1])\nif len(y) < 2 {\n  return false\n}\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode758\nsrc/pkg/crypto/tls/handshake_messages.go:758: if uint16(len(y[2:])) < CAlen {\ny = y[2:] first. (Then just test len(y).)\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode763\nsrc/pkg/crypto/tls/handshake_messages.go:763: copy(dst, y[2:2+CAlen])\nremove the '2's now\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode765\nsrc/pkg/crypto/tls/handshake_messages.go:765: y = y[2+CAlen:]\nand here.\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode768\nsrc/pkg/crypto/tls/handshake_messages.go:768: \ns/y/x/ in the above and then:\n\nif len(x) > 0 {\n  return false\n}\n\nto catch trailing garbage.\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode786\nsrc/pkg/crypto/tls/handshake_messages.go:786: x[1] = uint8(length << 16)\nthese shifts are in the wrong direction.\n\nhttp://codereview.appspot.com/1975042/diff/1/6#newcode789\nsrc/pkg/crypto/tls/handshake_messages.go:789: x[4] = uint8(siglength << 8)\nditto.\n\nhttp://codereview.appspot.com/1975042/diff/1/8\nFile src/pkg/crypto/tls/handshake_server.go (right):\n\nhttp://codereview.appspot.com/1975042/diff/1/8#newcode116\nsrc/pkg/crypto/tls/handshake_server.go:116: // Request a client certificate\nWe can't always send a client certificate request.\n\nhttp://codereview.appspot.com/1975042/diff/1/8#newcode135\nsrc/pkg/crypto/tls/handshake_server.go:135: certMsg, ok = msg.(*certificateMsg)\nNor can we always expect the client to send a certificate.",
			"disapproval": false,
			"date": "2010-08-11 22:12:52.978330",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/08/11 22:12:52, agl wrote:\n> http://codereview.appspot.com/1975042/diff/1/2\n> File src/pkg/crypto/rsa/pkcs1v15.go (right):\n> \n> http://codereview.appspot.com/1975042/diff/1/2#newcode149\n> src/pkg/crypto/rsa/pkcs1v15.go:149: HashMD5SHA1\n> Needs a comment here about why we need to have this.\n> \n> http://codereview.appspot.com/1975042/diff/1/4\n> File src/pkg/crypto/tls/conn.go (right):\n> \n> http://codereview.appspot.com/1975042/diff/1/4#newcode48\n> src/pkg/crypto/tls/conn.go:48: Certificate *x509.Certificate\n> This should go into peerCertificates. (peerCertificates is the server's cert for\n> a client connection, and the client's certs for a server connection.)\n\nOK. For client connections, this field could previously be accessed at the end of the handshake\nto check whether it actually sent a certificate in response to a certificate request.\n(I.e. conn.Certificate == nil meant that it didn't.)\n\n> \n> http://codereview.appspot.com/1975042/diff/1/5\n> File src/pkg/crypto/tls/handshake_client.go (right):\n> \n> http://codereview.appspot.com/1975042/diff/1/5#newcode180\n> src/pkg/crypto/tls/handshake_client.go:180: if transmitCert &&\n> len(c.config.Certificates) > 0 && len(c.config.Certificates[0].Certificate) > 0\n> {\n> the 'transmitCert' clause here is superfluous.\n> \n> http://codereview.appspot.com/1975042/diff/1/5#newcode183\n> src/pkg/crypto/tls/handshake_client.go:183: certMsg.certificates =\n> c.config.Certificates[0].Certificate\n> Clients can have certificate chains. It seems that the code should support that\n> since it's almost more fiddly not to.\n\nThis was the intention to begin with.\n\nI'm a little confused at the structure of config.Certificates. In the Config struct, it's a slice of Certificates. That's fine.\nBut the Certificate struct's Certificate field is a multi-dimensional slice, so I assumed that in the presence of a certificate chain, they would simply be included after the main certificate in the Certificate struct. This also seems to be the logic that handshake_server is using.  What's the Right Way?\n\n> \n> http://codereview.appspot.com/1975042/diff/1/6\n> File src/pkg/crypto/tls/handshake_messages.go (right):\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode683\n> src/pkg/crypto/tls/handshake_messages.go:683: var i int\n> i := 0\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode700\n> src/pkg/crypto/tls/handshake_messages.go:700: for _, octet := range\n> m.certificateTypes {\n> looks like you can use copy() here.\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode739\n> src/pkg/crypto/tls/handshake_messages.go:739: for i, _ := range\n> m.certificateTypes {\n> copy() again?\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode749\n> src/pkg/crypto/tls/handshake_messages.go:749: m.certificateAuthorities =\n> make([][]byte, numCA)\n> move inside the if on the next line.\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode752\n> src/pkg/crypto/tls/handshake_messages.go:752: if len(y) < 3 {\n> I think you can delete this check.\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode757\n> src/pkg/crypto/tls/handshake_messages.go:757: CAlen := uint16(y[0])<<16 |\n> uint16(y[1])\n> if len(y) < 2 {\n>   return false\n> }\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode758\n> src/pkg/crypto/tls/handshake_messages.go:758: if uint16(len(y[2:])) < CAlen {\n> y = y[2:] first. (Then just test len(y).)\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode763\n> src/pkg/crypto/tls/handshake_messages.go:763: copy(dst, y[2:2+CAlen])\n> remove the '2's now\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode765\n> src/pkg/crypto/tls/handshake_messages.go:765: y = y[2+CAlen:]\n> and here.\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode768\n> src/pkg/crypto/tls/handshake_messages.go:768: \n> s/y/x/ in the above and then:\n> \n> if len(x) > 0 {\n>   return false\n> }\n> \n> to catch trailing garbage.\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode786\n> src/pkg/crypto/tls/handshake_messages.go:786: x[1] = uint8(length << 16)\n> these shifts are in the wrong direction.\n> \n> http://codereview.appspot.com/1975042/diff/1/6#newcode789\n> src/pkg/crypto/tls/handshake_messages.go:789: x[4] = uint8(siglength << 8)\n> ditto.\n> \n> http://codereview.appspot.com/1975042/diff/1/8\n> File src/pkg/crypto/tls/handshake_server.go (right):\n> \n> http://codereview.appspot.com/1975042/diff/1/8#newcode116\n> src/pkg/crypto/tls/handshake_server.go:116: // Request a client certificate\n> We can't always send a client certificate request.\n\nRFC 4346 (p. 43): A non-anonymous server can optionally request a certificate from\nthe client, if it is appropriate for the selected cipher suite.\n\nI interpret that as saying \"any server that itself has a certificate may request a certificate from a client\".\nHowever, if the intention is to reduce the chatter on the wire for cases where client certificates are\nirrelevant, I'm all for it.  Should it be configurable in the Config struct?\n\n> \n> http://codereview.appspot.com/1975042/diff/1/8#newcode135\n> src/pkg/crypto/tls/handshake_server.go:135: certMsg, ok = msg.(*certificateMsg)\n> Nor can we always expect the client to send a certificate.\n\nIn the code that this changeset adds, we always send a certificate request. Thus, the way I interpret\nthe RFC, the client should respond with a certificate message (albeit empty, if it doesn't have a\nsuitable certificate.)\n\nRFC 4346 (p. 45): This is the first message the client can send after receiving a\nserver hello done message.  This message is only sent if the server requests a\ncertificate.  If no suitable certificate is available, the client SHOULD send a\ncertificate message containing no certificates.  That is, the certificate_list structure\nhas a length of zero.  If client authentication is required by the server for the handshake\nto continue, it may respond with a fatal handshake failure alert.\n\nThen again, the word is *SHOULD*, so I'm not sure what to make of it.",
			"disapproval": false,
			"date": "2010-08-12 11:57:56.092571",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/08/11 22:12:52, agl wrote:\n> http://codereview.appspot.com/1975042/diff/1/6#newcode749\n> src/pkg/crypto/tls/handshake_messages.go:749: m.certificateAuthorities =\n> make([][]byte, numCA)\n> move inside the if on the next line.\n\nThe file handshake_messages_test.go seems to re-use messages in its tests. If I don't re-allocate, even for the numCA == 0 case, the test fails because m.certificateAuthorities is full of data that shouldn't be there.  I've let it stay outside the if.\n\nI've fixed the other issues (except the ones I've commented on above)...",
			"disapproval": false,
			"date": "2010-08-12 13:48:00.595437",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello agl, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-08-12 13:49:01.595954",
			"approval": false
		},
		{
			"sender": "agl@chromium.org",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This is looking pretty good, although I'll want to patch it in locally before landing.\n\nAs for the CertificateRequest message: yes, the RFC says that you may send it. However, in practice, if you do, then browsers and other TLS clients will usually pop up a dialog asking the user to select a client-side cert. That's obviously bad for the typical use of this code, which is as an HTTPS server.\n\nI'll get around to this tomorrow (EST) and will grab whatever patch is current on this change list at the time.",
			"disapproval": false,
			"date": "2010-08-12 23:42:57.628453",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/08/12 23:42:57, agl wrote:\n> This is looking pretty good, although I'll want to patch it in locally before\n> landing.\n> \n> As for the CertificateRequest message: yes, the RFC says that you may send it.\n> However, in practice, if you do, then browsers and other TLS clients will\n> usually pop up a dialog asking the user to select a client-side cert. That's\n> obviously bad for the typical use of this code, which is as an HTTPS server.\n\nRight. I actually hadn't considered the dialog.  My own use of this code is not mainly HTTPS, so it hadn't struck me :)\n\nI'll add a field to Config to make it configurable. \n\n> \n> I'll get around to this tomorrow (EST) and will grab whatever patch is current\n> on this change list at the time.\n\nGreat, thanks.",
			"disapproval": false,
			"date": "2010-08-13 13:15:44.600624",
			"approval": false
		},
		{
			"sender": "agl@chromium.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I've fixed up the patch and am ready to land. However, I don't see you\nin the CONTRIBUTORS list. Have you signed the CLA?\nhttp://golang.org/doc/contribute.html#copyright\n\n\nAGL\n",
			"disapproval": false,
			"date": "2010-08-13 18:44:09.625071",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"agl@chromium.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/08/13 18:44:09, agl wrote:\n> I've fixed up the patch and am ready to land. However, I don't see you\n> in the CONTRIBUTORS list. Have you signed the CLA?\n> http://golang.org/doc/contribute.html#copyright\n> \n> \n> AGL\n> \n\nYes, I signed it before submitting the changeset.  However, I'm curious whether you've gotten an HTTPS client to send you a certificate?  After the realization that it would be a good idea to make the certificate request optional, I went on to check it out in a couple of browsers...\n\nChrome dev channel crashes when attempting to access sites that require certificate authentication.  Safari and Firefox won't send me any certificates (certMsg is empty.)",
			"disapproval": false,
			"date": "2010-08-13 19:10:48.382928",
			"approval": false
		},
		{
			"sender": "agl@chromium.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Aug 13, 2010 at 3:10 PM,  <krautz@gmail.com> wrote:\n> Yes, I signed it before submitting the changeset.\n\nThanks for that. rsc and I are processing it now.\n\n> \u00a0However, I'm curious\n> whether you've gotten an HTTPS client to send you a certificate? \u00a0After\n> the realization that it would be a good idea to make the certificate\n> request optional, I went on to check it out in a couple of browsers...\n>\n> Chrome dev channel crashes when attempting to access sites that require\n> certificate authentication. \u00a0Safari and Firefox won't send me any\n> certificates (certMsg is empty.)\n\nChrome crashes for you? Crap. I'll see if I can repo that.\n\nI didn't get Firefox to send a certificate, but it was upset about the\nself-signed cert and I didn't bother to go through all the dialogs.\nI've verified the messages by hand and openssl s_client works. It may\nwell be that extra magic is needed to trigger browser behaviour, but\nthis information isn't plumbed into http yet so it wouldn't be useful\nas is anyway.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2010-08-13 19:13:55.964923",
			"approval": false
		}
	],
	"owner_email": "krautz@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mkrautz",
	"subject": "code review 1975042: Client certificate support for crypto/tls",
	"created": "2010-08-11 20:39:52.013951",
	"patchsets": [
		1,
		13001
	],
	"modified": "2010-08-13 19:13:55.964923",
	"closed": false,
	"issue": 1975042
}