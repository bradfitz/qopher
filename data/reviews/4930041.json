{
	"description": "math: prevent endless loop for extrem argument in Pow10.\n\nPow10 failed for MinInt32 (endless loop until out of\nmemory).  Fix by returning 0 and +Inf for all arguments\nwhere the result is not representable in a float64.\nFixes issue 2159.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5fc1ae734ed1 ***\n\nmath: fix Pow10 loop\n\nPow10 failed for MinInt32 (endless loop until out of\nmemory).  Fix by returning 0 and +Inf for all arguments\nwhere the result is not representable in a float64.\nFixes issue 2159.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/4930041\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-08-24 17:59:55.267467",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Pow10 failed for MinInt32 (endless loop until out of\nmemory).  Fix by returning 0 and +Inf for all arguments\nwhere the result is not representable in a float64.\nFixes issue 2159.",
			"disapproval": false,
			"date": "2011-08-23 08:44:25.049119",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\naha!\n",
			"disapproval": false,
			"date": "2011-08-24 15:09:20.914049",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "thanks for fixing this\n\nhttp://codereview.appspot.com/4930041/diff/2001/src/pkg/math/pow10.go\nFile src/pkg/math/pow10.go (right):\n\nhttp://codereview.appspot.com/4930041/diff/2001/src/pkg/math/pow10.go#newcode13\nsrc/pkg/math/pow10.go:13: if e <= -325 {\nI think all you need is\n\nif e > 309 {\n    return Inf(1)\n}\n\nhttp://codereview.appspot.com/4930041/diff/2001/src/pkg/math/pow10.go#newcode15\nsrc/pkg/math/pow10.go:15: } else if e > 309 {\ndrop else after if that doesn't fall through\n(but it is unnecessary anyway)",
			"disapproval": false,
			"date": "2011-08-23 15:39:17.207390",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4930041/diff/2001/src/pkg/math/pow10.go#newcode13\n> I think all you need is\n> \n> if e > 309 {\n>     return Inf(1)\n> }\n\nActually no: It is MinInt32 (<0) for e that triggers the bug as\n-MinInt32 == MinInt32 which leads to an endless loop in line 20.\nSo the <= 325 case is the important one, the > 309 case just\nprevents some unnecessary calculations.\n\nhttp://codereview.appspot.com/4930041/diff/2001/src/pkg/math/pow10.go#newcode20\nreturn 1 / Pow10(-e)\nIs the point where the endless loop happens for e=MinInt32.",
			"disapproval": false,
			"date": "2011-08-24 07:24:52.567142",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "math: prevent endless loop for extrem argument in Pow10.",
	"created": "2011-08-19 15:43:46.521056",
	"patchsets": [
		1,
		2001
	],
	"modified": "2011-08-24 07:24:52.567142",
	"closed": false,
	"issue": 4930041
}