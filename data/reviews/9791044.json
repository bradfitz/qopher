{
	"description": "runtime: allocate page table lazily\nThis removes the 256MB memory allocation at startup,\nwhich conflicts with ulimit.\nAlso will allow to eliminate an unnecessary memory dereference in GC,\nbecause the page table is usually mapped at known address.\nUpdate issue 5049.\nUpdate issue 5236.",
	"cc": [
		"golang-dev@googlegroups.com",
		"khr@golang.org",
		"r@golang.org",
		"khr@google.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-27 06:51:19.237690",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The code looks good, but I don't like the naming.  Things like \"MapMap\" make me cringe.  The array of pointers to MSpans should really be called \"spans\", although I'm willing to wait for a separate CL for that.\n\nhttps://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.goc#newcode314\nsrc/pkg/runtime/malloc.goc:314: uintptr arena_size, bitmap_size, map_size;\nspan_size?\n\nhttps://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.h#newcode415\nsrc/pkg/runtime/malloc.h:415: uintptr\tmap_mapped;\nI don't like the name map_mapped.  Maybe \"spans_mapped\" (in preparation to rename \"map\" to \"spans\", which doesn't need to be in this change)?\n\nhttps://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.h#newcode446\nsrc/pkg/runtime/malloc.h:446: void\truntime\u00b7MHeap_MapMap(MHeap *h);\nSame here, \"MapMap\" -> \"EnsureSpansAreMapped\"?",
			"disapproval": false,
			"date": "2013-05-28 06:01:57.000940",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/28 06:01:57, khr wrote:\n> The code looks good, but I don't like the naming.  Things like \"MapMap\" make me\n> cringe.  The array of pointers to MSpans should really be called \"spans\",\n> although I'm willing to wait for a separate CL for that.\n> \n> https://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.goc\n> File src/pkg/runtime/malloc.goc (right):\n> \n> https://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.goc#newcode314\n> src/pkg/runtime/malloc.goc:314: uintptr arena_size, bitmap_size, map_size;\n> span_size?\n> \n> https://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.h\n> File src/pkg/runtime/malloc.h (right):\n> \n> https://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.h#newcode415\n> src/pkg/runtime/malloc.h:415: uintptr\tmap_mapped;\n> I don't like the name map_mapped.  Maybe \"spans_mapped\" (in preparation to\n> rename \"map\" to \"spans\", which doesn't need to be in this change)?\n> \n> https://codereview.appspot.com/9791044/diff/8001/src/pkg/runtime/malloc.h#newcode446\n> src/pkg/runtime/malloc.h:446: void\truntime\u00b7MHeap_MapMap(MHeap *h);\n> Same here, \"MapMap\" -> \"EnsureSpansAreMapped\"?\n\n\n\nAs per offline discussion, we decided to rename it to \"spanarray\", because it's not actually \"spans\" nor \"map\".\nThe bulk of the renaming will be done in a separate CL.",
			"disapproval": false,
			"date": "2013-05-28 06:52:16.284870",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\nrenamed it to spanarray",
			"disapproval": false,
			"date": "2013-05-28 07:00:54.122270",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Names than state their type are weaker than names that explain their purpose. We call a variable i or index, not countinteger, for clarity and to avoid redundancy, and to me \"spanarray\" sounds like \"countinteger\". It's type is array, its name should say something we don't already know.",
			"disapproval": false,
			"date": "2013-05-28 12:54:33.396280",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/28 12:54:33, r wrote:\n> Names than state their type are weaker than names that explain their purpose. We\n> call a variable i or index, not countinteger, for clarity and to avoid\n> redundancy, and to me \"spanarray\" sounds like \"countinteger\". It's type is\n> array, its name should say something we don't already know.\n\nI think that the \"span\" part is good, we have spans only in a single place, so it states both \"type\" and \"purpose\".\nWhat about \"spantab\"?",
			"disapproval": false,
			"date": "2013-05-28 15:00:53.614190",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "'tab' is an alias for 'array'. how about 'spans'?",
			"disapproval": false,
			"date": "2013-05-28 15:28:01.045370",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Or \"spanlookup\", as that's what it is for.  \"spans\" was my original\r\nsuggestion...\r\n\r\n\r\nOn Tue, May 28, 2013 at 8:28 AM, <r@golang.org> wrote:\r\n\r\n> 'tab' is an alias for 'array'. how about 'spans'?\r\n>\r\n>\r\n> https://codereview.appspot.**com/9791044/<https://codereview.appspot.com/9791044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-28 15:51:03.537940",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK, let it be \"spans\".\nPTAL.",
			"disapproval": false,
			"date": "2013-05-28 16:41:22.181240",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-28 16:44:59.903210",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 27, 2013 at 2:51 AM, <dvyukov@google.com> wrote:\r\n\r\n> Also will allow to eliminate an unnecessary memory dereference in GC,\r\n> because the page table is usually mapped at known address.\r\n>\r\n\r\nHow does \"usually\" make a memory dereference unnecessary?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-28 16:47:36.462140",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 28, 2013 at 8:47 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Mon, May 27, 2013 at 2:51 AM, <dvyukov@google.com> wrote:\r\n>\r\n>> Also will allow to eliminate an unnecessary memory dereference in GC,\r\n>> because the page table is usually mapped at known address.\r\n>>\r\n>\r\n> How does \"usually\" make a memory dereference unnecessary?\r\n>\r\n>\r\nCurrently it's unfeasible, but if/when the GC inner loop is simpler (like\r\nwhat it was before precise GC), we can have 2 inner loops: one that\r\nreads runtime\u00b7mheap->spans\r\nand the second with the hardcoded constant.\r\n",
			"disapproval": false,
			"date": "2013-05-28 17:01:46.305550",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"khr@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=2e317dfcaf96 ***\n\nruntime: allocate page table lazily\nThis removes the 256MB memory allocation at startup,\nwhich conflicts with ulimit.\nAlso will allow to eliminate an unnecessary memory dereference in GC,\nbecause the page table is usually mapped at known address.\nUpdate issue 5049.\nUpdate issue 5236.\n\nR=golang-dev, khr, r, khr, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/9791044",
			"disapproval": false,
			"date": "2013-05-28 18:04:40.484830",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9791044: runtime: allocate page table lazily",
	"created": "2013-05-27 06:29:50.271540",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		16001,
		27001,
		33001,
		36001
	],
	"modified": "2013-05-28 18:04:41.969270",
	"closed": true,
	"issue": 9791044
}