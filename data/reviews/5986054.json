{
	"description": "runtime: add parallel for algorithm\nThis is factored out part of:\nhttp://codereview.appspot.com/5279048/\n(parallel GC)",
	"cc": [
		"bsiegert@gmail.com",
		"mpimenov@google.com",
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-09 12:14:13.239409",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bsiegert@gmail.com, mpimenov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-10 07:09:07.812752",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode66\nsrc/pkg/runtime/parfor.c:66: d = n % nthr;\nOn 2012/04/09 14:47:34, mpimenov wrote:\n> move out of the loop?\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode69\nsrc/pkg/runtime/parfor.c:69: end += (i+1);\nOn 2012/04/09 14:47:34, mpimenov wrote:\n> probably remove parentheses?\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode96\nsrc/pkg/runtime/parfor.c:96: // obtain 0-based thread index\nOn 2012/04/09 14:12:26, bsiegert wrote:\n> Shouldn't these be complete sentences, starting with a capital letter and ending\n> with a full stop? Similarly below.\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode115\nsrc/pkg/runtime/parfor.c:115: // while have work, bump low index and execute the iteration\nOn 2012/04/09 14:12:26, bsiegert wrote:\n> s,have,there is,\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode171\nsrc/pkg/runtime/parfor.c:171: m->gcstats.nsteal += 1;\nOn 2012/04/09 14:47:34, mpimenov wrote:\n> s/+= 1/++/\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode181\nsrc/pkg/runtime/parfor.c:181: // if a user asked to not wait for others, exit now\nOn 2012/04/09 14:47:34, mpimenov wrote:\n> s/to not/not to/\n> s/others/the others/\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/runtime.h#newcode375\nsrc/pkg/runtime/runtime.h:375: // otherwise parfor may return while other threads still working\nOn 2012/04/09 14:47:34, mpimenov wrote:\n> s/still working/are still working/\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/runtime.h#newcode685\nsrc/pkg/runtime/runtime.h:685: * otherwise, threads can return while other threads still finishing processing.\nOn 2012/04/09 14:47:34, mpimenov wrote:\n> s/still/are still/\n\nDone.",
			"disapproval": false,
			"date": "2012-04-10 06:48:29.233921",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after this.\n\nhttp://codereview.appspot.com/5986054/diff/6010/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/5986054/diff/6010/src/pkg/runtime/runtime.h#newcode360\nsrc/pkg/runtime/runtime.h:360: // executed for each element\nOne more thing, sorry I only saw this now. In the other struct definition in this file, the comments are in the same line as the definition, with an appropriate number of tabs. Please follow the same style.",
			"disapproval": false,
			"date": "2012-04-10 07:05:50.673433",
			"approval": true
		},
		{
			"sender": "mpimenov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode66\nsrc/pkg/runtime/parfor.c:66: d = n % nthr;\nmove out of the loop?\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode69\nsrc/pkg/runtime/parfor.c:69: end += (i+1);\nprobably remove parentheses?\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode171\nsrc/pkg/runtime/parfor.c:171: m->gcstats.nsteal += 1;\ns/+= 1/++/\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode181\nsrc/pkg/runtime/parfor.c:181: // if a user asked to not wait for others, exit now\ns/to not/not to/\ns/others/the others/\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/runtime.h#newcode375\nsrc/pkg/runtime/runtime.h:375: // otherwise parfor may return while other threads still working\ns/still working/are still working/\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/runtime.h#newcode685\nsrc/pkg/runtime/runtime.h:685: * otherwise, threads can return while other threads still finishing processing.\ns/still/are still/",
			"disapproval": false,
			"date": "2012-04-09 14:47:33.752883",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just two comments on the comments (heh).\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode96\nsrc/pkg/runtime/parfor.c:96: // obtain 0-based thread index\nShouldn't these be complete sentences, starting with a capital letter and ending with a full stop? Similarly below.\n\nhttp://codereview.appspot.com/5986054/diff/1010/src/pkg/runtime/parfor.c#newcode115\nsrc/pkg/runtime/parfor.c:115: // while have work, bump low index and execute the iteration\ns,have,there is,",
			"disapproval": false,
			"date": "2012-04-09 14:12:26.626810",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986054/diff/6010/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/5986054/diff/6010/src/pkg/runtime/runtime.h#newcode360\nsrc/pkg/runtime/runtime.h:360: // executed for each element\nOn 2012/04/10 07:05:50, bsiegert wrote:\n> One more thing, sorry I only saw this now. In the other struct definition in\n> this file, the comments are in the same line as the definition, with an\n> appropriate number of tabs. Please follow the same style.\n\nDone.\nYeah, it's more compact now.",
			"disapproval": false,
			"date": "2012-04-10 07:09:29.257868",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bsiegert@gmail.com, mpimenov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-10 06:48:29.621521",
			"approval": false
		},
		{
			"sender": "mpimenov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go\nFile src/pkg/runtime/parfor_test.go (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode44\nsrc/pkg/runtime/parfor_test.go:44: (*d)[i] = (*d)[i]*(*d)[i] + 1\nWill\nx := (*d)[i]\n(*d)[i] = x*x + 1\nmake it more readable?\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode109\nsrc/pkg/runtime/parfor_test.go:109: go func() {\nCan't you just go ParforDo(desc) here?",
			"disapproval": false,
			"date": "2012-04-10 16:12:17.054121",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks pretty good; lots of tiny stuff\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/export_test.go\nFile src/pkg/runtime/export_test.go (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/export_test.go#newcode41\nsrc/pkg/runtime/export_test.go:41: func parforsetup2(desc *Parfor, nthr, n uint32, ctx *byte, wait bool, body interface{})\nSure looks like this should be body func(*Parfor, uint32), not body interface{}.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/export_test.go#newcode43\nsrc/pkg/runtime/export_test.go:43: func parforgetiters(desc *Parfor, tid uint32) (uint32, uint32)\nThis says uint32 but your code says uintptr.  Change to match code.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode26\nsrc/pkg/runtime/parfor.c:26: desc->nthrmax = nthrmax;\ndesc->thr = (byte*)(desc+1) + CacheLineSize;\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode40\nsrc/pkg/runtime/parfor.c:40: getthread(Parfor *desc, uint32 i)\nCan delete; just use desc->thr[i].\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode46\nsrc/pkg/runtime/parfor.c:46: runtime\u00b7parforsetup(Parfor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, void (*body)(Parfor*, uint32))\nvoid *body\nwould be fine here (to match the change to a func type)\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode162\nsrc/pkg/runtime/parfor.c:162: if(runtime\u00b7cas64(victimpos, &pos, (uint64)begin | (((uint64)begin2)<<32))) {\nThe () around (uint64)begin2 are unnecessary.\n\n(uint64)begin | (uint64)begin2<<32\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode171\nsrc/pkg/runtime/parfor.c:171: runtime\u00b7atomicstore64(mypos, (uint64)begin | ((uint64)end)<<32);\nSame.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode172\nsrc/pkg/runtime/parfor.c:172: m->gcstats.nsteal++;\nThis isn't really gcstats anymore.  Maybe put these in the ParforThread instead and gather them at the end?\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode200\nsrc/pkg/runtime/parfor.c:200: // func parforgetiters(desc *Parfor, thr uint32) (uint32, uint32)\ns/uint32/uintptr/g\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go\nFile src/pkg/runtime/parfor_test.go (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode44\nsrc/pkg/runtime/parfor_test.go:44: (*d)[i] = (*d)[i]*(*d)[i] + 1\nOn 2012/04/10 16:12:17, mpimenov wrote:\n> Will\n> x := (*d)[i]\n> (*d)[i] = x*x + 1\n> make it more readable?\n\nOr just \n\nd := *(*[]uint64)(unsafe.Pointer(desc.Ctx))\nd[i] = d[i]*d[i] + 1\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode109\nsrc/pkg/runtime/parfor_test.go:109: go func() {\nOn 2012/04/10 16:12:17, mpimenov wrote:\n> Can't you just go ParforDo(desc) here?\n\nYes, please do that.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h#newcode76\nsrc/pkg/runtime/runtime.h:76: \ntypedef struct ParforThread ParforThread;\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h#newcode369\nsrc/pkg/runtime/runtime.h:369: };\nParforThread *thr;",
			"disapproval": false,
			"date": "2012-04-10 20:37:53.141073",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bsiegert@gmail.com, mpimenov@google.com, rsc@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-12 11:28:37.617979",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/export_test.go\nFile src/pkg/runtime/export_test.go (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/export_test.go#newcode41\nsrc/pkg/runtime/export_test.go:41: func parforsetup2(desc *Parfor, nthr, n uint32, ctx *byte, wait bool, body interface{})\nOn 2012/04/10 20:37:53, rsc wrote:\n> Sure looks like this should be body func(*Parfor, uint32), not body interface{}.\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode26\nsrc/pkg/runtime/parfor.c:26: desc->nthrmax = nthrmax;\nOn 2012/04/10 20:37:53, rsc wrote:\n> desc->thr = (byte*)(desc+1) + CacheLineSize;\n> \n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode40\nsrc/pkg/runtime/parfor.c:40: getthread(Parfor *desc, uint32 i)\nOn 2012/04/10 20:37:53, rsc wrote:\n> Can delete; just use desc->thr[i].\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode46\nsrc/pkg/runtime/parfor.c:46: runtime\u00b7parforsetup(Parfor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, void (*body)(Parfor*, uint32))\nOn 2012/04/10 20:37:53, rsc wrote:\n> void *body\n> would be fine here (to match the change to a func type)\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode162\nsrc/pkg/runtime/parfor.c:162: if(runtime\u00b7cas64(victimpos, &pos, (uint64)begin | (((uint64)begin2)<<32))) {\nOn 2012/04/10 20:37:53, rsc wrote:\n> The () around (uint64)begin2 are unnecessary.\n> \n> (uint64)begin | (uint64)begin2<<32\n> \n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode171\nsrc/pkg/runtime/parfor.c:171: runtime\u00b7atomicstore64(mypos, (uint64)begin | ((uint64)end)<<32);\nOn 2012/04/10 20:37:53, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode200\nsrc/pkg/runtime/parfor.c:200: // func parforgetiters(desc *Parfor, thr uint32) (uint32, uint32)\nOn 2012/04/10 20:37:53, rsc wrote:\n> s/uint32/uintptr/g\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go\nFile src/pkg/runtime/parfor_test.go (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode44\nsrc/pkg/runtime/parfor_test.go:44: (*d)[i] = (*d)[i]*(*d)[i] + 1\nOn 2012/04/10 16:12:17, mpimenov wrote:\n> Will\n> x := (*d)[i]\n> (*d)[i] = x*x + 1\n> make it more readable?\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode44\nsrc/pkg/runtime/parfor_test.go:44: (*d)[i] = (*d)[i]*(*d)[i] + 1\nOn 2012/04/10 20:37:53, rsc wrote:\n> On 2012/04/10 16:12:17, mpimenov wrote:\n> > Will\n> > x := (*d)[i]\n> > (*d)[i] = x*x + 1\n> > make it more readable?\n> \n> Or just \n> \n> d := *(*[]uint64)(unsafe.Pointer(desc.Ctx))\n> d[i] = d[i]*d[i] + 1\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode109\nsrc/pkg/runtime/parfor_test.go:109: go func() {\nOn 2012/04/10 16:12:17, mpimenov wrote:\n> Can't you just go ParforDo(desc) here?\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor_test.go#newcode109\nsrc/pkg/runtime/parfor_test.go:109: go func() {\nOn 2012/04/10 20:37:53, rsc wrote:\n> On 2012/04/10 16:12:17, mpimenov wrote:\n> > Can't you just go ParforDo(desc) here?\n> \n> Yes, please do that.\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h#newcode76\nsrc/pkg/runtime/runtime.h:76: \nOn 2012/04/10 20:37:53, rsc wrote:\n> typedef struct ParforThread ParforThread;\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h#newcode369\nsrc/pkg/runtime/runtime.h:369: };\nOn 2012/04/10 20:37:53, rsc wrote:\n> ParforThread *thr;\n\nDone.",
			"disapproval": false,
			"date": "2012-04-12 09:54:22.115816",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/12 10:51:51, minux wrote:\n> add parfor.c to runtimedefs table in cmd/dist/buildruntime.c.\n\nWorks for me\nThanks!",
			"disapproval": false,
			"date": "2012-04-12 12:06:07.342412",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h#newcode369\nsrc/pkg/runtime/runtime.h:369: };\nOn 2012/04/10 20:37:53, rsc wrote:\n> ParforThread *thr;\n\nWith this change it does not build:\n\ngo/src$ ./make.bash \n# Building C bootstrap tool.\ncmd/dist\n\n# Building compilers and Go bootstrap tool for host, linux/amd64.\nlib9\n...\npkg/runtime\ngo/src/pkg/runtime/zruntime_defs_linux_amd64.go:211: undefined: parforthread\ngo tool dist: FAILED: go/pkg/tool/linux_amd64/6g -o $WORK/_go_.6 -p runtime -+ go/src/pkg/runtime/compiler.go go/src/pkg/runtime/debug.go go/src/pkg/runtime/error.go go/src/pkg/runtime/extern.go go/src/pkg/runtime/mem.go go/src/pkg/runtime/softfloat64.go go/src/pkg/runtime/type.go go/src/pkg/runtime/zgoarch_amd64.go go/src/pkg/runtime/zgoos_linux.go go/src/pkg/runtime/zruntime_defs_linux_amd64.go go/src/pkg/runtime/zversion.go\n\n\nzruntime_defs_linux_amd64.go contains:\ntype parfor struct {\n        body    func(*parfor, uint)\n        done    uint\n        nthr    uint\n        nthrmax uint\n        thrseq  uint\n        cnt     uint\n        ctx     unsafe.Pointer\n        wait    uint8\n        thr     *parforthread\n}\nbut ParforThread is defined only in parfor.c.\n\nI can't put ParforThread definition into runtime.h, because it contains CacheLineSize, which is defined in arch.h. Cgo depends on runtime.h, but does not have arch.h.\n\nI am not sure what is the way to resolve it.",
			"disapproval": false,
			"date": "2012-04-12 09:59:07.055147",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/parfor.c#newcode172\nsrc/pkg/runtime/parfor.c:172: m->gcstats.nsteal++;\nOn 2012/04/10 20:37:53, rsc wrote:\n> This isn't really gcstats anymore.  Maybe put these in the ParforThread instead\n> and gather them at the end?\n\nI've thought about it.\nFirst, it's some additional code. Second, it's unclear how to handle it when wait==false (that is, threads return from parfordo, while other threads still working).\nParfor is going to be used only in GC, so in that sense it's still GCStats.\n\nPerhaps, rename GCStats to something more general?",
			"disapproval": false,
			"date": "2012-04-12 10:08:11.397703",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 12, 2012 at 5:59 PM, <dvyukov@google.com> wrote:\n\n>\n> http://codereview.appspot.com/**5986054/diff/2018/src/pkg/**\n> runtime/runtime.h<http://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h>\n> File src/pkg/runtime/runtime.h (right):\n>\n> http://codereview.appspot.com/**5986054/diff/2018/src/pkg/**\n> runtime/runtime.h#newcode369<http://codereview.appspot.com/5986054/diff/2018/src/pkg/runtime/runtime.h#newcode369>\n> src/pkg/runtime/runtime.h:369: };\n> On 2012/04/10 20:37:53, rsc wrote:\n>\n>> ParforThread *thr;\n>>\n>\n> With this change it does not build:\n>\n> go/src$ ./make.bash\n> # Building C bootstrap tool.\n> cmd/dist\n>\n> # Building compilers and Go bootstrap tool for host, linux/amd64.\n> lib9\n> ...\n> pkg/runtime\n> go/src/pkg/runtime/zruntime_**defs_linux_amd64.go:211: undefined:\n> parforthread\n> go tool dist: FAILED: go/pkg/tool/linux_amd64/6g -o $WORK/_go_.6 -p\n> runtime -+ go/src/pkg/runtime/compiler.go go/src/pkg/runtime/debug.go\n> go/src/pkg/runtime/error.go go/src/pkg/runtime/extern.go\n> go/src/pkg/runtime/mem.go go/src/pkg/runtime/**softfloat64.go\n> go/src/pkg/runtime/type.go go/src/pkg/runtime/zgoarch_**amd64.go\n> go/src/pkg/runtime/zgoos_**linux.go\n> go/src/pkg/runtime/zruntime_**defs_linux_amd64.go\n> go/src/pkg/runtime/zversion.go\n>\n>\n> zruntime_defs_linux_amd64.go contains:\n> type parfor struct {\n>        body    func(*parfor, uint)\n>        done    uint\n>        nthr    uint\n>        nthrmax uint\n>        thrseq  uint\n>        cnt     uint\n>        ctx     unsafe.Pointer\n>        wait    uint8\n>        thr     *parforthread\n> }\n> but ParforThread is defined only in parfor.c.\n>\n> I can't put ParforThread definition into runtime.h, because it contains\n> CacheLineSize, which is defined in arch.h. Cgo depends on runtime.h, but\n> does not have arch.h.\n>\n> I am not sure what is the way to resolve it.\n>\nadd parfor.c to runtimedefs table in cmd/dist/buildruntime.c.\n",
			"disapproval": false,
			"date": "2012-04-12 10:51:51.758432",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-04-23 07:46:47.136064",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks very close.\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/export_test.go\nFile src/pkg/runtime/export_test.go (right):\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/export_test.go#newcode59\nsrc/pkg/runtime/export_test.go:59: var ParforGetIters = func(desc *Parfor, tid uint32) (uint32, uint32) {\nfunc ParforIters(desc *Parfor, tid uint32) (uint32, uint32) {\n...\n}\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode58\nsrc/pkg/runtime/parfor.c:58: begin = n / nthr * i;\nInstead of the next 9 lines, it seems like you can do\n\nbegin = (uint64)n*i / nthr;\nend = (uint64)n*(i+1) / nthr;\n\n(and then you don't need mod = n % nthr above either).\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode72\nsrc/pkg/runtime/parfor.c:72: // func parforsetup2(desc *Parfor, nthr, n uint32, ctx unsafe.Pointer, wait bool, body interface{})\nThis comment looks like it is out of date.  Should say body func(Parfor*, uint32)\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode112\nsrc/pkg/runtime/parfor.c:112: if(begin<end) {\nbegin < end (spaces)\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode165\nsrc/pkg/runtime/parfor.c:165: m->gcstats.nsteal++;\nThese are not really gcstats anymore.  It seems like these could be local variables and then added to the desc atomically before returning?\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode195\nsrc/pkg/runtime/parfor.c:195: runtime\u00b7parforgetiters(Parfor *desc, uintptr tid, uintptr start, uintptr end)\ns/get//\nhttp://golang.org/doc/effective_go.html#Getters",
			"disapproval": false,
			"date": "2012-04-25 02:34:00.197545",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All done. PTAL.\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/export_test.go\nFile src/pkg/runtime/export_test.go (right):\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/export_test.go#newcode59\nsrc/pkg/runtime/export_test.go:59: var ParforGetIters = func(desc *Parfor, tid uint32) (uint32, uint32) {\nOn 2012/04/25 02:34:00, rsc wrote:\n> func ParforIters(desc *Parfor, tid uint32) (uint32, uint32) {\n> ...\n> }\n> \n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode58\nsrc/pkg/runtime/parfor.c:58: begin = n / nthr * i;\nOn 2012/04/25 02:34:00, rsc wrote:\n> Instead of the next 9 lines, it seems like you can do\n> \n> begin = (uint64)n*i / nthr;\n> end = (uint64)n*(i+1) / nthr;\n> \n> (and then you don't need mod = n % nthr above either).\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode72\nsrc/pkg/runtime/parfor.c:72: // func parforsetup2(desc *Parfor, nthr, n uint32, ctx unsafe.Pointer, wait bool, body interface{})\nOn 2012/04/25 02:34:00, rsc wrote:\n> This comment looks like it is out of date.  Should say body func(Parfor*,\n> uint32)\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode112\nsrc/pkg/runtime/parfor.c:112: if(begin<end) {\nOn 2012/04/25 02:34:00, rsc wrote:\n> begin < end (spaces)\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode165\nsrc/pkg/runtime/parfor.c:165: m->gcstats.nsteal++;\nOn 2012/04/25 02:34:00, rsc wrote:\n> These are not really gcstats anymore.  It seems like these could be local\n> variables and then added to the desc atomically before returning?\n\nDone.\n\nhttp://codereview.appspot.com/5986054/diff/15009/src/pkg/runtime/parfor.c#newcode195\nsrc/pkg/runtime/parfor.c:195: runtime\u00b7parforgetiters(Parfor *desc, uintptr tid, uintptr start, uintptr end)\nOn 2012/04/25 02:34:00, rsc wrote:\n> s/get//\n> http://golang.org/doc/effective_go.html#Getters\n\nDone.",
			"disapproval": false,
			"date": "2012-04-26 13:43:59.677569",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "dumb dumb question: shouldn't this be ParFor?",
			"disapproval": false,
			"date": "2012-04-26 21:07:28.417166",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/26 21:07:28, r wrote:\n> dumb dumb question: shouldn't this be ParFor?\n\nDone. PTAL.",
			"disapproval": false,
			"date": "2012-04-27 18:39:11.852995",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/27 18:39:11, dvyukov wrote:\n> On 2012/04/26 21:07:28, r wrote:\n> > dumb dumb question: shouldn't this be ParFor?\n> \n> Done. PTAL.\n\nping",
			"disapproval": false,
			"date": "2012-05-08 08:02:19.773646",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5986054/diff/35001/src/pkg/runtime/parfor.c\nFile src/pkg/runtime/parfor.c (right):\n\nhttp://codereview.appspot.com/5986054/diff/35001/src/pkg/runtime/parfor.c#newcode26\nsrc/pkg/runtime/parfor.c:26: byte pad[CacheLineSize-sizeof(ParForThreadUnpadded)];\nDon't you still want byte pad[CacheLineSize] here?  And then don't need the Unpadded struct.  \n\nWhen there was just one field, you could rely on the fact that the padding would put pos from one struct in a different cache line than pos from another struct.  However, for a larger struct, there is no guarantee that one ParForThread's pos won't be in the same cache line as a different ParForThread's nsleep.  In fact, unless you get lucky and the struct is exactly cache-line-aligned, you'll get exactly this overlap.  Using byte pad[CacheLineSize] avoids that, at a small memory cost.",
			"disapproval": false,
			"date": "2012-05-08 19:19:58.349890",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/08 19:19:58, rsc wrote:\n> LGTM\n> \n> http://codereview.appspot.com/5986054/diff/35001/src/pkg/runtime/parfor.c\n> File src/pkg/runtime/parfor.c (right):\n> \n> http://codereview.appspot.com/5986054/diff/35001/src/pkg/runtime/parfor.c#newcode26\n> src/pkg/runtime/parfor.c:26: byte\n> pad[CacheLineSize-sizeof(ParForThreadUnpadded)];\n> Don't you still want byte pad[CacheLineSize] here?  And then don't need the\n> Unpadded struct.  \n> \n> When there was just one field, you could rely on the fact that the padding would\n> put pos from one struct in a different cache line than pos from another struct. \n> However, for a larger struct, there is no guarantee that one ParForThread's pos\n> won't be in the same cache line as a different ParForThread's nsleep.  In fact,\n> unless you get lucky and the struct is exactly cache-line-aligned, you'll get\n> exactly this overlap.  Using byte pad[CacheLineSize] avoids that, at a small\n> memory cost.\n\n\nMakes sense. Done.",
			"disapproval": false,
			"date": "2012-05-11 06:49:15.636412",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bsiegert@gmail.com",
				"mpimenov@google.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=345cbca96c55 ***\n\nruntime: add parallel for algorithm\nThis is factored out part of:\nhttp://codereview.appspot.com/5279048/\n(parallel GC)\n\nR=bsiegert, mpimenov, rsc, minux.ma, r\nCC=golang-dev\nhttp://codereview.appspot.com/5986054",
			"disapproval": false,
			"date": "2012-05-11 06:50:38.823236",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5986054: runtime: add parallel for algorithm",
	"created": "2012-04-06 15:17:46.524562",
	"patchsets": [
		1,
		1001,
		4001,
		5001,
		5002,
		4006,
		6005,
		1010,
		6010,
		2018,
		14001,
		15009,
		27001,
		26002,
		35001,
		44002
	],
	"modified": "2012-05-11 06:50:40.779982",
	"closed": true,
	"issue": 5986054
}