{
	"description": "json: speed up encoding, caching reflect calls\n\nBefore\njson.BenchmarkCodeEncoder  10  181232100 ns/op  10.71 MB/s\njson.BenchmarkCodeMarshal  10  184578000 ns/op  10.51 MB/s\n\nAfter:\njson.BenchmarkCodeEncoder  10  146444000 ns/op  13.25 MB/s\njson.BenchmarkCodeMarshal  10  151428500 ns/op  12.81 MB/s",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Nov 20, 2011 at 12:47 PM, <r@golang.org> wrote:\n\n> This is just a cache. The package needs a rewrite.\n>\n\nA Theseusian rewrite worked for the http package. Might work here too.\n",
			"disapproval": false,
			"date": "2011-11-20 17:59:17.199866",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4a5b249ef23d ***\n\njson: speed up encoding, caching reflect calls\n\nBefore\njson.BenchmarkCodeEncoder  10  181232100 ns/op  10.71 MB/s\njson.BenchmarkCodeMarshal  10  184578000 ns/op  10.51 MB/s\n\nAfter:\njson.BenchmarkCodeEncoder  10  146444000 ns/op  13.25 MB/s\njson.BenchmarkCodeMarshal  10  151428500 ns/op  12.81 MB/s\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5416046",
			"disapproval": false,
			"date": "2011-11-21 15:49:18.609891",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-18 14:40:55.866227",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5416046/diff/4001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/5416046/diff/4001/src/pkg/encoding/json/encode.go#newcode201\nsrc/pkg/encoding/json/encode.go:201: // tagCache is a cache of seen StructTag's \"json\" fields.\nOn 2011/11/21 15:06:51, rsc wrote:\n> Unused, I believe.\n\nIndeed.\n\nhttp://codereview.appspot.com/5416046/diff/4001/src/pkg/encoding/json/encode.go#newcode479\nsrc/pkg/encoding/json/encode.go:479: defer typeCacheLock.RUnlock()\nOn 2011/11/21 15:06:51, rsc wrote:\n> The locking here is suspect.  \n\nuh, whoops.",
			"disapproval": false,
			"date": "2011-11-21 15:25:54.076813",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This seems reasonable but maybe is not enough?\nI was wondering if there should just be a global\nper-type struct with useful information.\n\ntype structInfo struct {\n    field []reflect.StructField  // for use by Marshal\n    byName map[string]reflect.StructField  // for use by Unmarshal\n}\n\nvar typeCache struct {\n    sync.RWMutex\n    m map[reflect.Type]*structInfo\n}\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 15:48:23.198529",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-20 16:49:29.765573",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416046/diff/4001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/5416046/diff/4001/src/pkg/encoding/json/encode.go#newcode201\nsrc/pkg/encoding/json/encode.go:201: // tagCache is a cache of seen StructTag's \"json\" fields.\nUnused, I believe.\n\nhttp://codereview.appspot.com/5416046/diff/4001/src/pkg/encoding/json/encode.go#newcode479\nsrc/pkg/encoding/json/encode.go:479: defer typeCacheLock.RUnlock()\nThe locking here is suspect.  I think you need:\n\ntypeCacheLock.RLock()\nfs, ok := encodeFieldsCache[t]\ntypeCacheLock.RUnlock()\nif ok {\n    return fs\n}\n\ntypeCacheLock.Lock()\ndefer typeCacheLock.Unlock()\nfs, ok := encodeFieldsCache[t]\nif ok {\n    return fs\n}",
			"disapproval": false,
			"date": "2011-11-21 15:06:50.982258",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-21 15:43:38.045925",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I took it further, but just for encode so far. I initially tried like\nyou suggested (an outer structInfo that could potentially hold stuff for\neither encode or decode), but it resulted in lots of nil checks, since\ndifferent parts of structInfo could be populated based on whether encode or\ndecode had been already called on that type.  (or the map entry not present\nat all.)\n\nI think it's simpler as I have it now, caching just what's needed for\nencode.  Then we can do similarly for decode.\n\nOn Fri, Nov 18, 2011 at 7:48 AM, Russ Cox <rsc@golang.org> wrote:\n\n> This seems reasonable but maybe is not enough?\n> I was wondering if there should just be a global\n> per-type struct with useful information.\n>\n> type structInfo struct {\n>    field []reflect.StructField  // for use by Marshal\n>    byName map[string]reflect.StructField  // for use by Unmarshal\n> }\n>\n> var typeCache struct {\n>    sync.RWMutex\n>    m map[reflect.Type]*structInfo\n> }\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-20 16:58:11.626630",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is just a cache. The package needs a rewrite.\n\nThis change is OK, but only as a temporary measure.",
			"disapproval": false,
			"date": "2011-11-20 17:47:41.308457",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 15:25:18.250807",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5416046: json: speed up encoding, caching reflect calls",
	"created": "2011-11-18 14:39:56.865411",
	"patchsets": [
		1,
		2001,
		4001,
		6,
		2004
	],
	"modified": "2011-11-21 15:49:19.806332",
	"closed": true,
	"issue": 5416046
}