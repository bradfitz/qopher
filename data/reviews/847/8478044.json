{
	"description": "time: add Time.FormatAppend\n\nThis is a version of Time.Format that doesn't require allocation.\n\nFixes Issue 5192\nUpdate Issue 5195",
	"cc": [
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"r@golang.org",
		"gustavo@niemeyer.net"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-14 14:55:00.368460",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=r (assigned by bradfitz)",
			"disapproval": false,
			"date": "2013-05-14 22:14:42.179250",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-16 00:04:00.110800",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Reuploaded, since Rietveld was showing its fun corrupt patch message.\n\nDiff is tiny, but it adds API.",
			"disapproval": false,
			"date": "2013-05-15 00:28:45.808030",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go#newcode387\nsrc/pkg/time/format.go:387: b = buf[:0]\nmove the declaration of buf to here.\n\nbut why even bother? why not just always make a buffer?",
			"disapproval": false,
			"date": "2013-05-15 21:51:44.384650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go#newcode387\nsrc/pkg/time/format.go:387: b = buf[:0]\nOn 2013/05/15 21:51:44, r wrote:\n> move the declaration of buf to here.\n> \n> but why even bother? why not just always make a buffer? \n\nThis is just moving the code.  I didn't write this.\n\nBut this does save an allocation.  Only the [64]byte -> string copy is made, rather than allocating a []byte and then allocating a string.",
			"disapproval": false,
			"date": "2013-05-15 22:03:14.499620",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go#newcode387\nsrc/pkg/time/format.go:387: b = buf[:0]\nfair enough. it shouldn't allocate even if you call make, but it does. i've filed an issue.\n\ni still think the allocation of buf should move inside the if.",
			"disapproval": false,
			"date": "2013-05-15 22:05:05.899140",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttps://codereview.appspot.com/8478044/diff/11001/src/pkg/time/format.go#newcode387\nsrc/pkg/time/format.go:387: b = buf[:0]\nOn 2013/05/15 22:05:05, r wrote:\n> fair enough. it shouldn't allocate even if you call make, but it does. i've\n> filed an issue.\n> \n> i still think the allocation of buf should move inside the if.\n\nThat means I have to add a const, or do:\n\nif buf := [64]byte{}; max <= len(buf) {\n   b = buf[:0]\n}\n\nI've went with a const.",
			"disapproval": false,
			"date": "2013-05-15 22:18:41.470520",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0d28fd55e721 ***\n\ntime: add Time.FormatAppend\n\nThis is a version of Time.Format that doesn't require allocation.\n\nFixes Issue 5192\nUpdate Issue 5195\n\nR=r\nCC=gobot, golang-dev\nhttps://codereview.appspot.com/8478044",
			"disapproval": false,
			"date": "2013-05-16 00:24:28.862770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This function breaks the usual Go convention of putting the destination as the first argument (copy, io.Copy, strconv.AppendFloat, etc).\n\nIt also breaks the convention set by strconv of putting Append first, but I think that's less important.",
			"disapproval": false,
			"date": "2013-05-17 17:59:00.546580",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's a performance hack leaking into the API.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-17 19:50:16.535000",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's rethink this. Can we roll it back?",
			"disapproval": false,
			"date": "2013-05-17 18:53:23.768860",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just decide what to name it and the argument order and I'll send a CL to\r\nchange it.\r\n\r\nWhy roll it back?\r\nOn May 17, 2013 11:53 AM, <r@golang.org> wrote:\r\n\r\n> Let's rethink this. Can we roll it back?\r\n>\r\n>\r\n> https://codereview.appspot.**com/8478044/<https://codereview.appspot.com/8478044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-17 19:03:13.239690",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's ugly.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-17 19:07:11.440330",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Constructive.\r\n On May 17, 2013 12:07 PM, \"Rob Pike\" <r@golang.org> wrote:\r\n\r\n> It's ugly.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-17 19:14:14.095090",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 17, 2013 at 4:14 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Constructive.\r\n\r\nJust rollback and propose AppendFormat(dest, format)?  Seems easier\r\nthan debating.\r\n\r\n\r\ngustavo @ http://niemeyer.net\r\n",
			"disapproval": false,
			"date": "2013-05-17 19:18:55.729190",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 17, 2013 at 4:50 PM, Russ Cox <rsc@golang.org> wrote:\r\n> It's a performance hack leaking into the API.\r\n\r\nIsn't that the case all over the place? Why would we have\r\nstrconv.Append*, or the bytes vs. string duplication all over the\r\nregexp package, or the special case of append(bytes, string...)?\r\n\r\nIt's a genuine question, rather than a trolling one. I don't quite get\r\nwhere the line is.\r\n\r\n\r\ngustavo @ http://niemeyer.net\r\n",
			"disapproval": false,
			"date": "2013-05-17 20:06:19.845630",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, I have no clue what the rules are either.\r\n\r\n\r\n\r\nOn Fri, May 17, 2013 at 1:05 PM, Gustavo Niemeyer <gustavo@niemeyer.net>wrote:\r\n\r\n> On Fri, May 17, 2013 at 4:50 PM, Russ Cox <rsc@golang.org> wrote:\r\n> > It's a performance hack leaking into the API.\r\n>\r\n> Isn't that the case all over the place? Why would we have\r\n> strconv.Append*, or the bytes vs. string duplication all over the\r\n> regexp package, or the special case of append(bytes, string...)?\r\n>\r\n> It's a genuine question, rather than a trolling one. I don't quite get\r\n> where the line is.\r\n>\r\n>\r\n> gustavo @ http://niemeyer.net\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-17 20:10:46.452050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 17, 2013 at 4:05 PM, Gustavo Niemeyer <gustavo@niemeyer.net>wrote:\r\n\r\n> On Fri, May 17, 2013 at 4:50 PM, Russ Cox <rsc@golang.org> wrote:\r\n> > It's a performance hack leaking into the API.\r\n>\r\n> Isn't that the case all over the place? Why would we have\r\n> strconv.Append*, or the bytes vs. string duplication all over the\r\n> regexp package, or the special case of append(bytes, string...)?\r\n>\r\n> It's a genuine question, rather than a trolling one. I don't quite get\r\n> where the line is.\r\n>\r\n\r\nreasonable people can disagree about where the line is.\r\nAppendFormat is certainly somewhere near it.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2013-05-17 20:11:47.497750",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8478044: time: add Time.FormatAppend",
	"created": "2013-04-08 17:33:16.251940",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		10002,
		21001
	],
	"modified": "2013-05-17 19:18:55.874240",
	"closed": true,
	"issue": 8478044
}