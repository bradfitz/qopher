{
	"description": "net/http: Fix basic authentication with empty password\n\n        The encoded string must include the : separating the username\n        and the password, even when the latter is empty. See\n        http://www.ietf.org/rfc/rfc2617.txt for more information.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-07 16:52:13.159420",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just in case anybody knows, is it possible to submit another CL which modifies this very same files? (but fixes another issue - 4800) It looks like the only thing I can do while this CL is pending is update it, but I can't create another one affecting these files.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-04-07 20:19:14.359700",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You haven't submitted a CLA.\r\n\r\nhttp://golang.org/doc/contribute.html#copyright\r\n\r\nLet us know when you have.\r\n\r\n\r\n\r\n\r\nOn Sun, Apr 7, 2013 at 9:52 AM, <alberto.garcia.hierro@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net/http: Fix basic authentication with empty password\r\n>\r\n>         The encoded string must include the : separating the username\r\n>         and the password, even when the latter is empty. See\r\n>         http://www.ietf.org/rfc/**rfc2617.txt<http://www.ietf.org/rfc/rfc2617.txt>for more information.\r\n>\r\n> Please review this at https://codereview.appspot.**com/8475043/<https://codereview.appspot.com/8475043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/client.go\r\n>   M src/pkg/net/http/client_test.**go\r\n>\r\n>\r\n> Index: src/pkg/net/http/client.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/client.go\r\n> +++ b/src/pkg/net/http/client.go\r\n> @@ -161,7 +161,18 @@\r\n>         }\r\n>\r\n>         if u := req.URL.User; u != nil {\r\n> -               req.Header.Set(\"Authorization\"**, \"Basic\r\n> \"+base64.URLEncoding.**EncodeToString([]byte(u.**String())))\r\n> +               auth := u.String()\r\n> +               // UserInfo.String() only returns the colon when the\r\n> +               // password is set, so we must add it here.\r\n> +               //\r\n> +               // See 2 (end of page 4) http://www.ietf.org/rfc/**\r\n> rfc2617.txt <http://www.ietf.org/rfc/rfc2617.txt>\r\n> +               // \"To receive authorization, the client sends the userid\r\n> and password,\r\n> +               // separated by a single colon (\":\") character, within a\r\n> base64\r\n> +               // encoded string in the credentials.\"\r\n> +               if _, hasPassword := u.Password(); !hasPassword {\r\n> +                       auth += \":\"\r\n> +               }\r\n> +               req.Header.Set(\"Authorization\"**, \"Basic\r\n> \"+base64.URLEncoding.**EncodeToString([]byte(auth)))\r\n>         }\r\n>         resp, err = t.RoundTrip(req)\r\n>         if err != nil {\r\n> Index: src/pkg/net/http/client_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/client_**test.go\r\n> +++ b/src/pkg/net/http/client_**test.go\r\n> @@ -10,6 +10,7 @@\r\n>         \"bytes\"\r\n>         \"crypto/tls\"\r\n>         \"crypto/x509\"\r\n> +       \"encoding/base64\"\r\n>         \"errors\"\r\n>         \"fmt\"\r\n>         \"io\"\r\n> @@ -700,3 +701,37 @@\r\n>                 }\r\n>         }\r\n>  }\r\n> +\r\n> +func TestEmptyPasswordAuth(t *testing.T) {\r\n> +       defer afterTest(t)\r\n> +       gopher := \"gopher\"\r\n> +       ts := httptest.NewServer(**HandlerFunc(func(w ResponseWriter, r\r\n> *Request) {\r\n> +               auth := r.Header.Get(\"Authorization\")\r\n> +               if strings.HasPrefix(auth, \"Basic \") {\r\n> +                       encoded := auth[6:]\r\n> +                       decoded, err := base64.StdEncoding.**\r\n> DecodeString(encoded)\r\n> +                       if err != nil {\r\n> +                               t.Fatal(err)\r\n> +                       }\r\n> +                       expected := gopher + \":\"\r\n> +                       s := string(decoded)\r\n> +                       if expected != s {\r\n> +                               t.Errorf(\"Invalid Authorization header.\r\n> Got %q, wanted %q\", s, expected)\r\n> +                       }\r\n> +               } else {\r\n> +                       t.Errorf(\"Invalid auth %q\", auth)\r\n> +               }\r\n> +       }))\r\n> +       defer ts.Close()\r\n> +       c := &Client{}\r\n> +       req, err := NewRequest(\"GET\", ts.URL, nil)\r\n> +       if err != nil {\r\n> +               t.Fatal(err)\r\n> +       }\r\n> +       req.URL.User = url.User(gopher)\r\n> +       resp, err := c.Do(req)\r\n> +       if err != nil {\r\n> +               t.Fatal(err)\r\n> +       }\r\n> +       defer resp.Body.Close()\r\n> +}\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-07 20:33:27.416560",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/07 20:33:27, bradfitz wrote:\n> You haven't submitted a CLA.\n> \n> http://golang.org/doc/contribute.html#copyright\n> \n> Let us know when you have.\n\nHI Brad,\n\nI just submitted it, but I guess it will take a while until it's processed.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-04-08 07:39:02.100060",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 8 April 2013 06:19, <alberto.garcia.hierro@gmail.com> wrote:\r\n\r\n> Just in case anybody knows, is it possible to submit another CL which\r\n> modifies this very same files? (but fixes another issue - 4800) It looks\r\n> like the only thing I can do while this CL is pending is update it, but\r\n> I can't create another one affecting these files.\r\n>\r\n\r\nNope, you'll need a separate checkout.\r\n\r\nThis change will have to wait until after Go 1.1, though.\r\n",
			"disapproval": false,
			"date": "2013-04-08 07:43:43.677110",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 08/04/2013, at 09:43, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> This change will have to wait until after Go 1.1, though.\r\n\r\nHi Andrew,\r\n\r\n\tThat's pretty unfortunate, because https://code.google.com/p/go/issues/detail?id=4800 can't be correctly fixed without this CL.\r\n\r\n (Andrew, sorry for the duplicate, forgot to click on reply to all)\r\n\r\n---\r\nRegards,\r\nAlberto",
			"disapproval": false,
			"date": "2013-04-08 09:00:09.647170",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n\tForgot to mention that issue 4800 is marked as Go1.1\r\n\r\n---\r\nRegards,\r\nAlberto\r\n\r\nOn 08/04/2013, at 11:00, Alberto Garc\u00eda Hierro <alberto.garcia.hierro@gmail.com> wrote:\r\n\r\n> On 08/04/2013, at 09:43, Andrew Gerrand <adg@golang.org> wrote:\r\n> \r\n>> This change will have to wait until after Go 1.1, though.\r\n> \r\n> Hi Andrew,\r\n> \r\n> \tThat's pretty unfortunate, because https://code.google.com/p/go/issues/detail?id=4800 can't be correctly fixed without this CL.\r\n> \r\n>  (Andrew, sorry for the duplicate, forgot to click on reply to all)\r\n> \r\n> ---\r\n> Regards,\r\n> Alberto\r\n\r\n",
			"disapproval": false,
			"date": "2013-04-08 09:06:51.644330",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 8 April 2013 19:06, Alberto Garc\u00eda Hierro <\r\nalberto.garcia.hierro@gmail.com> wrote:\r\n\r\n> Forgot to mention that issue 4800 is marked as Go1.1\r\n>\r\n\r\nIt's marked Go1.1Maybe, which means it missed the cut.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2013-04-08 12:38:46.110810",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now that 1.1 is out, could someone please take a look at this CL?\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-05-14 13:04:56.863270",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-14 22:23:50.656850",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=82f7a08e1380 ***\n\nnet/http: Fix basic authentication with empty password\n\n        The encoded string must include the : separating the username\n        and the password, even when the latter is empty. See\n        http://www.ietf.org/rfc/rfc2617.txt for more information.\n\nR=golang-dev, bradfitz, adg\nCC=golang-dev\nhttps://codereview.appspot.com/8475043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-05-14 22:33:49.933380",
			"approval": false
		}
	],
	"owner_email": "alberto.garcia.hierro@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Hierro",
	"subject": "code review 8475043: net/http: Fix basic authentication with empty password",
	"created": "2013-04-07 16:51:50.955250",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-05-15 11:35:29.436270",
	"closed": true,
	"issue": 8475043
}