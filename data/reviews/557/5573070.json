{
	"description": "math/big: test both bitLen and bitLen_g\n\nAlso: simpler, more direct test.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave.andersen@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-01-25 23:14:54.756958",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We are not doing black-box testing here; we know the algorithm used\n(and we can safely assume that the assembler instruction is doing what\nit's specification says). We only need to test that there's no\nsystematic error. We also need to test both implementation, which is\nhappening as well.\n\nThe current modification is already overkill.\n- gri\n\n\nOn Wed, Jan 25, 2012 at 9:46 PM,  <dave.andersen@gmail.com> wrote:\n> On 2012/01/26 05:34:44, gri wrote:\n>>\n>> Hello mailto:golang-dev@googlegroups.com,\n>\n> mailto:dave.andersen@gmail.com (cc:\n>>\n>> mailto:golang-dev@googlegroups.com),\n>\n>\n>> Please take another look.\n>\n>\n> I'll stop squeaking. :-) \u00a0My rationale for doing two tests per number is\n> that the single-bit-set case is a special case in two ways: \u00a0There are\n> algorithms that one could mis-use that work *only* for that case, and I\n> can imagine (i'm not entirely as sure how) that one could mess up that\n> case because it's sensitive to, e.g., any weirdness of subtracting from\n> it. \u00a0At the same time, I think that the special case of a full word of\n> all 1s is a great testcase, because it's where you might see overflow\n> errors if an algorithm used addition. \u00a0But it's not that big a deal.\n>\n> A compromise answer might be to do what you did initially, and then test\n> a word of all 1s and call it a day.\n>\n> http://codereview.appspot.com/5573070/\n",
			"disapproval": false,
			"date": "2012-01-26 06:05:04.272107",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"dave.andersen@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/25 23:14:54, gri wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nCleaner and overall looks good, but I think it's a bit more robust to test more than just the 0001000 ... patterns.  Perhaps:\n  x := Word(1) << uint(i-1) // i == 0 ==> x == 0\n  y := x | (x-1)\n  for j := range []Word{ x, y } {\n...\n\n would accomplish the goals of the previous test while preserving this CL's redundancy elimination.",
			"disapproval": false,
			"date": "2012-01-26 02:33:17.197956",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"dave.andersen@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 02:33:17, dga wrote:\n> On 2012/01/25 23:14:54, gri wrote:\n> > Hello mailto:golang-dev@googlegroups.com,\n> > \n> > I'd like you to review this change to\n> > https://code.google.com/p/go\n> \n> Cleaner and overall looks good, but I think it's a bit more robust to test more\n> than just the 0001000 ... patterns.  Perhaps:\n>   x := Word(1) << uint(i-1) // i == 0 ==> x == 0\n>   y := x | (x-1)\n>   for j := range []Word{ x, y } {\n> ...\n> \n>  would accomplish the goals of the previous test while preserving this CL's\n> redundancy elimination.\n\n... of course, real code might instead look like _, j := range ... :)",
			"disapproval": false,
			"date": "2012-01-26 02:34:14.409752",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 26, 2012 at 1:05 AM, Robert Griesemer <gri@golang.org> wrote:\n> We are not doing black-box testing here; we know the algorithm used\n> (and we can safely assume that the assembler instruction is doing what\n> it's specification says). We only need to test that there's no\n> systematic error. We also need to test both implementation, which is\n> happening as well.\n\nGiven that goal for testing, I agree.  I'd remove the modification and\njust use your original simplified version.  I was approaching it from\na different goal for the tests.\n\n  -Dave\n",
			"disapproval": false,
			"date": "2012-01-26 06:08:55.611963",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"dave.andersen@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 93e682f6fb0e ***\n\nmath/big: test both bitLen and bitLen_g\n\nAlso: simpler, more direct test.\n\nR=golang-dev, dave.andersen\nCC=golang-dev\nhttp://codereview.appspot.com/5573070",
			"disapproval": false,
			"date": "2012-01-26 18:08:24.429147",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nCompromise: simplified test using your way of creating x. It's more\nobvious then my magic shifting which relied on overflow.\n\n- gri\n\nOn Wed, Jan 25, 2012 at 10:08 PM, David Andersen\n<dave.andersen@gmail.com> wrote:\n> On Thu, Jan 26, 2012 at 1:05 AM, Robert Griesemer <gri@golang.org> wrote:\n>> We are not doing black-box testing here; we know the algorithm used\n>> (and we can safely assume that the assembler instruction is doing what\n>> it's specification says). We only need to test that there's no\n>> systematic error. We also need to test both implementation, which is\n>> happening as well.\n>\n> Given that goal for testing, I agree. \u00a0I'd remove the modification and\n> just use your original simplified version. \u00a0I was approaching it from\n> a different goal for the tests.\n>\n> \u00a0-Dave\n",
			"disapproval": false,
			"date": "2012-01-26 06:15:08.939735",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave.andersen@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-26 05:34:44.819956",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 05:34:44, gri wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:dave.andersen@gmail.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nI'll stop squeaking. :-)  My rationale for doing two tests per number is that the single-bit-set case is a special case in two ways:  There are algorithms that one could mis-use that work *only* for that case, and I can imagine (i'm not entirely as sure how) that one could mess up that case because it's sensitive to, e.g., any weirdness of subtracting from it.  At the same time, I think that the special case of a full word of all 1s is a great testcase, because it's where you might see overflow errors if an algorithm used addition.  But it's not that big a deal.\n\nA compromise answer might be to do what you did initially, and then test a word of all 1s and call it a day.",
			"disapproval": false,
			"date": "2012-01-26 05:46:22.547957",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn 2012/01/26 06:15:08, gri wrote:\n> PTAL.\n> \n> Compromise: simplified test using your way of creating x. It's more\n> obvious then my magic shifting which relied on overflow.\n> \n> - gri\n> \n> On Wed, Jan 25, 2012 at 10:08 PM, David Andersen\n> <mailto:dave.andersen@gmail.com> wrote:\n> > On Thu, Jan 26, 2012 at 1:05 AM, Robert Griesemer <mailto:gri@golang.org> wrote:\n> >> We are not doing black-box testing here; we know the algorithm used\n> >> (and we can safely assume that the assembler instruction is doing what\n> >> it's specification says). We only need to test that there's no\n> >> systematic error. We also need to test both implementation, which is\n> >> happening as well.\n> >\n> > Given that goal for testing, I agree. &nbsp;I'd remove the modification and\n> > just use your original simplified version. &nbsp;I was approaching it from\n> > a different goal for the tests.\n> >\n> > &nbsp;-Dave",
			"disapproval": false,
			"date": "2012-01-26 15:32:23.202131",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5573070: math/big: test both bitLen and bitLen_g",
	"created": "2012-01-25 23:13:36.832524",
	"patchsets": [
		1,
		1001,
		1002,
		3001,
		5001,
		2008,
		1003,
		7
	],
	"modified": "2012-01-26 18:08:25.965470",
	"closed": true,
	"issue": 5573070
}