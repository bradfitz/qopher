{
	"description": "go.crypto/ssh: add user name and netowrk address to server connection.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"agl@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+agl1\n\nThis looks ok, leaving for AGL.\n\nhttp://codereview.appspot.com/5577070/diff/3/ssh/server.go\nFile ssh/server.go (right):\n\nhttp://codereview.appspot.com/5577070/diff/3/ssh/server.go#newcode158\nssh/server.go:158: ip net.IP\nI don't think this needs to be a field, it can be computed when needed.\n\nhttp://codereview.appspot.com/5577070/diff/3/ssh/server.go#newcode168\nssh/server.go:168: ip:        c.RemoteAddr().(*net.TCPAddr).IP,\nI don't think you can assume that c is a *net.TCPConn, so you can't assume that RemoteAddr() will return a *net.TCPAddr.\n\nI know I suggested passing down the net.IP to the authentication methods, but in light of seeing this problem, maybe passing the net.Addr() down to the authn functions who can take the load of doing a type switch on the net.Addr.\n\nThey should also consider the case where net.Addr is not valid, because it is not known, probably by proxying.",
			"disapproval": false,
			"date": "2012-01-29 10:29:41.192574",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-30 19:19:00.882829",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-01-29 17:31:25.393977",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm having a few problems getting my go.crypto subrepo setup to review\nthis patch. I'll attempt to do so again tomorrow.\n\nHave you considered how the change in the authn callbacks will affect\nthe ssh package's tests?\n\nOn Mon, Jan 30, 2012 at 4:31 AM,  <kardianos@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com, dfc,\n>\n> Message:\n> Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org,\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> http://code.google.com/p/go.crypto\n>\n>\n> Description:\n> go.crypto/ssh: add user name and netowrk address to server connection.\n>\n> Please review this at http://codereview.appspot.com/5577070/\n>\n> Affected files:\n> \u00a0M ssh/server.go\n>\n>\n> Index: ssh/server.go\n> ===================================================================\n> --- a/ssh/server.go\n> +++ b/ssh/server.go\n> @@ -34,12 +34,12 @@\n> \u00a0 \u00a0 \u00a0 \u00a0// PasswordCallback, if non-nil, is called when a user attempts to\n> \u00a0 \u00a0 \u00a0 \u00a0// authenticate using a password. It may be called concurrently from\n> \u00a0 \u00a0 \u00a0 \u00a0// several goroutines.\n> - \u00a0 \u00a0 \u00a0 PasswordCallback func(user, password string) bool\n> + \u00a0 \u00a0 \u00a0 PasswordCallback func(ip net.Addr, user, password string) bool\n>\n> \u00a0 \u00a0 \u00a0 \u00a0// PublicKeyCallback, if non-nil, is called when a client attempts\n> public\n> \u00a0 \u00a0 \u00a0 \u00a0// key authentication. It must return true iff the given public key\n> is\n> \u00a0 \u00a0 \u00a0 \u00a0// valid for the given user.\n> - \u00a0 \u00a0 \u00a0 PublicKeyCallback func(user, algo string, pubkey []byte) bool\n> + \u00a0 \u00a0 \u00a0 PublicKeyCallback func(ip net.Addr, user, algo string, pubkey\n> []byte) bool\n>\n> \u00a0 \u00a0 \u00a0 \u00a0// Cryptographic-related configuration.\n> \u00a0 \u00a0 \u00a0 \u00a0Crypto CryptoConfig\n> @@ -150,6 +150,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0// before attempting to authenticate with it, we end up with\n> duplicate\n> \u00a0 \u00a0 \u00a0 \u00a0// queries for public key validity.\n> \u00a0 \u00a0 \u00a0 \u00a0cachedPubKeys []cachedPubKey\n> +\n> + \u00a0 \u00a0 \u00a0 // user holds the successfully authenticated user name.\n> + \u00a0 \u00a0 \u00a0 user string\n> \u00a0}\n>\n> \u00a0// Server returns a new SSH server connection\n> @@ -369,7 +372,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> - \u00a0 \u00a0 \u00a0 result := s.config.PublicKeyCallback(user, algo, pubKey)\n> + \u00a0 \u00a0 \u00a0 result := s.config.PublicKeyCallback(s.transport.RemoteAddr(), user,\n> algo, pubKey)\n> \u00a0 \u00a0 \u00a0 \u00a0if len(s.cachedPubKeys) < maxCachedPubKeys {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0c := cachedPubKey{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0user: \u00a0 user,\n> @@ -421,7 +424,8 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return ParseError{msgUserAuthRequest}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if s.config.PasswordCallback(userAuthReq.User,\n> string(password)) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if\n> s.config.PasswordCallback(s.transport.RemoteAddr(), userAuthReq.User,\n> string(password)) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 s.user = userAuthReq.User\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0break userAuthLoop\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0case \"publickey\":\n> @@ -490,6 +494,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return errors.New(\"ssh:\n> isAcceptableAlgo incorrect\")\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if s.testPubKey(userAuthReq.User, algo,\n> pubKey) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 s.user = userAuthReq.User\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0break userAuthLoop\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> @@ -634,6 +639,17 @@\n> \u00a0 \u00a0 \u00a0 \u00a0panic(\"unreachable\")\n> \u00a0}\n>\n> +// User returns the authenticated user.\n> +// It is empty if no authentication is used.\n> +func (s *ServerConn) User() string {\n> + \u00a0 \u00a0 \u00a0 return s.user\n> +}\n> +\n> +// RemoteAddr returns the connected client address.\n> +func (s *ServerConn) RemoteAddr() net.Addr {\n> + \u00a0 \u00a0 \u00a0 return s.transport.RemoteAddr()\n> +}\n> +\n> \u00a0// A Listener implements a network listener (net.Listener) for SSH\n> connections.\n> \u00a0type Listener struct {\n> \u00a0 \u00a0 \u00a0 \u00a0listener net.Listener\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-30 12:07:09.179383",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 943eeb94bdc1 ***\n\ngo.crypto/ssh: add User to ServerConn and pass *ServerConn to callbacks.\n\nR=golang-dev, dave, agl\nCC=golang-dev\nhttp://codereview.appspot.com/5577070\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-01-30 20:30:27.280784",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Will land unless there are objections in the next day.",
			"disapproval": false,
			"date": "2012-01-30 19:24:55.710434",
			"approval": true
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-30 20:01:17.569759",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-30 13:20:19.537883",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thanks.",
			"disapproval": false,
			"date": "2012-01-30 20:03:16.725339",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "User() seems good, but why not just ServerConn.User? (i.e. an exported string?)\n\nSince transport is an anonymous field, I think RemoteAddr will already be exposed in ServerConn.\n\nAt that point, rather than passing a net.Addr to the callbacks, why not pass the *ServerConn? In this patch or in the future we can also add a UserData interface{} to ServerConn so that folks can hang their own data off it as needed. (Better names than UserData happily accepted.)",
			"disapproval": false,
			"date": "2012-01-30 15:05:37.897540",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 5577070: go.crypto/ssh: add user name and netowrk address to ser...",
	"created": "2012-01-28 20:02:12.136483",
	"patchsets": [
		1,
		3,
		4002,
		9001,
		12002,
		9006
	],
	"modified": "2012-02-19 00:17:14.218242",
	"closed": true,
	"issue": 5577070
}