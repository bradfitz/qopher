{
	"description": "go/scanner: Use explicit scanner.Mode type.",
	"cc": [
		"r@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as cd529ae19b47 ***\n\ngo/scanner: Use explicit scanner.Mode type.\n\nR=r, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5574059",
			"disapproval": false,
			"date": "2012-01-25 00:49:05.588995",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n On Jan 24, 2012 4:42 PM, <gri@golang.org> wrote:\n\n> Reviewers: r, bradfitz,\n>\n> Message:\n> Hello r@golang.org, bradfitz@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> go/scanner: Use explicit scanner.Mode type.\n>\n> Please review this at http://codereview.appspot.com/**5574059/<http://codereview.appspot.com/5574059/>\n>\n> Affected files:\n>  M src/pkg/go/parser/parser.go\n>  M src/pkg/go/scanner/scanner.go\n>  M src/pkg/go/scanner/scanner_**test.go\n>\n>\n> Index: src/pkg/go/parser/parser.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/parser/parser.go\n> +++ b/src/pkg/go/parser/parser.go\n> @@ -54,7 +54,7 @@\n>\n>  func (p *parser) init(fset *token.FileSet, filename string, src []byte,\n> mode Mode) {\n>        p.file = fset.AddFile(filename, fset.Base(), len(src))\n> -       var m uint\n> +       var m scanner.Mode\n>        if mode&ParseComments != 0 {\n>                m = scanner.ScanComments\n>        }\n> Index: src/pkg/go/scanner/scanner.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/scanner/scanner.**go\n> +++ b/src/pkg/go/scanner/scanner.**go\n> @@ -40,7 +40,7 @@\n>        dir  string       // directory portion of file.Name()\n>        src  []byte       // source\n>        err  ErrorHandler // error reporting; or nil\n> -       mode uint         // scanning mode\n> +       mode Mode         // scanning mode\n>\n>        // scanning state\n>        ch         rune // current character\n> @@ -86,12 +86,14 @@\n>        }\n>  }\n>\n> -// The mode parameter to the Init function is a set of flags (or 0).\n> +// A mode value is set of flags (or 0).\n>  // They control scanner behavior.\n>  //\n> +type Mode uint\n> +\n>  const (\n> -       ScanComments    = 1 << iota // return comments as COMMENT tokens\n> -       dontInsertSemis             // do not automatically insert\n> semicolons - for testing only\n> +       ScanComments    Mode = 1 << iota // return comments as COMMENT\n> tokens\n> +       dontInsertSemis                  // do not automatically insert\n> semicolons - for testing only\n>  )\n>\n>  // Init prepares the scanner S to tokenize the text src by setting the\n> @@ -109,7 +111,7 @@\n>  // Note that Init may call err if there is an error in the first character\n>  // of the file.\n>  //\n> -func (S *Scanner) Init(file *token.File, src []byte, err ErrorHandler,\n> mode uint) {\n> +func (S *Scanner) Init(file *token.File, src []byte, err ErrorHandler,\n> mode Mode) {\n>        // Explicitly initialize all fields since a scanner may be reused.\n>        if file.Size() != len(src) {\n>                panic(\"file size does not match src len\")\n> Index: src/pkg/go/scanner/scanner_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/scanner/scanner_**test.go\n> +++ b/src/pkg/go/scanner/scanner_**test.go\n> @@ -281,7 +281,7 @@\n>        }\n>  }\n>\n> -func checkSemi(t *testing.T, line string, mode uint) {\n> +func checkSemi(t *testing.T, line string, mode Mode) {\n>        var S Scanner\n>        file := fset.AddFile(\"TestSemis\", fset.Base(), len(line))\n>        S.Init(file, []byte(line), nil, mode)\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-25 00:46:41.826056",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-01-25 00:42:43.350720",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5574059: go/scanner: Use explicit scanner.Mode type.",
	"created": "2012-01-25 00:41:06.799331",
	"patchsets": [
		1,
		2001,
		4001,
		3004
	],
	"modified": "2012-01-25 00:49:06.420196",
	"closed": true,
	"issue": 5574059
}