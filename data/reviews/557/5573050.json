{
	"description": "os: add explicit type information to exported vars\n\nSince the Go AST doesn't have type information, we're only\ngoing to hard-code types for common things like\nerrors.New. Other exported variables part of frozen API will\nneed crutches like this for now.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"rsc@golang.org",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-23 23:38:50.068631",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 24 January 2012 00:07, Russ Cox <rsc@golang.org> wrote:\n> On Mon, Jan 23, 2012 at 18:38, Rob 'Commander' Pike <r@google.com> wrote:\n>> Why?\n>\n> It makes the API tool that Brad is writing easier, but\n> more importantly I also believe it improves the documentation.\n\ni'm with rob here.\n\nan API tool that infers the types correctly isn't hard\n(i've had one for over 2 years now), and godoc could\nprint the types if asked to.\n",
			"disapproval": false,
			"date": "2012-01-24 10:38:10.248701",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 18:38, Rob 'Commander' Pike <r@google.com> wrote:\n> Why?\n\nIt makes the API tool that Brad is writing easier, but\nmore importantly I also believe it improves the documentation.\nIf I run\n\ngodoc os Stdout\n\nthen I can't tell from the declarations what the type of os.Stdout is.\nIf it says Stdout *File = NewFile(...) then I can.  As a user,\nI think that's an important property.  It is possible that this case\nis overkill, because NewFile is in the same package, so the\nargument can be made that it's okay to resolve the reference\ninternally.\n\nHowever, another place this comes up is package unicode.  If I run\n\ngodoc unicode Letter\n\nI actually have no idea and, unlike in the os godoc, cannot\nfind out what the type of Letter is, because it is defined as\n\n    Letter = _L\n\nNeither the Go code nor the documentation says what the\ntype of letter is.  I believe in this case we should say\n\n    Letter *RangeTable = _L\n\nto be clear.  This has the side effect of helping the API tool,\nbut again it's just as important for people reading the docs.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-24 00:07:34.624584",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 23, 2012, at 4:07 PM, Russ Cox wrote:\n\n> On Mon, Jan 23, 2012 at 18:38, Rob 'Commander' Pike <r@google.com> wrote:\n>> Why?\n> \n> It makes the API tool that Brad is writing easier, but\n> more importantly I also believe it improves the documentation.\n> If I run\n> \n> godoc os Stdout\n> \n> then I can't tell from the declarations what the type of os.Stdout is.\n> If it says Stdout *File = NewFile(...) then I can.  As a user,\n> I think that's an important property.  It is possible that this case\n> is overkill, because NewFile is in the same package, so the\n> argument can be made that it's okay to resolve the reference\n> internally.\n> \n> However, another place this comes up is package unicode.  If I run\n> \n> godoc unicode Letter\n> \n> I actually have no idea and, unlike in the os godoc, cannot\n> find out what the type of Letter is, because it is defined as\n> \n>    Letter = _L\n> \n> Neither the Go code nor the documentation says what the\n> type of letter is.  I believe in this case we should say\n> \n>    Letter *RangeTable = _L\n> \n> to be clear.  This has the side effect of helping the API tool,\n> but again it's just as important for people reading the docs.\n\nThat's a perfect example of why I would prefer not to do this: that 46 lines each saying *Letter, running down the screen like a Java program. A single comment at the top would serve the purposes of documentation just as well. The tooling issue is different and should not be conflated.\n\n-rob\n\n\n\n",
			"disapproval": false,
			"date": "2012-01-24 00:24:43.925488",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's a stylistic burden that feels like backsliding because our tools don't work. Can we not do this and let the tools catch up?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-24 00:09:08.349080",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-23 23:05:49.714764",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this will only end up being for function calls, especially\ncross-package ones.\n\nComposite literals and such won't need this.\n\n\nOn Mon, Jan 23, 2012 at 3:05 PM, <bradfitz@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> os: add explicit type information to exported vars\n>\n> Since the Go AST doesn't have type information, we're only\n> going to hard-code types for common things like\n> errors.New. Other exported variables part of frozen API will\n> need crutches like this for now.\n>\n> Please review this at http://codereview.appspot.com/**5573050/<http://codereview.appspot.com/5573050/>\n>\n> Affected files:\n>  M src/pkg/os/file.go\n>\n>\n> Index: src/pkg/os/file.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/file.go\n> +++ b/src/pkg/os/file.go\n> @@ -19,9 +19,9 @@\n>  // Stdin, Stdout, and Stderr are open Files pointing to the standard\n> input,\n>  // standard output, and standard error file descriptors.\n>  var (\n> -       Stdin  = NewFile(syscall.Stdin, \"/dev/stdin\")\n> -       Stdout = NewFile(syscall.Stdout, \"/dev/stdout\")\n> -       Stderr = NewFile(syscall.Stderr, \"/dev/stderr\")\n> +       Stdin  *File = NewFile(syscall.Stdin, \"/dev/stdin\")\n> +       Stdout *File = NewFile(syscall.Stdout, \"/dev/stdout\")\n> +       Stderr *File = NewFile(syscall.Stderr, \"/dev/stderr\")\n>  )\n>\n>  // Flags to Open wrapping those of the underlying system. Not all flags\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-23 23:17:38.595023",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For discussion.  I can also wait and send out one comprehensive CL over the\nwhole tree, but wanted to see if there were major objections first.\n\nOn Mon, Jan 23, 2012 at 3:05 PM, <bradfitz@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> os: add explicit type information to exported vars\n>\n> Since the Go AST doesn't have type information, we're only\n> going to hard-code types for common things like\n> errors.New. Other exported variables part of frozen API will\n> need crutches like this for now.\n>\n> Please review this at http://codereview.appspot.com/**5573050/<http://codereview.appspot.com/5573050/>\n>\n> Affected files:\n>  M src/pkg/os/file.go\n>\n>\n> Index: src/pkg/os/file.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/file.go\n> +++ b/src/pkg/os/file.go\n> @@ -19,9 +19,9 @@\n>  // Stdin, Stdout, and Stderr are open Files pointing to the standard\n> input,\n>  // standard output, and standard error file descriptors.\n>  var (\n> -       Stdin  = NewFile(syscall.Stdin, \"/dev/stdin\")\n> -       Stdout = NewFile(syscall.Stdout, \"/dev/stdout\")\n> -       Stderr = NewFile(syscall.Stderr, \"/dev/stderr\")\n> +       Stdin  *File = NewFile(syscall.Stdin, \"/dev/stdin\")\n> +       Stdout *File = NewFile(syscall.Stdout, \"/dev/stdout\")\n> +       Stderr *File = NewFile(syscall.Stderr, \"/dev/stderr\")\n>  )\n>\n>  // Flags to Open wrapping those of the underlying system. Not all flags\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-23 23:07:22.832723",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5573050: os: add explicit type information to exported vars",
	"created": "2012-01-23 23:05:17.948932",
	"patchsets": [
		1,
		2001,
		2002
	],
	"modified": "2012-01-31 21:16:51.272726",
	"closed": true,
	"issue": 5573050
}