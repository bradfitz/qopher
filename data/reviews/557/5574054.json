{
	"description": "math/big:  assembly versions of bitLen for x86-64, 386, and ARM.\n\nRoughly 2x speedup for the internal bitLen function in arith.go.  Added TestWordBitLen test.\n\nPerformance differences against the new version of\nbitLen generic:\n\nx86-64 Macbook pro (current tip):\n\nbenchmark                old ns/op    new ns/op    delta\nbig.BenchmarkBitLen0             6            4  -37.40%\nbig.BenchmarkBitLen1             6            2  -51.79%\nbig.BenchmarkBitLen2             6            2  -65.04%\nbig.BenchmarkBitLen3             6            2  -66.10%\nbig.BenchmarkBitLen4             6            2  -60.96%\nbig.BenchmarkBitLen5             6            2  -55.80%\nbig.BenchmarkBitLen8             6            2  -56.19%\nbig.BenchmarkBitLen9             6            2  -64.73%\nbig.BenchmarkBitLen16            7            2  -68.84%\nbig.BenchmarkBitLen17            6            2  -67.11%\nbig.BenchmarkBitLen31            7            2  -61.57%\n\n\n386 Intel Atom (current tip):\nbenchmark                old ns/op    new ns/op    delta\nbig.BenchmarkBitLen0            23           20  -13.04%\nbig.BenchmarkBitLen1            23           20  -14.77%\nbig.BenchmarkBitLen2            24           20  -19.28%\nbig.BenchmarkBitLen3            25           20  -21.57%\nbig.BenchmarkBitLen4            24           20  -16.94%\nbig.BenchmarkBitLen5            25           20  -20.78%\nbig.BenchmarkBitLen8            24           20  -19.28%\nbig.BenchmarkBitLen9            25           20  -20.47%\nbig.BenchmarkBitLen16           26           20  -23.37%\nbig.BenchmarkBitLen17           26           20  -25.09%\nbig.BenchmarkBitLen31           32           20  -35.51%\n\n\nARM v5 SheevaPlug, previous weekly patched with bitLen:\nbenchmark                old ns/op    new ns/op    delta\nbig.BenchmarkBitLen0            50           29  -41.73%\nbig.BenchmarkBitLen1            51           29  -42.75%\nbig.BenchmarkBitLen2            59           29  -50.08%\nbig.BenchmarkBitLen3            60           29  -50.75%\nbig.BenchmarkBitLen4            59           29  -50.08%\nbig.BenchmarkBitLen5            60           29  -50.75%\nbig.BenchmarkBitLen8            59           29  -50.08%\nbig.BenchmarkBitLen9            60           29  -50.75%\nbig.BenchmarkBitLen16           69           29  -57.35%\nbig.BenchmarkBitLen17           70           29  -57.89%\nbig.BenchmarkBitLen31           95           29  -69.07%",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/24 02:39:16, minux wrote:\nhttp://codereview.appspot.com/5574054/diff/1001/src/pkg/math/big/arith_arm.s#newcode317\n> src/pkg/math/big/arith_arm.s:317: WORD\t$0xe16f0f10\n> I think this line needs a comment about the assembly instruction.\n\nIt certainly did.  Thanks!",
			"disapproval": false,
			"date": "2012-01-24 02:43:00.003741",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-25 19:51:02.170508",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> (BSR only updates the dest register if the value was non-zero); needs\n>   MOVQ $0, AX\n\nWhich, now that I read what I just wrote, suggests that the code can be even shorter and eliminate the branch (negligible performance change, but it's nicer):\n\nTEXT \u00b7bitLen(SB),7,$0\n        MOVQ $-1, AX\n        BSRQ x+0(FP), AX\n        INCQ AX\n        MOVQ AX, n+8(FP)\n        RET",
			"disapproval": false,
			"date": "2012-01-25 19:42:41.584517",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-25 19:52:43.242253",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/25 22:23:19, gri wrote:\n> \n> I assume you have updated the performance numbers to match this last version?\n\nYup.  The change is that on amd64, bitLen(0) got a bit slower (~4 ns/op) because of the jump, but it's still quite a bit faster than the non-asm version.  The other numbers and platforms were unchanged.  I figure that a caller who thinks they're going to be feeding a lot of zeros in to bitLen can do the test themselves.",
			"disapproval": false,
			"date": "2012-01-25 23:09:39.757058",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/25 17:44:31, gri wrote:\n> TEXT \u00b7bitLen(SB),7,$0\n> \tBSRQ x+0(FP), AX\n> \tJZ Z1\n> \tINCQ AX\n> \n> Z1:\tMOVQ AX, n+8(FP)\n> \tRET\n\nThis produces the wrong result for bitLen(0)\n(BSR only updates the dest register if the value was non-zero); needs\n  MOVQ $0, AX\nat the start.  But with that, it's good.  Updating and addressing testing and commenting requirements now.\n\nI'm naming the test function TestWordBitLen instead - the word following Test can't start with [a-z].  I assume that's preferable to TestArithBitLen?",
			"disapproval": false,
			"date": "2012-01-25 18:53:04.528215",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 77457a85f621 ***\n\nmath/big:  assembly versions of bitLen for x86-64, 386, and ARM.\n\nRoughly 2x speedup for the internal bitLen function in arith.go.  Added TestWordBitLen test.\n\nPerformance differences against the new version of\nbitLen generic:\n\nx86-64 Macbook pro (current tip):\n\nbenchmark                old ns/op    new ns/op    delta\nbig.BenchmarkBitLen0             6            4  -37.40%\nbig.BenchmarkBitLen1             6            2  -51.79%\nbig.BenchmarkBitLen2             6            2  -65.04%\nbig.BenchmarkBitLen3             6            2  -66.10%\nbig.BenchmarkBitLen4             6            2  -60.96%\nbig.BenchmarkBitLen5             6            2  -55.80%\nbig.BenchmarkBitLen8             6            2  -56.19%\nbig.BenchmarkBitLen9             6            2  -64.73%\nbig.BenchmarkBitLen16            7            2  -68.84%\nbig.BenchmarkBitLen17            6            2  -67.11%\nbig.BenchmarkBitLen31            7            2  -61.57%\n\n\n386 Intel Atom (current tip):\nbenchmark                old ns/op    new ns/op    delta\nbig.BenchmarkBitLen0            23           20  -13.04%\nbig.BenchmarkBitLen1            23           20  -14.77%\nbig.BenchmarkBitLen2            24           20  -19.28%\nbig.BenchmarkBitLen3            25           20  -21.57%\nbig.BenchmarkBitLen4            24           20  -16.94%\nbig.BenchmarkBitLen5            25           20  -20.78%\nbig.BenchmarkBitLen8            24           20  -19.28%\nbig.BenchmarkBitLen9            25           20  -20.47%\nbig.BenchmarkBitLen16           26           20  -23.37%\nbig.BenchmarkBitLen17           26           20  -25.09%\nbig.BenchmarkBitLen31           32           20  -35.51%\n\n\nARM v5 SheevaPlug, previous weekly patched with bitLen:\nbenchmark                old ns/op    new ns/op    delta\nbig.BenchmarkBitLen0            50           29  -41.73%\nbig.BenchmarkBitLen1            51           29  -42.75%\nbig.BenchmarkBitLen2            59           29  -50.08%\nbig.BenchmarkBitLen3            60           29  -50.75%\nbig.BenchmarkBitLen4            59           29  -50.08%\nbig.BenchmarkBitLen5            60           29  -50.75%\nbig.BenchmarkBitLen8            59           29  -50.08%\nbig.BenchmarkBitLen9            60           29  -50.75%\nbig.BenchmarkBitLen16           69           29  -57.35%\nbig.BenchmarkBitLen17           70           29  -57.89%\nbig.BenchmarkBitLen31           95           29  -69.07%\n\nR=golang-dev, minux.ma, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5574054\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2012-01-25 23:04:19.582021",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-24 02:33:50.313039",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also: There should be a Test function in arith_test.go for bitLen\n(probably TestbitLen since TestBitLen is already taken for the Int\nversion).\n- gri\n\nOn Wed, Jan 25, 2012 at 9:44 AM,  <gri@golang.org> wrote:\n>\n> http://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_386.s\n> File src/pkg/math/big/arith_386.s (right):\n>\n> http://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_386.s#newcode248\n> src/pkg/math/big/arith_386.s:248: // divWVW(z* Word, xn Word, x []Word,\n> y Word) (r Word)\n> for concistency, this should be:\n>\n> // func divWVW....\n>\n> http://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_386.s#newcode267\n> src/pkg/math/big/arith_386.s:267: // func bitLen(x Word) (n int)\n> see the 64bit version for a simpler implementation\n>\n> http://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_amd64.s\n> File src/pkg/math/big/arith_amd64.s (right):\n>\n> http://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_amd64.s#newcode246\n> src/pkg/math/big/arith_amd64.s:246: // divWVW(z []Word, xn Word, x\n>\n> []Word, y Word) (r Word)\n> // func divWVW ...\n>\n> http://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_amd64.s#newcode265\n> src/pkg/math/big/arith_amd64.s:265: // func bitLen(x Word) (n int)\n> This can be done with half the amount of code:\n>\n>\n> // func bitLen(x Word) (n int)\n> TEXT \u00b7bitLen(SB),7,$0\n> \u00a0 \u00a0 \u00a0 \u00a0BSRQ x+0(FP), AX\n> \u00a0 \u00a0 \u00a0 \u00a0JZ Z1\n> \u00a0 \u00a0 \u00a0 \u00a0INCQ AX\n>\n> Z1: \u00a0 \u00a0 MOVQ AX, n+8(FP)\n> \u00a0 \u00a0 \u00a0 \u00a0RET\n>\n> http://codereview.appspot.com/5574054/\n",
			"disapproval": false,
			"date": "2012-01-25 17:52:06.979245",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add the test function. TestWordBitLen is fine.\n\nhttp://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_386.s\nFile src/pkg/math/big/arith_386.s (right):\n\nhttp://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_386.s#newcode269\nsrc/pkg/math/big/arith_386.s:269: MOVL $-1, AX\nI believe this is not correct in general because the result (AX) of bsr is not defined (may not be -1 anymore) if the argument is 0 (but bsr sets the Z flag). You probably need the branch.\n\nhttp://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_amd64.s#newcode267\nsrc/pkg/math/big/arith_amd64.s:267: MOVQ $-1, AX\nsee other comment",
			"disapproval": false,
			"date": "2012-01-25 21:55:08.796900",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Agreed - was just about to say the same thing about the branch.  I'd looked at a non-official instruction reference, but the Intel reference is clear that it's undefined.  Thanks for catching that.\n\nTest function added already.\n\nOn 2012/01/25 21:55:08, gri wrote:\n> Please add the test function. TestWordBitLen is fine.\n> \n> http://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_386.s\n> File src/pkg/math/big/arith_386.s (right):\n> \n> http://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_386.s#newcode269\n> src/pkg/math/big/arith_386.s:269: MOVL $-1, AX\n> I believe this is not correct in general because the result (AX) of bsr is not\n> defined (may not be -1 anymore) if the argument is 0 (but bsr sets the Z flag).\n> You probably need the branch.\n> \n> http://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_amd64.s\n> File src/pkg/math/big/arith_amd64.s (right):\n> \n> http://codereview.appspot.com/5574054/diff/2019/src/pkg/math/big/arith_amd64.s#newcode267\n> src/pkg/math/big/arith_amd64.s:267: MOVQ $-1, AX\n> see other comment",
			"disapproval": false,
			"date": "2012-01-25 21:59:49.245499",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5574054/diff/1001/src/pkg/math/big/arith_arm.s\nFile src/pkg/math/big/arith_arm.s (right):\n\nhttp://codereview.appspot.com/5574054/diff/1001/src/pkg/math/big/arith_arm.s#newcode317\nsrc/pkg/math/big/arith_arm.s:317: WORD\t$0xe16f0f10\nI think this line needs a comment about the assembly instruction.",
			"disapproval": false,
			"date": "2012-01-24 02:39:16.544520",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_386.s\nFile src/pkg/math/big/arith_386.s (right):\n\nhttp://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_386.s#newcode248\nsrc/pkg/math/big/arith_386.s:248: // divWVW(z* Word, xn Word, x []Word, y Word) (r Word)\nfor concistency, this should be:\n\n// func divWVW....\n\nhttp://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_386.s#newcode267\nsrc/pkg/math/big/arith_386.s:267: // func bitLen(x Word) (n int)\nsee the 64bit version for a simpler implementation\n\nhttp://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_amd64.s\nFile src/pkg/math/big/arith_amd64.s (right):\n\nhttp://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_amd64.s#newcode246\nsrc/pkg/math/big/arith_amd64.s:246: // divWVW(z []Word, xn Word, x []Word, y Word) (r Word)\n// func divWVW ...\n\nhttp://codereview.appspot.com/5574054/diff/6001/src/pkg/math/big/arith_amd64.s#newcode265\nsrc/pkg/math/big/arith_amd64.s:265: // func bitLen(x Word) (n int)\nThis can be done with half the amount of code:\n\n// func bitLen(x Word) (n int)\nTEXT \u00b7bitLen(SB),7,$0\n\tBSRQ x+0(FP), AX\n\tJZ Z1\n\tINCQ AX\n\nZ1:\tMOVQ AX, n+8(FP)\n\tRET",
			"disapproval": false,
			"date": "2012-01-25 17:44:31.833328",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-24 02:42:20.384595",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-25 22:08:41.732352",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Close, but there's a bug in your comments (or your code). Please use my simple test.\n\nI assume you have updated the performance numbers to match this last version?\n- gri\n\nhttp://codereview.appspot.com/5574054/diff/9002/src/pkg/math/big/arith_test.go\nFile src/pkg/math/big/arith_test.go (right):\n\nhttp://codereview.appspot.com/5574054/diff/9002/src/pkg/math/big/arith_test.go#newcode356\nsrc/pkg/math/big/arith_test.go:356: y = (y << 1) | 0x1\nthis is 1000...001 and not 1111...111\n\nhttp://codereview.appspot.com/5574054/diff/9002/src/pkg/math/big/arith_test.go#newcode358\nsrc/pkg/math/big/arith_test.go:358: }\nToo complicated. How about:\n\nfunc TestWordBitLen(t *testing.T) {\n\tfor i := 0; i <= _W; i++ {\n\t\tx := Word(1)<<uint(i-1) // i == 0 => x == 0\n\t\tn := bitLen(x)\n\t\tif n != i {\n\t\t\tt.Errorf(\"got %d; want %d for bitLen(%x)\", n, i, x)\n\t\t}\n\t}\n}",
			"disapproval": false,
			"date": "2012-01-25 22:23:19.146321",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5574054/diff/9002/src/pkg/math/big/arith_test.go\nFile src/pkg/math/big/arith_test.go (right):\n\nhttp://codereview.appspot.com/5574054/diff/9002/src/pkg/math/big/arith_test.go#newcode356\nsrc/pkg/math/big/arith_test.go:356: y = (y << 1) | 0x1\nOn 2012/01/25 22:23:19, gri wrote:\n> this is 1000...001 and not 1111...111\n\nNever mind - I read this a bit too quickly.",
			"disapproval": false,
			"date": "2012-01-25 23:03:09.852130",
			"approval": true
		}
	],
	"owner_email": "dave.andersen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "dga",
	"subject": "code review 5574054: math/big:  assembly versions of bitLen for x86-64, 386,...",
	"created": "2012-01-24 02:30:55.306874",
	"patchsets": [
		1,
		1001,
		6001,
		8001,
		2019,
		9002,
		1021
	],
	"modified": "2012-01-25 23:12:35.111980",
	"closed": true,
	"issue": 5574054
}