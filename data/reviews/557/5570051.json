{
	"description": "cmd/goapi: new tool for tracking exported API over time\n\nThe idea is that we add files to the api/ directory which\nare sets of promises for the future.  Each line in a file\nis a stand-alone feature description.\n\nWhen we do a release, we make sure we haven't broken or changed\nany lines from the past (only added them).\n\nWe never change old files, only adding new ones. (go-1.1.txt,\netc)",
	"cc": [
		"dsymonds@golang.org",
		"adg@golang.org",
		"r@google.com",
		"remyoudompheng@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Something simple: this is just for Go developers (i.e. us), right? And\nit won't be included in standard Go distributions?\n\nPerhaps it could just be called apicheck, or, given various unnamed\npersons' predilections against \"check\", maybe \"apivet\"?\n",
			"disapproval": false,
			"date": "2012-01-24 02:19:10.074643",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5570051/diff/2001/api/go1.txt\nFile api/go1.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/api/go1.txt#newcode1\napi/go1.txt:1: pkg archive/tar, const TypeBlock char\nif every line begins with 'pkg' it seems a redundant part of the file format.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go\nFile src/cmd/goapicheck/goapicheck.go (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go#newcode143\nsrc/cmd/goapicheck/goapicheck.go:143: defer pop()\nOn 2012/01/24 02:28:18, dsymonds wrote:\n> inline pop here? Or is that too clever?\n>   defer w.pushScope(\"pkg \" + name)()\n\ngross.",
			"disapproval": false,
			"date": "2012-01-24 02:31:11.963768",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I see the syscall package is also included. Do you want to support checking architeccture-specific API breaks or is that too much?\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-01-24 06:52:58.956337",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now with -c\n\nOn Wed, Jan 25, 2012 at 11:36 AM, <bradfitz@golang.org> wrote:\n\n> Hello dsymonds@golang.org, adg@golang.org, r@google.com,\n> remyoudompheng@gmail.com, rsc@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5570051/<http://codereview.appspot.com/5570051/>\n>\n",
			"disapproval": false,
			"date": "2012-01-25 19:37:12.276320",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please rename to goapi (s/check//) and then LGTM.\nThanks; I really like how this turned out.\n\nhttp://codereview.appspot.com/5570051/diff/8/src/cmd/goapicheck/goapicheck.go\nFile src/cmd/goapicheck/goapicheck.go (right):\n\nhttp://codereview.appspot.com/5570051/diff/8/src/cmd/goapicheck/goapicheck.go#newcode5\nsrc/cmd/goapicheck/goapicheck.go:5: // goapicheck checks that Go doesn't break backwards compatibility.\n// Goapi computes the exported API of a set of Go packages.\npackage main\n\nhttp://codereview.appspot.com/5570051/diff/8/src/cmd/goapicheck/goapicheck.go#newcode67\nsrc/cmd/goapicheck/goapicheck.go:67: \nThis is a lot of output.\n\na\nbout := bufio.NewWriter(os.Stdout)\ndefer bout.Flush()\n.\n.,/^}/s/fmt.Printf(/fmt.Fprintf(bout, /g\n\nhttp://codereview.appspot.com/5570051/diff/8/src/cmd/goapicheck/goapicheck.go#newcode74\nsrc/cmd/goapicheck/goapicheck.go:74: sort.Strings(v1)\nIf flag.NArg() > 0, should winnow v1 to just the packages listed in flag.Args().\n\nhttp://codereview.appspot.com/5570051/diff/8/src/cmd/goapicheck/goapicheck.go#newcode82\nsrc/cmd/goapicheck/goapicheck.go:82: if len(v2) == 0 {\nswitch {\ncase len(v2) == 0 || v1[0] < v2[0]:\n   print -\ncase len(v1) == 0 || v1[0] > v2[0]:\n   print +\ndefault:\n   take take\n}\n\nshould suffice",
			"disapproval": false,
			"date": "2012-01-25 21:27:30.416051",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 24 January 2012 16:15, Rob 'Commander' Pike <r@google.com> wrote:\n> I haven't read the code (sorry), but a note about process:\n>\n> As things develop, there will be lines that are OK to change and lines that are not. After Go 1.2, say, all the lines set at 1.2 will be sacrosanct, but lines before 1.3 are all editable. From the description in the CL, I don't see how that would work.\n\nWill there? There won't be any lines for 1.3 until we tag 1.3.\nUpdating the golden text file will be part of the 1.3 tagging process.\n\nMy understanding is that if it's present in the file then it should not change.\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-01-24 05:26:17.494815",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-24 02:11:13.409260",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just us.\n\nI don't care about the name.\n\nOn Mon, Jan 23, 2012 at 6:19 PM, David Symonds <dsymonds@golang.org> wrote:\n\n> Something simple: this is just for Go developers (i.e. us), right? And\n> it won't be included in standard Go distributions?\n>\n> Perhaps it could just be called apicheck, or, given various unnamed\n> persons' predilections against \"check\", maybe \"apivet\"?\n>\n",
			"disapproval": false,
			"date": "2012-01-24 02:21:24.323182",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt\nFile src/cmd/goapicheck/testdata/p1/golden.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt#newcode16\nsrc/cmd/goapicheck/testdata/p1/golden.txt:16: pkg p1, type I interface { Get, GetNamed, Set }\nOn 2012/01/24 02:33:49, bradfitz wrote:\n> On 2012/01/24 02:28:18, dsymonds wrote:\n> > this duplicates the information of the next three lines?\n> \n> Intentional.\n> \n> The design is if any line here is not present in a future version of this file,\n> we've broken the API.\n> \n> If this were just \"type I interface\" like it is for struct, then we could add\n> methods on accident and not get caught.\n\nAah, right. We can't extend interfaces.",
			"disapproval": false,
			"date": "2012-01-24 02:36:14.280767",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5570051/diff/3006/api/go1.txt\nFile api/go1.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/3006/api/go1.txt#newcode8066\napi/go1.txt:8066: pkg testing, method (*T) Parallel()\nYou don't find the embedded methods on *T.\nThose should be available using the go/doc API.\nDoesn't have to happen in this CL but add a TODO.\n\nhttp://codereview.appspot.com/5570051/diff/3006/api/go1.txt#newcode8087\napi/go1.txt:8087: pkg testing, type T struct, embedded common\nCan probably drop this once you have the methods lifted up.\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go\nFile src/cmd/goapicheck/goapicheck.go (right):\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode5\nsrc/cmd/goapicheck/goapicheck.go:5: // goapicheck checks that Go doesn't break backwards compatibility.\nI propose to make this a general tool:\n\n---\nusage: goapi [-c api.txt] [package list]\n\nGoapi writes to standard output the API features in the named packages.\nIf the package list is omitted, goapi considers the standard package tree,\nas listed by 'go list std'.\n\nIf the -c flag is given, goapi instead writes to standard output the differences\nbetween api.txt and the computed API.  Lines present only in api.txt are prefixed\nwith a minus; lines present only in the computed API are prefixed with a plus.\n---\n\n$ goapi math\npkg time, const ANSIC string\npkg time, const April Month\npkg time, const August Month\npkg time, const December Month\npkg time, const Feburary Month\npkg time, const Friday Weekday\npkg time, const Hour ideal-int\n...\n$ goapi -c $GOROOT/api/go-1.txt time\n-pkg time, const February Month\n+pkg time, const Feburary Month\n$\n\netc.  This will make it general enough that other people can use it too.\nTo cut a new release we just do\n\ngoapi >$GOROOT/api/go-1.1.txt\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode119\nsrc/cmd/goapicheck/goapicheck.go:119: func (w *Walker) writeFile(name string) {\nCan this be\n\nfunc (w *Walker) features() []string {\n\ninstead?\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode190\nsrc/cmd/goapicheck/goapicheck.go:190: // Note entering a scope here; file boundaries aren't interesting.\ns/Note/Not/\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode226\nsrc/cmd/goapicheck/goapicheck.go:226: token.STRING: \"string\",\ns/string/ideal-string/\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode228\nsrc/cmd/goapicheck/goapicheck.go:228: token.IMAG:   \"imag\",\ns/imag/ideal-imag/\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode236\nsrc/cmd/goapicheck/goapicheck.go:236: token.IMAG:   \"imag\",\ns/imag/complex128/\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode260\nsrc/cmd/goapicheck/goapicheck.go:260: return w.constValueType(v.X) // assume left and right are the same side, if this already compiles.\nThis is not really true; one side can be ideal and the other might not be.\nIf you make all the constType map entries begin with 'ideal-' then this\nis easy to check.",
			"disapproval": false,
			"date": "2012-01-24 20:03:17.461260",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 24 January 2012 13:19, David Symonds <dsymonds@golang.org> wrote:\n> Something simple: this is just for Go developers (i.e. us), right? And\n> it won't be included in standard Go distributions?\n>\n> Perhaps it could just be called apicheck, or, given various unnamed\n> persons' predilections against \"check\", maybe \"apivet\"?\n\ngovet was originally to be called gocheck, but the name was taken by\nanother project.\n\nThe builder is gobuilder. I think goapicheck is a fine name.\n",
			"disapproval": false,
			"date": "2012-01-24 02:25:38.546519",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 7:11 PM, David Symonds <dsymonds@golang.org> wrote:\n\n> On Tue, Jan 24, 2012 at 2:07 PM, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n>\n> > I was resisting having to do cross-package type crap, but I guess I'll\n> have to.\n>\n> It's only really intra-package that's the issue. If bytes.Buffer\n> embedded sync.Mutex (say), then you don't need to record that\n> bytes.Buffer has a Lock method, only that it embeds sync.Mutex. You\n> can't embed a private type of another package, so cross-package\n> embedding can only be for public types which themselves will\n> independently be audited by this tool.\n\n\noh, right, phew.\n",
			"disapproval": false,
			"date": "2012-01-24 03:14:19.530115",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, adg@golang.org, r@google.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-24 17:04:32.351072",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, r@google.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-24 23:40:44.341073",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now using go/doc for funcs & methods.\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go\nFile src/cmd/goapicheck/goapicheck.go (right):\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode5\nsrc/cmd/goapicheck/goapicheck.go:5: // goapicheck checks that Go doesn't break backwards compatibility.\nOn 2012/01/24 20:03:17, rsc wrote:\n> I propose to make this a general tool:\n> \n> ---\n> usage: goapi [-c api.txt] [package list]\n> \n> Goapi writes to standard output the API features in the named packages.\n> If the package list is omitted, goapi considers the standard package tree,\n> as listed by 'go list std'.\n> \n> If the -c flag is given, goapi instead writes to standard output the differences\n> between api.txt and the computed API.  Lines present only in api.txt are\n> prefixed\n> with a minus; lines present only in the computed API are prefixed with a plus.\n> ---\n> \n> $ goapi math\n> pkg time, const ANSIC string\n> pkg time, const April Month\n> pkg time, const August Month\n> pkg time, const December Month\n> pkg time, const Feburary Month\n> pkg time, const Friday Weekday\n> pkg time, const Hour ideal-int\n> ...\n> $ goapi -c $GOROOT/api/go-1.txt time\n> -pkg time, const February Month\n> +pkg time, const Feburary Month\n> $\n> \n> etc.  This will make it general enough that other people can use it too.\n> To cut a new release we just do\n> \n> goapi >$GOROOT/api/go-1.1.txt\n\nDone, mostly.\n\nI haven't implemented the trivial -c yet, but the rest is there.\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode119\nsrc/cmd/goapicheck/goapicheck.go:119: func (w *Walker) writeFile(name string) {\nOn 2012/01/24 20:03:17, rsc wrote:\n> Can this be\n> \n> func (w *Walker) features() []string {\n> \n> instead?\n\nDone.\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode190\nsrc/cmd/goapicheck/goapicheck.go:190: // Note entering a scope here; file boundaries aren't interesting.\nOn 2012/01/24 20:03:17, rsc wrote:\n> s/Note/Not/\n\nDone.\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode226\nsrc/cmd/goapicheck/goapicheck.go:226: token.STRING: \"string\",\nOn 2012/01/24 20:03:17, rsc wrote:\n> s/string/ideal-string/\n\nDone\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode228\nsrc/cmd/goapicheck/goapicheck.go:228: token.IMAG:   \"imag\",\nOn 2012/01/24 20:03:17, rsc wrote:\n> s/imag/ideal-imag/\n\nDone.\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode236\nsrc/cmd/goapicheck/goapicheck.go:236: token.IMAG:   \"imag\",\nOn 2012/01/24 20:03:17, rsc wrote:\n> s/imag/complex128/\n\nDone.\n\nhttp://codereview.appspot.com/5570051/diff/3006/src/cmd/goapicheck/goapicheck.go#newcode260\nsrc/cmd/goapicheck/goapicheck.go:260: return w.constValueType(v.X) // assume left and right are the same side, if this already compiles.\nOn 2012/01/24 20:03:17, rsc wrote:\n> This is not really true; one side can be ideal and the other might not be.\n> If you make all the constType map entries begin with 'ideal-' then this\n> is easy to check.\n\nForgot this one, will do.",
			"disapproval": false,
			"date": "2012-01-24 23:43:50.517171",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, r@google.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-25 00:19:11.074284",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just some random thoughts.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go\nFile src/cmd/goapicheck/goapicheck.go (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go#newcode51\nsrc/cmd/goapicheck/goapicheck.go:51: if strings.HasPrefix(pkg, \"cmd/\") ||\nthis surprised me, so I went an ran \"go list std\" myself. It was a little unexpected that cmd/... was a bit of a special prefix in that regard. Oh, well.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go#newcode114\nsrc/cmd/goapicheck/goapicheck.go:114: return\nmake this explicit please. There's little to gain here by using a naked return.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go#newcode143\nsrc/cmd/goapicheck/goapicheck.go:143: defer pop()\ninline pop here? Or is that too clever?\n  defer w.pushScope(\"pkg \" + name)()\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt\nFile src/cmd/goapicheck/testdata/p1/golden.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt#newcode1\nsrc/cmd/goapicheck/testdata/p1/golden.txt:1: pkg p1, const A ideal-int\nthese could be in a shorter form that's a bit closer to Go syntax.\n\nconst p1.A ideal-int\n...\nfunc p1.Bar(int8, int16, int64)\n...\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt#newcode16\nsrc/cmd/goapicheck/testdata/p1/golden.txt:16: pkg p1, type I interface { Get, GetNamed, Set }\nthis duplicates the information of the next three lines?",
			"disapproval": false,
			"date": "2012-01-24 02:28:18.129696",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 23, 2012 at 7:05 PM, <dsymonds@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5570051/diff/2001/api/go1.txt<http://codereview.appspot.com/5570051/diff/2001/api/go1.txt>\n> File api/go1.txt (right):\n>\n> http://codereview.appspot.com/**5570051/diff/2001/api/go1.txt#**\n> newcode8763<http://codereview.appspot.com/5570051/diff/2001/api/go1.txt#newcode8763>\n> api/go1.txt:8763: pkg websocket, type Conn struct, embedded frameHandler\n> On 2012/01/24 02:58:11, bradfitz wrote:\n>\n>> just realized I probably shouldn't emit these lines, for unexported\n>>\n> embedded\n>\n>> types.\n>>\n>\n>  but what if frameHandler has public methods on it?  do I need to do\n>>\n> the thing\n>\n>> that godoc did and list them as methods on Conn?  probably?\n>>\n>\n> The same will apply for the embedd type that carries common methods in\n> the testing package, and also in reflect. You'll need to flatten that\n> structure somehow.\n\n\nI was resisting having to do cross-package type crap, but I guess I'll have\nto.\n",
			"disapproval": false,
			"date": "2012-01-24 03:07:29.285953",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I haven't read the code (sorry), but a note about process:\n\nAs things develop, there will be lines that are OK to change and lines that are not. After Go 1.2, say, all the lines set at 1.2 will be sacrosanct, but lines before 1.3 are all editable. From the description in the CL, I don't see how that would work.\n\nThe simplest solutions would be some per-line annotation to set the version, or perhaps a distinct file for Go 1, Go 1.1, etc.\n\nHow do you see this working?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-24 05:15:37.237164",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 24, 2012 at 09:45, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Russ and I were thinking of breaking out syscall into its own per-arch\n> files.\n>\n> /api/go-1.txt\n> /api/go-1-linux-amd64.txt (syscall stuff, etc)\n> /api-go-1-windows-386.txt\n\nActually, I was hoping to have that all in one file.\nThe idea would be that you build a list of all the\nGOOS/GOARCH/CgoEnabled contexts that matter:\n\ndarwin,amd64\ndarwin,amd64,cgo\nlinux,amd64\nlinux,amd64,cgo\netc.\n\nand then the tool can build this list of lines for every\nsingle one of them; when a line occurs in all, it can\nbe listed as it is currently.  When a line is specific\nto only some, it would be listed once for each context\n\n[darwin,amd64] pkg...\n\nThen it's all still in one file, and we'll notice when things\nare not the same in different places.\n\nAlso, Brad, can you try running this tool against an r60 tree?\nIt would be nice to have a definitive list of what has changed.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-24 15:59:20.917183",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5570051/diff/2001/api/go1.txt\nFile api/go1.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/api/go1.txt#newcode1\napi/go1.txt:1: pkg archive/tar, const TypeBlock char\nOn 2012/01/24 02:31:12, adg wrote:\n> if every line begins with 'pkg' it seems a redundant part of the file format.\n\nit's intentional. each line stands alone. you can use diff.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go\nFile src/cmd/goapicheck/goapicheck.go (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go#newcode51\nsrc/cmd/goapicheck/goapicheck.go:51: if strings.HasPrefix(pkg, \"cmd/\") ||\nOn 2012/01/24 02:28:18, dsymonds wrote:\n> this surprised me, so I went an ran \"go list std\" myself. It was a little\n> unexpected that cmd/... was a bit of a special prefix in that regard. Oh, well.\n\nsurprised me too, but minor.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go#newcode114\nsrc/cmd/goapicheck/goapicheck.go:114: return\nOn 2012/01/24 02:28:18, dsymonds wrote:\n> make this explicit please. There's little to gain here by using a naked return.\n\nwill do.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/goapicheck.go#newcode143\nsrc/cmd/goapicheck/goapicheck.go:143: defer pop()\nOn 2012/01/24 02:28:18, dsymonds wrote:\n> inline pop here? Or is that too clever?\n>   defer w.pushScope(\"pkg \" + name)()\n\nRuss hates that. :)\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt\nFile src/cmd/goapicheck/testdata/p1/golden.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt#newcode1\nsrc/cmd/goapicheck/testdata/p1/golden.txt:1: pkg p1, const A ideal-int\nOn 2012/01/24 02:28:18, dsymonds wrote:\n> these could be in a shorter form that's a bit closer to Go syntax.\n> \n> const p1.A ideal-int\n> ...\n> func p1.Bar(int8, int16, int64)\n> ...\n\nI played with a few schemes. I like this one. *shrug*.  It's a little redundant, but each line sorts well and reads well on its own, and I get it all pretty much for free based on the scope stuff.\n\nhttp://codereview.appspot.com/5570051/diff/2001/src/cmd/goapicheck/testdata/p1/golden.txt#newcode16\nsrc/cmd/goapicheck/testdata/p1/golden.txt:16: pkg p1, type I interface { Get, GetNamed, Set }\nOn 2012/01/24 02:28:18, dsymonds wrote:\n> this duplicates the information of the next three lines?\n\nIntentional.\n\nThe design is if any line here is not present in a future version of this file, we've broken the API.\n\nIf this were just \"type I interface\" like it is for struct, then we could add methods on accident and not get caught.",
			"disapproval": false,
			"date": "2012-01-24 02:33:49.820868",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Question:\n\nhttp://codereview.appspot.com/5570051/diff/2001/api/go1.txt\nFile api/go1.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/api/go1.txt#newcode8763\napi/go1.txt:8763: pkg websocket, type Conn struct, embedded frameHandler\njust realized I probably shouldn't emit these lines, for unexported embedded types.\n\nbut what if frameHandler has public methods on it?  do I need to do the thing that godoc did and list them as methods on Conn?  probably?",
			"disapproval": false,
			"date": "2012-01-24 02:58:10.733089",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5570051/diff/2001/api/go1.txt\nFile api/go1.txt (right):\n\nhttp://codereview.appspot.com/5570051/diff/2001/api/go1.txt#newcode8763\napi/go1.txt:8763: pkg websocket, type Conn struct, embedded frameHandler\nOn 2012/01/24 02:58:11, bradfitz wrote:\n> just realized I probably shouldn't emit these lines, for unexported embedded\n> types.\n> \n> but what if frameHandler has public methods on it?  do I need to do the thing\n> that godoc did and list them as methods on Conn?  probably?\n\nThe same will apply for the embedd type that carries common methods in the testing package, and also in reflect. You'll need to flatten that structure somehow.",
			"disapproval": false,
			"date": "2012-01-24 03:05:00.991635",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 24, 2012 at 2:07 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n\n> I was resisting having to do cross-package type crap, but I guess I'll have to.\n\nIt's only really intra-package that's the issue. If bytes.Buffer\nembedded sync.Mutex (say), then you don't need to record that\nbytes.Buffer has a Lock method, only that it embeds sync.Mutex. You\ncan't embed a private type of another package, so cross-package\nembedding can only be for public types which themselves will\nindependently be audited by this tool.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-01-24 03:11:59.146671",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It can now do the whole tree without any extra CLs to make its job easier.\n\nIt doesn't yet promote methods in unexported embedded structs, though.\n\n\nOn Tue, Jan 24, 2012 at 9:04 AM, <bradfitz@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, dsymonds@golang.org, adg@golang.org,\n> r@google.com, remyoudompheng@gmail.com, rsc@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5570051/<http://codereview.appspot.com/5570051/>\n>\n",
			"disapproval": false,
			"date": "2012-01-24 17:07:25.775729",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ and I were thinking of breaking out syscall into its own per-arch\nfiles.\n\n/api/go-1.txt\n/api/go-1-linux-amd64.txt (syscall stuff, etc)\n/api-go-1-windows-386.txt\n/api-go-1.1-txt\netc\n\nNot really decided, though.  I do think syscall should be checked for\nbackwards compatibility, though.  We've had mistakes in the past when\nregenerating the z files in pkg/syscall and broken people's code on\naccident.\n\nOn Mon, Jan 23, 2012 at 10:52 PM, <remyoudompheng@gmail.com> wrote:\n\n> I see the syscall package is also included. Do you want to support\n> checking architeccture-specific API breaks or is that too much?\n>\n> R\u00e9my.\n>\n> http://codereview.appspot.com/**5570051/<http://codereview.appspot.com/5570051/>\n>\n",
			"disapproval": false,
			"date": "2012-01-24 14:45:44.512596",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now using parser.ParseFile instead of ParseDir, for gri.\n\nOn Tue, Jan 24, 2012 at 4:19 PM, <bradfitz@golang.org> wrote:\n\n> Hello dsymonds@golang.org, adg@golang.org, r@google.com,\n> remyoudompheng@gmail.com, rsc@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5570051/<http://codereview.appspot.com/5570051/>\n>\n",
			"disapproval": false,
			"date": "2012-01-25 00:20:50.584992",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ed6391ead384 ***\n\ncmd/goapi: new tool for tracking exported API over time\n\nThe idea is that we add files to the api/ directory which\nare sets of promises for the future.  Each line in a file\nis a stand-alone feature description.\n\nWhen we do a release, we make sure we haven't broken or changed\nany lines from the past (only added them).\n\nWe never change old files, only adding new ones. (go-1.1.txt,\netc)\n\nR=dsymonds, adg, r, remyoudompheng, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5570051",
			"disapproval": false,
			"date": "2012-01-26 01:48:05.624045",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, r@google.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-25 19:36:05.933829",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5570051: cmd/goapicheck: new tool for tracking API over time",
	"created": "2012-01-24 02:10:53.710755",
	"patchsets": [
		1,
		2001,
		3006,
		7005,
		7,
		8,
		6015
	],
	"modified": "2012-01-26 01:48:07.676721",
	"closed": true,
	"issue": 5570051
}