{
	"description": "runtime: fix deadlock in parallel for test\nThe deadlock occurs when another goroutine requests GC\nduring the test. When wait=true the test expects physical parallelism,\nthat is, that P goroutines are all active at the same time.\nIf GC is requested, then part of the goroutines are not scheduled,\nso other goroutines deadlock.\nWith wait=false, goroutines finish parallel for w/o waiting for all\nother goroutines.\nFixes issue 3954.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0852bd93e466 ***\n\nruntime: fix deadlock in parallel for test\nThe deadlock occurs when another goroutine requests GC\nduring the test. When wait=true the test expects physical parallelism,\nthat is, that P goroutines are all active at the same time.\nIf GC is requested, then part of the goroutines are not scheduled,\nso other goroutines deadlock.\nWith wait=false, goroutines finish parallel for w/o waiting for all\nother goroutines.\nFixes issue 3954.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6820098",
			"disapproval": false,
			"date": "2012-11-06 16:11:38.889940",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-06 15:36:42.541220",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI'd probably use a WaitGroup here, but this works too.\r\n\r\nOn Tue, Nov 6, 2012 at 4:36 PM, <dvyukov@google.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@**code.google.com/p/go/<http://40google.com@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> runtime: fix deadlock in parallel for test\r\n> The deadlock occurs when another goroutine requests GC\r\n> during the test. When wait=true the test expects physical parallelism,\r\n> that is, that P goroutines are all active at the same time.\r\n> If GC is requested, then part of the goroutines are not scheduled,\r\n> so other goroutines deadlock.\r\n> With wait=false, goroutines finish parallel for w/o waiting for all\r\n> other goroutines.\r\n> Fixes issue 3954.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6820098/<http://codereview.appspot.com/6820098/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/parfor_test.go\r\n>\r\n>\r\n> Index: src/pkg/runtime/parfor_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/parfor_test.**go\r\n> +++ b/src/pkg/runtime/parfor_test.**go\r\n> @@ -106,14 +106,21 @@\r\n>                 data[i] = i\r\n>         }\r\n>         P := GOMAXPROCS(-1)\r\n> +       c := make(chan bool, P)\r\n>         desc := NewParFor(uint32(P))\r\n> -       ParForSetup(desc, uint32(P), uint32(N), nil, true, func(desc\r\n> *ParFor, i uint32) {\r\n> +       ParForSetup(desc, uint32(P), uint32(N), nil, false, func(desc\r\n> *ParFor, i uint32) {\r\n>                 data[i] = data[i]*data[i] + 1\r\n>         })\r\n>         for p := 1; p < P; p++ {\r\n> -               go ParForDo(desc)\r\n> +               go func() {\r\n> +                       ParForDo(desc)\r\n> +                       c <- true\r\n> +               }()\r\n>         }\r\n>         ParForDo(desc)\r\n> +       for p := 1; p < P; p++ {\r\n> +               <-c\r\n> +       }\r\n>         for i := uint64(0); i < N; i++ {\r\n>                 if data[i] != i*i+1 {\r\n>                         t.Fatalf(\"Wrong element %d: %d\", i, data[i])\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-06 16:03:11.978350",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6820098: runtime: fix deadlock in parallel for test",
	"created": "2012-11-06 15:03:43.769860",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		9001
	],
	"modified": "2012-11-06 16:11:40.088480",
	"closed": true,
	"issue": 6820098
}