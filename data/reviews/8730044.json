{
	"description": "reflect: use visit structure for map key in DeepEqual",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"jonathan@titanous.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-13 00:05:14.909570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice.\r\n\r\nLikely too late for go 1.1 but good find. Leaving for r.\r\n On Apr 12, 2013 5:05 PM, <robert.hencke@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> reflect: use visit structure for map key in DeepEqual\r\n>\r\n> Please review this at https://codereview.appspot.**com/8730044/<https://codereview.appspot.com/8730044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/reflect/deepequal.go\r\n>\r\n>\r\n> Index: src/pkg/reflect/deepequal.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/deepequal.go\r\n> +++ b/src/pkg/reflect/deepequal.go\r\n> @@ -9,18 +9,17 @@\r\n>  // During deepValueEqual, must keep track of checks that are\r\n>  // in progress.  The comparison algorithm assumes that all\r\n>  // checks in progress are true when it reencounters them.\r\n> -// Visited are stored in a map indexed by 17 * a1 + a2;\r\n> +// Visited comparisons are stored in a map indexed by visit.\r\n>  type visit struct {\r\n> -       a1   uintptr\r\n> -       a2   uintptr\r\n> -       typ  Type\r\n> -       next *visit\r\n> +       a1  uintptr\r\n> +       a2  uintptr\r\n> +       typ Type\r\n>  }\r\n>\r\n>  // Tests for deep equality using reflected types. The map argument tracks\r\n>  // comparisons that have already been seen, which allows short circuiting\r\n> on\r\n>  // recursive types.\r\n> -func deepValueEqual(v1, v2 Value, visited map[uintptr]*visit, depth int)\r\n> (b bool) {\r\n> +func deepValueEqual(v1, v2 Value, visited map[visit]bool, depth int) bool\r\n> {\r\n>         if !v1.IsValid() || !v2.IsValid() {\r\n>                 return v1.IsValid() == v2.IsValid()\r\n>         }\r\n> @@ -44,17 +43,14 @@\r\n>                 }\r\n>\r\n>                 // ... or already seen\r\n> -               h := 17*addr1 + addr2\r\n> -               seen := visited[h]\r\n>                 typ := v1.Type()\r\n> -               for p := seen; p != nil; p = p.next {\r\n> -                       if p.a1 == addr1 && p.a2 == addr2 && p.typ == typ {\r\n> -                               return true\r\n> -                       }\r\n> +               v := visit{addr1, addr2, typ}\r\n> +               if visited[v] {\r\n> +                       return true\r\n>                 }\r\n>\r\n>                 // Remember for later.\r\n> -               visited[h] = &visit{addr1, addr2, typ, seen}\r\n> +               visited[v] = true\r\n>         }\r\n>\r\n>         switch v1.Kind() {\r\n> @@ -135,5 +131,5 @@\r\n>         if v1.Type() != v2.Type() {\r\n>                 return false\r\n>         }\r\n> -       return deepValueEqual(v1, v2, make(map[uintptr]*visit), 0)\r\n> +       return deepValueEqual(v1, v2, make(map[visit]bool), 0)\r\n>  }\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-13 00:11:29.251060",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for the kind words, Brad.  I wish you folks all the best on the Go 1.1 release.\n\nOn 2013/04/13 00:11:29, bradfitz wrote:\n> Nice.\n> \n> Likely too late for go 1.1 but good find. Leaving for r.\n>  On Apr 12, 2013 5:05 PM, <mailto:robert.hencke@gmail.com> wrote:\n> \n> > Reviewers: golang-dev1,\n> >\n> > Message:\n> > Hello mailto:golang-dev@googlegroups.com,\n> >\n> > I'd like you to review this change to\n> > https://code.google.com/p/go\n> >\n> >\n> > Description:\n> > reflect: use visit structure for map key in DeepEqual\n> >\n> > Please review this at\n> https://codereview.appspot.**com/8730044/%3Chttps://codereview.appspot.com/8730044/>\n> >\n> > Affected files:\n> >   M src/pkg/reflect/deepequal.go\n> >\n> >\n> > Index: src/pkg/reflect/deepequal.go\n> > ==============================**==============================**=======\n> > --- a/src/pkg/reflect/deepequal.go\n> > +++ b/src/pkg/reflect/deepequal.go\n> > @@ -9,18 +9,17 @@\n> >  // During deepValueEqual, must keep track of checks that are\n> >  // in progress.  The comparison algorithm assumes that all\n> >  // checks in progress are true when it reencounters them.\n> > -// Visited are stored in a map indexed by 17 * a1 + a2;\n> > +// Visited comparisons are stored in a map indexed by visit.\n> >  type visit struct {\n> > -       a1   uintptr\n> > -       a2   uintptr\n> > -       typ  Type\n> > -       next *visit\n> > +       a1  uintptr\n> > +       a2  uintptr\n> > +       typ Type\n> >  }\n> >\n> >  // Tests for deep equality using reflected types. The map argument tracks\n> >  // comparisons that have already been seen, which allows short circuiting\n> > on\n> >  // recursive types.\n> > -func deepValueEqual(v1, v2 Value, visited map[uintptr]*visit, depth int)\n> > (b bool) {\n> > +func deepValueEqual(v1, v2 Value, visited map[visit]bool, depth int) bool\n> > {\n> >         if !v1.IsValid() || !v2.IsValid() {\n> >                 return v1.IsValid() == v2.IsValid()\n> >         }\n> > @@ -44,17 +43,14 @@\n> >                 }\n> >\n> >                 // ... or already seen\n> > -               h := 17*addr1 + addr2\n> > -               seen := visited[h]\n> >                 typ := v1.Type()\n> > -               for p := seen; p != nil; p = p.next {\n> > -                       if p.a1 == addr1 && p.a2 == addr2 && p.typ == typ {\n> > -                               return true\n> > -                       }\n> > +               v := visit{addr1, addr2, typ}\n> > +               if visited[v] {\n> > +                       return true\n> >                 }\n> >\n> >                 // Remember for later.\n> > -               visited[h] = &visit{addr1, addr2, typ, seen}\n> > +               visited[v] = true\n> >         }\n> >\n> >         switch v1.Kind() {\n> > @@ -135,5 +131,5 @@\n> >         if v1.Type() != v2.Type() {\n> >                 return false\n> >         }\n> > -       return deepValueEqual(v1, v2, make(map[uintptr]*visit), 0)\n> > +       return deepValueEqual(v1, v2, make(map[visit]bool), 0)\n> >  }\n> >\n> >\n> > --\n> >\n> > ---You received this message because you are subscribed to the Google\n> > Groups \"golang-dev\" group.\n> > To unsubscribe from this group and stop receiving emails from it, send an\n> > email to\n> mailto:golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\n> > .\n> > For more options, visit\n> https://groups.google.com/**groups/opt_out%3Chttps://groups.google.com/groups/opt_out>\n> > .\n> >\n> >\n> >",
			"disapproval": false,
			"date": "2013-04-13 01:11:49.352920",
			"approval": false
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"jonathan@titanous.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8730044/diff/4001/src/pkg/reflect/deepequal.go\nFile src/pkg/reflect/deepequal.go (right):\n\nhttps://codereview.appspot.com/8730044/diff/4001/src/pkg/reflect/deepequal.go#newcode22\nsrc/pkg/reflect/deepequal.go:22: func deepValueEqual(v1, v2 Value, visited map[visit]bool, depth int) bool {\nI think you can save a bit of memory by using map[visit]struct{}, as struct{} takes up zero bytes.",
			"disapproval": false,
			"date": "2013-04-13 15:36:31.784460",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"jonathan@titanous.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This can wait until after Go 1.1.\n\nIt might be worth writing a benchmark.",
			"disapproval": false,
			"date": "2013-04-14 17:13:25.490550",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"jonathan@titanous.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "unresolved comments. want to address them?\n\ni am fine with this as is, however. bool is fine, and i don't feel a pressing need for a benchmark.",
			"disapproval": false,
			"date": "2013-05-15 21:37:18.535540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM too.\r\n\r\nI think bool is actually better than struct{} for readability.\r\n\r\n\r\n\r\nOn Wed, May 15, 2013 at 2:37 PM, <r@golang.org> wrote:\r\n\r\n> unresolved comments. want to address them?\r\n>\r\n> i am fine with this as is, however. bool is fine, and i don't feel a\r\n> pressing need for a benchmark.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8730044/<https://codereview.appspot.com/8730044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 21:40:38.193510",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"jonathan@titanous.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-15 21:45:34.885410",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll check it in. A benchmark can come later if someone is eager (I'm not).\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-15 21:45:41.587620",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"jonathan@titanous.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9f146b985681 ***\n\nreflect: use visit structure for map key in DeepEqual\n\nR=golang-dev, bradfitz, jonathan, r\nCC=golang-dev\nhttps://codereview.appspot.com/8730044\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2013-05-15 21:51:01.279100",
			"approval": false
		}
	],
	"owner_email": "robert.hencke@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rh",
	"subject": "code review 8730044: reflect: use visit structure for map key in DeepEqual",
	"created": "2013-04-12 23:43:17.298700",
	"patchsets": [
		1,
		2001,
		2002,
		4001
	],
	"modified": "2013-05-15 21:51:01.279100",
	"closed": false,
	"issue": 8730044
}