{
	"description": "cmd/godoc: handle file name arguments better\n\nThis change prints a warning/suggestion if the user refers to the\ndirectory \"foo\" when it should be the relative path \"./foo\".\n\nFurthermore, it discovers if \"./foo\" resides under an GOPATH or GOROOT\nand displays the correct import path. For example,\n        cd $GOROOT/src/pkg/archive\n        godoc ./zip\nwill display the docs for \"archive/zip\" with the correct import path.\n\nFixes issue 4330.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-16 09:51:36.782030",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the behavior for commands seems to be inconsistent with that of normal\r\npackages.\r\n\r\ntry this:\r\ngodoc cmd/godoc # -> command document\r\ncd $GOROOT/src/cmd\r\ngodoc godoc # -> package document\r\n\r\ngodoc archive/zip # -> package document\r\ncd $GOROOT/src/pkg/archive\r\ngodoc zip # -> also package document\r\n\r\nbtw, what do you think it's the best way to say package document for a\r\ncommand?\r\ni used to do something like this: godoc ./cmd/godoc to view the package\r\ndocument\r\nfor cmd/godoc.\r\n",
			"disapproval": false,
			"date": "2013-01-16 10:58:47.611950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not sure this is a good idea. I am uncomfortable with the\r\nambiguity this introduces. What if there is a subdirectory called math\r\nand I godoc math? Which one do I get? It has to be the standard math\r\nsince otherwise there is no way to name the standard math. But then\r\npeople will complain that the subdirectory doesn't work and still have\r\nto learn about ./math. Perhaps we can resolve issue 4330 by making\r\nRob's example print:\r\n\r\n% godoc now  # WHY DOESN'T THIS WORK?\r\ngodoc: cannot find import path \"now\"\r\nFor the local directory, use godoc ./now.\r\n%\r\n\r\n(The second line would print only if the directory existed.)\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-17 14:12:36.309120",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 January 2013 21:58, minux <minux.ma@gmail.com> wrote:\r\n\r\n> the behavior for commands seems to be inconsistent with that of normal\r\n> packages.\r\n>\r\n> try this:\r\n> godoc cmd/godoc # -> command document\r\n> cd $GOROOT/src/cmd\r\n> godoc godoc # -> package document\r\n>\r\n> godoc archive/zip # -> package document\r\n> cd $GOROOT/src/pkg/archive\r\n> godoc zip # -> also package document\r\n>\r\n\r\nUgh! It is so annoying that commands and packages are documented\r\ndifferently.\r\n\r\nI've made some more changes. My goal with this CL was to clean things up a\r\nbit, but I think I've merely maintained the status quo. :/\r\n\r\n\r\n> btw, what do you think it's the best way to say package document for a\r\n> command?\r\n> i used to do something like this: godoc ./cmd/godoc to view the package\r\n> document\r\n> for cmd/godoc.\r\n>\r\n\r\ngodoc cmd/godoc\r\n?\r\n",
			"disapproval": false,
			"date": "2013-01-17 03:15:25.505850",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nThis now depends on https://codereview.appspot.com/7129048\r\n",
			"disapproval": false,
			"date": "2013-01-17 05:28:00.945190",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 18 January 2013 01:12, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> What if there is a subdirectory called math\r\n> and I godoc math? Which one do I get?\r\n>\r\n\r\nYou get the standard library's math. The order of precedence for\r\nnon-absolute paths is: GOROOT, GOPATH, path relative to CWD. This seems the\r\nleast surprising order to me. I'm not sure people will complain, as this\r\nchange merely gives them a convenience (naming relative paths without\r\nstarting them with dot) that they didn't have before.\r\n\r\nThe other important thing this CL does is make sure the package's import\r\npath is displayed correctly if that package is inside GOROOT or GOPATH.\r\nThat's an important improvement.\r\n\r\nIt's easy enough to alter this change to remove the former functionality\r\nchange and add the message you suggest, and keep the latter. What do you\r\nthink?\r\n",
			"disapproval": false,
			"date": "2013-01-17 23:25:20.273120",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-18 23:05:49.543130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> You get the standard library's math. The order of precedence for\r\n> non-absolute paths is: GOROOT, GOPATH, path relative to CWD. This seems the\r\n> least surprising order to me. I'm not sure people will complain, as this\r\n> change merely gives them a convenience (naming relative paths without\r\n> starting them with dot) that they didn't have before.\r\n\r\nI am complaining already. :-)\r\n\r\nPeople complaining is probably not a good metric for whether it's a\r\ngood design. Convenience today is confusion tomorrow.\r\n\r\n> The other important thing this CL does is make sure the package's import\r\n> path is displayed correctly if that package is inside GOROOT or GOPATH.\r\n> That's an important improvement.\r\n>\r\n> It's easy enough to alter this change to remove the former functionality\r\n> change and add the message you suggest, and keep the latter. What do you\r\n> think?\r\n\r\nThat sounds fine: remove the ambiguity, add a warning if nothing is\r\nfound but ./ would fix that, and fix the import path.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-18 16:28:44.519280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am happy with where this is going, just want to try to clean up the logic.\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/godoc.go#newcode1052\nsrc/cmd/godoc/godoc.go:1052: // then it is not usable as command docs.\nThis is not true. A Go command can be in package main and have docs in package main. 'Package documentation' is a hack for commands written in C. I don't know if that affects the surrounding code, but the comment should be more precise.\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (right):\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/main.go#newcode384\nsrc/cmd/godoc/main.go:384: // If command docs are present, choose them above all else.\nThis is different from the way it used to work.\nIt used to be that package wins unless you say cmd/.\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/main.go#newcode406\nsrc/cmd/godoc/main.go:406: fmt.Printf(\"use 'godoc %s%s' for documentation on the %s command \\n\\n\", cmdPrefix, relpath, relpath)\nHow does this work anymore without forceCmd?\nI'm pretty lost at this point in the code. Can you make this clearer?",
			"disapproval": false,
			"date": "2013-01-22 21:46:20.326230",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/godoc.go#newcode1052\nsrc/cmd/godoc/godoc.go:1052: // then it is not usable as command docs.\nOn 2013/01/22 21:46:20, rsc wrote:\n> This is not true. A Go command can be in package main and have docs in package\n> main. 'Package documentation' is a hack for commands written in C. I don't know\n> if that affects the surrounding code, but the comment should be more precise.\n\nIf isPkg is false then we're looking for doc.go with \"package documentation\". I updated the comment, hopefully it is more clear.\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (right):\n\nhttps://codereview.appspot.com/7132044/diff/5004/src/cmd/godoc/main.go#newcode384\nsrc/cmd/godoc/main.go:384: // If command docs are present, choose them above all else.\nOn 2013/01/22 21:46:20, rsc wrote:\n> This is different from the way it used to work.\n> It used to be that package wins unless you say cmd/.\n\nI think we need to nail down when to use command docs (with cmdHandler, which does not show any type, func, var, or const declarations) and when to use package docs (with pkgHandler).\n\nProposal:\n\nShow command docs when:\na. there is a doc.go in the directory with a \"package documentation\" clause\nb. the files in the directory belong to \"package main\"\nOtherwise show package docs.\n\nI think point b is not the case at the moment.",
			"disapproval": false,
			"date": "2013-01-23 05:58:29.973050",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 7132044: cmd/godoc: handle file name arguments better",
	"created": "2013-01-16 09:51:28.560480",
	"patchsets": [
		1,
		2002,
		3002,
		9001,
		6002,
		5004
	],
	"modified": "2013-01-23 05:58:29.973050",
	"closed": false,
	"issue": 7132044
}