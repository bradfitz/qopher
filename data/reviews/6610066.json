{
	"description": "os: Added documentation to the Exit function\n\nAdded documentation for the Exit function indicating that when calling Exit,\nany defer statements that have been called never actually get executed.\nFixes issue 4101.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"0xjnml@gmail.com",
		"lucio.dere@gmail.com",
		"rsc@golang.org",
		"gri@golang.org",
		"lvd@google.com"
	],
	"messages": [
		{
			"sender": "klnusbaum@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "According to the Go Language specification:\r\n\r\n\"A 'defer' statement invokes a function whose execution is deferred to\r\nthe *moment\r\nthe surrounding function returns*.\" (emphasis mine).\r\n\r\nSince calling the Exit by definition (at least the \"standard\" definition I\r\nunderstand) immediately terminates the current running process, the current\r\nfunction would have no way to return, i.e. the current behavior is correct.\r\n\r\nThat said, it certainly feels like the current behavior defeats the spirit\r\nof the \"defer\" statement. Perhaps the spec on defer should be  made a\r\nlittle looser so as to accommodate cases such as this?\r\n\r\n\r\n\r\nOn Sun, Oct 7, 2012 at 7:22 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I'm not sure whether the behavior should be documented or changed.\r\n>\r\n\r\n\r\n\r\n-- \r\nPeace, Love, and Source Code\r\n-Kurtis\r\n",
			"disapproval": false,
			"date": "2012-10-08 01:44:49.748350",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was trying to imagine how far one takes this, if deferred functions\r\nneed to be invoked all the way up a chain of function calls.  Not a\r\npretty sight.\r\n\r\nLucio.\r\n\r\n\r\nOn 10/8/12, Jan Mercl <0xjnml@gmail.com> wrote:\r\n> Erroneously sent to OP only, FWDing now.\r\n>\r\n>\r\n> ---------- Forwarded message ----------\r\n> From: Jan Mercl <0xjnml@gmail.com>\r\n> Date: Mon, Oct 8, 2012 at 10:07 AM\r\n> Subject: Re: [golang-dev] code review 6610066: os: Added documentation\r\n> to the Exit function (issue 6610066)\r\n> To: Kurtis Nusbaum <klnusbaum@gmail.com>\r\n>\r\n>\r\n> On Mon, Oct 8, 2012 at 3:44 AM, Kurtis Nusbaum <klnusbaum@gmail.com> wrote:\r\n>\r\n> I would say Looks Good To Me if I could.\r\n>\r\n> 1) The behaviour of os.Exit is settled for years (omg, time passes so\r\n> fast!).\r\n> 2) A buggy code in a defer can cause a non-exitable, only kill-able Go\r\n> binary. Bad for users, bad for Go reputation.\r\n> 3) What other mechanism will be left for legit cases where the program\r\n> really wants to exit NQA?\r\n>\r\n> -j\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-08 10:53:50.020380",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure whether the behavior should be documented or changed.\r\n",
			"disapproval": false,
			"date": "2012-10-08 00:22:28.411230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Oct 7, 2012 at 8:22 PM, Rob Pike <r@golang.org> wrote:\r\n> I'm not sure whether the behavior should be documented or changed.\r\n\r\nI don't think changing the behavior makes sense here. The parallel is\r\nwith runtime.Goexit, but runtime.Goexit runs the deferred calls of the\r\none goroutine that it is terminating, which importantly is the\r\ngoroutine that called Goexit, so it is in one of a limited number of\r\nstates. os.Exit could really only run the defers from the current\r\ngoroutine - interrupting other goroutines and forcibly running their\r\ndefers at unspecified execution points would not work well - so you'd\r\nhave to start thinking about which goroutine calls Exit. You'd also\r\nhave to introduce a version of Exit that doesn't do this, for use by\r\nthings that really just want to die, like maybe log.Fatal. This would\r\nalso reintroduce all the problems C has with atexit.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-10-08 14:50:57.640600",
			"approval": false
		},
		{
			"sender": "KLNusbaum@gmail.com",
			"recipients": [
				"KLNusbaum@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-07 21:36:30.778780",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Erroneously sent to OP only, FWDing now.\r\n\r\n\r\n---------- Forwarded message ----------\r\nFrom: Jan Mercl <0xjnml@gmail.com>\r\nDate: Mon, Oct 8, 2012 at 10:07 AM\r\nSubject: Re: [golang-dev] code review 6610066: os: Added documentation\r\nto the Exit function (issue 6610066)\r\nTo: Kurtis Nusbaum <klnusbaum@gmail.com>\r\n\r\n\r\nOn Mon, Oct 8, 2012 at 3:44 AM, Kurtis Nusbaum <klnusbaum@gmail.com> wrote:\r\n\r\nI would say Looks Good To Me if I could.\r\n\r\n1) The behaviour of os.Exit is settled for years (omg, time passes so fast!).\r\n2) A buggy code in a defer can cause a non-exitable, only kill-able Go\r\nbinary. Bad for users, bad for Go reputation.\r\n3) What other mechanism will be left for legit cases where the program\r\nreally wants to exit NQA?\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-10-08 08:09:24.286750",
			"approval": false
		},
		{
			"sender": "klnusbaum@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ,\r\nI actually think you're reasoning is pretty sound on this one. I fully\r\nagree. So can we just include the documentation I wrote as is then?\r\n\r\nOn Mon, Oct 8, 2012 at 9:50 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Sun, Oct 7, 2012 at 8:22 PM, Rob Pike <r@golang.org> wrote:\r\n> > I'm not sure whether the behavior should be documented or changed.\r\n>\r\n> I don't think changing the behavior makes sense here. The parallel is\r\n> with runtime.Goexit, but runtime.Goexit runs the deferred calls of the\r\n> one goroutine that it is terminating, which importantly is the\r\n> goroutine that called Goexit, so it is in one of a limited number of\r\n> states. os.Exit could really only run the defers from the current\r\n> goroutine - interrupting other goroutines and forcibly running their\r\n> defers at unspecified execution points would not work well - so you'd\r\n> have to start thinking about which goroutine calls Exit. You'd also\r\n> have to introduce a version of Exit that doesn't do this, for use by\r\n> things that really just want to die, like maybe log.Fatal. This would\r\n> also reintroduce all the problems C has with atexit.\r\n>\r\n> Russ\r\n>\r\n\r\n\r\n\r\n-- \r\nPeace, Love, and Source Code\r\n-Kurtis\r\n",
			"disapproval": false,
			"date": "2012-10-08 16:04:39.458440",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd be happier if the spec was clearer. It says the deferred function\r\nruns \"when the function returns\" but it's not that simple. The text\r\nshould be cleared up so that the behavior we want for os.Exit falls\r\nout, something like \"when the the function returns normally or\r\nterminates due to a panicking function\". Not great wording but you get\r\nthe idea.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-08 20:05:03.836860",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"KLNusbaum@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"0xjnml@gmail.com",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For what it's worth:\n\nLGTM\n\nI agree w/ the various comments that the behavior of Exit cannot reasonably be changed.\n\nIf we wanted an exit that behaves differently (say calls that deferred functions) it should be another function (os.GoExit ?). That said, for the reasons also outlined before (goroutines), I don't know what the exact semantics of such a function should be and if it can be reasonably implemented.",
			"disapproval": false,
			"date": "2012-10-08 18:38:31.859330",
			"approval": true
		},
		{
			"sender": "klnusbaum@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "gri,\r\nI'm not a committer. Can you please run:\r\n\r\n$hg clpatch 6610066\r\n$hg submit 6610066\r\n\r\nOn Mon, Oct 8, 2012 at 1:38 PM, <gri@golang.org> wrote:\r\n\r\n> For what it's worth:\r\n>\r\n> LGTM\r\n>\r\n> I agree w/ the various comments that the behavior of Exit cannot\r\n> reasonably be changed.\r\n>\r\n> If we wanted an exit that behaves differently (say calls that deferred\r\n> functions) it should be another function (os.GoExit ?). That said, for\r\n> the reasons also outlined before (goroutines), I don't know what the\r\n> exact semantics of such a function should be and if it can be reasonably\r\n> implemented.\r\n>\r\n> https://codereview.appspot.**com/6610066/<https://codereview.appspot.com/6610066/>\r\n>\r\n\r\n\r\n\r\n-- \r\nPeace, Love, and Source Code\r\n-Kurtis\r\n",
			"disapproval": false,
			"date": "2012-10-08 19:29:26.014320",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was aware of that. But I am leaving this for feedback from others (r,\r\nrsc, iant).\r\n- gri\r\n\r\n\r\nOn Mon, Oct 8, 2012 at 12:29 PM, Kurtis Nusbaum <klnusbaum@gmail.com> wrote:\r\n\r\n> gri,\r\n> I'm not a committer. Can you please run:\r\n>\r\n> $hg clpatch 6610066\r\n> $hg submit 6610066\r\n>\r\n>\r\n> On Mon, Oct 8, 2012 at 1:38 PM, <gri@golang.org> wrote:\r\n>\r\n>> For what it's worth:\r\n>>\r\n>> LGTM\r\n>>\r\n>> I agree w/ the various comments that the behavior of Exit cannot\r\n>> reasonably be changed.\r\n>>\r\n>> If we wanted an exit that behaves differently (say calls that deferred\r\n>> functions) it should be another function (os.GoExit ?). That said, for\r\n>> the reasons also outlined before (goroutines), I don't know what the\r\n>> exact semantics of such a function should be and if it can be reasonably\r\n>> implemented.\r\n>>\r\n>> https://codereview.appspot.**com/6610066/<https://codereview.appspot.com/6610066/>\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Peace, Love, and Source Code\r\n> -Kurtis\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-08 19:31:12.607330",
			"approval": false
		},
		{
			"sender": "klnusbaum@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah ok. Sorry, didn't realize that. I'll wait then :)\r\n\r\nOn Mon, Oct 8, 2012 at 2:31 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> I was aware of that. But I am leaving this for feedback from others (r,\r\n> rsc, iant).\r\n> - gri\r\n>\r\n>\r\n> On Mon, Oct 8, 2012 at 12:29 PM, Kurtis Nusbaum <klnusbaum@gmail.com>wrote:\r\n>\r\n>> gri,\r\n>> I'm not a committer. Can you please run:\r\n>>\r\n>> $hg clpatch 6610066\r\n>> $hg submit 6610066\r\n>>\r\n>>\r\n>> On Mon, Oct 8, 2012 at 1:38 PM, <gri@golang.org> wrote:\r\n>>\r\n>>> For what it's worth:\r\n>>>\r\n>>> LGTM\r\n>>>\r\n>>> I agree w/ the various comments that the behavior of Exit cannot\r\n>>> reasonably be changed.\r\n>>>\r\n>>> If we wanted an exit that behaves differently (say calls that deferred\r\n>>> functions) it should be another function (os.GoExit ?). That said, for\r\n>>> the reasons also outlined before (goroutines), I don't know what the\r\n>>> exact semantics of such a function should be and if it can be reasonably\r\n>>> implemented.\r\n>>>\r\n>>> https://codereview.appspot.**com/6610066/<https://codereview.appspot.com/6610066/>\r\n>>>\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>> Peace, Love, and Source Code\r\n>> -Kurtis\r\n>>\r\n>>\r\n>\r\n\r\n\r\n-- \r\nPeace, Love, and Source Code\r\n-Kurtis\r\n",
			"disapproval": false,
			"date": "2012-10-08 19:31:59.000960",
			"approval": false
		},
		{
			"sender": "KLNusbaum@gmail.com",
			"recipients": [
				"KLNusbaum@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"0xjnml@gmail.com",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, 0xjnml@gmail.com, lucio.dere@gmail.com, rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-09 22:34:52.045120",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Still waiting for a response from others about my request to tweak the spec.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-09 23:40:21.104180",
			"approval": false
		},
		{
			"sender": "KLNusbaum@gmail.com",
			"recipients": [
				"KLNusbaum@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"0xjnml@gmail.com",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, 0xjnml@gmail.com, lucio.dere@gmail.com, rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-09 22:37:16.264590",
			"approval": false
		},
		{
			"sender": "klnusbaum@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any response on the spec tweak?\r\n\r\nOn Tue, Oct 9, 2012 at 6:40 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> Still waiting for a response from others about my request to tweak the\r\n> spec.\r\n>\r\n> -rob\r\n>\r\n\r\n\r\n\r\n-- \r\nPeace, Love, and Source Code\r\n-Kurtis\r\n",
			"disapproval": false,
			"date": "2012-10-23 03:53:51.688700",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I will look into this tomorrow.\r\n- gri\r\n\r\n\r\nOn Mon, Oct 22, 2012 at 8:53 PM, Kurtis Nusbaum <klnusbaum@gmail.com> wrote:\r\n\r\n> Any response on the spec tweak?\r\n>\r\n>\r\n> On Tue, Oct 9, 2012 at 6:40 PM, Rob Pike <r@golang.org> wrote:\r\n>\r\n>> Still waiting for a response from others about my request to tweak the\r\n>> spec.\r\n>>\r\n>> -rob\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Peace, Love, and Source Code\r\n> -Kurtis\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-23 04:04:59.921660",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "syscall.Exec doesn't return either, and whether to call that or Exit\r\nis a deliberate choice of the programmer.\r\n\r\n\r\n\"\"\"\r\nA \"defer\" statement invokes a function whose execution is deferred to\r\nthe moment the surrounding function returns.\r\n....\r\n\r\nSome functions, like those calling syscall.Exec or syscall.Exit, may\r\nnever return, and if so, any deferred functions pending at the time of\r\nthe call to them will not be executed.\r\n\"\"\"\r\n\r\nThen the documentation of syscall.Exec, syscall.Exit and any callers\r\nin the standard libraries can be updated to say that if they don't\r\nreturn, the pending deferred calls will not run.\r\n\r\n/L\r\n\r\nOn Tue, Oct 23, 2012 at 6:04 AM, Robert Griesemer <gri@golang.org> wrote:\r\n> I will look into this tomorrow.\r\n> - gri\r\n>\r\n>\r\n> On Mon, Oct 22, 2012 at 8:53 PM, Kurtis Nusbaum <klnusbaum@gmail.com> wrote:\r\n>>\r\n>> Any response on the spec tweak?\r\n>>\r\n>>\r\n>> On Tue, Oct 9, 2012 at 6:40 PM, Rob Pike <r@golang.org> wrote:\r\n>>>\r\n>>> Still waiting for a response from others about my request to tweak the\r\n>>> spec.\r\n>>>\r\n>>> -rob\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>> Peace, Love, and Source Code\r\n>> -Kurtis\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-23 11:05:10.122130",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "See: http://codereview.appspot.com/6736071\r\n\r\n- gri\r\n\r\n\r\nOn Mon, Oct 22, 2012 at 9:04 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> I will look into this tomorrow.\r\n> - gri\r\n>\r\n>\r\n> On Mon, Oct 22, 2012 at 8:53 PM, Kurtis Nusbaum <klnusbaum@gmail.com>wrote:\r\n>\r\n>> Any response on the spec tweak?\r\n>>\r\n>>\r\n>> On Tue, Oct 9, 2012 at 6:40 PM, Rob Pike <r@golang.org> wrote:\r\n>>\r\n>>> Still waiting for a response from others about my request to tweak the\r\n>>> spec.\r\n>>>\r\n>>> -rob\r\n>>>\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>> Peace, Love, and Source Code\r\n>> -Kurtis\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-23 22:41:24.186770",
			"approval": false
		},
		{
			"sender": "klnusbaum@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "So what should I do with 6610066? Should I just delete this patch?\r\n\r\n\r\nOn Tue, Oct 23, 2012 at 5:41 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> See: http://codereview.appspot.com/6736071\r\n>\r\n> - gri\r\n>\r\n>\r\n> On Mon, Oct 22, 2012 at 9:04 PM, Robert Griesemer <gri@golang.org> wrote:\r\n>\r\n>> I will look into this tomorrow.\r\n>> - gri\r\n>>\r\n>>\r\n>> On Mon, Oct 22, 2012 at 8:53 PM, Kurtis Nusbaum <klnusbaum@gmail.com>wrote:\r\n>>\r\n>>> Any response on the spec tweak?\r\n>>>\r\n>>>\r\n>>> On Tue, Oct 9, 2012 at 6:40 PM, Rob Pike <r@golang.org> wrote:\r\n>>>\r\n>>>> Still waiting for a response from others about my request to tweak the\r\n>>>> spec.\r\n>>>>\r\n>>>> -rob\r\n>>>>\r\n>>>\r\n>>>\r\n>>>\r\n>>> --\r\n>>> Peace, Love, and Source Code\r\n>>> -Kurtis\r\n>>>\r\n>>>\r\n>>\r\n>\r\n\r\n\r\n-- \r\nPeace, Love, and Source Code\r\n-Kurtis\r\n",
			"disapproval": false,
			"date": "2012-11-01 20:55:19.982980",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"KLNusbaum@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"0xjnml@gmail.com",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6610066/diff/17001/src/pkg/os/proc.go\nFile src/pkg/os/proc.go (right):\n\nhttp://codereview.appspot.com/6610066/diff/17001/src/pkg/os/proc.go#newcode37\nsrc/pkg/os/proc.go:37: // function is reached.\nnow the spec has the necessary covering prose, we can write this. but let's make it shorter and to the point.\n\n// Exit causes the program to exit with the given status code.\n// By convention, code zero indicates success, non-zero an error.\n// The program terminates immediately; deferred functions are\n// not run.",
			"disapproval": false,
			"date": "2012-11-02 00:38:17.860850",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"KLNusbaum@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"0xjnml@gmail.com",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/02 00:38:17, r wrote:\n> http://codereview.appspot.com/6610066/diff/17001/src/pkg/os/proc.go\n> File src/pkg/os/proc.go (right):\n> \n> http://codereview.appspot.com/6610066/diff/17001/src/pkg/os/proc.go#newcode37\n> src/pkg/os/proc.go:37: // function is reached.\n> now the spec has the necessary covering prose, we can write this. but let's make\n> it shorter and to the point.\n> \n> // Exit causes the program to exit with the given status code.\n> // By convention, code zero indicates success, non-zero an error.\n> // The program terminates immediately; deferred functions are\n> // not run.\n\nShould somebody be reminded of this?  I'm lucky to have only a few issues to look into, this one goes back a long way!\n\nLucio.",
			"disapproval": false,
			"date": "2013-06-02 05:28:03.371000",
			"approval": false
		}
	],
	"owner_email": "KLNusbaum@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kln",
	"subject": "code review 6610066: os: Added documentation to the Exit function",
	"created": "2012-10-07 21:30:58.779430",
	"patchsets": [
		1,
		2001,
		4001,
		14001,
		17001
	],
	"modified": "2013-06-02 05:28:04.336860",
	"closed": false,
	"issue": 6610066
}