{
	"description": "cmd/8l, cmd/6l: avoid zeroing zeroed fields\n\nmal() returns zeroed memory, so zeroing these fields is redundant.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-12 09:53:57.721520",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why? Maybe they're there for clarity.\r\n\r\nI often set things to zero unnecessarily even in Go code just as a reminder\r\nto myself or the reader about the field, or what it's going to be.\r\n\r\nOn Sat, Jan 12, 2013 at 1:53 AM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> cmd/8l, cmd/6l: avoid zeroing zeroed fields\r\n>\r\n> mal() returns zeroed memory, so zeroing these fields is redundant.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7096049/<https://codereview.appspot.com/7096049/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/6l/obj.c\r\n>   M src/cmd/8l/obj.c\r\n>\r\n>\r\n> Index: src/cmd/6l/obj.c\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/6l/obj.c\r\n> +++ b/src/cmd/6l/obj.c\r\n> @@ -485,8 +485,6 @@\r\n>         p->line = Bget4(f);\r\n>         p->back = 2;\r\n>         p->mode = mode;\r\n> -       p->ft = 0;\r\n> -       p->tt = 0;\r\n>         zaddr(pn, f, &p->from, h);\r\n>         fromgotype = adrgotype;\r\n>         zaddr(pn, f, &p->to, h);\r\n> Index: src/cmd/8l/obj.c\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/8l/obj.c\r\n> +++ b/src/cmd/8l/obj.c\r\n> @@ -504,8 +504,6 @@\r\n>         p->as = o;\r\n>         p->line = Bget4(f);\r\n>         p->back = 2;\r\n> -       p->ft = 0;\r\n> -       p->tt = 0;\r\n>         zaddr(pn, f, &p->from, h);\r\n>         fromgotype = adrgotype;\r\n>         zaddr(pn, f, &p->to, h);\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-12 16:57:37.375050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Why? Maybe they're there for clarity.\n\nMaybe, or they could be an oversight. That loop is called one for every Prog loaded during the linking cycle, approx 1.5million linking godoc, so those two stores have a cost, although it is hard to measure.",
			"disapproval": false,
			"date": "2013-01-16 00:32:11.102440",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 16, 2013 at 8:32 AM, <dave@cheney.net> wrote:\r\n\r\n>  Why? Maybe they're there for clarity.\r\n>>\r\n>\r\n> Maybe, or they could be an oversight. That loop is called one for every\r\n> Prog loaded during the linking cycle, approx 1.5million linking godoc,\r\n> so those two stores have a cost, although it is hard to measure.\r\n>\r\nany benchmark results?\r\n",
			"disapproval": false,
			"date": "2013-01-16 10:47:15.177160",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I did not gather them. This CL is a trivial change. \r\n\r\nOn 16/01/2013, at 21:46, minux <minux.ma@gmail.com> wrote:\r\n\r\n> \r\n> On Wed, Jan 16, 2013 at 8:32 AM, <dave@cheney.net> wrote:\r\n>>> Why? Maybe they're there for clarity.\r\n>> \r\n>> Maybe, or they could be an oversight. That loop is called one for every\r\n>> Prog loaded during the linking cycle, approx 1.5million linking godoc,\r\n>> so those two stores have a cost, although it is hard to measure.\r\n> any benchmark results?\r\n",
			"disapproval": false,
			"date": "2013-01-16 10:53:06.694720",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "let's leave for rsc to decide.",
			"disapproval": false,
			"date": "2013-01-16 11:02:16.179210",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhard to care",
			"disapproval": false,
			"date": "2013-01-18 21:06:38.377870",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c4ee14785641 ***\n\ncmd/8l, cmd/6l: avoid zeroing zeroed fields\n\nmal() returns zeroed memory, so zeroing these fields is redundant.\n\nR=golang-dev, bradfitz, minux.ma, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7096049",
			"disapproval": false,
			"date": "2013-01-19 09:23:47.345650",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 7096049: cmd/8l, cmd/6l: avoid zeroing zeroed fields",
	"created": "2013-01-12 09:53:04.937040",
	"patchsets": [
		1,
		2001,
		5001,
		14001,
		10002
	],
	"modified": "2013-01-22 23:59:50.232830",
	"closed": true,
	"issue": 7096049
}