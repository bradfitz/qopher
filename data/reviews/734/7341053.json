{
	"description": "cmd/godoc: add support for display Notes parsed by pkg/go/doc\npkg/go/doc: move BUG notes from Package.Bugs to the general Package.Notes field.\nRemoving .Bugs would break existing code so it's left in for now.",
	"cc": [
		"gri@golang.org",
		"gri@google.com",
		"gary.burd@gmail.com",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"kevlar@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-20 00:06:56.233440",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This change breaks code that uses the Package Bugs field.",
			"disapproval": false,
			"date": "2013-02-20 03:41:59.807730",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/20 03:41:59, gburd wrote:\n> This change breaks code that uses the Package Bugs field.\n\nThe .Bugs field is still there specifically so that no code will fail to compile. The .Bugs field is not populated which seems like a reasonable step towards using the new functionality and retiring the old.",
			"disapproval": false,
			"date": "2013-02-20 05:19:01.055140",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7988a4263b4b ***\n\ncmd/godoc: add support for display Notes parsed by pkg/go/doc\npkg/go/doc: move BUG notes from Package.Bugs to the general Package.Notes field.\nRemoving .Bugs would break existing code so it's left in for now.\n\nR=gri, gri, gary.burd, dsymonds, rsc, kevlar\nCC=golang-dev\nhttps://codereview.appspot.com/7341053\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2013-02-26 04:34:57.054030",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The Bugs field must be populated to honor the compatibility guarantee that programs will continue to run correctly.\n\nhttps://codereview.appspot.com/7341053/diff/1001/lib/godoc/package.html\nFile lib/godoc/package.html (right):\n\nhttps://codereview.appspot.com/7341053/diff/1001/lib/godoc/package.html#newcode168\nlib/godoc/package.html:168: {{range $marker, $content := .}}\nSort the keys so that notes are displayed in a consistent order.\n\nhttps://codereview.appspot.com/7341053/diff/1001/lib/godoc/package.html#newcode169\nlib/godoc/package.html:169: <h2 id=\"pkg-{{$marker}}\">{{noteTitle $marker | html}}s</h2>\nIn browsers with case-insensitive element ids, this id can clash with other ids in the document. Consider using <h2 id=\"pkg-note-{{$marker}}\">.",
			"disapproval": false,
			"date": "2013-02-20 06:05:41.214610",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/20 22:33:04, gburd wrote:\n> > What programs require a non-empty BUG fields or otherwise\n> > they will break? Or more specifically, why is it crucial that there\n> > is no transition phase (from the old to the new way) where bugs\n> > may not be shown?.\n> \n> Any program that displays bugs using the Bugs field is broken by the first delta\n> in this change set. The program will compile and run, but not run correctly. The\n> Go 1 compatibilty guaratee does not allow for a transition phase where programs\n> are broken until updated to the new way of doing things.\n\nsure, I am now populating that field as before, so nothing should break.",
			"disapproval": false,
			"date": "2013-02-20 23:38:29.154720",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ok, done. I've populated the .Bugs field and made sure the unittest covers this case.\n\nhttps://codereview.appspot.com/7341053/diff/1001/lib/godoc/package.html\nFile lib/godoc/package.html (right):\n\nhttps://codereview.appspot.com/7341053/diff/1001/lib/godoc/package.html#newcode168\nlib/godoc/package.html:168: {{range $marker, $content := .}}\nOn 2013/02/20 06:05:41, gburd wrote:\n> Sort the keys so that notes are displayed in a consistent order.\n\nif I'm reading the template documentation correctly, then the template package already does so. Here's the wording:\n\n{range pipeline}} T1 {{end}}\n\tThe value of the pipeline must be an array, slice, or map. If\n\tthe value of the pipeline has length zero, nothing is output;\n\totherwise, dot is set to the successive elements of the array,\n\tslice, or map and T1 is executed. If the value is a map and the\n\tkeys are of basic type with a defined order (\"comparable\"), the\n\telements will be visited in sorted key order.\n\nhttps://codereview.appspot.com/7341053/diff/1001/lib/godoc/package.html#newcode169\nlib/godoc/package.html:169: <h2 id=\"pkg-{{$marker}}\">{{noteTitle $marker | html}}s</h2>\nOn 2013/02/20 06:05:41, gburd wrote:\n> In browsers with case-insensitive element ids, this id can clash with other ids\n> in the document. Consider using <h2 id=\"pkg-note-{{$marker}}\">.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-20 19:50:10.553270",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, gri@google.com, gary.burd@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-20 19:50:11.273770",
			"approval": false
		},
		{
			"sender": "gri@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 19, 2013 at 10:05 PM, <gary.burd@gmail.com> wrote:\r\n\r\n> The Bugs field must be populated to honor the compatibility guarantee\r\n> that programs will continue to run correctly.\r\n>\r\n\r\nGary, can you elaborate a bit more on this? What programs require a\r\nnon-empty BUG fields or otherwise they will break? Or more specifically,\r\nwhy is it crucial that there is no transition phase (from the old to the\r\nnew way) where bugs may not be shown? Thanks.\r\n\r\n- gri\r\n",
			"disapproval": false,
			"date": "2013-02-20 19:55:40.148240",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've made the changes you asked for above. I'm using PageInfo.Notes for the top level Notes that contains the extracted Notes, but this is easy to get wrong in the templates (e.g. $.Notes vs .Notes inside a with statement). Maybe I should use PageInfo.NotesToShow or some such? Let me know before I push the updated CL. \n\nWe agreed offline that templates sort map keys, so that's all good.\n\nCheers, Cos.\n\n\nOn 2013/02/21 21:24:03, gri1 wrote:\n> Sigh, yes, I glanced over this. We need to jave sorted data structures\n> for reproducible test cases. I'll have another look at this, later\n> today.\n> - gri\n> \n> On Thu, Feb 21, 2013 at 12:56 PM, Russ Cox <mailto:rsc@golang.org> wrote:\n> > I haven't looked closely, but I see a lot of string-keyed maps floating\n> > around. Remember that iterating over a map in a template will produce a\n> > different order each time the template runs.\n> >\n> > Russ\n> >",
			"disapproval": false,
			"date": "2013-02-24 21:40:15.077960",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is mostly good, but let's wait for Gary's response.\nThanks.\n- gri\n\nhttps://codereview.appspot.com/7341053/diff/8001/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttps://codereview.appspot.com/7341053/diff/8001/src/pkg/go/doc/doc.go#newcode20\nsrc/pkg/go/doc/doc.go:20: // DEPRECATED, this is now empty and BUGS appear in Notes below.\nBugs is deprecated, but not empty with the recent change. But let's see what Gary Burd says before moving on.",
			"disapproval": false,
			"date": "2013-02-20 20:04:26.095840",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> What programs require a non-empty BUG fields or otherwise\n> they will break? Or more specifically, why is it crucial that there\n> is no transition phase (from the old to the new way) where bugs\n> may not be shown?.\n\nAny program that displays bugs using the Bugs field is broken by the first delta in this change set. The program will compile and run, but not run correctly. The Go 1 compatibilty guaratee does not allow for a transition phase where programs are broken until updated to the new way of doing things.",
			"disapproval": false,
			"date": "2013-02-20 22:33:04.802540",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How about making the new Notes field be defined as containing all\r\nnon-BUG notes. Then the Bugs field remains as is, existing tools work\r\nfine, and you just have to consult two fields to get the full list.\r\n",
			"disapproval": false,
			"date": "2013-02-20 23:12:08.770990",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/20 23:12:08, dsymonds wrote:\n> How about making the new Notes field be defined as containing all\n> non-BUG notes. Then the Bugs field remains as is, existing tools work\n> fine, and you just have to consult two fields to get the full list.\n\nit's tedious to code for this since templates have to use both. If you use .Notes you shouldn't have to use .Bugs at all. The current change allows for that by populate .Bugs as well as putting it in .Notes.",
			"disapproval": false,
			"date": "2013-02-20 23:39:32.308840",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks good overall now; and I've verified that it works and doesn't disturb the \"old\" godoc output w/o a -notes flag.\n\nA couple of things:\n\n- I made some significant changes to godoc and you'll need to merge against them first and re-upload (my apologies)\n\n- Please simplify the notes extraction below.\n\nFor a future CL:\n\nThe extraction of notes needs more work, eventually. Sometimes we have multiple TODOs on adjacent lines and the extraction mechanism just picks the first one and glues everything else together. The right approach may be to fix the source code (note comments must be separated from other note comments w/ code or empty lines).\n\nhttps://codereview.appspot.com/7341053/diff/8001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/7341053/diff/8001/src/cmd/godoc/godoc.go#newcode1122\nsrc/cmd/godoc/godoc.go:1122: noteMap := make(map[string]bool)\nI propose to do this more directly: instead of removing notes from pdoc.Notes (and thereby writing a data structure that godoc doesn't necessarily \"own\"), why not simply iterate through the splitted string and pick the relevant notes? Something along the lines of:\n\nnotes := make(map[string][]string)\nfor _, key := range strings.Split(*notes, \",\") {\n    if n := pdoc.Notes[key]; n != nil {\n        notes[key] = n\n    }\n}\n\nand then store notes in an new field Notes of PageInfo. The string splitting also really needs to be done only once (upon startup of godoc). I'm fine with doing it each time, or having a global variable that is initialized accordingly.",
			"disapproval": false,
			"date": "2013-02-21 20:53:42.197770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I haven't looked closely, but I see a lot of string-keyed maps floating\r\naround. Remember that iterating over a map in a template will produce a\r\ndifferent order each time the template runs.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-21 20:56:10.902780",
			"approval": false
		},
		{
			"sender": "gri@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sigh, yes, I glanced over this. We need to jave sorted data structures\r\nfor reproducible test cases. I'll have another look at this, later\r\ntoday.\r\n- gri\r\n\r\nOn Thu, Feb 21, 2013 at 12:56 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I haven't looked closely, but I see a lot of string-keyed maps floating\r\n> around. Remember that iterating over a map in a template will produce a\r\n> different order each time the template runs.\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-21 21:24:03.738130",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nCan you please re-sync and re-upload? I get\n\nabort: codereview issue 7341053 is out of date: patch and recent changes conflict (083759101bc9->ebc229da2df9)\n\n- gri",
			"disapproval": false,
			"date": "2013-02-26 00:31:07.319690",
			"approval": true
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "text/template sorts its map keys:\r\n\"If the value is a map and the\r\n\r\n\r\n\tkeys are of basic type with a defined order (\"comparable\"), the\r\n\telements will be visited in sorted key order.\r\n\r\n\r\n\r\nOn Thu, Feb 21, 2013 at 12:56 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I haven't looked closely, but I see a lot of string-keyed maps floating\r\n> around. Remember that iterating over a map in a template will produce a\r\n> different order each time the template runs.\r\n>\r\n> Russ\r\n>\r\n>  --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-24 21:55:28.309580",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, gri@google.com, gary.burd@gmail.com, dsymonds@golang.org, rsc@golang.org, kevlar@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-25 20:58:37.975110",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, gri@google.com, gary.burd@gmail.com, dsymonds@golang.org, rsc@golang.org, kevlar@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-26 00:55:19.255650",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nthanks.\n\nPS: There appears to be an extra newline between the last documented entry and the Bugs section in the command line mode. E.g. compare the output of command \"godoc bytes\" before and after. That said, the text template is notoriously subtle to get right w/ respect to spacing (e.g. functions have 2 empty lines between them, not due to this CL, I don't know when that happened). Anyway, will submit now. We can fine-tune later.",
			"disapproval": false,
			"date": "2013-02-26 04:29:59.416710",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"cnicolaou@google.com",
				"minux.ma@gmail.com",
				"gri@golang.org",
				"gri@google.com",
				"gary.burd@gmail.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This seems to display any Notes found not only at top (package/file) level\nbut also within functions.\n\ntry this:\n$ GOOS=darwin GOARCH=amd64 godoc syscall None\nPACKAGE\npackage syscall\n    import \"syscall\"\nNOTE <snip>\nTODO\n    pass through to C\n\n\nThe final TODO note is very confusing.\nwe'd better attach some context info to it, or remove it from the source,\nor only show package/file level Notices and trust the author to provide\nsufficient context information.\n\nFYI: that todo is in func Clearenv() in pkg/syscall/env_unix.go.",
			"disapproval": false,
			"date": "2013-02-28 19:14:51.609410",
			"approval": false
		},
		{
			"sender": "gri@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe this is no different from Bugs. That said, we know that we need\r\nto better format the output, and do a better job with collecting the right\r\ntext for TODOs and other notes.\r\n\r\nIn general, we probably don't want to show TODOs in docs - they tend to be\r\ninternal things.\r\n\r\nAlso, one is free to choose a different tag for external TODOs if they\r\nshould be shown in the docs.\r\n\r\n- gri\r\n\r\n\r\nOn Thu, Feb 28, 2013 at 11:14 AM, <minux.ma@gmail.com> wrote:\r\n\r\n> This seems to display any Notes found not only at top (package/file)\r\n> level\r\n> but also within functions.\r\n>\r\n> try this:\r\n> $ GOOS=darwin GOARCH=amd64 godoc syscall None\r\n> PACKAGE\r\n> package syscall\r\n>     import \"syscall\"\r\n> NOTE <snip>\r\n> TODO\r\n>     pass through to C\r\n>\r\n>\r\n> The final TODO note is very confusing.\r\n> we'd better attach some context info to it, or remove it from the\r\n> source,\r\n> or only show package/file level Notices and trust the author to provide\r\n> sufficient context information.\r\n>\r\n> FYI: that todo is in func Clearenv() in pkg/syscall/env_unix.go.\r\n>\r\n> https://codereview.appspot.**com/7341053/<https://codereview.appspot.com/7341053/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-28 19:17:30.510530",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 1, 2013 at 3:17 AM, Robert Griesemer <gri@google.com> wrote:\r\n\r\n> I believe this is no different from Bugs. That said, we know that we need\r\n> to better format the output, and do a better job with collecting the right\r\n> text for TODOs and other notes.\r\n>\r\nagreed.\r\n\r\n>\r\n> In general, we probably don't want to show TODOs in docs - they tend to be\r\n> internal things.\r\n>\r\nhowever, sometimes one do use TODO to document limitations of a package.\r\ni propose we only display package level NOTEs in docs (by default), or we\r\ncan\r\narrange function level NOTEs to be displayed only as docs for that function.\r\n",
			"disapproval": false,
			"date": "2013-02-28 19:26:28.879770",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 28, 2013 at 11:26 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Fri, Mar 1, 2013 at 3:17 AM, Robert Griesemer <gri@google.com> wrote:\r\n>\r\n>> I believe this is no different from Bugs. That said, we know that we need\r\n>> to better format the output, and do a better job with collecting the right\r\n>> text for TODOs and other notes.\r\n>>\r\n> agreed.\r\n>\r\n\r\nyep, for sure, both for the original BUGs and arbitrary notes.\r\n\r\n>\r\n>\r\n>>\r\n>> In general, we probably don't want to show TODOs in docs - they tend to\r\n>> be internal things.\r\n>>\r\n> however, sometimes one do use TODO to document limitations of a package.\r\n> i propose we only display package level NOTEs in docs (by default), or we\r\n> can\r\n> arrange function level NOTEs to be displayed only as docs for that\r\n> function.\r\n>\r\n\r\nIf a given team/project wants to do this, they can simply agree to use one\r\nmarker for public comments and another for internal ones and then just use\r\ngodoc accordingly. E.g. TODO for top level ones and todo() for internal\r\nones - the second lower case one won't get detected anyway. Isn't this good\r\nenough to achieve the desired effect - it certainly meets my goals which\r\nled to this change originally.\r\n\r\nCheers, Cos.\r\n",
			"disapproval": false,
			"date": "2013-02-28 23:05:02.948300",
			"approval": false
		}
	],
	"owner_email": "cnicolaou@google.com",
	"private": false,
	"base_url": "",
	"owner": "cnicolaou",
	"subject": "code review 7341053: cmd/godoc: add support for display Notes parsed by pkg/...",
	"created": "2013-02-19 21:29:36.717060",
	"patchsets": [
		1,
		1001,
		8001,
		8002,
		11002
	],
	"modified": "2013-02-28 23:05:02.948300",
	"closed": false,
	"issue": 7341053
}