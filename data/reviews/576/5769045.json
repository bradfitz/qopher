{
	"description": "net: delete usableLocalPort from test\n\nThe old way to find a port was to listen :0 and then\nlook at what port it picked, close the listener, and then\nimmediately try to listen on that port.\n\nOn some Windows 7 machines that sequence fails at\nthe second listen, because the first one is still lingering\nin the TCP/IP stack somewhere.  (Ironically, most of these\nare used in tests of a \"second listen\", which in this case\nends up being the third listen.)\n\nInstead of this race, just return the listener from the\nfunction, replacing usableLocalPort+Listen with\nusableListenPort.\n\nFixes issue 3219.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"mikioh.mikioh@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, but l is canonical for a listener.\nIt's all over the place.\n",
			"disapproval": false,
			"date": "2012-03-07 17:05:43.677668",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-07 16:54:28.436252",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5769045/diff/2001/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5769045/diff/2001/src/pkg/net/unicast_test.go#newcode320\nsrc/pkg/net/unicast_test.go:320: func usableListenPort(t *testing.T, net, laddr string) (l Listener, port string) {\nl1 as a variable name is fine, but l by itself is so hard to see in most fonts, including here and the diff sent inline in gmail.\n\nI tend to use \"ln\" for ListeNers, but anything that's not \"l\" would be preferable.",
			"disapproval": false,
			"date": "2012-03-07 17:01:35.994085",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2d15f2e377b5 ***\n\nnet: delete usableLocalPort from test\n\nThe old way to find a port was to listen :0 and then\nlook at what port it picked, close the listener, and then\nimmediately try to listen on that port.\n\nOn some Windows 7 machines that sequence fails at\nthe second listen, because the first one is still lingering\nin the TCP/IP stack somewhere.  (Ironically, most of these\nare used in tests of a \"second listen\", which in this case\nends up being the third listen.)\n\nInstead of this race, just return the listener from the\nfunction, replacing usableLocalPort+Listen with\nusableListenPort.\n\nFixes issue 3219.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5769045",
			"disapproval": false,
			"date": "2012-03-07 17:06:24.475684",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for the fix.\n\nI'm a little confused that the behavior described in the issue\nlooks is a bit different from their tech notes, comments in\nsockopt_windows.go.\n\n<http://msdn.microsoft.com/en-us/library/windows/desktop/ms740621(v=vs.85).aspx>\n\nfunc setDefaultListenerSockopts(s syscall.Handle) error {\n        // Windows will reuse recently-used addresses by default.\n        // SO_REUSEADDR should not be used here, as it allows\n        // a socket to forcibly bind to a port in use by another socket.\n        // This could lead to a non-deterministic behavior, where\n        // connection requests over the port cannot be guaranteed\n        // to be handled by the correct socket.\n        return nil\n}\n\nBut it's okay, probably.\n\n> On some Windows 7 machines that sequence fails at\n> the second listen, because the first one is still lingering\n> in the TCP/IP stack somewhere. \u00a0(Ironically, most of these\n> are used in tests of a \"second listen\", which in this case\n> ends up being the third listen.)\n\nFWIW, it seems like darwin allows the third wildcard listen on a\nsame port with some conditions. Perhaps it's for chatter multicast\napps but not sure. So I gave up to write darwin specific test case\nand forgot to remove codes that provides the third listen.\n\nE.g.,\nnet.Listen(\"tcp4\", \"0.0.0.0\"+lport) // succeed\nnet.Listen(\"tcp\", lport) // also succeed\nnet.Listen(\"tcp4\", \"0.0.0.0\"+lport) // and one more\n",
			"disapproval": false,
			"date": "2012-03-08 02:40:20.578789",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5769045: net: delete usableLocalPort from test",
	"created": "2012-03-07 16:54:11.466896",
	"patchsets": [
		1,
		2001,
		1003
	],
	"modified": "2012-03-08 02:40:20.837634",
	"closed": true,
	"issue": 5769045
}