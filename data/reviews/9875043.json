{
	"description": "runtime: add stackguard0 to G\nThis is part of preemptive scheduler.\nstackguard0 is checked in split stack checks and can be set to StackPreempt.\nstackguard is not set to StackPreempt (holds the original value).",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-30 11:11:36.411960",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nWait for someone knowledgeable in cgo. It looks fine to me, but I don't know enough to say so with confidence.",
			"disapproval": false,
			"date": "2013-05-30 13:00:10.912070",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about the assignments to stackguard in sys_windows_386.s and sys_windows_amd64.s?\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/proc.c#newcode471\nsrc/pkg/runtime/proc.c:471: m->g0->stackguard = m->g0->stackguard0;  // cgo sets only stackguard0, copy it to stackguard\nI think this comment can be improved, and moved to the line above.  Perhaps with a blank line preceding it.\n\n// We may have been called via _cgo_thread_start, which\n// will set only stackguard0.  Copy stackguard0 to stackguard.\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/runtime.h#newcode229\nsrc/pkg/runtime/runtime.h:229: // stackguard0 can be set to StackPreempt as opposed to stackguard\nRemove this comment line.  We could have a much longer comment, but this comment by itself doesn't clarify anything.\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/runtime.h#newcode230\nsrc/pkg/runtime/runtime.h:230: uintptr\tstackguard0;\t// cannot move - also known to linker, libmach, runtime/cgo\nI'm not sure stackguard0 is the best name but I can't think of a better suggestion.\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/runtime.h#newcode239\nsrc/pkg/runtime/runtime.h:239: uintptr\tstackguard;\t// same as stackguard0, but not set to StackPreempt\nMake this comment be something like\n// real stack limit; like stackguard0 but stackguard0 is changed to preempt thread",
			"disapproval": false,
			"date": "2013-05-31 15:05:32.170000",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/proc.c#newcode471\nsrc/pkg/runtime/proc.c:471: m->g0->stackguard = m->g0->stackguard0;  // cgo sets only stackguard0, copy it to stackguard\nOn 2013/05/31 15:05:32, iant wrote:\n> I think this comment can be improved, and moved to the line above.  Perhaps with\n> a blank line preceding it.\n> \n> // We may have been called via _cgo_thread_start, which\n> // will set only stackguard0.  Copy stackguard0 to stackguard.\n\nDone.\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/runtime.h#newcode229\nsrc/pkg/runtime/runtime.h:229: // stackguard0 can be set to StackPreempt as opposed to stackguard\nOn 2013/05/31 15:05:32, iant wrote:\n> Remove this comment line.  We could have a much longer comment, but this comment\n> by itself doesn't clarify anything.\n\nDone.\n\nhttps://codereview.appspot.com/9875043/diff/8001/src/pkg/runtime/runtime.h#newcode239\nsrc/pkg/runtime/runtime.h:239: uintptr\tstackguard;\t// same as stackguard0, but not set to StackPreempt\nOn 2013/05/31 15:05:32, iant wrote:\n> Make this comment be something like\n> // real stack limit; like stackguard0 but stackguard0 is changed to preempt\n> thread\n\nDone.",
			"disapproval": false,
			"date": "2013-06-01 21:25:05.766960",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/31 15:05:32, iant wrote:\n> What about the assignments to stackguard in sys_windows_386.s and\n> sys_windows_amd64.s?\n\n\nUpdated these files.\nPTAL",
			"disapproval": false,
			"date": "2013-06-01 21:30:03.392930",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-03 04:27:50.815550",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ccd8c0dad0a7 ***\n\nruntime: add stackguard0 to G\nThis is part of preemptive scheduler.\nstackguard0 is checked in split stack checks and can be set to StackPreempt.\nstackguard is not set to StackPreempt (holds the original value).\n\nR=golang-dev, daniel.morsing, iant\nCC=golang-dev\nhttps://codereview.appspot.com/9875043",
			"disapproval": false,
			"date": "2013-06-03 08:28:36.497070",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9875043: runtime: add stackguard0 to G",
	"created": "2013-05-30 10:58:41.185570",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		16002,
		24001
	],
	"modified": "2013-06-03 08:28:37.577420",
	"closed": true,
	"issue": 9875043
}