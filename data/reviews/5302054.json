{
	"description": "exp/ssh: introduce Session to replace Cmd for interactive commands\n\nThis CL replaces the Cmd type with a Session type representing\ninteractive channels. This lays the foundation for supporting\nother kinds of channels like direct-tcpip or x11.\n\nclient.go:\n* replace chanlist map with slice.\n* generalize stdout and stderr into a single type.\n* unexport ClientChan to clientChan.\n\ndoc.go:\n* update ServerConfig/ServerConn documentation.\n* update Client example for Session.\n\nmessage.go:\n* make channelExtendedData more like channelData.\n\nsession.go:\n* added Session which replaces Cmd.",
	"cc": [
		"agl@golang.org",
		"rsc@golang.org",
		"n13m3y3r@gmail.com",
		"gustavo@niemeyer.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello agl@golang.org, rsc@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-24 09:22:52.577571",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "agl, are you able to address Gustavos comments before committing? I\nwon't have access to my code tree til this evening.\n\nOn Tue, Oct 25, 2011 at 8:23 AM,  <n13m3y3r@gmail.com> wrote:\n> LGTM, with a couple of trivials:\n>\n>\n> http://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/doc.go\n> File src/pkg/exp/ssh/doc.go (right):\n>\n> http://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/doc.go#newcode97\n> src/pkg/exp/ssh/doc.go:97: err := session.Exec(\"/usr/bin/whoami\")\n> Might be nice to add a panic here, to avoid encouraging people to\n> reproduce the no-error-check code at home.\n>\n> http://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/session.go\n> File src/pkg/exp/ssh/session.go (right):\n>\n> http://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/session.go#newcode94\n> src/pkg/exp/ssh/session.go:94: // accepts one call Exec or Shell.\n> s/call/call to/\n>\n> http://codereview.appspot.com/5302054/\n>\n",
			"disapproval": false,
			"date": "2011-10-24 22:08:22.214753",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi Gustavo, \n\nThank you for your comments, please take another look.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/client.go#newcode296\nsrc/pkg/exp/ssh/client.go:296: // TODO(dfc) should this send be non blocking. RFC 4254 5.2 suggests\nOld comment removed.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/client.go#newcode298\nsrc/pkg/exp/ssh/client.go:298: c.getChan(msg.PeersId).dataExt <- msg.Payload\nI looked into this a bit and it looks like the type will always be 1 as nobody has registered any others with IANA.\n\nhttp://www.iana.org/assignments/ssh-parameters/ssh-parameters.xml#ssh-parameters-6\n\nI'd like to leave this assumption in the code for now.\n\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> It seems that any extended data is sent straight as being Stderr content\n> throught the Session, but in fact only extended data type 1 is considered to be\n> stderr information. Should that be taken into account?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/doc.go\nFile src/pkg/exp/ssh/doc.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/doc.go#newcode28\nsrc/pkg/exp/ssh/doc.go:28: }\nAgreed. I'll look at adding this in a future CL.\n\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> At some point it might be handy to have a method like ReadStandardKeys that\n> picks keys from standard locations (~/.ssh/id_rsa, etc).\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode16\nsrc/pkg/exp/ssh/session.go:16: // A Session is a remote execution of a program. The program may be a shell,\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> s/is/represents/ ?\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode17\nsrc/pkg/exp/ssh/session.go:17: // an application, a system command, or some built-in subsystem. It may or may\nNot a lot, I was basing this comment on the description of a session from rfc 4254.6 which is a bit of a mouthful.\n\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> What's the difference between a system command and an application?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode20\nsrc/pkg/exp/ssh/session.go:20: // Writes to Stdin are made available to the command's standard input.\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> s/command/remote command or subsystem/ ?\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode24\nsrc/pkg/exp/ssh/session.go:24: // Reads from Stdout consume the command's standard output.\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> Ditto.\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode31\nsrc/pkg/exp/ssh/session.go:31: // Reads from Stderr consume the command's standard error.\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> Ditto.\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode36\nsrc/pkg/exp/ssh/session.go:36: // from Stderr, even if by\nYou are correct, I originally through writes to stderr did not consume window size, but I was wrong. Both stdout and stderr compete for the same window size buffer.\n\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> This doesn't sound entirely right. The RFC says that \"data sent with these\n> messages consumes the same window as ordinary data\" , which I understand as\n> saying that the flow control is applied naturally for stderr data too, so the\n> SSH protocol itself will not jam.\n> \n> As I understand it, what happens is that the channel buffers will fill up and\n> the local dispatching loop will block, causing the protocol window to fill up as\n> well and eventually block the other side from sending, which is exactly what\n> would happen if Stdout wasn't read as well.\n> \n> What's causing the discrepancy between the two cases?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode50\nsrc/pkg/exp/ssh/session.go:50: marshalString(payload[namLen:], []byte(value))\nI'd like to cover this in a later CL as it will add significantly to this size of this CL.\n\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> There are four allocations here and several similar in other places that might\n> easily go away if we rename the current marshalString/stringLength functions to\n> marshalBytes/bytesLength and create marshalString/stringLength ones that\n> actually handle strings.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode63\nsrc/pkg/exp/ssh/session.go:63: // RequestPty requests a pty to be allocated on the remote side of this channel.\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> The documentation isn't for a channel now. Suggestion:\n> \n> // RequestPty requests the association of a pty with the session on the remote\n> host.\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode95\nsrc/pkg/exp/ssh/session.go:95: // Shell starts a login shell on the remote host.\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> Might be worth noting that only the first call to (Shell || Exec || Subsystem\n> (in he future)) will work for a session.\n> \n> The error messages coming out of such problems are also not very indicative of\n> what is going on yet. E.g. erroneously calling Exec a second time yields:\n> \n> log.Fatalf(\"%#v\\n\", err)\n> (...)\n> 2011/10/22 16:36:22 \"exec\"\n> \n> Delaying the second Exec just by a second changes the error in an interesting\n> way:\n> \n> 2011/10/22 16:37:49 \"&ssh.channelRequestMsg{PeersId:0x0,\n> Request:\\\"exit-status\\\", WantReply:false, RequestSpecificData:[]byte{0x0, 0x0,\n> 0x0, 0x0}}\"\n> \n> We may even add some check at the client side to prevent such double-calls, but\n> that last result is also a bit surprising, since the error returned to the user\n> is actually a raw channel message. In a future CL we have to review the error\n> values being returned in bad scenarios.\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode105\nsrc/pkg/exp/ssh/session.go:105: func (c *ClientConn) OpenSession() (*Session, os.Error) {\nOn 2011/10/23 01:40:03, niemeyer wrote:\n> As a minor, I suggest calling this NewSession since the created session is brand\n> new rather than based on anything previously existent that is opened.\n\nDone.",
			"disapproval": false,
			"date": "2011-10-23 09:52:07.795809",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> agl, are you able to address Gustavos comments before committing? I\n> won't have access to my code tree til this evening.\n\nNo worries.. they're not blockers at all. We can easily handle them in\na follow up if Adam commits without.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-10-24 22:12:50.109809",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for the changes Dave.\n\nSome additional suggestions:\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/client.go#newcode294\nsrc/pkg/exp/ssh/client.go:294: c.getChan(msg.PeersId).dataExt <- msg.Payload\n> I looked into this a bit and it looks like the type will always be 1 as nobody\n> has registered any others with IANA.\n\nYou're right that nobody has registered other numbers with IANA, but nothing prevents people from multiplexing custom data in other channels. There's actually an official extended data type range for custom use:\n\n    0xFE000000-0xFFFFFFFF\tReserved for Private Use\n\nGiven that we know for sure and can easily tell what is and what is not stderr data, I don't see a reason to knowingly mix bad data arbitrarily into the Stderr stream. My suggestion is to just drop packets for unknown extended data types for now.\n\nIn a future change, we can introduce a callback function in the Session type and hand those packets to that function. If the function isn't present, we just continue to drop these packets. This will prevent the loop from blocking due to unknown data not being consumed.\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/client.go#newcode448\nsrc/pkg/exp/ssh/client.go:448: // it unable to receive new messages from the remote side.\nAs a note for the future, the current behavior sounds fine, since there's no way to ensure the main loop doesn't block without the side effect of potentially allocating until the system goes OOM.\n\nThe only detail is that we have to ensure the loop is breaking out nicely in case the connection is closed locally, rather than hanging the goroutine forever due to a filled up buffer that will never be consumed. A structure similar to the one I use in the tomb package, with a channel that signals an explicit stop request, would handle that.\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go#newcode35\nsrc/pkg/exp/ssh/session.go:35: Stderr io.Reader\nThe two comments above are very alike and repetitive now.  I suggest joining them in a single comment and putting the two fields next to each other. E.g.:\n\n// Reads from Stdout and Stderr consume from the remote command's standard\n// output and error streams, respectively.\n// There is a fixed amount of buffering that is shared for the two streams.\n// Failing to read from either may eventually cause the command to block.\n// Closing Stdout unblocks such writes and causes them to return errors.\nStdout io.ReadCloser\nStderr io.Reader\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go#newcode82\nsrc/pkg/exp/ssh/session.go:82: // Once called, the Session cannot be reused.\nI'd be more explicit here:\n\n// A Session only accepts one Exec or Shell call.\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go#newcode102\nsrc/pkg/exp/ssh/session.go:102: func (s *Session) Shell() os.Error {\nDitto.",
			"disapproval": false,
			"date": "2011-10-23 14:45:03.364528",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello agl@golang.org, rsc@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-22 17:20:51.782605",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for your continued comments Gustavo.\n\nwrt the use of a channel for handoff in the mainloop, I acknowledge there are problems but until I get all the basic functionality in place and approaching a stable API I am going to try to persist with using them, rather than trying to implement my own concurrent structure. \n\nI'm sure that the channel approach will need to be replaced in the future, but for the moment, it works, and can be made to log when a send is blocking the mainloop. \n\nAt the moment I'm thinking that the replacement structure will look like an io.ReadWriteCloser, with a contract that neither call will block. Writes larger than the available buffer space will return the amount written, which will allow the writer to detect the buffer is full. RFC 4254 5.2 says the additional data can be ignored (clearly a bad idea, better to drop the connection), but it indicates that if the window size accounting is working properly, this situation should not arise. \n\nOn the reader's side, calls to Read would return the amount of data available in the buffer, and have the opportunity to return a useful os.Error. The current close(chan) behavior could be emulated with a closed boolean inside the structure.\n\nI'm fairly confident that when required, this structure could replace the channels without major surgery.\n\nI'd be happy to bounce ideas for the design of this buffer off you if you have the cycles.\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/client.go#newcode294\nsrc/pkg/exp/ssh/client.go:294: c.getChan(msg.PeersId).dataExt <- msg.Payload\nA convincing argument, I agree that if the type != 1, then they aren't destined to stderr so it is a mistake to do so. \n\nOn 2011/10/23 14:45:03, niemeyer wrote:\n> > I looked into this a bit and it looks like the type will always be 1 as nobody\n> > has registered any others with IANA.\n> \n> You're right that nobody has registered other numbers with IANA, but nothing\n> prevents people from multiplexing custom data in other channels. There's\n> actually an official extended data type range for custom use:\n> \n>     0xFE000000-0xFFFFFFFF\tReserved for Private Use\n> \n> Given that we know for sure and can easily tell what is and what is not stderr\n> data, I don't see a reason to knowingly mix bad data arbitrarily into the Stderr\n> stream. My suggestion is to just drop packets for unknown extended data types\n> for now.\n> \n> In a future change, we can introduce a callback function in the Session type and\n> hand those packets to that function. If the function isn't present, we just\n> continue to drop these packets. This will prevent the loop from blocking due to\n> unknown data not being consumed.\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/client.go#newcode448\nsrc/pkg/exp/ssh/client.go:448: // it unable to receive new messages from the remote side.\nI know I'm clinging to the idea of using a channel as the handoff between mainloop and the consumer. I have considered a ringbuffer type structure which matches the window size passed to the remote, but the issues surrounding concurrent access, and signaling close to the consumer make it non trivial for me to drop in. Others may be more adept at this, but for me until I can get a better idea if blocking inside the mainloop is a serious problem I'm happy that the channel approach works. \n\nOn 2011/10/23 14:45:03, niemeyer wrote:\n> As a note for the future, the current behavior sounds fine, since there's no way\n> to ensure the main loop doesn't block without the side effect of potentially\n> allocating until the system goes OOM.\n> \n> The only detail is that we have to ensure the loop is breaking out nicely in\n> case the connection is closed locally, rather than hanging the goroutine forever\n> due to a filled up buffer that will never be consumed. A structure similar to\n> the one I use in the tomb package, with a channel that signals an explicit stop\n> request, would handle that.\n\nYour tomb package is excellent, but I'm not sure which loop you are referring too. If you're talking about the mainloop side, then probably switching to using a select, with a timeout channel will be needed. The solution I think lies with a ringbuffer again, possibly modeled after an io.ReadWriter. Again, I don't feel I have enough experience with the failure modes yet, so I'm going to stick with the simple chan approach for the moment.\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go#newcode35\nsrc/pkg/exp/ssh/session.go:35: Stderr io.Reader\nI didn't know I could do a comment line that.\n\nOn 2011/10/23 14:45:03, niemeyer wrote:\n> The two comments above are very alike and repetitive now.  I suggest joining\n> them in a single comment and putting the two fields next to each other. E.g.:\n> \n> // Reads from Stdout and Stderr consume from the remote command's standard\n> // output and error streams, respectively.\n> // There is a fixed amount of buffering that is shared for the two streams.\n> // Failing to read from either may eventually cause the command to block.\n> // Closing Stdout unblocks such writes and causes them to return errors.\n> Stdout io.ReadCloser\n> Stderr io.Reader\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go#newcode82\nsrc/pkg/exp/ssh/session.go:82: // Once called, the Session cannot be reused.\nOn 2011/10/23 14:45:03, niemeyer wrote:\n> I'd be more explicit here:\n> \n> // A Session only accepts one Exec or Shell call.\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/5011/src/pkg/exp/ssh/session.go#newcode102\nsrc/pkg/exp/ssh/session.go:102: func (s *Session) Shell() os.Error {\nOn 2011/10/23 14:45:03, niemeyer wrote:\n> Ditto.\n\nDone.",
			"disapproval": false,
			"date": "2011-10-24 09:32:37.740350",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Nice refactoring pushing the API forward, thanks Dave.\n\nHere are a few ideas.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/client.go#newcode298\nsrc/pkg/exp/ssh/client.go:298: c.getChan(msg.PeersId).dataExt <- msg.Payload\nIt seems that any extended data is sent straight as being Stderr content throught the Session, but in fact only extended data type 1 is considered to be stderr information. Should that be taken into account?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/doc.go\nFile src/pkg/exp/ssh/doc.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/doc.go#newcode28\nsrc/pkg/exp/ssh/doc.go:28: }\nAt some point it might be handy to have a method like ReadStandardKeys that picks keys from standard locations (~/.ssh/id_rsa, etc).\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode16\nsrc/pkg/exp/ssh/session.go:16: // A Session is a remote execution of a program. The program may be a shell,\ns/is/represents/ ?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode17\nsrc/pkg/exp/ssh/session.go:17: // an application, a system command, or some built-in subsystem. It may or may\nWhat's the difference between a system command and an application?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode20\nsrc/pkg/exp/ssh/session.go:20: // Writes to Stdin are made available to the command's standard input.\ns/command/remote command or subsystem/ ?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode24\nsrc/pkg/exp/ssh/session.go:24: // Reads from Stdout consume the command's standard output.\nDitto.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode31\nsrc/pkg/exp/ssh/session.go:31: // Reads from Stderr consume the command's standard error.\nDitto.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode36\nsrc/pkg/exp/ssh/session.go:36: // from Stderr, even if by\nThis doesn't sound entirely right. The RFC says that \"data sent with these messages consumes the same window as ordinary data\" , which I understand as saying that the flow control is applied naturally for stderr data too, so the SSH protocol itself will not jam.\n\nAs I understand it, what happens is that the channel buffers will fill up and the local dispatching loop will block, causing the protocol window to fill up as well and eventually block the other side from sending, which is exactly what would happen if Stdout wasn't read as well.\n\nWhat's causing the discrepancy between the two cases?\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode50\nsrc/pkg/exp/ssh/session.go:50: marshalString(payload[namLen:], []byte(value))\nThere are four allocations here and several similar in other places that might easily go away if we rename the current marshalString/stringLength functions to marshalBytes/bytesLength and create marshalString/stringLength ones that actually handle strings.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode63\nsrc/pkg/exp/ssh/session.go:63: // RequestPty requests a pty to be allocated on the remote side of this channel.\nThe documentation isn't for a channel now. Suggestion:\n\n// RequestPty requests the association of a pty with the session on the remote host.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode95\nsrc/pkg/exp/ssh/session.go:95: // Shell starts a login shell on the remote host.\nMight be worth noting that only the first call to (Shell || Exec || Subsystem (in he future)) will work for a session.\n\nThe error messages coming out of such problems are also not very indicative of what is going on yet. E.g. erroneously calling Exec a second time yields:\n\nlog.Fatalf(\"%#v\\n\", err)\n(...)\n2011/10/22 16:36:22 \"exec\"\n\nDelaying the second Exec just by a second changes the error in an interesting way:\n\n2011/10/22 16:37:49 \"&ssh.channelRequestMsg{PeersId:0x0, Request:\\\"exit-status\\\", WantReply:false, RequestSpecificData:[]byte{0x0, 0x0, 0x0, 0x0}}\"\n\nWe may even add some check at the client side to prevent such double-calls, but that last result is also a bit surprising, since the error returned to the user is actually a raw channel message. In a future CL we have to review the error values being returned in bad scenarios.\n\nhttp://codereview.appspot.com/5302054/diff/3001/src/pkg/exp/ssh/session.go#newcode105\nsrc/pkg/exp/ssh/session.go:105: func (c *ClientConn) OpenSession() (*Session, os.Error) {\nAs a minor, I suggest calling this NewSession since the created session is brand new rather than based on anything previously existent that is opened.",
			"disapproval": false,
			"date": "2011-10-23 01:40:03.606889",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello agl@golang.org, rsc@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-23 09:51:34.968919",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM, with a couple of trivials:\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/doc.go\nFile src/pkg/exp/ssh/doc.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/doc.go#newcode97\nsrc/pkg/exp/ssh/doc.go:97: err := session.Exec(\"/usr/bin/whoami\")\nMight be nice to add a panic here, to avoid encouraging people to reproduce the no-error-check code at home.\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/session.go#newcode94\nsrc/pkg/exp/ssh/session.go:94: // accepts one call Exec or Shell.\ns/call/call to/",
			"disapproval": false,
			"date": "2011-10-24 21:23:24.346567",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5ed98c1b1670 ***\n\nexp/ssh: introduce Session to replace Cmd for interactive commands\n\nThis CL replaces the Cmd type with a Session type representing\ninteractive channels. This lays the foundation for supporting\nother kinds of channels like direct-tcpip or x11.\n\nclient.go:\n* replace chanlist map with slice.\n* generalize stdout and stderr into a single type.\n* unexport ClientChan to clientChan.\n\ndoc.go:\n* update ServerConfig/ServerConn documentation.\n* update Client example for Session.\n\nmessage.go:\n* make channelExtendedData more like channelData.\n\nsession.go:\n* added Session which replaces Cmd.\n\nR=agl, rsc, n13m3y3r, gustavo\nCC=golang-dev\nhttp://codereview.appspot.com/5302054\n\nCommitter: Adam Langley <agl@golang.org>\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/doc.go\nFile src/pkg/exp/ssh/doc.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/doc.go#newcode97\nsrc/pkg/exp/ssh/doc.go:97: err := session.Exec(\"/usr/bin/whoami\")\nOn 2011/10/24 21:23:25, niemeyer wrote:\n> Might be nice to add a panic here, to avoid encouraging people to reproduce the\n> no-error-check code at home.\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/9003/src/pkg/exp/ssh/session.go#newcode94\nsrc/pkg/exp/ssh/session.go:94: // accepts one call Exec or Shell.\nOn 2011/10/24 21:23:25, niemeyer wrote:\n> s/call/call to/\n\nDone.",
			"disapproval": false,
			"date": "2011-10-24 23:14:16.487251",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Oct 24, 2011 at 4:46 PM,  <dave@cheney.net> wrote:\n> re: the chanlist, it is indexed by the id we choose for our side, so the\n> value of the PeersId field in any channel message received is the value\n> we established in the open message. The peer is free to choose their own\n> remote id, but we don't use that for an index into the the chanlist\n> slice.\n\nI'm sorry, I've had SPDY on the brain (another protocol with channels\ninside a connection) and had the wrong mental model. Although it's\nstill true that the peer can crash us with a bad PeersId, no? In any\ncase, that wasn't introduced in this CL so it doesn't have to be fixed\nin this CL.\n\nWill land in a sec.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2011-10-24 21:21:04.402594",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "(going to let things continue for a bit in case there are comments from others.)\n\nThe use of a slice for a chanlist will be a problem when accepting channels from a peer. They can just choose chanid 2**32-1 and crash you.\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/client.go#newcode421\nsrc/pkg/exp/ssh/client.go:421: id           uint32   // this channels id\nchannel's\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/session.go#newcode8\nsrc/pkg/exp/ssh/session.go:8: // RFC 4254 6.\n\"RFC 4254, section 6\"\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/session.go#newcode19\nsrc/pkg/exp/ssh/session.go:19: // Closing Stdin causes the command to observe an EOF on it's standard input.\ns/it's/its",
			"disapproval": false,
			"date": "2011-10-24 14:58:26.531471",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi agl,\n\nThanks for your corrections. \n\nre: the chanlist, it is indexed by the id we choose for our side, so the value of the PeersId field in any channel message received is the value we established in the open message. The peer is free to choose their own remote id, but we don't use that for an index into the the chanlist slice.\n\nI don't believe this is an issue unless the remote sends garbage data in the PeersId field. \n\nSimilarly, if you wanted to use chanlist on the server side, you would establish your own local id with a call to chanlist.newChan(), then set the peersId field of the returned clientChan to the value passed by the remote (client) end during channel open.\n\nI've added a comment about this to the chanlist struct.\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/client.go#newcode421\nsrc/pkg/exp/ssh/client.go:421: id           uint32   // this channels id\nOn 2011/10/24 14:58:26, agl1 wrote:\n> channel's\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/session.go#newcode8\nsrc/pkg/exp/ssh/session.go:8: // RFC 4254 6.\nOn 2011/10/24 14:58:26, agl1 wrote:\n> \"RFC 4254, section 6\"\n\nDone.\n\nhttp://codereview.appspot.com/5302054/diff/5013/src/pkg/exp/ssh/session.go#newcode19\nsrc/pkg/exp/ssh/session.go:19: // Closing Stdin causes the command to observe an EOF on it's standard input.\nOn 2011/10/24 14:58:26, agl1 wrote:\n> s/it's/its\n\nDone.",
			"disapproval": false,
			"date": "2011-10-24 20:46:47.110991",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5302054: exp/ssh: introduce Session to replace Cmd for interacti...",
	"created": "2011-10-22 07:42:04.628375",
	"patchsets": [
		1,
		1001,
		3001,
		6001,
		8002,
		6002,
		5011,
		5013,
		9002,
		14004,
		9003
	],
	"modified": "2011-10-25 08:30:42.621240",
	"closed": true,
	"issue": 5302054
}