{
	"description": "runtime: accept GOTRACEBACK=crash to mean 'crash after panic'\n\nThis provides a way to generate core dumps when people need them.\nThe settings are:\n\n        GOTRACEBACK=0  no traceback on panic, just exit\n        GOTRACEBACK=1  default - traceback on panic, then exit\n        GOTRACEBACK=2  traceback including runtime frames on panic, then exit\n        GOTRACEBACK=crash traceback including runtime frames on panic, then crash\n\nFixes issue 3257.",
	"cc": [
		"golang-dev@googlegroups.com",
		"devon.odell@gmail.com",
		"r@golang.org",
		"daniel.morsing@gmail.com",
		"ality@pbrane.org"
	],
	"reviewers": [
		"fullung@gmail.com",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"devon.odell@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "GOTRACEBACK (clumsy jargony name, but established and i don't have a better one) should be documented in \n\ngodoc runtime\n\nperhaps the package doc in extern.go should call out\n\nGOROOT\nGOARCH\nGOOS\nGOMAXPROCS\nGOTRACEBACK\n\nhave i missed one?\n\nhttps://codereview.appspot.com/7666044/diff/8001/src/pkg/runtime/os_windows.c\nFile src/pkg/runtime/os_windows.c (right):\n\nhttps://codereview.appspot.com/7666044/diff/8001/src/pkg/runtime/os_windows.c#newcode463\nsrc/pkg/runtime/os_windows.c:463: // to make the Windows program abort/crash like it\ns/like/as/\n\nhttps://codereview.appspot.com/7666044/diff/8001/src/pkg/runtime/signal_unix.c\nFile src/pkg/runtime/signal_unix.c (right):\n\nhttps://codereview.appspot.com/7666044/diff/8001/src/pkg/runtime/signal_unix.c#newcode83\nsrc/pkg/runtime/signal_unix.c:83: if(sizeof(void*) == 8)\nthis is a test about pointer size, which isn't mentioned in the comment.\ns/address space/& on 64-bit architectures/",
			"disapproval": false,
			"date": "2013-03-14 19:59:44.009620",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"devon.odell@gmail.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7666044/diff/20002/src/pkg/runtime/sys_darwin_386.s\nFile src/pkg/runtime/sys_darwin_386.s (right):\n\nhttps://codereview.appspot.com/7666044/diff/20002/src/pkg/runtime/sys_darwin_386.s#newcode54\nsrc/pkg/runtime/sys_darwin_386.s:54: MOVL\t$37, AX // kill\nthis is 100% equivalent to the original code.\ni wonder why the original code use __pthread_kill instead of\nplain kill?",
			"disapproval": false,
			"date": "2013-03-16 23:21:08.893390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-03-14 19:37:50.583300",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-03-14 19:57:26.178090",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"devon.odell@gmail.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7666044/diff/8001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/7666044/diff/8001/src/pkg/runtime/runtime.c#newcode39\nsrc/pkg/runtime/runtime.c:39: return 2;\t// extra information\nCan the printing of the stack trace trample all over the state? Anyone who enables this should know to open up gdb to get the printed info.",
			"disapproval": false,
			"date": "2013-03-14 20:09:03.876120",
			"approval": true
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "r@golang.org once said:\r\n> GOROOT\r\n> GOARCH\r\n> GOOS\r\n> GOMAXPROCS\r\n> GOTRACEBACK\r\n> \r\n> have i missed one?\r\n\r\nGOGC\r\nGOGCTRACE\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-14 21:55:35.908490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nEnvironment Variables\r\n\r\nThe following environment variables ($name or %name%, depending on the host\r\noperating system) control the run-time behavior of Go programs. The meanings\r\nand use may change from release to release.\r\n\r\nThe GOGC variable sets the initial garbage collection target percentage.\r\nA collection is triggered when the ratio of freshly allocated data to live\r\ndata\r\nremaining after the previous collection reaches this percentage. The default\r\nis GOGC=100. Setting GOGC=off disables the garbage collector entirely.\r\nThe runtime/debug package's SetGCPercent function allows changing this\r\npercentage at run time. See\r\nhttp://golang.org/pkg/runtime/debug/#SetGCPercent.\r\n\r\nThe GOGCTRACE variable controls debug output from the garbage collector.\r\nSetting GOGCTRACE=1 causes the garbage collector to emit a single line\r\nstandard\r\nerror at each collection, summarizing the amount of memory collected and the\r\nlength of the pause. Setting GOGCTRACE=2 emits the same summary but also\r\nrepeats each collection.\r\n\r\nThe GOMAXPROCS variable limits the number of operating system threads that\r\ncan run Go code concurrently. There is no limit to the number of threads\r\nthat\r\ncan be blocked in system calls on behalf of Go code; those do not count\r\nagainst\r\nthe GOMAXPROCS limit. This package's GOMAXPROCS function queries and changes\r\nthe limit.\r\n\r\nThe GOTRACEBACK variable controls the amount of output generated when a Go\r\nprogram fails due to an unrecovered panic or an unexpected runtime\r\ncondition.\r\nBy default, a failure prints a stack trace for every extant goroutine,\r\neliding functions\r\ninternal to the run-time system, and then exits with exit code 2.\r\nIf GOTRACEBACK=0, the per-goroutine stack traces are omitted entirely.\r\nIf GOTRACEBACK=1, the default behavior is used.\r\nIf GOTRACEBACK=2, the per-goroutine stack traces include run-time functions.\r\nIf GOTRACEBACK=crash, the per-goroutine stack traces include run-time\r\nfunctions,\r\nand if possible the program crashes in an operating-specific manner instead\r\nof\r\nexiting. For example, on Unix systems, the program raises SIGABRT to\r\ntrigger a\r\ncore dump.\r\n\r\nThe GOARCH, GOOS, GOPATH, and GOROOT environment variables complete\r\nthe set of Go environment variables. They influence the building of Go\r\nprograms\r\n(see http://golang.org/cmd/go and http://golang.org/pkg/go/build).\r\nGOARCH, GOOS, and GOROOT are recorded at compile time and made available by\r\nconstants or functions in this package, but they do not influence the\r\nexecution\r\nof the run-time system.\r\n",
			"disapproval": false,
			"date": "2013-03-15 04:29:25.214440",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"devon.odell@gmail.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthanks\n\nhttps://codereview.appspot.com/7666044/diff/14002/src/pkg/runtime/extern.go\nFile src/pkg/runtime/extern.go (right):\n\nhttps://codereview.appspot.com/7666044/diff/14002/src/pkg/runtime/extern.go#newcode25\nsrc/pkg/runtime/extern.go:25: Setting GOGCTRACE=1 causes the garbage collector to emit a single line standard\nTO standard error\n\nhttps://codereview.appspot.com/7666044/diff/14002/src/pkg/runtime/extern.go#newcode31\nsrc/pkg/runtime/extern.go:31: can run Go code concurrently. There is no limit to the number of threads that\n'concurrently' can confuse - we know that.\n\nmaybe 'execute user-level Go code simultaneously'\n\n(execute puts more emphasis on actual execution than run, perhaps?)",
			"disapproval": false,
			"date": "2013-03-15 04:44:38.034750",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done\r\n",
			"disapproval": false,
			"date": "2013-03-15 05:06:24.642580",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"devon.odell@gmail.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=abe220a94fcc ***\n\nruntime: accept GOTRACEBACK=crash to mean 'crash after panic'\n\nThis provides a way to generate core dumps when people need them.\nThe settings are:\n\n        GOTRACEBACK=0  no traceback on panic, just exit\n        GOTRACEBACK=1  default - traceback on panic, then exit\n        GOTRACEBACK=2  traceback including runtime frames on panic, then exit\n        GOTRACEBACK=crash traceback including runtime frames on panic, then crash\n\nFixes issue 3257.\n\nR=golang-dev, devon.odell, r, daniel.morsing, ality\nCC=golang-dev\nhttps://codereview.appspot.com/7666044",
			"disapproval": false,
			"date": "2013-03-15 05:11:11.722080",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"devon.odell@gmail.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Might it be a good idea for go env to print all of these?\n\nIt doesn't seem to include GOGC and GOMAXPROCS, amongst others.",
			"disapproval": false,
			"date": "2013-03-15 08:24:06.428530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 15, 2013 at 4:24 AM, <fullung@gmail.com> wrote:\r\n\r\n> Might it be a good idea for go env to print all of these?\r\n>\r\n> It doesn't seem to include GOGC and GOMAXPROCS, amongst others.\r\n>\r\n\r\ngo env prints build environment, not run-time environment.\r\n",
			"disapproval": false,
			"date": "2013-03-15 15:32:03.002440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"devon.odell@gmail.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7666044/diff/20002/src/pkg/runtime/sys_darwin_386.s\nFile src/pkg/runtime/sys_darwin_386.s (right):\n\nhttps://codereview.appspot.com/7666044/diff/20002/src/pkg/runtime/sys_darwin_386.s#newcode54\nsrc/pkg/runtime/sys_darwin_386.s:54: MOVL\t$37, AX // kill\nOn 2013/03/16 23:21:09, minux wrote:\n> this is 100% equivalent to the original code.\n> i wonder why the original code use __pthread_kill instead of\n> plain kill?\n\nIt is not 100% equivalent. The original code sent to the thread port m->procid, which is never set by anything, so it was a complex no-op. The new code actually delivers a signal to the current process. :-)",
			"disapproval": false,
			"date": "2013-03-19 18:43:22.472180",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7666044: runtime: accept GOTRACEBACK=crash to mean 'crash after ...",
	"created": "2013-03-14 19:00:31.155230",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		14002,
		20002
	],
	"modified": "2013-03-19 18:43:22.831420",
	"closed": true,
	"issue": 7666044
}