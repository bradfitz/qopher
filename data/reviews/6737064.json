{
	"description": "cmd/8g: correct illogical width treatments.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-22 23:03:41.788800",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think some of this is applicable to 5g. I'm happy to port this CL to 5g once it is committed.",
			"disapproval": false,
			"date": "2012-10-25 19:30:52.970320",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the rsrc part is necessary. If both sides are memory you want to make sure you don't read from the int32 field with a MOVB (especially on a big-endian machine).",
			"disapproval": false,
			"date": "2012-10-25 21:41:42.694440",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The case of two memory operands already goto hard.\n\nWhy are we doing something different in 6g and 8g? If 6g is wrong, the change can be done the other way, unless there is a fundamental difference I am missing?",
			"disapproval": false,
			"date": "2012-10-25 21:49:56.112720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The case I am worried about is if the src is a uint32 in memory and\r\nthe dst is a uint8 register. If you do a MOVB directly from memory\r\ninto the uint8 register, you happen to get the right bits, but now\r\nthere is a byte access to a word-sized memory field, and that is\r\nalmost certainly going to confuse the optimizer. The goal of the rsrc\r\nis to end up doing the right kind of memory move.\r\n\r\n6g mishandles this case. However, since 6g has real registers it is\r\nentirely possible that this does not come up, that the source argument\r\nto gmove is always in a register already. 8g, which uses memory more\r\noften, may not guarantee this.\r\n\r\nIt might be interesting to put in a check to see if this case ever\r\nhappens in either compiler. If we need to fix up the code to be in\r\nsync I would prefer to fix 6g to have an rsrc case.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-10-25 22:03:34.552970",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6737064: cmd/8g: correct illogical width treatments.",
	"created": "2012-10-22 23:03:20.575800",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-10-25 22:03:34.552970",
	"closed": false,
	"issue": 6737064
}