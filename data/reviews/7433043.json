{
	"description": "cmd/cgo: extend implementation comment\n\nThis is the plan for how to make host linking work with\nthe rest of the system.\n\nThere are two complications:\n\n1. It is a goal to preserve the property that pure Go programs\n(even ones importing \"net\") can be compiled without needing\ngcc, so that a Go toolchain download works out of the box.\nThis forces the support for two linking modes: with and without\ngcc.\n\n2. It is a goal to allow users with old copies of SWIG to continue\nto use those copies. This forces the support for \"internal only\"\npackages. Perhaps it is reasonable to require a new SWIG.\nI don't know.",
	"cc": [
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-02-28 04:59:01.279470",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go\nFile src/cmd/cgo/doc.go (right):\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode437\nsrc/cmd/cgo/doc.go:437: compiled in \"internal only\", \"internal+external\", or \"external only\" modes.\nI'm not quite understanding this.  Is there going to be some option to decide the mode in which a package is built?\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode444\nsrc/cmd/cgo/doc.go:444: must be supported for compatiblity with existing copies of SWIG.\nI don't mind saying that people must upgrade to a new version of SWIG.  We've done it before.  It's sort of obnoxious but I think it's acceptable.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode465\nsrc/cmd/cgo/doc.go:465: In the <remote>, # can be used as an alias for @, to avoid\nThe whole @ thing is a mess and I think it's best to not focus on it.  The @ characters are essentially imaginary.  Suggest we say something like \"You can specify a symbol version, where needed, by adding '@' or '#' followed by the version string.\"\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode471\nsrc/cmd/cgo/doc.go:471: #pragma cgo_dynamic_import puts puts#GLIBC_2.2.5 \"libc.so.6\"\nlibc.so.6 is not a path.  You don't really mean a path, you mean something that can appear in a DT_NEEDED tag.  This is either a path or an soname.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode482\nsrc/cmd/cgo/doc.go:482: #pragma dynimport is an alias for #pragma cgo_dynamic_import.\nAre you describing the future here?  As far as I can see the current tools support dynimport, not cgo_dynamic_import.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode492\nsrc/cmd/cgo/doc.go:492: For compatibility with current versions of SWIG,\nSWIG never uses #pragma dynlinker.  Why would it?\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode506\nsrc/cmd/cgo/doc.go:506: #pragma cgo_static_import <local>\nWhy no optional <remote> here?\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode518\nsrc/cmd/cgo/doc.go:518: In external linking mode, invoke the host linker with \"<arg>\"\nMay be worth mentioning again that \"the host linker\" means GCC, it doesn't literally mean the linker.  They take different options.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode529\nsrc/cmd/cgo/doc.go:529: subset for the chosen linking mode.\nWhen is a package internal-only?\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode534\nsrc/cmd/cgo/doc.go:534: and suppose the package has been compiled in \"internal+external\" mode.\nIs the package compiled in internal+external mode?  If so, how?  Or is this a function of some argument passed to cgo?\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode581\nsrc/cmd/cgo/doc.go:581: reference to sin in foo.cgo2.o should be rewritten to refer to sin@GLIBC_2.2.5\ns/sin@GLIBC_2.2.5/the symbol sin with version GLIBC_2.2.5/\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode642\nsrc/cmd/cgo/doc.go:642: Having 6l invoke the host linker will require support in the lib9\nThis is an interesting point but I'm not sure it belongs here.",
			"disapproval": false,
			"date": "2013-02-28 05:50:30.335290",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7433043/diff/14001/src/cmd/cgo/doc.go\nFile src/cmd/cgo/doc.go (right):\n\nhttps://codereview.appspot.com/7433043/diff/14001/src/cmd/cgo/doc.go#newcode480\nsrc/cmd/cgo/doc.go:480: in the final binary. This directive is only needed from one\ni think allowing it to appear more than one could help\ndiagnosing problems where runtime/cgo is compiled on\nanother system with a different dynlinker than the current\nsystem.\n\nthe linker will raise error for this case and so it won't\ngenerate a binary that is not runnable on the current system.\n(running a binary with wrong interpreter used to cause very\nconfusing error messages on some systems)\n\nnote that even on linux, the elf interpreter might be different\nfor different distributions and/or versions (and that's why this\npragma is introduced).",
			"disapproval": false,
			"date": "2013-02-28 19:02:05.343280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-28 14:34:08.042230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1a9cccfde340 ***\n\ncmd/cgo: extend implementation comment\n\nThis is the plan for how to make host linking work with\nthe rest of the system.\n\nThere are two complications:\n\n1. It is a goal to preserve the property that pure Go programs\n(even ones importing \"net\") can be compiled without needing\ngcc, so that a Go toolchain download works out of the box.\nThis forces the support for two linking modes: with and without\ngcc.\n\n2. It is a goal to allow users with old copies of SWIG to continue\nto use those copies. This forces the support for \"internal only\"\npackages. Perhaps it is reasonable to require a new SWIG.\nI don't know.\n\nR=iant\nCC=golang-dev\nhttps://codereview.appspot.com/7433043",
			"disapproval": false,
			"date": "2013-02-28 18:44:34.807660",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go\nFile src/cmd/cgo/doc.go (right):\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go#newcode416\nsrc/cmd/cgo/doc.go:416: command) then invokes the host linker (usually gcc) to combine the\nLater it sounds like 6l, not the go command, is going to invoke the host linker.\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go#newcode490\nsrc/cmd/cgo/doc.go:490: In both internal and external linking modes, the Go symbol\ns/the Go symbol/put the Go symbol/\nor something like that.\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go#newcode519\nsrc/cmd/cgo/doc.go:519: A package is compiled in \"external-only\" mode will only\nI think you mean something like \"When cgo is run in external-only mode, it will generate a package that only uses cgo_export, cgo_static_import, and cgo_ldflag directives.  Such a package can only be linked in external mode.  When cgo is run in internal+external mode, it will use all five kinds of directives, and the linker will select the appropriate subset for the chosen linking mode.\"\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go#newcode528\nsrc/cmd/cgo/doc.go:528: and suppose the package has been compiled in \"internal+external\" mode.\ns/the package has been compiled/cgo has been run/",
			"disapproval": false,
			"date": "2013-02-28 17:06:11.627570",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go\nFile src/cmd/cgo/doc.go (right):\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode437\nsrc/cmd/cgo/doc.go:437: compiled in \"internal only\", \"internal+external\", or \"external only\" modes.\nOn 2013/02/28 05:50:30, iant wrote:\n> I'm not quite understanding this.  Is there going to be some option to decide\n> the mode in which a package is built?\n\nIt's a bit unclear to me too. At first I thought there would have to be, but now I think that cgo/swig can emit pragmas for both cases no matter what, leaving the final decision completely to link time. We can run with that for now and see how far we get.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode444\nsrc/cmd/cgo/doc.go:444: must be supported for compatiblity with existing copies of SWIG.\nOn 2013/02/28 05:50:30, iant wrote:\n> I don't mind saying that people must upgrade to a new version of SWIG.  We've\n> done it before.  It's sort of obnoxious but I think it's acceptable.\n\nOkay, good.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode465\nsrc/cmd/cgo/doc.go:465: In the <remote>, # can be used as an alias for @, to avoid\nOn 2013/02/28 05:50:30, iant wrote:\n> The whole @ thing is a mess and I think it's best to not focus on it.  The @\n> characters are essentially imaginary.  Suggest we say something like \"You can\n> specify a symbol version, where needed, by adding '@' or '#' followed by the\n> version string.\"\n\nDone.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode471\nsrc/cmd/cgo/doc.go:471: #pragma cgo_dynamic_import puts puts#GLIBC_2.2.5 \"libc.so.6\"\nOn 2013/02/28 05:50:30, iant wrote:\n> libc.so.6 is not a path.  You don't really mean a path, you mean something that\n> can appear in a DT_NEEDED tag.  This is either a path or an soname.\n\nDone.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode482\nsrc/cmd/cgo/doc.go:482: #pragma dynimport is an alias for #pragma cgo_dynamic_import.\nOn 2013/02/28 05:50:30, iant wrote:\n> Are you describing the future here?  As far as I can see the current tools\n> support dynimport, not cgo_dynamic_import.\n\nYes, sorry, this whole CL describes the near future.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode492\nsrc/cmd/cgo/doc.go:492: For compatibility with current versions of SWIG,\nOn 2013/02/28 05:50:30, iant wrote:\n> SWIG never uses #pragma dynlinker.  Why would it?\n\nCgo puts it in every package, so I assumed SWIG did what cgo does.\nThe linker only needs one, so it would I suppose suffice to put it in the\nruntime/cgo package and not bother elsewhere.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode506\nsrc/cmd/cgo/doc.go:506: #pragma cgo_static_import <local>\nOn 2013/02/28 05:50:30, iant wrote:\n> Why no optional <remote> here?\n\nThe main use of the remote in the dynamic case is to specify versions and such. At least as used by cgo, the name being imported is going to refer to a .o file that is known to be coming along during the build (i.e. we will be doing an import of _cgo_gcc_Cfunc_sin and not sin aka sin#GLIBC_2.2.5).\n\nI am happy to add remote but at least for now I think I don't need it.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode581\nsrc/cmd/cgo/doc.go:581: reference to sin in foo.cgo2.o should be rewritten to refer to sin@GLIBC_2.2.5\nOn 2013/02/28 05:50:30, iant wrote:\n> s/sin@GLIBC_2.2.5/the symbol sin with version GLIBC_2.2.5/\n\nDone.\n\nhttps://codereview.appspot.com/7433043/diff/2001/src/cmd/cgo/doc.go#newcode642\nsrc/cmd/cgo/doc.go:642: Having 6l invoke the host linker will require support in the lib9\nOn 2013/02/28 05:50:30, iant wrote:\n> This is an interesting point but I'm not sure it belongs here.\n\nDone.\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go\nFile src/cmd/cgo/doc.go (right):\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go#newcode416\nsrc/cmd/cgo/doc.go:416: command) then invokes the host linker (usually gcc) to combine the\nOn 2013/02/28 17:06:11, iant wrote:\n> Later it sounds like 6l, not the go command, is going to invoke the host linker.\n\nIndeed. This line is wrong. My thinking changed by the time I got to the end.\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go#newcode519\nsrc/cmd/cgo/doc.go:519: A package is compiled in \"external-only\" mode will only\nOn 2013/02/28 17:06:11, iant wrote:\n> I think you mean something like \"When cgo is run in external-only mode, it will\n> generate a package that only uses cgo_export, cgo_static_import, and cgo_ldflag\n> directives.  Such a package can only be linked in external mode.  When cgo is\n> run in internal+external mode, it will use all five kinds of directives, and the\n> linker will select the appropriate subset for the chosen linking mode.\"\n\nYes, this is wrong, now that there's no \"compilation mode\". New text:\n\nA package compiled with cgo will include directives for both\ninternal and external linking; the linker will select the appropriate\nsubset for the chosen linking mode.\n\nhttps://codereview.appspot.com/7433043/diff/8001/src/cmd/cgo/doc.go#newcode528\nsrc/cmd/cgo/doc.go:528: and suppose the package has been compiled in \"internal+external\" mode.\nOn 2013/02/28 17:06:11, iant wrote:\n> s/the package has been compiled/cgo has been run/\n\nDeleted this entire line.",
			"disapproval": false,
			"date": "2013-02-28 18:42:39.992980",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7433043: cmd/cgo: extend implementation comment",
	"created": "2013-02-28 04:58:42.733650",
	"patchsets": [
		1,
		2001,
		8001,
		14001
	],
	"modified": "2013-02-28 19:02:05.463120",
	"closed": true,
	"issue": 7433043
}