{
	"description": "exp/ssh: add direct-tcpip client support\n\nThis CL adds experimental support for making proxied\nnet.Conn connections via the remote server.\n\nnb. Functional tests exist for this feature but CL\n5320053 or similar needs to be committed to support them.",
	"cc": [
		"rsc@golang.org",
		"agl@golang.org",
		"n13m3y3r@gmail.com",
		"cw@f00f.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"huin@google.com"
	],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go\nFile src/pkg/exp/ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode14\nsrc/pkg/exp/ssh/tcpip.go:14: raddr, err := net.ResolveTCPAddr(n, addr)\nThis leaks the destination host via the DNS lookup. (The underlying SSH protocol allows the hostname to be specified as a domain name.) That, at least, needs a big warning in the function comment. Ideally the functions would be split such that the common functionality was in a single function that takes laddr, raddr string, lport, rport uint32 and then Dial and DialTCP call it.\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode38\nsrc/pkg/exp/ssh/tcpip.go:38: laddr = &net.TCPAddr{\n0.0.0.0 would seem to be a better default IP address. Otherwise the remote connection will bind to the loopback and I'm not sure how outgoing connections will work then. Likewise, can the port not be zero?\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode64\nsrc/pkg/exp/ssh/tcpip.go:64: return nil, errors.New(msg.Message)\n\"ssh: error opening remote TCP connection: \" + msg.Message.\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode116\nsrc/pkg/exp/ssh/tcpip.go:116: return errors.New(\"tcpchan: timeout not supported\")\nshould mention \"ssh\" in the error.\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode125\nsrc/pkg/exp/ssh/tcpip.go:125: return errors.New(\"tcpchan: timeout not supported\")\nshould mention \"ssh\" in the error.",
			"disapproval": false,
			"date": "2011-11-13 17:30:16.111193",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=76636aef8bc1 ***\n\nexp/ssh: add direct-tcpip client support\n\nThis CL adds experimental support for making proxied\nnet.Conn connections via the remote server.\n\nnb. Functional tests exist for this feature but CL\n5320053 or similar needs to be committed to support them.\n\nR=rsc, agl, n13m3y3r\nCC=cw, golang-dev, huin\nhttp://codereview.appspot.com/5371081\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2011-11-14 02:05:35.989187",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Will land in just a sec, although see note below for a possible followup.\n\nhttp://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go\nFile src/pkg/exp/ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go#newcode12\nsrc/pkg/exp/ssh/tcpip.go:12: // Dial initiates a connection to the addr from the remote host.\nI suspect that Dial should be a very thin wrapper around dial which simply fills in the default laddr and splits addr into a host and port.\n\nIs there any cases where local resolution of the IP address is advantageous? (And, if they're obscure, does DialTCP not cover them?)",
			"disapproval": false,
			"date": "2011-11-14 02:05:06.161632",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"dave@cheney.net",
				"huin@google.com",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go\nFile src/pkg/exp/ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go#newcode80\nsrc/pkg/exp/ssh/tcpip.go:80: return nil, errors.New(\"ssh: error opening remote TCP connection: \" + msg.Message)\nNote that RFC4254 section 5.1. states that:\n\n\"The client MAY show the 'description' string to the user. If this is done, the client software should take the precautions discussed in [SSH-ARCH].\"\n\nWhich relates to RFC4251 section 9.2.:\n\n\"When displaying text to a user, such as error or debug messages, the client software SHOULD replace any control characters (except tab, carriage return, and newline) with safe sequences to avoid attacks by sending terminal control characters.\"\n\nIn the above, the error message could easily leak out to an unfiltered output. Given that the output medium isn't known here, I'd say that the ideal handling is to have an error type which contains the raw error string as an attribute - although this seems like something that needs to be more widely addressed in exp/ssh in general, rather than just here.",
			"disapproval": false,
			"date": "2011-11-14 14:02:59.687132",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com (cc: cw@f00f.org, golang-dev@googlegroups.com, huin@google.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-13 07:45:36.155377",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for your review agl. I have made the changes suggested to Dial/DialTCP. Please let me know if you think dial(string, int, string, int) should be exported.\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go\nFile src/pkg/exp/ssh/tcpip.go (right):\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode14\nsrc/pkg/exp/ssh/tcpip.go:14: raddr, err := net.ResolveTCPAddr(n, addr)\nExcellent point, I had not considered the implications of that. I will rework this and amend the comment.\n\nThe complication might be implementing the Conn.LocalAddr() and Conn.RemoteAddr() methods.\n\nOn 2011/11/13 17:30:16, agl1 wrote:\n> This leaks the destination host via the DNS lookup. (The underlying SSH protocol\n> allows the hostname to be specified as a domain name.) That, at least, needs a\n> big warning in the function comment. Ideally the functions would be split such\n> that the common functionality was in a single function that takes laddr, raddr\n> string, lport, rport uint32 and then Dial and DialTCP call it.\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode38\nsrc/pkg/exp/ssh/tcpip.go:38: laddr = &net.TCPAddr{\nLooking at openssh it appears to note the local (peer)'s laddr in the logs but couldn't possibly use them. I will experiment with a zero address.\n\nOn 2011/11/13 17:30:16, agl1 wrote:\n> 0.0.0.0 would seem to be a better default IP address. Otherwise the remote\n> connection will bind to the loopback and I'm not sure how outgoing connections\n> will work then. Likewise, can the port not be zero?\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode64\nsrc/pkg/exp/ssh/tcpip.go:64: return nil, errors.New(msg.Message)\nOn 2011/11/13 17:30:16, agl1 wrote:\n> \"ssh: error opening remote TCP connection: \" + msg.Message.\n\nDone.\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode116\nsrc/pkg/exp/ssh/tcpip.go:116: return errors.New(\"tcpchan: timeout not supported\")\nOn 2011/11/13 17:30:16, agl1 wrote:\n> should mention \"ssh\" in the error.\n\nDone.\n\nhttp://codereview.appspot.com/5371081/diff/4001/src/pkg/exp/ssh/tcpip.go#newcode125\nsrc/pkg/exp/ssh/tcpip.go:125: return errors.New(\"tcpchan: timeout not supported\")\nOn 2011/11/13 17:30:16, agl1 wrote:\n> should mention \"ssh\" in the error.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-13 20:23:14.641697",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com (cc: cw@f00f.org, golang-dev@googlegroups.com, huin@google.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-13 20:22:11.013690",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "That occurred to me on the way to work this morning. The raddr passed to the remote should be resolved/connected in the context of the remote, not the local, so Dial() as it stands doesn't make sense if the remote server isn't on the same logical network. \n\nI dearly want Dial/DialTCP to return a net.Conn but clearly I need to do some more thinking about the most appropriate values for laddr and raddr in the tcpchanconn struct. \n\nSent from my iPhone\n\nOn 14/11/2011, at 13:05, agl@golang.org wrote:\n\n> Will land in just a sec, although see note below for a possible\n> followup.\n> \n> \n> http://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go\n> File src/pkg/exp/ssh/tcpip.go (right):\n> \n> http://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go#newcode12\n> src/pkg/exp/ssh/tcpip.go:12: // Dial initiates a connection to the addr\n> from the remote host.\n> I suspect that Dial should be a very thin wrapper around dial which\n> simply fills in the default laddr and splits addr into a host and port.\n> \n> Is there any cases where local resolution of the IP address is\n> advantageous? (And, if they're obscure, does DialTCP not cover them?)\n> \n> http://codereview.appspot.com/5371081/\n",
			"disapproval": false,
			"date": "2011-11-14 02:31:13.708413",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi,\n\nI agree with you that the remote message should be sanitised. I'll\nsend a CL this weekend.\n\nCheers\n\nDave\n\nOn Tue, Nov 15, 2011 at 1:02 AM,  <huin@google.com> wrote:\n>\n> http://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go\n> File src/pkg/exp/ssh/tcpip.go (right):\n>\n> http://codereview.appspot.com/5371081/diff/7001/src/pkg/exp/ssh/tcpip.go#newcode80\n> src/pkg/exp/ssh/tcpip.go:80: return nil, errors.New(\"ssh: error opening\n> remote TCP connection: \" + msg.Message)\n> Note that RFC4254 section 5.1. states that:\n>\n> \"The client MAY show the 'description' string to the user. If this is\n> done, the client software should take the precautions discussed in\n> [SSH-ARCH].\"\n>\n> Which relates to RFC4251 section 9.2.:\n>\n> \"When displaying text to a user, such as error or debug messages, the\n> client software SHOULD replace any control characters (except tab,\n> carriage return, and newline) with safe sequences to avoid attacks by\n> sending terminal control characters.\"\n>\n> In the above, the error message could easily leak out to an unfiltered\n> output. Given that the output medium isn't known here, I'd say that the\n> ideal handling is to have an error type which contains the raw error\n> string as an attribute - although this seems like something that needs\n> to be more widely addressed in exp/ssh in general, rather than just\n> here.\n>\n> http://codereview.appspot.com/5371081/\n>\n",
			"disapproval": false,
			"date": "2011-11-18 09:47:15.414617",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5371081: exp/ssh: add direct-tcpip client support",
	"created": "2011-11-13 07:41:20.903279",
	"patchsets": [
		1,
		2001,
		4001,
		4,
		7001
	],
	"modified": "2011-11-14 14:03:00.058117",
	"closed": true,
	"issue": 5371081
}