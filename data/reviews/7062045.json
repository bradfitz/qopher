{
	"description": "go/types: less closure creations in gcimporter.\n\nClosures are incredibly expensive on linux/arm due to\nrepetitive flush of instruction cache.\n\ngo test -short on ODROID-X:\n\nBefore:\nok      exp/gotype      17.091s\nok      go/types        2.225s\n\nAfter:\nok      exp/gotype      7.193s\nok      go/types        1.143s",
	"cc": [
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "freebsd/arm:\n\nbefore:\nok      exp/gotype      52.840s\n\nafter:\nok      exp/gotype      49.198s\n\nWith 7068044 as well: \nok      exp/gotype      38.099s\n\nThis machine is really slow because the current kernel does not enable any of the write caches. I have seen a recent comment that the cache issues have been resolved so I'll probably have a faster image in a few days.",
			"disapproval": false,
			"date": "2013-01-05 09:18:36.589860",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 5, 2013 at 4:41 PM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> On 2013/01/05 08:14:15, dfc wrote:\r\n>\r\n>> Will test on the horrifically slow FreeBSD/arm.\r\n>>\r\n>\r\n> You may want to check the benefits of CL 7068044\r\n> https://codereview.appspot.**com/7068044<https://codereview.appspot.com/7068044>\r\n>\r\n>\r\n>  In the past where code has been changed to avoid closures there has\r\n>>\r\n> been a\r\n>\r\n>> comment added to explain why, and a TODO to possible revert when the\r\n>>\r\n> situation\r\n>\r\n>> improves.\r\n>>\r\n>\r\n> I'm not sure how to add such a comment without souding silly. IF I were\r\n> to read \"TODO: when funcs become two-word move this single line to a\r\n> separate closure\" I would get quite puzzled.\r\n>\r\n> Do you think these functions should ideally be written with a closure?\r\n>  They seem pretty simple.\r\n\r\nperhaps using a closure here is to attach comments (the name of the closure)\r\nto the block of code.\r\n",
			"disapproval": false,
			"date": "2013-01-05 09:31:32.136930",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> The Raspberry seems to spend much less time in cacheflush than the\n> odroid, is your Pandaboard still alive for measurements?\n\nHere are the numbers from the current linux-arm-cheney builder (tegra 3, 4 core nexus7)\n\nbefore:\nok      exp/gotype      15.833s\n\nafter:\nok      exp/gotype      10.492s\n\nwith 7068044:\nok      exp/gotype      7.866s\n\nThe actual builder runs entirely from tmpfs (this example did not, it's my working copy in $HOME) so the final result should be a bit faster again as there is no io to speak of.",
			"disapproval": false,
			"date": "2013-01-05 09:56:14.269380",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=65c46a02321c ***\n\ngo/types: less closure creations in gcimporter.\n\nClosures are incredibly expensive on linux/arm due to\nrepetitive flush of instruction cache.\n\ngo test -short on ODROID-X:\n\nBefore:\nok      exp/gotype      17.091s\nok      go/types        2.225s\n\nAfter:\nok      exp/gotype      7.193s\nok      go/types        1.143s\n\nR=dave, minux.ma, rsc\nCC=golang-dev, remy\nhttps://codereview.appspot.com/7062045",
			"disapproval": false,
			"date": "2013-01-06 22:38:56.829020",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 5, 2013 at 5:18 PM, <dave@cheney.net> wrote:\r\n\r\n> freebsd/arm:\r\n>\r\n> before:\r\n> ok      exp/gotype      52.840s\r\n>\r\n> after:\r\n> ok      exp/gotype      49.198s\r\n>\r\n> With 7068044 as well:\r\n> ok      exp/gotype      38.099s\r\n>\r\n> This machine is really slow because the current kernel does not enable\r\n> any of the write caches. I have seen a recent comment that the cache\r\n>\r\nso FreeBSD/arm on RPi is using write through caches? then why a bad\r\ncacheflush\r\nimplementation breaks tests using closures? I'm a little confused now.\r\n\r\nthe small time differences seems to indicate it is the case.\r\n",
			"disapproval": false,
			"date": "2013-01-05 09:30:01.369830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\narguably clearer too",
			"disapproval": false,
			"date": "2013-01-06 19:40:49.035880",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-05 07:55:39.517150",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/1/5 Dave Cheney <dave@cheney.net> wrote:\r\n> No, that is the runtime, go test reports the time to execute the final\r\n> test binary, exclusive of linking time.\r\n\r\nThe Raspberry seems to spend much less time in cacheflush than the\r\nodroid, is your Pandaboard still alive for measurements?\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-01-05 09:47:34.662690",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-05 08:05:00.917390",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Will test on the horrifically slow FreeBSD/arm. \r\n\r\nIn the past where code has been changed to avoid closures there has been a comment added to explain why, and a TODO to possible revert when the situation improves. \r\n\r\nIf you think the possibility of two word funcs will improve the situation in the future, maybe add a comment to that effect. \r\n\r\nDave\r\n\r\nOn 05/01/2013, at 18:55, laremyoudompheng@gmail.com wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n> \r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\r\n> remy@archlinux.org),\r\n> \r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n> \r\n> \r\n> Description:\r\n> go/types: less closure creations in gcimporter.\r\n> \r\n> Closures are incredbly expensive on linux/arm due to\r\n> repetitive flush of instruction cache.\r\n> \r\n> go test -short on ODROID-X:\r\n> \r\n> Before:\r\n> ok      exp/gotype      17.091s\r\n> ok      go/types        2.225s\r\n> 15.49s user\r\n> 11.39s system\r\n> 127% cpu\r\n> 21.039 total\r\n> \r\n> After:\r\n> ok      exp/gotype      8.150s\r\n> ok      go/types        1.220s\r\n> 14.71s user\r\n> 2.12s system\r\n> 140% cpu\r\n> 12.021 total\r\n> \r\n> Please review this at https://codereview.appspot.com/7062045/\r\n> \r\n> Affected files:\r\n>  M src/pkg/go/types/gcimporter.go\r\n> \r\n> \r\n> Index: src/pkg/go/types/gcimporter.go\r\n> ===================================================================\r\n> --- a/src/pkg/go/types/gcimporter.go\r\n> +++ b/src/pkg/go/types/gcimporter.go\r\n> @@ -450,7 +450,11 @@\r\n> // ParameterList = { Parameter \",\" } Parameter .\r\n> //\r\n> func (p *gcParser) parseParameters() (list []*Var, isVariadic bool) {\r\n> -    parseParameter := func() {\r\n> +    p.expect('(')\r\n> +    for p.tok != ')' {\r\n> +        if len(list) > 0 {\r\n> +            p.expect(',')\r\n> +        }\r\n>        par, variadic := p.parseParameter()\r\n>        list = append(list, par)\r\n>        if variadic {\r\n> @@ -460,15 +464,6 @@\r\n>            isVariadic = true\r\n>        }\r\n>    }\r\n> -\r\n> -    p.expect('(')\r\n> -    if p.tok != ')' {\r\n> -        parseParameter()\r\n> -        for p.tok == ',' {\r\n> -            p.next()\r\n> -            parseParameter()\r\n> -        }\r\n> -    }\r\n>    p.expect(')')\r\n> \r\n>    return\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-01-05 08:14:15.930830",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/05 08:14:15, dfc wrote:\n> Will test on the horrifically slow FreeBSD/arm. \n\nYou may want to check the benefits of CL 7068044\nhttps://codereview.appspot.com/7068044\n \n> In the past where code has been changed to avoid closures there has been a\n> comment added to explain why, and a TODO to possible revert when the situation\n> improves. \n\nI'm not sure how to add such a comment without souding silly. IF I were to read \"TODO: when funcs become two-word move this single line to a separate closure\" I would get quite puzzled.\n\nDo you think these functions should ideally be written with a closure?\n They seem pretty simple.\n\n> If you think the possibility of two word funcs will improve the situation in the\n> future, maybe add a comment to that effect. \n\nAdded a comment to issue 4081 in the meanwhile.",
			"disapproval": false,
			"date": "2013-01-05 08:41:06.442480",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> You may want to check the benefits of CL 7068044\r\n> https://codereview.appspot.com/7068044\r\n\r\nThank you, will do.\r\n\r\n> I'm not sure how to add such a comment without souding silly. IF I were\r\n> to read \"TODO: when funcs become two-word move this single line to a\r\n> separate closure\" I would get quite puzzled.\r\n\r\nI was thinking of examples like this,\r\nhttps://code.google.com/p/go/source/detail?r=43f8148463d6\r\n\r\n> Do you think these functions should ideally be written with a closure?\r\n>  They seem pretty simple.\r\n\r\nTo be clear, I think the change you have made is valid and reads just\r\nas well. My concern is a side effect of this change is people may\r\nstart to think 'closures are too slow', and go through their code\r\nripping them out, possibly harming the expressiveness. If you think 2\r\nword funcs would reduce the overhead of closures, then I think a TODO\r\nis worthwhile here to indicate this is just a temporary measure. If 2\r\nword funcs still mean closures come with a large penalty on arm, then\r\nI think it is fine to avoid this comment as your change will not be\r\naffected by future improvements in the compiler.\r\n",
			"disapproval": false,
			"date": "2013-01-05 08:53:45.104930",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/1/5 minux <minux.ma@gmail.com>:\r\n>\r\n>\r\n> On Sat, Jan 5, 2013 at 5:18 PM, <dave@cheney.net> wrote:\r\n>>\r\n>> freebsd/arm:\r\n>>\r\n>> before:\r\n>> ok      exp/gotype      52.840s\r\n>>\r\n>> after:\r\n>> ok      exp/gotype      49.198s\r\n>>\r\n>> With 7068044 as well:\r\n>> ok      exp/gotype      38.099s\r\n>>\r\n>> This machine is really slow because the current kernel does not enable\r\n>> any of the write caches. I have seen a recent comment that the cache\r\n>\r\n> so FreeBSD/arm on RPi is using write through caches? then why a bad\r\n> cacheflush\r\n> implementation breaks tests using closures? I'm a little confused now.\r\n>\r\n> the small time differences seems to indicate it is the case.\r\n\r\n\r\nI think Dave was thinking of disk cache, not instruction cache.\r\n\r\nDave, did you mean the 38s in the final duration include a very long\r\ncompilation time?\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-01-05 09:38:33.107840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> so FreeBSD/arm on RPi is using write through caches? then why a bad\r\n> cacheflush\r\n> implementation breaks tests using closures? I'm a little confused now.\r\n\r\nI am not sure the exact caching situation for the RPi, I based my\r\nprevious comment on\r\nhttp://lists.freebsd.org/pipermail/freebsd-arm/2013-January/004546.html\r\n\r\n>\r\n> the small time differences seems to indicate it is the case.\r\n\r\nA non trivial amount of time on this host is spent waiting for disk\r\nIO. The freebsd guys have improved sdcard speed significantly in the\r\npast week, from 1bit mode @ 25mhz, to 4 bit mode, and today I got a\r\nbuild which enables 50mhz mode, but io performance is still very bad.\r\n",
			"disapproval": false,
			"date": "2013-01-05 09:36:00.773560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No, that is the runtime, go test reports the time to execute the final\r\ntest binary, exclusive of linking time.\r\n\r\nOn Sat, Jan 5, 2013 at 8:38 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> 2013/1/5 minux <minux.ma@gmail.com>:\r\n>>\r\n>>\r\n>> On Sat, Jan 5, 2013 at 5:18 PM, <dave@cheney.net> wrote:\r\n>>>\r\n>>> freebsd/arm:\r\n>>>\r\n>>> before:\r\n>>> ok      exp/gotype      52.840s\r\n>>>\r\n>>> after:\r\n>>> ok      exp/gotype      49.198s\r\n>>>\r\n>>> With 7068044 as well:\r\n>>> ok      exp/gotype      38.099s\r\n>>>\r\n>>> This machine is really slow because the current kernel does not enable\r\n>>> any of the write caches. I have seen a recent comment that the cache\r\n>>\r\n>> so FreeBSD/arm on RPi is using write through caches? then why a bad\r\n>> cacheflush\r\n>> implementation breaks tests using closures? I'm a little confused now.\r\n>>\r\n>> the small time differences seems to indicate it is the case.\r\n>\r\n>\r\n> I think Dave was thinking of disk cache, not instruction cache.\r\n>\r\n> Dave, did you mean the 38s in the final duration include a very long\r\n> compilation time?\r\n>\r\n> R\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-01-05 09:45:43.553580",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are the times for the linux-arm-arm5 builder (2Ghz ARMv5)\n\nbefore:\nok      exp/gotype      18.005s\n\nafter: \nok      exp/gotype      13.918s\n\nwith 7068044:\nok      exp/gotype      10.951s",
			"disapproval": false,
			"date": "2013-01-05 09:51:59.645020",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7062045: go/types: less closure creations in gcimporter.",
	"created": "2013-01-05 07:30:30.230590",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		4002
	],
	"modified": "2013-01-07 23:41:11.503760",
	"closed": true,
	"issue": 7062045
}