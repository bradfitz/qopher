{
	"description": "src/cmd/ld: Explicit void arguments lists in declarations\n        lib.h: lookuprel()\n        macho.h: getMachoHdr()\nOtherwise, the Plan 9 native compilation fails.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"akumar@mail.nanosouffle.net",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't like the ambiguity of function(), so my vote is to go for it,\r\nbut will it flag declarations as well as definitions?\r\n\r\nLucio.\r\n\r\nOn 2/4/13, minux <minux.ma@gmail.com> wrote:\r\n> On Mon, Feb 4, 2013 at 7:15 PM, Akshat Kumar\r\n> <akumar@mail.nanosouffle.net>wrote:\r\n>\r\n>> On 4 February 2013 03:10, minux <minux.ma@gmail.com> wrote:\r\n>> > at least there is another one in src/cmd/ld/macho.h, should we fix them\r\n>> all?\r\n>> > is there any gcc flag that can check prototypes for us so that it won't\r\n>> > regress?\r\n>>\r\n>> Perhaps -Wstrict-prototypes?\r\n>>\r\n> I just tried and this option will make gcc (trunk) complaint about the\r\n> following code:\r\n> void function()\r\n> {\r\n>    // ...\r\n> }\r\n>\r\n> maybe it's too strict, what do you think?\r\n> I certainly don't mind to fix all the warning.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-04 14:52:26.150830",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Monday, February 4, 2013, lucio.dere  wrote:\r\n>\r\n> Index: src/cmd/ld/lib.h\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/ld/lib.h\r\n> +++ b/src/cmd/ld/lib.h\r\n> @@ -182,7 +182,7 @@\r\n>  void   usage(void);\r\n>  void   adddynrel(Sym*, Reloc*);\r\n>  void   adddynrela(Sym*, Sym*, Reloc*);\r\n> -Sym*   lookuprel();\r\n> +Sym*   lookuprel(void);\r\n>\r\nat least there is another one in src/cmd/ld/macho.h, should we fix them all?\r\nis there any gcc flag that can check prototypes for us so that it won't\r\nregress?\r\n",
			"disapproval": false,
			"date": "2013-02-04 11:10:21.445010",
			"approval": false
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 4 February 2013 03:10, minux <minux.ma@gmail.com> wrote:\r\n> at least there is another one in src/cmd/ld/macho.h, should we fix them all?\r\n> is there any gcc flag that can check prototypes for us so that it won't\r\n> regress?\r\n\r\nPerhaps -Wstrict-prototypes?\r\n",
			"disapproval": false,
			"date": "2013-02-04 11:15:36.662310",
			"approval": false
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it shouldn't do that if you have a declaration for function()\r\nwith the argument specified. I'm not certain of the behaviour for\r\nmain() however.\r\n\r\nOn 4 February 2013 06:02, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Mon, Feb 4, 2013 at 7:15 PM, Akshat Kumar <akumar@mail.nanosouffle.net>\r\n> wrote:\r\n>>\r\n>> On 4 February 2013 03:10, minux <minux.ma@gmail.com> wrote:\r\n>> > at least there is another one in src/cmd/ld/macho.h, should we fix them\r\n>> > all?\r\n>> > is there any gcc flag that can check prototypes for us so that it won't\r\n>> > regress?\r\n>>\r\n>> Perhaps -Wstrict-prototypes?\r\n>\r\n> I just tried and this option will make gcc (trunk) complaint about the\r\n> following code:\r\n> void function()\r\n> {\r\n>    // ...\r\n> }\r\n>\r\n> maybe it's too strict, what do you think?\r\n> I certainly don't mind to fix all the warning.\r\n",
			"disapproval": false,
			"date": "2013-02-04 20:03:49.793180",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-04 09:36:16.068170",
			"approval": false
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\r\n\r\nOn 4 February 2013 01:36,  <lucio.dere@gmail.com> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\r\n> rsc@golang.org),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> lib.h: Add missing \"void\" argument type in lookuprel()\r\n> declaration, breaks Plan 9 native compilation.\r\n>\r\n> Please review this at https://codereview.appspot.com/7289050/\r\n>\r\n> Affected files:\r\n>   M src/cmd/ld/lib.h\r\n>\r\n>\r\n> Index: src/cmd/ld/lib.h\r\n> ===================================================================\r\n> --- a/src/cmd/ld/lib.h\r\n> +++ b/src/cmd/ld/lib.h\r\n> @@ -182,7 +182,7 @@\r\n>  void   usage(void);\r\n>  void   adddynrel(Sym*, Reloc*);\r\n>  void   adddynrela(Sym*, Sym*, Reloc*);\r\n> -Sym*   lookuprel();\r\n> +Sym*   lookuprel(void);\r\n>  void   ldobj1(Biobuf *f, char*, int64 len, char *pn);\r\n>  void   ldobj(Biobuf*, char*, int64, char*, int);\r\n>  void   ldelf(Biobuf*, char*, int64, char*);\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-04 10:58:30.860540",
			"approval": true
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"akumar@mail.nanosouffle.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, akumar@mail.nanosouffle.net, minux.ma@gmail.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 13:41:04.171210",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2/4/13, minux <minux.ma@gmail.com> wrote:\r\n> at least there is another one in src/cmd/ld/macho.h, should we fix them all?\r\n> is there any gcc flag that can check prototypes for us so that it won't regress?\r\n>\r\n\r\nThat's used only for Darwin, so it doesn't matter, but I'm in favour\r\nof being consistent and the declaration in macho.h is different from\r\nthe definition in macho.c, so I vote for a fix.\r\n\r\nLucio.\r\n",
			"disapproval": false,
			"date": "2013-02-04 13:34:31.651980",
			"approval": false
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good, minux. Thanks for working on that.\r\n\r\nOn 4 February 2013 12:28, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Tue, Feb 5, 2013 at 4:03 AM, Akshat Kumar <akumar@mail.nanosouffle.net>\r\n> wrote:\r\n>>\r\n>> I think it shouldn't do that if you have a declaration for function()\r\n>> with the argument specified. I'm not certain of the behaviour for\r\n>> main() however.\r\n>\r\n> I created https://codereview.appspot.com/7288056\r\n> please take a look.\r\n",
			"disapproval": false,
			"date": "2013-02-04 21:30:01.868470",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"akumar@mail.nanosouffle.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, akumar@mail.nanosouffle.net, minux.ma@gmail.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 13:49:20.171170",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 4, 2013 at 7:15 PM, Akshat Kumar <akumar@mail.nanosouffle.net>wrote:\r\n\r\n> On 4 February 2013 03:10, minux <minux.ma@gmail.com> wrote:\r\n> > at least there is another one in src/cmd/ld/macho.h, should we fix them\r\n> all?\r\n> > is there any gcc flag that can check prototypes for us so that it won't\r\n> > regress?\r\n>\r\n> Perhaps -Wstrict-prototypes?\r\n>\r\nI just tried and this option will make gcc (trunk) complaint about the\r\nfollowing code:\r\nvoid function()\r\n{\r\n   // ...\r\n}\r\n\r\nmaybe it's too strict, what do you think?\r\nI certainly don't mind to fix all the warning.\r\n",
			"disapproval": false,
			"date": "2013-02-04 14:02:48.667150",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 5, 2013 at 4:03 AM, Akshat Kumar <akumar@mail.nanosouffle.net>wrote:\r\n\r\n> I think it shouldn't do that if you have a declaration for function()\r\n> with the argument specified. I'm not certain of the behaviour for\r\n> main() however.\r\n\r\nI created https://codereview.appspot.com/7288056\r\nplease take a look.\r\n",
			"disapproval": false,
			"date": "2013-02-04 20:29:13.368750",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"akumar@mail.nanosouffle.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-02-05 04:22:14.465260",
			"approval": false
		}
	],
	"owner_email": "lucio.dere@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "lucio",
	"subject": "code review 7289050: src/cmd/ld: Explicit void arguments lists in declarations",
	"created": "2013-02-04 09:34:59.816760",
	"patchsets": [
		1,
		1002,
		4001,
		10001,
		3004
	],
	"modified": "2013-02-05 04:22:18.091640",
	"closed": true,
	"issue": 7289050
}