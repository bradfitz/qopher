{
	"description": "time: handle integer overflow in Sub\n\nIf time.Sub results in a value that won't fit in a Duration (int64),\nreturn either the min or max int64 value as appropriate.\n\nFixes issue 5011.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-17 00:00:48.051870",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc",
			"disapproval": false,
			"date": "2013-06-18 00:35:29.844590",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go#newcode624\nsrc/pkg/time/time.go:624: if u.sec > 0 && t.sec < minDuration+u.sec {\nthis doesn't look right. you're adding nanoseconds and seconds.\nwhy don't you give minDuration and maxDuration types to catch things like this?\n\ni'd start by splitting the code into two blocks, one where t >= u and one where t < u.\ndo the math\nif you end up on the wrong side, just return the limit",
			"disapproval": false,
			"date": "2013-06-18 00:47:11.591840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go#newcode427\nsrc/pkg/time/time.go:427: const (\nDelete from here.\n\nhttps://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go#newcode428\nsrc/pkg/time/time.go:428: minDuration = -1 << 63\nminDuration Duration = -1<<63\nmaxDuration Duration = 1<<63 - 1\n\nhttps://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go#newcode624\nsrc/pkg/time/time.go:624: if u.sec > 0 && t.sec < minDuration+u.sec {\nThere are lots of ways this code can go wrong trying not to compute a wrong answer.\nCompute the answer and check whether it's right.\n\nd := Duration(t.sec-u.sec)*Second + Duration(t.nsec-u.nsec)\nswitch {\ncase u.Add(d).Equal(t):\n    return d // d is correct\ncase t.Before(u):\n    return minDuration // t - u is negative out of range\ndefault:\n    return maxDuration // t - u is positive out of range\n}",
			"disapproval": false,
			"date": "2013-06-21 19:00:08.890020",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I forgot to mail when I made comments earlier, sorry. Do I need to worry about unspecified overflow behavior?\n\nI will move forward using rsc's comments.\n\nThanks.\n\nhttps://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go#newcode624\nsrc/pkg/time/time.go:624: if u.sec > 0 && t.sec < minDuration+u.sec {\nOn 2013/06/18 00:47:11, r wrote:\n> this doesn't look right. you're adding nanoseconds and seconds.\n> why don't you give minDuration and maxDuration types to catch things like this?\n\nI wanted to use Math.MinInt64 and Math.MaxInt64 but didn't want to add the dependency so I called it minDuration and maxDuration. In retrospect I guess that's a bit confusing. Do you think I should create a separate maxSeconds and minSeconds with the same values (and change min/maxDuration to Durations)? \n\n> i'd start by splitting the code into two blocks, one where t >= u and one where\n> t < u.\n> do the math\n> if you end up on the wrong side, just return the limit\n\nI based the code in this CL on recommendations for C code since overflow behavior there is undefined and I was worried about ARM CPUs, which I know little about. Is Go code guaranteed to overflow \"correctly\" always?\n\nThanks.",
			"disapproval": false,
			"date": "2013-06-21 21:24:13.076140",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-22 01:05:41.624750",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/2002/src/pkg/time/time.go#newcode427\nsrc/pkg/time/time.go:427: const (\nOn 2013/06/21 19:00:09, rsc wrote:\n> Delete from here.\n\nSorry, this comment was supposed to have been removed.\nKeep the const block but adjust as suggested below.",
			"disapproval": false,
			"date": "2013-06-21 19:00:34.232680",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2013-06-21 21:35:26.465180",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go#newcode624\nsrc/pkg/time/time.go:624: d := Duration(t.sec-u.sec)*Second + Duration(t.nsec-u.nsec)\n// Check for overflow or underflow.\n\nhttps://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go#newcode632\nsrc/pkg/time/time.go:632: }\nyou need to return something, which you don't, which means this hasn't been run.",
			"disapproval": false,
			"date": "2013-06-21 21:37:15.763330",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go#newcode624\nsrc/pkg/time/time.go:624: d := Duration(t.sec-u.sec)*Second + Duration(t.nsec-u.nsec)\nOn 2013/06/21 21:37:15, r wrote:\n> // Check for overflow or underflow.\n\nDone.\n\nhttps://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go#newcode632\nsrc/pkg/time/time.go:632: }\nOn 2013/06/21 21:37:15, r wrote:\n> you need to return something, which you don't, which means this hasn't been run.\n\nWhat do you mean? There is a default case for the switch and I ran \"go test\" on the test package and all.bash before uploading.",
			"disapproval": false,
			"date": "2013-06-21 21:44:52.877330",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/11001/src/pkg/time/time.go#newcode632\nsrc/pkg/time/time.go:632: }\nmy mistake, sorry. the colors confuse me sometimes.\n\nhttps://codereview.appspot.com/10328043/diff/17001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/17001/src/pkg/time/time_test.go#newcode1359\nsrc/pkg/time/time_test.go:1359: t.Errorf(\"%d: got %d; want %d\", i, got, st.d)\nit would be a service (and easy) to print this more usefully (but check my typing by introducing a failure and/or running vet)\n\n\"#%d: Sub(%v, %v): got %v; want %v\", i, st.t, st.u, got, st.d)",
			"disapproval": false,
			"date": "2013-06-21 21:53:18.813210",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10328043/diff/17001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/10328043/diff/17001/src/pkg/time/time_test.go#newcode1359\nsrc/pkg/time/time_test.go:1359: t.Errorf(\"%d: got %d; want %d\", i, got, st.d)\nOn 2013/06/21 21:53:19, r wrote:\n> it would be a service (and easy) to print this more usefully (but check my\n> typing by introducing a failure and/or running vet)\n> \n> \"#%d: Sub(%v, %v): got %v; want %v\", i, st.t, st.u, got, st.d)\n\nDone. Here's a sample failure:\n\n        time_test.go:1359: #1: Sub(2009-11-23 00:00:00.000000001 +0000 UTC, 2009-11-23 00:00:00 +0000 UTC): got 1ns; want 10ns",
			"disapproval": false,
			"date": "2013-06-22 00:56:34.483160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=56909cb770fe ***\n\ntime: handle integer overflow in Sub\n\nIf time.Sub results in a value that won't fit in a Duration (int64),\nreturn either the min or max int64 value as appropriate.\n\nFixes issue 5011.\n\nR=golang-dev, bradfitz, r, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/10328043\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2013-06-22 01:08:01.456110",
			"approval": false
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 10328043: time: handle integer overflow in Sub",
	"created": "2013-06-16 23:59:34.515890",
	"patchsets": [
		1,
		2001,
		2002,
		11001,
		17001,
		13003
	],
	"modified": "2013-06-22 15:25:25.685980",
	"closed": true,
	"issue": 10328043
}