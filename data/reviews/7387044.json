{
	"description": "strconv, fmt: clarify behavior of CanBackquote and \"%#q\".\nFixes issue 4858.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2013-02-23 10:45:15.156660",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nOn Sun, Feb 24, 2013 at 12:55 AM, <r@golang.org> wrote:\r\n\r\n> https://codereview.appspot.**com/7387044/diff/10003/src/**\r\n> pkg/strconv/quote.go#**newcode146<https://codereview.appspot.com/7387044/diff/10003/src/pkg/strconv/quote.go#newcode146>\r\n> src/pkg/strconv/quote.go:146: // will return false if they appear in s.\r\n> how about this, which helps clarify things better?\r\n>\r\n> CanBackquote reports whether the string s can be represented unchanged\r\n> as a single-line backquoted string without control characters other than\r\n> space and tab.\r\n>\r\nGreat. This clarifies the rationale behind the behavior at the same.\r\n",
			"disapproval": false,
			"date": "2013-02-23 17:00:13.497850",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-20 17:09:26.191410",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7387044/diff/14004/src/pkg/strconv/quote.go\nFile src/pkg/strconv/quote.go (right):\n\nhttps://codereview.appspot.com/7387044/diff/14004/src/pkg/strconv/quote.go#newcode145\nsrc/pkg/strconv/quote.go:145: // will return false for any multiline strings so that\nit's not just multiline; `abc\n` is arguably one line.\nhow about (plus it's shorter':\n\nwill return false if s contains a newline.\n\nhttps://codereview.appspot.com/7387044/diff/14004/src/pkg/strconv/quote.go#newcode146\nsrc/pkg/strconv/quote.go:146: // `s` will always be a single line when printed out.\nthis seems overexplaining to me. i'd drop bit, but you can leave it in if you think it adds information. (i don't)",
			"disapproval": false,
			"date": "2013-02-20 20:24:34.379100",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI don't know whether space is a control character. I would have guessed not.",
			"disapproval": false,
			"date": "2013-02-25 21:52:22.995270",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8e4103edc064 ***\n\nstrconv, fmt: clarify behavior of CanBackquote and \"%#q\".\nFixes issue 4858.\n\nR=golang-dev, bradfitz, r, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7387044",
			"disapproval": false,
			"date": "2013-02-25 22:34:17.645880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7387044/diff/11001/src/pkg/fmt/doc.go\nFile src/pkg/fmt/doc.go (right):\n\nhttps://codereview.appspot.com/7387044/diff/11001/src/pkg/fmt/doc.go#newcode77\nsrc/pkg/fmt/doc.go:77: for %q, print a raw (backquoted) string if strconv.CanBackquote() returns true, and the result will always be a single line;\ndrop parens and wrap this.  Also I think you can s/,.*//, since CanBackquote now says that.  It's redundant.\n\nhttps://codereview.appspot.com/7387044/diff/11001/src/pkg/strconv/quote.go\nFile src/pkg/strconv/quote.go (right):\n\nhttps://codereview.appspot.com/7387044/diff/11001/src/pkg/strconv/quote.go#newcode144\nsrc/pkg/strconv/quote.go:144: // Although '\\n' is fine within backquotes, CanBackquote\nI guess this was always a weird predicate, but now it's explicitly so.\n\nIn retrospect, I would've preferred CanBackquote (include \\n) and CanBackquoteSingleLine.\n\n*shrug*",
			"disapproval": false,
			"date": "2013-02-20 18:20:25.431100",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7387044/diff/10003/src/pkg/strconv/quote.go\nFile src/pkg/strconv/quote.go (right):\n\nhttps://codereview.appspot.com/7387044/diff/10003/src/pkg/strconv/quote.go#newcode145\nsrc/pkg/strconv/quote.go:145: // '\\n') is fine within backquotes, CanBackquote\ns/is/are/\n\nhttps://codereview.appspot.com/7387044/diff/10003/src/pkg/strconv/quote.go#newcode146\nsrc/pkg/strconv/quote.go:146: // will return false if they appear in s.\nhow about this, which helps clarify things better?\n\nCanBackquote reports whether the string s can be represented unchanged\nas a single-line backquoted string without control characters other than\nspace and tab.",
			"disapproval": false,
			"date": "2013-02-23 16:55:41.150560",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nOn 2013/02/20 18:20:25, bradfitz wrote:\n> https://codereview.appspot.com/7387044/diff/11001/src/pkg/fmt/doc.go#newcode77\n> src/pkg/fmt/doc.go:77: for %q, print a raw (backquoted) string if\n> strconv.CanBackquote() returns true, and the result will always be a single\n> line;\n> drop parens and wrap this.  Also I think you can s/,.*//, since CanBackquote now\n> says that.  It's redundant.\nDone.\n\n> https://codereview.appspot.com/7387044/diff/11001/src/pkg/strconv/quote.go#newcode144\n> src/pkg/strconv/quote.go:144: // Although '\\n' is fine within backquotes,\n> CanBackquote\n> I guess this was always a weird predicate, but now it's explicitly so.\n> \n> In retrospect, I would've preferred CanBackquote (include \\n) and\n> CanBackquoteSingleLine.\nYeah, i was also puzzled by the behavior of CanBackquote and that's why\ni asked on the issue tracker.\nFortunately, implementing a real CanBackquote won't be difficult and at\nleast we now give a warning in the docs.",
			"disapproval": false,
			"date": "2013-02-20 18:49:12.696240",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 24, 2013 at 12:59 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> PTAL.\r\n>\r\n> On Sun, Feb 24, 2013 at 12:55 AM, <r@golang.org> wrote:\r\n>\r\n>> https://codereview.appspot.**com/7387044/diff/10003/src/**\r\n>> pkg/strconv/quote.go#**newcode146<https://codereview.appspot.com/7387044/diff/10003/src/pkg/strconv/quote.go#newcode146>\r\n>> src/pkg/strconv/quote.go:146: // will return false if they appear in s.\r\n>> how about this, which helps clarify things better?\r\n>>\r\n>> CanBackquote reports whether the string s can be represented unchanged\r\n>> as a single-line backquoted string without control characters other than\r\n>> space and tab.\r\n>>\r\n> Great. This clarifies the rationale behind the behavior at the same.\r\n>\r\n... at the same time. (premature send)\r\n",
			"disapproval": false,
			"date": "2013-02-23 17:01:11.628330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7387044/diff/14004/src/pkg/strconv/quote.go\nFile src/pkg/strconv/quote.go (right):\n\nhttps://codereview.appspot.com/7387044/diff/14004/src/pkg/strconv/quote.go#newcode145\nsrc/pkg/strconv/quote.go:145: // will return false for any multiline strings so that\nOn 2013/02/20 20:24:34, r wrote:\n> it's not just multiline; `abc\n> ` is arguably one line.\n> how about (plus it's shorter':\n> \n> will return false if s contains a newline.\n\nIt's not just multiline. It returns false for all non-tab control characters.",
			"disapproval": false,
			"date": "2013-02-20 20:49:40.614230",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "whether it is or not, the meaning seems clear.\r\n",
			"disapproval": false,
			"date": "2013-02-25 21:53:05.915010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but check with rsc too",
			"disapproval": false,
			"date": "2013-02-23 18:14:32.829990",
			"approval": true
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7387044: strconv, fmt: clarify behavior of CanBackquote and \"%#q\".",
	"created": "2013-02-20 16:53:08.564910",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		14004,
		10003,
		23001,
		7003
	],
	"modified": "2013-02-25 22:34:23.506120",
	"closed": true,
	"issue": 7387044
}