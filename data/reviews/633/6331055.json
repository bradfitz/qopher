{
	"description": "exp/inotify: prevent data race\nFixes issue 3713.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 14:42:28.209508",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-24 17:01:12.985965",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-25 18:07:26.879909",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttp://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go#newcode120\nsrc/pkg/exp/inotify/inotify_linux.go:120: w.watches[path] = &watch{wd: uint32(wd), flags: flags}\nso AddWatch and RemoveWatch aren't safe for use from multiple goroutines?  Seems relatively easy to fix, protecting watches too.",
			"disapproval": false,
			"date": "2012-06-24 17:19:21.706392",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttp://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go#newcode120\nsrc/pkg/exp/inotify/inotify_linux.go:120: w.watches[path] = &watch{wd: uint32(wd), flags: flags}\nOn 2012/06/24 17:19:21, bradfitz wrote:\n> so AddWatch and RemoveWatch aren't safe for use from multiple goroutines?  Seems\n> relatively easy to fix, protecting watches too.\n\nPreventing concurrent modifications to the same object is responsibility of the code which is using the object.",
			"disapproval": false,
			"date": "2012-06-24 17:41:32.813657",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0a6c79a8aa2d ***\n\nexp/inotify: prevent data race\nFixes issue 3713.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6331055\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-25 18:08:02.671251",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 24, 2012 at 10:41 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n>\r\n> http://codereview.appspot.com/**6331055/diff/1/src/pkg/exp/**\r\n> inotify/inotify_linux.go<http://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go>\r\n> File src/pkg/exp/inotify/inotify_**linux.go (right):\r\n>\r\n> http://codereview.appspot.com/**6331055/diff/1/src/pkg/exp/**\r\n> inotify/inotify_linux.go#**newcode120<http://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go#newcode120>\r\n> src/pkg/exp/inotify/inotify_**linux.go:120: w.watches[path] = &watch{wd:\r\n> uint32(wd), flags: flags}\r\n> On 2012/06/24 17:19:21, bradfitz wrote:\r\n>\r\n>> so AddWatch and RemoveWatch aren't safe for use from multiple\r\n>>\r\n> goroutines?  Seems\r\n>\r\n>> relatively easy to fix, protecting watches too.\r\n>>\r\n>\r\n> Preventing concurrent modifications to the same object is responsibility\r\n> of the code which is using the object.\r\n>\r\n\r\nYes, unless documented and implemented otherwise.\r\n\r\nI'm proposing that an exp/inotify.Watcher be thread-safe, just like the\r\nunderlying C/system calls are (inotify_add_watch can be called from any\r\nthread after an inotify_init).\r\n\r\nIt's true that the default assumption is that methods aren't thread-safe\r\nunless documented otherwise, but this type is documented in terms\r\nof inotify_add_watch (\"AddWatch adds path to the watched file set. The\r\nflags are interpreted as described in inotify_add_watch(2).\"), which is\r\nmisleading at best.\r\n\r\nIt's such little extra work to make Go's wrapper also be thread-safe\r\n(typical wording: \"safe for concurrent use by multiple goroutines\"), that I\r\nargue we should, for consistency with C/syscalls.\r\n",
			"disapproval": false,
			"date": "2012-06-24 18:06:47.620058",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/24 18:06:47, bradfitz wrote:\n> I'm proposing that an exp/inotify.Watcher be thread-safe, just like the\n> underlying C/system calls are (inotify_add_watch can be called from any\n> thread after an inotify_init).\n\nMy patch fixes issue 3713, nothing more than that.\n\nIf there is need to protect the entire inotify object from concurrent modifications, it can be submitted as another patch.",
			"disapproval": false,
			"date": "2012-06-24 18:17:02.528503",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttp://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go#newcode51\nsrc/pkg/exp/inotify/inotify_linux.go:51: sync.Mutex\nThis should be mu sync.Mutex - we don't want packages importing this one to be able to call Lock and Unlock.\n\nhttp://codereview.appspot.com/6331055/diff/1/src/pkg/exp/inotify/inotify_linux.go#newcode121\nsrc/pkg/exp/inotify/inotify_linux.go:121: w.Lock()\nw.mu.Lock() // synchronize with readEvents goroutine\n...",
			"disapproval": false,
			"date": "2012-06-25 14:10:24.865260",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 17:57:15.569749",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/25 15:59:43, rsc wrote:\n> Is this really right? What if readEvents looks for the path before this code\n> manages to read it. I'm all for fixing the data race but this still seems to\n> have a race, just not one that is detectable by thread-sanitizer.\n> \n> It seems like AddWatch needs to hold the lock during InotifyAddWatch, and then\n> readEvents needs to acquire the lock as it does now.\n\nYou are right.\n\nTheoretically, the code can be rewritten to use a select on a channel instead of sync.Mutex. But such a rewrite would change a larger number of lines.",
			"disapproval": false,
			"date": "2012-06-25 18:04:41.471242",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this really right? What if readEvents looks for the path before this code manages to read it. I'm all for fixing the data race but this still seems to have a race, just not one that is detectable by thread-sanitizer.\n\nIt seems like AddWatch needs to hold the lock during InotifyAddWatch, and then readEvents needs to acquire the lock as it does now.",
			"disapproval": false,
			"date": "2012-06-25 15:59:43.422825",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6331055: exp/inotify: prevent data race",
	"created": "2012-06-24 17:01:10.456681",
	"patchsets": [
		1,
		7001,
		10001
	],
	"modified": "2012-06-25 18:29:41.565604",
	"closed": true,
	"issue": 6331055
}