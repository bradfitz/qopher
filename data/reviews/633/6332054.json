{
	"description": "runtime: add goroutine creation benchmark\nCurrent results on 2 core darwin/amd64:\nBenchmarkGoroutineChain\t\t351 ns/op\nBenchmarkGoroutineChain-2\t3840 ns/op\nBenchmarkGoroutineChain-4\t4040 ns/op\nBenchmarkConcGoroutineChain\t350 ns/op\nBenchmarkConcGoroutineChain-2\t875 ns/op\nBenchmarkConcGoroutineChain-4\t2027 ns/op",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go\nFile src/pkg/runtime/proc_test.go (right):\n\nhttp://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go#newcode135\nsrc/pkg/runtime/proc_test.go:135: func benchmarkGoroutineChain(b *testing.B, procs int) {\nOn 2012/06/24 15:11:33, r wrote:\n> this is a reasonable benchmark but i wouldn't call this a chain. a chain implies\n> more sequencing and maybe even some communication. this is just sequential\n> creation.\n> how about\n> benchmarkCreateGoroutines\n> that's also clearer about what it's measuring\n\nDone.\n\nhttp://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go#newcode148\nsrc/pkg/runtime/proc_test.go:148: for i := 0; i < procs; i++ {\nOn 2012/06/24 15:11:33, r wrote:\n> all you need here is close(c)\n\nI must be missing something. I want to wait until the last goroutine started running. How can close achieve that?",
			"disapproval": false,
			"date": "2012-06-25 07:14:10.302037",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go\nFile src/pkg/runtime/proc_test.go (right):\n\nhttp://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go#newcode135\nsrc/pkg/runtime/proc_test.go:135: func benchmarkGoroutineChain(b *testing.B, procs int) {\nthis is a reasonable benchmark but i wouldn't call this a chain. a chain implies more sequencing and maybe even some communication. this is just sequential creation.\nhow about\nbenchmarkCreateGoroutines\nthat's also clearer about what it's measuring\n\nhttp://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go#newcode138\nsrc/pkg/runtime/proc_test.go:138: f = func(n int) {\ncute setup trick\n\nhttp://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go#newcode140\nsrc/pkg/runtime/proc_test.go:140: c <- true\nmake this <-c and use close below\n\nhttp://codereview.appspot.com/6332054/diff/7001/src/pkg/runtime/proc_test.go#newcode148\nsrc/pkg/runtime/proc_test.go:148: for i := 0; i < procs; i++ {\nall you need here is close(c)",
			"disapproval": false,
			"date": "2012-06-24 15:11:33.661178",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for Rob.\n\nhttp://codereview.appspot.com/6332054/diff/4003/src/pkg/runtime/proc_test.go\nFile src/pkg/runtime/proc_test.go (right):\n\nhttp://codereview.appspot.com/6332054/diff/4003/src/pkg/runtime/proc_test.go#newcode131\nsrc/pkg/runtime/proc_test.go:131: func BenchmarkConcCreateGoroutines(b *testing.B) {\nIt would be nicer if this sorted next to the other one, so remove Conc from the middle and add something to the end. Parallel is probably a clearer suffix.\n\nhttp://codereview.appspot.com/6332054/diff/4003/src/pkg/runtime/proc_test.go#newcode146\nsrc/pkg/runtime/proc_test.go:146: go f(b.N)\nIt seems like this should be b.N/procs, so that the benchmark does the same amount of work regardless of $GOMAXPROCS.",
			"disapproval": false,
			"date": "2012-06-25 12:29:29.212587",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-24 12:53:35.172314",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after addressing rsc's comments",
			"disapproval": false,
			"date": "2012-06-25 15:31:03.317819",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-27 18:07:43.550378",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6c2875dfccfe ***\n\nruntime: add goroutine creation benchmark\nCurrent results on 2 core darwin/amd64:\nBenchmarkGoroutineChain\t\t351 ns/op\nBenchmarkGoroutineChain-2\t3840 ns/op\nBenchmarkGoroutineChain-4\t4040 ns/op\nBenchmarkConcGoroutineChain\t350 ns/op\nBenchmarkConcGoroutineChain-2\t875 ns/op\nBenchmarkConcGoroutineChain-4\t2027 ns/op\n\nR=r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6332054",
			"disapproval": false,
			"date": "2012-06-27 17:52:44.925291",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 25, 2012 at 4:29 PM, <rsc@golang.org> wrote:\r\n\r\n> LGTM but wait for Rob.\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6332054/diff/4003/src/pkg/**\r\n> runtime/proc_test.go<http://codereview.appspot.com/6332054/diff/4003/src/pkg/runtime/proc_test.go>\r\n> File src/pkg/runtime/proc_test.go (right):\r\n>\r\n> http://codereview.appspot.com/**6332054/diff/4003/src/pkg/**\r\n> runtime/proc_test.go#**newcode131<http://codereview.appspot.com/6332054/diff/4003/src/pkg/runtime/proc_test.go#newcode131>\r\n> src/pkg/runtime/proc_test.go:**131: func BenchmarkConcCreateGoroutines(**b\r\n> *testing.B) {\r\n> It would be nicer if this sorted next to the other one, so remove Conc\r\n> from the middle and add something to the end. Parallel is probably a\r\n> clearer suffix.\r\n>\r\n\r\nDone\r\n\r\n\r\n>\r\n> http://codereview.appspot.com/**6332054/diff/4003/src/pkg/**\r\n> runtime/proc_test.go#**newcode146<http://codereview.appspot.com/6332054/diff/4003/src/pkg/runtime/proc_test.go#newcode146>\r\n> src/pkg/runtime/proc_test.go:**146: go f(b.N)\r\n> It seems like this should be b.N/procs, so that the benchmark does the\r\n> same amount of work regardless of $GOMAXPROCS.\r\n>\r\n\r\nDone\r\n\r\n\r\n\r\n>\r\n> http://codereview.appspot.com/**6332054/<http://codereview.appspot.com/6332054/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-27 17:53:47.310169",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6332054: runtime: add goroutine creation benchmark",
	"created": "2012-06-24 11:28:06.165266",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		4003,
		12001,
		12002
	],
	"modified": "2012-06-27 18:07:43.613147",
	"closed": true,
	"issue": 6332054
}