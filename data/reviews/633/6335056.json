{
	"description": "path/filepath: avoid allocation in Clean of cleaned path\n\nAlternative to http://codereview.appspot.com/6330044.\n\nFixes issue 3681.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"hanwen@google.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-26 15:13:04.824302",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\ni like this. i was a little bothered by the expense of hanwen's proposal, not to mention the concern of two algorithms for the same problem. this is nicer.",
			"disapproval": false,
			"date": "2012-06-26 15:02:03.448023",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-26 15:07:01.830023",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"hanwen@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6335056/diff/6001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6335056/diff/6001/src/pkg/path/filepath/path.go#newcode20\nsrc/pkg/path/filepath/path.go:20: type lazybuf struct {\n// You may only append up to len(s) bytes.\n\nhttp://codereview.appspot.com/6335056/diff/6001/src/pkg/path/path.go\nFile src/pkg/path/path.go (right):\n\nhttp://codereview.appspot.com/6335056/diff/6001/src/pkg/path/path.go#newcode17\nsrc/pkg/path/path.go:17: type lazybuf struct {\n// You may only append up to len(s) bytes.",
			"disapproval": false,
			"date": "2012-06-26 16:03:50.858328",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-26 14:49:14.797168",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Tuesday, June 26, 2012 11:49:14 AM UTC-3, rsc wrote:\r\n>\r\n> Reviewers: golang-dev_googlegroups.com, \r\n>\r\n> Message: \r\n> Hello golang-dev@googlegroups.com, \r\n>\r\n> I'd like you to review this change to \r\n> https://code.google.com/p/go/ \r\n>\r\n>\r\n> Description: \r\n> path/filepath: avoid allocation in Clean of cleaned path \r\n>\r\n> Alternative to http://codereview.appspot.com/6330044. \r\n>\r\n> Fixes issue 3681. \r\n>\r\n> Please review this at http://codereview.appspot.com/6335056/ \r\n>\r\n> Affected files: \r\n>    M src/pkg/path/filepath/path.go \r\n>\r\n>\r\n> Index: src/pkg/path/filepath/path.go \r\n> =================================================================== \r\n> --- a/src/pkg/path/filepath/path.go \r\n> +++ b/src/pkg/path/filepath/path.go \r\n> @@ -13,6 +13,43 @@ \r\n>           \"strings\" \r\n>   ) \r\n>\r\n> +// A lazybuf is a lazily constructed path buffer. \r\n> +// It supports append, reading previously appended bytes, \r\n> +// and retrieving the final string. It does not allocate a buffer \r\n> +// to hold the output until that output diverges from s. \r\n> +type lazybuf struct { \r\n> +        s   string \r\n> +        buf []byte \r\n> +        w   int \r\n> +} \r\n> + \r\n> +func (b *lazybuf) index(i int) byte { \r\n> +        if b.buf != nil { \r\n> +                return b.buf[i] \r\n> +        } \r\n> +        return b.s[i] \r\n> +} \r\n> + \r\n> +func (b *lazybuf) append(c byte) { \r\n> +        if b.buf == nil { \r\n> +                if b.w < len(b.s) && b.s[b.w] == c { \r\n> +                        b.w++ \r\n> +                        return \r\n> +                } \r\n> +                b.buf = make([]byte, len(b.s)) \r\n> +                copy(b.buf, b.s[:b.w]) \r\n> +        } \r\n> +        b.buf[b.w] = c \r\n> +        b.w++ \r\n> +} \r\n> + \r\n> +func (b *lazybuf) string() string { \r\n> +        if b.buf == nil { \r\n> +                return b.s[:b.w] \r\n> +        } \r\n> +        return string(b.buf[:b.w]) \r\n> +} \r\n> + \r\n>   const ( \r\n>           Separator     = os.PathSeparator \r\n>           ListSeparator = os.PathListSeparator \r\n> @@ -57,11 +94,11 @@ \r\n>           //        dotdot is index in buf where .. must stop, either \r\n> because \r\n>           //                it is the leading slash or it is a leading \r\n> ../../.. prefix. \r\n>           n := len(path) \r\n> -        buf := []byte(path) \r\n> -        r, w, dotdot := 0, 0, 0 \r\n> +        out := lazybuf{s: path} \r\n> +        r, dotdot := 0, 0 \r\n>           if rooted { \r\n> -                buf[0] = Separator \r\n> -                r, w, dotdot = 1, 1, 1 \r\n> +                out.append(Separator) \r\n> +                r, dotdot = 1, 1 \r\n>           } \r\n>\r\n>           for r < n { \r\n> @@ -76,46 +113,40 @@ \r\n>                           // .. element: remove to last separator \r\n>                           r += 2 \r\n>                           switch { \r\n> -                        case w > dotdot: \r\n> +                        case out.w > dotdot: \r\n>                                   // can backtrack \r\n> -                                w-- \r\n> -                                for w > dotdot && \r\n> !os.IsPathSeparator(buf[w]) { \r\n> -                                        w-- \r\n> +                                out.w-- \r\n> +                                for out.w > dotdot && \r\n> !os.IsPathSeparator(out.index(out.w)) { \r\n> +                                        out.w-- \r\n>                                   } \r\n>                           case !rooted: \r\n>                                   // cannot backtrack, but not rooted, so \r\n> append .. element. \r\n> -                                if w > 0 { \r\n> -                                        buf[w] = Separator \r\n> -                                        w++ \r\n> +                                if out.w > 0 { \r\n> +                                        out.append(Separator) \r\n>                                   } \r\n> -                                buf[w] = '.' \r\n> -                                w++ \r\n> -                                buf[w] = '.' \r\n> -                                w++ \r\n> -                                dotdot = w \r\n> +                                out.append('.') \r\n> +                                out.append('.') \r\n> +                                dotdot = out.w \r\n>                           } \r\n>                   default: \r\n>                           // real path element. \r\n>                           // add slash if needed \r\n> -                        if rooted && w != 1 || !rooted && w != 0 { \r\n> -                                buf[w] = Separator \r\n> -                                w++ \r\n> +                        if rooted && out.w != 1 || !rooted && out.w != 0 \r\n> { \r\n> +                                out.append(Separator) \r\n>                           } \r\n>                           // copy element \r\n>                           for ; r < n && !os.IsPathSeparator(path[r]); r++ \r\n> { \r\n> -                                buf[w] = path[r] \r\n> -                                w++ \r\n> +                                out.append(path[r]) \r\n>                           } \r\n>                   } \r\n>           } \r\n>\r\n>           // Turn empty string into \".\" \r\n> -        if w == 0 { \r\n> -                buf[w] = '.' \r\n> -                w++ \r\n> +        if out.w == 0 { \r\n> +                out.append('.') \r\n>           } \r\n>\r\n> -        return FromSlash(vol + string(buf[0:w])) \r\n> +        return FromSlash(vol + out.string()) \r\n>   } \r\n>\r\n>   // ToSlash returns the result of replacing each separator character \r\n>\r\n>\r\n>",
			"disapproval": false,
			"date": "2012-06-26 15:17:31.960922",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"hanwen@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e0feccd7c100 ***\n\npath/filepath: avoid allocation in Clean of cleaned path\n\nAlternative to http://codereview.appspot.com/6330044.\n\nFixes issue 3681.\n\nR=golang-dev, r, hanwen, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6335056",
			"disapproval": false,
			"date": "2012-06-27 20:52:41.962905",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6335056: path/filepath: avoid allocation in Clean of cleaned path",
	"created": "2012-06-26 14:40:03.446127",
	"patchsets": [
		1,
		2001,
		4002,
		6001,
		9001
	],
	"modified": "2012-06-27 20:52:43.082016",
	"closed": true,
	"issue": 6335056
}