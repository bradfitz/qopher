{
	"description": "path/filepath: short circuit Clean() if path is already clean.\n\nFixes issue 3681",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go#newcode23\nsrc/pkg/path/filepath/path.go:23: func isClean(p string) bool {\nOn 2012/06/21 15:44:06, r wrote:\n> i worry that this is a separate implementation of the same algorithm and that it\n> could lead to subtle bugs should they differ. i'm also not sure it needs to be\n> this hard to do.\nI dabbled with adding some sort of copy-on-write to Clean(), but it wasn't obvious to me how to do it cleanly and efficiently. If you really want, I can try though.\n\nhttp://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go#newcode34\nsrc/pkg/path/filepath/path.go:34: for i := 0; i <= len(p); i++ {\nOn 2012/06/21 15:44:06, r wrote:\n> that <= looks like a bug but it's not, so it deserves a comment.\n> but i would change the loop to be per component, which should simplify the\n> logic. with the special cases done up top, it should be something like:\n> for {\n>   elem, path, done := nextElem(path) // path will be \"\" for cases like \"//\"\n\nNice; string slicing doesn't generate extra garbage, does it?\n\nis there a reason the Clean function itself doesn't work like that?\n\n>   if done { return true }\n>   switch elem {\n>   case \".\", \"..\", \"\": return false\n>   }\n> }\n> return true",
			"disapproval": false,
			"date": "2012-06-21 15:52:54.512523",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path.go#newcode30\nsrc/pkg/path/filepath/path.go:30: // IsClean returns true if running Clean() would change the path name.\nOn 2012/06/25 17:54:20, r wrote:\n> do you really want to export this function? i believe it was not exported in\n> earlier editions.\n> \n> the crux is this: if it's internal, it's advisory and can be simple and fast and\n> not always correct, erring on the side of \"false\"\n> if it's exported, it must be completely correct in all cases, and that's harder.\n\nmade it internal (you asked to have it tested separately earlier; the tests are in a different package). \n\nIMO it should always be correct :)\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path.go#newcode35\nsrc/pkg/path/filepath/path.go:35: if path == \"/\" || path == \".\" {\nOn 2012/06/25 17:54:20, r wrote:\n> i believe (but please check) that \"..\" is also clean.\n\nit is tested for already, and handled correctly. I'd prefer to have fewer speciall cases.  Removed \"/\" too.\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path_test.go#newcode93\nsrc/pkg/path/filepath/path_test.go:93: func TestClean(t *testing.T) {\nOn 2012/06/25 17:54:20, r wrote:\n> you still need to test isClean separately. if it's an exported function, it must\n> be correct.\n\nmade it internal.",
			"disapproval": false,
			"date": "2012-06-26 01:07:05.141806",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-26 04:52:53.355853",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "don't export IsClean. read rsc's last comment again to see how to achieve this.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-06-26 04:54:51.278633",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path.go#newcode30\nsrc/pkg/path/filepath/path.go:30: // IsClean returns true if running Clean() would change the path name.\ndo you really want to export this function? i believe it was not exported in earlier editions.\n\nthe crux is this: if it's internal, it's advisory and can be simple and fast and not always correct, erring on the side of \"false\"\nif it's exported, it must be completely correct in all cases, and that's harder.\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path.go#newcode35\nsrc/pkg/path/filepath/path.go:35: if path == \"/\" || path == \".\" {\ni believe (but please check) that \"..\" is also clean.\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/9002/src/pkg/path/filepath/path_test.go#newcode93\nsrc/pkg/path/filepath/path_test.go:93: func TestClean(t *testing.T) {\nyou still need to test isClean separately. if it's an exported function, it must be correct.",
			"disapproval": false,
			"date": "2012-06-25 17:54:20.292357",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, as written the new code actually allocates more than the old\r\ncode when it does real work, due to the use of the []string.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-26 14:50:21.348717",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-21 14:38:04.701081",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "you can export it for testing (only) by creating a file named\r\nexport_test.go that contains\r\n\r\npackage filepath\r\nvar IsClean = isClean\r\n",
			"disapproval": false,
			"date": "2012-06-26 01:09:24.908916",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "you should be testing isClean directly.\n\nhttp://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go#newcode23\nsrc/pkg/path/filepath/path.go:23: func isClean(p string) bool {\ni worry that this is a separate implementation of the same algorithm and that it could lead to subtle bugs should they differ. i'm also not sure it needs to be this hard to do.\n\nhttp://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go#newcode34\nsrc/pkg/path/filepath/path.go:34: for i := 0; i <= len(p); i++ {\nthat <= looks like a bug but it's not, so it deserves a comment.\nbut i would change the loop to be per component, which should simplify the logic. with the special cases done up top, it should be something like:\nfor {\n  elem, path, done := nextElem(path) // path will be \"\" for cases like \"//\"\n  if done { return true }\n  switch elem {\n  case \".\", \"..\", \"\": return false\n  }\n}\nreturn true",
			"disapproval": false,
			"date": "2012-06-21 15:44:06.069378",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i like this now (thanks for your patience) but i'd like rsc to approve it.\n\nhttp://codereview.appspot.com/6330044/diff/6002/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/6002/src/pkg/path/filepath/path.go#newcode30\nsrc/pkg/path/filepath/path.go:30: // IsClean returns true if running Clean() would change the path name.\ns/IsClean/isClean/\n\ns/returns true if/reports whether/\n\n(that's the style we're pushing for nowadays. \"reports true\" doesn't say what \"false\" means.)",
			"disapproval": false,
			"date": "2012-06-26 13:58:04.493227",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Once this code looks good, you should do the same to path. But we\r\nmight as well iterate on just one.\r\n",
			"disapproval": false,
			"date": "2012-06-21 15:48:15.860360",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go#newcode23\nsrc/pkg/path/filepath/path.go:23: func isClean(p string) bool {\ni think this general approach is fine. we just need to make it tidier.\n\nhttp://codereview.appspot.com/6330044/diff/2001/src/pkg/path/filepath/path.go#newcode34\nsrc/pkg/path/filepath/path.go:34: for i := 0; i <= len(p); i++ {\nreslicing like this generates no garbage.",
			"disapproval": false,
			"date": "2012-06-21 16:43:32.038318",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2012-06-22 05:30:28.583969",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/26 04:54:51, r wrote:\n> don't export IsClean. read rsc's last comment again to see how to achieve this.\n\nit's not exported now.",
			"disapproval": false,
			"date": "2012-06-26 12:59:09.055523",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry, but I am having a hard time believing that this rewrite is\r\ncorrect and also that it will stay correct. This couples one copy of\r\nthe code with a second copy, and while isClean is being tested, there\r\nis no version of Clean being tested separately from isClean, so there\r\nis no real guarantee that the logic in Clean actually matches the\r\nlogic in isClean. These seem guaranteed to diverge over time.\r\n\r\nI will mail out a counter-proposal.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-26 14:46:05.275961",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-06-28 02:23:10.712743",
			"approval": false
		}
	],
	"owner_email": "hanwen@google.com",
	"private": false,
	"base_url": "",
	"owner": "hanwen",
	"subject": "code review 6330044: path/filepath: short circuit Clean() if path is already...",
	"created": "2012-06-21 14:29:02.637387",
	"patchsets": [
		1,
		2001,
		9002,
		12001,
		14001,
		15001,
		6002
	],
	"modified": "2012-06-28 02:23:10.712743",
	"closed": true,
	"issue": 6330044
}