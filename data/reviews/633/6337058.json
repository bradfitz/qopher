{
	"description": "cmd/gc: cache itab lookup in convT2I.\n\nThere may be further savings if convT2I can avoid the function call\nif the cache is good and T is uintptr-shaped, a la convT2E, but that\nwill be a follow-up CL.\n\nsrc/pkg/runtime:\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkConvT2ISmall             43           15  -64.01%\nBenchmarkConvT2IUintptr           45           14  -67.48%\nBenchmarkConvT2ILarge            130          101  -22.31%\n\ntest/bench/go1:\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    8588997000   8499058000   -1.05%\nBenchmarkFannkuch11      5300392000   5358093000   +1.09%\nBenchmarkGobDecode         30295580     31040190   +2.46%\nBenchmarkGobEncode         18102070     17675650   -2.36%\nBenchmarkGzip             774191400    771591400   -0.34%\nBenchmarkGunzip           245915100    247464100   +0.63%\nBenchmarkJSONEncode       123577000    121423050   -1.74%\nBenchmarkJSONDecode       451969800    596256200  +31.92%\nBenchmarkMandelbrot200     10060050     10072880   +0.13%\nBenchmarkParse             10989840     11037710   +0.44%\nBenchmarkRevcomp         1782666000   1716864000   -3.69%\nBenchmarkTemplate         798286600    723234400   -9.40%",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"go.peter.90@gmail.com",
		"daniel.morsing@gmail.com",
		"dave@cheney.net",
		"uriel@berlinblue.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"cw@f00f.org"
	],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 26 June 2012 10:58,  <nigeltao@golang.org> wrote:\r\n> BenchmarkJSONDecode \u00a0 \u00a0 \u00a0 451969800 \u00a0 \u00a0596256200 \u00a0+31.92%\r\n\r\nI'm not sure why JSONDecode regressed so much on linux/amd64. I'm\r\nstill poking at it, but I would be curious to know if it's\r\nreproducible for other people. I'm also curious what effect it has on\r\nARM.\r\n",
			"disapproval": false,
			"date": "2012-06-26 18:01:35.620121",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I assume BenchmarkJSONDecode isn't actually 32% slower, and this is just\r\nbecause code (stacks?) moved around and we got unlucky.\r\n\r\nBut makes me question the value of that/these benchmarks.\r\n\r\nIs BenchmarkTemplate actually faster or did we just get lucky there?\r\n\r\n\r\nOn Tue, Jun 26, 2012 at 10:58 AM, <nigeltao@golang.org> wrote:\r\n\r\n> Reviewers: rsc,\r\n>\r\n> Message:\r\n> Hello rsc@golang.org (cc: daniel.morsing@gmail.com, dave@cheney.net,\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: cache itab lookup in convT2I.\r\n>\r\n> There may be further savings if convT2I can avoid the function call\r\n> if the cache is good and T is uintptr-shaped, a la convT2E, but that\r\n> will be a follow-up CL.\r\n>\r\n> src/pkg/runtime:\r\n> benchmark                  old ns/op    new ns/op    delta\r\n> BenchmarkConvT2ISmall             43           15  -64.01%\r\n> BenchmarkConvT2IUintptr           45           14  -67.48%\r\n> BenchmarkConvT2ILarge            130          101  -22.31%\r\n>\r\n> test/bench/go1:\r\n> benchmark                 old ns/op    new ns/op    delta\r\n> BenchmarkBinaryTree17    8588997000   8499058000   -1.05%\r\n> BenchmarkFannkuch11      5300392000   5358093000   +1.09%\r\n> BenchmarkGobDecode         30295580     31040190   +2.46%\r\n> BenchmarkGobEncode         18102070     17675650   -2.36%\r\n> BenchmarkGzip             774191400    771591400   -0.34%\r\n> BenchmarkGunzip           245915100    247464100   +0.63%\r\n> BenchmarkJSONEncode       123577000    121423050   -1.74%\r\n> BenchmarkJSONDecode       451969800    596256200  +31.92%\r\n> BenchmarkMandelbrot200     10060050     10072880   +0.13%\r\n> BenchmarkParse             10989840     11037710   +0.44%\r\n> BenchmarkRevcomp         1782666000   1716864000   -3.69%\r\n> BenchmarkTemplate         798286600    723234400   -9.40%\r\n>\r\n> Please review this at http://codereview.appspot.com/**6337058/<http://codereview.appspot.com/6337058/>\r\n>\r\n> Affected files:\r\n>  M src/cmd/5g/gsubr.c\r\n>  M src/cmd/6g/gsubr.c\r\n>  M src/cmd/8g/gsubr.c\r\n>  M src/cmd/gc/builtin.c\r\n>  M src/cmd/gc/go.h\r\n>  M src/cmd/gc/lex.c\r\n>  M src/cmd/gc/obj.c\r\n>  M src/cmd/gc/reflect.c\r\n>  M src/cmd/gc/walk.c\r\n>  M src/pkg/runtime/iface.c\r\n>  M src/pkg/runtime/iface_test.go\r\n>  M test/convT2X.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-26 18:01:53.797322",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: daniel.morsing@gmail.com, dave@cheney.net, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-26 17:58:38.171806",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 26 June 2012 11:01, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Is\u00a0BenchmarkTemplate actually faster or did we just get lucky there?\r\n\r\nI'm willing to believe so. For example, Mr. Cheney's hammer suggests\r\nthat \"go test -test.bench=Template\" does a million more convT2Is (out\r\nof 6 or 7 million for -test.bench=.) than \"go test\r\n-test.bench=Fannkuch\". But that's a pretty crude metric: it doesn't\r\nseparate BenchmarkTemplate's conversions from package testing's\r\nconversions, and the raw number depends on the number of iterations,\r\nwhich depends on timings.\r\n\r\nStill poking at JSONDecode...\r\n",
			"disapproval": false,
			"date": "2012-06-26 18:25:36.736320",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, 2012-06-26 at 11:01 -0700, Nigel Tao wrote:\r\n> On 26 June 2012 10:58,  <nigeltao@golang.org> wrote:\r\n> > BenchmarkJSONDecode       451969800    596256200  +31.92%\r\n> \r\n> I'm not sure why JSONDecode regressed so much on linux/amd64. I'm\r\n> still poking at it, but I would be curious to know if it's\r\n> reproducible for other people. I'm also curious what effect it has on\r\n> ARM.\r\n\r\nThe benchmark hit on JSONDecode pops up on my machine as well\r\n\r\nbenchmark                 old ns/op    new ns/op    delta\r\nBenchmarkJSONDecode       304121200    414444200  +36.28%\r\n\r\nIt might be better to put the cache pointer loading inside itab(). If we\r\ndecide to inline parts of the interface generation for T2I conversions\r\n(like OEFACE), itab() will called separately, and we would have to\r\nconstruct the cache pointer loading branch at every call site.\r\n\r\nAs an aside, I think you could generate these interfaces at link time,\r\nbut that would be a much bigger task and it would complicate things so\r\nmuch that I don't know if it's worth it.\r\n\r\nRegards,\r\nDaniel Morsing\r\n\r\n",
			"disapproval": false,
			"date": "2012-06-26 19:39:59.702460",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"go.peter.90@gmail.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/26 18:01:35, nigeltao wrote:\n> On 26 June 2012 10:58,  <mailto:nigeltao@golang.org> wrote:\n> > BenchmarkJSONDecode &nbsp; &nbsp; &nbsp; 451969800 &nbsp; &nbsp;596256200 &nbsp;+31.92%\n> \n> I'm not sure why JSONDecode regressed so much on linux/amd64. I'm\n> still poking at it, but I would be curious to know if it's\n> reproducible for other people.\n\nYes.\n\n$ uname -a\nLinux M13 3.2.0-23-generic #36-Ubuntu SMP Tue Apr 10 20:39:51 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n\nIntel Core i5-2390T CPU @ 2.70GHz \u00d7 4 \n\n$ hg id\nd8bd45866999+ tip\n\nbenchmark                old ns/op      new ns/op      delta\nBenchmarkJSONEncode     70,209,625     71,818,925     +2.24%\nBenchmarkJSONDecode    243,272,600    336,194,600    +27.64%\n\nPeter",
			"disapproval": false,
			"date": "2012-06-26 19:50:19.066320",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 26 June 2012 11:01, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I assume\u00a0BenchmarkJSONDecode isn't actually 32% slower, and this is just\r\n> because code (stacks?) moved around and we got unlucky.\r\n\r\nThe CPU profile of BenchmarkJSONDecode, after this patch, starts with:\r\n\r\nTotal: 363 samples\r\n      36   9.9%   9.9%       36   9.9% runtime.memmove\r\n      32   8.8%  18.7%       59  16.3% runtime.newstack\r\n      27   7.4%  26.2%       59  16.3% runtime.oldstack\r\n      23   6.3%  32.5%       48  13.2% reflect.StructTag.Get\r\n      16   4.4%  36.9%      214  59.0% encoding/json.(*decodeState).object\r\n      13   3.6%  40.5%       36   9.9% encoding/json.(*decodeState).indirect\r\n      13   3.6%  44.1%       21   5.8% encoding/json.(*decodeState).scanWhile\r\n      12   3.3%  47.4%       12   3.3% strconv.contains\r\n\r\nHmm...\r\n",
			"disapproval": false,
			"date": "2012-06-26 20:00:32.177955",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"go.peter.90@gmail.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/arm:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   37654663000  36924836000   -1.94%\nBenchmarkFannkuch11     34433411000  34773925000   +0.99%\nBenchmarkGobDecode        115759300    113108800   -2.29%\nBenchmarkGobEncode         61251820     60582880   -1.09%\nBenchmarkGzip            5657135000   5548889000   -1.91%\nBenchmarkGunzip          1191772000   1189667000   -0.18%\nBenchmarkJSONEncode       805096400    733081200   -8.94%\nBenchmarkJSONDecode      2685211000   2287323000  -14.82%\nBenchmarkMandelbrot200     45551140     45515140   -0.08%\nBenchmarkParse             60627440     55930780   -7.75%\nBenchmarkRevcomp          143875100    145361300   +1.03%\nBenchmarkTemplate        5809356000   5175629000  -10.91%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.63         6.79    1.02x\nBenchmarkGobEncode            12.53        12.67    1.01x\nBenchmarkGzip                  3.43         3.50    1.02x\nBenchmarkGunzip               16.28        16.31    1.00x\nBenchmarkJSONEncode            2.41         2.65    1.10x\nBenchmarkJSONDecode            0.72         0.85    1.18x\nBenchmarkParse                 0.96         1.04    1.08x\nBenchmarkRevcomp              17.67        17.49    0.99x\nBenchmarkTemplate              0.33         0.37    1.12x",
			"disapproval": false,
			"date": "2012-06-26 23:37:03.316527",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 26 June 2012 12:38, Daniel Morsing <daniel.morsing@gmail.com> wrote:\r\n> It might be better to put the cache pointer loading inside itab(). If we\r\n> decide to inline parts of the interface generation for T2I conversions\r\n> (like OEFACE), itab() will called separately, and we would have to\r\n> construct the cache pointer loading branch at every call site.\r\n\r\nPossibly. The branch may or may not be cheaper than a call, though.\r\n\r\nNote also that itab is used by convI2I, not just convT2I. If package a\r\ndeclares a type T and returns it as I1, and package b takes an I1 and\r\nconverts it to an I2, then static analysis can't easily determine that\r\nit needs to reserve a word to cache the T-to-I2 conversion. I suppose\r\nthat you could just pass a NULL **Itab in that case, but it's not a\r\nclear win.\r\n\r\n\r\n> As an aside, I think you could generate these interfaces at link time,\r\n> but that would be a much bigger task and it would complicate things so\r\n> much that I don't know if it's worth it.\r\n\r\nYeah, I think you could, but it's out of scope for this change. One\r\nthing is that you want the linker to eliminate the code for type T if\r\nit's unreachable from main.main, but adding init code to populate the\r\nitab cache creates a reference to T, so (riffing off the top of my\r\nhead) you have to teach the toolchain about weak inits.\r\n",
			"disapproval": false,
			"date": "2012-06-26 20:19:58.935350",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"go.peter.90@gmail.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd really like to know what's up with the JSON performance regression. Dave's numbers seem to suggest it's some weird alignment/size issue. What does a 386 version of the test do?\n\nIn the meantime, Have another review comment.\n\nhttp://codereview.appspot.com/6337058/diff/11003/src/pkg/runtime/iface.c\nFile src/pkg/runtime/iface.c (right):\n\nhttp://codereview.appspot.com/6337058/diff/11003/src/pkg/runtime/iface.c#newcode198\nsrc/pkg/runtime/iface.c:198: if(!*cache)\nThe runtime package has code for atomically storing a pointer that isn't just a plain assignment. I guess there isn't a guarantee for it being atomic.\n\nSince itab() is already synchronized, the change should just be:\n\nItab *tmp;\ntmp = runtime.atomicloadp(cache);\nif(!tmp) {\n    tmp = itab(inter, t, 0);\n    runtime.atomicstorep(cache, tmp);\n}\nret->tab = tmp;",
			"disapproval": false,
			"date": "2012-06-29 13:56:57.743997",
			"approval": false
		},
		{
			"sender": "uriel@berlinblue.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 29, 2012 at 3:56 PM,  <daniel.morsing@gmail.com> wrote:\r\n> I'd really like to know what's up with the JSON performance regression.\r\n> Dave's numbers seem to suggest it's some weird alignment/size issue.\r\n\r\nI think Russ has mentioned in the past that the JSON benchmarks\r\nnumbers jump around if you look at them funny, seems to be some\r\nalignment thing, there was some discussion about it some weeks ago in\r\nthe list, IIRC the conclusion was \"dark magic\", ie., the JSON numbers\r\nare best taken with a huge grain of salt.\r\n\r\nUriel\r\n\r\n\r\n>\r\n> In the meantime, Have another review comment.\r\n>\r\n>\r\n> http://codereview.appspot.com/6337058/diff/11003/src/pkg/runtime/iface.c\r\n> File src/pkg/runtime/iface.c (right):\r\n>\r\n> http://codereview.appspot.com/6337058/diff/11003/src/pkg/runtime/iface.c#newcode198\r\n> src/pkg/runtime/iface.c:198: if(!*cache)\r\n> The runtime package has code for atomically storing a pointer that isn't\r\n> just a plain assignment. I guess there isn't a guarantee for it being\r\n> atomic.\r\n>\r\n> Since itab() is already synchronized, the change should just be:\r\n>\r\n> Itab *tmp;\r\n> tmp = runtime.atomicloadp(cache);\r\n> if(!tmp) {\r\n>     tmp = itab(inter, t, 0);\r\n>     runtime.atomicstorep(cache, tmp);\r\n> }\r\n> ret->tab = tmp;\r\n>\r\n> http://codereview.appspot.com/6337058/\r\n",
			"disapproval": false,
			"date": "2012-06-29 21:53:02.005927",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"go.peter.90@gmail.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Had a closer look.\n\nhttp://codereview.appspot.com/6337058/diff/3/src/cmd/gc/builtin.c\nFile src/cmd/gc/builtin.c (right):\n\nhttp://codereview.appspot.com/6337058/diff/3/src/cmd/gc/builtin.c#newcode44\nsrc/cmd/gc/builtin.c:44: \"func @\\\"\\\".convT2I(@\\\"\\\".typ *byte, @\\\"\\\".typ2 *byte, @\\\"\\\".cache *uintptr, @\\\"\\\".elem any) (@\\\"\\\".ret any)\\n\"\nThis needs to have been generated from cmd/gc/runtime.go instead of being edited in manually.\n\nhttp://codereview.appspot.com/6337058/diff/3/src/pkg/runtime/iface.c\nFile src/pkg/runtime/iface.c (right):\n\nhttp://codereview.appspot.com/6337058/diff/3/src/pkg/runtime/iface.c#newcode198\nsrc/pkg/runtime/iface.c:198: if(!*cache)\nDoesn't this need some sort of synchronization? Multiple goroutines may try to modify *cache at once.",
			"disapproval": false,
			"date": "2012-06-26 20:32:59.723831",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, 2012-06-26 at 13:19 -0700, Nigel Tao wrote:\r\n> On 26 June 2012 12:38, Daniel Morsing <daniel.morsing@gmail.com> wrote:\r\n> > It might be better to put the cache pointer loading inside itab(). If we\r\n> > decide to inline parts of the interface generation for T2I conversions\r\n> > (like OEFACE), itab() will called separately, and we would have to\r\n> > construct the cache pointer loading branch at every call site.\r\n> \r\n> Possibly. The branch may or may not be cheaper than a call, though.\r\n> \r\n> Note also that itab is used by convI2I, not just convT2I. If package a\r\n> declares a type T and returns it as I1, and package b takes an I1 and\r\n> converts it to an I2, then static analysis can't easily determine that\r\n> it needs to reserve a word to cache the T-to-I2 conversion. I suppose\r\n> that you could just pass a NULL **Itab in that case, but it's not a\r\n> clear win.\r\n> \r\n\r\nI think we can disregard my earlier comment. itab() has to be exposed to\r\nthe compiler somehow if we go down the inlining route, so we could just\r\nput the cache loading inside the wrapper function that exposes itab().\r\n\r\n\r\n",
			"disapproval": false,
			"date": "2012-06-26 20:45:42.522637",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"go.peter.90@gmail.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"uriel@berlinblue.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ef432c94ce9c ***\n\ncmd/gc: cache itab lookup in convT2I.\n\nThere may be further savings if convT2I can avoid the function call\nif the cache is good and T is uintptr-shaped, a la convT2E, but that\nwill be a follow-up CL.\n\nsrc/pkg/runtime:\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkConvT2ISmall             43           15  -64.01%\nBenchmarkConvT2IUintptr           45           14  -67.48%\nBenchmarkConvT2ILarge            130          101  -22.31%\n\ntest/bench/go1:\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    8588997000   8499058000   -1.05%\nBenchmarkFannkuch11      5300392000   5358093000   +1.09%\nBenchmarkGobDecode         30295580     31040190   +2.46%\nBenchmarkGobEncode         18102070     17675650   -2.36%\nBenchmarkGzip             774191400    771591400   -0.34%\nBenchmarkGunzip           245915100    247464100   +0.63%\nBenchmarkJSONEncode       123577000    121423050   -1.74%\nBenchmarkJSONDecode       451969800    596256200  +31.92%\nBenchmarkMandelbrot200     10060050     10072880   +0.13%\nBenchmarkParse             10989840     11037710   +0.44%\nBenchmarkRevcomp         1782666000   1716864000   -3.69%\nBenchmarkTemplate         798286600    723234400   -9.40%\n\nR=rsc, bradfitz, go.peter.90, daniel.morsing, dave, uriel\nCC=golang-dev\nhttp://codereview.appspot.com/6337058",
			"disapproval": false,
			"date": "2012-07-02 23:08:37.518442",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"go.peter.90@gmail.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6337058/diff/3/src/cmd/gc/builtin.c\nFile src/cmd/gc/builtin.c (right):\n\nhttp://codereview.appspot.com/6337058/diff/3/src/cmd/gc/builtin.c#newcode44\nsrc/cmd/gc/builtin.c:44: \"func @\\\"\\\".convT2I(@\\\"\\\".typ *byte, @\\\"\\\".typ2 *byte, @\\\"\\\".cache *uintptr, @\\\"\\\".elem any) (@\\\"\\\".ret any)\\n\"\nOn 2012/06/26 20:32:59, DMorsing wrote:\n> This needs to have been generated from cmd/gc/runtime.go instead of being edited\n> in manually.\n\nDone.\n\nhttp://codereview.appspot.com/6337058/diff/3/src/pkg/runtime/iface.c\nFile src/pkg/runtime/iface.c (right):\n\nhttp://codereview.appspot.com/6337058/diff/3/src/pkg/runtime/iface.c#newcode198\nsrc/pkg/runtime/iface.c:198: if(!*cache)\nOn 2012/06/26 20:32:59, DMorsing wrote:\n> Doesn't this need some sort of synchronization? Multiple goroutines may try to\n> modify *cache at once.\n\nThe itab function should be idempotent, and I'm assuming that writing a uintptr is atomic. I'll let rsc have the definitive say in this.",
			"disapproval": false,
			"date": "2012-06-26 21:43:13.004871",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The JSON numbers are troubling but not a reason to hold up this CL.\r\nSince we advise users to work from the official release points, it is\r\nokay if tip gets a little slower. I do intend to investigate before\r\nthis CL becomes part of a release (in Go 1.1) but it's okay not to\r\nworry about it for now. I filed issue 3787 so we don't forget.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-29 22:07:08.427710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"go.peter.90@gmail.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6337058/diff/11003/src/pkg/runtime/iface.c\nFile src/pkg/runtime/iface.c (right):\n\nhttp://codereview.appspot.com/6337058/diff/11003/src/pkg/runtime/iface.c#newcode198\nsrc/pkg/runtime/iface.c:198: if(!*cache)\nOn 2012/06/29 13:56:57, DMorsing wrote:\n> The runtime package has code for atomically storing a pointer that isn't just a\n> plain assignment. I guess there isn't a guarantee for it being atomic.\n> \n> Since itab() is already synchronized, the change should just be:\n> \n> Itab *tmp;\n> tmp = runtime.atomicloadp(cache);\n> if(!tmp) {\n>     tmp = itab(inter, t, 0);\n>     runtime.atomicstorep(cache, tmp);\n> }\n> ret->tab = tmp;\n\nI agree, although s/tmp/tab/",
			"disapproval": false,
			"date": "2012-06-29 14:07:17.215076",
			"approval": true
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> BenchmarkJSONDecode       451969800    596256200  +31.92%\r\n\r\nAny idea why this got so much slower?\r\n",
			"disapproval": false,
			"date": "2012-07-03 05:07:04.857467",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jul 2, 2012 at 10:07 PM, Chris Wedgwood <cw@f00f.org> wrote:\r\n\r\n> > BenchmarkJSONDecode       451969800    596256200  +31.92%\r\n>\r\n> Any idea why this got so much slower?\r\n>\r\n\r\nSee http://code.google.com/p/go/issues/detail?id=3787\r\n",
			"disapproval": false,
			"date": "2012-07-03 05:10:10.466497",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6337058: cmd/gc: cache itab lookup in convT2I.",
	"created": "2012-06-26 17:58:18.282812",
	"patchsets": [
		1,
		2001,
		3,
		11003,
		11005
	],
	"modified": "2012-07-03 05:07:04.947768",
	"closed": true,
	"issue": 6337058
}