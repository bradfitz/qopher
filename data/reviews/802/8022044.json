{
	"description": "cmd/ld, runtime: restrict stack root scan to locals and arguments\n\nUpdates issue 5134",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"cshapiro@google.com",
		"daniel.morsing@gmail.com",
		"ality@pbrane.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cshapiro@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-26 22:52:39.613680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8022044/diff/1002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/1002/src/pkg/runtime/mgc0.c#newcode1320\nsrc/pkg/runtime/mgc0.c:1320: // scanned activation has an unknown argument size.  When doframe is true the\n\"doframe is true\" is a confusing comment for a type declared as \"void *\".\n\nWhy isn't it bool*? Assembler confused? Then the comment could say \"When *doframe is true\".",
			"disapproval": false,
			"date": "2013-03-26 23:13:17.792560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How much of the stack-GC story is this?  Could you reference a bug number\r\ntelling more of the story/plan? For instance, when can we kill the -Z link\r\noption?\r\n\r\nOn Tue, Mar 26, 2013 at 3:52 PM, <cshapiro@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/ld, runtime: restrict stack root scan to locals and arguments\r\n>\r\n> Please review this at https://codereview.appspot.**com/8022044/<https://codereview.appspot.com/8022044/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/ld/lib.c\r\n>   M src/pkg/runtime/mgc0.c\r\n>   M src/pkg/runtime/mprof.goc\r\n>   M src/pkg/runtime/proc.c\r\n>   M src/pkg/runtime/runtime.h\r\n>   M src/pkg/runtime/symtab.c\r\n>   M src/pkg/runtime/traceback_arm.**c\r\n>   M src/pkg/runtime/traceback_x86.**c\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-26 23:14:42.330620",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8022044/diff/1002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/1002/src/pkg/runtime/mgc0.c#newcode1320\nsrc/pkg/runtime/mgc0.c:1320: // scanned activation has an unknown argument size.  When doframe is true the\nThe last argument is a generic context argument for the new gentraceback callback.  In this particular function it is interpreted as a pointer to bool.\n\nI will update the comment to say *doframe to avoid some confusion.\n\nConceivably, I could type doframe as a bool* but that would require a long and unsightly cast at its use in the call to gentraceback on line 1384.",
			"disapproval": false,
			"date": "2013-03-26 23:24:57.972180",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have created an issue and made note of it in the change description.",
			"disapproval": false,
			"date": "2013-03-27 00:41:25.931970",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/26 23:14:42, bradfitz wrote:\n> How much of the stack-GC story is this?  Could you reference a bug number\n> telling more of the story/plan? For instance, when can we kill the -Z link\n> option?\n\nThis is the first step toward scanning live pointers and ignoring dead and non-pointer values on the stack.  This change allows the garbage collector to operate on a per-frame basis and uses the only helpful metadata regarding frames available now which is the size of the various regions of a frame.  We cannot eliminate -Z yet but I hope that will mostly change in two or three changelists down the line when more relevant metadata is emitted.\n\nI can add an updates issue 909 to the change since that issue is relevant.  If filing a specific bug against the problem this change is working toward addressing (non-pointer and dead pointer values are scanned) I can create that and an \"update issue ...\" for that.\n\nLet me know.",
			"disapproval": false,
			"date": "2013-03-26 23:32:54.106770",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(BTW, PTAL)",
			"disapproval": false,
			"date": "2013-03-27 00:20:30.396880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "909 is very high-profile.  I'd suggest your own stack-specific bug.\r\n\r\nOn Tue, Mar 26, 2013 at 4:32 PM, <cshapiro@google.com> wrote:\r\n\r\n> On 2013/03/26 23:14:42, bradfitz wrote:\r\n>\r\n>> How much of the stack-GC story is this?  Could you reference a bug\r\n>>\r\n> number\r\n>\r\n>> telling more of the story/plan? For instance, when can we kill the -Z\r\n>>\r\n> link\r\n>\r\n>> option?\r\n>>\r\n>\r\n> This is the first step toward scanning live pointers and ignoring dead\r\n> and non-pointer values on the stack.  This change allows the garbage\r\n> collector to operate on a per-frame basis and uses the only helpful\r\n> metadata regarding frames available now which is the size of the various\r\n> regions of a frame.  We cannot eliminate -Z yet but I hope that will\r\n> mostly change in two or three changelists down the line when more\r\n> relevant metadata is emitted.\r\n>\r\n> I can add an updates issue 909 to the change since that issue is\r\n> relevant.  If filing a specific bug against the problem this change is\r\n> working toward addressing (non-pointer and dead pointer values are\r\n> scanned) I can create that and an \"update issue ...\" for that.\r\n>\r\n> Let me know.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8022044/<https://codereview.appspot.com/8022044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-27 00:30:01.320700",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.\r\n\r\nTo be clear (and you know this, but for others): I'm not qualified to\r\nreview this.  I was just skimming for curiosity.\r\n\r\nWith Russ currently away, I'm not sure who would be a good reviewer.\r\n\r\nI'm also unsure whether this can even go in before Go 1.1.  This feels\r\nscary to me, especially considering we already have a few mystery crashes\r\nin the runtime (GC/scheduler/netpoll/maps?)  How confident in it are you?\r\n\r\n\r\nOn Tue, Mar 26, 2013 at 5:41 PM, <cshapiro@google.com> wrote:\r\n\r\n> I have created an issue and made note of it in the change description.\r\n>\r\n> https://codereview.appspot.**com/8022044/<https://codereview.appspot.com/8022044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-27 16:27:07.475130",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can take a shot at reviewing this. Dmitri can probably also take a look.\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/cmd/ld/lib.c#newcode1864\nsrc/cmd/ld/lib.c:1864: put(nil, \".args\", 'm', 0x80000000, 0, 0, 0);\nIntroduce a define for this constant.\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/mgc0.c#newcode1356\nsrc/pkg/runtime/mgc0.c:1356: } else if(gp->gcstack != (uintptr)nil) {\ndoes this need a check if gp->status == Gsyscall ?\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/symtab.c\nFile src/pkg/runtime/symtab.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/symtab.c#newcode236\nsrc/pkg/runtime/symtab.c:236: func[nfunc-1].args = (sym->value == 0x80000000) ? -1 : sym->value;\nWhy not just keep 0x80000000 as the unknown value here?",
			"disapproval": false,
			"date": "2013-03-27 19:43:51.403350",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 27, 2013 at 9:27 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> I'm also unsure whether this can even go in before Go 1.1.  This feels\r\n> scary to me, especially considering we already have a few mystery crashes\r\n> in the runtime (GC/scheduler/netpoll/maps?)  How confident in it are you?\r\n>\r\n\r\nI am as confident as I can be from just running the tests over and over\r\nagain on all three platforms.  It seems very solid.  Maybe there is some\r\ninteral code we can use to evaluate this change?\r\n",
			"disapproval": false,
			"date": "2013-03-27 20:22:09.178230",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8022044/diff/14001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/cmd/ld/lib.c#newcode1864\nsrc/cmd/ld/lib.c:1864: put(nil, \".args\", 'm', 0x80000000, 0, 0, 0);\nA good idea.\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/mgc0.c#newcode1356\nsrc/pkg/runtime/mgc0.c:1356: } else if(gp->gcstack != (uintptr)nil) {\nGood question.\n\nIt looks like it is mostly true that gcstack is not null when status is Gsyscall.  When it is not, the code in pkg/runtime/proc.c goes to some effort to ensure that the clearing of gcstack and returning status to the running state occurs in just the right order to preserve the invariants needed by the GC.\n\nThis case is the same one found in the current version on line 1346 and serves to tell us where the top of the stack is.  The same information is retrieved and used in the same way as it was before.  I am pretty confident this is okay.\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/symtab.c\nFile src/pkg/runtime/symtab.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/14001/src/pkg/runtime/symtab.c#newcode236\nsrc/pkg/runtime/symtab.c:236: func[nfunc-1].args = (sym->value == 0x80000000) ? -1 : sym->value;\nWorks for me.  Nothing tests for the value -1, only that the value is less than 0.  This should just work.",
			"disapproval": false,
			"date": "2013-03-28 01:36:07.318710",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nMy latest patch set addresses Daniel's comments and adds a flag \"ScanStackByFrames\" that enables the functionality in this change.  At the moment the flag is off which means the GC should behave as it always has scanning every word on the stack.  After we branch for the release turning this flag on can be explored.",
			"disapproval": false,
			"date": "2013-03-28 01:38:08.283580",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8022044/diff/22001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/cmd/ld/lib.c#newcode1866\nsrc/cmd/ld/lib.c:1866: if(s->text->textflag & NOSPLIT)\nNOSPLIT assembly functions can have s->args > 0\nSee src/pkg/crypto/sha1/sha1block_amd64.s:/^TEXT\n\nI'm not sure if you can actually distinguish\nbetween a NOSPLIT assembly function without\nparameters and one that isn't annotated with\nthe size of its parameters.",
			"disapproval": false,
			"date": "2013-03-28 09:42:39.860030",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/pkg/runtime/mgc0.c#newcode1337\nsrc/pkg/runtime/mgc0.c:1337: if(f->args > 0)\nThis needs to be updated to the new constant.\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/pkg/runtime/mgc0.c#newcode1391\nsrc/pkg/runtime/mgc0.c:1391: if (ScanStackByFrames) {\nI think the new version can go in directly. It seems like you've tested this thoroughly.\n\nDoes anyone disagree with this?",
			"disapproval": false,
			"date": "2013-03-28 13:46:15.753810",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/28 13:46:15, DMorsing wrote:\n>\n> I think the new version can go in directly. It seems like you've tested this\n> thoroughly.\n> \n> Does anyone disagree with this?\n\nSince there are some outstanding undiagnosed crash bugs, I'm concerned about stability for the Go 1.1 release.  Certainly I agree that this should be installed directly after Go 1.1.\n\n(I have not yet looked at this CL, sorry.)",
			"disapproval": false,
			"date": "2013-03-28 17:00:54.880420",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The most recent upload should address the remaining review comments.\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/cmd/ld/lib.c#newcode1866\nsrc/cmd/ld/lib.c:1866: if(s->text->textflag & NOSPLIT)\nYes, nosplit functions can be annotated with an argument count.\n\nThis code is needed for varargs routines which are marked as nosplit, have variable arity, and are identified as having an argument size of 0.  Examples include runtime\u00b7convT2I and runtime\u00b7convT2E.\n\nMost of the uses of varargs functions can be replaced by calls to equivalent fixed arity functions.  The remaining varargs calls should not appear in the backtrace during a garbage collection or can be treated as a special case.\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8022044/diff/22001/src/pkg/runtime/mgc0.c#newcode1337\nsrc/pkg/runtime/mgc0.c:1337: if(f->args > 0)\nIt should work fine without it but I would agree that it helps the reader to use the constant.  I'll go ahead and fix that.",
			"disapproval": false,
			"date": "2013-03-28 21:13:53.848760",
			"approval": false
		},
		{
			"sender": "cshapiro@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cshapiro@google.com",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=623b1b390dd6 ***\n\ncmd/ld, runtime: restrict stack root scan to locals and arguments\n\nUpdates issue 5134\n\nR=golang-dev, bradfitz, cshapiro, daniel.morsing, ality, iant\nCC=golang-dev\nhttps://codereview.appspot.com/8022044",
			"disapproval": false,
			"date": "2013-03-28 21:36:48.983110",
			"approval": false
		}
	],
	"owner_email": "cshapiro@golang.org",
	"private": false,
	"base_url": "",
	"owner": "cshapiro",
	"subject": "code review 8022044: cmd/ld, runtime: restrict stack root scan to locals and...",
	"created": "2013-03-26 22:47:46.350810",
	"patchsets": [
		1,
		2001,
		1002,
		9001,
		14001,
		22001,
		35001,
		39001,
		42001,
		35002
	],
	"modified": "2013-03-28 21:44:46.840470",
	"closed": true,
	"issue": 8022044
}