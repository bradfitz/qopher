{
	"description": "runtime: ensure forward progress when unwinding an arm stack frame\n\nThe arm gentraceback mishandled frame linkage values pointing\nto the assembly return function.  This function is special as\nits frame size is zero and it contains only one instruction.\nThese conditions would preserve the frame pointer and result\nin an off by one error when unwinding the caller.\n\nFixes issue 5124",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cshapiro@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-26 00:31:38.479000",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Mon, Mar 25, 2013 at 5:31 PM, <cshapiro@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> runtime: ensure forward progress when unwinding an arm stack frame\r\n>\r\n> The arm gentraceback mishandled frame linkage values pointing\r\n> to the assembly return function.  This function is special as\r\n> its frame size is zero and it contains only one instruction.\r\n> These conditions would preserve the frame pointer and result\r\n> in an off by one error when unwinding the caller.\r\n>\r\n> Fixes issue 5124\r\n>\r\n> Please review this at https://codereview.appspot.**com/8023043/<https://codereview.appspot.com/8023043/>\r\n>\r\n> Affected files:\r\n>   M misc/cgo/test/callback.go\r\n>   M src/pkg/runtime/traceback_arm.**c\r\n>\r\n>\r\n> Index: misc/cgo/test/callback.go\r\n> ==============================**==============================**=======\r\n> --- a/misc/cgo/test/callback.go\r\n> +++ b/misc/cgo/test/callback.go\r\n> @@ -160,9 +160,7 @@\r\n>         nestedCall(func() {\r\n>                 n = runtime.Callers(2, pc)\r\n>         })\r\n> -       // The ARM cannot unwind all the way down to runtime.goexit.\r\n> -       // See issue 5124.\r\n> -       if n != len(name) && runtime.GOARCH != \"arm\" {\r\n> +       if n != len(name) {\r\n>                 t.Errorf(\"expected %d frames, got %d\", len(name), n)\r\n>         }\r\n>         for i := 0; i < n; i++ {\r\n> @@ -179,10 +177,5 @@\r\n>                 if fname != name[i] {\r\n>                         t.Errorf(\"expected function name %s, got %s\",\r\n> name[i], fname)\r\n>                 }\r\n> -               // The ARM cannot unwind frames past runtime.cgocall.\r\n> -               // See issue 5124.\r\n> -               if runtime.GOARCH == \"arm\" && i == 4 {\r\n> -                       break\r\n> -               }\r\n>         }\r\n>  }\r\n> Index: src/pkg/runtime/traceback_arm.**c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/traceback_**arm.c\r\n> +++ b/src/pkg/runtime/traceback_**arm.c\r\n> @@ -74,8 +74,9 @@\r\n>                         lr = *(uintptr*)sp;\r\n>                 if(fp == nil) {\r\n>                         fp = sp;\r\n> -                       if(pc > f->entry && f->frame >= 0)\r\n> -                               fp += f->frame;\r\n> +                       if(pc > f->entry && f->frame >= sizeof(uintptr))\r\n> +                               fp += f->frame - sizeof(uintptr);\r\n> +                       fp += sizeof(uintptr);\r\n>                 }\r\n>\r\n>                 if(skip > 0)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-26 00:45:50.375930",
			"approval": true
		},
		{
			"sender": "cshapiro@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=dccca603c1c5 ***\n\nruntime: ensure forward progress when unwinding an arm stack frame\n\nThe arm gentraceback mishandled frame linkage values pointing\nto the assembly return function.  This function is special as\nits frame size is zero and it contains only one instruction.\nThese conditions would preserve the frame pointer and result\nin an off by one error when unwinding the caller.\n\nFixes issue 5124\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8023043",
			"disapproval": false,
			"date": "2013-03-26 18:43:45.209780",
			"approval": false
		}
	],
	"owner_email": "cshapiro@golang.org",
	"private": false,
	"base_url": "",
	"owner": "cshapiro",
	"subject": "code review 8023043: runtime: ensure forward progress when unwinding an arm ...",
	"created": "2013-03-26 00:30:08.747180",
	"patchsets": [
		1,
		2001,
		5001,
		9001
	],
	"modified": "2013-03-26 18:43:46.467860",
	"closed": true,
	"issue": 8023043
}