{
	"description": "exp/inotify: fixed incorrect logical operation\n\nFor example, if e.Mask is IN_CLOSE_WRITE(0x8) and b in eventBits is IN_CLOSE(0x18) then\nThe result of m&b.Value is not zero. So the event's name is wrong.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "atomaths@gmail.com",
			"recipients": [
				"atomaths@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-20 09:21:22.155690",
			"approval": false
		},
		{
			"sender": "atomaths@gmail.com",
			"recipients": [
				"atomaths@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\n\nhttp://codereview.appspot.com/6427057/",
			"disapproval": false,
			"date": "2012-07-25 06:06:27.746030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"atomaths@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that your example shows the current code is not correct. However, neither is this code.\n\nYour example is that e.Mask is IN_CLOSE_WRITE (0x8) and b is IN_CLOSE (0x18).\ne.Mask&b != 0, so we add IN_CLOSE instead of IN_CLOSE_WRITE.\n\nBut if e.Mask is IN_CLOSE (0x18) and b is IN_CLOSE_WRITE (0x8) then e.Mask&b == b, so we add IN_CLOSE_WRITE instead of IN_CLOSE.\n\nA solution that addresses both would be for the table to list not just the value to test for but also the mask of bits to include in the test. As written the table can only possibly be correct - no matter what code processes it - when all the values are single bits, and apparently that is not the case.",
			"disapproval": false,
			"date": "2012-07-30 03:54:17.866240",
			"approval": false
		},
		{
			"sender": "atomaths@gmail.com",
			"recipients": [
				"atomaths@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, Russ.\nI'd like you to review this change to\nhttp://codereview.appspot.com/6442070/",
			"disapproval": false,
			"date": "2012-08-01 11:10:27.425970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"atomaths@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "removing reviewers - moved to another CL",
			"disapproval": false,
			"date": "2012-08-03 19:11:22.482320",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"atomaths@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 15:53:25.094080",
			"approval": false
		}
	],
	"owner_email": "atomaths@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Jongmin Kim",
	"subject": "code review 6427057: exp/inotify: fixed incorrect logical operation",
	"created": "2012-07-20 09:20:16.990910",
	"patchsets": [
		1,
		2001,
		3002
	],
	"modified": "2013-07-20 15:53:25.310730",
	"closed": false,
	"issue": 6427057
}