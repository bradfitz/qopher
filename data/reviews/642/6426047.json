{
	"description": "net: add read, write message methods to IPConn, UDPConn\n\nBoth methods allow to access the IP ancillary data through\nsocket control messages.\n\nThis CL is required for CL 6482044; go.net/ipv4: new package.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-03 11:20:56.321390",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Aug 4, 2012 at 4:49 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I am sorry for being so uninformed, but how can an IP packet have\r\n> out-of-band data?\r\n\r\nCL description isn't accurate, my bad.\r\n\r\nIP control plane uses in-band, I mean no extra channels,\r\ncommunication style but IP stack in each node can take\r\nancillary informations such as incoming interface index,\r\nraw-IP header, nested numbers of tunnels, etc for each\r\npacket. And IP stack can tell us such per-packet ancillaries\r\nwhen we toggle IP-level options on through out-of-band\r\nchannel of socket.\r\n",
			"disapproval": false,
			"date": "2012-08-07 03:25:22.577750",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's a typo in the CL description. That's the most intelligent\r\nthing I have to say about Unix's network APIs.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-08-07 03:46:26.997000",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-21 16:01:18.198140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am sorry for being so uninformed, but how can an IP packet have\r\nout-of-band data?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-08-03 19:49:44.298420",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for this proposal.\n\nI'm not wild about the use of named return arguments, I think the intent would be clearer if you defined the addr variable before it was used.\n\nIs there a way you can write a test for these new methods? I guess IPConn requires root, but UDPConn might be possible.\n\nAlso, please fix the typo in the description.\n\nhttp://codereview.appspot.com/6426047/diff/9007/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttp://codereview.appspot.com/6426047/diff/9007/src/pkg/net/iprawsock_posix.go#newcode85\nsrc/pkg/net/iprawsock_posix.go:85: return n, addr, err\nreturn$\n\nhttp://codereview.appspot.com/6426047/diff/9007/src/pkg/net/iprawsock_posix.go#newcode146\nsrc/pkg/net/iprawsock_posix.go:146: func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr) (n, oobn int, err error) {\nI think this function would be clearer without named return values.\n\n         if !c.ok() {\n             return 0, 0, syscall.EINVAL\n         }\n         sa, err := addr.sockaddr(c.fd.family)\n         if err != nil {\n             return 0, 0, &OpError{\"write\", c.fd.net, addr, err}\n         }\n         return c.fd.WriteMsg(b, oob, sa)\n\nhttp://codereview.appspot.com/6426047/diff/9007/src/pkg/net/udpsock_posix.go\nFile src/pkg/net/udpsock_posix.go (right):\n\nhttp://codereview.appspot.com/6426047/diff/9007/src/pkg/net/udpsock_posix.go#newcode152\nsrc/pkg/net/udpsock_posix.go:152: return c.fd.WriteMsg(b, oob, sa)\nditto",
			"disapproval": false,
			"date": "2012-08-22 00:04:42.996420",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-10 12:39:21.176200",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all done.",
			"disapproval": false,
			"date": "2012-08-28 03:21:17.065810",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-28 03:24:36.215440",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go#newcode146\nsrc/pkg/net/iprawsock_posix.go:146: func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr) (n, oobn int, err error) {\nThese return arguments are never set within the method, I don't think they are helpful.\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/udpsock_posix.go\nFile src/pkg/net/udpsock_posix.go (right):\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/udpsock_posix.go#newcode140\nsrc/pkg/net/udpsock_posix.go:140: func (c *UDPConn) WriteMsgUDP(b, oob []byte, addr *UDPAddr) (n, oobn int, err error) {\nSame as WriteMsgIP",
			"disapproval": false,
			"date": "2012-09-03 11:33:49.328580",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. As this is an addition to the public API, I suggest waiting for one of the authors.\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go#newcode146\nsrc/pkg/net/iprawsock_posix.go:146: func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr) (n, oobn int, err error) {\nOn 2012/09/03 11:33:49, dfc wrote:\n> These return arguments are never set within the method, I don't think they are\n> helpful.\n\nFair enough. My concern was the return values are never assigned, new values are always returned.",
			"disapproval": false,
			"date": "2012-09-07 09:22:54.843290",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping. Are there any Authors who can approve the additions to the net pkg API.",
			"disapproval": false,
			"date": "2012-09-10 23:49:59.488570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The new functions are fine. The changes to the existing functions I don't quite understand yet.\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go#newcode77\nsrc/pkg/net/iprawsock_posix.go:77: if a := sockaddrToIP(sa); a != nil {\nI am very sorry for being so out of it.\nThat said, I am confused about the relation between this CL and CL 6445105, which seem to be making contradictory changes this code.\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go#newcode79\nsrc/pkg/net/iprawsock_posix.go:79: if addr.IP.To4() != nil && len(b) > 20 { // discard ipv4 header\nIf sa is an IPv6 sockaddr but it contains an IPv4-mapped address, then addr.IP.To4() will be non-nil here, so you get different behavior for \"ip6\" using IPv4-mapped addresses vs \"ip6\" using non-IPv4-mapped addresses. Is that intended?\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go#newcode146\nsrc/pkg/net/iprawsock_posix.go:146: func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr) (n, oobn int, err error) {\nI think having the named returns helps documentation. It's also consistent with the other WriteMsgXX functions.\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/udpsock_posix.go\nFile src/pkg/net/udpsock_posix.go (right):\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/udpsock_posix.go#newcode73\nsrc/pkg/net/udpsock_posix.go:73: if a := sockaddrToUDP(sa); a != nil {\nSame question about IPv4-mapped v6 addresses.\n\nhttp://codereview.appspot.com/6426047/diff/37001/src/pkg/net/udpsock_posix.go#newcode140\nsrc/pkg/net/udpsock_posix.go:140: func (c *UDPConn) WriteMsgUDP(b, oob []byte, addr *UDPAddr) (n, oobn int, err error) {\nOn 2012/09/03 11:33:49, dfc wrote:\n> Same as WriteMsgIP\n\nSame reply.",
			"disapproval": false,
			"date": "2012-09-11 01:02:51.913340",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/28 03:24:36, mikio wrote:\n> Hello mailto:rsc@golang.org, mailto:r@golang.org, mailto:dave@cheney.net (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nTwo minor comments. Please also include a link to the CL which uses these new methods.",
			"disapproval": false,
			"date": "2012-09-03 11:33:40.553420",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/03 11:33:49, dfc wrote:\n\n> http://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go#newcode146\n> src/pkg/net/iprawsock_posix.go:146: func (c *IPConn) WriteMsgIP(b, oob []byte,\n> addr *IPAddr) (n, oobn int, err error) {\n> These return arguments are never set within the method, I don't think they are\n> helpful.\n\njust for godoc, readability, doesn't make sense?",
			"disapproval": false,
			"date": "2012-09-07 08:10:21.479000",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "anyone?\r\n\r\nOn Fri, Sep 7, 2012 at 6:22 PM,  <dave@cheney.net> wrote:\r\n\r\n> LGTM. As this is an addition to the public API, I suggest waiting for\r\n> one of the authors.\r\n",
			"disapproval": false,
			"date": "2012-09-07 23:49:30.398330",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/11 01:02:51, rsc wrote:\n\n> http://codereview.appspot.com/6426047/diff/37001/src/pkg/net/iprawsock_posix.go#newcode79\n> src/pkg/net/iprawsock_posix.go:79: if addr.IP.To4() != nil && len(b) > 20 { //\n> discard ipv4 header\n> If sa is an IPv6 sockaddr but it contains an IPv4-mapped address, then\n> addr.IP.To4() will be non-nil here, so you get different behavior for \"ip6\"\n> using IPv4-mapped addresses vs \"ip6\" using non-IPv4-mapped addresses. Is that\n> intended?\n\nNope, hmm... this should be addressed in another CL.",
			"disapproval": false,
			"date": "2012-09-18 17:33:16.546230",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-18 17:33:38.460610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-24 15:04:43.074040",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=96fde1b15506 ***\n\nnet: add read, write message methods to IPConn, UDPConn\n\nBoth methods allow to access the IP ancillary data through\nsocket control messages.\n\nThis CL is required for CL 6482044; go.net/ipv4: new package.\n\nR=rsc, r, dave\nCC=golang-dev\nhttp://codereview.appspot.com/6426047",
			"disapproval": false,
			"date": "2012-09-24 21:57:38.629100",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6426047: net: add read, write message methods to IPConn, UDPConn",
	"created": "2012-07-19 11:08:55.944630",
	"patchsets": [
		9006,
		12008,
		18008,
		19008,
		9007,
		37001,
		55001,
		58001
	],
	"modified": "2012-09-24 21:57:41.297770",
	"closed": true,
	"issue": 6426047
}