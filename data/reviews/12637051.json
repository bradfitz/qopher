{
	"description": "cmd/6g: move opt instruction decode into common function\n\nAdd new proginfo function that returns information about a\nProg*. The information includes various instruction\ndescription bits as well as a list of required registers set\nand used and indexing registers used.\n\nConvert the large instruction switches to use proginfo.\n\nThis information was formerly duplicated in multiple\noptimization passes, inconsistently. For example, the\ninformation about which registers an instruction requires\nappeared three times for most instructions.\n\nMost of the switches were incomplete or incorrect in some way.\nFor example, the switch in copyu did not list cases for INCB,\nJPS, MOVAPD, MOVBWSX, MOVBWZX, PCDATA, POPQ, PUSHQ, STD,\nTESTB, TESTQ, and XCHGL. Those were all falling into the\n\"unknown instruction\" default case and stopping the rewrite,\nperhaps unnecessarily. Similarly, the switch in needc only\nlisted a handful of the instructions that use or set the carry bit.\n\nWe still need to decide whether to use proginfo to generalize\na few of the remaining smaller switches in peep.c.\n\nIf this goes well, we'll make similar changes in 8g and 5g.",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"cshapiro@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-12 01:46:34.979410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9bac75fea9e2 ***\n\ncmd/6g: move opt instruction decode into common function\n\nAdd new proginfo function that returns information about a\nProg*. The information includes various instruction\ndescription bits as well as a list of required registers set\nand used and indexing registers used.\n\nConvert the large instruction switches to use proginfo.\n\nThis information was formerly duplicated in multiple\noptimization passes, inconsistently. For example, the\ninformation about which registers an instruction requires\nappeared three times for most instructions.\n\nMost of the switches were incomplete or incorrect in some way.\nFor example, the switch in copyu did not list cases for INCB,\nJPS, MOVAPD, MOVBWSX, MOVBWZX, PCDATA, POPQ, PUSHQ, STD,\nTESTB, TESTQ, and XCHGL. Those were all falling into the\n\"unknown instruction\" default case and stopping the rewrite,\nperhaps unnecessarily. Similarly, the switch in needc only\nlisted a handful of the instructions that use or set the carry bit.\n\nWe still need to decide whether to use proginfo to generalize\na few of the remaining smaller switches in peep.c.\n\nIf this goes well, we'll make similar changes in 8g and 5g.\n\nR=ken2\nCC=golang-dev\nhttps://codereview.appspot.com/12637051",
			"disapproval": false,
			"date": "2013-08-12 01:46:42.653000",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks great. Thanks Russ. \r\n\r\n\r\n\r\nOn 12/08/2013, at 10:46, rsc@golang.org wrote:\r\n\r\n> Reviewers: ken2,\r\n> \r\n> Message:\r\n> Hello ken2 (cc: golang-dev@googlegroups.com),\r\n> \r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n> \r\n> \r\n> Description:\r\n> cmd/6g: move opt instruction decode into common function\r\n> \r\n> Add new proginfo function that returns information about a\r\n> Prog*. The information includes various instruction\r\n> description bits as well as a list of required registers set\r\n> and used and indexing registers used.\r\n> \r\n> Convert the large instruction switches to use proginfo.\r\n> \r\n> This information was formerly duplicated in multiple\r\n> optimization passes, inconsistently. For example, the\r\n> information about which registers an instruction requires\r\n> appeared three times for most instructions.\r\n> \r\n> Most of the switches were incomplete or incorrect in some way.\r\n> For example, the switch in copyu did not list cases for INCB,\r\n> JPS, MOVAPD, MOVBWSX, MOVBWZX, PCDATA, POPQ, PUSHQ, STD,\r\n> TESTB, TESTQ, and XCHGL. Those were all falling into the\r\n> \"unknown instruction\" default case and stopping the rewrite,\r\n> perhaps unnecessarily. Similarly, the switch in needc only\r\n> listed a handful of the instructions that use or set the carry bit.\r\n> \r\n> We still need to decide whether to use proginfo to generalize\r\n> a few of the remaining smaller switches in peep.c.\r\n> \r\n> If this goes well, we'll make similar changes in 8g and 5g.\r\n> \r\n> Please review this at https://codereview.appspot.com/12637051/\r\n> \r\n> Affected files:\r\n>  M src/cmd/6g/opt.h\r\n>  M src/cmd/6g/peep.c\r\n>  A src/cmd/6g/prog.c\r\n>  M src/cmd/6g/reg.c\r\n> \r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-08-12 10:50:24.411350",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/opt.h\nFile src/cmd/6g/opt.h (right):\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/opt.h#newcode211\nsrc/cmd/6g/opt.h:211: SetCarry = 1<<15,\nWhy is this exclusive to the carry flag?  It would seem somewhat more natural to treat eflags as a register and record whether an instruction reads or writes to eflags.  The needc function should behave pretty much as it did before and be useful in other contexts.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c\nFile src/cmd/6g/prog.c (right):\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode57\nsrc/cmd/6g/prog.c:57: [ACDQ]=\t\t{OK, AX, AX | DX},\nThese instructions modify the carry flag.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode92\nsrc/cmd/6g/prog.c:92: [ADIVB]=\t{SizeB | LeftRead, AX, AX},\nThe DIV instruction has an undefined effect on the carry flag.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode100\nsrc/cmd/6g/prog.c:100: [AIDIVB]=\t{SizeB | LeftRead, AX, AX},\nThe IDIV instruction has an undefined effect on the carry flag.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode106\nsrc/cmd/6g/prog.c:106: [AIMULL]=\t{SizeL | LeftRead | ImulAXDX | SetCarry},\nThis does not seem quite right.  While some forms of IMUL write the product into RAX:RDX, this is not always the case.  The opcodes listed for AIMUL{B,L,Q,W} include the register register form (0x0F 0xAF) that computes a partial product into the destination register.  This also means there should be a RightWrite for these instructions.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode109\nsrc/cmd/6g/prog.c:109: \nWhere is IMUL3Q?\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode258\nsrc/cmd/6g/prog.c:258: [ATESTB]=\t{SizeB | LeftRead | RightRead},\nThe TEST instruction sets the carry flag.",
			"disapproval": false,
			"date": "2013-08-12 18:20:17.633420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the careful review.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/opt.h\nFile src/cmd/6g/opt.h (right):\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/opt.h#newcode211\nsrc/cmd/6g/opt.h:211: SetCarry = 1<<15,\nOn 2013/08/12 18:20:17, cshapiro1 wrote:\n> Why is this exclusive to the carry flag?  It would seem somewhat more natural to\n> treat eflags as a register and record whether an instruction reads or writes to\n> eflags.  The needc function should behave pretty much as it did before and be\n> useful in other contexts.\n\nI'm explicitly trying to avoid writing an exhaustive description of the x86. If the need arises I am happy to extend the table. This information is currently only used to decide whether it's safe to rewrite an ADD 1 to INC and so on, so only the carry bit is relevant.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c\nFile src/cmd/6g/prog.c (right):\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode57\nsrc/cmd/6g/prog.c:57: [ACDQ]=\t\t{OK, AX, AX | DX},\nOn 2013/08/12 18:20:17, cshapiro1 wrote:\n> These instructions modify the carry flag.\n\nAre you sure? The manual I'm looking at does not say anything about the carry bit in the description of these instructions, and it does not list them as relevant in the EFLAGS cross-reference.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode92\nsrc/cmd/6g/prog.c:92: [ADIVB]=\t{SizeB | LeftRead, AX, AX},\nOn 2013/08/12 18:20:17, cshapiro1 wrote:\n> The DIV instruction has an undefined effect on the carry flag.\n\nThanks.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode100\nsrc/cmd/6g/prog.c:100: [AIDIVB]=\t{SizeB | LeftRead, AX, AX},\nOn 2013/08/12 18:20:17, cshapiro1 wrote:\n> The IDIV instruction has an undefined effect on the carry flag.\n\nThanks.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode106\nsrc/cmd/6g/prog.c:106: [AIMULL]=\t{SizeL | LeftRead | ImulAXDX | SetCarry},\nOn 2013/08/12 18:20:17, cshapiro1 wrote:\n> This does not seem quite right.  While some forms of IMUL write the product into\n> RAX:RDX, this is not always the case.  The opcodes listed for AIMUL{B,L,Q,W}\n> include the register register form (0x0F 0xAF) that computes a partial product\n> into the destination register.  This also means there should be a RightWrite for\n> these instructions.\n\nSee the handling of ImulAXDX in proginfo at the bottom of the file. I believe it addresses this.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode109\nsrc/cmd/6g/prog.c:109: \nOn 2013/08/12 18:20:17, cshapiro1 wrote:\n> Where is IMUL3Q?\n\nIt's not here. Only instructions generated by the compiler are listed here.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode258\nsrc/cmd/6g/prog.c:258: [ATESTB]=\t{SizeB | LeftRead | RightRead},\nOn 2013/08/12 18:20:17, cshapiro1 wrote:\n> The TEST instruction sets the carry flag.\n\nThanks.",
			"disapproval": false,
			"date": "2013-08-12 22:38:31.994650",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"rsc@golang.org",
				"dave@cheney.net",
				"cshapiro@google.com",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c\nFile src/cmd/6g/prog.c (right):\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode57\nsrc/cmd/6g/prog.c:57: [ACDQ]=\t\t{OK, AX, AX | DX},\nNo, I was mistaken.  These instructions do not read or write eflags.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode106\nsrc/cmd/6g/prog.c:106: [AIMULL]=\t{SizeL | LeftRead | ImulAXDX | SetCarry},\nI see.  I think it's okay.\n\nhttps://codereview.appspot.com/12637051/diff/8001/src/cmd/6g/prog.c#newcode109\nsrc/cmd/6g/prog.c:109: \nOkay.  That would explain why CMPXCHG is not hear either.  (It modifies the carry flag, too.)",
			"disapproval": false,
			"date": "2013-08-12 23:11:13.623450",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 12637051: cmd/6g: move opt instruction decode into common function",
	"created": "2013-08-12 01:25:43.259440",
	"patchsets": [
		1,
		3001,
		6001,
		8001
	],
	"modified": "2013-08-12 23:11:14.110250",
	"closed": true,
	"issue": 12637051
}