{
	"description": "bytes: add Buffer.ReadAt.\n\nThis allows, for example, a bytes.Buffer to be used to read a ZIP file\nfrom memory.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"rsc@golang.org",
		"bsiegert@gmail.com"
	],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-19 23:54:30.909941",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 20, 2012 at 00:39, Rob 'Commander' Pike <r@google.com> wrote:\n> Nervous about this. It breaks the rules about Read in a bytes.Buffer by not consuming the data. In that way, it's not analogous to Read, so ReadAt isn't the right name. I'm not even sure it belongs in the package at all.\n>\n> For your purposes, can't you do:\n\nI recall that we had the exact same discussion when image/tiff first\nwent in. Btw, this is why there is an image/tiff/buffer.go.\n\nJust to reiterate my point: A memory buffer supporting ReadAt seems to\nbe useful enough to be in the standard library. It feels awkward to\nreimplement this each time. Maybe it should not be in bytes.Buffer but\nI would like it to be available.\n\n--Benny.\n\nPS: agl, you might be able to reuse tiff.buffer ;).\n",
			"disapproval": false,
			"date": "2012-01-20 07:51:12.405839",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-19 22:32:10.334682",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nervous about this. It breaks the rules about Read in a bytes.Buffer by not consuming the data. In that way, it's not analogous to Read, so ReadAt isn't the right name. I'm not even sure it belongs in the package at all.\n\nFor your purposes, can't you do:\n\ntype MyBuffer struct {\n\tbytes.Buffer\n}\n\nfunc (m *MyBuffer) ReadAt(p []byte, off int64) (n int, err error) {\n\tb := MyBuffer.Buffer.Bytes()\n\tcheck range\n\treturn bytes sliced out of b\n}\n\n",
			"disapproval": false,
			"date": "2012-01-19 23:39:34.227035",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, but no.\n\nThis is a long-standing API decision about bytes.Buffer.\nIt does not have Seek, so that it only needs to, well,\nbuffer the amount of data between the Reads and the Writes.\nAnd therefore it does not have ReadAt nor WriteAt.\n\nI am pretty sure we have slice types in the tree that\nimplement ReadAt and could be lifted.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-19 23:42:26.482885",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 5536073: bytes: add Buffer.ReadAt.",
	"created": "2012-01-19 22:29:56.323666",
	"patchsets": [
		1,
		2001,
		1002,
		3
	],
	"modified": "2012-01-20 07:51:12.560649",
	"closed": true,
	"issue": 5536073
}