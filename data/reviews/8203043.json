{
	"description": "syscall: Use FILE_SHARE_DELETE flag when opening files on Windows\n\nOn Windows, a file opened without the FILE_SHARE_DELETE flag\ncan not be renamed or deleted until it's closed. This contrasts\nwith the semantics on POSIX systems (GNU/Linux, Mac OS X, etc).\n\nSince there's no way to specify such flag in the Open() call,\nthis is necessary to ensure the same Go code behaves the same\non all platforms. Opening a file on Windows and then attempting\nto rename it or delete it, from any Go thread or from an external\nprocess, resulted in a Windows ERROR_SHARING_VIOLATION error.\n\nThis same type of issue happened for example in Erlang OTP's file\ndriver:\n\nhttps://github.com/erlang/otp/commit/0e02f488971b32ff9ab88a3f0cb144fe5db161b2",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"aram@mgk.ro",
		"minux.ma@gmail.com",
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Interesting. Is this widely supported in Windows across versions? Add a\r\ntest?\r\n\r\nLeaving for Windows people.\r\nOn Mar 30, 2013 8:19 PM, <fdmanana@gmail.com> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> https://codereview.appspot.**com/8203043/<https://codereview.appspot.com/8203043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-31 03:23:25.902930",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"fdmanana@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"aram@mgk.ro",
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/31 16:08:37, minux wrote:\n> cc: +alex.brainman, maybe he could tell you why FILE_SHARE_DELETE is not\n> used in syscall.Open.\n> \n\nI am not Raymond Chen, so do not take my ramblings seriously. :-)\n\nI do not remember who wrote that piece of code. But, I am from old school, and that is how most programs I have seen behave.\n\nI am not arguing that new behavior is not usable sometimes. But for \"common case\" on Windows, it looks unusual to me. Cannot you open file with CreateFile and pass file handle to os.NewFile to do what you want?\n\nAlex\n\nPS: I do not see what is wrong with FILE_APPEND_DATA = 4. ???",
			"disapproval": false,
			"date": "2013-04-01 03:24:06.305030",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"fdmanana@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Windows, a file opened without the FILE_SHARE_FLAG can not\nbe renamed or deleted until it's closed. This contrasts with\nthe semantics on POSIX systems (GNU/Linux, Mac OS X, etc).\n\nSince there's no way to specify such flag in the Open() call,\nthis is necessary to ensure the same Go code behaves the same\non all platforms. Opening a file on Windows and then attempting\nto rename it or delete it, from any Go thread or from an external\nprocess, resulted in a Windows ERROR_SHARING_VIOLATION error.\n\nThis same type of issue happened for example in Erlang OTP's file\ndriver:\n\nhttps://github.com/erlang/otp/commit/0e02f488971b32ff9ab88a3f0cb144fe5db161b2",
			"disapproval": false,
			"date": "2013-03-30 21:25:03.484460",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"fdmanana@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-30 21:51:19.438270",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am unconvinced this is the correct thing to do. To quote Rob here:\r\nhttps://groups.google.com/d/msg/golang-dev/TlLZoZjJuCk/oQKXUkzGhoEJ\r\n\r\n> package os's purpose is not to hide every detail, just to provide\r\n> a consistent interface. The operating system may do different things\r\n> with that interface, and often will.\r\n\r\n",
			"disapproval": false,
			"date": "2013-03-31 10:00:23.707450",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 11:00 AM, Aram H\u0103v\u0103rneanu <aram@mgk.ro> wrote:\r\n\r\n> I am unconvinced this is the correct thing to do. To quote Rob here:\r\n> https://groups.google.com/d/msg/golang-dev/TlLZoZjJuCk/oQKXUkzGhoEJ\r\n>\r\n> > package os's purpose is not to hide every detail, just to provide\r\n> > a consistent interface. The operating system may do different things\r\n> > with that interface, and often will.\r\n>\r\n\r\nI generally agree with that. However here, there's no way (to my knowledge)\r\nto be able to open a file with this flag, that is, the Open/OpenFile\r\nfunctions do not allow the caller to specify any Windows specific\r\nshare-ability flags.\r\n\r\nRenaming or deleting an open file, is not an uncommon thing to do. For\r\nexample, Apache CouchDB and Couchbase do this during database/index\r\ncompaction (that's what led me to that Erlang VM patch as well).\r\n\r\nUploading a new patch set with a unit test.\r\nAnswering to the previous question from Brad, this flag exists in all\r\nWindows version since (and including) Windows 2000.\r\n\r\n\r\n\r\n-- \r\nFilipe David Manana,\r\n\r\n\"Reasonable men adapt themselves to the world.\r\n Unreasonable men adapt the world to themselves.\r\n That's why all progress depends on unreasonable men.\"\r\n",
			"disapproval": false,
			"date": "2013-03-31 11:39:25.028880",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"fdmanana@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"aram@mgk.ro",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, aram@mgk.ro (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-31 11:45:52.736840",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"fdmanana@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"aram@mgk.ro",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, aram@mgk.ro (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-31 11:42:29.202350",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Renaming or deleting an open file, is not an uncommon thing to do.\r\n> For example, Apache CouchDB and Couchbase do this during database/index\r\n> compaction (that's what led me to that Erlang VM patch as well).\r\n\r\nJust because something is useful (which nobody disputes) doesn't\r\nmean it should be the default. It might be hard to obtain this\r\nbehavior now (requires using syscall), but with your patch it will\r\nbe hard to get the old behavior back. I'm also not sure this semantic\r\nchange is compatible with the Go 1 contract.\r\n\r\nWhat about this idea, add syscall.FILE_SHARE_DELETE and change\r\nsyscall.Open so that you can pass it. This way you can use\r\nos.OpenFile(\"foo\", syscall.FILE_SHARE_DELETE, 0) if you need it.\r\n\r\n",
			"disapproval": false,
			"date": "2013-03-31 12:18:03.424670",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 8:30 PM, Filipe David Manana <fdmanana@gmail.com> wrote:\r\n> Imho, the fact that no one reported this issue before is likely because no\r\n> one attempted to do this on Windows yet, or didn't bother investigating or\r\n> reporting the issue.\r\nanother reason: people using windows accept that not being able to rename or\r\nremove an open file is the norm and has already get used to that fact.\r\n\r\nWe can't silently change the Go 1.0 program behavior here, perhaps people\r\nactually depend on it.\r\n",
			"disapproval": false,
			"date": "2013-03-31 14:52:34.324910",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 3:52 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> On Sun, Mar 31, 2013 at 8:30 PM, Filipe David Manana <fdmanana@gmail.com>\r\n> wrote:\r\n> > Imho, the fact that no one reported this issue before is likely because\r\n> no\r\n> > one attempted to do this on Windows yet, or didn't bother investigating\r\n> or\r\n> > reporting the issue.\r\n> another reason: people using windows accept that not being able to rename\r\n> or\r\n> remove an open file is the norm and has already get used to that fact.\r\n>\r\n> We can't silently change the Go 1.0 program behavior here, perhaps people\r\n> actually depend on it.\r\n>\r\n\r\nThen why does Open() (and OpenFile())  always, and unconditionally, pass\r\nFILE_SHARE_READ and FILE_SHARE_WRITE to Window's CreateFile() function [1] ?\r\n\r\nIt's very inconsistent. People wanting to have full access to Windows\r\nspecific behaviour should then have the possibility to specify exactly\r\nwhich share flags are passed to CreateFile(). Right now they just can't.\r\n\r\nIf the os package intended to allow for fine grained OS specific file\r\nsemantics, it should have had in the first place the possibility to allow\r\nto specify these flags, rather than hardcode them. I believe the goal here,\r\nby hardcoding the read and write share flags, was to provide POSIX alike\r\nsemantics to Windows programs.\r\n\r\nIf someone knows why those flags are hardcoded and if the share delete flag\r\nwas omitted intentionally  please let know. I'm very curious about the\r\nrationale for this.\r\n\r\n[1] -\r\nhttps://code.google.com/p/go/source/browse/src/pkg/syscall/syscall_windows.go#242\r\n\r\n\r\n-- \r\nFilipe David Manana,\r\n\r\n\"Reasonable men adapt themselves to the world.\r\n Unreasonable men adapt the world to themselves.\r\n That's why all progress depends on unreasonable men.\"\r\n",
			"disapproval": false,
			"date": "2013-03-31 15:27:08.787280",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 1:18 PM, Aram H\u0103v\u0103rneanu <aram@mgk.ro> wrote:\r\n>\r\n> Just because something is useful (which nobody disputes) doesn't\r\n> mean it should be the default. It might be hard to obtain this\r\n> behavior now (requires using syscall), but with your patch it will\r\n> be hard to get the old behavior back. I'm also not sure this semantic\r\n> change is compatible with the Go 1 contract.\r\n>\r\n> What about this idea, add syscall.FILE_SHARE_DELETE and change\r\n> syscall.Open so that you can pass it. This way you can use\r\n> os.OpenFile(\"foo\", syscall.FILE_SHARE_DELETE, 0) if you need it.\r\n>\r\n\r\nJust doesn't make much sense to me.\r\n\r\nThe constant is already defined in the package syscall,\r\nand unfortunately has same value (0x00000004) as other constants there,\r\nsuch as FILE_APPEND_DATA for example.\r\n\r\nFurther, 2 more reasons:\r\n\r\n1) Need to add logic such as this to programs:\r\n\r\nif running on Windows then\r\n    open file with this flag\r\nelse\r\n    open file\r\nend\r\n\r\n\r\n2) What about the case where a program attempts to delete or rename a file\r\nand that file was open by some other Go package that didn't pass that flag\r\nto the OpenFile() call? Would need to change every such package out there\r\nto add an optional file flags parameter/config.\r\n\r\n\r\nImho, the fact that no one reported this issue before is likely because no\r\none attempted to do this on Windows yet, or didn't bother investigating or\r\nreporting the issue.\r\n\r\n\r\n\r\n\r\n\r\n\r\n-- \r\nFilipe David Manana,\r\n\r\n\"Reasonable men adapt themselves to the world.\r\n Unreasonable men adapt the world to themselves.\r\n That's why all progress depends on unreasonable men.\"\r\n",
			"disapproval": false,
			"date": "2013-03-31 12:30:51.759920",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "cc: +alex.brainman, maybe he could tell you why FILE_SHARE_DELETE is not\r\nused in syscall.Open.\r\n\r\nOn Sun, Mar 31, 2013 at 11:27 PM, Filipe David Manana\r\n<fdmanana@gmail.com> wrote:\r\n> On Sun, Mar 31, 2013 at 3:52 PM, minux <minux.ma@gmail.com> wrote:\r\n>> On Sun, Mar 31, 2013 at 8:30 PM, Filipe David Manana <fdmanana@gmail.com>\r\n>> wrote:\r\n>> > Imho, the fact that no one reported this issue before is likely because\r\n>> > no\r\n>> > one attempted to do this on Windows yet, or didn't bother investigating\r\n>> > or\r\n>> > reporting the issue.\r\n>> another reason: people using windows accept that not being able to rename\r\n>> or\r\n>> remove an open file is the norm and has already get used to that fact.\r\n>>\r\n>> We can't silently change the Go 1.0 program behavior here, perhaps people\r\n>> actually depend on it.\r\n> Then why does Open() (and OpenFile())  always, and unconditionally, pass\r\n> FILE_SHARE_READ and FILE_SHARE_WRITE to Window's CreateFile() function [1] ?\r\n> It's very inconsistent. People wanting to have full access to Windows\r\nEven if they're inconsistent, unfortunately IMHO we can't change that now.\r\n> specific behaviour should then have the possibility to specify exactly which\r\n> share flags are passed to CreateFile(). Right now they just can't.\r\nthey can call syscall.CreateFile themselves and then os.NewFile.\r\n> If the os package intended to allow for fine grained OS specific file\r\n> semantics, it should have had in the first place the possibility to allow to\r\nThe os package doesn't intend to do that.\r\n> specify these flags, rather than hardcode them. I believe the goal here, by\r\n> hardcoding the read and write share flags, was to provide POSIX alike\r\n> semantics to Windows programs.\r\nbecause even with FILE_SHARE_DELETE, the semantics is still not like\r\nthat on Unix.\r\nalthough you can delete the open file, but you can't create a new file with the\r\nsame name in that directory.\r\n\r\nIn fact, FILE_SHARE_DELETE is not used in Windows CRT, so almost\r\nall windows programs behave the same as what Go behaves now, why\r\nchange that? If you have that specific requirement, you can always get\r\nwhat you want by using syscall directly.\r\n",
			"disapproval": false,
			"date": "2013-03-31 16:08:37.933980",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> why does Open() (and OpenFile())  always, and unconditionally, pass\r\n> FILE_SHARE_READ and FILE_SHARE_WRITE to Window's CreateFile()\r\n> function\r\n\r\nBecause otherwise OpenFile would be useless. Note to people that\r\ndon't know Windows, FILE_SHARE_READ and FILE_SHARE_WRITE are not\r\nlike O_RDONLY or O_WRONLY, they are something else:\r\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx\r\n\r\n> If the os package intended to allow for fine grained OS specific file \r\nsemantics\r\n\r\nI don't think that's the purpose of the os package. If you need\r\nfine-grained OS specific semantics there's syscall.\r\n\r\nPlease note that FILE_SHARE_DELETE still doesn't provide POSIX\r\nsemantics. More specifically, this doesn't work even with\r\nFILE_SHARE_DELETE:\r\n\r\n$ touch a\r\n$ tail -f a &\r\n[1] 86647\r\n$ rm a\r\n$ touch a\r\n$ \r\n\r\nFILE_SHARE_DELETE also works pretty bad with SMB shares. The Windows\r\nstandard C runtime doesn't use it either.\r\n\r\n",
			"disapproval": false,
			"date": "2013-03-31 16:17:23.012160",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Heh, Minux beat me to it, but I'm amazed by the similarities of our answers.",
			"disapproval": false,
			"date": "2013-03-31 16:18:31.764780",
			"approval": false
		},
		{
			"sender": "fdmanana@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 5:08 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> cc: +alex.brainman, maybe he could tell you why FILE_SHARE_DELETE is not\r\n> used in syscall.Open.\r\n>\r\n> On Sun, Mar 31, 2013 at 11:27 PM, Filipe David Manana\r\n> <fdmanana@gmail.com> wrote:\r\n> > On Sun, Mar 31, 2013 at 3:52 PM, minux <minux.ma@gmail.com> wrote:\r\n> >> On Sun, Mar 31, 2013 at 8:30 PM, Filipe David Manana <\r\n> fdmanana@gmail.com>\r\n> >> wrote:\r\n> >> > Imho, the fact that no one reported this issue before is likely\r\n> because\r\n> >> > no\r\n> >> > one attempted to do this on Windows yet, or didn't bother\r\n> investigating\r\n> >> > or\r\n> >> > reporting the issue.\r\n> >> another reason: people using windows accept that not being able to\r\n> rename\r\n> >> or\r\n> >> remove an open file is the norm and has already get used to that fact.\r\n> >>\r\n> >> We can't silently change the Go 1.0 program behavior here, perhaps\r\n> people\r\n> >> actually depend on it.\r\n> > Then why does Open() (and OpenFile())  always, and unconditionally, pass\r\n> > FILE_SHARE_READ and FILE_SHARE_WRITE to Window's CreateFile() function\r\n> [1] ?\r\n> > It's very inconsistent. People wanting to have full access to Windows\r\n> Even if they're inconsistent, unfortunately IMHO we can't change that now.\r\n> > specific behaviour should then have the possibility to specify exactly\r\n> which\r\n> > share flags are passed to CreateFile(). Right now they just can't.\r\n> they can call syscall.CreateFile themselves and then os.NewFile.\r\n> > If the os package intended to allow for fine grained OS specific file\r\n> > semantics, it should have had in the first place the possibility to\r\n> allow to\r\n> The os package doesn't intend to do that.\r\n> > specify these flags, rather than hardcode them. I believe the goal here,\r\n> by\r\n> > hardcoding the read and write share flags, was to provide POSIX alike\r\n> > semantics to Windows programs.\r\n> because even with FILE_SHARE_DELETE, the semantics is still not like\r\n> that on Unix.\r\n> although you can delete the open file, but you can't create a new file\r\n> with the\r\n> same name in that directory.\r\n>\r\n\r\nCorrect. That's why it's common to rename first the file (to some uuid for\r\ne.g.) and then delete it - works if one opened the file with the share\r\ndelete flag (we do this rename + delete in couchdb for that reason).\r\n\r\n\r\n>\r\n> In fact, FILE_SHARE_DELETE is not used in Windows CRT, so almost\r\n> all windows programs behave the same as what Go behaves now, why\r\n> change that? If you have that specific requirement, you can always get\r\n> what you want by using syscall directly.\r\n>\r\n\r\nI understand your point, but to me it still seems confusing why not using\r\nall share flags by default. Imho it makes it much closer to POSIX semantics\r\n(basically to every other platform supported other than Windows).\r\n\r\n\r\n\r\n-- \r\nFilipe David Manana,\r\n\r\n\"Reasonable men adapt themselves to the world.\r\n Unreasonable men adapt the world to themselves.\r\n That's why all progress depends on unreasonable men.\"\r\n",
			"disapproval": false,
			"date": "2013-03-31 16:24:43.157940",
			"approval": false
		}
	],
	"owner_email": "fdmanana@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "fdmanana",
	"subject": "code review 8203043: syscall: Use FILE_SHARE_DELETE flag when opening files ...",
	"created": "2013-03-30 21:22:11.775230",
	"patchsets": [
		1,
		2001,
		5001,
		6001,
		11001,
		15001
	],
	"modified": "2013-03-31 16:24:43.157940",
	"closed": false,
	"issue": 8203043
}