{
	"description": "go.crypto/ssh: introduce a circular buffer for chanReader",
	"cc": [
		"agl@golang.org",
		"gustav.paul@gmail.com",
		"kardianos@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, gustav.paul@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-11 21:28:15.226802",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, gustav.paul@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-05-11 21:14:38.031809",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, gustav.paul@gmail.com, kardianos@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-15 08:03:48.048684",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nI did think about merging the ring buffer and window tracking code. However I come unstuck when trying to think about how to handle stdout+stderr. They are separate data streams but share a window and that made everything messy :(\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go\nFile ssh/buffer.go (right):\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode16\nssh/buffer.go:16: // protects concurrent access to head, tail and eof\ns/eof/closed/?\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode42\nssh/buffer.go:42: // write makes buf available for Read to receive.\nthis refers to `buf' but the argument is called 'b'\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode63\nssh/buffer.go:63: // Read reads data from the internal buffer in buf.\nditto about buf/b.\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode64\nssh/buffer.go:64: // Reads will block if not data is available, or until\ns/not/no/\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode75\nssh/buffer.go:75: if len(buf) == 0 {\nI think it's very slightly nicer if the for loop has the condition len(buf) > 0 and this condition is removed.\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode90\nssh/buffer.go:90: // out of buffers, wait for producer\nthis comment should be moved down to the Wait()?",
			"disapproval": false,
			"date": "2012-05-14 15:21:30.814897",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/14 15:21:30, agl1 wrote:\n> LGTM.\n> \n> I did think about merging the ring buffer and window tracking code. However I\n> come unstuck when trying to think about how to handle stdout+stderr. They are\n> separate data streams but share a window and that made everything messy :(\n\nI think this is solved now that channel.remoteWin contains the windowing logic, anything with a reference to that (which you get for free if you embed channel) can use channel.sendWindowAdj()",
			"disapproval": false,
			"date": "2012-05-15 01:12:03.161315",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. I'm going to bang on this for a bit more to make sure there are no conditions where channels get wedged, or worse, continue to accept data until the process OOMs.\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go\nFile ssh/buffer.go (right):\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode16\nssh/buffer.go:16: // protects concurrent access to head, tail and eof\nOn 2012/05/14 15:21:31, agl1 wrote:\n> s/eof/closed/?\n\nDone.\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode42\nssh/buffer.go:42: // write makes buf available for Read to receive.\nSorry, i'm not sure what you mean, the receiver is b, but the argument to write is buf.\n\nOn 2012/05/14 15:21:31, agl1 wrote:\n> this refers to `buf' but the argument is called 'b'\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode63\nssh/buffer.go:63: // Read reads data from the internal buffer in buf.\nSee above. \n\nOn 2012/05/14 15:21:31, agl1 wrote:\n> ditto about buf/b.\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode64\nssh/buffer.go:64: // Reads will block if not data is available, or until\nOn 2012/05/14 15:21:31, agl1 wrote:\n> s/not/no/\n\nDone.\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode75\nssh/buffer.go:75: if len(buf) == 0 {\nThanks for the suggestion, it is nicer and the logic flows better now.\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode90\nssh/buffer.go:90: // out of buffers, wait for producer\nOn 2012/05/14 15:21:31, agl1 wrote:\n> this comment should be moved down to the Wait()?\n\nDone.",
			"disapproval": false,
			"date": "2012-05-15 01:12:57.966676",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b24d6db9878e&repo=crypto ***\n\ngo.crypto/ssh: introduce a circular buffer for chanReader\n\nR=agl, gustav.paul, kardianos\nCC=golang-dev\nhttp://codereview.appspot.com/6207051",
			"disapproval": false,
			"date": "2012-05-15 22:04:02.395737",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go\nFile ssh/buffer.go (right):\n\nhttp://codereview.appspot.com/6207051/diff/4/ssh/buffer.go#newcode42\nssh/buffer.go:42: // write makes buf available for Read to receive.\nOn 2012/05/15 01:12:58, dfc wrote:\n> Sorry, i'm not sure what you mean, the receiver is b, but the argument to write\n> is buf.\n\nSorry, my brain fart.",
			"disapproval": false,
			"date": "2012-05-15 15:30:06.917593",
			"approval": true
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6207051: go.crypto/ssh: introduce a circular buffer for chanReader",
	"created": "2012-05-10 21:57:26.760624",
	"patchsets": [
		1,
		2001,
		1002,
		6001,
		7001,
		4,
		5003,
		13001,
		5004
	],
	"modified": "2012-05-15 22:04:07.362714",
	"closed": true,
	"issue": 6207051
}