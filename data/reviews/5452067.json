{
	"description": "crypto/des: Speedup of encryption/decryption\n\n        Some optimizations increase the speed significantly:\n\n        The three-dimensional Sboxes are converted to an internal\n        one-dimensional array, where the access to a specific\n        element is not done with sbox[i][row][column] including a\n        lot of shifting and masking for the calculation of row\n        and column any more, but with a simpler access to\n        internalSbox[idx]. The shifting and masking is moved from\n        encryption/decryption time to initialization time. I left\n        the original Sboxes unmodified, so that it can easily be\n        checked for the correct Sbox coefficients.\n\n        In block.go, cryptBlock(), the former loop is unrolled. The\n        loop should not cost so much, but at least the check for\n        encryption or decryption should be moved out of the loop.\n\n        The general purpose permuteBlock() is replaced/added by\n        expandBlock() and pbox(), which do their job much faster\n        than the generic function. This is where where most of the\n        speed gain is coming from.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com"
	],
	"messages": [],
	"owner_email": "nroos@webware-experts.de",
	"private": false,
	"base_url": "",
	"owner": "nroos",
	"subject": "crypto/des: Speedup of encryption/decryption",
	"created": "2011-12-07 13:41:40.396477",
	"patchsets": [
		1,
		2001
	],
	"modified": "2011-12-07 13:43:01.585063",
	"closed": true,
	"issue": 5452067
}