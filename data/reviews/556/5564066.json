{
	"description": "reflect: avoid allocation in Type.Field, in most cases\n\nFixes issue 2320",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"r@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That was my original thought, but populating the sliceheader means taking\nthe address of the int which promotes the value to the heap.\n\nUnless I did it wrong or am missing an unsafe trick. I hope I am.\nOn Jan 26, 2012 6:11 PM, <dsymonds@golang.org> wrote:\n\n> alternative: what if StructField had an unexported [1]int, and that was\n> set, and then f.Index was just the 1-element slice of it? That would\n> work for any int (not just small ones), and would mean that callers\n> would not be able to change shared values that way?\n>\n> http://codereview.appspot.com/**5564066/<http://codereview.appspot.com/5564066/>\n>\n",
			"disapproval": false,
			"date": "2012-01-27 02:25:46.831968",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with Russ. It's not safe.",
			"disapproval": false,
			"date": "2012-01-27 02:58:13.716181",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "alternative: what if StructField had an unexported [1]int, and that was set, and then f.Index was just the 1-element slice of it? That would work for any int (not just small ones), and would mean that callers would not be able to change shared values that way?",
			"disapproval": false,
			"date": "2012-01-27 02:11:45.074417",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-27 02:06:16.440959",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not sure whether this is safe enough.  I really like your\nidea of just fixing the i every time, and I can't see anything too\nwrong with it, but it still bothers me a bit.  I think I'd rather\ndo true read-only data, as in codereview.appspot.com/5371098,\nor just do nothing.\n\nPart of the reason we tabled 5371098 was that there was no\ncompelling performance data for it.  Do you happen to have\nany?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-27 02:50:48.164144",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like your CL more.  I hadn't seen it, and kinda wish it'd been linked\nfrom the bug.\n\nI'll just defer the bug (with some links) with \"Priority-Later\".  I thought\nsomebody cared since it was Priority-Go1.\n\n\nOn Thu, Jan 26, 2012 at 6:50 PM, Russ Cox <rsc@golang.org> wrote:\n\n> I am not sure whether this is safe enough.  I really like your\n> idea of just fixing the i every time, and I can't see anything too\n> wrong with it, but it still bothers me a bit.  I think I'd rather\n> do true read-only data, as in codereview.appspot.com/5371098,\n> or just do nothing.\n>\n> Part of the reason we tabled 5371098 was that there was no\n> compelling performance data for it.  Do you happen to have\n> any?\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2012-01-27 16:45:39.743770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 27, 2012 at 11:45, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I like your CL more. \u00a0I hadn't seen it, and kinda wish it'd been linked from\n> the bug.\n\nVery sorry about that.  I had to go looking for it to reply.\nI will send a CL out later today to put a link to the CL\nin the source code.\n\n> I'll just defer the bug (with some links) with \"Priority-Later\". \u00a0I thought\n> somebody cared since it was Priority-Go1.\n\nOn some of the bugs, Priority-Go1 means 'decide what our answer is',\nnot necessarily 'this must be done for Go 1'.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-27 16:48:20.742504",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 27, 2012 at 8:48 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Fri, Jan 27, 2012 at 11:45, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > I like your CL more.  I hadn't seen it, and kinda wish it'd been linked\n> from\n> > the bug.\n>\n> Very sorry about that.  I had to go looking for it to reply.\n> I will send a CL out later today to put a link to the CL\n> in the source code.\n>\n> > I'll just defer the bug (with some links) with \"Priority-Later\".  I\n> thought\n> > somebody cared since it was Priority-Go1.\n>\n> On some of the bugs, Priority-Go1 means 'decide what our answer is',\n> not necessarily 'this must be done for Go 1'.\n\n\nYeah, I know.  I was just bored on the bus and trying to resolve bugs &\nthat one was fun.  But it's resolved now.  Feel free to flip it back to Go1\nif you want, though.\n",
			"disapproval": false,
			"date": "2012-01-27 16:56:40.079585",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 27, 2012, at 8:48 AM, Russ Cox wrote:\n\n> \n> On some of the bugs, Priority-Go1 means 'decide what our answer is',\n> not necessarily 'this must be done for Go 1'.\n\ns/some/all/\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-01-27 17:08:50.114082",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5564066: reflect: avoid allocation in Type.Field, in most cases",
	"created": "2012-01-27 02:05:07.298440",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-01-31 21:16:45.183711",
	"closed": true,
	"issue": 5564066
}