{
	"description": "flag: allow a FlagSet to not write to os.Stderr\n\nFixes issue 2747",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"r@golang.org",
		"rogpeppe@gmail.com",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI.\n\nr should weigh in.\n\nhttp://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go\nFile src/pkg/flag/flag.go (right):\n\nhttp://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode227\nsrc/pkg/flag/flag.go:227: Output io.Writer\nI'd make this private and get rid of the accessor below. A new FlagSet needs to be created with NewFlagSet or initialized w/ Init so the zero value of FlagSet is not valid. Init can set output to os.Stderr.\n\nInstead I would provide a SetOutput (or similar) function to change the output. Seems cleaner - there are no other exported fields here.\n\nhttp://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode332\nsrc/pkg/flag/flag.go:332: func (fs *FlagSet) PrintDefaults() {\nI'd leave this alone (s/fs/f/) for consistency w/ all other methods, and instead do s/f/flag/ below.",
			"disapproval": false,
			"date": "2012-01-27 01:32:21.234601",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go\nFile src/pkg/flag/flag.go (right):\n\nhttp://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode227\nsrc/pkg/flag/flag.go:227: Output io.Writer\nsome of the above. the zero value should be usable.\n\n1) do not export the field\n2) keep the private accessor\n3) provide a SetOutput method.\n\nhttp://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode239\nsrc/pkg/flag/flag.go:239: if f.Output != nil {\ni'd flip this, put the special case first and do == nil here.",
			"disapproval": false,
			"date": "2012-01-27 02:54:55.870509",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-27 01:15:55.603681",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FlagSet.Init refers to \"the zero FlagSet\", suggesting it's usable on its\nown, and shouldn't crash if output is nil, hence the accessor.\n\nInit is already kinda weird.  I don't want to add a third parameter there,\nbut having one function named Init setting two things and a second doing\ndoing its own single field seems weird.\n\nWaiting for Rob.\n\n\nOn Thu, Jan 26, 2012 at 5:32 PM, <gri@golang.org> wrote:\n\n> FYI.\n>\n> r should weigh in.\n>\n>\n> http://codereview.appspot.com/**5564065/diff/3001/src/pkg/**flag/flag.go<http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go>\n> File src/pkg/flag/flag.go (right):\n>\n> http://codereview.appspot.com/**5564065/diff/3001/src/pkg/**\n> flag/flag.go#newcode227<http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode227>\n> src/pkg/flag/flag.go:227: Output io.Writer\n> I'd make this private and get rid of the accessor below. A new FlagSet\n> needs to be created with NewFlagSet or initialized w/ Init so the zero\n> value of FlagSet is not valid. Init can set output to os.Stderr.\n>\n> Instead I would provide a SetOutput (or similar) function to change the\n> output. Seems cleaner - there are no other exported fields here.\n>\n> http://codereview.appspot.com/**5564065/diff/3001/src/pkg/**\n> flag/flag.go#newcode332<http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode332>\n> src/pkg/flag/flag.go:332: func (fs *FlagSet) PrintDefaults() {\n> I'd leave this alone (s/fs/f/) for consistency w/ all other methods, and\n> instead do s/f/flag/ below.\n>\n> http://codereview.appspot.com/**5564065/<http://codereview.appspot.com/5564065/>\n>\n",
			"disapproval": false,
			"date": "2012-01-27 01:37:16.743277",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM modulo rob's comments.\nno test?\n\nOn 27 January 2012 02:54,  <r@golang.org> wrote:\n>\n> http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go\n> File src/pkg/flag/flag.go (right):\n>\n> http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode227\n> src/pkg/flag/flag.go:227: Output io.Writer\n> some of the above. the zero value should be usable.\n>\n> 1) do not export the field\n> 2) keep the private accessor\n> 3) provide a SetOutput method.\n>\n> http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode239\n> src/pkg/flag/flag.go:239: if f.Output != nil {\n> i'd flip this, put the special case first and do == nil here.\n>\n> http://codereview.appspot.com/5564065/\n",
			"disapproval": false,
			"date": "2012-01-27 11:31:53.046293",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 26, 2012, at 5:37 PM, Brad Fitzpatrick wrote:\n\n> FlagSet.Init refers to \"the zero FlagSet\", suggesting it's usable on its own, and shouldn't crash if output is nil, hence the accessor.\n> \n> Init is already kinda weird.  I don't want to add a third parameter there, but having one function named Init setting two things and a second doing doing its own single field seems weird.\n\nit does, but this is such a special feature almost no one will use it. it doesn't bother me to have it tucked away.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-01-27 16:12:53.755670",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, r@golang.org, rogpeppe@gmail.com, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-27 16:25:08.370555",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5564065/diff/7001/src/pkg/flag/flag.go\nFile src/pkg/flag/flag.go (right):\n\nhttp://codereview.appspot.com/5564065/diff/7001/src/pkg/flag/flag.go#newcode791\nsrc/pkg/flag/flag.go:791: // SetOutput sets where usage and error messages are written.\nSetOutput sets the destination for usage and error messages.\n\nhttp://codereview.appspot.com/5564065/diff/7001/src/pkg/flag/flag.go#newcode792\nsrc/pkg/flag/flag.go:792: // If output is nil, os.Stderr is used.\nput this right after out(), so the two methods for the field are together.\n\nhttp://codereview.appspot.com/5564065/diff/7001/src/pkg/flag/flag_test.go\nFile src/pkg/flag/flag_test.go (right):\n\nhttp://codereview.appspot.com/5564065/diff/7001/src/pkg/flag/flag_test.go#newcode218\nsrc/pkg/flag/flag_test.go:218: t.Logf(\"expected output mentionining unknown; got %q\", out)\ns/mentionining/mentioning/",
			"disapproval": false,
			"date": "2012-01-27 17:07:26.833783",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5d72030a6c50 ***\n\nflag: allow a FlagSet to not write to os.Stderr\n\nFixes issue 2747\n\nR=golang-dev, gri, r, rogpeppe, r\nCC=golang-dev\nhttp://codereview.appspot.com/5564065",
			"disapproval": false,
			"date": "2012-01-27 17:23:09.037195",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All addressed, and added a test.\n\nOn Fri, Jan 27, 2012 at 3:31 AM, roger peppe <rogpeppe@gmail.com> wrote:\n\n> LGTM modulo rob's comments.\n> no test?\n>\n> On 27 January 2012 02:54,  <r@golang.org> wrote:\n> >\n> > http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go\n> > File src/pkg/flag/flag.go (right):\n> >\n> >\n> http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode227\n> > src/pkg/flag/flag.go:227: Output io.Writer\n> > some of the above. the zero value should be usable.\n> >\n> > 1) do not export the field\n> > 2) keep the private accessor\n> > 3) provide a SetOutput method.\n> >\n> >\n> http://codereview.appspot.com/5564065/diff/3001/src/pkg/flag/flag.go#newcode239\n> > src/pkg/flag/flag.go:239: if f.Output != nil {\n> > i'd flip this, put the special case first and do == nil here.\n> >\n> > http://codereview.appspot.com/5564065/\n>\n",
			"disapproval": false,
			"date": "2012-01-27 16:48:18.591540",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5564065: flag: allow a FlagSet to not write to os.Stderr",
	"created": "2012-01-27 01:14:51.904549",
	"patchsets": [
		1,
		1002,
		3001,
		7001,
		9002
	],
	"modified": "2012-01-27 17:23:10.904329",
	"closed": true,
	"issue": 5564065
}