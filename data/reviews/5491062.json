{
	"description": "net: DialTimeout\n\nFixes issue 240",
	"cc": [
		"adg@google.com",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"r@golang.org",
		"mikioh.mikioh@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode77\nsrc/pkg/net/dial.go:77: // The timeout includes any address resolution time.\ns/any.+$/name resolution, if required./\n\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode83\nsrc/pkg/net/dial.go:83: t := time.NewTimer(timeout)\nwhy not t.After? Doesn't using a ticker have the same drawbacks?\n\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode112\nsrc/pkg/net/dial.go:112: err := &OpError{\nIs there a way to figure out if err is a timeout (besides scanning the error text)? Doesn't look like it, unless I'm missing something. There should be.",
			"disapproval": false,
			"date": "2011-12-17 05:08:53.117816",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode83\nsrc/pkg/net/dial.go:83: t := time.NewTimer(timeout)\nOn 2011/12/17 05:08:53, adg1 wrote:\n> why not t.After? Doesn't using a ticker have the same drawbacks?\n\nThe common case in this code is that the timeout isn't reached; using time.After would result in a goroutine and channel that hang around until the timeout is reached. If you were dialing a lot, that would get inefficient.",
			"disapproval": false,
			"date": "2011-12-17 06:37:06.060916",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-16 19:41:58.471475",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "From the name alone, I'd interpret DialWithin like it was dialing from a\ngiven local address (\"dial within this subnet\").\n\nI'm happy with DialTimeout or DialWithTimeout.  I also considered\nDialBefore, but that sounds like it'd take an absolute time, not a duration.\n\nRuss picked the name, IIRC.  I'm not picky.\n\n\nOn Mon, Dec 19, 2011 at 1:51 PM, <r@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5491062/diff/4001/src/pkg/net/**dial.go<http://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go>\n> File src/pkg/net/dial.go (right):\n>\n> http://codereview.appspot.com/**5491062/diff/4001/src/pkg/net/**\n> dial.go#newcode78<http://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode78>\n> src/pkg/net/dial.go:78: func DialTimeout(net, addr string, timeout\n> time.Duration) (Conn, error) {\n> not enamored with the name. DialTimeout sounds like something that\n> causes dial to timeout, not something that manages it.\n> DialWithTimeout is better but longer.\n> cleverer: DialWithin.\n> reads like this\n> DialWithin(net, addr, 10*time.Second)\n>\n> but if you prefer to keep DialTimeout, i won't press you.\n>\n> http://codereview.appspot.com/**5491062/<http://codereview.appspot.com/5491062/>\n>\n",
			"disapproval": false,
			"date": "2011-12-19 21:56:27.635801",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@google.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com, dsymonds@golang.org, rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-19 23:48:13.978150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode112\nsrc/pkg/net/dial.go:112: err := &OpError{\nOn 2011/12/17 05:08:53, adg1 wrote:\n> Is there a way to figure out if err is a timeout (besides scanning the error\n> text)? Doesn't look like it, unless I'm missing something. There should be.\n\nhttp://golang.org/pkg/net/#OpError.Timeout",
			"disapproval": false,
			"date": "2011-12-17 16:27:22.362457",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Saturday, December 17, 2011,  <dsymonds@golang.org> wrote:\n> LGTM\n>\n>\n> http://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go\n> File src/pkg/net/dial.go (right):\n>\n>\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode83\n> src/pkg/net/dial.go:83: t := time.NewTimer(timeout)\n> On 2011/12/17 05:08:53, adg1 wrote:\n>>\n>> why not t.After? Doesn't using a ticker have the same drawbacks?\n>\n> The common case in this code is that the timeout isn't reached; using\n> time.After would result in a goroutine and channel that hang around\n> until the timeout is reached. If you were dialing a lot, that would get\n> inefficient.\n\nOh, I misread this as NewTicker, not NewTimer. Definitely the right choice,\nthen.\n",
			"disapproval": false,
			"date": "2011-12-18 01:08:55.550545",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@google.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nnice nested select",
			"disapproval": false,
			"date": "2011-12-19 21:42:54.375322",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hah, didn't even notice.\n\nLet me add a test & re-ping.\n\n\nOn Mon, Dec 19, 2011 at 1:42 PM, <rsc@golang.org> wrote:\n\n> LGTM\n>\n> nice nested select\n>\n>\n> http://codereview.appspot.com/**5491062/<http://codereview.appspot.com/5491062/>\n>\n",
			"disapproval": false,
			"date": "2011-12-19 21:44:17.907828",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@google.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttp://codereview.appspot.com/5491062/diff/4001/src/pkg/net/dial.go#newcode78\nsrc/pkg/net/dial.go:78: func DialTimeout(net, addr string, timeout time.Duration) (Conn, error) {\nnot enamored with the name. DialTimeout sounds like something that causes dial to timeout, not something that manages it.\nDialWithTimeout is better but longer.\ncleverer: DialWithin.\nreads like this\nDialWithin(net, addr, 10*time.Second)\n\nbut if you prefer to keep DialTimeout, i won't press you.",
			"disapproval": false,
			"date": "2011-12-19 21:51:37.497253",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@google.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5491062/diff/2003/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttp://codereview.appspot.com/5491062/diff/2003/src/pkg/net/dial.go#newcode78\nsrc/pkg/net/dial.go:78: func DialTimeout(net, addr string, timeout time.Duration) (Conn, error) {\nI'd also prefer DialWithTimeout, but I can live with this.\n\nhttp://codereview.appspot.com/5491062/diff/2003/src/pkg/net/dial_test.go\nFile src/pkg/net/dial_test.go (right):\n\nhttp://codereview.appspot.com/5491062/diff/2003/src/pkg/net/dial_test.go#newcode53\nsrc/pkg/net/dial_test.go:53: // At least darwin 10.7 will seem to accept any number of connections,\ndarwin has different version numbers to OS X (compare \"uname -a\" with Apple -> About This Mac). I think you mean \"OS X 10.7\" here.",
			"disapproval": false,
			"date": "2011-12-20 00:22:41.095062",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"adg@google.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5491062/diff/2003/src/pkg/net/dial_test.go\nFile src/pkg/net/dial_test.go (right):\n\nhttp://codereview.appspot.com/5491062/diff/2003/src/pkg/net/dial_test.go#newcode25\nsrc/pkg/net/dial_test.go:25: if runtime.GOOS == \"windows\" {\nFor now, please add both freebsd and openbsd too if you\nhaven't tested on these two. IIRC, 127.0.0.0/8 is usually \ninstalled as reject route on openbsd.",
			"disapproval": false,
			"date": "2011-12-20 01:14:47.780478",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@google.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com, dsymonds@golang.org, rsc@golang.org, r@golang.org, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-20 21:06:17.704145",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@google.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0e775d9b9ad1 ***\n\nnet: DialTimeout\n\nFixes issue 240\n\nR=adg, dsymonds, rsc, r, mikioh.mikioh\nCC=golang-dev\nhttp://codereview.appspot.com/5491062",
			"disapproval": false,
			"date": "2011-12-20 21:17:43.785592",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5491062: net: DialTimeout",
	"created": "2011-12-16 19:41:47.694585",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		2003,
		8001,
		10001
	],
	"modified": "2011-12-20 23:09:06.557677",
	"closed": true,
	"issue": 5491062
}