{
	"description": "all: set GOMAXPROCS to 1 when counting mallocs\nalso fix an annoying test that relies on $GOROOT be set.\nFixes issue 3690.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 27, 2012 at 2:00 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Thank you for this. It almost feels like this should be a facility of the\r\n> testing package itself, but I can't think of a straight forward way to\r\n> accomplish it.\r\n>\r\nYour comment reminds me:\r\nwe do have -test.benchmem, and I think it should set GOMAXPROCS to 1 before\r\nthe\r\nmemory benchmark too.\r\n",
			"disapproval": false,
			"date": "2012-11-26 18:26:35.140750",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for this. It almost feels like this should be a facility of the\r\ntesting package itself, but I can't think of a straight forward way to\r\naccomplish it.\r\nOn 27 Nov 2012 04:56, <minux.ma@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> all: set GOMAXPROCS to 1 when counting mallocs\r\n> also fix an annoying test that relies on $GOROOT be set.\r\n> Fixes issue 3690.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6844086/<http://codereview.appspot.com/6844086/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/encoding/gob/timing_**test.go\r\n>   M src/pkg/fmt/fmt_test.go\r\n>   M src/pkg/math/big/nat_test.go\r\n>   M src/pkg/net/http/header_test.**go\r\n>   M src/pkg/net/rpc/server_test.go\r\n>   M src/pkg/path/filepath/path_**test.go\r\n>   M src/pkg/path/path_test.go\r\n>   M src/pkg/reflect/all_test.go\r\n>   M src/pkg/runtime/gc_test.go\r\n>   M src/pkg/runtime/mallocrep1.go\r\n>   M src/pkg/strconv/strconv_test.**go\r\n>\r\n>\r\n> Index: src/pkg/encoding/gob/timing_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/timing_**test.go\r\n> +++ b/src/pkg/encoding/gob/timing_**test.go\r\n> @@ -50,6 +50,7 @@\r\n>  }\r\n>\r\n>  func TestCountEncodeMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         var buf bytes.Buffer\r\n>         enc := NewEncoder(&buf)\r\n>         bench := &Bench{7, 3.2, \"now is the time\", []byte(\"for all good\r\n> men\")}\r\n> @@ -69,6 +70,7 @@\r\n>  }\r\n>\r\n>  func TestCountDecodeMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         var buf bytes.Buffer\r\n>         enc := NewEncoder(&buf)\r\n>         bench := &Bench{7, 3.2, \"now is the time\", []byte(\"for all good\r\n> men\")}\r\n> Index: src/pkg/fmt/fmt_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/fmt/fmt_test.go\r\n> +++ b/src/pkg/fmt/fmt_test.go\r\n> @@ -581,6 +581,7 @@\r\n>  var _ bytes.Buffer\r\n>\r\n>  func TestCountMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         for _, mt := range mallocTest {\r\n>                 const N = 100\r\n>                 memstats := new(runtime.MemStats)\r\n> Index: src/pkg/math/big/nat_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/math/big/nat_test.go\r\n> +++ b/src/pkg/math/big/nat_test.go\r\n> @@ -180,6 +180,7 @@\r\n>  // does not cause deep recursion and in turn allocate too much memory.\r\n>  // Test case for issue 3807.\r\n>  func TestMulUnbalanced(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         x := rndNat(50000)\r\n>         y := rndNat(40)\r\n>         allocSize := allocBytes(func() {\r\n> Index: src/pkg/net/http/header_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/header_**test.go\r\n> +++ b/src/pkg/net/http/header_**test.go\r\n> @@ -188,6 +188,7 @@\r\n>  }\r\n>\r\n>  func doHeaderWriteSubset(n int, t errorfer) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         h := Header(map[string][]string{\r\n>                 \"Content-Length\": {\"123\"},\r\n>                 \"Content-Type\":   {\"text/plain\"},\r\n> @@ -204,7 +205,7 @@\r\n>         var m1 runtime.MemStats\r\n>         runtime.ReadMemStats(&m1)\r\n>         if mallocs := m1.Mallocs - m0.Mallocs; n >= 100 && mallocs >=\r\n> uint64(n) {\r\n> -               // TODO(bradfitz,rsc): once we can sort with allocating,\r\n> +               // TODO(bradfitz,rsc): once we can sort without allocating,\r\n>                 // make this an error.  See http://golang.org/issue/3761\r\n>                 // t.Errorf(\"did %d mallocs (>= %d iterations); should\r\n> have avoided mallocs\", mallocs, n)\r\n>         }\r\n> Index: src/pkg/net/rpc/server_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/rpc/server_test.**go\r\n> +++ b/src/pkg/net/rpc/server_test.**go\r\n> @@ -446,6 +446,7 @@\r\n>  }\r\n>\r\n>  func countMallocs(dial func() (*Client, error), t *testing.T) uint64 {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         once.Do(startServer)\r\n>         client, err := dial()\r\n>         if err != nil {\r\n> Index: src/pkg/path/filepath/path_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/path/filepath/path_**test.go\r\n> +++ b/src/pkg/path/filepath/path_**test.go\r\n> @@ -91,6 +91,7 @@\r\n>  }\r\n>\r\n>  func TestClean(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         tests := cleantests\r\n>         if runtime.GOOS == \"windows\" {\r\n>                 for i := range tests {\r\n> @@ -897,7 +898,7 @@\r\n>  }\r\n>\r\n>  func TestBug3486(t *testing.T) { // http://code.google.com/p/go/**\r\n> issues/detail?id=3486 <http://code.google.com/p/go/issues/detail?id=3486>\r\n> -       root, err := filepath.EvalSymlinks(os.**Getenv(\"GOROOT\"))\r\n> +       root, err := filepath.EvalSymlinks(runtime.**GOROOT())\r\n>         if err != nil {\r\n>                 t.Fatal(err)\r\n>         }\r\n> Index: src/pkg/path/path_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/path/path_test.go\r\n> +++ b/src/pkg/path/path_test.go\r\n> @@ -64,6 +64,7 @@\r\n>  }\r\n>\r\n>  func TestClean(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         for _, test := range cleantests {\r\n>                 if s := Clean(test.path); s != test.result {\r\n>                         t.Errorf(\"Clean(%q) = %q, want %q\", test.path, s,\r\n> test.result)\r\n> Index: src/pkg/reflect/all_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/all_test.go\r\n> +++ b/src/pkg/reflect/all_test.go\r\n> @@ -2012,6 +2012,7 @@\r\n>  }\r\n>\r\n>  func noAlloc(t *testing.T, n int, f func(int)) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         // once to prime everything\r\n>         f(-1)\r\n>         memstats := new(runtime.MemStats)\r\n> @@ -2021,12 +2022,9 @@\r\n>         for j := 0; j < n; j++ {\r\n>                 f(j)\r\n>         }\r\n> -       // A few allocs may happen in the testing package when GOMAXPROCS\r\n> > 1, so don't\r\n> -       // require zero mallocs.\r\n> -       // A new thread, one of which will be created if GOMAXPROCS>1,\r\n> does 6 allocations.\r\n>         runtime.ReadMemStats(memstats)\r\n>         mallocs := memstats.Mallocs - oldmallocs\r\n> -       if mallocs > 10 {\r\n> +       if mallocs > 0 {\r\n>                 t.Fatalf(\"%d mallocs after %d iterations\", mallocs, n)\r\n>         }\r\n>  }\r\n> Index: src/pkg/runtime/gc_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/gc_test.go\r\n> +++ b/src/pkg/runtime/gc_test.go\r\n> @@ -10,6 +10,7 @@\r\n>  )\r\n>\r\n>  func TestGcSys(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         memstats := new(runtime.MemStats)\r\n>         runtime.GC()\r\n>         runtime.ReadMemStats(memstats)\r\n> Index: src/pkg/runtime/mallocrep1.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/mallocrep1.**go\r\n> +++ b/src/pkg/runtime/mallocrep1.**go\r\n> @@ -39,6 +39,7 @@\r\n>  }\r\n>\r\n>  func AllocAndFree(size, count int) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         if *chatty {\r\n>                 fmt.Printf(\"size=%d count=%d ...\\n\", size, count)\r\n>         }\r\n> Index: src/pkg/strconv/strconv_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/strconv/strconv_**test.go\r\n> +++ b/src/pkg/strconv/strconv_**test.go\r\n> @@ -44,6 +44,7 @@\r\n>  )\r\n>\r\n>  func TestCountMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         for _, mt := range mallocTest {\r\n>                 const N = 100\r\n>                 memstats := new(runtime.MemStats)\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 18:00:54.613360",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-26 17:56:08.553980",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 27, 2012 at 2:26 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Tue, Nov 27, 2012 at 2:00 AM, Dave Cheney <dave@cheney.net> wrote:\r\n>\r\n>> Thank you for this. It almost feels like this should be a facility of the\r\n>> testing package itself, but I can't think of a straight forward way to\r\n>> accomplish it.\r\n>>\r\n> Your comment reminds me:\r\n> we do have -test.benchmem, and I think it should set GOMAXPROCS to 1\r\n> before the\r\n> memory benchmark too.\r\n>\r\nSent http://codereview.appspot.com/6843114/\r\n",
			"disapproval": false,
			"date": "2012-11-26 18:43:41.469970",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=79c1b48a87e8 ***\n\nall: set GOMAXPROCS to 1 when counting mallocs\nalso fix an annoying test that relies on $GOROOT be set.\nFixes issue 3690.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/6844086",
			"disapproval": false,
			"date": "2012-11-30 16:38:21.161160",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nat least we can grep for this later easily if we decide to do something\r\ngeneric for this in the testing package.\r\n\r\n\r\nOn Mon, Nov 26, 2012 at 9:56 AM, <minux.ma@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> all: set GOMAXPROCS to 1 when counting mallocs\r\n> also fix an annoying test that relies on $GOROOT be set.\r\n> Fixes issue 3690.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6844086/<http://codereview.appspot.com/6844086/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/encoding/gob/timing_**test.go\r\n>   M src/pkg/fmt/fmt_test.go\r\n>   M src/pkg/math/big/nat_test.go\r\n>   M src/pkg/net/http/header_test.**go\r\n>   M src/pkg/net/rpc/server_test.go\r\n>   M src/pkg/path/filepath/path_**test.go\r\n>   M src/pkg/path/path_test.go\r\n>   M src/pkg/reflect/all_test.go\r\n>   M src/pkg/runtime/gc_test.go\r\n>   M src/pkg/runtime/mallocrep1.go\r\n>   M src/pkg/strconv/strconv_test.**go\r\n>\r\n>\r\n> Index: src/pkg/encoding/gob/timing_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/timing_**test.go\r\n> +++ b/src/pkg/encoding/gob/timing_**test.go\r\n> @@ -50,6 +50,7 @@\r\n>  }\r\n>\r\n>  func TestCountEncodeMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         var buf bytes.Buffer\r\n>         enc := NewEncoder(&buf)\r\n>         bench := &Bench{7, 3.2, \"now is the time\", []byte(\"for all good\r\n> men\")}\r\n> @@ -69,6 +70,7 @@\r\n>  }\r\n>\r\n>  func TestCountDecodeMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         var buf bytes.Buffer\r\n>         enc := NewEncoder(&buf)\r\n>         bench := &Bench{7, 3.2, \"now is the time\", []byte(\"for all good\r\n> men\")}\r\n> Index: src/pkg/fmt/fmt_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/fmt/fmt_test.go\r\n> +++ b/src/pkg/fmt/fmt_test.go\r\n> @@ -581,6 +581,7 @@\r\n>  var _ bytes.Buffer\r\n>\r\n>  func TestCountMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         for _, mt := range mallocTest {\r\n>                 const N = 100\r\n>                 memstats := new(runtime.MemStats)\r\n> Index: src/pkg/math/big/nat_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/math/big/nat_test.go\r\n> +++ b/src/pkg/math/big/nat_test.go\r\n> @@ -180,6 +180,7 @@\r\n>  // does not cause deep recursion and in turn allocate too much memory.\r\n>  // Test case for issue 3807.\r\n>  func TestMulUnbalanced(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         x := rndNat(50000)\r\n>         y := rndNat(40)\r\n>         allocSize := allocBytes(func() {\r\n> Index: src/pkg/net/http/header_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/header_**test.go\r\n> +++ b/src/pkg/net/http/header_**test.go\r\n> @@ -188,6 +188,7 @@\r\n>  }\r\n>\r\n>  func doHeaderWriteSubset(n int, t errorfer) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         h := Header(map[string][]string{\r\n>                 \"Content-Length\": {\"123\"},\r\n>                 \"Content-Type\":   {\"text/plain\"},\r\n> @@ -204,7 +205,7 @@\r\n>         var m1 runtime.MemStats\r\n>         runtime.ReadMemStats(&m1)\r\n>         if mallocs := m1.Mallocs - m0.Mallocs; n >= 100 && mallocs >=\r\n> uint64(n) {\r\n> -               // TODO(bradfitz,rsc): once we can sort with allocating,\r\n> +               // TODO(bradfitz,rsc): once we can sort without allocating,\r\n>                 // make this an error.  See http://golang.org/issue/3761\r\n>                 // t.Errorf(\"did %d mallocs (>= %d iterations); should\r\n> have avoided mallocs\", mallocs, n)\r\n>         }\r\n> Index: src/pkg/net/rpc/server_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/rpc/server_test.**go\r\n> +++ b/src/pkg/net/rpc/server_test.**go\r\n> @@ -446,6 +446,7 @@\r\n>  }\r\n>\r\n>  func countMallocs(dial func() (*Client, error), t *testing.T) uint64 {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         once.Do(startServer)\r\n>         client, err := dial()\r\n>         if err != nil {\r\n> Index: src/pkg/path/filepath/path_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/path/filepath/path_**test.go\r\n> +++ b/src/pkg/path/filepath/path_**test.go\r\n> @@ -91,6 +91,7 @@\r\n>  }\r\n>\r\n>  func TestClean(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         tests := cleantests\r\n>         if runtime.GOOS == \"windows\" {\r\n>                 for i := range tests {\r\n> @@ -897,7 +898,7 @@\r\n>  }\r\n>\r\n>  func TestBug3486(t *testing.T) { // http://code.google.com/p/go/**\r\n> issues/detail?id=3486 <http://code.google.com/p/go/issues/detail?id=3486>\r\n> -       root, err := filepath.EvalSymlinks(os.**Getenv(\"GOROOT\"))\r\n> +       root, err := filepath.EvalSymlinks(runtime.**GOROOT())\r\n>         if err != nil {\r\n>                 t.Fatal(err)\r\n>         }\r\n> Index: src/pkg/path/path_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/path/path_test.go\r\n> +++ b/src/pkg/path/path_test.go\r\n> @@ -64,6 +64,7 @@\r\n>  }\r\n>\r\n>  func TestClean(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         for _, test := range cleantests {\r\n>                 if s := Clean(test.path); s != test.result {\r\n>                         t.Errorf(\"Clean(%q) = %q, want %q\", test.path, s,\r\n> test.result)\r\n> Index: src/pkg/reflect/all_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/all_test.go\r\n> +++ b/src/pkg/reflect/all_test.go\r\n> @@ -2012,6 +2012,7 @@\r\n>  }\r\n>\r\n>  func noAlloc(t *testing.T, n int, f func(int)) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         // once to prime everything\r\n>         f(-1)\r\n>         memstats := new(runtime.MemStats)\r\n> @@ -2021,12 +2022,9 @@\r\n>         for j := 0; j < n; j++ {\r\n>                 f(j)\r\n>         }\r\n> -       // A few allocs may happen in the testing package when GOMAXPROCS\r\n> > 1, so don't\r\n> -       // require zero mallocs.\r\n> -       // A new thread, one of which will be created if GOMAXPROCS>1,\r\n> does 6 allocations.\r\n>         runtime.ReadMemStats(memstats)\r\n>         mallocs := memstats.Mallocs - oldmallocs\r\n> -       if mallocs > 10 {\r\n> +       if mallocs > 0 {\r\n>                 t.Fatalf(\"%d mallocs after %d iterations\", mallocs, n)\r\n>         }\r\n>  }\r\n> Index: src/pkg/runtime/gc_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/gc_test.go\r\n> +++ b/src/pkg/runtime/gc_test.go\r\n> @@ -10,6 +10,7 @@\r\n>  )\r\n>\r\n>  func TestGcSys(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         memstats := new(runtime.MemStats)\r\n>         runtime.GC()\r\n>         runtime.ReadMemStats(memstats)\r\n> Index: src/pkg/runtime/mallocrep1.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/mallocrep1.**go\r\n> +++ b/src/pkg/runtime/mallocrep1.**go\r\n> @@ -39,6 +39,7 @@\r\n>  }\r\n>\r\n>  func AllocAndFree(size, count int) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         if *chatty {\r\n>                 fmt.Printf(\"size=%d count=%d ...\\n\", size, count)\r\n>         }\r\n> Index: src/pkg/strconv/strconv_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/strconv/strconv_**test.go\r\n> +++ b/src/pkg/strconv/strconv_**test.go\r\n> @@ -44,6 +44,7 @@\r\n>  )\r\n>\r\n>  func TestCountMallocs(t *testing.T) {\r\n> +       defer runtime.GOMAXPROCS(runtime.**GOMAXPROCS(1))\r\n>         for _, mt := range mallocTest {\r\n>                 const N = 100\r\n>                 memstats := new(runtime.MemStats)\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 20:32:33.834750",
			"approval": true
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6844086: all: set GOMAXPROCS to 1 when counting mallocs",
	"created": "2012-11-26 11:11:19.142030",
	"patchsets": [
		1,
		2001,
		3,
		10001,
		12012
	],
	"modified": "2012-11-30 16:38:30.217370",
	"closed": true,
	"issue": 6844086
}