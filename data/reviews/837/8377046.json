{
	"description": "runtime: fix race on hashmap flags field\nUse atomic operations on flags field to make sure we aren't\nlosing a flag update during parallel map operations.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"r@golang.org"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-08 00:22:58.480540",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please check whether I've got all that bit manipulations properly.\n\nI've changed the test to not use GOMAXPROCS env var, so that it's possible to test with -cpu=1,2,3,4...\n\nI've introduced another test instead of just updating the existing, because they exercise different codepaths. A single usage of reflect will reset CanFreeKey/CanFreeBucket, and so the code will do different things.",
			"disapproval": false,
			"date": "2013-04-08 00:25:48.873370",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/08 00:26:08, dfc wrote:\n> I don't fully understand this change, but it reads as if map iteration can\n> discover orphaned parts of a map and is freeing them during iteration ? Is that\n> correct ?\n\nWhat I am fixing is that concurrent hash_iter_init() and reflect.iterinit() can mutate flags at the same time and so some updates can be lost.\nBut I can be wrong as well, so you better not rely on this :)\n\nThis change supersedes the following change by khr@\nhttps://codereview.appspot.com/8433045/",
			"disapproval": false,
			"date": "2013-04-08 00:35:03.133910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't fully understand this change, but it reads as if map iteration can discover orphaned parts of a map and is freeing them during iteration ? Is that correct ?\n\nhttps://codereview.appspot.com/8377046/diff/5001/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttps://codereview.appspot.com/8377046/diff/5001/src/pkg/runtime/hashmap.c#newcode99\nsrc/pkg/runtime/hashmap.c:99: uint8   B;            // log_2 of # of buckets (can hold up to LOAD * 2^B items)\nIs it possible to rearrange these fields for better padding ?",
			"disapproval": false,
			"date": "2013-04-08 00:26:08.119650",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8377046/diff/5001/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttps://codereview.appspot.com/8377046/diff/5001/src/pkg/runtime/hashmap.c#newcode99\nsrc/pkg/runtime/hashmap.c:99: uint8   B;            // log_2 of # of buckets (can hold up to LOAD * 2^B items)\nOn 2013/04/08 00:26:08, dfc wrote:\n> Is it possible to rearrange these fields for better padding ?\n\nI do not see a way to do this. Do you?",
			"disapproval": false,
			"date": "2013-04-08 00:31:56.760270",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-08 01:15:31.832640",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=420ab460e41c ***\n\nruntime: fix race on hashmap flags field\nUse atomic operations on flags field to make sure we aren't\nlosing a flag update during parallel map operations.\n\nR=golang-dev, dave, r\nCC=golang-dev\nhttps://codereview.appspot.com/8377046",
			"disapproval": false,
			"date": "2013-04-08 01:19:28.426750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 7, 2013 at 8:17 PM, <dvyukov@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/8377046/diff/13001/src/**\r\n> pkg/runtime/map_test.go<https://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/map_test.go>\r\n> File src/pkg/runtime/map_test.go (right):\r\n>\r\n> https://codereview.appspot.**com/8377046/diff/13001/src/**\r\n> pkg/runtime/map_test.go#**newcode238<https://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/map_test.go#newcode238>\r\n> src/pkg/runtime/map_test.go:**238: if runtime.GOMAXPROCS(-1) == 1 {\r\n> On 2013/04/08 03:10:05, bradfitz wrote:\r\n>\r\n>> that was not the intent of the original code.  The code before meant:\r\n>>\r\n> \"If the\r\n>\r\n>> user hasn't overridden it, use 16 (since this test is about parallel\r\n>> correctness), but let them test with GOMAXPROCS=1 in their environment\r\n>>\r\n> if they'd\r\n>\r\n>> like\"\r\n>>\r\n>\r\n> Is it possible to also make -cpu=... work?\r\n>\r\n\r\nIf we wanted to manually parse os.Args, maybe.  Not really worth it, though.\r\n",
			"disapproval": false,
			"date": "2013-04-08 03:26:32.216450",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttps://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/hashmap.c#newcode98\nsrc/pkg/runtime/hashmap.c:98: uint32  flags;\nunfortunate making Hmap bigger. keysize and valuesize are immutable and could be packed into this with a union or macro.\n\nI filed https://code.google.com/p/go/issues/detail?id=5237 as a TODO.\n\nhttps://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/map_test.go\nFile src/pkg/runtime/map_test.go (right):\n\nhttps://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/map_test.go#newcode238\nsrc/pkg/runtime/map_test.go:238: if runtime.GOMAXPROCS(-1) == 1 {\nthat was not the intent of the original code.  The code before meant: \"If the user hasn't overridden it, use 16 (since this test is about parallel correctness), but let them test with GOMAXPROCS=1 in their environment if they'd like\"",
			"disapproval": false,
			"date": "2013-04-08 03:10:04.938650",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/map_test.go\nFile src/pkg/runtime/map_test.go (right):\n\nhttps://codereview.appspot.com/8377046/diff/13001/src/pkg/runtime/map_test.go#newcode238\nsrc/pkg/runtime/map_test.go:238: if runtime.GOMAXPROCS(-1) == 1 {\nOn 2013/04/08 03:10:05, bradfitz wrote:\n> that was not the intent of the original code.  The code before meant: \"If the\n> user hasn't overridden it, use 16 (since this test is about parallel\n> correctness), but let them test with GOMAXPROCS=1 in their environment if they'd\n> like\"\n\nIs it possible to also make -cpu=... work?",
			"disapproval": false,
			"date": "2013-04-08 03:17:09.969970",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 8377046: runtime: fix race on hashmap flags field",
	"created": "2013-04-08 00:03:39.192630",
	"patchsets": [
		1,
		2001,
		5001,
		13001
	],
	"modified": "2013-04-08 03:17:10.225280",
	"closed": true,
	"issue": 8377046
}