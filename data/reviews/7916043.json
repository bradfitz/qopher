{
	"description": "runtime: prevent garbage collection during hashmap insertion (fix 2)\n\nFixes issue 5074 in multi-threaded scenarios.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"dave@cheney.net",
		"dvyukov@google.com",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: remyoudompheng),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-20 06:57:05.605920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this intended to fix this class of crash ?\r\n\r\nhttp://build.golang.org/log/a4c89f126a86f3b957b4ad891d1a7bf546e573c9\r\n\r\n\r\nOn Wed, Mar 20, 2013 at 7:03 PM,  <daniel.morsing@gmail.com> wrote:\r\n> Wouldn't a simpler solution be to make sure that mallocgc doesn't\r\n> schedule when dogc == 0?\r\n>\r\n> https://codereview.appspot.com/7916043/\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-20 08:07:51.282150",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wouldn't a simpler solution be to make sure that mallocgc doesn't schedule when dogc == 0?",
			"disapproval": false,
			"date": "2013-03-20 08:03:56.717360",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/20 08:07:51, dfc wrote:\n> Is this intended to fix this class of crash ?\n> \n> http://build.golang.org/log/a4c89f126a86f3b957b4ad891d1a7bf546e573c9\n\nYes.",
			"disapproval": false,
			"date": "2013-03-20 08:11:31.205200",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/20 08:03:56, DMorsing wrote:\n> Wouldn't a simpler solution be to make sure that mallocgc doesn't schedule when\n> dogc == 0?\n\nI don't know whether the in-between code in function mallocgc():\n\n    if(runtime\u00b7gcwaiting && g != m->g0 && m->locks == 0)\n        runtime\u00b7gosched();\n\n    <<< the code in-between >>>\n\n    if(dogc && mstats.heap_alloc >= mstats.next_gc) ...\n\ncan cause another OS thread to return from runtime\u00b7stoptheworld(). If somebody can confirm that it cannot, then you are right and the fix would be to prevent the call to runtime\u00b7gosched() mentioned above.",
			"disapproval": false,
			"date": "2013-03-20 08:27:49.198110",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 20, 2013 at 12:27 PM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> On 2013/03/20 08:03:56, DMorsing wrote:\r\n>>\r\n>> Wouldn't a simpler solution be to make sure that mallocgc doesn't\r\n>\r\n> schedule when\r\n>>\r\n>> dogc == 0?\r\n>\r\n>\r\n> I don't know whether the in-between code in function mallocgc():\r\n>\r\n>     if(runtime\u00b7gcwaiting && g != m->g0 && m->locks == 0)\r\n>         runtime\u00b7gosched();\r\n>\r\n>     <<< the code in-between >>>\r\n>\r\n>     if(dogc && mstats.heap_alloc >= mstats.next_gc) ...\r\n>\r\n> can cause another OS thread to return from runtime\u00b7stoptheworld(). If\r\n> somebody can confirm that it cannot, then you are right and the fix\r\n> would be to prevent the call to runtime\u00b7gosched() mentioned above.\r\n\r\n\r\nI can confirm that, during that code section malloc cache is in\r\ninconsistent state.\r\nYou need to add:\r\nm->locks++;  // prevent GC\r\nm->locks--;\r\naround your mallocs.\r\n",
			"disapproval": false,
			"date": "2013-03-20 08:40:43.979550",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com, dave@cheney.net, dvyukov@google.com (cc: golang-dev@googlegroups.com, remyoudompheng@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-20 10:12:45.632790",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM at least\r\n\r\nIs there any subtlety between what Dmitry proposed (m->locks++/--\r\nbefore/after the mallocgc call) and this?  I don't see anything else in or\r\nunder mallocgc that looks at m->locks.\r\n\r\nOn Wed, Mar 20, 2013 at 3:12 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com,\r\n> dave@cheney.net, dvyukov@google.com (cc: golang-dev@googlegroups.com,\r\n> remyoudompheng@gmail.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7916043/<https://codereview.appspot.com/7916043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-20 16:03:08.124080",
			"approval": true
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/20 16:03:08, bradfitz wrote:\n> LGTM at least\n> \n> Is there any subtlety between what Dmitry proposed (m->locks++/--\n> before/after the mallocgc call) and this?\n\nThe two solutions are equivalent in this case.\n\n> I don't see anything else in or\n> under mallocgc that looks at m->locks.\n\nThere is an if-statement in mallocgc() in mgc0.c that is testing m->locks.",
			"disapproval": false,
			"date": "2013-03-20 16:46:33.101150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-20 18:45:38.609980",
			"approval": true
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=61fa5c7d741f ***\n\nruntime: prevent garbage collection during hashmap insertion (fix 2)\n\nFixes issue 5074 in multi-threaded scenarios.\n\nR=golang-dev, daniel.morsing, dave, dvyukov, bradfitz, rsc\nCC=golang-dev, remyoudompheng\nhttps://codereview.appspot.com/7916043",
			"disapproval": false,
			"date": "2013-03-20 19:36:45.737170",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 7916043: runtime: prevent garbage collection during hashmap inse...",
	"created": "2013-03-20 06:56:57.223360",
	"patchsets": [
		1,
		7001,
		14002
	],
	"modified": "2013-03-20 19:36:49.691500",
	"closed": true,
	"issue": 7916043
}