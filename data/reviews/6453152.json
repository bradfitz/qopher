{
	"description": "strconv: consistent parameter names for ParseUint\n\nIf ParseUint is like ParseInt it should have the same parameter\nnames, thus rename b to to base as in ParseInt's documentation.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Mon, Aug 20, 2012 at 7:54 PM, <dr.volker.dobler@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> strconv: consistent parameter names for ParseUint\r\n>\r\n> If ParseUint is like ParseInt it should have the same parameter\r\n> names, thus rename b to to base as in ParseInt's documentation.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6453152/<http://codereview.appspot.com/6453152/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/strconv/atoi.go\r\n>\r\n>\r\n> Index: src/pkg/strconv/atoi.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/strconv/atoi.go\r\n> +++ b/src/pkg/strconv/atoi.go\r\n> @@ -44,7 +44,7 @@\r\n>  }\r\n>\r\n>  // ParseUint is like ParseInt but for unsigned numbers.\r\n> -func ParseUint(s string, b int, bitSize int) (n uint64, err error) {\r\n> +func ParseUint(s string, base int, bitSize int) (n uint64, err error) {\r\n>         var cutoff, maxVal uint64\r\n>\r\n>         if bitSize == 0 {\r\n> @@ -57,32 +57,32 @@\r\n>                 err = ErrSyntax\r\n>                 goto Error\r\n>\r\n> -       case 2 <= b && b <= 36:\r\n> +       case 2 <= base && base <= 36:\r\n>                 // valid base; nothing to do\r\n>\r\n> -       case b == 0:\r\n> +       case base == 0:\r\n>                 // Look for octal, hex prefix.\r\n>                 switch {\r\n>                 case s[0] == '0' && len(s) > 1 && (s[1] == 'x' || s[1] ==\r\n> 'X'):\r\n> -                       b = 16\r\n> +                       base = 16\r\n>                         s = s[2:]\r\n>                         if len(s) < 1 {\r\n>                                 err = ErrSyntax\r\n>                                 goto Error\r\n>                         }\r\n>                 case s[0] == '0':\r\n> -                       b = 8\r\n> +                       base = 8\r\n>                 default:\r\n> -                       b = 10\r\n> +                       base = 10\r\n>                 }\r\n>\r\n>         default:\r\n> -               err = errors.New(\"invalid base \" + Itoa(b))\r\n> +               err = errors.New(\"invalid base \" + Itoa(base))\r\n>                 goto Error\r\n>         }\r\n>\r\n>         n = 0\r\n> -       cutoff = cutoff64(b)\r\n> +       cutoff = cutoff64(base)\r\n>         maxVal = 1<<uint(bitSize) - 1\r\n>\r\n>         for i := 0; i < len(s); i++ {\r\n> @@ -100,19 +100,19 @@\r\n>                         err = ErrSyntax\r\n>                         goto Error\r\n>                 }\r\n> -               if int(v) >= b {\r\n> +               if int(v) >= base {\r\n>                         n = 0\r\n>                         err = ErrSyntax\r\n>                         goto Error\r\n>                 }\r\n>\r\n>                 if n >= cutoff {\r\n> -                       // n*b overflows\r\n> +                       // n*base overflows\r\n>                         n = 1<<64 - 1\r\n>                         err = ErrRange\r\n>                         goto Error\r\n>                 }\r\n> -               n *= uint64(b)\r\n> +               n *= uint64(base)\r\n>\r\n>                 n1 := n + uint64(v)\r\n>                 if n1 < n || n1 > maxVal {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 12:28:52.358700",
			"approval": true
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-20 09:54:03.973040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=52813bdd69bb ***\n\nstrconv: consistent parameter names for ParseUint\n\nIf ParseUint is like ParseInt it should have the same parameter\nnames, thus rename b to to base as in ParseInt's documentation.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6453152\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-08-20 12:30:25.939200",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 6453152: strconv: consistent parameter names for ParseUint",
	"created": "2012-08-20 09:53:29.044140",
	"patchsets": [
		1,
		2001,
		3002
	],
	"modified": "2012-08-21 07:44:23.072170",
	"closed": true,
	"issue": 6453152
}