{
	"description": "cmd/8g: eliminate obviously useless temps before regopt.\n\nThis patch introduces a sort of pre-regopt peephole optimization.\nWhen a temporary is introduced that just holds a value for the\nduration of the next instruction and is otherwise unused, we\nelide it to make the job of regopt easier.\n\nSince x86 has very few registers, this situation happens very\noften. The result is large savings in stack variables for\narithmetic-heavy functions.\n\ncrypto/aes\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkEncrypt               1301          392  -69.87%\nBenchmarkDecrypt               1309          368  -71.89%\nBenchmarkExpand                2913         1036  -64.44%\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkEncrypt              12.29        40.74    3.31x\nBenchmarkDecrypt              12.21        43.37    3.55x\n\ncrypto/md5\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkHash8Bytes            1761          914  -48.10%\nBenchmarkHash1K               16912         5570  -67.06%\nBenchmarkHash8K              123895        38286  -69.10%\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes            4.54         8.75    1.93x\nBenchmarkHash1K               60.55       183.83    3.04x\nBenchmarkHash8K               66.12       213.97    3.24x\n\nbench/go1\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    8364835000   8303154000   -0.74%\nBenchmarkFannkuch11      7511723000   6381729000  -15.04%\nBenchmarkGobDecode         27764090     27103270   -2.38%\nBenchmarkGobEncode         11240880     11184370   -0.50%\nBenchmarkGzip            1470224000    856668400  -41.73%\nBenchmarkGunzip           240660800    201697300  -16.19%\nBenchmarkJSONEncode       155225800    185571900  +19.55%\nBenchmarkJSONDecode       243347900    282123000  +15.93%\nBenchmarkMandelbrot200     12240970     12201880   -0.32%\nBenchmarkParse              8837445      8765210   -0.82%\nBenchmarkRevcomp         2556310000   1868566000  -26.90%\nBenchmarkTemplate         389298000    379792000   -2.44%\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            27.64        28.32    1.02x\nBenchmarkGobEncode            68.28        68.63    1.01x\nBenchmarkGzip                 13.20        22.65    1.72x\nBenchmarkGunzip               80.63        96.21    1.19x\nBenchmarkJSONEncode           12.50        10.46    0.84x\nBenchmarkJSONDecode            7.97         6.88    0.86x\nBenchmarkParse                 6.55         6.61    1.01x\nBenchmarkRevcomp              99.43       136.02    1.37x\nBenchmarkTemplate              4.98         5.11    1.03x\n\nFixes issue 4035.",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The Json benchmark is slwoed down but I suppose it's the usual flakiness of this benchmark due to stack frame size change (Gob is usually also flaky in the same way).",
			"disapproval": false,
			"date": "2012-11-11 00:20:52.479060",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-11 11:08:01.250210",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6828056/diff/1002/src/cmd/8g/reg.c\nFile src/cmd/8g/reg.c (right):\n\nhttps://codereview.appspot.com/6828056/diff/1002/src/cmd/8g/reg.c#newcode1703\nsrc/cmd/8g/reg.c:1703: h = 2166136261;\nh = 2166136261U;\n\nor gcc will complain when compiled on 32-bit machines.\n\nhttps://codereview.appspot.com/6828056/diff/1002/src/cmd/8g/reg.c#newcode1725\nsrc/cmd/8g/reg.c:1725: uint16 counts[1<<16]; // A hash table to count variable occurences.\ni'm a little concerned about overflowing the uint16.\nalthough it will be very very rare, if happens at all.\n\ni think you only need to record three states, used once,\nused twice and more than twice. perhaps two bits suffice\nfor each entry.",
			"disapproval": false,
			"date": "2012-11-11 08:26:32.452800",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-11 00:17:13.946090",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch gives probably better results than the solutions suggested in issue 4035:\n* increasing NVAR has large effects on compiler performance (I think it's O(NVAR\u00b2) in regopt)\n* reusing temporaries may make regopt less efficient.\n\nThis proposal does not have these drawbacks and maybe even improves regopt efficiency: some additional registerization is observed in cases where the variable count does not reach NVAR (currently 160).",
			"disapproval": false,
			"date": "2012-11-11 00:20:00.420470",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6828056/diff/1002/src/cmd/8g/reg.c\nFile src/cmd/8g/reg.c (right):\n\nhttps://codereview.appspot.com/6828056/diff/1002/src/cmd/8g/reg.c#newcode1703\nsrc/cmd/8g/reg.c:1703: h = 2166136261;\nOn 2012/11/11 08:26:32, minux wrote:\n> h = 2166136261U;\n> \n> or gcc will complain when compiled on 32-bit machines.\n\nDone.\n\nhttps://codereview.appspot.com/6828056/diff/1002/src/cmd/8g/reg.c#newcode1725\nsrc/cmd/8g/reg.c:1725: uint16 counts[1<<16]; // A hash table to count variable occurences.\nOn 2012/11/11 08:26:32, minux wrote:\n> i'm a little concerned about overflowing the uint16.\n> although it will be very very rare, if happens at all.\n> \n> i think you only need to record three states, used once,\n> used twice and more than twice. perhaps two bits suffice\n> for each entry.\n> \n\nDone. I did not bother shrinking the array. Stack space is rather cheap.",
			"disapproval": false,
			"date": "2012-11-11 11:08:01.013760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c\nFile src/cmd/8g/reg.c (right):\n\nhttps://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1699\nsrc/cmd/8g/reg.c:1699: fnv1(Sym *sym) {\n{ on next line\nsame for next few functions\nsorry\n\nhttps://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1721\nsrc/cmd/8g/reg.c:1721: *   OP reg1, reg2\nadd\n * this reduces the number of variables that the register optimizer\n * sees, which lets it do a better job and makes it less likely to turn\n * itself off.\n\nhttps://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1725\nsrc/cmd/8g/reg.c:1725: uint16 counts[1<<16]; // A hash table to count variable occurences.\nmight as well be byte. also please make it static byte to avoid the stack overhead.\n\nhttps://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1735\nsrc/cmd/8g/reg.c:1735: for(i=0; i<(1<<16); i++)\ni<nelem(counts)\n\nhttps://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1752\nsrc/cmd/8g/reg.c:1752: // Eliminate single-use stack variables.\nsingle-write, single-read stack variables.",
			"disapproval": false,
			"date": "2012-11-12 20:49:58.992600",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=27bce3a1244d ***\n\ncmd/8g: eliminate obviously useless temps before regopt.\n\nThis patch introduces a sort of pre-regopt peephole optimization.\nWhen a temporary is introduced that just holds a value for the\nduration of the next instruction and is otherwise unused, we\nelide it to make the job of regopt easier.\n\nSince x86 has very few registers, this situation happens very\noften. The result is large savings in stack variables for\narithmetic-heavy functions.\n\ncrypto/aes\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkEncrypt               1301          392  -69.87%\nBenchmarkDecrypt               1309          368  -71.89%\nBenchmarkExpand                2913         1036  -64.44%\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkEncrypt              12.29        40.74    3.31x\nBenchmarkDecrypt              12.21        43.37    3.55x\n\ncrypto/md5\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkHash8Bytes            1761          914  -48.10%\nBenchmarkHash1K               16912         5570  -67.06%\nBenchmarkHash8K              123895        38286  -69.10%\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes            4.54         8.75    1.93x\nBenchmarkHash1K               60.55       183.83    3.04x\nBenchmarkHash8K               66.12       213.97    3.24x\n\nbench/go1\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    8364835000   8303154000   -0.74%\nBenchmarkFannkuch11      7511723000   6381729000  -15.04%\nBenchmarkGobDecode         27764090     27103270   -2.38%\nBenchmarkGobEncode         11240880     11184370   -0.50%\nBenchmarkGzip            1470224000    856668400  -41.73%\nBenchmarkGunzip           240660800    201697300  -16.19%\nBenchmarkJSONEncode       155225800    185571900  +19.55%\nBenchmarkJSONDecode       243347900    282123000  +15.93%\nBenchmarkMandelbrot200     12240970     12201880   -0.32%\nBenchmarkParse              8837445      8765210   -0.82%\nBenchmarkRevcomp         2556310000   1868566000  -26.90%\nBenchmarkTemplate         389298000    379792000   -2.44%\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            27.64        28.32    1.02x\nBenchmarkGobEncode            68.28        68.63    1.01x\nBenchmarkGzip                 13.20        22.65    1.72x\nBenchmarkGunzip               80.63        96.21    1.19x\nBenchmarkJSONEncode           12.50        10.46    0.84x\nBenchmarkJSONDecode            7.97         6.88    0.86x\nBenchmarkParse                 6.55         6.61    1.01x\nBenchmarkRevcomp              99.43       136.02    1.37x\nBenchmarkTemplate              4.98         5.11    1.03x\n\nFixes issue 4035.\n\nR=golang-dev, minux.ma, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6828056\n\nhttp://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c\nFile src/cmd/8g/reg.c (right):\n\nhttp://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1699\nsrc/cmd/8g/reg.c:1699: fnv1(Sym *sym) {\nOn 2012/11/12 20:49:59, rsc wrote:\n> { on next line\n> same for next few functions\n> sorry\n\nDone.\n\nhttp://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1721\nsrc/cmd/8g/reg.c:1721: *   OP reg1, reg2\nOn 2012/11/12 20:49:59, rsc wrote:\n> add\n>  * this reduces the number of variables that the register optimizer\n>  * sees, which lets it do a better job and makes it less likely to turn\n>  * itself off.\n\nDone.\n\nhttp://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1725\nsrc/cmd/8g/reg.c:1725: uint16 counts[1<<16]; // A hash table to count variable occurences.\nOn 2012/11/12 20:49:59, rsc wrote:\n> might as well be byte. also please make it static byte to avoid the stack\n> overhead.\n\nDone.\n\nhttp://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1735\nsrc/cmd/8g/reg.c:1735: for(i=0; i<(1<<16); i++)\nOn 2012/11/12 20:49:59, rsc wrote:\n> i<nelem(counts)\n\nDone.\n\nhttp://codereview.appspot.com/6828056/diff/7002/src/cmd/8g/reg.c#newcode1752\nsrc/cmd/8g/reg.c:1752: // Eliminate single-use stack variables.\nOn 2012/11/12 20:49:59, rsc wrote:\n> single-write, single-read stack variables.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-13 06:39:45.424710",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Really impressive speedup on a quad core (??) atom host\n\n220887(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    2147483647   2147483647   +0.04%\nBenchmarkFannkuch11      2147483647   2147483647   -9.29%\nBenchmarkGobDecode        108677050    108685200   +0.01%\nBenchmarkGobEncode         45295540     46541140   +2.75%\nBenchmarkGzip            2147483647   2147483647  -24.44%\nBenchmarkGunzip           927877800    600955000  -35.23%\nBenchmarkJSONEncode       616352600    765123600  +24.14%\nBenchmarkJSONDecode      1086684000   1255016000  +15.49%\nBenchmarkMandelbrot200     54324420     54281840   -0.08%\nBenchmarkParse             37891240     37803220   -0.23%\nBenchmarkRevcomp         2147483647   2147483647  -46.41%\nBenchmarkTemplate        1609638000   1601209000   -0.52%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             7.06         7.06    1.00x\nBenchmarkGobEncode            16.95        16.49    0.97x\nBenchmarkGzip                  4.39         5.81    1.32x\nBenchmarkGunzip               20.91        32.29    1.54x\nBenchmarkJSONEncode            3.15         2.54    0.81x\nBenchmarkJSONDecode            1.79         1.55    0.87x\nBenchmarkParse                 1.53         1.53    1.00x\nBenchmarkRevcomp              26.98        50.35    1.87x\nBenchmarkTemplate              1.21         1.21    1.00x",
			"disapproval": false,
			"date": "2012-11-13 07:09:58.892560",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6828056: cmd/8g: eliminate obviously useless temps before regopt.",
	"created": "2012-11-11 00:16:39.123110",
	"patchsets": [
		1,
		2001,
		1002,
		7002,
		13001,
		14002
	],
	"modified": "2012-11-13 07:09:59.084870",
	"closed": true,
	"issue": 6828056
}