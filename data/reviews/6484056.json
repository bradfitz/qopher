{
	"description": "math/big: minor tweaks to assembly code (slightly better performance)\n\nBenchmarks run on 2.8GHz Quad-Code Intel Xeon,\n4GB 800MHz DDR2 FB-DIMM (\"PowerMac\").\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkAddVV_1              7            7   -0.82%\nBenchmarkAddVV_2              8            8   -3.46%\nBenchmarkAddVV_3             10            9   -4.81%\nBenchmarkAddVV_4              9            9   -1.89%\nBenchmarkAddVV_5             11           10   -5.22%\nBenchmarkAddVV_1e1           17           18   +4.05%\nBenchmarkAddVV_1e2          117          115   -1.71%\nBenchmarkAddVV_1e3         1095         1090   -0.46%\nBenchmarkAddVV_1e4        13149        12679   -3.57%\nBenchmarkAddVV_1e5       135133       129482   -4.18%\nBenchmarkAddVW_1              6            6   -1.14%\nBenchmarkAddVW_2              7            7   +3.78%\nBenchmarkAddVW_3              8            8   +0.12%\nBenchmarkAddVW_4              8            8   -6.52%\nBenchmarkAddVW_5              9            8   -3.70%\nBenchmarkAddVW_1e1           14           13   -4.29%\nBenchmarkAddVW_1e2           97           96   -1.33%\nBenchmarkAddVW_1e3          953          940   -1.36%\nBenchmarkAddVW_1e4         9776         9527   -2.55%\nBenchmarkAddVW_1e5       102396        97738   -4.55%\n\nbenchmark              old MB/s     new MB/s  speedup\nBenchmarkAddVV_1        8702.84      8774.56    1.01x\nBenchmarkAddVV_2       14739.60     15277.82    1.04x\nBenchmarkAddVV_3       18375.37     19398.16    1.06x\nBenchmarkAddVV_4       26935.44     27464.68    1.02x\nBenchmarkAddVV_5       27754.04     29423.30    1.06x\nBenchmarkAddVV_1e1     37050.89     35629.72    0.96x\nBenchmarkAddVV_1e2     54289.15     55533.24    1.02x\nBenchmarkAddVV_1e3     58428.83     58682.53    1.00x\nBenchmarkAddVV_1e4     48670.55     50475.99    1.04x\nBenchmarkAddVV_1e5     47360.54     49427.66    1.04x\nBenchmarkAddVW_1       10397.27     10502.23    1.01x\nBenchmarkAddVW_2       17279.03     16654.13    0.96x\nBenchmarkAddVW_3       23858.39     23825.89    1.00x\nBenchmarkAddVW_4       29799.42     31895.06    1.07x\nBenchmarkAddVW_5       34781.83     36105.11    1.04x\nBenchmarkAddVW_1e1     45629.88     47597.42    1.04x\nBenchmarkAddVW_1e2     65341.93     66240.04    1.01x\nBenchmarkAddVW_1e3     67153.67     68069.83    1.01x\nBenchmarkAddVW_1e4     65464.60     67173.83    1.03x\nBenchmarkAddVW_1e5     62501.88     65480.66    1.05x",
	"cc": [
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"cswenson@google.com"
	],
	"messages": [
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Makes sense.\r\n\r\nI'll give a shot a report back.\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 2:12 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> I doubt it. For one it's the same number of instructions. SETC is a \"less\r\n> primitive\" operation than rotate and 'and' (which are likely internally\r\n> fast-path'ed). Feel free to try.\r\n> - gri\r\n>\r\n>\r\n> On Fri, Aug 24, 2012 at 10:52 AM, Christopher Swenson <cswenson@google.com\r\n> > wrote:\r\n>\r\n>> Would it be better to use SETC instead of RCLQ + ANDQ? (You would have to\r\n>> zero out the register first, since it only sets the byte...)\r\n>>\r\n>>\r\n>> On Fri, Aug 24, 2012 at 1:44 PM, <iant@golang.org> wrote:\r\n>>\r\n>>> LGTM\r\n>>>\r\n>>> http://codereview.appspot.com/**6484056/<http://codereview.appspot.com/6484056/>\r\n>>>\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>> Christopher Swenson\r\n>> cswenson@google.com\r\n>>\r\n>>\r\n>>\r\n>\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-24 18:16:24.806140",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Would it be better to use SETC instead of RCLQ + ANDQ? (You would have to\r\nzero out the register first, since it only sets the byte...)\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 1:44 PM, <iant@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> http://codereview.appspot.com/**6484056/<http://codereview.appspot.com/6484056/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-24 17:52:43.353970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-24 17:19:26.676260",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI: There seems to be a slight benefit from moving the carry save-restore\r\ncode before the loads and after the stores. Shifting n by -4 permits the\r\nelimination of a CMPQ instruction in the unrolled loops at no extra cost\r\nelsewhere, but measurements didn't show any significant change. Moving the\r\nstores immediately after the ADCQ/SBBQs slowed down execution (presumably\r\nbecause the ADCQ/SBBQs are loads too). Leaving these routines alone now.\r\n\r\n- gri\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 10:19 AM, <gri@golang.org> wrote:\r\n\r\n> Reviewers: iant,\r\n>\r\n> Message:\r\n> Hello iant@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> math/big: minor tweaks to assembly code (slightly better performance)\r\n>\r\n> Benchmarks run on 2.8GHz Quad-Code Intel Xeon,\r\n> 4GB 800MHz DDR2 FB-DIMM (\"PowerMac\").\r\n>\r\n> benchmark             old ns/op    new ns/op    delta\r\n> BenchmarkAddVV_1              7            7   -0.82%\r\n> BenchmarkAddVV_2              8            8   -3.46%\r\n> BenchmarkAddVV_3             10            9   -4.81%\r\n> BenchmarkAddVV_4              9            9   -1.89%\r\n> BenchmarkAddVV_5             11           10   -5.22%\r\n> BenchmarkAddVV_1e1           17           18   +4.05%\r\n> BenchmarkAddVV_1e2          117          115   -1.71%\r\n> BenchmarkAddVV_1e3         1095         1090   -0.46%\r\n> BenchmarkAddVV_1e4        13149        12679   -3.57%\r\n> BenchmarkAddVV_1e5       135133       129482   -4.18%\r\n> BenchmarkAddVW_1              6            6   -1.14%\r\n> BenchmarkAddVW_2              7            7   +3.78%\r\n> BenchmarkAddVW_3              8            8   +0.12%\r\n> BenchmarkAddVW_4              8            8   -6.52%\r\n> BenchmarkAddVW_5              9            8   -3.70%\r\n> BenchmarkAddVW_1e1           14           13   -4.29%\r\n> BenchmarkAddVW_1e2           97           96   -1.33%\r\n> BenchmarkAddVW_1e3          953          940   -1.36%\r\n> BenchmarkAddVW_1e4         9776         9527   -2.55%\r\n> BenchmarkAddVW_1e5       102396        97738   -4.55%\r\n>\r\n> benchmark              old MB/s     new MB/s  speedup\r\n> BenchmarkAddVV_1        8702.84      8774.56    1.01x\r\n> BenchmarkAddVV_2       14739.60     15277.82    1.04x\r\n> BenchmarkAddVV_3       18375.37     19398.16    1.06x\r\n> BenchmarkAddVV_4       26935.44     27464.68    1.02x\r\n> BenchmarkAddVV_5       27754.04     29423.30    1.06x\r\n> BenchmarkAddVV_1e1     37050.89     35629.72    0.96x\r\n> BenchmarkAddVV_1e2     54289.15     55533.24    1.02x\r\n> BenchmarkAddVV_1e3     58428.83     58682.53    1.00x\r\n> BenchmarkAddVV_1e4     48670.55     50475.99    1.04x\r\n> BenchmarkAddVV_1e5     47360.54     49427.66    1.04x\r\n> BenchmarkAddVW_1       10397.27     10502.23    1.01x\r\n> BenchmarkAddVW_2       17279.03     16654.13    0.96x\r\n> BenchmarkAddVW_3       23858.39     23825.89    1.00x\r\n> BenchmarkAddVW_4       29799.42     31895.06    1.07x\r\n> BenchmarkAddVW_5       34781.83     36105.11    1.04x\r\n> BenchmarkAddVW_1e1     45629.88     47597.42    1.04x\r\n> BenchmarkAddVW_1e2     65341.93     66240.04    1.01x\r\n> BenchmarkAddVW_1e3     67153.67     68069.83    1.01x\r\n> BenchmarkAddVW_1e4     65464.60     67173.83    1.03x\r\n> BenchmarkAddVW_1e5     62501.88     65480.66    1.05x\r\n>\r\n> Please review this at http://codereview.appspot.com/**6484056/<http://codereview.appspot.com/6484056/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/math/big/arith_amd64.s\r\n>\r\n>\r\n> Index: src/pkg/math/big/arith_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/math/big/arith_**amd64.s\r\n> +++ b/src/pkg/math/big/arith_**amd64.s\r\n> @@ -32,45 +32,44 @@\r\n>         MOVQ z+0(FP), R10\r\n>\r\n>         MOVQ $0, CX             // c = 0\r\n> -       MOVQ $0, SI          // i = 0\r\n> +       MOVQ $0, SI             // i = 0\r\n>\r\n>         // uncomment the next line to disable the unrolled loop\r\n>         // JMP V1\r\n>\r\n> -       CMPQ DI, $4\r\n> -       JL V1                   // if n < 4 goto V1\r\n> +       SUBQ $4, DI             // n -= 4\r\n> +       JL V1                   // if n < 0 goto V1\r\n>\r\n> -U1:    // n >= 4\r\n> +U1:    // n >= 0\r\n>         // regular loop body unrolled 4x\r\n> +       RCRQ $1, CX             // CF = c\r\n>         MOVQ 0(R8)(SI*8), R11\r\n>         MOVQ 8(R8)(SI*8), R12\r\n>         MOVQ 16(R8)(SI*8), R13\r\n>         MOVQ 24(R8)(SI*8), R14\r\n> -       RCRQ $1, CX             // restore CF\r\n>         ADCQ 0(R9)(SI*8), R11\r\n>         ADCQ 8(R9)(SI*8), R12\r\n>         ADCQ 16(R9)(SI*8), R13\r\n>         ADCQ 24(R9)(SI*8), R14\r\n> -       RCLQ $1, CX             // save CF\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n>         MOVQ R12, 8(R10)(SI*8)\r\n>         MOVQ R13, 16(R10)(SI*8)\r\n>         MOVQ R14, 24(R10)(SI*8)\r\n> +       RCLQ $1, CX             // c = CF\r\n>\r\n>         ADDQ $4, SI             // i += 4\r\n>         SUBQ $4, DI             // n -= 4\r\n> -       CMPQ DI, $4\r\n> -       JGE U1                  // if n >= 4 goto U1\r\n> +       JGE U1                  // if n >= 0 goto U1\r\n>\r\n> -V1:    CMPQ DI, $0\r\n> +V1:    ADDQ $4, DI             // n += 4\r\n>         JLE E1                  // if n <= 0 goto E1\r\n>\r\n>  L1:    // n > 0\r\n> +       RCRQ $1, CX             // CF = c\r\n>         MOVQ 0(R8)(SI*8), R11\r\n> -       RCRQ $1, CX             // restore CF\r\n>         ADCQ 0(R9)(SI*8), R11\r\n> -       RCLQ $1, CX             // save CF\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n> +       RCLQ $1, CX             // c = CF\r\n>\r\n>         ADDQ $1, SI             // i++\r\n>         SUBQ $1, DI             // n--\r\n> @@ -94,40 +93,39 @@\r\n>         // uncomment the next line to disable the unrolled loop\r\n>         // JMP V2\r\n>\r\n> -       CMPQ DI, $4\r\n> -       JL V2                   // if n < 4 goto V2\r\n> +       SUBQ $4, DI             // n -= 4\r\n> +       JL V2                   // if n < 0 goto V2\r\n>\r\n> -U2:    // n >= 4\r\n> +U2:    // n >= 0\r\n>         // regular loop body unrolled 4x\r\n> +       RCRQ $1, CX             // CF = c\r\n>         MOVQ 0(R8)(SI*8), R11\r\n>         MOVQ 8(R8)(SI*8), R12\r\n>         MOVQ 16(R8)(SI*8), R13\r\n>         MOVQ 24(R8)(SI*8), R14\r\n> -       RCRQ $1, CX             // restore CF\r\n>         SBBQ 0(R9)(SI*8), R11\r\n>         SBBQ 8(R9)(SI*8), R12\r\n>         SBBQ 16(R9)(SI*8), R13\r\n>         SBBQ 24(R9)(SI*8), R14\r\n> -       RCLQ $1, CX             // save CF\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n>         MOVQ R12, 8(R10)(SI*8)\r\n>         MOVQ R13, 16(R10)(SI*8)\r\n>         MOVQ R14, 24(R10)(SI*8)\r\n> +       RCLQ $1, CX             // c = CF\r\n>\r\n>         ADDQ $4, SI             // i += 4\r\n>         SUBQ $4, DI             // n -= 4\r\n> -       CMPQ DI, $4\r\n> -       JGE U2                  // if n >= 4 goto U2\r\n> +       JGE U2                  // if n >= 0 goto U2\r\n>\r\n> -V2:    CMPQ DI, $0\r\n> +V2:    ADDQ $4, DI             // n += 4\r\n>         JLE E2                  // if n <= 0 goto E2\r\n>\r\n>  L2:    // n > 0\r\n> +       RCRQ $1, CX             // CF = c\r\n>         MOVQ 0(R8)(SI*8), R11\r\n> -       RCRQ $1, CX             // restore CF\r\n>         SBBQ 0(R9)(SI*8), R11\r\n> -       RCLQ $1, CX             // save CF\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n> +       RCLQ $1, CX             // c = CF\r\n>\r\n>         ADDQ $1, SI             // i++\r\n>         SUBQ $1, DI             // n--\r\n> @@ -149,10 +147,10 @@\r\n>         // uncomment the next line to disable the unrolled loop\r\n>         // JMP V3\r\n>\r\n> -       CMPQ DI, $4\r\n> +       SUBQ $4, DI             // n -= 4\r\n>         JL V3                   // if n < 4 goto V3\r\n>\r\n> -U3:    // n >= 4\r\n> +U3:    // n >= 0\r\n>         // regular loop body unrolled 4x\r\n>         MOVQ 0(R8)(SI*8), R11\r\n>         MOVQ 8(R8)(SI*8), R12\r\n> @@ -162,25 +160,24 @@\r\n>         ADCQ $0, R12\r\n>         ADCQ $0, R13\r\n>         ADCQ $0, R14\r\n> -       RCLQ $1, CX\r\n> -       ANDQ $1, CX\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n>         MOVQ R12, 8(R10)(SI*8)\r\n>         MOVQ R13, 16(R10)(SI*8)\r\n>         MOVQ R14, 24(R10)(SI*8)\r\n> +       RCLQ $1, CX             // c = CF\r\n> +       ANDQ $1, CX\r\n>\r\n>         ADDQ $4, SI             // i += 4\r\n>         SUBQ $4, DI             // n -= 4\r\n> -       CMPQ DI, $4\r\n> -       JGE U3                  // if n >= 4 goto U3\r\n> +       JGE U3                  // if n >= 0 goto U3\r\n>\r\n> -V3:    CMPQ DI, $0\r\n> +V3:    ADDQ $4, DI             // n += 4\r\n>         JLE E3                  // if n <= 0 goto E3\r\n>\r\n>  L3:    // n > 0\r\n>         ADDQ 0(R8)(SI*8), CX\r\n>         MOVQ CX, 0(R10)(SI*8)\r\n> -       RCLQ $1, CX\r\n> +       RCLQ $1, CX             // c = CF\r\n>         ANDQ $1, CX\r\n>\r\n>         ADDQ $1, SI             // i++\r\n> @@ -204,10 +201,10 @@\r\n>         // uncomment the next line to disable the unrolled loop\r\n>         // JMP V4\r\n>\r\n> -       CMPQ DI, $4\r\n> +       SUBQ $4, DI             // n -= 4\r\n>         JL V4                   // if n < 4 goto V4\r\n>\r\n> -U4:    // n >= 4\r\n> +U4:    // n >= 0\r\n>         // regular loop body unrolled 4x\r\n>         MOVQ 0(R8)(SI*8), R11\r\n>         MOVQ 8(R8)(SI*8), R12\r\n> @@ -217,26 +214,25 @@\r\n>         SBBQ $0, R12\r\n>         SBBQ $0, R13\r\n>         SBBQ $0, R14\r\n> -       RCLQ $1, CX\r\n> -       ANDQ $1, CX\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n>         MOVQ R12, 8(R10)(SI*8)\r\n>         MOVQ R13, 16(R10)(SI*8)\r\n>         MOVQ R14, 24(R10)(SI*8)\r\n> +       RCLQ $1, CX             // c = CF\r\n> +       ANDQ $1, CX\r\n>\r\n>         ADDQ $4, SI             // i += 4\r\n>         SUBQ $4, DI             // n -= 4\r\n> -       CMPQ DI, $4\r\n> -       JGE U4                  // if n >= 4 goto U4\r\n> +       JGE U4                  // if n >= 0 goto U4\r\n>\r\n> -V4:    CMPQ DI, $0\r\n> +V4:    ADDQ $4, DI             // n += 4\r\n>         JLE E4                  // if n <= 0 goto E4\r\n>\r\n>  L4:    // n > 0\r\n>         MOVQ 0(R8)(SI*8), R11\r\n>         SUBQ CX, R11\r\n>         MOVQ R11, 0(R10)(SI*8)\r\n> -       RCLQ $1, CX\r\n> +       RCLQ $1, CX             // c = CF\r\n>         ANDQ $1, CX\r\n>\r\n>         ADDQ $1, SI             // i++\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-24 17:23:49.395150",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "So, using SETCS does seem better for small and large operands. For the\r\nmedium-sized numbers, the old way works slightly better.\r\n\r\nLet me know if I should submit a CL for this.\r\n\r\n(Benchmarked on my 2010-era MacBook Air.)\r\n\r\nbenchmark             old ns/op    new ns/op    delta\r\nBenchmarkAddVW_1              8            8   -1.08%\r\nBenchmarkAddVW_2             10            8  -13.88%\r\nBenchmarkAddVW_3             10           10   +0.93%\r\nBenchmarkAddVW_4             10           11   +4.59%\r\nBenchmarkAddVW_5             11           12   +7.69%\r\nBenchmarkAddVW_1e1           18           17   -4.79%\r\nBenchmarkAddVW_1e2          129          115  -10.85%\r\nBenchmarkAddVW_1e3         1270         1096  -13.70%\r\nBenchmarkAddVW_1e4        13376        12454   -6.89%\r\nBenchmarkAddVW_1e5       130392       126100   -3.29%\r\n\r\nbenchmark              old MB/s     new MB/s  speedup\r\nBenchmarkAddVW_1        7709.10      7796.19    1.01x\r\nBenchmarkAddVW_2       12451.10     14427.04    1.16x\r\nBenchmarkAddVW_3       17727.81     17617.09    0.99x\r\nBenchmarkAddVW_4       23552.64     22551.95    0.96x\r\nBenchmarkAddVW_5       27411.40     25322.09    0.92x\r\nBenchmarkAddVW_1e1     34063.19     35847.61    1.05x\r\nBenchmarkAddVW_1e2     49529.97     55294.58    1.12x\r\nBenchmarkAddVW_1e3     50380.44     58377.79    1.16x\r\nBenchmarkAddVW_1e4     47843.59     51385.42    1.07x\r\nBenchmarkAddVW_1e5     49082.60     50753.31    1.03x\r\n\r\n\r\nHere is my hg diff -- unfortunately, due to the tight pipelining, I can't\r\ndo SETCS CX, but have to use an intermediate BX variable, which adds an\r\nextra instruction.\r\n\r\n\r\ndiff -r 93b44db58f94 src/pkg/math/big/arith_amd64.s\r\n--- a/src/pkg/math/big/arith_amd64.s Fri Aug 24 10:51:39 2012 -0700\r\n+++ b/src/pkg/math/big/arith_amd64.s Fri Aug 24 15:10:45 2012 -0400\r\n@@ -141,6 +141,7 @@\r\n  MOVQ x+16(FP), R8\r\n  MOVQ y+32(FP), CX // c = y\r\n  MOVQ z+0(FP), R10\r\n+ MOVQ $0, BX\r\n\r\n  MOVQ $0, SI // i = 0\r\n\r\n@@ -159,13 +160,13 @@\r\n  ADDQ CX, R11\r\n  ADCQ $0, R12\r\n  ADCQ $0, R13\r\n+ MOVQ BX, CX     // c = 0\r\n  ADCQ $0, R14\r\n  MOVQ R11, 0(R10)(SI*8)\r\n  MOVQ R12, 8(R10)(SI*8)\r\n  MOVQ R13, 16(R10)(SI*8)\r\n  MOVQ R14, 24(R10)(SI*8)\r\n- RCLQ $1, CX // c = CF\r\n- ANDQ $1, CX\r\n+ SETCS CX        // c = CF\r\n\r\n  ADDQ $4, SI // i += 4\r\n  SUBQ $4, DI // n -= 4\r\n@@ -177,8 +178,8 @@\r\n L3: // n > 0\r\n  ADDQ 0(R8)(SI*8), CX\r\n  MOVQ CX, 0(R10)(SI*8)\r\n- RCLQ $1, CX // c = CF\r\n- ANDQ $1, CX\r\n+ SETCS BX\r\n+ MOVQ BX, CX\r\n\r\n  ADDQ $1, SI // i++\r\n  SUBQ $1, DI // n--\r\n@@ -195,6 +196,7 @@\r\n  MOVQ x+16(FP), R8\r\n  MOVQ y+32(FP), CX // c = y\r\n  MOVQ z+0(FP), R10\r\n+ MOVQ $0, BX\r\n\r\n  MOVQ $0, SI // i = 0\r\n\r\n@@ -218,8 +220,8 @@\r\n  MOVQ R12, 8(R10)(SI*8)\r\n  MOVQ R13, 16(R10)(SI*8)\r\n  MOVQ R14, 24(R10)(SI*8)\r\n- RCLQ $1, CX // c = CF\r\n- ANDQ $1, CX\r\n+ SETCS BX\r\n+ MOVQ BX, CX\r\n\r\n  ADDQ $4, SI // i += 4\r\n  SUBQ $4, DI // n -= 4\r\n@@ -232,8 +234,8 @@\r\n  MOVQ 0(R8)(SI*8), R11\r\n  SUBQ CX, R11\r\n  MOVQ R11, 0(R10)(SI*8)\r\n- RCLQ $1, CX // c = CF\r\n- ANDQ $1, CX\r\n+ SETCS BX\r\n+ MOVQ BX, CX\r\n\r\n  ADDQ $1, SI // i++\r\n  SUBQ $1, DI // n--\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 2:16 PM, Christopher Swenson <cswenson@google.com>wrote:\r\n\r\n> Makes sense.\r\n>\r\n> I'll give a shot a report back.\r\n>\r\n>\r\n> On Fri, Aug 24, 2012 at 2:12 PM, Robert Griesemer <gri@golang.org> wrote:\r\n>\r\n>> I doubt it. For one it's the same number of instructions. SETC is a \"less\r\n>> primitive\" operation than rotate and 'and' (which are likely internally\r\n>> fast-path'ed). Feel free to try.\r\n>> - gri\r\n>>\r\n>>\r\n>> On Fri, Aug 24, 2012 at 10:52 AM, Christopher Swenson <\r\n>> cswenson@google.com> wrote:\r\n>>\r\n>>> Would it be better to use SETC instead of RCLQ + ANDQ? (You would have\r\n>>> to zero out the register first, since it only sets the byte...)\r\n>>>\r\n>>>\r\n>>> On Fri, Aug 24, 2012 at 1:44 PM, <iant@golang.org> wrote:\r\n>>>\r\n>>>> LGTM\r\n>>>>\r\n>>>> http://codereview.appspot.com/**6484056/<http://codereview.appspot.com/6484056/>\r\n>>>>\r\n>>>\r\n>>>\r\n>>>\r\n>>> --\r\n>>> Christopher Swenson\r\n>>> cswenson@google.com\r\n>>>\r\n>>>\r\n>>>\r\n>>\r\n>\r\n>\r\n> --\r\n> Christopher Swenson\r\n> cswenson@google.com\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-08-24 19:12:21.120770",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-08-24 17:44:00.470680",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=93b44db58f94 ***\n\nmath/big: minor tweaks to assembly code (slightly better performance)\n\nBenchmarks run on 2.8GHz Quad-Code Intel Xeon,\n4GB 800MHz DDR2 FB-DIMM (\"PowerMac\").\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkAddVV_1              7            7   -0.82%\nBenchmarkAddVV_2              8            8   -3.46%\nBenchmarkAddVV_3             10            9   -4.81%\nBenchmarkAddVV_4              9            9   -1.89%\nBenchmarkAddVV_5             11           10   -5.22%\nBenchmarkAddVV_1e1           17           18   +4.05%\nBenchmarkAddVV_1e2          117          115   -1.71%\nBenchmarkAddVV_1e3         1095         1090   -0.46%\nBenchmarkAddVV_1e4        13149        12679   -3.57%\nBenchmarkAddVV_1e5       135133       129482   -4.18%\nBenchmarkAddVW_1              6            6   -1.14%\nBenchmarkAddVW_2              7            7   +3.78%\nBenchmarkAddVW_3              8            8   +0.12%\nBenchmarkAddVW_4              8            8   -6.52%\nBenchmarkAddVW_5              9            8   -3.70%\nBenchmarkAddVW_1e1           14           13   -4.29%\nBenchmarkAddVW_1e2           97           96   -1.33%\nBenchmarkAddVW_1e3          953          940   -1.36%\nBenchmarkAddVW_1e4         9776         9527   -2.55%\nBenchmarkAddVW_1e5       102396        97738   -4.55%\n\nbenchmark              old MB/s     new MB/s  speedup\nBenchmarkAddVV_1        8702.84      8774.56    1.01x\nBenchmarkAddVV_2       14739.60     15277.82    1.04x\nBenchmarkAddVV_3       18375.37     19398.16    1.06x\nBenchmarkAddVV_4       26935.44     27464.68    1.02x\nBenchmarkAddVV_5       27754.04     29423.30    1.06x\nBenchmarkAddVV_1e1     37050.89     35629.72    0.96x\nBenchmarkAddVV_1e2     54289.15     55533.24    1.02x\nBenchmarkAddVV_1e3     58428.83     58682.53    1.00x\nBenchmarkAddVV_1e4     48670.55     50475.99    1.04x\nBenchmarkAddVV_1e5     47360.54     49427.66    1.04x\nBenchmarkAddVW_1       10397.27     10502.23    1.01x\nBenchmarkAddVW_2       17279.03     16654.13    0.96x\nBenchmarkAddVW_3       23858.39     23825.89    1.00x\nBenchmarkAddVW_4       29799.42     31895.06    1.07x\nBenchmarkAddVW_5       34781.83     36105.11    1.04x\nBenchmarkAddVW_1e1     45629.88     47597.42    1.04x\nBenchmarkAddVW_1e2     65341.93     66240.04    1.01x\nBenchmarkAddVW_1e3     67153.67     68069.83    1.01x\nBenchmarkAddVW_1e4     65464.60     67173.83    1.03x\nBenchmarkAddVW_1e5     62501.88     65480.66    1.05x\n\nR=iant\nCC=golang-dev\nhttp://codereview.appspot.com/6484056",
			"disapproval": false,
			"date": "2012-08-24 17:51:44.188420",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I doubt it. For one it's the same number of instructions. SETC is a \"less\r\nprimitive\" operation than rotate and 'and' (which are likely internally\r\nfast-path'ed). Feel free to try.\r\n- gri\r\n\r\n\r\nOn Fri, Aug 24, 2012 at 10:52 AM, Christopher Swenson\r\n<cswenson@google.com>wrote:\r\n\r\n> Would it be better to use SETC instead of RCLQ + ANDQ? (You would have to\r\n> zero out the register first, since it only sets the byte...)\r\n>\r\n>\r\n> On Fri, Aug 24, 2012 at 1:44 PM, <iant@golang.org> wrote:\r\n>\r\n>> LGTM\r\n>>\r\n>> http://codereview.appspot.com/**6484056/<http://codereview.appspot.com/6484056/>\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Christopher Swenson\r\n> cswenson@google.com\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-24 18:12:45.499330",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6484056: math/big: minor tweaks to assembly code (slightly bette...",
	"created": "2012-08-24 17:17:59.055900",
	"patchsets": [
		1,
		2001,
		5001,
		7002
	],
	"modified": "2012-08-24 17:52:43.471550",
	"closed": true,
	"issue": 6484056
}