{
	"description": "net: reduce allocation during Read/ReadFrom/Write/WriteTo\n\n        Before:\n        mallocs per ReadFrom: 10\n        mallocs per WriteTo: 3\n        mallocs per Read: 2\n        mallocs per Write: 2\n\n        After:\n        mallocs per ReadFrom: 8\n        mallocs per WriteTo: 1\n        mallocs per Read: 0\n        mallocs per Write: 0",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"mikioh.mikioh@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for your feedback.\n\nre: optimizing defer would be preferable, but I'm not sure it's on the roadmap. Given that we can remove all the allocation in Read and Write, I think it is worth making the code slightly uglier.\n\nhttp://codereview.appspot.com/5241043/diff/3003/src/pkg/net/malloc_test.go\nFile src/pkg/net/malloc_test.go (right):\n\nhttp://codereview.appspot.com/5241043/diff/3003/src/pkg/net/malloc_test.go#newcode1\nsrc/pkg/net/malloc_test.go:1: // Copyright 2009 The Go Authors. All rights reserved.\nOn 2011/10/08 09:55:06, mikioh wrote:\n> s/2009/2011/\n\nDone.\n\nhttp://codereview.appspot.com/5241043/diff/3003/src/pkg/net/malloc_test.go#newcode40\nsrc/pkg/net/malloc_test.go:40: addr, _ := ResolveUDPAddr(\"udp\", \"8.8.8.8:6666\")\nTrue, but the packets just need to leave the host to WriteTo doesn't return an err.\n\nOn 2011/10/08 09:55:06, mikioh wrote:\n> 8.8.8.8:6666 is not an appropriate target to send something.",
			"disapproval": false,
			"date": "2011-10-08 10:02:49.625299",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-08 10:28:33.823010",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I am not sure that this is worthwhile.  Although they are\nmallocs, they are also freed once the defer is run, so they\ndo not incur garbage collector overhead.  Can you measure\na speed difference in the new code?\n\nEven if so, the fix is probably in defer, not here.\nI created Issue 2364.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-12 18:00:28.232791",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5241043/diff/11001/src/pkg/net/malloc_test.go\nFile src/pkg/net/malloc_test.go (right):\n\nhttp://codereview.appspot.com/5241043/diff/11001/src/pkg/net/malloc_test.go#newcode53\nsrc/pkg/net/malloc_test.go:53: if _, err := c.WriteTo(buf, addr); err != nil {\nPlease try the change I just uploaded. \n\nOn 2011/10/08 10:18:19, mikioh wrote:\n> WriteTo fails on darwin, freebsd.\n> \n> - truss -o ./6.out on freebsd-8.2\n> socket(PF_INET,SOCK_DGRAM,0)                     = 7 (0x7)\n> fcntl(7,F_SETFD,FD_CLOEXEC)                      = 0 (0x0)\n> setsockopt(0x7,0xffff,0x4,0xf84004a7b8,0x4,0x0)  = 0 (0x0)\n> setsockopt(0x7,0xffff,0x200,0xf84004a7c0,0x4,0x0) = 0 (0x0)\n> setsockopt(0x7,0xffff,0x20,0xf84004a7c8,0x4,0x0) = 0 (0x0)\n> fcntl(7,F_GETFL,)                                = 2 (0x2)\n> fcntl(7,F_SETFL,O_NONBLOCK|0x2)                  = 0 (0x0)\n> connect(7,{ AF_INET 8.8.8.8:6666 },16)           = 0 (0x0)\n> getsockname(7,{ AF_INET 172.16.141.104:63495 },0xf84004a7d0) = 0 (0x0)\n> getpeername(7,{ AF_INET 8.8.8.8:6666 },0xf84004a7d8) = 0 (0x0)\n> sendto(7,\"\\0\",1,0x0,{ AF_INET 8.8.8.8:6666 },0x10) ERR#56 'Socket is already\n> connected'\n> gettimeofday({1318068844.360774 },0x0)           = 0 (0x0)\n> write(2,\"--- FAIL: net.TestCountWriteToMa\"...,105) = 105 (0x69)",
			"disapproval": false,
			"date": "2011-10-08 10:29:37.503110",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-08 07:17:30.989702",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Should we ask Go core team that they have a plan to \nimprove compiler stuff for defer block pre-allocation?\n\nI'll leave it to rsc.\n\nhttp://codereview.appspot.com/5241043/diff/3003/src/pkg/net/malloc_test.go\nFile src/pkg/net/malloc_test.go (right):\n\nhttp://codereview.appspot.com/5241043/diff/3003/src/pkg/net/malloc_test.go#newcode1\nsrc/pkg/net/malloc_test.go:1: // Copyright 2009 The Go Authors. All rights reserved.\ns/2009/2011/\n\nhttp://codereview.appspot.com/5241043/diff/3003/src/pkg/net/malloc_test.go#newcode40\nsrc/pkg/net/malloc_test.go:40: addr, _ := ResolveUDPAddr(\"udp\", \"8.8.8.8:6666\")\n8.8.8.8:6666 is not an appropriate target to send something.",
			"disapproval": false,
			"date": "2011-10-08 09:55:05.975166",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5241043/diff/11001/src/pkg/net/malloc_test.go\nFile src/pkg/net/malloc_test.go (right):\n\nhttp://codereview.appspot.com/5241043/diff/11001/src/pkg/net/malloc_test.go#newcode53\nsrc/pkg/net/malloc_test.go:53: if _, err := c.WriteTo(buf, addr); err != nil {\nWriteTo fails on darwin, freebsd.\n\n- truss -o ./6.out on freebsd-8.2\nsocket(PF_INET,SOCK_DGRAM,0)                     = 7 (0x7)\nfcntl(7,F_SETFD,FD_CLOEXEC)                      = 0 (0x0)\nsetsockopt(0x7,0xffff,0x4,0xf84004a7b8,0x4,0x0)  = 0 (0x0)\nsetsockopt(0x7,0xffff,0x200,0xf84004a7c0,0x4,0x0) = 0 (0x0)\nsetsockopt(0x7,0xffff,0x20,0xf84004a7c8,0x4,0x0) = 0 (0x0)\nfcntl(7,F_GETFL,)                                = 2 (0x2)\nfcntl(7,F_SETFL,O_NONBLOCK|0x2)                  = 0 (0x0)\nconnect(7,{ AF_INET 8.8.8.8:6666 },16)           = 0 (0x0)\ngetsockname(7,{ AF_INET 172.16.141.104:63495 },0xf84004a7d0) = 0 (0x0)\ngetpeername(7,{ AF_INET 8.8.8.8:6666 },0xf84004a7d8) = 0 (0x0)\nsendto(7,\"\\0\",1,0x0,{ AF_INET 8.8.8.8:6666 },0x10) ERR#56 'Socket is already connected'\ngettimeofday({1318068844.360774 },0x0)           = 0 (0x0)\nwrite(2,\"--- FAIL: net.TestCountWriteToMa\"...,105) = 105 (0x69)",
			"disapproval": false,
			"date": "2011-10-08 10:18:19.380404",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2011-10-12 08:46:32.672540",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi Russ,\n\nThanks for creating issue 2364, will this remove the allocation that a\ndefer call makes, or consolidate it to one allocation per function\nthat contains a defer ?\n\nI'd be sceptical that I could measure any real world reduction in wall\ntime through this change, my aim was to reduce allocations during\ncommon code paths. Talking about allocation, I was under the\nimpression that defered functions incurred a heap allocation, and that\nwas later subject to GC. If you're saying they are explicitly free'd\nafter return, this CL is probably extraneous.\n\nCheers\n\nDave\n\nOn Thu, Oct 13, 2011 at 4:31 AM, Russ Cox <rsc@golang.org> wrote:\n> I am not sure that this is worthwhile. \u00a0Although they are\n> mallocs, they are also freed once the defer is run, so they\n> do not incur garbage collector overhead. \u00a0Can you measure\n> a speed difference in the new code?\n>\n> Even if so, the fix is probably in defer, not here.\n> I created Issue 2364.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-10-12 23:06:58.552161",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Oct 12, 2011 at 19:06, Dave Cheney wrote:\n> Thanks for creating issue 2364, will this remove the allocation that a\n> defer call makes, or consolidate it to one allocation per function\n> that contains a defer ?\n\nIt would be somewhere in the middle.  There would be a separate,\nsegmented defer stack, so most of the time a defer would just push\nand later pop on that stack without doing any allocations.\nIf you did a bunch of defers in a loop without returning, then\nthe stack would have to grow, and would allocate.\n\n> I'd be sceptical that I could measure any real world reduction in wall\n> time through this change, my aim was to reduce allocations during\n> common code paths. Talking about allocation, I was under the\n> impression that defered functions incurred a heap allocation, and that\n> was later subject to GC. If you're saying they are explicitly free'd\n> after return, this CL is probably extraneous.\n\nYes, they are explicitly freed.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-13 14:37:00.802200",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Awesome. I'll abandon this change.\n\nOn Fri, Oct 14, 2011 at 1:36 AM, Russ Cox <rsc@golang.org> wrote:\n> On Oct 12, 2011 at 19:06, Dave Cheney wrote:\n>> Thanks for creating issue 2364, will this remove the allocation that a\n>> defer call makes, or consolidate it to one allocation per function\n>> that contains a defer ?\n>\n> It would be somewhere in the middle. \u00a0There would be a separate,\n> segmented defer stack, so most of the time a defer would just push\n> and later pop on that stack without doing any allocations.\n> If you did a bunch of defers in a loop without returning, then\n> the stack would have to grow, and would allocate.\n>\n>> I'd be sceptical that I could measure any real world reduction in wall\n>> time through this change, my aim was to reduce allocations during\n>> common code paths. Talking about allocation, I was under the\n>> impression that defered functions incurred a heap allocation, and that\n>> was later subject to GC. If you're saying they are explicitly free'd\n>> after return, this CL is probably extraneous.\n>\n> Yes, they are explicitly freed.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-10-13 20:18:34.975269",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-13 20:19:09.635714",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5241043: net: reduce allocation during Read/ReadFrom/Write/WriteTo",
	"created": "2011-10-08 07:16:50.944444",
	"patchsets": [
		1,
		2001,
		3003,
		7002,
		11001,
		8003,
		15005
	],
	"modified": "2011-10-13 20:19:11.584290",
	"closed": true,
	"issue": 5241043
}