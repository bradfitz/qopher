{
	"description": "archive/zip: allow user-extensible compression methods\n\nThis change replaces the hard-coded switch on compression method\nin zipfile reader and writer with a map into which users can\nregister compressors and decompressors in their init()s.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsallings@gmail.com",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-03 23:18:29.633920",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go#newcode47\nsrc/pkg/archive/zip/reader.go:47: // Decompressor is a function that wraps a Reader with a decompressing Reader.\nbut it returns a Closer too. who closes it? when?\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go#newcode55\nsrc/pkg/archive/zip/reader.go:55: // RegisterDecompressor allows custom decompressors for a specified method ID\nend in a period.\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go#newcode57\nsrc/pkg/archive/zip/reader.go:57: decompressors[method] = d\nI wonder if this should panic on duplicate registration. We seem to do that in most other places. (http in mux and NPN alternate proto)\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/writer.go\nFile src/pkg/archive/zip/writer.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/writer.go#newcode33\nsrc/pkg/archive/zip/writer.go:33: // Compressor is a function that wraps a Writer with a compressing Writer.\nsame comment\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/writer.go#newcode41\nsrc/pkg/archive/zip/writer.go:41: // RegisterCompressor allows custom compressors for a specified method ID\nsame",
			"disapproval": false,
			"date": "2013-08-05 13:52:32.058730",
			"approval": false
		},
		{
			"sender": "dsallings@gmail.com",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the review.\n\nI uploaded a new changeset which hopefully resolves all these issues.\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go#newcode47\nsrc/pkg/archive/zip/reader.go:47: // Decompressor is a function that wraps a Reader with a decompressing Reader.\nOn 2013/08/05 13:52:32, bradfitz wrote:\n> but it returns a Closer too. who closes it? when?\n\nDone.\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go#newcode55\nsrc/pkg/archive/zip/reader.go:55: // RegisterDecompressor allows custom decompressors for a specified method ID\nOn 2013/08/05 13:52:32, bradfitz wrote:\n> end in a period.\n\nDone.\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go#newcode57\nsrc/pkg/archive/zip/reader.go:57: decompressors[method] = d\nOn 2013/08/05 13:52:32, bradfitz wrote:\n> I wonder if this should panic on duplicate registration. We seem to do that in\n> most other places. (http in mux and NPN alternate proto)\n\nDone.\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/reader.go#newcode57\nsrc/pkg/archive/zip/reader.go:57: decompressors[method] = d\nOn 2013/08/05 13:52:32, bradfitz wrote:\n> I wonder if this should panic on duplicate registration. We seem to do that in\n> most other places. (http in mux and NPN alternate proto)\n\nI was thinking this would allow a user to replace Deflate with something else (e.g. higher compression).  It's probably not the right place for that, though.\n\nSince this increases complexity some, should there be tests for duplicate registration?\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/writer.go\nFile src/pkg/archive/zip/writer.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/writer.go#newcode33\nsrc/pkg/archive/zip/writer.go:33: // Compressor is a function that wraps a Writer with a compressing Writer.\nOn 2013/08/05 13:52:32, bradfitz wrote:\n> same comment\n\nDone.\n\nhttps://codereview.appspot.com/12421043/diff/8001/src/pkg/archive/zip/writer.go#newcode41\nsrc/pkg/archive/zip/writer.go:41: // RegisterCompressor allows custom compressors for a specified method ID\nOn 2013/08/05 13:52:32, bradfitz wrote:\n> same\n\nDone.",
			"disapproval": false,
			"date": "2013-08-05 17:54:09.173750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe update the consts too:\n\nconst (\n    Store   uint16 = 0\n    Deflate uint16 = 8\n)\n\nOr would adding LZMA there be distracting?\n\nhttps://codereview.appspot.com/12421043/diff/15001/src/pkg/archive/zip/writer.go\nFile src/pkg/archive/zip/writer.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/15001/src/pkg/archive/zip/writer.go#newcode33\nsrc/pkg/archive/zip/writer.go:33: // Compressor is a function that wraps a Writer with a compressing Writer.\nMaybe:\n\n// A Compressor returns a compressing writer, writing to the\n// provided writer. On Close, any pending data should be flushed.\n\nhttps://codereview.appspot.com/12421043/diff/15001/src/pkg/archive/zip/writer.go#newcode44\nsrc/pkg/archive/zip/writer.go:44: // RegisterCompressor allows custom compressors for a specified method ID.\nChange the verb from \"allows\" to \"registers\":\n\n// RegisterCompressor registers a compressor for a specified method ID.\n// The common methods Store and Deflate are built in.",
			"disapproval": false,
			"date": "2013-08-05 18:03:23.579470",
			"approval": false
		},
		{
			"sender": "dsallings@gmail.com",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks so much for the doc help.  I'm bad at Englishing.\n\nI don't think it makes sense to include lzma in the predefined consts.  I can add it (and others) if you'd like, though.\n\nThere are actually a lot in the spec:\n\n        0 - The file is stored (no compression)\n        1 - The file is Shrunk\n        2 - The file is Reduced with compression factor 1\n        3 - The file is Reduced with compression factor 2\n        4 - The file is Reduced with compression factor 3\n        5 - The file is Reduced with compression factor 4\n        6 - The file is Imploded\n        7 - Reserved for Tokenizing compression algorithm\n        8 - The file is Deflated\n        9 - Enhanced Deflating using Deflate64(tm)\n       10 - PKWARE Data Compression Library Imploding (old IBM TERSE)\n       11 - Reserved by PKWARE\n       12 - File is compressed using BZIP2 algorithm\n       13 - Reserved by PKWARE\n       14 - LZMA (EFS)\n       15 - Reserved by PKWARE\n       16 - Reserved by PKWARE\n       17 - Reserved by PKWARE\n       18 - File is compressed using IBM TERSE (new)\n       19 - IBM LZ77 z Architecture (PFS)\n       97 - WavPack compressed data\n       98 - PPMd version I, Rev 1\n\nhttps://codereview.appspot.com/12421043/diff/15001/src/pkg/archive/zip/writer.go\nFile src/pkg/archive/zip/writer.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/15001/src/pkg/archive/zip/writer.go#newcode33\nsrc/pkg/archive/zip/writer.go:33: // Compressor is a function that wraps a Writer with a compressing Writer.\nOn 2013/08/05 18:03:23, bradfitz wrote:\n> Maybe:\n> \n> // A Compressor returns a compressing writer, writing to the\n> // provided writer. On Close, any pending data should be flushed.\n\nDone.\n\nhttps://codereview.appspot.com/12421043/diff/15001/src/pkg/archive/zip/writer.go#newcode44\nsrc/pkg/archive/zip/writer.go:44: // RegisterCompressor allows custom compressors for a specified method ID.\nOn 2013/08/05 18:03:23, bradfitz wrote:\n> Change the verb from \"allows\" to \"registers\":\n> \n> // RegisterCompressor registers a compressor for a specified method ID.\n> // The common methods Store and Deflate are built in.\n\nDone.",
			"disapproval": false,
			"date": "2013-08-05 18:12:45.095990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but will let adg finish review & submit.",
			"disapproval": false,
			"date": "2013-08-05 23:37:27.859290",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Actually he's off in tropical paradise or something.\r\n\r\nI'll submit tomorrow morning if there are no objections before then.\r\n\r\n\r\n\r\nOn Mon, Aug 5, 2013 at 4:37 PM, <bradfitz@golang.org> wrote:\r\n\r\n> LGTM but will let adg finish review & submit.\r\n>\r\n>\r\n> https://codereview.appspot.**com/12421043/<https://codereview.appspot.com/12421043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-05 23:38:26.675750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12421043/diff/18002/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/18002/src/pkg/archive/zip/reader.go#newcode60\nsrc/pkg/archive/zip/reader.go:60: if _, ok := decompressors[method]; ok {\nthis should be locked",
			"disapproval": false,
			"date": "2013-08-05 23:40:47.538610",
			"approval": true
		},
		{
			"sender": "dsallings@gmail.com",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12421043/diff/18002/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/18002/src/pkg/archive/zip/reader.go#newcode60\nsrc/pkg/archive/zip/reader.go:60: if _, ok := decompressors[method]; ok {\nOn 2013/08/05 23:40:47, rsc wrote:\n> this should be locked\n\nThe intention is to do all this stuff during init() -- certainly not very dynamically.  Would you prefer that be more clearly documented or I add locks around all the map accesses?\n\nA third possibility is to do something more like what crypto/hash does and use a slice large enough to hold known values.  It's a bit less flexible, though.  It's a uint16 type, but the spec only lists through 98.\n\nI can do whichever.",
			"disapproval": false,
			"date": "2013-08-06 02:23:58.612220",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12421043/diff/18002/src/pkg/archive/zip/reader.go\nFile src/pkg/archive/zip/reader.go (right):\n\nhttps://codereview.appspot.com/12421043/diff/18002/src/pkg/archive/zip/reader.go#newcode53\nsrc/pkg/archive/zip/reader.go:53: var decompressors = map[uint16]Decompressor{\nmake this:\n\nvar (\n      demu sync.RWMuytex  // guards  decompressors\n      decompressors = ....\n)\n\nAnd likewise in the other file with, say, \"comu\".\n\nWe only really need one lock, though.  I just want it above the variables it guards.\n\nAlternatively, move all this new stuff to \"register.go\" and do one var blocl:\n\nvar (\n      mu  sync.RWMutex  // guards following two maps\n     decompressors = ...\n    compressors = ....\n)\nfunc Register\nfunc Register\netc",
			"disapproval": false,
			"date": "2013-08-06 04:04:22.099900",
			"approval": false
		},
		{
			"sender": "dsallings@gmail.com",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I did the register.go thing.  I copied the header from another file and noticed after upload it's copyright 2010.\n\nBonus is that it does make the reader and writer changes much smaller.  Because of the introduction of locks, I added functions for accessing the method via the rlock.",
			"disapproval": false,
			"date": "2013-08-06 05:09:06.422520",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks like you haven't submitted a CLA.\r\n\r\nSee http://golang.org/doc/contribute.html#copyright and let me know when\r\nthat's done.\r\n\r\n\r\n\r\nOn Mon, Aug 5, 2013 at 10:09 PM, <dsallings@gmail.com> wrote:\r\n\r\n> I did the register.go thing.  I copied the header from another file and\r\n> noticed after upload it's copyright 2010.\r\n>\r\n> Bonus is that it does make the reader and writer changes much smaller.\r\n> Because of the introduction of locks, I added functions for accessing\r\n> the method via the rlock.\r\n>\r\n> https://codereview.appspot.**com/12421043/<https://codereview.appspot.com/12421043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-06 15:04:35.852060",
			"approval": false
		},
		{
			"sender": "dsallings@gmail.com",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry about that.  I filled that the contributor thing with this gmail address (not the address I generally use, but I figured that'd be easier for you guys).",
			"disapproval": false,
			"date": "2013-08-06 17:25:46.966290",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThis turned out well.\r\n\r\nWe can add more addresses to the CONTRIBUTORS file if you'd like.\r\n\r\n\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 10:25 AM, <dsallings@gmail.com> wrote:\r\n\r\n> Sorry about that.  I filled that the contributor thing with this gmail\r\n> address (not the address I generally use, but I figured that'd be easier\r\n> for you guys).\r\n>\r\n> https://codereview.appspot.**com/12421043/<https://codereview.appspot.com/12421043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-06 19:03:06.741450",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f9f44b2d4d79 ***\n\narchive/zip: allow user-extensible compression methods\n\nThis change replaces the hard-coded switch on compression method\nin zipfile reader and writer with a map into which users can\nregister compressors and decompressors in their init()s.\n\nR=golang-dev, bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/12421043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-08-06 19:03:41.890130",
			"approval": false
		}
	],
	"owner_email": "dsallings@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dustin",
	"subject": "code review 12421043: archive/zip: allow user-extensible compression methods",
	"created": "2013-08-03 23:10:45.729280",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		8001,
		15001,
		18002,
		32001
	],
	"modified": "2013-08-06 19:03:42.421780",
	"closed": false,
	"issue": 12421043
}