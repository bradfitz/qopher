{
	"description": "runtime: try to determine the actual type during garbage collection\n\nIf the scanned block has no typeinfo the garbage collector will attempt\nto get the actual type of the block.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"rsc@golang.org",
		"iant@google.com"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-11 15:41:50.123010",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/11 15:41:50, atom wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nI would like to obtain information about the progress of this codereview. Thanks.",
			"disapproval": false,
			"date": "2013-01-15 17:57:36.676990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 15, 2013 at 9:57 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/01/11 15:41:50, atom wrote:\r\n>\r\n>> Hello mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>,\r\n>>\r\n>\r\n>  I'd like you to review this change to\r\n>> https://go.googlecode.com/hg/\r\n>>\r\n>\r\n> I would like to obtain information about the progress of this\r\n> codereview. Thanks.\r\n>\r\n\r\nA shorter way to say that is \"ping\".\r\n\r\nRuss is just recently back (see his recent \"not reading code\" email).\r\n",
			"disapproval": false,
			"date": "2013-01-15 18:19:29.983310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-18 21:39:11.060020",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please hg sync + hg mail again. It looks like something changed in mgc0.c.\r\n",
			"disapproval": false,
			"date": "2013-01-18 21:40:52.007200",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-18 21:50:10.750870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a7cc76051b9a ***\n\nruntime: try to determine the actual type during garbage collection\n\nIf the scanned block has no typeinfo the garbage collector will attempt\nto get the actual type of the block.\n\nR=golang-dev, bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7093045\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-18 21:56:21.223150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am trying to use tip with some large programs and I am finding that this CL causes the os.Args slice - one of the earliest allocations in the program - to be reclaimed prematurely. I have not been able to cut the test case to something manageable yet, but bypassing the type detection with https://codereview.appspot.com/7245043 fixes the problem.\n\nAny ideas?\n\nRuss",
			"disapproval": false,
			"date": "2013-01-29 17:33:00.597820",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 29, 2013 at 9:33 AM,  <rsc@golang.org> wrote:\r\n> I am trying to use tip with some large programs and I am finding that\r\n> this CL causes the os.Args slice - one of the earliest allocations in\r\n> the program - to be reclaimed prematurely. I have not been able to cut\r\n> the test case to something manageable yet, but bypassing the type\r\n> detection with https://codereview.appspot.com/7245043 fixes the problem.\r\n\r\nITYM https://codereview.appspot.com/7226055/ .\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-01-29 18:00:32.019190",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/29 17:33:00, rsc wrote:\n> I am trying to use tip with some large programs and I am finding that this CL\n> causes the os.Args slice - one of the earliest allocations in the program - to\n> be reclaimed prematurely. I have not been able to cut the test case to something\n> manageable yet, but bypassing the type detection with\n> https://codereview.appspot.com/7245043 fixes the problem.\n> \n> Any ideas?\n> \n> Russ\n\nIs the program making use of the reflect package?\n\nDoes the premature reclamation happen when the program is starting, or later?",
			"disapproval": false,
			"date": "2013-01-29 18:58:05.177000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 29, 2013 at 10:58 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/01/29 17:33:00, rsc wrote:\r\n>\r\n>> I am trying to use tip with some large programs and I am finding that\r\n>>\r\n> this CL\r\n>\r\n>> causes the os.Args slice - one of the earliest allocations in the\r\n>>\r\n> program - to\r\n>\r\n>> be reclaimed prematurely. I have not been able to cut the test case to\r\n>>\r\n> something\r\n>\r\n>> manageable yet, but bypassing the type detection with\r\n>> https://codereview.appspot.**com/7245043<https://codereview.appspot.com/7245043>fixes the problem.\r\n>>\r\n>\r\n>  Any ideas?\r\n>>\r\n>\r\n>  Russ\r\n>>\r\n>\r\n> Is the program making use of the reflect package?\r\n>\r\n\r\nI don't believe so.\r\n\r\n\r\n> Does the premature reclamation happen when the program is starting, or\r\n> later?\r\n>\r\n\r\nIt seems to happen very early, by the time func main has started. The\r\nmemory used by os.Args appears to be reused for a MSpan header.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-29 21:13:35.555130",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/29 21:13:35, rsc wrote:\n> It seems to happen very early, by the time func main has started. The\n> memory used by os.Args appears to be reused for a MSpan header.\n\nDo you mean the following allocation:\n\nhttp://code.google.com/p/go/source/browse/src/pkg/runtime/runtime.c?r=640397f242681bad356dcf4b4450ca72b1ad96b3#88\n\nIt appears I am unable to figure out the cause of the issue without a test case.",
			"disapproval": false,
			"date": "2013-01-30 17:48:08.748310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, that's the allocation. I am going to try to winnow the example down to\r\na decent test case later today.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-30 17:56:19.559570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure what's different. I'll send you a Linux binary.\r\n",
			"disapproval": false,
			"date": "2013-01-31 15:32:43.723880",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 31, 2013 at 9:23 AM, Russ Cox <rsc@golang.org> wrote:\r\n> You're right, it says os.Args 24 type.uintptr. I wonder why.\r\n\r\nPresumably because when you compile the runtime package there is\r\nnothing anywhere to say what the type of os.Args should be.  The type\r\nof os.Args is given in the os package, not the runtime package.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-01-31 17:46:14.699280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This reproduces the crash on both Linux and OS X amd64, building at tip.\r\n\r\n$ cat main.go\r\npackage main\r\n\r\nimport (\r\n\"os\"\r\n_ \"./p\"\r\n)\r\n\r\nfunc main() {\r\nos.Stat(os.Args[0])\r\n}\r\n$ cat p/p.go\r\npackage p\r\n\r\nimport \"os\"\r\n\r\nfunc unused() {\r\nfor arg := os.Args[1:]; len(arg) > 0; {\r\n}\r\n}\r\n$ go run main.go\r\nunexpected fault address 0x5002200001\r\nfatal error: fault\r\n[signal 0xb code=0x1 addr=0x5002200001 pc=0x41c105]\r\n\r\ngoroutine 1 [running]:\r\nruntime.throw(0x4881ca, 0x5002200001)\r\n/home/rsc/go/src/pkg/runtime/panic.c:462 +0x67\r\nruntime.sigpanic()\r\n/home/rsc/go/src/pkg/runtime/thread_linux.c:202 +0xe7\r\nsyscall.ByteSliceFromString(0x5002200001, 0xc200018078, 0xc200046000,\r\n0xc2000290c0, 0x419960, ...)\r\n/home/rsc/go/src/pkg/syscall/syscall.go:38 +0x45\r\nsyscall.BytePtrFromString(0x5002200001, 0xc200018078, 0x100000001,\r\n0x2cc00000001, 0x4464e0, ...)\r\n/home/rsc/go/src/pkg/syscall/syscall.go:56 +0x2f\r\nsyscall.Stat(0x5002200001, 0xc200018078, 0xc200046000, 0x0, 0x0, ...)\r\n/home/rsc/go/src/pkg/syscall/zerrors_linux_amd64.go:3179 +0x44\r\nos.Stat(0x5002200001, 0xc200018078, 0x0, 0x0, 0x0, ...)\r\n/home/rsc/go/src/pkg/os/file_unix.go:132 +0x6f\r\nmain.main()\r\n/home/rsc/main.go:9 +0x3d\r\nruntime.main()\r\n/home/rsc/go/src/pkg/runtime/proc.c:257 +0x99\r\nruntime.goexit()\r\n/home/rsc/go/src/pkg/runtime/proc.c:286\r\nexit status 2\r\n$\r\n\r\nUsing hardware watchpoints I can see the memory get collected:\r\n\r\n$ go build main.go\r\n$ gdb main\r\nReading symbols from /home/rsc/main...done.\r\nLoading Go Runtime support.\r\n(gdb) print &'os.Args'\r\n$1 = (uintptr *) 0x48aaf8 <os.Args>\r\n(gdb) watch *(uintptr*)0x48aaf8\r\nHardware watchpoint 1: *(uintptr*)0x48aaf8\r\n(gdb) r\r\nStarting program: /home/rsc/main\r\ngoenvs_args 1 0x7fffffffe808 0x7fffffffead2 0x0\r\nHardware watchpoint 1: *(uintptr*)0x48aaf8\r\n\r\nOld value = 0\r\nNew value = 833223753728\r\n# NOTE: gdb is showing the line *after* the instruction that did the write.\r\nruntime.goargs () at /home/rsc/go/src/pkg/runtime/runtime.c:93\r\n93 os\u00b7Args.len = argc;\r\n(gdb) print/x *(uintptr*)0x48aaf8\r\n$3 = 0xc200018000\r\n(gdb) watch *(uintptr*)0xc200018000\r\nHardware watchpoint 2: *(uintptr*)0xc200018000\r\n(gdb) x/2xg 0xc200018000\r\n0xc200018000: 0x00007fffffffead2 0x000000000000000e\r\n(gdb) c\r\nContinuing.\r\ngoenvs_unix 1 0x7fffffffeae1\r\nHardware watchpoint 2: *(uintptr*)0xc200018000\r\n\r\nOld value = 140737488349906\r\nNew value = 833223754240\r\n# NOTE: gdb is showing the line *after* again. The actual line is:\r\n158 end->next = s->freelist;\r\nruntime.MCentral_FreeSpan (c=void, s=void, n=void, start=void, end=void)\r\n    at /home/rsc/go/src/pkg/runtime/mcentral.c:159\r\n159 s->freelist = start;\r\n(gdb) where\r\n#0  runtime.MCentral_FreeSpan (c=void, s=void, n=void, start=void, end=void)\r\n    at /home/rsc/go/src/pkg/runtime/mcentral.c:159\r\n#1  0x00000000004095fc in sweepspan (idx=void)\r\n    at /home/rsc/go/src/pkg/runtime/mgc0.c:1256\r\n#2  0x000000000040d034 in runtime.parfordo (desc=void)\r\n    at /home/rsc/go/src/pkg/runtime/parfor.c:101\r\n#3  0x0000000000409f27 in gc (args=void)\r\n    at /home/rsc/go/src/pkg/runtime/mgc0.c:1539\r\n#4  0x00000000004177a0 in ?? ()\r\n    at /home/rsc/go/src/pkg/runtime/asm_amd64.s:242\r\n#5  0x00007ffff7f7edb4 in ?? ()\r\n#6  0x00007ffff7f7e100 in ?? ()\r\n#7  0x00007ffff7f7efb8 in ?? ()\r\n#8  0x00007ffff7f7ed80 in ?? ()\r\n#9  0x0000000000409beb in runtime.gc (force=void)\r\n    at /home/rsc/go/src/pkg/runtime/mgc0.c:1462\r\n#10 0x0000000000000000 in ?? ()\r\n(gdb)\r\n",
			"disapproval": false,
			"date": "2013-01-30 23:57:02.035500",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 15:32:43, rsc wrote:\n> I'm not sure what's different. I'll send you a Linux binary.\n\nIt appears that os.Args has a wrong type: uintptr.\n\nGDB prints:\n\n  (gdb) print &'os.Args'\n  $1 = (uintptr *) 0x48aad0\n\nbut it should print something like:\n\n  (gdb) print &'os.Args'\n  $1 =  []string *\n\nor (no imports, empty func main()):\n\n  (gdb) print &'os.Args'\n  $1 = (<data variable, no debug info> *) 0x807b118 <os.Args>  \n\n\nThere are two debugging print statements in ld/data.c:gcaddsym (http://code.google.com/p/go/source/browse/src/cmd/ld/data.c?r=1eadf11dd1b7b19d4857681363553c2cfd2ad47d#921).\n\nUncommenting the two print statements and running 'go build' on your machine should yield:\n\n$ go build main.go | grep os.Args\ngcaddsym:    os.Args    12    type.[]string",
			"disapproval": false,
			"date": "2013-01-31 17:16:13.659100",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 23:57:02, rsc wrote:\n> This reproduces the crash on both Linux and OS X amd64, building at tip.\n> \n> $ cat main.go\n> package main\n> ...\n\nI am unable to reproduce the failure on linux/amd64. go version devel +9ff35ff05de6\n\n$ GOGCTRACE=1 ./main\ngc1(1): 0+0+0 ms, 0 -> 0 MB 17 -> 19 (20-1) objects, 0(0) handoff, 0(0) steal, 0/0/0 yields",
			"disapproval": false,
			"date": "2013-01-31 08:28:19.059250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're right, it says os.Args 24 type.uintptr. I wonder why.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-31 17:23:17.638750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Moved to the issue tracker (issue 4907).\r\n",
			"disapproval": false,
			"date": "2013-02-25 15:12:57.343330",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 7093045: runtime: try to determine the actual type during garbag...",
	"created": "2013-01-11 15:41:43.586100",
	"patchsets": [
		1,
		6001
	],
	"modified": "2013-01-31 17:16:13.815070",
	"closed": true,
	"issue": 7093045
}