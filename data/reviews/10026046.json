{
	"description": "cmd/gc: properly race-instrument for loops\nInstrumentation of ntest expression should go to ntest->init.\nSame for nincr.\nFixes issue 5340.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-06 11:57:16.531670",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This code has the same problems as https://codereview.appspot.com/9910043/\n\nI'll send in a new version for this issue today.\n\nProof of concept that causes gc to go into an infinite loop with this patch:\npackage main\n\ntype iface interface {\n        Foo() *struct{ b bool }\n}\n\ntype Int int\n\nfunc (i Int) Foo() *struct{ b bool } {\n        return &struct{ b bool }{false}\n}\n\nfunc main() {\n        var t Int\n        // interface conversion causes nodes to be put on init list\n        for iface(t).Foo().b {\n        }\n}",
			"disapproval": false,
			"date": "2013-06-06 15:05:36.495580",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/06 15:05:36, DMorsing wrote:\n> This code has the same problems as https://codereview.appspot.com/9910043/\n> \n> I'll send in a new version for this issue today.\n> \n> Proof of concept that causes gc to go into an infinite loop with this patch:\n> package main\n> \n> type iface interface {\n>         Foo() *struct{ b bool }\n> }\n> \n> type Int int\n> \n> func (i Int) Foo() *struct{ b bool } {\n>         return &struct{ b bool }{false}\n> }\n> \n> func main() {\n>         var t Int\n>         // interface conversion causes nodes to be put on init list\n>         for iface(t).Foo().b {\n>         }\n> }\n\n\nThanks!\nThen I am waiting for your updated version, and will update this CL the same way.",
			"disapproval": false,
			"date": "2013-06-06 15:16:39.035190",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "9910043 is in now. Pinging this CL so it doesn't get lost.",
			"disapproval": false,
			"date": "2013-06-11 20:35:47.970190",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-13 10:54:30.571330",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/13 10:54:30, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:daniel.morsing@gmail.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nDaniel,\n\nI've refactored you code slightly, so that now it's possible to write:\nracewalknode(&n->right, &n->right->ninit, wr, 0);\nand it will do the right thing.\n\nI've also added your test that should cause infinite loop before.",
			"disapproval": false,
			"date": "2013-06-13 10:56:21.898180",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-06-13 11:12:04.994560",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ff86470c2f3c ***\n\ncmd/gc: properly race-instrument for loops\nInstrumentation of ntest expression should go to ntest->init.\nSame for nincr.\nFixes issue 5340.\n\nR=golang-dev, daniel.morsing\nCC=golang-dev\nhttps://codereview.appspot.com/10026046",
			"disapproval": false,
			"date": "2013-06-13 12:04:05.199760",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10026046: cmd/gc: properly race-instrument for loops",
	"created": "2013-06-06 11:45:51.180360",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		14001,
		17001,
		23001
	],
	"modified": "2013-06-13 12:04:06.355120",
	"closed": true,
	"issue": 10026046
}