{
	"description": "expvar: add locking to String, and use RWMutex properly throughout.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=de2755bfbd0c ***\n\nexpvar: add locking to String, and use RWMutex properly throughout.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5754043",
			"disapproval": false,
			"date": "2012-03-05 22:13:36.141914",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-05 22:06:03.706986",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nwhoops, not sure how I missed *String.  probably skipped over it too\nquickly when I was searching for \"String\", thinking I was looking at the\ntype, not the method.\n\n\nOn Mon, Mar 5, 2012 at 2:06 PM, <dsymonds@golang.org> wrote:\n\n> Reviewers: bradfitz,\n>\n> Message:\n> Hello bradfitz (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> expvar: add locking to String, and use RWMutex properly throughout.\n>\n> Please review this at http://codereview.appspot.com/**5754043/<http://codereview.appspot.com/5754043/>\n>\n> Affected files:\n>  M src/pkg/expvar/expvar.go\n>\n>\n> Index: src/pkg/expvar/expvar.go\n> ==============================**==============================**=======\n> --- a/src/pkg/expvar/expvar.go\n> +++ b/src/pkg/expvar/expvar.go\n> @@ -41,12 +41,12 @@\n>  // Int is a 64-bit integer variable that satisfies the Var interface.\n>  type Int struct {\n>        i  int64\n> -       mu sync.Mutex\n> +       mu sync.RWMutex\n>  }\n>\n>  func (v *Int) String() string {\n> -       v.mu.Lock()\n> -       defer v.mu.Unlock()\n> +       v.mu.RLock()\n> +       defer v.mu.RUnlock()\n>        return strconv.FormatInt(v.i, 10)\n>  }\n>\n> @@ -65,12 +65,12 @@\n>  // Float is a 64-bit float variable that satisfies the Var interface.\n>  type Float struct {\n>        f  float64\n> -       mu sync.Mutex\n> +       mu sync.RWMutex\n>  }\n>\n>  func (v *Float) String() string {\n> -       v.mu.Lock()\n> -       defer v.mu.Unlock()\n> +       v.mu.RLock()\n> +       defer v.mu.RUnlock()\n>        return strconv.FormatFloat(v.f, 'g', -1, 64)\n>  }\n>\n> @@ -188,12 +188,21 @@\n>\n>  // String is a string variable, and satisfies the Var interface.\n>  type String struct {\n> -       s string\n> +       s  string\n> +       mu sync.RWMutex\n>  }\n>\n> -func (v *String) String() string { return strconv.Quote(v.s) }\n> +func (v *String) String() string {\n> +       v.mu.RLock()\n> +       defer v.mu.RUnlock()\n> +       return strconv.Quote(v.s)\n> +}\n>\n> -func (v *String) Set(value string) { v.s = value }\n> +func (v *String) Set(value string) {\n> +       v.mu.Lock()\n> +       defer v.mu.Unlock()\n> +       v.s = value\n> +}\n>\n>  // Func implements Var by calling the function\n>  // and formatting the returned value using JSON.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-05 22:09:57.175016",
			"approval": true
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5754043: expvar: add locking to String, and use RWMutex properly...",
	"created": "2012-03-05 22:04:34.575787",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-03-05 22:13:39.459401",
	"closed": true,
	"issue": 5754043
}