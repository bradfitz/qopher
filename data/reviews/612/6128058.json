{
	"description": "leveldb: add file locking on linux/amd64 (via a fcntl syscall).",
	"cc": [
		"bradfitz@golang.org",
		"bradfitz@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is based on the C++ LevelDB util/env_posix.cc code at\n\nhttp://code.google.com/searchframe#mHLldehqYMA/trunk/util/env_posix.cc&q=LockOrUnlock%20package:http://leveldb%5C.googlecode%5C.com&l=289\n\nalthough the Go API is different: it returns an io.Closer instead of requiring a separate Unlock method.",
			"disapproval": false,
			"date": "2012-05-01 08:35:28.820983",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2012-05-01 08:30:44.289678",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nA test would be nice, though.\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file.go\nFile leveldb/db/file.go (right):\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file.go#newcode43\nleveldb/db/file.go:43: // Lock is not yet implemented on other operating systems.\nmake it clear in/after this sentence that those other operating systems return an error, not a no-op closer?\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file_lock_linux_amd64.go\nFile leveldb/db/file_lock_linux_amd64.go (right):\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file_lock_linux_amd64.go#newcode36\nleveldb/db/file_lock_linux_amd64.go:36: _, _, errno := syscall.RawSyscall(syscall.SYS_FCNTL, uintptr(f.Fd()), uintptr(syscall.F_SETLK), uintptr(unsafe.Pointer(&k)))\nI think you want syscall.Syscall (not RawSyscall), if fcntl F_SETLK can block in the kernel.  (RawSyscall is for non-blocking system calls)\n\nAlso, the uintptr conversion on f.Fd() isn't necessary--- it already returns a uintptr for compatbility with Windows where fds are pointers rather than ints.\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file_lock_linux_amd64.go#newcode41\nleveldb/db/file_lock_linux_amd64.go:41: return f, nil\nI'm always nervous in cases like this, returning interface values which should be one thing (just a Closer) but that allow callers to convert into Writers/Readers/Statters/etc now.\n\nBut it's fine.",
			"disapproval": false,
			"date": "2012-05-01 08:50:57.151537",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A test would indeed be nice, but I also don't like tests monkeying with real file systems. I'll leave it as a TODO for now.\n\nSubmitting...\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file.go\nFile leveldb/db/file.go (right):\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file.go#newcode43\nleveldb/db/file.go:43: // Lock is not yet implemented on other operating systems.\nOn 2012/05/01 08:50:57, bradfitzgoog wrote:\n> make it clear in/after this sentence that those other operating systems return\n> an error, not a no-op closer?\n\nDone.\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file_lock_linux_amd64.go\nFile leveldb/db/file_lock_linux_amd64.go (right):\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file_lock_linux_amd64.go#newcode36\nleveldb/db/file_lock_linux_amd64.go:36: _, _, errno := syscall.RawSyscall(syscall.SYS_FCNTL, uintptr(f.Fd()), uintptr(syscall.F_SETLK), uintptr(unsafe.Pointer(&k)))\nOn 2012/05/01 08:50:57, bradfitzgoog wrote:\n> I think you want syscall.Syscall (not RawSyscall), if fcntl F_SETLK can block in\n> the kernel.  (RawSyscall is for non-blocking system calls)\n> \n> Also, the uintptr conversion on f.Fd() isn't necessary--- it already returns a\n> uintptr for compatbility with Windows where fds are pointers rather than ints.\n\nDone.\n\nhttp://codereview.appspot.com/6128058/diff/9001/leveldb/db/file_lock_linux_amd64.go#newcode41\nleveldb/db/file_lock_linux_amd64.go:41: return f, nil\nOn 2012/05/01 08:50:57, bradfitzgoog wrote:\n> I'm always nervous in cases like this, returning interface values which should\n> be one thing (just a Closer) but that allow callers to convert into\n> Writers/Readers/Statters/etc now.\n> \n> But it's fine.\n\nDone.",
			"disapproval": false,
			"date": "2012-05-01 23:03:15.359816",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/leveldb-go/source/detail?r=51f837716c75 ***\n\nleveldb: add file locking on linux/amd64 (via a fcntl syscall).\n\nR=bradfitz, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6128058",
			"disapproval": false,
			"date": "2012-05-01 23:03:56.227083",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6128058: leveldb: add file locking on linux/amd64 (via a fcntl s...",
	"created": "2012-05-01 08:30:18.840469",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		13001
	],
	"modified": "2012-05-01 23:03:58.946031",
	"closed": true,
	"issue": 6128058
}