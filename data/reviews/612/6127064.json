{
	"description": "compress/flate: optimize history-copy decoding.\n\nThe forwardCopy function could be re-written in asm, and the copyHuff\nmethod could probably be rolled into huffmanBlock and copyHist, but\nI'm leaving those changes for future CLs.\n\ncompress/flate benchmarks:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkDecoderBestSpeed1K                  385327       435140  +12.93%\nBenchmarkDecoderBestSpeed10K                1245190      1062112  -14.70%\nBenchmarkDecoderBestSpeed100K               8512365      5833680  -31.47%\nBenchmarkDecoderDefaultCompression1K         382225       421301  +10.22%\nBenchmarkDecoderDefaultCompression10K        867950       613890  -29.27%\nBenchmarkDecoderDefaultCompression100K      5658240      2466726  -56.40%\nBenchmarkDecoderBestCompression1K            383760       421634   +9.87%\nBenchmarkDecoderBestCompression10K           867743       614671  -29.16%\nBenchmarkDecoderBestCompression100K         5660160      2464996  -56.45%\n\nimage/png benchmarks:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkDecodeGray               2540834      2389624   -5.95%\nBenchmarkDecodeNRGBAGradient     10052700      9534565   -5.15%\nBenchmarkDecodeNRGBAOpaque        8704710      8163430   -6.22%\nBenchmarkDecodePaletted           1458779      1325017   -9.17%\nBenchmarkDecodeRGB                7183606      6794668   -5.41%\n\nWall time for Denis Cheremisov's PNG-decoding program given in\nhttps://groups.google.com/group/golang-nuts/browse_thread/thread/22aa8a05040fdd49\nBefore: 3.07s\nAfter:  2.32s\nDelta:  -24%\n\nBefore profile:\nTotal: 304 samples\n         159  52.3%  52.3%      251  82.6% compress/flate.(*decompressor).huffmanBlock\n          58  19.1%  71.4%       76  25.0% compress/flate.(*decompressor).huffSym\n          32  10.5%  81.9%       32  10.5% hash/adler32.update\n          16   5.3%  87.2%       22   7.2% bufio.(*Reader).ReadByte\n          16   5.3%  92.4%       37  12.2% compress/flate.(*decompressor).moreBits\n           7   2.3%  94.7%        7   2.3% hash/crc32.update\n           7   2.3%  97.0%        7   2.3% runtime.memmove\n           5   1.6%  98.7%        5   1.6% scanblock\n           2   0.7%  99.3%        9   3.0% runtime.copy\n           1   0.3%  99.7%        1   0.3% compress/flate.(*huffmanDecoder).init\n\nAfter profile:\nTotal: 230 samples\n          59  25.7%  25.7%       70  30.4% compress/flate.(*decompressor).huffSym\n          45  19.6%  45.2%       45  19.6% hash/adler32.update\n          35  15.2%  60.4%       35  15.2% compress/flate.forwardCopy\n          20   8.7%  69.1%      151  65.7% compress/flate.(*decompressor).huffmanBlock\n          16   7.0%  76.1%       24  10.4% compress/flate.(*decompressor).moreBits\n          15   6.5%  82.6%       15   6.5% runtime.memmove\n          11   4.8%  87.4%       50  21.7% compress/flate.(*decompressor).copyHist\n           7   3.0%  90.4%        7   3.0% hash/crc32.update\n           6   2.6%  93.0%        9   3.9% bufio.(*Reader).ReadByte\n           4   1.7%  94.8%        4   1.7% runtime.slicearray",
	"cc": [
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"dave@cheney.net",
		"golang-dev@googlegroups.com",
		"krasin@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"krasin@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: dave@cheney.net, golang-dev@googlegroups.com, krasin@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-30 05:11:42.107186",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On second thoughts, I've renamed naiveCopy to forwardCopy.\r\n\r\nSubmitting...\r\n\r\n\r\nOn 30 April 2012 22:04,  <rogpeppe@gmail.com> wrote:\r\n> it seems to me that it might be slightly faster if you saved a bounds\r\n> check by doing this:\r\n> for i, b := range src[:len(dst)] {\r\n> \u00a0 dst[i] = b\r\n> }\r\n\r\nIndeed. The compress/flate microbenchmarks (which decode the\r\ncompressed digits of e) don't show much difference, but the image/png\r\nmicrobenchmarks show a further 3% gain, and Denis Cheremisov's program\r\nis now down to 2.32s (compared to 3.07s before this CL, and 2.55s with\r\nthe first cut of this CL). I've updated this change description with\r\nnewer numbers.\r\n\r\n\r\nOn 1 May 2012 06:38,  <rsc@golang.org> wrote:\r\n> Is it worth picking off the case where there is no overlap and\r\n> invoking the real copy?\r\n\r\nThe extra complexity doesn't seem to help: \"go test compress/flate\"\r\ngoes from 1.89s to 1.99s, and Denis Cheremisov's program shows no\r\nsignificant difference. For the record, my code was:\r\n\r\n    if len(dst) == 0 || len(src) == 0 {\r\n        return 0\r\n    }\r\n    // Check if the two slices are backed by the same array,\r\n    // by comparing the address of the cap'th element.\r\n    cd, cs := cap(dst), cap(src)\r\n    if d, s := dst[:cd], src[:cs]; &d[cd-1] == &s[cs-1] {\r\n        // Do a manual copy if they overlap.\r\n        d0 := len(d)\r\n        d1 := d0 - len(dst)\r\n        s0 := len(s)\r\n        s1 := s0 - len(src)\r\n        // Note that d0 >= d1 and s0 >= s1, so that if d0 <= s1, then we have an\r\n        // ordering s0 >= s1 >= d0 >= d1, and the two slices do not overlap.\r\n        // Similarly, if s0 <= d1, then the two slices do not overlap.\r\n        if d0 > s1 && s0 > d1 {\r\n            if len(src) > len(dst) {\r\n                src = src[:len(dst)]\r\n            }\r\n            for i, x := range src {\r\n                dst[i] = x\r\n            }\r\n            return len(src)\r\n        }\r\n    }\r\n    return copy(dst, src)\r\n",
			"disapproval": false,
			"date": "2012-05-01 00:17:01.370513",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"krasin@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6127064/diff/4001/src/pkg/compress/flate/copy.go\nFile src/pkg/compress/flate/copy.go (right):\n\nhttp://codereview.appspot.com/6127064/diff/4001/src/pkg/compress/flate/copy.go#newcode13\nsrc/pkg/compress/flate/copy.go:13: for i := range dst {\nit seems to me that it might be slightly faster if you saved a bounds check by doing this:\nfor i, b := range src[:len(dst)] {\n   dst[i] = b\n}",
			"disapproval": false,
			"date": "2012-04-30 12:04:31.331258",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"krasin@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> for i, b := range src[:len(dst)] {\n>    dst[i] = b\n> }\n\nnice catch.",
			"disapproval": false,
			"date": "2012-04-30 12:20:36.247722",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"krasin@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3a8932ef3669 ***\n\ncompress/flate: optimize history-copy decoding.\n\nThe forwardCopy function could be re-written in asm, and the copyHuff\nmethod could probably be rolled into huffmanBlock and copyHist, but\nI'm leaving those changes for future CLs.\n\ncompress/flate benchmarks:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkDecoderBestSpeed1K                  385327       435140  +12.93%\nBenchmarkDecoderBestSpeed10K                1245190      1062112  -14.70%\nBenchmarkDecoderBestSpeed100K               8512365      5833680  -31.47%\nBenchmarkDecoderDefaultCompression1K         382225       421301  +10.22%\nBenchmarkDecoderDefaultCompression10K        867950       613890  -29.27%\nBenchmarkDecoderDefaultCompression100K      5658240      2466726  -56.40%\nBenchmarkDecoderBestCompression1K            383760       421634   +9.87%\nBenchmarkDecoderBestCompression10K           867743       614671  -29.16%\nBenchmarkDecoderBestCompression100K         5660160      2464996  -56.45%\n\nimage/png benchmarks:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkDecodeGray               2540834      2389624   -5.95%\nBenchmarkDecodeNRGBAGradient     10052700      9534565   -5.15%\nBenchmarkDecodeNRGBAOpaque        8704710      8163430   -6.22%\nBenchmarkDecodePaletted           1458779      1325017   -9.17%\nBenchmarkDecodeRGB                7183606      6794668   -5.41%\n\nWall time for Denis Cheremisov's PNG-decoding program given in\nhttps://groups.google.com/group/golang-nuts/browse_thread/thread/22aa8a05040fdd49\nBefore: 3.07s\nAfter:  2.32s\nDelta:  -24%\n\nBefore profile:\nTotal: 304 samples\n         159  52.3%  52.3%      251  82.6% compress/flate.(*decompressor).huffmanBlock\n          58  19.1%  71.4%       76  25.0% compress/flate.(*decompressor).huffSym\n          32  10.5%  81.9%       32  10.5% hash/adler32.update\n          16   5.3%  87.2%       22   7.2% bufio.(*Reader).ReadByte\n          16   5.3%  92.4%       37  12.2% compress/flate.(*decompressor).moreBits\n           7   2.3%  94.7%        7   2.3% hash/crc32.update\n           7   2.3%  97.0%        7   2.3% runtime.memmove\n           5   1.6%  98.7%        5   1.6% scanblock\n           2   0.7%  99.3%        9   3.0% runtime.copy\n           1   0.3%  99.7%        1   0.3% compress/flate.(*huffmanDecoder).init\n\nAfter profile:\nTotal: 230 samples\n          59  25.7%  25.7%       70  30.4% compress/flate.(*decompressor).huffSym\n          45  19.6%  45.2%       45  19.6% hash/adler32.update\n          35  15.2%  60.4%       35  15.2% compress/flate.forwardCopy\n          20   8.7%  69.1%      151  65.7% compress/flate.(*decompressor).huffmanBlock\n          16   7.0%  76.1%       24  10.4% compress/flate.(*decompressor).moreBits\n          15   6.5%  82.6%       15   6.5% runtime.memmove\n          11   4.8%  87.4%       50  21.7% compress/flate.(*decompressor).copyHist\n           7   3.0%  90.4%        7   3.0% hash/crc32.update\n           6   2.6%  93.0%        9   3.9% bufio.(*Reader).ReadByte\n           4   1.7%  94.8%        4   1.7% runtime.slicearray\n\nR=rsc, rogpeppe, dave\nCC=golang-dev, krasin\nhttp://codereview.appspot.com/6127064",
			"disapproval": false,
			"date": "2012-05-01 00:51:44.630170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"krasin@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6127064/diff/4001/src/pkg/compress/flate/copy.go\nFile src/pkg/compress/flate/copy.go (right):\n\nhttp://codereview.appspot.com/6127064/diff/4001/src/pkg/compress/flate/copy.go#newcode13\nsrc/pkg/compress/flate/copy.go:13: for i := range dst {\nOn 2012/04/30 12:04:31, rog wrote:\n> it seems to me that it might be slightly faster if you saved a bounds check by\n> doing this:\n> for i, b := range src[:len(dst)] {\n>    dst[i] = b\n> }\n\nThis is true. \n\nIs it worth picking off the case where there is no overlap and\ninvoking the real copy?\n\nhttp://codereview.appspot.com/6127064/diff/4001/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttp://codereview.appspot.com/6127064/diff/4001/src/pkg/compress/flate/inflate.go#newcode517\nsrc/pkg/compress/flate/inflate.go:517: // It returns whether the f.hist buffer is full.\ns/returns/reports/",
			"disapproval": false,
			"date": "2012-04-30 20:38:02.566294",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 1 May 2012 10:51,  <nigeltao@golang.org> wrote:\r\n> The forwardCopy function could be re-written in asm,\r\n\r\nFor the curious, I tried re-writing compress/flate's forwardCopy in\r\nasm. It looks like a win for very long, highly flate-compressed\r\ninputs, but it's not as clear otherwise (such as decoding PNG files).\r\nI don't know if it's worth submitting.\r\n\r\nCode and benchmarks are at\r\nhttp://codereview.appspot.com/6137062\r\n\r\nAlso, I'm not really fluent in amd64 asm, so I might have done something dumb.\r\n",
			"disapproval": false,
			"date": "2012-05-01 04:33:51.877873",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6127064: compress/flate: optimize history-copy decoding.",
	"created": "2012-04-30 05:11:06.364322",
	"patchsets": [
		1,
		3,
		4001,
		1002,
		11001
	],
	"modified": "2012-05-01 00:51:47.218271",
	"closed": true,
	"issue": 6127064
}