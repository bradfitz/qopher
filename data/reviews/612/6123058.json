{
	"description": "ssh: fix deadlock\n\nThe code was taking locks in the wrong order.\n\nFixes issue 3570.",
	"cc": [
		"fullung@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"kardianos@gmail.com"
	],
	"messages": [
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"agl@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nAt least according to the test. Before the patch I could reproduce the hang, after not.\n\nFixes issue 3570.",
			"disapproval": false,
			"date": "2012-04-26 16:02:01.771322",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=bd78e6211ff8&repo=crypto ***\n\nssh: fix deadlock\n\nThe code was taking locks in the wrong order.\n\nFixes issue 3570.\n\nR=fullung\nCC=golang-dev\nhttp://codereview.appspot.com/6123058",
			"disapproval": false,
			"date": "2012-04-26 16:05:42.226840",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> On Thu, Apr 26, 2012 at 12:32 PM,<kardianos@gmail.com>  wrote:\r\n>> This solution is acceptable only when the server's window size matches\r\n>> the packet size AND the amount written and read by the client is large.\r\n>> In cases for terminal access, this is not so good. If the default window\r\n>> size was adjusted to be larger, this is not so good.\r\n>\r\n> The logic hasn't been changed here, only the order in which the locks\r\n> were taken, which was previously incorrect.\r\n\r\nI stand corrected here.\r\n\r\n> So I think any concerns about the logic are independent of this\r\n> change, although I must admit that I don't understand your concern.\r\n\r\nI suppose my issue is with the current code then, independent of this \r\nchange. Sorry for the noise.\r\n\r\nIf I understand correctly, each read from the server channel will result \r\nin a packet to the client. This seems unnecessary, especially if the use \r\ncase is for a terminal where single charters are being read.\r\n",
			"disapproval": false,
			"date": "2012-04-26 16:50:34.050442",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-04-26 14:55:51.071411",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"agl@golang.org",
				"kardianos@gmail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I do NOT think this is good. Ok as a stop-gap only.\n\nThis solution is acceptable only when the server's window size matches the packet size AND the amount written and read by the client is large. In cases for terminal access, this is not so good. If the default window size was adjusted to be larger, this is not so good.\n\nThere are other ways to make this work.\n\n\nOn 2012/04/26 16:05:42, agl1 wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=bd78e6211ff8&repo=crypto ***\n> \n> ssh: fix deadlock\n> \n> The code was taking locks in the wrong order.\n> \n> Fixes issue 3570.\n> \n> R=fullung\n> CC=golang-dev\n> http://codereview.appspot.com/6123058",
			"disapproval": false,
			"date": "2012-04-26 16:32:15.418129",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://agl%40golang.org@code.google.com/p/go.crypto/",
			"disapproval": false,
			"date": "2012-04-26 16:05:33.641564",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 26, 2012 at 12:32 PM,  <kardianos@gmail.com> wrote:\r\n> This solution is acceptable only when the server's window size matches\r\n> the packet size AND the amount written and read by the client is large.\r\n> In cases for terminal access, this is not so good. If the default window\r\n> size was adjusted to be larger, this is not so good.\r\n\r\nThe logic hasn't been changed here, only the order in which the locks\r\nwere taken, which was previously incorrect.\r\n\r\nSo I think any concerns about the logic are independent of this\r\nchange, although I must admit that I don't understand your concern.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-04-26 16:36:08.654696",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 26, 2012 at 12:50 PM, Daniel <kardianos@gmail.com> wrote:\r\n> If I understand correctly, each read from the server channel will result in\r\n> a packet to the client. This seems unnecessary, especially if the use case\r\n> is for a terminal where single charters are being read.\r\n\r\nWell, at the TCP layer, the server will be ACKing the client's packets\r\nand we can't do much about that. (At best you get to save a few\r\nbecause of TCP delayed ACK.)\r\n\r\nIn the SSH code we have this:\r\n\r\n\r\nwindowAdjustment = uint32(len(c.pendingData)-c.length) - c.myWindow\r\nif windowAdjustment < uint32(len(c.pendingData)/2) {\r\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7windowAdjustment = 0\r\n}\r\n\r\nuint32(len(c.pendingData)-c.length) is how much space we actually have\r\nin the buffer and c.myWindow is how much window space the client\r\nthinks is remaining. So, that's the amount of extra window that we\r\n*could* give to the client. If that's less than half of the buffer\r\nsize, we don't bother sending any extra window.\r\n\r\nSo for the case where the server is reading byte-by-byte, we'll only\r\nsend window adjustments very rarely. (Only every 16K reads with\r\ndefault sizes.)\r\n\r\nOver high bandwidth-delay-product links, the buffer would have to be\r\nlarger to allow the flow to reach full TCP speeds and it might be\r\nsuitable to tweak that limit (i.e. if windowAdjustment > 16KB, always\r\nsend an adjustment, even if our buffer is 4MB). But I didn't write\r\nthat in because I haven't hit it and have no basis for what the limit\r\nshould be.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-04-26 16:59:55.096443",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for taking time to reply. I missed assigning the windowAdjustment \r\nto zero condition. I'll try to read more throughly :/.\r\n\r\nThanks again,\r\n-Daniel\r\n\r\n\r\nOn 04/26/2012 09:59 AM, Adam Langley wrote:\r\n> On Thu, Apr 26, 2012 at 12:50 PM, Daniel<kardianos@gmail.com>  wrote:\r\n>> If I understand correctly, each read from the server channel will result in\r\n>> a packet to the client. This seems unnecessary, especially if the use case\r\n>> is for a terminal where single charters are being read.\r\n>\r\n> Well, at the TCP layer, the server will be ACKing the client's packets\r\n> and we can't do much about that. (At best you get to save a few\r\n> because of TCP delayed ACK.)\r\n>\r\n> In the SSH code we have this:\r\n>\r\n>\r\n> windowAdjustment = uint32(len(c.pendingData)-c.length) - c.myWindow\r\n> if windowAdjustment<  uint32(len(c.pendingData)/2) {\r\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7windowAdjustment = 0\r\n> }\r\n>\r\n> uint32(len(c.pendingData)-c.length) is how much space we actually have\r\n> in the buffer and c.myWindow is how much window space the client\r\n> thinks is remaining. So, that's the amount of extra window that we\r\n> *could* give to the client. If that's less than half of the buffer\r\n> size, we don't bother sending any extra window.\r\n>\r\n> So for the case where the server is reading byte-by-byte, we'll only\r\n> send window adjustments very rarely. (Only every 16K reads with\r\n> default sizes.)\r\n>\r\n> Over high bandwidth-delay-product links, the buffer would have to be\r\n> larger to allow the flow to reach full TCP speeds and it might be\r\n> suitable to tweak that limit (i.e. if windowAdjustment>  16KB, always\r\n> send an adjustment, even if our buffer is 4MB). But I didn't write\r\n> that in because I haven't hit it and have no basis for what the limit\r\n> should be.\r\n>\r\n>\r\n> Cheers\r\n>\r\n> AGL\r\n",
			"disapproval": false,
			"date": "2012-04-26 17:24:49.160931",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 6123058: ssh: fix deadlock",
	"created": "2012-04-26 14:54:07.603843",
	"patchsets": [
		1,
		1001,
		5001
	],
	"modified": "2012-04-26 16:32:15.551147",
	"closed": true,
	"issue": 6123058
}