{
	"description": "go.crypto/ssh: move common channel methods into an embedded struct\n\nThis CL introduces a new struct, channel to hold common shared\nfunctions.\n\n* add a new channel struct, which is embeded in {client,server}Chan.\n* move common methods from {client,server}Chan into channel.\n* remove unneeded used of serverConn.lock in serverChan\n (transport.writePacket has its own mutex).\n* remove filteredConn, introduce conn.",
	"cc": [
		"agl@golang.org",
		"gustav.paul@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, gustav.paul@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-05-01 10:59:32.186027",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this CL is helpful and I'm not sure that it needs to be split up. I think it would be ok to land as is. It's not a complete refactoring (I'd still like to see the client with a ring buffer to solve the problem of its channels getting too full), but it seems like this is in the right direction.",
			"disapproval": false,
			"date": "2012-05-02 17:03:25.810229",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments agl. This CL was a quick and dirty search and\r\nreplace as a proof of concept, rather than trying to review the whole\r\nthing, I'd like to split this CL into two; one for the various\r\nrenames, and the second for the actual code changes.\r\n\r\nOn Thu, May 3, 2012 at 3:03 AM,  <agl@golang.org> wrote:\r\n> I think this CL is helpful and I'm not sure that it needs to be split\r\n> up. I think it would be ok to land as is. It's not a complete\r\n> refactoring (I'd still like to see the client with a ring buffer to\r\n> solve the problem of its channels getting too full), but it seems like\r\n> this is in the right direction.\r\n>\r\n> http://codereview.appspot.com/6128059/\r\n",
			"disapproval": false,
			"date": "2012-05-02 22:34:51.891848",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(p.s. if you were waiting for me, my previous LGTM still stands.)",
			"disapproval": false,
			"date": "2012-05-08 22:03:43.673751",
			"approval": true
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM too. My comments are minor nitpicks, feel free to land.\r\n\r\nOn Wed, May 9, 2012 at 12:03 AM, <agl@golang.org> wrote:\r\n\r\n> (p.s. if you were waiting for me, my previous LGTM still stands.)\r\n>\r\n> http://codereview.appspot.com/**6128059/<http://codereview.appspot.com/6128059/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-08 22:05:11.147159",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=540906e566d5&repo=crypto ***\n\ngo.crypto/ssh: move common channel methods into an embedded struct\n\nThis CL introduces a new struct, channel to hold common shared\nfunctions.\n\n* add a new channel struct, which is embeded in {client,server}Chan.\n* move common methods from {client,server}Chan into channel.\n* remove unneeded used of serverConn.lock in serverChan\n (transport.writePacket has its own mutex).\n* remove filteredConn, introduce conn.\n\nR=agl, gustav.paul\nCC=golang-dev\nhttp://codereview.appspot.com/6128059\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/client.go#newcode428\nssh/client.go:428: channel\nI prefer to embed structs directly (ie, not as pointers). The reason stdin/out/err are pointers, is it makes them easier to pass to things expecting io.Reader/Writer.\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/transport.go\nFile ssh/transport.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/transport.go#newcode50\nssh/transport.go:50: // writer represnts the outgoing connection state.\nOn 2012/05/08 22:01:19, gpaul wrote:\n> typo, represents\n\nDone.",
			"disapproval": false,
			"date": "2012-05-08 22:20:10.278094",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, gustav.paul@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-05 08:08:42.439104",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch cleans up the channel code quite a bit. Thanks Dave\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/client.go#newcode428\nssh/client.go:428: channel\nchanWriter and chanReader embed pointers to channel whereas clientChan and serverChan embed the value. Is there a particular reason for this or can we standardize to say using pointers?\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/transport.go\nFile ssh/transport.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/20006/ssh/transport.go#newcode50\nssh/transport.go:50: // writer represnts the outgoing connection state.\ntypo, represents",
			"disapproval": false,
			"date": "2012-05-08 22:01:19.261058",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/channel.go#newcode246\nssh/channel.go:246: if err = c.writePacket(packet); err != nil {\nThis suggests that writePacket takes needed locks, but in other places writePacket is called with locks held.\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/server.go\nFile ssh/server.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/server.go#newcode104\nssh/server.go:104: // lock protects err and channels\n(nit) looks like trailing whitespace",
			"disapproval": false,
			"date": "2012-05-07 14:40:01.131692",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments.\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/channel.go#newcode246\nssh/channel.go:246: if err = c.writePacket(packet); err != nil {\nwritePacket holds it's own mutex, so there is no need to serialise calls too it. The other places that call writePacket may be holding the serverLock if they need to ensure the err field in server conn is properly published. I'll review all the calls on the server path to double check their locking.\n\nOn 2012/05/07 14:40:01, agl1 wrote:\n> This suggests that writePacket takes needed locks, but in other places\n> writePacket is called with locks held.\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/server.go\nFile ssh/server.go (right):\n\nhttp://codereview.appspot.com/6128059/diff/24005/ssh/server.go#newcode104\nssh/server.go:104: // lock protects err and channels\nOn 2012/05/07 14:40:01, agl1 wrote:\n> (nit) looks like trailing whitespace\n\nDone.",
			"disapproval": false,
			"date": "2012-05-07 15:20:50.698441",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, gustav.paul@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-07 15:31:36.969197",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "re: writePacket and locks. The only place where writePacket is now called holding c.serverConn.lock is serverChan.AckRequest, and this lock is only required to publish serverConn.err correctly.",
			"disapproval": false,
			"date": "2012-05-07 15:30:56.123180",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6128059: go.crypto/ssh: move common channel methods into an embe...",
	"created": "2012-05-01 09:45:38.326716",
	"patchsets": [
		1,
		1001,
		1002,
		5001,
		7001,
		11001,
		13001,
		18001,
		20001,
		23001,
		24005,
		20006,
		31001
	],
	"modified": "2012-05-08 22:20:12.434289",
	"closed": true,
	"issue": 6128059
}