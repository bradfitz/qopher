{
	"description": "crypto/x509: add DecryptBlock function for loading password protected keys\n\nAdds a DecryptBlock function which takes a password and a *pem.Block and\nreturns the decrypted DER bytes suitable for passing into other crypto/x509\nfunctions.",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"leterip@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jeff@spacemonkey.com",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-24 15:29:41.294170",
			"approval": false
		},
		{
			"sender": "jeff@spacemonkey.com",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-22 00:02:26.788140",
			"approval": false
		},
		{
			"sender": "leterip@gmail.com",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"leterip@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go\nFile src/pkg/crypto/x509/block_decrypt.go (right):\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode1\nsrc/pkg/crypto/x509/block_decrypt.go:1: package x509\nOn 2012/09/24 14:55:27, agl1 wrote:\n> Copyright missing.\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode2\nsrc/pkg/crypto/x509/block_decrypt.go:2: \nOn 2012/09/24 14:55:27, agl1 wrote:\n> comment referencing some RFC or other standard where this is defined?\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode14\nsrc/pkg/crypto/x509/block_decrypt.go:14: //cipherInfo represents how to create a block cipher for a decryption mode.\nOn 2012/09/24 14:55:27, agl1 wrote:\n> space after \"//\" (here and throughout).\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode20\nsrc/pkg/crypto/x509/block_decrypt.go:20: //deriveKey uses a key derivation function to stretch the password into a key\nOn 2012/09/24 14:55:27, agl1 wrote:\n> Some reference to where this is defined? (If you just cribbed it from the\n> OpenSSL source, that's fine, just mention that.)\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode22\nsrc/pkg/crypto/x509/block_decrypt.go:22: func (c cipherInfo) deriveKey(pass []byte, salt []byte) []byte {\nOn 2012/09/24 14:55:27, agl1 wrote:\n> (pass, salt []byte)\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode53\nsrc/pkg/crypto/x509/block_decrypt.go:53: func DecryptBlock(b *pem.Block, pass []byte) ([]byte, error) {\nOn 2012/09/24 14:55:27, agl1 wrote:\n> DecryptPEM or DecryptPEMBlock perhaps?\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode56\nsrc/pkg/crypto/x509/block_decrypt.go:56: return nil, errors.New(\"x509: No DEK-Info header in block\")\nOn 2012/09/24 14:55:27, agl1 wrote:\n> lowercase letter after \"x509: \" in errors (here and below).\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode64\nsrc/pkg/crypto/x509/block_decrypt.go:64: mode, hexiv := dek[:idx], dek[idx+1:]\nOn 2012/09/24 14:55:27, agl1 wrote:\n> s/hexiv/hexIV/\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode77\nsrc/pkg/crypto/x509/block_decrypt.go:77: key := ciph.deriveKey(pass, iv[:8])\nOn 2012/09/24 14:55:27, agl1 wrote:\n> what if len(iv) < 8?\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode92\nsrc/pkg/crypto/x509/block_decrypt.go:92: dlen := len(data)\nOn 2012/09/24 14:55:27, agl1 wrote:\n> what if len(data) == 0?\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode94\nsrc/pkg/crypto/x509/block_decrypt.go:94: if 1 > last || last > 8 {\nOn 2012/09/24 14:55:27, agl1 wrote:\n> s/1 > last/last == 0/\n> \n> (just a personal preference really, it takes slightly less time to understand.)\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode97\nsrc/pkg/crypto/x509/block_decrypt.go:97: for _, val := range data[dlen-int(last):] {\nOn 2012/09/24 14:55:27, agl1 wrote:\n> what if len(data) < last?\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go\nFile src/pkg/crypto/x509/block_decrypt_test.go (right):\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go#newcode1\nsrc/pkg/crypto/x509/block_decrypt_test.go:1: package x509\nOn 2012/09/24 14:55:27, agl1 wrote:\n> Copyright and filename.\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go#newcode28\nsrc/pkg/crypto/x509/block_decrypt_test.go:28: pemdata  []byte\nOn 2012/09/24 14:55:27, agl1 wrote:\n> s/pemdata/pemData/\n\nDone.\n\nhttp://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go#newcode33\nsrc/pkg/crypto/x509/block_decrypt_test.go:33: pemdata: []byte(`-----BEGIN RSA PRIVATE KEY-----\nOn 2012/09/24 14:55:27, agl1 wrote:\n> nit: the -----BEGIN could be on a new line. pem.Decode doesn't care.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-24 15:29:54.001790",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go\nFile src/pkg/crypto/x509/block_decrypt.go (right):\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode1\nsrc/pkg/crypto/x509/block_decrypt.go:1: package x509\nCopyright missing.\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode1\nsrc/pkg/crypto/x509/block_decrypt.go:1: package x509\nblock_decrypt.go is a rather generic name. pem_decrypt.go?\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode2\nsrc/pkg/crypto/x509/block_decrypt.go:2: \ncomment referencing some RFC or other standard where this is defined?\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode14\nsrc/pkg/crypto/x509/block_decrypt.go:14: //cipherInfo represents how to create a block cipher for a decryption mode.\nspace after \"//\" (here and throughout).\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode20\nsrc/pkg/crypto/x509/block_decrypt.go:20: //deriveKey uses a key derivation function to stretch the password into a key\nSome reference to where this is defined? (If you just cribbed it from the OpenSSL source, that's fine, just mention that.)\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode22\nsrc/pkg/crypto/x509/block_decrypt.go:22: func (c cipherInfo) deriveKey(pass []byte, salt []byte) []byte {\n(pass, salt []byte)\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode53\nsrc/pkg/crypto/x509/block_decrypt.go:53: func DecryptBlock(b *pem.Block, pass []byte) ([]byte, error) {\nDecryptPEM or DecryptPEMBlock perhaps?\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode56\nsrc/pkg/crypto/x509/block_decrypt.go:56: return nil, errors.New(\"x509: No DEK-Info header in block\")\nlowercase letter after \"x509: \" in errors (here and below).\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode64\nsrc/pkg/crypto/x509/block_decrypt.go:64: mode, hexiv := dek[:idx], dek[idx+1:]\ns/hexiv/hexIV/\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode77\nsrc/pkg/crypto/x509/block_decrypt.go:77: key := ciph.deriveKey(pass, iv[:8])\nwhat if len(iv) < 8?\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode92\nsrc/pkg/crypto/x509/block_decrypt.go:92: dlen := len(data)\nwhat if len(data) == 0?\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode94\nsrc/pkg/crypto/x509/block_decrypt.go:94: if 1 > last || last > 8 {\ns/1 > last/last == 0/\n\n(just a personal preference really, it takes slightly less time to understand.)\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt.go#newcode97\nsrc/pkg/crypto/x509/block_decrypt.go:97: for _, val := range data[dlen-int(last):] {\nwhat if len(data) < last?\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go\nFile src/pkg/crypto/x509/block_decrypt_test.go (right):\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go#newcode1\nsrc/pkg/crypto/x509/block_decrypt_test.go:1: package x509\nCopyright and filename.\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go#newcode28\nsrc/pkg/crypto/x509/block_decrypt_test.go:28: pemdata  []byte\ns/pemdata/pemData/\n\nhttps://codereview.appspot.com/6555052/diff/4001/src/pkg/crypto/x509/block_decrypt_test.go#newcode33\nsrc/pkg/crypto/x509/block_decrypt_test.go:33: pemdata: []byte(`-----BEGIN RSA PRIVATE KEY-----\nnit: the -----BEGIN could be on a new line. pem.Decode doesn't care.",
			"disapproval": false,
			"date": "2012-09-24 14:55:27.688670",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"leterip@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go\nFile src/pkg/crypto/x509/pem_decrypt.go (right):\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode1\nsrc/pkg/crypto/x509/pem_decrypt.go:1: // Copyright 2011 The Go Authors. All rights reserved.\n2012\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode8\nsrc/pkg/crypto/x509/pem_decrypt.go:8: // generate a key from the password was derived from looking at the OpenSSL\ns/from/by/\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode57\nsrc/pkg/crypto/x509/pem_decrypt.go:57: \nDo we need an IsEncryptedPEMBlock(b *pem.Block) bool function so that users of x509 know whether to prompt for a password?\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode62\nsrc/pkg/crypto/x509/pem_decrypt.go:62: func DecryptPEMBlock(b *pem.Block, pass []byte) ([]byte, error) {\nShould it return an error if the PEM block is unencrypted, or should it simply return b.Bytes? I'm leaning towards the latter, although I'm not sure.\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode106\nsrc/pkg/crypto/x509/pem_decrypt.go:106: return nil, errors.New(\"x509: invalid padding\")\nIf the password is incorrect then the padding will be invalid with probability ~= 1/256. I think that's probably accurate enough that we could do:\n\nvar IncorrectPasswordError = errors.New(\"x509: decryption password incorrect\")\n\nand return that rather than an \"invalid padding\" error.",
			"disapproval": false,
			"date": "2012-09-24 22:08:11.289070",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 24, 2012 at 6:08 PM,  <agl@golang.org> wrote:\r\n> If the password is incorrect then the padding will be invalid with\r\n> probability ~= 1/256. I think that's probably accurate enough that we\r\n> could do:\r\n\r\nOf course, I wanted the other side of that probability. So it should have read:\r\n\r\n\"If the password is incorrect then the padding will be invalid with\r\nprobability ~= 255/256.\"\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-09-24 22:11:37.538350",
			"approval": false
		},
		{
			"sender": "jeff@spacemonkey.com",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"leterip@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2012-09-24 22:36:28.750120",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"leterip@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with that last function.\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go\nFile src/pkg/crypto/x509/pem_decrypt.go (right):\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode57\nsrc/pkg/crypto/x509/pem_decrypt.go:57: \nOn 2012/09/24 22:25:49, zeebo wrote:\n> I figured most clients would attempt to load the file and if there was an error\n> just assume it was password protected. The helper would probably just check the\n> existence of the DEK-Info header which I'm not sure is worth the wait of the\n> extra API. It's your call though.\n\nI think the name \"DEK-Info\" is an internal aspect of the encryption and we shouldn't expect users of x509 to know about it. Since DecryptPEMBlock results in an error if the block isn't encrypted, then I think we need IsEncryptedPEMBlock.",
			"disapproval": false,
			"date": "2012-09-24 22:30:57.409920",
			"approval": true
		},
		{
			"sender": "jeff@spacemonkey.com",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"leterip@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go\nFile src/pkg/crypto/x509/pem_decrypt.go (right):\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode57\nsrc/pkg/crypto/x509/pem_decrypt.go:57: \nOn 2012/09/24 22:08:11, agl1 wrote:\n> Do we need an IsEncryptedPEMBlock(b *pem.Block) bool function so that users of\n> x509 know whether to prompt for a password?\n\nI figured most clients would attempt to load the file and if there was an error just assume it was password protected. The helper would probably just check the existence of the DEK-Info header which I'm not sure is worth the wait of the extra API. It's your call though.\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode62\nsrc/pkg/crypto/x509/pem_decrypt.go:62: func DecryptPEMBlock(b *pem.Block, pass []byte) ([]byte, error) {\nOn 2012/09/24 22:08:11, agl1 wrote:\n> Should it return an error if the PEM block is unencrypted, or should it simply\n> return b.Bytes? I'm leaning towards the latter, although I'm not sure.\n\nAt first I had it return the bytes but then depending on if the block was encrypted you would either get a copy of the bytes or a slice referencing the blocks data. It felt ugly to have it return a copy for essentially no work done, so I left it as an error.\n\nhttps://codereview.appspot.com/6555052/diff/11001/src/pkg/crypto/x509/pem_decrypt.go#newcode106\nsrc/pkg/crypto/x509/pem_decrypt.go:106: return nil, errors.New(\"x509: invalid padding\")\nOn 2012/09/24 22:08:11, agl1 wrote:\n> If the password is incorrect then the padding will be invalid with probability\n> ~= 1/256. I think that's probably accurate enough that we could do:\n> \n> var IncorrectPasswordError = errors.New(\"x509: decryption password incorrect\")\n> \n> and return that rather than an \"invalid padding\" error.\n\nDone. I left the first one as in invalid padding because having zero bytes would imply no padding which is invalid, not an incorrect password.",
			"disapproval": false,
			"date": "2012-09-24 22:25:49.183870",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 24, 2012 at 6:36 PM,  <jeff@spacemonkey.com> wrote:\r\n> PTAL\r\n\r\n(Sorry, just noticed that I dropped this. Will look at it this afternoon.)\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-09-27 13:44:23.376990",
			"approval": false
		},
		{
			"sender": "jeff@spacemonkey.com",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"leterip@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/27 13:44:23, agl1 wrote:\n> On Mon, Sep 24, 2012 at 6:36 PM,  <mailto:jeff@spacemonkey.com> wrote:\n> > PTAL\n> \n> (Sorry, just noticed that I dropped this. Will look at it this afternoon.)\n> \n> \n> Cheers\n> \n> AGL\n\nPing",
			"disapproval": false,
			"date": "2012-10-04 19:09:30.236110",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jeff@spacemonkey.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"leterip@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8230013d1c40 ***\n\ncrypto/x509: add DecryptBlock function for loading password protected keys\n\nAdds a DecryptBlock function which takes a password and a *pem.Block and\nreturns the decrypted DER bytes suitable for passing into other crypto/x509\nfunctions.\n\nR=golang-dev, agl, leterip\nCC=golang-dev\nhttp://codereview.appspot.com/6555052\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-10-04 19:43:16.672600",
			"approval": false
		}
	],
	"owner_email": "jeff@spacemonkey.com",
	"private": false,
	"base_url": "",
	"owner": "zeebo",
	"subject": "code review 6555052: crypto/x509: add DecryptBlock function for loading pass...",
	"created": "2012-09-22 00:01:24.321920",
	"patchsets": [
		1,
		1002,
		4001,
		5002,
		8001,
		11001,
		16001,
		19001
	],
	"modified": "2012-10-04 19:43:16.672600",
	"closed": false,
	"issue": 6555052
}