{
	"description": "cmd/gc: avoid a temporary when inlining s = append(s, x)\n\npkg strconv:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAppendFloatDecimal                  203          198   -2.46%\nBenchmarkAppendFloat                         363          348   -4.13%\nBenchmarkAppendFloatExp                      335          307   -8.36%\nBenchmarkAppendFloatNegExp                   335          318   -5.07%\nBenchmarkAppendFloatBig                      526          480   -8.75%\nBenchmarkAppendFloat32Integer                203          216   +6.40%\nBenchmarkAppendFloat32ExactFraction          307          293   -4.56%\nBenchmarkAppendFloat32Point                  367          349   -4.90%\nBenchmarkAppendFloat32Exp                    318          302   -5.03%\nBenchmarkAppendFloat32NegExp                 322          306   -4.97%\nBenchmarkAppendFloat64Fixed1                 243          247   +1.65%\nBenchmarkAppendFloat64Fixed2                 283          293   +3.53%\nBenchmarkAppendFloat64Fixed3                 248          264   +6.45%\nBenchmarkAppendFloat64Fixed4                 287          277   -3.48%\nBenchmarkAppendInt                          5676         5640   -0.63%\nBenchmarkAppendUint                         1448         1445   -0.21%\n\npkg time:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkFormat                              876          884   +0.91%\nBenchmarkFormatNow                           832          845   +1.56%\n\nStack size is reduced in many cases:\n\nstrconv before:\n(src/pkg/strconv/ftoa.go:334) TEXT    fmtE+0(SB),$344-120\n(src/pkg/strconv/ftoa.go:401) TEXT    fmtF+0(SB),$232-112\n(src/pkg/strconv/quote.go:13) TEXT    quoteWith+0(SB),$560-40\n(src/pkg/strconv/quote.go:293) TEXT    Unquote+0(SB),$200-48\n\nstrconv after:\n(src/pkg/strconv/ftoa.go:334) TEXT    fmtE+0(SB),$104-120\n(src/pkg/strconv/ftoa.go:401) TEXT    fmtF+0(SB),$88-112\n(src/pkg/strconv/quote.go:13) TEXT    quoteWith+0(SB),$208-40\n(src/pkg/strconv/quote.go:293) TEXT    Unquote+0(SB),$176-48\n\ntime before:\n(src/pkg/time/format.go:290) TEXT    appendUint+0(SB),$272-64\n(src/pkg/time/format.go:341) TEXT    formatNano+0(SB),$152-72\n(src/pkg/time/format.go:382) TEXT    Time.Format+0(SB),$720-56\n\ntime after:\n(src/pkg/time/format.go:290) TEXT    appendUint+0(SB),$200-64\n(src/pkg/time/format.go:341) TEXT    formatNano+0(SB),$128-72\n(src/pkg/time/format.go:382) TEXT    Time.Format+0(SB),$416-56",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"daniel.morsing@gmail.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-12 15:11:21.090800",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c#newcode2505\nsrc/cmd/gc/walk.c:2505: // The caller may supply its own storage space to use instead of s.\nyou don't clarify that \"ns\" is that storage space. Also: what is \"s\"?",
			"disapproval": false,
			"date": "2013-05-12 17:58:36.151590",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c#newcode573\nsrc/cmd/gc/walk.c:573: // optimization of the common pattern x = append(x, y)\nMove this logic down into convas. It handles the special cases like map indexing.\n\nhttps://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c#newcode2507\nsrc/cmd/gc/walk.c:2507: append(Node *n, NodeList **init, Node *ns)\nMove ns into the middle of the arguments for consistency with other functions taking an init list.",
			"disapproval": false,
			"date": "2013-05-12 18:33:13.712520",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, daniel.morsing@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-18 08:36:01.120300",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c#newcode573\nsrc/cmd/gc/walk.c:573: // optimization of the common pattern x = append(x, y)\nOn 2013/05/12 18:33:13, DMorsing wrote:\n> Move this logic down into convas. It handles the special cases like map\n> indexing.\n\nI cannot put this logic after walkexpr(&n->right) which will create the extra temp variable.\nI'm not sure how to do what you say, which could be interesting indeed.\n\nMaybe make convas do the walkexpr itself? That would be more intrusive.\n\nhttps://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c#newcode2505\nsrc/cmd/gc/walk.c:2505: // The caller may supply its own storage space to use instead of s.\nOn 2013/05/12 17:58:36, bradfitz wrote:\n> you don't clarify that \"ns\" is that storage space. Also: what is \"s\"?\n\nDone.\n\nhttps://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c#newcode2507\nsrc/cmd/gc/walk.c:2507: append(Node *n, NodeList **init, Node *ns)\nOn 2013/05/12 18:33:13, DMorsing wrote:\n> Move ns into the middle of the arguments for consistency with other functions\n> taking an init list.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-18 08:36:03.076490",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn 2013/05/18 08:36:03, remyoudompheng wrote:\n> https://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c\n> File src/cmd/gc/walk.c (right):\n> \n> https://codereview.appspot.com/9360043/diff/4001/src/cmd/gc/walk.c#newcode573\n> src/cmd/gc/walk.c:573: // optimization of the common pattern x = append(x, y)\n> On 2013/05/12 18:33:13, DMorsing wrote:\n> > Move this logic down into convas. It handles the special cases like map\n> > indexing.\n> \n> I cannot put this logic after walkexpr(&n->right) which will create the extra\n> temp variable.\n> I'm not sure how to do what you say, which could be interesting indeed.\n> \n> Maybe make convas do the walkexpr itself? That would be more intrusive.\n> \n\nNah, just leave the code in it's current state.\n\nEventually, we should add some sort of mechanism so that makes it possible to determine the context given a single node. All these single cases for optimization are littering walk.c, and it would be nice to have all append related tree rewrites be centered around one spot in the code.\n\nHaving such a mechanism would make it trivial to implement this change for OAS2 as well, which it doesn't cover right now.",
			"disapproval": false,
			"date": "2013-05-18 11:08:42.722240",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The results aren't quite so impressive on linux/arm (chromebook)\n\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAppendFloatDecimal                  796          787   -1.13%\nBenchmarkAppendFloat                        1354         1324   -2.22%\nBenchmarkAppendFloatExp                     1186         1120   -5.56%\nBenchmarkAppendFloatNegExp                  1174         1158   -1.36%\nBenchmarkAppendFloatBig                     2084         2027   -2.74%\nBenchmarkAppendFloat32Integer                764          758   -0.79%\nBenchmarkAppendFloat32ExactFraction         1073         1039   -3.17%\nBenchmarkAppendFloat32Point                 1355         1316   -2.88%\nBenchmarkAppendFloat32Exp                   1166         1108   -4.97%\nBenchmarkAppendFloat32NegExp                1153         1126   -2.34%\nBenchmarkAppendFloat64Fixed1                 826          803   -2.78%\nBenchmarkAppendFloat64Fixed2                 841          785   -6.66%\nBenchmarkAppendFloat64Fixed3                 852          787   -7.63%\nBenchmarkAppendFloat64Fixed4                 890          811   -8.88%\nBenchmarkAppendInt                         29791        30703   +3.06%\nBenchmarkAppendUint                        19478        19289   -0.97%\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkFormat            5324         5183   -2.65%\nBenchmarkFormatNow         5138         5105   -0.64%",
			"disapproval": false,
			"date": "2013-05-19 02:02:37.425750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Remy, ping.\n\nStatus of this?",
			"disapproval": false,
			"date": "2013-07-23 16:46:54.099150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this ends up being correct, because of the calls to cheapexpr, but I still worry about setting s to a bigger slice and then failing to fill it due to a panic. \n\nCould you please add some tests that do things like\n\nvar x []int // global\n\nvar p *int\nvar n, d = 1, 0\n\nand check that x = append(x, 1, *p, 2) does not leave x expanded, and similarly x = append(x, 1, n/d, 2).\n\nThanks.",
			"disapproval": false,
			"date": "2013-08-01 21:12:54.390570",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 21:12:54, rsc wrote:\n> I think this ends up being correct, because of the calls to cheapexpr, but I\n> still worry about setting s to a bigger slice and then failing to fill it due to\n> a panic. \n> \n> Could you please add some tests that do things like\n> \n> var x []int // global\n> \n> var p *int\n> var n, d = 1, 0\n> \n> and check that x = append(x, 1, *p, 2) does not leave x expanded, and similarly\n> x = append(x, 1, n/d, 2).\n> \n> Thanks.",
			"disapproval": false,
			"date": "2013-08-14 06:21:24.760030",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close\n\nThis would have been the source of endless weird potential corruption and the temp merging optimization takes care much better of stack size reduction.",
			"disapproval": false,
			"date": "2013-08-14 06:22:09.086620",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 9360043: cmd/gc: avoid a temporary when inlining s = append(s, x)",
	"created": "2013-05-12 15:11:08.787570",
	"patchsets": [
		1,
		3,
		4001,
		11001
	],
	"modified": "2013-08-14 06:22:09.519990",
	"closed": false,
	"issue": 9360043
}