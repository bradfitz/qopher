{
	"description": "time: Durations in microseconds and milliseconds\n\nProposal.\n\nThey seem like missing methods to me and the math\nto generate them from seconds or nanoseconds is easy\nbut also easy to get wrong.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-22 18:55:13.493987",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-22 18:05:13.321581",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fine by me.  I'd prefer if all these docs mentioned that they're truncated\ntowards zero, though.\n\nFortunately godoc makes it easy to answer such questions by clicking the\nmethod, at least.\n\nOn Thu, Dec 22, 2011 at 10:05 AM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> time: Durations in microseconds and milliseconds\n>\n> Proposal.\n>\n> They seem like missing methods to me and the math\n> to generate them from seconds or nanoseconds is easy\n> but also easy to get wrong.\n>\n> Please review this at http://codereview.appspot.com/**5505064/<http://codereview.appspot.com/5505064/>\n>\n> Affected files:\n>  src/pkg/time/time.go\n>\n>\n> Index: src/pkg/time/time.go\n> ==============================**==============================**=======\n> --- a/src/pkg/time/time.go\n> +++ b/src/pkg/time/time.go\n> @@ -516,6 +516,12 @@\n>  // Nanoseconds returns the duration as an integer nanosecond count.\n>  func (d Duration) Nanoseconds() int64 { return int64(d) }\n>\n> +// Microseconds returns the duration as an integer microsecond count.\n> +func (d Duration) Microseconds() int64 { return int64(d)/1e3 }\n> +\n> +// Milliseconds returns the duration as an integer millisecond count.\n> +func (d Duration) Milliseconds() int64 { return int64(d)/1e6 }\n> +\n>  // These methods return float64 because the dominant\n>  // use case is for printing a floating point number like 1.5s, and\n>  // a truncation to integer would make them not useful in those cases.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-12-22 18:11:51.323580",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 22, 2011, at 10:29 AM, Russ Cox wrote:\n\n> I'm not sure.  I hesitate mainly because Seconds is in\n> float64 and it is a strange point at which to switch from\n> int64 to float64.\n> \n> The idiomatic phrasing we used in converting existing\n> code is to write\n> \n> ms := int64(d / time.Microsecond)\n> \n> which avoids any assumption about the unit of d and\n> is very clear.  Perhaps instead we should add some\n> method examples? (That was not possible when I wrote\n> the original time examples, and also I got tired.)\n\ni don't understand what you're saying. are you objecting to the implementation, the definition, or the existence of the new methods?\n\ni don't believe nanoseconds is the most useful duration, just the most accurate. most code wants seconds or milliseconds.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-22 18:33:32.166424",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 22, 2011 at 10:24 AM, Rob 'Commander' Pike <r@google.com> wrote:\n\n>\n> On Dec 22, 2011, at 10:11 AM, Brad Fitzpatrick wrote:\n>\n> > Fine by me.  I'd prefer if all these docs mentioned that they're\n> truncated towards zero, though.\n>\n> Isn't that what 'integer count' means? 0.5 is not a full integer. I can\n> add \"rounding down\" if that helps.\n\n\n yeah, nevermind, it's probably redundant.\n",
			"disapproval": false,
			"date": "2011-12-22 18:28:42.304710",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 22, 2011, at 10:29 AM, Russ Cox wrote:\n> The idiomatic phrasing we used in converting existing\n> code is to write\n> \n> ms := int64(d / time.Microsecond)\n\nit's a stretch to call that an idiom. it's correct but clunky. also, a Duration is an int64, so this conversion doesn't address your float/int thing anyway.\n\nyou have a mental model i don't see, one i don't think most users of this package will share.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-12-22 18:35:41.849657",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure.  I hesitate mainly because Seconds is in\nfloat64 and it is a strange point at which to switch from\nint64 to float64.\n\nThe idiomatic phrasing we used in converting existing\ncode is to write\n\nms := int64(d / time.Microsecond)\n\nwhich avoids any assumption about the unit of d and\nis very clear.  Perhaps instead we should add some\nmethod examples? (That was not possible when I wrote\nthe original time examples, and also I got tired.)\n",
			"disapproval": false,
			"date": "2011-12-22 18:29:44.058281",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Actually I suppose these would be type examples.\n",
			"disapproval": false,
			"date": "2011-12-22 18:30:09.743947",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 22, 2011 at 13:33, Rob 'Commander' Pike <r@google.com> wrote:\n> i don't believe nanoseconds is the most useful duration, just the most accurate. most code wants seconds or milliseconds.\n\nIf we add these methods I believe they should return float64,\nfor the same reason that the others do.  It is common to want\nfractional %.1f milliseconds and so on, and the conversion to\nfloat64 is the difficult one.  I am not sure that we need them though.\n\nRegardless, I do believe we should give the idioms\nfor the integer conversions as documentation examples,\nsince they arise in many contexts:\n\nDuration -> unit:\nms := int64(d / time.Millisecond)\n\nunit -> Duration\nd := time.Duration(numSecs) * time.Second\n\nThe last is very common in code we converted:\nnumSecs is often a *int returned by flag.Int.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-22 18:43:59.313348",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 22, 2011, at 10:11 AM, Brad Fitzpatrick wrote:\n\n> Fine by me.  I'd prefer if all these docs mentioned that they're truncated towards zero, though.\n\nIsn't that what 'integer count' means? 0.5 is not a full integer. I can add \"rounding down\" if that helps.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-22 18:24:16.801317",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 22, 2011, at 10:43 AM, Russ Cox wrote:\n\n> On Thu, Dec 22, 2011 at 13:33, Rob 'Commander' Pike <r@google.com> wrote:\n>> i don't believe nanoseconds is the most useful duration, just the most accurate. most code wants seconds or milliseconds.\n> \n> If we add these methods I believe they should return float64,\n> for the same reason that the others do.  It is common to want\n> fractional %.1f milliseconds and so on, and the conversion to\n> float64 is the difficult one.  I am not sure that we need them though.\n\nEvery use of them is going to cast to an integer type. Fractional microseconds is just not something people care about. Nanoseconds doesn't return a float, and therefore by a different symmetry argument neither should Millisecond or Microsecond.\n\n> Regardless, I do believe we should give the idioms\n> for the integer conversions as documentation examples,\n> since they arise in many contexts:\n> \n> Duration -> unit:\n> ms := int64(d / time.Millisecond)\n\nThat's clumsier than d.Milliseconds(), and does the same calculation as the method in this CL. I can add the documentation, but that doesn't address the point of this CL.\n\n> unit -> Duration\n> d := time.Duration(numSecs) * time.Second\n> \n> The last is very common in code we converted:\n> numSecs is often a *int returned by flag.Int.\n\nSure, but that's got nothing to do with the purpose of this CL.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-22 18:50:17.478927",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5505064: time: Durations in microseconds and milliseconds",
	"created": "2011-12-22 18:05:09.203259",
	"patchsets": [
		1,
		1002
	],
	"modified": "2011-12-22 18:55:15.422674",
	"closed": true,
	"issue": 5505064
}