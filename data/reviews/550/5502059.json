{
	"description": "go/doc, godoc: show methods of anonymous fields\n\nMissing: Handling of embedded interfaces.\n\nAlso, for reasons outlined in the previous CL (5500055), embedded\ntypes have to be exported for its \"inherited\" methods to be visible.\nThis will be addressed w/ a subsequent CL.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can we drop the embedded and change the receiver?\nIt seems like that should be straightforward now that\nthe info is there.\n\nThe goal for this is to be able to make the current\ngodoc testing look like the old (golang.org/pkg/testing) one.\nWhether a method is provided by an embedded\nunexported field or directly is an implementation detail.\n\nIf the embedded field F inside struct T is a pointer,\nthen the receiver should be (T).\nIf the embedded field inside struct T is a value,\nthen the receiver should be (T) if the embedded\nreceiver is F, or (*T) if *F.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-21 19:32:20.365025",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-22 01:36:18.535883",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the presentation looks much better. LGTM from that perspective.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-22 01:52:15.455857",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 22, 2011 at 16:06,  <gri@golang.org> wrote:\n> type _ struct {...}\n>\n> No need to keep information about it.\n\nAha.  I was thinking this name came out of a\nfield definition in a struct.\n",
			"disapproval": false,
			"date": "2011-12-22 21:32:34.579355",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-21 19:18:45.088722",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Addressed.\n\nFYI: I am moving export filtering into go/doc - this should then fix the fact that unexported anonymous field's methods are missed at the moment.\n\nhttp://codereview.appspot.com/5502059/diff/1010/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttp://codereview.appspot.com/5502059/diff/1010/src/pkg/go/doc/doc.go#newcode76\nsrc/pkg/go/doc/doc.go:76: if name == \"\" || name == \"_\" {\nOn 2011/12/22 20:30:08, rsc wrote:\n> Is this a type name?  I don't think you can encounter _ as a type name\n> so I am a little confused.\n\nIt is. If an unfiltered AST (including non-exported stuff) is go/doc-ed, it's possible to see a _ type:\n\ntype _ struct {...}\n\nNo need to keep information about it.\n\nhttp://codereview.appspot.com/5502059/diff/1010/src/pkg/go/doc/doc.go#newcode403\nsrc/pkg/go/doc/doc.go:403: // TODO(gri) Should sort methods also by ptr vs non-ptr receiver.\nOn 2011/12/22 20:30:08, rsc wrote:\n> I suspect that would be a mistake, because it would be\n> alphabetical in so many cases that people would assume\n> it was alphabetical instead of being two runs of alphabetical\n> concatenated.  That is, if it looks alphabetical most of the time,\n> it should be alphabetical all of the time.\n> \n> There are file systems with large block sizes that keep their\n> directories sorted within a block but not across blocks, and\n> I've seen bugs where people assume that the directory entries\n> being read off disk are sorted, because in small directories\n> (which fit in a single disk block) they are.\n> \n\nDone.",
			"disapproval": false,
			"date": "2011-12-22 21:06:48.184068",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9b9dc55a7745 ***\n\ngo/doc, godoc: show methods of anonymous fields\n\nMissing: Handling of embedded interfaces.\n\nAlso, for reasons outlined in the previous CL (5500055), embedded\ntypes have to be exported for its \"inherited\" methods to be visible.\nThis will be addressed w/ a subsequent CL.\n\nR=r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5502059",
			"disapproval": false,
			"date": "2011-12-22 21:11:46.331477",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIt looks like this is not affecting presentation at all anymore,\nwhich seems like a good idea until all the necessary pieces are ready.\n\nhttp://codereview.appspot.com/5502059/diff/1010/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttp://codereview.appspot.com/5502059/diff/1010/src/pkg/go/doc/doc.go#newcode76\nsrc/pkg/go/doc/doc.go:76: if name == \"\" || name == \"_\" {\nIs this a type name?  I don't think you can encounter _ as a type name\nso I am a little confused.\n\nhttp://codereview.appspot.com/5502059/diff/1010/src/pkg/go/doc/doc.go#newcode403\nsrc/pkg/go/doc/doc.go:403: // TODO(gri) Should sort methods also by ptr vs non-ptr receiver.\nI suspect that would be a mistake, because it would be\nalphabetical in so many cases that people would assume\nit was alphabetical instead of being two runs of alphabetical\nconcatenated.  That is, if it looks alphabetical most of the time,\nit should be alphabetical all of the time.\n\nThere are file systems with large block sizes that keep their\ndirectories sorted within a block but not across blocks, and\nI've seen bugs where people assume that the directory entries\nbeing read off disk are sorted, because in small directories\n(which fit in a single disk block) they are.",
			"disapproval": false,
			"date": "2011-12-22 20:30:08.657836",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5502059: go/doc, godoc: show methods of anonymous fields",
	"created": "2011-12-21 19:17:45.986102",
	"patchsets": [
		1,
		3,
		4001,
		2007,
		4002,
		1008,
		6004,
		7,
		4011,
		4012,
		10,
		2009,
		1010,
		6006
	],
	"modified": "2011-12-23 07:08:34.608333",
	"closed": true,
	"issue": 5502059
}