{
	"description": "dashboard: cache todo responses",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org"
	],
	"reviewers": [
		"adg@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5500057/diff/1005/misc/dashboard/app/build/cache.go\nFile misc/dashboard/app/build/cache.go (right):\n\nhttp://codereview.appspot.com/5500057/diff/1005/misc/dashboard/app/build/cache.go#newcode101\nmisc/dashboard/app/build/cache.go:101: func todoCache(c appengine.Context) (item *memcache.Item, miss bool) {\nweird sense. I'd invert miss to ok.",
			"disapproval": false,
			"date": "2011-12-21 06:21:14.838017",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 21, 2011 at 01:28,  <adg@google.com> wrote:\n> It more clearly provides the info I'm interested in. \"Was this a miss?\"\n\nIf you are interested in a negative result, you can use the ! operator.\nI agree with David that returning ok bool is more consistent with\nother functions and built-in operations.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-21 06:46:14.877579",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/cache.go\nFile misc/dashboard/app/build/cache.go (right):\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/cache.go#newcode24\nmisc/dashboard/app/build/cache.go:24: for _, key := range []string{uiCacheKey, todoCacheKey} {\nOn 2011/12/21 06:00:00, dsymonds wrote:\n> use memcache.DeleteMulti and save an RPC.\n\nDone.\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/cache.go#newcode112\nmisc/dashboard/app/build/cache.go:112: func unmarshalTodo(c appengine.Context, t *memcache.Item) map[string]*Todo {\nOn 2011/12/21 06:00:00, dsymonds wrote:\n> Why not use memcache.JSON.Foo?\n\nNo CompareAndSwap, and I prefer to split the operations up so I can have more granular logging and error handling.\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/handler.go\nFile misc/dashboard/app/build/handler.go (right):\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/handler.go#newcode154\nmisc/dashboard/app/build/handler.go:154: c.Infof(\"cache hit\")\nOn 2011/12/21 06:00:00, dsymonds wrote:\n> probably Debugf\n\nDone.",
			"disapproval": false,
			"date": "2011-12-21 06:11:36.773124",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"adg@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 9a1f034fc127 ***\n\ndashboard: cache todo responses\n\nR=golang-dev, dsymonds, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5500057",
			"disapproval": false,
			"date": "2011-12-21 06:24:48.394850",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5500057/diff/1005/misc/dashboard/app/build/cache.go\nFile misc/dashboard/app/build/cache.go (right):\n\nhttp://codereview.appspot.com/5500057/diff/1005/misc/dashboard/app/build/cache.go#newcode101\nmisc/dashboard/app/build/cache.go:101: func todoCache(c appengine.Context) (item *memcache.Item, miss bool) {\nOn 2011/12/21 06:21:15, dsymonds wrote:\n> weird sense. I'd invert miss to ok.\n\nIt more clearly provides the info I'm interested in. \"Was this a miss?\" Note that for the error state miss=false. It would be weird if the error state was ok=true.",
			"disapproval": false,
			"date": "2011-12-21 06:28:45.383903",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2011-12-21 05:45:51.752351",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/cache.go\nFile misc/dashboard/app/build/cache.go (right):\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/cache.go#newcode24\nmisc/dashboard/app/build/cache.go:24: for _, key := range []string{uiCacheKey, todoCacheKey} {\nuse memcache.DeleteMulti and save an RPC.\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/cache.go#newcode112\nmisc/dashboard/app/build/cache.go:112: func unmarshalTodo(c appengine.Context, t *memcache.Item) map[string]*Todo {\nWhy not use memcache.JSON.Foo?\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/handler.go\nFile misc/dashboard/app/build/handler.go (right):\n\nhttp://codereview.appspot.com/5500057/diff/3001/misc/dashboard/app/build/handler.go#newcode154\nmisc/dashboard/app/build/handler.go:154: c.Infof(\"cache hit\")\nprobably Debugf",
			"disapproval": false,
			"date": "2011-12-21 06:00:00.754440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 21, 2011 at 01:46, Russ Cox <rsc@golang.org> wrote:\n> If you are interested in a negative result, you can use the ! operator.\n> I agree with David that returning ok bool is more consistent with\n> other functions and built-in operations.\n\nFor example if todoCache were a map...\n",
			"disapproval": false,
			"date": "2011-12-21 06:46:47.466556",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5500057: dashboard: cache todo responses",
	"created": "2011-12-21 05:35:03.325330",
	"patchsets": [
		1,
		2001,
		3001,
		1005,
		5003
	],
	"modified": "2011-12-21 06:46:15.048110",
	"closed": true,
	"issue": 5500057
}