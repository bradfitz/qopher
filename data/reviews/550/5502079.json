{
	"description": "strconv: faster FormatFloat(x, *, -1, 64) using Grisu3 algorithm.\n\nThe implementation is similar to the one from the double-conversion\nlibrary used in the Chrome V8 engine.\n\n                            old ns/op   new ns/op  speedup\nBenchmarkAppendFloatDecimal      591         480      1.2x\nBenchmarkAppendFloat            2956         486      6.1x\nBenchmarkAppendFloatExp        10622         503     21.1x\nBenchmarkAppendFloatNegExp     40343         483     83.5x\nBenchmarkAppendFloatBig         2798         664      4.2x\n\nSee F. Loitsch, ``Printing Floating-Point Numbers Quickly and\nAccurately with Integers'', Proceedings of the ACM, 2010.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please note that the ftoa random tests will fail for the moment due to differing specifications for \"Shortest representation\". We need to resolve issue 2625 before going on.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2011-12-28 01:18:40.400499",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-30 07:44:04.170814",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-28 01:14:56.193669",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is great.  Thanks very much.\nPlease update and re-hg mail\nonce I've submitted the strconv fix.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go\nFile src/pkg/strconv/extfloat.go (right):\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode351\nsrc/pkg/strconv/extfloat.go:351: panic(\"invalid exponent range\")\nJust in case it happens, \"strconv: invalid exponent range\" will help us find it.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode357\nsrc/pkg/strconv/extfloat.go:357: lookupexp:\nWe usually give these upper case names.\n\nLookupexp:\n\nor even just Loop: is fine here.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode359\nsrc/pkg/strconv/extfloat.go:359: exponent := f.exp + powersOfTen[i].exp + 64\ns/exponent/exp/ to match the surrounding code\n(nothing else spells it out)\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode376\nsrc/pkg/strconv/extfloat.go:376: // frexp10Many applies a common shift by a power of Ten to a, b, c.\ns/Ten/ten/?\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode379\nsrc/pkg/strconv/extfloat.go:379: i := (-exp10 - firstPowerOfTen) / stepPowerOfTen\nYou could instead make frexp10 return both exp10 and i.\n\nexp10, i := c.frexp10...\na.Multiply(powersOfTen[i])\nb.Multiply(powersOfTen[i])\n\nSeems less error-prone (and we have multiple return values,\nunlike in C).\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode385\nsrc/pkg/strconv/extfloat.go:385: // ToShortestDecimal produces the shortest decimal representation of f\ns/To//\ns/produces/stores in d/\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode389\nsrc/pkg/strconv/extfloat.go:389: func (f *extFloat) ToShortestDecimal(a *decimal, lower, upper *extFloat) bool {\ns/a/d/ just so that referring to the variable\ndoesn't look like using the English word 'a'.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/ftoa.go#newcode140\nsrc/pkg/strconv/ftoa.go:140: // Precision for shortest representation mode.\nThis can move up into the if shortest, no?\nIt doesn't seem to apply to the else case, so it\ndoesn't have to be down here.",
			"disapproval": false,
			"date": "2012-01-12 03:02:47.494440",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also updated the benchmark comparison, since \"AppendDecimal\" was greatly improved by \"strconv: implement fast path for rounding already short numbers\" change.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go\nFile src/pkg/strconv/extfloat.go (right):\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode351\nsrc/pkg/strconv/extfloat.go:351: panic(\"invalid exponent range\")\nOn 2012/01/12 03:02:47, rsc wrote:\n> Just in case it happens, \"strconv: invalid exponent range\" will help us find it.\n\nDone.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode357\nsrc/pkg/strconv/extfloat.go:357: lookupexp:\nOn 2012/01/12 03:02:47, rsc wrote:\n> We usually give these upper case names.\n> \n> Lookupexp:\n> \n> or even just Loop: is fine here.\n\nDone.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode359\nsrc/pkg/strconv/extfloat.go:359: exponent := f.exp + powersOfTen[i].exp + 64\nOn 2012/01/12 03:02:47, rsc wrote:\n> s/exponent/exp/ to match the surrounding code\n> (nothing else spells it out)\n\nDone.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode376\nsrc/pkg/strconv/extfloat.go:376: // frexp10Many applies a common shift by a power of Ten to a, b, c.\nOn 2012/01/12 03:02:47, rsc wrote:\n> s/Ten/ten/?\n\nDone.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode379\nsrc/pkg/strconv/extfloat.go:379: i := (-exp10 - firstPowerOfTen) / stepPowerOfTen\nOn 2012/01/12 03:02:47, rsc wrote:\n> You could instead make frexp10 return both exp10 and i.\n> \n> exp10, i := c.frexp10...\n> a.Multiply(powersOfTen[i])\n> b.Multiply(powersOfTen[i])\n> \n> Seems less error-prone (and we have multiple return values,\n> unlike in C).\n\nDone.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode385\nsrc/pkg/strconv/extfloat.go:385: // ToShortestDecimal produces the shortest decimal representation of f\nOn 2012/01/12 03:02:47, rsc wrote:\n> s/To//\n> s/produces/stores in d/\n\nDone.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/extfloat.go#newcode389\nsrc/pkg/strconv/extfloat.go:389: func (f *extFloat) ToShortestDecimal(a *decimal, lower, upper *extFloat) bool {\nOn 2012/01/12 03:02:47, rsc wrote:\n> s/a/d/ just so that referring to the variable\n> doesn't look like using the English word 'a'.\n\nDone.\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5502079/diff/6/src/pkg/strconv/ftoa.go#newcode140\nsrc/pkg/strconv/ftoa.go:140: // Precision for shortest representation mode.\nOn 2012/01/12 03:02:47, rsc wrote:\n> This can move up into the if shortest, no?\n> It doesn't seem to apply to the else case, so it\n> doesn't have to be down here.\n\nDone.",
			"disapproval": false,
			"date": "2012-01-13 07:26:44.086572",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nWill leave for you to submit.\nPlease run all.bash first.\n",
			"disapproval": false,
			"date": "2012-01-13 22:00:35.180195",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-13 07:28:00.846170",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0ebf155c8d5a ***\n\nstrconv: faster FormatFloat(x, *, -1, 64) using Grisu3 algorithm.\n\nThe implementation is similar to the one from the double-conversion\nlibrary used in the Chrome V8 engine.\n\n                            old ns/op   new ns/op  speedup\nBenchmarkAppendFloatDecimal      591         480      1.2x\nBenchmarkAppendFloat            2956         486      6.1x\nBenchmarkAppendFloatExp        10622         503     21.1x\nBenchmarkAppendFloatNegExp     40343         483     83.5x\nBenchmarkAppendFloatBig         2798         664      4.2x\n\nSee F. Loitsch, ``Printing Floating-Point Numbers Quickly and\nAccurately with Integers'', Proceedings of the ACM, 2010.\n\nR=rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5502079",
			"disapproval": false,
			"date": "2012-01-13 22:24:37.054501",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5502079: strconv: faster FormatFloat(x, *, -1, 64) using Grisu3 ...",
	"created": "2011-12-28 01:14:37.939571",
	"patchsets": [
		1,
		2001,
		4001,
		6,
		10001,
		9003
	],
	"modified": "2012-02-07 09:39:36.271396",
	"closed": true,
	"issue": 5502079
}