{
	"description": "go spec: conversion types starting with \"func\" must be parenthesized\n\nAlso: Be explicit what operator means with respect to conversion types.\n\nThe parenthesis requirement is a language change. At the moment,\nliteral function types in conversions that cannot possibly be\nfollowed by a '(' don't need parentheses. For instance:\n\n        func(int)int(x)  ->  same as (func(int)int)(x)\n        func()()(x)      ->  same as (func())(x)\n\nbut:\n\n        func(int)(x)\t ->  could be func(int)x {...}\n\nFixes issue 4109.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html#newcode3495\ndoc/go_spec.html:3495: Implementation restriction: For backward-compatibility with the Go 1 language\nPerhaps s/restriction/note/ , since this is not actually a restriction.",
			"disapproval": false,
			"date": "2012-10-03 20:10:47.714700",
			"approval": true
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Wed, Oct 3, 2012 at 1:19 PM, Robert Griesemer <gri@golang.org> wrote:\r\n> We have other \"implementation restrictions\" in the spec that are not real\r\n> restrictions (but loosen then spec); hence I kept the same notation. This\r\n> makes it easier to search for them.\r\n>\r\n> - gri\r\n>\r\n>\r\n> On Wed, Oct 3, 2012 at 1:10 PM, <iant@golang.org> wrote:\r\n>>\r\n>> LGTM\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html\r\n>> File doc/go_spec.html (right):\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html#newcode3495\r\n>> doc/go_spec.html:3495: Implementation restriction: For\r\n>> backward-compatibility with the Go 1 language\r\n>> Perhaps s/restriction/note/ , since this is not actually a restriction.\r\n>>\r\n>> https://codereview.appspot.com/6584065/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-03 20:29:17.783310",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc, r, iant, ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-03 01:15:03.175690",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nblech",
			"disapproval": false,
			"date": "2012-10-03 03:19:44.085910",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This seems fine in concept but I'm concerned about Go 1.  Implementing this change in the compilers means that some code that is currently accepted will start being rejected.  And that code was valid according to the language spec before this change.\n\nSo I think we should:\n\n1) Write some tests for the current compiler behaviour and add them to the test directory.  I don't see any tests for this there at present though I didn't look exhaustively.\n\n2) Change gofmt so that when it sees code like\n    x := func()int(f)\nit rewrites it as\n    x := (func()int)(f)\n\n3) Change the language spec as per this CL.  Perhaps add an implementation note saying that the old form is accepted; not sure if we need that note or not.\n\n4) Create an issue saying that we should remove this behaviour from the compilers for Go 2.\n\nI know this procedure is a pain, but I'm not comfortable breaking possible working Go 1 programs for something like this.  Happy to hear other opinions.",
			"disapproval": false,
			"date": "2012-10-03 17:56:30.712420",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-03 20:01:26.585050",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-03 20:10:12.905280",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We have other \"implementation restrictions\" in the spec that are not real\r\nrestrictions (but loosen then spec); hence I kept the same notation. This\r\nmakes it easier to search for them.\r\n\r\n- gri\r\n\r\n\r\nOn Wed, Oct 3, 2012 at 1:10 PM, <iant@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n>\r\n> https://codereview.appspot.**com/6584065/diff/7001/doc/go_**spec.html<https://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html>\r\n> File doc/go_spec.html (right):\r\n>\r\n> https://codereview.appspot.**com/6584065/diff/7001/doc/go_**\r\n> spec.html#newcode3495<https://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html#newcode3495>\r\n> doc/go_spec.html:3495: Implementation restriction: For\r\n> backward-compatibility with the Go 1 language\r\n> Perhaps s/restriction/note/ , since this is not actually a restriction.\r\n>\r\n> https://codereview.appspot.**com/6584065/<https://codereview.appspot.com/6584065/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-03 20:19:09.946270",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6584065/diff/7001/doc/go_spec.html#newcode3497\ndoc/go_spec.html:3497: in conversions which are not ambiguous.\ns/which/that/\n\nin any case: the conversion's not ambiguous, it's the syntax. so maybe:\nin conversions where the syntax is unambiguous.",
			"disapproval": false,
			"date": "2012-10-03 20:40:48.187460",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2a8dfbc7b566 ***\n\ngo spec: conversion types starting with \"func\" must be parenthesized\n\nAlso: Be explicit what operator means with respect to conversion types.\n\nThe parenthesis requirement is a language change. At the moment,\nliteral function types in conversions that cannot possibly be\nfollowed by a '(' don't need parentheses. For instance:\n\n        func(int)int(x)  ->  same as (func(int)int)(x)\n        func()()(x)      ->  same as (func())(x)\n\nbut:\n\n        func(int)(x)\t ->  could be func(int)x {...}\n\nFixes issue 4109.\n\nR=rsc, r, iant, ken, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6584065",
			"disapproval": false,
			"date": "2012-10-03 20:46:45.875680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-10-05 21:17:02.414260",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6584065: go spec: conversion types starting with \"func\" must be ...",
	"created": "2012-10-03 01:14:57.649070",
	"patchsets": [
		1,
		4001,
		7001,
		9002
	],
	"modified": "2012-10-03 20:46:47.201440",
	"closed": true,
	"issue": 6584065
}