{
	"description": "go.tools/ssa: add support for bound-method closures.\n\nExtracted Builder.findMethod function to handle\nmethodset/receiver logic common to\nfunction calls (Builder.setCall) and\nbound method closure creation (Builder.selector).\n\nCapture: added explicit Name, Type fields to Capture instead\nof relying on Outer field, which is now un-exported since its\nonly purpose is to let Builder.expr(case *ast.FuncLit) know\nwhich values to put in the closure; it is nilled immediately\nafter.\n\nSimplified Function.lookup() logic: there's no need to walk\nthe Outer chain each time to set Alloc.Heap=true, as it's\nalready set during creation of the outermost\nCapture{outer:*Alloc}.\n\nAdded interp/testdata/boundmeth.go test.\n\nCosmetic changes:\n- add support for bound method thunks to Function.FullName().\n- Simplified {Literal,Global,Builtin,Function}.String()\n- doc: Captures are no longer necessarily addresses.\n- added yet another missing pair of \"()\" (go/types accessors).\n- print \"Synthetic\" not \"Declared at -\" for synthetic functions.\n- use '$' not center-dot in synthetic identifiers (easier to type).",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f51aa0293205&repo=tools ***\n\ngo.tools/ssa: add support for bound-method closures.\n\nExtracted Builder.findMethod function to handle\nmethodset/receiver logic common to\nfunction calls (Builder.setCall) and\nbound method closure creation (Builder.selector).\n\nCapture: added explicit Name, Type fields to Capture instead\nof relying on Outer field, which is now un-exported since its\nonly purpose is to let Builder.expr(case *ast.FuncLit) know\nwhich values to put in the closure; it is nilled immediately\nafter.\n\nSimplified Function.lookup() logic: there's no need to walk\nthe Outer chain each time to set Alloc.Heap=true, as it's\nalready set during creation of the outermost\nCapture{outer:*Alloc}.\n\nAdded interp/testdata/boundmeth.go test.\n\nCosmetic changes:\n- add support for bound method thunks to Function.FullName().\n- Simplified {Literal,Global,Builtin,Function}.String()\n- doc: Captures are no longer necessarily addresses.\n- added yet another missing pair of \"()\" (go/types accessors).\n- print \"Synthetic\" not \"Declared at -\" for synthetic functions.\n- use '$' not center-dot in synthetic identifiers (easier to type).\n\nR=gri\nCC=golang-dev\nhttps://codereview.appspot.com/9654043",
			"disapproval": false,
			"date": "2013-05-22 21:56:20.273090",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9654043/diff/17001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/builder.go#newcode929\nssa/builder.go:929: } else {\nOn 2013/05/22 21:38:54, gri wrote:\n> just } and no else ?\n\nDone.\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/func.go\nFile ssa/func.go (right):\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/func.go#newcode530\nssa/func.go:530: if pos := f.Pos(); pos != token.NoPos {\nOn 2013/05/22 21:38:54, gri wrote:\n> pos.IsValid()\n\nDone.\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/promote.go\nFile ssa/promote.go (right):\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/promote.go#newcode410\nssa/promote.go:410: // The generated thunks do not belong to any package.  (Arguably they\nOn 2013/05/22 21:38:54, gri wrote:\n> Why not the package which does t.meth? Since it is t.meth.\n\nBecause the callee may itself be a bridge method arising from promotion of an embedded field, and that has no Pkg either.\nFWIW, we currently have the documented invariant that:\n  fn.Pkg != nil <=> function is defined in Go source\n  fn.Pkg == nil <=> function is synthetic\nand I'm pretty happy with that, so really these hand-wringing comments are unnecessary.\n\nDeleted.\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/promote.go#newcode423\nssa/promote.go:423: Name_:     \"bound\u00b7\" + meth.FullName(),\nOn 2013/05/22 21:38:54, gri wrote:\n> can we use a more \"typeable\" character rather than \u00b7 ? Say $ ?\n\nDone.\n\nAlso s/init\u00b7guard/init$guard/g.",
			"disapproval": false,
			"date": "2013-05-22 21:49:21.566550",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-05-22 17:18:49.110360",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/builder.go#newcode929\nssa/builder.go:929: } else {\njust } and no else ?\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/func.go\nFile ssa/func.go (right):\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/func.go#newcode530\nssa/func.go:530: if pos := f.Pos(); pos != token.NoPos {\npos.IsValid()\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/promote.go\nFile ssa/promote.go (right):\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/promote.go#newcode410\nssa/promote.go:410: // The generated thunks do not belong to any package.  (Arguably they\nWhy not the package which does t.meth? Since it is t.meth.\n\nhttps://codereview.appspot.com/9654043/diff/17001/ssa/promote.go#newcode423\nssa/promote.go:423: Name_:     \"bound\u00b7\" + meth.FullName(),\ncan we use a more \"typeable\" character rather than \u00b7 ? Say $ ?",
			"disapproval": false,
			"date": "2013-05-22 21:38:54.843920",
			"approval": true
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 9654043: go.tools/ssa: add support for bound-method closures.",
	"created": "2013-05-22 17:00:49.292760",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		10001,
		14001,
		17001,
		1002
	],
	"modified": "2013-05-22 21:38:54.843920",
	"closed": true,
	"issue": 9654043
}