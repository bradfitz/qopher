{
	"description": "exp/types: snapshot of current status\n\n- associate methods with types\n- defined structure of basic types\n- defined operand type representing expression values\n- constant folding\n- expression type checking for basic types\n- constant and variable declarations w/ initializations\n- some statement checking\n- more tests",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"edsrzf@gmail.com",
		"axwalk@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-10 01:00:43.194080",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-14 21:15:29.348530",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"edsrzf@gmail.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the feedback.\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go\nFile src/pkg/exp/types/expr.go (right):\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go#newcode126\nsrc/pkg/exp/types/expr.go:126: if sel := lookupField(x.Typ, e.Sel.Name); sel != nil {\nOn 2012/08/15 15:03:00, axw wrote:\n> I see your comment above, but just in case you hadn't thought of it: I think\n> lookupField probably won't work well here, since you need to check that there's\n> exactly one field at the shallowest depth of all matching fields.\n\nlookupField is completely broken - it's just an initial implementation to get going\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/types.go\nFile src/pkg/exp/types/types.go (right):\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/types.go#newcode35\nsrc/pkg/exp/types/types.go:35: \nOn 2012/08/15 15:03:00, axw wrote:\n> Could the values please be made the same as reflect.Kind? (In the llgo fork of\n> types, I simply have \"type BasicKind reflect.Kind\").\n\nAgain, this is likely to change as well. But I'll put a TODO here to keep this in mind.",
			"disapproval": false,
			"date": "2012-08-16 17:20:28.483020",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"edsrzf@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just a few things I noticed while browsing through.\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go\nFile src/pkg/exp/types/expr.go (right):\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go#newcode15\nsrc/pkg/exp/types/expr.go:15: // TODO(gri) check that x is an int type\nNot necessarily -- it could be a map index\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go#newcode70\nsrc/pkg/exp/types/expr.go:70: case token.LAND, token.LOR, token.NOT:\nNOT is only unary last time I checked.\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/stmt.go\nFile src/pkg/exp/types/stmt.go (right):\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/stmt.go#newcode70\nsrc/pkg/exp/types/stmt.go:70: switch s.Tok {\nI'm guessing you already considered this and decided against it:\n\nif token.ADD_ASSIGN <= op && op <= AND_NOT_ASSIGN {\n    op -= token.AND_NOT_ASSIGN - token.ADD_ASSIGN\n}",
			"disapproval": false,
			"date": "2012-08-14 22:16:28.466220",
			"approval": false
		},
		{
			"sender": "axwalk@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"edsrzf@gmail.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this! It's starting to take form.\nI hope you don't mind, I have a couple of minor comments.\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go\nFile src/pkg/exp/types/expr.go (right):\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go#newcode126\nsrc/pkg/exp/types/expr.go:126: if sel := lookupField(x.Typ, e.Sel.Name); sel != nil {\nI see your comment above, but just in case you hadn't thought of it: I think lookupField probably won't work well here, since you need to check that there's exactly one field at the shallowest depth of all matching fields.\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/types.go\nFile src/pkg/exp/types/types.go (right):\n\nhttp://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/types.go#newcode35\nsrc/pkg/exp/types/types.go:35: \nCould the values please be made the same as reflect.Kind? (In the llgo fork of types, I simply have \"type BasicKind reflect.Kind\").",
			"disapproval": false,
			"date": "2012-08-15 15:03:00.459330",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for looking at it.\r\n\r\nPlease note that this code is totally in flux. This is just a snapshot\r\nfor myself at the moment while I am pushing this forward. At the end\r\nwe will have a better understanding of the best and most efficient way\r\nof doing things. And probably rewrite the code with that knowledge.\r\n\r\n- gri\r\n\r\nOn Tue, Aug 14, 2012 at 3:16 PM,  <edsrzf@gmail.com> wrote:\r\n> Just a few things I noticed while browsing through.\r\n>\r\n>\r\n> http://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go\r\n> File src/pkg/exp/types/expr.go (right):\r\n>\r\n> http://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go#newcode15\r\n> src/pkg/exp/types/expr.go:15: // TODO(gri) check that x is an int type\r\n> Not necessarily -- it could be a map index\r\n>\r\n> http://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/expr.go#newcode70\r\n> src/pkg/exp/types/expr.go:70: case token.LAND, token.LOR, token.NOT:\r\n> NOT is only unary last time I checked.\r\n>\r\n> http://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/stmt.go\r\n> File src/pkg/exp/types/stmt.go (right):\r\n>\r\n> http://codereview.appspot.com/6441129/diff/8009/src/pkg/exp/types/stmt.go#newcode70\r\n> src/pkg/exp/types/stmt.go:70: switch s.Tok {\r\n> I'm guessing you already considered this and decided against it:\r\n>\r\n> if token.ADD_ASSIGN <= op && op <= AND_NOT_ASSIGN {\r\n>     op -= token.AND_NOT_ASSIGN - token.ADD_ASSIGN\r\n> }\r\n>\r\n> http://codereview.appspot.com/6441129/\r\n",
			"disapproval": false,
			"date": "2012-08-14 22:44:36.431470",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"edsrzf@gmail.com",
				"axwalk@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/14 22:44:36, gri wrote:\n> Thanks for looking at it.\n> \n> Please note that this code is totally in flux. This is just a snapshot\n> for myself at the moment while I am pushing this forward. At the end\n> we will have a better understanding of the best and most efficient way\n> of doing things. And probably rewrite the code with that knowledge.\n> \n\nIs there a plan to push this soon since it is still incomplete anyway?",
			"disapproval": false,
			"date": "2012-08-25 08:29:42.283370",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am working actively on it. Once there are more pieces in place we will\r\nstart checking them in.\r\n\r\n- gri\r\n\r\n\r\nOn Sat, Aug 25, 2012 at 1:29 AM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> On 2012/08/14 22:44:36, gri wrote:\r\n>\r\n>> Thanks for looking at it.\r\n>>\r\n>\r\n>  Please note that this code is totally in flux. This is just a snapshot\r\n>> for myself at the moment while I am pushing this forward. At the end\r\n>> we will have a better understanding of the best and most efficient way\r\n>> of doing things. And probably rewrite the code with that knowledge.\r\n>>\r\n>\r\n>\r\n> Is there a plan to push this soon since it is still incomplete anyway?\r\n>\r\n> http://codereview.appspot.com/**6441129/<http://codereview.appspot.com/6441129/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-25 20:30:57.651530",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI: This was abandoned in favor of\r\n\r\nhttp://codereview.appspot.com/6490089/    staged review of first part\r\n\r\nand a non-advertised CL\r\n\r\nhttp://codereview.appspot.com/6497096    current snapshot\r\n\r\n- gri\r\n\r\n\r\n\r\n\r\nOn Fri, Sep 7, 2012 at 1:22 PM, <gri@golang.org> wrote:\r\n\r\n> *** Abandoned ***\r\n>\r\n> http://codereview.appspot.com/**6441129/<http://codereview.appspot.com/6441129/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-07 20:26:31.416550",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"edsrzf@gmail.com",
				"axwalk@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-07 20:22:55.741940",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6441129: exp/types: fill in more holes",
	"created": "2012-08-10 00:52:23.937910",
	"patchsets": [
		1,
		2001,
		1002,
		7001,
		7010,
		6009,
		7019,
		2003,
		5017,
		8009,
		8010,
		9032,
		15002,
		8011,
		7036,
		11003,
		17001,
		5033,
		12047,
		19001,
		22001,
		27001,
		30001,
		32001,
		28020,
		35020,
		32003,
		39002,
		40001,
		40002,
		28023,
		36022,
		28024
	],
	"modified": "2012-09-07 20:22:56.795290",
	"closed": true,
	"issue": 6441129
}