{
	"description": "go_spec: Fix Expression ebnf\n\nThe right operand of a binary Expression can also be an Expression.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "eag0628@gmail.com",
			"recipients": [
				"eag0628@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-13 12:30:40.153456",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 13, 2012 at 12:01, Maxim Pimenov <mpimenov@google.com> wrote:\n> What about 1*2 + 3*4?\n\nI believe precedence is handled separately, outside this grammar.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-13 17:07:26.499470",
			"approval": false
		},
		{
			"sender": "mpimenov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about 1*2 + 3*4?\n\nOn Mon, Feb 13, 2012 at 8:45 PM, Russ Cox <rsc@golang.org> wrote:\n\n> I don't think this is necessary.\n> If you have 1+2+3 it parses with the current rule as\n>\n> Expression (1+2) binary_op (+) UnaryExpr (3).\n>\n",
			"disapproval": false,
			"date": "2012-02-13 17:01:24.203117",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this is necessary.\nIf you have 1+2+3 it parses with the current rule as\n\nExpression (1+2) binary_op (+) UnaryExpr (3).\n",
			"disapproval": false,
			"date": "2012-02-13 16:45:39.554946",
			"approval": false
		},
		{
			"sender": "eag0628@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(sorry, forgot to cc to the list)\n\nFirst, go_spec.html is written for human read, not for program.\n\"Expression binary_op UnaryExpr\" will result surprise for human.\neven program, go.y, it also uses \u00a0\"Expression binary_op Expression\".\n\n\nOn Tue, Feb 14, 2012 at 1:07 AM, Russ Cox <rsc@golang.org> wrote:\n> On Mon, Feb 13, 2012 at 12:01, Maxim Pimenov <mpimenov@google.com> wrote:\n>> What about 1*2 + 3*4?\n>\n> I believe precedence is handled separately, outside this grammar.\n>\n\n1*2 + 3*4\n1<2 || 3>4\n\nBut human can't parse it by \u00a0\"Expression binary_op UnaryExpr\" in their brain.\n",
			"disapproval": false,
			"date": "2012-02-14 14:09:17.551383",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nLai Jiangshan <eag0628@gmail.com> writes:\n\n> 1*2 + 3*4\n> 1<2 || 3>4\n>\n> But human can't parse it by \u00a0\"Expression binary_op UnaryExpr\" in their brain.\n\n\nYou can parse it like this:\n\n           *\n         +   4\n       *   3\n     1   2\n\nAs Russ said, precedence is handled separately, in the \"Operator\nprecedence\" section.\n\nI don't feel strongly about this, but the current grammar does not look\nwrong to me.\n\nIan\n",
			"disapproval": false,
			"date": "2012-02-14 14:50:21.775945",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"eag0628@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:44:08.311874",
			"approval": false
		}
	],
	"owner_email": "eag0628@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Lai Jiangshan",
	"subject": "code review 5650074: go_spec: Fix Expression ebnf",
	"created": "2012-02-13 12:24:16.653045",
	"patchsets": [
		1,
		3,
		4001
	],
	"modified": "2012-06-03 04:44:08.312281",
	"closed": false,
	"issue": 5650074
}