{
	"description": "spec: clarify implementation restrictions on untyped floats\n\nDrop reference to \"machine type.\"  Specify that integer\noverflow must be an error.  Drop requirement that exponent\nmust be 128 bits--that's a lot.  Clarify that floating point\nexpressions may be rounded, including intermediate values.\n\nThis is a reworking of http://codereview.appspot.com/5577068/ .\n\nFixes issue 2789.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"r@google.com",
		"gri@golang.org",
		"ken@golang.org",
		"ken@google.com",
		"iant@google.com",
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Robert Griesemer <gri@golang.org> writes:\n\n>> 128 bits is plenty considering that only 64 bits can be exported\n>> into a run-time variable.\n>\n> It's not about what can be represented at run-time, but about how\n> quickly rounding errors in constant expressions can lead to programs\n> that one would expect to compile, but that don't. Admittedly, I am not\n> a numerics expert, but one would expect that choosing more bits\n> (especially since it's cheap) should ameliorate this.\n\nAdding more bits doesn't noticeably decrease rounding errors.  All you\nneed to avoid all rounding errors for most operations is two additional\nbits, one of which has to be sticky.  We aren't talking about doing a\nsine function, where more bits can make a significant difference; we're\nonly talking about the four basic math operations.  In the absence of a\nsticky bit, I think it's possible to construct cases where more bits\ndoes avoid a rounding error, but you have to set up the calculation very\ncarefully.\n\nObviously 128 bits is more than can be actually expressed in a Go\nprogram.  It's more than we need for somebody who needs precise floating\npoint numbers in their constant expressions.  I don't see a need to\nrequire compilers to support more than 128.  I don't think it will help\nany real programmers.  Let's not require more bits just because we can,\nor for symmetry reasons.  Let's do it if it makes sense.\n\nIan\n",
			"disapproval": false,
			"date": "2012-02-11 05:33:18.512733",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fine with me. But then perhaps we should indeed say that the exponent\nmust be at most 16bits (rather than 32).\n\n- gri\n\nOn Fri, Feb 10, 2012 at 9:33 PM, Ian Lance Taylor <iant@google.com> wrote:\n> Robert Griesemer <gri@golang.org> writes:\n>\n>>> 128 bits is plenty considering that only 64 bits can be exported\n>>> into a run-time variable.\n>>\n>> It's not about what can be represented at run-time, but about how\n>> quickly rounding errors in constant expressions can lead to programs\n>> that one would expect to compile, but that don't. Admittedly, I am not\n>> a numerics expert, but one would expect that choosing more bits\n>> (especially since it's cheap) should ameliorate this.\n>\n> Adding more bits doesn't noticeably decrease rounding errors. \u00a0All you\n> need to avoid all rounding errors for most operations is two additional\n> bits, one of which has to be sticky. \u00a0We aren't talking about doing a\n> sine function, where more bits can make a significant difference; we're\n> only talking about the four basic math operations. \u00a0In the absence of a\n> sticky bit, I think it's possible to construct cases where more bits\n> does avoid a rounding error, but you have to set up the calculation very\n> carefully.\n>\n> Obviously 128 bits is more than can be actually expressed in a Go\n> program. \u00a0It's more than we need for somebody who needs precise floating\n> point numbers in their constant expressions. \u00a0I don't see a need to\n> require compilers to support more than 128. \u00a0I don't think it will help\n> any real programmers. \u00a0Let's not require more bits just because we can,\n> or for symmetry reasons. \u00a0Let's do it if it makes sense.\n>\n> Ian\n",
			"disapproval": false,
			"date": "2012-02-11 05:46:44.007247",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/5002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/5002/doc/go_spec.html#newcode592\ndoc/go_spec.html:592: Implementation restriction: A compiler may implement numeric constants\nIs this an implementation restriction? It includes words like \"must\".\n\nhttp://codereview.appspot.com/5655049/diff/5002/doc/go_spec.html#newcode3577\ndoc/go_spec.html:3577: Implementation restriction: A compiler may round final and\nditto, kinda.",
			"disapproval": false,
			"date": "2012-02-12 11:07:16.779597",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "r@golang.org writes:\n\n> http://codereview.appspot.com/5655049/diff/5002/doc/go_spec.html\n> File doc/go_spec.html (right):\n>\n> http://codereview.appspot.com/5655049/diff/5002/doc/go_spec.html#newcode592\n> doc/go_spec.html:592: Implementation restriction: A compiler may\n> implement numeric constants\n> Is this an implementation restriction? It includes words like \"must\".\n>\n> http://codereview.appspot.com/5655049/diff/5002/doc/go_spec.html#newcode3577\n> doc/go_spec.html:3577: Implementation restriction: A compiler may round\n> final and\n> ditto, kinda.\n\nIt kind of goes both ways.  It's an implementation restriction in the\nsense that the implementation is permitted to put some restrictions on\nthe language.  But the description of those restrictions also puts\nlimits on the restrictions.  We're kind of saying \"the implementation\ndoesn't have to do all of the above, but it has to do at least this\nmuch.\"\n\nWith that in mind, I rewrote the text to try to say the same thing in a\ndifferent way.\n\nPTAL.\n\nIan\n",
			"disapproval": false,
			"date": "2012-02-12 19:06:30.374482",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-13 05:55:13.225494",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 12, 2012, at 5:03 PM, iant@golang.org wrote:\n\n> \n> http://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html\n> File doc/go_spec.html (right):\n> \n> http://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode598\n> doc/go_spec.html:598: <li>Represent integer values with at least 256\n> bits.</li>\n> On 2012/02/12 20:26:57, r wrote:\n>> weird. some comments i wrote in the previous round were dropped here.\n> i'll try\n>> again.\n> \n>> s/Represent/Evaluate/ ?\n>> s/values/constant expressions/?\n> \n>> as written, it seems too vague, free of context, and open to\n> interpretation.\n>> since we're locking down the restrictions on the compiler, i want the\n> words to\n>> be clear.\n> \n> This part of the spec is about constants, not about constant\n> expressions.  That's why I am using words like \"represent\" and \"value\"\n> here.  If you like I can pull the later bit about expressions in here as\n> well.\n\nMy objection is that \"represent values\" feels out of place, even misleading, in the middle of a section about constants. Moreover, the real issue isn't how constants are represented but how they are evaluated when combined into expressions.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-02-13 01:24:51.523979",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 13, 2012, at 2:42 PM, rsc@golang.org wrote:\n> \n> s/values/constants/?\n> \n> Maybe add at the end\n> \n> \"These requirements apply both to literal constants and to the result of\n> evaluating constant expressions.\"\n\nthese edits would address my concerns\n\n",
			"disapproval": false,
			"date": "2012-02-13 03:48:51.950625",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: remyoudompheng),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-10 04:38:23.346543",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode598\ndoc/go_spec.html:598: <li>Represent integer values with at least 256 bits.</li>\nweird. some comments i wrote in the previous round were dropped here. i'll try again.\n\ns/Represent/Evaluate/ ?\ns/values/constant expressions/?\n\nas written, it seems too vague, free of context, and open to interpretation. since we're locking down the restrictions on the compiler, i want the words to be clear.",
			"disapproval": false,
			"date": "2012-02-12 20:26:57.345708",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode598\ndoc/go_spec.html:598: <li>Represent integer values with at least 256 bits.</li>\n> This part of the spec is about constants, not about constant expressions. \n> That's why I am using words like \"represent\" and \"value\" here.  If you like I\n> can pull the later bit about expressions in here as well.\n\ns/values/constants/?\n\nMaybe add at the end\n\n\"These requirements apply both to literal constants and to the result of evaluating constant expressions.\"",
			"disapproval": false,
			"date": "2012-02-13 03:42:54.133326",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Feb 13, 2012 at 10:10 AM,  <iant@golang.org> wrote:\n> Any last comments from anybody on the current text?\n>\n> http://codereview.appspot.com/5655049/\n",
			"disapproval": false,
			"date": "2012-02-13 18:12:14.455523",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/1002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/1002/doc/go_spec.html#newcode601\ndoc/go_spec.html:601: floating-point or complex value precisely, it may round the value to\nOn 2012/02/10 06:10:33, rsc wrote:\n> s/may/will/\n> \n> (Unless there is something else we want to allow too?)\n\nDone.",
			"disapproval": false,
			"date": "2012-02-10 06:21:50.331034",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"iant@google.com",
				"ken@golang.org",
				"ken@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the only reason for significantly more than the\nnative FP is for funny constant expressions involving\nsubtract and/or shift.\n\ni think 128 is a little small. as i read the code,\ngc uses 29*16 bits (=464). it used to be smaller\nand i ran into some problems and increased it.\nit was a trivial #define, so i probably over did it.\n\ni guess i would vote for >=256\nas long as FP is 64.",
			"disapproval": false,
			"date": "2012-02-11 20:36:42.672282",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode608\ndoc/go_spec.html:608: complex value due to overflow.</li>\nagain, underflow?\n1e-40000: is that an error or just zero?\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode3588\ndoc/go_spec.html:3588: expressions; see the implementation restriction in the section\nthese words seem clear to me.",
			"disapproval": false,
			"date": "2012-02-12 20:24:33.634050",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html#newcode598\ndoc/go_spec.html:598: integer value, it will give an error.  If the compiler is unable to\nto represent an integer value precisely\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html#newcode599\ndoc/go_spec.html:599: precisely represent a floating-point or complex value, it may give an\nditto.\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html#newcode600\ndoc/go_spec.html:600: error or it may round the value.\noverflow/underflow are not rounded. there's a little more going on here.\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html#newcode3578\ndoc/go_spec.html:3578: This rounding may cause a floating-point expression to not convert to\nto fail to convert\n\nor avoid passive\n\nmay prevent a floating-point expression from converting to integer type",
			"disapproval": false,
			"date": "2012-02-10 04:44:48.540320",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but i would like to hear from ken and gri",
			"disapproval": false,
			"date": "2012-02-10 06:11:11.448405",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Based on Ken's comment I bumped everything to 256 bits.  I didn't see any reason to change the floating point to 256 without changing the integer also.  Both gc and gccgo use more than 256 bits for integers anyhow.\n\nEverybody OK with this version?",
			"disapproval": false,
			"date": "2012-02-12 04:44:10.754796",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode608\ndoc/go_spec.html:608: complex value due to overflow.</li>\nOn 2012/02/13 01:03:44, iant wrote:\n> On 2012/02/12 20:24:33, r wrote:\n> > again, underflow?\n> > 1e-40000: is that an error or just zero?\n> \n> I think it's just zero.\n\nLet me clarify that: I think an underflow is just zero.  The value 1e-40000 is required to be representable as a floating point number, since it only requires 1 bit of mantissa and 16 bits of exponent.",
			"disapproval": false,
			"date": "2012-02-13 01:19:59.650801",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ad50b745d9ae ***\n\nspec: clarify implementation restrictions on untyped floats\n\nDrop reference to \"machine type.\"  Specify that integer\noverflow must be an error.  Drop requirement that exponent\nmust be 128 bits--that's a lot.  Clarify that floating point\nexpressions may be rounded, including intermediate values.\n\nThis is a reworking of http://codereview.appspot.com/5577068/ .\n\nFixes issue 2789.\n\nR=r, rsc, r, gri, ken, ken, iant\nCC=golang-dev, remyoudompheng\nhttp://codereview.appspot.com/5655049",
			"disapproval": false,
			"date": "2012-02-13 19:26:02.537869",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> +<p>\n> +This rounding may cause a floating-point expression to not convert to\n> +integer type, even if it would convert if the expression were\n> +calculated using infinite precision.\n> +</p>\n\nThis rounding may cause a floating-point constant expression\nto be invalid in an integer context, even if it would be integral\nwhen calculated using infinite precision.\n",
			"disapproval": false,
			"date": "2012-02-10 04:45:38.285759",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-12 05:33:20.692579",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds good.\n\nPTAL.\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode598\ndoc/go_spec.html:598: <li>Represent integer values with at least 256 bits.</li>\nOn 2012/02/13 03:42:54, rsc wrote:\n> > This part of the spec is about constants, not about constant expressions. \n> > That's why I am using words like \"represent\" and \"value\" here.  If you like I\n> > can pull the later bit about expressions in here as well.\n> \n> s/values/constants/?\n> \n> Maybe add at the end\n> \n> \"These requirements apply both to literal constants and to the result of\n> evaluating constant expressions.\"\n\nDone.",
			"disapproval": false,
			"date": "2012-02-13 05:53:03.565811",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 10, 2012, at 3:45 PM, Russ Cox wrote:\n\n>> +<p>\n>> +This rounding may cause a floating-point expression to not convert to\n>> +integer type, even if it would convert if the expression were\n>> +calculated using infinite precision.\n>> +</p>\n> \n> This rounding may cause a floating-point constant expression\n> to be invalid in an integer context, even if it would be integral\n> when calculated using infinite precision.\n\ngood\n\n",
			"disapproval": false,
			"date": "2012-02-10 04:48:43.903672",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/7001/doc/go_spec.html#newcode596\ndoc/go_spec.html:596: value, with a mantissa of at least 128 bits and an exponent of at\nsigned exponent?\n(To make clear that the sign bit can be one of the 32.)\n\nhttp://codereview.appspot.com/5655049/diff/7001/doc/go_spec.html#newcode601\ndoc/go_spec.html:601: floating-point or complex value precisely, it may give an error or it\nI think may give an error is too much here.  We already defined the error for overflow, which is the important one.  The others should round to the nearest floating-point value that it can represent.  You don't want const f = 0.1\nto be a compiler error.  \n\n... it may round the value to the nearest value it can represent.",
			"disapproval": false,
			"date": "2012-02-10 05:52:43.120599",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5655049/diff/1002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/1002/doc/go_spec.html#newcode601\ndoc/go_spec.html:601: floating-point or complex value precisely, it may round the value to\ns/may/will/\n\n(Unless there is something else we want to allow too?)",
			"disapproval": false,
			"date": "2012-02-10 06:10:33.251752",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode598\ndoc/go_spec.html:598: <li>Represent integer values with at least 256 bits.</li>\nOn 2012/02/12 20:26:57, r wrote:\n> weird. some comments i wrote in the previous round were dropped here. i'll try\n> again.\n> \n> s/Represent/Evaluate/ ?\n> s/values/constant expressions/?\n> \n> as written, it seems too vague, free of context, and open to interpretation.\n> since we're locking down the restrictions on the compiler, i want the words to\n> be clear.\n\nThis part of the spec is about constants, not about constant expressions.  That's why I am using words like \"represent\" and \"value\" here.  If you like I can pull the later bit about expressions in here as well.\n\nhttp://codereview.appspot.com/5655049/diff/2005/doc/go_spec.html#newcode608\ndoc/go_spec.html:608: complex value due to overflow.</li>\nOn 2012/02/12 20:24:33, r wrote:\n> again, underflow?\n> 1e-40000: is that an error or just zero?\n\nI think it's just zero.",
			"disapproval": false,
			"date": "2012-02-13 01:03:44.249123",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any last comments from anybody on the current text?",
			"disapproval": false,
			"date": "2012-02-13 18:10:15.958894",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html#newcode598\ndoc/go_spec.html:598: integer value, it will give an error.  If the compiler is unable to\nOn 2012/02/10 04:44:48, r wrote:\n> to represent an integer value precisely\n\nDone.\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html#newcode599\ndoc/go_spec.html:599: precisely represent a floating-point or complex value, it may give an\nOn 2012/02/10 04:44:48, r wrote:\n> ditto.\n\nDone.\n\nhttp://codereview.appspot.com/5655049/diff/1/doc/go_spec.html#newcode600\ndoc/go_spec.html:600: error or it may round the value.\nOn 2012/02/10 04:44:48, r wrote:\n> overflow/underflow are not rounded. there's a little more going on here.\n\nUnderflow can round to zero; I don't think there is anything else to be said about that.  Added a clause saying that overflow must give an error.",
			"disapproval": false,
			"date": "2012-02-10 05:47:33.424208",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/7001/doc/go_spec.html#newcode596\ndoc/go_spec.html:596: value, with a mantissa of at least 128 bits and an exponent of at\nOn 2012/02/10 05:52:43, rsc wrote:\n> signed exponent?\n> (To make clear that the sign bit can be one of the 32.)\n\nDone.\n\nhttp://codereview.appspot.com/5655049/diff/7001/doc/go_spec.html#newcode601\ndoc/go_spec.html:601: floating-point or complex value precisely, it may give an error or it\nOn 2012/02/10 05:52:43, rsc wrote:\n> I think may give an error is too much here.  We already defined the error for\n> overflow, which is the important one.  The others should round to the nearest\n> floating-point value that it can represent.  You don't want const f = 0.1\n> to be a compiler error.  \n> \n> ... it may round the value to the nearest value it can represent.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-10 06:08:44.941962",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5655049/diff/4/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5655049/diff/4/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of February 9, 2012\"\nset to current date\n\nhttp://codereview.appspot.com/5655049/diff/4/doc/go_spec.html#newcode596\ndoc/go_spec.html:596: value, with a mantissa of at least 128 bits and a signed exponent of\ns/128/256/\n\nFor one, our own\n\nmath.E = 2.71828182845904523536028747135266249775724709369995957496696763\n\nappears to require 208 bits for the representation of the mantissa (just run this:\n\npackage main\nimport \"math/big\"\nfunc main() {\n\tvar x big.Int\n\tx.SetString(\"271828182845904523536028747135266249775724709369995957496696763\", 0)\n\tprintln(x.BitLen())\n}\n\n).\n\nAlso, 256 bits strikes a better balance with the the exponent of 32 bits; for instance the IEEE 128 bit floats (1+112bit signficand) have a 15bit exponent (biased).\n\nA compiler will have to use a library/customized code anyway, and making the mantissa a bit bigger it not going to be a hardship.",
			"disapproval": false,
			"date": "2012-02-10 18:37:24.956290",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> s/128/256/\n\nI disagree.\n\n> For one, our own\n>\n> math.E =\n> 2.71828182845904523536028747135266249775724709369995957496696763\n>\n> appears to require 208 bits for the representation of the mantissa (just\n> run this:\n\nThat constant was supposed to be more precise than necessary.\nIf constants are 256 bits internally, I'll have to add more digits.\n128 bits is plenty considering that only 64 bits can be exported\ninto a run-time variable.\n\n> Also, 256 bits strikes a better balance with the the exponent of 32\n> bits; for instance the IEEE 128 bit floats (1+112bit signficand) have a\n> 15bit exponent (biased).\n\nThere is no requirement that these be proportional.\n32 bits of exponent is almost certainly overkill; I don't\nthink we have to overkill the precision to compensate.\nIf balance is a concern, I'd rather cut the exponent\nrequirement to 16 bits.\n\n> A compiler will have to use a library/customized code anyway, and making\n> the mantissa a bit bigger it not going to be a hardship.\n\nI believe that right now gcc uses 128-bit mantissas.\nPart of the goal here is to assume that what the compilers\nare already doing is reasonable and define bounds on\nthe implementation that are already satisfied.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-10 18:58:01.350332",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 10, 2012 at 10:58 AM, Russ Cox <rsc@golang.org> wrote:\n>> s/128/256/\n>\n> I disagree.\n>\n>> For one, our own\n>>\n>> math.E =\n>> 2.71828182845904523536028747135266249775724709369995957496696763\n>>\n>> appears to require 208 bits for the representation of the mantissa (just\n>> run this:\n>\n> That constant was supposed to be more precise than necessary.\n> If constants are 256 bits internally, I'll have to add more digits.\n\nSure, but I thought 6g is already using more than 128bits already.\n\n> 128 bits is plenty considering that only 64 bits can be exported\n> into a run-time variable.\n\nIt's not about what can be represented at run-time, but about how\nquickly rounding errors in constant expressions can lead to programs\nthat one would expect to compile, but that don't. Admittedly, I am not\na numerics expert, but one would expect that choosing more bits\n(especially since it's cheap) should ameliorate this.\n\n>\n>> Also, 256 bits strikes a better balance with the the exponent of 32\n>> bits; for instance the IEEE 128 bit floats (1+112bit signficand) have a\n>> 15bit exponent (biased).\n>\n> There is no requirement that these be proportional.\n> 32 bits of exponent is almost certainly overkill; I don't\n> think we have to overkill the precision to compensate.\n> If balance is a concern, I'd rather cut the exponent\n> requirement to 16 bits.\n\nI agree that 32bits is overkill (and if 128 is the mantissa, a 16bit\nexponent should be fine, but it's not far away from 128bit floats).\n\n>\n>> A compiler will have to use a library/customized code anyway, and making\n>> the mantissa a bit bigger it not going to be a hardship.\n>\n> I believe that right now gcc uses 128-bit mantissas.\n> Part of the goal here is to assume that what the compilers\n> are already doing is reasonable and define bounds on\n> the implementation that are already satisfied.\n\nAccording to Ian, changing to 256bits would not be hard.\n- gri\n>\n> Russ\n",
			"disapproval": false,
			"date": "2012-02-10 19:15:06.404005",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 10, 2012 at 14:15, Robert Griesemer <gri@golang.org> wrote:\n> I agree that 32bits is overkill (and if 128 is the mantissa, a 16bit\n> exponent should be fine, but it's not far away from 128bit floats).\n\nBut we don't have 128-bit floats.  If we were to add them to the\nlanguage, we could update this text at the same time.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-10 19:15:52.411793",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-13 18:36:08.688749",
			"approval": true
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"ken@golang.org",
				"ken@google.com",
				"iant@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm",
			"disapproval": false,
			"date": "2012-02-13 19:22:57.934532",
			"approval": true
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 5655049: spec: clarify implementation restrictions on untyped floats",
	"created": "2012-02-10 04:38:15.361564",
	"patchsets": [
		1,
		7001,
		1002,
		4,
		5002,
		2005,
		9,
		3008
	],
	"modified": "2012-02-13 19:26:05.399536",
	"closed": true,
	"issue": 5655049
}