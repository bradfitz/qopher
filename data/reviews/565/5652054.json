{
	"description": "time: improve commentary about standard time and formatting/parsing\n\nFixes issue 2965.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-10 02:10:57.479027",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Fri, Feb 10, 2012 at 1:10 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> time: improve commentary about standard time and formatting/parsing\n>\n> Fixes issue 2965.\n>\n> Please review this at http://codereview.appspot.com/**5652054/<http://codereview.appspot.com/5652054/>\n>\n> Affected files:\n>  M src/pkg/time/format.go\n>\n>\n> Index: src/pkg/time/format.go\n> ==============================**==============================**=======\n> --- a/src/pkg/time/format.go\n> +++ b/src/pkg/time/format.go\n> @@ -16,11 +16,13 @@\n>\n>  // These are predefined layouts for use in Time.Format.\n>  // The standard time used in the layouts is:\n> -//     Mon Jan 2 15:04:05 MST 2006  (MST is GMT-0700)\n> -// which is Unix time 1136243045.\n> -// (Think of it as 01/02 03:04:05PM '06 -0700.)\n> -// To define your own format, write down what the standard\n> -// time would look like formatted your way.\n> +//     Mon Jan 2 15:04:05 MST 2006\n> +// which is Unix time 1136243045. Since MST is GMT-0700,\n> +// the standard time can be thought of as\n> +//     01/02 03:04:05PM '06 -0700\n> +// To define your own format, write down what the standard time would look\n> +// like formatted your way; see the values of constants like ANSIC,\n> +// StampMicro or Kitchen for examples.\n>  //\n>  // Within the format string, an underscore _ represents a space that may\n> be\n>  // replaced by a digit if the following number (a day) has two digits; for\n> @@ -359,10 +361,12 @@\n>\n>  // Format returns a textual representation of the time value formatted\n>  // according to layout.  The layout defines the format by showing the\n> -// representation of a standard time, which is then used to describe\n> -// the time to be formatted.  Predefined layouts ANSIC, UnixDate,\n> -// RFC3339 and others describe standard representations. For more\n> -// information about the formats, see the documentation for ANSIC.\n> +// representation of the standard time,\n> +//     Mon Jan 2 15:04:05 -0700 MST 2006\n> +// which is then used to describe the time to be formatted. Predefined\n> +// layouts ANSIC, UnixDate, RFC3339 and others describe standard\n> +// representations. For more information about the formats and the\n> +// definition of the standard time, see the documentation for ANSIC.\n>  func (t Time) Format(layout string) string {\n>        var (\n>                year  int = -1\n> @@ -605,13 +609,15 @@\n>  }\n>\n>  // Parse parses a formatted string and returns the time value it\n> represents.\n> -// The layout defines the format by showing the representation of a\n> standard\n> -// time, which is then used to describe the string to be parsed.\n>  Predefined\n> -// layouts ANSIC, UnixDate, RFC3339 and others describe standard\n> -// representations.For more information about the formats, see the\n> -// documentation for ANSIC.\n> +// The layout defines the format by showing the representation of the\n> +// standard time,\n> +//     Mon Jan 2 15:04:05 -0700 MST 2006\n> +// which is then used to describe the string to be parsed. Predefined\n> layouts\n> +// ANSIC, UnixDate, RFC3339 and others describe standard representations.\n> For\n> +// more information about the formats and the definition of the standard\n> +// time, see the documentation for ANSIC.\n>  //\n> -// Elements omitted from the value are assumed to be zero, or when\n> +// Elements omitted from the value are assumed to be zero or, when\n>  // zero is impossible, one, so parsing \"3:04pm\" returns the time\n>  // corresponding to Jan 1, year 0, 15:04:00 UTC.\n>  // Years must be in the range 0000..9999. The day of the week is checked\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-10 02:49:58.136840",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=66559e4f816e ***\n\ntime: improve commentary about standard time and formatting/parsing\n\nFixes issue 2965.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5652054",
			"disapproval": false,
			"date": "2012-02-10 02:52:26.777438",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5652054: time: improve commentary about standard time and format...",
	"created": "2012-02-10 02:10:48.061060",
	"patchsets": [
		1,
		4001
	],
	"modified": "2012-02-10 02:52:28.920947",
	"closed": true,
	"issue": 5652054
}