{
	"description": "cmd/gc: suspend safemode during typecheck of inlined bodies.\n\nShould be obviously correct.  Includes minimal test case.\nA future CL should clear up the logic around typecheckok and importpkg != nil someday.",
	"cc": [
		"rsc@golang.org",
		"dsymonds@golang.org",
		"rsc@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can't comment on the correctness of the gc change, but I'm glad to\nsee some test cases. Thanks!\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-10 12:49:19.780931",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "btw the nousesafe test isn't very useful, i could add something that\nchecks that an unsafe.Pointer leaking from an API is caught, even if\nthat only happens in an inlined body.\n\nbut maybe we should first run this on the appengine test suite.\n\nOn Fri, Feb 10, 2012 at 20:35, Luuk van Dijk <lvd@google.com> wrote:\n> On Fri, Feb 10, 2012 at 20:34, Luuk van Dijk <lvd@google.com> wrote:\n>> On Fri, Feb 10, 2012 at 18:57, Russ Cox <rsc@google.com> wrote:\n>>> On Fri, Feb 10, 2012 at 12:30, Luuk van Dijk <lvd@google.com> wrote:\n>>>> this will trigger from export or during lazy checking (default)\n>>>> anyway, but it's harmless, because any violations will have been\n>>>> caught during typecheck of the original body. \u00a0to make that not blow\n>>>> up will make things less obviously correct.\n>>>\n>>> I disagree. \u00a0You need a reason to turn off the safemode flag.\n>>> That reason is (supposedly) that the code has come from an\n>>> imported package.\n>>\n>> or cloned from the body a local function that has already been\n>> typechecked with safemode unchanged.\n>>\n>> i pulled the comment from mkinl up to clarify that\n>>\n>>>\u00a0The code should either assert this with a\n>>> fatal like I suggested or it should add a test and not turn off\n>>> the flag if this is false.\n>>\n>> sure, i could add all kinds of hair to make typecheck sometimes work\n>\n> plus. fn->sym->pkg can be anything., so it's not usable for a test like that.\n>\n>> and sometimes not and sometimes fatal() and sometimes not, but it is\n>> already a mess with far too many globals (typecheckok is set to true\n>> during imports to make the functype() calls in go.y not crash for\n>> example, and as far as i can tell thats the only reason) and the logic\n>> for relying on importpkg being set was also flawed, and you have a\n>> comment in typecheck that checking for importpkg is a hack, yet when i\n>> tried to clean that up a bit in the previous attempt your complaint\n>> was that it was not obvious that it was correct. and you were right.\n>>\n>> so now i added a test that hopefully covers just the error we saw, and\n>> made the code such that it is obvious no /new/ uses of unsafe.Pointer\n>> can slip through because there is no way that the two recursive copies\n>> in inl, the one from caninl and the one from mkinl can introduce an\n>> unsafe.Pointer that wasn't already in the body that was already\n>> typechecked.\n>>\n>> all the other comments are addressed, let me upload.\n>>\n>>>\n>>> Russ\n",
			"disapproval": false,
			"date": "2012-02-10 19:43:53.914646",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 10, 2012 at 12:30, Luuk van Dijk <lvd@google.com> wrote:\n> this will trigger from export or during lazy checking (default)\n> anyway, but it's harmless, because any violations will have been\n> caught during typecheck of the original body. \u00a0to make that not blow\n> up will make things less obviously correct.\n\nI disagree.  You need a reason to turn off the safemode flag.\nThat reason is (supposedly) that the code has come from an\nimported package.  The code should either assert this with a\nfatal like I suggested or it should add a test and not turn off\nthe flag if this is false.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-10 17:57:53.713499",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 10, 2012 at 20:34, Luuk van Dijk <lvd@google.com> wrote:\n> On Fri, Feb 10, 2012 at 18:57, Russ Cox <rsc@google.com> wrote:\n>> On Fri, Feb 10, 2012 at 12:30, Luuk van Dijk <lvd@google.com> wrote:\n>>> this will trigger from export or during lazy checking (default)\n>>> anyway, but it's harmless, because any violations will have been\n>>> caught during typecheck of the original body. \u00a0to make that not blow\n>>> up will make things less obviously correct.\n>>\n>> I disagree. \u00a0You need a reason to turn off the safemode flag.\n>> That reason is (supposedly) that the code has come from an\n>> imported package.\n>\n> or cloned from the body a local function that has already been\n> typechecked with safemode unchanged.\n>\n> i pulled the comment from mkinl up to clarify that\n>\n>>\u00a0The code should either assert this with a\n>> fatal like I suggested or it should add a test and not turn off\n>> the flag if this is false.\n>\n> sure, i could add all kinds of hair to make typecheck sometimes work\n\nplus. fn->sym->pkg can be anything., so it's not usable for a test like that.\n\n> and sometimes not and sometimes fatal() and sometimes not, but it is\n> already a mess with far too many globals (typecheckok is set to true\n> during imports to make the functype() calls in go.y not crash for\n> example, and as far as i can tell thats the only reason) and the logic\n> for relying on importpkg being set was also flawed, and you have a\n> comment in typecheck that checking for importpkg is a hack, yet when i\n> tried to clean that up a bit in the previous attempt your complaint\n> was that it was not obvious that it was correct. and you were right.\n>\n> so now i added a test that hopefully covers just the error we saw, and\n> made the code such that it is obvious no /new/ uses of unsafe.Pointer\n> can slip through because there is no way that the two recursive copies\n> in inl, the one from caninl and the one from mkinl can introduce an\n> unsafe.Pointer that wasn't already in the body that was already\n> typechecked.\n>\n> all the other comments are addressed, let me upload.\n>\n>>\n>> Russ\n",
			"disapproval": false,
			"date": "2012-02-10 19:35:20.887111",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6b9c66081c84 ***\n\ncmd/gc: suspend safemode during typecheck of inlined bodies.\n\nShould be obviously correct.  Includes minimal test case.\nA future CL should clear up the logic around typecheckok and importpkg != nil someday.\n\nR=rsc, dsymonds, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5652057",
			"disapproval": false,
			"date": "2012-02-10 21:51:00.773444",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5652057/diff/5001/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5652057/diff/5001/src/cmd/gc/inl.c#newcode68\nsrc/cmd/gc/inl.c:68: \nPlease add\n\nif(fn->sym->pkg == nil || fn->sym->pkg == localpkg)\n    fatal(\"typecheckinl of code in local package\");\n\nhttp://codereview.appspot.com/5652057/diff/5001/test/safe/nousesafe.go\nFile test/safe/nousesafe.go (right):\n\nhttp://codereview.appspot.com/5652057/diff/5001/test/safe/nousesafe.go#newcode1\ntest/safe/nousesafe.go:1: // $G $D/pkg.go && pack q pkg.a pkg.$A 2> /dev/null && rm pkg.$A && pack rg pkg.a && errchk $G -I. -u $D/main.go && rm -f pkg.a\nIs there a reason to use q here?  The usual process is just\n\n// $G $D/pkg.go && pack grc pkg.a pkg.$A...\n\nAlso, where is the safe mode override?  I don't see \na pack S here, so I don't understand why main.go is\nallowed to import the unsafe package pkg.a.\n\n// $G $D/pkg.go && pack grcS pkg.a pkg.$A && errchk $G -I. -u $D/main.go\n// rm pkg.a\n\n?",
			"disapproval": false,
			"date": "2012-02-10 17:16:41.400962",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 10, 2012 at 18:57, Russ Cox <rsc@google.com> wrote:\n> On Fri, Feb 10, 2012 at 12:30, Luuk van Dijk <lvd@google.com> wrote:\n>> this will trigger from export or during lazy checking (default)\n>> anyway, but it's harmless, because any violations will have been\n>> caught during typecheck of the original body. \u00a0to make that not blow\n>> up will make things less obviously correct.\n>\n> I disagree. \u00a0You need a reason to turn off the safemode flag.\n> That reason is (supposedly) that the code has come from an\n> imported package.\n\nor cloned from the body a local function that has already been\ntypechecked with safemode unchanged.\n\ni pulled the comment from mkinl up to clarify that\n\n>\u00a0The code should either assert this with a\n> fatal like I suggested or it should add a test and not turn off\n> the flag if this is false.\n\nsure, i could add all kinds of hair to make typecheck sometimes work\nand sometimes not and sometimes fatal() and sometimes not, but it is\nalready a mess with far too many globals (typecheckok is set to true\nduring imports to make the functype() calls in go.y not crash for\nexample, and as far as i can tell thats the only reason) and the logic\nfor relying on importpkg being set was also flawed, and you have a\ncomment in typecheck that checking for importpkg is a hack, yet when i\ntried to clean that up a bit in the previous attempt your complaint\nwas that it was not obvious that it was correct. and you were right.\n\nso now i added a test that hopefully covers just the error we saw, and\nmade the code such that it is obvious no /new/ uses of unsafe.Pointer\ncan slip through because there is no way that the two recursive copies\nin inl, the one from caninl and the one from mkinl can introduce an\nunsafe.Pointer that wasn't already in the body that was already\ntypechecked.\n\nall the other comments are addressed, let me upload.\n\n>\n> Russ\n",
			"disapproval": false,
			"date": "2012-02-10 19:34:03.694787",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "getting very close\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode56\nsrc/cmd/gc/inl.c:56: // This little beauty seems to do the trick, but it would be nice to nail it down.\nWhat needs nailing down?  This looks right to me.\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode58\nsrc/cmd/gc/inl.c:58: fnpkg(Node *fn) {\n{ on next line\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode59\nsrc/cmd/gc/inl.c:59: Type *t;\ns/t/rcvr/ please\nMatches other code and also says what is going on.\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode62\nsrc/cmd/gc/inl.c:62: t = getthisx(fn->type)->type->type;\nif(fn->type->thistuple) {\n   // method\n   ...\n}\n\n// func\nreturn fn->sym->pkg;\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode66\nsrc/cmd/gc/inl.c:66: fatal(\"t with no sym: [%S] %lN  (%T)\", fn->sym, fn, t);\ns/t/rcvr/\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode84\nsrc/cmd/gc/inl.c:84: if (fnpkg(fn) == localpkg)\nif(fnpkg(fn) == nil || fnpkg(fn) == localpkg)\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode85\nsrc/cmd/gc/inl.c:85: fatal(\"typecheckinl on local function %S %lN\", fn->sym, fn);\nprobably drop the %S and fn->sym,\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode87\nsrc/cmd/gc/inl.c:87: if (debug['m']>2)\nPlease move this up above the fnpkg check, so that the fnpkg check is right next to the disabling of safe mode.\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode90\nsrc/cmd/gc/inl.c:90: // For local functions, the original body will have been checked with safemode,\nThis comment doesn't need to be so long anymore.\n\n// typecheckinl is only used for imported functions;\n// their bodies may refer to unsafe as long as the package\n// was marked safe during import (which was checked then).\nif(fnpkg(fn) == localpkg || fnpkg(fn) == nil)\n    fatal(\"typecheckinl of local function %lN\", fn);\nsave_safemode = safemode;\nsafemode = 0;\nsavefn = curfn;\ncurfn = fn;\n...\n\nhttp://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode486\nsrc/cmd/gc/inl.c:486: mkinlcall(Node **np, Node *fn)\nPlease rename this to mkinlcall1.  Then introduce a wrapper\nto deal with safemode and make very clear that we're not \nforgetting to restore it.  The restore is too far away right now.\n\nstatic void\nmkinlcall(Node **np, Node *fn)\n{\n    int save_safemode;\n\n    // <same comment as in typecheckinl>\n    save_safemode = safemode;\n    if(fnpkg(fn) != localpkg && fnpkg(fn) != nil)\n        safemode = 0;\n    mkinlcall1(np, fn);\n    safemode = save_safemode;\n}",
			"disapproval": false,
			"date": "2012-02-10 21:01:50.108268",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dsymonds@golang.org, rsc@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-10 19:42:15.085926",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 10, 2012 at 22:28,  <rsc@google.com> wrote:\n> LGTM\n>\n> Obviously correct. \u00a0:-)\n\nprobably.\n\n>\n>\n>\n> http://codereview.appspot.com/5652057/diff/4/src/cmd/gc/inl.c\n> File src/cmd/gc/inl.c (right):\n>\n> http://codereview.appspot.com/5652057/diff/4/src/cmd/gc/inl.c#newcode489\n> src/cmd/gc/inl.c:489: // typecheckinl is only used for imported\n> functions;\n> delete comment here\n>\n> http://codereview.appspot.com/5652057/diff/4/src/cmd/gc/inl.c#newcode500\n> src/cmd/gc/inl.c:500: save_safemode = safemode;\n> move comment here, where the logic it describes is\n>\n> // imported functions may refer to unsafe as long as the\n> // package was marked safe during import (already checked).\n>\n> http://codereview.appspot.com/5652057/\n",
			"disapproval": false,
			"date": "2012-02-10 21:45:24.837479",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all done\n\nOn Fri, Feb 10, 2012 at 22:01,  <rsc@google.com> wrote:\n> getting very close\n>\n>\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c\n> File src/cmd/gc/inl.c (right):\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode56\n> src/cmd/gc/inl.c:56: // This little beauty seems to do the trick, but it\n> would be nice to nail it down.\n> What needs nailing down? \u00a0This looks right to me.\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode58\n> src/cmd/gc/inl.c:58: fnpkg(Node *fn) {\n> { on next line\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode59\n> src/cmd/gc/inl.c:59: Type *t;\n> s/t/rcvr/ please\n> Matches other code and also says what is going on.\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode62\n> src/cmd/gc/inl.c:62: t = getthisx(fn->type)->type->type;\n> if(fn->type->thistuple) {\n> \u00a0 // method\n> \u00a0 ...\n> }\n>\n> // func\n> return fn->sym->pkg;\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode66\n> src/cmd/gc/inl.c:66: fatal(\"t with no sym: [%S] %lN \u00a0(%T)\", fn->sym, fn,\n> t);\n> s/t/rcvr/\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode84\n> src/cmd/gc/inl.c:84: if (fnpkg(fn) == localpkg)\n> if(fnpkg(fn) == nil || fnpkg(fn) == localpkg)\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode85\n> src/cmd/gc/inl.c:85: fatal(\"typecheckinl on local function %S %lN\",\n> fn->sym, fn);\n> probably drop the %S and fn->sym,\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode87\n> src/cmd/gc/inl.c:87: if (debug['m']>2)\n> Please move this up above the fnpkg check, so that the fnpkg check is\n> right next to the disabling of safe mode.\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode90\n> src/cmd/gc/inl.c:90: // For local functions, the original body will have\n> been checked with safemode,\n> This comment doesn't need to be so long anymore.\n>\n> // typecheckinl is only used for imported functions;\n> // their bodies may refer to unsafe as long as the package\n> // was marked safe during import (which was checked then).\n> if(fnpkg(fn) == localpkg || fnpkg(fn) == nil)\n> \u00a0 \u00a0fatal(\"typecheckinl of local function %lN\", fn);\n> save_safemode = safemode;\n>\n> safemode = 0;\n> savefn = curfn;\n> curfn = fn;\n> ...\n>\n> http://codereview.appspot.com/5652057/diff/1019/src/cmd/gc/inl.c#newcode486\n> src/cmd/gc/inl.c:486: mkinlcall(Node **np, Node *fn)\n> Please rename this to mkinlcall1. \u00a0Then introduce a wrapper\n> to deal with safemode and make very clear that we're not\n> forgetting to restore it. \u00a0The restore is too far away right now.\n>\n>\n> static void\n> mkinlcall(Node **np, Node *fn)\n> {\n> \u00a0 \u00a0int save_safemode;\n>\n> \u00a0 \u00a0// <same comment as in typecheckinl>\n> \u00a0 \u00a0save_safemode = safemode;\n> \u00a0 \u00a0if(fnpkg(fn) != localpkg && fnpkg(fn) != nil)\n> \u00a0 \u00a0 \u00a0 \u00a0safemode = 0;\n> \u00a0 \u00a0mkinlcall1(np, fn);\n> \u00a0 \u00a0safemode = save_safemode;\n> }\n>\n> http://codereview.appspot.com/5652057/\n",
			"disapproval": false,
			"date": "2012-02-10 21:20:44.811516",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-10 12:47:16.248226",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 10, 2012 at 18:16,  <rsc@google.com> wrote:\n>\n> http://codereview.appspot.com/5652057/diff/5001/src/cmd/gc/inl.c\n> File src/cmd/gc/inl.c (right):\n>\n> http://codereview.appspot.com/5652057/diff/5001/src/cmd/gc/inl.c#newcode68\n> src/cmd/gc/inl.c:68:\n> Please add\n>\n> if(fn->sym->pkg == nil || fn->sym->pkg == localpkg)\n> \u00a0 \u00a0fatal(\"typecheckinl of code in local package\");\n\nthis will trigger from export or during lazy checking (default)\nanyway, but it's harmless, because any violations will have been\ncaught during typecheck of the original body.  to make that not blow\nup will make things less obviously correct.\n\nnow the simple rule is: the original nbody is always checked, either\nin the local compilation or in the one before of the imported package,\nand whatever goes on inside an ->inl is therefore safe.\n\n>\n> http://codereview.appspot.com/5652057/diff/5001/test/safe/nousesafe.go\n> File test/safe/nousesafe.go (right):\n>\n> http://codereview.appspot.com/5652057/diff/5001/test/safe/nousesafe.go#newcode1\n> test/safe/nousesafe.go:1: // $G $D/pkg.go && pack q pkg.a pkg.$A 2>\n>\n> /dev/null && rm pkg.$A && pack rg pkg.a && errchk $G -I. -u $D/main.go\n> && rm -f pkg.a\n> Is there a reason to use q here? \u00a0The usual process is just\n>\n> // $G $D/pkg.go && pack grc pkg.a pkg.$A...\n>\n\n\n> Also, where is the safe mode override? \u00a0I don't see\n> a pack S here, so I don't understand why main.go is\n> allowed to import the unsafe package pkg.a.\n\nit isnt, thats why this does errchk.  i wanted to test that my fix\ndoes not break the original check. 2 tescases use the same pkg.go and\nmain.go\n\n>\n> // $G $D/pkg.go && pack grcS pkg.a pkg.$A && errchk $G -I. -u $D/main.go\n> // rm pkg.a\n\ni didnt know multiple lines worked.\n\n>\n> ?\n>\n> http://codereview.appspot.com/5652057/\n",
			"disapproval": false,
			"date": "2012-02-10 17:30:06.708497",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dsymonds@golang.org, rsc@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-10 20:56:13.690709",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nObviously correct.  :-)\n\nhttp://codereview.appspot.com/5652057/diff/4/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5652057/diff/4/src/cmd/gc/inl.c#newcode489\nsrc/cmd/gc/inl.c:489: // typecheckinl is only used for imported functions;\ndelete comment here\n\nhttp://codereview.appspot.com/5652057/diff/4/src/cmd/gc/inl.c#newcode500\nsrc/cmd/gc/inl.c:500: save_safemode = safemode;\nmove comment here, where the logic it describes is\n\n// imported functions may refer to unsafe as long as the\n// package was marked safe during import (already checked).",
			"disapproval": false,
			"date": "2012-02-10 21:28:24.934952",
			"approval": true
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5652057: cmd/gc: suspend safemode during typecheck of inlined bodies.",
	"created": "2012-02-10 12:42:11.484388",
	"patchsets": [
		1,
		2001,
		5001,
		3010,
		4009,
		1018,
		1019,
		7010,
		4,
		5012
	],
	"modified": "2012-02-10 21:51:02.424930",
	"closed": true,
	"issue": 5652057
}