{
	"description": "go/doc: treat predeclared error interface like an exported type\n\nAlso added -files flag to provide regexp for test files for\nselective testing.\n\nFixes issue 2956.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-14 00:25:37.336671",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/doc_test.go\nFile src/pkg/go/doc/doc_test.go (right):\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/doc_test.go#newcode24\nsrc/pkg/go/doc/doc_test.go:24: var files = flag.String(\"files\", \"\", \"if set, only consider test files matching this regular expression\")\ns/if set, //\ns/consider //\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/doc_test.go#newcode79\nsrc/pkg/go/doc/doc_test.go:79: return !fi.IsDir() && rx.MatchString(fi.Name())\nreturn isGoFile(fi) && rx.MatchString(fi.Name()) ?\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/exports.go\nFile src/pkg/go/doc/exports.go (right):\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/exports.go#newcode25\nsrc/pkg/go/doc/exports.go:25: // removeErrorField removes anonymous fields named \"error\" from an interface.\n// This is called when \"error\" has been determined to be a local name,\n// not the predeclared type.",
			"disapproval": false,
			"date": "2012-02-14 16:23:58.674661",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 07e1cea7cfc7 ***\n\ngo/doc: treat predeclared error interface like an exported type\n\nAlso added -files flag to provide regexp for test files for\nselective testing.\n\nFixes issue 2956.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5657045\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/doc_test.go\nFile src/pkg/go/doc/doc_test.go (right):\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/doc_test.go#newcode24\nsrc/pkg/go/doc/doc_test.go:24: var files = flag.String(\"files\", \"\", \"if set, only consider test files matching this regular expression\")\nOn 2012/02/14 16:23:58, rsc wrote:\n> s/if set, //\n> s/consider //\n\nDone.\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/doc_test.go#newcode79\nsrc/pkg/go/doc/doc_test.go:79: return !fi.IsDir() && rx.MatchString(fi.Name())\nOn 2012/02/14 16:23:58, rsc wrote:\n> return isGoFile(fi) && rx.MatchString(fi.Name()) ?\n\nDone.\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/exports.go\nFile src/pkg/go/doc/exports.go (right):\n\nhttp://codereview.appspot.com/5657045/diff/5/src/pkg/go/doc/exports.go#newcode25\nsrc/pkg/go/doc/exports.go:25: // removeErrorField removes anonymous fields named \"error\" from an interface.\nOn 2012/02/14 16:23:58, rsc wrote:\n> // This is called when \"error\" has been determined to be a local name,\n> // not the predeclared type.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-14 17:13:15.767497",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5657045: go/doc: treat predeclared error interface like an expor...",
	"created": "2012-02-13 22:09:38.660524",
	"patchsets": [
		1,
		3,
		3001,
		2025,
		4,
		2038,
		5,
		10001
	],
	"modified": "2012-02-14 17:13:17.098363",
	"closed": true,
	"issue": 5657045
}