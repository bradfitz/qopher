{
	"description": "testing: fix references to \"gotest\"\n\nFixes issue 2958.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-10 02:14:48.921989",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Fri, Feb 10, 2012 at 1:14 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> testing: fix references to \"gotest\"\n>\n> Fixes issue 2958.\n>\n> Please review this at http://codereview.appspot.com/**5650050/<http://codereview.appspot.com/5650050/>\n>\n> Affected files:\n>  M src/pkg/testing/benchmark.go\n>  M src/pkg/testing/testing.go\n>\n>\n> Index: src/pkg/testing/benchmark.go\n> ==============================**==============================**=======\n> --- a/src/pkg/testing/benchmark.go\n> +++ b/src/pkg/testing/benchmark.go\n> @@ -16,7 +16,7 @@\n>  var benchTime = flag.Float64(\"test.benchtime\", 1, \"approximate run time\n> for each benchmark, in seconds\")\n>\n>  // An internal type but exported because it is cross-package; part of the\n> implementation\n> -// of gotest.\n> +// of the \"go test\" command.\n>  type InternalBenchmark struct {\n>        Name string\n>        F    func(b *B)\n> @@ -213,7 +213,7 @@\n>  }\n>\n>  // An internal function but exported because it is cross-package; part of\n> the implementation\n> -// of gotest.\n> +// of the \"go test\" command.\n>  func RunBenchmarks(matchString func(pat, str string) (bool, error),\n> benchmarks []InternalBenchmark) {\n>        // If no flag was specified, don't run benchmarks.\n>        if len(*matchBenchmarks) == 0 {\n> @@ -281,7 +281,7 @@\n>  }\n>\n>  // Benchmark benchmarks a single function. Useful for creating\n> -// custom benchmarks that do not use gotest.\n> +// custom benchmarks that do not use the \"go test\" command.\n>  func Benchmark(f func(b *B)) BenchmarkResult {\n>        b := &B{\n>                common: common{\n> Index: src/pkg/testing/testing.go\n> ==============================**==============================**=======\n> --- a/src/pkg/testing/testing.go\n> +++ b/src/pkg/testing/testing.go\n> @@ -12,8 +12,8 @@\n>  //\n>  // Functions of the form\n>  //     func BenchmarkXxx(*testing.B)\n> -// are considered benchmarks, and are executed by gotest when the\n> -test.bench\n> -// flag is provided.\n> +// are considered benchmarks, and are executed by the \"go test\" command\n> when\n> +// the -test.bench flag is provided.\n>  //\n>  // A sample benchmark function looks like this:\n>  //     func BenchmarkHello(b *testing.B) {\n> @@ -81,7 +81,7 @@\n>        // The short flag requests that tests run more quickly, but its\n> functionality\n>        // is provided by test writers themselves.  The testing package is\n> just its\n>        // home.  The all.bash installation script sets it to make\n> installation more\n> -       // efficient, but by default the flag is off so a plain \"gotest\"\n> will do a\n> +       // efficient, but by default the flag is off so a plain \"go test\"\n> will do a\n>        // full test of the package.\n>        short = flag.Bool(\"test.short\", false, \"run smaller test suite to\n> save time\")\n>\n> @@ -162,7 +162,7 @@\n>  func (c *common) Failed() bool { return c.failed }\n>\n>  // FailNow marks the function as having failed and stops its execution.\n> -// Execution will continue at the next Test.\n> +// Execution will continue at the next test or benchmark.\n>  func (c *common) FailNow() {\n>        c.Fail()\n>\n> @@ -246,7 +246,7 @@\n>  }\n>\n>  // An internal type but exported because it is cross-package; part of the\n> implementation\n> -// of gotest.\n> +// of the \"go test\" command.\n>  type InternalTest struct {\n>        Name string\n>        F    func(*T)\n> @@ -275,7 +275,7 @@\n>  }\n>\n>  // An internal function but exported because it is cross-package; part of\n> the implementation\n> -// of gotest.\n> +// of the \"go test\" command.\n>  func Main(matchString func(pat, str string) (bool, error), tests\n> []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample)\n> {\n>        flag.Parse()\n>        parseCpuList()\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-10 02:48:35.524800",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6ed59a11650c ***\n\ntesting: fix references to \"gotest\"\n\nFixes issue 2958.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5650050",
			"disapproval": false,
			"date": "2012-02-10 02:49:56.697547",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5650050: testing: fix references to \"gotest\"",
	"created": "2012-02-10 02:14:34.818163",
	"patchsets": [
		1,
		4
	],
	"modified": "2012-02-10 02:49:58.879845",
	"closed": true,
	"issue": 5650050
}