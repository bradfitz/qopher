{
	"description": "go spec: method names must be unique\n\nFixes issue 2916.",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5652064/diff/3/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5652064/diff/3/doc/go_spec.html#newcode1918\ndoc/go_spec.html:1918: all non-blank method and field names must be unique.\n\"all\" doesn't have a clear context. you could be more direct:\n\nIf the base type is a struct type, the non-blank field and method names must be distinct.\n\nalso i'm not sure i understand what a blank method is or why you're calling it out. i suppose it's fine to say you can have as many blank-name methods as you like, but why?",
			"disapproval": false,
			"date": "2012-02-11 01:48:58.384889",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-11 01:38:47.158615",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/5652064/diff/4005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5652064/diff/4005/doc/go_spec.html#newcode1866\ndoc/go_spec.html:1866: to a function (\u00a7<a href=\"#Function_types\">Function types</a>).\nOn 2012/02/11 03:31:16, r wrote:\n> not really, or not only. it also usually has an implementation\n\nAgreed; I think the link is misleading. Removing it for now.\n\nThis entire section on what a function actually is is rather thin and should be expanded. Prefer to make this a separate CL. Filed issue 2991.\n\nhttp://codereview.appspot.com/5652064/diff/4005/doc/go_spec.html#newcode1896\ndoc/go_spec.html:1896: and the method to a type.\nOn 2012/02/11 03:31:16, r wrote:\n> this is an odd way to say it; also see my comment above.\n> the previous version seemed fine to me. maybe\n> \n> A method declaration binds a identifier, the method name, to a method.\n> \n> it also binds the receiver type, though, and you're missing that.\n\nThe previous version didn't say that here, but below. The declaration does both, it binds the name to the method, and the method itself to the receiver base type.\n\nReformulated.",
			"disapproval": false,
			"date": "2012-02-11 05:44:21.864457",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-11 01:14:06.561623",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-12 21:04:28.019304",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm rewriting old stuff at this point. the new stuff is fine.\n\nhttp://codereview.appspot.com/5652064/diff/4005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5652064/diff/4005/doc/go_spec.html#newcode1866\ndoc/go_spec.html:1866: to a function (\u00a7<a href=\"#Function_types\">Function types</a>).\nnot really, or not only. it also usually has an implementation\n\nhttp://codereview.appspot.com/5652064/diff/4005/doc/go_spec.html#newcode1896\ndoc/go_spec.html:1896: and the method to a type.\nthis is an odd way to say it; also see my comment above.\nthe previous version seemed fine to me. maybe\n\nA method declaration binds a identifier, the method name, to a method.\n\nit also binds the receiver type, though, and you're missing that.",
			"disapproval": false,
			"date": "2012-02-11 03:31:16.839433",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-02-13 03:39:30.437669",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=62589ad8fa61 ***\n\ngo spec: method names must be unique\n\nFixes issue 2916.\n\nR=golang-dev, remyoudompheng, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5652064",
			"disapproval": false,
			"date": "2012-02-13 04:03:34.052008",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5652064/diff/1003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5652064/diff/1003/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of February 1, 2012\"\nThis got backwards.",
			"disapproval": false,
			"date": "2012-02-11 01:30:28.400660",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5652064/diff/3/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5652064/diff/3/doc/go_spec.html#newcode1918\ndoc/go_spec.html:1918: all non-blank method and field names must be unique.\nOn 2012/02/11 01:48:58, r wrote:\n> \"all\" doesn't have a clear context. you could be more direct:\n> \n> If the base type is a struct type, the non-blank field and method names must be\n> distinct.\n> \nDone.\n\n> also i'm not sure i understand what a blank method is or why you're calling it\n> out. i suppose it's fine to say you can have as many blank-name methods as you\n> like, but why?\n> \nA method can have the name _ , and one can have as many as one wants. Not useful (except perhaps for testing parsing), but it would be a special case (of _ use) not to allow it. I have copied the phrasing from the equivalent sentence for struct types.\n\nThis might be more nicely said if we had a term for the set of methods bound to a type (as opposed to the method set). But I am not sure it makes a lot of sense to introduce a new term just for this.",
			"disapproval": false,
			"date": "2012-02-11 02:22:16.437923",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5652064: go spec: method names must be unique",
	"created": "2012-02-11 00:58:55.162476",
	"patchsets": [
		1,
		1002,
		4001,
		1003,
		4003,
		3,
		4005,
		2004,
		4009,
		2006,
		2008,
		3005,
		2010,
		7
	],
	"modified": "2012-02-13 17:37:52.835069",
	"closed": true,
	"issue": 5652064
}