{
	"description": "gofmt: handle comments correctly in rewrites",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-15 21:09:57.971364",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this really correct? I understand the rationale, but in the example test data I am not sure that losing the comment is really something that an automated tool should be doing.",
			"disapproval": false,
			"date": "2012-06-25 14:12:49.122446",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is actually not very easy to create a test case that loses\r\ncomments. Most of the time the comment is associated with a larger\r\nconstruct (such as a statement, declaration, etc.) so the comment is\r\nnot lost unless the entire statement is lost. In this case, the\r\ncomment is associated with a single expression (deliberately\r\nconstructed), and that expression goes away. It seems only right that\r\nthe comment goes away.\r\n\r\nFurthermore, when applying gofmt -r or -s one is very likely going to\r\ninspect the result, so I don't think there's much danger here.\r\n\r\nKeeping the comment seems more wrong in this case.\r\n\r\n- Robert\r\n\r\nOn Mon, Jun 25, 2012 at 7:12 AM,  <rsc@golang.org> wrote:\r\n> Is this really correct? I understand the rationale, but in the example\r\n> test data I am not sure that losing the comment is really something that\r\n> an automated tool should be doing.\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/6294076/\r\n",
			"disapproval": false,
			"date": "2012-06-25 18:27:06.756037",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The problem with deleting a comment is that you might not, on\r\ninspection, notice that anything is missing. I don't mind gofmt -r\r\ndoing this, but having gofmt -s do it seems wrong. The kinds of\r\nrewrites that gofmt -s does are supposed to be so trivial that you can\r\nrun it automatically like plain gofmt; if gofmt -s can delete comments\r\nthen we'd have to be much more careful using it.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-25 18:30:54.938508",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's easy to restrict it -r. But again, it's difficult to create a\r\ncase that deletes comments with -s: it will only happen if the comment\r\nis directly associated with something that goes away. For instance in:\r\n\r\npackage p\r\n\r\nfunc f() {\r\n\tvar a []string\r\n\tfor i /*foo*/, _ /*bar*/ := range a /*bal*/ {\r\n\t\t_ = i\r\n\t}\r\n}\r\n\r\ngofmt -s produces:\r\n\r\npackage p\r\n\r\nfunc f() {\r\n\tvar a []string\r\n\tfor i /*foo*/ := range a /*bal*/ {\r\n\t\t_ = i\r\n\t}\r\n}\r\n\r\nwhich seems right.\r\n\r\nAlso, each -s optimization is programmed explicitly, and if we care\r\nabout things going away that might have important comments, the code\r\nshould be adjusted to take care of that comment (via\r\ncommentMap.Update).\r\n\r\n?\r\n\r\n- Robert\r\n\r\n\r\n\r\nOn Mon, Jun 25, 2012 at 11:30 AM, Russ Cox <rsc@golang.org> wrote:\r\n> The problem with deleting a comment is that you might not, on\r\n> inspection, notice that anything is missing. I don't mind gofmt -r\r\n> doing this, but having gofmt -s do it seems wrong. The kinds of\r\n> rewrites that gofmt -s does are supposed to be so trivial that you can\r\n> run it automatically like plain gofmt; if gofmt -s can delete comments\r\n> then we'd have to be much more careful using it.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-06-25 18:41:09.001886",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please leave the comments in for -s.\r\n\r\nThe fact that it is so hard to create a situation where there is a\r\ndifference means that when a difference does come up (and a comment is\r\ndeleted) people will be surprised. I am trying to avoid that surprise:\r\ngofmt -s should be as reliable about not deleting parts of your\r\nprogram as plain gofmt is. Instead of having to program to keep the\r\ncomments explicitly, we can just not use the comment map to delete\r\ncomments. Then we know that all comments are preserved, automatically,\r\nwhich seems much less error-prone.\r\n\r\ngofmt -r is doing arbitrary rewriting, so I don't mind dropping comments there.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-25 18:44:54.110026",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-25 20:56:15.809736",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-25 20:54:29.644557",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d1a0993ee959 ***\n\ngofmt: handle comments correctly in rewrites\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6294076",
			"disapproval": false,
			"date": "2012-06-25 20:58:35.264379",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6294076: gofmt: handle comments correctly in rewrites",
	"created": "2012-06-15 21:08:14.884691",
	"patchsets": [
		1,
		2001,
		5001,
		6001,
		8001,
		12002,
		16001,
		10002
	],
	"modified": "2012-06-25 20:58:36.263098",
	"closed": true,
	"issue": 6294076
}