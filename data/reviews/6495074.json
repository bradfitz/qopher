{
	"description": "cmd/gc: add commentary to the OXXX constants.",
	"cc": [
		"rsc@golang.org",
		"daniel.morsing@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-03 07:34:20.575610",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/04 04:42:15, nigeltao wrote:\n> zero value of node->val.u.reg is the stack pointer: D_SP is 20, D_AL is 0.\n\nAh, I appear to be mistaken. Sorry about that.",
			"disapproval": false,
			"date": "2012-09-04 06:23:12.154240",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-04 20:08:23.309420",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6495074/diff/4002/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttps://codereview.appspot.com/6495074/diff/4002/src/cmd/gc/go.h#newcode561\nsrc/cmd/gc/go.h:561: OINDREG,\t// stack spill of an arch-specific register??\nOn 2012/09/03 09:21:08, DMorsing wrote:\n> Indirection through register. zero value is stack pointer\n\nAh, of course, this is something like 8(SP). However, I don't think that the zero value of node->val.u.reg is the stack pointer: D_SP is 20, D_AL is 0.",
			"disapproval": false,
			"date": "2012-09-04 04:42:15.977740",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is great. I really could have used this when I first started hacking on gc.\n\nhttp://codereview.appspot.com/6495074/diff/4002/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/6495074/diff/4002/src/cmd/gc/go.h#newcode561\nsrc/cmd/gc/go.h:561: OINDREG,\t// stack spill of an arch-specific register??\nIndirection through register. zero value is stack pointer",
			"disapproval": false,
			"date": "2012-09-03 09:21:08.265450",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I just thought of something. It might be helpful to use the naming of the elements to convey how the nodes occur in the AST.\n\nFor example\n// OADD l + r\n// OAS2 l1, l2, l3 = r1, r2, r3\n// OLEN len(l)\n\nOn the downside, It would throw away a bit of context in cases like OCMPSTR and It's quite a bit more work.",
			"disapproval": false,
			"date": "2012-09-04 08:32:50.817120",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 4 September 2012 18:32,  <daniel.morsing@gmail.com> wrote:\r\n> I just thought of something. It might be helpful to use the naming of\r\n> the elements to convey how the nodes occur in the AST.\r\n>\r\n> For example\r\n> // OADD l + r\r\n> // OAS2 l1, l2, l3 = r1, r2, r3\r\n> // OLEN len(l)\r\n>\r\n> On the downside, It would throw away a bit of context in cases like\r\n> OCMPSTR and It's quite a bit more work.\r\n\r\nThat might be useful, but they might be better as higher level\r\ncomments for groups of opcodes. For example, all binary ops are \"l op\r\nr\", all unary ops are \"op l\", etc. I don't think that the order of the\r\nvalues matter, apart from OXXX being first and OEND being last.\r\nSomething to consider for a follow-up CL, perhaps.\r\n",
			"disapproval": false,
			"date": "2012-09-04 23:34:14.740640",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=957c047e5586 ***\n\ncmd/gc: add commentary to the OXXX constants.\n\nR=rsc, daniel.morsing\nCC=golang-dev\nhttp://codereview.appspot.com/6495074",
			"disapproval": false,
			"date": "2012-09-04 23:35:10.786550",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6495074: cmd/gc: add commentary to the OXXX constants.",
	"created": "2012-09-03 07:29:58.320000",
	"patchsets": [
		1,
		2001,
		3001,
		4002,
		7002,
		7003
	],
	"modified": "2012-09-04 23:35:12.991880",
	"closed": true,
	"issue": 6495074
}