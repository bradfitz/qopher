{
	"description": "cgo: set alignment to 1 for unions and classes; avoids crash from divide-by-zero\nFixes issue 4114.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"rsc@golang.org",
		"iant@google.com",
		"devon.odell@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-21 10:44:55.628100",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-21 19:30:06.357310",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6553050/diff/8001/src/cmd/cgo/gcc.go\nFile src/cmd/cgo/gcc.go (right):\n\nhttps://codereview.appspot.com/6553050/diff/8001/src/cmd/cgo/gcc.go#newcode1203\nsrc/cmd/cgo/gcc.go:1203: t.Align = 1 // No useful alignment information for union fields.\nNo need to split up these cases.  They should both be handled the same way, and both should set t.Align = 1.  We're setting t.Align = 1 because we're ignoring the contents of the class/union data and treating it as an array of byte.  We could determine the correct alignment by looking at the fields, but why bother?",
			"disapproval": false,
			"date": "2012-09-21 19:41:17.704490",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is there any other way for a zero alignment to arise in a C program?\r\nI'm not even sure why it arises for a union.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-21 19:30:02.835520",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"devon.odell@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant@golang.org, rsc@golang.org, iant@google.com, devon.odell@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-21 19:47:15.157360",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6553050/diff/3001/src/cmd/cgo/out.go\nFile src/cmd/cgo/out.go (right):\n\nhttps://codereview.appspot.com/6553050/diff/3001/src/cmd/cgo/out.go#newcode218\nsrc/cmd/cgo/out.go:218: if t.Align != 0 && off%t.Align != 0 {\nWhat if we instead change the \"union\" case in typeConv.Type in gcc.go to set t.Align = 1?  It's not clear to me that t.Align == 0 should ever be valid.",
			"disapproval": false,
			"date": "2012-09-21 14:06:48.772620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Align=1 sgtm\r\n",
			"disapproval": false,
			"date": "2012-09-21 14:30:08.651990",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 21, 2012 at 12:30 PM, Rob Pike <r@golang.org> wrote:\r\n> Is there any other way for a zero alignment to arise in a C program?\r\n> I'm not even sure why it arises for a union.\r\n\r\nit doesn't--I think it's just a bug that cgo fails to set t.Align.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-09-21 19:38:56.855970",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/9/21  <iant@golang.org>:\r\n>\r\n> https://codereview.appspot.com/6553050/diff/8001/src/cmd/cgo/gcc.go\r\n> File src/cmd/cgo/gcc.go (right):\r\n>\r\n> https://codereview.appspot.com/6553050/diff/8001/src/cmd/cgo/gcc.go#newcode1203\r\n> src/cmd/cgo/gcc.go:1203: t.Align = 1 // No useful alignment information\r\n> for union fields.\r\n> No need to split up these cases.  They should both be handled the same\r\n> way, and both should set t.Align = 1.  We're setting t.Align = 1 because\r\n> we're ignoring the contents of the class/union data and treating it as\r\n> an array of byte.  We could determine the correct alignment by looking\r\n> at the fields, but why bother?\r\n\r\nI'm fairly sure the C memory model specifies that unions are aligned\r\nto the constraints of their largest member, so it seems plausible that\r\nwe could hit ABI issues (especially if the unions we use are for\r\ntype-punning). I think we might need a func (*typeConv) Union(...) for\r\nthis.\r\n\r\n--dho\r\n\r\n> https://codereview.appspot.com/6553050/\r\n",
			"disapproval": false,
			"date": "2012-09-21 19:43:01.019450",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"devon.odell@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-21 19:48:51.213820",
			"approval": true
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"devon.odell@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-21 19:49:27.878910",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"devon.odell@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=24d74bd32d81 ***\n\ncgo: set alignment to 1 for unions and classes; avoids crash from divide-by-zero\nFixes issue 4114.\n\nR=golang-dev, iant, rsc, iant, devon.odell\nCC=golang-dev\nhttp://codereview.appspot.com/6553050",
			"disapproval": false,
			"date": "2012-09-21 21:26:01.615770",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6553050: cgo: protect against zero divide when computing padding...",
	"created": "2012-09-21 10:44:13.071450",
	"patchsets": [
		1,
		3001,
		8001,
		4002,
		9003
	],
	"modified": "2012-09-21 21:26:03.767470",
	"closed": true,
	"issue": 6553050
}