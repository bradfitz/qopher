{
	"description": "flag: export commandLine, the previously internal default FlagSet\ns/commandLine/CommandLine/g\n\nFixes issue 4209.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-07 03:28:43.713060",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI think it makes sense. We expose os.Args, flag.Lookup, etc. I don't\r\nsee the benefit in hiding this if a program really wants to do\r\nsomething tricky.\r\n",
			"disapproval": false,
			"date": "2013-08-07 03:43:47.678590",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI've wanted this before too.\r\n\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 8:28 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> flag: export commandLine, the previously internal default FlagSet\r\n> s/commandLine/CommandLine/g\r\n>\r\n> Fixes issue 4209.\r\n>\r\n> I'm not yet convinced this is worth doing. Comments welcome.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12587043/<https://codereview.appspot.com/12587043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/flag/export_test.go\r\n>   M src/pkg/flag/flag.go\r\n>   M src/pkg/flag/flag_test.go\r\n>\r\n>\r\n> Index: src/pkg/flag/export_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/flag/export_test.go\r\n> +++ b/src/pkg/flag/export_test.go\r\n> @@ -12,11 +12,6 @@\r\n>  // After calling ResetForTesting, parse errors in flag handling will not\r\n>  // exit the program.\r\n>  func ResetForTesting(usage func()) {\r\n> -       commandLine = NewFlagSet(os.Args[0], ContinueOnError)\r\n> +       CommandLine = NewFlagSet(os.Args[0], ContinueOnError)\r\n>         Usage = usage\r\n>  }\r\n> -\r\n> -// CommandLine returns the default FlagSet.\r\n> -func CommandLine() *FlagSet {\r\n> -       return commandLine\r\n> -}\r\n> Index: src/pkg/flag/flag.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/flag/flag.go\r\n> +++ b/src/pkg/flag/flag.go\r\n> @@ -322,7 +322,7 @@\r\n>  // VisitAll visits the command-line flags in lexicographical order,\r\n> calling\r\n>  // fn for each.  It visits all flags, even those not set.\r\n>  func VisitAll(fn func(*Flag)) {\r\n> -       commandLine.VisitAll(fn)\r\n> +       CommandLine.VisitAll(fn)\r\n>  }\r\n>\r\n>  // Visit visits the flags in lexicographical order, calling fn for each.\r\n> @@ -336,7 +336,7 @@\r\n>  // Visit visits the command-line flags in lexicographical order, calling\r\n> fn\r\n>  // for each.  It visits only those flags that have been set.\r\n>  func Visit(fn func(*Flag)) {\r\n> -       commandLine.Visit(fn)\r\n> +       CommandLine.Visit(fn)\r\n>  }\r\n>\r\n>  // Lookup returns the Flag structure of the named flag, returning nil if\r\n> none exists.\r\n> @@ -347,7 +347,7 @@\r\n>  // Lookup returns the Flag structure of the named command-line flag,\r\n>  // returning nil if none exists.\r\n>  func Lookup(name string) *Flag {\r\n> -       return commandLine.formal[name]\r\n> +       return CommandLine.formal[name]\r\n>  }\r\n>\r\n>  // Set sets the value of the named flag.\r\n> @@ -369,7 +369,7 @@\r\n>\r\n>  // Set sets the value of the named command-line flag.\r\n>  func Set(name, value string) error {\r\n> -       return commandLine.Set(name, value)\r\n> +       return CommandLine.Set(name, value)\r\n>  }\r\n>\r\n>  // PrintDefaults prints, to standard error unless configured\r\n> @@ -387,7 +387,7 @@\r\n>\r\n>  // PrintDefaults prints to standard error the default values of all\r\n> defined command-line flags.\r\n>  func PrintDefaults() {\r\n> -       commandLine.PrintDefaults()\r\n> +       CommandLine.PrintDefaults()\r\n>  }\r\n>\r\n>  // defaultUsage is the default function to print a usage message.\r\n> @@ -400,7 +400,7 @@\r\n>         f.PrintDefaults()\r\n>  }\r\n>\r\n> -// NOTE: Usage is not just defaultUsage(commandLine)\r\n> +// NOTE: Usage is not just defaultUsage(CommandLine)\r\n>  // because it serves (via godoc flag Usage) as the example\r\n>  // for how to write your own usage function.\r\n>\r\n> @@ -415,7 +415,7 @@\r\n>  func (f *FlagSet) NFlag() int { return len(f.actual) }\r\n>\r\n>  // NFlag returns the number of command-line flags that have been set.\r\n> -func NFlag() int { return len(commandLine.actual) }\r\n> +func NFlag() int { return len(CommandLine.actual) }\r\n>\r\n>  // Arg returns the i'th argument.  Arg(0) is the first remaining argument\r\n>  // after flags have been processed.\r\n> @@ -429,20 +429,20 @@\r\n>  // Arg returns the i'th command-line argument.  Arg(0) is the first\r\n> remaining argument\r\n>  // after flags have been processed.\r\n>  func Arg(i int) string {\r\n> -       return commandLine.Arg(i)\r\n> +       return CommandLine.Arg(i)\r\n>  }\r\n>\r\n>  // NArg is the number of arguments remaining after flags have been\r\n> processed.\r\n>  func (f *FlagSet) NArg() int { return len(f.args) }\r\n>\r\n>  // NArg is the number of arguments remaining after flags have been\r\n> processed.\r\n> -func NArg() int { return len(commandLine.args) }\r\n> +func NArg() int { return len(CommandLine.args) }\r\n>\r\n>  // Args returns the non-flag arguments.\r\n>  func (f *FlagSet) Args() []string { return f.args }\r\n>\r\n>  // Args returns the non-flag command-line arguments.\r\n> -func Args() []string { return commandLine.args }\r\n> +func Args() []string { return CommandLine.args }\r\n>\r\n>  // BoolVar defines a bool flag with specified name, default value, and\r\n> usage string.\r\n>  // The argument p points to a bool variable in which to store the value\r\n> of the flag.\r\n> @@ -453,7 +453,7 @@\r\n>  // BoolVar defines a bool flag with specified name, default value, and\r\n> usage string.\r\n>  // The argument p points to a bool variable in which to store the value\r\n> of the flag.\r\n>  func BoolVar(p *bool, name string, value bool, usage string) {\r\n> -       commandLine.Var(newBoolValue(**value, p), name, usage)\r\n> +       CommandLine.Var(newBoolValue(**value, p), name, usage)\r\n>  }\r\n>\r\n>  // Bool defines a bool flag with specified name, default value, and usage\r\n> string.\r\n> @@ -467,7 +467,7 @@\r\n>  // Bool defines a bool flag with specified name, default value, and usage\r\n> string.\r\n>  // The return value is the address of a bool variable that stores the\r\n> value of the flag.\r\n>  func Bool(name string, value bool, usage string) *bool {\r\n> -       return commandLine.Bool(name, value, usage)\r\n> +       return CommandLine.Bool(name, value, usage)\r\n>  }\r\n>\r\n>  // IntVar defines an int flag with specified name, default value, and\r\n> usage string.\r\n> @@ -479,7 +479,7 @@\r\n>  // IntVar defines an int flag with specified name, default value, and\r\n> usage string.\r\n>  // The argument p points to an int variable in which to store the value\r\n> of the flag.\r\n>  func IntVar(p *int, name string, value int, usage string) {\r\n> -       commandLine.Var(newIntValue(**value, p), name, usage)\r\n> +       CommandLine.Var(newIntValue(**value, p), name, usage)\r\n>  }\r\n>\r\n>  // Int defines an int flag with specified name, default value, and usage\r\n> string.\r\n> @@ -493,7 +493,7 @@\r\n>  // Int defines an int flag with specified name, default value, and usage\r\n> string.\r\n>  // The return value is the address of an int variable that stores the\r\n> value of the flag.\r\n>  func Int(name string, value int, usage string) *int {\r\n> -       return commandLine.Int(name, value, usage)\r\n> +       return CommandLine.Int(name, value, usage)\r\n>  }\r\n>\r\n>  // Int64Var defines an int64 flag with specified name, default value, and\r\n> usage string.\r\n> @@ -505,7 +505,7 @@\r\n>  // Int64Var defines an int64 flag with specified name, default value, and\r\n> usage string.\r\n>  // The argument p points to an int64 variable in which to store the value\r\n> of the flag.\r\n>  func Int64Var(p *int64, name string, value int64, usage string) {\r\n> -       commandLine.Var(newInt64Value(**value, p), name, usage)\r\n> +       CommandLine.Var(newInt64Value(**value, p), name, usage)\r\n>  }\r\n>\r\n>  // Int64 defines an int64 flag with specified name, default value, and\r\n> usage string.\r\n> @@ -519,7 +519,7 @@\r\n>  // Int64 defines an int64 flag with specified name, default value, and\r\n> usage string.\r\n>  // The return value is the address of an int64 variable that stores the\r\n> value of the flag.\r\n>  func Int64(name string, value int64, usage string) *int64 {\r\n> -       return commandLine.Int64(name, value, usage)\r\n> +       return CommandLine.Int64(name, value, usage)\r\n>  }\r\n>\r\n>  // UintVar defines a uint flag with specified name, default value, and\r\n> usage string.\r\n> @@ -531,7 +531,7 @@\r\n>  // UintVar defines a uint flag with specified name, default value, and\r\n> usage string.\r\n>  // The argument p points to a uint  variable in which to store the value\r\n> of the flag.\r\n>  func UintVar(p *uint, name string, value uint, usage string) {\r\n> -       commandLine.Var(newUintValue(**value, p), name, usage)\r\n> +       CommandLine.Var(newUintValue(**value, p), name, usage)\r\n>  }\r\n>\r\n>  // Uint defines a uint flag with specified name, default value, and usage\r\n> string.\r\n> @@ -545,7 +545,7 @@\r\n>  // Uint defines a uint flag with specified name, default value, and usage\r\n> string.\r\n>  // The return value is the address of a uint  variable that stores the\r\n> value of the flag.\r\n>  func Uint(name string, value uint, usage string) *uint {\r\n> -       return commandLine.Uint(name, value, usage)\r\n> +       return CommandLine.Uint(name, value, usage)\r\n>  }\r\n>\r\n>  // Uint64Var defines a uint64 flag with specified name, default value,\r\n> and usage string.\r\n> @@ -557,7 +557,7 @@\r\n>  // Uint64Var defines a uint64 flag with specified name, default value,\r\n> and usage string.\r\n>  // The argument p points to a uint64 variable in which to store the value\r\n> of the flag.\r\n>  func Uint64Var(p *uint64, name string, value uint64, usage string) {\r\n> -       commandLine.Var(**newUint64Value(value, p), name, usage)\r\n> +       CommandLine.Var(**newUint64Value(value, p), name, usage)\r\n>  }\r\n>\r\n>  // Uint64 defines a uint64 flag with specified name, default value, and\r\n> usage string.\r\n> @@ -571,7 +571,7 @@\r\n>  // Uint64 defines a uint64 flag with specified name, default value, and\r\n> usage string.\r\n>  // The return value is the address of a uint64 variable that stores the\r\n> value of the flag.\r\n>  func Uint64(name string, value uint64, usage string) *uint64 {\r\n> -       return commandLine.Uint64(name, value, usage)\r\n> +       return CommandLine.Uint64(name, value, usage)\r\n>  }\r\n>\r\n>  // StringVar defines a string flag with specified name, default value,\r\n> and usage string.\r\n> @@ -583,7 +583,7 @@\r\n>  // StringVar defines a string flag with specified name, default value,\r\n> and usage string.\r\n>  // The argument p points to a string variable in which to store the value\r\n> of the flag.\r\n>  func StringVar(p *string, name string, value string, usage string) {\r\n> -       commandLine.Var(**newStringValue(value, p), name, usage)\r\n> +       CommandLine.Var(**newStringValue(value, p), name, usage)\r\n>  }\r\n>\r\n>  // String defines a string flag with specified name, default value, and\r\n> usage string.\r\n> @@ -597,7 +597,7 @@\r\n>  // String defines a string flag with specified name, default value, and\r\n> usage string.\r\n>  // The return value is the address of a string variable that stores the\r\n> value of the flag.\r\n>  func String(name string, value string, usage string) *string {\r\n> -       return commandLine.String(name, value, usage)\r\n> +       return CommandLine.String(name, value, usage)\r\n>  }\r\n>\r\n>  // Float64Var defines a float64 flag with specified name, default value,\r\n> and usage string.\r\n> @@ -609,7 +609,7 @@\r\n>  // Float64Var defines a float64 flag with specified name, default value,\r\n> and usage string.\r\n>  // The argument p points to a float64 variable in which to store the\r\n> value of the flag.\r\n>  func Float64Var(p *float64, name string, value float64, usage string) {\r\n> -       commandLine.Var(**newFloat64Value(value, p), name, usage)\r\n> +       CommandLine.Var(**newFloat64Value(value, p), name, usage)\r\n>  }\r\n>\r\n>  // Float64 defines a float64 flag with specified name, default value, and\r\n> usage string.\r\n> @@ -623,7 +623,7 @@\r\n>  // Float64 defines a float64 flag with specified name, default value, and\r\n> usage string.\r\n>  // The return value is the address of a float64 variable that stores the\r\n> value of the flag.\r\n>  func Float64(name string, value float64, usage string) *float64 {\r\n> -       return commandLine.Float64(name, value, usage)\r\n> +       return CommandLine.Float64(name, value, usage)\r\n>  }\r\n>\r\n>  // DurationVar defines a time.Duration flag with specified name, default\r\n> value, and usage string.\r\n> @@ -635,7 +635,7 @@\r\n>  // DurationVar defines a time.Duration flag with specified name, default\r\n> value, and usage string.\r\n>  // The argument p points to a time.Duration variable in which to store\r\n> the value of the flag.\r\n>  func DurationVar(p *time.Duration, name string, value time.Duration,\r\n> usage string) {\r\n> -       commandLine.Var(**newDurationValue(value, p), name, usage)\r\n> +       CommandLine.Var(**newDurationValue(value, p), name, usage)\r\n>  }\r\n>\r\n>  // Duration defines a time.Duration flag with specified name, default\r\n> value, and usage string.\r\n> @@ -649,7 +649,7 @@\r\n>  // Duration defines a time.Duration flag with specified name, default\r\n> value, and usage string.\r\n>  // The return value is the address of a time.Duration variable that\r\n> stores the value of the flag.\r\n>  func Duration(name string, value time.Duration, usage string)\r\n> *time.Duration {\r\n> -       return commandLine.Duration(name, value, usage)\r\n> +       return CommandLine.Duration(name, value, usage)\r\n>  }\r\n>\r\n>  // Var defines a flag with the specified name and usage string. The type\r\n> and\r\n> @@ -685,7 +685,7 @@\r\n>  // of strings by giving the slice the methods of Value; in particular,\r\n> Set would\r\n>  // decompose the comma-separated string into the slice.\r\n>  func Var(value Value, name string, usage string) {\r\n> -       commandLine.Var(value, name, usage)\r\n> +       CommandLine.Var(value, name, usage)\r\n>  }\r\n>\r\n>  // failf prints to standard error a formatted error and usage message and\r\n> @@ -698,9 +698,9 @@\r\n>  }\r\n>\r\n>  // usage calls the Usage method for the flag set, or the usage function if\r\n> -// the flag set is commandLine.\r\n> +// the flag set is CommandLine.\r\n>  func (f *FlagSet) usage() {\r\n> -       if f == commandLine {\r\n> +       if f == CommandLine {\r\n>                 Usage()\r\n>         } else if f.Usage == nil {\r\n>                 defaultUsage(f)\r\n> @@ -816,17 +816,19 @@\r\n>  // Parse parses the command-line flags from os.Args[1:].  Must be called\r\n>  // after all flags are defined and before flags are accessed by the\r\n> program.\r\n>  func Parse() {\r\n> -       // Ignore errors; commandLine is set for ExitOnError.\r\n> -       commandLine.Parse(os.Args[1:])\r\n> +       // Ignore errors; CommandLine is set for ExitOnError.\r\n> +       CommandLine.Parse(os.Args[1:])\r\n>  }\r\n>\r\n>  // Parsed returns true if the command-line flags have been parsed.\r\n>  func Parsed() bool {\r\n> -       return commandLine.Parsed()\r\n> +       return CommandLine.Parsed()\r\n>  }\r\n>\r\n> -// The default set of command-line flags, parsed from os.Args.\r\n> -var commandLine = NewFlagSet(os.Args[0], ExitOnError)\r\n> +// CommandLine is the default set of command-line flags, parsed from\r\n> os.Args.\r\n> +// The top-level functions such as BoolVar, Arg, and on are wrappers for\r\n> the\r\n> +// methods of CommandLine.\r\n> +var CommandLine = NewFlagSet(os.Args[0], ExitOnError)\r\n>\r\n>  // NewFlagSet returns a new, empty flag set with the specified name and\r\n>  // error handling property.\r\n> Index: src/pkg/flag/flag_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/flag/flag_test.go\r\n> +++ b/src/pkg/flag/flag_test.go\r\n> @@ -139,7 +139,7 @@\r\n>  func TestUsage(t *testing.T) {\r\n>         called := false\r\n>         ResetForTesting(func() { called = true })\r\n> -       if CommandLine().Parse([]string{\"**-x\"}) == nil {\r\n> +       if CommandLine.Parse([]string{\"-**x\"}) == nil {\r\n>                 t.Error(\"parse did not fail for unknown flag\")\r\n>         }\r\n>         if !called {\r\n> @@ -215,7 +215,7 @@\r\n>\r\n>  func TestParse(t *testing.T) {\r\n>         ResetForTesting(func() { t.Error(\"bad parse\") })\r\n> -       testParse(CommandLine(), t)\r\n> +       testParse(CommandLine, t)\r\n>  }\r\n>\r\n>  func TestFlagSetParse(t *testing.T) {\r\n> @@ -311,7 +311,7 @@\r\n>         defer func() { os.Args = oldArgs }()\r\n>         os.Args = []string{\"cmd\", \"-before\", \"subcmd\", \"-after\", \"args\"}\r\n>         before := Bool(\"before\", false, \"\")\r\n> -       if err := CommandLine().Parse(os.Args[1:**]); err != nil {\r\n> +       if err := CommandLine.Parse(os.Args[1:])**; err != nil {\r\n>                 t.Fatal(err)\r\n>         }\r\n>         cmd := Arg(0)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 16:43:37.248140",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ecf3c8d0918c ***\n\nflag: export commandLine, the previously internal default FlagSet\ns/commandLine/CommandLine/g\n\nFixes issue 4209.\n\nR=golang-dev, dsymonds, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12587043",
			"disapproval": false,
			"date": "2013-08-08 01:51:08.276760",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 12587043: flag: export commandLine, the previously internal defau...",
	"created": "2013-08-07 03:28:34.211330",
	"patchsets": [
		1,
		6001
	],
	"modified": "2013-08-08 01:51:12.118240",
	"closed": true,
	"issue": 12587043
}