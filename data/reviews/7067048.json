{
	"description": "go/doc: recursively inspect selector expressions\n\nAlso adds a couple of simple tests for doc.Examples.\n\nFixes issue 4561.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 7 January 2013 14:50, <dave@cheney.net> wrote:\r\n\r\n> not a comment, a question. Why did you choose to write this as two\r\n> lines, rather than one ?\r\n>\r\n\r\nTry it and see.\r\n",
			"disapproval": false,
			"date": "2013-01-07 03:51:55.736040",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "But I explicitly don't want to inspect the right hand side of the selector\r\nexpression, which is what inspect will do if I return true when inspecting\r\na selector expression.\r\n\r\nI tried what you suggested initially but got the method names added to the\r\nlist of unresolved identifiers too.\r\nOn 7 Jan 2013 14:52, <rsc@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7067048/diff/1/src/pkg/go/**\r\n> doc/example.go<https://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go>\r\n> File src/pkg/go/doc/example.go (left):\r\n>\r\n> https://codereview.appspot.**com/7067048/diff/1/src/pkg/go/**\r\n> doc/example.go#oldcode156<https://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go#oldcode156>\r\n> src/pkg/go/doc/example.go:156: unresolved[id.Name] = true\r\n> If you moved the return false inside these { } then I think you wouldn't\r\n> have to touch any of the rest of the code. Inspect already walks it\r\n> recursively as long as the code doesn't cut it off.\r\n>\r\n> https://codereview.appspot.**com/7067048/<https://codereview.appspot.com/7067048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-07 04:40:30.630910",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-07 03:48:10.331460",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttps://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go#newcode152\nsrc/pkg/go/doc/example.go:152: inspectFunc = func(n ast.Node) bool {\nnot a comment, a question. Why did you choose to write this as two lines, rather than one ?",
			"disapproval": false,
			"date": "2013-01-07 03:50:51.492380",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttps://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go#newcode152\nsrc/pkg/go/doc/example.go:152: inspectFunc = func(n ast.Node) bool {\nOn 2013/01/07 03:50:51, dfc wrote:\n> not a comment, a question. Why did you choose to write this as two lines, rather\n> than one ?\n\nRight, I see. That was rather thick of me.",
			"disapproval": false,
			"date": "2013-01-07 03:54:28.158960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (left):\n\nhttps://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go#oldcode156\nsrc/pkg/go/doc/example.go:156: unresolved[id.Name] = true\nIf you moved the return false inside these { } then I think you wouldn't have to touch any of the rest of the code. Inspect already walks it recursively as long as the code doesn't cut it off.",
			"disapproval": false,
			"date": "2013-01-07 03:52:03.231400",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Not thick; it would be nice if it worked, and it is subtle why it doesn't.\r\nOn 7 Jan 2013 14:54, <dave@cheney.net> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7067048/diff/1/src/pkg/go/**\r\n> doc/example.go<https://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go>\r\n> File src/pkg/go/doc/example.go (right):\r\n>\r\n> https://codereview.appspot.**com/7067048/diff/1/src/pkg/go/**\r\n> doc/example.go#newcode152<https://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go#newcode152>\r\n> src/pkg/go/doc/example.go:152: inspectFunc = func(n ast.Node) bool {\r\n> On 2013/01/07 03:50:51, dfc wrote:\r\n>\r\n>> not a comment, a question. Why did you choose to write this as two\r\n>>\r\n> lines, rather\r\n>\r\n>> than one ?\r\n>>\r\n>\r\n> Right, I see. That was rather thick of me.\r\n>\r\n> https://codereview.appspot.**com/7067048/<https://codereview.appspot.com/7067048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-07 04:41:17.775780",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI see. I was focusing on fmt.Foo.Bar correctly finding fmt and missed the part that you want to exclude Bar and Foo.\n\nhttps://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttps://codereview.appspot.com/7067048/diff/1/src/pkg/go/doc/example.go#newcode155\nsrc/pkg/go/doc/example.go:155: // set of unresolved names.)\n... names, not Println.)",
			"disapproval": false,
			"date": "2013-01-07 04:45:02.056600",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8906cf341c9b ***\n\ngo/doc: recursively inspect selector expressions\n\nAlso adds a couple of simple tests for doc.Examples.\n\nFixes issue 4561.\n\nR=golang-dev, dave, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7067048",
			"disapproval": false,
			"date": "2013-01-07 08:36:52.394570",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 7067048: go/doc: recursively inspect selector expressions",
	"created": "2013-01-07 03:48:00.113790",
	"patchsets": [
		1,
		7001
	],
	"modified": "2013-01-07 08:36:55.904810",
	"closed": true,
	"issue": 7067048
}