{
	"description": "cmd/vet: handle added string constants in printf format check\n\nFixes issue 4599.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0f7510f47c71 ***\n\ncmd/vet: handle added string constants in printf format check\n\nFixes issue 4599.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7226067",
			"disapproval": false,
			"date": "2013-01-31 15:53:42.568950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-31 07:12:35.458940",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nFeels like this functionality should live in go/* somewhere, eventually.\r\n\r\n\r\nOn Wed, Jan 30, 2013 at 11:12 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/vet: handle added string constants in printf format check\r\n>\r\n> Fixes issue 4599.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7226067/<https://codereview.appspot.com/7226067/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/vet/print.go\r\n>\r\n>\r\n> Index: src/cmd/vet/print.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/vet/print.go\r\n> +++ b/src/cmd/vet/print.go\r\n> @@ -11,6 +11,7 @@\r\n>         \"fmt\"\r\n>         \"go/ast\"\r\n>         \"go/token\"\r\n> +       \"strconv\"\r\n>         \"strings\"\r\n>         \"unicode/utf8\"\r\n>  )\r\n> @@ -62,6 +63,23 @@\r\n>         switch v := value.(type) {\r\n>         case *ast.BasicLit:\r\n>                 return v\r\n> +       case *ast.ParenExpr:\r\n> +               return f.literal(v.X)\r\n> +       case *ast.BinaryExpr:\r\n> +               if v.Op != token.ADD {\r\n> +                       break\r\n> +               }\r\n> +               litX := f.literal(v.X)\r\n> +               litY := f.literal(v.Y)\r\n> +               if litX != nil && litY != nil {\r\n> +                       lit := *litX\r\n> +                       x, errX := strconv.Unquote(litX.Value)\r\n> +                       y, errY := strconv.Unquote(litY.Value)\r\n> +                       if errX == nil && errY == nil {\r\n> +                               lit.Value = strconv.Quote(x + y)\r\n> +                               return &lit\r\n> +                       }\r\n> +               }\r\n>         case *ast.Ident:\r\n>                 // See if it's a constant or initial value (we can't tell\r\n> the difference).\r\n>                 if v.Obj == nil || v.Obj.Decl == nil {\r\n> @@ -101,7 +119,10 @@\r\n>         if lit.Kind != token.STRING {\r\n>                 f.Badf(call.Pos(), \"literal %v not a string in call to\",\r\n> lit.Value, name)\r\n>         }\r\n> -       format := lit.Value\r\n> +       format, err := strconv.Unquote(lit.Value)\r\n> +       if err != nil {\r\n> +               f.Badf(call.Pos(), \"invalid quoted string literal\")\r\n> +       }\r\n>         if !strings.Contains(format, \"%\") {\r\n>                 if len(call.Args) > skip+1 {\r\n>                         f.Badf(call.Pos(), \"no formatting directive in %s\r\n> call\", name)\r\n> @@ -282,6 +303,7 @@\r\n>         fmt.Println()                      // not an error\r\n>         fmt.Println(\"%s\", \"hi\")            // ERROR \"possible formatting\r\n> directive in Println call\"\r\n>         fmt.Printf(\"%s\", \"hi\", 3)          // ERROR \"wrong number of args\r\n> in Printf call\"\r\n> +       fmt.Printf(\"%\"+(\"s\"), \"hi\", 3)     // ERROR \"wrong number of args\r\n> in Printf call\"\r\n>         fmt.Printf(\"%s%%%d\", \"hi\", 3)      // correct\r\n>         fmt.Printf(\"%08s\", \"woo\")          // correct\r\n>         fmt.Printf(\"% 8s\", \"woo\")          // correct\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-31 07:17:08.742440",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7226067: cmd/vet: handle added string constants in printf format...",
	"created": "2013-01-31 07:12:23.170670",
	"patchsets": [
		1,
		2001,
		1002,
		3002
	],
	"modified": "2013-01-31 15:53:43.656430",
	"closed": true,
	"issue": 7226067
}