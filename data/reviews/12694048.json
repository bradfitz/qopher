{
	"description": "encoding/binary: fast path for reading slices\n\nAgain, it still allocates but the code is simple.\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkReadSlice1000Int32s        35580        11465  -67.78%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkReadSlice1000Int32s       112.42       348.86    3.10x",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-09 22:07:04.650050",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12694048/diff/1/src/pkg/encoding/binary/binary.go\nFile src/pkg/encoding/binary/binary.go (right):\n\nhttps://codereview.appspot.com/12694048/diff/1/src/pkg/encoding/binary/binary.go#newcode141\nsrc/pkg/encoding/binary/binary.go:141: if n > 8 {\nn > len(b) ?\n\nhttps://codereview.appspot.com/12694048/diff/1/src/pkg/encoding/binary/binary.go#newcode612\nsrc/pkg/encoding/binary/binary.go:612: // intDestSize returns the size of the integer pointer or slice type that data points to,\nthis function name and/or comment should change.\n\nthe comment update didn't help me understand what it did it all.  I had to read the code.\n\nMaybe:\n\n// If data is a pointer to an integer or is a slice of integers, intDestSize returns the size of\n// the referenced memory in bytes, otherwise it returns 0.",
			"disapproval": false,
			"date": "2013-08-09 22:24:59.875640",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=04726e184720 ***\n\nencoding/binary: fast path for reading slices\n\nAgain, it still allocates but the code is simple.\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkReadSlice1000Int32s        35580        11465  -67.78%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkReadSlice1000Int32s       112.42       348.86    3.10x\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12694048",
			"disapproval": false,
			"date": "2013-08-09 22:40:40.911500",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12694048/diff/6001/src/pkg/encoding/binary/binary.go\nFile src/pkg/encoding/binary/binary.go (right):\n\nhttps://codereview.appspot.com/12694048/diff/6001/src/pkg/encoding/binary/binary.go#newcode612\nsrc/pkg/encoding/binary/binary.go:612: // intDestSize returns the size of the data required to represent the data when encoded.\nthis says nothing about 0 meaning unsupported anymore.",
			"disapproval": false,
			"date": "2013-08-09 22:50:04.046360",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 12694048: encoding/binary: fast path for reading slices",
	"created": "2013-08-09 22:06:54.343720",
	"patchsets": [
		1,
		6001
	],
	"modified": "2013-08-09 22:50:04.242100",
	"closed": true,
	"issue": 12694048
}