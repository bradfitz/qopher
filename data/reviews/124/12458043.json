{
	"description": "net: implement DNS TCP fallback query if UDP response is truncated\n\nFixes issue 5686.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"mikioh.mikioh@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-05 06:55:57.058610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go\nFile src/pkg/net/dnsclient_unix.go (right):\n\nhttps://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode42\nsrc/pkg/net/dnsclient_unix.go:42: //Must add 2 byte length header to front of msg\nspace after //\n\nhttps://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode45\nsrc/pkg/net/dnsclient_unix.go:45: msg = msg[0 : mlen+2]\nthis line is doing nothing?\n\nhttps://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode60\nsrc/pkg/net/dnsclient_unix.go:60: //TCP will have 2 byte length header\nspace after //\n\nhttps://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode61\nsrc/pkg/net/dnsclient_unix.go:61: lenbuf := make([]byte, 2)\njust re-use buf (which hasn't been used yet).  read into buf[:2].\n\nhttps://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode62\nsrc/pkg/net/dnsclient_unix.go:62: n, err = c.Read(lenbuf)\nRead isn't guaranteed to fill the buffer.\n\nYou want io.ReadFull\n\nhttps://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode116\nsrc/pkg/net/dnsclient_unix.go:116: if (*msg).truncated {\nwhy not just msg.truncated?\n\nhttps://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode168\nsrc/pkg/net/dnsclient_unix.go:168: \nunrelated change",
			"disapproval": false,
			"date": "2013-08-05 13:49:27.087410",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/05 13:49:27, bradfitz wrote:\n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go\n> File src/pkg/net/dnsclient_unix.go (right):\n> \n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode42\n> src/pkg/net/dnsclient_unix.go:42: //Must add 2 byte length header to front of\n> msg\n> space after //\n> \n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode45\n> src/pkg/net/dnsclient_unix.go:45: msg = msg[0 : mlen+2]\n> this line is doing nothing?\n> \n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode60\n> src/pkg/net/dnsclient_unix.go:60: //TCP will have 2 byte length header\n> space after //\n> \n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode61\n> src/pkg/net/dnsclient_unix.go:61: lenbuf := make([]byte, 2)\n> just re-use buf (which hasn't been used yet).  read into buf[:2].\n> \n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode62\n> src/pkg/net/dnsclient_unix.go:62: n, err = c.Read(lenbuf)\n> Read isn't guaranteed to fill the buffer.\n> \n> You want io.ReadFull\n> \n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode116\n> src/pkg/net/dnsclient_unix.go:116: if (*msg).truncated {\n> why not just msg.truncated?\n> \n> https://codereview.appspot.com/12458043/diff/7001/src/pkg/net/dnsclient_unix.go#newcode168\n> src/pkg/net/dnsclient_unix.go:168: \n> unrelated change\n\nThanks Brad.  Please take another look.\n\nAlex",
			"disapproval": false,
			"date": "2013-08-05 19:01:49.790690",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go\nFile src/pkg/net/dnsclient_unix.go (right):\n\nhttps://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go#newcode61\nsrc/pkg/net/dnsclient_unix.go:61: buf = make([]byte, 2)\nyou don't need this allocation. just use buf[:2]\n\nhttps://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go#newcode62\nsrc/pkg/net/dnsclient_unix.go:62: n, err = c.Read(buf)\nReadFull here too",
			"disapproval": false,
			"date": "2013-08-05 20:29:58.328880",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/05 20:29:58, bradfitz wrote:\n> https://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go\n> File src/pkg/net/dnsclient_unix.go (right):\n> \n> https://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go#newcode61\n> src/pkg/net/dnsclient_unix.go:61: buf = make([]byte, 2)\n> you don't need this allocation. just use buf[:2]\n> \n> https://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go#newcode62\n> src/pkg/net/dnsclient_unix.go:62: n, err = c.Read(buf)\n> ReadFull here too\n\n\nThank you and fixed.  Please take another look.\n\nThanks,\nAlex",
			"disapproval": false,
			"date": "2013-08-05 21:12:11.402770",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/05 21:12:11, axaxs wrote:\n> On 2013/08/05 20:29:58, bradfitz wrote:\n> >\n> https://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go\n> > File src/pkg/net/dnsclient_unix.go (right):\n> > \n> >\n> https://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go#newcode61\n> > src/pkg/net/dnsclient_unix.go:61: buf = make([]byte, 2)\n> > you don't need this allocation. just use buf[:2]\n> > \n> >\n> https://codereview.appspot.com/12458043/diff/13001/src/pkg/net/dnsclient_unix.go#newcode62\n> > src/pkg/net/dnsclient_unix.go:62: n, err = c.Read(buf)\n> > ReadFull here too\n> \n> \n> Thank you and fixed.  Please take another look.\n> \n> Thanks,\n> Alex\n\nHi Brad+Team,  \n\nApologies as I'm still not yet familiar with standard protocol.  Does the latest revision look good to you?  Does someone from the team typically submit them at some interval, so it can close out the bug report as well?  Please let me know if more is needed on my part in this cl.\n\nThanks,\nAlex",
			"disapproval": false,
			"date": "2013-08-10 04:38:29.590890",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Perhaps the CL description \"net: implement DNS TCP fallback query\" might be clear. Also w/ a reference to RFC 5986 too.\n\nAnd please add a test case like dialgoogle or lookup; do you know any good external sites for this purpose?\n\nhttps://codereview.appspot.com/12458043/diff/20001/src/pkg/net/dnsclient_unix.go\nFile src/pkg/net/dnsclient_unix.go (right):\n\nhttps://codereview.appspot.com/12458043/diff/20001/src/pkg/net/dnsclient_unix.go#newcode43\nsrc/pkg/net/dnsclient_unix.go:43: // Must add 2 byte length header to front of msg\nIt's already described in RFC 1035 clearly, so pls drop.\n\nhttps://codereview.appspot.com/12458043/diff/20001/src/pkg/net/dnsclient_unix.go#newcode130\nsrc/pkg/net/dnsclient_unix.go:130: \ndrop blankline",
			"disapproval": false,
			"date": "2013-08-10 07:09:22.346580",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\r\n\r\nPer your suggestion I've removed two comments covered by RFC1035 and the\r\nblank trailing line.  Also renamed to hopefully be more descriptive.  PTAL.\r\n\r\nI do not know of a reliably long live rrset to feel comfortable\r\nimplementing a test.  I have built one on my own nameservers(see\r\ndescription), but do not want tests to fail if I don't maintain it.  Any\r\nsuggestions?\r\n\r\nLastly, I do not see how RFC 5986 is related to this CL - it seems to fall\r\nstrictly under jurisdiction of RFC 1035.  Please advise.\r\n\r\nThanks much,\r\nAlex\r\n\r\n\r\nOn Sat, Aug 10, 2013 at 3:09 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Perhaps the CL description \"net: implement DNS TCP fallback query\" might\r\n> be clear. Also w/ a reference to RFC 5986 too.\r\n>\r\n> And please add a test case like dialgoogle or lookup; do you know any\r\n> good external sites for this purpose?\r\n>\r\n>\r\n> https://codereview.appspot.**com/12458043/diff/20001/src/**\r\n> pkg/net/dnsclient_unix.go<https://codereview.appspot.com/12458043/diff/20001/src/pkg/net/dnsclient_unix.go>\r\n> File src/pkg/net/dnsclient_unix.go (right):\r\n>\r\n> https://codereview.appspot.**com/12458043/diff/20001/src/**\r\n> pkg/net/dnsclient_unix.go#**newcode43<https://codereview.appspot.com/12458043/diff/20001/src/pkg/net/dnsclient_unix.go#newcode43>\r\n> src/pkg/net/dnsclient_unix.go:**43: // Must add 2 byte length header to\r\n> front of msg\r\n> It's already described in RFC 1035 clearly, so pls drop.\r\n>\r\n> https://codereview.appspot.**com/12458043/diff/20001/src/**\r\n> pkg/net/dnsclient_unix.go#**newcode130<https://codereview.appspot.com/12458043/diff/20001/src/pkg/net/dnsclient_unix.go#newcode130>\r\n> src/pkg/net/dnsclient_unix.go:**130:\r\n> drop blankline\r\n>\r\n> https://codereview.appspot.**com/12458043/<https://codereview.appspot.com/12458043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-10 19:35:38.100850",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Aug 11, 2013 at 4:35 AM, Alex Skinner <alex@lx.lc> wrote:\r\n\r\n> I do not know of a reliably long live rrset to feel comfortable implementing\r\n> a test.  I have built one on my own nameservers(see description), but do not\r\n> want tests to fail if I don't maintain it.  Any suggestions?\r\n\r\nCan we use the existing public sites that generate a bit big RRs and support\r\nplain-old TCP fallback? For example,\r\n\r\ndig @8.8.8.8 +dnssec +bufsize=512 gov\r\n;; Truncated, retrying in TCP mode.\r\n\r\nIn a test case, we just run tryOneName for querying something above, no\r\nneed to parse the results because what we need to test is just DNS transport.\r\nAlso, we need to add -dns or reuse -external flag for this test case.\r\n\r\nDoes this make sense?\r\n\r\n> Lastly, I do not see how RFC 5986 is related to this CL\r\n\r\nSure, s/5986/5966/, oops.\r\n",
			"disapproval": false,
			"date": "2013-08-10 22:16:42.707010",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.  I see 5966 being more relevant now :).\r\n\r\nStill, the test described is not reliable.   First, by current design, we\r\ncan only lookup one record type.  The reason is because if I do a 255\r\nquery, it returns nosuchhost because it tries to match rrtypes with query\r\ntype when building the rr slice.  I changed this logic in testing to\r\nindicate 255 matches all, but in real use there is no external function for\r\nan any query, so it's not necessary to propose such a change.\r\n\r\nFurther, dnssec is not indicated in the query, so records aren't returned.\r\n\r\nSo, to accurately test, we need a domain with a single rrset > 512 bytes,\r\nwhich I cannot find.  If you want, i'll include it with my own\r\ntexttest.lx.lc, to be changed later?  Any other ideas?\r\n\r\nThanks,\r\nAlex\r\n\r\n\r\nOn Sat, Aug 10, 2013 at 6:16 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On Sun, Aug 11, 2013 at 4:35 AM, Alex Skinner <alex@lx.lc> wrote:\r\n>\r\n> > I do not know of a reliably long live rrset to feel comfortable\r\n> implementing\r\n> > a test.  I have built one on my own nameservers(see description), but do\r\n> not\r\n> > want tests to fail if I don't maintain it.  Any suggestions?\r\n>\r\n> Can we use the existing public sites that generate a bit big RRs and\r\n> support\r\n> plain-old TCP fallback? For example,\r\n>\r\n> dig @8.8.8.8 +dnssec +bufsize=512 gov\r\n> ;; Truncated, retrying in TCP mode.\r\n>\r\n> In a test case, we just run tryOneName for querying something above, no\r\n> need to parse the results because what we need to test is just DNS\r\n> transport.\r\n> Also, we need to add -dns or reuse -external flag for this test case.\r\n>\r\n> Does this make sense?\r\n>\r\n> > Lastly, I do not see how RFC 5986 is related to this CL\r\n>\r\n> Sure, s/5986/5966/, oops.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-11 23:32:58.068600",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Aug 12, 2013 at 8:32 AM, Alex Skinner <alex@lx.lc> wrote:\r\n\r\n> Still, the test described is not reliable.   First, by current design, we\r\n> can only lookup one record type.  The reason is because if I do a 255 query,\r\n> it returns nosuchhost because it tries to match rrtypes with query type when\r\n> building the rr slice.  I changed this logic in testing to indicate 255\r\n> matches all, but in real use there is no external function for an any query,\r\n> so it's not necessary to propose such a change.\r\n\r\nHm, can we make a DNS transport TCP fallback test case by using exchange\r\nw/ external public sites?\r\n\r\n> So, to accurately test, we need a domain with a single rrset > 512 bytes,\r\n\r\nI think that a DNS transport test case is enough, because you addressed\r\nthe root cause is the lack of TCP fallback for DNS transport. Also, non-CGO\r\ncase, we have to use this transport for all queries.\r\n",
			"disapproval": false,
			"date": "2013-08-12 21:53:59.015100",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/12 21:53:59, mikio wrote:\n> On Mon, Aug 12, 2013 at 8:32 AM, Alex Skinner <mailto:alex@lx.lc> wrote:\n> \n> > Still, the test described is not reliable.   First, by current design, we\n> > can only lookup one record type.  The reason is because if I do a 255 query,\n> > it returns nosuchhost because it tries to match rrtypes with query type when\n> > building the rr slice.  I changed this logic in testing to indicate 255\n> > matches all, but in real use there is no external function for an any query,\n> > so it's not necessary to propose such a change.\n> \n> Hm, can we make a DNS transport TCP fallback test case by using exchange\n> w/ external public sites?\n> \n> > So, to accurately test, we need a domain with a single rrset > 512 bytes,\n> \n> I think that a DNS transport test case is enough, because you addressed\n> the root cause is the lack of TCP fallback for DNS transport. Also, non-CGO\n> case, we have to use this transport for all queries.\n\nThanks, that seems reasonable.\n\nPer suggestion, added short comment reference to RFC 5966, and added manual TCP exchange to lookup_test.go if GOOS is not windows or plan9.  Please take another look.\n\nThanks,\nAlex",
			"disapproval": false,
			"date": "2013-08-13 01:16:09.278050",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "pls dorp \"See http://play.golang.org/p/9Vvr1u5_nz\" line from the CL description. also try cross-compile, thx.\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/dnsclient_unix.go\nFile src/pkg/net/dnsclient_unix.go (right):\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/dnsclient_unix.go#newcode28\nsrc/pkg/net/dnsclient_unix.go:28: func exchange(cfg *dnsConfig, c Conn, name string, qtype uint16, useTCP bool) (*dnsMsg, error) {\nyou don't need to add new arg useTCP here, c is an interface.\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/dnsclient_unix.go#newcode42\nsrc/pkg/net/dnsclient_unix.go:42: if useTCP {\ntype assertion\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/dnsclient_unix.go#newcode58\nsrc/pkg/net/dnsclient_unix.go:58: if useTCP {\nditto\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/dnsclient_unix.go#newcode116\nsrc/pkg/net/dnsclient_unix.go:116: // TCP should be supported, see RFC 5966\nmove up one line and just // see RFC 5966\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go\nFile src/pkg/net/lookup_test.go (right):\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go#newcode140\nsrc/pkg/net/lookup_test.go:140: func TestTCPLookup(t *testing.T) {\nwe need a new file, lookup_unix_test.go or dns_unix_test.go, to avoid build breakages; exchange is not implemented on all platforms; see build tag of dnsclient_unix.go.\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go#newcode149\nsrc/pkg/net/lookup_test.go:149: t.Fatalf(\"failed: %s\", err)\nDial failed\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go#newcode153\nsrc/pkg/net/lookup_test.go:153: c.Close()\ndefer c.Close();  and put just after Dial block\n\nhttps://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go#newcode155\nsrc/pkg/net/lookup_test.go:155: t.Fatalf(\"tcp lookup failed: %s\", err)\nt.Fatalf(\"exchange failed: %v\", err)",
			"disapproval": false,
			"date": "2013-08-13 03:31:27.597990",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tuesday, August 13, 2013 12:31:27 PM UTC+9, Mikio Hara wrote:\r\n\r\n> https://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go#newcode140 \r\n>\r\n> src/pkg/net/lookup_test.go:140<https://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go#newcode140src/pkg/net/lookup_test.go:140>: \r\n> func TestTCPLookup(t *testing.T) { \r\n> we need a new file, lookup_unix_test.go or dns_unix_test.go, to avoid \r\n> build breakages; exchange is not implemented on all platforms; see build \r\n> tag of dnsclient_unix.go. \r\n>\r\n\r\ndnsclient_unix_test.go might be better.\r\n",
			"disapproval": false,
			"date": "2013-08-13 04:05:53.679090",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All suggestions accounted for I think.  Kept useTCP as bool value but set\r\nto a type assertion rather than argument, hope this is what you had in mind\r\nas asserting twice seems wasteful.  Cross compile works without error.\r\n Created new test file as suggested.\r\n\r\nPTAL\r\n\r\nThanks,\r\nAlex\r\n\r\n\r\nOn Tue, Aug 13, 2013 at 12:05 AM, Mikio Hara <mikioh.mikioh@gmail.com>wrote:\r\n\r\n> On Tuesday, August 13, 2013 12:31:27 PM UTC+9, Mikio Hara wrote:\r\n>\r\n>> https://codereview.appspot.**com/12458043/diff/37001/src/**\r\n>> pkg/net/lookup_test.go#**newcode140\r\n>> src/pkg/net/lookup_test.go:140<https://codereview.appspot.com/12458043/diff/37001/src/pkg/net/lookup_test.go#newcode140src/pkg/net/lookup_test.go:140>\r\n>> **: func TestTCPLookup(t *testing.T) {\r\n>> we need a new file, lookup_unix_test.go or dns_unix_test.go, to avoid\r\n>> build breakages; exchange is not implemented on all platforms; see build\r\n>> tag of dnsclient_unix.go.\r\n>>\r\n>\r\n> dnsclient_unix_test.go might be better.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 05:38:05.313880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-13 16:43:09.586620",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=77ceb1db4a1e ***\n\nnet: implement DNS TCP fallback query if UDP response is truncated\n\nFixes issue 5686.\n\nR=golang-dev, bradfitz, mikioh.mikioh\nCC=golang-dev\nhttps://codereview.appspot.com/12458043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-08-13 16:44:14.748840",
			"approval": false
		}
	],
	"owner_email": "alex@lx.lc",
	"private": false,
	"base_url": "",
	"owner": "axaxs",
	"subject": "code review 12458043: net: Retry DNS with TCP if UDP response is truncated.",
	"created": "2013-08-05 06:48:34.509210",
	"patchsets": [
		1,
		3001,
		6001,
		7001,
		13001,
		20001,
		27001,
		35001,
		37001,
		46001
	],
	"modified": "2013-08-14 10:07:50.913800",
	"closed": false,
	"issue": 12458043
}