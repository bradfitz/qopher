{
	"description": "net: pick a pair of different address family IP addresses for DNS registered name\n\nThis CL makes resolveInternetAddr return a list of addresses that\ncontain a pair of different address family IP addresses if possible.\n\nThis is in preparation for simple Happy Eyeballs connection setup for\nTCP on dual stack IP host as described in RFC 6555.\n\nUpdate issue 3610\nUpdate issue 5267",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-03 15:48:12.542130",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-08-07 03:38:49.195620",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm concerned that this introduces allocations for the common case (not\r\nhaving multiple Adds) in resolveInternetAddr.  Instead of returning a\r\n[]Addr from resolveInternetAddr, can't we just introduce a new private type\r\n(multiAddr []Addr) implementing Addr, then check whether Addr is a\r\nmultiAddr in places where it matters?\r\n\r\nAlso, try to minimize the diff size.  Look at lookup.go for instance:  why\r\nis stuff moving around?\r\n\r\n\r\n\r\nOn Sat, Aug 3, 2013 at 8:48 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: pick a pair of different address family IP addresses for DNS\r\n> registered name\r\n>\r\n> This CL makes resolveInternetAddr return a list of addresses that\r\n> contain a pair of different address family IP addresses if possible.\r\n>\r\n> This is in preparation for happy eyeballs-like connection setup on dual\r\n> stack IP host.\r\n>\r\n> Update issue 3610\r\n> Update issue 5267\r\n>\r\n> Please review this at https://codereview.appspot.**com/12414043/<https://codereview.appspot.com/12414043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/dial.go\r\n>   M src/pkg/net/dial_gen.go\r\n>   M src/pkg/net/fd_unix.go\r\n>   M src/pkg/net/fd_windows.go\r\n>   M src/pkg/net/iprawsock.go\r\n>   M src/pkg/net/ipsock.go\r\n>   M src/pkg/net/lookup.go\r\n>   M src/pkg/net/tcpsock.go\r\n>   M src/pkg/net/udpsock.go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 16:53:17.669070",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nPTAL\r\n\r\nOn Thu, Aug 8, 2013 at 1:53 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> I'm concerned that this introduces allocations for the common case (not\r\n> having multiple Adds) in resolveInternetAddr.  Instead of returning a []Addr\r\n> from resolveInternetAddr, can't we just introduce a new private type\r\n> (multiAddr []Addr) implementing Addr, then check whether Addr is a multiAddr\r\n> in places where it matters?\r\n\r\nI hesitated about introducing []Addr in Addr, such thing that makes\r\nreaders confuse, but less garbage allocation sounds good. Will go with\r\nproposal.\r\n\r\n> Also, try to minimize the diff size.  Look at lookup.go for instance:  why\r\n> is stuff moving around?\r\n\r\nLooks like lookup.go and other platform-dep files have some styles;\r\ne.g., Host, IP, ... Addr and I just don't want to break that.\r\n",
			"disapproval": false,
			"date": "2013-08-08 21:13:48.115050",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-08-12 21:54:30.266070",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12414043/diff/61001/src/pkg/net/ipsock.go\nFile src/pkg/net/ipsock.go (right):\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/ipsock.go#newcode43\nsrc/pkg/net/ipsock.go:43: switch ma[0].(type) {\nhow about just:\n\nreturn \"multi\"\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/ipsock.go#newcode56\nsrc/pkg/net/ipsock.go:56: s += \" \"\nvar buf []byte\n\nappend to a []byte instead and return string(buf)\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/lookup.go\nFile src/pkg/net/lookup.go (right):\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/lookup.go#newcode7\nsrc/pkg/net/lookup.go:7: import \"time\"\nplease stop rearranging files.  your diffs are already too big.  this just makes it even bigger.\n\nrearrange this back to minimize the diff size.\n\nIf you want to rearrange things, send those as separate no-op CLs.",
			"disapproval": false,
			"date": "2013-08-12 22:50:25.533260",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/ipsock.go\nFile src/pkg/net/ipsock.go (right):\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/ipsock.go#newcode43\nsrc/pkg/net/ipsock.go:43: switch ma[0].(type) {\nOn 2013/08/12 22:50:25, bradfitz wrote:\n> how about just:\n> \n> return \"multi\"\n\nDone.\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/ipsock.go#newcode56\nsrc/pkg/net/ipsock.go:56: s += \" \"\nOn 2013/08/12 22:50:25, bradfitz wrote:\n> var buf []byte\n> \n> append to a []byte instead and return string(buf) \n\nDone.\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/lookup.go\nFile src/pkg/net/lookup.go (right):\n\nhttps://codereview.appspot.com/12414043/diff/61001/src/pkg/net/lookup.go#newcode7\nsrc/pkg/net/lookup.go:7: import \"time\"\nOn 2013/08/12 22:50:25, bradfitz wrote:\n> please stop rearranging files.  your diffs are already too big.  this just makes\n> it even bigger.\n> \n> rearrange this back to minimize the diff size.\n> \n> If you want to rearrange things, send those as separate no-op CLs.\n\nDone.",
			"disapproval": false,
			"date": "2013-08-13 00:11:47.896420",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-13 07:43:27.522430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now the pilotAddr everywhere scares me.  I think it's too easy to forget one and have a multiAddr escape outside the net package.\n\nMaybe the type system could help us here.\n\n// iaddr is an internal Addr. Its Addr is either a public type, or a multiAddr.\ntype iaddr struct {\n    a Addr\n}\n\nfunc (ia iaddr) Addr() Addr { return pilotAddr(ia.a) }\n\nThen it's the same size as an interface value, but won't let us accidentally leak a multiAddr out of the package.\n\nSorry for the design feedback, but to be fair: you threw out a CL without having a design discussion first, IIRC.\n\n(Is \"pilot addr\" a term I should know?)",
			"disapproval": false,
			"date": "2013-08-13 16:11:03.657860",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks for the feedback, will do so.\n\n> Sorry for the design feedback, but to be fair: you threw out a CL without having\n> a design discussion first, IIRC.\n\nyup, my bad. honestly, I've never imagined how far this CL will go.\n\n> (Is \"pilot addr\" a term I should know?)\n\nnope, alternatives welcome.\nI google'd plain-old telco tech terms and found it, because looks like net API uses such thing; e.g., Dial.",
			"disapproval": false,
			"date": "2013-08-13 23:48:25.547360",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-14 20:24:15.237920",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looking nicer.\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go\nFile src/pkg/net/ipsock.go (right):\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode32\nsrc/pkg/net/ipsock.go:32: var nilIntAddr intAddr\nI'd just delete this and replace it with intAddr{} everywhere.  It's zero, not nil.\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode34\nsrc/pkg/net/ipsock.go:34: // An intAddr reprensets an internal address bearer.  It contains\nrepresents.\n\nBut let's change the comment:\n\n// An intAddr protects its wrapped Addr type from escaping the net package\n// without validation.\n// The wrapped Addr is either of a public type (TCPAddr, etc) or is of type \"multiAddr\",\n// representing a list of multiple addresses.\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode40\nsrc/pkg/net/ipsock.go:40: // Addr returns the pilot address when it consists of a list of\ns/pilot/first/\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode41\nsrc/pkg/net/ipsock.go:41: // addresses.  Otherwise it returns an address.\ns/an/the/",
			"disapproval": false,
			"date": "2013-08-14 20:39:14.289700",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go\nFile src/pkg/net/ipsock.go (right):\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode32\nsrc/pkg/net/ipsock.go:32: var nilIntAddr intAddr\nOn 2013/08/14 20:39:14, bradfitz wrote:\n> I'd just delete this and replace it with intAddr{} everywhere.  It's zero, not\n> nil.\n\nDone.\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode34\nsrc/pkg/net/ipsock.go:34: // An intAddr reprensets an internal address bearer.  It contains\nthanks.\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode40\nsrc/pkg/net/ipsock.go:40: // Addr returns the pilot address when it consists of a list of\nOn 2013/08/14 20:39:14, bradfitz wrote:\n> s/pilot/first/\n\nDone.\n\nhttps://codereview.appspot.com/12414043/diff/87001/src/pkg/net/ipsock.go#newcode41\nsrc/pkg/net/ipsock.go:41: // addresses.  Otherwise it returns an address.\nOn 2013/08/14 20:39:14, bradfitz wrote:\n> s/an/the/\n\nDone.",
			"disapproval": false,
			"date": "2013-08-14 21:17:17.824040",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "aha, thx!\r\n\r\nOn Friday, August 16, 2013 10:17:34 AM UTC+9, rsc wrote:\r\n>\r\n>\r\n> https://codereview.appspot.com/12414043/diff/99001/src/pkg/net/ipsock.go \r\n> File src/pkg/net/ipsock.go (right): \r\n>\r\n> https://codereview.appspot.com/12414043/diff/99001/src/pkg/net/ipsock.go#newcode55 \r\n>\r\n> src/pkg/net/ipsock.go:55<https://codereview.appspot.com/12414043/diff/99001/src/pkg/net/ipsock.go#newcode55src/pkg/net/ipsock.go:55>: \r\n> // be used as the API that implements Addr \r\n> interface; don't return \r\n> An easy way to ensure this would be to make multiAddr not implement \r\n> Addr. \r\n> Why does it implement Addr? \r\n>\r\n> That is, you could do \r\n>\r\n> type addrLIst []Addr \r\n>\r\n> func (a addrList) Addr() Addr { \r\n>      if len(a) == 0 { \r\n>          return nil \r\n>      } \r\n>      return a[0] \r\n> } \r\n>\r\n> and addrList would be used everywhere intAddr currently is. It would \r\n> replace both intAddr and multiAddr. \r\n>\r\n> https://codereview.appspot.com/12414043/ \r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-16 04:19:43.526410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12414043/diff/99001/src/pkg/net/ipsock.go\nFile src/pkg/net/ipsock.go (right):\n\nhttps://codereview.appspot.com/12414043/diff/99001/src/pkg/net/ipsock.go#newcode55\nsrc/pkg/net/ipsock.go:55: // be used as the API that implements Addr interface; don't return\nAn easy way to ensure this would be to make multiAddr not implement Addr.\nWhy does it implement Addr?\n\nThat is, you could do\n\ntype addrLIst []Addr\n\nfunc (a addrList) Addr() Addr {\n    if len(a) == 0 {\n        return nil\n    }\n    return a[0]\n}\n\nand addrList would be used everywhere intAddr currently is. It would replace both intAddr and multiAddr.",
			"disapproval": false,
			"date": "2013-08-16 01:17:34.736680",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 12414043: net: pick a pair of different address family IP address...",
	"created": "2013-08-03 15:47:26.092080",
	"patchsets": [
		41001,
		47001,
		52001,
		61001,
		78001,
		81001,
		87001,
		86002,
		99001
	],
	"modified": "2013-08-16 04:19:43.717450",
	"closed": false,
	"issue": 12414043
}