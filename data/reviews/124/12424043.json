{
	"description": "cmd/5c, cmd/5g, cmd/5l: turn MOVB, MOVH into plain moves, optimize short arithmetic.\n\nPseudo-instructions MOVBS and MOVHS are used to clarify\nthe semantics of short integers vs. registers:\n * 8-bit and 16-bit values in registers are assumed to always\n   be zero-extended or sign-extended depending on their type.\n * MOVB is truncation or move of an already extended value\n   between registers.\n * MOVBU enforces zero-extension at the destination (register).\n * MOVBS enforces sign-extension at the destination (register).\nAnd similarly for MOVH/MOVS/MOVHU.\n\nThe linker is adapted to assemble MOVB and MOVH to an ordinary\nmov. Also a peephole pass in 5g that aims at eliminating\nredundant zero/sign extensions is improved.\n\nencoding/binary:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkReadSlice1000Int32s              220387       217185   -1.45%\nBenchmarkReadStruct                        12839        12910   +0.55%\nBenchmarkReadInts                           5692         5534   -2.78%\nBenchmarkWriteInts                          6137         6016   -1.97%\nBenchmarkPutUvarint32                        257          241   -6.23%\nBenchmarkPutUvarint64                        812          754   -7.14%\nbenchmark                               old MB/s     new MB/s  speedup\nBenchmarkReadSlice1000Int32s               18.15        18.42    1.01x\nBenchmarkReadStruct                         5.45         5.42    0.99x\nBenchmarkReadInts                           5.27         5.42    1.03x\nBenchmarkWriteInts                          4.89         4.99    1.02x\nBenchmarkPutUvarint32                      15.56        16.57    1.06x\nBenchmarkPutUvarint64                       9.85        10.60    1.08x\n\ncrypto/des:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkEncrypt                            7002         5169  -26.18%\nBenchmarkDecrypt                            7015         5195  -25.94%\nbenchmark                               old MB/s     new MB/s  speedup\nBenchmarkEncrypt                            1.14         1.55    1.36x\nBenchmarkDecrypt                            1.14         1.54    1.35x\n\nstrconv:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAtof64Decimal                       457          385  -15.75%\nBenchmarkAtof64Float                         574          479  -16.55%\nBenchmarkAtof64FloatExp                     1035          906  -12.46%\nBenchmarkAtof64Big                          1793         1457  -18.74%\nBenchmarkAtof64RandomBits                   2267         2066   -8.87%\nBenchmarkAtof64RandomFloats                 1416         1194  -15.68%\nBenchmarkAtof32Decimal                       451          379  -15.96%\nBenchmarkAtof32Float                         547          435  -20.48%\nBenchmarkAtof32FloatExp                     1095          986   -9.95%\nBenchmarkAtof32Random                       1154         1006  -12.82%\nBenchmarkAtoi                               1415         1380   -2.47%\nBenchmarkAtoiNeg                            1414         1401   -0.92%\nBenchmarkAtoi64                             1744         1671   -4.19%\nBenchmarkAtoi64Neg                          1737         1662   -4.32%\n\nFixes issue 1837.",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "benchmark                              old ns/op    new ns/op    delta\n[encoding/binary]\nBenchmarkReadSlice1000Int32s              220387       217185   -1.45%\nBenchmarkReadStruct                        12839        12910   +0.55%\nBenchmarkReadInts                           5692         5534   -2.78%\nBenchmarkWriteInts                          6137         6016   -1.97%\nBenchmarkPutUvarint32                        257          241   -6.23%\nBenchmarkPutUvarint64                        812          754   -7.14%\n[crypto/des]\nBenchmarkEncrypt                            7002         5169  -26.18%\nBenchmarkDecrypt                            7015         5195  -25.94%\n[strconv]\nBenchmarkAtof64Decimal                       457          385  -15.75%\nBenchmarkAtof64Float                         574          479  -16.55%\nBenchmarkAtof64FloatExp                     1035          906  -12.46%\nBenchmarkAtof64Big                          1793         1457  -18.74%\nBenchmarkAtof64RandomBits                   2267         2066   -8.87%\nBenchmarkAtof64RandomFloats                 1416         1194  -15.68%\nBenchmarkAtof32Decimal                       451          379  -15.96%\nBenchmarkAtof32Float                         547          435  -20.48%\nBenchmarkAtof32FloatExp                     1095          986   -9.95%\nBenchmarkAtof32Random                       1154         1006  -12.82%\nBenchmarkAtoi                               1415         1380   -2.47%\nBenchmarkAtoiNeg                            1414         1401   -0.92%\nBenchmarkAtoi64                             1744         1671   -4.19%\nBenchmarkAtoi64Neg                          1737         1662   -4.32%\nBenchmarkFormatFloatDecimal                 2309         2258   -2.21%\nBenchmarkFormatFloat                        3290         3232   -1.76%\nBenchmarkFormatFloatExp                     2972         2940   -1.08%\nBenchmarkFormatFloatNegExp                  2936         2929   -0.24%\nBenchmarkFormatFloatBig                     4560         4510   -1.10%\nBenchmarkAppendFloatDecimal                 1200         1121   -6.58%\nBenchmarkAppendFloat                        2128         2081   -2.21%\nBenchmarkAppendFloatExp                     1728         1733   +0.29%\nBenchmarkAppendFloatNegExp                  1717         1707   -0.58%\nBenchmarkAppendFloatBig                     3271         3245   -0.79%\nBenchmarkAppendFloat32Integer               1151         1088   -5.47%\nBenchmarkAppendFloat32ExactFraction         1657         1638   -1.15%\nBenchmarkAppendFloat32Point                 2079         2063   -0.77%\nBenchmarkAppendFloat32Exp                   1685         1676   -0.53%\nBenchmarkAppendFloat32NegExp                1670         1657   -0.78%\nBenchmarkAppendFloat64Fixed1                1261         1276   +1.19%\nBenchmarkAppendFloat64Fixed2                1322         1326   +0.30%\nBenchmarkAppendFloat64Fixed3                1260         1256   -0.32%\nBenchmarkAppendFloat64Fixed4                1334         1309   -1.87%\nBenchmarkFormatInt                         49036        49343   +0.63%\nBenchmarkAppendInt                         39387        39851   +1.18%\nBenchmarkFormatUint                        27747        27836   +0.32%\nBenchmarkAppendUint                        26064        26317   +0.97%\nBenchmarkUnquoteEasy                        1921         1694  -11.82%\nBenchmarkUnquoteHard                       10899        10286   -5.62%\n\nbenchmark                               old MB/s     new MB/s  speedup\nBenchmarkReadSlice1000Int32s               18.15        18.42    1.01x\nBenchmarkReadStruct                         5.45         5.42    0.99x\nBenchmarkReadInts                           5.27         5.42    1.03x\nBenchmarkWriteInts                          4.89         4.99    1.02x\nBenchmarkPutUvarint32                      15.56        16.57    1.06x\nBenchmarkPutUvarint64                       9.85        10.60    1.08x\nBenchmarkEncrypt                            1.14         1.55    1.36x\nBenchmarkDecrypt                            1.14         1.54    1.35x",
			"disapproval": false,
			"date": "2013-08-04 02:07:07.312370",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-04 07:34:53.517600",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "chromebook, some nice improvements here\n\nlocalhost(~/go/src/pkg/encoding/binary) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkReadSlice1000Int32s       129202       129256   +0.04%\nBenchmarkReadStruct                  9406         9200   -2.19%\nBenchmarkReadInts                    4687         4581   -2.26%\nBenchmarkWriteInts                   4510         4692   +4.04%\nBenchmarkPutUvarint32                 191          178   -6.81%\nBenchmarkPutUvarint64                 613          569   -7.18%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkReadSlice1000Int32s        30.96        30.95    1.00x\nBenchmarkReadStruct                  7.44         7.61    1.02x\nBenchmarkReadInts                    6.40         6.55    1.02x\nBenchmarkWriteInts                   6.65         6.39    0.96x\nBenchmarkPutUvarint32               20.85        22.36    1.07x\nBenchmarkPutUvarint64               13.04        14.04    1.08x\n\nlocalhost(~/go/src/pkg/crypto/des) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEncrypt         4413         3730  -15.48%\nBenchmarkDecrypt         4377         3615  -17.41%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEncrypt         1.81         2.14    1.18x\nBenchmarkDecrypt         1.83         2.21    1.21x\n\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAtof64Decimal                       399          349  -12.53%\nBenchmarkAtof64Float                         464          386  -16.81%\nBenchmarkAtof64FloatExp                      748          653  -12.70%\nBenchmarkAtof64Big                           982          764  -22.20%\nBenchmarkAtof64RandomBits                   1217          888  -27.03%\nBenchmarkAtof64RandomFloats                  854          703  -17.68%\nBenchmarkAtof32Decimal                       396          357   -9.85%\nBenchmarkAtof32Float                         447          387  -13.42%\nBenchmarkAtof32FloatExp                      749          737   -1.60%\nBenchmarkAtof32Random                        718          655   -8.77%\nBenchmarkAtoi                                870          843   -3.10%\nBenchmarkAtoiNeg                             873          848   -2.86%\nBenchmarkAtoi64                             1028          985   -4.18%\nBenchmarkAtoi64Neg                          1032         1003   -2.81%\nBenchmarkFormatFloatDecimal                 1535         1585   +3.26%\nBenchmarkFormatFloat                        2306         2103   -8.80%\nBenchmarkFormatFloatExp                     2044         1935   -5.33%\nBenchmarkFormatFloatNegExp                  2095         1909   -8.88%\nBenchmarkFormatFloatBig                     2994         2888   -3.54%\nBenchmarkAppendFloatDecimal                  781          745   -4.61%\nBenchmarkAppendFloat                        1335         1300   -2.62%\nBenchmarkAppendFloatExp                     1124         1098   -2.31%\nBenchmarkAppendFloatNegExp                  1171         1142   -2.48%\nBenchmarkAppendFloatBig                     2027         2005   -1.09%\nBenchmarkAppendFloat32Integer                759          730   -3.82%\nBenchmarkAppendFloat32ExactFraction         1063         1067   +0.38%\nBenchmarkAppendFloat32Point                 1325         1313   -0.91%\nBenchmarkAppendFloat32Exp                   1118         1079   -3.49%\nBenchmarkAppendFloat32NegExp                1145         1136   -0.79%\nBenchmarkAppendFloat64Fixed1                 774          747   -3.49%\nBenchmarkAppendFloat64Fixed2                 797          747   -6.27%\nBenchmarkAppendFloat64Fixed3                 775          754   -2.71%\nBenchmarkAppendFloat64Fixed4                 826          776   -6.05%\nBenchmarkFormatInt                         36891        37012   +0.33%\nBenchmarkAppendInt                         29159        28963   -0.67%\nBenchmarkFormatUint                        20812        20600   -1.02%\nBenchmarkAppendUint                        19572        19288   -1.45%\nBenchmarkUnquoteEasy                        1164          945  -18.81%\nBenchmarkUnquoteHard                        6391         6238   -2.39%\n\nlocalhost(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt                                                                                                       \nbenchmark                         old ns/op    new ns/op    delta\nBenchmarkBinaryTree17            2147483647   2147483647   +0.33%\nBenchmarkFannkuch11              2147483647   2147483647   -0.26%\nBenchmarkFmtFprintfEmpty                497          493   -0.80%\nBenchmarkFmtFprintfString              1515         1378   -9.04%\nBenchmarkFmtFprintfInt                 1138         1043   -8.35%\nBenchmarkFmtFprintfIntInt              1707         1625   -4.80%\nBenchmarkFmtFprintfPrefixedInt         1595         1451   -9.03%\nBenchmarkFmtFprintfFloat               3988         3393  -14.92%\nBenchmarkFmtManyArgs                   6269         5846   -6.75%\nBenchmarkGobDecode                 56149128     56179246   +0.05%\nBenchmarkGobEncode                 20356020     20188862   -0.82%\nBenchmarkGzip                    1908192669   1905990625   -0.12%\nBenchmarkGunzip                   279611141    277611991   -0.71%\nBenchmarkHTTPClientServer            233775       231205   -1.10%\nBenchmarkJSONEncode               284106283    260792225   -8.21%\nBenchmarkJSONDecode               610427854    609361125   -0.17%\nBenchmarkMandelbrot200             13114157     13098066   -0.12%\nBenchmarkGoParse                   23272428     21817975   -6.25%\nBenchmarkRegexpMatchEasy0_32            553          564   +1.99%\nBenchmarkRegexpMatchEasy0_1K           2594         2624   +1.16%\nBenchmarkRegexpMatchEasy1_32            584          597   +2.23%\nBenchmarkRegexpMatchEasy1_1K           4785         4803   +0.38%\nBenchmarkRegexpMatchMedium_32           922          868   -5.86%\nBenchmarkRegexpMatchMedium_1K        263976       254771   -3.49%\nBenchmarkRegexpMatchHard_32           13989        13422   -4.05%\nBenchmarkRegexpMatchHard_1K          424377       410953   -3.16%\nBenchmarkRevcomp                   37780220     35840148   -5.14%\nBenchmarkTemplate                 667347000    587826375  -11.92%\nBenchmarkTimeParse                     5108         4763   -6.75%\nBenchmarkTimeFormat                    6926         7574   +9.36%\n\nbenchmark                          old MB/s     new MB/s  speedup\nBenchmarkGobDecode                    13.67        13.66    1.00x\nBenchmarkGobEncode                    37.71        38.02    1.01x\nBenchmarkGzip                         10.17        10.18    1.00x\nBenchmarkGunzip                       69.40        69.90    1.01x\nBenchmarkJSONEncode                    6.83         7.44    1.09x\nBenchmarkJSONDecode                    3.18         3.18    1.00x\nBenchmarkGoParse                       2.49         2.65    1.06x\nBenchmarkRegexpMatchEasy0_32          57.81        56.65    0.98x\nBenchmarkRegexpMatchEasy0_1K         394.74       390.24    0.99x\nBenchmarkRegexpMatchEasy1_32          54.72        53.60    0.98x\nBenchmarkRegexpMatchEasy1_1K         213.99       213.18    1.00x\nBenchmarkRegexpMatchMedium_32          1.08         1.15    1.06x\nBenchmarkRegexpMatchMedium_1K          3.88         4.02    1.04x\nBenchmarkRegexpMatchHard_32            2.29         2.38    1.04x\nBenchmarkRegexpMatchHard_1K            2.41         2.49    1.03x\nBenchmarkRevcomp                      67.28        70.92    1.05x\nBenchmarkTemplate                      2.91         3.30    1.13x",
			"disapproval": false,
			"date": "2013-08-04 12:36:47.159080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-08 13:55:19.972230",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/08 13:55:19, rsc wrote:\n> LGTM\n\nI wrote this when cgo was broken and I notice I have forgotten to modify 5c for the changes, and now I have a subtle bug in the runtime that breaks cgo (the preprocessor program).\n\nI suggest breaking this in multiple patches as I originally intended.",
			"disapproval": false,
			"date": "2013-08-08 20:32:41.281890",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Thu, Aug 8, 2013 at 3:20 PM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> all.bash seems happy now.\r\n>\r\n>\r\n> https://codereview.appspot.**com/12424043/<https://codereview.appspot.com/12424043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-08 22:21:51.960090",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure.\r\n",
			"disapproval": false,
			"date": "2013-08-08 20:34:52.290440",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch set 4 rebased on revision b0240b16a8e0 (CL 12682043)",
			"disapproval": false,
			"date": "2013-08-08 21:32:18.306330",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-08 22:05:47.648860",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all.bash seems happy now.",
			"disapproval": false,
			"date": "2013-08-08 22:20:34.730670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c\nFile src/cmd/5g/peep.c (right):\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c#newcode586\nsrc/cmd/5g/peep.c:586: *   MOVBS R, R' <- r\ns/ <- r//\n(confused me)\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c#newcode594\nsrc/cmd/5g/peep.c:594: * r is assumed to be a MOVBS/MOVBU/MOVHS/MOVHU instruction.\nMOVBS above can be MOVBS, MOVBU, MOVHS, or MOVHU.\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c#newcode603\nsrc/cmd/5g/peep.c:603: r1 = findpre(r, &p->from);\nfindpre is stronger than you need here. You don't need the check for unique successors. Fine to leave as is, or add a flag.",
			"disapproval": false,
			"date": "2013-08-08 22:57:42.823990",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=76c7f1984baa ***\n\ncmd/5c, cmd/5g, cmd/5l: turn MOVB, MOVH into plain moves, optimize short arithmetic.\n\nPseudo-instructions MOVBS and MOVHS are used to clarify\nthe semantics of short integers vs. registers:\n * 8-bit and 16-bit values in registers are assumed to always\n   be zero-extended or sign-extended depending on their type.\n * MOVB is truncation or move of an already extended value\n   between registers.\n * MOVBU enforces zero-extension at the destination (register).\n * MOVBS enforces sign-extension at the destination (register).\nAnd similarly for MOVH/MOVS/MOVHU.\n\nThe linker is adapted to assemble MOVB and MOVH to an ordinary\nmov. Also a peephole pass in 5g that aims at eliminating\nredundant zero/sign extensions is improved.\n\nencoding/binary:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkReadSlice1000Int32s              220387       217185   -1.45%\nBenchmarkReadStruct                        12839        12910   +0.55%\nBenchmarkReadInts                           5692         5534   -2.78%\nBenchmarkWriteInts                          6137         6016   -1.97%\nBenchmarkPutUvarint32                        257          241   -6.23%\nBenchmarkPutUvarint64                        812          754   -7.14%\nbenchmark                               old MB/s     new MB/s  speedup\nBenchmarkReadSlice1000Int32s               18.15        18.42    1.01x\nBenchmarkReadStruct                         5.45         5.42    0.99x\nBenchmarkReadInts                           5.27         5.42    1.03x\nBenchmarkWriteInts                          4.89         4.99    1.02x\nBenchmarkPutUvarint32                      15.56        16.57    1.06x\nBenchmarkPutUvarint64                       9.85        10.60    1.08x\n\ncrypto/des:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkEncrypt                            7002         5169  -26.18%\nBenchmarkDecrypt                            7015         5195  -25.94%\nbenchmark                               old MB/s     new MB/s  speedup\nBenchmarkEncrypt                            1.14         1.55    1.36x\nBenchmarkDecrypt                            1.14         1.54    1.35x\n\nstrconv:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAtof64Decimal                       457          385  -15.75%\nBenchmarkAtof64Float                         574          479  -16.55%\nBenchmarkAtof64FloatExp                     1035          906  -12.46%\nBenchmarkAtof64Big                          1793         1457  -18.74%\nBenchmarkAtof64RandomBits                   2267         2066   -8.87%\nBenchmarkAtof64RandomFloats                 1416         1194  -15.68%\nBenchmarkAtof32Decimal                       451          379  -15.96%\nBenchmarkAtof32Float                         547          435  -20.48%\nBenchmarkAtof32FloatExp                     1095          986   -9.95%\nBenchmarkAtof32Random                       1154         1006  -12.82%\nBenchmarkAtoi                               1415         1380   -2.47%\nBenchmarkAtoiNeg                            1414         1401   -0.92%\nBenchmarkAtoi64                             1744         1671   -4.19%\nBenchmarkAtoi64Neg                          1737         1662   -4.32%\n\nFixes issue 1837.\n\nR=rsc, dave, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12424043\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c\nFile src/cmd/5g/peep.c (right):\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c#newcode586\nsrc/cmd/5g/peep.c:586: *   MOVBS R, R' <- r\nOn 2013/08/08 22:57:43, rsc wrote:\n> s/ <- r//\n> (confused me)\n\nDone.\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c#newcode594\nsrc/cmd/5g/peep.c:594: * r is assumed to be a MOVBS/MOVBU/MOVHS/MOVHU instruction.\nOn 2013/08/08 22:57:43, rsc wrote:\n> MOVBS above can be MOVBS, MOVBU, MOVHS, or MOVHU.\n\nDone.\n\nhttps://codereview.appspot.com/12424043/diff/17001/src/cmd/5g/peep.c#newcode603\nsrc/cmd/5g/peep.c:603: r1 = findpre(r, &p->from);\nOn 2013/08/08 22:57:43, rsc wrote:\n> findpre is stronger than you need here. You don't need the check for unique\n> successors. Fine to leave as is, or add a flag.\n\nLeaving as is for the moment.",
			"disapproval": false,
			"date": "2013-08-09 04:43:57.170540",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 12424043: cmd/5c, cmd/5g, cmd/5l: turn MOVB, MOVH into plain move...",
	"created": "2013-08-04 02:06:19.409720",
	"patchsets": [
		1,
		2001,
		5001,
		13001,
		17001,
		23001
	],
	"modified": "2013-08-13 05:04:04.853570",
	"closed": true,
	"issue": 12424043
}