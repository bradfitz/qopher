{
	"description": "net: reduce number of memory allocations during IO operations\nEmbed all data necessary for read/write operations directly into netFD.\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkTCP4Persistent          27669        23341  -15.64%\nBenchmarkTCP4Persistent-2        18173        12558  -30.90%\nBenchmarkTCP4Persistent-4        10390         7319  -29.56%\n\nThis change will intentionally break all builders to see\nhow many allocations they do per read/write.\nThis will be fixed soon afterwards.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-03 16:11:20.994120",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add a test.\n\nAlex",
			"disapproval": false,
			"date": "2013-08-04 03:31:42.428640",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One more.\n\nAlex\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go#newcode301\nsrc/pkg/net/tcp_test.go:301: switch runtime.GOOS {\nI think we should just run it for every OS. This way we will see which builders are broken. Then we could create an issue an put temp \"Skip\" in here.",
			"disapproval": false,
			"date": "2013-08-05 01:59:21.341980",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/04 03:31:42, brainman wrote:\n> Please add a test.\n\n\nDone\nPTAL",
			"disapproval": false,
			"date": "2013-08-04 10:36:13.146710",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nif you agree with my suggestions.\n\nIt is much simpler now, thank you very much.\n\nAlex\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go\nFile src/pkg/net/fd_windows.go (right):\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode88\nsrc/pkg/net/fd_windows.go:88: rsa    [2]syscall.RawSockaddrAny\nThese are quite large (112 each on windows-386). And aren't used for most common tcp connection. Maybe allocate these separately: alloc and dealloc them in accept, alloc and keep them forever in ReadFrom.\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode109\nsrc/pkg/net/fd_windows.go:109: submit func(o *operation) error\nDocument that submit == nil means \"to cancel\".\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode129\nsrc/pkg/net/fd_windows.go:129: // ExecIO executes a single IO operation oi. It submits and cancels\ns/oi/o/\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode291\nsrc/pkg/net/fd_windows.go:291: o := &fd.op[1]\nIndex values (1 and 0) are bit cryptic. Maybe create a const? Up to you.\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttps://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go#newcode299\nsrc/pkg/net/tcp_test.go:299: func TestTCPReadWriteMallocs(t *testing.T) {\nI think it is good idea to add test with timeouts. As you know, timeouts execution path is quite different.",
			"disapproval": false,
			"date": "2013-08-05 00:48:29.480150",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=48f7c4dd87fe ***\n\nnet: reduce number of memory allocations during IO operations\nEmbed all data necessary for read/write operations directly into netFD.\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkTCP4Persistent          27669        23341  -15.64%\nBenchmarkTCP4Persistent-2        18173        12558  -30.90%\nBenchmarkTCP4Persistent-4        10390         7319  -29.56%\n\nThis change will intentionally break all builders to see\nhow many allocations they do per read/write.\nThis will be fixed soon afterwards.\n\nR=golang-dev, alex.brainman\nCC=golang-dev\nhttps://codereview.appspot.com/12413043",
			"disapproval": false,
			"date": "2013-08-06 10:40:33.239590",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/05 00:48:29, brainman wrote:\n> LGTM\n> \n> if you agree with my suggestions.\n> \n> It is much simpler now, thank you very much.\n> \n> Alex\n> \n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go\n> File src/pkg/net/fd_windows.go (right):\n> \n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode88\n> src/pkg/net/fd_windows.go:88: rsa    [2]syscall.RawSockaddrAny\n> These are quite large (112 each on windows-386). And aren't used for most common\n> tcp connection. Maybe allocate these separately: alloc and dealloc them in\n> accept, alloc and keep them forever in ReadFrom.\n\nMakes sense. Done.\n\n\n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode109\n> src/pkg/net/fd_windows.go:109: submit func(o *operation) error\n> Document that submit == nil means \"to cancel\".\n\nDone.\n\n \n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode129\n> src/pkg/net/fd_windows.go:129: // ExecIO executes a single IO operation oi. It\n> submits and cancels\n> s/oi/o/\n\nDone.\n\n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/fd_windows.go#newcode291\n> src/pkg/net/fd_windows.go:291: o := &fd.op[1]\n> Index values (1 and 0) are bit cryptic. Maybe create a const? Up to you.\n\nInitially I though that maybe I will need to use for loop over the two operations. It turned out to be not the case. So I just renamed them to rop and wop. Indeed much better now.\n\n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go\n> File src/pkg/net/tcp_test.go (right):\n> \n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go#newcode299\n> src/pkg/net/tcp_test.go:299: func TestTCPReadWriteMallocs(t *testing.T) {\n> I think it is good idea to add test with timeouts. As you know, timeouts\n> execution path is quite different.\n\nDo you mean the case when timeouts actually fire? I think it's not important for performance. That's kind of corner case that usually happens at most once per connection.",
			"disapproval": false,
			"date": "2013-08-06 10:26:36.680670",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/05 01:59:21, brainman wrote:\n> One more.\n> \n> Alex\n> \n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go\n> File src/pkg/net/tcp_test.go (right):\n> \n> https://codereview.appspot.com/12413043/diff/19001/src/pkg/net/tcp_test.go#newcode301\n> src/pkg/net/tcp_test.go:301: switch runtime.GOOS {\n> I think we should just run it for every OS. This way we will see which builders\n> are broken. Then we could create an issue an put temp \"Skip\" in here.\n\nWill do.",
			"disapproval": false,
			"date": "2013-08-06 10:27:03.841850",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I just noticed that this is broken on my Windows XP pc (windows-386).\n\nhttps://code.google.com/p/go/issues/detail?id=6063\n\nSurprisingly, both windows builders are fine. It must be one of those \"syscall does not exist here, so I am using different logic\" scenarios.\n\nAlex",
			"disapproval": false,
			"date": "2013-08-07 02:34:56.249680",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 12413043: net: reduce number of memory allocations during IO oper...",
	"created": "2013-08-03 15:06:09.772770",
	"patchsets": [
		1,
		3001,
		6001,
		8001,
		11001,
		16001,
		19001,
		28001,
		28003
	],
	"modified": "2013-08-07 02:34:56.485260",
	"closed": true,
	"issue": 12413043
}