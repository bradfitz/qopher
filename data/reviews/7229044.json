{
	"description": "runtime: implement range access functions in race detector.\n\nRange access functions are already available in TSan library\nbut were not yet used.\n\nTime for go test -race -short:\n\nBefore:\ncompress/flate 24.244s\nexp/norm       >200s\ngo/printer     78.268s\n\nAfter:\ncompress/flate 17.760s\nexp/norm        5.537s\ngo/printer      5.738s\n\nFixes issue 4250.",
	"cc": [
		"dvyukov@google.com",
		"golang-dev@googlegroups.com",
		"fullung@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttps://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c#newcode84\nsrc/pkg/runtime/slice.c:84: if(m > x.cap) {\nremove {}\n\nhttps://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c#newcode162\nsrc/pkg/runtime/slice.c:162: runtime\u00b7racewritepc(old.array + i*t->elem->size, pc, runtime\u00b7growslice);\nperhaps also handle this one\nI guess it must be race*read*",
			"disapproval": false,
			"date": "2013-01-27 10:49:18.202070",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Awesome.\n\nThe other one that needed serious help was\n\ncode.google.com/p/go.net/idna\n\nWhat is the effect there?",
			"disapproval": false,
			"date": "2013-01-27 04:27:57.986210",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttps://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c#newcode84\nsrc/pkg/runtime/slice.c:84: if(m > x.cap) {\nOn 2013/01/27 10:49:18, dvyukov wrote:\n> remove {}\n\nDone.\n\nhttps://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c#newcode134\nsrc/pkg/runtime/slice.c:134: runtime\u00b7racewriterangepc(ret.array+ret.len, y.len, 1, pc, runtime\u00b7appendslice);\nfixed typo\n\nhttps://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c#newcode162\nsrc/pkg/runtime/slice.c:162: runtime\u00b7racewritepc(old.array + i*t->elem->size, pc, runtime\u00b7growslice);\nOn 2013/01/27 10:49:18, dvyukov wrote:\n> perhaps also handle this one\n> I guess it must be race*read*\n\nDone.\n\nhttps://codereview.appspot.com/7229044/diff/4001/src/pkg/runtime/slice.c#newcode263\nsrc/pkg/runtime/slice.c:263: runtime\u00b7racewriterangepc(to.array, ret, 1, pc, runtime\u00b7appendslice);\nfixed typo.",
			"disapproval": false,
			"date": "2013-01-27 18:35:53.992070",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-27 18:21:14.317190",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-27 01:05:31.161230",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/1/27  <fullung@gmail.com> wrote:\r\n> Awesome.\r\n>\r\n> The other one that needed serious help was\r\n>\r\n> code.google.com/p/go.net/idna\r\n>\r\n> What is the effect there?\r\n>\r\n> https://codereview.appspot.com/7229044/\r\n\r\nThe issue is that old instrumentation of appendslice instruments the\r\nwhole slice each time.\r\nIt should distinguish between the enough capacity and\r\nnot-enough-capacity situations.\r\n\r\nstrconv.Quote makes many little appendslice, so it becomes quadratic\r\nunder race detection.\r\n\r\nThis is fixed in the patch (I hope it's correct).\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-01-27 07:33:22.554720",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add stubs to pkg/runtime/race0.c even if it builds now somehow.",
			"disapproval": false,
			"date": "2013-01-27 10:03:01.532920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM++\nThanks!",
			"disapproval": false,
			"date": "2013-01-29 11:08:19.638710",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=185eb42ac938 ***\n\nruntime: implement range access functions in race detector.\n\nRange access functions are already available in TSan library\nbut were not yet used.\n\nTime for go test -race -short:\n\nBefore:\ncompress/flate 24.244s\nexp/norm       >200s\ngo/printer     78.268s\n\nAfter:\ncompress/flate 17.760s\nexp/norm        5.537s\ngo/printer      5.738s\n\nFixes issue 4250.\n\nR=dvyukov, golang-dev, fullung\nCC=golang-dev\nhttps://codereview.appspot.com/7229044",
			"disapproval": false,
			"date": "2013-01-30 00:55:15.342200",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7229044: runtime: implement range access functions in race detector.",
	"created": "2013-01-27 01:05:14.383360",
	"patchsets": [
		1,
		2001,
		4001,
		7,
		1008
	],
	"modified": "2013-01-30 00:55:16.722930",
	"closed": true,
	"issue": 7229044
}