{
	"description": "database/sql: stop reuse of bad connections\n\nThe second parameter for sql.putConn() (err) is always nil. As a result bad\nconnections are reused, even if the driver returns an driver.ErrBadConn.\nUnsing a pointer to err instead achievs the desired behavior.\nSee http://code.google.com/p/go/issues/detail?id=3777 for more details.\nFixes issue 3777.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"jameshuachow@gmail.com",
		"blakesgentry@gmail.com"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/04 08:16:43, jameshuachow_gmail.com wrote:\n>     defer func() {db.putConn(ci, err)}()\n\nThat seems a bit more idiomatic to me. Should we choose this approach??",
			"disapproval": false,
			"date": "2012-07-04 12:04:51.528260",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org, jameshuachow@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-08 23:54:50.809910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Passing a pointer to an interface is pretty unusual, is there are more idiomatic way to do it ?\n\nAlso, this should have a test.",
			"disapproval": false,
			"date": "2012-07-03 12:38:50.269667",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-03 18:26:04.685448",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-07-03 02:31:49.663139",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't mind the pointer to interface. It's an internal detail and done\r\nelsewhere in this file. The docs could be updated, though.\r\n\r\nA test would be nice, but the existing tests still passing (as well as\r\nhttps://github.com/bradfitz/go-sql-test) is probably also enough for this\r\nparticular change.  Do those still pass?\r\n\r\nOn Tue, Jul 3, 2012 at 5:38 AM, <dave@cheney.net> wrote:\r\n\r\n> Passing a pointer to an interface is pretty unusual, is there are more\r\n> idiomatic way to do it ?\r\n>\r\n> Also, this should have a test.\r\n>\r\n> http://codereview.appspot.com/**6348069/<http://codereview.appspot.com/6348069/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-03 13:47:35.739917",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/03 13:47:35, bradfitz wrote:\n> A test would be nice, but the existing tests still passing (as well as\n> https://github.com/bradfitz/go-sql-test) is probably also enough for this\n> particular change.  Do those still pass?\n\ngithub.com/bradfitz/go-sql-test and of course src/all.bash do still pass.\nI have no PostgreSQL-Server running, so github.com/bmizerany/pq was not tested, but the sqlite-driver and both MySQL-drivers pass.",
			"disapproval": false,
			"date": "2012-07-03 17:46:54.622010",
			"approval": false
		},
		{
			"sender": "jameshuachow@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\r\nI have encounter the same problem.\r\nI changed almost the same lines in database/sql.go, but in such way:\r\n\r\n    defer func() {db.putConn(ci, err)}()\r\n\r\nIt solved my problem and is running well on our product.\r\n\r\nTake a look at:\r\n\r\n    https://github.com/dochong/pq/commit/9a6a575b3863102388a9f064c4a894f9f9d2c344\r\n\r\n2012/7/4  <google@julienschmidt.com>:\r\n> Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org\r\n> (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/6348069/\r\n",
			"disapproval": false,
			"date": "2012-07-04 08:16:43.696313",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, that seems nicer.\r\n\r\nI'm gone from now until Monday.\r\n On Jul 4, 2012 5:04 AM, <google@julienschmidt.com> wrote:\r\n\r\n> On 2012/07/04 08:16:43, jameshuachow_gmail.com wrote:\r\n>\r\n>>      defer func() {db.putConn(ci, err)}()\r\n>>\r\n>\r\n> That seems a bit more idiomatic to me. Should we choose this approach??\r\n>\r\n> http://codereview.appspot.com/**6348069/<http://codereview.appspot.com/6348069/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-04 15:43:00.474740",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-07-09 00:01:27.848990",
			"approval": true
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/09 00:01:27, dfc wrote:\n> LGTM.\n\nSomebody should either submit this patch or comment why it needs some further changes. I can't submit since I'm not listed as a contributor.",
			"disapproval": false,
			"date": "2012-07-31 19:19:48.769280",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 1, 2012 at 5:19 AM, <google@julienschmidt.com> wrote:\r\n\r\n> On 2012/07/09 00:01:27, dfc wrote:\r\n>\r\n>> LGTM.\r\n>>\r\n>\r\n> Somebody should either submit this patch or comment why it needs some\r\n> further changes. I can't submit since I'm not listed as a contributor.\r\n>\r\n\r\nSorry. I've been focusing on another project lately and behind on golang\r\nreviews.\r\n\r\nBut as a first comment:  it has no new test.  I would like one written (by\r\nyou, me, or somebody) to land either with this patch or right afterwards.\r\n\r\nIf Dave wants to submit, that's cool, but I'm about to start vacation in a\r\nweek where I'll be mostly offline for a couple weeks.  Make sure bugs are\r\nopen about these, too, but the codereview being open and assigned to a\r\nreviewer is also sufficient.\r\n\r\nI'll try to get through some of these in the next week before I disappear\r\nmore.\r\n",
			"disapproval": false,
			"date": "2012-07-31 22:37:33.413650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the slow review.\n\nAnd unfortunately I'll be offline tomorrow for a week.  Somebody else can pick up this review and submit while I'm gone, otherwise I'll pick it up when I'm back.\n\nhttp://codereview.appspot.com/6348069/diff/2004/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttp://codereview.appspot.com/6348069/diff/2004/src/pkg/database/sql/sql.go#newcode353\nsrc/pkg/database/sql/sql.go:353: dargs, err := driverArgs(nil, args)\nthis := will create a new err that shadows the err from line 343.\n\nif you want this err to affect line 349 (inside the defer func), then you'll need to declare dargs on its own var line\n\nvar dargs []driver.Value\ndargs, err = driverArgs(nil, args)\n\nAnd then on line 357 below too.\n\nhttp://codereview.appspot.com/6348069/diff/2004/src/pkg/database/sql/sql.go#newcode357\nsrc/pkg/database/sql/sql.go:357: resi, err := execer.Exec(query, dargs)\nlikewise.",
			"disapproval": false,
			"date": "2012-08-06 23:50:07.172680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Julien, did you want to finish this?\r\n\r\nOn Tue, Aug 7, 2012 at 9:50 AM, <bradfitz@golang.org> wrote:\r\n\r\n> Sorry for the slow review.\r\n>\r\n> And unfortunately I'll be offline tomorrow for a week.  Somebody else\r\n> can pick up this review and submit while I'm gone, otherwise I'll pick\r\n> it up when I'm back.\r\n>\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6348069/diff/2004/src/pkg/**\r\n> database/sql/sql.go<http://codereview.appspot.com/6348069/diff/2004/src/pkg/database/sql/sql.go>\r\n> File src/pkg/database/sql/sql.go (right):\r\n>\r\n> http://codereview.appspot.com/**6348069/diff/2004/src/pkg/**\r\n> database/sql/sql.go#newcode353<http://codereview.appspot.com/6348069/diff/2004/src/pkg/database/sql/sql.go#newcode353>\r\n> src/pkg/database/sql/sql.go:**353: dargs, err := driverArgs(nil, args)\r\n> this := will create a new err that shadows the err from line 343.\r\n>\r\n> if you want this err to affect line 349 (inside the defer func), then\r\n> you'll need to declare dargs on its own var line\r\n>\r\n> var dargs []driver.Value\r\n> dargs, err = driverArgs(nil, args)\r\n>\r\n> And then on line 357 below too.\r\n>\r\n> http://codereview.appspot.com/**6348069/diff/2004/src/pkg/**\r\n> database/sql/sql.go#newcode357<http://codereview.appspot.com/6348069/diff/2004/src/pkg/database/sql/sql.go#newcode357>\r\n> src/pkg/database/sql/sql.go:**357: resi, err := execer.Exec(query, dargs)\r\n> likewise.\r\n>\r\n> http://codereview.appspot.com/**6348069/<http://codereview.appspot.com/6348069/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-22 15:54:36.930300",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org, jameshuachow@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-22 17:06:10.514030",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/22 15:54:36, bradfitz wrote:\n> Julien, did you want to finish this?\n> \n\nSure, I've submitted another patch which should fix all these shadowed vars.\nSorry that I let you wait for a few days. I'm a bit busy working off stuff from vacation.",
			"disapproval": false,
			"date": "2012-08-22 17:11:23.823770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttp://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go#newcode319\nsrc/pkg/database/sql/sql.go:319: si, err = ci.Prepare(query)\nI would change this back.  This wasn't actually shadowing.  See:\n\nhttp://play.golang.org/p/QEwrCXFqaa\n\nUsing := only makes new variables, but re-uses existing ones that are in the same scope.\n\nhttp://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go#newcode357\nsrc/pkg/database/sql/sql.go:357: dargs, err = driverArgs(nil, args)\nthis can be := even if it creates a new \"err\" variable, because the return statement on line 359 will assign to the result parameter's \"err\" variable (the one on line 344), which is what the defer func on line 349 closes over.\n\nso keep this := and then you can ditch the var declarations on lines 353 and 354.\n\nhttp://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go#newcode371\nsrc/pkg/database/sql/sql.go:371: sti, err = ci.Prepare(query)\nlikewise\n\nhttp://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go#newcode433\nsrc/pkg/database/sql/sql.go:433: txi, err = ci.Begin()\nyou can keep this as :=.",
			"disapproval": false,
			"date": "2012-08-22 21:47:20.416210",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/22 21:47:20, bradfitz wrote:\n> Using := only makes new variables, but re-uses existing ones that are in the\n> same scope.\n:= is the one thing that confuses me about Go. Not only the shadowing (i will get used to that someday) but also the fact that it hides the type of the var. I like having a var <-> type dictionary on top of the code ;)\n \n> http://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go#newcode357\n> src/pkg/database/sql/sql.go:357: dargs, err = driverArgs(nil, args)\n> this can be := even if it creates a new \"err\" variable, because the return\n> statement on line 359 will assign to the result parameter's \"err\" variable (the\n> one on line 344), which is what the defer func on line 349 closes over.\nThis should work for line 377 (return at line 379) and line 382 (return at line 384) too, right?\n\nSo to sum up, i should revert to the previous patch?\nIf yes, is there a hg command to do this?",
			"disapproval": false,
			"date": "2012-08-22 22:17:07.799490",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 22, 2012 at 3:17 PM, <google@julienschmidt.com> wrote:\r\n\r\n> On 2012/08/22 21:47:20, bradfitz wrote:\r\n>\r\n>> Using := only makes new variables, but re-uses existing ones that are\r\n>>\r\n> in the\r\n>\r\n>> same scope.\r\n>>\r\n> := is the one thing that confuses me about Go. Not only the shadowing (i\r\n> will get used to that someday) but also the fact that it hides the type\r\n> of the var. I like having a var <-> type dictionary on top of the code\r\n> ;)\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6348069/diff/17001/src/pkg/**\r\n> database/sql/sql.go#newcode357<http://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go#newcode357>\r\n>\r\n>> src/pkg/database/sql/sql.go:**357: dargs, err = driverArgs(nil, args)\r\n>> this can be := even if it creates a new \"err\" variable, because the\r\n>>\r\n> return\r\n>\r\n>> statement on line 359 will assign to the result parameter's \"err\"\r\n>>\r\n> variable (the\r\n>\r\n>> one on line 344), which is what the defer func on line 349 closes\r\n>>\r\n> over.\r\n> This should work for line 377 (return at line 379) and line 382 (return\r\n> at line 384) too, right?\r\n>\r\n\r\nyes\r\n\r\nSo to sum up, i should revert to the previous patch?\r\n> If yes, is there a hg command to do this?\r\n\r\n\r\nIf there is, I don't know it.\r\n\r\nThis is more of a codereview.py thing more than an hg thing, though.  (I\r\nlearned both at the same time, so the distinction is often blurred.)\r\n",
			"disapproval": false,
			"date": "2012-08-22 22:42:14.042520",
			"approval": false
		},
		{
			"sender": "BlakeSGentry@gmail.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"BlakeSGentry@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/22 22:42:14, bradfitz wrote:\n> On Wed, Aug 22, 2012 at 3:17 PM, <mailto:google@julienschmidt.com> wrote:\n> \n> > On 2012/08/22 21:47:20, bradfitz wrote:\n> >\n> >> Using := only makes new variables, but re-uses existing ones that are\n> >>\n> > in the\n> >\n> >> same scope.\n> >>\n> > := is the one thing that confuses me about Go. Not only the shadowing (i\n> > will get used to that someday) but also the fact that it hides the type\n> > of the var. I like having a var <-> type dictionary on top of the code\n> > ;)\n> >\n> >\n> >\n> > http://codereview.appspot.com/**6348069/diff/17001/src/pkg/**\n> >\n> database/sql/sql.go#newcode357<http://codereview.appspot.com/6348069/diff/17001/src/pkg/database/sql/sql.go#newcode357>\n> >\n> >> src/pkg/database/sql/sql.go:**357: dargs, err = driverArgs(nil, args)\n> >> this can be := even if it creates a new \"err\" variable, because the\n> >>\n> > return\n> >\n> >> statement on line 359 will assign to the result parameter's \"err\"\n> >>\n> > variable (the\n> >\n> >> one on line 344), which is what the defer func on line 349 closes\n> >>\n> > over.\n> > This should work for line 377 (return at line 379) and line 382 (return\n> > at line 384) too, right?\n> >\n> \n> yes\n> \n> So to sum up, i should revert to the previous patch?\n> > If yes, is there a hg command to do this?\n> \n> \n> If there is, I don't know it.\n> \n> This is more of a codereview.py thing more than an hg thing, though.  (I\n> learned both at the same time, so the distinction is often blurred.)\n\nYou could just delete the most recent patch set on codereview, but that might be bad form :)",
			"disapproval": false,
			"date": "2012-08-22 22:45:03.426890",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"blakesgentry@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b397807815a6 ***\n\ndatabase/sql: stop reuse of bad connections\n\nThe second parameter for sql.putConn() (err) is always nil. As a result bad\nconnections are reused, even if the driver returns an driver.ErrBadConn.\nUnsing a pointer to err instead achievs the desired behavior.\nSee http://code.google.com/p/go/issues/detail?id=3777 for more details.\nFixes issue 3777.\n\nR=golang-dev, dave, bradfitz, jameshuachow, BlakeSGentry\nCC=golang-dev\nhttp://codereview.appspot.com/6348069\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-08-24 02:29:55.912630",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"jameshuachow@gmail.com",
				"BlakeSGentry@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/22 22:45:03, bgentry wrote:\n> You could just delete the most recent patch set on codereview, but that might be\n> bad form :)\nDid that. We know who to blame for the bad style ;)\n\n(Just to be sure I've kept a local copy)",
			"disapproval": false,
			"date": "2012-08-22 22:50:47.739260",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Wed, Aug 22, 2012 at 3:50 PM, <google@julienschmidt.com> wrote:\r\n\r\n> On 2012/08/22 22:45:03, bgentry wrote:\r\n>\r\n>> You could just delete the most recent patch set on codereview, but\r\n>>\r\n> that might be\r\n>\r\n>> bad form :)\r\n>>\r\n> Did that. We know who to blame for the bad style ;)\r\n>\r\n> (Just to be sure I've kept a local copy)\r\n>\r\n> http://codereview.appspot.com/**6348069/<http://codereview.appspot.com/6348069/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-24 02:27:13.072070",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"google@julienschmidt.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"jameshuachow@gmail.com",
				"blakesgentry@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close\n\nThis never got closed.",
			"disapproval": false,
			"date": "2013-06-28 18:12:25.473650",
			"approval": false
		}
	],
	"owner_email": "google@julienschmidt.com",
	"private": false,
	"base_url": "",
	"owner": "julienschmidt",
	"subject": "code review 6348069: database/sql: stop reuse of bad connections",
	"created": "2012-07-03 02:20:42.335733",
	"patchsets": [
		1,
		2001,
		1002,
		8002,
		2004
	],
	"modified": "2013-06-28 18:12:26.235210",
	"closed": false,
	"issue": 6348069
}