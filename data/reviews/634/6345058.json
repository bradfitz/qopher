{
	"description": "playground: update URL in address bar when a link is shared",
	"cc": [
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"messages": [
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I tried to do that, but the behaviour was a little weird.\r\n\r\nIn particular, if you're at some history position A, then you make some \r\nedits, and share, you'll reach some history position B. Then, if you make \r\nsome edits, and hit back, you'll go to A, not B. Also, you've lost all work \r\nafter B, because the farthest forward you can go is B.\r\n\r\nWe could keep a magic state like \"/edited\", that we push onto the top of \r\nthe stack whenever an edit happens or if that state is already at the top \r\nof the stack, replace it. Also, if this magic state is at the top of the \r\nstack, we would need to replaceState it whenever a save is made, not \r\npushState. This will give us consistent and logical behaviour. With the \r\nsituation above, if you're at some history position A, and you make some \r\nedits, you will be at magic state E. Then you share, you'll be at state B. \r\nThen, if you make some edits, you'll be at magic state E again. If you hit \r\nback, you go to B, and you hit forward, you'll go to E (without losing any \r\nwork).\r\n\r\nI could take a stab at this, but it seems a little too complex for my \r\ntaste. Particularly considering we'd have to detect when the text in the \r\neditor changes (this is relatively challenging to do cross-browser).\r\n\r\nThoughts?\r\n\r\nSanjay\r\n",
			"disapproval": false,
			"date": "2012-07-03 02:52:04.346795",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"balasanjay@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: dsymonds@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-02 23:21:06.265463",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was thinking about this, too, but I'd like to use pushState and add an\r\nevent handler to popState, so that you can use the back and forward buttons\r\nto skip through versions of your code snippet.\r\n\r\nAlso, the correct repository for this stuff is\r\nhttp://code.google.com/p/go-playground/\r\n\r\nThe playgorund.js in the go repo is just a copy of the one there. Do you\r\nwant to try doing what I just described?\r\n\r\nAndrew\r\n\r\n\r\n\r\nOn 2 July 2012 16:21, <dsymonds@golang.org> wrote:\r\n\r\n> R=adg\r\n>\r\n> (sent by gocodereview)\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-03 00:30:30.247792",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"balasanjay@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/03 02:52:04, sanjay.m wrote:\n> I tried to do that, but the behaviour was a little weird.\n> \n> In particular, if you're at some history position A, then you make some \n> edits, and share, you'll reach some history position B. Then, if you make \n> some edits, and hit back, you'll go to A, not B. Also, you've lost all work \n> after B, because the farthest forward you can go is B.\n> \n> We could keep a magic state like \"/edited\", that we push onto the top of \n> the stack whenever an edit happens or if that state is already at the top \n> of the stack, replace it. Also, if this magic state is at the top of the \n> stack, we would need to replaceState it whenever a save is made, not \n> pushState. This will give us consistent and logical behaviour. With the \n> situation above, if you're at some history position A, and you make some \n> edits, you will be at magic state E. Then you share, you'll be at state B. \n> Then, if you make some edits, you'll be at magic state E again. If you hit \n> back, you go to B, and you hit forward, you'll go to E (without losing any \n> work).\n> \n> I could take a stab at this, but it seems a little too complex for my \n> taste. Particularly considering we'd have to detect when the text in the \n> editor changes (this is relatively challenging to do cross-browser).\n\nRather than having an \"/edited\" state, why not just remove the path entirely.\n\nurl bar: http://play/\nwrite some code, hit 'share'\nurl bar: http://play/p/somehash1\nstart writing some more code\nurl bar switches immediately back to: http://play/\nhit 'share' again\nurl bar: http://play/p/somehash2\nhit 'back'\nurl bar: http://play/ (nothing happens)\nhit 'back'\nurl bar: http://play/p/somehash1 (code changes to somehash1)\nhit 'back\nurl bar: http://play/ (nothing happens)\n\nhow does that sound?\n\nps: sorry it took me so long to follow this up. hope you're still interested!",
			"disapproval": false,
			"date": "2012-08-27 05:48:19.174870",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sanjay - does this still interest you?\r\n\r\nOn 27 August 2012 15:48,  <adg@golang.org> wrote:\r\n> On 2012/07/03 02:52:04, sanjay.m wrote:\r\n>>\r\n>> I tried to do that, but the behaviour was a little weird.\r\n>\r\n>\r\n>> In particular, if you're at some history position A, then you make\r\n>\r\n> some\r\n>>\r\n>> edits, and share, you'll reach some history position B. Then, if you\r\n>\r\n> make\r\n>>\r\n>> some edits, and hit back, you'll go to A, not B. Also, you've lost all\r\n>\r\n> work\r\n>>\r\n>> after B, because the farthest forward you can go is B.\r\n>\r\n>\r\n>> We could keep a magic state like \"/edited\", that we push onto the top\r\n>\r\n> of\r\n>>\r\n>> the stack whenever an edit happens or if that state is already at the\r\n>\r\n> top\r\n>>\r\n>> of the stack, replace it. Also, if this magic state is at the top of\r\n>\r\n> the\r\n>>\r\n>> stack, we would need to replaceState it whenever a save is made, not\r\n>> pushState. This will give us consistent and logical behaviour. With\r\n>\r\n> the\r\n>>\r\n>> situation above, if you're at some history position A, and you make\r\n>\r\n> some\r\n>>\r\n>> edits, you will be at magic state E. Then you share, you'll be at\r\n>\r\n> state B.\r\n>>\r\n>> Then, if you make some edits, you'll be at magic state E again. If you\r\n>\r\n> hit\r\n>>\r\n>> back, you go to B, and you hit forward, you'll go to E (without losing\r\n>\r\n> any\r\n>>\r\n>> work).\r\n>\r\n>\r\n>> I could take a stab at this, but it seems a little too complex for my\r\n>> taste. Particularly considering we'd have to detect when the text in\r\n>\r\n> the\r\n>>\r\n>> editor changes (this is relatively challenging to do cross-browser).\r\n>\r\n>\r\n> Rather than having an \"/edited\" state, why not just remove the path\r\n> entirely.\r\n>\r\n> url bar: http://play/\r\n> write some code, hit 'share'\r\n> url bar: http://play/p/somehash1\r\n> start writing some more code\r\n> url bar switches immediately back to: http://play/\r\n> hit 'share' again\r\n> url bar: http://play/p/somehash2\r\n> hit 'back'\r\n> url bar: http://play/ (nothing happens)\r\n> hit 'back'\r\n> url bar: http://play/p/somehash1 (code changes to somehash1)\r\n> hit 'back\r\n> url bar: http://play/ (nothing happens)\r\n>\r\n> how does that sound?\r\n>\r\n> ps: sorry it took me so long to follow this up. hope you're still\r\n> interested!\r\n>\r\n> http://codereview.appspot.com/6345058/\r\n",
			"disapproval": false,
			"date": "2012-09-12 00:36:18.691330",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oops, sorry, I missed your earlier email.\r\n\r\nI'm quite busy, atm, so the earliest I can look into this is this weekend. \r\nLet me know if thats OK.\r\n\r\nSanjay\r\n",
			"disapproval": false,
			"date": "2012-09-12 01:49:50.053430",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 September 2012 11:49, sanjay.m <balasanjay@gmail.com> wrote:\r\n> Oops, sorry, I missed your earlier email.\r\n>\r\n> I'm quite busy, atm, so the earliest I can look into this is this weekend.\r\n> Let me know if thats OK.\r\n\r\nThat's quite fine. It's my fault for taking so long to reply.\r\n",
			"disapproval": false,
			"date": "2012-09-12 01:50:50.557800",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"balasanjay@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-16 00:30:08.964500",
			"approval": false
		}
	],
	"owner_email": "balasanjay@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "sanjay.m",
	"subject": "code review 6345058: playground: update URL in address bar when a link is shared",
	"created": "2012-07-02 23:20:44.473412",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-09-16 00:30:10.197890",
	"closed": true,
	"issue": 6345058
}