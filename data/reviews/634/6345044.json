{
	"description": "cmd/gc: reduce memory consumption\n\nThis change introduces a new struct FuncNode and moves fields from\nNode to FuncNode. Node and FuncNode are logically the same object,\nthus for each FuncNode it holds true that (n->funcnode->node == n)\nand (aFuncNode->node->funcnode == aFuncNode).\n\nThe fact that Node and FuncNode are logically the same object means\nthat the semantics of the original C code remains unchanged.\nReduced memory consumption is achieved because FuncNode is allocated\nonly if it is needed.\n\nThe new function funcnode() will allocate a FuncNode on demand. It\nis recommended to always call this function when going from a Node to\nto its FuncNode, unless circumstances are against this recommendation.\n\nSimilarly, the new struct UncommonNode contains fields of Node which\nare specific to a small number of Node instances. The accessor function\nunode() will allocate an UncommonNode on demand.\n\nAlthough this patch affects y.tab.h and y.tab.c, these two files are\nomitted from the patch.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"lvd@google.com"
	],
	"messages": [
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tuesday, June 26, 2012 11:39:30 PM UTC+2, Brad Fitzpatrick wrote:\r\n>\r\n> Numbers?\r\n>\r\n \r\n10% reduction (from 110MB to 100MB) when compiling godoc with 8g.\r\n",
			"disapproval": false,
			"date": "2012-06-26 21:43:42.789568",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It can be, I can't run a go builder reliably on my ARMv5 host any more, which is a shame. The folks coming up with Pi systems are running 256mb or less. \r\n\r\nOn 27/06/2012, at 18:51, Luuk van Dijk <lvd@google.com> wrote:\r\n\r\n> is gc memory usage a problem?\r\n> \r\n> On Tue, Jun 26, 2012 at 11:43 PM, \u269b <0xe2.0x9a.0x9b@gmail.com> wrote:\r\n> On Tuesday, June 26, 2012 11:39:30 PM UTC+2, Brad Fitzpatrick wrote:\r\n> Numbers?\r\n>  \r\n> 10% reduction (from 110MB to 100MB) when compiling godoc with 8g.\r\n> \r\n",
			"disapproval": false,
			"date": "2012-06-27 09:00:12.411272",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-26 21:23:58.483145",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Numbers?\r\n\r\nOn Tue, Jun 26, 2012 at 2:23 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> Reviewers: dfc, rsc,\r\n>\r\n> Message:\r\n> Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: reduce memory consumption\r\n>\r\n> This change introduces a new struct FuncNode and moves fields from\r\n> Node to FuncNode. Node and FuncNode are logically the same object,\r\n> thus for each FuncNode it holds true that (n->funcnode->node == n)\r\n> and (aFuncNode->node->funcnode == aFuncNode).\r\n>\r\n> The fact that Node and FuncNode are logically the same object means\r\n> that the semantics of the original C code remains unchanged.\r\n> Reduced memory consumption is achieved because FuncNode is allocated\r\n> only if it is needed.\r\n>\r\n> The new function funcnode() will allocate a FuncNode on demand. It\r\n> is recommended to always call this function when going from a Node to\r\n> to its FuncNode, unless circumstances are against this recommendation.\r\n>\r\n> In addition to the above, this change uses 1-bit fields for boolean\r\n> variables in struct Node.\r\n>\r\n> Although this patch affects y.tab.h and y.tab.c, these two files are\r\n> omitted from the patch.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6345044/<http://codereview.appspot.com/6345044/>\r\n>\r\n> Affected files:\r\n>  M src/cmd/5g/gg.h\r\n>  M src/cmd/5g/ggen.c\r\n>  M src/cmd/5g/reg.c\r\n>  M src/cmd/6g/gg.h\r\n>  M src/cmd/6g/ggen.c\r\n>  M src/cmd/6g/reg.c\r\n>  M src/cmd/8g/gg.h\r\n>  M src/cmd/8g/ggen.c\r\n>  M src/cmd/8g/reg.c\r\n>  M src/cmd/gc/closure.c\r\n>  M src/cmd/gc/dcl.c\r\n>  M src/cmd/gc/esc.c\r\n>  M src/cmd/gc/export.c\r\n>  M src/cmd/gc/fmt.c\r\n>  M src/cmd/gc/gen.c\r\n>  M src/cmd/gc/go.h\r\n>  M src/cmd/gc/go.y\r\n>  M src/cmd/gc/init.c\r\n>  M src/cmd/gc/inl.c\r\n>  M src/cmd/gc/lex.c\r\n>  M src/cmd/gc/order.c\r\n>  M src/cmd/gc/pgen.c\r\n>  M src/cmd/gc/sinit.c\r\n>  M src/cmd/gc/subr.c\r\n>  M src/cmd/gc/swt.c\r\n>  M src/cmd/gc/typecheck.c\r\n>  M src/cmd/gc/walk.c\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-26 21:39:31.555392",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "is gc memory usage a problem?\r\n\r\nOn Tue, Jun 26, 2012 at 11:43 PM, \u269b <0xe2.0x9a.0x9b@gmail.com> wrote:\r\n\r\n> On Tuesday, June 26, 2012 11:39:30 PM UTC+2, Brad Fitzpatrick wrote:\r\n>>\r\n>> Numbers?\r\n>>\r\n>\r\n> 10% reduction (from 110MB to 100MB) when compiling godoc with 8g.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-27 08:51:05.078467",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I already said that I would like to have a discussion about memory\r\nreduction strategies when I am back in a few weeks. I do not plan to\r\nlook at this CL before having that discussion.\r\n",
			"disapproval": false,
			"date": "2012-06-27 13:42:09.837194",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/27 13:42:09, rsc wrote:\n> I already said that I would like to have a discussion about memory\n> reduction strategies when I am back in a few weeks. I do not plan to\n> look at this CL before having that discussion.\n\nHello,\n\nWould it be possible to separate the changes to the 1bit fields into an independent CL? \n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-10-11 00:33:30.397960",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/11 00:33:30, dfc wrote:\n> On 2012/06/27 13:42:09, rsc wrote:\n> > I already said that I would like to have a discussion about memory\n> > reduction strategies when I am back in a few weeks. I do not plan to\n> > look at this CL before having that discussion.\n> \n> Hello,\n> \n> Would it be possible to separate the changes to the 1bit fields into an\n> independent CL?\n\nhttp://codereview.appspot.com/6650054",
			"disapproval": false,
			"date": "2012-10-12 17:00:10.214180",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you.\r\n\r\nOn Sat, Oct 13, 2012 at 4:00 AM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> On 2012/10/11 00:33:30, dfc wrote:\r\n>>\r\n>> On 2012/06/27 13:42:09, rsc wrote:\r\n>> > I already said that I would like to have a discussion about memory\r\n>> > reduction strategies when I am back in a few weeks. I do not plan to\r\n>> > look at this CL before having that discussion.\r\n>\r\n>\r\n>> Hello,\r\n>\r\n>\r\n>> Would it be possible to separate the changes to the 1bit fields into\r\n>\r\n> an\r\n>>\r\n>> independent CL?\r\n>\r\n>\r\n> http://codereview.appspot.com/6650054\r\n>\r\n> https://codereview.appspot.com/6345044/\r\n",
			"disapproval": false,
			"date": "2012-10-13 00:32:03.581380",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org, bradfitz@golang.org, lvd@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-15 13:55:46.360750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am still interested in this CL, but I would like to see a memory\r\nprofile showing what memory usage looks like before we start fixing\r\nthings. One way to get a memory profile would be to hook it up on\r\nLinux to the C++ pprof (http://code.google.com/p/gperftools).\r\n",
			"disapproval": false,
			"date": "2012-11-01 18:44:19.996160",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org, bradfitz@golang.org, lvd@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-03 09:25:48.437730",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/01 18:44:19, rsc wrote:\n> I am still interested in this CL, but I would like to see a memory\n> profile showing what memory usage looks like before we start fixing\n> things. One way to get a memory profile would be to hook it up on\n> Linux to the C++ pprof (http://code.google.com/p/gperftools).\n\nI used Valgrind. When compiling godoc with 8g, the call counts are:\n\nnod(): 357782 calls, 357782 calls to mal()\nfuncnode(): 21654 calls, 17648 mal()\nunode(): 4470 calls, 3690 mal()\n\nSizes in bytes (8g):\n\nsizeof(Node) = 180 (old size: 216)\nsizeof(FuncNode) = 40\nsizeof(UncommonNode) = 20\n\nThe theoretical difference in memory usage when compiling godoc is approximately 340000*(216-180) = 12MiB. Actual difference as measured by /usr/bin/time is 10MiB (=131-121).\n\n---\n\nNote: A new struct UncommonNode and function unode() has been added to the changeset. Maybe we could move additional uncommon fields from Node to UncommonNode before the decision to merge this changeset into Go is made.",
			"disapproval": false,
			"date": "2012-11-03 09:44:56.422070",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6345044: cmd/gc: reduce memory consumption",
	"created": "2012-06-26 21:23:49.773083",
	"patchsets": [
		1,
		9001,
		16001
	],
	"modified": "2012-11-03 09:44:56.422070",
	"closed": false,
	"issue": 6345044
}