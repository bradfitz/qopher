{
	"description": "cmd/go: httpGet function does not use global variable httpClient\n\nNo change, just for consistency.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't know of any environment variables for SOCKS, but if you find one we\r\ncan update the HTTP dialing code, especially now that we have a SOCKS\r\ndialer in the tree.\r\n\r\nIf you update your CL description to remove the big background paragraph\r\nand replace it with \"No change, just for consistency.\" I can LGTM and\r\nsubmit this CL.  But as-is it's a bit misleading.\r\n\r\nOn Fri, Jun 29, 2012 at 6:59 AM, <amir@gluegadget.com> wrote:\r\n\r\n> I understand that http DefaultClient uses ProxyFromEnvironment, but that\r\n> is only for HTTP_PROXY.\r\n>\r\n> I have a custom Transport, with a net.Dial alike Dial for SOCKS4a and\r\n> SOCKS5. If all parts of code use httpClient variable, that would make it\r\n> easy to write something like this:\r\n>\r\n> var customTransport = &http.Transport{\r\n>    Dial: DialSOCKS5,\r\n> }\r\n>\r\n> var httpClient = &http.Client{\r\n>    Transport: customTransport,\r\n> }\r\n>\r\n> And be sure that all parts of code are using this Transport.\r\n>\r\n> I am not trying to say this change really needs to be merged, because in\r\n> order to have a working \"go get\", I have to insert that snippet of code\r\n> I pasted earlier in http.go anyway, but it took me half an hour figuring\r\n> out why, even though after I replaced httpClient, I was still getting\r\n> 403.\r\n>\r\n> As a side note, is there an agreed-upon name for a SOCKS proxy\r\n> environment variable? Something like HTTP_PROXY but for SOCKS proxy? I'd\r\n> be more than happy to extend ProxyFromEnvironment to support values like\r\n> \"socks5://localhost:5000\" as well.\r\n>\r\n>\r\n> On 2012/06/29 13:41:00, bradfitz wrote:\r\n>\r\n>> httpClient was only defined as a testing hook.  You're not fixing\r\n>>\r\n> anything\r\n>\r\n>> here:  http.Get is already just a wrapper around\r\n>>\r\n> http.DefaultClient.Get.\r\n>\r\n>  The DefaultClient's will use your proxy settings as defined by your\r\n>> environment.\r\n>>\r\n>\r\n>\r\n>  On Fri, Jun 29, 2012 at 2:51 AM, <mailto:amir@gluegadget.com> wrote:\r\n>>\r\n>\r\n>  > Reviewers: http://golang-dev_**googlegroups.com<http://golang-dev_googlegroups.com>\r\n>> ,\r\n>> >\r\n>> > Message:\r\n>> > Hello mailto:golang-dev@**googlegroups.com<golang-dev@googlegroups.com>\r\n>> ,\r\n>>\r\n>> >\r\n>> > I'd like you to review this change to\r\n>> > https://go.googlecode.com/hg/\r\n>> >\r\n>> >\r\n>> > Description:\r\n>> > cmd/go: httpGet function does not use global variable httpClient\r\n>> >\r\n>> > httpClient is declared as a variable, therefore, it's possible to\r\n>>\r\n> change\r\n>\r\n>> > its behavior without modifying http.DefaultClient. httpsOrHttp\r\n>>\r\n> function\r\n>\r\n>> > uses this variable for HTTP calls, but httpGet does not. It makes it\r\n>> > impossible to use an httpClient with a non-default Transport.\r\n>> >\r\n>> > The reasoning behind this CL is that googleCodeVCS function in\r\n>>\r\n> vcs.go\r\n>\r\n>> > uses httpGet function to detect the version control system for the\r\n>> > packages hosted at http://code.google.com by scraping the project's\r\n>> > /source/checkout page. But, http://code.google.com is not available\r\n>>\r\n> in all\r\n>\r\n>> > countries, therefore, the error page that http://code.google.com\r\n>>\r\n> returns in\r\n>\r\n>> > response makes it impossible for the regular expression used to\r\n>>\r\n> detect\r\n>\r\n>> > vcs to find a match. A Transport with a custom Dial makes it\r\n>>\r\n> possible to\r\n>\r\n>> > proxy HTTP calls.\r\n>> >\r\n>> > Please review this at\r\n>>\r\n>\r\n> http://codereview.appspot.com/****6346048/%3Chttp://**\r\n> codereview.appspot.com/**6346048/<http://codereview.appspot.com/**6346048/%3Chttp://codereview.appspot.com/6346048/>\r\n> >\r\n>\r\n>  >\r\n>> > Affected files:\r\n>> >  M src/cmd/go/http.go\r\n>> >\r\n>> >\r\n>> > Index: src/cmd/go/http.go\r\n>> >\r\n>>\r\n> ==============================****============================**\r\n> ==**=======\r\n>\r\n>  > --- a/src/cmd/go/http.go\r\n>> > +++ b/src/cmd/go/http.go\r\n>> > @@ -20,9 +20,13 @@\r\n>> >        \"net/url\"\r\n>> >  )\r\n>> >\r\n>> > +// httpClient is the default HTTP client, but a variable so it can\r\n>>\r\n> be\r\n>\r\n>> > +// changed by tests, without modifying http.DefaultClient.\r\n>> > +var httpClient = http.DefaultClient\r\n>> > +\r\n>> >  // httpGET returns the data from an HTTP GET request for the given\r\n>>\r\n> URL.\r\n>\r\n>> >  func httpGET(url string) ([]byte, error) {\r\n>> > -       resp, err := http.Get(url)\r\n>> > +       resp, err := httpClient.Get(url)\r\n>> >        if err != nil {\r\n>> >                return nil, err\r\n>> >        }\r\n>> > @@ -37,10 +41,6 @@\r\n>> >        return b, nil\r\n>> >  }\r\n>> >\r\n>> > -// httpClient is the default HTTP client, but a variable so it can\r\n>>\r\n> be\r\n>\r\n>> > -// changed by tests, without modifying http.DefaultClient.\r\n>> > -var httpClient = http.DefaultClient\r\n>> > -\r\n>> >  // httpsOrHTTP returns the body of either the importPath's\r\n>> >  // https resource or, if unavailable, the http resource.\r\n>> >  func httpsOrHTTP(importPath string) (urlStr string, body\r\n>>\r\n> io.ReadCloser,\r\n>\r\n>> > err error) {\r\n>> >\r\n>> >\r\n>> >\r\n>>\r\n>\r\n> http://codereview.appspot.com/**6346048/<http://codereview.appspot.com/6346048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-29 14:53:10.135154",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"amir@gluegadget.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=650544a058e9 ***\n\ncmd/go: httpGet function does not use global variable httpClient\n\nNo change, just for consistency.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6346048\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-06-30 19:27:59.720889",
			"approval": false
		},
		{
			"sender": "amir@gluegadget.com",
			"recipients": [
				"amir@gluegadget.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Description changed.\n\nRegarding environment variable, I couldn't find one either. Usually applications use this library to abstract the differences between platforms:\n\nhttps://code.google.com/p/libproxy/\n\nLooking at the code of its plugins, they vastly differs though:\n\nhttps://code.google.com/searchframe#937Xy_4eZO8/trunk/libproxy/modules/&q=gnome%20package:libproxy%5C.googlecode%5C.com\n\nIn \"config_envvar.cpp\" SOCKS is not mentioned at all.\n\nBut, Googling \"all_proxy\", it seems to be the one people usually use for all sort of proxies, and supports SOCKS proxy as well.\n\nOn 2012/06/29 14:53:10, bradfitz wrote:\n> I don't know of any environment variables for SOCKS, but if you find one we\n> can update the HTTP dialing code, especially now that we have a SOCKS\n> dialer in the tree.\n> \n> If you update your CL description to remove the big background paragraph\n> and replace it with \"No change, just for consistency.\" I can LGTM and\n> submit this CL.  But as-is it's a bit misleading.\n> \n> On Fri, Jun 29, 2012 at 6:59 AM, <mailto:amir@gluegadget.com> wrote:\n> \n> > I understand that http DefaultClient uses ProxyFromEnvironment, but that\n> > is only for HTTP_PROXY.\n> >\n> > I have a custom Transport, with a net.Dial alike Dial for SOCKS4a and\n> > SOCKS5. If all parts of code use httpClient variable, that would make it\n> > easy to write something like this:\n> >\n> > var customTransport = &http.Transport{\n> >    Dial: DialSOCKS5,\n> > }\n> >\n> > var httpClient = &http.Client{\n> >    Transport: customTransport,\n> > }\n> >\n> > And be sure that all parts of code are using this Transport.\n> >\n> > I am not trying to say this change really needs to be merged, because in\n> > order to have a working \"go get\", I have to insert that snippet of code\n> > I pasted earlier in http.go anyway, but it took me half an hour figuring\n> > out why, even though after I replaced httpClient, I was still getting\n> > 403.\n> >\n> > As a side note, is there an agreed-upon name for a SOCKS proxy\n> > environment variable? Something like HTTP_PROXY but for SOCKS proxy? I'd\n> > be more than happy to extend ProxyFromEnvironment to support values like\n> > \"socks5://localhost:5000\" as well.\n> >\n> >\n> > On 2012/06/29 13:41:00, bradfitz wrote:\n> >\n> >> httpClient was only defined as a testing hook.  You're not fixing\n> >>\n> > anything\n> >\n> >> here:  http.Get is already just a wrapper around\n> >>\n> > http.DefaultClient.Get.\n> >\n> >  The DefaultClient's will use your proxy settings as defined by your\n> >> environment.\n> >>\n> >\n> >\n> >  On Fri, Jun 29, 2012 at 2:51 AM, <mailto:amir@gluegadget.com> wrote:\n> >>\n> >\n> >  > Reviewers:\n> http://golang-dev_**googlegroups.com%3Chttp://golang-dev_googlegroups.com>\n> >> ,\n> >> >\n> >> > Message:\n> >> > Hello mailto:golang-dev@**googlegroups.com<golang-dev@googlegroups.com>\n> >> ,\n> >>\n> >> >\n> >> > I'd like you to review this change to\n> >> > https://go.googlecode.com/hg/\n> >> >\n> >> >\n> >> > Description:\n> >> > cmd/go: httpGet function does not use global variable httpClient\n> >> >\n> >> > httpClient is declared as a variable, therefore, it's possible to\n> >>\n> > change\n> >\n> >> > its behavior without modifying http.DefaultClient. httpsOrHttp\n> >>\n> > function\n> >\n> >> > uses this variable for HTTP calls, but httpGet does not. It makes it\n> >> > impossible to use an httpClient with a non-default Transport.\n> >> >\n> >> > The reasoning behind this CL is that googleCodeVCS function in\n> >>\n> > vcs.go\n> >\n> >> > uses httpGet function to detect the version control system for the\n> >> > packages hosted at http://code.google.com by scraping the project's\n> >> > /source/checkout page. But, http://code.google.com is not available\n> >>\n> > in all\n> >\n> >> > countries, therefore, the error page that http://code.google.com\n> >>\n> > returns in\n> >\n> >> > response makes it impossible for the regular expression used to\n> >>\n> > detect\n> >\n> >> > vcs to find a match. A Transport with a custom Dial makes it\n> >>\n> > possible to\n> >\n> >> > proxy HTTP calls.\n> >> >\n> >> > Please review this at\n> >>\n> >\n> > http://codereview.appspot.com/****6346048/%253Chttp://**\n> >\n> codereview.appspot.com/**6346048/<http://codereview.appspot.com/**6346048/%3Chttp://codereview.appspot.com/6346048/>\n> > >\n> >\n> >  >\n> >> > Affected files:\n> >> >  M src/cmd/go/http.go\n> >> >\n> >> >\n> >> > Index: src/cmd/go/http.go\n> >> >\n> >>\n> > ==============================****============================**\n> > ==**=======\n> >\n> >  > --- a/src/cmd/go/http.go\n> >> > +++ b/src/cmd/go/http.go\n> >> > @@ -20,9 +20,13 @@\n> >> >        \"net/url\"\n> >> >  )\n> >> >\n> >> > +// httpClient is the default HTTP client, but a variable so it can\n> >>\n> > be\n> >\n> >> > +// changed by tests, without modifying http.DefaultClient.\n> >> > +var httpClient = http.DefaultClient\n> >> > +\n> >> >  // httpGET returns the data from an HTTP GET request for the given\n> >>\n> > URL.\n> >\n> >> >  func httpGET(url string) ([]byte, error) {\n> >> > -       resp, err := http.Get(url)\n> >> > +       resp, err := httpClient.Get(url)\n> >> >        if err != nil {\n> >> >                return nil, err\n> >> >        }\n> >> > @@ -37,10 +41,6 @@\n> >> >        return b, nil\n> >> >  }\n> >> >\n> >> > -// httpClient is the default HTTP client, but a variable so it can\n> >>\n> > be\n> >\n> >> > -// changed by tests, without modifying http.DefaultClient.\n> >> > -var httpClient = http.DefaultClient\n> >> > -\n> >> >  // httpsOrHTTP returns the body of either the importPath's\n> >> >  // https resource or, if unavailable, the http resource.\n> >> >  func httpsOrHTTP(importPath string) (urlStr string, body\n> >>\n> > io.ReadCloser,\n> >\n> >> > err error) {\n> >> >\n> >> >\n> >> >\n> >>\n> >\n> >\n> http://codereview.appspot.com/**6346048/%3Chttp://codereview.appspot.com/6346048/>\n> >",
			"disapproval": false,
			"date": "2012-06-29 15:25:36.165900",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nPlease file an issue to track the SOCKS issue.  If you find other tools\r\nthat support all_proxy and SOCKS, we can probably do the same in the http\r\nclient.\r\n\r\nOn Fri, Jun 29, 2012 at 8:25 AM, <amir@gluegadget.com> wrote:\r\n\r\n> Description changed.\r\n>\r\n> Regarding environment variable, I couldn't find one either. Usually\r\n> applications use this library to abstract the differences between\r\n> platforms:\r\n>\r\n> https://code.google.com/p/**libproxy/<https://code.google.com/p/libproxy/>\r\n>\r\n> Looking at the code of its plugins, they vastly differs though:\r\n>\r\n> https://code.google.com/**searchframe#937Xy_4eZO8/trunk/**\r\n> libproxy/modules/&q=gnome%**20package:libproxy%5C.**googlecode%5C.com<https://code.google.com/searchframe#937Xy_4eZO8/trunk/libproxy/modules/&q=gnome%20package:libproxy%5C.googlecode%5C.com>\r\n>\r\n> In \"config_envvar.cpp\" SOCKS is not mentioned at all.\r\n>\r\n> But, Googling \"all_proxy\", it seems to be the one people usually use for\r\n> all sort of proxies, and supports SOCKS proxy as well.\r\n>\r\n>\r\n> On 2012/06/29 14:53:10, bradfitz wrote:\r\n>\r\n>> I don't know of any environment variables for SOCKS, but if you find\r\n>>\r\n> one we\r\n>\r\n>> can update the HTTP dialing code, especially now that we have a SOCKS\r\n>> dialer in the tree.\r\n>>\r\n>\r\n>  If you update your CL description to remove the big background\r\n>>\r\n> paragraph\r\n>\r\n>> and replace it with \"No change, just for consistency.\" I can LGTM and\r\n>> submit this CL.  But as-is it's a bit misleading.\r\n>>\r\n>\r\n>  On Fri, Jun 29, 2012 at 6:59 AM, <mailto:amir@gluegadget.com> wrote:\r\n>>\r\n>\r\n>  > I understand that http DefaultClient uses ProxyFromEnvironment, but\r\n>>\r\n> that\r\n>\r\n>> > is only for HTTP_PROXY.\r\n>> >\r\n>> > I have a custom Transport, with a net.Dial alike Dial for SOCKS4a\r\n>>\r\n> and\r\n>\r\n>> > SOCKS5. If all parts of code use httpClient variable, that would\r\n>>\r\n> make it\r\n>\r\n>> > easy to write something like this:\r\n>> >\r\n>> > var customTransport = &http.Transport{\r\n>> >    Dial: DialSOCKS5,\r\n>> > }\r\n>> >\r\n>> > var httpClient = &http.Client{\r\n>> >    Transport: customTransport,\r\n>> > }\r\n>> >\r\n>> > And be sure that all parts of code are using this Transport.\r\n>> >\r\n>> > I am not trying to say this change really needs to be merged,\r\n>>\r\n> because in\r\n>\r\n>> > order to have a working \"go get\", I have to insert that snippet of\r\n>>\r\n> code\r\n>\r\n>> > I pasted earlier in http.go anyway, but it took me half an hour\r\n>>\r\n> figuring\r\n>\r\n>> > out why, even though after I replaced httpClient, I was still\r\n>>\r\n> getting\r\n>\r\n>> > 403.\r\n>> >\r\n>> > As a side note, is there an agreed-upon name for a SOCKS proxy\r\n>> > environment variable? Something like HTTP_PROXY but for SOCKS proxy?\r\n>>\r\n> I'd\r\n>\r\n>> > be more than happy to extend ProxyFromEnvironment to support values\r\n>>\r\n> like\r\n>\r\n>> > \"socks5://localhost:5000\" as well.\r\n>> >\r\n>> >\r\n>> > On 2012/06/29 13:41:00, bradfitz wrote:\r\n>> >\r\n>> >> httpClient was only defined as a testing hook.  You're not fixing\r\n>> >>\r\n>> > anything\r\n>> >\r\n>> >> here:  http.Get is already just a wrapper around\r\n>> >>\r\n>> > http.DefaultClient.Get.\r\n>> >\r\n>> >  The DefaultClient's will use your proxy settings as defined by your\r\n>> >> environment.\r\n>> >>\r\n>> >\r\n>> >\r\n>> >  On Fri, Jun 29, 2012 at 2:51 AM, <mailto:amir@gluegadget.com>\r\n>>\r\n> wrote:\r\n>\r\n>> >>\r\n>> >\r\n>> >  > Reviewers:\r\n>>\r\n>\r\n> http://golang-dev_**googlegrou**ps.com <http://googlegroups.com>%3Chttp://\r\n> golang-dev_**googlegroups.com <http://golang-dev_googlegroups.com>>\r\n>\r\n>> >> ,\r\n>> >> >\r\n>> >> > Message:\r\n>> >> > Hello\r\n>>\r\n> mailto:golang-dev@**googlegrou**ps.com <http://googlegroups.com><\r\n> golang-dev@**googlegroups.com <golang-dev@googlegroups.com>>\r\n>\r\n>  >> ,\r\n>> >>\r\n>> >> >\r\n>> >> > I'd like you to review this change to\r\n>> >> > https://go.googlecode.com/hg/\r\n>> >> >\r\n>> >> >\r\n>> >> > Description:\r\n>> >> > cmd/go: httpGet function does not use global variable httpClient\r\n>> >> >\r\n>> >> > httpClient is declared as a variable, therefore, it's possible to\r\n>> >>\r\n>> > change\r\n>> >\r\n>> >> > its behavior without modifying http.DefaultClient. httpsOrHttp\r\n>> >>\r\n>> > function\r\n>> >\r\n>> >> > uses this variable for HTTP calls, but httpGet does not. It makes\r\n>>\r\n> it\r\n>\r\n>> >> > impossible to use an httpClient with a non-default Transport.\r\n>> >> >\r\n>> >> > The reasoning behind this CL is that googleCodeVCS function in\r\n>> >>\r\n>> > vcs.go\r\n>> >\r\n>> >> > uses httpGet function to detect the version control system for\r\n>>\r\n> the\r\n>\r\n>> >> > packages hosted at http://code.google.com by scraping the\r\n>>\r\n> project's\r\n>\r\n>> >> > /source/checkout page. But, http://code.google.com is not\r\n>>\r\n> available\r\n>\r\n>> >>\r\n>> > in all\r\n>> >\r\n>> >> > countries, therefore, the error page that http://code.google.com\r\n>> >>\r\n>> > returns in\r\n>> >\r\n>> >> > response makes it impossible for the regular expression used to\r\n>> >>\r\n>> > detect\r\n>> >\r\n>> >> > vcs to find a match. A Transport with a custom Dial makes it\r\n>> >>\r\n>> > possible to\r\n>> >\r\n>> >> > proxy HTTP calls.\r\n>> >> >\r\n>> >> > Please review this at\r\n>> >>\r\n>> >\r\n>> > http://codereview.appspot.com/******6346048/%253Chttp://**<http://codereview.appspot.com/****6346048/%253Chttp://**>\r\n>> >\r\n>>\r\n>\r\n> codereview.appspot.com/****6346048/<http://codereview.appspot.com/**6346048/>\r\n> <http://codereview.**appspot.com/**6346048/%3Chttp:**\r\n> //codereview.appspot.com/**6346048/<http://codereview.appspot.com/**6346048/%3Chttp://codereview.appspot.com/6346048/>\r\n> >\r\n>\r\n>> > >\r\n>> >\r\n>> >  >\r\n>> >> > Affected files:\r\n>> >> >  M src/cmd/go/http.go\r\n>> >> >\r\n>> >> >\r\n>> >> > Index: src/cmd/go/http.go\r\n>> >> >\r\n>> >>\r\n>> > ==============================******==========================**==**\r\n>>\r\n>> > ==**=======\r\n>> >\r\n>> >  > --- a/src/cmd/go/http.go\r\n>> >> > +++ b/src/cmd/go/http.go\r\n>> >> > @@ -20,9 +20,13 @@\r\n>> >> >        \"net/url\"\r\n>> >> >  )\r\n>> >> >\r\n>> >> > +// httpClient is the default HTTP client, but a variable so it\r\n>>\r\n> can\r\n>\r\n>> >>\r\n>> > be\r\n>> >\r\n>> >> > +// changed by tests, without modifying http.DefaultClient.\r\n>> >> > +var httpClient = http.DefaultClient\r\n>> >> > +\r\n>> >> >  // httpGET returns the data from an HTTP GET request for the\r\n>>\r\n> given\r\n>\r\n>> >>\r\n>> > URL.\r\n>> >\r\n>> >> >  func httpGET(url string) ([]byte, error) {\r\n>> >> > -       resp, err := http.Get(url)\r\n>> >> > +       resp, err := httpClient.Get(url)\r\n>> >> >        if err != nil {\r\n>> >> >                return nil, err\r\n>> >> >        }\r\n>> >> > @@ -37,10 +41,6 @@\r\n>> >> >        return b, nil\r\n>> >> >  }\r\n>> >> >\r\n>> >> > -// httpClient is the default HTTP client, but a variable so it\r\n>>\r\n> can\r\n>\r\n>> >>\r\n>> > be\r\n>> >\r\n>> >> > -// changed by tests, without modifying http.DefaultClient.\r\n>> >> > -var httpClient = http.DefaultClient\r\n>> >> > -\r\n>> >> >  // httpsOrHTTP returns the body of either the importPath's\r\n>> >> >  // https resource or, if unavailable, the http resource.\r\n>> >> >  func httpsOrHTTP(importPath string) (urlStr string, body\r\n>> >>\r\n>> > io.ReadCloser,\r\n>> >\r\n>> >> > err error) {\r\n>> >> >\r\n>> >> >\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> >\r\n>>\r\n>\r\n> http://codereview.appspot.com/****6346048/%3Chttp://**\r\n> codereview.appspot.com/**6346048/<http://codereview.appspot.com/**6346048/%3Chttp://codereview.appspot.com/6346048/>\r\n> >\r\n>\r\n>> >\r\n>>\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6346048/<http://codereview.appspot.com/6346048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-30 19:27:32.054782",
			"approval": true
		},
		{
			"sender": "amir@gluegadget.com",
			"recipients": [
				"amir@gluegadget.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-29 09:51:13.044564",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "httpClient was only defined as a testing hook.  You're not fixing anything\r\nhere:  http.Get is already just a wrapper around http.DefaultClient.Get.\r\n\r\nThe DefaultClient's will use your proxy settings as defined by your\r\nenvironment.\r\n\r\n\r\nOn Fri, Jun 29, 2012 at 2:51 AM, <amir@gluegadget.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> cmd/go: httpGet function does not use global variable httpClient\r\n>\r\n> httpClient is declared as a variable, therefore, it's possible to change\r\n> its behavior without modifying http.DefaultClient. httpsOrHttp function\r\n> uses this variable for HTTP calls, but httpGet does not. It makes it\r\n> impossible to use an httpClient with a non-default Transport.\r\n>\r\n> The reasoning behind this CL is that googleCodeVCS function in vcs.go\r\n> uses httpGet function to detect the version control system for the\r\n> packages hosted at code.google.com by scraping the project's\r\n> /source/checkout page. But, code.google.com is not available in all\r\n> countries, therefore, the error page that code.google.com returns in\r\n> response makes it impossible for the regular expression used to detect\r\n> vcs to find a match. A Transport with a custom Dial makes it possible to\r\n> proxy HTTP calls.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6346048/<http://codereview.appspot.com/6346048/>\r\n>\r\n> Affected files:\r\n>  M src/cmd/go/http.go\r\n>\r\n>\r\n> Index: src/cmd/go/http.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/http.go\r\n> +++ b/src/cmd/go/http.go\r\n> @@ -20,9 +20,13 @@\r\n>        \"net/url\"\r\n>  )\r\n>\r\n> +// httpClient is the default HTTP client, but a variable so it can be\r\n> +// changed by tests, without modifying http.DefaultClient.\r\n> +var httpClient = http.DefaultClient\r\n> +\r\n>  // httpGET returns the data from an HTTP GET request for the given URL.\r\n>  func httpGET(url string) ([]byte, error) {\r\n> -       resp, err := http.Get(url)\r\n> +       resp, err := httpClient.Get(url)\r\n>        if err != nil {\r\n>                return nil, err\r\n>        }\r\n> @@ -37,10 +41,6 @@\r\n>        return b, nil\r\n>  }\r\n>\r\n> -// httpClient is the default HTTP client, but a variable so it can be\r\n> -// changed by tests, without modifying http.DefaultClient.\r\n> -var httpClient = http.DefaultClient\r\n> -\r\n>  // httpsOrHTTP returns the body of either the importPath's\r\n>  // https resource or, if unavailable, the http resource.\r\n>  func httpsOrHTTP(importPath string) (urlStr string, body io.ReadCloser,\r\n> err error) {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-29 13:41:00.399155",
			"approval": false
		},
		{
			"sender": "amir@gluegadget.com",
			"recipients": [
				"amir@gluegadget.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I understand that http DefaultClient uses ProxyFromEnvironment, but that is only for HTTP_PROXY.\n\nI have a custom Transport, with a net.Dial alike Dial for SOCKS4a and SOCKS5. If all parts of code use httpClient variable, that would make it easy to write something like this:\n\nvar customTransport = &http.Transport{\n    Dial: DialSOCKS5,\n}\n\nvar httpClient = &http.Client{\n    Transport: customTransport,\n}\n\nAnd be sure that all parts of code are using this Transport.\n\nI am not trying to say this change really needs to be merged, because in order to have a working \"go get\", I have to insert that snippet of code I pasted earlier in http.go anyway, but it took me half an hour figuring out why, even though after I replaced httpClient, I was still getting 403.\n\nAs a side note, is there an agreed-upon name for a SOCKS proxy environment variable? Something like HTTP_PROXY but for SOCKS proxy? I'd be more than happy to extend ProxyFromEnvironment to support values like \"socks5://localhost:5000\" as well.\n\nOn 2012/06/29 13:41:00, bradfitz wrote:\n> httpClient was only defined as a testing hook.  You're not fixing anything\n> here:  http.Get is already just a wrapper around http.DefaultClient.Get.\n> \n> The DefaultClient's will use your proxy settings as defined by your\n> environment.\n> \n> \n> On Fri, Jun 29, 2012 at 2:51 AM, <mailto:amir@gluegadget.com> wrote:\n> \n> > Reviewers: http://golang-dev_googlegroups.com,\n> >\n> > Message:\n> > Hello mailto:golang-dev@googlegroups.com,\n> >\n> > I'd like you to review this change to\n> > https://go.googlecode.com/hg/\n> >\n> >\n> > Description:\n> > cmd/go: httpGet function does not use global variable httpClient\n> >\n> > httpClient is declared as a variable, therefore, it's possible to change\n> > its behavior without modifying http.DefaultClient. httpsOrHttp function\n> > uses this variable for HTTP calls, but httpGet does not. It makes it\n> > impossible to use an httpClient with a non-default Transport.\n> >\n> > The reasoning behind this CL is that googleCodeVCS function in vcs.go\n> > uses httpGet function to detect the version control system for the\n> > packages hosted at http://code.google.com by scraping the project's\n> > /source/checkout page. But, http://code.google.com is not available in all\n> > countries, therefore, the error page that http://code.google.com returns in\n> > response makes it impossible for the regular expression used to detect\n> > vcs to find a match. A Transport with a custom Dial makes it possible to\n> > proxy HTTP calls.\n> >\n> > Please review this at\n> http://codereview.appspot.com/**6346048/%3Chttp://codereview.appspot.com/6346048/>\n> >\n> > Affected files:\n> >  M src/cmd/go/http.go\n> >\n> >\n> > Index: src/cmd/go/http.go\n> > ==============================**==============================**=======\n> > --- a/src/cmd/go/http.go\n> > +++ b/src/cmd/go/http.go\n> > @@ -20,9 +20,13 @@\n> >        \"net/url\"\n> >  )\n> >\n> > +// httpClient is the default HTTP client, but a variable so it can be\n> > +// changed by tests, without modifying http.DefaultClient.\n> > +var httpClient = http.DefaultClient\n> > +\n> >  // httpGET returns the data from an HTTP GET request for the given URL.\n> >  func httpGET(url string) ([]byte, error) {\n> > -       resp, err := http.Get(url)\n> > +       resp, err := httpClient.Get(url)\n> >        if err != nil {\n> >                return nil, err\n> >        }\n> > @@ -37,10 +41,6 @@\n> >        return b, nil\n> >  }\n> >\n> > -// httpClient is the default HTTP client, but a variable so it can be\n> > -// changed by tests, without modifying http.DefaultClient.\n> > -var httpClient = http.DefaultClient\n> > -\n> >  // httpsOrHTTP returns the body of either the importPath's\n> >  // https resource or, if unavailable, the http resource.\n> >  func httpsOrHTTP(importPath string) (urlStr string, body io.ReadCloser,\n> > err error) {\n> >\n> >\n> >",
			"disapproval": false,
			"date": "2012-06-29 13:59:04.848032",
			"approval": false
		}
	],
	"owner_email": "amir@gluegadget.com",
	"private": false,
	"base_url": "",
	"owner": "amir",
	"subject": "code review 6346048: cmd/go: httpGet function does not use global variable h...",
	"created": "2012-06-29 09:47:50.177761",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-07-03 07:13:36.335551",
	"closed": true,
	"issue": 6346048
}