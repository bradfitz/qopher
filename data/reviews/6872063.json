{
	"description": "compress/flate: Performance improvement for inflate\n\nDecode as much as possible of a Huffman symbol in a single table\nlookup (much like the zlib implementation), filling more bits\n(conservatively, so we don't consume past the end of the stream)\nwhen the code prefix indicates more bits are needed. This\nresults in about a 50% performance gain in speed benchmarks.\nThe following set is benchcmp done on a retina MacBook Pro:\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkDecodeDigitsSpeed1e4           28.41        42.79    1.51x\nBenchmarkDecodeDigitsSpeed1e5           30.18        47.62    1.58x\nBenchmarkDecodeDigitsSpeed1e6           30.81        48.14    1.56x\nBenchmarkDecodeDigitsDefault1e4         30.28        44.61    1.47x\nBenchmarkDecodeDigitsDefault1e5         32.18        51.94    1.61x\nBenchmarkDecodeDigitsDefault1e6         35.57        53.28    1.50x\nBenchmarkDecodeDigitsCompress1e4        30.39        44.83    1.48x\nBenchmarkDecodeDigitsCompress1e5        33.05        51.64    1.56x\nBenchmarkDecodeDigitsCompress1e6        35.69        53.04    1.49x\nBenchmarkDecodeTwainSpeed1e4            25.90        43.04    1.66x\nBenchmarkDecodeTwainSpeed1e5            29.97        48.19    1.61x\nBenchmarkDecodeTwainSpeed1e6            31.36        49.43    1.58x\nBenchmarkDecodeTwainDefault1e4          28.79        45.02    1.56x\nBenchmarkDecodeTwainDefault1e5          37.12        55.65    1.50x\nBenchmarkDecodeTwainDefault1e6          39.28        58.16    1.48x\nBenchmarkDecodeTwainCompress1e4         28.64        44.90    1.57x\nBenchmarkDecodeTwainCompress1e5         37.40        55.98    1.50x\nBenchmarkDecodeTwainCompress1e6         39.35        58.06    1.48x",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6872063/diff/5006/src/pkg/compress/flate/gen.go\nFile src/pkg/compress/flate/gen.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/5006/src/pkg/compress/flate/gen.go#newcode128\nsrc/pkg/compress/flate/gen.go:128: fmt.Println(\"package flate\")\nplease add some notice like \"// auto generated, DO NOT EDIT\" to\nthe generated file, and preferably with the command line that\ngenerated it.",
			"disapproval": false,
			"date": "2012-12-21 17:05:15.301470",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 22, 2012 at 5:10 PM, Raph Levien <raph@google.com> wrote:\r\n\r\n> I'm making the commenting changes as you suggest, but in so doing I'm\r\n> finding that there's a pretty serious version confusion going on. In\r\n> particular, these source files have significant differences:\r\n>\r\n> http://code.google.com/p/go/source/browse/src/pkg/compress/flate/inflate.go\r\n\r\n\r\nThis is tip (the head of the \"default\" branch)\r\n\r\n\r\n> http://golang.org/src/pkg/compress/flate/inflate.go\r\n\r\n\r\nThis is old, the \"go1\" branch, from the \"go1.0.3\" release.\r\n\r\n\r\n> These discrepancies are showing up in the code review tool as diffs.\r\n> They also show up when I do an \"hg diff\" in my source tree.\r\n>\r\n\r\nYour local source checkout should be on the \"default\" branch, not \"release\".\r\n\r\n$ hg update default\r\n",
			"disapproval": false,
			"date": "2012-12-23 01:22:21.556370",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-21 05:18:52.072590",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the review. There were also problems caused by the patch being against \"release\" rather than the current development branch, but hopefully that's all resolved now.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (left):\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#oldcode58\nsrc/pkg/compress/flate/inflate.go:58: // J. Brian Connell, ``A Huffman-Shannon-Fano Code,''\nOn 2012/12/22 14:19:00, rsc wrote:\n> I don't mind losing this comment if it's no longer relevant, but could you\n> please add a comment explaining or pointing to a reference for the new\n> algorithm?\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode61\nsrc/pkg/compress/flate/inflate.go:61: // chunk & 15 is number of bits\nOn 2012/12/22 14:19:00, rsc wrote:\n> Can this fit in uint16? You're only using 4 bits of the bottom 16 and perhaps\n> not many of the top 16 either.\n\nI think in the worst case the table link indices can be 13 bits, so it doesn't quite fit. This would be a highly artificial case, of course, but if it can happen we should decode it correctly.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode71\nsrc/pkg/compress/flate/inflate.go:71: chunks   [huffmanNumChunks]uint32\nOn 2012/12/22 14:19:00, rsc wrote:\n> Please add comments describing the meaning of these fields.\n> I think that if the data structure is documented clearly the code will become\n> more clear too.\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode114\nsrc/pkg/compress/flate/inflate.go:114: reverse = reverse >> uint(16-huffmanChunkBits)\nOn 2012/12/22 14:19:00, rsc wrote:\n> reverse >>= 16 - huffmanChunkBits\n> \n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode132\nsrc/pkg/compress/flate/inflate.go:132: here := uint32((i << 16) + n)\nOn 2012/12/22 14:19:00, rsc wrote:\n> Does here mean something / stand for something? It's an unusual name, and I\n> can't figure out what it means.\n> \n\nChanged it to \"chunk.\" I believe \"here\" is the name used in zlib, but agree it's confusing.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode134\nsrc/pkg/compress/flate/inflate.go:134: reverse = reverse >> uint(16-n)\nOn 2012/12/22 14:19:00, rsc wrote:\n> reverse >>= uint(16 - n)\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode556\nsrc/pkg/compress/flate/inflate.go:556: // Read f.dataLen bytes into history,\nOn 2012/12/22 14:19:00, rsc wrote:\n> This new comment seems wrong - it says dataLen not copyLen.\n> I also don't understand why it moved inside the function instead of\n> being a doc comment. Could you put the old one back?\n\nThis is actually because of version confusion between release and default. Hopefully it's all resolved now.",
			"disapproval": false,
			"date": "2012-12-23 02:22:33.299790",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, good suggestion.\n\nhttps://codereview.appspot.com/6872063/diff/5006/src/pkg/compress/flate/gen.go\nFile src/pkg/compress/flate/gen.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/5006/src/pkg/compress/flate/gen.go#newcode128\nsrc/pkg/compress/flate/gen.go:128: fmt.Println(\"package flate\")\nOn 2012/12/21 17:05:15, minux wrote:\n> please add some notice like \"// auto generated, DO NOT EDIT\" to\n> the generated file, and preferably with the command line that\n> generated it.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-21 23:23:17.209100",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-21 05:24:47.911850",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-21 05:31:51.746740",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You can also use hg upload NNNN\r\n\r\nTo avoid sending an email. \r\n\r\nOn 21/12/2012, at 16:32, raph@google.com wrote:\r\n\r\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\r\n> \r\n> Please take another look.\r\n> \r\n> \r\n> https://codereview.appspot.com/6872063/\r\n",
			"disapproval": false,
			"date": "2012-12-21 05:34:42.910650",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm making the commenting changes as you suggest, but in so doing I'm\r\nfinding that there's a pretty serious version confusion going on. In\r\nparticular, these source files have significant differences:\r\n\r\nhttp://code.google.com/p/go/source/browse/src/pkg/compress/flate/inflate.go\r\nhttp://golang.org/src/pkg/compress/flate/inflate.go\r\n\r\nThe former has f.bits as a *[maxLit + maxDist]int, while the latter\r\nhas it as [maxLit + maxDist]int (ie not a pointer). There are other\r\nchanges in the way hist is processed at all. In addition, the former\r\nhas the comment before copyData the way you like it and the latter has\r\nit inside the function.\r\n\r\nThese discrepancies are showing up in the code review tool as diffs.\r\nThey also show up when I do an \"hg diff\" in my source tree.\r\n\r\nI don't want to change this stuff at all, just the code decoding. I\r\nalso have no idea what the f is going on with the different versions.\r\nWhen I look at the hg logs, it looks like the last change to the file\r\nis dated Nov 1, so it seems unlikely there's a change that happened\r\nconcurrently with mine.\r\n\r\nI don't know how to proceed.\r\n\r\nRaph\r\n\r\nOn Sat, Dec 22, 2012 at 6:19 AM,  <rsc@golang.org> wrote:\r\n> Looks good, and the performance improvements are great. I just want to\r\n> make sure we have enough comments here that others can make fixes or\r\n> extensions.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go\r\n> File src/pkg/compress/flate/inflate.go (left):\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#oldcode58\r\n> src/pkg/compress/flate/inflate.go:58: // J. Brian Connell, ``A\r\n> Huffman-Shannon-Fano Code,''\r\n> I don't mind losing this comment if it's no longer relevant, but could\r\n> you please add a comment explaining or pointing to a reference for the\r\n> new algorithm?\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go\r\n> File src/pkg/compress/flate/inflate.go (right):\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode61\r\n> src/pkg/compress/flate/inflate.go:61: // chunk & 15 is number of bits\r\n> Can this fit in uint16? You're only using 4 bits of the bottom 16 and\r\n> perhaps not many of the top 16 either.\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode71\r\n> src/pkg/compress/flate/inflate.go:71: chunks   [huffmanNumChunks]uint32\r\n> Please add comments describing the meaning of these fields.\r\n> I think that if the data structure is documented clearly the code will\r\n> become more clear too.\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode114\r\n> src/pkg/compress/flate/inflate.go:114: reverse = reverse >>\r\n> uint(16-huffmanChunkBits)\r\n> reverse >>= 16 - huffmanChunkBits\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode132\r\n> src/pkg/compress/flate/inflate.go:132: here := uint32((i << 16) + n)\r\n> Does here mean something / stand for something? It's an unusual name,\r\n> and I can't figure out what it means.\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode134\r\n> src/pkg/compress/flate/inflate.go:134: reverse = reverse >> uint(16-n)\r\n> reverse >>= uint(16 - n)\r\n>\r\n> https://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode556\r\n> src/pkg/compress/flate/inflate.go:556: // Read f.dataLen bytes into\r\n> history,\r\n> This new comment seems wrong - it says dataLen not copyLen.\r\n> I also don't understand why it moved inside the function instead of\r\n> being a doc comment. Could you put the old one back?\r\n>\r\n> https://codereview.appspot.com/6872063/\r\n",
			"disapproval": false,
			"date": "2012-12-23 01:10:10.680920",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-21 05:32:08.744480",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Could you please update the description with benchmarking information, there should be some benchmarks inside the flate package already. A suggestion is\n\ngo test -bench=. > old.txt\n... make changes ...\ngo test -bench=. > new.txt\n$GOROOT/misc/benchcmp {old,new}.txt\n\nYou can also generate a stand alone benchmark as a point in time reference with -c\n\ngo test -c\nflate.test -test.bench=. > old.txt",
			"disapproval": false,
			"date": "2012-12-21 06:27:25.795910",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done, thanks for the suggestion and tools howto.\r\n\r\nOn Thu, Dec 20, 2012 at 10:27 PM,  <dave@cheney.net> wrote:\r\n> Could you please update the description with benchmarking information,\r\n> there should be some benchmarks inside the flate package already. A\r\n> suggestion is\r\n>\r\n> go test -bench=. > old.txt\r\n> ... make changes ...\r\n> go test -bench=. > new.txt\r\n> $GOROOT/misc/benchcmp {old,new}.txt\r\n>\r\n> You can also generate a stand alone benchmark as a point in time\r\n> reference with -c\r\n>\r\n> go test -c\r\n> flate.test -test.bench=. > old.txt\r\n>\r\n> https://codereview.appspot.com/6872063/\r\n",
			"disapproval": false,
			"date": "2012-12-21 07:15:33.117520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good, and the performance improvements are great. I just want to make sure we have enough comments here that others can make fixes or extensions.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (left):\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#oldcode58\nsrc/pkg/compress/flate/inflate.go:58: // J. Brian Connell, ``A Huffman-Shannon-Fano Code,''\nI don't mind losing this comment if it's no longer relevant, but could you please add a comment explaining or pointing to a reference for the new algorithm?\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode61\nsrc/pkg/compress/flate/inflate.go:61: // chunk & 15 is number of bits\nCan this fit in uint16? You're only using 4 bits of the bottom 16 and perhaps not many of the top 16 either.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode71\nsrc/pkg/compress/flate/inflate.go:71: chunks   [huffmanNumChunks]uint32\nPlease add comments describing the meaning of these fields.\nI think that if the data structure is documented clearly the code will become more clear too.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode114\nsrc/pkg/compress/flate/inflate.go:114: reverse = reverse >> uint(16-huffmanChunkBits)\nreverse >>= 16 - huffmanChunkBits\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode132\nsrc/pkg/compress/flate/inflate.go:132: here := uint32((i << 16) + n)\nDoes here mean something / stand for something? It's an unusual name, and I can't figure out what it means.\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode134\nsrc/pkg/compress/flate/inflate.go:134: reverse = reverse >> uint(16-n)\nreverse >>= uint(16 - n)\n\nhttps://codereview.appspot.com/6872063/diff/8002/src/pkg/compress/flate/inflate.go#newcode556\nsrc/pkg/compress/flate/inflate.go:556: // Read f.dataLen bytes into history,\nThis new comment seems wrong - it says dataLen not copyLen.\nI also don't understand why it moved inside the function instead of\nbeing a doc comment. Could you put the old one back?",
			"disapproval": false,
			"date": "2012-12-22 14:19:00.486640",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are some numbers from a linux/arm system.\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkDecodeDigitsSpeed1e4            4.40         5.06    1.15x\nBenchmarkDecodeDigitsSpeed1e5            4.85         5.44    1.12x\nBenchmarkDecodeDigitsSpeed1e6            4.91         5.49    1.12x\nBenchmarkDecodeDigitsDefault1e4          4.59         5.29    1.15x\nBenchmarkDecodeDigitsDefault1e5          5.18         6.28    1.21x\nBenchmarkDecodeDigitsDefault1e6          5.53         6.50    1.18x\nBenchmarkDecodeDigitsCompress1e4         4.58         5.28    1.15x\nBenchmarkDecodeDigitsCompress1e5         5.18         6.27    1.21x\nBenchmarkDecodeDigitsCompress1e6         5.49         6.48    1.18x\nBenchmarkDecodeTwainSpeed1e4             4.20         5.44    1.30x\nBenchmarkDecodeTwainSpeed1e5             5.04         6.29    1.25x\nBenchmarkDecodeTwainSpeed1e6             5.22         6.46    1.24x\nBenchmarkDecodeTwainDefault1e4           4.64         5.82    1.25x\nBenchmarkDecodeTwainDefault1e5           6.06         7.42    1.22x\nBenchmarkDecodeTwainDefault1e6           6.44         7.79    1.21x\nBenchmarkDecodeTwainCompress1e4          4.64         5.83    1.26x\nBenchmarkDecodeTwainCompress1e5          6.09         7.46    1.22x\nBenchmarkDecodeTwainCompress1e6          6.47         7.83    1.21x",
			"disapproval": false,
			"date": "2012-12-27 10:16:47.061770",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Encoding numbers for the same host have suffered a little, but within the margin of error\n\nBenchmarkEncodeDigitsSpeed1e4            1.59         1.56    0.98x\nBenchmarkEncodeDigitsSpeed1e5            2.21         2.17    0.98x\nBenchmarkEncodeDigitsSpeed1e6            2.25         2.21    0.98x\nBenchmarkEncodeDigitsDefault1e4          1.22         1.22    1.00x\nBenchmarkEncodeDigitsDefault1e5          0.57         0.57    1.00x\nBenchmarkEncodeDigitsDefault1e6          0.51         0.50    0.98x\nBenchmarkEncodeDigitsCompress1e4         1.22         1.22    1.00x\nBenchmarkEncodeDigitsCompress1e5         0.57         0.57    1.00x\nBenchmarkEncodeDigitsCompress1e6         0.51         0.50    0.98x\nBenchmarkEncodeTwainSpeed1e4             1.46         1.43    0.98x\nBenchmarkEncodeTwainSpeed1e5             2.50         2.47    0.99x\nBenchmarkEncodeTwainSpeed1e6             2.67         2.62    0.98x\nBenchmarkEncodeTwainDefault1e4           1.08         1.07    0.99x\nBenchmarkEncodeTwainDefault1e5           0.70         0.70    1.00x\nBenchmarkEncodeTwainDefault1e6           0.65         0.65    1.00x\nBenchmarkEncodeTwainCompress1e4          1.06         1.06    1.00x\nBenchmarkEncodeTwainCompress1e5          0.54         0.55    1.02x\nBenchmarkEncodeTwainCompress1e6          0.49         0.49    1.00x",
			"disapproval": false,
			"date": "2012-12-27 10:17:19.736310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good, just want to clear up the 15/16 stuff.\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go#newcode70\nsrc/pkg/compress/flate/inflate.go:70: // filled. Since the extra bits are zero, and the zlib Huffman codes\ns/zlib/DEFLATE/\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go#newcode76\nsrc/pkg/compress/flate/inflate.go:76: // chunk >> 16 is value, including table link\nWhy >> 16 instead of >> 4?\nWhat are the middle 12 bits for?\nIs there a compelling reason not to use >>4?\n\nMy discomfort stems entirely from the fact that when you see\nx & 15 and x >> 16 next to each other, you think someone mixed\nup bit counts and masks somewhere.\n\nPerhaps it even makes sense to do\n\nconst (\n    huffmanCountMask = 15\n    huffmanLinkShift = 4\n)\n\nand then use those constants.\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go#newcode147\nsrc/pkg/compress/flate/inflate.go:147: chunk := uint32((i << 16) + n)\nTypically | for bit combinations, and then (actually regardless) you can drop the ( ): uint32(i<<16 | n)",
			"disapproval": false,
			"date": "2013-01-02 21:58:47.557230",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the suggestions - I think the new patch set addresses your concerns.\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go#newcode70\nsrc/pkg/compress/flate/inflate.go:70: // filled. Since the extra bits are zero, and the zlib Huffman codes\nOn 2013/01/02 21:58:47, rsc wrote:\n> s/zlib/DEFLATE/\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go#newcode76\nsrc/pkg/compress/flate/inflate.go:76: // chunk >> 16 is value, including table link\nNot a compelling reason. I changed it to 4, and one nice consequence is that the generated fixedhuff tables are more concise. I also added the const's as you suggested.\n\nOn 2013/01/02 21:58:47, rsc wrote:\n> Why >> 16 instead of >> 4?\n> What are the middle 12 bits for?\n> Is there a compelling reason not to use >>4?\n> \n> My discomfort stems entirely from the fact that when you see\n> x & 15 and x >> 16 next to each other, you think someone mixed\n> up bit counts and masks somewhere.\n> \n> Perhaps it even makes sense to do\n> \n> const (\n>     huffmanCountMask = 15\n>     huffmanLinkShift = 4\n> )\n> \n> and then use those constants.\n\nhttps://codereview.appspot.com/6872063/diff/7003/src/pkg/compress/flate/inflate.go#newcode147\nsrc/pkg/compress/flate/inflate.go:147: chunk := uint32((i << 16) + n)\nOn 2013/01/02 21:58:47, rsc wrote:\n> Typically | for bit combinations, and then (actually regardless) you can drop\n> the ( ): uint32(i<<16 | n)\n\nDone.",
			"disapproval": false,
			"date": "2013-01-03 00:11:18.533560",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go\nFile src/pkg/compress/flate/gen.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode138\nsrc/pkg/compress/flate/gen.go:138: fmt.Println(\"\\t[...]uint32{\")\ns/.../huffmanNumChunks/ ?\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode140\nsrc/pkg/compress/flate/gen.go:140: if (i & 7) == 0 {\nUnnecessary parens?\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode145\nsrc/pkg/compress/flate/gen.go:145: fmt.Printf(\"0x%x,\", h.chunks[i])\n\"0x%04x,\" to remove the raggedness in flate.go?\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode146\nsrc/pkg/compress/flate/gen.go:146: if (i & 7) == 7 {\nUnnecessary parens?\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/inflate.go#newcode626\nsrc/pkg/compress/flate/inflate.go:626: n := uint(h.min)\nWould this be better as an uint32 (and similarly for the decompressor.nb field)?",
			"disapproval": false,
			"date": "2013-01-03 07:22:03.851220",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go\nFile src/pkg/compress/flate/gen.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode138\nsrc/pkg/compress/flate/gen.go:138: fmt.Println(\"\\t[...]uint32{\")\nOn 2013/01/03 07:22:04, nigeltao wrote:\n> s/.../huffmanNumChunks/ ?\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode140\nsrc/pkg/compress/flate/gen.go:140: if (i & 7) == 0 {\nOn 2013/01/03 07:22:04, nigeltao wrote:\n> Unnecessary parens?\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode145\nsrc/pkg/compress/flate/gen.go:145: fmt.Printf(\"0x%x,\", h.chunks[i])\nOn 2013/01/03 07:22:04, nigeltao wrote:\n> \"0x%04x,\" to remove the raggedness in flate.go?\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/gen.go#newcode146\nsrc/pkg/compress/flate/gen.go:146: if (i & 7) == 7 {\nOn 2013/01/03 07:22:04, nigeltao wrote:\n> Unnecessary parens?\n\nDone.\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/inflate.go\nFile src/pkg/compress/flate/inflate.go (right):\n\nhttps://codereview.appspot.com/6872063/diff/23001/src/pkg/compress/flate/inflate.go#newcode626\nsrc/pkg/compress/flate/inflate.go:626: n := uint(h.min)\nOn 2013/01/03 07:22:04, nigeltao wrote:\n> Would this be better as an uint32 (and similarly for the decompressor.nb field)?\n\nI don't strongly feel that it would be better. This is a \"small int\" so it feels that uint is the most natural type for it. To me, specifying a size suggests that the values could go up to that size, or that it has a specific size associated with it. Neither is the case here. But I'm open to a argument.",
			"disapproval": false,
			"date": "2013-01-03 20:22:57.405740",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLooks like this got dropped over the break. Apologies for that.",
			"disapproval": false,
			"date": "2013-01-18 19:24:43.285910",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=437241074f39 ***\n\ncompress/flate: Performance improvement for inflate\n\nDecode as much as possible of a Huffman symbol in a single table\nlookup (much like the zlib implementation), filling more bits\n(conservatively, so we don't consume past the end of the stream)\nwhen the code prefix indicates more bits are needed. This\nresults in about a 50% performance gain in speed benchmarks.\nThe following set is benchcmp done on a retina MacBook Pro:\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkDecodeDigitsSpeed1e4           28.41        42.79    1.51x\nBenchmarkDecodeDigitsSpeed1e5           30.18        47.62    1.58x\nBenchmarkDecodeDigitsSpeed1e6           30.81        48.14    1.56x\nBenchmarkDecodeDigitsDefault1e4         30.28        44.61    1.47x\nBenchmarkDecodeDigitsDefault1e5         32.18        51.94    1.61x\nBenchmarkDecodeDigitsDefault1e6         35.57        53.28    1.50x\nBenchmarkDecodeDigitsCompress1e4        30.39        44.83    1.48x\nBenchmarkDecodeDigitsCompress1e5        33.05        51.64    1.56x\nBenchmarkDecodeDigitsCompress1e6        35.69        53.04    1.49x\nBenchmarkDecodeTwainSpeed1e4            25.90        43.04    1.66x\nBenchmarkDecodeTwainSpeed1e5            29.97        48.19    1.61x\nBenchmarkDecodeTwainSpeed1e6            31.36        49.43    1.58x\nBenchmarkDecodeTwainDefault1e4          28.79        45.02    1.56x\nBenchmarkDecodeTwainDefault1e5          37.12        55.65    1.50x\nBenchmarkDecodeTwainDefault1e6          39.28        58.16    1.48x\nBenchmarkDecodeTwainCompress1e4         28.64        44.90    1.57x\nBenchmarkDecodeTwainCompress1e5         37.40        55.98    1.50x\nBenchmarkDecodeTwainCompress1e6         39.35        58.06    1.48x\n\nR=rsc, dave, minux.ma, bradfitz, nigeltao\nCC=golang-dev\nhttps://codereview.appspot.com/6872063\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-18 20:09:53.510430",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"raph@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 19:56:17.465220",
			"approval": false
		}
	],
	"owner_email": "raph@google.com",
	"private": false,
	"base_url": "",
	"owner": "raph",
	"subject": "code review 6872063: compress/flate: Performance improvement for inflate",
	"created": "2012-12-05 05:28:00.887830",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		5006,
		8002,
		13007,
		7003,
		23001,
		27002
	],
	"modified": "2013-07-21 19:56:17.864300",
	"closed": false,
	"issue": 6872063
}