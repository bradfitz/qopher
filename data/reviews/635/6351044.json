{
	"description": "runtime: trivial: use enum for remaining debug constants\n\nThe 5c compiler does not eliminate unreachable code when\ndebug is defined as a static int32 (6c and 8c do). This\nchange saves about 4k in the final binary and a few branches.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"lvd@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I saw about a 2% improvement in the chan micro benchmarks but no real change in the go1 benchmarks. \r\n\r\nOn 28/06/2012, at 1:07, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I doubt that 6c or 8c eliminate the branch.\r\n> I have on occasion used 'set debug via gdb'.\r\n> Surely it's not slowing anything down?\r\n",
			"disapproval": false,
			"date": "2012-06-27 15:20:05.330655",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** abandoned ***",
			"disapproval": false,
			"date": "2012-06-28 00:25:44.404155",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-27 06:47:32.281284",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "but this way you can't set it to 1 under gdb\r\n\r\nOn Wed, Jun 27, 2012 at 8:47 AM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> runtime: trivial: use enum for remaining debug constants\r\n>\r\n> The 5c compiler does not elimiate unreachable code when\r\n> debug is defined as a static int32 (6c and 8c do). This\r\n> change saves about 4k in the final binary and a few branches.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6351044/<http://codereview.appspot.com/6351044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/chan.c\r\n>   M src/pkg/runtime/hashmap.c\r\n>   M src/pkg/runtime/proc.c\r\n>   M src/pkg/runtime/slice.c\r\n>\r\n>\r\n> Index: src/pkg/runtime/chan.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/chan.c\r\n> +++ b/src/pkg/runtime/chan.c\r\n> @@ -8,7 +8,9 @@\r\n>  #define        MAXALIGN        7\r\n>  #define        NOSELGEN        1\r\n>\r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n>\r\n>  typedef        struct  WaitQ   WaitQ;\r\n>  typedef        struct  SudoG   SudoG;\r\n> Index: src/pkg/runtime/hashmap.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/hashmap.c\r\n> +++ b/src/pkg/runtime/hashmap.c\r\n> @@ -726,7 +726,9 @@\r\n>         return p;\r\n>  }\r\n>\r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n>\r\n>  // makemap(typ *Type, hint uint32) (hmap *map[any]any);\r\n>  Hmap*\r\n> Index: src/pkg/runtime/proc.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/proc.c\r\n> +++ b/src/pkg/runtime/proc.c\r\n> @@ -19,7 +19,9 @@\r\n>  M      runtime\u00b7m0;\r\n>  G      runtime\u00b7g0;     // idle goroutine for m0\r\n>\r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n>\r\n>  int32  runtime\u00b7gcwaiting;\r\n>\r\n> Index: src/pkg/runtime/slice.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/slice.c\r\n> +++ b/src/pkg/runtime/slice.c\r\n> @@ -8,7 +8,9 @@\r\n>  #include \"typekind.h\"\r\n>  #include \"malloc.h\"\r\n>\r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n>\r\n>  static void    makeslice1(SliceType*, int32, int32, Slice*);\r\n>  static void    growslice1(SliceType*, Slice, int32, Slice *);\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-27 08:44:47.100118",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Good point. I was just following the pattern that was present in a few files already. \r\n\r\nCan you still set the value under 6c/8c? I had a look at the 6c output and it looked like the branch was eliminated. \r\n\r\nOn 27/06/2012, at 18:44, Luuk van Dijk <lvd@google.com> wrote:\r\n\r\n> but this way you can't set it to 1 under gdb\r\n> \r\n> On Wed, Jun 27, 2012 at 8:47 AM, <dave@cheney.net> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n> \r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n> \r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n> \r\n> \r\n> Description:\r\n> runtime: trivial: use enum for remaining debug constants\r\n> \r\n> The 5c compiler does not elimiate unreachable code when\r\n> debug is defined as a static int32 (6c and 8c do). This\r\n> change saves about 4k in the final binary and a few branches.\r\n> \r\n> Please review this at http://codereview.appspot.com/6351044/\r\n> \r\n> Affected files:\r\n>   M src/pkg/runtime/chan.c\r\n>   M src/pkg/runtime/hashmap.c\r\n>   M src/pkg/runtime/proc.c\r\n>   M src/pkg/runtime/slice.c\r\n> \r\n> \r\n> Index: src/pkg/runtime/chan.c\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/chan.c\r\n> +++ b/src/pkg/runtime/chan.c\r\n> @@ -8,7 +8,9 @@\r\n>  #define        MAXALIGN        7\r\n>  #define        NOSELGEN        1\r\n> \r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n> \r\n>  typedef        struct  WaitQ   WaitQ;\r\n>  typedef        struct  SudoG   SudoG;\r\n> Index: src/pkg/runtime/hashmap.c\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/hashmap.c\r\n> +++ b/src/pkg/runtime/hashmap.c\r\n> @@ -726,7 +726,9 @@\r\n>         return p;\r\n>  }\r\n> \r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n> \r\n>  // makemap(typ *Type, hint uint32) (hmap *map[any]any);\r\n>  Hmap*\r\n> Index: src/pkg/runtime/proc.c\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/proc.c\r\n> +++ b/src/pkg/runtime/proc.c\r\n> @@ -19,7 +19,9 @@\r\n>  M      runtime\u00b7m0;\r\n>  G      runtime\u00b7g0;     // idle goroutine for m0\r\n> \r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n> \r\n>  int32  runtime\u00b7gcwaiting;\r\n> \r\n> Index: src/pkg/runtime/slice.c\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/slice.c\r\n> +++ b/src/pkg/runtime/slice.c\r\n> @@ -8,7 +8,9 @@\r\n>  #include \"typekind.h\"\r\n>  #include \"malloc.h\"\r\n> \r\n> -static int32   debug   = 0;\r\n> +enum {\r\n> +       debug = 0\r\n> +};\r\n> \r\n>  static void    makeslice1(SliceType*, int32, int32, Slice*);\r\n>  static void    growslice1(SliceType*, Slice, int32, Slice *);\r\n> \r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2012-06-27 09:05:44.637335",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I doubt that 6c or 8c eliminate the branch.\r\nI have on occasion used 'set debug via gdb'.\r\nSurely it's not slowing anything down?\r\n",
			"disapproval": false,
			"date": "2012-06-27 15:08:16.548414",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6351044: runtime: trivial: use enum for remaining debug constants",
	"created": "2012-06-27 06:41:05.368002",
	"patchsets": [
		1,
		2001,
		4005
	],
	"modified": "2012-06-28 00:25:44.619625",
	"closed": true,
	"issue": 6351044
}