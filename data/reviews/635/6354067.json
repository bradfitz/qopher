{
	"description": "freetype/truetype: if/else opcodes.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go\nFile freetype/truetype/hint.go (right):\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode42\nfreetype/truetype/hint.go:42: case opELSE:\nOn 2012/07/03 17:02:36, gri wrote:\n> I would have just chosen the full capitalized name for the opcodes and not\n> worried about them being exported. They are \"global\" anyway. I think it would\n> read more nicely and less cluttered.\n\nWe could want to export these constants if we expect people to want to write tools in Go that write Truetype hinting programs. But I don't expect that to happen anytime soon, and maybe less so in the brave new world of 300dpi screens. If it did, I'd probably want some functions to assemble and disassemble opcodes, which probably means moving these constants to a separate truetype/bytecode package.\n\nIn the meantime, I'd rather not clutter up these package docs with 200 opcode constants. I also prefer opELSE over _ELSE.\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode182\nfreetype/truetype/hint.go:182: pc++\nOn 2012/07/03 17:02:36, gri wrote:\n> It might be interesting to see if the compiler generates different (better) code\n> if the pc++ is part of the for loop rather than have it here: Depending on how\n> the for loop is translated, if the pc++ is done there, it may save an extra\n> (unconditional) branch. Not sure if it matters in terms of performance, though.\n> You would have to correct by -1 in cases where you use continue now.In the old\n> days, that would have been preferred over the extra control flow. Not sure what\n> CPUs do nowadays.\n\nIt might be a little faster, but the -1 corrections seem artificial. I don't think performance matters. I would expect most fonts to only execute tens of instructions per glyph, and the resultant hinted glyph is then cached.\n\nIf it matters, we can optimize it once we have a full test suite.\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode186\nfreetype/truetype/hint.go:186: // Skip past bytecode until the next ELSE (if opcode == 0) or the\nOn 2012/07/03 17:02:36, gri wrote:\n> wow, really? No direct branch in this instruction set?\n\nThere's relative jumps (JMPR, JROF, JROT), but yeah, the IF/ELSEs need a bytecode walk.\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode220\nfreetype/truetype/hint.go:220: case opPUSHB000, opPUSHB001, opPUSHB010, opPUSHB011, opPUSHB100, opPUSHB101, opPUSHB110, opPUSHB111:\nOn 2012/07/03 17:02:36, gri wrote:\n> case PUSHB0, PUSHB1, ... PUSHB7: ?\n\nI can see the appeal, but the spec at https://developer.apple.com/fonts/TTRefMan/RM07/appendixA.html uses 000, 001, etc.\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/opcodes.go\nFile freetype/truetype/opcodes.go (right):\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/opcodes.go#newcode13\nfreetype/truetype/opcodes.go:13: opSVTCA0    = 0x00\nOn 2012/07/03 17:02:36, gri wrote:\n> I understand the reason for the explicit constants, but you might want to\n> consider using iota - and simply group the opcodes in sets of 8 or 16.\n\nI prefer explicit constants.\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/opcodes.go#newcode156\nfreetype/truetype/opcodes.go:156: op_0x8f     = 0x8f\nOn 2012/07/03 17:02:36, gri wrote:\n> leave this away if they are not used?\n\nI prefer to be complete.",
			"disapproval": false,
			"date": "2012-07-04 11:17:08.472140",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/freetype-go/source/detail?r=12dd72350060 ***\n\nfreetype/truetype: if/else opcodes.\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/6354067",
			"disapproval": false,
			"date": "2012-07-04 11:28:57.767050",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/freetype-go",
			"disapproval": false,
			"date": "2012-07-03 12:26:46.065910",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go\nFile freetype/truetype/hint.go (right):\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode42\nfreetype/truetype/hint.go:42: case opELSE:\nI would have just chosen the full capitalized name for the opcodes and not worried about them being exported. They are \"global\" anyway. I think it would read more nicely and less cluttered. So:\n\ncase ELSE:\ncase POP:\ncase DUP:\netc.\n\n(or perhaps prefix with_, as in _ELSE, _POP, if you must).\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode182\nfreetype/truetype/hint.go:182: pc++\nIt might be interesting to see if the compiler generates different (better) code if the pc++ is part of the for loop rather than have it here: Depending on how the for loop is translated, if the pc++ is done there, it may save an extra (unconditional) branch. Not sure if it matters in terms of performance, though. You would have to correct by -1 in cases where you use continue now.In the old days, that would have been preferred over the extra control flow. Not sure what CPUs do nowadays.\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode186\nfreetype/truetype/hint.go:186: // Skip past bytecode until the next ELSE (if opcode == 0) or the\nwow, really? No direct branch in this instruction set?\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode220\nfreetype/truetype/hint.go:220: case opPUSHB000, opPUSHB001, opPUSHB010, opPUSHB011, opPUSHB100, opPUSHB101, opPUSHB110, opPUSHB111:\ncase PUSHB0, PUSHB1, ... PUSHB7: ?\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/hint.go#newcode222\nfreetype/truetype/hint.go:222: case opPUSHW000, opPUSHW001, opPUSHW010, opPUSHW011, opPUSHW100, opPUSHW101, opPUSHW110, opPUSHW111:\nditto\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/opcodes.go\nFile freetype/truetype/opcodes.go (right):\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/opcodes.go#newcode13\nfreetype/truetype/opcodes.go:13: opSVTCA0    = 0x00\nI understand the reason for the explicit constants, but you might want to consider using iota - and simply group the opcodes in sets of 8 or 16. It might still be easy to read:\n\nconst (\n   SVTCA0 = 0x00 + iota\n   SVTCA1\n   SPVTCA0\n   SPVTCA1\n   SFVTCA0\n   SFVTCA1\n   SPVTL0\n   SPVTL1\n   ...\n\n   opSRP0 = 0x10 + iota\n   opSRP1\n   ...\n)\n\nBy repeating the iota with respective offset you avoid getting off-by-one errors through the entire opcode set. An alternative grouping might be by function.\n\nJust a thought.\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/opcodes.go#newcode156\nfreetype/truetype/opcodes.go:156: op_0x8f     = 0x8f\nleave this away if they are not used?\n\nhttp://codereview.appspot.com/6354067/diff/3004/freetype/truetype/opcodes.go#newcode273\nfreetype/truetype/opcodes.go:273: // 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f\nI see - gofmt is not your friend in this case ... :-)",
			"disapproval": false,
			"date": "2012-07-03 17:02:36.490068",
			"approval": true
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6354067: freetype/truetype: if/else opcodes.",
	"created": "2012-07-03 12:25:56.183362",
	"patchsets": [
		1,
		2001,
		3004,
		1006
	],
	"modified": "2012-07-04 11:28:59.851780",
	"closed": true,
	"issue": 6354067
}