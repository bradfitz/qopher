{
	"description": "reflect: set GOMAXPROCS=1 in the malloc test\nOccasionally I see:\n--- FAIL: TestAllocations-15 (0.00 seconds)\n        all_test.go:1575: 6 mallocs after 100 iterations\nTested:\n$ go test -cpu=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 reflect",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-07-02 07:11:50.474791",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Aren't tests meant to run serially by default? Where are the\r\nallocations coming from?\r\n",
			"disapproval": false,
			"date": "2012-07-02 14:24:18.727973",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=de27de6b4f6a ***\n\nreflect: set GOMAXPROCS=1 in the malloc test\nOccasionally I see:\n--- FAIL: TestAllocations-15 (0.00 seconds)\n        all_test.go:1575: 6 mallocs after 100 iterations\nTested:\n$ go test -cpu=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 reflect\n\nR=golang-dev, dsymonds, r\nCC=golang-dev\nhttp://codereview.appspot.com/6354063",
			"disapproval": false,
			"date": "2012-07-02 16:55:35.529308",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test calls ReadMemStats(), which does stop the world, which creates new\r\nOS threads, which call mallocs during initialization.\r\n\r\n\r\n\r\nOn Mon, Jul 2, 2012 at 6:24 PM, David Symonds <dsymonds@golang.org> wrote:\r\n\r\n> Aren't tests meant to run serially by default? Where are the\r\n> allocations coming from?\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-02 14:56:26.482455",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand what's wrong with the existing code other than the\r\nnumber. Maybe s/5/10/ is all you need to do.\r\n\r\n\r\nOn Mon, Jul 2, 2012 at 7:56 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> The test calls ReadMemStats(), which does stop the world, which creates\r\n> new OS threads, which call mallocs during initialization.\r\n>\r\n>\r\n>\r\n> On Mon, Jul 2, 2012 at 6:24 PM, David Symonds <dsymonds@golang.org> wrote:\r\n>\r\n>> Aren't tests meant to run serially by default? Where are the\r\n>> allocations coming from?\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-02 14:57:25.079543",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's another possible option.\r\n\r\n\r\nOn Mon, Jul 2, 2012 at 6:57 PM, Rob 'Commander' Pike <r@golang.org> wrote:\r\n\r\n> I don't understand what's wrong with the existing code other than the\r\n> number. Maybe s/5/10/ is all you need to do.\r\n>\r\n>\r\n> On Mon, Jul 2, 2012 at 7:56 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>\r\n>> The test calls ReadMemStats(), which does stop the world, which creates\r\n>> new OS threads, which call mallocs during initialization.\r\n>>\r\n>>\r\n>>\r\n>> On Mon, Jul 2, 2012 at 6:24 PM, David Symonds <dsymonds@golang.org>wrote:\r\n>>\r\n>>> Aren't tests meant to run serially by default? Where are the\r\n>>> allocations coming from?\r\n>>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-02 15:22:28.014063",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/02 14:57:25, r wrote:\n> I don't understand what's wrong with the existing code other than the\n> number. Maybe s/5/10/ is all you need to do.\n\nDone. PTAL.\nCurrently new threads cause exactly 6 allocations.\n\n\n> On Mon, Jul 2, 2012 at 7:56 AM, Dmitry Vyukov <mailto:dvyukov@google.com> wrote:\n> \n> > The test calls ReadMemStats(), which does stop the world, which creates\n> > new OS threads, which call mallocs during initialization.\n> >\n> >\n> >\n> > On Mon, Jul 2, 2012 at 6:24 PM, David Symonds <mailto:dsymonds@golang.org> wrote:\n> >\n> >> Aren't tests meant to run serially by default? Where are the\n> >> allocations coming from?\n> >>\n> >\n> >",
			"disapproval": false,
			"date": "2012-07-02 16:08:12.745248",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with added comment\n\nhttp://codereview.appspot.com/6354063/diff/8001/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttp://codereview.appspot.com/6354063/diff/8001/src/pkg/reflect/all_test.go#newcode1574\nsrc/pkg/reflect/all_test.go:1574: if mallocs > 10 {\n// A new thread, one of which will be created if GOMAXPROCS>1, does 6 allocations.",
			"disapproval": false,
			"date": "2012-07-02 16:47:20.654401",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6354063: reflect: set GOMAXPROCS=1 in the malloc test",
	"created": "2012-07-02 07:09:51.303610",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		2006,
		10002
	],
	"modified": "2012-07-02 16:55:36.657171",
	"closed": true,
	"issue": 6354063
}