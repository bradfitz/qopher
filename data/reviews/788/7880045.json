{
	"description": "database/sql: Add time.Time -> string/[]byte/RawBytes conversion\n\nThis conversion is intentional. It behaves just like fmt.Print(time) since it makes use of the same String() method",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-24 04:57:20.649370",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Alternatively the fmt.Stringer interface could be used to solve this more general. But currently time.Time is the only driver.Value which makes use of it.",
			"disapproval": false,
			"date": "2013-03-24 04:58:56.118080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, but the time for API changes has passed. Please remind us about this\r\nCL after Go 1.1 has been released.\r\nhttp://golang.org/s/go11freeze\r\n",
			"disapproval": false,
			"date": "2013-03-25 20:27:53.124200",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Julien,\n\nNow that Go 1.1 is out, did you still want this to go in?",
			"disapproval": false,
			"date": "2013-06-05 22:25:28.197800",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not quite sure. The conversion from time.Time to other types should be \r\nadded somehow, but this approach lacks the other way from string/[]bytes -> \r\ntime.Time.\r\nMaybe it is better to give the driver control over this formatting via a \r\nTimeFormatter interface or something like that.\r\n\r\nDo you have a better idea?\r\n\r\nOn Thursday, June 6, 2013 12:25:28 AM UTC+2, Brad Fitzpatrick wrote:\r\n>\r\n> Julien, \r\n>\r\n> Now that Go 1.1 is out, did you still want this to go in? \r\n>\r\n>\r\n> https://codereview.appspot.com/7880045/ \r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-05 23:00:22.330220",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This bothers me. Why is time.Time special?",
			"disapproval": false,
			"date": "2013-06-10 17:39:16.417200",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"google@julienschmidt.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/10 17:39:16, rsc wrote:\n> This bothers me. Why is time.Time special?\n\nAccording to the SQL standard there are two valid formats for date values:\nWithout timezone: YYYY-MM-DD HH:MM:SS\nWith timezone: YYYY-MM-DD HH:MM:SS+offset (E.g. MySQL doesn't support timezones at all while time.Time is always localized)\n\nBut not all DBMS comply with this SQL standard. In fact, the database/sql package is not even just for SQL databases: \"Package sql provides a generic interface around SQL (or SQL-like) databases.\"\n\nThere a a few open questions:\n\ntime.Time -> string/ []byte / RawBytes:\n* Which format should be used? The \"Go format\" (what this CL would do) or the DBMS specific format? The latter would have the advantage that the output could be used as a input for another query again.\n\nstring etc. -> time.Time:\n* How does the database/sql package get the format necessary to parse the string(-ish) value?\n* How should values without timezone information be handled? Should an error be returned? Should UTC / the local timezone be used?",
			"disapproval": false,
			"date": "2013-06-10 19:07:20.668360",
			"approval": false
		}
	],
	"owner_email": "google@julienschmidt.com",
	"private": false,
	"base_url": "",
	"owner": "julienschmidt",
	"subject": "code review 7880045: database/sql: Add time.Time -> string/[]byte/RawBytes c...",
	"created": "2013-03-24 04:55:38.925170",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-06-10 19:07:21.078560",
	"closed": false,
	"issue": 7880045
}