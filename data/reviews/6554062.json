{
	"description": "cmd/[568]g: explain the purpose of various Reg fields.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h\nFile src/cmd/5g/opt.h (right):\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h#newcode52\nsrc/cmd/5g/opt.h:52: // A Reg is an auxiliary data structure used by the optimizer to\n// A Reg is a wrapper around a single Prog (one instruction) that holds\n// register optimization information while the optimizer runs.\n// r->prog is the instruction.\n// r->prog->regp points back to r.\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h#newcode57\nsrc/cmd/5g/opt.h:57: Bits\tset;  \t\t// which variables are set by this instruction.\ns/which //; s/are //\nin all 3 in all 3\n\ns/set/written/\nin all 3.\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h#newcode75\nsrc/cmd/5g/opt.h:75: Reg*\tp1;     \t// the Reg for the previous instruction.\ni suggest\n\np1 // predecessors of this instruction. p1 and then p2 linked through p2link.\np2\np2link\ns1 // successors of this instruction (at most two: s1 and s2).\ns2\nlink // next instruction in function code\nprog // actual instruction",
			"disapproval": false,
			"date": "2012-09-24 15:54:31.025700",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-21 18:58:09.885830",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some of the descriptions may be awkward or inaccurate, feel free to suggest better ones.",
			"disapproval": false,
			"date": "2012-09-21 18:58:38.309640",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e0a3e88ff2ae ***\n\ncmd/[568]g: explain the purpose of various Reg fields.\n\nR=golang-dev, rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/6554062\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h\nFile src/cmd/5g/opt.h (right):\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h#newcode52\nsrc/cmd/5g/opt.h:52: // A Reg is an auxiliary data structure used by the optimizer to\nOn 2012/09/24 15:54:31, rsc wrote:\n> // A Reg is a wrapper around a single Prog (one instruction) that holds\n> // register optimization information while the optimizer runs.\n> // r->prog is the instruction.\n> // r->prog->regp points back to r.\n\nDone.\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h#newcode57\nsrc/cmd/5g/opt.h:57: Bits\tset;  \t\t// which variables are set by this instruction.\nOn 2012/09/24 15:54:31, rsc wrote:\n> s/which //; s/are //\n> in all 3 in all 3\n> \n> s/set/written/\n> in all 3.\n> \n\nDone.\n\nhttp://codereview.appspot.com/6554062/diff/5001/src/cmd/5g/opt.h#newcode75\nsrc/cmd/5g/opt.h:75: Reg*\tp1;     \t// the Reg for the previous instruction.\nOn 2012/09/24 15:54:31, rsc wrote:\n> i suggest\n> \n> p1 // predecessors of this instruction. p1 and then p2 linked through p2link.\n> p2\n> p2link\n> s1 // successors of this instruction (at most two: s1 and s2).\n> s2\n> link // next instruction in function code\n> prog // actual instruction\n\nDone.",
			"disapproval": false,
			"date": "2012-09-24 18:55:17.373470",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6554062: cmd/[568]g: explain the purpose of various Reg fields.",
	"created": "2012-09-21 18:57:44.306840",
	"patchsets": [
		1,
		2001,
		5001,
		2002,
		2003
	],
	"modified": "2012-09-24 19:33:18.556530",
	"closed": true,
	"issue": 6554062
}