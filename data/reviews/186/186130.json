{
	"description": "Tweaked the getDisplay function so, that the x11 package works on OS X when x11 is installed.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nigeltao@golang.org"
	],
	"messages": [
		{
			"sender": "jan.hosang@gmail.com",
			"recipients": [
				"jan.hosang@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-01-13 15:30:32.915985",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jan.hosang@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/186130/diff/1003/1004\nFile src/pkg/exp/draw/x11/auth.go (right):\n\nhttp://codereview.appspot.com/186130/diff/1003/1004#newcode14\nsrc/pkg/exp/draw/x11/auth.go:14: // Reads the DISPLAY environment variable, and returns (\"12\", \"/tmp/foo/:\") from \"/tmp/foo/:12.0\". If a path is missing (like in \":12.0\") the default \"/tmp/.X11-unix/X\" is returned.\nIt looks odd to me how the two return values are in opposite order from how they appear in the full $DISPLAY.\n\nWhat does a $DISPLAY look like on OS X? How can we distinguish it from something like \"localhost:0\", for which the bit before the ':' is a host name, not a file path? Can we look for a '/'?\n\nWould a better API return (display, net, raddr string), the last two being the right things to pass to net.Dial? For example, if $DISPLAY is \":12.0\", it returns \"12\", \"unix\", \"/tmp/.X11-unix/X12\".",
			"disapproval": false,
			"date": "2010-01-14 12:28:59.213995",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jan.hosang@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2010-01-15 22:06:50.128432",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jan.hosang@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/186130/diff/1010/1011\nFile src/pkg/exp/draw/x11/auth.go (right):\n\nhttp://codereview.appspot.com/186130/diff/1010/1011#newcode17\nsrc/pkg/exp/draw/x11/auth.go:17: // If a path is missing (like in \":12.0\") the default \"/tmp/.X11-unix/X\" is used.\nI think it would help if the doc comment had examples of the different DISPLAY formats it could handle, and what the resultant (network, raddr, display) was. For example:\n:1.0\n/tmp/launch-123456/:0\nhostname:2.0\n\nhttp://codereview.appspot.com/186130/diff/1010/1011#newcode26\nsrc/pkg/exp/draw/x11/auth.go:26: if d[0] != ':' {\nI think you can switch on d[0], and have a case for ':', a case for '/', and a default case.\n\nhttp://codereview.appspot.com/186130/diff/1010/1011#newcode79\nsrc/pkg/exp/draw/x11/auth.go:79: func readAuthRetry(b []byte) (name, data string, err os.Error) {\nI don't think this retry loop belongs here. If the Xauthority cannot be found, then the xgb library should simply let that bubble up to the app, and the app can decide whether or not to retry, based on the os.Error.\n\nBesides, you return early if readAuth fails, which is probably the opposite of what you intended. If everything's fine, then you actually loop for 10 seconds (and read the Xauthority file 10 times) unnecessarily.\n\nBut really, I'd take the retries out.\n\nOn a separate note, Go constants aren't named in ALL_CAPS unlike C constants/macros. For examples, just grep src/pkg for \"const\".",
			"disapproval": false,
			"date": "2010-01-18 12:51:35.249669",
			"approval": false
		},
		{
			"sender": "jan.hosang@gmail.com",
			"recipients": [
				"jan.hosang@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/186130/diff/1003/1004\nFile src/pkg/exp/draw/x11/auth.go (right):\n\nhttp://codereview.appspot.com/186130/diff/1003/1004#newcode14\nsrc/pkg/exp/draw/x11/auth.go:14: // Reads the DISPLAY environment variable, and returns (\"12\", \"/tmp/foo/:\") from \"/tmp/foo/:12.0\". If a path is missing (like in \":12.0\") the default \"/tmp/.X11-unix/X\" is returned.\nFor me on OS X $DISPLAY is \"/tmp/launch-2iR8Bm/:0\" which is what I have to pass to net.Dial. I found that out by trial and error, so I don't really have the knowledge of how to interpret $DISPLAY.\n\nSo if $DISPLAY is like \"host:0.0\" what do we have to pass to net.Dial?\n\nI agree on your commends and I'm happy to apply the changes once I understand what to do :)",
			"disapproval": false,
			"date": "2010-01-14 12:47:54.791276",
			"approval": false
		},
		{
			"sender": "jan.hosang@gmail.com",
			"recipients": [
				"jan.hosang@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2010-01-14 21:45:30.433496",
			"approval": false
		}
	],
	"owner_email": "jan.hosang@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jhh",
	"subject": "code review 186130: Tweaked the getDisplay function so, that the x11 packag...",
	"created": "2010-01-13 15:22:35.453963",
	"patchsets": [
		1,
		6,
		1003,
		13,
		1010
	],
	"modified": "2010-01-14 21:45:30.433496",
	"closed": false,
	"issue": 186130
}