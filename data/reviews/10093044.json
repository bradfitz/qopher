{
	"description": "sync: improve race instrumentation of WaitGroup\nDo not synchronize Add(1) with Wait().\nImitate read on first Add(1) and write on Wait(),\nit allows to catch common misuses of WaitGroup:\n- Add() called in the additional goroutine itself\n- incorrect reuse of WaitGroup with multiple waiters",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-09 17:16:09.851570",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIf I understand the code, the CL description is wrong.  You're doing a read on the first Add, not a write.",
			"disapproval": false,
			"date": "2013-06-10 17:24:12.429260",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/10 17:24:12, iant wrote:\n> LGTM\n> \n> If I understand the code, the CL description is wrong.  You're doing a read on\n> the first Add, not a write.\n\nFixed CL description.\nI've used write in Add() until I discovered this weird usage of WaitGroup in httputil:\n\n 337 func TestNoRaceWaitGroupConcurrentAdd(t *testing.T) {\n 338         const P = 4\n 339         waiting := make(chan bool, P)\n 340         var wg sync.WaitGroup\n 341         for p := 0; p < P; p++ {\n 342                 go func() {\n 343                         wg.Add(1)\n 344                         waiting <- true\n 345                         wg.Done()\n 346                 }()\n 347         }\n 348         for p := 0; p < P; p++ {\n 349                 <-waiting\n 350         }\n 351         wg.Wait()\n 352 }",
			"disapproval": false,
			"date": "2013-06-10 18:34:28.944440",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=88e3ebf00c59 ***\n\nsync: improve race instrumentation of WaitGroup\nDo not synchronize Add(1) with Wait().\nImitate read on first Add(1) and write on Wait(),\nit allows to catch common misuses of WaitGroup:\n- Add() called in the additional goroutine itself\n- incorrect reuse of WaitGroup with multiple waiters\n\nR=golang-dev, iant\nCC=golang-dev\nhttps://codereview.appspot.com/10093044",
			"disapproval": false,
			"date": "2013-06-10 18:39:11.606000",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10093044: sync: improve race instrumentation of WaitGroup",
	"created": "2013-06-06 20:50:43.805250",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		10001,
		14002,
		15001
	],
	"modified": "2013-06-12 14:15:11.870000",
	"closed": true,
	"issue": 10093044
}