{
	"description": "bytes: Applied KMP algorithm for bytes count.\n\nRelated discussion thread: https://groups.google.com/group/golang-nuts/browse_thread/thread/37b126bd62a7dfcb",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "lamuguo@gmail.com",
			"recipients": [
				"lamuguo@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi there,\n\nI modified some code today, looks the result isn't that promising. The result is attached in another CL: http://codereview.appspot.com/5554080, I used \"<MaxNInArray>.log\" as the file name. (For example, 5.log means MaxNInArray = 5 in the benchmark test.\n\nBytes \"s\" and \"sep\" are randomly generated, that means if MaxNInArray increases, the possibility of \"sep\" in \"s\" is decreased. So, \"sep == s\" don't need to test a lot of chars. (In most cases, 2 chars are enough) So, most of the result can't provide promising result that KMP can provide better result for bytes.Count().\n\nThe case I investigated yesterday is a misleading one, it tries bytes.Count(\"0000...0x\", \"000000x\"), which is a worst case for \"sep == s\", and we can see about 4-times speed-up there.\n\nBut anyway, the result is interesting, maybe we can involve Knuth for discussing... :-)\n\nBest Regards,\nXiaofeng\n\nOn 2012/01/20 19:41:00, Xiaofeng Guo wrote:\n> Hi there,\n> \n> Sorry to bother. I don't think the CL is sophisticated for reviewing,\n> still need some changes. But have some questions related to the CL:\n> \n> - Why benchmarkCount() doesn't work as I expected? Looks the Count()\n> code is optimized out. I need them to get a k for KMP, like below:\n>   if (len(sep) < k) {\n>     if s[i:i+len(sep)] == sep {\n>         //...\n>     }\n>   } else {\n>       CountKMP(...)\n>   }\n> \n> And below is the adjusted result similar to I posted yesterday. The\n> result for BenchmarkCountSepSize<i>() is constant as I mentioned\n> above:\n> \n> $ gotest -bench=BenchmarkCount\n> rm -f _test/bytes.a\n> rm -f _test/bytes.agopack grc _test/bytes.a _gotest_.6 asm_amd64.6\n> PASSbytes_test.BenchmarkCount32      5000000               484 ns/op\n>        66.04 MB/s\n> bytes_test.BenchmarkCount4K        50000             40479 ns/op\n>   101.19 MB/sbytes_test.BenchmarkCount4M           50\n> 41046900 ns/op         102.18 MB/sbytes_test.BenchmarkCount64M\n>   5         662377800 ns/op         101.32 MB/s\n> bytes_test.BenchmarkCountOld32   5000000               746 ns/op\n>    42.89 MB/s\n> bytes_test.BenchmarkCountOld4K     10000            115871 ns/op\n>    35.35 MB/s\n> bytes_test.BenchmarkCountOld4M        20         118981700 ns/op\n>    35.25 MB/s\n> bytes_test.BenchmarkCountOld64M        1        1902782000 ns/op\n>    35.27 MB/s\n> bytes_test.BenchmarkCountEasy32 10000000               237 ns/op\n>   134.90 MB/s\n> bytes_test.BenchmarkCountEasy4K   500000              7156 ns/op\n>   572.33 MB/s\n> bytes_test.BenchmarkCountEasy4M      500           7171258 ns/op\n>   584.88 MB/s\n> bytes_test.BenchmarkCountEasy64M              20         115735250\n> ns/op         579.85 MB/s\n> bytes_test.BenchmarkCountOldEasy32      50000000                68.7\n> ns/op       465.97 MB/s\n> bytes_test.BenchmarkCountOldEasy4K       5000000               336\n> ns/op        12173.58 MB/s\n> bytes_test.BenchmarkCountOldEasy4M         10000            285756\n> ns/op        14677.91 MB/s\n> bytes_test.BenchmarkCountOldEasy64M          500           7516010\n> ns/op        8928.79 MB/s\n> bytes_test.BenchmarkCountSepSize1            500           3528376 ns/op\n> bytes_test.BenchmarkCountSepSize2            500           4117214 ns/op\n> bytes_test.BenchmarkCountSepSize3            500           4095292 ns/op\n> bytes_test.BenchmarkCountSepSize4            500           4088852 ns/op\n> bytes_test.BenchmarkCountSepSize5            500           4091520 ns/op\n> bytes_test.BenchmarkCountSepSize6            500           4088948 ns/op\n> bytes_test.BenchmarkCountSepSize7            500           4091320 ns/op\n> bytes_test.BenchmarkCountSepSize8            500           4098144 ns/op\n> bytes_test.BenchmarkCountSepSize9            500           4088538 ns/op\n> bytes_test.BenchmarkCountSepSize10           500           4089418 ns/op\n> \n> Best Regards,\n> Xiaofeng\n> \n> On Fri, Jan 20, 2012 at 11:30 AM,  <mailto:lamuguo@gmail.com> wrote:\n> > Reviewers: http://golang-dev_googlegroups.com,\n> >\n> > Message:\n> > Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com,\n> > mailto:golang-nuts@googlegroups.com),\n> >\n> > I'd like you to review this change to\n> > https://go.googlecode.com/hg/\n> >\n> >\n> > Description:\n> > bytes: Applied KMP algorithm for bytes count.\n> >\n> > Related discussion thread:\n> >\n> https://groups.google.com/group/golang-nuts/browse_thread/thread/37b126bd62a7dfcb\n> >\n> > Please review this at http://codereview.appspot.com/5536082/\n> >\n> > Affected files:\n> > &nbsp;M src/pkg/bytes/bytes.go\n> > &nbsp;M src/pkg/bytes/bytes_test.go\n> >\n> >",
			"disapproval": false,
			"date": "2012-01-21 05:41:28.962211",
			"approval": false
		},
		{
			"sender": "lamuguo@gmail.com",
			"recipients": [
				"lamuguo@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"golang-nuts@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, golang-nuts@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-20 19:30:14.045173",
			"approval": false
		},
		{
			"sender": "lamuguo@gmail.com",
			"recipients": [
				"lamuguo@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"golang-nuts@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, golang-nuts@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-20 19:34:53.864100",
			"approval": false
		},
		{
			"sender": "lamuguo@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi there,\n\nSorry to bother. I don't think the CL is sophisticated for reviewing,\nstill need some changes. But have some questions related to the CL:\n\n- Why benchmarkCount() doesn't work as I expected? Looks the Count()\ncode is optimized out. I need them to get a k for KMP, like below:\n  if (len(sep) < k) {\n    if s[i:i+len(sep)] == sep {\n        //...\n    }\n  } else {\n      CountKMP(...)\n  }\n\nAnd below is the adjusted result similar to I posted yesterday. The\nresult for BenchmarkCountSepSize<i>() is constant as I mentioned\nabove:\n\n$ gotest -bench=BenchmarkCount\nrm -f _test/bytes.a\nrm -f _test/bytes.agopack grc _test/bytes.a _gotest_.6 asm_amd64.6\nPASSbytes_test.BenchmarkCount32      5000000               484 ns/op\n       66.04 MB/s\nbytes_test.BenchmarkCount4K        50000             40479 ns/op\n  101.19 MB/sbytes_test.BenchmarkCount4M           50\n41046900 ns/op         102.18 MB/sbytes_test.BenchmarkCount64M\n  5         662377800 ns/op         101.32 MB/s\nbytes_test.BenchmarkCountOld32   5000000               746 ns/op\n   42.89 MB/s\nbytes_test.BenchmarkCountOld4K     10000            115871 ns/op\n   35.35 MB/s\nbytes_test.BenchmarkCountOld4M        20         118981700 ns/op\n   35.25 MB/s\nbytes_test.BenchmarkCountOld64M        1        1902782000 ns/op\n   35.27 MB/s\nbytes_test.BenchmarkCountEasy32 10000000               237 ns/op\n  134.90 MB/s\nbytes_test.BenchmarkCountEasy4K   500000              7156 ns/op\n  572.33 MB/s\nbytes_test.BenchmarkCountEasy4M      500           7171258 ns/op\n  584.88 MB/s\nbytes_test.BenchmarkCountEasy64M              20         115735250\nns/op         579.85 MB/s\nbytes_test.BenchmarkCountOldEasy32      50000000                68.7\nns/op       465.97 MB/s\nbytes_test.BenchmarkCountOldEasy4K       5000000               336\nns/op        12173.58 MB/s\nbytes_test.BenchmarkCountOldEasy4M         10000            285756\nns/op        14677.91 MB/s\nbytes_test.BenchmarkCountOldEasy64M          500           7516010\nns/op        8928.79 MB/s\nbytes_test.BenchmarkCountSepSize1            500           3528376 ns/op\nbytes_test.BenchmarkCountSepSize2            500           4117214 ns/op\nbytes_test.BenchmarkCountSepSize3            500           4095292 ns/op\nbytes_test.BenchmarkCountSepSize4            500           4088852 ns/op\nbytes_test.BenchmarkCountSepSize5            500           4091520 ns/op\nbytes_test.BenchmarkCountSepSize6            500           4088948 ns/op\nbytes_test.BenchmarkCountSepSize7            500           4091320 ns/op\nbytes_test.BenchmarkCountSepSize8            500           4098144 ns/op\nbytes_test.BenchmarkCountSepSize9            500           4088538 ns/op\nbytes_test.BenchmarkCountSepSize10           500           4089418 ns/op\n\nBest Regards,\nXiaofeng\n\nOn Fri, Jan 20, 2012 at 11:30 AM,  <lamuguo@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n> golang-nuts@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> bytes: Applied KMP algorithm for bytes count.\n>\n> Related discussion thread:\n> https://groups.google.com/group/golang-nuts/browse_thread/thread/37b126bd62a7dfcb\n>\n> Please review this at http://codereview.appspot.com/5536082/\n>\n> Affected files:\n> \u00a0M src/pkg/bytes/bytes.go\n> \u00a0M src/pkg/bytes/bytes_test.go\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-20 19:41:00.403206",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi.\n\nI think we should leave bytes.Count alone for now.\nThe algorithm can be made faster in some cases,\nbut they are not that common (usually the substring\nbeing counted is very short).  Adding the allocation\nhere slows down those cases and changes the\nperformance profile of bytes.Count in an important way.\nAnd if the substring is long, that []int is going to be\nvery large, so the memory cost will be significant.\n\nI encourage you to put your KMP code into an\nexternal repository that can be installed using goinstall\n(or, equivalently, the new 'go get').\n\nIn a separate package, it would be appropriate to have\na separate type representing the pre-computed []int,\nand that data could be reused for multiple searches.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-24 20:41:22.640589",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lamuguo@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:53:53.064742",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"lamuguo@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-06-28 18:21:52.095610",
			"approval": false
		}
	],
	"owner_email": "lamuguo@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Xiaofeng Guo",
	"subject": "code review 5536082: bytes: Applied KMP algorithm for bytes count.",
	"created": "2012-01-20 19:15:20.367232",
	"patchsets": [
		1,
		2001,
		5001,
		2006,
		6002,
		7001
	],
	"modified": "2013-06-28 18:21:52.199500",
	"closed": false,
	"issue": 5536082
}