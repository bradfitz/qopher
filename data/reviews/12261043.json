{
	"description": "os: Made Readdir() work as documented\n\nReaddir's result should never contain a nil.\n\nFixes issue 5960.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-01 15:26:48.698390",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 1, 2013 at 8:26 AM, <pieter@binky.org.uk> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> os: Made Readdir() work as documented\r\n>\r\n> Readdir's result should never contain a nil and, on error, should return\r\n> all files read so far.\r\n> If anyone has a clever idea for a test that makes Lstat() fail on a\r\n> filename coming from Readdirnames, I'm all ears.\r\n\r\n\r\nOthers might object to the extra noise, but I often do stuff like:\r\n\r\n// testLstat is used instead of Lstat in tests if non-nil.\r\nvar testLstat func(string) (FileInfo, error)\r\n\r\nfunc .... () {\r\n     lstat := Lstat\r\n     if testLstat != nil {\r\n            lstat = testLstat\r\n     }\r\n     ....\r\n    fip, lerr := lstat(dirname + filename)\r\n    ....\r\n}\r\n\r\nThen in your foo_test.go, temporarily re-assign a lstat that injects\r\nfailures when you'd like.\r\n",
			"disapproval": false,
			"date": "2013-08-01 21:40:40.305690",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12261043/diff/5001/src/pkg/os/file_unix.go\nFile src/pkg/os/file_unix.go (right):\n\nhttps://codereview.appspot.com/12261043/diff/5001/src/pkg/os/file_unix.go#newcode165\nsrc/pkg/os/file_unix.go:165: // When an error occurs, return the files read\nThe goal of the original code was to return an array with at least a name.\n\nfi[i] = &fileStat{name: filename}\nif err == nil {\n    err = lerr\n}",
			"disapproval": false,
			"date": "2013-08-01 17:13:59.699010",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12261043/diff/5001/src/pkg/os/file_unix.go\nFile src/pkg/os/file_unix.go (right):\n\nhttps://codereview.appspot.com/12261043/diff/5001/src/pkg/os/file_unix.go#newcode165\nsrc/pkg/os/file_unix.go:165: // When an error occurs, return the files read\nOn 2013/08/01 17:13:59, rsc wrote:\n> The goal of the original code was to return an array with at least a name.\n> \n> fi[i] = &fileStat{name: filename}\n> if err == nil {\n>     err = lerr\n> }\n\nIn that case, the documentation should be updated. Right now it only mentions \"If it encounters an error before the end of the directory, Readdir returns the FileInfo read until that point and a non-nil error.\"",
			"disapproval": false,
			"date": "2013-08-01 17:24:42.587500",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Windows and Plan 9, when an error occurs only the files read up to that point are returned, along with the error.\n\nLooks like only on Unix are FileInfos returned with just the name.\n\nIf you ask me, the correct course of action is to fix Unix to be in line with the other two implementations, and the documentation.\n\nAlso, it's strange that only Plan 9 puts its readdir implementation in dir_plan9.go, while the other two are in file_unix.go and file_windows.go.",
			"disapproval": false,
			"date": "2013-08-01 19:09:03.010140",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 21:40:40, bradfitz wrote:\n> On Thu, Aug 1, 2013 at 8:26 AM, <mailto:pieter@binky.org.uk> wrote:\n> \n> > Reviewers: golang-dev1,\n> >\n> > Message:\n> > Hello mailto:golang-dev@googlegroups.com,\n> >\n> > I'd like you to review this change to\n> > https://code.google.com/p/go\n> >\n> >\n> > Description:\n> > os: Made Readdir() work as documented\n> >\n> > Readdir's result should never contain a nil and, on error, should return\n> > all files read so far.\n> > If anyone has a clever idea for a test that makes Lstat() fail on a\n> > filename coming from Readdirnames, I'm all ears.\n> \n> \n> Others might object to the extra noise, but I often do stuff like:\n> \n> // testLstat is used instead of Lstat in tests if non-nil.\n> var testLstat func(string) (FileInfo, error)\n> \n> func .... () {\n>      lstat := Lstat\n>      if testLstat != nil {\n>             lstat = testLstat\n>      }\n>      ....\n>     fip, lerr := lstat(dirname + filename)\n>     ....\n> }\n> \n> Then in your foo_test.go, temporarily re-assign a lstat that injects\n> failures when you'd like.\n\nYeah, mocking Lstat was the way to go. Can't really put that in the tree though.",
			"disapproval": false,
			"date": "2013-08-01 22:29:27.577750",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 22:38:43, bradfitz wrote:\n\n> Why not?\n> \n> We do elsewhere. Not too often within the Go standard library, but\n> e.g. net/dial_gen.go has var testingIssue5349 bool.  Probably a few other\n> places too.\n> \n> It's more common within Google-internal Go libraries/tests.\n\nWell, in that case I'll sort out some tests tomorrow :) Thanks Brad.\n\nAny idea on the issue at hand, about what to do about Unix' readdir()?",
			"disapproval": false,
			"date": "2013-08-01 22:43:16.016230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 1, 2013 at 3:29 PM, <pieter@binky.org.uk> wrote:\r\n\r\n> On 2013/08/01 21:40:40, bradfitz wrote:\r\n>\r\n>  On Thu, Aug 1, 2013 at 8:26 AM, <mailto:pieter@binky.org.uk> wrote:\r\n>>\r\n>\r\n>  > Reviewers: golang-dev1,\r\n>> >\r\n>> > Message:\r\n>> > Hello mailto:golang-dev@**googlegroups.com<golang-dev@googlegroups.com>\r\n>> ,\r\n>>\r\n>> >\r\n>> > I'd like you to review this change to\r\n>> > https://code.google.com/p/go\r\n>> >\r\n>> >\r\n>> > Description:\r\n>> > os: Made Readdir() work as documented\r\n>> >\r\n>> > Readdir's result should never contain a nil and, on error, should\r\n>>\r\n> return\r\n>\r\n>> > all files read so far.\r\n>> > If anyone has a clever idea for a test that makes Lstat() fail on a\r\n>> > filename coming from Readdirnames, I'm all ears.\r\n>>\r\n>\r\n>\r\n>  Others might object to the extra noise, but I often do stuff like:\r\n>>\r\n>\r\n>  // testLstat is used instead of Lstat in tests if non-nil.\r\n>> var testLstat func(string) (FileInfo, error)\r\n>>\r\n>\r\n>  func .... () {\r\n>>       lstat := Lstat\r\n>>       if testLstat != nil {\r\n>>              lstat = testLstat\r\n>>       }\r\n>>       ....\r\n>>      fip, lerr := lstat(dirname + filename)\r\n>>      ....\r\n>> }\r\n>>\r\n>\r\n>  Then in your foo_test.go, temporarily re-assign a lstat that injects\r\n>> failures when you'd like.\r\n>>\r\n>\r\n> Yeah, mocking Lstat was the way to go. Can't really put that in the tree\r\n> though.\r\n\r\n\r\nWhy not?\r\n\r\nWe do elsewhere. Not too often within the Go standard library, but\r\ne.g. net/dial_gen.go has var testingIssue5349 bool.  Probably a few other\r\nplaces too.\r\n\r\nIt's more common within Google-internal Go libraries/tests.\r\n",
			"disapproval": false,
			"date": "2013-08-01 22:38:43.791540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12261043/diff/5001/src/pkg/os/file_unix.go\nFile src/pkg/os/file_unix.go (right):\n\nhttps://codereview.appspot.com/12261043/diff/5001/src/pkg/os/file_unix.go#newcode165\nsrc/pkg/os/file_unix.go:165: // When an error occurs, return the files read\nOn 2013/08/01 17:24:42, peted wrote:\n> On 2013/08/01 17:13:59, rsc wrote:\n> > The goal of the original code was to return an array with at least a name.\n> > \n> > fi[i] = &fileStat{name: filename}\n> > if err == nil {\n> >     err = lerr\n> > }\n> \n> In that case, the documentation should be updated. Right now it only mentions\n> \"If it encounters an error before the end of the directory, Readdir returns the\n> FileInfo read until that point and a non-nil error.\"\n\nThe documentation is correct as it is. The reading of the directory has not failed, just the Lstat of one of the things in the directory.",
			"disapproval": false,
			"date": "2013-08-02 17:08:29.047660",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/02 17:08:29, rsc wrote:\n> The documentation is correct as it is. The reading of the directory has not\n> failed, just the Lstat of one of the things in the directory.\n\nThen so it shall remain. Tonight I'll see about adding some tests.",
			"disapproval": false,
			"date": "2013-08-02 19:00:31.898900",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. The check made more sense when we used to call Stat on each\r\ndirectory entry; Stat can fail if there is a bogus symlink. Lstat can only\r\nfail if the file is removed between the Readdirnames and the Lstat.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-08-02 19:38:24.583260",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12261043/diff/22001/src/pkg/os/file_unix.go\nFile src/pkg/os/file_unix.go (right):\n\nhttps://codereview.appspot.com/12261043/diff/22001/src/pkg/os/file_unix.go#newcode152\nsrc/pkg/os/file_unix.go:152: var mockLstat = Lstat\nI don't like this name.\n\nThis isn't a mock.  It's a variable.\n\nThe value you assign to this variable in your test code will be the fake, mock, or stub.  But it isn't yet.\n\nI would just name it \"lstat\", with a comment:\n\n// lstat is overridden in tests.\nvar lstat = Lstat",
			"disapproval": false,
			"date": "2013-08-07 22:33:35.405420",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/02 19:38:24, rsc wrote:\n> Thanks. The check made more sense when we used to call Stat on each\n> directory entry; Stat can fail if there is a bogus symlink. Lstat can only\n> fail if the file is removed between the Readdirnames and the Lstat.\n> \n> Russ\n\nSorry for the delay, I kept forgetting it/putting it off. I've added a test.",
			"disapproval": false,
			"date": "2013-08-07 22:27:55.714760",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/12261043/diff/22001/src/pkg/os/file_unix.go\nFile src/pkg/os/file_unix.go (right):\n\nhttps://codereview.appspot.com/12261043/diff/22001/src/pkg/os/file_unix.go#newcode152\nsrc/pkg/os/file_unix.go:152: var mockLstat = Lstat\nOn 2013/08/07 22:33:35, bradfitz wrote:\n> I don't like this name.\n> \n> This isn't a mock.  It's a variable.\n> \n> The value you assign to this variable in your test code will be the fake, mock,\n> or stub.  But it isn't yet.\n> \n> I would just name it \"lstat\", with a comment:\n> \n> // lstat is overridden in tests.\n> var lstat = Lstat\n\nDone. I wasn't sure what to name is in export_test, I hope you like LstatP.",
			"disapproval": false,
			"date": "2013-08-07 22:38:58.140620",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go\nFile src/pkg/os/os_unix_test.go (right):\n\nhttps://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go#newcode31\nsrc/pkg/os/os_unix_test.go:31: // Chown is not supported under Plan 9.\nplease send this in a separate CL.  It has nothing to do with this readdir or issue 5960.\n\nhttps://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go#newcode96\nsrc/pkg/os/os_unix_test.go:96: t.Fatalf(\"Expected Readdir to return ErrInvalid, got %s\", err)\nconvention nit: use %v for things of type error.\n\nhttps://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go#newcode103\nsrc/pkg/os/os_unix_test.go:103: t.Fatalf(\"Expected Readdir for %s should not contain Sys\", failfile)\nthese two can probably be Errorf.  the test can proceed without crashing.",
			"disapproval": false,
			"date": "2013-08-07 23:39:20.088130",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll get on this when I get home from work.\n\nhttps://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go\nFile src/pkg/os/os_unix_test.go (right):\n\nhttps://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go#newcode31\nsrc/pkg/os/os_unix_test.go:31: // Chown is not supported under Plan 9.\nOn 2013/08/07 23:39:20, bradfitz wrote:\n> please send this in a separate CL.  It has nothing to do with this readdir or\n> issue 5960.\n\nI'll do that when this one's committed.\n\nhttps://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go#newcode96\nsrc/pkg/os/os_unix_test.go:96: t.Fatalf(\"Expected Readdir to return ErrInvalid, got %s\", err)\nOn 2013/08/07 23:39:20, bradfitz wrote:\n> convention nit: use %v for things of type error.\n\nHeh. I actually thought about this, and peeked at a different fmt to see how you guys did it. I found line 53 of this very file, which uses %s.\n\nhttps://codereview.appspot.com/12261043/diff/26001/src/pkg/os/os_unix_test.go#newcode103\nsrc/pkg/os/os_unix_test.go:103: t.Fatalf(\"Expected Readdir for %s should not contain Sys\", failfile)\nOn 2013/08/07 23:39:20, bradfitz wrote:\n> these two can probably be Errorf.  the test can proceed without crashing.\n\nWill do.",
			"disapproval": false,
			"date": "2013-08-08 08:06:24.609320",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-08 14:05:55.706870",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Thu, Aug 8, 2013 at 7:05 AM, <pieter@binky.org.uk> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, rsc@golang.org, bradfitz@golang.org\r\n> (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/12261043/<https://codereview.appspot.com/12261043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-08 17:42:16.201480",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=100a10512ea4 ***\n\nos: make Readdir work as documented\n\nReaddir's result should never contain a nil.\n\nFixes issue 5960.\n\nR=golang-dev, rsc, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12261043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-08-08 17:44:05.568510",
			"approval": false
		}
	],
	"owner_email": "pieter@binky.org.uk",
	"private": false,
	"base_url": "",
	"owner": "peted",
	"subject": "code review 12261043: os: Made Readdir() work as documented",
	"created": "2013-08-01 15:25:16.546630",
	"patchsets": [
		1,
		3001,
		5001,
		15001,
		22001,
		26001,
		32001
	],
	"modified": "2013-08-08 19:39:01.892470",
	"closed": true,
	"issue": 12261043
}