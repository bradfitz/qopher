{
	"description": "gotest: clean up GOOS= pollution\n\nClean up gotest by eliminating GOOS=windows.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please keep the filepath change but drop the extra files.\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/Makefile\nFile src/cmd/gotest/Makefile (right):\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/Makefile#newcode12\nsrc/cmd/gotest/Makefile:12: GOFILES_darwin=\\\nThis is a lot of work to avoid one if statement.\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/gotest.go\nFile src/cmd/gotest/gotest.go (left):\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/gotest.go#oldcode279\nsrc/cmd/gotest/gotest.go:279: if runtime.GOOS == \"windows\" && command == \"gomake\" {\nI think this is fine to leave here.  It will go away eventually on its own\n(once we stop invoking make to do our work).\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/gotest.go\nFile src/cmd/gotest/gotest.go (right):\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/gotest.go#newcode89\nsrc/cmd/gotest/gotest.go:89: runTestWithArgs(\".\" + string(filepath.Separator) + O + \".out\")\nNice change.",
			"disapproval": false,
			"date": "2011-06-27 20:04:23.902852",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org, vcc.163@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-26 05:07:19.721271",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/27 04:29:13, vcc wrote:\n> \n> I try to fixes the problem is gotest run fail on my working windows amd64 port.\n> \n\nWell, you should fix it in your \"working windows amd64 port\", not in main go repo. Unless we could reproduce it here, of course.\n\nI think all that extra code is not needed. Please, convince me otherwise.\n\nAlex",
			"disapproval": false,
			"date": "2011-06-27 04:36:42.189825",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't see what are you trying to fix? Do you have an issue to demonstrate your problem.\n\nIf you're trying to simplify the code, then I can't see how adding all that code makes things simpler. Especially in the light that gomake bash script will get replaced by a binary gomake program soon, and existing\n\nif runtime.GOOS == \"windows\" && command == \"gomake\" {\n\nwill goo away anyway.\n\nAlex\n\nhttp://codereview.appspot.com/4627064/diff/5001/src/cmd/gotest/gotest.go\nFile src/cmd/gotest/gotest.go (right):\n\nhttp://codereview.appspot.com/4627064/diff/5001/src/cmd/gotest/gotest.go#newcode89\nsrc/cmd/gotest/gotest.go:89: runTestWithArgs(\".\" + string(os.PathSeparator) + O + \".out\")\ns/os.PathSeparator/filepath.Separator/\n\nfilepath.Separator is used everywhere else, not os.PathSeparator.",
			"disapproval": false,
			"date": "2011-06-26 07:36:12.133052",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/26 23:20:35, peterGo wrote:\n> \n> This CL incorporates a fix for the bug identified by vcc, which prevents gotest\n> from running a binary executable file on Windows. ...\n\nDo you have an issue to demonstrate the problem? I'm not aware of any problem. I'm happy to fix, but I would like to know what we're fixing.\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2011-06-26 23:33:58.234368",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nOn 2011/06/26 07:36:12, brainman wrote:\n> I don't see what are you trying to fix? Do you have an issue to demonstrate your\n> problem.\n\nReading the core Go code, it's clear that the the core Go developers have experience writing portable code. They provided several mechanisms to help make writing portable Go code easier. They avoided sprinkling Go code with 'if GOOS=' statements, a well-known pitfall. Otherwise, Go code readability and maintainability would quickly crumble.\n\nIf you step back from the gotest code and ask what the real problem is, it's that Unix-like OSs have a more complex model for executable files than Windows. Files can be marked as executable and the shell peeks into executable files to determine how to run them. Therefore, for Windows, portable programs need to be more specific about what they want to execute. For example, distinguishing between a binary executable program and a shell executable script.\n\nThis CL incorporates a fix for the bug identified by vcc, which prevents gotest from running a binary executable file on Windows. His original fix added another two 'if GOOS=' statements.\n\nThis CL also replaces all the 'if GOOS=' statements with standard Go mechanisms for OS portability.\n\nWhatever goinstall does, which is still speculative, this CL is necessary and useful. The gotest program still needs to execute binary executable files on Windows.\n\nYou should always leave code better than you found it. It would be a shame to squander Rob's excellent code.\n \nPeter\n\nhttp://codereview.appspot.com/4627064/diff/5001/src/cmd/gotest/gotest.go\nFile src/cmd/gotest/gotest.go (right):\n\nhttp://codereview.appspot.com/4627064/diff/5001/src/cmd/gotest/gotest.go#newcode89\nsrc/cmd/gotest/gotest.go:89: runTestWithArgs(\".\" + string(os.PathSeparator) + O + \".out\")\nOn 2011/06/26 07:36:12, brainman wrote:\n> s/os.PathSeparator/filepath.Separator/\n> \n> filepath.Separator is used everywhere else, not os.PathSeparator.\n\nDone.",
			"disapproval": false,
			"date": "2011-06-26 23:20:35.511725",
			"approval": false
		},
		{
			"sender": "vcc.163@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "2011/6/27  <alex.brainman@gmail.com>:\n> On 2011/06/26 23:20:35, peterGo wrote:\n>\n>> This CL incorporates a fix for the bug identified by vcc, which\n>\n> prevents gotest\n>>\n>> from running a binary executable file on Windows. ...\n>\n> Do you have an issue to demonstrate the problem? I'm not aware of any\n> problem. I'm happy to fix, but I would like to know what we're fixing.\n\nI try to fixes the problem is gotest run fail on my working windows amd64 port.\n\n--\nWei guangjing\n",
			"disapproval": false,
			"date": "2011-06-27 04:29:13.037608",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org, vcc.163@gmail.com, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-26 23:24:15.803874",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Jun 26, 2011, at Jun 26 - 6:20 PM, go.peter.90@gmail.com wrote:\n> \n> If you step back from the gotest code and ask what the real problem is,\n> it's that Unix-like OSs have a more complex model for executable files\n> than Windows. Files can be marked as executable and the shell peeks into\n> executable files to determine how to run them. Therefore, for Windows,\n> portable programs need to be more specific about what they want to\n> execute. For example, distinguishing between a binary executable program\n> and a shell executable script.\n> \n> \n> Peter\n> \n\nYou can't call a script file directly, e.g. within an executable,\nunder Windows because it doesn't understand the \"#!\" magic number,\nnor does the Windows cmd shell. The workaround on Windows is to call\nbash, passing the script file as an argument.    \n\nI'm guessing that when gomake becomes an executable the shell will\nbecome less, or not at all, relevant.\n\n-joe \n\n   \n\n",
			"disapproval": false,
			"date": "2011-06-27 03:01:04.882157",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "with the renaming, LGTM.  i'll leave it to alex.brainman to decide whether it solves a real problem and, if so, to check it in.\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/gotest.go\nFile src/cmd/gotest/gotest.go (right):\n\nhttp://codereview.appspot.com/4627064/diff/10001/src/cmd/gotest/gotest.go#newcode250\nsrc/cmd/gotest/gotest.go:250: s := doRun(runScriptArgv(argv), true)\nthe 'run' makes it sound like it runs the command, but it's just building arguments.\nscriptArgv and binaryArgv would be better names",
			"disapproval": false,
			"date": "2011-06-27 04:32:55.262997",
			"approval": true
		},
		{
			"sender": "vcc.163@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "2011/6/27  <alex.brainman@gmail.com>:\n> On 2011/06/27 04:29:13, vcc wrote:\n>\n>> I try to fixes the problem is gotest run fail on my working windows\n>\n> amd64 port.\n>\n>\n> Well, you should fix it in your \"working windows amd64 port\", not in\n> main go repo. Unless we could reproduce it here, of course.\n>\n> I think all that extra code is not needed. Please, convince me\n> otherwise.\n\nDon't need this change now, all test in pkg is PASS for windows amd64\nport now. sorry to waste your time.\n\nWei guangjing\n\n>\n> http://codereview.appspot.com/4627064/\n>\n",
			"disapproval": false,
			"date": "2011-07-14 06:09:53.483893",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"r@golang.org",
				"vcc.163@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/07/14 06:09:53, vcc wrote:\n> \n> Don't need this change now, all test in pkg is PASS for windows amd64\n> port now. ...\n> \n\nVery nice. Congrats. I am shocked how few changes were needed!\n\nAlex",
			"disapproval": false,
			"date": "2011-07-14 06:19:34.473980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:53:25.652989",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 07:16:21.294050",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:28:13.132900",
			"approval": false
		}
	],
	"owner_email": "go.peter.90@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "peterGo",
	"subject": "code review 4627064: gotest: clean up GOOS= pollution",
	"created": "2011-06-26 04:58:25.767787",
	"patchsets": [
		1,
		2001,
		5001,
		10001
	],
	"modified": "2013-07-20 21:28:13.249260",
	"closed": false,
	"issue": 4627064
}