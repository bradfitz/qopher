{
	"description": "cmd/go: pass -intgosize to SWIG\n\nswig >= 2.0.9 requires the size of int values to be passed via a command line flag. Should swig complain about the -intgosize not being supported, then alert the user to their outdated version of swig.\n\nFixes issue 4756.",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 16, 2013 at 5:31 AM, Ian Lance Taylor <iant@golang.org> wrote:\r\n\r\n> On Fri, Feb 15, 2013 at 12:09 PM, minux <minux.ma@gmail.com> wrote:\r\n> >\r\n> > Ian, is it still possible to add the required flag to gcc 4.8 (we cannot\r\n> let\r\n> > any\r\n> > Go 1.1 gccgo release or the whole scheme fails).\r\n>\r\n> What do you think about doing something like compile this file:\r\n>\r\n> package p\r\n>\r\n> import \"unsafe\"\r\n>\r\n> const IntSize = unsafe.Sizeof(int(0))\r\n>\r\n> and grep the object file for IntSize?  It will show up in the export\r\n> information.\r\n>\r\nhow about just trying to compile this program (only necessary for 64-bit\r\narch)?\r\n\r\npackage p\r\nconst i int = 1<<32\r\n\r\nshould be easier than grepping object file.\r\n\r\nwhat's your opinion about supporting 64-bit pre-Go 1.1 gccgo with Go 1.1\r\ncmd/go?\r\n\r\nif we all agree, maybe we can implement this scheme in this CL?\r\n",
			"disapproval": false,
			"date": "2013-02-15 21:43:01.470830",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-15 19:24:02.399140",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 15, 2013 at 11:46 AM,  <cookieo9@gmail.com> wrote:\r\n\r\n>>      SWIG support unimplemented on GOARCH=%s; edit cmd/go/build.go\r\n>\r\n>\r\n> Done. Should I use fmt.Errorf here or is string concatenation OK?\r\n\r\nString concatenation is fine.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-15 19:48:19.527990",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttp://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-15 12:34:12.189740",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "r: +iant\n\nhttps://codereview.appspot.com/7331048/diff/7001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/7001/src/cmd/go/build.go#newcode1928\nsrc/cmd/go/build.go:1928: if runtime.GOARCH == \"amd64\" {\nwe probably should detect this by testing (u)int has 64-bit,\nthen we can also handle 64-bit architectures supported by\ngccgo (when using -compiler gccgo, we probably should\nask gccgo for its size of int)\n\nwe also need to consider what if the user use 32-bit Go tool\non 64-bit host and set GOARCH=amd64?",
			"disapproval": false,
			"date": "2013-02-15 18:50:23.639580",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 15, 2013 at 10:50 AM,  <minux.ma@gmail.com> wrote:\r\n>\r\n> https://codereview.appspot.com/7331048/diff/7001/src/cmd/go/build.go#newcode1928\r\n> src/cmd/go/build.go:1928: if runtime.GOARCH == \"amd64\" {\r\n> we probably should detect this by testing (u)int has 64-bit,\r\n> then we can also handle 64-bit architectures supported by\r\n> gccgo (when using -compiler gccgo, we probably should\r\n> ask gccgo for its size of int)\r\n\r\nBut that won't work because\r\n\r\n> we also need to consider what if the user use 32-bit Go tool\r\n> on 64-bit host and set GOARCH=amd64?\r\n\r\nExactly.  Testing GOARCH gives the right answer in principle, testing\r\nthe size of uint does not.\r\n\r\nUnless somebody can think of an easy way to ask the compiler, please\r\nwrite the code as a switch on GOARCH, list the known cases, and fail\r\nif there is no case that matches the GOARCH value.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-15 19:06:37.444560",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7331048/diff/14001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/14001/src/cmd/go/build.go#newcode1934\nsrc/cmd/go/build.go:1934: return \"\", \"\", errors.New(\"SWIG is not supported on GOARCH=\" + goarch)\nI don't think that's the right error message.  I think it should be something like\n    SWIG support unimplemented on GOARCH=%s; edit cmd/go/build.go\n\nhttps://codereview.appspot.com/7331048/diff/14001/src/cmd/go/build.go#newcode1955\nsrc/cmd/go/build.go:1955: return \"\", \"\", errors.New(\"Must have SWIG version >= 2.0.9\\n\")\nErrors should start with lower case letters by convention.",
			"disapproval": false,
			"date": "2013-02-15 19:39:25.128850",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/15 19:42:08, iant wrote:\n> On Fri, Feb 15, 2013 at 11:39 AM, minux <mailto:minux.ma@gmail.com> wrote:\n> >\n> > On Sat, Feb 16, 2013 at 3:06 AM, Ian Lance Taylor <mailto:iant@golang.org> wrote:\n> >>\n> >> Unless somebody can think of an easy way to ask the compiler, please\n> >> write the code as a switch on GOARCH, list the known cases, and fail\n> >> if there is no case that matches the GOARCH value.\n> >\n> > perhaps we should add a flag to each compiler for this before too late.\n> > (or test compiler version?)\n> >\n> > what if the user is using Go 1.1 cmd/go with gccgo 4.7.2?\n> > this doesn't seem unreasonable, as understandably distributions lag\n> > on gcc update, but they normally ship newly released Go soon after\n> > its release.\n> >\n> > i don't think we should reject the use of gccgo 4.7.2 either.\n> \n> I'm willing to go in that direction if somebody wants to do the work.\n> \n> I agree that it is generally better.\n> \n> Ian\n\nAm I waiting then on future changes to gc/gccgo? Or will this go through and be patched later to support those theoretical flags?",
			"disapproval": false,
			"date": "2013-02-15 19:55:42.153170",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 16, 2013 at 3:06 AM, Ian Lance Taylor <iant@golang.org> wrote:\r\n\r\n> Unless somebody can think of an easy way to ask the compiler, please\r\n> write the code as a switch on GOARCH, list the known cases, and fail\r\n> if there is no case that matches the GOARCH value.\r\n>\r\nperhaps we should add a flag to each compiler for this before too late.\r\n(or test compiler version?)\r\n\r\nwhat if the user is using Go 1.1 cmd/go with gccgo 4.7.2?\r\nthis doesn't seem unreasonable, as understandably distributions lag\r\non gcc update, but they normally ship newly released Go soon after\r\nits release.\r\n\r\ni don't think we should reject the use of gccgo 4.7.2 either.\r\n",
			"disapproval": false,
			"date": "2013-02-15 19:39:53.239090",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Could I pass a suppress-output flag to gc(), so that I don't have to re-write\n> most of run() in gc().\n\nI have uploaded what a suppress output solution might look like. PTAL.",
			"disapproval": false,
			"date": "2013-02-16 01:06:34.675840",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 15, 2013 at 11:39 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Sat, Feb 16, 2013 at 3:06 AM, Ian Lance Taylor <iant@golang.org> wrote:\r\n>>\r\n>> Unless somebody can think of an easy way to ask the compiler, please\r\n>> write the code as a switch on GOARCH, list the known cases, and fail\r\n>> if there is no case that matches the GOARCH value.\r\n>\r\n> perhaps we should add a flag to each compiler for this before too late.\r\n> (or test compiler version?)\r\n>\r\n> what if the user is using Go 1.1 cmd/go with gccgo 4.7.2?\r\n> this doesn't seem unreasonable, as understandably distributions lag\r\n> on gcc update, but they normally ship newly released Go soon after\r\n> its release.\r\n>\r\n> i don't think we should reject the use of gccgo 4.7.2 either.\r\n\r\nI'm willing to go in that direction if somebody wants to do the work.\r\n\r\nI agree that it is generally better.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-15 19:42:08.197810",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/15 21:46:40, iant wrote:\n> On Fri, Feb 15, 2013 at 1:42 PM, minux <mailto:minux.ma@gmail.com> wrote:\n> >\n> > how about just trying to compile this program (only necessary for 64-bit\n> > arch)?\n> >\n> > package p\n> > const i int = 1<<32\n> \n> Good, even better.  Thanks.\n> \n> \n> > what's your opinion about supporting 64-bit pre-Go 1.1 gccgo with Go 1.1\n> > cmd/go?\n> \n> I don't care very much, but I agree it would be better to have support than\n> not.\n> \n> Ian\n\nI have no problem with the concept of doing this (building a sample go file), but I am not so familiar with the proper mechanisms to do this. I would obviously like to do this with the facilities in the cmd/go codebase, any suggestions on how before I jump in?",
			"disapproval": false,
			"date": "2013-02-15 21:58:30.628750",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/15 22:12:46, iant wrote:\n> On Fri, Feb 15, 2013 at 1:58 PM,  <mailto:cookieo9@gmail.com> wrote:\n> >\n> > I have no problem with the concept of doing this (building a sample go\n> > file), but I am not so familiar with the proper mechanisms to do this. I\n> > would obviously like to do this with the facilities in the cmd/go\n> > codebase, any suggestions on how before I jump in?\n> \n> Create a temporary file in the b.work directory.  Use the gc method of\n> buildToolchain.\n> \n> Ian\n\nDone. PTAL.\n\nOne thing, I can't suppress the output of buildToolchain.gc without changing it and the toolchain interface, so currently on 32-bit systems, an (ignored) error is printed out in the go tool output. I shied away from modifying such a critical piece of cmd/go, until at least my other logic was considered acceptable.\n\nI can only test 8g and 6g since AFAIK gccgo doesn't work on Mac OS X.",
			"disapproval": false,
			"date": "2013-02-15 23:05:10.655710",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7331048/diff/14001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/14001/src/cmd/go/build.go#newcode1934\nsrc/cmd/go/build.go:1934: return \"\", \"\", errors.New(\"SWIG is not supported on GOARCH=\" + goarch)\nOn 2013/02/15 19:39:25, iant wrote:\n> I don't think that's the right error message.  I think it should be something\n> like\n>     SWIG support unimplemented on GOARCH=%s; edit cmd/go/build.go\n\nDone. Should I use fmt.Errorf here or is string concatenation OK?\n\nhttps://codereview.appspot.com/7331048/diff/14001/src/cmd/go/build.go#newcode1955\nsrc/cmd/go/build.go:1955: return \"\", \"\", errors.New(\"Must have SWIG version >= 2.0.9\\n\")\nOn 2013/02/15 19:39:25, iant wrote:\n> Errors should start with lower case letters by convention.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-15 19:46:29.810420",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 16, 2013 at 3:55 AM, <cookieo9@gmail.com> wrote:\r\n\r\n> Am I waiting then on future changes to gc/gccgo? Or will this go through\r\n> and be patched later to support those theoretical flags?\r\n\r\nwe have several alternatives for gccgo support:\r\n1. only support 32-bit pre-Go 1.1 gccgo: this support is the bottom line,\r\nIMO,\r\nbecause int is still 32-bit with those.\r\n\r\n2. also support 64-bit pre-Go 1.1 gccgo, and pass -intgosize 32 to swig in\r\nthis\r\ncase.\r\n\r\n3. we pass compiler to swig, and let swig figure out the correct\r\n-intgosize, then\r\nwe require that version of swig unconditionally for Go 1.1.\r\n\r\nIan, is it still possible to add the required flag to gcc 4.8 (we cannot\r\nlet any\r\nGo 1.1 gccgo release or the whole scheme fails).\r\n\r\nOnce we've selected a way to go, we can decide whether to commit this CL now\r\nor later.\r\n",
			"disapproval": false,
			"date": "2013-02-15 20:09:27.447330",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 15, 2013 at 12:09 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> Ian, is it still possible to add the required flag to gcc 4.8 (we cannot let\r\n> any\r\n> Go 1.1 gccgo release or the whole scheme fails).\r\n\r\nWhat do you think about doing something like compile this file:\r\n\r\npackage p\r\n\r\nimport \"unsafe\"\r\n\r\nconst IntSize = unsafe.Sizeof(int(0))\r\n\r\nand grep the object file for IntSize?  It will show up in the export\r\ninformation.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-15 21:31:19.891440",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 15, 2013 at 1:42 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> how about just trying to compile this program (only necessary for 64-bit\r\n> arch)?\r\n>\r\n> package p\r\n> const i int = 1<<32\r\n\r\nGood, even better.  Thanks.\r\n\r\n\r\n> what's your opinion about supporting 64-bit pre-Go 1.1 gccgo with Go 1.1\r\n> cmd/go?\r\n\r\nI don't care very much, but I agree it would be better to have support than not.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-15 21:46:40.168330",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 15, 2013 at 1:58 PM,  <cookieo9@gmail.com> wrote:\r\n>\r\n> I have no problem with the concept of doing this (building a sample go\r\n> file), but I am not so familiar with the proper mechanisms to do this. I\r\n> would obviously like to do this with the facilities in the cmd/go\r\n> codebase, any suggestions on how before I jump in?\r\n\r\nCreate a temporary file in the b.work directory.  Use the gc method of\r\nbuildToolchain.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-15 22:12:46.560260",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks good to me once we fix that error message.  Thanks for your patience with this.\n\nhttps://codereview.appspot.com/7331048/diff/12002/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/12002/src/cmd/go/build.go#newcode1929\nsrc/cmd/go/build.go:1929: if _, err = buildToolchain.gc(b, p, obj, nil, srcs); err != nil {\nI suppose you need a version of gc that calls runOut rather than run.",
			"disapproval": false,
			"date": "2013-02-15 23:39:26.885420",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/16 00:42:32, iant wrote:\n> On 2013/02/16 00:16:34, cookieo9 wrote:\n> > \n> > I solved the problem by replacing builder.print for the duration of the\n> > buildToolchain.gc call. Is it a little too hack-ish?\n> \n> That sounds a little too hackish to me.  How about changing the gc method to\n> return the output as runOut does.  I only see one call to the gc method anyhow.\n\nCould I pass a suppress-output flag to gc(), so that I don't have to re-write most of run() in gc().",
			"disapproval": false,
			"date": "2013-02-16 00:52:34.226550",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/15 23:39:26, iant wrote:\n> This looks good to me once we fix that error message.  Thanks for your patience\n> with this.\n> \n> https://codereview.appspot.com/7331048/diff/12002/src/cmd/go/build.go\n> File src/cmd/go/build.go (right):\n> \n> https://codereview.appspot.com/7331048/diff/12002/src/cmd/go/build.go#newcode1929\n> src/cmd/go/build.go:1929: if _, err = buildToolchain.gc(b, p, obj, nil, srcs);\n> err != nil {\n> I suppose you need a version of gc that calls runOut rather than run.\n\nI solved the problem by replacing builder.print for the duration of the buildToolchain.gc call. Is it a little too hack-ish?",
			"disapproval": false,
			"date": "2013-02-16 00:16:34.518990",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/16 00:16:34, cookieo9 wrote:\n> \n> I solved the problem by replacing builder.print for the duration of the\n> buildToolchain.gc call. Is it a little too hack-ish?\n\nThat sounds a little too hackish to me.  How about changing the gc method to return the output as runOut does.  I only see one call to the gc method anyhow.",
			"disapproval": false,
			"date": "2013-02-16 00:42:32.024470",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for letting this sit.\n\nhttps://codereview.appspot.com/7331048/diff/14002/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/14002/src/cmd/go/build.go#newcode1511\nsrc/cmd/go/build.go:1511: if suppressOutput {\nThis repeated code just looks strange to me.  Why not have gc call runOut and return the output.  The code in run that massages the output can be broken out into a function that is called by the current single caller of gc.",
			"disapproval": false,
			"date": "2013-02-27 01:47:57.120250",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7331048/diff/14002/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/14002/src/cmd/go/build.go#newcode1511\nsrc/cmd/go/build.go:1511: if suppressOutput {\nOn 2013/02/27 01:47:57, iant wrote:\n> This repeated code just looks strange to me.  Why not have gc call runOut and\n> return the output.  The code in run that massages the output can be broken out\n> into a function that is called by the current single caller of gc.\n\nDone, I'm not sure how much I'm saving, because the code which processes the output needs a bunch of extra logic to be in place where gc is used. Also many of the variables that code uses are cooked a little in run(), which makes the code at the call-site of gc a little uglier.\n\nOn the upside I can use the new output processing code to fix up the changes I made.",
			"disapproval": false,
			"date": "2013-02-27 04:10:44.193820",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1205\nsrc/cmd/go/build.go:1205: func (b *builder) generateDescription(dir string, cmdargs ...interface{}) string {\nI created the generateDescription to generate the desc argument to b.showOutput, but it's annoying to use since it uses cmdargs which is generated by gc() which makes it difficult to use outside gc().\n\nThe logic is only meant to provide a default should desc be the empty string,\nso hopefully, the code which calls gc, where desc is the package name will never be \"\".\n\nI will probably remove this function if I can't find a good way to use it as it currently is a waste of space (adds 3 lines for no benefit).\n\nI will have to put it back in run() then.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1209\nsrc/cmd/go/build.go:1209: func (b *builder) processOutput(out []byte) string {\nAny suggestions on name? Should I put a method comment?\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1227\nsrc/cmd/go/build.go:1227: func (b *builder) runOut(dir string, desc string, cmdargs ...interface{}) ([]byte, error) {\nI noticed the desc arg in this function is never used, should I do anything about it?",
			"disapproval": false,
			"date": "2013-02-27 04:25:22.192590",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-27 04:11:05.067740",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your patience on this.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode821\nsrc/cmd/go/build.go:821: b.showOutput(a.p.Dir, desc, messages)\nJust write\n    b.showOutput(a.p.Dir, a.p.ImportPath, b.processOutput(out))\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1197\nsrc/cmd/go/build.go:1197: b.showOutput(dir, desc, messages)\nb.showOutput(dir, desc, b.processOutput(out))\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1205\nsrc/cmd/go/build.go:1205: func (b *builder) generateDescription(dir string, cmdargs ...interface{}) string {\nOn 2013/02/27 04:25:22, cookieo9 wrote:\n> I created the generateDescription to generate the desc argument to b.showOutput,\n> but it's annoying to use since it uses cmdargs which is generated by gc() which\n> makes it difficult to use outside gc().\n> \n> The logic is only meant to provide a default should desc be the empty string,\n> so hopefully, the code which calls gc, where desc is the package name will never\n> be \"\".\n> \n> I will probably remove this function if I can't find a good way to use it as it\n> currently is a waste of space (adds 3 lines for no benefit).\n> \n> I will have to put it back in run() then.\n\nAt the moment you don't seem to be using generateDescription at all.  Did I miss something?  The lines in run to handle desc == \"\" don't seem to exist any more here.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1209\nsrc/cmd/go/build.go:1209: func (b *builder) processOutput(out []byte) string {\nOn 2013/02/27 04:25:22, cookieo9 wrote:\n> Any suggestions on name? Should I put a method comment?\n\nI think the name is fine.  Yes, it should have a method comment, as should generateDescription.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1227\nsrc/cmd/go/build.go:1227: func (b *builder) runOut(dir string, desc string, cmdargs ...interface{}) ([]byte, error) {\nOn 2013/02/27 04:25:22, cookieo9 wrote:\n> I noticed the desc arg in this function is never used, should I do anything\n> about it?\n\nLet's leave that for a different CL, if we care.",
			"disapproval": false,
			"date": "2013-02-27 14:43:45.641800",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode821\nsrc/cmd/go/build.go:821: b.showOutput(a.p.Dir, desc, messages)\nOn 2013/02/27 14:43:45, iant wrote:\n> Just write\n>     b.showOutput(a.p.Dir, a.p.ImportPath, b.processOutput(out))\n\nDone, I also removed the extra \"messages\" variable, similar to as you suggested for below.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1197\nsrc/cmd/go/build.go:1197: b.showOutput(dir, desc, messages)\nOn 2013/02/27 14:43:45, iant wrote:\n> b.showOutput(dir, desc, b.processOutput(out))\n\nDone.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1205\nsrc/cmd/go/build.go:1205: func (b *builder) generateDescription(dir string, cmdargs ...interface{}) string {\nOn 2013/02/27 14:43:45, iant wrote:\n> On 2013/02/27 04:25:22, cookieo9 wrote:\n> > I created the generateDescription to generate the desc argument to\n> b.showOutput,\n> > but it's annoying to use since it uses cmdargs which is generated by gc()\n> which\n> > makes it difficult to use outside gc().\n> > \n> > The logic is only meant to provide a default should desc be the empty string,\n> > so hopefully, the code which calls gc, where desc is the package name will\n> never\n> > be \"\".\n> > \n> > I will probably remove this function if I can't find a good way to use it as\n> it\n> > currently is a waste of space (adds 3 lines for no benefit).\n> > \n> > I will have to put it back in run() then.\n> \n> At the moment you don't seem to be using generateDescription at all.  Did I miss\n> something?  The lines in run to handle desc == \"\" don't seem to exist any more\n> here.\n\nAs it turns out I never did use it, my intention when I wrote the function was to have the callers of gc do it, but then I realized the problem (a lack of command ilne arguments there). I also realized this would change the behaviour for other calls to run, so in my next patch I will put this back in run() and hope that all calls to gc will always have a package set.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1209\nsrc/cmd/go/build.go:1209: func (b *builder) processOutput(out []byte) string {\nOn 2013/02/27 14:43:45, iant wrote:\n> On 2013/02/27 04:25:22, cookieo9 wrote:\n> > Any suggestions on name? Should I put a method comment?\n> \n> I think the name is fine.  Yes, it should have a method comment, as should\n> generateDescription.\n\nDone.\n\nhttps://codereview.appspot.com/7331048/diff/35001/src/cmd/go/build.go#newcode1227\nsrc/cmd/go/build.go:1227: func (b *builder) runOut(dir string, desc string, cmdargs ...interface{}) ([]byte, error) {\nOn 2013/02/27 14:43:45, iant wrote:\n> On 2013/02/27 04:25:22, cookieo9 wrote:\n> > I noticed the desc arg in this function is never used, should I do anything\n> > about it?\n> \n> Let's leave that for a different CL, if we care.\n\nOk, aside from here, there would be 4+ call sites that would need to be modified.",
			"disapproval": false,
			"date": "2013-02-27 15:58:17.443050",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-27 15:59:24.314280",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7331048/diff/42001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/42001/src/cmd/go/build.go#newcode1953\nsrc/cmd/go/build.go:1953: func (b *builder) swigIntSize(obj string) (intsize string, err error) {\nShould I comment this new function as well?",
			"disapproval": false,
			"date": "2013-02-27 16:04:23.793740",
			"approval": false
		},
		{
			"sender": "cookieo9@gmail.com",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7331048/diff/42001/src/cmd/go/build.go\nFile src/cmd/go/build.go (right):\n\nhttps://codereview.appspot.com/7331048/diff/42001/src/cmd/go/build.go#newcode1953\nsrc/cmd/go/build.go:1953: func (b *builder) swigIntSize(obj string) (intsize string, err error) {\nOn 2013/02/27 16:04:23, cookieo9 wrote:\n> Should I comment this new function as well?\nI have done so since the answer will probably be yes, and if it's no it's easy enough to fix.",
			"disapproval": false,
			"date": "2013-02-28 02:26:05.444440",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks for bearing with me.",
			"disapproval": false,
			"date": "2013-03-02 00:48:04.879240",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"cookieo9@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3d1a771ddcc5 ***\n\ncmd/go: pass -intgosize to SWIG\n\nswig >= 2.0.9 requires the size of int values to be passed via a command line flag. Should swig complain about the -intgosize not being supported, then alert the user to their outdated version of swig.\n\nFixes issue 4756.\n\nR=golang-dev, minux.ma, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7331048\n\nCommitter: Ian Lance Taylor <iant@golang.org>",
			"disapproval": false,
			"date": "2013-03-02 00:48:26.663950",
			"approval": false
		}
	],
	"owner_email": "cookieo9@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "cookieo9",
	"subject": "code review 7331048: cmd/go: pass -intgosize to SWIG",
	"created": "2013-02-15 12:25:14.345270",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		14001,
		20001,
		12002,
		15002,
		14002,
		35001,
		42001,
		48001
	],
	"modified": "2013-03-02 04:48:38.978660",
	"closed": true,
	"issue": 7331048
}