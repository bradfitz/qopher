{
	"description": "cmd/godoc: ignore misnamed examples and print a warning\n\nFixes issue 4211.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-20 07:35:41.552740",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-20 04:27:35.724810",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6970051/diff/6003/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/6970051/diff/6003/src/cmd/godoc/godoc.go#newcode894\nsrc/cmd/godoc/godoc.go:894: // with a matching name\nperiod.\n\nhttps://codereview.appspot.com/6970051/diff/6003/src/cmd/godoc/godoc.go#newcode908\nsrc/cmd/godoc/godoc.go:908: // hasName returns true if decl has a matching name\nperiod.\n\nhttps://codereview.appspot.com/6970051/diff/6003/src/cmd/godoc/godoc.go#newcode934\nsrc/cmd/godoc/godoc.go:934: // parseExamples gets examples for packages in pkgs from *_test.go files in abspath\ns/gets/reads/\ns/abspath/dir/\nperiod.\n\nhttps://codereview.appspot.com/6970051/diff/6003/src/cmd/godoc/godoc.go#newcode935\nsrc/cmd/godoc/godoc.go:935: func parseExamples(fset *token.FileSet, pkgs map[string]*ast.Package, abspath string) ([]*doc.Example, error) {\ns/abspath/dir/\n\nhttps://codereview.appspot.com/6970051/diff/6003/src/cmd/godoc/godoc.go#newcode942\nsrc/cmd/godoc/godoc.go:942: } else {\nno else needed after return",
			"disapproval": false,
			"date": "2012-12-20 05:49:33.051150",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6970051/diff/3001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/6970051/diff/3001/src/cmd/godoc/godoc.go#newcode895\nsrc/cmd/godoc/godoc.go:895: func declInPackages(p map[string]*ast.Package, name string) bool {\nsplit this into two functions\n\nfunc hasGlobalName(p map[string]*ast.Package, name string) bool\nfunc hasName(decl ast.Decl, name string) bool\n\nso that the former is just the three for loops, and the latter is the switch statement.\n\nhttps://codereview.appspot.com/6970051/diff/3001/src/cmd/godoc/godoc.go#newcode1001\nsrc/cmd/godoc/godoc.go:1001: filter = func(d os.FileInfo) bool {\nthis is getting big, please move lines 1000 through 1019 to a function, so that it becomes:\n\nexamples, err := parseExamples(fset, path)\nif err != nil {\n  log.Println(\"parsing examples:\", err)\n}\n\nhttps://codereview.appspot.com/6970051/diff/3001/src/cmd/godoc/godoc.go#newcode1017\nsrc/cmd/godoc/godoc.go:1017: log.Println(\"skipping example Example\" + e.Name + \": refers to unknown function or type\")\nlog.Printf(\"ignoring Example%s: refers to unknown declaration\", e.Name)",
			"disapproval": false,
			"date": "2012-12-20 04:59:22.012640",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6970051/diff/2002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/6970051/diff/2002/src/cmd/godoc/godoc.go#newcode951\nsrc/cmd/godoc/godoc.go:951: if name == \"\" || hasGlobalName(pkgs, name) {\nOn 2012/12/20 06:14:03, adg wrote:\n> I just realized: this hasGlobalName function is pretty expensive, and we're\n> doing it for each example in the package.\n> \n> It might be better to&nbsp;write a function:\n> \n> function globalNames(pkgs map[string]*ast.Package) map[string]bool\n> \n> that returns all names in those packages. Call that function once, outside of\n> these loops. Here, you'd just check for the presence of the name in the map;\n> cheap.\n> \n> Furthermore, I don't think this code works with methods. The globalNames\n> function should, for each method declaration, return the name in the form\n> Receiver_Method; the same form we use for the example functions.\n\nRight on both counts. I was just testing with the errors package which didn't have any methods. The updated version I just posted I tested with both errors and regexp and it seems to work correctly in both cases.\n\nI'm a little iffy about the type conversions used when dealing with the AST in the new changeset...",
			"disapproval": false,
			"date": "2012-12-20 07:38:19.973310",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-20 05:43:04.001520",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-20 06:03:58.150380",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6970051/diff/2002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/6970051/diff/2002/src/cmd/godoc/godoc.go#newcode951\nsrc/cmd/godoc/godoc.go:951: if name == \"\" || hasGlobalName(pkgs, name) {\nI just realized: this hasGlobalName function is pretty expensive, and we're doing it for each example in the package.\n\nIt might be better to\u00a0write a function:\n\nfunction globalNames(pkgs map[string]*ast.Package) map[string]bool\n\nthat returns all names in those packages. Call that function once, outside of these loops. Here, you'd just check for the presence of the name in the map; cheap.\n\nFurthermore, I don't think this code works with methods. The globalNames function should, for each method declaration, return the name in the form Receiver_Method; the same form we use for the example functions.",
			"disapproval": false,
			"date": "2012-12-20 06:14:03.811220",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Way better!\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode895\nsrc/cmd/godoc/godoc.go:895: func declName(decl ast.Decl) []string {\nfunc declNames(decl ast.Decl) (names []string)\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode896\nsrc/cmd/godoc/godoc.go:896: var names []string\ndelete\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode915\nsrc/cmd/godoc/godoc.go:915: names = []string{s.Name.Name}\nnames = append(names, s.Name.Name)\n\nthere can be more than one spec\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode923\nsrc/cmd/godoc/godoc.go:923: fmt.Println(names)\ndelete\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode924\nsrc/cmd/godoc/godoc.go:924: return names\nreturn\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode927\nsrc/cmd/godoc/godoc.go:927: // globalNames returns a map with the values of keys corresponding to global names in pks set to true.\n// globalNames finds all top-level declarations in pkgs and returns a map\n// with the identifier names as keys.\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode960\nsrc/cmd/godoc/godoc.go:960: _, hasName := globals[name]\ndelete\ncan use the bool value instead, it defaults to false if key not present\n\nhttps://codereview.appspot.com/6970051/diff/7002/src/cmd/godoc/godoc.go#newcode961\nsrc/cmd/godoc/godoc.go:961: if name == \"\" || hasName {\nif name == \"\" || globals[name] {",
			"disapproval": false,
			"date": "2012-12-20 20:21:48.495460",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-21 06:08:24.297380",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-02 04:11:53.348050",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0dfd8fcdbca5 ***\n\ncmd/godoc: ignore misnamed examples and print a warning\n\nFixes issue 4211.\n\nR=golang-dev, adg\nCC=golang-dev\nhttps://codereview.appspot.com/6970051\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-01-02 05:00:58.080150",
			"approval": false
		}
	],
	"owner_email": "kamil.kisiel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kisielk",
	"subject": "code review 6970051: cmd/godoc: ignore misnamed examples and print a warning",
	"created": "2012-12-20 04:05:48.570820",
	"patchsets": [
		1,
		3,
		3001,
		6003,
		2002,
		7002,
		13001
	],
	"modified": "2013-01-02 05:00:58.080150",
	"closed": false,
	"issue": 6970051
}