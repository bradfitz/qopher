{
	"description": "log/syslog: fix data races in tests\n\nFixes issue 4769.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go\nFile src/pkg/log/syslog/syslog_test.go (right):\n\nhttps://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode290\nsrc/pkg/log/syslog/syslog_test.go:290: defer func() { setCrashy(false) }()\ncrashy is only locked to shut up the race detector. What are you proposing to change here?\n\nhttps://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode308\nsrc/pkg/log/syslog/syslog_test.go:308: w, err := Dial(net, addr, LOG_USER|LOG_ERR, \"tag\")\nOn 2013/02/08 07:34:24, remyoudompheng wrote:\n> seems like w is never closed.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-08 08:56:01.309880",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I propose not locking crashy at all because there is no race on it and\r\nfor the races that exist, locking it does not fix anything.\r\n\r\nSee CL7314057 for a proposal.\r\n\r\n2013/2/8, jeff.allen@gmail.com <jeff.allen@gmail.com>:\r\n>\r\n> https://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go\r\n> File src/pkg/log/syslog/syslog_test.go (right):\r\n>\r\n> https://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode290\r\n> src/pkg/log/syslog/syslog_test.go:290: defer func() { setCrashy(false)\r\n> }()\r\n> crashy is only locked to shut up the race detector. What are you\r\n> proposing to change here?\r\n>\r\n> https://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode308\r\n> src/pkg/log/syslog/syslog_test.go:308: w, err := Dial(net, addr,\r\n> LOG_USER|LOG_ERR, \"tag\")\r\n> On 2013/02/08 07:34:24, remyoudompheng wrote:\r\n>> seems like w is never closed.\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.com/7311052/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-08 11:23:40.068820",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog.go\nFile src/pkg/log/syslog/syslog.go (right):\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog.go#newcode261\nsrc/pkg/log/syslog/syslog.go:261: _, err := fmt.Fprintf(w.conn, \"<%d>%s %s %s[%d]: %s%s\",\nIn fact, this was a real bug in the last checkin. The test was hiding it, and fixing the test's data race showed me this bug which came in the last CL from too many people giving helpful changes.\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go\nFile src/pkg/log/syslog/syslog_test.go (right):\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go#newcode51\nsrc/pkg/log/syslog/syslog_test.go:51: func beCrashy(x bool) {\nOn 2013/02/06 10:02:31, dfc wrote:\n> func setCrashy\n\nDone.\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go#newcode57\nsrc/pkg/log/syslog/syslog_test.go:57: func amCrashy() bool {\nOn 2013/02/06 10:02:31, dfc wrote:\n> func crashy (watch out for collision with var crashy)\n\nDone.\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go#newcode296\nsrc/pkg/log/syslog/syslog_test.go:296: // count all the messages arriving\nWon't work. The data race was from the close(done), which was there to make this goroutine exit. Now the close(done) is gone, and we get the count while this goroutine is still running via atomic.LoadUint32. It now dies when the channel is garbage collected.",
			"disapproval": false,
			"date": "2013-02-06 14:25:10.121170",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttp://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-06 09:09:49.193450",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go\nFile src/pkg/log/syslog/syslog_test.go (right):\n\nhttps://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode290\nsrc/pkg/log/syslog/syslog_test.go:290: defer func() { setCrashy(false) }()\ncan be defer setCrashy(false).\n\nI'm not sure why crashy must be locked because Tests do not run in parallel by default.\n\nMaking the crashy variable locked will spoof the race detector but still makes the tests racy: if tests run in parallel, crashy would randomly switch between true and false in the middle of the test.\n\nhttps://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode300\nsrc/pkg/log/syslog/syslog_test.go:300: atomic.AddUint32(&ct, 1)\nthis is racy as it's possible that this goroutine never runs at all.\n\nhttps://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode308\nsrc/pkg/log/syslog/syslog_test.go:308: w, err := Dial(net, addr, LOG_USER|LOG_ERR, \"tag\")\nseems like w is never closed.",
			"disapproval": false,
			"date": "2013-02-08 07:34:24.667110",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the quick response.\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog.go\nFile src/pkg/log/syslog/syslog.go (right):\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog.go#newcode261\nsrc/pkg/log/syslog/syslog.go:261: _, err := fmt.Fprintf(w.conn, \"<%d>%s %s %s[%d]: %s%s\",\nI have a feeling that this will make the tests even less reliable. C'est la vie.\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go\nFile src/pkg/log/syslog/syslog_test.go (right):\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go#newcode51\nsrc/pkg/log/syslog/syslog_test.go:51: func beCrashy(x bool) {\nfunc setCrashy\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go#newcode57\nsrc/pkg/log/syslog/syslog_test.go:57: func amCrashy() bool {\nfunc crashy (watch out for collision with var crashy)\n\nhttps://codereview.appspot.com/7311052/diff/3/src/pkg/log/syslog/syslog_test.go#newcode296\nsrc/pkg/log/syslog/syslog_test.go:296: // count all the messages arriving\nCan you try without the changes below this line. ct was correctly published via chan count.",
			"disapproval": false,
			"date": "2013-02-06 10:02:31.827340",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is the race crashyMu is solving:\n\nWARNING: DATA RACE\nWrite by goroutine 33:\n  log/syslog.setCrashy()\n      /home/jeffall/go/src/pkg/log/syslog/syslog_test.go:53 +0x36\n  log/syslog.TestConcurrentReconnect()\n      /home/jeffall/go/src/pkg/log/syslog/syslog_test.go:329 +0x401\n  testing.tRunner()\n      /home/jeffall/go/src/pkg/testing/testing.go:314 +0xe8\n\nPrevious read by goroutine 32:\n  log/syslog.func\u00b7001()\n      /home/jeffall/go/src/pkg/log/syslog/syslog_test.go:73 +0x82\n                        for ct := 1; !crashy() || ct&7 != 0; ct++ {",
			"disapproval": false,
			"date": "2013-02-08 11:29:16.308390",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL does not apply cleanly anymore. Jeff - can you please hg mail again.\n\nCan I suggest that this CL be committed as is to get the race builder going again and a followup CL proposed to improve the test afterwards.\n\nhttps://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go\nFile src/pkg/log/syslog/syslog_test.go (right):\n\nhttps://codereview.appspot.com/7311052/diff/9001/src/pkg/log/syslog/syslog_test.go#newcode49\nsrc/pkg/log/syslog/syslog_test.go:49: var crashyBool = false\nvar crashyBool bool\n\nthe zero value for a bool is false. Maybe even say\n\nvar (\n    crashyMu sync.Mutex\n    crashyBool bool\n)",
			"disapproval": false,
			"date": "2013-02-11 00:13:12.071520",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/08 11:29:16, jeff.allen wrote:\n> This is the race crashyMu is solving:\n> \n> WARNING: DATA RACE\n> Write by goroutine 33:\n>   log/syslog.setCrashy()\n>       /home/jeffall/go/src/pkg/log/syslog/syslog_test.go:53 +0x36\n\nYou are only showing a technical race. Locking access to crashy\nwill make the program conform to the memory model but not eliminate\nthe actual race, which is that crashy=false can happen before the server stops serving.\n\nIt's enough to simply wait for the server to finish before setting crashy to false.\nAnyway, that doesn't exactly matter on this example, but it feels not right.",
			"disapproval": false,
			"date": "2013-02-10 21:43:19.093380",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"jeff.allen@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "jeff, can you please hg mail this again.",
			"disapproval": false,
			"date": "2013-02-13 10:22:10.813670",
			"approval": false
		}
	],
	"owner_email": "jeff.allen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jeff.allen",
	"subject": "code review 7311052: log/syslog: fix data races in tests",
	"created": "2013-02-06 09:09:11.499160",
	"patchsets": [
		1,
		1002,
		3,
		9001,
		6003
	],
	"modified": "2013-02-20 12:49:21.565220",
	"closed": true,
	"issue": 7311052
}