{
	"description": "hash: more efficient memory allocation\n\nFeed append the complete content at once.\n\nBenchmarkAdler32KB       1000000              2534 ns/op         404.05 MB/s\nBenchmarkCrc32KB          500000              4757 ns/op         215.26 MB/s\nBenchmarkCrc64KB          500000              4769 ns/op         214.70 MB/s\nBenchmarkFnv32KB         1000000              2417 ns/op         423.64 MB/s\nBenchmarkFnv32aKB        1000000              2408 ns/op         425.23 MB/s\nBenchmarkFnv64KB          500000              4262 ns/op         240.21 MB/s\nBenchmarkFnv64aKB         500000              4234 ns/op         241.83 MB/s",
	"cc": [
		"iant@golang.org",
		"rsc@golang.org",
		"r@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"pascal@quies.net",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-28 22:24:00.270903",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"pascal@quies.net",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5937053/diff/2001/src/pkg/hash/fnv/fnv.go\nFile src/pkg/hash/fnv/fnv.go (right):\n\nhttp://codereview.appspot.com/5937053/diff/2001/src/pkg/hash/fnv/fnv.go#newcode118\nsrc/pkg/hash/fnv/fnv.go:118: copy(in, a)\nI think you have the arguments to copy reversed.\n\nhttp://codereview.appspot.com/5937053/diff/2001/src/pkg/hash/fnv/fnv.go#newcode137\nsrc/pkg/hash/fnv/fnv.go:137: copy(in, a)\nArguments reversed.\n\nhttp://codereview.appspot.com/5937053/diff/2001/src/pkg/hash/fnv/fnv.go#newcode156\nsrc/pkg/hash/fnv/fnv.go:156: copy(in, a)\nArguments reversed.\n\nhttp://codereview.appspot.com/5937053/diff/2001/src/pkg/hash/fnv/fnv.go#newcode179\nsrc/pkg/hash/fnv/fnv.go:179: copy(in, a)\nArguments reversed.",
			"disapproval": false,
			"date": "2012-03-28 23:08:26.775834",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5937053/diff/2001/src/pkg/hash/fnv/fnv.go\nFile src/pkg/hash/fnv/fnv.go (right):\n\nhttp://codereview.appspot.com/5937053/diff/2001/src/pkg/hash/fnv/fnv.go#newcode113\nsrc/pkg/hash/fnv/fnv.go:113: lin := len(in)\nThis is too much code.  If you need Sum to be faster,\nI suggest rewriting the original to just\n\nv := uint32(*s)\nreturn append(in, byte(v>>24), byte(v>>16), byte(v>>8), byte(v))\n\nThat said, a bigger problem is that the benchmark is allocating\non each call to Sum.  It would be better to change the benchmark\nnot to do that, so that it's benchmarking processing speed and not\nallocation speed.  At that point I bet you won't get much use from\ntweaking this code.\n\nThat is rewrite the benchmark to call .Sum32() or .Sum64() or\n.Sum(x) where x is a global var x = make([]byte, 0, 8).",
			"disapproval": false,
			"date": "2012-04-02 14:22:34.956800",
			"approval": false
		},
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Ian,\n\nSorry for the late response.\n\n> I think you have the arguments to copy reversed.\n\nYou are right. I'll improve the test too.\n",
			"disapproval": false,
			"date": "2012-04-02 19:28:18.378491",
			"approval": false
		},
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Russ,\n\n> I suggest rewriting the original to just\n> \n> v := uint32(*s)\n> return append(in, byte(v>>24), byte(v>>16), byte(v>>8), byte(v))\n\nLooks better indeed but for some reason it's about 10% slower than the code as \nis.\n\n\n> That said, a bigger problem is that the benchmark is allocating\n> on each call to Sum.  It would be better to change the benchmark\n> not to do that, so that it's benchmarking processing speed and not\n> allocation speed.  At that point I bet you won't get much use from\n> tweaking this code.\n\nWill do.\n\nHowever the test as is proved a concern. I've applied the same logic to the \nrecently posted fax decoder and the gains were stunning.\n\nWould you feel anything for the following or something like that?\n\n// Size returns in as an array with n bytes.\n// etc.\nbytes.Size( []byte, n int) []byte\n",
			"disapproval": false,
			"date": "2012-04-02 19:34:10.693484",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 2, 2012 at 15:34, Pascal S. de Kloe <pascal@quies.net> wrote:\n> Will do.\n>\n> However the test as is proved a concern. I've applied the same logic to the\n> recently posted fax decoder and the gains were stunning.\n>\n> Would you feel anything for the following or something like that?\n\nNo.  If append is doing a bad job we can fix append.\nBut the bigger problem is that you are allocating memory\nwithout bound instead of reusing a single buffer.\nYou should fix that first.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-02 19:52:18.708408",
			"approval": false
		},
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-04 19:49:45.384901",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5937053/diff/12001/src/pkg/hash/fnv/fnv_test.go\nFile src/pkg/hash/fnv/fnv_test.go (right):\n\nhttp://codereview.appspot.com/5937053/diff/12001/src/pkg/hash/fnv/fnv_test.go#newcode154\nsrc/pkg/hash/fnv/fnv_test.go:154: b.ResetTimer()\nThis should be b.StopTimer()\n\nhttp://codereview.appspot.com/5937053/diff/12001/src/pkg/hash/fnv/fnv_test.go#newcode163\nsrc/pkg/hash/fnv/fnv_test.go:163: for todo := b.N; todo != 0; todo-- {\nfor i := 0; i < b.N; i++ is the idiom.",
			"disapproval": false,
			"date": "2012-04-05 01:51:52.936190",
			"approval": false
		},
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org, rsc@golang.org, r@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-05 22:28:11.568850",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5937053/diff/12001/src/pkg/hash/fnv/fnv_test.go\nFile src/pkg/hash/fnv/fnv_test.go (right):\n\nhttp://codereview.appspot.com/5937053/diff/12001/src/pkg/hash/fnv/fnv_test.go#newcode162\nsrc/pkg/hash/fnv/fnv_test.go:162: b.StartTimer()\nOr you can change this to b.ResetTime() and delete the earlier one.",
			"disapproval": false,
			"date": "2012-04-05 16:43:17.971983",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/05 16:43:17, minux wrote:\n> src/pkg/hash/fnv/fnv_test.go:162: b.StartTimer()\n> Or you can change this to b.ResetTime() and delete the earlier one.\nsorry, s/ResetTime/ResetTimer/.",
			"disapproval": false,
			"date": "2012-04-05 16:43:49.199716",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-04-10 19:15:30.016967",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pascal@quies.net",
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f1fc733c069b ***\n\nhash: more efficient memory allocation\n\nFeed append the complete content at once.\n\nBenchmarkAdler32KB       1000000              2534 ns/op         404.05 MB/s\nBenchmarkCrc32KB          500000              4757 ns/op         215.26 MB/s\nBenchmarkCrc64KB          500000              4769 ns/op         214.70 MB/s\nBenchmarkFnv32KB         1000000              2417 ns/op         423.64 MB/s\nBenchmarkFnv32aKB        1000000              2408 ns/op         425.23 MB/s\nBenchmarkFnv64KB          500000              4262 ns/op         240.21 MB/s\nBenchmarkFnv64aKB         500000              4234 ns/op         241.83 MB/s\n\nR=iant, rsc, r, minux.ma\nCC=golang-dev\nhttp://codereview.appspot.com/5937053\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-04-10 19:15:42.686514",
			"approval": false
		}
	],
	"owner_email": "pascal@quies.net",
	"private": false,
	"base_url": "",
	"owner": "pascal",
	"subject": "code review 5937053: hash: more efficient memory allocation",
	"created": "2012-03-28 22:18:25.841343",
	"patchsets": [
		1,
		2001,
		12001,
		18001,
		16002
	],
	"modified": "2012-04-16 15:51:41.785387",
	"closed": true,
	"issue": 5937053
}