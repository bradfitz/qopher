{
	"description": "image/gif: reject a GIF image if frame bounds larger than image bounds\n\nThe GIF89a spec says: \"Each image must fit within the\nboundaries of the Logical Screen, as defined in the\nLogical Screen Descriptor.\" Also, do not accept\nGIFs which have too much data for the image size.",
	"cc": [
		"nigeltao@golang.org",
		"jra@nella.org",
		"r@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"fullung@gmail.com",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like this approach a lot more.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode352\nsrc/pkg/image/gif/reader.go:352: width = d.width\ncapping it to d.width instead of returning an error?\n\nwon't it just return an error later anyway when it tries to read the pixel data?",
			"disapproval": false,
			"date": "2013-03-15 19:20:47.716270",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This adds, at least implicitly, dependency on another tool to maintain the test. Can you not generate the test file in the test? All you need to do is pickle a header for some size and then dynamically create a bytes.Buffer with the wrong pixel size and point the decoder to it.",
			"disapproval": false,
			"date": "2013-03-15 17:15:23.936020",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"fullung@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/22 16:30:40, r wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=7f837c455456 ***\n> image/gif: reject a GIF image if frame bounds larger than image bounds\n\nTestBounds doesn't like multiple -cpu values:\n\n=== RUN TestDecode\n--- PASS: TestDecode (0.00 seconds)\n=== RUN TestBounds\n--- PASS: TestBounds (0.00 seconds)\n=== RUN TestDecode-2\n--- PASS: TestDecode-2 (0.00 seconds)\n=== RUN TestBounds-2\n--- FAIL: TestBounds-2 (0.00 seconds)\nreader_test.go:112: got gif: frame bounds larger than image bounds, want gif: too much image data\n=== RUN TestDecode-4\n--- PASS: TestDecode-4 (0.00 seconds)\n=== RUN TestBounds-4\n--- FAIL: TestBounds-4 (0.00 seconds)\nreader_test.go:112: got gif: frame bounds larger than image bounds, want gif: too much image data\nFAIL\nFAIL\timage/gif\t0.029s",
			"disapproval": false,
			"date": "2013-03-25 07:25:44.032790",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure thing, will put the gif inside of reader_test.go, but not until Tuesday.",
			"disapproval": false,
			"date": "2013-03-15 17:51:55.556440",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode352\nsrc/pkg/image/gif/reader.go:352: width = d.width\nBrowsers take a liberal view of GIFs and try to decode what can be decoded safely and ignore what can't. I think Go users expect it to do the same. When setting m.Pix below, I check to see if precisely the right amount of pixel data arrived. If not, I leave the frame set to all zeros and throw away the pixel data from the file that does not match the bounds.",
			"disapproval": false,
			"date": "2013-03-15 21:27:02.542190",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode185\nsrc/pkg/image/gif/reader.go:185: if pix, err = ioutil.ReadAll(lzwr); err != nil {\nRevert this change from io.ReadFull to ioutil.ReadAll. ReadAll is less efficient if you already know the number of bytes to expect, and using ReadAll here means that the m.Pix created by image.NewPaletted is simply garbage to be collected.\n\nIf you're concerned about the malloc requirements of large images, then that's a bigger issue, as issue 5050 discusses. But this does not fix issue 5050. Please drop that line from the CL description.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode339\nsrc/pkg/image/gif/reader.go:339: func (d *decoder) boundsFromDescriptor() (image.Rectangle, error) {\nIt seems to me that you can revert this function signature change, and return *image.Paletted instead of image.Rectangle.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode349\nsrc/pkg/image/gif/reader.go:349: // Gif89: \"Each image must fit within the\n// The GIF89a spec Section 20 (Image Descriptor) says: \"Each image etc\".\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode352\nsrc/pkg/image/gif/reader.go:352: width = d.width\nOn 2013/03/15 21:27:02, jeff.allen wrote:\n> Browsers take a liberal view of GIFs and try to decode what can be decoded\n> safely and ignore what can't.\n\nCan you point to where e.g. giflib does this clamp-to-bounds?\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode357\nsrc/pkg/image/gif/reader.go:357: return image.Rect(left, top, left+width, top+height), nil\nDo you need to clamp left and top as well? Would it be better to use the image.Rectangle.Intersect method?",
			"disapproval": false,
			"date": "2013-03-18 01:49:49.784270",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go\nFile src/pkg/image/gif/reader_test.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go#newcode8\nsrc/pkg/image/gif/reader_test.go:8: func TestDecodeGifError(t *testing.T) {\ns/Gif/GIF/, but even better is dropping GIF entirely. We're in package gif. It's redundant.\n\nfunc TestBoundsClamping(t *testing.T) {\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go#newcode9\nsrc/pkg/image/gif/reader_test.go:9: r, err := os.Open(\"testdata/issue5050.gif\")\ns/r/f/ is traditional.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go#newcode24\nsrc/pkg/image/gif/reader_test.go:24: // on width/heigh of subsequent frames\nTypo in \"height\". Also, add a full stop to complete the sentence.",
			"disapproval": false,
			"date": "2013-03-18 01:53:12.807320",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode185\nsrc/pkg/image/gif/reader.go:185: if pix, err = ioutil.ReadAll(lzwr); err != nil {\nOn 2013/03/18 01:49:49, nigeltao wrote:\n> Revert this change from io.ReadFull to ioutil.ReadAll. ReadAll is less efficient\n> if you already know the number of bytes to expect, and using ReadAll here means\n> that the m.Pix created by image.NewPaletted is simply garbage to be collected.\n> \n> If you're concerned about the malloc requirements of large images, then that's a\n> bigger issue, as issue 5050 discusses. But this does not fix issue 5050. Please\n> drop that line from the CL description.\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode339\nsrc/pkg/image/gif/reader.go:339: func (d *decoder) boundsFromDescriptor() (image.Rectangle, error) {\nOn 2013/03/18 01:49:49, nigeltao wrote:\n> It seems to me that you can revert this function signature change, and return\n> *image.Paletted instead of image.Rectangle.\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode349\nsrc/pkg/image/gif/reader.go:349: // Gif89: \"Each image must fit within the\nOn 2013/03/18 01:49:49, nigeltao wrote:\n> // The GIF89a spec Section 20 (Image Descriptor) says: \"Each image etc\".\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode352\nsrc/pkg/image/gif/reader.go:352: width = d.width\ngiflib does not clamp. For the gif in issue 5050, it tries to allocate 18446744073698482932 bytes, and malloc returns NULL.\n\nhttp://trac.webkit.org/browser/trunk/Source/WebCore/platform/image-decoders/gif/GIFImageReader.cpp?rev=131831#L731 shows how webkit does it. There are lots of workarounds for invalid width/height, but none do clamping. The image is read in row by row, and the pixel data is passed to the UI layer row by row, so the maximum exposure they have to an evil GIF is 2^16 = 65536 bytes. The UI layer may or may not protect itself some other way, dunno.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode357\nsrc/pkg/image/gif/reader.go:357: return image.Rect(left, top, left+width, top+height), nil\nOn 2013/03/18 01:49:49, nigeltao wrote:\n> Do you need to clamp left and top as well? Would it be better to use the\n> image.Rectangle.Intersect method?\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go\nFile src/pkg/image/gif/reader_test.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go#newcode8\nsrc/pkg/image/gif/reader_test.go:8: func TestDecodeGifError(t *testing.T) {\nOn 2013/03/18 01:53:12, nigeltao wrote:\n> s/Gif/GIF/, but even better is dropping GIF entirely. We're in package gif. It's\n> redundant.\n> \n> func TestBoundsClamping(t *testing.T) {\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go#newcode9\nsrc/pkg/image/gif/reader_test.go:9: r, err := os.Open(\"testdata/issue5050.gif\")\nOn 2013/03/18 01:53:12, nigeltao wrote:\n> s/r/f/ is traditional.\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader_test.go#newcode24\nsrc/pkg/image/gif/reader_test.go:24: // on width/heigh of subsequent frames\nOn 2013/03/18 01:53:12, nigeltao wrote:\n> Typo in \"height\". Also, add a full stop to complete the sentence.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-19 09:37:10.576050",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've separated checking for too much / too little image data (compared to the declared image bounds) out as https://codereview.appspot.com/7938043\n\nI figured it was easier to do the blockReader EOF changes myself than iterate over e-mail.\n\nThis CL can then become just checking that each image's bounds is within the overall bounds.",
			"disapproval": false,
			"date": "2013-03-21 05:08:06.741930",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-19 10:01:15.226980",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go\nFile src/pkg/image/gif/reader_test.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode8\nsrc/pkg/image/gif/reader_test.go:8: // a gif with two frames, where the second frame has been tweaked\n// bigGIF is a GIF image with two frames, etc.\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode9\nsrc/pkg/image/gif/reader_test.go:9: // to have a width/height that's higher\nHigher than what?\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode10\nsrc/pkg/image/gif/reader_test.go:10: var bigGif = []byte{\nGo capitalization is s/Gif/GIF/.\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode27\nsrc/pkg/image/gif/reader_test.go:27: 0x02, 0x04, 0x8c, 0x8f, 0x19, 0x05, 0x00, // lzw pixels\nIn this case, the lzw-compressed form of the 16 pixels fit into a single block (it is less than 256 bytes). What if frame 2 was (0,0 - 4000,4000) and not very compressible? Does DecodeAll still do something reasonable?\n\nSimilarly, this oversized frame is also the last frame in the GIF. What if there was a frame 3 after this? Does DecodeAll still do something reasonable?\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode36\nsrc/pkg/image/gif/reader_test.go:36: t.Errorf(\"got error %v\", err)\nChange Errorf to Fatalf. If DecodeAll fails, then there's no point continuing, and you'll probably crash otherwise.",
			"disapproval": false,
			"date": "2013-03-20 02:57:45.308830",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/9001/src/pkg/image/gif/reader.go#newcode352\nsrc/pkg/image/gif/reader.go:352: width = d.width\nOn 2013/03/19 09:37:10, jeff.allen wrote:\n> giflib does not clamp. For the gif in issue 5050, it tries to allocate\n> 18446744073698482932 bytes, and malloc returns NULL.\n\nIf neither giflib or WebKit clamp, then I'm not sure if Go should. For example, the eog program (which presumably uses giflib) on my Ubuntu desktop just shows an error on the GIF from issue 5050; it does not fall back on the first frame like WebKit does. The spec's \"each image must fit\" suggests that the GIF in issue 5050 is an invalid GIF, and I don't read it as a decoder must try to fix up an invalid image.\n\nPerhaps the right thing to do here is\nif bounds != bounds.Intersect(d.logicalScreen) {\n  return nil, fmt.Errorf(\"gif: frame bounds is larger than image bounds\")\n}\ninstead of clamping and continuing without error.",
			"disapproval": false,
			"date": "2013-03-20 03:55:05.958550",
			"approval": false
		},
		{
			"sender": "jra@nella.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is now a philosophical question, but unlike most, the answer\r\nis clear. Should we be liberal, like a browser, or strict? The answer has\r\nalways been clear for questions like this before. The std lib should do the\r\nsimplest most standard thing. Users can always fork and hack images/* if\r\ntheir app needs to be more like a browser.\r\n",
			"disapproval": false,
			"date": "2013-03-20 07:15:51.151110",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go\nFile src/pkg/image/gif/reader_test.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode8\nsrc/pkg/image/gif/reader_test.go:8: // a gif with two frames, where the second frame has been tweaked\nOn 2013/03/20 02:57:45, nigeltao wrote:\n> // bigGIF is a GIF image with two frames, etc.\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode9\nsrc/pkg/image/gif/reader_test.go:9: // to have a width/height that's higher\nOn 2013/03/20 02:57:45, nigeltao wrote:\n> Higher than what?\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode10\nsrc/pkg/image/gif/reader_test.go:10: var bigGif = []byte{\nOn 2013/03/20 02:57:45, nigeltao wrote:\n> Go capitalization is s/Gif/GIF/.\n\nDone.\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode27\nsrc/pkg/image/gif/reader_test.go:27: 0x02, 0x04, 0x8c, 0x8f, 0x19, 0x05, 0x00, // lzw pixels\nThe new tests (next CL update) now check for bounds > data size, bounds < data size. So I think your first question is covered. See if you agree.\n\nBounds checking happens on a per-frame basis, in a loop that processes each section without respect to the previous or future sections, only with respect to the header. So I see no interest in testing other scenarios, like your second question.\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode36\nsrc/pkg/image/gif/reader_test.go:36: t.Errorf(\"got error %v\", err)\nOn 2013/03/20 02:57:45, nigeltao wrote:\n> Change Errorf to Fatalf. If DecodeAll fails, then there's no point continuing,\n> and you'll probably crash otherwise.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-20 10:23:06.212080",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, jra@nella.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-20 10:23:13.826540",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go\nFile src/pkg/image/gif/reader_test.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/21001/src/pkg/image/gif/reader_test.go#newcode27\nsrc/pkg/image/gif/reader_test.go:27: 0x02, 0x04, 0x8c, 0x8f, 0x19, 0x05, 0x00, // lzw pixels\nOn 2013/03/20 10:23:06, jeff.allen wrote:\n> The new tests (next CL update) now check for bounds > data size, bounds < data\n> size. So I think your first question is covered. See if you agree.\n> \n> Bounds checking happens on a per-frame basis, in a loop that processes each\n> section without respect to the previous or future sections, only with respect to\n> the header. So I see no interest in testing other scenarios, like your second\n> question.\n\nThe per-frame basis doesn't invalidate the question if you wanted to continue processing after encountering an invalid frame: unread blocks from frame F remain in the byte stream and would be mistakenly interpreted as part of frame F+1. But as you've changed it to error out early, I'm not so concerned.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader.go#newcode187\nsrc/pkg/image/gif/reader.go:187: // try one more read to find out if we got it all\nGo comments should be complete sentences: start with a capital letter and end with a full stop.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader.go#newcode188\nsrc/pkg/image/gif/reader.go:188: if _, err := lzwr.Read([]byte{}); err != io.EOF {\nA nil slice is equivalent to a []byte{}; they both have zero length. This could be lzwr.Read(nil).\n\nBut a zero-length read isn't guaranteed to return io.EOF, even if there is no more data.\n\nInstead, I think you should read into a 1-byte buffer (say d.tmp[:1]) and expect to get back (0, EOF). This replaces the \"There should be a \"0\" block remaining; drain that\" check next, and you should also update the doc comment on type blockReader.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader.go#newcode349\nsrc/pkg/image/gif/reader.go:349: if bounds != bounds.Intersect(d.logicalScreen) {\nDo we need a (redundant) d.logicalScreen field? This could just be\nif bounds != bounds.Intersect(image.Rect(0, 0, d.width, d.height)) {\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go\nFile src/pkg/image/gif/reader_test.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go#newcode8\nsrc/pkg/image/gif/reader_test.go:8: // A simple GIF that we can modify to test different scenarios.\nGo doc comments begin with the name of the thing being commented upon. Thus:\n\n// theGif is a simple GIF that etc.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go#newcode15\nsrc/pkg/image/gif/reader_test.go:15: // frame 1 (0,0 - 1,1)\nI would actually start counting from zero: frame 0 and frame 1, not frame 1 and frame 2.\n\nBut I think you only need one frame. See below.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go#newcode35\nsrc/pkg/image/gif/reader_test.go:35: r := bytes.NewReader(b)\nJust inline r into the next line.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go#newcode42\nsrc/pkg/image/gif/reader_test.go:42: t.Fatalf(\"expected %v, got %v\", exp, estr)\nThe usual Go language (and order) is got and want, not expected and got.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go#newcode50\nsrc/pkg/image/gif/reader_test.go:50: // make the bounds too big, just by one\nComments should be complete sentences.\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go#newcode51\nsrc/pkg/image/gif/reader_test.go:51: theGIF[32] = 2\nOffset 32 is the first frame. If you're expecting to error out in processing the first frame, then you don't actually need a second frame; removing it should simplify the test.\n\nPerhaps something like: theGIF is a valid 2x1 GIF with one 2x1 frame. Decoding it should return no error. Changing that frame's bounds to 1x1 should result in an error (\"too much data\"). Changing that frame's bounds to 3x1 should result in an error (\"frame bounds bigger\"). Keeping that frame's bounds as 2x1 but substituting only 1 pixel of LZW-compressed data should also result in an error (translate io.ErrUnexpectedEOF to \"not enough data\").\n\nhttps://codereview.appspot.com/7602045/diff/32001/src/pkg/image/gif/reader_test.go#newcode57\nsrc/pkg/image/gif/reader_test.go:57: // a huge memory allocation and associated problems\nWell, you're not really testing that a huge memory allocation was not made...",
			"disapproval": false,
			"date": "2013-03-21 00:31:03.867070",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, jra@nella.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-21 08:21:11.992860",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/38001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/38001/src/pkg/image/gif/reader.go#newcode343\nsrc/pkg/image/gif/reader.go:343: return nil, errors.New(\"gif: frame bounds is larger than image bounds\")\ns/is/are/\nor just\ns/is //",
			"disapproval": false,
			"date": "2013-03-21 16:28:17.452550",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please update the CL description to\n\nimage/gif: reject a GIF image if frame bounds larger than image bounds.\n\nYou'll also need to update reader_test.go when you \"hg sync\".",
			"disapproval": false,
			"date": "2013-03-22 03:44:45.011060",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7602045/diff/45001/src/pkg/image/gif/reader_test.go\nFile src/pkg/image/gif/reader_test.go (right):\n\nhttps://codereview.appspot.com/7602045/diff/45001/src/pkg/image/gif/reader_test.go#newcode88\nsrc/pkg/image/gif/reader_test.go:88: // theGIF is a simple GIF that we can modify to test different scenarios.\nthe 'the' is not idiomatic in standard tests. how about 'testGIF'?\n\nhttps://codereview.appspot.com/7602045/diff/45001/src/pkg/image/gif/reader_test.go#newcode107\nsrc/pkg/image/gif/reader_test.go:107: var estr string\ns/estr/got/",
			"disapproval": false,
			"date": "2013-03-22 15:28:20.021030",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, jra@nella.org, r@golang.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-22 15:04:01.536380",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, jra@nella.org, r@golang.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-22 15:31:18.176940",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthanks",
			"disapproval": false,
			"date": "2013-03-22 16:28:22.759670",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7f837c455456 ***\n\nimage/gif: reject a GIF image if frame bounds larger than image bounds\n\nThe GIF89a spec says: \"Each image must fit within the\nboundaries of the Logical Screen, as defined in the\nLogical Screen Descriptor.\" Also, do not accept\nGIFs which have too much data for the image size.\n\nR=nigeltao, jra, r\nCC=bradfitz, golang-dev\nhttps://codereview.appspot.com/7602045\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2013-03-22 16:30:40.069490",
			"approval": false
		},
		{
			"sender": "jra@nella.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What is this \"multi threading\" you're talking about and what's the big deal\r\nabout it anyway? :)\r\n\r\nWill post a CL tomorrow to fix this, sorry. (It should be as simple as\r\nmoving testGIF into local scope.)\r\n",
			"disapproval": false,
			"date": "2013-03-25 07:32:38.695090",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"fullung@gmail.com",
				"nigeltao@golang.org",
				"jra@nella.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/03/25 07:32:38, jra wrote:\n> What is this \"multi threading\" you're talking about and what's the big deal\n> about it anyway? :)\n\nAt some point in the past there was a discussion with Dmitry which lead to me the conclusion that I should include the following in my stress tests:\n\ngo test -v -short -cpu 1,2,4 std\ngo test -v -cpu 1,2,4 std\n\nThese tend to turn up tests that weren't written to run more than once in the same process.\n\nI think there's value in this, but given that two separate packages tripped over this in the last few days, it seems like we need to do something to help people realise sooner when they break this test mode. That's probably a discussion for a separate thread.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-03-25 07:38:13.851200",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7808045\r\n\r\nPTAL.\r\n\r\nOn Mon, Mar 25, 2013 at 6:38 PM,  <fullung@gmail.com> wrote:\r\n> Hello\r\n>\r\n>\r\n> On 2013/03/25 07:32:38, jra wrote:\r\n>>\r\n>> What is this \"multi threading\" you're talking about and what's the big\r\n>\r\n> deal\r\n>>\r\n>> about it anyway? :)\r\n>\r\n>\r\n> At some point in the past there was a discussion with Dmitry which lead\r\n> to me the conclusion that I should include the following in my stress\r\n> tests:\r\n>\r\n> go test -v -short -cpu 1,2,4 std\r\n> go test -v -cpu 1,2,4 std\r\n>\r\n> These tend to turn up tests that weren't written to run more than once\r\n> in the same process.\r\n>\r\n> I think there's value in this, but given that two separate packages\r\n> tripped over this in the last few days, it seems like we need to do\r\n> something to help people realise sooner when they break this test mode.\r\n> That's probably a discussion for a separate thread.\r\n>\r\n> Cheers\r\n>\r\n> Albert\r\n>\r\n> https://codereview.appspot.com/7602045/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-25 09:23:37.881310",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Albert,\r\n\r\nI would be grateful if you would lead off the discussion about testing\r\nwith multiple cpu values. I see this as a question of test repeatably,\r\nie, go test -cpu=1,1,1. I'm sure we have some gaps in the std library.\r\n\r\nCheers\r\n\r\nDave\r\n\r\nOn Mon, Mar 25, 2013 at 6:38 PM,  <fullung@gmail.com> wrote:\r\n> Hello\r\n>\r\n>\r\n> On 2013/03/25 07:32:38, jra wrote:\r\n>>\r\n>> What is this \"multi threading\" you're talking about and what's the big\r\n>\r\n> deal\r\n>>\r\n>> about it anyway? :)\r\n>\r\n>\r\n> At some point in the past there was a discussion with Dmitry which lead\r\n> to me the conclusion that I should include the following in my stress\r\n> tests:\r\n>\r\n> go test -v -short -cpu 1,2,4 std\r\n> go test -v -cpu 1,2,4 std\r\n>\r\n> These tend to turn up tests that weren't written to run more than once\r\n> in the same process.\r\n>\r\n> I think there's value in this, but given that two separate packages\r\n> tripped over this in the last few days, it seems like we need to do\r\n> something to help people realise sooner when they break this test mode.\r\n> That's probably a discussion for a separate thread.\r\n>\r\n> Cheers\r\n>\r\n> Albert\r\n>\r\n> https://codereview.appspot.com/7602045/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-25 09:30:15.600650",
			"approval": false
		}
	],
	"owner_email": "jeff.allen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jeff.allen",
	"subject": "code review 7602045: image/gif: reject a GIF image if frame bounds larger th...",
	"created": "2013-03-15 16:02:23.908180",
	"patchsets": [
		1,
		2001,
		6001,
		9001,
		18002,
		21001,
		29001,
		32001,
		38001,
		45001,
		49001,
		52001
	],
	"modified": "2013-03-26 08:29:08.547400",
	"closed": true,
	"issue": 7602045
}