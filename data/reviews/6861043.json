{
	"description": "spec: clarify use of built-ins in go/defer statements\n\n1) Built-ins are restricted like for expression statements.\n   This documents the status quo.\n\n2) Calls cannot be parenthesized. The spec is not clear. gccgo\n   permits it already, gc doesn't. Be explicit in the spec.\n\n Fixes issue 4462.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"r@golang.org",
		"ken@golang.org",
		"lvd@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=529f67226610 ***\n\nspec: clarify use of built-ins in go/defer statements\n\n1) Built-ins are restricted like for expression statements.\n   This documents the status quo.\n\n2) Calls cannot be parenthesized. The spec is not clear. gccgo\n   permits it already, gc doesn't. Be explicit in the spec.\n\n Fixes issue 4462.\n\nR=rsc, iant, r, ken, lvd\nCC=golang-dev\nhttps://codereview.appspot.com/6861043",
			"disapproval": false,
			"date": "2012-11-29 19:46:36.653000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree about (1).\nI'm not sure we should do (2).\n\nAn expression statement is an arbitrary expression, but the argument to defer/go is not, so I don't think there's a strong parallel. Longer reply on the go/parser CL.",
			"disapproval": false,
			"date": "2012-11-29 15:12:39.953480",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org, r@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-29 01:09:33.357020",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html#newcode4445\ndoc/go_spec.html:4445: Calls of built-in functions are restricted like for\ns/like/as/\n\nhttps://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html#newcode4767\ndoc/go_spec.html:4767: The expression must be a function or method call; it may be parenthesized.\nWhy did you take out method call for \"go\" but leave it in for \"defer\"?\n\nhttps://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html#newcode4768\ndoc/go_spec.html:4768: Calls of built-in functions are restricted like for\ns/like/as/",
			"disapproval": false,
			"date": "2012-11-29 14:40:53.734460",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-29 19:37:47.755470",
			"approval": true
		},
		{
			"sender": "lvd@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Nov 29, 2012 at 4:12 PM, <rsc@golang.org> wrote:\r\n\r\n> I agree about (1).\r\n> I'm not sure we should do (2).\r\n>\r\n> An expression statement is an arbitrary expression,\r\n\r\n\r\nthe spec <http://golang.org/ref/spec#Expression_statements> says\r\notherwise: Function calls, method calls, and receive operations can appear\r\nin statement context.\r\n\r\n\r\n> but the argument to\r\n> defer/go is not, so I don't think there's a strong parallel. Longer\r\n> reply on the go/parser CL.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6861043/<https://codereview.appspot.com/6861043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-29 15:36:07.509310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> the spec says otherwise: Function calls, method calls, and receive\r\n> operations can appear in statement context.\r\n\r\nFair enough, but there's still nothing special about the evaluation of\r\nan expression statement. On the other hand there are very special\r\nrules for defer and call and they are fundamentally based on the\r\nargument being a call. I don't think it's bad for the syntax to\r\nreinforce that.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-11-29 15:55:29.948140",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n- gri\n\nhttps://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html#newcode4445\ndoc/go_spec.html:4445: Calls of built-in functions are restricted like for\nOn 2012/11/29 14:40:53, iant wrote:\n> s/like/as/\n\nDone.\n\nhttps://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html#newcode4767\ndoc/go_spec.html:4767: The expression must be a function or method call; it may be parenthesized.\nOn 2012/11/29 14:40:53, iant wrote:\n> Why did you take out method call for \"go\" but leave it in for \"defer\"?\n\nI took it out in the initial description (to make it similar to the one here, line 4755). This section, which details the rules is identical for both go and defer.\nOr to summarize: Now the prose for go and defer is matching, before it wasn't.\n\nhttps://codereview.appspot.com/6861043/diff/4001/doc/go_spec.html#newcode4768\ndoc/go_spec.html:4768: Calls of built-in functions are restricted like for\nOn 2012/11/29 14:40:53, iant wrote:\n> s/like/as/\n\nDone.",
			"disapproval": false,
			"date": "2012-11-29 19:28:46.185670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6861043/diff/7003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6861043/diff/7003/doc/go_spec.html#newcode4446\ndoc/go_spec.html:4446: <a href=\"#Expression_statements\">Expression statements</a>.\ns/E/e/\n(in the text not the link)\n\nhttps://codereview.appspot.com/6861043/diff/7003/doc/go_spec.html#newcode4768\ndoc/go_spec.html:4768: <a href=\"#Expression_statements\">Expression statements</a>.\ns/E/e/",
			"disapproval": false,
			"date": "2012-11-29 19:35:51.879440",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6861043: spec: clarify use of built-ins in go/defer statements",
	"created": "2012-11-29 01:07:35.071850",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		7003,
		15002
	],
	"modified": "2012-11-29 19:46:38.460750",
	"closed": true,
	"issue": 6861043
}