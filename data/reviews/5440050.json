{
	"description": "syscall: implement Syscall15\n\nFixes issue 2251.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"r@google.com",
		"edsrzf@gmail.com",
		"jp@webmaster.ms"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ha ha ha LGTM\n",
			"disapproval": false,
			"date": "2011-11-28 23:18:50.326206",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"jp@webmaster.ms",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9c49fd8294a5 ***\n\nsyscall: implement Syscall15\n\nFixes issue 2251.\n\nR=golang-dev, rsc\nCC=golang-dev, jp\nhttp://codereview.appspot.com/5440050",
			"disapproval": false,
			"date": "2011-11-28 23:24:26.123635",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"r@google.com",
				"edsrzf@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"jp@webmaster.ms",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/28 23:38:29, eds2 wrote:\n> I might be misremembering, but wasn't lack of escape analysis the\n> reason for not making Syscall variadic?\n> \n\nIt was memory allocation that we didn't want to pay for the call.\n\n> That is, if we replace various SyscallX with a single variadic Syscall\n> function, it will still be about as efficient, right? Especially since\n> Proc.Call is variadic already.\n\nYou are not suppose to use Proc.Call if you want to be \"efficient\". We use it during tests. Something quick and dirty.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-28 23:43:57.510681",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"jp@webmaster.ms",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/28 23:18:50, rsc wrote:\n> ha ha ha LGTM\n\nWell. I really need it: http://goo.gl/H6JaD. And someone got to do it.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-28 23:27:35.924668",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"alex.brainman@gmail.com",
				"r@google.com",
				"edsrzf@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440050/diff/8/src/pkg/runtime/windows/amd64/sys.s\nFile src/pkg/runtime/windows/amd64/sys.s (right):\n\nhttp://codereview.appspot.com/5440050/diff/8/src/pkg/runtime/windows/amd64/sys.s#newcode7\nsrc/pkg/runtime/windows/amd64/sys.s:7: #define maxargs 15\nPut an even number here.\n16, not 15.\nStack frame of API call must be 16-byte aligned.\nAlthough it is OK to leave it unaligned in most cases, sometimes it causes crash (for example, on calling crypto api functions which uses XMM registers inside counting on the stack pointer is aligned).\n\nOr, better, make the alignment explicit by putting \"AND SP, -15\" after \"SUBQ $(maxargs*8), SP\"\n\nI am not 100% sure was the alignment issue broken before or after the patch (as there is also \"PUSHQ CX\"), but it must be broken in one of two cases for sure.",
			"disapproval": false,
			"date": "2011-11-29 05:17:39.795089",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 29, 2011 at 12:43 PM,  <alex.brainman@gmail.com> wrote:\n> It was memory allocation that we didn't want to pay for the call.\n\nRight, but I don't think variadic calls allocate anymore.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-11-28 23:45:12.325358",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 29, 2011 at 12:44 PM, Evan Shaw <edsrzf@gmail.com> wrote:\n> Right, but I don't think variadic calls allocate anymore.\n\n...as long as the memory doesn't escape, that is.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-11-28 23:46:09.519116",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"r@google.com",
				"edsrzf@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/29 05:17:39, jp wrote:\n> Put an even number here.\n> 16, not 15.\n\nhttp://codereview.appspot.com/5445051\n\nI think it is simple enough, but if you want something different, send a CL.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-29 05:29:15.404266",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"alex.brainman@gmail.com",
				"r@google.com",
				"edsrzf@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, ok.\nI haven't seen that it had been already fixed in another CL.\n\nOn 2011/11/29 05:29:15, brainman wrote:\n> On 2011/11/29 05:17:39, jp wrote:\n> > Put an even number here.\n> > 16, not 15.\n> \n> http://codereview.appspot.com/5445051\n> \n> I think it is simple enough, but if you want something different, send a CL.\n> \n> Alex",
			"disapproval": false,
			"date": "2011-11-29 07:56:07.089599",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 29, 2011 at 12:46 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> Even if they did, by the time we get to 15 arguments, you could argue variadic would do the job. The catch is the difficulty of writing a variadic function in assembler.\n\nI'm not super familiar with this code, but it looks to me like none of\nthe SyscallX functions are written in assembly. They're just C\nwrappers around runtime\u00b7asmstdcall, which is already able to handle a\nvariable number of arguments.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-11-28 23:58:52.363972",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what, no hex?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-28 23:29:23.571442",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"jp@webmaster.ms",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/28 23:29:23, r2 wrote:\n> what, no hex?\n> \n\nDo not understand your question. What did I miss, Rob?\n\nAlex",
			"disapproval": false,
			"date": "2011-11-28 23:33:44.144516",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 28, 2011, at 3:33 PM, alex.brainman@gmail.com wrote:\n\n> On 2011/11/28 23:29:23, r2 wrote:\n>> what, no hex?\n> \n> \n> Do not understand your question. What did I miss, Rob?\n> \n> Alex\n> \n> http://codereview.appspot.com/5440050/\n\na8, a9, aA, aB, aC\n\nbut please don't do that.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-28 23:35:47.763755",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jp@webmaster.ms",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: jp@webmaster.ms),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-28 23:17:18.800518",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 28, 2011, at 3:44 PM, Evan Shaw wrote:\n\n> On Tue, Nov 29, 2011 at 12:43 PM,  <alex.brainman@gmail.com> wrote:\n>> It was memory allocation that we didn't want to pay for the call.\n> \n> Right, but I don't think variadic calls allocate anymore.\n\nEven if they did, by the time we get to 15 arguments, you could argue variadic would do the job. The catch is the difficulty of writing a variadic function in assembler.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-11-28 23:46:27.889438",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I might be misremembering, but wasn't lack of escape analysis the\nreason for not making Syscall variadic?\n\nThat is, if we replace various SyscallX with a single variadic Syscall\nfunction, it will still be about as efficient, right? Especially since\nProc.Call is variadic already.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-11-28 23:38:29.393606",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"r@google.com",
				"edsrzf@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/28 23:45:12, eds2 wrote:\n> Right, but I don't think variadic calls allocate anymore.\n> \n\nI think they do. This program\n\npackage main\n\nfunc printthem(a ...uint32) {\n\tprintln(a[0])\n}\n\nfunc main() {\n\tprintthem(1, 2)\n}\n\ncompiles into\n\nTEXT\tmain.printthem+0(SB),$8\nMOVL\t44(FS),CX\nMOVL\t(CX),CX\nCMPL\tSP,(CX)\nJHI\t,401019\nMOVL\t$0,DX\nMOVL\t$12,AX\nCALL\t,4019b8+runtime.morestack\nSUBL\t$8,SP\nLEAL\tmain.a+12(FP),BX\nCMPL\t4(BX),$0\nJHI\t,40102b\nCALL\t,4094e5+runtime.panicindex\nMOVL\t(BX),BX\nMOVL\t(BX),BP\nMOVL\t$0,CX\nMOVL\tBP,(SP)\nMOVL\tCX,4(SP)\nCALL\t,4075b4+runtime.printint\nCALL\t,4077a2+runtime.printnl\nADDL\t$8,SP\nRET\t,\nTEXT\tmain.main+0(SB),$24\nMOVL\t44(FS),CX\nMOVL\t(CX),CX\nCMPL\tSP,(CX)\nJHI\t,40105c\nMOVL\t$0,DX\nMOVL\t$0,AX\nCALL\t,4019b8+runtime.morestack\nSUBL\t$24,SP\nMOVL\t$8,(SP)\nCALL\t,4031d9+runtime.new\nMOVL\t4(SP),CX\nLEAL\tmain.statictmp_0005+0(SB),SI\nMOVL\tCX,DI\nCLD\t,\nMOVSL\t,\nMOVSL\t,\nMOVL\t$2,main.autotmp_0004+16(SP)\nMOVL\t$2,main.autotmp_0004+20(SP)\nMOVL\tCX,main.autotmp_0004+12(SP)\nLEAL\tmain.autotmp_0004+12(SP),SI\nLEAL\t(SP),DI\nCLD\t,\nMOVSL\t,\nMOVSL\t,\nMOVSL\t,\nCALL\t,401000+main.printthem\nADDL\t$24,SP\nRET\t,\n\nAs you can see, it still calls runtime.new to store printthem arguments at call site.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-30 03:31:35.291244",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 18:44, Evan Shaw <edsrzf@gmail.com> wrote:\n> Right, but I don't think variadic calls allocate anymore.\n\nA variadic Printf call will not allocate, because the\nGo compiler can see Printf's body and see that it\ndoes not retain a reference to the slice.  However,\nthe Go compiler cannot see the body of assembly\nfunctions like Syscall, so that would still allocate.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-30 15:55:08.278137",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5440050: syscall: implement Syscall15",
	"created": "2011-11-28 23:07:11.945413",
	"patchsets": [
		1,
		2001,
		4001,
		8
	],
	"modified": "2011-11-30 03:31:35.409276",
	"closed": true,
	"issue": 5440050
}