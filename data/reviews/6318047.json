{
	"description": "encoding/json: simplify (*decodeState).indirect\n\nRemoves an incorrect code comment and some superfluous variables.\n\nThe comment I removed says that struct fields which implement\nUnmarshaler must be pointers, even if they're in an addressable\nstruct. That's not the case, and there's already a test in decode_test.go\nthat demonstrates as much.\n\nEncoding/json has quite a few assignments of reflect.Values to extra\nvariables \u2013 things like \"iv := v\" when there's no need to make a copy. I\nthink these are left over from a previous version of the reflect API. If they\naren't wanted, I wouldn't mind going through the package and getting\nrid of the rest of them.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "micah.stetson@gmail.com",
			"recipients": [
				"micah.stetson@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-20 23:32:17.901562",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThe other cleanup sounds fine too (in a separate CL). You're right that it's left over from when json used the reflect API that used type switches on reflect.Type.",
			"disapproval": false,
			"date": "2012-06-25 20:02:46.096766",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4838f6ea3ae8 ***\n\nencoding/json: simplify (*decodeState).indirect\n\nRemoves an incorrect code comment and some superfluous variables.\n\nThe comment I removed says that struct fields which implement\nUnmarshaler must be pointers, even if they're in an addressable\nstruct. That's not the case, and there's already a test in decode_test.go\nthat demonstrates as much.\n\nEncoding/json has quite a few assignments of reflect.Values to extra\nvariables \u2013 things like \"iv := v\" when there's no need to make a copy. I\nthink these are left over from a previous version of the reflect API. If they\naren't wanted, I wouldn't mind going through the package and getting\nrid of the rest of them.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6318047\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-25 20:03:08.821679",
			"approval": false
		}
	],
	"owner_email": "micah.stetson@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mstetson",
	"subject": "code review 6318047: encoding/json: simplify (*decodeState).indirect",
	"created": "2012-06-20 23:30:34.766104",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-06-25 20:03:08.821679",
	"closed": false,
	"issue": 6318047
}