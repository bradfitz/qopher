{
	"description": "go spec: clean up section on selectors\n\n- point out difference between selectors and qualified identifiers\n- differentiate between illegal selectors and run-time panics\n- use \"indirect\" as opposed to \"dereference\" consistently\n- add extra links\n\nFixes issue 3779.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6326059/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6326059/diff/5001/doc/go_spec.html#newcode2392\ndoc/go_spec.html:2392: <code>nil</code> was assigned to <code>x</code>, <code>x.f</code>\nOn 2012/06/26 20:04:04, iant wrote:\n> How about \"If x is of pointer or interface type, and has the value nil, x.f\n> causes a run-time panic.\"\n\nDone.\n\nhttp://codereview.appspot.com/6326059/diff/5001/doc/go_spec.html#newcode2398\ndoc/go_spec.html:2398: Selectors automatically <a href=\"#Address_operators\">indirect</a>\nOn 2012/06/26 20:04:04, iant wrote:\n> I don't think \"indirect\" is a transitive verb (though I see that we already use\n> it as such in the \"Method Expressions\" section).  I think this sentence was fine\n> as it was.\n\nAdjusted.\n\nNote: This is the only place where we use \"dereference\". Should we use it instead of indirection everywhere?",
			"disapproval": false,
			"date": "2012-06-26 20:13:01.476482",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-26 18:59:46.466122",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/6326059/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6326059/diff/5001/doc/go_spec.html#newcode2392\ndoc/go_spec.html:2392: <code>nil</code> was assigned to <code>x</code>, <code>x.f</code>\nHow about \"If x is of pointer or interface type, and has the value nil, x.f causes a run-time panic.\"\n\nhttp://codereview.appspot.com/6326059/diff/5001/doc/go_spec.html#newcode2398\ndoc/go_spec.html:2398: Selectors automatically <a href=\"#Address_operators\">indirect</a>\nI don't think \"indirect\" is a transitive verb (though I see that we already use it as such in the \"Method Expressions\" section).  I think this sentence was fine as it was.",
			"disapproval": false,
			"date": "2012-06-26 20:04:04.339562",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-26 20:21:43.494998",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6326059/diff/11001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6326059/diff/11001/doc/go_spec.html#newcode2392\ndoc/go_spec.html:2392: <code>nil</code>, <code>x.f</code> causes a\nOn 2012/06/27 14:24:09, rsc wrote:\n> s/x.f/assigning to, evaluating, or calling x.f/ ?\n> \n> Operations, not selectors, cause panics.\n> Things like &x.f or unsafe.Sizeof(x.f) are fine, for example.\n\ngood point. fixed.",
			"disapproval": false,
			"date": "2012-06-27 17:54:36.545234",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html#newcode2333\ndoc/go_spec.html:2333: For a primary expression <code>x</code> that is not a\nshould primary expression be a link?\n\nhttp://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html#newcode2348\ndoc/go_spec.html:2348: <a href=\"#Qualified_identifiers\">qualified identifiers</a>.\ndoes this explain x.y.z? what about if y is a pointer type?\n\nhttp://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html#newcode2393\ndoc/go_spec.html:2393: causes a <a href=\"#Run_time_panics\">run-time panic</a>.\nthat list feels incomplete. maybe just, any use of x.f causes a panic?",
			"disapproval": false,
			"date": "2012-06-27 18:14:21.422131",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6326059/diff/11001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6326059/diff/11001/doc/go_spec.html#newcode2392\ndoc/go_spec.html:2392: <code>nil</code>, <code>x.f</code> causes a\ns/x.f/assigning to, evaluating, or calling x.f/ ?\n\nOperations, not selectors, cause panics.\nThings like &x.f or unsafe.Sizeof(x.f) are fine, for example.",
			"disapproval": false,
			"date": "2012-06-27 14:24:08.987805",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-27 19:31:48.564095",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html#newcode2333\ndoc/go_spec.html:2333: For a primary expression <code>x</code> that is not a\nOn 2012/06/27 18:14:21, r wrote:\n> should primary expression be a link?\n\nDone.\n\nhttp://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html#newcode2348\ndoc/go_spec.html:2348: <a href=\"#Qualified_identifiers\">qualified identifiers</a>.\nOn 2012/06/27 18:14:21, r wrote:\n> does this explain x.y.z? what about if y is a pointer type?\n\nx here stands for an arbitrary primary expression, which might be x.y. So I think this should explain x.y.z (recursively).\n\nhttp://codereview.appspot.com/6326059/diff/14002/doc/go_spec.html#newcode2393\ndoc/go_spec.html:2393: causes a <a href=\"#Run_time_panics\">run-time panic</a>.\nOn 2012/06/27 18:14:21, r wrote:\n> that list feels incomplete. maybe just, any use of x.f causes a panic?\n\nAs rsc pointed out, e.g. unsafe.Sizeof(x.f) is safe. It seems like this is a form of \"use\". If the list is incomplete, we should just complete it.",
			"disapproval": false,
			"date": "2012-06-27 18:34:27.532395",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but i'm nervous.",
			"disapproval": false,
			"date": "2012-06-27 19:31:04.251452",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=eb24cee7f21b ***\n\ngo spec: clean up section on selectors\n\n- point out difference between selectors and qualified identifiers\n- differentiate between illegal selectors and run-time panics\n- use \"indirect\" as opposed to \"dereference\" consistently\n- add extra links\n\nFixes issue 3779.\n\nR=r, rsc, iant, ken\nCC=golang-dev\nhttp://codereview.appspot.com/6326059",
			"disapproval": false,
			"date": "2012-06-28 19:22:30.070698",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6326059: go spec: clean up section on selectors",
	"created": "2012-06-26 18:58:05.373853",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		5003,
		14002,
		15002,
		15003
	],
	"modified": "2012-06-28 19:22:31.915209",
	"closed": true,
	"issue": 6326059
}