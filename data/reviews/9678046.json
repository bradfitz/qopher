{
	"description": "runtime: remove unused field from Hchan\nRemove alignment logic as well, it's not respected by chanbuf() anyway.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"r@golang.org",
		"iant@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL fails on arm machines, 'fatal error: makechan: bad chan size'",
			"disapproval": false,
			"date": "2013-05-24 13:07:16.280410",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On more i5 linux/amd64 machine this appears to have made things a little slower\n\nlucky(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkChanUncontended               71           70   -0.14%\nBenchmarkChanContended                 71           71   -0.56%\nBenchmarkChanSync                     146          152   +4.11%\nBenchmarkChanProdCons0                147          156   +6.12%\nBenchmarkChanProdCons10                90           96   +5.95%\nBenchmarkChanProdCons100               69           70   +2.16%\nBenchmarkChanProdConsWork0            774          777   +0.39%\nBenchmarkChanProdConsWork10           713          719   +0.84%\nBenchmarkChanProdConsWork100          688          691   +0.44%\nBenchmarkChanCreation                 181          186   +2.76%\nBenchmarkChanSem                       62           64   +3.51%\n\nhttps://codereview.appspot.com/9678046/diff/5001/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/9678046/diff/5001/src/pkg/runtime/chan.c#newcode107\nsrc/pkg/runtime/chan.c:107: runtime\u00b7throw(\"makechan: bad chan size\");\nWill the compiled down to a constant ? ie, sizeof(*c) is known at compile time, as is MAXALIGN, so this could compile down to if (0) and be removed ? I guess I should check the output of the compiler.",
			"disapproval": false,
			"date": "2013-05-24 12:09:56.661380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-24 11:20:28.376320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I added back the uint8 elemalign field, and another uint8 _pad2 at the\r\nbottom to fix the alignment issues, but this CL still shows a\r\nperformance decrease of 5%, which is very confusing.\r\n\r\nOn Fri, May 24, 2013 at 11:15 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> I'm going to say no, but Minux may correct me. If there are 8 byte\r\n> wide operations, we probably handle them badly anyway (see 64bit\r\n> atomic problems).\r\n>\r\n> On Fri, May 24, 2013 at 11:13 PM,  <dvyukov@google.com> wrote:\r\n>> On 2013/05/24 13:07:16, dfc wrote:\r\n>>>\r\n>>> This CL fails on arm machines, 'fatal error: makechan: bad chan size'\r\n>>\r\n>>\r\n>> Does ARM has any instructions that require 8-byte alignment (double,\r\n>> 64-bit int operations, vector ops, etc)?\r\n>>\r\n>> https://codereview.appspot.com/9678046/\r\n",
			"disapproval": false,
			"date": "2013-05-24 13:16:39.263810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 13:27:43, dvyukov wrote:\n> Removed the check, PTAL\n\nResults from linux/arm chromebook\n\nlocalhost(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt | less\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkChanUncontended              557          533   -4.31%\nBenchmarkChanContended                546          533   -2.38%\nBenchmarkChanSync                    1052         1190  +13.12%\nBenchmarkChanProdCons0               1076         1082   +0.56%\nBenchmarkChanProdCons10               688          683   -0.73%\nBenchmarkChanProdCons100              562          547   -2.67%\nBenchmarkChanProdConsWork0           2454         2354   -4.07%\nBenchmarkChanProdConsWork10          1995         1977   -0.90%\nBenchmarkChanProdConsWork100         1844         1818   -1.41%\nBenchmarkChanCreation                1167         1104   -5.40%\nBenchmarkChanSem                      568          528   -7.04%",
			"disapproval": false,
			"date": "2013-05-24 13:42:04.546700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> lucky(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\n> benchmark                       old ns/op    new ns/op    delta\n> BenchmarkChanUncontended               71           70   -0.14%\n> BenchmarkChanContended                 71           71   -0.56%\n> BenchmarkChanSync                     146          152   +4.11%\n> BenchmarkChanProdCons0                147          156   +6.12%\n> BenchmarkChanProdCons10                90           96   +5.95%\n> BenchmarkChanProdCons100               69           70   +2.16%\n> BenchmarkChanProdConsWork0            774          777   +0.39%\n> BenchmarkChanProdConsWork10           713          719   +0.84%\n> BenchmarkChanProdConsWork100          688          691   +0.44%\n> BenchmarkChanCreation                 181          186   +2.76%\n> BenchmarkChanSem                       62           64   +3.51%\n\nThis could just be noise on this machine. Reverting the removal of the uint8 field (which I thought was affecting the padding) made no difference.\n\n\n> https://codereview.appspot.com/9678046/diff/5001/src/pkg/runtime/chan.c\n> File src/pkg/runtime/chan.c (right):\n> \n> https://codereview.appspot.com/9678046/diff/5001/src/pkg/runtime/chan.c#newcode107\n> src/pkg/runtime/chan.c:107: runtime\u00b7throw(\"makechan: bad chan size\");\n> Will the compiled down to a constant ? ie, sizeof(*c) is known at compile time,\n> as is MAXALIGN, so this could compile down to if (0) and be removed ? I guess I\n> should check the output of the compiler.\n\nnm says this check is completely removed at compile time, which is a nice bonus.",
			"disapproval": false,
			"date": "2013-05-24 12:15:24.628600",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 13:07:16, dfc wrote:\n> This CL fails on arm machines, 'fatal error: makechan: bad chan size'\n\nDoes ARM has any instructions that require 8-byte alignment (double, 64-bit int operations, vector ops, etc)?",
			"disapproval": false,
			"date": "2013-05-24 13:13:34.124290",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm going to say no, but Minux may correct me. If there are 8 byte\r\nwide operations, we probably handle them badly anyway (see 64bit\r\natomic problems).\r\n\r\nOn Fri, May 24, 2013 at 11:13 PM,  <dvyukov@google.com> wrote:\r\n> On 2013/05/24 13:07:16, dfc wrote:\r\n>>\r\n>> This CL fails on arm machines, 'fatal error: makechan: bad chan size'\r\n>\r\n>\r\n> Does ARM has any instructions that require 8-byte alignment (double,\r\n> 64-bit int operations, vector ops, etc)?\r\n>\r\n> https://codereview.appspot.com/9678046/\r\n",
			"disapproval": false,
			"date": "2013-05-24 13:15:01.753690",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "breaks on 386 as well\r\nso we were lying ourselves, the alignment was never enforced\r\npeople here say that neon may require 8-byte alignment for vector\r\noperations, but we do not generate them\r\nI am going to remove that check for now\r\n\r\n\r\nOn Fri, May 24, 2013 at 5:16 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I added back the uint8 elemalign field, and another uint8 _pad2 at the\r\n> bottom to fix the alignment issues, but this CL still shows a\r\n> performance decrease of 5%, which is very confusing.\r\n>\r\n> On Fri, May 24, 2013 at 11:15 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> > I'm going to say no, but Minux may correct me. If there are 8 byte\r\n> > wide operations, we probably handle them badly anyway (see 64bit\r\n> > atomic problems).\r\n> >\r\n> > On Fri, May 24, 2013 at 11:13 PM,  <dvyukov@google.com> wrote:\r\n> >> On 2013/05/24 13:07:16, dfc wrote:\r\n> >>>\r\n> >>> This CL fails on arm machines, 'fatal error: makechan: bad chan size'\r\n> >>\r\n> >>\r\n> >> Does ARM has any instructions that require 8-byte alignment (double,\r\n> >> 64-bit int operations, vector ops, etc)?\r\n> >>\r\n> >> https://codereview.appspot.com/9678046/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 13:20:18.279510",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Removed the check, PTAL",
			"disapproval": false,
			"date": "2013-05-24 13:27:43.918560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, could this lead to unaligned loads on arm ?",
			"disapproval": false,
			"date": "2013-05-24 13:56:59.586530",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 24, 2013 at 9:13 PM, <dvyukov@google.com> wrote:\r\n\r\n> On 2013/05/24 13:07:16, dfc wrote:\r\n>\r\n>> This CL fails on arm machines, 'fatal error: makechan: bad chan size'\r\n>>\r\n>\r\n> Does ARM has any instructions that require 8-byte alignment (double,\r\n> 64-bit int operations, vector ops, etc)?\r\n\r\nnative 64-bit atomic instructions require 8-byte alignment.\r\n\r\nSIMD (NEON) could require up to 32-byte alignment, but our compiler\r\nwon't ever generate those instructions (the linker doesn't support them,\r\nso i guess if people use it, they will have to issue they use proper\r\nalignment\r\nthemselves)\r\n",
			"disapproval": false,
			"date": "2013-05-24 15:17:29.036390",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 24, 2013 at 7:17 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Fri, May 24, 2013 at 9:13 PM, <dvyukov@google.com> wrote:\r\n>\r\n>> On 2013/05/24 13:07:16, dfc wrote:\r\n>>\r\n>>> This CL fails on arm machines, 'fatal error: makechan: bad chan size'\r\n>>>\r\n>>\r\n>> Does ARM has any instructions that require 8-byte alignment (double,\r\n>> 64-bit int operations, vector ops, etc)?\r\n>\r\n> native 64-bit atomic instructions require 8-byte alignment.\r\n>\r\n\r\nWe do only memcpy on chan buffer, so this should not break.\r\n\r\n\r\nSIMD (NEON) could require up to 32-byte alignment, but our compiler\r\n> won't ever generate those instructions (the linker doesn't support them,\r\n> so i guess if people use it, they will have to issue they use proper\r\n> alignment\r\n> themselves)\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 15:26:12.220700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 13:56:59, dfc wrote:\n> Also, could this lead to unaligned loads on arm ?\n\nTested on arm5 without issue.",
			"disapproval": false,
			"date": "2013-05-25 02:27:34.063420",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please fix the typo in the description: s/filed/field/",
			"disapproval": false,
			"date": "2013-05-25 02:53:17.696770",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/25 02:53:17, r wrote:\n> Please fix the typo in the description: s/filed/field/\n\nDone",
			"disapproval": false,
			"date": "2013-05-25 13:44:41.413270",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9678046/diff/14001/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (left):\n\nhttps://codereview.appspot.com/9678046/diff/14001/src/pkg/runtime/chan.c#oldcode108\nsrc/pkg/runtime/chan.c:108: // calculate rounded size of Hchan\nOK, I can see why this existing code doesn't work.  But as far as I can see, something like this is conceptually required.  Values are moved in and out using the type's copy algorithm.  That algorithm assumes that the type is correctly aligned--e.g., look at runtime\u00b7slicecopy in alg.c.  So the channel code really ought to be ensuring that the type values are correctly aligned.  The type size is such that this should work correctly--provided the channel buffer is aligned correctly.\n\nSo it seems to me that the code here needs to compute sizeof(*c) rounded up to elem->align.  And that value needs to be stored in Hchan.  And chanbuf needs to change (byte*)(c+1) to (byte*)c + c->chansize.  We know that chansize will be less than 256, so we can replace the existing elemalign field with chansize.\n\nI expect that the current code does work fine, but it only works fine by coincidence.  I think we should strive to ensure that it works fine always.",
			"disapproval": false,
			"date": "2013-05-31 18:48:58.343340",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/31 18:48:58, iant wrote:\n> https://codereview.appspot.com/9678046/diff/14001/src/pkg/runtime/chan.c\n> File src/pkg/runtime/chan.c (left):\n> \n> https://codereview.appspot.com/9678046/diff/14001/src/pkg/runtime/chan.c#oldcode108\n> src/pkg/runtime/chan.c:108: // calculate rounded size of Hchan\n> OK, I can see why this existing code doesn't work.  But as far as I can see,\n> something like this is conceptually required.  Values are moved in and out using\n> the type's copy algorithm.  That algorithm assumes that the type is correctly\n> aligned--e.g., look at runtime\u00b7slicecopy in alg.c.  So the channel code really\n> ought to be ensuring that the type values are correctly aligned.  The type size\n> is such that this should work correctly--provided the channel buffer is aligned\n> correctly.\n> \n> So it seems to me that the code here needs to compute sizeof(*c) rounded up to\n> elem->align.  And that value needs to be stored in Hchan.  And chanbuf needs to\n> change (byte*)(c+1) to (byte*)c + c->chansize.  We know that chansize will be\n> less than 256, so we can replace the existing elemalign field with chansize.\n> \n> I expect that the current code does work fine, but it only works fine by\n> coincidence.  I think we should strive to ensure that it works fine always.\n\n\nLet's wait for the decision on https://codereview.appspot.com/9730043/",
			"disapproval": false,
			"date": "2013-06-01 21:05:07.824170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-03 20:36:12.759830",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/31 18:48:58, iant wrote:\n> https://codereview.appspot.com/9678046/diff/14001/src/pkg/runtime/chan.c\n> File src/pkg/runtime/chan.c (left):\n> \n> https://codereview.appspot.com/9678046/diff/14001/src/pkg/runtime/chan.c#oldcode108\n> src/pkg/runtime/chan.c:108: // calculate rounded size of Hchan\n> OK, I can see why this existing code doesn't work.  But as far as I can see,\n> something like this is conceptually required.  Values are moved in and out using\n> the type's copy algorithm.  That algorithm assumes that the type is correctly\n> aligned--e.g., look at runtime\u00b7slicecopy in alg.c.  So the channel code really\n> ought to be ensuring that the type values are correctly aligned.  The type size\n> is such that this should work correctly--provided the channel buffer is aligned\n> correctly.\n> \n> So it seems to me that the code here needs to compute sizeof(*c) rounded up to\n> elem->align.  And that value needs to be stored in Hchan.  And chanbuf needs to\n> change (byte*)(c+1) to (byte*)c + c->chansize.  We know that chansize will be\n> less than 256, so we can replace the existing elemalign field with chansize.\n> \n> I expect that the current code does work fine, but it only works fine by\n> coincidence.  I think we should strive to ensure that it works fine always.\n\n\nPTAL\n\nI have not implemented the full-fledged alignment, but it's better and simpler than now, and will break loudly if anything goes wrong.",
			"disapproval": false,
			"date": "2013-06-06 10:26:13.625700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9678046/diff/29001/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/9678046/diff/29001/src/pkg/runtime/chan.c#newcode41\nsrc/pkg/runtime/chan.c:41: uint16\tpad;\t\t\t// ensures proper alignment of the buffer\nI'm sorry to nit pick, but there is no field called buffer in this struct, could I ask you to reword this please.\n\nhttps://codereview.appspot.com/9678046/diff/29001/src/pkg/runtime/chan.c#newcode103\nsrc/pkg/runtime/chan.c:103: if((sizeof(*c)%MAXALIGN) != 0 || elem->align > MAXALIGN)\nit is sad that this is no longer something the compiler can optimise away, I liked your previous version. I understand if it isn't possible to implement this anymore.",
			"disapproval": false,
			"date": "2013-06-06 12:55:52.943320",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/06 12:55:52, dfc wrote:\n> https://codereview.appspot.com/9678046/diff/29001/src/pkg/runtime/chan.c\n> File src/pkg/runtime/chan.c (right):\n> \n> https://codereview.appspot.com/9678046/diff/29001/src/pkg/runtime/chan.c#newcode41\n> src/pkg/runtime/chan.c:41: uint16\tpad;\t\t\t// ensures proper alignment of the\n> buffer\n> I'm sorry to nit pick, but there is no field called buffer in this struct, could\n> I ask you to reword this please.\n\nDone.\nPTAL\n\n> https://codereview.appspot.com/9678046/diff/29001/src/pkg/runtime/chan.c#newcode103\n> src/pkg/runtime/chan.c:103: if((sizeof(*c)%MAXALIGN) != 0 || elem->align >\n> MAXALIGN)\n> it is sad that this is no longer something the compiler can optimise away, I\n> liked your previous version. I understand if it isn't possible to implement this\n> anymore.\n\nIt will be awesome if it becomes a hotspot, then I will happily implement the check in the compiler :)",
			"disapproval": false,
			"date": "2013-06-06 16:10:43.765690",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-06 18:21:55.146070",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=623df01aa32b ***\n\nruntime: remove unused field from Hchan\nRemove alignment logic as well, it's not respected by chanbuf() anyway.\n\nR=golang-dev, dave, minux.ma, r, iant, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/9678046",
			"disapproval": false,
			"date": "2013-06-06 19:06:21.665210",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9678046: runtime: remove unused filed from Hchan",
	"created": "2013-05-24 11:19:24.579280",
	"patchsets": [
		1,
		2001,
		5001,
		14001,
		29001,
		35001,
		39001,
		42001
	],
	"modified": "2013-06-06 19:06:23.791300",
	"closed": true,
	"issue": 9678046
}