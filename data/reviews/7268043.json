{
	"description": "testing: SkipNow, FailNow must be called from test goroutine\n\nImpossible for us to check (without sleazily reaching into the\nruntime) but at least document it.\n\nFixes issue 3800.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dave@cheney.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure, try it. As long as it doesn't have false blowups in practice I'm\r\nhappy.\r\n",
			"disapproval": false,
			"date": "2013-02-01 21:48:55.021380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-01 19:53:27.593980",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Fri, Feb 1, 2013 at 11:53 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> testing: SkipNow, FailNow must be called from test goroutine\r\n>\r\n> Impossible for us to check (without sleazily reaching into the\r\n> runtime) but at least document it.\r\n>\r\n> Fixes issue 3800.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7268043/<https://codereview.appspot.com/7268043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/testing/testing.go\r\n>\r\n>\r\n> Index: src/pkg/testing/testing.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/testing/testing.go\r\n> +++ b/src/pkg/testing/testing.go\r\n> @@ -212,6 +212,10 @@\r\n>\r\n>  // FailNow marks the function as having failed and stops its execution.\r\n>  // Execution will continue at the next test or benchmark.\r\n> +// FailNow must be called from the goroutine running the\r\n> +// test or benchmark function, not from other goroutines\r\n> +// created during the test. Calling FailNow does not stop\r\n> +// those other goroutines.\r\n>  func (c *common) FailNow() {\r\n>         c.Fail()\r\n>\r\n> @@ -244,33 +248,33 @@\r\n>         c.output = append(c.output, decorate(s)...)\r\n>  }\r\n>\r\n> -// Log formats its arguments using default formatting, analogous to\r\n> Println(),\r\n> +// Log formats its arguments using default formatting, analogous to\r\n> Println,\r\n>  // and records the text in the error log.\r\n>  func (c *common) Log(args ...interface{}) { c.log(fmt.Sprintln(args...)) }\r\n>\r\n> -// Logf formats its arguments according to the format, analogous to\r\n> Printf(),\r\n> +// Logf formats its arguments according to the format, analogous to\r\n> Printf,\r\n>  // and records the text in the error log.\r\n>  func (c *common) Logf(format string, args ...interface{}) {\r\n> c.log(fmt.Sprintf(format, args...)) }\r\n>\r\n> -// Error is equivalent to Log() followed by Fail().\r\n> +// Error is equivalent to Log followed by Fail.\r\n>  func (c *common) Error(args ...interface{}) {\r\n>         c.log(fmt.Sprintln(args...))\r\n>         c.Fail()\r\n>  }\r\n>\r\n> -// Errorf is equivalent to Logf() followed by Fail().\r\n> +// Errorf is equivalent to Logf followed by Fail.\r\n>  func (c *common) Errorf(format string, args ...interface{}) {\r\n>         c.log(fmt.Sprintf(format, args...))\r\n>         c.Fail()\r\n>  }\r\n>\r\n> -// Fatal is equivalent to Log() followed by FailNow().\r\n> +// Fatal is equivalent to Log followed by FailNow.\r\n>  func (c *common) Fatal(args ...interface{}) {\r\n>         c.log(fmt.Sprintln(args...))\r\n>         c.FailNow()\r\n>  }\r\n>\r\n> -// Fatalf is equivalent to Logf() followed by FailNow().\r\n> +// Fatalf is equivalent to Logf followed by FailNow.\r\n>  func (c *common) Fatalf(format string, args ...interface{}) {\r\n>         c.log(fmt.Sprintf(format, args...))\r\n>         c.FailNow()\r\n> @@ -345,20 +349,23 @@\r\n>         }\r\n>  }\r\n>\r\n> -// Skip is equivalent to Log() followed by SkipNow().\r\n> +// Skip is equivalent to Log followed by SkipNow.\r\n>  func (t *T) Skip(args ...interface{}) {\r\n>         t.log(fmt.Sprintln(args...))\r\n>         t.SkipNow()\r\n>  }\r\n>\r\n> -// Skipf is equivalent to Logf() followed by SkipNow().\r\n> +// Skipf is equivalent to Logf followed by SkipNow.\r\n>  func (t *T) Skipf(format string, args ...interface{}) {\r\n>         t.log(fmt.Sprintf(format, args...))\r\n>         t.SkipNow()\r\n>  }\r\n>\r\n> -// SkipNow marks the function as having been skipped and stops its\r\n> execution.\r\n> -// Execution will continue at the next test or benchmark. See also,\r\n> t.FailNow.\r\n> +// SkipNow marks the test as having been skipped and stops its execution.\r\n> +// Execution will continue at the next test or benchmark. See also\r\n> FailNow.\r\n> +// SkipNow must be called from the goroutine running the test, not from\r\n> +// other goroutines created during the test. Calling SkipNow does not stop\r\n> +// those other goroutines.\r\n>  func (t *T) SkipNow() {\r\n>         t.skip()\r\n>         runtime.Goexit()\r\n> @@ -370,7 +377,7 @@\r\n>         t.skipped = true\r\n>  }\r\n>\r\n> -// Skipped reports whether the function was skipped.\r\n> +// Skipped reports whether the test was skipped.\r\n>  func (t *T) Skipped() bool {\r\n>         t.mu.RLock()\r\n>         defer t.mu.RUnlock()\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-01 20:44:24.991330",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought that it might be possible to detect incorrect FatalNow and\r\nfriends by looking in the call stack. Do you think this approach warrants\r\ninvestigation?\r\nOn 2 Feb 2013 07:44, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> On Fri, Feb 1, 2013 at 11:53 AM, <rsc@golang.org> wrote:\r\n>\r\n>> Reviewers: golang-dev_googlegroups.com,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go/\r\n>>\r\n>>\r\n>> Description:\r\n>> testing: SkipNow, FailNow must be called from test goroutine\r\n>>\r\n>> Impossible for us to check (without sleazily reaching into the\r\n>> runtime) but at least document it.\r\n>>\r\n>> Fixes issue 3800.\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/7268043/<https://codereview.appspot.com/7268043/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/testing/testing.go\r\n>>\r\n>>\r\n>> Index: src/pkg/testing/testing.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/testing/testing.go\r\n>> +++ b/src/pkg/testing/testing.go\r\n>> @@ -212,6 +212,10 @@\r\n>>\r\n>>  // FailNow marks the function as having failed and stops its execution.\r\n>>  // Execution will continue at the next test or benchmark.\r\n>> +// FailNow must be called from the goroutine running the\r\n>> +// test or benchmark function, not from other goroutines\r\n>> +// created during the test. Calling FailNow does not stop\r\n>> +// those other goroutines.\r\n>>  func (c *common) FailNow() {\r\n>>         c.Fail()\r\n>>\r\n>> @@ -244,33 +248,33 @@\r\n>>         c.output = append(c.output, decorate(s)...)\r\n>>  }\r\n>>\r\n>> -// Log formats its arguments using default formatting, analogous to\r\n>> Println(),\r\n>> +// Log formats its arguments using default formatting, analogous to\r\n>> Println,\r\n>>  // and records the text in the error log.\r\n>>  func (c *common) Log(args ...interface{}) { c.log(fmt.Sprintln(args...))\r\n>> }\r\n>>\r\n>> -// Logf formats its arguments according to the format, analogous to\r\n>> Printf(),\r\n>> +// Logf formats its arguments according to the format, analogous to\r\n>> Printf,\r\n>>  // and records the text in the error log.\r\n>>  func (c *common) Logf(format string, args ...interface{}) {\r\n>> c.log(fmt.Sprintf(format, args...)) }\r\n>>\r\n>> -// Error is equivalent to Log() followed by Fail().\r\n>> +// Error is equivalent to Log followed by Fail.\r\n>>  func (c *common) Error(args ...interface{}) {\r\n>>         c.log(fmt.Sprintln(args...))\r\n>>         c.Fail()\r\n>>  }\r\n>>\r\n>> -// Errorf is equivalent to Logf() followed by Fail().\r\n>> +// Errorf is equivalent to Logf followed by Fail.\r\n>>  func (c *common) Errorf(format string, args ...interface{}) {\r\n>>         c.log(fmt.Sprintf(format, args...))\r\n>>         c.Fail()\r\n>>  }\r\n>>\r\n>> -// Fatal is equivalent to Log() followed by FailNow().\r\n>> +// Fatal is equivalent to Log followed by FailNow.\r\n>>  func (c *common) Fatal(args ...interface{}) {\r\n>>         c.log(fmt.Sprintln(args...))\r\n>>         c.FailNow()\r\n>>  }\r\n>>\r\n>> -// Fatalf is equivalent to Logf() followed by FailNow().\r\n>> +// Fatalf is equivalent to Logf followed by FailNow.\r\n>>  func (c *common) Fatalf(format string, args ...interface{}) {\r\n>>         c.log(fmt.Sprintf(format, args...))\r\n>>         c.FailNow()\r\n>> @@ -345,20 +349,23 @@\r\n>>         }\r\n>>  }\r\n>>\r\n>> -// Skip is equivalent to Log() followed by SkipNow().\r\n>> +// Skip is equivalent to Log followed by SkipNow.\r\n>>  func (t *T) Skip(args ...interface{}) {\r\n>>         t.log(fmt.Sprintln(args...))\r\n>>         t.SkipNow()\r\n>>  }\r\n>>\r\n>> -// Skipf is equivalent to Logf() followed by SkipNow().\r\n>> +// Skipf is equivalent to Logf followed by SkipNow.\r\n>>  func (t *T) Skipf(format string, args ...interface{}) {\r\n>>         t.log(fmt.Sprintf(format, args...))\r\n>>         t.SkipNow()\r\n>>  }\r\n>>\r\n>> -// SkipNow marks the function as having been skipped and stops its\r\n>> execution.\r\n>> -// Execution will continue at the next test or benchmark. See also,\r\n>> t.FailNow.\r\n>> +// SkipNow marks the test as having been skipped and stops its execution.\r\n>> +// Execution will continue at the next test or benchmark. See also\r\n>> FailNow.\r\n>> +// SkipNow must be called from the goroutine running the test, not from\r\n>> +// other goroutines created during the test. Calling SkipNow does not\r\n>> stop\r\n>> +// those other goroutines.\r\n>>  func (t *T) SkipNow() {\r\n>>         t.skip()\r\n>>         runtime.Goexit()\r\n>> @@ -370,7 +377,7 @@\r\n>>         t.skipped = true\r\n>>  }\r\n>>\r\n>> -// Skipped reports whether the function was skipped.\r\n>> +// Skipped reports whether the test was skipped.\r\n>>  func (t *T) Skipped() bool {\r\n>>         t.mu.RLock()\r\n>>         defer t.mu.RUnlock()\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>\r\n>  --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-01 20:49:37.810670",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 1, 2013 at 12:49 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I thought that it might be possible to detect incorrect FatalNow and\r\n> friends by looking in the call stack. Do you think this approach warrants\r\n> investigation?\r\n>\r\nI agree.  That doesn't sound sleezy to me.  (especially compared to\r\nsniffing out the goroutine ID)\r\n\r\nI know the rule being documented in this CL but I still regularly make this\r\nmistake. I'd prefer an explosion when I do wrong.\r\n",
			"disapproval": false,
			"date": "2013-02-01 21:28:01.515600",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If there is general agreement that looking in the call stack is ok, I\r\ncan experiment with it in a followup CL.\r\n\r\nOn Sat, Feb 2, 2013 at 8:27 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> On Fri, Feb 1, 2013 at 12:49 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> I thought that it might be possible to detect incorrect FatalNow and\r\n>> friends by looking in the call stack. Do you think this approach warrants\r\n>> investigation?\r\n>\r\n> I agree.  That doesn't sound sleezy to me.  (especially compared to sniffing\r\n> out the goroutine ID)\r\n>\r\n> I know the rule being documented in this CL but I still regularly make this\r\n> mistake. I'd prefer an explosion when I do wrong.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-01 21:30:09.763210",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=716971beffeb ***\n\ntesting: SkipNow, FailNow must be called from test goroutine\n\nImpossible for us to check (without sleazily reaching into the\nruntime) but at least document it.\n\nFixes issue 3800.\n\nR=golang-dev, bradfitz, dave\nCC=golang-dev\nhttps://codereview.appspot.com/7268043",
			"disapproval": false,
			"date": "2013-02-02 02:01:38.260450",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7268043: testing: SkipNow, FailNow must be called from test goroutine",
	"created": "2013-02-01 19:52:06.380430",
	"patchsets": [
		1,
		2001,
		5001,
		10001
	],
	"modified": "2013-02-02 02:01:40.123150",
	"closed": true,
	"issue": 7268043
}