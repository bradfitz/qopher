{
	"description": "go/typechecker: basic steps towards typechecking entire programs\n\nAdded:\nconst.go: implements operations on untyped constants\ndecl.go : typechecks declarations (incomplete)\nexpr.go : typechecks expressions  (incomplete)\nstmt.go : typechecks statements   (incomplete)\n\nRenames test files testdata/*.go -> testdata/*.src in order\nto avoid complaints from gofmt (these files must not be modified\nby gofmt as they contain comments that must not be moved).\n\nAdded more test cases.\n\nVarious changes to existing files.\n\nThe detailed structure including many of the exported types,\n(enum) constant names, etc. are likely to evolve and change\nwhile this code is developed. This is simply a snapshot.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"r@golang.org",
		"chickencha@gmail.com",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/const.go\nFile src/pkg/go/typechecker/const.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/const.go#newcode114\nsrc/pkg/go/typechecker/const.go:114: u, v = Const{cmplx{&z, big.NewRat(0, 0)}}, y\nI think this should be big.NewRat(0, 1)\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/const.go#newcode123\nsrc/pkg/go/typechecker/const.go:123: u, v = Const{cmplx{a, big.NewRat(0, 0)}}, y\nbig.NewRat(0, 1)\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go\nFile src/pkg/go/typechecker/decl.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode1\nsrc/pkg/go/typechecker/decl.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go\nFile src/pkg/go/typechecker/expr.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go#newcode1\nsrc/pkg/go/typechecker/expr.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go#newcode135\nsrc/pkg/go/typechecker/expr.go:135: switch op {\nTODO: check the type?\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go#newcode205\nsrc/pkg/go/typechecker/expr.go:205: switch op {\nTODO: check the type?\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/stmt.go\nFile src/pkg/go/typechecker/stmt.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/stmt.go#newcode1\nsrc/pkg/go/typechecker/stmt.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011",
			"disapproval": false,
			"date": "2011-02-15 20:37:12.362238",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 16 February 2011 16:28, Russ Cox <rsc@google.com> wrote:\n>> if you enforce the convention that the last component\n>> of the path of an import without an explicit identifier must\n>> match the package identifier, then this problem goes\n>> away and everything becomes simpler - it becomes trivial\n>> to resolve *Obj at parse time.\n>\n> not true unless we also get rid of import .\n\nif you enforce the convention, then you can always know the package\nidentifier, even with imports.\n\nthat is, this would give an error when compiled:\n\npackage main\nimport \"github.com/ziutek/kasia.go\"\nfunc main() {kasia.New()}\n\nand you would be forced to do this instead:\n\npackage main\nimport kasia \"github.com/ziutek/kasia.go\"\nfunc main() {kasia.New()}\n",
			"disapproval": false,
			"date": "2011-02-16 16:36:18.212770",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Feb 16, 2011 at 13:07, roger peppe <rogpeppe@gmail.com> wrote:\n> ah, import dot...\n>\n> good point.\n>\n> we wouldn't have to get rid of it though.\n> it could be changed so that its identifiers are imported into\n> package scope rather than file scope.\n>\n> given that it's (almost?) always used as a means of saying\n> \"i am pretending to be this package\", that might not be so bad.\n>\n> i wonder if anything would actually break.\n\nLet's not hijack this CL review for language changes.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-02-16 18:16:07.446508",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> if you enforce the convention that the last component\n> of the path of an import without an explicit identifier must\n> match the package identifier, then this problem goes\n> away and everything becomes simpler - it becomes trivial\n> to resolve *Obj at parse time.\n\nnot true unless we also get rid of import .\n",
			"disapproval": false,
			"date": "2011-02-16 16:28:26.636722",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-02-15 00:51:38.896520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "will look at this once i finish my current garbage\ncollection debugging session.\n",
			"disapproval": false,
			"date": "2011-02-15 19:53:28.143525",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Some preliminary comments.\n\nIt would be nice if there were a way to separate the\ngo/ast and go/typechecker packages cleanly.  \n\nOne possible way to do that is to give go/ast (and go/parser)\nresponsibility for creating and maintaining scopes as lists of\ndeclared objects rather than weave that into the type checking.\nEach name reference would have the resolved *Obj at the end\nof parsing.  The scope lists could be discarded at that point\nor could be added to the corresponding statement structures.\nIt would probably help to have a list of all the *Obj attached\nto each function body, for example.\n\nI realize that doing scoping in a separate place from type checking\nproper is not the usual textbook split, but it is possible in\nGo (as opposed to, say, C++), and it is easy to imagine programs\nthat might benefit from scoping information but don't need\nthe work of full-blown type checking.  Cgo is one such program:\nit currently assumes that any reference to C.x is referring to the\ntop-level name C introduced by import \"C\".  A local variable\nnamed C would confuse it.  But it doesn't need full type checking,\njust resolved variable references.  (References to undefined names\nwould have to be marked as such, so that they could be resolved\nby an import (or import .-ed) identifier or predefined name once\nall files had been parsed.  In the cgo example, it would only apply\nits transformations to names C that referred to an undefined declaration.)\nAnother reason in favor of such a division of labor is that scoping\ncan be done locally without looking at imports, while type checking\nnecessarily requires loading information about imported packages.\nI think that splitting the scoping from type checking will help clarify\nthe focus of the package.  At least in Go I have found them to be\nlogically distinct operations.\n\nI was surprised by the implementation by type switch instead\nof richer interfaces implemented by different types.  \nAlthough there is already an ast.Type I think typechecker would\nbenefit from defining its own typechecker.Type interface that\ncould be implemented by PtrType, ChanType, etc.  Using one\nbig struct has its benefits but I was surprised, for example, that\nt.N was the channel direction in a channel type.  By being\nseparate from ast.Type, typechecker.Type could define a rich\ninterface that referred to other typechecker concepts.\nThe same may be true of typechecker.Value and typechecker.Const.\n\nIf you do have a separate typechecker.Type it could possibly\nomit line number information and use bottom-up hashing so\nthat types u, v are identical if and only if u == v.  Or maybe that's\na bad idea; I've always wanted to do that in a type checker and\nit's never ended up being worthwhile.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/ast/scope.go\nFile src/pkg/go/ast/scope.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/ast/scope.go#newcode126\nsrc/pkg/go/ast/scope.go:126: Pre: \"built-in\",\ns/built-in/predeclared/\n?\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go\nFile src/pkg/go/typechecker/const.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode19\nsrc/pkg/go/typechecker/const.go:19: // TODO(gri) Move this to package ast eventually.\nPackage ast doesn't seem right.\nI am worried about type-checking details bleeding into package ast.\nPeople should be able to use ast for things like gofmt without having\nto understand all the type-checking stuff.\n\nEspecially because there are going to be constants whose values\ndepend on the details of the type system (like ^uint(0)) this seems\nlike it belongs here.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode76\nsrc/pkg/go/typechecker/const.go:76: panic(\"unreachable\")\nThis isn't unreachable.  NewConst is a public function and\nmight be passed bad input from the user.  It should panic\nwith a better message.\n\npanic(\"go/typechecker: NewConst: invalid kind\")\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode123\nsrc/pkg/go/typechecker/const.go:123: u, v = Const{cmplx{a, big.NewRat(0, 0)}}, y\nThis says 0/0 but above it was 0/1.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode137\nsrc/pkg/go/typechecker/const.go:137: panic(\"unreachable\")\nCaller might pass in zero value for x.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode169\nsrc/pkg/go/typechecker/const.go:169: return x.FloatString(10) // 10 digits of precision after decimal point seems fine\nTo completely specify a float64 you'd need 17.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode176\nsrc/pkg/go/typechecker/const.go:176: panic(\"unreachable\")\nNot unreachable.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode199\nsrc/pkg/go/typechecker/const.go:199: panic(\"unreachable\")\nNot unreachable.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/expr.go\nFile src/pkg/go/typechecker/expr.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/expr.go#newcode37\nsrc/pkg/go/typechecker/expr.go:37: // A named and an unnamed type are always different.\n// Otherwise must be unnamed.\nif x.Obj != nil || y.Obj != nil {\n    return false\n}\n\nno?\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/expr.go#newcode50\nsrc/pkg/go/typechecker/expr.go:50: return false\nDoes not appear to check size of int, etc?",
			"disapproval": false,
			"date": "2011-02-16 05:48:45.143428",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/const.go\nFile src/pkg/go/typechecker/const.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/const.go#newcode114\nsrc/pkg/go/typechecker/const.go:114: u, v = Const{cmplx{&z, big.NewRat(0, 0)}}, y\nOn 2011/02/15 20:37:13, eds wrote:\n> I think this should be big.NewRat(0, 1)\n\nDone.\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/const.go#newcode123\nsrc/pkg/go/typechecker/const.go:123: u, v = Const{cmplx{a, big.NewRat(0, 0)}}, y\nOn 2011/02/15 20:37:13, eds wrote:\n> big.NewRat(0, 1)\n\nDone.\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go\nFile src/pkg/go/typechecker/decl.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode1\nsrc/pkg/go/typechecker/decl.go:1: // Copyright 2010 The Go Authors. All rights reserved.\nOn 2011/02/15 20:37:13, eds wrote:\n> 2011\n\nDone.\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go\nFile src/pkg/go/typechecker/expr.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go#newcode1\nsrc/pkg/go/typechecker/expr.go:1: // Copyright 2010 The Go Authors. All rights reserved.\nOn 2011/02/15 20:37:13, eds wrote:\n> 2011\n\nDone.\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go#newcode135\nsrc/pkg/go/typechecker/expr.go:135: switch op {\nOn 2011/02/15 20:37:13, eds wrote:\n> TODO: check the type?\n\nadded TODO\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/expr.go#newcode205\nsrc/pkg/go/typechecker/expr.go:205: switch op {\nOn 2011/02/15 20:37:13, eds wrote:\n> TODO: check the type?\n\nadded a TODO\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/stmt.go\nFile src/pkg/go/typechecker/stmt.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/stmt.go#newcode1\nsrc/pkg/go/typechecker/stmt.go:1: // Copyright 2010 The Go Authors. All rights reserved.\nOn 2011/02/15 20:37:13, eds wrote:\n> 2011\n\nDone.",
			"disapproval": false,
			"date": "2011-02-15 20:46:35.755628",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "this is a huge cl. here are comments from a couple of files. i'll return to it when i can clear my head.\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/ast/scope.go\nFile src/pkg/go/ast/scope.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/ast/scope.go#newcode133\nsrc/pkg/go/ast/scope.go:133: // The list of built-in id's.\ns/'// (plural not possessive)\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go\nFile src/pkg/go/typechecker/decl.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode19\nsrc/pkg/go/typechecker/decl.go:19: f == ast.Float || f == ast.Complex || f == ast.String\nswitch f {\ncase ast.Bool, ast.... etc.:\n  return true\n}\nreturn false\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode43\nsrc/pkg/go/typechecker/decl.go:43: // continue to reduce follow-up errors\nwhat does this mean?\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode67\nsrc/pkg/go/typechecker/decl.go:67: if !x.val.IsValid() {\nwhy not make the zero value for Value be a BadType?\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/universe.go\nFile src/pkg/go/typechecker/universe.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/universe.go#newcode9\nsrc/pkg/go/typechecker/universe.go:9: // TODO(gri) should this be in package ast?\nthat doesn't seem right to me",
			"disapproval": false,
			"date": "2011-02-16 00:00:28.917308",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 16 February 2011 05:48,  <rsc@google.com> wrote:\n> Another reason in favor of such a division of labor is that scoping\n> can be done locally without looking at imports, while type checking\n> necessarily requires loading information about imported packages.\n\nthat's almost true, apart from the fact that you cannot tell\nif an unresolved identifier is in package or file scope without\nlooking at imports.\n\npackage foo\nimport \"p1\"\nvar x = a.X\n\npackage foo\nimport \"p2\"\nvar y = a.Y\n\nis a an undeclared package-scope variable,\nor two different references to separate packages\nwith identifier a? until you finish parsing, you\ndon't know, so every identifier in the parse tree needs a double\nindirection and some kind of back reference so you can fix\nup the references when you finally discover\nthe truth.\n\ni said this ages ago, and i still think it's true:\nif you enforce the convention that the last component\nof the path of an import without an explicit identifier must\nmatch the package identifier, then this problem goes\naway and everything becomes simpler - it becomes trivial\nto resolve *Obj at parse time.\n\ni think there are user benefits too.\n",
			"disapproval": false,
			"date": "2011-02-16 08:50:13.890743",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4186046/diff/5021/src/pkg/go/ast/scope.go\nFile src/pkg/go/ast/scope.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/ast/scope.go#newcode133\nsrc/pkg/go/ast/scope.go:133: // The list of built-in id's.\nOn 2011/02/16 00:00:28, r wrote:\n> s/'// (plural not possessive)\n\nDone.\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go\nFile src/pkg/go/typechecker/decl.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode19\nsrc/pkg/go/typechecker/decl.go:19: f == ast.Float || f == ast.Complex || f == ast.String\nOn 2011/02/16 00:00:28, r wrote:\n> switch f {\n> case ast.Bool, ast.... etc.:\n>   return true\n> }\n> return false\n\nDone.\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode43\nsrc/pkg/go/typechecker/decl.go:43: // continue to reduce follow-up errors\nOn 2011/02/16 00:00:28, r wrote:\n> what does this mean?\n\nremoved comment (it just meant that we continue despite errors to get more (conservative) type checking done and in return avoid subsequent errors)\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/decl.go#newcode67\nsrc/pkg/go/typechecker/decl.go:67: if !x.val.IsValid() {\nOn 2011/02/16 00:00:28, r wrote:\n> why not make the zero value for Value be a BadType?\n\nA bad type is a non-nil type so that we don't have to check for nil all the time. This is about not reporting an error if we already have a bad type (as a result of a previous error).\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/universe.go\nFile src/pkg/go/typechecker/universe.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/5021/src/pkg/go/typechecker/universe.go#newcode9\nsrc/pkg/go/typechecker/universe.go:9: // TODO(gri) should this be in package ast?\nOn 2011/02/16 00:00:28, r wrote:\n> that doesn't seem right to me\n\nI'm not sure yet. Scopes are defined in AST. I think this is something that may change down the road. Leave the TODO for now.",
			"disapproval": false,
			"date": "2011-02-16 00:40:32.225954",
			"approval": false
		},
		{
			"sender": "chickencha@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I noticed another one.\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/universe.go\nFile src/pkg/go/typechecker/universe.go (right):\n\nhttp://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/universe.go#newcode91\nsrc/pkg/go/typechecker/universe.go:91: defConst(\"true\", BoolType, Const{true})\ntrue and false should be untyped. According to GC, it's legal to say:\n\ntype bool2 bool\nvar b bool2\nb = true\n\nIt wouldn't be legal if true and false were typed.",
			"disapproval": false,
			"date": "2011-02-16 05:43:44.915540",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Feb 15, 2011 at 9:48 PM, <rsc@google.com> wrote:\n\n> Some preliminary comments.\n>\n> It would be nice if there were a way to separate the\n> go/ast and go/typechecker packages cleanly.\n>\n\nyes\n\n>\n> One possible way to do that is to give go/ast (and go/parser)\n> responsibility for creating and maintaining scopes as lists of\n> declared objects rather than weave that into the type checking.\n> Each name reference would have the resolved *Obj at the end\n> of parsing.  The scope lists could be discarded at that point\n> or could be added to the corresponding statement structures.\n> It would probably help to have a list of all the *Obj attached\n> to each function body, for example.\n>\n\nI decided to move even the resolving of objects outside the AST (and it's\nnow the first phase of the type checker) - so the AST is simply an abstract\nsyntax tree. Perhaps that is the wrong separation because now some scoping\nstuff has crept in anyway, and it's almost impossible to avoid unless one\nwants to pay an undue overhead. If I resolve objects as part of building the\nAST (including setting up of scopes) and thus into the parser, I think the\ncode will actually get simpler (this is something that has only become\napparent - at least to me - after writing the code). I'll give it a shot and\nrework it.\n\n\n>\n> I realize that doing scoping in a separate place from type checking\n> proper is not the usual textbook split, but it is possible in\n> Go (as opposed to, say, C++), and it is easy to imagine programs\n> that might benefit from scoping information but don't need\n> the work of full-blown type checking.  Cgo is one such program:\n> it currently assumes that any reference to C.x is referring to the\n> top-level name C introduced by import \"C\".  A local variable\n> named C would confuse it.  But it doesn't need full type checking,\n> just resolved variable references.  (References to undefined names\n> would have to be marked as such, so that they could be resolved\n> by an import (or import .-ed) identifier or predefined name once\n> all files had been parsed.  In the cgo example, it would only apply\n> its transformations to names C that referred to an undefined\n> declaration.)\n> Another reason in favor of such a division of labor is that scoping\n> can be done locally without looking at imports, while type checking\n> necessarily requires loading information about imported packages.\n> I think that splitting the scoping from type checking will help clarify\n> the focus of the package.  At least in Go I have found them to be\n> logically distinct operations.\n>\n\nSure - I'm convinced. Let me try it.\n\n>\n> I was surprised by the implementation by type switch instead\n> of richer interfaces implemented by different types.\n> Although there is already an ast.Type I think typechecker would\n> benefit from defining its own typechecker.Type interface that\n> could be implemented by PtrType, ChanType, etc.  Using one\n> big struct has its benefits but I was surprised, for example, that\n> t.N was the channel direction in a channel type.  By being\n> separate from ast.Type, typechecker.Type could define a rich\n> interface that referred to other typechecker concepts.\n> The same may be true of typechecker.Value and typechecker.Const.\n>\n\nI have been going back and forth on this (even with the AST I had a\ncompressed, more C-like implementation at some point). Using a more Go-like\nstructure (a different representation for each type) makes the types\nclearer, but it also is more costly. General operations on types need to go\nthrough an interface call, and there are type casts, possibly frequently.\nBut perhaps that is all premature optimization. There's one place where\nhaving a single Type struct is useful though: Sometimes one needs to\nallocate a new type and use the respective pointer before the type is fully\nknown. With a single node, I can fill in the respective type information\n(even what kind of type) afterwards, and there is no need to \"fix up\" uses\nof that type. That is impossible using a different struct for each type.\nThat said, I'll give it a try just to see how it ends up. Maybe it is\nbetter.\n\n>\n> If you do have a separate typechecker.Type it could possibly\n> omit line number information and use bottom-up hashing so\n> that types u, v are identical if and only if u == v.  Or maybe that's\n> a bad idea; I've always wanted to do that in a type checker and\n> it's never ended up being worthwhile.\n>\n\nI am definitively planing to have types identical only if they are\ninternally represented by the same pointer. I think the only place where\nthere one needs to be careful is when processing imports (types need to be\ncanonicalized).\n\n- gri\n\n\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/ast/scope.go\n> File src/pkg/go/ast/scope.go (right):\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/ast/scope.go#newcode126\n> src/pkg/go/ast/scope.go:126: Pre: \"built-in\",\n> s/built-in/predeclared/\n> ?\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go\n> File src/pkg/go/typechecker/const.go (right):\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode19\n> src/pkg/go/typechecker/const.go:19: // TODO(gri) Move this to package\n> ast eventually.\n> Package ast doesn't seem right.\n> I am worried about type-checking details bleeding into package ast.\n> People should be able to use ast for things like gofmt without having\n> to understand all the type-checking stuff.\n>\n> Especially because there are going to be constants whose values\n> depend on the details of the type system (like ^uint(0)) this seems\n> like it belongs here.\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode76\n> src/pkg/go/typechecker/const.go:76: panic(\"unreachable\")\n> This isn't unreachable.  NewConst is a public function and\n> might be passed bad input from the user.  It should panic\n> with a better message.\n>\n> panic(\"go/typechecker: NewConst: invalid kind\")\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode123\n>\n> src/pkg/go/typechecker/const.go:123: u, v = Const{cmplx{a, big.NewRat(0,\n> 0)}}, y\n> This says 0/0 but above it was 0/1.\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode137\n> src/pkg/go/typechecker/const.go:137: panic(\"unreachable\")\n> Caller might pass in zero value for x.\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode169\n> src/pkg/go/typechecker/const.go:169: return x.FloatString(10) // 10\n> digits of precision after decimal point seems fine\n> To completely specify a float64 you'd need 17.\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode176\n> src/pkg/go/typechecker/const.go:176: panic(\"unreachable\")\n> Not unreachable.\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/const.go#newcode199\n> src/pkg/go/typechecker/const.go:199: panic(\"unreachable\")\n> Not unreachable.\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/expr.go\n> File src/pkg/go/typechecker/expr.go (right):\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/expr.go#newcode37\n> src/pkg/go/typechecker/expr.go:37: // A named and an unnamed type are\n> always different.\n> // Otherwise must be unnamed.\n> if x.Obj != nil || y.Obj != nil {\n>    return false\n> }\n>\n> no?\n>\n>\n> http://codereview.appspot.com/4186046/diff/21001/src/pkg/go/typechecker/expr.go#newcode50\n> src/pkg/go/typechecker/expr.go:50: return false\n> Does not appear to check size of int, etc?\n>\n>\n> http://codereview.appspot.com/4186046/\n>\n",
			"disapproval": false,
			"date": "2011-02-16 07:50:48.433253",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "ah, import dot...\n\ngood point.\n\nwe wouldn't have to get rid of it though.\nit could be changed so that its identifiers are imported into\npackage scope rather than file scope.\n\ngiven that it's (almost?) always used as a means of saying\n\"i am pretending to be this package\", that might not be so bad.\n\ni wonder if anything would actually break.\n",
			"disapproval": false,
			"date": "2011-02-16 18:07:21.498519",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "removing rsc1",
			"disapproval": false,
			"date": "2011-03-06 20:05:56.224885",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"chickencha@gmail.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-12 18:40:06.529596",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 4186046: go/typechecker: basic steps towards typechecking entire...",
	"created": "2011-02-12 00:29:37.105374",
	"patchsets": [
		1,
		2001,
		4020,
		6001,
		9001,
		8021,
		5021,
		2002,
		21001
	],
	"modified": "2011-10-12 18:40:07.944956",
	"closed": true,
	"issue": 4186046
}