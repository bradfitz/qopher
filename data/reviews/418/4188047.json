{
	"description": "exp/winfsnotify: filesystem watcher for Windows",
	"cc": [
		"rsc@golang.org",
		"alex.brainman@gmail.com",
		"bradfitz@golang.org",
		"bsiegert@gmail.com",
		"go.peter.90@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"mattn.jp@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I can see 2 issues with it already:\n>\n> - it will not work for some network \"shares\":\n>\n> \"... Samba servers will not generate notifications, probably because the\n> underlying operating system does not support the functionality. Network\n> Attached Storage (NAS) devices usually run Linux, so won't support\n> notifications. High-end SANs are anybody's guess...\"\n\nThis is true even when Linux is the operating system:\nwhat happens on the network typically doesn't get reported.\n\n> - there known problems with ReadDirectoryChangesW:\n>\n> \"...There are many posts on the internet about the ReadDirectoryChangesW\n> API function missing files when there is a lot of file activity...\".\n\nIt's okay if Go exposes the same bugs Windows has.\n\n> Also, it is quite complicated to use ReadDirectoryChangesW interface.\n>\n> I'm not sure how popular os/inotify is (will be) with Go users, but\n> maybe it shouldn't be part of standard library. Maybe we should leave it\n> the way it is now, and only invest in it later once we get some user\n> feedback.\n\nI like how simple it ended up, and I know there are people who\ndo use it (because they wrote it).  I think we can end up with\na decent API and keep it.\n\nWill think more tomorrow.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-02-17 01:57:48.526196",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi guys,\n\nJust a heads up about this largish code submission for inotify on Windows.  The code is ready to review, however I modified the test and it currently fails on Linux.  The failure isn't too serious in my opinion - it fails because the Event channel won't close after the watcher is closed.  I will look into it a bit more tomorrow evening.",
			"disapproval": false,
			"date": "2011-02-14 00:28:45.025383",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for doing this.\n\n> ...  I have added a fix for\n> this in Patch Set 2.\n\nLinux test fails for me:\n\n--- FAIL: inotify.TestInotifyEvents (3.1 seconds)\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x100\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x100 == IN_CREATE\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x2\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x2 == IN_MODIFY\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x2\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x2 == IN_MODIFY\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x40\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x40 == IN_MOVED_FROM\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x80\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x80 == IN_MOVED_TO\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x800\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x800 == IN_MOVE_SELF\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x400\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x400 == IN_DELETE_SELF\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x8000\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x8000 == IN_IGNORED\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x200\n\treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x200 == IN_DELETE\n\texpected event: \"TestInotifyEvents.testdirectory\": 0x400\n\treceived event: \"TestInotifyEvents.testdirectory\": 0x400 == IN_DELETE_SELF\n\texpected event: \"TestInotifyEvents.testdirectory\": 0x8000\n\treceived event: \"TestInotifyEvents.testdirectory\": 0x8000 == IN_IGNORED\n\tcalling Close()\n\twaiting for the event channel to become closed...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\twaiting for 50 ms...\n\tevent stream was not closed after 1 second, as expected\nFAIL\nmake: *** [test] Error 1\n\nSo does windows test:\n\n--- FAIL: inotify.TestInotifyEvents (0.2 seconds)\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x100\n\terror received: GetQueuedCompletionPort: An unexpected network error occurred.\nFAIL\n\nIf I trace all syscall in windows, this is what I get:\n\nSYSCALL: GetStdHandle(stdhandle=-10) (handle=3, errno=0)\nSYSCALL: GetStdHandle(stdhandle=-11) (handle=7, errno=0)\nSYSCALL: GetStdHandle(stdhandle=-12) (handle=24, errno=0)\nSYSCALL: GetCommandLine() (cmd=0x209f4)\nSYSCALL: CommandLineToArgv(cmd=0x209f4, argc=0x109c0178) (argv=0x73dd8, errno=0)\nSYSCALL: LocalFree(hmem=474584) (handle=0, errno=0)\nSYSCALL: GetSystemTimeAsFileTime(time=0x109c02d0) ()\nSYSCALL: CreateIoCompletionPort(filehandle=-1, cphandle=0, key=0, threadcnt=0) (handle=676, errno=0)\nSYSCALL: DeleteFile(path=0x109c4900) (errno=5)\nSYSCALL: RemoveDirectory(path=0x109c4f00) (errno=145)\nSYSCALL: FindFirstFile(name=0x109c4ec0, data=0x109c8c80) (handle=481640, errno=0)\nSYSCALL: FindClose(handle=481640) (errno=0)\nSYSCALL: FindFirstFile(name=0x109c5e10, data=0x109c8a00) (handle=481640, errno=0)\nSYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=0)\nSYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=0)\nSYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=18)\nSYSCALL: DeleteFile(path=0x109c7380) (errno=0)\nSYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=18)\nSYSCALL: FindClose(handle=481640) (errno=0)\nSYSCALL: DeleteFile(path=0x109c4e00) (errno=5)\nSYSCALL: RemoveDirectory(path=0x109c4dc0) (errno=0)\nSYSCALL: CreateDirectory(path=0x109c4d80, sa=0x0) (errno=0)\nSYSCALL: PostQueuedCompletionStatus(port=676, count=0, key=0, overlapped=0x0) (errno=0)\nSYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258, overlapped=0x109c0240, timeout=4294967295) (errno=0)\nSYSCALL: FindFirstFile(name=0x10a06600, data=0x109ef000) (handle=481640, errno=0)\nSYSCALL: FindClose(handle=481640) (errno=0)\nSYSCALL: CreateFile(name=0x10a065c0, access=1, mode=7, sa=0x0, createmode=3, attrs=1107296256, templatefile=0) (handle=644, errno=0)\nSYSCALL: GetFileInformationByHandle(handle=644, data=0x10a06580) (errno=0)\nSYSCALL: CreateIoCompletionPort(filehandle=644, cphandle=676, key=0, threadcnt=0) (handle=676, errno=0)\nSYSCALL: CancelIo(s=644) (errno=0)\nSYSCALL: ReadDirectoryChanges(handle=644, buf=0x10a1b034, buflen=4096, watchSubTree=false, mask=51, retlen=0x0, overlapped=0x10a1b000, completionRoutine=0) (errno=0)\nSYSCALL: FindFirstFile(name=0x109c7580, data=0x109c8780) (handle=-1, errno=3)\nSYSCALL: CreateFile(name=0x109c7600, access=1073741824, mode=3, sa=0x0, createmode=2, attrs=128, templatefile=0) (handle=624, errno=0)\nSYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258, overlapped=0x109c0240, timeout=4294967295) (errno=59)\nSYSCALL: PostQueuedCompletionStatus(port=676, count=0, key=0, overlapped=0x0) (errno=0)\nSYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258, overlapped=0x109c0240, timeout=4294967295) (errno=0)\nSYSCALL: FormatMessage(flags=12800, msgsrc=0, msgid=59, langid=0, buf=[300/300]0x109c8500, args=0x0) (n=39, errno=0)\nSYSCALL: FindFirstFile(name=0x10a19180, data=0x109ef500) (handle=481640, errno=0)\nSYSCALL: GetSystemTimeAsFileTime(time=0x109c02f8) ()\n--- FAIL: inotify.TestInotifyEvents (0.9 seconds)\n\texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\": 0x100\n\terror received: GetQueuedCompletionPort: An unexpected network error occurred.\nSYSCALL: FindClose(handle=481640) (errno=0)\nSYSCALL: GetSystemTimeAsFileTime(time=0x109c0548) ()\nSYSCALL: CreateFile(name=0x10a064c0, access=1, mode=7, sa=0x0, createmode=3, attrs=1107296256, templatefile=0) (handle=616, errno=0)\nSYSCALL: CreateIoCompletionPort(filehandle=-1, cphandle=0, key=0, threadcnt=0) (handle=608, errno=0)\nSYSCALL: GetFileInformationByHandle(handle=616, data=0x10a06480) (errno=0)\nSYSCALL: PostQueuedCompletionStatus(port=608, count=0, key=0, overlapped=0x0) (errno=0)\nSYSCALL: GetQueuedCompletionStatus(cphandle=608, qty=0x109c0438, key=0x109c0440, overlapped=0x109c0448, timeout=4294967295) (errno=0)\nSYSCALL: CloseHandle(handle=616) (errno=0)\nSYSCALL: GetSystemTimeAsFileTime(time=0x109c0570) ()\nSYSCALL: CloseHandle(handle=608) (errno=0)\nSYSCALL: CancelIo(s=644) (errno=0)\nSYSCALL: ReadDirectoryChanges(handle=644, buf=0x10a1b034, buflen=4096, watchSubTree=false, mask=51, retlen=0x0, overlapped=0x10a1b000, completionRoutine=0) (errno=0)\nSYSCALL: sleep(msec=50) ()\nSYSCALL: GetSystemTimeAsFileTime(time=0x109c0580) ()\nSYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258, overlapped=0x109c0240, timeout=4294967295) (errno=59)\nSYSCALL: WriteFile(handle=624, buf=[12/13]0x109ee2c0, done=0x109c0458, overlapped=0x0) (errno=0)\nSYSCALL: GetSystemTimeAsFileTime(time=0x109c0598) ()\nFAIL\nSYSCALL: CloseHandle(\n\nAlex\n\nhttp://codereview.appspot.com/4188047/diff/4015/src/pkg/Makefile\nFile src/pkg/Makefile (right):\n\nhttp://codereview.appspot.com/4188047/diff/4015/src/pkg/Makefile#newcode195\nsrc/pkg/Makefile:195: DIRS+=os/inotify\nYour action doesn't match the comment. Please just put \n\nifeq ($(GOOS),windows)\nDIRS+=os/inotify\nendif\n\nright next to similar linux ifeq for inotify.\n\nhttp://codereview.appspot.com/4188047/diff/4015/src/pkg/os/inotify/inotify_linux_test.go\nFile src/pkg/os/inotify/inotify_linux_test.go (left):\n\nhttp://codereview.appspot.com/4188047/diff/4015/src/pkg/os/inotify/inotify_linux_test.go#oldcode6\nsrc/pkg/os/inotify/inotify_linux_test.go:6: \nShould, probably, rename this file to inotify_test.go.",
			"disapproval": false,
			"date": "2011-02-15 00:42:03.509318",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I haven't used any such technology in the past, but \n\nhttp://tinyurl.com/4onwbvr\n\npaints pretty good picture for Windows (see links on the bottom). It all comes down to ReadDirectoryChangesW that hector used in his proposal.\n\nI can see 2 issues with it already:\n\n- it will not work for some network \"shares\":\n\n\"... Samba servers will not generate notifications, probably because the underlying operating system does not support the functionality. Network Attached Storage (NAS) devices usually run Linux, so won't support notifications. High-end SANs are anybody's guess...\"\n\n- there known problems with ReadDirectoryChangesW:\n\n\"...There are many posts on the internet about the ReadDirectoryChangesW API function missing files when there is a lot of file activity...\".\n\nAlso, it is quite complicated to use ReadDirectoryChangesW interface.\n\nI'm not sure how popular os/inotify is (will be) with Go users, but maybe it shouldn't be part of standard library. Maybe we should leave it the way it is now, and only invest in it later once we get some user feedback.\n\nAlex",
			"disapproval": false,
			"date": "2011-02-17 01:55:05.609417",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nYour Windows PC is running Microsoft Windows 2000, an obsolete operating system whose extended support ended on August 13, 2010.\n\nI have tested 8.out.exe on Windows 2000, XP, and 7. It only fails on Windows 2000. There is no reason to support an obsolete and unsupported operating system.\n\nPeter\n\nOn 2011/02/16 01:03:39, brainman wrote:\n> On 2011/02/16 00:56:35, peterGo wrote:\n> > \n> > What are doing for your tests?\n> > \n> \n> I build test on linux:\n> \n> cd $GOROOT/src/pkg/os/inotify\n> export GOOS=windows\n> export GOARCH=386\n> make clean install test\n> \n> And then run built executable (8.out.exe) on my Windows PC.\n> \n> Alex\n\nOn 2011/02/16 01:00:07, brainman wrote:\n> Tried that. Sometimes it PASSes, sometimes it fails with this message:\n> \n> C:\\TMP\\t2>g:\\src\\pkg\\os\\inotify\\8.out.exe -v\n> === RUN  inotify.TestInotifyEvents\n> --- FAIL: inotify.TestInotifyEvents (0.2 seconds)\n>         expected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\n> ile\": 0x100\n>         received event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\n> ile\": 0x100 == IN_CREATE\n>         expected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\n> ile\": 0x2\n>         expected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\n> ile\": 0x2, received event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.te\n> stfile\": 0x100 == IN_CREATE\n> === RUN  inotify.TestInotifyClose\n> --- PASS: inotify.TestInotifyClose (0.1 seconds)\n> FAIL\n> \n> C:\\TMP\\t2>\n> \n> Windows 2000 here.\n> \n> Alex",
			"disapproval": false,
			"date": "2011-02-16 01:51:43.607982",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Feb 17, 2011 at 01:56, Hector Chu <hectorchu@gmail.com> wrote:\n> Mac:\n[...]\n> There appears to be an alternative called kqueue but I think it has\n> the same downsides as Linux dnotify.\n>\n> FreeBSD:\n> It appears to provide a clone of inotify called fsnotify.\n\nThe BSD-based operating systems (FreeBSD and Darwin among the\narchitectures supported by Go) use kqueue as the notification\nmechanism. See http://people.freebsd.org/~jlemon/papers/kqueue.pdf.\n\n--Benny.\n",
			"disapproval": false,
			"date": "2011-02-17 12:46:25.920495",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I think a sensible interface for Go would have us only watching\ndirectories.  We probably shouldn't allow recursive directory watching.\nThen we should expose a limited subset of the most useful flags in inotify.\nThese would probably be create, delete, modify and rename (within the\ndirectory only).  Conveniently this is the intersection of flags that Linux\nand Windows supports (of course we would check that these notifications are\nalso supported under the other OSes).  We should also merge the Event and\nError channels.  Is there anything else that we need to address?\n\nThanks,\nHector\nOn 17 Feb 2011 12:46, \"Benny Siegert\" <bsiegert@gmail.com> wrote:\n> On Thu, Feb 17, 2011 at 01:56, Hector Chu <hectorchu@gmail.com> wrote:\n>> Mac:\n> [...]\n>> There appears to be an alternative called kqueue but I think it has\n>> the same downsides as Linux dnotify.\n>>\n>> FreeBSD:\n>> It appears to provide a clone of inotify called fsnotify.\n>\n> The BSD-based operating systems (FreeBSD and Darwin among the\n> architectures supported by Go) use kqueue as the notification\n> mechanism. See http://people.freebsd.org/~jlemon/papers/kqueue.pdf.\n>\n> --Benny.\n",
			"disapproval": false,
			"date": "2011-02-17 14:35:53.901876",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "To follow up on my earlier email, I believe there is a bug in the Linux implementation where if a watcher has no watches then calling Close on it doesn't actually cause the reader goroutine to quit.  I have added a fix for this in Patch Set 2.",
			"disapproval": false,
			"date": "2011-02-14 22:27:36.453076",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nWhen I run ./all.bash for Windows XP, Windows 7, Ubuntu 10.10, 32-bit, and Ubuntu 10.04, 64-bit, all tests, including inotify test, pass.\n\nWhat are doing for your tests?\n\nPeter\n\nOn 2011/02/15 00:42:03, brainman wrote:\n> Thank you for doing this.\n> \n> > ...  I have added a fix for\n> > this in Patch Set 2.\n> \n> Linux test fails for me:\n> \n> --- FAIL: inotify.TestInotifyEvents (3.1 seconds)\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x100\n> \treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x100 == IN_CREATE\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x2\n> \treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x2 == IN_MODIFY\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x2\n> \treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x2 == IN_MODIFY\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x40\n> \treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x40 == IN_MOVED_FROM\n> \texpected event:\n> \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x80\n> \treceived event:\n> \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x80 ==\n> IN_MOVED_TO\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x800\n> \treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x800 == IN_MOVE_SELF\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x400\n> \treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x400 == IN_DELETE_SELF\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x8000\n> \treceived event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x8000 == IN_IGNORED\n> \texpected event:\n> \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x200\n> \treceived event:\n> \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile.new\": 0x200 ==\n> IN_DELETE\n> \texpected event: \"TestInotifyEvents.testdirectory\": 0x400\n> \treceived event: \"TestInotifyEvents.testdirectory\": 0x400 == IN_DELETE_SELF\n> \texpected event: \"TestInotifyEvents.testdirectory\": 0x8000\n> \treceived event: \"TestInotifyEvents.testdirectory\": 0x8000 == IN_IGNORED\n> \tcalling Close()\n> \twaiting for the event channel to become closed...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \twaiting for 50 ms...\n> \tevent stream was not closed after 1 second, as expected\n> FAIL\n> make: *** [test] Error 1\n> \n> So does windows test:\n> \n> --- FAIL: inotify.TestInotifyEvents (0.2 seconds)\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x100\n> \terror received: GetQueuedCompletionPort: An unexpected network error occurred.\n> FAIL\n> \n> If I trace all syscall in windows, this is what I get:\n> \n> SYSCALL: GetStdHandle(stdhandle=-10) (handle=3, errno=0)\n> SYSCALL: GetStdHandle(stdhandle=-11) (handle=7, errno=0)\n> SYSCALL: GetStdHandle(stdhandle=-12) (handle=24, errno=0)\n> SYSCALL: GetCommandLine() (cmd=0x209f4)\n> SYSCALL: CommandLineToArgv(cmd=0x209f4, argc=0x109c0178) (argv=0x73dd8, errno=0)\n> SYSCALL: LocalFree(hmem=474584) (handle=0, errno=0)\n> SYSCALL: GetSystemTimeAsFileTime(time=0x109c02d0) ()\n> SYSCALL: CreateIoCompletionPort(filehandle=-1, cphandle=0, key=0, threadcnt=0)\n> (handle=676, errno=0)\n> SYSCALL: DeleteFile(path=0x109c4900) (errno=5)\n> SYSCALL: RemoveDirectory(path=0x109c4f00) (errno=145)\n> SYSCALL: FindFirstFile(name=0x109c4ec0, data=0x109c8c80) (handle=481640,\n> errno=0)\n> SYSCALL: FindClose(handle=481640) (errno=0)\n> SYSCALL: FindFirstFile(name=0x109c5e10, data=0x109c8a00) (handle=481640,\n> errno=0)\n> SYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=0)\n> SYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=0)\n> SYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=18)\n> SYSCALL: DeleteFile(path=0x109c7380) (errno=0)\n> SYSCALL: FindNextFile(handle=481640, data=0x109c8a00) (errno=18)\n> SYSCALL: FindClose(handle=481640) (errno=0)\n> SYSCALL: DeleteFile(path=0x109c4e00) (errno=5)\n> SYSCALL: RemoveDirectory(path=0x109c4dc0) (errno=0)\n> SYSCALL: CreateDirectory(path=0x109c4d80, sa=0x0) (errno=0)\n> SYSCALL: PostQueuedCompletionStatus(port=676, count=0, key=0, overlapped=0x0)\n> (errno=0)\n> SYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258,\n> overlapped=0x109c0240, timeout=4294967295) (errno=0)\n> SYSCALL: FindFirstFile(name=0x10a06600, data=0x109ef000) (handle=481640,\n> errno=0)\n> SYSCALL: FindClose(handle=481640) (errno=0)\n> SYSCALL: CreateFile(name=0x10a065c0, access=1, mode=7, sa=0x0, createmode=3,\n> attrs=1107296256, templatefile=0) (handle=644, errno=0)\n> SYSCALL: GetFileInformationByHandle(handle=644, data=0x10a06580) (errno=0)\n> SYSCALL: CreateIoCompletionPort(filehandle=644, cphandle=676, key=0,\n> threadcnt=0) (handle=676, errno=0)\n> SYSCALL: CancelIo(s=644) (errno=0)\n> SYSCALL: ReadDirectoryChanges(handle=644, buf=0x10a1b034, buflen=4096,\n> watchSubTree=false, mask=51, retlen=0x0, overlapped=0x10a1b000,\n> completionRoutine=0) (errno=0)\n> SYSCALL: FindFirstFile(name=0x109c7580, data=0x109c8780) (handle=-1, errno=3)\n> SYSCALL: CreateFile(name=0x109c7600, access=1073741824, mode=3, sa=0x0,\n> createmode=2, attrs=128, templatefile=0) (handle=624, errno=0)\n> SYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258,\n> overlapped=0x109c0240, timeout=4294967295) (errno=59)\n> SYSCALL: PostQueuedCompletionStatus(port=676, count=0, key=0, overlapped=0x0)\n> (errno=0)\n> SYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258,\n> overlapped=0x109c0240, timeout=4294967295) (errno=0)\n> SYSCALL: FormatMessage(flags=12800, msgsrc=0, msgid=59, langid=0,\n> buf=[300/300]0x109c8500, args=0x0) (n=39, errno=0)\n> SYSCALL: FindFirstFile(name=0x10a19180, data=0x109ef500) (handle=481640,\n> errno=0)\n> SYSCALL: GetSystemTimeAsFileTime(time=0x109c02f8) ()\n> --- FAIL: inotify.TestInotifyEvents (0.9 seconds)\n> \texpected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testfile\":\n> 0x100\n> \terror received: GetQueuedCompletionPort: An unexpected network error occurred.\n> SYSCALL: FindClose(handle=481640) (errno=0)\n> SYSCALL: GetSystemTimeAsFileTime(time=0x109c0548) ()\n> SYSCALL: CreateFile(name=0x10a064c0, access=1, mode=7, sa=0x0, createmode=3,\n> attrs=1107296256, templatefile=0) (handle=616, errno=0)\n> SYSCALL: CreateIoCompletionPort(filehandle=-1, cphandle=0, key=0, threadcnt=0)\n> (handle=608, errno=0)\n> SYSCALL: GetFileInformationByHandle(handle=616, data=0x10a06480) (errno=0)\n> SYSCALL: PostQueuedCompletionStatus(port=608, count=0, key=0, overlapped=0x0)\n> (errno=0)\n> SYSCALL: GetQueuedCompletionStatus(cphandle=608, qty=0x109c0438, key=0x109c0440,\n> overlapped=0x109c0448, timeout=4294967295) (errno=0)\n> SYSCALL: CloseHandle(handle=616) (errno=0)\n> SYSCALL: GetSystemTimeAsFileTime(time=0x109c0570) ()\n> SYSCALL: CloseHandle(handle=608) (errno=0)\n> SYSCALL: CancelIo(s=644) (errno=0)\n> SYSCALL: ReadDirectoryChanges(handle=644, buf=0x10a1b034, buflen=4096,\n> watchSubTree=false, mask=51, retlen=0x0, overlapped=0x10a1b000,\n> completionRoutine=0) (errno=0)\n> SYSCALL: sleep(msec=50) ()\n> SYSCALL: GetSystemTimeAsFileTime(time=0x109c0580) ()\n> SYSCALL: GetQueuedCompletionStatus(cphandle=676, qty=0x109c0260, key=0x109c0258,\n> overlapped=0x109c0240, timeout=4294967295) (errno=59)\n> SYSCALL: WriteFile(handle=624, buf=[12/13]0x109ee2c0, done=0x109c0458,\n> overlapped=0x0) (errno=0)\n> SYSCALL: GetSystemTimeAsFileTime(time=0x109c0598) ()\n> FAIL\n> SYSCALL: CloseHandle(\n> \n> Alex\n> \n> http://codereview.appspot.com/4188047/diff/4015/src/pkg/Makefile\n> File src/pkg/Makefile (right):\n> \n> http://codereview.appspot.com/4188047/diff/4015/src/pkg/Makefile#newcode195\n> src/pkg/Makefile:195: DIRS+=os/inotify\n> Your action doesn't match the comment. Please just put \n> \n> ifeq ($(GOOS),windows)\n> DIRS+=os/inotify\n> endif\n> \n> right next to similar linux ifeq for inotify.\n> \n> http://codereview.appspot.com/4188047/diff/4015/src/pkg/os/inotify/inotify_linux_test.go\n> File src/pkg/os/inotify/inotify_linux_test.go (left):\n> \n> http://codereview.appspot.com/4188047/diff/4015/src/pkg/os/inotify/inotify_linux_test.go#oldcode6\n> src/pkg/os/inotify/inotify_linux_test.go:6: \n> Should, probably, rename this file to inotify_test.go.",
			"disapproval": false,
			"date": "2011-02-16 00:56:35.794533",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Feb 16, 2011 at 02:51,  <go.peter.90@gmail.com> wrote:\n> Your Windows PC is running Microsoft Windows 2000, an obsolete operating\n> system whose extended support ended on August 13, 2010.\n>\n> I have tested 8.out.exe on Windows 2000, XP, and 7. It only fails on\n> Windows 2000. There is no reason to support an obsolete and unsupported\n> operating system.\n\nThe fact that it has users (including Alex!) means that there is a reason.\n\n--Benny.\n",
			"disapproval": false,
			"date": "2011-02-16 08:00:04.075166",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for reviewing and testing this Alex.  I'm surprised that my fix for\nLinux isn't working for you - I wonder if Balazs can chip in on this?  As\nfor Windows, it sounds like the test is being run from a Linux share.\nUnfortunately this is not a scenario that is guaranteed to work.  Can you\ntry running the test from a local hard drive please?\n\nThanks,\nHector\nOn 15 Feb 2011 00:42, <alex.brainman@gmail.com> wrote:\n",
			"disapproval": false,
			"date": "2011-02-15 07:53:42.963015",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/02/16 01:51:43, peterGo wrote:\n> ... It only fails on Windows\n> 2000. There is no reason to support an obsolete and unsupported operating\n> system.\n\nI think the onus is on us to understand why and only then we can make such decision.\n\nAlex",
			"disapproval": false,
			"date": "2011-02-16 07:48:31.246174",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/02/15 07:53:42, hector wrote:\n> ...  I'm surprised that my fix for\n> Linux isn't working for you - I wonder if Balazs can chip in on this?  ...\n\nFYI, my uname -a prints:\n\nLinux sos 2.6.24-gentoo-r8 #10 SMP Thu Jan 22 16:09:08 EST 2009 i686 Intel(R) Xeon(TM) CPU 1.80GHz GenuineIntel GNU/Linux\n\n> ... As\n> for Windows, it sounds like the test is being run from a Linux share.\n\nI did do that.\n\n> Unfortunately this is not a scenario that is guaranteed to work.  Can you\n> try running the test from a local hard drive please?\n> \n\nTried that. Sometimes it PASSes, sometimes it fails with this message:\n\nC:\\TMP\\t2>g:\\src\\pkg\\os\\inotify\\8.out.exe -v\n=== RUN  inotify.TestInotifyEvents\n--- FAIL: inotify.TestInotifyEvents (0.2 seconds)\n        expected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\nile\": 0x100\n        received event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\nile\": 0x100 == IN_CREATE\n        expected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\nile\": 0x2\n        expected event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.testf\nile\": 0x2, received event: \"TestInotifyEvents.testdirectory/TestInotifyEvents.te\nstfile\": 0x100 == IN_CREATE\n=== RUN  inotify.TestInotifyClose\n--- PASS: inotify.TestInotifyClose (0.1 seconds)\nFAIL\n\nC:\\TMP\\t2>\n\nWindows 2000 here.\n\nAlex",
			"disapproval": false,
			"date": "2011-02-16 01:00:07.513385",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/02/16 00:56:35, peterGo wrote:\n> \n> What are doing for your tests?\n> \n\nI build test on linux:\n\ncd $GOROOT/src/pkg/os/inotify\nexport GOOS=windows\nexport GOARCH=386\nmake clean install test\n\nAnd then run built executable (8.out.exe) on my Windows PC.\n\nAlex",
			"disapproval": false,
			"date": "2011-02-16 01:03:39.407975",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks all.  I think the Win2k issue is caused by a simple race in the\ncode, and I already have a fix in mind.  As for Linux, I will try a\ndifferent approach.\n\nThanks,\nHector\n\nOn 16 February 2011 07:59, Benny Siegert <bsiegert@gmail.com> wrote:\n> On Wed, Feb 16, 2011 at 02:51, \u00a0<go.peter.90@gmail.com> wrote:\n>> Your Windows PC is running Microsoft Windows 2000, an obsolete operating\n>> system whose extended support ended on August 13, 2010.\n>>\n>> I have tested 8.out.exe on Windows 2000, XP, and 7. It only fails on\n>> Windows 2000. There is no reason to support an obsolete and unsupported\n>> operating system.\n>\n> The fact that it has users (including Alex!) means that there is a reason.\n>\n> --Benny.\n>\n",
			"disapproval": false,
			"date": "2011-02-16 08:20:32.370164",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ok, understood.  To start things off, I looked briefly at the kind of\nsupport that the other OSes give for file system notification.\n\nMac:\nSee how it is implemented in Factor:\nhttp://factor-language.blogspot.com/2008/02/file-system-change-monitoring-on-mac-os.html\nAccording to the blog post it appears to contain severe limitations.\nIt requires a CoreFoundation event loop to be running.  Also it won't\ntell you the names of the files that changed and what the changes\nwere, only that a change occurred within a directory.  It's not a\nsyscall interface, but rather a Carbon API.\nThere appears to be an alternative called kqueue but I think it has\nthe same downsides as Linux dnotify.\n\nFreeBSD:\nIt appears to provide a clone of inotify called fsnotify.\n(Coincidentally Linux inotify itself was reimplemented on top of a new\nnotify framework called fsnotify in 2008).  It doesn't appear to be an\nofficial API yet as I couldn't find the man page for it.\n\nOn 16 February 2011 23:12, Russ Cox <rsc@golang.org> wrote:\n> I'm a little uncomfortable with the idea of \"inotify for Windows\".\n> inotify is a very Linux-specific thing and shoehorning Windows\n> into that sets a bad precedent. \u00a0I don't want to just take what\n> Linux does as the official interface without an explicit decision.\n> The intent was to get some experience with what inotify would\n> look like, not to set the API for all other OSes.\n>\n> What other OSes have similar notification mechanisms?\n> Let's try to sketch what the generic os/notify API is and\n> make sure it can be implemented and exposes enough\n> on the various systems.\n>\n> The code looks fine, I just want to make sure we get the\n> interface right.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-02-17 00:56:34.802350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I'm a little uncomfortable with the idea of \"inotify for Windows\".\ninotify is a very Linux-specific thing and shoehorning Windows\ninto that sets a bad precedent.  I don't want to just take what\nLinux does as the official interface without an explicit decision.\nThe intent was to get some experience with what inotify would\nlook like, not to set the API for all other OSes.\n\nWhat other OSes have similar notification mechanisms?\nLet's try to sketch what the generic os/notify API is and\nmake sure it can be implemented and exposes enough\non the various systems.\n\nThe code looks fine, I just want to make sure we get the\ninterface right.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-02-16 23:12:48.270090",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": ":-)  Many thanks for reviewing this (again).\n\nOn 14 October 2011 22:27,  <rsc@golang.org> wrote:\n> LGTM\n>\n> I'd wait until Monday to see if anyone else has comments,\n> but it's pretty nice.\n>\n>\n>\n> http://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go\n> File src/pkg/exp/winfsnotify/winfsnotify.go (right):\n>\n> http://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode258\n> src/pkg/exp/winfsnotify/winfsnotify.go:258: return\n> os.NewError(fmt.Sprintf(\"can't remove non-existent notify watch for:\n> %s\", pathname))\n> Can use fmt.Errorf now.\n>\n> http://codereview.appspot.com/4188047/\n>\n",
			"disapproval": false,
			"date": "2011-10-14 21:35:57.591923",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2011-10-17 19:55:43.111795",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Resending this CL with the code under exp/ as per the plan here:\nhttp://groups.google.com/group/golang-dev/msg/f6f983a6e018d20d\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-13 20:55:36.031556",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Test still fails for me:\n\n=== RUN winfsnotify.TestNotifyEvents\n--- FAIL: winfsnotify.TestNotifyEvents (0.06 seconds)\n\texpected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x100\n\terror received: GetQueuedCompletionPort: An unexpected network error occurred.\n=== RUN winfsnotify.TestNotifyClose\n--- PASS: winfsnotify.TestNotifyClose (0.08 seconds)\nFAIL\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go\nFile src/pkg/exp/winfsnotify/winfsnotify.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode155\nsrc/pkg/exp/winfsnotify/winfsnotify.go:155: func getDir(pathname string) (dir string, err os.Error) {\nShould this work for pathname=\"c:winfsnotify.go\"?\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode165\nsrc/pkg/exp/winfsnotify/winfsnotify.go:165: dir = dir[:len(dir)-1]\nNot sure why need to anything else but return result of filepath.Split here.\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify_test.go\nFile src/pkg/exp/winfsnotify/winfsnotify_test.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify_test.go#newcode44\nsrc/pkg/exp/winfsnotify/winfsnotify_test.go:44: }\ndefer os.RemoveAll(testDir)\n\nto clean up after test fails",
			"disapproval": false,
			"date": "2011-10-16 23:54:38.023360",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go\nFile src/pkg/exp/winfsnotify/winfsnotify.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode5\nsrc/pkg/exp/winfsnotify/winfsnotify.go:5: package winfsnotify\n// Package winsfnotify ...\n\nsome comment\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode16\nsrc/pkg/exp/winfsnotify/winfsnotify.go:16: type Event struct {\ncomment?\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode58\nsrc/pkg/exp/winfsnotify/winfsnotify.go:58: type Watcher struct {\n// A Watcher ... \n\nSome comment.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode68\nsrc/pkg/exp/winfsnotify/winfsnotify.go:68: // NewWatcher creates and returns a new notify instance\nend sentence with a period\n\nalso, s/new notify instance/Watcher/ ?",
			"disapproval": false,
			"date": "2011-10-14 21:32:13.158552",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Just a cursory review - there is too much happening for my brain :-)\n\nThe test fails on my WinXP:\n\n=== RUN winfsnotify.TestNotifyEvents\n--- FAIL: winfsnotify.TestNotifyEvents (0.11 seconds)\n        expected event: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x100\n        received event: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x100 == FS_CREATE\n        expected event: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2\n        expected event: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2, received event: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfi\nle\": 0x40 == FS_MOVED_FROM\n=== RUN winfsnotify.TestNotifyClose\n--- PASS: winfsnotify.TestNotifyClose (0.06 seconds)\nFAIL\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go\nFile src/pkg/exp/winfsnotify/winfsnotify.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode145\nsrc/pkg/exp/winfsnotify/winfsnotify.go:145: attr, e := syscall.GetFileAttributes(syscall.StringToUTF16Ptr(pathname))\nWhy aren't you using os.Stat here?\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode152\nsrc/pkg/exp/winfsnotify/winfsnotify.go:152: dir, _ = path.Split(pathname)\nShouldn't this be filepath.Split?\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode287\nsrc/pkg/exp/winfsnotify/winfsnotify.go:287: if e := syscall.CancelIo(watch.ino.handle); e != 0 {\nYou, probably, want to add some comment somewhere to stress that all these actions are supposed to happened on single thread that running readEvents.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify_test.go\nFile src/pkg/exp/winfsnotify/winfsnotify_test.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify_test.go#newcode14\nsrc/pkg/exp/winfsnotify/winfsnotify_test.go:14: t.Logf(\"expected event: \\\"%s\\\": 0x%x\", name, mask)\nThis gets mixed up with error messages. It looks confusing, if you are not looking at the source and don't know it is output of t.Logf.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify_test.go#newcode22\nsrc/pkg/exp/winfsnotify/winfsnotify_test.go:22: t.Logf(\"received event: %s\", event)\nSame as above.",
			"disapproval": false,
			"date": "2011-10-15 05:07:31.669845",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nI've adjusted the test so that it receives the events synchronously and inline with the file operations.  I hope this resolves the XP issue.\n\nAll,\n\nI've added some comments and added a separate quit channel in case the Event channel blocks up.  PTAL\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go\nFile src/pkg/exp/winfsnotify/winfsnotify.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode5\nsrc/pkg/exp/winfsnotify/winfsnotify.go:5: package winfsnotify\nOn 2011/10/14 21:32:13, bradfitz wrote:\n> // Package winsfnotify ...\n> \n> some comment\n\nDone.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode16\nsrc/pkg/exp/winfsnotify/winfsnotify.go:16: type Event struct {\nOn 2011/10/14 21:32:13, bradfitz wrote:\n> comment?\n\nDone.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode58\nsrc/pkg/exp/winfsnotify/winfsnotify.go:58: type Watcher struct {\nOn 2011/10/14 21:32:13, bradfitz wrote:\n> // A Watcher ... \n> \n> Some comment. \n\nDone.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode68\nsrc/pkg/exp/winfsnotify/winfsnotify.go:68: // NewWatcher creates and returns a new notify instance\nOn 2011/10/14 21:32:13, bradfitz wrote:\n> end sentence with a period\n> \n> also, s/new notify instance/Watcher/ ?\n\nDone.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode145\nsrc/pkg/exp/winfsnotify/winfsnotify.go:145: attr, e := syscall.GetFileAttributes(syscall.StringToUTF16Ptr(pathname))\nOn 2011/10/15 05:07:31, brainman wrote:\n> Why aren't you using os.Stat here?\n\nIt is less efficient than using GetFileAttributes.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode152\nsrc/pkg/exp/winfsnotify/winfsnotify.go:152: dir, _ = path.Split(pathname)\nOn 2011/10/15 05:07:31, brainman wrote:\n> Shouldn't this be filepath.Split?\n\nDone.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode258\nsrc/pkg/exp/winfsnotify/winfsnotify.go:258: return os.NewError(fmt.Sprintf(\"can't remove non-existent notify watch for: %s\", pathname))\nOn 2011/10/14 21:27:31, rsc wrote:\n> Can use fmt.Errorf now.\n\nDone.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode287\nsrc/pkg/exp/winfsnotify/winfsnotify.go:287: if e := syscall.CancelIo(watch.ino.handle); e != 0 {\nOn 2011/10/15 05:07:31, brainman wrote:\n> You, probably, want to add some comment somewhere to stress that all these\n> actions are supposed to happened on single thread that running readEvents.\n\nDone.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify_test.go\nFile src/pkg/exp/winfsnotify/winfsnotify_test.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify_test.go#newcode14\nsrc/pkg/exp/winfsnotify/winfsnotify_test.go:14: t.Logf(\"expected event: \\\"%s\\\": 0x%x\", name, mask)\nOn 2011/10/15 05:07:31, brainman wrote:\n> This gets mixed up with error messages. It looks confusing, if you are not\n> looking at the source and don't know it is output of t.Logf.\n\nYes, but it's useful for debugging a failure on someone else's machine.",
			"disapproval": false,
			"date": "2011-10-15 10:31:50.731294",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"leczb@google.com",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI'd wait until Monday to see if anyone else has comments,\nbut it's pretty nice.\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go\nFile src/pkg/exp/winfsnotify/winfsnotify.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/27001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode258\nsrc/pkg/exp/winfsnotify/winfsnotify.go:258: return os.NewError(fmt.Sprintf(\"can't remove non-existent notify watch for: %s\", pathname))\nCan use fmt.Errorf now.",
			"disapproval": false,
			"date": "2011-10-14 21:27:31.873980",
			"approval": true
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 17 October 2011 00:54,  <alex.brainman@gmail.com> wrote:\n> Test still fails for me:\n>\n> === RUN winfsnotify.TestNotifyEvents\n> --- FAIL: winfsnotify.TestNotifyEvents (0.06 seconds)\n> \u00a0 \u00a0 \u00a0 \u00a0expected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\":\n> 0x100\n> \u00a0 \u00a0 \u00a0 \u00a0error received: GetQueuedCompletionPort: An unexpected network error\n> occurred.\n> === RUN winfsnotify.TestNotifyClose\n> --- PASS: winfsnotify.TestNotifyClose (0.08 seconds)\n> FAIL\n\nI thought we agreed that running this on a network share didn't matter?\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go\nFile src/pkg/exp/winfsnotify/winfsnotify.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode155\nsrc/pkg/exp/winfsnotify/winfsnotify.go:155: func getDir(pathname string) (dir string, err os.Error) {\nOn 2011/10/16 23:54:38, brainman wrote:\n> Should this work for pathname=\"c:winfsnotify.go\"?\n\nI don't know, should it?  In any case the logic for separating that kind of pathname should belong in the filepath package.\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode165\nsrc/pkg/exp/winfsnotify/winfsnotify.go:165: dir = dir[:len(dir)-1]\nOn 2011/10/16 23:54:38, brainman wrote:\n> Not sure why need to anything else but return result of filepath.Split here.\n\nI think I did this because the Windows API didn't like trailing slashes in directory paths (apart from roots).\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify_test.go\nFile src/pkg/exp/winfsnotify/winfsnotify_test.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify_test.go#newcode44\nsrc/pkg/exp/winfsnotify/winfsnotify_test.go:44: }\nOn 2011/10/16 23:54:38, brainman wrote:\n> defer os.RemoveAll(testDir)\n> \n> to clean up after test fails\n\nOK, will do.",
			"disapproval": false,
			"date": "2011-10-17 07:18:25.039607",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"go.peter.90@gmail.com",
				"bsiegert@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nI forgot I was running it on network share.\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go\nFile src/pkg/exp/winfsnotify/winfsnotify.go (right):\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode155\nsrc/pkg/exp/winfsnotify/winfsnotify.go:155: func getDir(pathname string) (dir string, err os.Error) {\nOn 2011/10/17 07:18:25, hector wrote:\n> \n> ...  In any case the logic for separating that kind of\n> pathname should belong in the filepath package.\n\nI agree. And I think it does. Lets use it.\n\nhttp://codereview.appspot.com/4188047/diff/36001/src/pkg/exp/winfsnotify/winfsnotify.go#newcode165\nsrc/pkg/exp/winfsnotify/winfsnotify.go:165: dir = dir[:len(dir)-1]\nOn 2011/10/17 07:18:25, hector wrote:\n> \n> I think I did this because the Windows API didn't like trailing slashes in\n> directory paths (apart from roots).\n\nThen please comment that.\n\nAlso filepath.Split will return '\\' at the end of directories. Except for names like \"c:winfsnotify.go\" where it will return \"c:\". In that case, you, probably, want to change it to \"c:.\", unless \"c:\" will work as is.",
			"disapproval": false,
			"date": "2011-10-18 03:59:29.976380",
			"approval": true
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I got fail. But I don't know why MoveFile occur FS_MODIFY.\n\n--- FAIL: winfsnotify.TestNotifyEvents (0.16 seconds)\nexpected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x100\nreceived: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x100 \n== FS_CREATE\nexpected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2\nreceived: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2 == \nFS_MODIFY\nexpected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2\nreceived: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2 == \nFS_MODIFY\nexpected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x40\nreceived: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2 == \nFS_MODIFY\ndid not receive expected event\nFAIL\ngotest: \"./8.out.exe\" failed: exit status 1\n\n",
			"disapproval": false,
			"date": "2011-10-19 02:35:21.020740",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"bsiegert@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, alex.brainman@gmail.com, bradfitz@golang.org (cc: bsiegert@gmail.com, go.peter.90@gmail.com, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-18 20:10:16.633607",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"bsiegert@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=04345e5969cf ***\n\nexp/winfsnotify: filesystem watcher for Windows\n\nR=rsc, alex.brainman, bradfitz\nCC=bsiegert, go.peter.90, golang-dev\nhttp://codereview.appspot.com/4188047",
			"disapproval": false,
			"date": "2011-10-18 20:10:22.202411",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I can't repro this at all.  You'll have to debug this on your own.\n\nOn 19 October 2011 03:35, mattn <mattn.jp@gmail.com> wrote:\n> I got fail. But I don't know why MoveFile occur FS_MODIFY.\n> --- FAIL: winfsnotify.TestNotifyEvents (0.16 seconds)\n> expected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x100\n> received: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x100\n> == FS_CREATE\n> expected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2\n> received: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2 ==\n> FS_MODIFY\n> expected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2\n> received: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2 ==\n> FS_MODIFY\n> expected: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x40\n> received: \"TestNotifyEvents.testdirectory/TestNotifyEvents.testfile\": 0x2 ==\n> FS_MODIFY\n> did not receive expected event\n> FAIL\n> gotest: \"./8.out.exe\" failed: exit status 1\n>\n",
			"disapproval": false,
			"date": "2011-10-19 08:14:05.595527",
			"approval": false
		}
	],
	"owner_email": "hectorchu@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "hector",
	"subject": "code review 4188047: exp/winfsnotify: filesystem watcher for Windows",
	"created": "2011-02-13 23:25:47.433098",
	"patchsets": [
		5002,
		4015,
		15002,
		27001,
		36001,
		20010,
		45001,
		50001
	],
	"modified": "2011-10-19 02:35:21.462146",
	"closed": true,
	"issue": 4188047
}