{
	"description": "exp/locale: proposed API for Locale type.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"bsiegert@gmail.com"
	],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go\nFile src/pkg/exp/locale/locale.go (right):\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode26\nsrc/pkg/exp/locale/locale.go:26: // Locale represents a Unicode Locale Identifier. It can by various packages to\nOn 2013/01/07 20:35:06, bsiegert wrote:\n> s/by various packages/be used/\n\nDone.\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode38\nsrc/pkg/exp/locale/locale.go:38: // http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers.\nReworked.\n\nOn 2013/01/07 20:35:06, bsiegert wrote:\n> remove full stop at the end?\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode76\nsrc/pkg/exp/locale/locale.go:76: type PartType int\nPart is indeed better.  The Descriptor makes more sense if Language etc. are string instead of struct, but I'll consider it.\n\nOn 2013/01/07 20:35:06, bsiegert wrote:\n> type Part int maybe? PartType sounds strange.\n> \n> On second thought, why not make something like\n> \n> type Descriptor struct {\n>   Identifier, Language, Script, Region, Variant, Transform string\n>   KeyValue map[string]string // ?\n>   Attributes []string\n>   PrivateUse string\n> }\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode76\nsrc/pkg/exp/locale/locale.go:76: type PartType int\nChanged to Part.  The Descriptor make more sense if the various types are string instead of struct.  It only makes sense for setting. Also, identifier overlaps with language, script, region and variant.  But I'll consider it.\n\nOn 2013/01/07 20:35:06, bsiegert wrote:\n> type Part int maybe? PartType sounds strange.\n> \n> On second thought, why not make something like\n> \n> type Descriptor struct {\n>   Identifier, Language, Script, Region, Variant, Transform string\n>   KeyValue map[string]string // ?\n>   Attributes []string\n>   PrivateUse string\n> }\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode124\nsrc/pkg/exp/locale/locale.go:124: // by default from it's parent.\nOn 2013/01/07 20:35:06, bsiegert wrote:\n> its\n\nDone.\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode146\nsrc/pkg/exp/locale/locale.go:146: type Script struct {\nThis is to be able to get some guarantee the string is well-formed.  I'm indeed considering changing this, though, but will leave it like this for now as changing it to string is irreversible.\n\nOn 2013/01/07 20:35:06, bsiegert wrote:\n> type Script string? same below",
			"disapproval": false,
			"date": "2013-01-08 14:24:34.906560",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-01-07 19:52:21.929490",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"mpvl@golang.org",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go\nFile src/pkg/exp/locale/locale.go (right):\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode26\nsrc/pkg/exp/locale/locale.go:26: // Locale represents a Unicode Locale Identifier. It can by various packages to\ns/by various packages/be used/\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode38\nsrc/pkg/exp/locale/locale.go:38: // http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers.\nremove full stop at the end?\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode76\nsrc/pkg/exp/locale/locale.go:76: type PartType int\ntype Part int maybe? PartType sounds strange.\n\nOn second thought, why not make something like\n\ntype Descriptor struct {\n  Identifier, Language, Script, Region, Variant, Transform string\n  KeyValue map[string]string // ?\n  Attributes []string\n  PrivateUse string\n}\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode124\nsrc/pkg/exp/locale/locale.go:124: // by default from it's parent.\nits\n\nhttps://codereview.appspot.com/7066049/diff/2001/src/pkg/exp/locale/locale.go#newcode146\nsrc/pkg/exp/locale/locale.go:146: type Script struct {\ntype Script string? same below",
			"disapproval": false,
			"date": "2013-01-07 20:35:06.909330",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 7066049: exp/locale: proposed API for Locale type.",
	"created": "2013-01-07 19:51:51.418390",
	"patchsets": [
		1,
		2001,
		5002,
		10001,
		13001,
		16001
	],
	"modified": "2013-01-07 20:35:06.909330",
	"closed": false,
	"issue": 7066049
}