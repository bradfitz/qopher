{
	"description": "path/filepath: implement Match and Glob on windows\n\nAs discussed on golang-dev, windows will use\n\"\\\" as path separator. No escaping allowed.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"mattn.jp@gmail.com",
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"bsiegert@gmail.com",
		"r@golang.org"
	],
	"reviewers": [
		"peterthrun@ymail.com",
		"aram@mgk.ro"
	],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/14 23:45:34, r2 wrote:\n> > \n> > \"Need\" may be too strong, but it's conceivable we'd want to discriminate\n> between \\- and \\\\- for instance.\n> \n> And now I see \\\\- looks like an SMB name. Not sure if that's an argument for or\n> against.\n> \n\nIt is not just that. I think that forcing us, Windows users, to double every path delimiter is bit too much. Doubly so, considering that \"strings\" would need to double \\ as well. So nice unix pattern like \"a/b\" would look like \"a\\\\\\\\b\" on windows.\n\nI do not see any problems with \\- and \\\\-. First would be - character that needs to match - in the path. Second would be \\ path delimiter followed immediately by - character - both need to match in the path. Perhaps, I am mistaken.\n\nAlso, I am bit concerned that match patterns will be non-portable from unix to windows. I know, we are trying to fit \"local\" path rules as best as we could. I do not want to complicate things more then they need to be, but perhaps we could provide some \"compiler\" that translate any path pattern into \"OS-independant\" form.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-15 00:01:22.835671",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 15, 2012, at 11:01 AM, alex.brainman@gmail.com wrote:\n\n> On 2012/03/14 23:45:34, r2 wrote:\n>> >\n>> > \"Need\" may be too strong, but it's conceivable we'd want to\n> discriminate\n>> between \\- and \\\\- for instance.\n> \n>> And now I see \\\\- looks like an SMB name. Not sure if that's an\n> argument for or\n>> against.\n> \n> \n> It is not just that. I think that forcing us, Windows users, to double\n> every path delimiter is bit too much. Doubly so, considering that\n> \"strings\" would need to double \\ as well. So nice unix pattern like\n> \"a/b\" would look like \"a\\\\\\\\b\" on windows.\n> \n> I do not see any problems with \\- and \\\\-. First would be - character\n> that needs to match - in the path. Second would be \\ path delimiter\n> followed immediately by - character - both need to match in the path.\n> Perhaps, I am mistaken.\n> \n> Also, I am bit concerned that match patterns will be non-portable from\n> unix to windows. I know, we are trying to fit \"local\" path rules as best\n> as we could. I do not want to complicate things more then they need to\n> be, but perhaps we could provide some \"compiler\" that translate any path\n> pattern into \"OS-independant\" form.\n\nI formally withdraw from this conversation. I am out of my depth. Do what works, as best it can, in Windows.\n\nOne day I'd like to meet the person who chose \\ as the separator for DOS, or perhaps that was CP/M, just to chat about the unfortunate accidents of technological history.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-15 00:05:14.441185",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/15 00:05:14, r2 wrote:\n> \n\nWhat about we start with rsc rule:\n\n... the \\ means \\ unless it is followed by *?[]- ...\n\nWe also say that both / and \\ will match correspondent os path delimiter. So that \"a/b\" will work on windows too. Same \"a\\\\b\" (or `a\\b`) will work on unix. That should allow users to use whatever pattern they wish and it will match on either os.\n\nNo duplicating \\ inside pattern needed.\n\nWhere is teh downside?\n\nAlex",
			"disapproval": false,
			"date": "2012-03-15 00:36:19.035108",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I won't pass for windows. Windows can't escape characters in the path. And as far as I memory, Glob() is designed for slash path separator to use Glob().\n\nhttps://groups.google.com/d/topic/golang-dev/CuRp83hrpQg/discussion\n\nIf working Glob() on windows, we must call FromSlash() before call Glob(). I wrote grep application few month ago. it call FromSlash() before calling Glob().\n\nhttps://github.com/mattn/jvgrep\n\nIt work fine for me. :)\nThis test should be skipped on windows.\n\nOn 2012/03/14 05:10:18, brainman wrote:\n> On Wednesday, March 14, 2012 3:36:21 PM UTC+11, r wrote:\n> >\n> >\n> > ... Perhaps on Windows we need a different escape character, ...\n> >\n> This would confuse me. I am use to \\ in regex and others.\n>  \n> \n> > If we were to choose a different one for windows (only), what would make \n> > sense?\n> >\n> > As far as I know (and I could be mistaken here) Windows file pattern \n> matching is very limited: * and ?, and only in the last (file) portion of \n> path. I wouldn't be overly concerned if we made our implementation similar \n> to that. But what do I know. Perhaps, it is best we wait for others to \n> comment. The only problem I see with that is unix people will expect their \n> code to be portable ...\n> \n> As to \"escape character on Windows\" - I really do not know. These are \n> \"reserved\" characters (http://goo.gl/N2OOw) as far as file names are \n> concerned on Windows:\n> \n>    - < (less than)\n>    - > (greater than)\n>    - : (colon)\n>    - \" (double quote)\n>    - / (forward slash)\n>    - \\ (backslash)\n>    - | (vertical bar or pipe)\n>    - ? (question mark)\n>    - * (asterisk)\n> \n> We can't use : - it can be part of path (c:\\a.txt). \" will be too \n> confusing. \\ and / both can be part of path.? and * are for pattern \n> matching. So, that leaves <, > and |. None of them looks good to me. \n> Perhaps either \\ or / is not such a bad ideas after all.\n> \n> Alex",
			"disapproval": false,
			"date": "2012-03-14 07:01:24.323074",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "typo: s/I won't pass/It won't pass/\n\nOn 2012/03/14 07:01:24, mattn wrote:\n> I won't pass for windows. Windows can't escape characters in the path. And as\n> far as I memory, Glob() is designed for slash path separator to use Glob().\n> \n> https://groups.google.com/d/topic/golang-dev/CuRp83hrpQg/discussion\n> \n> If working Glob() on windows, we must call FromSlash() before call Glob(). I\n> wrote grep application few month ago. it call FromSlash() before calling Glob().\n> \n> https://github.com/mattn/jvgrep\n> \n> It work fine for me. :)\n> This test should be skipped on windows.\n> \n> On 2012/03/14 05:10:18, brainman wrote:\n> > On Wednesday, March 14, 2012 3:36:21 PM UTC+11, r wrote:\n> > >\n> > >\n> > > ... Perhaps on Windows we need a different escape character, ...\n> > >\n> > This would confuse me. I am use to \\ in regex and others.\n> >  \n> > \n> > > If we were to choose a different one for windows (only), what would make \n> > > sense?\n> > >\n> > > As far as I know (and I could be mistaken here) Windows file pattern \n> > matching is very limited: * and ?, and only in the last (file) portion of \n> > path. I wouldn't be overly concerned if we made our implementation similar \n> > to that. But what do I know. Perhaps, it is best we wait for others to \n> > comment. The only problem I see with that is unix people will expect their \n> > code to be portable ...\n> > \n> > As to \"escape character on Windows\" - I really do not know. These are \n> > \"reserved\" characters (http://goo.gl/N2OOw) as far as file names are \n> > concerned on Windows:\n> > \n> >    - < (less than)\n> >    - > (greater than)\n> >    - : (colon)\n> >    - \" (double quote)\n> >    - / (forward slash)\n> >    - \\ (backslash)\n> >    - | (vertical bar or pipe)\n> >    - ? (question mark)\n> >    - * (asterisk)\n> > \n> > We can't use : - it can be part of path (c:\\a.txt). \" will be too \n> > confusing. \\ and / both can be part of path.? and * are for pattern \n> > matching. So, that leaves <, > and |. None of them looks good to me. \n> > Perhaps either \\ or / is not such a bad ideas after all.\n> > \n> > Alex",
			"disapproval": false,
			"date": "2012-03-14 07:02:06.551401",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/14 20:58:09, r2 wrote:\n> \n> ... you need to add \\ to the list. ...\n> \n\nAnd why would we need that extra rule?\n\nAlex",
			"disapproval": false,
			"date": "2012-03-14 23:04:10.696589",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 15, 2012, at 10:43 AM, Rob 'Commander' Pike wrote:\n\n> \n> On Mar 15, 2012, at 10:04 AM, alex.brainman@gmail.com wrote:\n> \n>> On 2012/03/14 20:58:09, r2 wrote:\n>> \n>>> ... you need to add \\ to the list. ...\n>> \n>> \n>> And why would we need that extra rule?\n> \n> \"Need\" may be too strong, but it's conceivable we'd want to discriminate between \\- and \\\\- for instance.\n\nAnd now I see \\\\- looks like an SMB name. Not sure if that's an argument for or against.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-03-14 23:45:34.600559",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: r@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-14 04:21:51.466789",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 15/03/2012, at 5:57 AM, Russ Cox wrote:\n\n> On Wed, Mar 14, 2012 at 00:36, Rob 'Commander' Pike <r@google.com> wrote:\n>> The use of backslash has the property that on Windows a simple multielement path will not match itself. Perhaps on Windows we need a different escape character, just as we have a different path separator. The file name syntax is so different I'm not worried about incompatibilities; for complex patterns they won't apply anyway, while for simple ones like *.go they'll be fine.\n>> \n>> If we were to choose a different one for windows (only), what would make sense?\n> \n> We could define that the \\ means \\ unless it is followed by *?[]-\n> That would apply on all systems, not just Windows.\n\ni had the same idea last night. you need to add \\ to the list. it might be the best compromise.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-03-14 20:58:09.888203",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 15, 2012, at 10:04 AM, alex.brainman@gmail.com wrote:\n\n> On 2012/03/14 20:58:09, r2 wrote:\n> \n>> ... you need to add \\ to the list. ...\n> \n> \n> And why would we need that extra rule?\n\n\"Need\" may be too strong, but it's conceivable we'd want to discriminate between \\- and \\\\- for instance.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-14 23:43:28.428994",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 15 March 2012 17:21, Russ Cox <rsc@golang.org> wrote:\n> What if we say that on Windows there is no escape character?\n\nafter all, paths in Windows can't contain ? or *, right?\n",
			"disapproval": false,
			"date": "2012-03-15 17:35:02.267427",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 15, 2012 at 13:35, roger peppe <rogpeppe@gmail.com> wrote:\n> after all, paths in Windows can't contain ? or *, right?\n\nthe disallowed character set is <>:\"/\\|?*\neven if not, i would not be worried about this.\ni can't remember the last time i needed to\nescape ? or * in a glob pattern.\n",
			"disapproval": false,
			"date": "2012-03-15 18:05:17.265300",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It looks to me that filepath.Glob is not working on Windows. I also noticed some potential problems in unix implementation (see my new TODO). Perhaps I am misguided here, but before I venture into implementing windows version of Glob, I need to settle my understanding. Should TODO tests pass?\n\nI also welcome any suggestion about how to implement windows version. Biggest concern I have is that \\ is escape char, as well as path separator on windows. Patterns containing both will be confusing to both path/filepath internal functions that work on patterns and on paths.\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-14 04:22:30.443377",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wednesday, March 14, 2012 3:36:21 PM UTC+11, r wrote:\n>\n>\n> ... Perhaps on Windows we need a different escape character, ...\n>\nThis would confuse me. I am use to \\ in regex and others.\n \n\n> If we were to choose a different one for windows (only), what would make \n> sense?\n>\n> As far as I know (and I could be mistaken here) Windows file pattern \nmatching is very limited: * and ?, and only in the last (file) portion of \npath. I wouldn't be overly concerned if we made our implementation similar \nto that. But what do I know. Perhaps, it is best we wait for others to \ncomment. The only problem I see with that is unix people will expect their \ncode to be portable ...\n\nAs to \"escape character on Windows\" - I really do not know. These are \n\"reserved\" characters (http://goo.gl/N2OOw) as far as file names are \nconcerned on Windows:\n\n   - < (less than)\n   - > (greater than)\n   - : (colon)\n   - \" (double quote)\n   - / (forward slash)\n   - \\ (backslash)\n   - | (vertical bar or pipe)\n   - ? (question mark)\n   - * (asterisk)\n\nWe can't use : - it can be part of path (c:\\a.txt). \" will be too \nconfusing. \\ and / both can be part of path.? and * are for pattern \nmatching. So, that leaves <, > and |. None of them looks good to me. \nPerhaps either \\ or / is not such a bad ideas after all.\n\nAlex\n",
			"disapproval": false,
			"date": "2012-03-14 05:10:18.534457",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 14, 2012 at 00:36, Rob 'Commander' Pike <r@google.com> wrote:\n> The use of backslash has the property that on Windows a simple multielement path will not match itself. Perhaps on Windows we need a different escape character, just as we have a different path separator. The file name syntax is so different I'm not worried about incompatibilities; for complex patterns they won't apply anyway, while for simple ones like *.go they'll be fine.\n>\n> If we were to choose a different one for windows (only), what would make sense?\n\nWe could define that the \\ means \\ unless it is followed by *?[]-\nThat would apply on all systems, not just Windows.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-14 18:57:49.330797",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 14, 2012, at 3:22 PM, alex.brainman@gmail.com wrote:\n\n> It looks to me that filepath.Glob is not working on Windows. I also\n> noticed some potential problems in unix implementation (see my new\n> TODO). Perhaps I am misguided here, but before I venture into\n> implementing windows version of Glob, I need to settle my understanding.\n> Should TODO tests pass?\n> \n> I also welcome any suggestion about how to implement windows version.\n> Biggest concern I have is that \\ is escape char, as well as path\n> separator on windows. Patterns containing both will be confusing to both\n> path/filepath internal functions that work on patterns and on paths.\n\nThe use of backslash has the property that on Windows a simple multielement path will not match itself. Perhaps on Windows we need a different escape character, just as we have a different path separator. The file name syntax is so different I'm not worried about incompatibilities; for complex patterns they won't apply anyway, while for simple ones like *.go they'll be fine.\n\nIf we were to choose a different one for windows (only), what would make sense?\n\nLet me think about this.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-03-14 04:36:28.230719",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 14 March 2012 18:57, Russ Cox <rsc@golang.org> wrote:\n> On Wed, Mar 14, 2012 at 00:36, Rob 'Commander' Pike <r@google.com> wrote:\n>> The use of backslash has the property that on Windows a simple multielement path will not match itself. Perhaps on Windows we need a different escape character, just as we have a different path separator. The file name syntax is so different I'm not worried about incompatibilities; for complex patterns they won't apply anyway, while for simple ones like *.go they'll be fine.\n>>\n>> If we were to choose a different one for windows (only), what would make sense?\n>\n> We could define that the \\ means \\ unless it is followed by *?[]-\n> That would apply on all systems, not just Windows.\n>\n> Russ\n\nhow would you quote a \\ ?\n",
			"disapproval": false,
			"date": "2012-03-14 20:37:31.349583",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 15, 2012 at 01:36,  <alex.brainman@gmail.com> wrote:\n> ... the \\ means \\ unless it is followed by *?[]- ...\n>\n> Where is teh downside?\n\nThere are paths like \\\\?\\C:\\foo, if I remember correctly.\n\n--Benny.\n\n-- \nThe first essential in chemistry is that you should perform practical\nwork and conduct experiments, for he who performs not practical work\nnor makes experiments will never attain the least degree of mastery.\n\u00a0 \u00a0 \u00a0 \u00a0 -- Abu Musa Jabir ibn Hayyan (721-815)\n",
			"disapproval": false,
			"date": "2012-03-15 10:21:10.936175",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"bsiegert@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> There are paths like \\\\?\\C:\\foo, ...\n\nThis file name will match \\\\\\?\\C:\\foo. And these are rarely used.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-15 10:40:24.848414",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What if we say that on Windows there is no escape character?\n",
			"disapproval": false,
			"date": "2012-03-15 17:21:15.935202",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"bsiegert@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is my thinking:\n\n1) We have decided that our path separators will be different on different os. This is consistent with what os expects: / on unix, \\ on windows. We should continue the story in match patterns. Windows patterns should use \\ to match path delimiter, like unix / patterns do.\n\n2) I want all (if not all, then most) match patterns to work on both unix and windows. If I have `a/b` pattern, I want it to match on windows despite of windows path really look like `a\\b`. If we continue that line of thinking, then pattern of `a\\b` (supposedly written by windows programmer) should match `a/b` file on unix. So I propose that both / and \\ will match path separator regardless of os.\n\n3) I want match patterns to be familiar to what all of us expect: * and ? and [] ranges. We need to escape (will continue to use \\) * and ? and [ in patterns, and escape - and ] in ranges.\n\n4) I want simple patterns to look simple. If we use \\ as path separator, then we do not want to have to escape it every time I use it. So lets not escape \\. Lets not escape anything, but all the ones listed in 3).\n\n5) I would like to drop escaping altogether, but I do not think it is possible. We still have some chars, like -, where escaping is surely unavoidable. I also would like rules to be the same on both unix and windows (see 2.), so if one platform has it, all others should too.\n\nSo perhaps something like this:\n\n// The pattern syntax is:\n//\n//      pattern:\n//              { term }\n//      term:\n//              '/' or '\\\\' matches any single Separator character\n//              '*'         matches any sequence of non-Separator characters\n//              '?'         matches any single non-Separator character\n//              '[' [ '^' ] { character-range } ']'\n//                          character class (must be non-empty)\n//              c           matches character c (c != '*', '?', '\\\\', '/', '[')\n//              '\\\\' '*'    matches character '*'\n//              '\\\\' '?'    matches character '?'\n//\n//      character-range:\n//              '/' or '\\\\' matches any single Separator character\n//              c           matches character c (c != '\\\\', '/', '-', ']')\n//              '\\\\' '-'    matches character '-'\n//              '\\\\' ']'    matches character ']'\n//              lo '-' hi   matches character c for lo <= c <= hi\n//\n\nIf no objection, I will try to implement this.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-16 05:58:58.536333",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 15 March 2012 18:05, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Mar 15, 2012 at 13:35, roger peppe <rogpeppe@gmail.com> wrote:\n>> after all, paths in Windows can't contain ? or *, right?\n>\n> the disallowed character set is <>:\"/\\|?*\n> even if not, i would not be worried about this.\n> i can't remember the last time i needed to\n> escape ? or * in a glob pattern.\n\ni'm not concerned about using them literally, but\nit would be nice if we could implement the following\nfunction portably and correctly, even if we've constructed dir\nby reading a file system and it happens to contain metacharacters.\n\nfunc ArchivesTwoLevelsDeep(dir string) ([]string, error) {\n    return filepath.Glob(filepath.Join(quoteMeta(dir), \"*\", \"*.tgz\"))\n}\n",
			"disapproval": false,
			"date": "2012-03-16 15:45:30.423520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I object to interpreting \\ on Unix as meaning /, just as\nI object to interpreting \\ on Windows as being an escape character.\nI don't believe we can change anything about Unix right now.\nWe can make a very targeted fix for Windows, and I think the\nright fix is to make \\ be a separator instead of an escape\ncharacter, but only in the Windows version.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-16 15:56:47.873067",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\n>\n> Why is the DOS path character \"\\\"?<http://blogs.msdn.com/b/larryosterman/archive/2005/06/24/432386.aspx>\n>  \n\n\nSeems to be significantly older than that: \nhttp://news.ycombinator.com/item?id=3723529 \n",
			"disapproval": false,
			"date": "2012-03-20 13:00:41.427983",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@google.com, mattn.jp@gmail.com, rsc@golang.org, rogpeppe@gmail.com, bsiegert@gmail.com (cc: golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-19 03:02:06.220730",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"bsiegert@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5825044/diff/13001/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/5825044/diff/13001/src/pkg/path/filepath/match.go#newcode41\nsrc/pkg/path/filepath/match.go:41: // Escaping is not allowed on windows. Instead, '\\\\' is treated as\ns/w/W/\nmaybe \"allowed\" id the wrong word.\nalso put it first\n\nOn Windows, escaping is disabled. Instead, ...",
			"disapproval": false,
			"date": "2012-03-19 03:39:11.243613",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"mattn.jp@gmail.com",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"bsiegert@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a216dfd16073 ***\n\npath/filepath: implement Match and Glob on windows\n\nAs discussed on golang-dev, windows will use\n\"\\\" as path separator. No escaping allowed.\n\nR=golang-dev, r, mattn.jp, rsc, rogpeppe, bsiegert, r\nCC=golang-dev\nhttp://codereview.appspot.com/5825044\n\nhttp://codereview.appspot.com/5825044/diff/13001/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/5825044/diff/13001/src/pkg/path/filepath/match.go#newcode41\nsrc/pkg/path/filepath/match.go:41: // Escaping is not allowed on windows. Instead, '\\\\' is treated as\nOn 2012/03/19 03:39:11, r wrote:\n> s/w/W/\n> maybe \"allowed\" id the wrong word.\n> also put it first\n> \n> On Windows, escaping is disabled. Instead, ...\n\nDone.",
			"disapproval": false,
			"date": "2012-03-19 05:51:14.200869",
			"approval": false
		},
		{
			"sender": "peterthrun@ymail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\n>\n> One day I'd like to meet the person who chose \\ as the separator for DOS, \n> or perhaps that was CP/M, just to chat about the unfortunate accidents of \n> technological history.\n>\nWhy is the DOS path character \"\\\"?<http://blogs.msdn.com/b/larryosterman/archive/2005/06/24/432386.aspx>\n \n",
			"disapproval": false,
			"date": "2012-03-20 01:09:46.174749",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5825044: path/filepath: implement Match and Glob on windows",
	"created": "2012-03-14 04:19:53.700294",
	"patchsets": [
		1,
		2001,
		4002,
		13001,
		16001
	],
	"modified": "2012-03-20 13:00:41.524505",
	"closed": true,
	"issue": 5825044
}