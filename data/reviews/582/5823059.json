{
	"description": "cmd/ld: take section symbols' value into account for PE\n    ld -r could generate multiple section symbols for the same section, \nbut with different values, we have to take that into account.\n    Fixes issue 3322.\n    Part of issue 3261.\n    For CL 5822049.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"rsc@golang.org",
		"iant@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wait a minute, this CL didn't fix the problem on windows/386.",
			"disapproval": false,
			"date": "2012-03-15 18:39:21.781149",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-15 17:40:14.530584",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Tester welcome for this CL and CL 5822049 on all platforms, esp. Windows.\n\nThese two CLs will enable you to do at least these on Windows:\ngo build $GOROOT/misc/cgo/life/main.go\ngo test $GOROOT/misc/cgo/test\n\nAny feedback welcome.\n",
			"disapproval": false,
			"date": "2012-03-15 17:49:19.286646",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd also ask if why only R_X86_64_64 should take symbol value into account?\nI've tried to move the added line 2 lines below, but all misc/cgo tests fail.",
			"disapproval": false,
			"date": "2012-03-15 18:08:14.221424",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5823059/diff/3005/src/cmd/ld/ldpe.c\nFile src/cmd/ld/ldpe.c (right):\n\nhttp://codereview.appspot.com/5823059/diff/3005/src/cmd/ld/ldpe.c#newcode304\nsrc/cmd/ld/ldpe.c:304: rp->add += obj->pesym[symindex].value;\nIt seems to me that setting type = D_ADDR means that the symbol value will be added into the relocation anyhow.  So I don't know why this is right.",
			"disapproval": false,
			"date": "2012-03-15 20:03:48.623945",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for iant.",
			"disapproval": false,
			"date": "2012-03-16 16:23:43.929473",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\nOn 2012/03/15 20:03:48, iant wrote:\n> http://codereview.appspot.com/5823059/diff/3005/src/cmd/ld/ldpe.c\n> File src/cmd/ld/ldpe.c (right):\n> \n> http://codereview.appspot.com/5823059/diff/3005/src/cmd/ld/ldpe.c#newcode304\n> src/cmd/ld/ldpe.c:304: rp->add += obj->pesym[symindex].value;\n> It seems to me that setting type = D_ADDR means that the symbol value will be\n> added into the relocation anyhow.  So I don't know why this is right.\nld -r could generate multiple section symbols with the same name but different values,\nthe file attached to issue 3322 demonstrated this problem; so my original code doesn't\nfix this real cause, but now I believe it is a correct fix for the problem.",
			"disapproval": false,
			"date": "2012-03-16 10:38:33.957402",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 17, 2012 at 3:16 AM, Ian Lance Taylor <iant@google.com> wrote:\n\n> >> rp->add += obj->pesym[symindex].value - rp->sym->value.\n> >>\n> > This is not correct, as I've found several symbols with\n> > obj->pesym[symindex].value != rp->sym->value.\n> > I add a print like this in the this spot:\n> > if (obj->pesym[symindex].value != rp->sym->value)\n> > print(\"! %s %s %d %d (%d)\\n\", rp->sym->name, obj->pesym[symindex].name, \\\n> > rp->sym->value, obj->pesym[symindex].value, obj->pesym[symindex].sclass);\n> >\n> > when I do 'go test ../misc/cgo/test' on windows/386, part of the output\n> is:\n> > ! __popcountsi2 ___popcountsi2 0 1976 (2)\n> > ! __chkstk_ms ___chkstk_ms 0 2036 (2)\n> > ! libcgo_sys_thread_start _libcgo_sys_thread_start 0 292 (2)\n> > ! crosscall_386 _crosscall_386 0 328 (2)\n> > ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0 140\n> (3)\n> > ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0 140\n> (3)\n>\n> I see, the difference is presumably whether the symbol is defined in the\n> same object file or not.  So how about\n>\n>  if (obj->pesym[symindex].value != 0)\n>    rp->add += obj->pesym[symindex].value - rp->sym->value;\n>\nBut all the listed symbols satisfy this condition\n(obj->pesym[symindex].value == 0 &&\nrp->sym->value > 0), and none of them need adjustment in rp->add.\n(In fact, I've just tried this approach, and got several runtime panics.)\n",
			"disapproval": false,
			"date": "2012-03-17 05:10:26.274527",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is the relevant details of hh.o (you can reproduce it by using the\nattachment in issue 3322)\n(the file is produced by 'ld -r h2.o h.o', h2.c is a static function\nreferring the string \"HAHA\", while h.c\ndefines char* greeting = \"hwllo\")\n\nSYMBOL TABLE:\n[ 10](sec  3)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .rdata\n[ 22](sec  3)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000008 .rdata\nAUX scnlen 0x6 nreloc 0 nlnno 0\n[ 24](sec  2)(fl 0x00)(ty   0)(scl   2) (nx 0) 0x00000000 _greeting\n\nRELOCATION RECORDS FOR [.data]:\nOFFSET   TYPE              VALUE\n00000000 dir32             .rdata+0xfffffff8  # this refer to the 2nd .rdata\n\nI don't know how to distinguish the second .rdata from other symbols\nbesides comparing the first\ncharacter against '.', besides, this\ncode<http://tip.golang.org/src/cmd/ld/ldpe.c#L409>also uses this to\ndetermine if it is a section symbol.\n\nOn Fri, Mar 16, 2012 at 10:04 PM, <iant@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5823059/diff/10001/src/cmd/ld/**ldpe.c<http://codereview.appspot.com/5823059/diff/10001/src/cmd/ld/ldpe.c>\n> File src/cmd/ld/ldpe.c (right):\n>\n> http://codereview.appspot.com/**5823059/diff/10001/src/cmd/ld/**\n> ldpe.c#newcode306<http://codereview.appspot.com/5823059/diff/10001/src/cmd/ld/ldpe.c#newcode306>\n> src/cmd/ld/ldpe.c:306: if (obj->pesym[symindex].name[0] == '.')\n> In a PE file, a section symbol has storage class C_SECTION == 104, which\n> is better than checking the first character name of the name.  But a\n> better test here would be obj->pesym[symindex].value != 0 &&\n> rp->sym->value == 0.  In fact a more general approach might be\n>\n> rp->add += obj->pesym[symindex].value - rp->sym->value.\n>\nThis is not correct, as I've found several symbols with\nobj->pesym[symindex].value != rp->sym->value.\nI add a print like this in the this spot:\nif (obj->pesym[symindex].value != rp->sym->value)\nprint(\"! %s %s %d %d (%d)\\n\", rp->sym->name, obj->pesym[symindex].name, \\\nrp->sym->value, obj->pesym[symindex].value, obj->pesym[symindex].sclass);\n\nwhen I do 'go test ../misc/cgo/test' on windows/386, part of the output is:\n! __popcountsi2 ___popcountsi2 0 1976 (2)\n! __chkstk_ms ___chkstk_ms 0 2036 (2)\n! libcgo_sys_thread_start _libcgo_sys_thread_start 0 292 (2)\n! crosscall_386 _crosscall_386 0 328 (2)\n! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0 140 (3)\n! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0 140 (3)\n",
			"disapproval": false,
			"date": "2012-03-16 17:17:12.584889",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mar 16, 2012 10:10 PM, \"minux\" <minux.ma@gmail.com> wrote:\n>\n>\n> On Sat, Mar 17, 2012 at 3:16 AM, Ian Lance Taylor <iant@google.com> wrote:\n>>\n>> >> rp->add += obj->pesym[symindex].value - rp->sym->value.\n>> >>\n>> > This is not correct, as I've found several symbols with\n>> > obj->pesym[symindex].value != rp->sym->value.\n>> > I add a print like this in the this spot:\n>> > if (obj->pesym[symindex].value != rp->sym->value)\n>> > print(\"! %s %s %d %d (%d)\\n\", rp->sym->name,\nobj->pesym[symindex].name, \\\n>> > rp->sym->value, obj->pesym[symindex].value,\nobj->pesym[symindex].sclass);\n>> >\n>> > when I do 'go test ../misc/cgo/test' on windows/386, part of the\noutput is:\n>> > ! __popcountsi2 ___popcountsi2 0 1976 (2)\n>> > ! __chkstk_ms ___chkstk_ms 0 2036 (2)\n>> > ! libcgo_sys_thread_start _libcgo_sys_thread_start 0 292 (2)\n>> > ! crosscall_386 _crosscall_386 0 328 (2)\n>> > ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0\n140 (3)\n>> > ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0\n140 (3)\n>>\n>> I see, the difference is presumably whether the symbol is defined in the\n>> same object file or not.  So how about\n>>\n>>  if (obj->pesym[symindex].value != 0)\n>>    rp->add += obj->pesym[symindex].value - rp->sym->value;\n>\n> But all the listed symbols satisfy this condition\n(obj->pesym[symindex].value == 0 &&\n> rp->sym->value > 0), and none of them need adjustment in rp->add.\n> (In fact, I've just tried this approach, and got several runtime panics.)\n\nI was suggesting != 0.  I'm trying to catch the case of multiple\ndefinitions of the symbol with different values.\n\nIan\n",
			"disapproval": false,
			"date": "2012-03-17 20:02:58.538188",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5823059/diff/10001/src/cmd/ld/ldpe.c\nFile src/cmd/ld/ldpe.c (right):\n\nhttp://codereview.appspot.com/5823059/diff/10001/src/cmd/ld/ldpe.c#newcode306\nsrc/cmd/ld/ldpe.c:306: if (obj->pesym[symindex].name[0] == '.')\nIn a PE file, a section symbol has storage class C_SECTION == 104, which is better than checking the first character name of the name.  But a better test here would be obj->pesym[symindex].value != 0 && rp->sym->value == 0.  In fact a more general approach might be\n\nrp->add += obj->pesym[symindex].value - rp->sym->value.",
			"disapproval": false,
			"date": "2012-03-16 14:04:00.101609",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "minux <minux.ma@gmail.com> writes:\n\n> I don't know how to distinguish the second .rdata from other symbols\n> besides comparing the first\n> character against '.', besides, this\n> code<http://tip.golang.org/src/cmd/ld/ldpe.c#L409>also uses this to\n> determine if it is a section symbol.\n\nOK, fair enough.\n\n\n> On Fri, Mar 16, 2012 at 10:04 PM, <iant@golang.org> wrote:\n>\n>>\n>> http://codereview.appspot.com/**5823059/diff/10001/src/cmd/ld/**ldpe.c<http://codereview.appspot.com/5823059/diff/10001/src/cmd/ld/ldpe.c>\n>> File src/cmd/ld/ldpe.c (right):\n>>\n>> http://codereview.appspot.com/**5823059/diff/10001/src/cmd/ld/**\n>> ldpe.c#newcode306<http://codereview.appspot.com/5823059/diff/10001/src/cmd/ld/ldpe.c#newcode306>\n>> src/cmd/ld/ldpe.c:306: if (obj->pesym[symindex].name[0] == '.')\n>> In a PE file, a section symbol has storage class C_SECTION == 104, which\n>> is better than checking the first character name of the name.  But a\n>> better test here would be obj->pesym[symindex].value != 0 &&\n>> rp->sym->value == 0.  In fact a more general approach might be\n>>\n>> rp->add += obj->pesym[symindex].value - rp->sym->value.\n>>\n> This is not correct, as I've found several symbols with\n> obj->pesym[symindex].value != rp->sym->value.\n> I add a print like this in the this spot:\n> if (obj->pesym[symindex].value != rp->sym->value)\n> print(\"! %s %s %d %d (%d)\\n\", rp->sym->name, obj->pesym[symindex].name, \\\n> rp->sym->value, obj->pesym[symindex].value, obj->pesym[symindex].sclass);\n>\n> when I do 'go test ../misc/cgo/test' on windows/386, part of the output is:\n> ! __popcountsi2 ___popcountsi2 0 1976 (2)\n> ! __chkstk_ms ___chkstk_ms 0 2036 (2)\n> ! libcgo_sys_thread_start _libcgo_sys_thread_start 0 292 (2)\n> ! crosscall_386 _crosscall_386 0 328 (2)\n> ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0 140 (3)\n> ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0 140 (3)\n\nI see, the difference is presumably whether the symbol is defined in the\nsame object file or not.  So how about\n\n  if (obj->pesym[symindex].value != 0)\n    rp->add += obj->pesym[symindex].value - rp->sym->value;\n\nIan\n",
			"disapproval": false,
			"date": "2012-03-16 19:16:17.039914",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 18, 2012 at 4:02 AM, Ian Lance Taylor <iant@google.com> wrote\n>\n>  On Mar 16, 2012 10:10 PM, \"minux\" <minux.ma@gmail.com> wrote:\n> > On Sat, Mar 17, 2012 at 3:16 AM, Ian Lance Taylor <iant@google.com>\n> wrote:\n> >>\n> >> >> rp->add += obj->pesym[symindex].value - rp->sym->value.\n> >> >>\n> >> > This is not correct, as I've found several symbols with\n> >> > obj->pesym[symindex].value != rp->sym->value.\n> >> > I add a print like this in the this spot:\n> >> > if (obj->pesym[symindex].value != rp->sym->value)\n> >> > print(\"! %s %s %d %d (%d)\\n\", rp->sym->name,\n> obj->pesym[symindex].name, \\\n> >> > rp->sym->value, obj->pesym[symindex].value,\n> obj->pesym[symindex].sclass);\n> >> >\n> >> > when I do 'go test ../misc/cgo/test' on windows/386, part of the\n> output is:\n> >> > ! __popcountsi2 ___popcountsi2 0 1976 (2)\n> >> > ! __chkstk_ms ___chkstk_ms 0 2036 (2)\n> >> > ! libcgo_sys_thread_start _libcgo_sys_thread_start 0 292 (2)\n> >> > ! crosscall_386 _crosscall_386 0 328 (2)\n> >> > ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0\n> 140 (3)\n> >> > ! Z:\\go.win.hg/pkg/windows_386/runtime/cgo.a(_all.o)(.text) .text 0\n> 140 (3)\n> >>\n> >> I see, the difference is presumably whether the symbol is defined in the\n> >> same object file or not.  So how about\n> >>\n> >>  if (obj->pesym[symindex].value != 0)\n> >>    rp->add += obj->pesym[symindex].value - rp->sym->value;\n> >\n> > But all the listed symbols satisfy this condition\n> (obj->pesym[symindex].value == 0 &&\n> > rp->sym->value > 0), and none of them need adjustment in rp->add.\n> > (In fact, I've just tried this approach, and got several runtime panics.)\n>\n> I was suggesting != 0.  I'm trying to catch the case of multiple\n> definitions of the symbol with different values.\n>\nSorry, my mistake in wording, I suppose to say \"obj->pesym[symindex].value\n> 0 && rp->sym->value == 0\",\nI changed the code print code to these:\nif(obj->pesym[symindex].value != 0 && obj->pesym[symindex].name[0] != '.')\n print(\"! '%s' rp->sym:%d pesym:%d\\n\",\nrp->sym->name,\n rp->sym->value,\nobj->pesym[symindex].value);\n\nAnd the full linker output when 'go test ../misc/cgo/test' is:\n! 'callback' rp->sym:0 pesym:1884\n! 'callGoFoo' rp->sym:0 pesym:1932\n! 'IntoC' rp->sym:0 pesym:1940\n! 'sleep' rp->sym:0 pesym:1848\n! 'twoSleep' rp->sym:0 pesym:1948\n! '__popcountsi2' rp->sym:0 pesym:1980\n! '__popcountsi2' rp->sym:0 pesym:1980\n! '__chkstk_ms' rp->sym:0 pesym:2040\n! 'BackgroundSleep' rp->sym:0 pesym:160\n! 'goFoo' rp->sym:0 pesym:44\n! 'BackIntoGo' rp->sym:0 pesym:124\n! 'sleep' rp->sym:0 pesym:1848\n! '__popcount_tab' rp->sym:0 pesym:64\n! '__popcount_tab' rp->sym:0 pesym:64\n! '__popcount_tab' rp->sym:0 pesym:64\n! '__popcount_tab' rp->sym:0 pesym:64\n! 'libcgo_sys_thread_start' rp->sym:0 pesym:292\n! 'crosscall_386' rp->sym:0 pesym:328\n\nOh, I think I know the problem here, nobody has changed rp->sym->value for\nsymbols\nin COFF object files yet at this time.\n",
			"disapproval": false,
			"date": "2012-03-18 07:40:06.695490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Same as before: we're going to have to do Go 1 without fixing the\nWindows cgo support.\nIt is too late to be making these changes to the linker.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-26 19:37:00.131735",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping.",
			"disapproval": false,
			"date": "2012-04-06 07:33:23.824974",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Leaving for Ian so you can finish the discussion about the\nright test to use here.  Ian is away until next week.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-10 20:16:29.101757",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIt's not really the right approach, but other code uses the same test for section symbols, and this is better than what we have today.",
			"disapproval": false,
			"date": "2012-04-16 22:12:33.519904",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b54f4da6d7be ***\n\ncmd/ld: take section symbols' value into account for PE\n    ld -r could generate multiple section symbols for the same section, \nbut with different values, we have to take that into account.\n    Fixes issue 3322.\n    Part of issue 3261.\n    For CL 5822049.\n\nR=golang-dev, iant, rsc, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5823059",
			"disapproval": false,
			"date": "2012-05-22 18:27:57.475681",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5823059: cmd/ld: take section symbols' value into account for PE",
	"created": "2012-03-15 17:27:14.044224",
	"patchsets": [
		1,
		2001,
		2002,
		3005,
		10001,
		19001,
		22001
	],
	"modified": "2012-05-22 18:28:01.367578",
	"closed": true,
	"issue": 5823059
}