{
	"description": "net/http: panic on duplicate registrations\n\nOtherwise, the registration semantics are\ninit-order-dependent, which I was trying very hard\nto avoid in the API.  This may break broken programs.\n\nFixes issue 2900.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"bradfitz@golang.org",
		"dsymonds@golang.org",
		"balasanjay@gmail.com",
		"kevlar@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 00:14, Russ Cox <rsc@golang.org> wrote:\n> If you feel strongly about the /foo vs /foo/ thing, feel free\n> to send a CL with order-independent behavior.\n\nI should add that my first comment on that CL was asking\nwhy on earth you would intentionally treat /foo and /foo/ as\ndifferent URLs, and still no one has answered that.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-08 05:15:37.858842",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, bradfitz@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-08 05:45:36.034892",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-08 05:20:06.184077",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's say I want to register\n\n/foo = A\n/foo/ = B\n\nWith the tree as-is, it's already order dependent:\n\ncase 1)\n/foo/ = B adds /foo redirect to /foo/\n/foo = A sets what I actually wanted\n\nvs. this bad path:\n\ncase 2)\n/foo = A\n/foo/ = B ... adds /foo = redirect to /foo/, overwriting what I wanted.\n\nWith the proposed CL that was postponed, either of the above would've\nworked, since the in case 1) it wouldn't panic, and in case 2) the adding\nof /foo/ wouldn't add the /foo mapping, which is what the CL fixed.\n\n\n\nOn Tue, Feb 7, 2012 at 9:30 PM, Russ Cox <rsc@golang.org> wrote:\n\n> The comma-ok check is order-dependent, since whether you\n> see the other handler depends on whether it has been registered yet.\n>\n",
			"disapproval": false,
			"date": "2012-02-08 05:37:20.243370",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't remember if I discarded my comment or not, but my use case that I\nneed /foo to redirect to /foo/ but I need it to do so in a special way that\nthe mux doesn't understand, because of the interaction with the absolute\nredirects and the reverse proxy.  I register the non-/ handler second so\nthat it overwrites the broken one.\n\nOn Tue, Feb 7, 2012 at 9:27 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n> On Tue, Feb 7, 2012 at 9:15 PM, Russ Cox <rsc@golang.org> wrote:\n>\n>> On Wed, Feb 8, 2012 at 00:14, Russ Cox <rsc@golang.org> wrote:\n>> > If you feel strongly about the /foo vs /foo/ thing, feel free\n>> > to send a CL with order-independent behavior.\n>>\n>> I should add that my first comment on that CL was asking\n>> why on earth you would intentionally treat /foo and /foo/ as\n>> different URLs, and still no one has answered that.\n>>\n>\n> I wrote a reply but discarded it.\n>\n> But basically because they're different URLs.  That they're conventionally\n> serving filesystems and \"directories\" is a convention, and not a rule that\n> we should hard-code into what you want to be some low-level mux.\n>\n> In Camlistore's photo gallery, I have \"pretty URLs\" at stuff of my own\n> choosing, like: pics.<domain>/funny-dog serving HTML and then all the\n> dependent resources are in a camlistore-managed space underneath it at\n> /funny-dog/_res/xxx-xxxxxxxxxxxxxx.\n>\n> I do a lot of my own muxing anyway, so I don't care *that* much.  But it's\n> sad thinking that others couldn't do the same scheme with the standard mux\n> once it starts panicing.\n>\n> The one CL already fixed the order-dependent bug but you said \"after Go 1\"\n> to it.  It was just a comma-ok check on the mapping when inserting the\n> implicit redirect rule.\n>\n> I want to do both fixes or neither, preferably in the same CL.\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-08 08:12:54.554146",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"balasanjay@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "docs are good\n\nhttp://codereview.appspot.com/5644051/diff/5006/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttp://codereview.appspot.com/5644051/diff/5006/src/pkg/net/http/server.go#newcode930\nsrc/pkg/net/http/server.go:930: mux.m[pattern] = muxEntry{explicit: true, h: handler}\ndon't you need a mutex?",
			"disapproval": false,
			"date": "2012-02-08 09:00:51.946228",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Not crazy about this, in light of postponing the previous /foo/ implies\n/foo redirect fix.\n\nBut whatever, it's just a mux, and there are already a dozen on the githubs.\n\nLGTM\n\n\nOn Tue, Feb 7, 2012 at 8:50 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> net/http: panic on duplicate registrations\n>\n> Otherwise, the registration semantics are\n> init-order-dependent, which I was trying very hard\n> to avoid in the API.  This may break broken programs.\n>\n> Related to, but not a fix for, issue 2900.\n>\n> Please review this at http://codereview.appspot.com/**5644051/<http://codereview.appspot.com/5644051/>\n>\n> Affected files:\n>  M doc/go1.html\n>  M doc/go1.tmpl\n>  M src/pkg/net/http/server.go\n>\n>\n> Index: doc/go1.html\n> ==============================**==============================**=======\n> --- a/doc/go1.html\n> +++ b/doc/go1.html\n> @@ -1146,11 +1146,20 @@\n>  </ul>\n>\n>  <p>\n> -Also, the <code>Request.RawURL</code> field has been removed; it was a\n> +The <code>Request.RawURL</code> field has been removed; it was a\n>  historical artifact.\n>  </p>\n>\n>  <p>\n> +The <code>Handle</code> and <code>HandleFunc</code>\n> +functions, and the similarly-named methods of <code>ServeMux</code>,\n> +now panic if an attempt is made to register the same pattern twice.\n> +Handlers are typically registered during program initialization,\n> +and allowing one registration to override another would make the final\n> +result dependent on package initialization order.\n> +</p>\n> +\n> +<p>\n>  <em>Updating</em>:\n>  Running <code>go fix</code> will update the few programs that are\n> affected except for\n>  uses of <code>RawURL</code>, which must be fixed by hand.\n> Index: doc/go1.tmpl\n> ==============================**==============================**=======\n> --- a/doc/go1.tmpl\n> +++ b/doc/go1.tmpl\n> @@ -1049,11 +1049,20 @@\n>  </ul>\n>\n>  <p>\n> -Also, the <code>Request.RawURL</code> field has been removed; it was a\n> +The <code>Request.RawURL</code> field has been removed; it was a\n>  historical artifact.\n>  </p>\n>\n>  <p>\n> +The <code>Handle</code> and <code>HandleFunc</code>\n> +functions, and the similarly-named methods of <code>ServeMux</code>,\n> +now panic if an attempt is made to register the same pattern twice.\n> +Handlers are typically registered during program initialization,\n> +and allowing one registration to override another would make the final\n> +result dependent on package initialization order.\n> +</p>\n> +\n> +<p>\n>  <em>Updating</em>:\n>  Running <code>go fix</code> will update the few programs that are\n> affected except for\n>  uses of <code>RawURL</code>, which must be fixed by hand.\n> Index: src/pkg/net/http/server.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/http/server.go\n> +++ b/src/pkg/net/http/server.go\n> @@ -910,10 +910,17 @@\n>  }\n>\n>  // Handle registers the handler for the given pattern.\n> +// If a handler already exists for pattern, Handle panics.\n>  func (mux *ServeMux) Handle(pattern string, handler Handler) {\n>        if pattern == \"\" {\n>                panic(\"http: invalid pattern \" + pattern)\n>        }\n> +       if handler == nil {\n> +               panic(\"http: nil handler\")\n> +       }\n> +       if mux.m[pattern] != nil {\n> +               panic(\"http: multiple registrations for \" + pattern)\n> +       }\n>\n>        mux.m[pattern] = handler\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-08 04:56:16.484608",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 7, 2012 at 23:56, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> But whatever, it's just a mux, and there are already a dozen on the githubs.\n\nThe difference is that this mux has to stand as the base\nmux for all the others.  It has to have well-defined properties.\nThat's not true right now.\n\nIf you feel strongly about the /foo vs /foo/ thing, feel free\nto send a CL with order-independent behavior.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-08 05:15:00.041208",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 00:37, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Let's say I want to register\n>\n> /foo = A\n> /foo/ = B\n>\n> With the tree as-is, it's already order dependent:\n>\n> case 1)\n> /foo/ = B adds /foo redirect to /foo/\n> /foo = A sets what I actually wanted\n>\n> vs. this bad path:\n>\n> case 2)\n> /foo = A\n> /foo/ = B ... adds /foo = redirect to /foo/, overwriting what I wanted.\n>\n> With the proposed CL that was postponed, either of the above would've\n> worked, since the in case 1) it wouldn't panic, and in case 2) the adding of\n> /foo/ wouldn't add the /foo mapping, which is what the CL fixed.\n\nI see. The panic has to be here, because otherwise registration\nof /foo twice is order-dependent.  But because I was assuming\nthe panic was already there I didn't understand that the\nother CL actually worked if you didn't have the panic.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-08 05:45:49.057060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"balasanjay@gmail.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, bradfitz@golang.org, dsymonds@golang.org, balasanjay@gmail.com, kevlar@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-08 14:05:52.145015",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-08 04:50:57.261705",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The comma-ok check is order-dependent, since whether you\nsee the other handler depends on whether it has been registered yet.\n",
			"disapproval": false,
			"date": "2012-02-08 05:30:27.439187",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5644051/diff/3001/doc/go1.tmpl\nFile doc/go1.tmpl (right):\n\nhttp://codereview.appspot.com/5644051/diff/3001/doc/go1.tmpl#newcode1062\ndoc/go1.tmpl:1062: result dependent on package initialization order.\ni've been avoiding rationalizations in this doc, focusing on the facts. if you really want to say why here, say so much more compactly.  Maybe,\n\nTo guarantee that program behavior does not depend on initialization order, the Handle ...\n\nbut i'd also be happy to just leave it out",
			"disapproval": false,
			"date": "2012-02-08 04:54:54.896818",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we should do both: make it panic on duplicate registration,\nbut allow registration of paths that were implicitly added and don't\nimplicitly add if it's already explicitly registered.\n",
			"disapproval": false,
			"date": "2012-02-08 05:41:20.488304",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can't really think of a use case for registering URLs once you've started \nserving traffic, or at least not one where I would use the default mux. \nEven gorilla's significantly more flexible mux doesn't do this \n(http://gorilla-web.appspot.com/src/pkg/gorilla/mux/mux.go?s=861:1276#L28).\n\nI feel like clarifying ServeMux's behaviour in the docs would be more \nappropriate. Especially considering how simple it would be to write a \nwrapper with the appropriate implementations of ServeHTTP, Handle, and \nHandleFunc that uses a RWMutex.\n\nSanjay\n",
			"disapproval": false,
			"date": "2012-02-08 09:39:54.061472",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 7, 2012 at 9:15 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Wed, Feb 8, 2012 at 00:14, Russ Cox <rsc@golang.org> wrote:\n> > If you feel strongly about the /foo vs /foo/ thing, feel free\n> > to send a CL with order-independent behavior.\n>\n> I should add that my first comment on that CL was asking\n> why on earth you would intentionally treat /foo and /foo/ as\n> different URLs, and still no one has answered that.\n>\n\nI wrote a reply but discarded it.\n\nBut basically because they're different URLs.  That they're conventionally\nserving filesystems and \"directories\" is a convention, and not a rule that\nwe should hard-code into what you want to be some low-level mux.\n\nIn Camlistore's photo gallery, I have \"pretty URLs\" at stuff of my own\nchoosing, like: pics.<domain>/funny-dog serving HTML and then all the\ndependent resources are in a camlistore-managed space underneath it at\n/funny-dog/_res/xxx-xxxxxxxxxxxxxx.\n\nI do a lot of my own muxing anyway, so I don't care *that* much.  But it's\nsad thinking that others couldn't do the same scheme with the standard mux\nonce it starts panicing.\n\nThe one CL already fixed the order-dependent bug but you said \"after Go 1\"\nto it.  It was just a comma-ok check on the mapping when inserting the\nimplicit redirect rule.\n\nI want to do both fixes or neither, preferably in the same CL.\n",
			"disapproval": false,
			"date": "2012-02-08 05:27:04.963677",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice. I'll abandon the other CL.\n\nYou can use this test http://play.golang.org/p/gL-bVAq-vm if you want but \nthere should probably be a test for the panic too.\n\nSanjay\n",
			"disapproval": false,
			"date": "2012-02-08 07:25:54.477859",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Actually disregard that, I just remembered goroutines are allowed during \ninit.\n\nI can see cases where this might come up. Have one in my code actually... \nnot a registering/serving race but a registering/registering race, go \nfigure (no pun intended).\n\nSanjay\n",
			"disapproval": false,
			"date": "2012-02-08 09:43:18.048712",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nNow that that there's a rwmutex, the zero value is almost usable. Handle\ncould lazily make the map.  (I don't propose removing NewServeMux at this\nstage, but I also wouldn't object, but it would need a gofix...)\n\n\nOn Wed, Feb 8, 2012 at 6:05 AM, <rsc@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, r@golang.org, bradfitz@golang.org,\n> dsymonds@golang.org, balasanjay@gmail.com, kevlar@google.com (cc:\n>\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5644051/<http://codereview.appspot.com/5644051/>\n>\n",
			"disapproval": false,
			"date": "2012-02-08 17:42:10.711533",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"balasanjay@gmail.com",
				"kevlar@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d739d7e8b0e6 ***\n\nnet/http: panic on duplicate registrations\n\nOtherwise, the registration semantics are\ninit-order-dependent, which I was trying very hard\nto avoid in the API.  This may break broken programs.\n\nFixes issue 2900.\n\nR=golang-dev, r, bradfitz, dsymonds, balasanjay, kevlar\nCC=golang-dev\nhttp://codereview.appspot.com/5644051",
			"disapproval": false,
			"date": "2012-02-08 18:50:02.860929",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5644051: net/http: panic on duplicate registrations",
	"created": "2012-02-08 04:39:56.730339",
	"patchsets": [
		1,
		3,
		3001,
		6001,
		5006,
		5007,
		5008,
		1017
	],
	"modified": "2012-02-08 18:50:04.552374",
	"closed": true,
	"issue": 5644051
}