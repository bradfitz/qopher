{
	"description": "go.crypt/ssh: Add additional test for server.",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-19 18:19:27.973042",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1ce0f2904ef1&repo=crypto ***\n\ngo.crypt/ssh: Add additional test for server.\n\nR=golang-dev, agl\nCC=golang-dev\nhttp://codereview.appspot.com/6075046\n\nCommitter: Adam Langley <agl@golang.org>\n\nhttp://codereview.appspot.com/6075046/diff/9001/ssh/server_test.go\nFile ssh/server_test.go (right):\n\nhttp://codereview.appspot.com/6075046/diff/9001/ssh/server_test.go#newcode1\nssh/server_test.go:1: // Copyright 2011 The Go Authors. All rights reserved.\n(Tided up a few things before landing, including the year here.)",
			"disapproval": false,
			"date": "2012-04-19 20:47:00.889485",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-04-19 17:20:58.523639",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go\nFile ssh/server_test.go (right):\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode1\nssh/server_test.go:1: package ssh\nNeeds copyright header.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode13\nssh/server_test.go:13: ServerNetwork = \"127.0.0.1:23000\"\nListening on a specific point is too error prone for tests. Tests should let the kernel assign a port.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode15\nssh/server_test.go:15: DataLenMult = 200\nI think this can be removed, see next.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode18\nssh/server_test.go:18: DataLen = 16000 * DataLenMult\n// DataLen is the number of bytes that we'll send to the SSH server.\nDataLen = 16000 * 200\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode23\nssh/server_test.go:23: func CopyN(dst io.Writer, src io.Reader, n int64) (written int64, err error) {\nCopyNRandomly copies n bytes from src to dst. It uses a variable, and random, buffer size to exercise more code paths.\n\n(and rename the function accordingly.)\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode24\nssh/server_test.go:24: buf := make([]byte, (rand.Intn(30)+1)*1024) //32*1024)\nremove \"//32*1024)\"\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode24\nssh/server_test.go:24: buf := make([]byte, (rand.Intn(30)+1)*1024) //32*1024)\nI think the test would exercise things better if buf was always 32KB, but |l := len(buf)| was replaced with code that randomly set l to a fraction of len(buf).\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode52\nssh/server_test.go:52: func Copy(dst io.Writer, src io.Reader) (written int64, err error) {\nI think this can be removed because the one use can be replaced with CopyNRandomly.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode89\nssh/server_test.go:89: // First write date to the server in an easily verifiable data pattern.\nrunSSHClient writes random data to the server. The server is expected to echo the same data back, which is compared against the original.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode92\nssh/server_test.go:92: func runSshClient(t *testing.T) {\ns/Ssh/SSH/\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode105\nssh/server_test.go:105: for i, _ := range dumpTo {\ncrypto.rand.Reader can be used to fill dumpTo with a better pattern.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode110\nssh/server_test.go:110: // To wait for reader to exit.\nI think a channel would be best.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode116\nssh/server_test.go:116: var dumpFromBuffer = bytes.NewBuffer(make([]byte, len(dumpTo)))\nRather than calling Reset, the argument to NewBuffer can be made zero length: make([]byte, 0, len(dumpTo))\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode124\nssh/server_test.go:124: t.Fatalf(\"Client/Server communication hung in:: Server: %t, Write: %t, Read: %t\", inServerCopy, inWriterCopy, inReaderCopy)\nI'm not sure that this will actually stop the test, although I've not tried it. I think this can be removed since the test will time out after a while anyway. If it is removed, in{Reader|Writer}Copy can also be removed.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode140\nssh/server_test.go:140: if err != nil {\ncan be merged with &&\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode186\nssh/server_test.go:186: func startSshServer(t *testing.T) {\ns/Ssh/SSH.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode242\nssh/server_test.go:242: if err != nil {\nthese two ifs can also be combined.",
			"disapproval": false,
			"date": "2012-04-19 17:41:30.220889",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go\nFile ssh/server_test.go (right):\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode1\nssh/server_test.go:1: package ssh\nOn 2012/04/19 17:41:30, agl1 wrote:\n> Needs copyright header.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode13\nssh/server_test.go:13: ServerNetwork = \"127.0.0.1:23000\"\nOn 2012/04/19 17:41:30, agl1 wrote:\n> Listening on a specific point is too error prone for tests. Tests should let the\n> kernel assign a port.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode15\nssh/server_test.go:15: DataLenMult = 200\nOn 2012/04/19 17:41:30, agl1 wrote:\n> I think this can be removed, see next.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode18\nssh/server_test.go:18: DataLen = 16000 * DataLenMult\nOn 2012/04/19 17:41:30, agl1 wrote:\n> // DataLen is the number of bytes that we'll send to the SSH server.\n> DataLen = 16000 * 200\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode23\nssh/server_test.go:23: func CopyN(dst io.Writer, src io.Reader, n int64) (written int64, err error) {\nOn 2012/04/19 17:41:30, agl1 wrote:\n> CopyNRandomly copies n bytes from src to dst. It uses a variable, and random,\n> buffer size to exercise more code paths.\n> \n> (and rename the function accordingly.)\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode24\nssh/server_test.go:24: buf := make([]byte, (rand.Intn(30)+1)*1024) //32*1024)\nOn 2012/04/19 17:41:30, agl1 wrote:\n> remove \"//32*1024)\"\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode24\nssh/server_test.go:24: buf := make([]byte, (rand.Intn(30)+1)*1024) //32*1024)\nOn 2012/04/19 17:41:30, agl1 wrote:\n> I think the test would exercise things better if buf was always 32KB, but |l :=\n> len(buf)| was replaced with code that randomly set l to a fraction of len(buf).\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode24\nssh/server_test.go:24: buf := make([]byte, (rand.Intn(30)+1)*1024) //32*1024)\nOn 2012/04/19 17:41:30, agl1 wrote:\n> remove \"//32*1024)\"\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode52\nssh/server_test.go:52: func Copy(dst io.Writer, src io.Reader) (written int64, err error) {\nOn 2012/04/19 17:41:30, agl1 wrote:\n> I think this can be removed because the one use can be replaced with\n> CopyNRandomly.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode89\nssh/server_test.go:89: // First write date to the server in an easily verifiable data pattern.\nOn 2012/04/19 17:41:30, agl1 wrote:\n> runSSHClient writes random data to the server. The server is expected to echo\n> the same data back, which is compared against the original.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode89\nssh/server_test.go:89: // First write date to the server in an easily verifiable data pattern.\nOn 2012/04/19 17:41:30, agl1 wrote:\n> runSSHClient writes random data to the server. The server is expected to echo\n> the same data back, which is compared against the original.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode92\nssh/server_test.go:92: func runSshClient(t *testing.T) {\nOn 2012/04/19 17:41:30, agl1 wrote:\n> s/Ssh/SSH/\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode105\nssh/server_test.go:105: for i, _ := range dumpTo {\nOn 2012/04/19 17:41:30, agl1 wrote:\n> crypto.rand.Reader can be used to fill dumpTo with a better pattern.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode110\nssh/server_test.go:110: // To wait for reader to exit.\nOn 2012/04/19 17:41:30, agl1 wrote:\n> I think a channel would be best.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode116\nssh/server_test.go:116: var dumpFromBuffer = bytes.NewBuffer(make([]byte, len(dumpTo)))\nOn 2012/04/19 17:41:30, agl1 wrote:\n> Rather than calling Reset, the argument to NewBuffer can be made zero length:\n> make([]byte, 0, len(dumpTo))\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode124\nssh/server_test.go:124: t.Fatalf(\"Client/Server communication hung in:: Server: %t, Write: %t, Read: %t\", inServerCopy, inWriterCopy, inReaderCopy)\nOn 2012/04/19 17:41:30, agl1 wrote:\n> I'm not sure that this will actually stop the test, although I've not tried it.\n> I think this can be removed since the test will time out after a while anyway.\n> If it is removed, in{Reader|Writer}Copy can also be removed.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode140\nssh/server_test.go:140: if err != nil {\nOn 2012/04/19 17:41:30, agl1 wrote:\n> can be merged with &&\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode186\nssh/server_test.go:186: func startSshServer(t *testing.T) {\nOn 2012/04/19 17:41:30, agl1 wrote:\n> s/Ssh/SSH.\n\nDone.\n\nhttp://codereview.appspot.com/6075046/diff/4001/ssh/server_test.go#newcode242\nssh/server_test.go:242: if err != nil {\nOn 2012/04/19 17:41:30, agl1 wrote:\n> these two ifs can also be combined.\n\nDone.",
			"disapproval": false,
			"date": "2012-04-19 18:19:34.813249",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-05-19 02:56:57.266356",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 6075046: go.crypt/ssh: Add additional test for server.",
	"created": "2012-04-19 17:20:16.640980",
	"patchsets": [
		1,
		3,
		4001,
		9001
	],
	"modified": "2012-05-19 02:56:59.391749",
	"closed": true,
	"issue": 6075046
}