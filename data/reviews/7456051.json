{
	"description": "misc/emacs: Add compatibility for GNU Emacs 23 and XEmacs >=21.5.32\r\n\r\nThis CL adds compatibility for GNU Emacs 23 (fixing fontification\r\nissues) and XEmacs >=21.5.32 (fixing a lot of issues). Earlier\r\nversions of XEmacs will not be supported because they do not\r\nsupport POSIX character classes. Because of that, we also make use\r\nof a lot of functions that were added in 21.5.32.\r\n\r\nA known and currently unfixable issue with XEmacs is that go-mode\r\nwill not always fontify identifiers that use unicode correctly.\r\n\r\nAll changes for XEmacs are annotated in the diff.\r\n\r\nNote: go--position-bytes is not currently used anywhere, but will\r\nbe in a future CL.\r\n\r\nFixes issue 4927.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adonovan@google.com",
		"cw@f00f.org",
		"patrick.allen.higgins@gmail.com",
		"sameer@golang.org",
		"bradfitz@golang.org",
		"mats.lidell@cag.se",
		"dominikh@fork-bomb.org"
	],
	"messages": [
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adonovan@google.com, cw@f00f.org, patrick.allen.higgins@gmail.com, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-04 21:43:20.301130",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't know anything about XEmacs.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#oldcode15\nmisc/emacs/go-mode.el:15: (defconst go-identifier-regexp \"[[:word:][:multibyte:]_]+\")\nWhy was `_` removed from the character class? Does this change cause an issue for GNU Emacs? Is this a part of making `_` a word constituent rather than a symbol constituent?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#oldcode17\nmisc/emacs/go-mode.el:17: (defconst go-type-regexp \"[[:word:][:multibyte:]_*]+\")\nSame here.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode144\nmisc/emacs/go-mode.el:144: (,(concat (go--regexp-enclose-in-symbol \"type\") \"[[:space:]]*\" go-identifier-regexp \"[[:space:]]*\" go-type-name-regexp) 1 font-lock-type-face) ;; types\nIsn't the original \"\\\\<type\\\\>\" already supported by GNU Emacs and XEmacs on these two lines?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode145\nmisc/emacs/go-mode.el:145: (,(concat \"[^[:word:][:multibyte:]]\\\\[\\\\([[:digit:]]+\\\\|\\\\.\\\\.\\\\.\\\\)?\\\\]\" go-type-name-regexp) 2 font-lock-type-face) ;; Arrays/slices\nThis looks unrelated to XEmacs compatibility and more like a bugfix. Was this intended to be a part of this CL?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode714\nmisc/emacs/go-mode.el:714: (let* ((output (split-string (shell-command-to-string \"go env GOROOT GOPATH\") \"\\n\"))\nDoes the split on \"\\n\" work on Windows and Mac?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode719\nmisc/emacs/go-mode.el:719: (defun go--string-prefix-p (s1 s2 &optional ignore-case)\nI think a comment is warranted for what the purpose of this function is. Do XEmacs and GNU Emacs return different types from compare-strings?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode720\nmisc/emacs/go-mode.el:720: (eq t (compare-strings s1 nil nil\nI don't see nil as being valid for anything but ignore-case in compare-strings. Why not use \"s1 0 (length s1)\"?",
			"disapproval": false,
			"date": "2013-03-04 22:39:25.518530",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL continues to work fine in GNU Emacs but I'm having trouble finding a 'sumo' lisp package file for XEmacs 21.5. Can you tell me where you found yours?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode132\nmisc/emacs/go-mode.el:132: `((,(go--regexp-enclose-in-symbol (regexp-opt go-mode-keywords t)) . font-lock-keyword-face)\nWhile this looks sound, it may be more efficient for GNU Emacs if you continue to use (regex-opt strings 'symbols).  \n\nConsider defining a replacement function for regexp-opt that for XEmacs falls back to the slow implementation described in the documentation for that function.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode716\nmisc/emacs/go-mode.el:716: (paths (split-string (car (cdr output)) \":\")))\n(car (cdr x)) => (cadr x)\n\nOr you can use (first x), (second x) if you prefer.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode723\nmisc/emacs/go-mode.el:723: (defun go--directory-dirs (dir)\nI find it's worth putting a docstring on almost every function unless it's an obvious one-liner.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode731\nmisc/emacs/go-mode.el:731: (when (file-directory-p file)\nReplace 'when' with 'if' since you don't need the implicit progn.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode733\nmisc/emacs/go-mode.el:733: (go--directory-dirs file))\nHow does this function fare if it encounters a symbolic link to a parent directory?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode744\nmisc/emacs/go-mode.el:744: (let ((pkgdir (concat topdir \"/pkg/\")))\nDoes this do the right thing for GOPATH directories?\nIn the go.exp subrepo for example, the only subdirectory of $GOPATH/pkg is called \"linux_amd64\".",
			"disapproval": false,
			"date": "2013-03-04 23:10:09.028670",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#oldcode15\nmisc/emacs/go-mode.el:15: (defconst go-identifier-regexp \"[[:word:][:multibyte:]_]+\")\nOn 2013/03/04 22:39:25, pah wrote:\n> Why was `_` removed from the character class? Does this change cause an issue\n> for GNU Emacs? Is this a part of making `_` a word constituent rather than a\n> symbol constituent?\n\nCorrect. _ is now a word constituent and [:word:] will match it.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#oldcode17\nmisc/emacs/go-mode.el:17: (defconst go-type-regexp \"[[:word:][:multibyte:]_*]+\")\nOn 2013/03/04 22:39:25, pah wrote:\n> Same here.\n\nSame.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode144\nmisc/emacs/go-mode.el:144: (,(concat (go--regexp-enclose-in-symbol \"type\") \"[[:space:]]*\" go-identifier-regexp \"[[:space:]]*\" go-type-name-regexp) 1 font-lock-type-face) ;; types\nOn 2013/03/04 22:39:25, pah wrote:\n> Isn't the original \"\\\\<type\\\\>\" already supported by GNU Emacs and XEmacs on\n> these two lines?\n\n\\\\< was indeed supported, but we should've been using \\\\_< from the beginning.\n\nYes, strictly speaking it's not part of the XEmacs compatibility changes, but it loosely falls into the scope of issue 4927.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode145\nmisc/emacs/go-mode.el:145: (,(concat \"[^[:word:][:multibyte:]]\\\\[\\\\([[:digit:]]+\\\\|\\\\.\\\\.\\\\.\\\\)?\\\\]\" go-type-name-regexp) 2 font-lock-type-face) ;; Arrays/slices\nOn 2013/03/04 22:39:25, pah wrote:\n> This looks unrelated to XEmacs compatibility and more like a bugfix. Was this\n> intended to be a part of this CL?\n\nSame as above.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode714\nmisc/emacs/go-mode.el:714: (let* ((output (split-string (shell-command-to-string \"go env GOROOT GOPATH\") \"\\n\"))\nOn 2013/03/04 22:39:25, pah wrote:\n> Does the split on \"\\n\" work on Windows and Mac?\n\nAgreed, someone needs to test this. I don't know if the Go tools use \\r\\n on Windows. Mac uses \\n nowadays.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode719\nmisc/emacs/go-mode.el:719: (defun go--string-prefix-p (s1 s2 &optional ignore-case)\nOn 2013/03/04 22:39:25, pah wrote:\n> I think a comment is warranted for what the purpose of this function is. Do\n> XEmacs and GNU Emacs return different types from compare-strings?\n\nWe originally used string-prefix-p, but GNU Emacs 23 (and in turn XEmacs probably, too) do not have that function yet, so we implement it here.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode720\nmisc/emacs/go-mode.el:720: (eq t (compare-strings s1 nil nil\nOn 2013/03/04 22:39:25, pah wrote:\n> I don't see nil as being valid for anything but ignore-case in compare-strings.\n> Why not use \"s1 0 (length s1)\"?\n\nEND1 and END2 default to the full lengths of the respective strings. So nil is valid.",
			"disapproval": false,
			"date": "2013-03-04 22:49:30.638120",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> This CL continues to work fine in GNU Emacs but I'm having trouble finding a\n> 'sumo' lisp package file for XEmacs 21.5. Can you tell me where you found yours?\n\nOn Gentoo, there's app-xemacs/xemacs-packages-all. Generally, there's one from 2010 on http://ftp.xemacs.org/pub/xemacs/packages/ and apparently that's in fact the newest version there is, which is the one I am using, too. \n\nThe relevant new additions in XEmacs that we use are all part of the core distribution.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode132\nmisc/emacs/go-mode.el:132: `((,(go--regexp-enclose-in-symbol (regexp-opt go-mode-keywords t)) . font-lock-keyword-face)\nOn 2013/03/04 23:10:09, adonovan wrote:\n> While this looks sound, it may be more efficient for GNU Emacs if you continue\n> to use (regex-opt strings 'symbols).  \n> \n> Consider defining a replacement function for regexp-opt that for XEmacs falls\n> back to the slow implementation described in the documentation for that\n> function.\n\nGNU Emacs 23 does not support 'symbols either. Performance-wise, there is no difference. What regexp-opt does, when given 'words (or in GNU Emacs 24, 'symbols also) is the same thing we do here. Construct a regexp, put the anchors left and right.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode716\nmisc/emacs/go-mode.el:716: (paths (split-string (car (cdr output)) \":\")))\nOn 2013/03/04 23:10:09, adonovan wrote:\n> (car (cdr x)) => (cadr x)\n> \n> Or you can use (first x), (second x) if you prefer.\n\nDone.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode723\nmisc/emacs/go-mode.el:723: (defun go--directory-dirs (dir)\nOn 2013/03/04 23:10:09, adonovan wrote:\n> I find it's worth putting a docstring on almost every function unless it's an\n> obvious one-liner.\n\nDone. I'll add docstrings to other functions, which are not affected by this CL, in a future CL.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode731\nmisc/emacs/go-mode.el:731: (when (file-directory-p file)\nOn 2013/03/04 23:10:09, adonovan wrote:\n> Replace 'when' with 'if' since you don't need the implicit progn.\n\nDone.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode733\nmisc/emacs/go-mode.el:733: (go--directory-dirs file))\nOn 2013/03/04 23:10:09, adonovan wrote:\n> How does this function fare if it encounters a symbolic link to a parent\n> directory?\n\nIt will probably end up recursing to death. That's part of why I initially used find-lisp, because it completely skips over symlinks. \n\nI can implement skipping over symlinks with file-symlink-p -- The question is, are there cases where we might encounter symlinks in GOPATH or GOROOT that we should follow? If so we'd need more sophisticated code that keeps track of places we have visited.",
			"disapproval": false,
			"date": "2013-03-04 23:33:41.225020",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode744\nmisc/emacs/go-mode.el:744: (let ((pkgdir (concat topdir \"/pkg/\")))\nOn 2013/03/04 23:10:09, adonovan wrote:\n> Does this do the right thing for GOPATH directories?\n> In the go.exp subrepo for example, the only subdirectory of $GOPATH/pkg is\n> called \"linux_amd64\". \n\n$GOPATH/pkg/linux_amd64/ is, on x64 systems, where installed packages go. We recursively go through /pkg/, find all object files and assume those are packages.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode751\nmisc/emacs/go-mode.el:751: (directory-files dir t \"\\\\.a$\"))))\n*This* is a part I am not sure about right now. Will the extension always be .a, or do OSX and Windows use different extensions?",
			"disapproval": false,
			"date": "2013-03-04 23:42:18.337880",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode714\nmisc/emacs/go-mode.el:714: (let* ((output (split-string (shell-command-to-string \"go env GOROOT GOPATH\") \"\\n\"))\nOn 2013/03/04 22:49:30, Dominik Honnef wrote:\n> On 2013/03/04 22:39:25, pah wrote:\n> > Does the split on \"\\n\" work on Windows and Mac?\n> \n> Agreed, someone needs to test this. I don't know if the Go tools use \\r\\n on\n> Windows. Mac uses \\n nowadays.\nI've tested on Windows and it works.\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode751\nmisc/emacs/go-mode.el:751: (directory-files dir t \"\\\\.a$\"))))\nOn 2013/03/04 23:42:18, Dominik Honnef wrote:\n> *This* is a part I am not sure about right now. Will the extension always be .a,\n> or do OSX and Windows use different extensions?\nI just built a Windows version to test this CL out, and the package extension is .a on my box, at least.",
			"disapproval": false,
			"date": "2013-03-05 19:21:58.021480",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode733\nmisc/emacs/go-mode.el:733: (go--directory-dirs file))\nOn 2013/03/04 23:33:41, Dominik Honnef wrote:\n> On 2013/03/04 23:10:09, adonovan wrote:\n> > How does this function fare if it encounters a symbolic link to a parent\n> > directory?\n> \n> It will probably end up recursing to death. That's part of why I initially used\n> find-lisp, because it completely skips over symlinks. \n> \n> I can implement skipping over symlinks with file-symlink-p -- The question is,\n> are there cases where we might encounter symlinks in GOPATH or GOROOT that we\n> should follow? If so we'd need more sophisticated code that keeps track of\n> places we have visited.\n\"go install ./pkg1/...\" ignores symlinks (it uses path/filepath.walk). You can build symlinked packages without using \"...\" patterns, but there is at least some precedent for ignoring symlinks.",
			"disapproval": false,
			"date": "2013-03-05 21:42:08.487090",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/04 23:33:41, Dominik Honnef wrote:\n> > This CL continues to work fine in GNU Emacs but I'm having trouble finding a\n> > 'sumo' lisp package file for XEmacs 21.5. Can you tell me where you found\n> yours?\n> \n> On Gentoo, there's app-xemacs/xemacs-packages-all. Generally, there's one from\n> 2010 on http://ftp.xemacs.org/pub/xemacs/packages/ and apparently that's in fact\n> the newest version there is, which is the one I am using, too. \n\nI've built and installed 21.5 and the sumo package and tried any number of settings of the load-path variable but (require 'x) always fails to load any packages.  What load-path value do you have?\n\n(Given how much time I've wasted trying to install it with nothing to show, and how old the package tarball seems to be, I have to wonder how active the XEmacs community is at this point.)",
			"disapproval": false,
			"date": "2013-03-05 21:46:22.459980",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/05 21:46:22, adonovan wrote:\n> On 2013/03/04 23:33:41, Dominik Honnef wrote:\n> > > This CL continues to work fine in GNU Emacs but I'm having trouble finding a\n> > > 'sumo' lisp package file for XEmacs 21.5. Can you tell me where you found\n> > yours?\n> > \n> > On Gentoo, there's app-xemacs/xemacs-packages-all. Generally, there's one from\n> > 2010 on http://ftp.xemacs.org/pub/xemacs/packages/ and apparently that's in\n> fact\n> > the newest version there is, which is the one I am using, too. \n> \n> I've built and installed 21.5 and the sumo package and tried any number of\n> settings of the load-path variable but (require 'x) always fails to load any\n> packages.  What load-path value do you have?\n> \n> (Given how much time I've wasted trying to install it with nothing to show, and\n> how old the package tarball seems to be, I have to wonder how active the XEmacs\n> community is at this point.)\n\nI really couldn't help you with XEmacs. I'm not an XEmacs user myself, and am incredibly glad that emerging two packages made it work for me.  Personally I don't care if XEmacs is supported by go-mode, but someone asked about it in the big CL so I figured I'd give it a shot...\n\nAs for the load-path, there are a large number of entries (http://sprunge.us/TcMD), but I couldn't tell you how they got there. Again, my distribution took care of it.\n\nQuite frankly, if installing XEmacs is such a big problem, we should just ensure that the changes do not break GNU Emacs, that XEmacs folks had their chance to report any issues and that apparently there are none ;)\n\nI've seen XEmacs people adopt the go-mode before, so they're free to report any issues they find.",
			"disapproval": false,
			"date": "2013-03-05 22:00:13.213250",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn 5 March 2013 17:00,  <dominik.honnef@gmail.com> wrote:\r\n> On 2013/03/05 21:46:22, adonovan wrote:\r\n>>\r\n>> On 2013/03/04 23:33:41, Dominik Honnef wrote:\r\n>> > > This CL continues to work fine in GNU Emacs but I'm having trouble\r\n>\r\n> finding a\r\n>>\r\n>> > > 'sumo' lisp package file for XEmacs 21.5. Can you tell me where\r\n>\r\n> you found\r\n>>\r\n>> > yours?\r\n>> >\r\n>> > On Gentoo, there's app-xemacs/xemacs-packages-all. Generally,\r\n>\r\n> there's one from\r\n>>\r\n>> > 2010 on http://ftp.xemacs.org/pub/xemacs/packages/ and apparently\r\n>\r\n> that's in\r\n>>\r\n>> fact\r\n>> > the newest version there is, which is the one I am using, too.\r\n>\r\n>\r\n>> I've built and installed 21.5 and the sumo package and tried any\r\n>\r\n> number of\r\n>>\r\n>> settings of the load-path variable but (require 'x) always fails to\r\n>\r\n> load any\r\n>>\r\n>> packages.  What load-path value do you have?\r\n>\r\n>\r\n>> (Given how much time I've wasted trying to install it with nothing to\r\n>\r\n> show, and\r\n>>\r\n>> how old the package tarball seems to be, I have to wonder how active\r\n>\r\n> the XEmacs\r\n>>\r\n>> community is at this point.)\r\n>\r\n>\r\n> I really couldn't help you with XEmacs. I'm not an XEmacs user myself,\r\n> and am incredibly glad that emerging two packages made it work for me.\r\n> Personally I don't care if XEmacs is supported by go-mode, but someone\r\n> asked about it in the big CL so I figured I'd give it a shot...\r\n>\r\n> As for the load-path, there are a large number of entries\r\n> (http://sprunge.us/TcMD), but I couldn't tell you how they got there.\r\n> Again, my distribution took care of it.\r\n>\r\n> Quite frankly, if installing XEmacs is such a big problem, we should\r\n> just ensure that the changes do not break GNU Emacs, that XEmacs folks\r\n> had their chance to report any issues and that apparently there are none\r\n> ;)\r\n>\r\n> I've seen XEmacs people adopt the go-mode before, so they're free to\r\n> report any issues they find.\r\n\r\nThat seems fine to me.  I've tested your code in GNU Emacs and I'll\r\ntake your word it works reasonably for XEmacs.\r\n",
			"disapproval": false,
			"date": "2013-03-05 22:26:45.803530",
			"approval": true
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode733\nmisc/emacs/go-mode.el:733: (go--directory-dirs file))\nOn 2013/03/05 21:42:08, pah wrote:\n> On 2013/03/04 23:33:41, Dominik Honnef wrote:\n> > On 2013/03/04 23:10:09, adonovan wrote:\n> > > How does this function fare if it encounters a symbolic link to a parent\n> > > directory?\n> > \n> > It will probably end up recursing to death. That's part of why I initially\n> used\n> > find-lisp, because it completely skips over symlinks. \n> > \n> > I can implement skipping over symlinks with file-symlink-p -- The question is,\n> > are there cases where we might encounter symlinks in GOPATH or GOROOT that we\n> > should follow? If so we'd need more sophisticated code that keeps track of\n> > places we have visited.\n> \"go install ./pkg1/...\" ignores symlinks (it uses path/filepath.walk). You can\n> build symlinked packages without using \"...\" patterns, but there is at least\n> some precedent for ignoring symlinks.\n\nI'll go with ignoring symlinks then. Missing some entries in tab completion is probably less harmful than locking up Emacs because of recursion (depending on the max stack depth the user configured).",
			"disapproval": false,
			"date": "2013-03-05 22:35:37.041140",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is there anything left preventing a lgtm?\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7456051/diff/9001/misc/emacs/go-mode.el#newcode733\nmisc/emacs/go-mode.el:733: (go--directory-dirs file))\nOn 2013/03/05 22:35:37, Dominik Honnef wrote:\n> On 2013/03/05 21:42:08, pah wrote:\n> > On 2013/03/04 23:33:41, Dominik Honnef wrote:\n> > > On 2013/03/04 23:10:09, adonovan wrote:\n> > > > How does this function fare if it encounters a symbolic link to a parent\n> > > > directory?\n> > > \n> > > It will probably end up recursing to death. That's part of why I initially\n> > used\n> > > find-lisp, because it completely skips over symlinks. \n> > > \n> > > I can implement skipping over symlinks with file-symlink-p -- The question\n> is,\n> > > are there cases where we might encounter symlinks in GOPATH or GOROOT that\n> we\n> > > should follow? If so we'd need more sophisticated code that keeps track of\n> > > places we have visited.\n> > \"go install ./pkg1/...\" ignores symlinks (it uses path/filepath.walk). You can\n> > build symlinked packages without using \"...\" patterns, but there is at least\n> > some precedent for ignoring symlinks.\n> \n> I'll go with ignoring symlinks then. Missing some entries in tab completion is\n> probably less harmful than locking up Emacs because of recursion (depending on\n> the max stack depth the user configured).\n\nActually, thinking about it, I don't think there's much point to checking for symlinks. We iterate through /pkg/, not through /src/, and I'd be really surprised to see symlinks, especially ones that point back to a parent dir, in /pkg/, which for most is handled by the go tools. \n\nWe can always fix this once someone reports an actual problem with it.",
			"disapproval": false,
			"date": "2013-03-05 23:15:31.477800",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-05 23:22:28.989290",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/05 23:22:28, pah wrote:\n> LGTM\n\nSubmitted as https://code.google.com/p/go/source/detail?r=ef6c59f8f54f2d2e9d599d1ec86f8c1de6a2ed1a\n\nhg clpatch/submit flaked out halfway though, hence this manual update message.",
			"disapproval": false,
			"date": "2013-03-06 19:39:44.184760",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 19:39:44, adonovan wrote:\n> On 2013/03/05 23:22:28, pah wrote:\n> > LGTM\n> \n> Submitted as\n> https://code.google.com/p/go/source/detail?r=ef6c59f8f54f2d2e9d599d1ec86f8c1de6a2ed1a\n> \n> hg clpatch/submit flaked out halfway though, hence this manual update message.\n\nOkay, now hg sync won't do its job. What's the right thing to do here? Abandon the CL with hg change -d?",
			"disapproval": false,
			"date": "2013-03-06 22:33:34.349080",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 6, 2013 at 2:33 PM, <dominik.honnef@gmail.com> wrote:\r\n\r\n> On 2013/03/06 19:39:44, adonovan wrote:\r\n>\r\n>> On 2013/03/05 23:22:28, pah wrote:\r\n>> > LGTM\r\n>>\r\n>\r\n>  Submitted as\r\n>>\r\n>\r\n> https://code.google.com/p/go/**source/detail?r=**\r\n> ef6c59f8f54f2d2e9d599d1ec86f8c**1de6a2ed1a<https://code.google.com/p/go/source/detail?r=ef6c59f8f54f2d2e9d599d1ec86f8c1de6a2ed1a>\r\n>\r\n>  hg clpatch/submit flaked out halfway though, hence this manual update\r\n>>\r\n> message.\r\n>\r\n> Okay, now hg sync won't do its job. What's the right thing to do here?\r\n> Abandon the CL with hg change -d?\r\n\r\n\r\ncapital -D does --delete-local\r\n",
			"disapproval": false,
			"date": "2013-03-06 22:38:04.574130",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Adding a bit about \"hg help codereview\" and e.g. \"hg help change\" to\r\nhttp://golang.org/doc/contribute.html would help new contributors discover\r\nthis, I hope.\r\n\r\n\r\nOn Wed, Mar 6, 2013 at 3:38 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n>\r\n>\r\n> On Wed, Mar 6, 2013 at 2:33 PM, <dominik.honnef@gmail.com> wrote:\r\n>\r\n>> On 2013/03/06 19:39:44, adonovan wrote:\r\n>>\r\n>>> On 2013/03/05 23:22:28, pah wrote:\r\n>>> > LGTM\r\n>>>\r\n>>\r\n>>  Submitted as\r\n>>>\r\n>>\r\n>> https://code.google.com/p/go/**source/detail?r=**\r\n>> ef6c59f8f54f2d2e9d599d1ec86f8c**1de6a2ed1a<https://code.google.com/p/go/source/detail?r=ef6c59f8f54f2d2e9d599d1ec86f8c1de6a2ed1a>\r\n>>\r\n>>  hg clpatch/submit flaked out halfway though, hence this manual update\r\n>>>\r\n>> message.\r\n>>\r\n>> Okay, now hg sync won't do its job. What's the right thing to do here?\r\n>> Abandon the CL with hg change -d?\r\n>\r\n>\r\n> capital -D does --delete-local\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 23:04:16.441750",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I see it's already there, but I couldn't find it when specifically looking\r\nfor it the other day. Weird.\r\n\r\n\r\nOn Wed, Mar 6, 2013 at 4:04 PM, Patrick Higgins <\r\npatrick.allen.higgins@gmail.com> wrote:\r\n\r\n> Adding a bit about \"hg help codereview\" and e.g. \"hg help change\" to\r\n> http://golang.org/doc/contribute.html would help new contributors\r\n> discover this, I hope.\r\n>\r\n>\r\n> On Wed, Mar 6, 2013 at 3:38 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>\r\n>>\r\n>>\r\n>> On Wed, Mar 6, 2013 at 2:33 PM, <dominik.honnef@gmail.com> wrote:\r\n>>\r\n>>> On 2013/03/06 19:39:44, adonovan wrote:\r\n>>>\r\n>>>> On 2013/03/05 23:22:28, pah wrote:\r\n>>>> > LGTM\r\n>>>>\r\n>>>\r\n>>>  Submitted as\r\n>>>>\r\n>>>\r\n>>> https://code.google.com/p/go/**source/detail?r=**\r\n>>> ef6c59f8f54f2d2e9d599d1ec86f8c**1de6a2ed1a<https://code.google.com/p/go/source/detail?r=ef6c59f8f54f2d2e9d599d1ec86f8c1de6a2ed1a>\r\n>>>\r\n>>>  hg clpatch/submit flaked out halfway though, hence this manual update\r\n>>>>\r\n>>> message.\r\n>>>\r\n>>> Okay, now hg sync won't do its job. What's the right thing to do here?\r\n>>> Abandon the CL with hg change -d?\r\n>>\r\n>>\r\n>> capital -D does --delete-local\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 23:27:48.959850",
			"approval": false
		},
		{
			"sender": "mats.lidell@cag.se",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">>>>> adonovan  <adonovan@google.com> writes:\r\n\r\n> I've built and installed 21.5 and the sumo package and tried any\r\n> number of settings of the load-path variable but (require 'x) always\r\n> fails to load any packages.  What load-path value do you have?\r\n\r\nYou can try xemacs-beta@xemacs.org for xemacs specific help or\r\ncheck irc channel #xemacs on freenode.\r\n\r\n> (Given how much time I've wasted trying to install it with nothing to\r\n> show, and how old the package tarball seems to be, I have to wonder how\r\n> active the XEmacs community is at this point.)\r\n\r\nDon't wonder. We are a small team and development is slow. We are\r\nsorry about that but that is how things are. We can't keep up with the\r\nspeed of GNU Emacs nor go-mode.el development.\r\n\r\nHowever I have installed go-mode in XEmacs packages, so it will come\r\nout when there is a new release (it is in the pre release!) and I will\r\ntry to update it with the new version. I'm a bit behind right now\r\nsince the new mode reguires things not in XEmacs core but I'm working\r\non that. \r\n\r\nYours\r\n-- \r\n%% Mats\r\n",
			"disapproval": false,
			"date": "2013-03-07 14:22:44.020610",
			"approval": false
		},
		{
			"sender": "dominikh@fork-bomb.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Mats Lidell <mats.lidell@cag.se> writes:\r\n\r\n[snip (17 lines)]\r\n> However I have installed go-mode in XEmacs packages, so it will come\r\n> out when there is a new release (it is in the pre release!) and I will\r\n> try to update it with the new version. I'm a bit behind right now\r\n> since the new mode reguires things not in XEmacs core but I'm working\r\n> on that. \r\n\r\nFeel free to let me know about changes I can make to improve\r\ncompatibility with XEmacs (or submit them yourself). As long as those\r\nchanges do not affect behaviour or functionality in GNU Emacs, I'm open\r\nto integrating them.\r\n\r\nAs far as I am aware, the only feature that XEmacs lacks right now is\r\n#'position-bytes. Everything else I got to work in XEmacs, at least with\r\nthe latest beta release.\r\n\r\nCheers,\r\nDominik\r\n",
			"disapproval": false,
			"date": "2013-03-08 05:50:56.887870",
			"approval": false
		}
	],
	"owner_email": "dominik.honnef@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dominik Honnef",
	"subject": "code review 7456051: misc/emacs: Add compatibility for GNU Emacs 23 and XEma...",
	"created": "2013-03-04 21:41:12.729980",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		15001
	],
	"modified": "2013-03-08 05:50:57.116500",
	"closed": true,
	"issue": 7456051
}