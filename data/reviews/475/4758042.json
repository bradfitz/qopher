{
	"description": "netchan: Fix race in Drain() method for exporter/importer.\n\nThis patch replaces the internal recv() method with one that doesn't block, which allows the local receiver goroutines to lock access to the unacked counter that the drain method uses.\nFixes issue 2074. Fixes issue 1805.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4758042/diff/1001/src/pkg/netchan/common.go\nFile src/pkg/netchan/common.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/1001/src/pkg/netchan/common.go#newcode321\nsrc/pkg/netchan/common.go:321: return reflect.ValueOf(nil), true\nNoticed val is already nil, just returning that now instead.\n\nOn 2011/07/16 02:09:28, r wrote:\n> you should allocate this once, maybe call it zeroValue.",
			"disapproval": false,
			"date": "2011-07-18 13:32:02.330999",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-07-15 18:19:24.629831",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "seems reasonable. rogpeppe should probably look at it too.\n\nhttp://codereview.appspot.com/4758042/diff/1001/src/pkg/netchan/common.go\nFile src/pkg/netchan/common.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/1001/src/pkg/netchan/common.go#newcode321\nsrc/pkg/netchan/common.go:321: return reflect.ValueOf(nil), true\nyou should allocate this once, maybe call it zeroValue.",
			"disapproval": false,
			"date": "2011-07-16 02:09:28.752300",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "this is all very messy and unsatisfying, not that i can propose a better approach. since this code is mostly rog's doing, i'd like to hear his input\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/export.go\nFile src/pkg/netchan/export.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/export.go#newcode191\nsrc/pkg/netchan/export.go:191: runtime.Gosched()\ni don't want to see calls to the scheduler in library code. why do you think you need it?\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/import.go\nFile src/pkg/netchan/import.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/import.go#newcode233\nsrc/pkg/netchan/import.go:233: runtime.Gosched()\nwhy?",
			"disapproval": false,
			"date": "2011-07-27 16:53:50.077809",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 27 July 2011 17:53,  <r@golang.org> wrote:\n> this is all very messy and unsatisfying, not that i can propose a better\n> approach. since this code is mostly rog's doing, i'd like to hear his\n> input\n\ni intend to get to this in not too long. sorry for the delay.\nother imperatives currently.\n",
			"disapproval": false,
			"date": "2011-07-28 17:04:25.048051",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-07-25 16:13:17.322581",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I agree that this is a mess. I think the real culprit in all of this is the inability to peek on an unbuffered channel. I've seen requests for that functionality in other places, perhaps they're unfounded. If it's worthwhile here, maybe I could add a Peek() method in runtime just for netchans.\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/export.go\nFile src/pkg/netchan/export.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/export.go#newcode191\nsrc/pkg/netchan/export.go:191: runtime.Gosched()\nStuff I'm using internally actually uses time.Sleep() here instead. I put the reschedule call in here just because it seemed less arbitrary than say, a 1e8 wait...\n\nOn 2011/07/27 16:53:50, r wrote:\n> i don't want to see calls to the scheduler in library code. why do you think you\n> need it?\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/import.go\nFile src/pkg/netchan/import.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/8001/src/pkg/netchan/import.go#newcode233\nsrc/pkg/netchan/import.go:233: runtime.Gosched()\nSee reply to same comment in export.go\n\nOn 2011/07/27 16:53:50, r wrote:\n> why?",
			"disapproval": false,
			"date": "2011-07-27 17:31:29.623251",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-07-27 17:41:38.751815",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "a ping is in order.\n",
			"disapproval": false,
			"date": "2011-09-13 21:51:13.964301",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/13 21:51:13, r wrote:\n> a ping is in order.\n\nThis is still a valid patch in the latest release. Also, this patch will allow for an easy fix for issue 1805.",
			"disapproval": false,
			"date": "2011-09-13 21:56:38.095709",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-16 15:04:16.636798",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Updated this patch to also fix issue 1805.",
			"disapproval": false,
			"date": "2011-09-16 15:05:23.023706",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"david.jakob.fritz@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "some small comments, since rog obviously isn't going to look.\n\nthis is very messy. it may be mostly correct, it may be necessary, but it's messy. it could use more explanation.\n\nnetchan needs a rewrite.\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/common.go\nFile src/pkg/netchan/common.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/common.go#newcode318\nsrc/pkg/netchan/common.go:318: case <-nch.ackCh:\nunindent so case is under switch. gofmt does this\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/export.go\nFile src/pkg/netchan/export.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/export.go#newcode198\nsrc/pkg/netchan/export.go:198: case !val.IsValid():\nunindent all these.  cases go at the same indent as the switch. gofmt does this\nalso isn't ok the thing that matters?\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/export.go#newcode200\nsrc/pkg/netchan/export.go:200: time.Sleep(1e8)\nwhy\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/import.go\nFile src/pkg/netchan/import.go (right):\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/import.go#newcode230\nsrc/pkg/netchan/import.go:230: case !val.IsValid():\nunindent so case is under switch. gofmt.\n\nhttp://codereview.appspot.com/4758042/diff/22001/src/pkg/netchan/import.go#newcode232\nsrc/pkg/netchan/import.go:232: time.Sleep(1e8)\nwhy?\nalso isn't ok the thing that matters?",
			"disapproval": false,
			"date": "2011-09-16 16:56:21.802116",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 16 September 2011 17:56,  <r@golang.org> wrote:\n> some small comments, since rog obviously isn't going to look.\n\ni'm sorry, this code is starting to feel like hard work, and that\neither means i haven't spent enough time understanding it\nor that it needs a rethink. either way i agree with rob that netchan\nneeds a rewrite or at least a strip back and buld up - there\nare edge cases that are not well dealt with by the rules or\nthe code structure, and frustrating limitations (particularly\nthe fact that netchans are not first class).\n\ni'm afraid i am responsible for some of the current code - i still\nunderstand it (mostly!) and i think it turned out ok after Russ's\nexcellent suggestion. i don't understand the code in this\nreview - there's quite a bit of subtlety going on, the model\nno longer seems so clear - in particular why does it poll on\nread? it looks to me that messages arriving every 1e-3s could\nbe delayed to arriving one every 1e-2s.\n\ni am greatly looking forward to netchan taking its place\nas an essential part of the Go armoury, but I'm not sure\nthat this CL is taking it there.\n",
			"disapproval": false,
			"date": "2011-09-17 03:15:24.867379",
			"approval": false
		},
		{
			"sender": "david.jakob.fritz@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I agree that netchans need some rethinking. This CL just tries to get what's \nthere to work as advertised. If this CL or a better fix doesn't make it in, \nI suggest netchans be moved to experimental or the like.\n\nI'll try to explain better what I've done with this CL here to see if you \nthink it warrants cleaning up or just ditching this idea altogether.\n\n1. I've changed the behavior of nch.recv() to be non-blocking so as to allow \nexporter.serveRecv() and the equivalent in the importer to lock access \nbetween the actual channel receive and incrementing the number of in-flight \nmessages. This way, a call to drain immediately after a channel operation, \nsuch as:\n\nmy_netchan <- some_value\nexporter.Drain(-1)\n\nWon't result in a race. The only other way I can think of to ensure correct \nbehavior is to add the ability to check if an unbuffered channel has data \nsitting on it or not, but that seems like an even bigger mess.\n\n2. The call to time.Sleep() in that loop is just to avoid busy-waiting. I \nhad a call to runtime.Gosched() in there originally, and later changed it in \nresponse to Rob's earlier comment and to reflect other equivalent scenarios \nelsewhere in the library code.\n\n3. The last CL I tacked on to this was to fix issue 1805. The exporter \nchecks to see if its entry in the clients list is still valid, as an \nimporter connected with Import() can disconnect, leaving serveRecv() stuck \non a blocking call to a channel receive. When the next client comes in and \nconnects, serveRecv() tries to send the next available message to the \ndisconnected client, always resulting in a 'broken pipe' error.\n",
			"disapproval": false,
			"date": "2011-09-17 15:07:39.072316",
			"approval": false
		}
	],
	"owner_email": "david.jakob.fritz@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "fritz",
	"subject": "code review 4758042: netchan: Fix race in Drain() method for exporter/importer.",
	"created": "2011-07-15 18:15:49.445552",
	"patchsets": [
		1,
		1001,
		6001,
		8001,
		14001,
		22001
	],
	"modified": "2011-09-17 15:07:39.072316",
	"closed": false,
	"issue": 4758042
}