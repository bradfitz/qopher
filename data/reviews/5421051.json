{
	"description": "goinstall: add -fix flag to run gofix on packages on build failure\ngoinstall: better error handling and reporting",
	"cc": [
		"r@golang.org",
		"r@google.com",
		"rsc@golang.org",
		"mattn.jp@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-21 06:25:32.454459",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Making -fix only try the fix if the build fails seems fine.\n\nHowever, I want to point out that the rule for any gofix\nis that it absolutely must not break working code.\nIf there are any fixes that break working code then they\nneed to be corrected or deleted.  I am not aware of any\nsuch fixes.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 15:33:36.556281",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 10:33, Russ Cox <rsc@golang.org> wrote:\n> However, I want to point out that the rule for any gofix\n> is that it absolutely must not break working code.\n> If there are any fixes that break working code then they\n> need to be corrected or deleted. \u00a0I am not aware of any\n> such fixes.\n\nActually, I will make this even stronger: s/break/edit/g\n",
			"disapproval": false,
			"date": "2011-11-21 15:33:58.145710",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 20, 2011, at 10:38 PM, Andrew Gerrand wrote:\n\n> On 21 November 2011 17:31,  <r@golang.org> wrote:\n>> i'm worried about versioning and which fixes to run and on and on. this\n>> seems too blunt a tool, but a finer one will be hard to use.\n> \n> gofix shouldn't break code if it doesn't need updating. If it does,\n> that's a separate issue.\n> \n> I expect we'll need to solve a host of versioning problems at some\n> point, but at the moment we don't have a clear picture of what that\n> entails.\n> \n> A refinement on this idea is making -fix only try gofix on packages\n> that fail to build. Thoughts?\n\nThat suggestion sounds better. I'm nervous about running gofix unconstrained over a tree. Who says it even needs it? And although we try to make it idempotent we shouldn't depend on that if we can avoid it.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-11-21 06:51:44.151354",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 06:27:07.019155",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 21 November 2011 17:31,  <r@golang.org> wrote:\n> i'm worried about versioning and which fixes to run and on and on. this\n> seems too blunt a tool, but a finer one will be hard to use.\n\ngofix shouldn't break code if it doesn't need updating. If it does,\nthat's a separate issue.\n\nI expect we'll need to solve a host of versioning problems at some\npoint, but at the moment we don't have a clear picture of what that\nentails.\n\nA refinement on this idea is making -fix only try gofix on packages\nthat fail to build. Thoughts?\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-11-21 06:39:12.490696",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm worried about versioning and which fixes to run and on and on. this seems too blunt a tool, but a finer one will be hard to use.",
			"disapproval": false,
			"date": "2011-11-21 06:31:02.721672",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I'm not sure.\n\nI wonder that if gofix change the local repository, goinstall works to pull correctry. it should be reset like \"git checkout .\"?\nOr, user must do goinstall -clean?\n\nOn 2011/11/22 03:39:01, adg wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:r@golang.org, mailto:r@google.com, mailto:rsc@golang.org\n> (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.",
			"disapproval": false,
			"date": "2011-11-22 03:57:50.197230",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, r@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-22 03:39:01.516936",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22 November 2011 14:57,  <mattn.jp@gmail.com> wrote:\n> Sorry, I'm not sure.\n>\n> I wonder that if gofix change the local repository, goinstall works to\n> pull correctry. it should be reset like \"git checkout .\"?\n> Or, user must do goinstall -clean?\n\nIt's possible that a package that has been gofixed won't be able to be\nupdated correctly. To update a fixed repo you might need to rm -rf the\nrepository source code.\n\nI think it's better to be able to use the repository now than to\nupdate it later. It seems a small price to pay.\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-11-22 04:36:08.667202",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> rm -rf ...\n\nIn near future, goinstall may be used for some server manager who don't \nknow how goinstall works. So I'm thinking that it should be that goinstall \nmust be possible to fix the conflict.\nOf course, I don't mind that this CL is commited in just later. :)\n\n",
			"disapproval": false,
			"date": "2011-11-22 05:16:45.871066",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "that's right.\n\n",
			"disapproval": false,
			"date": "2011-11-22 05:23:13.742251",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go\nFile src/cmd/goinstall/main.go (right):\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode63\nsrc/cmd/goinstall/main.go:63: func (e PackageError) Error() string {\nOn 2011/11/22 18:56:28, rsc wrote:\n> Please make all the error structs use pointer receivers.\n> Doing so eliminates ambiguity about which type to expect in\n> a type assertion or type switch.  As written, both PackageError\n> and *PackageError satisfy error, so the compiler cannot help\n> you if you type err.(PackageError) where you meant err.(*PackageError)\n> or vice versa, nor can it help you if you write err = &PackageError{...}\n> where you meant err = PackageError{...} or vice versa.\n> \n> On the other hand, if you use pointer receivers, then there is only one\n> possibility - err.(*PackageError) and err = &PackageError{...} - and,\n> even better, if you make a mistake the compiler will tell you.\n\nDone.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode70\nsrc/cmd/goinstall/main.go:70: return fmt.Sprintf(\"%s: remote repo failure: %v\", e.pkg, e.err)\nOn 2011/11/22 18:56:28, rsc wrote:\n> I don't know what this means.\n\nChanged this to DownloadError.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode92\nsrc/cmd/goinstall/main.go:92: return fmt.Sprintf(\"cd %q && %q: %v\\n%s\", e.cmd, e.dir, e.err, e.out)\nOn 2011/11/22 18:56:28, rsc wrote:\n> This error should begin with the e.pkg: prefix, like the others.\n\nThere's no need. They'll always be wrapped in a PackageError or DependencyError.\n\n> Maybe \n> \n> fmt.Sprintf(\"%s:\\n$ cd %q && %q\\n%s\\n%s\", e.pkg, e.dir, e.cmd, e.out, e.err)\n> \n> Note that e.cmd and e.dir are backward in the current code.\n\nFixed.\n\n> I am not sure what e.err is for compared to e.out.\n\nIt is usually \"exited with status 1\" or some such. e.out is the process' combined output.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode149\nsrc/cmd/goinstall/main.go:149: printf(`warning: $GOPATH not set (see \"godoc goinstall\")\\n`)\nOn 2011/11/22 18:56:28, rsc wrote:\n> This is only an appropriate warning when a directory\n> cannot be created or when a checkout fails.\n> It is not, for example, an appropriate warning when\n> there are compile errors.  The old code was trying to\n> be careful about that, but I admit it was not doing a\n> very good job.\n> \n> Can we do better?\n\nIt's now handled by DownloadError. This is at least as good as what we had before, if not better.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode218\nsrc/cmd/goinstall/main.go:218: // we must be visiting if we're retrying, so this is ok\nOn 2011/11/22 18:56:28, rsc wrote:\n> Really?  I'd have expected to be done.\n\nThe retry install happens from inside the first install, so no.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode337\nsrc/cmd/goinstall/main.go:337: func gofixOnFail(err *error, pkg, parent, dir string, dirInfo *build.DirInfo) {\nOn 2011/11/22 18:56:28, rsc wrote:\n> I think the Go way would be to return an error, not to overwrite an argument.\n\nI've split the install function into two functions and simplified the gofix function. It should be clearer now.",
			"disapproval": false,
			"date": "2011-11-23 00:43:53.207608",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22 November 2011 16:16, mattn <mattn.jp@gmail.com> wrote:\n>> rm -rf ...\n> In near future, goinstall may be used for some server manager who don't know\n> how goinstall works. So I'm thinking that it should be that goinstall must\n> be possible to fix the conflict.\n\nI doubt they'll be running -fix if they don't know how goinstall works.\n",
			"disapproval": false,
			"date": "2011-11-22 05:18:19.638207",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go\nFile src/cmd/goinstall/main.go (right):\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode63\nsrc/cmd/goinstall/main.go:63: func (e PackageError) Error() string {\nPlease make all the error structs use pointer receivers.\nDoing so eliminates ambiguity about which type to expect in\na type assertion or type switch.  As written, both PackageError\nand *PackageError satisfy error, so the compiler cannot help\nyou if you type err.(PackageError) where you meant err.(*PackageError)\nor vice versa, nor can it help you if you write err = &PackageError{...}\nwhere you meant err = PackageError{...} or vice versa.\n\nOn the other hand, if you use pointer receivers, then there is only one\npossibility - err.(*PackageError) and err = &PackageError{...} - and,\neven better, if you make a mistake the compiler will tell you.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode70\nsrc/cmd/goinstall/main.go:70: return fmt.Sprintf(\"%s: remote repo failure: %v\", e.pkg, e.err)\nI don't know what this means.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode92\nsrc/cmd/goinstall/main.go:92: return fmt.Sprintf(\"cd %q && %q: %v\\n%s\", e.cmd, e.dir, e.err, e.out)\nThis error should begin with the e.pkg: prefix, like the others.\nMaybe \n\nfmt.Sprintf(\"%s:\\n$ cd %q && %q\\n%s\\n%s\", e.pkg, e.dir, e.cmd, e.out, e.err)\n\nNote that e.cmd and e.dir are backward in the current code.\nI am not sure what e.err is for compared to e.out.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode149\nsrc/cmd/goinstall/main.go:149: printf(`warning: $GOPATH not set (see \"godoc goinstall\")\\n`)\nThis is only an appropriate warning when a directory\ncannot be created or when a checkout fails.\nIt is not, for example, an appropriate warning when\nthere are compile errors.  The old code was trying to\nbe careful about that, but I admit it was not doing a\nvery good job.\n\nCan we do better?\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode218\nsrc/cmd/goinstall/main.go:218: // we must be visiting if we're retrying, so this is ok\nReally?  I'd have expected to be done.\n\nhttp://codereview.appspot.com/5421051/diff/5001/src/cmd/goinstall/main.go#newcode337\nsrc/cmd/goinstall/main.go:337: func gofixOnFail(err *error, pkg, parent, dir string, dirInfo *build.DirInfo) {\nI think the Go way would be to return an error, not to overwrite an argument.",
			"disapproval": false,
			"date": "2011-11-22 18:56:28.626700",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nYou can change all the Repo(_ *http.Client) to just Repo(*http.Client).\nThe _ is kind of strange in that context.\nGreat test case, though: found a compiler bug for me.",
			"disapproval": false,
			"date": "2011-11-28 21:45:23.006631",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8ae17206fc31 ***\n\ngoinstall: add -fix flag to run gofix on packages on build failure\ngoinstall: better error handling and reporting\n\nR=r, r, rsc, mattn.jp\nCC=golang-dev\nhttp://codereview.appspot.com/5421051",
			"disapproval": false,
			"date": "2011-11-28 22:29:05.853841",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5421051: goinstall: add -fix flag to run gofix on packages on bu...",
	"created": "2011-11-21 06:25:24.797257",
	"patchsets": [
		1,
		2001,
		5001,
		8004,
		7002,
		11001,
		5009,
		18001
	],
	"modified": "2011-11-28 22:29:08.595927",
	"closed": true,
	"issue": 5421051
}