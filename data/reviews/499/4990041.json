{
	"description": "exp/regexp: bug fixes and RE2 tests\n\nAlso add exp/regexp to build (forgot before).\n\nAt this point I am very confident in exp/regexp's\nbehavior.  It should be usable as a drop-in\nreplacement for regexp now.\n\nLater CLs could introduce a CompilePOSIX\nto get at traditional POSIX ``extended regular expressions''\nas in egrep and also an re.MatchLongest method to\nchange the matching mode to leftmost longest\ninstead of leftmost first.  On the other hand, I expect\nvery few people to use either.",
	"cc": [
		"r@golang.org",
		"r@google.com",
		"gustavo@niemeyer.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/4990041/diff/8002/src/pkg/exp/regexp/exec_test.go\nFile src/pkg/exp/regexp/exec_test.go (right):\n\nhttp://codereview.appspot.com/4990041/diff/8002/src/pkg/exp/regexp/exec_test.go#newcode202\nsrc/pkg/exp/regexp/exec_test.go:202: if c >= utf8.RuneSelf {\nRuneSelf is the right test but isASCII isn't the right name for how you use this. A better name might be SingleByteChars or something. I admit this is a small point.\n\nhttp://codereview.appspot.com/4990041/diff/8002/src/pkg/exp/regexp/exec_test.go#newcode261\nsrc/pkg/exp/regexp/exec_test.go:261: func same(x, y []int) bool {\nthis is a shame\n\nhttp://codereview.appspot.com/4990041/diff/8002/src/pkg/exp/regexp/syntax/regexp.go\nFile src/pkg/exp/regexp/syntax/regexp.go (right):\n\nhttp://codereview.appspot.com/4990041/diff/8002/src/pkg/exp/regexp/syntax/regexp.go#newcode293\nsrc/pkg/exp/regexp/syntax/regexp.go:293: if n := sub.MaxCap(); m < n {\ndon't they add up? i'd expect a + sign in here somewhere.",
			"disapproval": false,
			"date": "2011-09-07 19:26:03.295456",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 6, 2011 at 20:39, Rob 'Commander' Pike <r@google.com> wrote:\n> but i would.\n\nokay, fair enough.  separate CL.\n",
			"disapproval": false,
			"date": "2011-09-07 00:43:06.253109",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-07 00:38:34.020999",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 6, 2011 at 21:16, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> \u00a0// XXX The regexp package happens to be extremely simple right now.\n> \u00a0// \u00a0 \u00a0 Once exp/regexp goes mainstream, we'll have to update this\n> \u00a0// \u00a0 \u00a0 logic to use a more widely accepted regexp subset.\n>\n> The regexp in this case is used in metadata. The problem with using\n> e.g. Python's re in this case is that the metadata is married with the\n> language.\n\nSure.  You could use POSIX or you could use RE2's syntax,\nwhich is what this supports.  There are at this point RE2 bindings\nfor C++, Python, Perl, Ruby, Erlang, and Eiffel, so it's pretty\nlanguage-neutral.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-07 02:00:14.155158",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f88d6ea931ef ***\n\nexp/regexp: bug fixes and RE2 tests\n\nAlso add exp/regexp to build (forgot before).\n\nAt this point I am very confident in exp/regexp's\nbehavior.  It should be usable as a drop-in\nreplacement for regexp now.\n\nLater CLs could introduce a CompilePOSIX\nto get at traditional POSIX ``extended regular expressions''\nas in egrep and also an re.MatchLongest method to\nchange the matching mode to leftmost longest\ninstead of leftmost first.  On the other hand, I expect\nvery few people to use either.\n\nR=r, r, gustavo\nCC=golang-dev\nhttp://codereview.appspot.com/4990041",
			"disapproval": false,
			"date": "2011-09-07 19:48:14.009663",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 6, 2011, at 5:38 PM, rsc@golang.org wrote:\n\n> Later CLs could introduce a CompilePOSIX\n> to get at traditional POSIX ``extended regular expressions''\n> as in egrep and also an re.MatchLongest method to\n> change the matching mode to leftmost longest\n> instead of leftmost first.  On the other hand, I expect\n> very few people to use either.\n\nbut i would.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-09-07 00:39:45.371758",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I'm not sure. \u00a0I don't think I would consider an existing\n> use of regexp as evidence of intent to use POSIX regexps.\n> I would bet that the vast majority of regexp's users don't\n> realize there's a difference, and that if they did, they'd want\n> the same regexps that Perl, Python, Java, C#, etc use,\n> not the (significantly simpler) ones egrep does.\n\nProbably not interesting for your \"vast majority\" case, but there's\nsome irony here (from a real package):\n\n // XXX The regexp package happens to be extremely simple right now.\n //     Once exp/regexp goes mainstream, we'll have to update this\n //     logic to use a more widely accepted regexp subset.\n\nThe regexp in this case is used in metadata. The problem with using\ne.g. Python's re in this case is that the metadata is married with the\nlanguage.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-07 01:17:05.446118",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 6, 2011, at 5:39 PM, Rob 'Commander' Pike wrote:\n\n> \n> On Sep 6, 2011, at 5:38 PM, rsc@golang.org wrote:\n> \n>> Later CLs could introduce a CompilePOSIX\n>> to get at traditional POSIX ``extended regular expressions''\n>> as in egrep and also an re.MatchLongest method to\n>> change the matching mode to leftmost longest\n>> instead of leftmost first.  On the other hand, I expect\n>> very few people to use either.\n> \n> but i would.\n\nalso that might give a gofix-able route to replacement.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-07 00:44:37.005473",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 6, 2011 at 20:44, Rob 'Commander' Pike <r@google.com> wrote:\n> also that might give a gofix-able route to replacement.\n\nI'm not sure.  I don't think I would consider an existing\nuse of regexp as evidence of intent to use POSIX regexps.\nI would bet that the vast majority of regexp's users don't\nrealize there's a difference, and that if they did, they'd want\nthe same regexps that Perl, Python, Java, C#, etc use,\nnot the (significantly simpler) ones egrep does.\n\nProgrammers who do want the simplicity of POSIX\n(there's an unexpected phrase!) will be able to convert\neasily after the new package gets installed:\n\n    gofmt -w -r 'regexp.Compile -> regexp.CompilePOSIX'.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-07 00:51:46.223690",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4990041/diff/8002/src/pkg/exp/regexp/syntax/regexp.go\nFile src/pkg/exp/regexp/syntax/regexp.go (right):\n\nhttp://codereview.appspot.com/4990041/diff/8002/src/pkg/exp/regexp/syntax/regexp.go#newcode293\nsrc/pkg/exp/regexp/syntax/regexp.go:293: if n := sub.MaxCap(); m < n {\nOn 2011/09/07 19:26:03, r wrote:\n> don't they add up? i'd expect a + sign in here somewhere.\n\nThe Cap field is a number like 0,1 for \\0, 2,3 for \\1, etc.\nThis is computing the max Cap field over the whole expression.",
			"disapproval": false,
			"date": "2011-09-07 19:33:36.776202",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 4990041: exp/regexp: bug fixes and RE2 tests",
	"created": "2011-09-07 00:23:55.621264",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		8002,
		12013
	],
	"modified": "2011-09-07 19:48:15.114902",
	"closed": true,
	"issue": 4990041
}