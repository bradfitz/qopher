{
	"description": "runtime: use uintptr for block length in scanblock\n\nUsing an int64 for a block size doesn't make\nsense on 32bit platforms but extracts a performance\npenalty dealing with double word quantities on Arm.\n\nlinux/arm\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkGobDecode        155401600    144589300   -6.96%\nBenchmarkGobEncode         72772220     62460940  -14.17%\nBenchmarkGzip               5822632      2604797  -55.26%\nBenchmarkGunzip              326321       151721  -53.51%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             4.94         5.31    1.07x\nBenchmarkGobEncode            10.55        12.29    1.16x",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Another real world data point, \n\npando(~/go/src/pkg/net/http) % ~/go/misc/benchcmp {old,new}.txt \nbenchmark          old ns/op    new ns/op    delta\nBenchmarkServer      2581358      2364623   -8.40%",
			"disapproval": false,
			"date": "2012-06-05 02:56:20.944343",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThat is a ridiculous speedup.\n\nhttp://codereview.appspot.com/6272047/diff/2002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6272047/diff/2002/src/pkg/runtime/mgc0.c#newcode162\nsrc/pkg/runtime/mgc0.c:162: if((intptr)n != n) {\nPlease make this if((intptr)n < 0).\n(intptr)n != n will never be true.",
			"disapproval": false,
			"date": "2012-06-05 01:37:56.157202",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. I'll submit this evening when I have time to back out the\r\nchange if there is any breakage.\r\n\r\nOn Tue, Jun 5, 2012 at 12:15 PM,  <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n>\r\n> http://codereview.appspot.com/6272047/\r\n",
			"disapproval": false,
			"date": "2012-06-05 02:16:34.213684",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is another data point, from the same pandaboard\n\npando(~/go/src/pkg/go/parser) % ~/go/misc/benchcmp {old,new}.txt \nbenchmark         old ns/op    new ns/op    delta\nBenchmarkParse    120550240     93808440  -22.18%\n\nbenchmark          old MB/s     new MB/s  speedup\nBenchmarkParse         0.48         0.62    1.29x",
			"disapproval": false,
			"date": "2012-06-05 01:29:26.269858",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's very unlikely to be nanotime's fault, since the garbage\r\ncollection does a fixed five calls per GC cycle, and five system calls\r\nis not a big deal. It is much more likely that doing a system call at\r\nall tickles the profiling timer in a way that gives preference to\r\ndelivering a profiling signal right then. Profiling only barely works\r\non the Mac due to Apple kernel bugs that I had to work around: using\r\nit for non-cpu-intensive benchmarks is unlikely to give good answers.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-05 02:15:06.156393",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-05 02:15:31.851533",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-05 02:10:42.697267",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-05 01:04:37.991698",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> LGTM\r\n>\r\n> That is a ridiculous speedup.\r\n\r\nIt doesn't look like 386 is improved measurably by this change. There\r\nis a comment in vlrt_386.c that says most of the helpers are now\r\nhandled by the compiler, but for 5c it falls back a lot on these\r\nhelpers, which takes a toll in tight loops like this one.\r\n",
			"disapproval": false,
			"date": "2012-06-05 01:40:39.841302",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "my use of int64 there predated both 8g and 5g, and there was no\r\nuintptr or intptr type then.\r\n",
			"disapproval": false,
			"date": "2012-06-05 01:42:45.708939",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> It doesn't look like 386 is improved measurably by this change. There\r\n> is a comment in vlrt_386.c that says most of the helpers are now\r\n> handled by the compiler, but for 5c it falls back a lot on these\r\n> helpers, which takes a toll in tight loops like this one.\r\n\r\nContinuing that thought, I only have darwin/386 to benchmark on, if\r\nsomeone can benchmark on linux/386 I would be interested in the\r\nresults. I have a suspicion that the runtime.nanotime calls in the gc\r\ncode are expensive because on darwin this is a full syscall.\r\n",
			"disapproval": false,
			"date": "2012-06-05 01:43:51.318276",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 4, 2012 at 6:43 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> > It doesn't look like 386 is improved measurably by this change. There\r\n> > is a comment in vlrt_386.c that says most of the helpers are now\r\n> > handled by the compiler, but for 5c it falls back a lot on these\r\n> > helpers, which takes a toll in tight loops like this one.\r\n>\r\n> Continuing that thought, I only have darwin/386 to benchmark on, if\r\n> someone can benchmark on linux/386 I would be interested in the\r\n> results. I have a suspicion that the runtime.nanotime calls in the gc\r\n> code are expensive because on darwin this is a full syscall.\r\n\r\n\r\nMy mac laptop's GC is hacked up to remove all the 3 or 4 runtime.nanotime\r\ncalls, otherwise my profiles were useless.\r\n",
			"disapproval": false,
			"date": "2012-06-05 02:09:31.063580",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Good for all those ARM web servers!\r\n On Jun 4, 2012 7:56 PM, <dave@cheney.net> wrote:\r\n\r\n> Another real world data point,\r\n>\r\n> pando(~/go/src/pkg/net/http) % ~/go/misc/benchcmp {old,new}.txt\r\n> benchmark          old ns/op    new ns/op    delta\r\n> BenchmarkServer      2581358      2364623   -8.40%\r\n>\r\n> http://codereview.appspot.com/**6272047/<http://codereview.appspot.com/6272047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-05 02:59:16.539216",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice, that wasn't that hard. For the record if you can find a copy of\r\nSingh's Mac OS X Internals, pages 594-601 are worth reading. I you get\r\nto page 1200, you've gone to far.\r\n\r\nOn Tue, Jun 5, 2012 at 1:16 PM, Russ Cox <rsc@golang.org> wrote:\r\n> On Mon, Jun 4, 2012 at 10:17 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>> What would be a good mechanism to let the benchmarking code disable accurate\r\n>> GC stats during bench runs?\r\n>\r\n> try patching in 6275056 instead\r\n",
			"disapproval": false,
			"date": "2012-06-05 03:20:50.898387",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I *think* darwin supports a vsyscall type thing called the commpage,\r\nwhich gives a much faster gettimeofday, but I haven't looked into it a\r\nlot other than finding those nanotime calls showing up in the\r\nprofiles.\r\n\r\nOn Tue, Jun 5, 2012 at 12:09 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>\r\n> On Mon, Jun 4, 2012 at 6:43 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> > It doesn't look like 386 is improved measurably by this change. There\r\n>> > is a comment in vlrt_386.c that says most of the helpers are now\r\n>> > handled by the compiler, but for 5c it falls back a lot on these\r\n>> > helpers, which takes a toll in tight loops like this one.\r\n>>\r\n>> Continuing that thought, I only have darwin/386 to benchmark on, if\r\n>> someone can benchmark on linux/386 I would be interested in the\r\n>> results. I have a suspicion that the runtime.nanotime calls in the gc\r\n>> code are expensive because on darwin this is a full syscall.\r\n>\r\n>\r\n> My mac laptop's GC is hacked up to remove all the 3 or 4 runtime.nanotime\r\n> calls, otherwise my profiles were useless.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-05 02:12:42.606576",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 4, 2012 at 7:14 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> It's very unlikely to be nanotime's fault, since the garbage\r\n> collection does a fixed five calls per GC cycle, and five system calls\r\n> is not a big deal. It is much more likely that doing a system call at\r\n> all tickles the profiling timer in a way that gives preference to\r\n> delivering a profiling signal right then. Profiling only barely works\r\n> on the Mac due to Apple kernel bugs that I had to work around: using\r\n> it for non-cpu-intensive benchmarks is unlikely to give good answers.\r\n>\r\n\r\nThe benchmark I was looking at (the one in net/textproto) is entirely\r\nCPU-bound and doesn't do syscalls except for the nanotimes during GC.\r\n\r\nWhat would be a good mechanism to let the benchmarking code disable\r\naccurate GC stats during bench runs?\r\n",
			"disapproval": false,
			"date": "2012-06-05 02:17:52.274748",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 4, 2012 at 10:17 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> What would be a good mechanism to let the benchmarking code disable accurate\r\n> GC stats during bench runs?\r\n\r\ntry patching in 6275056 instead\r\n",
			"disapproval": false,
			"date": "2012-06-05 03:17:07.422037",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4fdf6aa4f602 ***\n\nruntime: use uintptr for block length in scanblock\n\nUsing an int64 for a block size doesn't make\nsense on 32bit platforms but extracts a performance\npenalty dealing with double word quantities on Arm.\n\nlinux/arm\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkGobDecode        155401600    144589300   -6.96%\nBenchmarkGobEncode         72772220     62460940  -14.17%\nBenchmarkGzip               5822632      2604797  -55.26%\nBenchmarkGunzip              326321       151721  -53.51%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             4.94         5.31    1.07x\nBenchmarkGobEncode            10.55        12.29    1.16x\n\nR=golang-dev, rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6272047",
			"disapproval": false,
			"date": "2012-06-05 08:55:35.821040",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6272047: runtime: use uintptr for block size in scanblock",
	"created": "2012-06-04 03:28:42.496115",
	"patchsets": [
		1,
		2001,
		2002,
		2004,
		4,
		12001,
		9003,
		17001
	],
	"modified": "2012-06-05 22:32:57.973379",
	"closed": true,
	"issue": 6272047
}