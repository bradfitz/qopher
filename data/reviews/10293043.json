{
	"description": "encoding/json: Enable decoding of numbers and booleans to Go string values",
	"cc": [
		"golang-dev@googlegroups.com",
		"nightlyone@googlemail.com",
		"gobot@golang.org"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-15 03:26:45.869640",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/15 03:26:45, raggi wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\nThis is particularly useful when working with legacy data. Our example use case is from a corpus of JSON data containing keys that have corresponding values of numeric, boolean and string types, unmarshalling into a protobuf representation of the object with string fields. The alternative to this patch would seem to be to rewrite not insignificant portions of both the parsing and reflection code inside the application, which seems less than ideal.",
			"disapproval": false,
			"date": "2013-06-15 03:28:57.584520",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/15 03:28:57, raggi wrote:\n> On 2013/06/15 03:26:45, raggi wrote:\n> > Hello mailto:golang-dev@googlegroups.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> > \n> > I'd like you to review this change to\n> > https://code.google.com/p/go/\n> \n> This is particularly useful when working with legacy data. Our example use case\n> is from a corpus of JSON data containing keys that have corresponding values of\n> numeric, boolean and string types, unmarshalling into a protobuf representation\n> of the object with string fields. The alternative to this patch would seem to be\n> to rewrite not insignificant portions of both the parsing and reflection code\n> inside the application, which seems less than ideal.\n\nIt accepts data not intended for this type now and will give asymmetric encoding/decoding situations\nThis leads to type errors commonly found in dynamic languages (e.g. \"is this data bool or string?\"),\nwhich come a bit unexpected to Go coders used to static typing.\n\nMight break applications, which filter garbled data or detect unexpected remote API changes this way.\n\nCould you find a way to make this behavior optional?",
			"disapproval": false,
			"date": "2013-06-15 09:21:01.894060",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 15, 2013 at 2:21 AM, <nightlyone@googlemail.com> wrote:\r\n\r\n> On 2013/06/15 03:28:57, raggi wrote:\r\n>\r\n>> On 2013/06/15 03:26:45, raggi wrote:\r\n>> > Hello mailto:golang-dev@**googlegroups.com<golang-dev@googlegroups.com>(cc:\r\n>> mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>),\r\n>> >\r\n>> > I'd like you to review this change to\r\n>> > https://code.google.com/p/go/\r\n>>\r\n>\r\n>  This is particularly useful when working with legacy data. Our example\r\n>>\r\n> use case\r\n>\r\n>> is from a corpus of JSON data containing keys that have corresponding\r\n>>\r\n> values of\r\n>\r\n>> numeric, boolean and string types, unmarshalling into a protobuf\r\n>>\r\n> representation\r\n>\r\n>> of the object with string fields. The alternative to this patch would\r\n>>\r\n> seem to be\r\n>\r\n>> to rewrite not insignificant portions of both the parsing and\r\n>>\r\n> reflection code\r\n>\r\n>> inside the application, which seems less than ideal.\r\n>>\r\n>\r\n> It accepts data not intended for this type now and will give asymmetric\r\n> encoding/decoding situations\r\n>\r\n\r\nI don't think the existing number story is symmetric either.\r\n\r\n\r\n> This leads to type errors commonly found in dynamic languages (e.g. \"is\r\n> this data bool or string?\"),\r\n> which come a bit unexpected to Go coders used to static typing.\r\n>\r\n\r\nThe types on the Go side are still strong. I would argue a case that it's\r\nuser intent to deserialize into a string field here.\r\n\r\nIt's worth noting also that there are several commonly used libraries in\r\nJava, C and C++ that have behavior similar to this. I wouldn't suggest this\r\nbehavior is more common in dynamic languages. The struct field types are\r\nstill well known in the program, and enforced by the compiler, there is no\r\ndoubt as to the types inside of your program. The change is that\r\nunmarshalling to fields of these types always works and has well defined\r\nbehavior that is consistent with many other platforms and systems.\r\n\r\nMight break applications, which filter garbled data or detect unexpected\r\n> remote API changes this way.\r\n>\r\n\r\nI'm not sure what you mean by \"filter garbled data\".\r\n\r\nFor detecting unexpected remote API changes, I'm trying to see the\r\ndisadvantage of not error during a remote API upgrade that moves a string\r\nvalue to a numeric or a boolean value, when the local side has not caught\r\nup. If the issue were inverted, I might agree more.\r\n\r\nI would generally recommend using something other than encoding/json for\r\n\"detecting api changes\", as currently the errors that are output provide no\r\ninsight into the field name or data position that was an error (unless it's\r\ntype is unique in the entire structure, and it is the first error,\r\ninclusive). If this kind of behavior is to be useful, it would be best\r\nserviced by writing some code that uses RawMessage and Unmarshal to inspect\r\nindividual values with well known keys or positions.\r\n\r\nCould you find a way to make this behavior optional?\r\n>\r\n\r\nI could potentially introduce an \"allowstring\" tag or similar, assuming\r\nthat information is available in the required context. I'll take a look.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/10293043/<https://codereview.appspot.com/10293043/>\r\n>\r\n\r\n\r\n\r\n-- \r\nJames Tucker | Staff Software Engineer | raggi@google.com | 650-704-8566\r\n",
			"disapproval": false,
			"date": "2013-06-15 10:16:02.672650",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nightlyone@googlemail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-24 18:55:27.091240",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn 2013/06/24 18:55:27, raggi wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:nightlyone@googlemail.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.",
			"disapproval": false,
			"date": "2013-06-24 20:09:58.775930",
			"approval": true
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"raggi@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by nigeltao)",
			"disapproval": false,
			"date": "2013-06-25 04:21:14.324710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the suggestion, but I'd prefer not to add this.\n\nRoughly speaking, for an API addition to be worthwhile at this point, it should usually introduce functionality not possible using the current APIs. \n\nUseNumber was a bit of a wart, but it was necessary because the default JSON unmarshal type for numbers - float64 - was lossy for some inputs, and there was no way in the existing API to get a lossless number representation when unmarshaling into the generic structure JSON (into interface{}).\n\nUseString does not provide any new functionality. If you want to accept bools, numbers, or strings, you can already unmarshal into an interface{} or a json.RawMessage. In fact those give you more information, because they distinguish `true` from `\"true\"` and `1.0` from `\"1.0\"`.\n\nRather than complicate the interface with a new API piece that will need to be maintained and will have interactions with the rest of the package (for example, why does it apply to bools, numbers, and strings but not arrays or objects?), I suggest using what's already there to do what you need.",
			"disapproval": false,
			"date": "2013-07-01 23:56:19.294980",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just fork the json package in your project privately and make it do\r\nwhatever you want it to do.\r\n\r\nAs a part-time maintainer of encoding/json, I think it's already hard\r\nenough to follow.\r\n\r\n\r\n\r\nOn Tue, Jul 2, 2013 at 9:23 AM, James Tucker <raggi@google.com> wrote:\r\n\r\n> For my use case (moving arbitrary JSON blobs into protobufs), doing this\r\n> would require essentially copying a large portion of the reflection code\r\n> present in encoding/json to my library, and implementing this patch there.\r\n> Some JSON being unpacked contains strings for a given field name, others\r\n> contain integers, floats or booleans. It's due to this \"conflict\" that I\r\n> have this requirement. Please bear in mind that this is legacy data from a\r\n> raw data set, not data that I'm in control of generating, as such it's not\r\n> viable to \"fix this problem at the source.\"\r\n>\r\n> It seems there could be a better story for this overall, than duplicating\r\n> so much effort. The original patch set I provided allowed this to work\r\n> transparently, instead of through adding additional APIs. Ingo didn't seem\r\n> to like the fact that this was more loose.\r\n>\r\n> Do you have a better suggestion?\r\n>\r\n>\r\n> On Mon, Jul 1, 2013 at 4:56 PM, <rsc@golang.org> wrote:\r\n>\r\n>> Thanks for the suggestion, but I'd prefer not to add this.\r\n>>\r\n>> Roughly speaking, for an API addition to be worthwhile at this point, it\r\n>> should usually introduce functionality not possible using the current\r\n>> APIs.\r\n>>\r\n>> UseNumber was a bit of a wart, but it was necessary because the default\r\n>> JSON unmarshal type for numbers - float64 - was lossy for some inputs,\r\n>> and there was no way in the existing API to get a lossless number\r\n>> representation when unmarshaling into the generic structure JSON (into\r\n>> interface{}).\r\n>>\r\n>> UseString does not provide any new functionality. If you want to accept\r\n>> bools, numbers, or strings, you can already unmarshal into an\r\n>> interface{} or a json.RawMessage. In fact those give you more\r\n>> information, because they distinguish `true` from `\"true\"` and `1.0`\r\n>> from `\"1.0\"`.\r\n>>\r\n>> Rather than complicate the interface with a new API piece that will need\r\n>> to be maintained and will have interactions with the rest of the package\r\n>> (for example, why does it apply to bools, numbers, and strings but not\r\n>> arrays or objects?), I suggest using what's already there to do what you\r\n>> need.\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/10293043/<https://codereview.appspot.com/10293043/>\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> James Tucker | Staff Software Engineer | raggi@google.com | 650-704-8566\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-02 16:34:54.759090",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For my use case (moving arbitrary JSON blobs into protobufs), doing this\r\nwould require essentially copying a large portion of the reflection code\r\npresent in encoding/json to my library, and implementing this patch there.\r\nSome JSON being unpacked contains strings for a given field name, others\r\ncontain integers, floats or booleans. It's due to this \"conflict\" that I\r\nhave this requirement. Please bear in mind that this is legacy data from a\r\nraw data set, not data that I'm in control of generating, as such it's not\r\nviable to \"fix this problem at the source.\"\r\n\r\nIt seems there could be a better story for this overall, than duplicating\r\nso much effort. The original patch set I provided allowed this to work\r\ntransparently, instead of through adding additional APIs. Ingo didn't seem\r\nto like the fact that this was more loose.\r\n\r\nDo you have a better suggestion?\r\n\r\n\r\nOn Mon, Jul 1, 2013 at 4:56 PM, <rsc@golang.org> wrote:\r\n\r\n> Thanks for the suggestion, but I'd prefer not to add this.\r\n>\r\n> Roughly speaking, for an API addition to be worthwhile at this point, it\r\n> should usually introduce functionality not possible using the current\r\n> APIs.\r\n>\r\n> UseNumber was a bit of a wart, but it was necessary because the default\r\n> JSON unmarshal type for numbers - float64 - was lossy for some inputs,\r\n> and there was no way in the existing API to get a lossless number\r\n> representation when unmarshaling into the generic structure JSON (into\r\n> interface{}).\r\n>\r\n> UseString does not provide any new functionality. If you want to accept\r\n> bools, numbers, or strings, you can already unmarshal into an\r\n> interface{} or a json.RawMessage. In fact those give you more\r\n> information, because they distinguish `true` from `\"true\"` and `1.0`\r\n> from `\"1.0\"`.\r\n>\r\n> Rather than complicate the interface with a new API piece that will need\r\n> to be maintained and will have interactions with the rest of the package\r\n> (for example, why does it apply to bools, numbers, and strings but not\r\n> arrays or objects?), I suggest using what's already there to do what you\r\n> need.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10293043/<https://codereview.appspot.com/10293043/>\r\n>\r\n\r\n\r\n\r\n-- \r\nJames Tucker | Staff Software Engineer | raggi@google.com | 650-704-8566\r\n",
			"disapproval": false,
			"date": "2013-07-02 16:23:03.613100",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jul 2, 2013 at 9:34 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Just fork the json package in your project privately and make it do\r\n> whatever you want it to do.\r\n>\r\n\r\nFair enough, I'll have some more play with this and see how it goes.\r\n\r\nAs a part-time maintainer of encoding/json, I think it's already hard\r\n> enough to follow.\r\n>\r\n\r\nI sympathize, and wish I could do more to help. Thanks for the input,\r\nthough (everyone) :-)\r\n\r\n\r\n>\r\n>\r\n>\r\n> On Tue, Jul 2, 2013 at 9:23 AM, James Tucker <raggi@google.com> wrote:\r\n>\r\n>> For my use case (moving arbitrary JSON blobs into protobufs), doing this\r\n>> would require essentially copying a large portion of the reflection code\r\n>> present in encoding/json to my library, and implementing this patch there.\r\n>> Some JSON being unpacked contains strings for a given field name, others\r\n>> contain integers, floats or booleans. It's due to this \"conflict\" that I\r\n>> have this requirement. Please bear in mind that this is legacy data from a\r\n>> raw data set, not data that I'm in control of generating, as such it's not\r\n>> viable to \"fix this problem at the source.\"\r\n>>\r\n>> It seems there could be a better story for this overall, than duplicating\r\n>> so much effort. The original patch set I provided allowed this to work\r\n>> transparently, instead of through adding additional APIs. Ingo didn't seem\r\n>> to like the fact that this was more loose.\r\n>>\r\n>> Do you have a better suggestion?\r\n>>\r\n>>\r\n>> On Mon, Jul 1, 2013 at 4:56 PM, <rsc@golang.org> wrote:\r\n>>\r\n>>> Thanks for the suggestion, but I'd prefer not to add this.\r\n>>>\r\n>>> Roughly speaking, for an API addition to be worthwhile at this point, it\r\n>>> should usually introduce functionality not possible using the current\r\n>>> APIs.\r\n>>>\r\n>>> UseNumber was a bit of a wart, but it was necessary because the default\r\n>>> JSON unmarshal type for numbers - float64 - was lossy for some inputs,\r\n>>> and there was no way in the existing API to get a lossless number\r\n>>> representation when unmarshaling into the generic structure JSON (into\r\n>>> interface{}).\r\n>>>\r\n>>> UseString does not provide any new functionality. If you want to accept\r\n>>> bools, numbers, or strings, you can already unmarshal into an\r\n>>> interface{} or a json.RawMessage. In fact those give you more\r\n>>> information, because they distinguish `true` from `\"true\"` and `1.0`\r\n>>> from `\"1.0\"`.\r\n>>>\r\n>>> Rather than complicate the interface with a new API piece that will need\r\n>>> to be maintained and will have interactions with the rest of the package\r\n>>> (for example, why does it apply to bools, numbers, and strings but not\r\n>>> arrays or objects?), I suggest using what's already there to do what you\r\n>>> need.\r\n>>>\r\n>>>\r\n>>> https://codereview.appspot.**com/10293043/<https://codereview.appspot.com/10293043/>\r\n>>>\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>> James Tucker | Staff Software Engineer | raggi@google.com | 650-704-8566\r\n>>\r\n>> --\r\n>>\r\n>> ---\r\n>> You received this message because you are subscribed to the Google Groups\r\n>> \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n>>\r\n>\r\n>\r\n\r\n\r\n-- \r\nJames Tucker | Staff Software Engineer | raggi@google.com | 650-704-8566\r\n",
			"disapproval": false,
			"date": "2013-07-02 16:54:48.625350",
			"approval": false
		}
	],
	"owner_email": "raggi@google.com",
	"private": false,
	"base_url": "",
	"owner": "raggi",
	"subject": "code review 10293043: encoding/json: Enable decoding of numbers and booleans ...",
	"created": "2013-06-15 03:25:26.450930",
	"patchsets": [
		1,
		2001,
		5001,
		12001,
		12004,
		16001
	],
	"modified": "2013-07-02 16:55:13.696540",
	"closed": true,
	"issue": 10293043
}