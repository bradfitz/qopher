{
	"description": "http: remove Request.RawURL\n\nIts purpose is not only undocumented, it's also unknown (to me\nand Russ, at least) and leads to complexity, bugs and\nconfusion.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-10-06 23:09:51.824373",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nCan it.",
			"disapproval": false,
			"date": "2011-10-06 23:22:52.828321",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "While I appreciate the quick LGTM, I'm a little scared of this CL and would\nlike a paranoid review.\n\nThat said: I'm more scared of the old situation where every time I touched a\n*Request, I had to deal with 4 cases...\n\n1) req.URL == nil, req,RawURL == \"\"  (easy to reject)\n2) req.URL != nil, req,RawURL != \"\"  (uh, which?)\n3) req.URL != nil, req,RawURL == \"\" (easy, URL wins)\n4) req.URL == nil, req,RawURL != \"\"  (wonder what the hell the caller meant,\nsince it wasn't usually documented)\n\nWith the new way, I can ignore URL == nil is an error, and all I have to\nworry about is req.URL.RawPath if documented to mean something, otherwise\njust using req.URL.String() or req.URL.Path as before.\n\n\nOn Thu, Oct 6, 2011 at 4:22 PM, <adg@golang.org> wrote:\n\n> LGTM\n>\n> Can it.\n>\n> http://codereview.appspot.com/**5213043/<http://codereview.appspot.com/5213043/>\n>\n",
			"disapproval": false,
			"date": "2011-10-06 23:26:54.209005",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 6 October 2011 16:26, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n\n> While I appreciate the quick LGTM, I'm a little scared of this CL and would\n> like a paranoid review.\n>\n> That said: I'm more scared of the old situation where every time I touched\n> a *Request, I had to deal with 4 cases...\n>\n> 1) req.URL == nil, req,RawURL == \"\"  (easy to reject)\n> 2) req.URL != nil, req,RawURL != \"\"  (uh, which?)\n> 3) req.URL != nil, req,RawURL == \"\" (easy, URL wins)\n> 4) req.URL == nil, req,RawURL != \"\"  (wonder what the hell the caller\n> meant, since it wasn't usually documented)\n>\n\n1 and 4 are just an invalid requests. If the URL can't be parsed then how\ncan you serve it? Otherwise, trust req.URL.\n",
			"disapproval": false,
			"date": "2011-10-06 23:30:12.640444",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I'd like to leave this open for a few days and see if people weigh in.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-07 01:45:30.887584",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Oct 6, 2011 at 4:29 PM, Andrew Gerrand <adg@golang.org> wrote:\n\n>\n>\n> On 6 October 2011 16:26, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n>\n>> While I appreciate the quick LGTM, I'm a little scared of this CL and\n>> would like a paranoid review.\n>>\n>> That said: I'm more scared of the old situation where every time I touched\n>> a *Request, I had to deal with 4 cases...\n>>\n>> 1) req.URL == nil, req,RawURL == \"\"  (easy to reject)\n>> 2) req.URL != nil, req,RawURL != \"\"  (uh, which?)\n>> 3) req.URL != nil, req,RawURL == \"\" (easy, URL wins)\n>> 4) req.URL == nil, req,RawURL != \"\"  (wonder what the hell the caller\n>> meant, since it wasn't usually documented)\n>>\n>\n> 1 and 4 are just an invalid requests. If the URL can't be parsed then how\n> can you serve it? Otherwise, trust req.URL.\n>\n\nOne would think. But no.  4) was still valid in some places, like RoundTrip.\n So there were still 3 cases to deal with, only one of which was sanely\ndefined.\n",
			"disapproval": false,
			"date": "2011-10-06 23:35:28.209224",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ping.\n\nCan we kill this now?\n\nDoes it need a gofix module?  If so, what should it do?  Writing a gofix\nrule implies that we know the purpose of this field.  If we knew the purpose\nof it, we wouldn't be removing it.\n\n\nOn Thu, Oct 6, 2011 at 6:45 PM, Russ Cox <rsc@golang.org> wrote:\n\n> I'd like to leave this open for a few days and see if people weigh in.\n>\n> Russ\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-12 17:57:07.532052",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nDon't bother with a gofix.\n",
			"disapproval": false,
			"date": "2011-10-12 18:14:07.900911",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=af3d7d10735c ***\n\nhttp: remove Request.RawURL\n\nIts purpose is not only undocumented, it's also unknown (to me\nand Russ, at least) and leads to complexity, bugs and\nconfusion.\n\nR=golang-dev, adg, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5213043",
			"disapproval": false,
			"date": "2011-10-12 18:48:27.543788",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5213043: http: remove Request.RawURL",
	"created": "2011-10-06 23:09:21.454901",
	"patchsets": [
		1,
		2001,
		2002,
		7002
	],
	"modified": "2011-10-12 18:48:29.081801",
	"closed": true,
	"issue": 5213043
}