{
	"description": "go spec: clarify promotion rules for methods/fields of anonymous fields\n\nFixes issue 3635.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"iant@golang.org",
		"kevlar@google.com",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To me, the term \"promotion\" is also ambiguous because it seems to imply that it's a first-class citizen and thus would conflict with an explicit method of the same name on the class in which the anonymous field is embedded, which is not the case.",
			"disapproval": false,
			"date": "2012-05-17 21:27:45.088705",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-05-17 20:22:56.546795",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-05-17 20:47:01.858079",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-17 20:56:47.210226",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 17, 2012 at 5:14 PM,  <iant@golang.org> wrote:\r\n> As long as we're looking at this, it doesn't seem precisely correct to\r\n> me to say that methods of a field are promoted to be methods of the\r\n> struct, since it is the field that is passed to the method, not the\r\n> struct. \u00a0Perhaps \"If an anonymous field itself has fields or methods,\r\n> they may be used directly with the outer struct, when there is no\r\n> ambiguity.\"\r\n\r\nThe methods do get promoted in the sense that the struct gets\r\nadditional methods that are exactly like its ordinary methods except\r\nthat they were auto-generated.  The fields are not as smooth since you\r\ncannot use them in composite literals.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-17 21:23:25.541506",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Arguably what there is now is better than what there was before.\r\n\r\nI agree that it's still not 100% precise. I think we don't describe\r\nvery well what happens to the receiver when using a selector to invoke\r\na method. Perhaps that's the place where this needs to go.\r\n\r\n- gri\r\n\r\nOn Thu, May 17, 2012 at 2:14 PM,  <iant@golang.org> wrote:\r\n> FYI\r\n>\r\n>\r\n> http://codereview.appspot.com/6217045/diff/1/doc/go_spec.html\r\n> File doc/go_spec.html (right):\r\n>\r\n> http://codereview.appspot.com/6217045/diff/1/doc/go_spec.html#newcode958\r\n> doc/go_spec.html:958: <a href=\"#Method_declarations\">Methods</a> of an\r\n> anonymous field are promoted\r\n> As long as we're looking at this, it doesn't seem precisely correct to\r\n> me to say that methods of a field are promoted to be methods of the\r\n> struct, since it is the field that is passed to the method, not the\r\n> struct. \u00a0Perhaps \"If an anonymous field itself has fields or methods,\r\n> they may be used directly with the outer struct, when there is no\r\n> ambiguity.\"\r\n>\r\n> Or really this is fine, just kibbitzing.\r\n>\r\n> http://codereview.appspot.com/6217045/\r\n",
			"disapproval": false,
			"date": "2012-05-17 21:20:00.061562",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Robert Griesemer <gri@golang.org> writes:\r\n\r\n> Arguably what there is now is better than what there was before.\r\n\r\nYes, I'm fine with this change.\r\n\r\nIan\r\n\r\n>\r\n> I agree that it's still not 100% precise. I think we don't describe\r\n> very well what happens to the receiver when using a selector to invoke\r\n> a method. Perhaps that's the place where this needs to go.\r\n>\r\n> - gri\r\n>\r\n> On Thu, May 17, 2012 at 2:14 PM,  <iant@golang.org> wrote:\r\n>> FYI\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/6217045/diff/1/doc/go_spec.html\r\n>> File doc/go_spec.html (right):\r\n>>\r\n>> http://codereview.appspot.com/6217045/diff/1/doc/go_spec.html#newcode958\r\n>> doc/go_spec.html:958: <a href=\"#Method_declarations\">Methods</a> of an\r\n>> anonymous field are promoted\r\n>> As long as we're looking at this, it doesn't seem precisely correct to\r\n>> me to say that methods of a field are promoted to be methods of the\r\n>> struct, since it is the field that is passed to the method, not the\r\n>> struct. \u00a0Perhaps \"If an anonymous field itself has fields or methods,\r\n>> they may be used directly with the outer struct, when there is no\r\n>> ambiguity.\"\r\n>>\r\n>> Or really this is fine, just kibbitzing.\r\n>>\r\n>> http://codereview.appspot.com/6217045/\r\n",
			"disapproval": false,
			"date": "2012-05-17 23:20:57.030240",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/6217045/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/1/doc/go_spec.html#newcode958\ndoc/go_spec.html:958: <a href=\"#Method_declarations\">Methods</a> of an anonymous field are promoted\nAs long as we're looking at this, it doesn't seem precisely correct to me to say that methods of a field are promoted to be methods of the struct, since it is the field that is passed to the method, not the struct.  Perhaps \"If an anonymous field itself has fields or methods, they may be used directly with the outer struct, when there is no ambiguity.\"\n\nOr really this is fine, just kibbitzing.",
			"disapproval": false,
			"date": "2012-05-17 21:14:48.884921",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nThe previous version - while better than what was there originally -\r\nwas still not quite right when it came to the rules for the method set\r\ncomputation. This is an attempt to make this correct, hopefully\r\nwithout making it overly complicated.\r\n\r\nOn Thu, May 17, 2012 at 4:20 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n> Robert Griesemer <gri@golang.org> writes:\r\n>\r\n>> Arguably what there is now is better than what there was before.\r\n>\r\n> Yes, I'm fine with this change.\r\n>\r\n> Ian\r\n>\r\n>>\r\n>> I agree that it's still not 100% precise. I think we don't describe\r\n>> very well what happens to the receiver when using a selector to invoke\r\n>> a method. Perhaps that's the place where this needs to go.\r\n>>\r\n>> - gri\r\n>>\r\n>> On Thu, May 17, 2012 at 2:14 PM, \u00a0<iant@golang.org> wrote:\r\n>>> FYI\r\n>>>\r\n>>>\r\n>>> http://codereview.appspot.com/6217045/diff/1/doc/go_spec.html\r\n>>> File doc/go_spec.html (right):\r\n>>>\r\n>>> http://codereview.appspot.com/6217045/diff/1/doc/go_spec.html#newcode958\r\n>>> doc/go_spec.html:958: <a href=\"#Method_declarations\">Methods</a> of an\r\n>>> anonymous field are promoted\r\n>>> As long as we're looking at this, it doesn't seem precisely correct to\r\n>>> me to say that methods of a field are promoted to be methods of the\r\n>>> struct, since it is the field that is passed to the method, not the\r\n>>> struct. \u00a0Perhaps \"If an anonymous field itself has fields or methods,\r\n>>> they may be used directly with the outer struct, when there is no\r\n>>> ambiguity.\"\r\n>>>\r\n>>> Or really this is fine, just kibbitzing.\r\n>>>\r\n>>> http://codereview.appspot.com/6217045/\r\n",
			"disapproval": false,
			"date": "2012-05-18 00:51:43.786167",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/9001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/9001/doc/go_spec.html#newcode683\ndoc/go_spec.html:683: consists of all methods with receiver type <code>T</code>.\nMaybe:\n\nand all unambiguous methods which are in the method set of an embedded field.\n\nhttp://codereview.appspot.com/6217045/diff/9001/doc/go_spec.html#newcode963\ndoc/go_spec.html:963: The set of such non-ambiguous methods is also included in the method set of the\nDoesn't the list talk about fields too?  Not sure how to fix the wording here, but the list seems to cover more than its lead-in.",
			"disapproval": false,
			"date": "2012-05-18 22:40:21.562595",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/12002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/12002/doc/go_spec.html#newcode688\ndoc/go_spec.html:688: containing anonymous fields.\n'additional rules apply' should be supplemented with a better hint about where to look for them.\n\nFurther rules apply for struct types containing anonymous fields, as described <here>.\n\nhttp://codereview.appspot.com/6217045/diff/12002/doc/go_spec.html#newcode962\ndoc/go_spec.html:962: of the outer struct when there is no ambiguity.\ni know what you mean but this muddies the issue. the phrasing is complex and depends on subtle terms defined elsewhere and it isn't clear what ambiguity you're referring to. the prose you're replacing is much clearer, even if it's wrong. \n\nbut it's only wrong when the context is a composite literal, isn't it? so maybe fix it by just mentioning the exception.\n\nExcept as the elements of composite literals, fields and methods...",
			"disapproval": false,
			"date": "2012-05-20 00:45:49.729032",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n- gri\r\n\r\nOn Fri, May 18, 2012 at 3:40 PM,  <kevlar@google.com> wrote:\r\n>\r\n> http://codereview.appspot.com/6217045/diff/9001/doc/go_spec.html\r\n> File doc/go_spec.html (right):\r\n>\r\n> http://codereview.appspot.com/6217045/diff/9001/doc/go_spec.html#newcode683\r\n> doc/go_spec.html:683: consists of all methods with receiver type\r\n> <code>T</code>.\r\n> Maybe:\r\n>\r\n> and all unambiguous methods which are in the method set of an embedded\r\n> field.\r\n\r\nThis is not precise either, and I rather don't replicate the text from\r\nthe structs section. It's complicated for structs, and it's probably\r\nbetter to leave that complicated part in one place.\r\n\r\n>\r\n> http://codereview.appspot.com/6217045/diff/9001/doc/go_spec.html#newcode963\r\n> doc/go_spec.html:963: The set of such non-ambiguous methods is also\r\n> included in the method set of the\r\n> Doesn't the list talk about fields too? \u00a0Not sure how to fix the wording\r\n> here, but the list seems to cover more than its lead-in.\r\n\r\nReformulated.\r\n\r\n>\r\n> http://codereview.appspot.com/6217045/\r\n",
			"disapproval": false,
			"date": "2012-05-19 00:54:55.241034",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nEmphasized the notion of \"promoted\" method and field. Hopefully made this clear now.\n\n- gri\n\nhttp://codereview.appspot.com/6217045/diff/12002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/12002/doc/go_spec.html#newcode688\ndoc/go_spec.html:688: containing anonymous fields.\nOn 2012/05/20 00:45:49, r wrote:\n> 'additional rules apply' should be supplemented with a better hint about where\n> to look for them.\n> \n> Further rules apply for struct types containing anonymous fields, as described\n> <here>.\n\nDone.\n\nhttp://codereview.appspot.com/6217045/diff/12002/doc/go_spec.html#newcode962\ndoc/go_spec.html:962: of the outer struct when there is no ambiguity.\nOn 2012/05/20 00:45:49, r wrote:\n> i know what you mean but this muddies the issue. the phrasing is complex and\n> depends on subtle terms defined elsewhere and it isn't clear what ambiguity\n> you're referring to. the prose you're replacing is much clearer, even if it's\n> wrong. \n> \n> but it's only wrong when the context is a composite literal, isn't it? so maybe\n> fix it by just mentioning the exception.\n\nNo. Even if there's no composite literal, conflicting methods won't be promoted into the method set.\n\nRephrased.\n\n> \n> Except as the elements of composite literals, fields and methods...",
			"disapproval": false,
			"date": "2012-05-31 21:33:39.628262",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-01 00:05:09.369543",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html#newcode962\ndoc/go_spec.html:962: struct, are <i>promoted</i> to be ordinary fields and methods of the struct.\nOn 2012/05/31 23:04:35, kevlar wrote:\n> s/,//\n\nDone.\n\nhttp://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html#newcode965\ndoc/go_spec.html:965: <a href=\"#Composite_literals\">composite literals</a> of the struct.\nOn 2012/05/31 23:04:35, kevlar wrote:\n> Should we mention how you can initialize them? (e.g. by initializing the struct\n> by name)\n\nNo. This is not a tutorial.\n\nhttp://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html#newcode967\ndoc/go_spec.html:967: Promoted methods are included in the method set of the struct as follows\nOn 2012/05/31 23:04:35, kevlar wrote:\n> Should we mention that the method is not promoted if the embedding struct also\n> defines a method with that name?\n\nThat is the definition of \"promoted\": If the embedding struct defines a method m and the anonymous field has a method m, the embedded m cannot be used legally - well, x.m denotes the outer m not the inner one.\n\nThis does not need to change. Instead, clarified definition of \"promoted\".",
			"disapproval": false,
			"date": "2012-05-31 23:34:56.129305",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html#newcode962\ndoc/go_spec.html:962: struct, are <i>promoted</i> to be ordinary fields and methods of the struct.\ns/,//\n\nhttp://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html#newcode965\ndoc/go_spec.html:965: <a href=\"#Composite_literals\">composite literals</a> of the struct.\nShould we mention how you can initialize them? (e.g. by initializing the struct by name)\n\nhttp://codereview.appspot.com/6217045/diff/19001/doc/go_spec.html#newcode967\ndoc/go_spec.html:967: Promoted methods are included in the method set of the struct as follows\nShould we mention that the method is not promoted if the embedding struct also defines a method with that name?",
			"disapproval": false,
			"date": "2012-05-31 23:04:35.005086",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any others?\r\n- gri\r\n\r\nOn Thu, May 31, 2012 at 5:05 PM,  <kevlar@google.com> wrote:\r\n> LGTM\r\n>\r\n> http://codereview.appspot.com/6217045/\r\n",
			"disapproval": false,
			"date": "2012-06-04 16:49:59.589474",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of June 1, 2012\",\n4\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode965\ndoc/go_spec.html:965: Promoted fields and methods effectively act like ordinary fields and methods\ns/effectively //\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode966\ndoc/go_spec.html:966: of a struct. However, promoted fields cannot be used as field names in\ns/. However,/ except that/\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode970\ndoc/go_spec.html:970: (for a struct type <code>S</code> and a type named <code>T</code>):\nGiven struct type <code>S</code> and a type named <code>T</code>, the rules for promoting an anonymous field of <code>S</code> of type <code>T</code> or <code>*T</code>are:\n\n</p>\n\n<ul>\n</li>\n    If the field has type <code>T</code>, ...\netc.",
			"disapproval": false,
			"date": "2012-06-04 17:16:22.351251",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode976\ndoc/go_spec.html:976: (the <i>promoted method set</i> of <code>T</code>).\nThis is not a well-formed concept. The promoted method set depends as much on S as it does on T, since a method defined on S can inhibit the promotion of a method from T.  I think if we say only:\n\n--\nIf S contains an anonymous field T, the method sets of S and *S both include promoted methods with receiver T. The method set of *S also includes promoted methods with receiver *T.\n\nIf S contains an anonymous field *T, the method sets of S and *S both include promoted methods with receiver T or *T.\n--\n\nThen that is loose enough not to hit this problem, and it avoids a third bullet. (The original text before this CL has the problem too.)",
			"disapproval": false,
			"date": "2012-06-04 17:27:00.514994",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html#newcode970\ndoc/go_spec.html:970: promoted methods are included in the method set of the struct as follows:\nMaybe not circular but still hard to follow. Let's be clear about the sequence of definitions.\n\nA field or <a href=\"#Method_declarations\">method</a> <code>f</code> of an\nanonymous field in a struct <code>x</code> is called <i>promoted</i> if\nthe <a href=\"#Selectors\">selector</a> <code>x.f</code> is legal according\nthe rules defined above. If it is legal, it denotes the field or method <code>f</code>\nof the embedded type.\n\nGiven a struct type <code>S</code> and a type named <code>T</code>,\n promoted methods are included in the method set of the struct as follows:\n\n\n<ul list goes here>\n\nPromoted fields and methods act like ordinary fields and methods\nof a struct except that promoted fields cannot be used as field names in\n<a href=\"#Composite_literals\">composite literals</a> of the struct.",
			"disapproval": false,
			"date": "2012-06-04 20:47:44.132360",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html#newcode970\ndoc/go_spec.html:970: promoted methods are included in the method set of the struct as follows:\nOn 2012/06/04 18:43:31, r wrote:\n> i'm not sure. it this feels circular to me. a promoted method is legal, and it's\n> legal if it's promoted, in which case it's legal.\n\nI don't see the circularity:\n\n- First, we defined what a \"promoted\" method m is: one for which x.m is legal (as defined in selectors), and where x.m denotes the m in question (rather than some other m). This seems fine to me.\n\n- Second, we define how method sets include promoted methods. Those method sets are not further used in this definition.\n\nPerhaps you're hinting at something else?\n- gri",
			"disapproval": false,
			"date": "2012-06-04 19:56:17.636774",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of June 1, 2012\",\nOn 2012/06/04 17:16:22, r wrote:\n> 4\n\nDone.\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode965\ndoc/go_spec.html:965: Promoted fields and methods effectively act like ordinary fields and methods\nOn 2012/06/04 17:16:22, r wrote:\n> s/effectively //\n\nDone.\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode966\ndoc/go_spec.html:966: of a struct. However, promoted fields cannot be used as field names in\nOn 2012/06/04 17:16:22, r wrote:\n> s/. However,/ except that/\n\nDone.\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode970\ndoc/go_spec.html:970: (for a struct type <code>S</code> and a type named <code>T</code>):\nOn 2012/06/04 17:16:22, r wrote:\n> Given struct type <code>S</code> and a type named <code>T</code>, the rules for\n> promoting an anonymous field of <code>S</code> of type <code>T</code> or\n> <code>*T</code>are:\n> \n\nnot quite right - here we care only about promoted methods, and the ones of T rather than S - reformulated\n\n> </p>\n> \n> <ul>\n> </li>\n>     If the field has type <code>T</code>, ...\n> etc.\n\nhttp://codereview.appspot.com/6217045/diff/26001/doc/go_spec.html#newcode976\ndoc/go_spec.html:976: (the <i>promoted method set</i> of <code>T</code>).\nOn 2012/06/04 17:27:00, rsc wrote:\n> This is not a well-formed concept. The promoted method set depends as much on S\n> as it does on T, since a method defined on S can inhibit the promotion of a\n> method from T.  I think if we say only:\n> \n> --\n> If S contains an anonymous field T, the method sets of S and *S both include\n> promoted methods with receiver T. The method set of *S also includes promoted\n> methods with receiver *T.\n> \n> If S contains an anonymous field *T, the method sets of S and *S both include\n> promoted methods with receiver T or *T.\n> --\n> \n> Then that is loose enough not to hit this problem, and it avoids a third bullet.\n> (The original text before this CL has the problem too.)\n\nDone.",
			"disapproval": false,
			"date": "2012-06-04 18:23:57.252771",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-04 21:12:34.356975",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for r",
			"disapproval": false,
			"date": "2012-06-04 18:40:01.497940",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM yay",
			"disapproval": false,
			"date": "2012-06-04 21:11:40.346384",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html#newcode970\ndoc/go_spec.html:970: promoted methods are included in the method set of the struct as follows:\ni'm not sure. it this feels circular to me. a promoted method is legal, and it's legal if it's promoted, in which case it's legal.",
			"disapproval": false,
			"date": "2012-06-04 18:43:31.371183",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-04 20:57:16.848188",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nIncorporated some changes per r's suggestion.\r\n- gri\r\n\r\nOn Mon, Jun 4, 2012 at 1:47 PM,  <r@golang.org> wrote:\r\n>\r\n> http://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html\r\n> File doc/go_spec.html (right):\r\n>\r\n> http://codereview.appspot.com/6217045/diff/32001/doc/go_spec.html#newcode970\r\n> doc/go_spec.html:970: promoted methods are included in the method set of\r\n> the struct as follows:\r\n> Maybe not circular but still hard to follow. Let's be clear about the\r\n> sequence of definitions.\r\n>\r\n> A field or <a href=\"#Method_declarations\">method</a> <code>f</code> of\r\n> an\r\n> anonymous field in a struct <code>x</code> is called <i>promoted</i> if\r\n> the <a href=\"#Selectors\">selector</a> <code>x.f</code> is legal\r\n> according\r\n> the rules defined above. If it is legal, it denotes the field or method\r\n> <code>f</code>\r\n> of the embedded type.\r\n>\r\n> Given a struct type <code>S</code> and a type named <code>T</code>,\r\n>\r\n> \u00a0promoted methods are included in the method set of the struct as\r\n> follows:\r\n>\r\n>\r\n> <ul list goes here>\r\n>\r\n> Promoted fields and methods act like ordinary fields and methods\r\n> of a struct except that promoted fields cannot be used as field names in\r\n>\r\n> <a href=\"#Composite_literals\">composite literals</a> of the struct.\r\n>\r\n> http://codereview.appspot.com/6217045/\r\n",
			"disapproval": false,
			"date": "2012-06-04 21:09:45.667915",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ae0301294b9b ***\n\ngo spec: clarify promotion rules for methods/fields of anonymous fields\n\nFixes issue 3635.\n\nR=rsc, r, iant, kevlar, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6217045",
			"disapproval": false,
			"date": "2012-06-04 21:24:29.077434",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6217045: go spec: clarify promotion rules for methods/fields of ...",
	"created": "2012-05-17 20:22:50.182835",
	"patchsets": [
		1,
		6001,
		9001,
		12002,
		16001,
		19001,
		16003,
		24001,
		19003,
		26001,
		32001,
		40001,
		43001
	],
	"modified": "2012-06-04 21:24:31.186210",
	"closed": true,
	"issue": 6217045
}