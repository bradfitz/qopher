{
	"description": "sync: add Go method to WaitGroup; a convenience.\n\n      This code:\n\n        var wg sync.WaitGroup\n\n        wg.Add(1)\n        go func() {\n          defer wg.Done()\n          // do something\n        }()\n\n        wg.Add(1)\n        go func() {\n          defer wg.Done()\n          // do something else\n        }()\n\n        wg.Wait()\n\n      Becomes this:\n\n        var wg sync.WaitGroup\n\n        wg.Go(func() {\n          // do something\n        })\n\n        wg.Go(func() {\n          // do something else\n        })\n\n        wg.Wait()",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"dsymonds@golang.org",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"rsc@golang.org",
		"kyle@kylelemons.net",
		"r@google.com",
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-05-07 22:29:37.993075",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5689044/diff/5001/src/pkg/sync/waitgroup.go\nFile src/pkg/sync/waitgroup.go (right):\n\nhttp://codereview.appspot.com/5689044/diff/5001/src/pkg/sync/waitgroup.go#newcode81\nsrc/pkg/sync/waitgroup.go:81: // Go increments to the WaitGroup counter, starts a goroutine running fn,\ns/to //",
			"disapproval": false,
			"date": "2012-05-07 22:33:31.075174",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\nOn May 7, 2012, at 5:13 PM, Russ Cox wrote:\r\n\r\n> On Mon, May 7, 2012 at 7:56 PM, Rob 'Commander' Pike <r@google.com> wrote:\r\n>>> There is a reason 'go' is a statement and not a built-in function that\r\n>>> takes a niladic func.  This takes away one of the primary features of\r\n>>> the go statement, namely that you can pass arguments to the function\r\n>>> and trust that they are copied into the goroutine.\r\n>> \r\n>> well, the closure you'd need to write would do that. the question is\r\n>> whether the clumsiness of the closure required dominates the\r\n>> notational improvement of automated bookkeeping.\r\n>> i'm slightly favorable but see your discomfort.\r\n> \r\n> My point is slightly subtler than that.\r\n> \r\n> Lots of new Go programmers make the mistake of thinking that\r\n> \r\n>    go fmt.Println(x)\r\n>    go func() { fmt.Println(x) }()\r\n> \r\n> are equivalent, but one copies x and one does not, so that in for x :=\r\n> range y { ... }, they behave quite differently.  Making good use of\r\n> these arguments is one of the things you learn as you move from \"hello\r\n> world\" Go programmer to experienced Go programmer.  I do not want to\r\n> reinforce the \"hello world\" programmer's perception that these are the\r\n> same by introducing APIs in the standard library that wrap the go\r\n> statement by taking a plain func().\r\n> \r\n> Also, I think that sync.WaitGroup is way overused.  Every time you see\r\n> a use of sync.WaitGroup (or sync.Mutex or sync.Cond), you should ask\r\n> yourself, why is this program communicating by synchronizing instead\r\n> of synchronizing by communicating?  Adding .Go will make this\r\n> primitive even more overused.  Introductory Go articles will not even\r\n> mention the go statement.  They'll just declare a WaitGroup and say\r\n> wg.Go(func() { ... }) and wg.Wait().  Why is this the way we want\r\n> people to program?\r\n\r\ngood points. given that i've never used a WaitGroup, i now withdraw my support.\r\n\r\n-rob\r\n\r\n\r\n",
			"disapproval": false,
			"date": "2012-05-08 00:16:35.455529",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "in favor but would like to hear from others",
			"disapproval": false,
			"date": "2012-05-07 22:37:17.570222",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Having written code that would benefit from this, I appreciate the\r\nconvenience. I don't feel particularly strongly about it; put me down\r\nas \"mildly in favour\".\r\n",
			"disapproval": false,
			"date": "2012-05-07 22:41:58.182962",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5689044/diff/5001/src/pkg/sync/waitgroup.go\nFile src/pkg/sync/waitgroup.go (right):\n\nhttp://codereview.appspot.com/5689044/diff/5001/src/pkg/sync/waitgroup.go#newcode81\nsrc/pkg/sync/waitgroup.go:81: // Go increments to the WaitGroup counter, starts a goroutine running fn,\nOn 2012/05/07 22:33:31, r wrote:\n> s/to //\n\nDone.",
			"disapproval": false,
			"date": "2012-05-07 22:35:51.271495",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\nOn May 7, 2012, at 4:52 PM, Russ Cox wrote:\r\n\r\n> I am skeptical about this.\r\n> \r\n> There is a reason 'go' is a statement and not a built-in function that\r\n> takes a niladic func.  This takes away one of the primary features of\r\n> the go statement, namely that you can pass arguments to the function\r\n> and trust that they are copied into the goroutine.\r\n\r\nwell, the closure you'd need to write would do that. the question is whether the clumsiness of the closure required dominates the notational improvement of automated bookkeeping. i'm slightly favorable but see your discomfort.\r\n\r\n> It is unclear to me that sync.WaitGroup merits such sugary attention.\r\n> \r\n> Russ\r\n\r\n",
			"disapproval": false,
			"date": "2012-05-07 23:56:21.270230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tuesday, May 8, 2012 4:22:36 AM UTC+4, Andrew Gerrand wrote:\r\n>\r\n> I suppose, in this particular use case, the WaitGroup could just as \r\n> easily be replaced with a done channel: \r\n>\r\n>         done := make(chan bool) \r\n>         n :=0 \r\n>          \r\n>         n++ \r\n>         go func() { \r\n>                 fmt.Println(\"One\") \r\n>                 done <- true \r\n>         }() \r\n>          \r\n>         n++ \r\n>         go func() { \r\n>                 fmt.Println(\"Two\") \r\n>                 done <- true \r\n>         }() \r\n>          \r\n>         for i := 0; i < n; i++ { \r\n>                 <-done \r\n>         }\r\n\r\n\r\n\r\nor:\r\n\r\ndone := make(chan bool)\r\n defer func() { <- done }()\r\ngo func() {\r\nfmt.Println(\"One\")\r\ndone <- true\r\n}()\r\n\r\ndefer func() { <- done }()\r\ngo func() {\r\nfmt.Println(\"Two\")\r\ndone <- true\r\n}()\r\n \r\n\r\n\r\n>\r\n> Withdrawing this change. \r\n>\r\n> Andrew \r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-09 05:43:34.379733",
			"approval": false
		},
		{
			"sender": "kyle@kylelemons.net",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"kyle@kylelemons.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm a big fan.  It's a pattern that is not only common, but one that's almost required to use it correctly.  If it has a net negative LOC, makes the code clearer, and makes code easier to write correctly (all of which I think are the case) then I'm for it.\n\n(is this something that gofix can simplify automagically?)",
			"disapproval": false,
			"date": "2012-05-07 23:55:37.699107",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like.\r\n\r\nOn Tue, May 8, 2012 at 8:37 AM, <r@golang.org> wrote:\r\n\r\n> in favor but would like to hear from others\r\n>\r\n> http://codereview.appspot.com/**5689044/<http://codereview.appspot.com/5689044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-07 23:38:32.940932",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does the make anything in the standard library nicer ? If this has a negative LOC impact then I'm in favor.",
			"disapproval": false,
			"date": "2012-05-07 23:46:29.090423",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am skeptical about this.\r\n\r\nThere is a reason 'go' is a statement and not a built-in function that\r\ntakes a niladic func.  This takes away one of the primary features of\r\nthe go statement, namely that you can pass arguments to the function\r\nand trust that they are copied into the goroutine.\r\n\r\nIt is unclear to me that sync.WaitGroup merits such sugary attention.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-07 23:52:39.635054",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 8 May 2012 09:56, Rob 'Commander' Pike <r@google.com> wrote:\r\n>\r\n> On May 7, 2012, at 4:52 PM, Russ Cox wrote:\r\n>\r\n>> I am skeptical about this.\r\n>>\r\n>> There is a reason 'go' is a statement and not a built-in function that\r\n>> takes a niladic func. \u00a0This takes away one of the primary features of\r\n>> the go statement, namely that you can pass arguments to the function\r\n>> and trust that they are copied into the goroutine.\r\n>\r\n> well, the closure you'd need to write would do that. the question is whether the clumsiness of the closure required dominates the notational improvement of automated bookkeeping. i'm slightly favorable but see your discomfort.\r\n\r\nCertainly there are cases where you want to pass values to the closure\r\nat invocation, and in those cases you can use Add and Done:\r\n\r\nfor _, url := range urls {\r\n    wg.Add(1)\r\n    go func(url string) {\r\n        http.Get(url)\r\n        wg.Done()\r\n    }(url)\r\n}\r\n\r\nOr, alternately, use a variable declaration and Go:\r\n\r\nfor _, url := range urls {\r\n    u := url\r\n    wg.Go(func() {\r\n        http.Get(u)\r\n    }()\r\n}\r\n\r\nEither case is fine, but in this case I wouldn't encourage the use of Go.\r\n\r\nThe trivial example code in the CL description is a paraphrasing of\r\nreal code, except in the actual example there were more concurrent\r\ntasks being launched. In that real case (and I suspect many other\r\ncases) there is a substantial reduction in boilerplate.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-05-08 00:03:22.253582",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 7, 2012 at 7:56 PM, Rob 'Commander' Pike <r@google.com> wrote:\r\n>> There is a reason 'go' is a statement and not a built-in function that\r\n>> takes a niladic func. \u00a0This takes away one of the primary features of\r\n>> the go statement, namely that you can pass arguments to the function\r\n>> and trust that they are copied into the goroutine.\r\n>\r\n> well, the closure you'd need to write would do that. the question is\r\n> whether the clumsiness of the closure required dominates the\r\n> notational improvement of automated bookkeeping.\r\n> i'm slightly favorable but see your discomfort.\r\n\r\nMy point is slightly subtler than that.\r\n\r\nLots of new Go programmers make the mistake of thinking that\r\n\r\n    go fmt.Println(x)\r\n    go func() { fmt.Println(x) }()\r\n\r\nare equivalent, but one copies x and one does not, so that in for x :=\r\nrange y { ... }, they behave quite differently.  Making good use of\r\nthese arguments is one of the things you learn as you move from \"hello\r\nworld\" Go programmer to experienced Go programmer.  I do not want to\r\nreinforce the \"hello world\" programmer's perception that these are the\r\nsame by introducing APIs in the standard library that wrap the go\r\nstatement by taking a plain func().\r\n\r\nAlso, I think that sync.WaitGroup is way overused.  Every time you see\r\na use of sync.WaitGroup (or sync.Mutex or sync.Cond), you should ask\r\nyourself, why is this program communicating by synchronizing instead\r\nof synchronizing by communicating?  Adding .Go will make this\r\nprimitive even more overused.  Introductory Go articles will not even\r\nmention the go statement.  They'll just declare a WaitGroup and say\r\nwg.Go(func() { ... }) and wg.Wait().  Why is this the way we want\r\npeople to program?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-08 00:13:39.213313",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"kyle@kylelemons.net",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-05-08 00:22:56.265288",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suppose, in this particular use case, the WaitGroup could just as\r\neasily be replaced with a done channel:\r\n\r\n\tdone := make(chan bool)\r\n\tn :=0\r\n\t\r\n\tn++\r\n\tgo func() {\r\n\t\tfmt.Println(\"One\")\r\n\t\tdone <- true\r\n\t}()\r\n\t\r\n\tn++\r\n\tgo func() {\r\n\t\tfmt.Println(\"Two\")\r\n\t\tdone <- true\r\n\t}()\r\n\t\r\n\tfor i := 0; i < n; i++ {\r\n\t\t<-done\r\n\t}\r\n\r\nWithdrawing this change.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-05-08 00:23:07.349623",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5689044: sync: add Go method to WaitGroup; a convenience.",
	"created": "2012-02-20 01:56:00.211479",
	"patchsets": [
		1,
		2001,
		3002,
		5001,
		9001
	],
	"modified": "2012-05-09 05:43:34.500582",
	"closed": true,
	"issue": 5689044
}