{
	"description": "runtime: use UMTX_OP_WAIT_UINT on FreeBSD\n\nUMTX_OP_WAIT expects that the address points to a uintptr, but\nthe code in lock_futex.c uses a uint32.  UMTX_OP_WAIT_UINT is\njust like UMTX_OP_WAIT, but the address points to a uint32.\nThis almost certainly makes no difference on a little-endian\nsystem, but since the kernel supports it we should do the\nright thing.  And, who knows, maybe it matters.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@golang.org",
		"ality@pbrane.org"
	],
	"reviewers": [
		"syscomet@gmail.com",
		"devon.odell@gmail.com",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-04-12 03:31:39.625220",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-12 03:31:54.883600",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nBut docs on the web about this are surprisingly hard to find. Random commits (https://code.google.com/p/freebsd/source/detail?r=7a73b98d73c3bd9e7158087d3f7c880ba9d97da6#) and such. But seems plausible. :)",
			"disapproval": false,
			"date": "2013-04-12 03:52:29.873670",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/12 03:52:29, bradfitz wrote:\n> LGTM\n> \n> But docs on the web about this are surprisingly hard to find. Random commits\n> (https://code.google.com/p/freebsd/source/detail?r=7a73b98d73c3bd9e7158087d3f7c880ba9d97da6#)\n> and such. But seems plausible. :)\n\nYeah, I couldn't find any docs.  I actually found it by reading the kernel source while I was trying to verify that the Go runtime code was doing the right thing.",
			"disapproval": false,
			"date": "2013-04-12 03:54:51.978420",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, I'm reading through http://fxr.watson.org/fxr/source/kern/kern_umtx.c\r\n\r\nGuess you don't need docs when you ship your userspace, libc, and kernel\r\nall together.\r\n\r\n\r\n\r\nOn Thu, Apr 11, 2013 at 8:54 PM, <iant@golang.org> wrote:\r\n\r\n> On 2013/04/12 03:52:29, bradfitz wrote:\r\n>\r\n>> LGTM\r\n>>\r\n>\r\n>  But docs on the web about this are surprisingly hard to find. Random\r\n>>\r\n> commits\r\n>\r\n> (https://code.google.com/p/**freebsd/source/detail?r=**\r\n> 7a73b98d73c3bd9e7158087d3f7c88**0ba9d97da6#<https://code.google.com/p/freebsd/source/detail?r=7a73b98d73c3bd9e7158087d3f7c880ba9d97da6#>\r\n> )\r\n>\r\n>> and such. But seems plausible. :)\r\n>>\r\n>\r\n> Yeah, I couldn't find any docs.  I actually found it by reading the\r\n> kernel source while I was trying to verify that the Go runtime code was\r\n> doing the right thing.\r\n>\r\n> https://codereview.appspot.**com/8699043/<https://codereview.appspot.com/8699043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-12 03:56:03.664570",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthat kernel code is remarkable.",
			"disapproval": false,
			"date": "2013-04-12 05:22:58.636650",
			"approval": true
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "r@golang.org once said:\r\n> that kernel code is remarkable.\r\n\r\nI can think of a few other adjectives.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-04-12 10:55:45.402880",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=64bd7ce0c817 ***\n\nruntime: use UMTX_OP_WAIT_UINT on FreeBSD\n\nUMTX_OP_WAIT expects that the address points to a uintptr, but\nthe code in lock_futex.c uses a uint32.  UMTX_OP_WAIT_UINT is\njust like UMTX_OP_WAIT, but the address points to a uint32.\nThis almost certainly makes no difference on a little-endian\nsystem, but since the kernel supports it we should do the\nright thing.  And, who knows, maybe it matters.\n\nR=golang-dev, bradfitz, r, ality\nCC=golang-dev\nhttps://codereview.appspot.com/8699043",
			"disapproval": false,
			"date": "2013-04-12 12:20:23.073350",
			"approval": false
		},
		{
			"sender": "syscomet@gmail.com",
			"recipients": [
				"iant@golang.org",
				"syscomet@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/12 12:20:23, iant wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=64bd7ce0c817 ***\n> \n> runtime: use UMTX_OP_WAIT_UINT on FreeBSD\n> \n> UMTX_OP_WAIT expects that the address points to a uintptr, but\n> the code in lock_futex.c uses a uint32.  UMTX_OP_WAIT_UINT is\n> just like UMTX_OP_WAIT, but the address points to a uint32.\n> This almost certainly makes no difference on a little-endian\n> system, but since the kernel supports it we should do the\n> right thing.  And, who knows, maybe it matters.\n\nAs a side-note: this caused a severe performance regression on an old, unsupported, release of FreeBSD (7.0 plus security patches), such that running \"go version\" would take 60 seconds to complete (or 5 seconds under ktrace).  It appears, from kdump, that the code enters a tight loop with 441,722 instances of \"_umtx_op -1 errno 22 Invalid argument\" in the output, and the same parameters passed every time.\n\nSince the code supporting UMTX_OP_WAIT_UINT went into FreeBSD in 2007 ( http://svnweb.freebsd.org/base?view=revision&revision=173800 ), I suspect that leaving this change in Go is correct, but perhaps there could be some better error detection?\n\nReverting this change resolved the issues for me.",
			"disapproval": false,
			"date": "2013-06-14 22:33:47.841480",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 14, 2013 at 3:33 PM,  <syscomet@gmail.com> wrote:\r\n>\r\n> As a side-note: this caused a severe performance regression on an old,\r\n> unsupported, release of FreeBSD (7.0 plus security patches), such that\r\n> running \"go version\" would take 60 seconds to complete (or 5 seconds\r\n> under ktrace).  It appears, from kdump, that the code enters a tight\r\n> loop with 441,722 instances of \"_umtx_op -1 errno 22 Invalid argument\"\r\n> in the output, and the same parameters passed every time.\r\n>\r\n> Since the code supporting UMTX_OP_WAIT_UINT went into FreeBSD in 2007 (\r\n> http://svnweb.freebsd.org/base?view=revision&revision=173800 ), I\r\n> suspect that leaving this change in Go is correct, but perhaps there\r\n> could be some better error detection?\r\n>\r\n> Reverting this change resolved the issues for me.\r\n\r\nThe code is os_freebsd.c is intended to crash if the system call\r\nfails.  It looks correct to me but I guess it isn't.  I don't think we\r\ncare about a version of FreeBSD from before 2007, but if you can work\r\nup a patch that detects the error correctly--i.e., crashes--we can\r\nprobably commit it.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-06-14 23:17:46.885110",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/6/14 Ian Lance Taylor <iant@golang.org>:\r\n> On Fri, Jun 14, 2013 at 3:33 PM,  <syscomet@gmail.com> wrote:\r\n>>\r\n>> As a side-note: this caused a severe performance regression on an old,\r\n>> unsupported, release of FreeBSD (7.0 plus security patches), such that\r\n>> running \"go version\" would take 60 seconds to complete (or 5 seconds\r\n>> under ktrace).  It appears, from kdump, that the code enters a tight\r\n>> loop with 441,722 instances of \"_umtx_op -1 errno 22 Invalid argument\"\r\n>> in the output, and the same parameters passed every time.\r\n>>\r\n>> Since the code supporting UMTX_OP_WAIT_UINT went into FreeBSD in 2007 (\r\n>> http://svnweb.freebsd.org/base?view=revision&revision=173800 ), I\r\n>> suspect that leaving this change in Go is correct, but perhaps there\r\n>> could be some better error detection?\r\n>>\r\n>> Reverting this change resolved the issues for me.\r\n>\r\n> The code is os_freebsd.c is intended to crash if the system call\r\n> fails.  It looks correct to me but I guess it isn't.  I don't think we\r\n> care about a version of FreeBSD from before 2007, but if you can work\r\n> up a patch that detects the error correctly--i.e., crashes--we can\r\n> probably commit it.\r\n\r\nI am not sure that 7 was ever explicitly supported. The original port\r\nwas developed on FreeBSD 8, and there were a few bits (pkg/net,\r\nmaybe?) that had kqueue / other system needs that weren't in 7 (if I\r\nrecall correctly -- it's possible I don't, it's been almost 4 years\r\nnow).\r\n\r\nI'm surprised the *(int32*)1005=0x1005 doesn't cause a crash. If\r\nthat's not crashing, it would be good to figure out why ktrace shows\r\nit returning EINVAL and that line not running. I don't have a FreeBSD\r\n7 machine to try this out on.\r\n\r\n--dho\r\n\r\n> Ian\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-15 02:30:22.717270",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 15, 2013 at 10:30 AM, Devon H. O'Dell <devon.odell@gmail.com>wrote:\r\n\r\n> I'm surprised the *(int32*)1005=0x1005 doesn't cause a crash. If\r\n> that's not crashing, it would be good to figure out why ktrace shows\r\n> it returning EINVAL and that line not running. I don't have a FreeBSD\r\n> 7 machine to try this out on.\r\n\r\nIt's because the returned AX contains the errno value but it's positive.\r\n\r\nHi @syscomet, could you please patch in\r\nhttps://codereview.appspot.com/10295043\r\nand see if you got an error when executing on FreeBSD 7?\r\n",
			"disapproval": false,
			"date": "2013-06-15 06:14:40.548690",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/6/15 minux <minux.ma@gmail.com>:\r\n>\r\n> On Sat, Jun 15, 2013 at 10:30 AM, Devon H. O'Dell <devon.odell@gmail.com>\r\n> wrote:\r\n>>\r\n>> I'm surprised the *(int32*)1005=0x1005 doesn't cause a crash. If\r\n>> that's not crashing, it would be good to figure out why ktrace shows\r\n>> it returning EINVAL and that line not running. I don't have a FreeBSD\r\n>> 7 machine to try this out on.\r\n>\r\n> It's because the returned AX contains the errno value but it's positive.\r\n\r\nThere may be other cases then. I haven't checked, but I'm reasonably\r\nsure that's not the only one. That means the EINTR check is bad, too.\r\n\r\n> Hi @syscomet, could you please patch in\r\n> https://codereview.appspot.com/10295043\r\n> and see if you got an error when executing on FreeBSD 7?\r\n",
			"disapproval": false,
			"date": "2013-06-15 07:50:10.083970",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/6/15 Devon H. O'Dell <devon.odell@gmail.com>:\r\n> 2013/6/15 minux <minux.ma@gmail.com>:\r\n>>\r\n>> On Sat, Jun 15, 2013 at 10:30 AM, Devon H. O'Dell <devon.odell@gmail.com>\r\n>> wrote:\r\n>>>\r\n>>> I'm surprised the *(int32*)1005=0x1005 doesn't cause a crash. If\r\n>>> that's not crashing, it would be good to figure out why ktrace shows\r\n>>> it returning EINVAL and that line not running. I don't have a FreeBSD\r\n>>> 7 machine to try this out on.\r\n>>\r\n>> It's because the returned AX contains the errno value but it's positive.\r\n>\r\n> There may be other cases then. I haven't checked, but I'm reasonably\r\n> sure that's not the only one. That means the EINTR check is bad, too.\r\n\r\nActually, it means the ret >= 0 check is bad in general.\r\n\r\n>> Hi @syscomet, could you please patch in\r\n>> https://codereview.appspot.com/10295043\r\n>> and see if you got an error when executing on FreeBSD 7?\r\n",
			"disapproval": false,
			"date": "2013-06-15 07:50:41.598540",
			"approval": false
		},
		{
			"sender": "syscomet@gmail.com",
			"recipients": [
				"iant@golang.org",
				"syscomet@gmail.com",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/15 07:50:41, dho wrote:\n> Actually, it means the ret >= 0 check is bad in general.\n> \n> >> Hi @syscomet, could you please patch in\n> >> https://codereview.appspot.com/10295043\n> >> and see if you got an error when executing on FreeBSD 7?\n\nForgive me for silence, I've just been travelling and am now back online.\n\nI reverted my reversion of this UMTX UINT change and then patched in that assembler change; the Go tool-chain failed to build, with a segfault in the relevant area of code.\n\nOutput of \"./all.bash\" from the failing step onwards, with traces:\n  https://gist.github.com/syscomet/5793451\n\nLet me know if we should take this discussion out of this issue to someplace else?",
			"disapproval": false,
			"date": "2013-06-16 21:11:29.649270",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 16, 2013 at 2:11 PM,  <syscomet@gmail.com> wrote:\r\n>\r\n> I reverted my reversion of this UMTX UINT change and then patched in\r\n> that assembler change; the Go tool-chain failed to build, with a\r\n> segfault in the relevant area of code.\r\n>\r\n> Output of \"./all.bash\" from the failing step onwards, with traces:\r\n>   https://gist.github.com/syscomet/5793451\r\n\r\nThat sounds right.  It should crash.  Crashing on an unsupported\r\nversion of FreeBSD is much better than silently doing the wrong thing.\r\n\r\n> Let me know if we should take this discussion out of this issue to\r\n> someplace else?\r\n\r\nOpen an issue at http://code.google.com/p/go/issues .  Thanks.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-06-16 22:34:41.146750",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 8699043: runtime: use UMTX_OP_WAIT_UINT on FreeBSD",
	"created": "2013-04-12 03:31:34.481170",
	"patchsets": [
		1,
		3001,
		12001
	],
	"modified": "2013-06-16 22:34:41.414720",
	"closed": true,
	"issue": 8699043
}