{
	"description": "cmd/5g: introduce componentgen for better registerization.\n\nIt is essentially identical to the version in 6g.",
	"cc": [
		"dave@cheney.net",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Will do. Thank you\r\nOn 18 Oct 2012 08:09, <remyoudompheng@gmail.com> wrote:\r\n\r\n> The bug was that mkvar was ignoring strings and slices (unlike 6g/8g) so\r\n> it wasn't treated as an outvar and they fell into \"set but not used\" and\r\n> discarded.\r\n>\r\n> Can you try again?\r\n>\r\n> http://codereview.appspot.com/**6710043/<http://codereview.appspot.com/6710043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-17 21:14:43.169470",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please test.",
			"disapproval": false,
			"date": "2012-10-16 06:12:27.598390",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/16 06:12:27, remyoudompheng wrote:\n> Please test.\n\ncmd/go\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0xe pc=0x146670]\n\ngoroutine 1 [running]:\nregexp/syntax.Parse(0x1df30c, 0xbb, 0x2d00d4, 0x2, 0x2, ...)\n        /home/dfc/go/src/pkg/regexp/syntax/parse.go:750 +0x168\nregexp.compile(0x1df30c, 0xbb, 0xd4, 0xffffffff, 0x603c4, ...)\n        /home/dfc/go/src/pkg/regexp/regexp.go:134 +0x38\nregexp.Compile(0x1df30c, 0xbb, 0x0, 0xb6efce78)\n        /home/dfc/go/src/pkg/regexp/regexp.go:107 +0x4c\nregexp.MustCompile(0x1df30c, 0xbb, 0x1, 0x1)\n        /home/dfc/go/src/pkg/regexp/regexp.go:195 +0x30\ngo/doc.init()\n        /home/dfc/go/src/pkg/go/doc/synopsis.go:-1866 +0xb0\nmain.init()\n        /home/dfc/go/src/cmd/go/vet.go:37 +0x7c\n\ngoroutine 2 [runnable]:\ncreated by runtime.main\n        /home/dfc/go/src/pkg/runtime/proc.c:224",
			"disapproval": false,
			"date": "2012-10-16 06:49:20.263320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/16 06:49:20, dfc wrote:\n> On 2012/10/16 06:12:27, remyoudompheng wrote:\n> > Please test.\n> \n> cmd/go\n> panic: runtime error: invalid memory address or nil pointer dereference\n> [signal 0xb code=0x1 addr=0xe pc=0x146670]\n> \n> goroutine 1 [running]:\n> regexp/syntax.Parse(0x1df30c, 0xbb, 0x2d00d4, 0x2, 0x2, ...)\n>         /home/dfc/go/src/pkg/regexp/syntax/parse.go:750 +0x168\n> regexp.compile(0x1df30c, 0xbb, 0xd4, 0xffffffff, 0x603c4, ...)\n>         /home/dfc/go/src/pkg/regexp/regexp.go:134 +0x38\n> regexp.Compile(0x1df30c, 0xbb, 0x0, 0xb6efce78)\n>         /home/dfc/go/src/pkg/regexp/regexp.go:107 +0x4c\n> regexp.MustCompile(0x1df30c, 0xbb, 0x1, 0x1)\n>         /home/dfc/go/src/pkg/regexp/regexp.go:195 +0x30\n> go/doc.init()\n>         /home/dfc/go/src/pkg/go/doc/synopsis.go:-1866 +0xb0\n> main.init()\n>         /home/dfc/go/src/cmd/go/vet.go:37 +0x7c\n> \n> goroutine 2 [runnable]:\n> created by runtime.main\n>         /home/dfc/go/src/pkg/runtime/proc.c:224\n\ncomparing componentgen from the previous CL, this stands out as being removed\n\n\n@@ -1502,7 +1501,7 @@\n int\n componentgen(Node *nr, Node *nl)\n {\n-       Node nodl, nodr, tmp;\n+       Node nodl, nodr;\n        int freel, freer;\n \n        freel = 0;\n@@ -1534,12 +1533,6 @@\n                        igen(nr, &nodr, N);\n                        freer = 1;\n                }\n-       } else {\n-               // When zeroing, prepare a register containing zero.\n-               nodconst(&tmp, nl->type, 0);\n-               regalloc(&nodr, types[TUINT], N);\n-               gmove(&tmp, &nodr);\n-               freer = 1;\n        }",
			"disapproval": false,
			"date": "2012-10-16 07:18:16.901950",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems to give different results when compiling with -N (tried running the produced go tool on a friends's Raspberry).\n\nI think I can say the bug is in the optimizer (regopt), but not in the peephole optimizations. I see blocks of code disappearing mysteriously, and it only happens when the componentgen change you mention is used [also this patch uses componentgen in clearfat, which it wasn't doing before]",
			"disapproval": false,
			"date": "2012-10-17 20:23:34.711920",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-17 21:07:57.139690",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The bug was that mkvar was ignoring strings and slices (unlike 6g/8g) so it wasn't treated as an outvar and they fell into \"set but not used\" and discarded.\n\nCan you try again?",
			"disapproval": false,
			"date": "2012-10-17 21:09:01.789240",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nPlease note, the following benchmark has CL 6717043 (fast _div) applied in both old and new cases. This is for two reasons, 1. it's got a LGTM, so will be committed soon, 2. I believe without it, the effects of any improvements to codegen are difficult to observe due to the increase of division operations in the malloc codepath.\n\npando(~/go/test/bench/go1) % ./go1.5749e60d2b6b -test.bench=. > old.txt && ./go1.test -test.bench=. > new.txt && ~/go/misc/benchcmp {old,new}.txt\ntesting: warning: no tests to run\ntesting: warning: no tests to run\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   45597656000  45800415000   +0.44%\nBenchmarkFannkuch11     34541229000  33243561000   -3.76%\nBenchmarkGobDecode        117576600    113871750   -3.15%\nBenchmarkGobEncode         65834340     57223500  -13.08%\nBenchmarkGzip            6355713000   5444794000  -14.33%\nBenchmarkGunzip          1197907000   1063690000  -11.20%\nBenchmarkJSONEncode       799755800    658972200  -17.60%\nBenchmarkJSONDecode      1728577000   1597717000   -7.57%\nBenchmarkMandelbrot200     45700680     45696420   -0.01%\nBenchmarkParse             59507440     57044060   -4.14%\nBenchmarkRevcomp          132467600    128094500   -3.30%\nBenchmarkTemplate        1848328000   1707550000   -7.62%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.53         6.74    1.03x\nBenchmarkGobEncode            11.66        13.41    1.15x\nBenchmarkGzip                  3.05         3.56    1.17x\nBenchmarkGunzip               16.20        18.24    1.13x\nBenchmarkJSONEncode            2.43         2.94    1.21x\nBenchmarkJSONDecode            1.12         1.21    1.08x\nBenchmarkParse                 0.97         1.02    1.05x\nBenchmarkRevcomp              19.19        19.84    1.03x\nBenchmarkTemplate              1.05         1.14    1.09x",
			"disapproval": false,
			"date": "2012-10-18 00:47:07.443740",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-18 06:59:16.161580",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6710043/diff/9001/src/cmd/5g/reg.c\nFile src/cmd/5g/reg.c (right):\n\nhttp://codereview.appspot.com/6710043/diff/9001/src/cmd/5g/reg.c#newcode989\nsrc/cmd/5g/reg.c:989: case TFUNC:\ncomparing to 6g, this looks correct.",
			"disapproval": false,
			"date": "2012-10-18 09:31:00.697690",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\nany opinion on where there is going?",
			"disapproval": false,
			"date": "2012-10-26 06:41:33.817000",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Still LGTM.\r\n\r\nOn Fri, Oct 26, 2012 at 5:41 PM,  <remyoudompheng@gmail.com> wrote:\r\n> ping\r\n> any opinion on where there is going?\r\n>\r\n> http://codereview.appspot.com/6710043/\r\n",
			"disapproval": false,
			"date": "2012-10-26 13:55:04.585450",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll submit this tomorrow unless there are remarks.",
			"disapproval": false,
			"date": "2012-10-27 10:03:34.653190",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8e87cb8dca7d ***\n\ncmd/5g: introduce componentgen for better registerization.\n\nIt is essentially identical to the version in 6g.\n\nR=dave, minux.ma, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6710043",
			"disapproval": false,
			"date": "2012-10-28 19:11:28.518580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Though strange, I just determined that this change is responsible for a test failure of Go on Darwin/ARM.\n\nWithout this change, fixedbugs/bug348.go could get this traceback (I just printed out pc, file, line from bug348.go):\n8488 /var/mobile/go/src/bug348.go 28\n59468 /var/mobile/go/src/pkg/runtime/panic.c 134\n61048 /var/mobile/go/src/pkg/runtime/panic.c 384\n87056 /var/mobile/go/src/pkg/runtime/thread_darwin.c 431\n8428 /var/mobile/go/src/bug348.go 47\n8232 /var/mobile/go/src/bug348.go 17\n\nWith this change, the traceback becomes:\n8472 /var/mobile/go/src/bug348.go 28\n59364 /var/mobile/go/src/pkg/runtime/panic.c 134\n60944 /var/mobile/go/src/pkg/runtime/panic.c 384\n86952 /var/mobile/go/src/pkg/runtime/thread_darwin.c 431\n8412 /var/mobile/go/src/bug348.go 47\n8224 /var/mobile/go/src/bug348.go 15\nBUG: bug348: panic at /var/mobile/go/src/bug348.go:15 in main.f\n\nRemy, do you have any ideas why this change could affect the pc->line number mapping?\nThank you.\n\nThe weird thing is that it doesn't affect Linux/ARM, only Darwin/ARM.\n(The port is here: http://bitbucket.org/minux/goios/, it doesn't make changes to 5g)",
			"disapproval": false,
			"date": "2012-12-18 23:32:52.223890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Are you sync'ed past http://code.google.com/p/go/source/detail?r=0f491e663a44?\r\n",
			"disapproval": false,
			"date": "2012-12-18 23:53:39.756800",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wednesday, December 19, 2012, Russ Cox wrote:\r\n\r\n> Are you sync'ed past\r\n> http://code.google.com/p/go/source/detail?r=0f491e663a44?\r\n>\r\nyes. i just merged default branch of today, noticed the problem,\r\nand backtracked to this cl.\r\n\r\n5g -S shows the line number is correct with this cl, but the only factor\r\nchanged is just 5g,\r\nso i'm pretty confused.\r\n",
			"disapproval": false,
			"date": "2012-12-19 00:04:25.971030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you post the 5g -S output? I don't have a working 5g here.\r\n",
			"disapproval": false,
			"date": "2012-12-19 00:16:50.040770",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wednesday, December 19, 2012, minux wrote:\r\n>\r\n> On Wednesday, December 19, 2012, Russ Cox wrote:\r\n>\r\n>> Are you sync'ed past\r\n>> http://code.google.com/p/go/source/detail?r=0f491e663a44?\r\n>>\r\n> yes. i just merged default branch of today, noticed the problem,\r\n> and backtracked to this cl.\r\n>\r\n> 5g -S shows the line number is correct with this cl, but the only factor\r\n> changed is just 5g,\r\n> so i'm pretty confused.\r\n>\r\nthe pc -> line number conversion code seems to have a off-by-one error\r\nonly on darwin/arm.\r\n\r\nbad.s\r\n--- prog list \"f\" ---\r\n0000 (bug348.go:14) TEXT        f+0(SB),$36-0\r\n0001 (bug348.go:15) MOVW        $0,R0\r\n0002 (bug348.go:17) MOVW        0(R0),R1. // segfault happens here\r\n0003 (bug348.go:17) MOVW        R1,autotmp_0000+-16(SP)\r\n0004 (bug348.go:17) MOVW        4(R0),R1\r\n0005 (bug348.go:17) MOVW        R1,autotmp_0000+-12(SP)\r\n0006 (bug348.go:17) MOVW        $0,R2\r\n0007 (bug348.go:17) MOVW        R2,autotmp_0001+-8(SP)\r\n\r\ngood.s:\r\n--- prog list \"f\" ---\r\n0000 (bug348.go:14) TEXT        f+0(SB),$36-0\r\n0001 (bug348.go:15) MOVW        $0,R2\r\n0002 (bug348.go:17) MOVW        R2,R1\r\n0003 (bug348.go:17) MOVW        $autotmp_0000+-16(SP),R0\r\n0004 (bug348.go:17) MOVW.P      4(R1),R2.  // sigfault happens here\r\n0005 (bug348.go:17) MOVW.P      R2,4(R0)\r\n0006 (bug348.go:17) MOVW.P      4(R1),R2\r\n0007 (bug348.go:17) MOVW.P      R2,4(R0)\r\n\r\ni can confirm the code generated for linux/arm is the same, so this\r\ncl only exposes the error in runtime.\r\nhowever, i don't remember i touched pcln code.....\r\n",
			"disapproval": false,
			"date": "2012-12-19 00:24:52.232140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Normally the return PC for a call leads to the instruction after the\r\ncall, so the traceback code moves backward one instruction, in order\r\nto print the line of the call instead of the line of the code that\r\nfollows the call. A signal like this is made to look like a call\r\nreturning to the signaling instruction, so that if it did get handled\r\nand the signal handler returned, the instruction would be given a\r\nsecond chance to execute. If the traceback code shows the line of the\r\nprevious instruction instead of the line of the actual instruction,\r\nthat would explain the behavior you are seeing.\r\n\r\nruntime/traceback_arm.c says\r\n\r\n                        if(runtime\u00b7showframe(f)) {\r\n                                // Print during crash.\r\n                                //      main(0x1, 0x2, 0x3)\r\n                                //\r\n/home/rsc/go/src/runtime/x.go:23 +0xf\r\n                                tracepc = pc;   // back up to CALL\r\ninstruction for funcline.\r\n                                if(n > 0 && pc > f->entry && !waspanic)\r\n                                        tracepc -= sizeof(uintptr);\r\n\r\nIt sounds like maybe in your case waspanic is 0 here but should be 1.\r\n\r\nwaspanic is set during the previous frame, as waspanic = f->entry ==\r\n(uintptr)runtime\u00b7sigpanic. That's the thread_darwin.c:431 frame have\r\non your stack, but it is strange that there is a bug348.go:47 frame\r\nbetween thread_darwin.c:431 and bug348.go:15/17. Why does the panic\r\nappear to have happened in main.main called from main.f, instead of\r\nthe other way around?\r\n\r\nThat is:\r\n8488 /var/mobile/go/src/bug348.go 28\r\n59468 /var/mobile/go/src/pkg/runtime/panic.c 134\r\n61048 /var/mobile/go/src/pkg/runtime/panic.c 384\r\n87056 /var/mobile/go/src/pkg/runtime/thread_darwin.c 431\r\n8428 /var/mobile/go/src/bug348.go 47 <<<\r\n8232 /var/mobile/go/src/bug348.go 17 <<<\r\n\r\nThe two <<< lines seem backward to me. If you can arrange for them to\r\nend up in the right order then I think everything will start working.\r\nI expect the bug is in runtime.sighandler in your signal_darwin_arm.c.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-19 00:40:14.235790",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thank you for your detailed explanation.\r\n\r\nOn Wednesday, December 19, 2012, Russ Cox wrote:\r\n\r\n> Normally the return PC for a call leads to the instruction after the\r\n> call, so the traceback code moves backward one instruction, in order\r\n> to print the line of the call instead of the line of the code that\r\n> follows the call. A signal like this is made to look like a call\r\n> returning to the signaling instruction, so that if it did get handled\r\n> and the signal handler returned, the instruction would be given a\r\n> second chance to execute. If the traceback code shows the line of the\r\n> previous instruction instead of the line of the actual instruction,\r\n> that would explain the behavior you are seeing.\r\n>\r\n> runtime/traceback_arm.c says\r\n>\r\n>                         if(runtime\u00b7showframe(f)) {\r\n>                                 // Print during crash.\r\n>                                 //      main(0x1, 0x2, 0x3)\r\n>                                 //\r\n> /home/rsc/go/src/runtime/x.go:23 +0xf\r\n>                                 tracepc = pc;   // back up to CALL\r\n> instruction for funcline.\r\n>                                 if(n > 0 && pc > f->entry && !waspanic)\r\n>                                         tracepc -= sizeof(uintptr);\r\n>\r\n> It sounds like maybe in your case waspanic is 0 here but should be 1.\r\n>\r\n> waspanic is set during the previous frame, as waspanic = f->entry ==\r\n> (uintptr)runtime\u00b7sigpanic. That's the thread_darwin.c:431 frame have\r\n> on your stack, but it is strange that there is a bug348.go:47 frame\r\n> between thread_darwin.c:431 and bug348.go:15/17. Why does the panic\r\n> appear to have happened in main.main called from main.f, instead of\r\n> the other way around?\r\n>\r\n> That is:\r\n> 8488 /var/mobile/go/src/bug348.go 28\r\n> 59468 /var/mobile/go/src/pkg/runtime/panic.c 134\r\n> 61048 /var/mobile/go/src/pkg/runtime/panic.c 384\r\n> 87056 /var/mobile/go/src/pkg/runtime/thread_darwin.c 431\r\n> 8428 /var/mobile/go/src/bug348.go 47 <<<\r\n> 8232 /var/mobile/go/src/bug348.go 17 <<<\r\n>\r\n> The two <<< lines seem backward to me. If you can arrange for them to\r\n> end up in the right order then I think everything will start working.\r\n> I expect the bug is in runtime.sighandler in your signal_darwin_arm.c.\r\n\r\ni figure out the stupid error i made in the signal handler.\r\nthank you russ for pointing me directly to the error.\r\nthank you remy for exposing the error.\r\n\r\ni will make a test to catch this kind of error in the future.\r\n",
			"disapproval": false,
			"date": "2012-12-19 01:18:54.851180",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6710043: cmd/5g: introduce componentgen for better registerization.",
	"created": "2012-10-16 06:12:03.422040",
	"patchsets": [
		1,
		2001,
		9001,
		21001
	],
	"modified": "2012-12-18 23:32:52.335740",
	"closed": true,
	"issue": 6710043
}