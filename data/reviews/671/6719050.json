{
	"description": "go.talks/present: restructure socket.go to avoid races",
	"cc": [
		"dvyukov@google.com",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2012-10-16 22:03:07.363320",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for or at least TBR= dvyukov",
			"disapproval": false,
			"date": "2012-10-17 03:00:46.313150",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=965aebfbb749&repo=talks ***\n\ngo.talks/present: restructure socket.go to avoid races\n\nR=dvyukov, r\nCC=golang-dev\nhttp://codereview.appspot.com/6719050",
			"disapproval": false,
			"date": "2012-10-17 04:51:39.428880",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6719050/diff/1/present/socket.go\nFile present/socket.go (right):\n\nhttp://codereview.appspot.com/6719050/diff/1/present/socket.go#newcode167\npresent/socket.go:167: // end sends the an end message to the client with the provided process id and\nunparseable, even aside from the extraneous 'the'\n\nhttp://codereview.appspot.com/6719050/diff/1/present/socket.go#newcode197\npresent/socket.go:197: // standard error to the Process' stdout and stderr fields.\ncreate genitives by adding apostrophe-s, Process's\n(say it out loud to understand why)",
			"disapproval": false,
			"date": "2012-10-16 22:07:54.825080",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The principal change here is that Process.run is now split into Run and Wait. Run blocks until the program has been compiled and exec'd. Wait blocks until the program's process has ended. Any Kill calls also block until Wait returns.\n\nAs far as I can see, this should remove any race conditions. The trade-off is that you can't compile multiple programs simultaneously, which shouldn't affect typical operation.\n\nhttps://codereview.appspot.com/6719050/diff/1/present/socket.go\nFile present/socket.go (right):\n\nhttps://codereview.appspot.com/6719050/diff/1/present/socket.go#newcode167\npresent/socket.go:167: // end sends the an end message to the client with the provided process id and\nOn 2012/10/16 22:07:55, r wrote:\n> unparseable, even aside from the extraneous 'the'\n\nDone.\n\nhttps://codereview.appspot.com/6719050/diff/1/present/socket.go#newcode197\npresent/socket.go:197: // standard error to the Process' stdout and stderr fields.\nOn 2012/10/16 22:07:55, r wrote:\n> create genitives by adding apostrophe-s, Process's\n> (say it out loud to understand why)\n\nDone.",
			"disapproval": false,
			"date": "2012-10-16 22:16:16.311860",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6719050/diff/6001/present/socket.go\nFile present/socket.go (right):\n\nhttps://codereview.appspot.com/6719050/diff/6001/present/socket.go#newcode135\npresent/socket.go:135: c.Lock()\nDo we need this mutex?\n\nhttps://codereview.appspot.com/6719050/diff/6001/present/socket.go#newcode146\npresent/socket.go:146: c.end(id, err)\nFor some reason this code is extremely difficult to reason about. It contains a mix of channels, continuations and mutexes.\nSo now the only async part is the Wait(). Can we make it merely wait for cmd completion and send notification back? Pass cmd explicitly to it, so that we do not need mutexes at all (both c and p, main parts of Run and Kill runs in a single goroutine). And move c.end() to the main goroutine as well, because now I guess it can mix up output of the next command.\nIt will make the logic simpler to follow with less possible interleavings.\n\nhttps://codereview.appspot.com/6719050/diff/6001/present/socket.go#newcode152\npresent/socket.go:152: c.Lock()\nDo we need this mutex?",
			"disapproval": false,
			"date": "2012-10-17 03:33:05.439590",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6719050/diff/6001/present/socket.go\nFile present/socket.go (right):\n\nhttps://codereview.appspot.com/6719050/diff/6001/present/socket.go#newcode135\npresent/socket.go:135: c.Lock()\nOn 2012/10/17 03:33:05, dvyukov wrote:\n> Do we need this mutex?\n\nNo.\n\nhttps://codereview.appspot.com/6719050/diff/6001/present/socket.go#newcode146\npresent/socket.go:146: c.end(id, err)\nOn 2012/10/17 03:33:05, dvyukov wrote:\n> For some reason this code is extremely difficult to reason about. It contains a\n> mix of channels, continuations and mutexes.\n> So now the only async part is the Wait(). Can we make it merely wait for cmd\n> completion and send notification back? Pass cmd explicitly to it, so that we do\n> not need mutexes at all (both c and p, main parts of Run and Kill runs in a\n> single goroutine). And move c.end() to the main goroutine as well, because now I\n> guess it can mix up output of the next command.\n> It will make the logic simpler to follow with less possible interleavings.\n\nOK. I have updated the code to use no mutexes. The Client has a much simpler job now - it merely tracks *Process values by id - while the Process takes care of sending the \"end\" message and waiting.",
			"disapproval": false,
			"date": "2012-10-17 04:12:08.482700",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM again\n\nhttps://codereview.appspot.com/6719050/diff/8001/present/socket.go\nFile present/socket.go (right):\n\nhttps://codereview.appspot.com/6719050/diff/8001/present/socket.go#newcode141\npresent/socket.go:141: done chan struct{} // closed when run complete\ncompletes\n\nhttps://codereview.appspot.com/6719050/diff/8001/present/socket.go#newcode172\npresent/socket.go:172: // and returns the associated *exec.Cmd.\nstart doesn't send anything directly",
			"disapproval": false,
			"date": "2012-10-17 04:22:09.915820",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dvyukov@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6719050/diff/8001/present/socket.go\nFile present/socket.go (right):\n\nhttps://codereview.appspot.com/6719050/diff/8001/present/socket.go#newcode141\npresent/socket.go:141: done chan struct{} // closed when run complete\nOn 2012/10/17 04:22:10, r wrote:\n> completes\n\nDone.\n\nhttps://codereview.appspot.com/6719050/diff/8001/present/socket.go#newcode172\npresent/socket.go:172: // and returns the associated *exec.Cmd.\nOn 2012/10/17 04:22:10, r wrote:\n> start doesn't send anything directly\n\nno, but the commands it starts do.",
			"disapproval": false,
			"date": "2012-10-17 04:39:12.926100",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6719050: go.talks/present: restructure socket.go to avoid races",
	"created": "2012-10-16 22:03:01.472670",
	"patchsets": [
		1,
		6001,
		8001,
		5003,
		12001,
		7004,
		7005
	],
	"modified": "2012-10-17 04:51:41.271040",
	"closed": true,
	"issue": 6719050
}