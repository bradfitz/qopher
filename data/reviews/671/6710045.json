{
	"description": "go spec: constant divisors must not be zero\n\nBoth gc and gccgo always checked this for constant\nexpressions but the spec only mentions run-time\nexceptions.\n\nThis CL also requires that constant divisors\nmust not be zero in non-constant integer expressions:\nThis is consistent with the spirit of the most\nrecent changes and it is consistent with constant\nexpressions. We don't want to specify the effect for\nnon-integer expressions (f/0.0 where f is a float or\ncomplex number) because there the result f/g is not\nfurther specified if a non-constant g is 0.",
	"cc": [
		"r@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"andybalholm@gmail.com",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-17 23:05:17.220740",
			"approval": true
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Oct 17, 2012 at 2:08 PM,  <andybalholm@gmail.com> wrote:\r\n> Maybe the spec should just give implementations the freedom to reject\r\n> any program that contains a statement that would be guaranteed to\r\n> produce a run-time error if executed.\r\n>\r\n> Then we wouldn't need to change the spec every time we add another\r\n> compile-time check.\r\n\r\nIt's tempting, but there is a countervailing desire to make it\r\npossible to compile Go code that will cause a runtime panic if we know\r\nthat it won't be executed.  For example, such cases can arise because\r\nint is different sizes on different platforms.  It may be nice to be\r\nable to write code like\r\n    var a []byte\r\n    if unsafe.Sizeof(int) > 4 {\r\n        a = make([]byte, 1 << 40)\r\n    } else {\r\n        a = make([]byte, 1 << 24)\r\n    }\r\nExecuting make([]byte, 1 << 40) will surely cause a runtime panic on a\r\nsystem with 32 bit ints.  Is that reason enough to refuse to compile\r\nthe avoid code?\r\n",
			"disapproval": false,
			"date": "2012-10-17 21:28:42.004460",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-17 20:29:52.185130",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe the spec should just give implementations the freedom to reject any program that contains a statement that would be guaranteed to produce a run-time error if executed.\n\nThen we wouldn't need to change the spec every time we add another compile-time check.",
			"disapproval": false,
			"date": "2012-10-17 21:08:05.109170",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html#newcode3701\ndoc/go_spec.html:3701: 3.14 / 1.0   // illegal: division by zero\ns/1.0/0.0/",
			"disapproval": false,
			"date": "2012-10-17 21:09:30.948250",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Oct 17, 2012, at 2:28 PM, Ian Lance Taylor wrote:\r\n> It's tempting, but there is a countervailing desire to make it\r\n> possible to compile Go code that will cause a runtime panic if we know\r\n> that it won't be executed.  For example, such cases can arise because\r\n> int is different sizes on different platforms.  It may be nice to be\r\n> able to write code like\r\n>    var a []byte\r\n>    if unsafe.Sizeof(int) > 4 {\r\n>        a = make([]byte, 1 << 40)\r\n>    } else {\r\n>        a = make([]byte, 1 << 24)\r\n>    }\r\n> Executing make([]byte, 1 << 40) will surely cause a runtime panic on a\r\n> system with 32 bit ints.  Is that reason enough to refuse to compile\r\n> the avoid code?\r\n\r\nIt would probably be better to use constants defined in files with build tags in this particular case, but I see what you mean.\r\n\r\nI wasn't really advocating that every runtime panic be converted into a compile-time error, but that the spec could leave it open for compilers to catch obvious errors at compile time even though they're only guaranteed to be caught at run time.",
			"disapproval": false,
			"date": "2012-10-17 22:11:08.721090",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html#newcode3005\ndoc/go_spec.html:3005: If the divisor is zero at run-time, a <a href=\"#Run_time_panics\">run-time panic</a> occurs.\ns/run-time/run time/ it's not an adjective\n\nhttp://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html#newcode3701\ndoc/go_spec.html:3701: 3.14 / 1.0   // illegal: division by zero\nthis is great.",
			"disapproval": false,
			"date": "2012-10-18 00:15:11.519230",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n- gri\n\nhttps://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html#newcode3005\ndoc/go_spec.html:3005: If the divisor is zero at run-time, a <a href=\"#Run_time_panics\">run-time panic</a> occurs.\nOn 2012/10/18 00:15:11, r wrote:\n> s/run-time/run time/ it's not an adjective\n\nDone.\n\nhttps://codereview.appspot.com/6710045/diff/5001/doc/go_spec.html#newcode3701\ndoc/go_spec.html:3701: 3.14 / 1.0   // illegal: division by zero\nOn 2012/10/18 00:15:11, r wrote:\n> this is great.\n\nDone.",
			"disapproval": false,
			"date": "2012-10-18 16:09:53.819920",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ian already made the point here - we want to guarantee that a Go program\r\nthat is valid according to the spec compiles everywhere.\r\n\r\nAlso, this and some of the most recent spec changes simply state what the\r\ncompilers have been doing all along - these are not new compiler checks\r\nthat required the spec to change. Rather, the spec was not accurate here.\r\n\r\n- gri\r\n\r\n\r\nOn Wed, Oct 17, 2012 at 2:08 PM, <andybalholm@gmail.com> wrote:\r\n\r\n> Maybe the spec should just give implementations the freedom to reject\r\n> any program that contains a statement that would be guaranteed to\r\n> produce a run-time error if executed.\r\n>\r\n> Then we wouldn't need to change the spec every time we add another\r\n> compile-time check.\r\n>\r\n> https://codereview.appspot.**com/6710045/<https://codereview.appspot.com/6710045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-18 16:18:27.642110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6710045/diff/18001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6710045/diff/18001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of October 18, 2012\",\ncollides with other CL",
			"disapproval": false,
			"date": "2012-10-19 03:28:01.082070",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-19 17:10:35.085940",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-18 17:50:49.848790",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ababb5c0cc6b ***\n\ngo spec: constant divisors must not be zero\n\nBoth gc and gccgo always checked this for constant\nexpressions but the spec only mentions run-time\nexceptions.\n\nThis CL also requires that constant divisors\nmust not be zero in non-constant integer expressions:\nThis is consistent with the spirit of the most\nrecent changes and it is consistent with constant\nexpressions. We don't want to specify the effect for\nnon-integer expressions (f/0.0 where f is a float or\ncomplex number) because there the result f/g is not\nfurther specified if a non-constant g is 0.\n\nR=r, rsc, iant, ken, andybalholm, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6710045",
			"disapproval": false,
			"date": "2012-10-19 17:12:14.973400",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"andybalholm@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am worried about the \"also\" here, which means that\n\nvar x int\ny := x/0\n\nwas a valid program in Go 1 but will not be in Go 1.1.\nThis seems like a violation of the backwards compatibility promise.",
			"disapproval": false,
			"date": "2012-12-22 15:10:45.162550",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Understood. It seems a very borderline case that might be considered a\r\nspec bug, and realistically, this is not going to affect a lot of\r\nprograms if any.\r\n\r\nBut we can of course undo this if necessary (though I'd leave it myself).\r\n- gri\r\n\r\nOn Sat, Dec 22, 2012 at 7:10 AM,  <rsc@golang.org> wrote:\r\n> I am worried about the \"also\" here, which means that\r\n>\r\n> var x int\r\n> y := x/0\r\n>\r\n> was a valid program in Go 1 but will not be in Go 1.1.\r\n> This seems like a violation of the backwards compatibility promise.\r\n>\r\n>\r\n> https://codereview.appspot.com/6710045/\r\n",
			"disapproval": false,
			"date": "2012-12-22 18:02:54.463450",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6710045: go spec: constant divisors must not be zero",
	"created": "2012-10-17 20:28:35.698730",
	"patchsets": [
		1,
		2001,
		5001,
		14001,
		18001,
		16002,
		16003
	],
	"modified": "2012-12-22 15:10:45.414730",
	"closed": true,
	"issue": 6710045
}