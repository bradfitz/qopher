{
	"description": "go-tour: Adding new slices to the tour.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adg@golang.org",
		"kamil.kisiel@gmail.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7304056/diff/3002/tour.article\nFile tour.article (right):\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode298\ntour.article:298: * Arrays\nI don't think this slide belongs in the tour at all. They are rarely used by most Go programmers. I could see an argument for discussing them as a preamble to help the programmer understand slices, but that's not how they're presented here.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode304\ntour.article:304: a := make([4]int)\nMake doesn't work for arrays.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode310\ntour.article:310: Both lines of code above create a new\ncreate a new what?\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode339\ntour.article:339: Arrays can be sliced, and slices can be re-sliced, creating a new slice value that points to the same array.\nThis is way too pithy a connection between arrays and slices.\n\nWe link to the slices article on this slide; I think that's enough discussion of arrays and slices. The tour doesn't need to be a comprehensive tutorial of all aspects of the language. It should just get programmers started writing code.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode384\ntour.article:384: The variadic function `append` appends a list of elements of type `T` to a slice of type `[]T`.\nyou don't mention allocation at all. append is more subtle than this. it returns a potentially new slice.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode386\ntour.article:386: For a given type T, append would look like this:\nDelete this line entirely.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode390\ntour.article:390: Appending elements to a nil slice works normally.\nnormally? I think this will be easier to express when you have explained append more thoroughly up front.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode398\ntour.article:398: * Copying slices\nThis should be about copy(), not append(). You can mention that append may be used for copying.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode412\ntour.article:412: orig := []int{1, 2, 3, 4}\nOn 2013/02/06 21:21:14, kisielk wrote:\n> Wouldn't \n> \n> dupe := make([]int, len(orig))\n> copy(dupe, orig)\n> \n> be the more typical way to do this?\n\nIndeed.\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode502\ntour.article:502: When iterating over a map, `range` provides two values\n:\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode505\ntour.article:505: - and a copy of the value for that key.\n\"a copy\" is misleading. It's just the value. The pass-by-value semantics of the language are a given.",
			"disapproval": false,
			"date": "2013-02-06 23:37:54.026100",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 7 February 2013 06:40, <campoy@golang.org> wrote:\r\n\r\n> go-tour: Adding new slices to the tour.\r\n\r\n\r\nPlease update the CL description:\r\n\r\n  go-tour: add new slides\r\n\r\n(no capital A, no period, imperative tense)\r\n",
			"disapproval": false,
			"date": "2013-02-06 22:53:34.812820",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go-tour/",
			"disapproval": false,
			"date": "2013-02-06 19:40:31.501860",
			"approval": false
		},
		{
			"sender": "kamil.kisiel@gmail.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"kamil.kisiel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7304056/diff/3002/tour.article\nFile tour.article (right):\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode405\ntour.article:405: copy := orig\nMaybe give this a different name as not to confuse with the built-in copy()\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode412\ntour.article:412: orig := []int{1, 2, 3, 4}\nWouldn't \n\ndupe := make([]int, len(orig))\ncopy(dupe, orig)\n\nbe the more typical way to do this?\n\nhttps://codereview.appspot.com/7304056/diff/3002/tour.article#newcode415\ntour.article:415: copy := 0\ncopy[0] = 0 ?",
			"disapproval": false,
			"date": "2013-02-06 21:21:14.097390",
			"approval": false
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 7304056: go-tour: Adding new slices to the tour.",
	"created": "2013-02-06 19:37:37.484970",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		3002,
		11001
	],
	"modified": "2013-02-06 21:21:14.097390",
	"closed": true,
	"issue": 7304056
}