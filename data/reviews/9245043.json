{
	"description": "runtime: reduce max arena size on windows/amd64 to 32 GiB\nUpdate issue 5236\nUpdate issue 5402\nThis CL reduces gofmt's committed memory from 545864 KiB to 139568 KiB.\nNote: Go 1.0.3 uses about 70MiB.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"iant@golang.org",
		"nightlyone@googlemail.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-06 22:19:11.249880",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "for the record,\nthe Go 1.0.3 max arena size is 16GiB.\n\nquote from doc/go1.1.html:\n\"On 64-bit architectures, the maximum heap size has been enlarged substantially, from a few gigabytes to several tens of gigabytes. (The exact details depend on the system and may change.)\"\n\nchanging max arena size to 32 GiB still fits the \"several tens of gigabytes\" description.",
			"disapproval": false,
			"date": "2013-05-06 22:21:24.716330",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this reduce the maximum size of the heap on Windows?",
			"disapproval": false,
			"date": "2013-05-06 22:22:37.272360",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "see\r\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa366778(v=vs.85).aspx\r\nfor maximum supported memory of windows.\r\n\r\n32 GiB seems reasonable.\r\n",
			"disapproval": false,
			"date": "2013-05-06 22:23:05.961850",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 7, 2013 at 6:22 AM, <r@golang.org> wrote:\r\n\r\n> Does this reduce the maximum size of the heap on Windows?\r\n>\r\nyes, from 128 GiB to 32 GiB.\r\n",
			"disapproval": false,
			"date": "2013-05-06 22:23:39.308990",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6f1ce1c15224 ***\n\nruntime: reduce max arena size on windows/amd64 to 32 GiB\nUpdate issue 5236\nUpdate issue 5402\nThis CL reduces gofmt's committed memory from 545864 KiB to 139568 KiB.\nNote: Go 1.0.3 uses about 70MiB.\n\nR=golang-dev, r, iant, nightlyone\nCC=golang-dev\nhttps://codereview.appspot.com/9245043\n\nhttps://codereview.appspot.com/9245043/diff/5001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/9245043/diff/5001/src/pkg/runtime/malloc.h#newcode118\nsrc/pkg/runtime/malloc.h:118: // On 64-bit, we limit the arena to 128GB, or 37 bits.\nOn 2013/05/06 22:43:20, ioe wrote:\n> On 64-bit, we limit the arena to 128GB, or 37 bits.\n> On Windows 64-bit we limit the arena to 32GB or 35 bits.\nThank you. Done.\n\nhttps://codereview.appspot.com/9245043/diff/5001/src/pkg/runtime/malloc.h#newcode122\nsrc/pkg/runtime/malloc.h:122: // Windows count memory used by page table into committed memory\nOn 2013/05/06 22:40:28, iant wrote:\n> s/count/counts/\nFixed.",
			"disapproval": false,
			"date": "2013-05-06 22:53:21.119920",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks.\n\nhttps://codereview.appspot.com/9245043/diff/5001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/9245043/diff/5001/src/pkg/runtime/malloc.h#newcode122\nsrc/pkg/runtime/malloc.h:122: // Windows count memory used by page table into committed memory\ns/count/counts/",
			"disapproval": false,
			"date": "2013-05-06 22:40:28.780580",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-06 22:41:30.342540",
			"approval": true
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "small comment nit.\n\nhttps://codereview.appspot.com/9245043/diff/5001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/9245043/diff/5001/src/pkg/runtime/malloc.h#newcode118\nsrc/pkg/runtime/malloc.h:118: // On 64-bit, we limit the arena to 128GB, or 37 bits.\nOn 64-bit, we limit the arena to 128GB, or 37 bits.\nOn Windows 64-bit we limit the arena to 32GB or 35 bits.",
			"disapproval": false,
			"date": "2013-05-06 22:43:20.552410",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you.\n\nI don't use 64-bit windows myself, so I didn't notice the problem. But I do remember increasing swap file size on our windows/amd64 builder twice recently. I couldn't find the reason for the failure then. I know now.\n\nAlso, I suspect, having large blocks of committed memory that is not read or written to doesn't affect performance as such, but it would fail new memory allocations (OS wide) once limits (physical memory + swap size) are reached.\n\nEven after this change, memory usage is too high. This program\n\npackage main\n\nimport \"time\"\n\nfunc main () {\n\ttime.Sleep ( 1 * time.Minute )\n}\n\nuses about 150MB of memory. I compared it with other windows programs on my system - they are 20MB - 50MB. Still it is better then before.\n\nAlex",
			"disapproval": false,
			"date": "2013-05-07 01:58:38.593070",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 7, 2013 at 9:58 AM, <alex.brainman@gmail.com> wrote:\r\n\r\n> Also, I suspect, having large blocks of committed memory that is not\r\n> read or written to doesn't affect performance as such, but it would fail\r\n> new memory allocations (OS wide) once limits (physical memory + swap\r\n> size) are reached.\r\n>\r\nright. that's why we fix this before Go 1.1.\r\nAs explained in another thread, for a system with 4 GB memory (physical +\r\nswap), before this change, one cannot start more than 8 Go program at\r\nthe same time, no matter how small the program is, which is ridiculous as\r\nthe system have plenty of physical RAM to actually run those programs.\r\n\r\n>\r\n> Even after this change, memory usage is too high. This program\r\n>\r\n> package main\r\n>\r\n> import \"time\"\r\n>\r\n> func main () {\r\n>         time.Sleep ( 1 * time.Minute )\r\n> }\r\n>\r\n> uses about 150MB of memory. I compared it with other windows programs on\r\n> my system - they are 20MB - 50MB. Still it is better then before.\r\n>\r\nit's even suggested on the issue tracker that we reduce the limit to 8GiB or\r\neven less, i'm fine with that but that will contradict our Go 1.1 release\r\nnote\r\n(which states that heap size is tens of gigabytes).\r\n",
			"disapproval": false,
			"date": "2013-05-07 02:11:43.362550",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The stopgap will do for now. In the longer term we need a better\r\nanswer that doesn't involve tuning an arbitrary constant.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-07 02:17:19.881080",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/07 02:17:19, r wrote:\n> The stopgap will do for now. In the longer term we need a better\n> answer that doesn't involve tuning an arbitrary constant.\n> \n\nMy sentiment exactly.\n\nAlex",
			"disapproval": false,
			"date": "2013-05-07 02:25:17.286880",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 9245043: runtime: reduce max arena size on windows/amd64 to 32 GiB",
	"created": "2013-05-06 22:16:40.771850",
	"patchsets": [
		1,
		2001,
		5001,
		17001
	],
	"modified": "2013-05-07 02:25:17.588250",
	"closed": true,
	"issue": 9245043
}