{
	"description": "crypto/hmac: add Equal function.\n\nIt was suggested that it's too easy to use crypto/hmac insecurely and\nI think that has some merit. This change adds a Equal function to\nmake it obvious that MAC values should be compared in constant time.",
	"cc": [
		"rsc@golang.org",
		"max@mxcrypt.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6632044/diff/2002/src/pkg/crypto/hmac/hmac.go\nFile src/pkg/crypto/hmac/hmac.go (right):\n\nhttps://codereview.appspot.com/6632044/diff/2002/src/pkg/crypto/hmac/hmac.go#newcode10\nsrc/pkg/crypto/hmac/hmac.go:10: Receivers should be careful to use Verify to compare MACs in order to avoid\nOn 2012/10/09 15:43:28, rsc wrote:\n> new paragraph here (insert blank line above this one)\n\nDone.\n\nhttps://codereview.appspot.com/6632044/diff/2002/src/pkg/crypto/hmac/hmac.go#newcode95\nsrc/pkg/crypto/hmac/hmac.go:95: // Verify compares two MACs for equality without leaking timing information.\nOn 2012/10/09 15:43:28, rsc wrote:\n> I'd prefer to use a name that is more clearly boolean. Also the variables could\n> be named to make clearer that the arguments are the MACs.\n> \n> func Equal(mac1, mac2 []byte) bool \n> ?\n\nYes, that's clearly better. Thanks.\n \n> func Sign(h func() hash.Hash, key, msg []byte) (mac []byte) \n> func Verify(h func() hash.Hash, key, msg, mac []byte) error\n\nThe problem is that it's very common (almost required) to hash in additional information to the HMAC. If the interface only supports passing in a single slice, people will either work around it or they'll have to alloc and copy a new slice.",
			"disapproval": false,
			"date": "2012-10-09 17:15:23.805550",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-08 18:31:00.623940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Even though it's trivial, a test or two would be nice.\n\nThe deps_test changes are fine.\n\nhttps://codereview.appspot.com/6632044/diff/2002/src/pkg/crypto/hmac/hmac.go\nFile src/pkg/crypto/hmac/hmac.go (right):\n\nhttps://codereview.appspot.com/6632044/diff/2002/src/pkg/crypto/hmac/hmac.go#newcode10\nsrc/pkg/crypto/hmac/hmac.go:10: Receivers should be careful to use Verify to compare MACs in order to avoid\nnew paragraph here (insert blank line above this one)\n\nhttps://codereview.appspot.com/6632044/diff/2002/src/pkg/crypto/hmac/hmac.go#newcode95\nsrc/pkg/crypto/hmac/hmac.go:95: // Verify compares two MACs for equality without leaking timing information.\nI'd prefer to use a name that is more clearly boolean. Also the variables could be named to make clearer that the arguments are the MACs.\n\nfunc Equal(mac1, mac2 []byte) bool \n?\n\nOn a related note, I was expecting Verify to be more of a helper. If you want to make it dead simple to use correctly, I wonder if you should add:\n\nfunc Sign(h func() hash.Hash, key, msg []byte) (mac []byte) \nfunc Verify(h func() hash.Hash, key, msg, mac []byte) error",
			"disapproval": false,
			"date": "2012-10-09 15:43:28.075910",
			"approval": false
		},
		{
			"sender": "max@mxcrypt.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 9, 2012 at 1:15 PM,  <agl@golang.org> wrote:\r\n>> func Sign(h func() hash.Hash, key, msg []byte) (mac []byte)\r\n>> func Verify(h func() hash.Hash, key, msg, mac []byte) error\r\n>\r\n>\r\n> The problem is that it's very common (almost required) to hash in\r\n> additional information to the HMAC. If the interface only supports\r\n> passing in a single slice, people will either work around it or they'll\r\n> have to alloc and copy a new slice.\r\n\r\nI'm currently working on a project that relies on the HMAC functions.\r\nI have a read-verify-read-verify-... loop, which is further\r\ncomplicated by the fact that certain HMAC comparisons are truncated to\r\nsome number of most significant bytes. I think a single set of signing\r\nand verification functions is never going to fit all use cases, but a\r\nreminder that the comparison needs to be done in constant time is very\r\nuseful.\r\n\r\nIf you want a function that does more than a simple comparison of two\r\nbyte slices, I would do something like this (what I use in my code):\r\n\r\n// Verify compares the HMAC tag in b with the current hash value\r\n// returned by h, truncated to t bytes. If len(b) > t, all preceding\r\n// bytes are written to h before the comparison. h.Size() is used\r\n// for t if t <= 0.\r\nfunc Verify(b []byte, t int, h hash.Hash)\r\n\r\nYou can obviously remove t if you think that complicates the interface\r\nbeyond what is acceptable in the standard library, but truncation is a\r\nnormal part of HMAC operations (RFC 2104 section 5).\r\n",
			"disapproval": false,
			"date": "2012-10-09 18:16:37.046390",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 9, 2012 at 2:16 PM, Maxim Khitrov <max@mxcrypt.com> wrote:\r\n> // Verify compares the HMAC tag in b with the current hash value\r\n> // returned by h, truncated to t bytes. If len(b) > t, all preceding\r\n> // bytes are written to h before the comparison. h.Size() is used\r\n> // for t if t <= 0.\r\n> func Verify(b []byte, t int, h hash.Hash)\r\n>\r\n> You can obviously remove t if you think that complicates the interface\r\n> beyond what is acceptable in the standard library, but truncation is a\r\n> normal part of HMAC operations (RFC 2104 section 5).\r\n\r\nI quite like that too, but I worry that it precludes avoiding the\r\nallocation each time when calling Sum. Without this function, users\r\nwould are verifying many MACs can reuse storage. But, since\r\nescape-analysis isn't going to work through the interface, I think\r\nthis would have to allocate every time.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-10-09 21:01:12.669690",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIt's fine to leave Sign and Verify out.",
			"disapproval": false,
			"date": "2012-10-09 21:05:01.929950",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=18dffd0c07b2 ***\n\ncrypto/hmac: add Equal function.\n\nIt was suggested that it's too easy to use crypto/hmac insecurely and\nI think that has some merit. This change adds a Equal function to\nmake it obvious that MAC values should be compared in constant time.\n\nR=rsc, max\nCC=golang-dev\nhttp://codereview.appspot.com/6632044",
			"disapproval": false,
			"date": "2012-10-11 19:28:23.819280",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 6632044: crypto/hmac: add Verify function.",
	"created": "2012-10-08 18:29:44.015210",
	"patchsets": [
		1,
		2001,
		2002,
		8001,
		2005,
		13001,
		16001
	],
	"modified": "2012-10-11 19:28:24.940550",
	"closed": true,
	"issue": 6632044
}