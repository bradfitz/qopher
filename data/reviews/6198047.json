{
	"description": "    misc/emacs: Use patch output of gofmt instead of replacing the buffer.\n\nThis uses the patch output of gofmt (-d option) and applies each\nchunk to the buffer, instead of replacing the whole buffer.  The\nmain advantage is that the undo history is kept across gofmt'ings,\nso it can really be used as a before-save-hook.",
	"cc": [
		"sameer@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"sameer@golang.org"
	],
	"messages": [
		{
			"sender": "jmeurin@google.com",
			"recipients": [
				"jmeurin@google.com",
				"sameer@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.",
			"disapproval": false,
			"date": "2012-05-24 20:32:39.924727",
			"approval": false
		},
		{
			"sender": "jmeurin@google.com",
			"recipients": [
				"jmeurin@google.com",
				"sameer@google.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello sameer@google.com, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-05-29 22:10:51.185960",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"jmeurin@google.com",
				"sameer@google.com",
				"sameer@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this mean that doing C-_ after save or M-x gofmt will undo the gofmt, hunk-by-hunk?  Or is the entire gofmt an atomic unit w.r.t. undo?  I'd prefer the latter.",
			"disapproval": false,
			"date": "2012-05-24 20:41:38.448767",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"jmeurin@google.com",
				"sameer@google.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6c2e9ed1f714 ***\n\n    misc/emacs: Use patch output of gofmt instead of replacing the buffer.\n\nThis uses the patch output of gofmt (-d option) and applies each\nchunk to the buffer, instead of replacing the whole buffer.  The\nmain advantage is that the undo history is kept across gofmt'ings,\nso it can really be used as a before-save-hook.\n\nR=sameer, sameer\nCC=golang-dev\nhttp://codereview.appspot.com/6198047\n\nCommitter: Sameer Ajmani <sameer@golang.org>",
			"disapproval": false,
			"date": "2012-05-30 18:19:28.205939",
			"approval": false
		},
		{
			"sender": "jmeurin@google.com",
			"recipients": [
				"jmeurin@google.com",
				"sameer@google.com",
				"sameer@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/24 20:41:38, Sameer Ajmani wrote:\n> Does this mean that doing C-_ after save or M-x gofmt will undo the gofmt,\n> hunk-by-hunk?  Or is the entire gofmt an atomic unit w.r.t. undo?  I'd prefer\n> the latter.\n\nThe gofmt is atomic w.r.t undo.\n\nJean-Marc",
			"disapproval": false,
			"date": "2012-05-29 18:33:20.446264",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"jmeurin@google.com",
				"sameer@google.com",
				"sameer@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/29 18:33:20, jme wrote:\n> On 2012/05/24 20:41:38, Sameer Ajmani wrote:\n> > Does this mean that doing C-_ after save or M-x gofmt will undo the gofmt,\n> > hunk-by-hunk?  Or is the entire gofmt an atomic unit w.r.t. undo?  I'd prefer\n> > the latter.\n> \n> The gofmt is atomic w.r.t undo.\n> \n> Jean-Marc\n\nOk, I'm submitting a few other go-mode CLs soon; once those are in, I'll ping back for an updated patch set for this CL (since this patch set touches a lot of code, it currently has a conflict).",
			"disapproval": false,
			"date": "2012-05-29 19:04:41.320715",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The smaller cls are in, can you upload a fresh patch?\r\nOn May 29, 2012 3:04 PM, <sameer@golang.org> wrote:\r\n\r\n> On 2012/05/29 18:33:20, jme wrote:\r\n>\r\n>> On 2012/05/24 20:41:38, Sameer Ajmani wrote:\r\n>> > Does this mean that doing C-_ after save or M-x gofmt will undo the\r\n>>\r\n> gofmt,\r\n>\r\n>> > hunk-by-hunk?  Or is the entire gofmt an atomic unit w.r.t. undo?\r\n>>\r\n> I'd prefer\r\n>\r\n>> > the latter.\r\n>>\r\n>\r\n>  The gofmt is atomic w.r.t undo.\r\n>>\r\n>\r\n>  Jean-Marc\r\n>>\r\n>\r\n> Ok, I'm submitting a few other go-mode CLs soon; once those are in, I'll\r\n> ping back for an updated patch set for this CL (since this patch set\r\n> touches a lot of code, it currently has a conflict).\r\n>\r\n> http://codereview.appspot.com/**6198047/<http://codereview.appspot.com/6198047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-29 21:49:17.083918",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"jmeurin@google.com",
				"sameer@google.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThe compile-mode errors are particularly nice -- thanks!",
			"disapproval": false,
			"date": "2012-05-30 18:18:09.672883",
			"approval": true
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"jmeurin@google.com",
				"sameer@golang.org",
				"sameer@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I hit a bug in this feature recently.  I created a new file (buffer.go) and pasted a large block of Go code from another file into it.  My save hook ran gofmt, which generated a patch to remove the newline between the parens in the empty import statement in my new file.  All this was fine, but the patch hung waiting for me to manually fix the name of one of the /tmp/gofmt842687573492 files, which was missing.  I suspect this code is not handling the case when there's a patch to apply on a new buffer that has no existing file already on disk.  Can you investigate?\n\nOn 2012/05/29 22:10:51, jme wrote:\n> Hello mailto:sameer@google.com, mailto:sameer@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-04 14:32:07.510039",
			"approval": false
		},
		{
			"sender": "jmeurin@google.com",
			"recipients": [
				"jmeurin@google.com",
				"sameer@golang.org",
				"sameer@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Sameer,\n\nI've been looking at it but the fix I currently have is ugly, I'm looking at some other way.\n\nJean-Marc\n\nOn 2012/06/04 14:32:07, Sameer Ajmani wrote:\n> I hit a bug in this feature recently.  I created a new file (buffer.go) and\n> pasted a large block of Go code from another file into it.  My save hook ran\n> gofmt, which generated a patch to remove the newline between the parens in the\n> empty import statement in my new file.  All this was fine, but the patch hung\n> waiting for me to manually fix the name of one of the /tmp/gofmt842687573492\n> files, which was missing.  I suspect this code is not handling the case when\n> there's a patch to apply on a new buffer that has no existing file already on\n> disk.  Can you investigate?\n> \n> On 2012/05/29 22:10:51, jme wrote:\n> > Hello mailto:sameer@google.com, mailto:sameer@golang.org (cc:\n> mailto:golang-dev@googlegroups.com),\n> > \n> > I'd like you to review this change to\n> > https://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-07 20:07:11.154811",
			"approval": false
		},
		{
			"sender": "jmeurin@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is an explicit check against that in the diff-mode:\r\n       ;; Use file-regular-p to avoid\r\n       ;; /dev/null, directories, etc.\r\n\r\nThat check is before the prompt and the typed-in name doesn't have that\r\nconstrain.\r\n\r\nJean-Marc\r\n\r\n\r\nOn Thu, Jun 7, 2012 at 1:11 PM, Sameer Ajmani <sameer@google.com> wrote:\r\n\r\n> FWIW, the way I do it in emacs is to just type /dev/null when prompted for\r\n> the file.  Could you automate that?  (and close the /dev/null buffer if it\r\n> wasn't already open).\r\n>\r\n>\r\n> On Thu, Jun 7, 2012 at 4:07 PM, <jmeurin@google.com> wrote:\r\n>\r\n>> Hi Sameer,\r\n>>\r\n>> I've been looking at it but the fix I currently have is ugly, I'm\r\n>> looking at some other way.\r\n>>\r\n>> Jean-Marc\r\n>>\r\n>>\r\n>> On 2012/06/04 14:32:07, Sameer Ajmani wrote:\r\n>>\r\n>>> I hit a bug in this feature recently.  I created a new file\r\n>>>\r\n>> (buffer.go) and\r\n>>\r\n>>> pasted a large block of Go code from another file into it.  My save\r\n>>>\r\n>> hook ran\r\n>>\r\n>>> gofmt, which generated a patch to remove the newline between the\r\n>>>\r\n>> parens in the\r\n>>\r\n>>> empty import statement in my new file.  All this was fine, but the\r\n>>>\r\n>> patch hung\r\n>>\r\n>>> waiting for me to manually fix the name of one of the\r\n>>>\r\n>> /tmp/gofmt842687573492\r\n>>\r\n>>> files, which was missing.  I suspect this code is not handling the\r\n>>>\r\n>> case when\r\n>>\r\n>>> there's a patch to apply on a new buffer that has no existing file\r\n>>>\r\n>> already on\r\n>>\r\n>>> disk.  Can you investigate?\r\n>>>\r\n>>\r\n>>  On 2012/05/29 22:10:51, jme wrote:\r\n>>> > Hello mailto:sameer@google.com, mailto:sameer@golang.org (cc:\r\n>>> mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>),\r\n>>> >\r\n>>> > I'd like you to review this change to\r\n>>> > https://code.google.com/p/go/\r\n>>>\r\n>>\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6198047/<http://codereview.appspot.com/6198047/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-07 23:10:22.957360",
			"approval": false
		},
		{
			"sender": "sameer@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW, the way I do it in emacs is to just type /dev/null when prompted for\r\nthe file.  Could you automate that?  (and close the /dev/null buffer if it\r\nwasn't already open).\r\n\r\nOn Thu, Jun 7, 2012 at 4:07 PM, <jmeurin@google.com> wrote:\r\n\r\n> Hi Sameer,\r\n>\r\n> I've been looking at it but the fix I currently have is ugly, I'm\r\n> looking at some other way.\r\n>\r\n> Jean-Marc\r\n>\r\n>\r\n> On 2012/06/04 14:32:07, Sameer Ajmani wrote:\r\n>\r\n>> I hit a bug in this feature recently.  I created a new file\r\n>>\r\n> (buffer.go) and\r\n>\r\n>> pasted a large block of Go code from another file into it.  My save\r\n>>\r\n> hook ran\r\n>\r\n>> gofmt, which generated a patch to remove the newline between the\r\n>>\r\n> parens in the\r\n>\r\n>> empty import statement in my new file.  All this was fine, but the\r\n>>\r\n> patch hung\r\n>\r\n>> waiting for me to manually fix the name of one of the\r\n>>\r\n> /tmp/gofmt842687573492\r\n>\r\n>> files, which was missing.  I suspect this code is not handling the\r\n>>\r\n> case when\r\n>\r\n>> there's a patch to apply on a new buffer that has no existing file\r\n>>\r\n> already on\r\n>\r\n>> disk.  Can you investigate?\r\n>>\r\n>\r\n>  On 2012/05/29 22:10:51, jme wrote:\r\n>> > Hello mailto:sameer@google.com, mailto:sameer@golang.org (cc:\r\n>> mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>),\r\n>> >\r\n>> > I'd like you to review this change to\r\n>> > https://code.google.com/p/go/\r\n>>\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6198047/<http://codereview.appspot.com/6198047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-07 20:11:35.894038",
			"approval": false
		},
		{
			"sender": "jmeurin@google.com",
			"recipients": [
				"jmeurin@google.com",
				"sameer@golang.org",
				"sameer@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I found a better way, let me fix it.\n\nJean-Marc\n\nOn 2012/06/07 23:10:22, jme wrote:\n> There is an explicit check against that in the diff-mode:\n>        ;; Use file-regular-p to avoid\n>        ;; /dev/null, directories, etc.\n> \n> That check is before the prompt and the typed-in name doesn't have that\n> constrain.\n> \n> Jean-Marc\n> \n> \n> On Thu, Jun 7, 2012 at 1:11 PM, Sameer Ajmani <mailto:sameer@google.com> wrote:\n> \n> > FWIW, the way I do it in emacs is to just type /dev/null when prompted for\n> > the file.  Could you automate that?  (and close the /dev/null buffer if it\n> > wasn't already open).\n> >\n> >\n> > On Thu, Jun 7, 2012 at 4:07 PM, <mailto:jmeurin@google.com> wrote:\n> >\n> >> Hi Sameer,\n> >>\n> >> I've been looking at it but the fix I currently have is ugly, I'm\n> >> looking at some other way.\n> >>\n> >> Jean-Marc\n> >>\n> >>\n> >> On 2012/06/04 14:32:07, Sameer Ajmani wrote:\n> >>\n> >>> I hit a bug in this feature recently.  I created a new file\n> >>>\n> >> (buffer.go) and\n> >>\n> >>> pasted a large block of Go code from another file into it.  My save\n> >>>\n> >> hook ran\n> >>\n> >>> gofmt, which generated a patch to remove the newline between the\n> >>>\n> >> parens in the\n> >>\n> >>> empty import statement in my new file.  All this was fine, but the\n> >>>\n> >> patch hung\n> >>\n> >>> waiting for me to manually fix the name of one of the\n> >>>\n> >> /tmp/gofmt842687573492\n> >>\n> >>> files, which was missing.  I suspect this code is not handling the\n> >>>\n> >> case when\n> >>\n> >>> there's a patch to apply on a new buffer that has no existing file\n> >>>\n> >> already on\n> >>\n> >>> disk.  Can you investigate?\n> >>>\n> >>\n> >>  On 2012/05/29 22:10:51, jme wrote:\n> >>> > Hello mailto:sameer@google.com, mailto:sameer@golang.org (cc:\n> >>> mailto:golang-dev@**googlegroups.com <mailto:golang-dev@googlegroups.com>),\n> >>> >\n> >>> > I'd like you to review this change to\n> >>> > https://code.google.com/p/go/\n> >>>\n> >>\n> >>\n> >>\n> >>\n> http://codereview.appspot.com/**6198047/%3Chttp://codereview.appspot.com/6198047/>\n> >>\n> >\n> >",
			"disapproval": false,
			"date": "2012-06-08 00:19:49.936041",
			"approval": false
		}
	],
	"owner_email": "jmeurin@google.com",
	"private": false,
	"base_url": "",
	"owner": "jme",
	"subject": "code review 6198047:     misc/emacs: Use patch output of gofmt instead of re...",
	"created": "2012-05-07 16:22:47.343304",
	"patchsets": [
		1,
		2001,
		9001
	],
	"modified": "2012-06-08 00:19:50.024300",
	"closed": true,
	"issue": 6198047
}