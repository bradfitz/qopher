{
	"description": "gc, go/parser: accept .go files with UTF-8 BOM, ignore that bytes before compile and parse.\n\nSome text editors, especially in Windows, get used to add UTF-8 BOM to file header.\nCurrently, the BOM are \"invalid characters\" for gc and go/parser, which should be\nignored to make sure that the files are compiled and parsed properly.\nAfter this CL, cmd/go godoc gofmt and other go tools works well with UTF-8 BOM, too.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"0xjnml@gmail.com",
		"r@golang.org",
		"kardianos@gmail.com"
	],
	"messages": [
		{
			"sender": "com.liigo@gmail.com",
			"recipients": [
				"com.liigo@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-04-15 17:37:47.610657",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Strictly speaking, a BOM is legal in UTF-8 but only as a marker for\nthe type of the data stream, a magic number if you will. Since Go\nsource code is required to be UTF-8, a BOM is never necessary and\narguably erroneous. We've come this far without accepting BOMS and I'd\nlike to keep it that way.\n\n-rob\n",
			"disapproval": false,
			"date": "2012-04-15 21:34:04.056026",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sunday, April 15, 2012 7:37:47 PM UTC+2, Liigo Zhuang wrote:\n>\n> Description:\n> gc, go/parser: accept .go files with UTF-8 BOM, ignore that bytes before\n> compile and parse.\n>\nI believe this has been discussed at least once before at golang-nuts. I \nsuggest to reject this CL, it's IMO a bad idea to support broken editors.\n\n",
			"disapproval": false,
			"date": "2012-04-15 18:24:20.910122",
			"approval": false
		},
		{
			"sender": "com.liigo@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "BOM is commonly used to help text editors identifying encoding of a file.\nSome editors add BOM impliedly when saving utf-8 encoded files. If there is\nno BOM, text editors maybe try guessing it when opening a file, and error\nmaybe occurs. See wikipedia how the BOMs appear and how they are widely\nused:  http://en.wikipedia.org/wiki/Byte_order_mark\n\nSo, a .go source files with utf-8 BOM is a valid utf-8 encoded files. But\nthe go's parser and compiler didn't accept these files, which is very\nstrange. If someone stick to not accept utf-8 BOM in .go files, I would\nlike to suggest modifying Go's language specification to clarity that\nexplicitly.\n\n\n2012/4/16 Rob 'Commander' Pike <r@golang.org>\n\n> Strictly speaking, a BOM is legal in UTF-8 but only as a marker for\n> the type of the data stream, a magic number if you will. Since Go\n> source code is required to be UTF-8, a BOM is never necessary and\n> arguably erroneous. We've come this far without accepting BOMS and I'd\n> like to keep it that way.\n>\n> -rob\n>\n\n\n\n-- \nby *Liigo*, http://blog.csdn.net/liigo/\nGoogle+  https://plus.google.com/105597640837742873343/\n",
			"disapproval": false,
			"date": "2012-04-16 07:17:53.585811",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Microsoft Notepad adds a BOM to files, as does Microsoft's Visual Studio \nEditor. BUT, those are the only products I know of that do that. Notepad++ \ndoes not, nor does Sublime Text 2, ... I have not opinion on this topic, \nbut in my experience, the BOM automatic insertions is only with Microsoft's \nproducts. \n\nOn Monday, April 16, 2012 12:17:52 AM UTC-7, Liigo Zhuang wrote:\n>\n> BOM is commonly used to help text editors identifying encoding of a file. \n> Some editors add BOM impliedly when saving utf-8 encoded files. If there is \n> no BOM, text editors maybe try guessing it when opening a file, and error \n> maybe occurs. See wikipedia how the BOMs appear and how they are widely \n> used:  http://en.wikipedia.org/wiki/Byte_order_mark\n>\n> So, a .go source files with utf-8 BOM is a valid utf-8 encoded files. But \n> the go's parser and compiler didn't accept these files, which is very \n> strange. If someone stick to not accept utf-8 BOM in .go files, I would \n> like to suggest modifying Go's language specification to clarity that \n> explicitly.\n>\n>\n> 2012/4/16 Rob 'Commander' Pike <r@golang.org>\n>\n>> Strictly speaking, a BOM is legal in UTF-8 but only as a marker for\n>> the type of the data stream, a magic number if you will. Since Go\n>> source code is required to be UTF-8, a BOM is never necessary and\n>> arguably erroneous. We've come this far without accepting BOMS and I'd\n>> like to keep it that way.\n>>\n>> -rob\n>>\n>\n>\n>\n> -- \n> by *Liigo*, http://blog.csdn.net/liigo/\n> Google+  https://plus.google.com/105597640837742873343/\n>\n>  ",
			"disapproval": false,
			"date": "2012-04-16 15:00:00.384964",
			"approval": false
		}
	],
	"owner_email": "com.liigo@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "liigo",
	"subject": "code review 6036054: gc, go/parser: accept .go files with UTF-8 BOM, ignore ...",
	"created": "2012-04-15 17:30:47.042807",
	"patchsets": [
		1,
		2001
	],
	"modified": "2012-04-16 15:00:00.384964",
	"closed": false,
	"issue": 6036054
}