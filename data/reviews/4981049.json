{
	"description": "path/filepath: added Rel as the complement of Abs",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"gustavo@niemeyer.net",
		"r@golang.org",
		"borman@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-08 22:37:52.648557",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I am pretty sure adg wrote this code once\nbefore and we argued against it.  I don't\nremember the details.\n",
			"disapproval": false,
			"date": "2011-09-09 00:06:48.754311",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I am pretty sure adg wrote this code once\n> before and we argued against it. \u00a0I don't\n> remember the details.\n\nIf you were against it, I'm glad you can't remember. ;-)\n\nMore seriously, I haven't noticed anything like this fly by, and the\nlist search doesn't help either.  The long discussion around this\ntopic that I recall with Andrew was around EvalSymlinks, and it turned\nout to be more of a bikeshed around naming than anything else.\n\nRegardless, this seems like a pretty obvious and useful function, so\nI'd be glad to talk about it if possible.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-09 00:29:16.756681",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Sep 9, 2011 at 7:30 AM, Gustavo Niemeyer <gustavo@niemeyer.net>wrote:\n\n> 2) Converting an absolute path into one relative to cwd. E.g:\n>\n> a. This is a common trick in general to make paths easier\n>    for humans to digest, avoiding line-long paths\n>    in the terminal for local contexts.\n\n\nSadly this will produce relative paths that the user can't just say \"cd\n<paste>\" to.  Some shells determine this lexicographically:\n\n$ cd /tmp\n$ mkdir -p a/b/c\n$ ln -s a/b/c c\n\n\nbash/ksh/zsh:\n\n$ cd /tmp\n$ cd c\n$ pwd\n/tmp/c\n$ cd ..\n$ pwd\n/tmp\n\n\ncsh:\n\n% cd /tmp\n% cd c\n% pwd\n/tmp/c\n% cd ..\n% pwd\n/tmp/a/b\n\n$ mkdir a/b/d\n$ touch a/b/d/f1\n$ cd c\n$ ls ../d/f1\nf1\n$ cd ../d\n-ksh: cd: ../d: [No such file or directory]\n\n\nThis latter one does work in bash:\n\n$ cd /tmp/c\n$ cd ../d\n$ pwd\n/private/tmp/a/b/d\n\n\nMy point is there isn't a right answer to that problem, at least for humans\nto read and use.\n",
			"disapproval": false,
			"date": "2011-09-09 15:48:04.070676",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "obvious to whom and useful for what? i cannot remember ever needing\nthis functionality.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-09 00:54:42.310093",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I don't see why the \"root\" should be absolute or not; the\n> relativization should be relative to the \"root\" regardless. I also am\n> uncertain why the operation can't be purely lexical (and therefore\n> trivial). Also, making it purely lexical is easy to define. Depending\n> on Abs working the same way for two paths is bug-prone for sure.\n\nOk, sounds good. I'll make it purely lexical and drop the behavior of\ntaking the current directory in consideration. Now I need some sleep,\nthough.\n\nThanks for explaining it,\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-09 03:54:21.768876",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Assuming that Rel is a consistent operation\n> is a recipe for trouble on modern systems.\n> I'm willing to see something purely lexical go in,\n> but I'm now convinced that non-lexical has no\n> one right answer.\n\nSounds good. I'm not too bothered by these use cases either, given\nthat if/when one really wants them, it's trivial to convert the path\nto absolute ahead of time before calling Rel.  This also makes Rob's\npoint more valid, since doing so would avoid having system calls on\nevery iteration of a potential loop.\n\nI'll sort that out later today or over the weekend, thanks.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-09 14:46:59.642310",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-08 22:35:34.150730",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Calling Abs on both paths is not an implementation I'm happy with: two\n> expensive system calls, one of which is likely to be repeated with the\n> same argument each time around the loop. If i call Rel(\"./foo\", \".\")\n> and need a system call, something's off.\n\nSolving the second problem could be done with a fancier algorithm, but\nthe first one (no system call per iteration) will require enforcing\nabsolute paths, since a call such as Rel(\"/foo\", \".\")  or Rel(\".\",\n\"/foo\") can't be resolved otherwise.  Would you be happier if both of\nthese were enforced to be absolute?\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-09 01:20:01.787142",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "None of these seem like terribly compelling reasons.\nIf filepath's Walk doc gets updated to say\nthat path begins with root, then you just strip\nthe root with a string slice.  Hg does the same\nbogus context-sensitive path display that git does,\nand it drives me nuts.\n",
			"disapproval": false,
			"date": "2011-09-09 14:40:28.634004",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't see why the \"root\" should be absolute or not; the\nrelativization should be relative to the \"root\" regardless. I also am\nuncertain why the operation can't be purely lexical (and therefore\ntrivial). Also, making it purely lexical is easy to define. Depending\non Abs working the same way for two paths is bug-prone for sure.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-09 03:20:54.560376",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "What is the context where you'd use this?\n\nI'd love to see a purely lexical Rel in package path\n(not path/filepath).  In this package I am not so\nsure that Rel should be lexical (because operating\nsystem behavior is not) nor that it should take a root\n(because Abs does not).\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-09 04:42:05.117721",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> obvious to whom\n\nAnything obvious is _always_ obvious to the subject only. You can\nagree or not, but there are no doubts about that aspect. Then, when\nthe subject says \"seems pretty obvious\", it becomes even more clear\nthat the subject is in fact being open to people disagreeing and\nproviding arguments for a more fruitful debate.\n\n> and useful for what? i cannot remember ever needing\n> this functionality.\n\nMaybe to implement a filepath.Visitor that actually works as\ndocumented (!), or to create relative symlinks, or to pack contents\ninto a zip writer trivially without having to do the same operations\nby hand, etc.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-09 01:07:02.378329",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I still don't see the obviousness and utility, but I'll leave those aside.\n\nCalling Abs on both paths is not an implementation I'm happy with: two\nexpensive system calls, one of which is likely to be repeated with the\nsame argument each time around the loop. If i call Rel(\"./foo\", \".\")\nand need a system call, something's off.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-09 01:14:18.376840",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> What is the context where you'd use this?\n>\n> I'd love to see a purely lexical Rel in package path\n> (not path/filepath). \u00a0In this package I am not so\n> sure that Rel should be lexical (because operating\n> system behavior is not) nor that it should take a root\n> (because Abs does not).\n\nIn my mind there are two clear use cases for this that are interesting:\n\n\n1) Breaking down a path based on an arbitrary root. E.g.:\n\na. Bundling a given directory in a zip. zip.Writer.Create takes a\n    relative path used within the zip itself. I'm using Rel for this\n    right now.\n\nb. Changing the usage or implementation of filepath.Visitor so\n    that the paths are relative to root. I'm also using it for this\n    right now.\n\n\n2) Converting an absolute path into one relative to cwd. E.g:\n\na. This is a common trick in general to make paths easier\n    for humans to digest, avoiding line-long paths\n    in the terminal for local contexts.\n\na. An easy example is \"git status\". It will show paths within\n    the tree relative to the user's cwd.\n\n\nBoth of these cases are suited for filepath, and the current\nimplementation handles them both.\n\nI understand what you mean by avoiding a root, because\nyou have the second case in mind.  Right now it's done\nwith Rel(path, \".\"), so it's easy to see that the root could\nbe avoided for it. But this would live the first case out,\nand they're both the same underlying problem.\n\nRob's suggestion supports some of the first case, and\nsome of the second assuming paths are converted to\nabsolute externally. The problem with a purely lexical\nanalysis is that it rules out the cases where only one\nof the two paths is absolute, like Rel(\"/foo\", \".\") or\nRel(\".\", \"/foo\").\n\nAs an attempt to make both of these cases well\nsupported, if that feels good I can try an intermediate\nimplementation later to see how you both feel, doing\npurely lexical analysis whenever feasible, but still\nresolving a relative path to absolute if strictly\nnecessary for the provided arguments.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-09 14:31:15.778477",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Sep 9, 2011 at 10:40, Russ Cox <rsc@golang.org> wrote:\n> None of these seem like terribly compelling reasons.\n> If filepath's Walk doc gets updated to say\n> that path begins with root, then you just strip\n> the root with a string slice. \u00a0Hg does the same\n> bogus context-sensitive path display that git does,\n> and it drives me nuts.\n\nSorry, gmail sent earlier than I wanted to.  Continuing...\n\nAssuming that Rel is a consistent operation\nis a recipe for trouble on modern systems.\nI'm willing to see something purely lexical go in,\nbut I'm now convinced that non-lexical has no\none right answer.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-09 14:42:06.674522",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, gustavo@niemeyer.net, r@golang.org, borman@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-20 00:01:15.935619",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, gustavo@niemeyer.net, r@golang.org, borman@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-19 23:50:01.963553",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Sorry, must complement the doc. Just a moment.",
			"disapproval": false,
			"date": "2011-09-19 23:51:06.936025",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode262\nsrc/pkg/path/filepath/path.go:262: // be equivalent to path itself.\nprobably want to define join better. maybe, joined to path with an intervening path separator. or give a code snippet, if that makes sense.\nthe semantics is worth making clear.\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode264\nsrc/pkg/path/filepath/path.go:264: // current working directory are supported.\nthis is an odd sentence. what in the API says anything about supported operations?\ni think what you're trying to say is that the relative path is constructed using purely lexical operations on path and root.\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode282\nsrc/pkg/path/filepath/path.go:282: return \"\", os.NewError(\"can't make \" + path + \" relative to \" + root)\nthese errors should have a \"Rel: \" prefix.\nthey're also going to be really long but i guess that's ok\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode284\nsrc/pkg/path/filepath/path.go:284: // Position root[r0:ri] and path[p0:pi] on the first differing elements.\ns/on/at/\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode312\nsrc/pkg/path/filepath/path.go:312: b := []byte{'.', '.'}\n[]byte(\"..\") is easier to read\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode315\nsrc/pkg/path/filepath/path.go:315: b = append(b, '/', '.', '.')\n[]byte(\"/..\")...\n(maybe)\nor pull these out as vars\n(maybe)",
			"disapproval": false,
			"date": "2011-09-21 21:33:34.777539",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode262\nsrc/pkg/path/filepath/path.go:262: // be equivalent to path itself.\n> probably want to define join better. maybe, joined to path \n\nAgreed. In hindsight I clearly struggled to explain due\nto my choice of parameter names. Should be better now.\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode264\nsrc/pkg/path/filepath/path.go:264: // current working directory are supported.\n> this is an odd sentence. what in the API says anything \n\nReworded as well.\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode282\nsrc/pkg/path/filepath/path.go:282: return \"\", os.NewError(\"can't make \" + path + \" relative to \" + root)\n> these errors should have a \"Rel: \" prefix.\n\nDone.\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode284\nsrc/pkg/path/filepath/path.go:284: // Position root[r0:ri] and path[p0:pi] on the first differing elements.\n> s/on/at/\n\nDone.\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode312\nsrc/pkg/path/filepath/path.go:312: b := []byte{'.', '.'}\n> []byte(\"..\") is easier to read\n\nDone.\n\nhttp://codereview.appspot.com/4981049/diff/25001/src/pkg/path/filepath/path.go#newcode315\nsrc/pkg/path/filepath/path.go:315: b = append(b, '/', '.', '.')\n> []byte(\"/..\")...\n\nAgreed it reads better, but doesn't feel bad enough to\nhave the side effects of the other choices. If you feel\nstrong about it I can pull out as a variable.",
			"disapproval": false,
			"date": "2011-09-22 03:38:36.042237",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2011-10-03 13:41:57.696563",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nthanks for bearing with me",
			"disapproval": false,
			"date": "2011-10-04 02:45:00.543978",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "lots of allocation in the ../ case. i think some refactoring could help, but it's not a big deal.\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path.go#newcode261\nsrc/pkg/path/filepath/path.go:261: // Rel returns a relative path that is equivalent to targpath when\ns/equivalent/lexically &/\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path_test.go#newcode620\nsrc/pkg/path/filepath/path_test.go:620: {\"a/b\", \"a/b\", \".\"},\nyou should include at least one example with elements longer than one character",
			"disapproval": false,
			"date": "2011-10-03 19:53:47.033208",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> lots of allocation in the ../ case. i think\n> some refactoring could help, but\n> it's not a big deal.\n\nReduced to two allocations only (one to []byte\nand one back to string).\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path.go#newcode261\nsrc/pkg/path/filepath/path.go:261: // Rel returns a relative path that is equivalent to targpath when\n> s/equivalent/lexically &/\n\nDone.\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4981049/diff/29001/src/pkg/path/filepath/path_test.go#newcode620\nsrc/pkg/path/filepath/path_test.go:620: {\"a/b\", \"a/b\", \".\"},\n> you should include at least one example with elements longer than one character\n\nThere were already entries in lines 625, 626, 636 and 637, but I've increased the length of elements to make it more obvious anyway.",
			"disapproval": false,
			"date": "2011-10-04 00:59:34.828330",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, gustavo@niemeyer.net, r@golang.org, borman@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-04 01:00:36.240075",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-10-04 14:58:08.222382",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=110dde956bd9 ***\n\npath/filepath: added Rel as the complement of Abs\n\nR=golang-dev, rsc, gustavo, r, borman\nCC=golang-dev\nhttp://codereview.appspot.com/4981049",
			"disapproval": false,
			"date": "2011-10-04 14:27:15.690533",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"r@golang.org",
				"borman@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> LGTM\n> thanks for bearing with me\n\nThanks for the patience as well, Rob.\n\nPlease note I did two trivial changes before committing. One\nobvious simplification now that we're counting slashes on the\n\"..\" case, and one change in the test to attempt to make it\npass on Windows on a first try.\n\nThe two changes are seen in this small patch, for easier\nconsumption:\n\n    http://paste.ubuntu.com/702271/",
			"disapproval": false,
			"date": "2011-10-04 14:37:09.729763",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 4981049: path/filepath: added Rel as the complement of Abs",
	"created": "2011-09-08 17:47:59.736113",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		10001,
		7002,
		12003,
		18001,
		21001,
		20003,
		25001,
		29001,
		37001,
		33002,
		46001,
		47001,
		49001,
		46004
	],
	"modified": "2011-10-04 14:37:09.815954",
	"closed": true,
	"issue": 4981049
}