{
	"description": "exp/ssh: add simple tcpip.go functional tests",
	"cc": [
		"rsc@golang.org",
		"agl@golang.org",
		"n13m3y3r@gmail.com",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-20 08:51:39.133717",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Go style doesn't mix case of abbreviations, as in TcpipHttps.\n\nOn Sun, Nov 20, 2011 at 3:51 AM, <dave@cheney.net> wrote:\n\n> Reviewers: rsc, agl1, niemeyer,\n>\n> Message:\n> Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> exp/ssh: add simple tcpip.go functional tests\n>\n> Please review this at http://codereview.appspot.com/**5385041/<http://codereview.appspot.com/5385041/>\n>\n> Affected files:\n>  A src/pkg/exp/ssh/tcpip_func_**test.go\n>\n>\n> Index: src/pkg/exp/ssh/tcpip_func_**test.go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/src/pkg/exp/ssh/tcpip_func_**test.go\n> @@ -0,0 +1,79 @@\n> +// Copyright 2011 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +package ssh\n> +\n> +// direct-tcpip functional tests\n> +\n> +import (\n> +       \"net\"\n> +       \"net/http\"\n> +       \"testing\"\n> +)\n> +\n> +func TestTcpipHttp(t *testing.T) {\n> +       if *sshuser == \"\" {\n> +               t.Log(\"ssh.user not defined, skipping test\")\n> +               return\n> +       }\n> +       config := &ClientConfig{\n> +               User: *sshuser,\n> +               Auth: []ClientAuth{\n> +                       ClientAuthPassword(password(***sshpass)),\n> +               },\n> +       }\n> +       conn, err := Dial(\"tcp\", \"localhost:22\", config)\n> +       if err != nil {\n> +               t.Fatalf(\"Unable to connect: %s\", err)\n> +       }\n> +       defer conn.Close()\n> +       tr := &http.Transport{\n> +               Dial: func(n, addr string) (net.Conn, error) {\n> +                       return conn.Dial(n, addr)\n> +               },\n> +       }\n> +       client := &http.Client{\n> +               Transport: tr,\n> +       }\n> +       // google.com will generate at least one redirect, possibly three\n> +       // depending on your location.\n> +       resp, err := client.Get(\"http://google.com/**\")\n> +       if err != nil {\n> +               t.Fatalf(\"unable to proxy: %s\", err)\n> +       }\n> +       // got a body without error\n> +       t.Log(resp)\n> +}\n> +\n> +func TestTcpipHttps(t *testing.T) {\n> +       if *sshuser == \"\" {\n> +               t.Log(\"ssh.user not defined, skipping test\")\n> +               return\n> +       }\n> +       config := &ClientConfig{\n> +               User: *sshuser,\n> +               Auth: []ClientAuth{\n> +                       ClientAuthPassword(password(***sshpass)),\n> +               },\n> +       }\n> +       conn, err := Dial(\"tcp\", \"localhost:22\", config)\n> +       if err != nil {\n> +               t.Fatalf(\"Unable to connect: %s\", err)\n> +       }\n> +       defer conn.Close()\n> +       tr := &http.Transport{\n> +               Dial: func(n, addr string) (net.Conn, error) {\n> +                       return conn.Dial(n, addr)\n> +               },\n> +       }\n> +       client := &http.Client{\n> +               Transport: tr,\n> +       }\n> +       resp, err := client.Get(\"https://encrypted.**google.com/<https://encrypted.google.com/>\n> \")\n> +       if err != nil {\n> +               t.Fatalf(\"unable to proxy: %s\", err)\n> +       }\n> +       // got a body without error\n> +       t.Log(resp)\n> +}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-20 16:53:25.248508",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixed. I hope that is what you meant.",
			"disapproval": false,
			"date": "2011-11-21 07:47:43.051060",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go\nFile src/pkg/exp/ssh/tcpip_func_test.go (right):\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode32\nsrc/pkg/exp/ssh/tcpip_func_test.go:32: Dial: func(n, addr string) (net.Conn, error) {\nnice to see the Dial hook being useful here.\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode41\nsrc/pkg/exp/ssh/tcpip_func_test.go:41: resp, err := client.Get(\"http://google.com/\")\nhttp://ip.appspot.com/ might be a smaller, simpler page to hit, with a well-known response body format.  *shrug*\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode73\nsrc/pkg/exp/ssh/tcpip_func_test.go:73: resp, err := client.Get(\"https://encrypted.google.com/\")\nlot of repetitive code here for what's effectively one line difference.\n\nmove this all to a function?\n\nfunc TestDialHTTP(t *testing.T) {\n    doTest(t, \"http://ip.appspot.com/\")\n}\n\nfunc TestDialHTTPS(t *testing.T) {\n    doTest(t, \"https://ip.appspot.com/\")\n}\n\nYour call.",
			"disapproval": false,
			"date": "2011-11-21 15:44:26.287325",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks fine to me.  leaving for brad.\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go\nFile src/pkg/exp/ssh/tcpip_func_test.go (right):\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode7\nsrc/pkg/exp/ssh/tcpip_func_test.go:7: // direct-tcpip functional tests\n// Test TCP connections tunnelled over SSH.\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode15\nsrc/pkg/exp/ssh/tcpip_func_test.go:15: func TestTCPIPHTTP(t *testing.T) {\nHow about just TestDialHTTP and TestDialHTTPS?",
			"disapproval": false,
			"date": "2011-11-21 15:36:22.380326",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-22 08:53:37.324394",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments Brad.\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go\nFile src/pkg/exp/ssh/tcpip_func_test.go (right):\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode32\nsrc/pkg/exp/ssh/tcpip_func_test.go:32: Dial: func(n, addr string) (net.Conn, error) {\nYeah, it's awesome. \n\nOn 2011/11/21 15:44:27, bradfitz wrote:\n> nice to see the Dial hook being useful here.\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode41\nsrc/pkg/exp/ssh/tcpip_func_test.go:41: resp, err := client.Get(\"http://google.com/\")\nI'm calling google.com so it generates a few redirects so we get a few more calls to client.Dial for free.\n\nOn 2011/11/21 15:44:27, bradfitz wrote:\n> http://ip.appspot.com/ might be a smaller, simpler page to hit, with a\n> well-known response body format.  *shrug*\n\nhttp://codereview.appspot.com/5385041/diff/6002/src/pkg/exp/ssh/tcpip_func_test.go#newcode73\nsrc/pkg/exp/ssh/tcpip_func_test.go:73: resp, err := client.Get(\"https://encrypted.google.com/\")\nYeah, I can make that much less verbose.\n\nOn 2011/11/21 15:44:27, bradfitz wrote:\n> lot of repetitive code here for what's effectively one line difference.\n> \n> move this all to a function?\n> \n> func TestDialHTTP(t *testing.T) {\n>     doTest(t, \"http://ip.appspot.com/\")\n> }\n> \n> func TestDialHTTPS(t *testing.T) {\n>     doTest(t, \"https://ip.appspot.com/\")\n> }\n> \n> Your call.",
			"disapproval": false,
			"date": "2011-11-22 08:56:43.656801",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a5185f942ad9 ***\n\nexp/ssh: add simple tcpip.go functional tests\n\nR=rsc, agl, n13m3y3r, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5385041\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2011-11-23 14:38:15.952735",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5385041: exp/ssh: add simple tcpip.go functional tests",
	"created": "2011-11-14 09:41:47.336385",
	"patchsets": [
		1,
		2001,
		3002,
		6002,
		10002
	],
	"modified": "2011-11-24 01:56:45.133590",
	"closed": true,
	"issue": 5385041
}