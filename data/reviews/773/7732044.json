{
	"description": "go/test/bench/go1: add printf and time format tests\nAlso rename the go parser test to GoParse so it doesn't grab the globally useful Parse name.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-11 22:31:35.129650",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you. \r\n\r\nOn 12/03/2013, at 9:31, r@golang.org wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n> \r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n> \r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n> \r\n> \r\n> Description:\r\n> go/test/bench/go1: add printf and time format tests\r\n> Also rename the go parser test to GoParse so it doesn't grab the\r\n> globally useful Parse name.\r\n> \r\n> Please review this at https://codereview.appspot.com/7732044/\r\n> \r\n> Affected files:\r\n>  A test/bench/go1/fmt_test.go\r\n>  M test/bench/go1/parser_test.go\r\n>  A test/bench/go1/time_test.go\r\n> \r\n> \r\n> Index: test/bench/go1/fmt_test.go\r\n> ===================================================================\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/test/bench/go1/fmt_test.go\r\n> @@ -0,0 +1,68 @@\r\n> +// Copyright 2013 The Go Authors. All rights reserved.\r\n> +// Use of this source code is governed by a BSD-style\r\n> +// license that can be found in the LICENSE file.\r\n> +\r\n> +package go1\r\n> +\r\n> +// benchmark based on fmt/fmt_test.go\r\n> +\r\n> +import (\r\n> +    \"bytes\"\r\n> +    \"fmt\"\r\n> +    \"testing\"\r\n> +)\r\n> +\r\n> +func BenchmarkFmtFprintfEmpty(b *testing.B) {\r\n> +    var buf bytes.Buffer\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        fmt.Fprintf(&buf, \"\")\r\n> +    }\r\n> +}\r\n> +\r\n> +func BenchmarkFmtFprintfString(b *testing.B) {\r\n> +    var buf bytes.Buffer\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        buf.Reset()\r\n> +        fmt.Fprintf(&buf, \"%s\", \"hello\")\r\n> +    }\r\n> +}\r\n> +\r\n> +func BenchmarkFmtFprintfInt(b *testing.B) {\r\n> +    var buf bytes.Buffer\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        buf.Reset()\r\n> +        fmt.Fprintf(&buf, \"%d\", 5)\r\n> +    }\r\n> +}\r\n> +\r\n> +func BenchmarkFmtFprintfIntInt(b *testing.B) {\r\n> +    var buf bytes.Buffer\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        buf.Reset()\r\n> +        fmt.Fprintf(&buf, \"%d %d\", 5, 6)\r\n> +    }\r\n> +}\r\n> +\r\n> +func BenchmarkFmtFprintfPrefixedInt(b *testing.B) {\r\n> +    var buf bytes.Buffer\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        buf.Reset()\r\n> +        fmt.Fprintf(&buf, \"This is some meaningless prefix text that needs to be scanned %d\", 6)\r\n> +    }\r\n> +}\r\n> +\r\n> +func BenchmarkFmtFprintfFloat(b *testing.B) {\r\n> +    var buf bytes.Buffer\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        buf.Reset()\r\n> +        fmt.Fprintf(&buf, \"%g\", 5.23184)\r\n> +    }\r\n> +}\r\n> +\r\n> +func BenchmarkFmtManyArgs(b *testing.B) {\r\n> +    var buf bytes.Buffer\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        buf.Reset()\r\n> +        fmt.Fprintf(&buf, \"%2d/%2d/%2d %d:%d:%d %s %s\\n\", 3, 4, 5, 11, 12, 13, \"hello\", \"world\")\r\n> +    }\r\n> +}\r\n> Index: test/bench/go1/parser_test.go\r\n> ===================================================================\r\n> --- a/test/bench/go1/parser_test.go\r\n> +++ b/test/bench/go1/parser_test.go\r\n> @@ -33,7 +33,7 @@\r\n>    return b\r\n> }\r\n> \r\n> -func BenchmarkParse(b *testing.B) {\r\n> +func BenchmarkGoParse(b *testing.B) {\r\n>    b.SetBytes(int64(len(parserbytes)))\r\n>    for i := 0; i < b.N; i++ {\r\n>        if _, err := parser.ParseFile(token.NewFileSet(), \"\", parserbytes, parser.ParseComments); err != nil {\r\n> Index: test/bench/go1/time_test.go\r\n> ===================================================================\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/test/bench/go1/time_test.go\r\n> @@ -0,0 +1,25 @@\r\n> +// Copyright 2013 The Go Authors. All rights reserved.\r\n> +// Use of this source code is governed by a BSD-style\r\n> +// license that can be found in the LICENSE file.\r\n> +\r\n> +package go1\r\n> +\r\n> +// benchmark based on time/time_test.go\r\n> +\r\n> +import (\r\n> +    \"testing\"\r\n> +    \"time\"\r\n> +)\r\n> +\r\n> +func BenchmarkTimeParse(b *testing.B) {\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        time.Parse(time.ANSIC, \"Mon Jan  2 15:04:05 2006\")\r\n> +    }\r\n> +}\r\n> +\r\n> +func BenchmarkTimeFormat(b *testing.B) {\r\n> +    t := time.Unix(1265346057, 0)\r\n> +    for i := 0; i < b.N; i++ {\r\n> +        t.Format(\"Mon Jan  2 15:04:05 2006\")\r\n> +    }\r\n> +}\r\n> \r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-03-11 22:42:45.336170",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7006614f0720 ***\n\ngo/test/bench/go1: add printf and time format tests\nAlso rename the go parser test to GoParse so it doesn't grab the globally useful Parse name.\n\nR=golang-dev, dave\nCC=golang-dev\nhttps://codereview.appspot.com/7732044",
			"disapproval": false,
			"date": "2013-03-12 00:17:27.503900",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7732044: go/test/bench/go1: add printf and time format tests",
	"created": "2013-03-11 22:31:28.974410",
	"patchsets": [
		1,
		4001
	],
	"modified": "2013-03-12 00:17:28.845280",
	"closed": true,
	"issue": 7732044
}