{
	"description": "crypto/x509: add support for SEC1/EC private keys.\n\nAdd support for parsing SEC1 EC private keys and PKCS8 encapsulated\nEC private key structures.",
	"cc": [
		"agl@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-25 13:25:57.331110",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go\nFile src/pkg/crypto/x509/sec1.go (right):\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode32\nsrc/pkg/crypto/x509/sec1.go:32: func ParseSEC1PrivateKey(der []byte) (key *ecdsa.PrivateKey, err error) {\nWhere is this format from? It's odd to have two ASN.1 values concatenated, rather than in a SEQUENCE and SEC1 C.2 doesn't seem to specify this format.\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode52\nsrc/pkg/crypto/x509/sec1.go:52: return nil, fmt.Errorf(\"crypto/x509: failed to parse EC private key: %v\", err)\nerrors.New(\"crypto/x509: failed to parse EC private key: \" + err.Error())\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode52\nsrc/pkg/crypto/x509/sec1.go:52: return nil, fmt.Errorf(\"crypto/x509: failed to parse EC private key: %v\", err)\nerrors.New(\"crypto/x509: failed to parse EC private key: \" + err.Error())\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode55\nsrc/pkg/crypto/x509/sec1.go:55: return nil, fmt.Errorf(\"crypto/x509: unknown version %d\\n\", privKey.Version)\nno \\n at the end\n\ns/unknown version/unknown EC private key version/\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode58\nsrc/pkg/crypto/x509/sec1.go:58: var namedCurve elliptic.Curve\ns/namedCurve/curve/\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode69\nsrc/pkg/crypto/x509/sec1.go:69: priv := new(ecdsa.PrivateKey)\nif k.Cmp(curve.Params().N) >= 0 {\n  return nil, errors.New(\"crypto/x509: invalid elliptic curve private key value\")\n}\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode72\nsrc/pkg/crypto/x509/sec1.go:72: priv.X, priv.Y = namedCurve.ScalarBaseMult(k.Bytes())\ns/k.Bytes()/privKey/PrivateKey/",
			"disapproval": false,
			"date": "2012-10-25 14:19:03.646010",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go\nFile src/pkg/crypto/x509/sec1.go (right):\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode32\nsrc/pkg/crypto/x509/sec1.go:32: func ParseSEC1PrivateKey(der []byte) (key *ecdsa.PrivateKey, err error) {\nOn 2012/10/25 14:19:03, agl1 wrote:\n> Where is this format from? It's odd to have two ASN.1 values concatenated,\n> rather than in a SEQUENCE and SEC1 C.2 doesn't seem to specify this format.\n\nAgreed. It appears that 'openssl ecparam' writes out an ECDomainParameters immediately followed by the ECPrivateKey structure. This is similar to what it does in the PEM case, where there are two PEM blocks in the same file (the first an 'EC PARAMS' block, the second an 'EC PRIVATE KEY' block). In the case of a named curve, the ASN.1 can simply be an OID. I'm not entirely sure how we should handle this...\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode52\nsrc/pkg/crypto/x509/sec1.go:52: return nil, fmt.Errorf(\"crypto/x509: failed to parse EC private key: %v\", err)\nOn 2012/10/25 14:19:03, agl1 wrote:\n> errors.New(\"crypto/x509: failed to parse EC private key: \" + err.Error())\n\nDone.\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode52\nsrc/pkg/crypto/x509/sec1.go:52: return nil, fmt.Errorf(\"crypto/x509: failed to parse EC private key: %v\", err)\nOn 2012/10/25 14:19:03, agl1 wrote:\n> errors.New(\"crypto/x509: failed to parse EC private key: \" + err.Error())\n\nDone.\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode55\nsrc/pkg/crypto/x509/sec1.go:55: return nil, fmt.Errorf(\"crypto/x509: unknown version %d\\n\", privKey.Version)\nOn 2012/10/25 14:19:03, agl1 wrote:\n> no \\n at the end\n> \n> s/unknown version/unknown EC private key version/\n> \n\nDone.\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode58\nsrc/pkg/crypto/x509/sec1.go:58: var namedCurve elliptic.Curve\nOn 2012/10/25 14:19:03, agl1 wrote:\n> s/namedCurve/curve/\n\nDone.\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode69\nsrc/pkg/crypto/x509/sec1.go:69: priv := new(ecdsa.PrivateKey)\nOn 2012/10/25 14:19:03, agl1 wrote:\n> if k.Cmp(curve.Params().N) >= 0 {\n>   return nil, errors.New(\"crypto/x509: invalid elliptic curve private key\n> value\")\n> }\n\nDone.\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode72\nsrc/pkg/crypto/x509/sec1.go:72: priv.X, priv.Y = namedCurve.ScalarBaseMult(k.Bytes())\nOn 2012/10/25 14:19:03, agl1 wrote:\n> s/k.Bytes()/privKey/PrivateKey/\n\nDone.",
			"disapproval": false,
			"date": "2012-10-25 15:20:57.903900",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go\nFile src/pkg/crypto/x509/sec1.go (right):\n\nhttps://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode32\nsrc/pkg/crypto/x509/sec1.go:32: func ParseSEC1PrivateKey(der []byte) (key *ecdsa.PrivateKey, err error) {\nOn 2012/10/25 15:20:58, jsing wrote:\n> On 2012/10/25 14:19:03, agl1 wrote:\n> > Where is this format from? It's odd to have two ASN.1 values concatenated,\n> > rather than in a SEQUENCE and SEC1 C.2 doesn't seem to specify this format.\n> \n> Agreed. It appears that 'openssl ecparam' writes out an ECDomainParameters\n> immediately followed by the ECPrivateKey structure. This is similar to what it\n> does in the PEM case, where there are two PEM blocks in the same file (the first\n> an 'EC PARAMS' block, the second an 'EC PRIVATE KEY' block). In the case of a\n> named curve, the ASN.1 can simply be an OID. I'm not entirely sure how we should\n> handle this...\n\nI don't think that we should handle it. I think it's basically a problem with OpenSSL. It makes sense in the PEM case, but it's nonsense for DER.\n\nIf we eliminate this method, we can remove the current ParseECPrivateKey wrapper too, right?",
			"disapproval": false,
			"date": "2012-10-29 13:46:37.287470",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/29 13:46:37, agl1 wrote:\n> https://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go\n> File src/pkg/crypto/x509/sec1.go (right):\n> \n> https://codereview.appspot.com/6767045/diff/8001/src/pkg/crypto/x509/sec1.go#newcode32\n> src/pkg/crypto/x509/sec1.go:32: func ParseSEC1PrivateKey(der []byte) (key\n> *ecdsa.PrivateKey, err error) {\n> On 2012/10/25 15:20:58, jsing wrote:\n> > On 2012/10/25 14:19:03, agl1 wrote:\n> > > Where is this format from? It's odd to have two ASN.1 values concatenated,\n> > > rather than in a SEQUENCE and SEC1 C.2 doesn't seem to specify this format.\n> > \n> > Agreed. It appears that 'openssl ecparam' writes out an ECDomainParameters\n> > immediately followed by the ECPrivateKey structure. This is similar to what it\n> > does in the PEM case, where there are two PEM blocks in the same file (the\n> first\n> > an 'EC PARAMS' block, the second an 'EC PRIVATE KEY' block). In the case of a\n> > named curve, the ASN.1 can simply be an OID. I'm not entirely sure how we\n> should\n> > handle this...\n> \n> I don't think that we should handle it. I think it's basically a problem with\n> OpenSSL. It makes sense in the PEM case, but it's nonsense for DER.\n\nApologies for the delay in getting back to this.\n\nGenerally speaking, I agree with your sentiment. OpenSSL seems to take the approach that EC keys can be generated with non-named parameters, which means that the curve parameters need to be included separately. This is obvious in the PEM case where there are two PEM blocks, however their DER output also includes two ASN.1 values (this occurs even in the named curve case). If we choose not support this then we will not be able to load DER EC keys as currently generated by OpenSSL.\n\n> If we eliminate this method, we can remove the current ParseECPrivateKey wrapper\n> too, right?\n\nYes.",
			"disapproval": false,
			"date": "2012-11-13 14:03:13.167470",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6767045/diff/11001/src/pkg/crypto/x509/sec1.go\nFile src/pkg/crypto/x509/sec1.go (right):\n\nhttps://codereview.appspot.com/6767045/diff/11001/src/pkg/crypto/x509/sec1.go#newcode41\nsrc/pkg/crypto/x509/sec1.go:41: func ParseECPrivateKey(der []byte) (key *ecdsa.PrivateKey, err error) {\nI thought this was going away?",
			"disapproval": false,
			"date": "2012-11-13 15:43:12.274420",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 14 November 2012 02:43,  <agl@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/6767045/diff/11001/src/pkg/crypto/x509/sec1.go\r\n> File src/pkg/crypto/x509/sec1.go (right):\r\n>\r\n> https://codereview.appspot.com/6767045/diff/11001/src/pkg/crypto/x509/sec1.go#newcode41\r\n> src/pkg/crypto/x509/sec1.go:41: func ParseECPrivateKey(der []byte) (key\r\n> *ecdsa.PrivateKey, err error) {\r\n> I thought this was going away?\r\n\r\nIf the decision is to not to support DER generated via OpenSSL ecparam\r\nthen we can drop ParseSEC1PrivateKey. The ParseECPrivateKey() function\r\nis still needed for PEM EC PRIVATE KEY blocks, with parseECPrivateKey\r\nbeing necessary to handle PKCS8 encapsulated EC keys.\r\n",
			"disapproval": false,
			"date": "2012-11-13 15:57:02.530110",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 13, 2012 at 10:57 AM, Joel Sing <jsing@google.com> wrote:\r\n> If the decision is to not to support DER generated via OpenSSL ecparam\r\n> then we can drop ParseSEC1PrivateKey. The ParseECPrivateKey() function\r\n> is still needed for PEM EC PRIVATE KEY blocks, with parseECPrivateKey\r\n> being necessary to handle PKCS8 encapsulated EC keys.\r\n\r\nI'm pretty certain that the DER output of ecparam is a bug. It makes\r\nsome sense in PEM format because they are two separate PEM blocks, but\r\nramming two DER streams together is completely non-standard.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-11-13 16:35:12.246500",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/13 16:35:12, agl1 wrote:\n> On Tue, Nov 13, 2012 at 10:57 AM, Joel Sing <mailto:jsing@google.com> wrote:\n> > If the decision is to not to support DER generated via OpenSSL ecparam\n> > then we can drop ParseSEC1PrivateKey. The ParseECPrivateKey() function\n> > is still needed for PEM EC PRIVATE KEY blocks, with parseECPrivateKey\n> > being necessary to handle PKCS8 encapsulated EC keys.\n> \n> I'm pretty certain that the DER output of ecparam is a bug. It makes\n> some sense in PEM format because they are two separate PEM blocks, but\n> ramming two DER streams together is completely non-standard.\n\nAgreed. I've removed ParseSEC1PrivateKey() and the associated test.\n\nPTAL.",
			"disapproval": false,
			"date": "2012-11-14 10:39:56.344190",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\n(Let me know if you need me to land it in the tree.)",
			"disapproval": false,
			"date": "2012-11-14 16:27:48.142730",
			"approval": true
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=15a03e58cd8d ***\n\ncrypto/x509: add support for SEC1/EC private keys.\n\nAdd support for parsing SEC1 EC private keys and PKCS8 encapsulated\nEC private key structures.\n\nR=agl\nCC=golang-dev\nhttp://codereview.appspot.com/6767045",
			"disapproval": false,
			"date": "2012-11-14 16:41:00.178360",
			"approval": false
		}
	],
	"owner_email": "jsing@google.com",
	"private": false,
	"base_url": "",
	"owner": "jsing",
	"subject": "code review 6767045: crypto/x509: add support for SEC1/EC private keys.",
	"created": "2012-10-24 17:50:46.520280",
	"patchsets": [
		1006,
		8001,
		11001,
		18002,
		21002
	],
	"modified": "2012-11-14 16:41:02.608010",
	"closed": true,
	"issue": 6767045
}