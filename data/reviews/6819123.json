{
	"description": "cmd/gc: add division rewrite to walk pass.\n\nThis allows 5g and 8g to benefit from the rewrite as shifts\nor magic multiplies. The 64-bit arithmetic is not handled there,\nand left in 6g.\n\nUpdate issue 2230.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"mtj@google.com",
		"iant@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The latest patch adds support for the /= %= case.\nResults on benchamrks from CL 6819087\n\nBefore (arm):\nBenchmarkDiv1\t20000000\t        25.3 ns/op\nBenchmarkDiv2\t20000000\t        38.2 ns/op\nBenchmarkDiv4\t20000000\t        38.2 ns/op\nBenchmarkMod1\t20000000\t        26.5 ns/op\nBenchmarkMod2\t20000000\t        36.5 ns/op\nBenchmarkMod4\t20000000\t        36.5 ns/op\n\nAfter (arm):\nBenchmarkDiv1\t500000000\t         1.77 ns/op\nBenchmarkDiv2\t500000000\t         2.65 ns/op\nBenchmarkDiv4\t100000000\t         3.53 ns/op\nBenchmarkMod1\t500000000\t         2.06 ns/op\nBenchmarkMod2\t100000000\t         5.29 ns/op\nBenchmarkMod4\t100000000\t         7.64 ns/op",
			"disapproval": false,
			"date": "2012-11-11 11:25:19.446060",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some minor suggestions. I don't feel qualified to review the gc changes, apart from observing the benchmark numbers are impressive.\n\npando(~/go/test/bench/go) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkDiv1             43            3  -92.68%\nBenchmarkDiv2             65            4  -93.07%\nBenchmarkDiv3             65           21  -67.80%\nBenchmarkDiv4             65            6  -90.79%\nBenchmarkDiv10            65           24  -63.17%\nBenchmarkUDiv1            45            3  -93.34%\nBenchmarkUDiv2            65            3  -94.61%\nBenchmarkUDiv3            65           17  -73.77%\nBenchmarkUDiv4            65            3  -94.61%\nBenchmarkUDiv10           65           17  -73.77%\nBenchmarkMod1             45            3  -92.23%\nBenchmarkMod2             62            9  -85.49%\nBenchmarkMod3             62           25  -59.71%\nBenchmarkMod4             62           13  -79.61%\nBenchmarkMod10            62           29  -53.24%\n\nhttps://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode894\nsrc/cmd/gc/walk.c:894: * on 386, rewrite float ops into l = l op r.\nshould this be 386/arm ?\n\nhttps://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode961\nsrc/cmd/gc/walk.c:961: }\nwhy not move the block into this switch then push the default down to the bottom of the switch and make goto ret; unconditional.\n\nhttps://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode2899\nsrc/cmd/gc/walk.c:2899: // by a constant\nnit: maybe move this comment to like 2908\n\nhttps://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode2910\nsrc/cmd/gc/walk.c:2910: // just sign bit\ni know this came from 6g, but can the comment be improved ? ie.\n\n// nothing to do because divisor is larger than operand ?",
			"disapproval": false,
			"date": "2012-11-11 22:51:51.979730",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-11 11:24:17.012600",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 386 (actually a Core Quad with GOARCH=386)\r\n\r\nbenchmark         old ns/op    new ns/op    delta\r\nBenchmarkDiv1             7            0.43  -93.97%\r\nBenchmarkDiv2             7            1.79  -75.41%\r\nBenchmarkDiv4             7            2.71  -61.99%\r\nBenchmarkDiv10            7            7   -2.47%\r\nBenchmarkMod1             7            0.86  -88.79%\r\nBenchmarkMod2             7            3.69  -51.19%\r\nBenchmarkMod4             7            3.90  -49.28%\r\nBenchmarkMod10            7            7   -1.33%\r\n",
			"disapproval": false,
			"date": "2012-11-11 12:15:39.612290",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There may be an error with patch set #8. ./all.bash fails the second phase with\n\n# runtime/cgo\ncannot load imported symbols from ELF file $WORK/runtime/cgo/_obj/_cgo_.o: length of symbol section is not a multiple of SymSize",
			"disapproval": false,
			"date": "2012-11-12 04:13:21.480170",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is all awesome, but, don't we already know that some of these are more\r\nthan special...\r\n\r\ndiv 1 means noop\r\ndiv 2 means shift by 1\r\ndiv 4 means shift by 2\r\nmod 1 means 0\r\nmod 2 means x & 1\r\nmod 4 means x & 3\r\n\r\nOn Sun, Nov 11, 2012 at 5:51 PM, <dave@cheney.net> wrote:\r\n\r\n> Some minor suggestions. I don't feel qualified to review the gc changes,\r\n> apart from observing the benchmark numbers are impressive.\r\n>\r\n> pando(~/go/test/bench/go) % ~/go/misc/benchcmp {old,new}.txt\r\n>\r\n> benchmark          old ns/op    new ns/op    delta\r\n> BenchmarkDiv1             43            3  -92.68%\r\n> BenchmarkDiv2             65            4  -93.07%\r\n> BenchmarkDiv3             65           21  -67.80%\r\n> BenchmarkDiv4             65            6  -90.79%\r\n> BenchmarkDiv10            65           24  -63.17%\r\n> BenchmarkUDiv1            45            3  -93.34%\r\n> BenchmarkUDiv2            65            3  -94.61%\r\n> BenchmarkUDiv3            65           17  -73.77%\r\n> BenchmarkUDiv4            65            3  -94.61%\r\n> BenchmarkUDiv10           65           17  -73.77%\r\n> BenchmarkMod1             45            3  -92.23%\r\n> BenchmarkMod2             62            9  -85.49%\r\n> BenchmarkMod3             62           25  -59.71%\r\n> BenchmarkMod4             62           13  -79.61%\r\n> BenchmarkMod10            62           29  -53.24%\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6819123/diff/13001/src/**cmd/gc/walk.c<https://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c>\r\n> File src/cmd/gc/walk.c (right):\r\n>\r\n> https://codereview.appspot.**com/6819123/diff/13001/src/**\r\n> cmd/gc/walk.c#newcode894<https://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode894>\r\n> src/cmd/gc/walk.c:894: * on 386, rewrite float ops into l = l op r.\r\n> should this be 386/arm ?\r\n>\r\n> https://codereview.appspot.**com/6819123/diff/13001/src/**\r\n> cmd/gc/walk.c#newcode961<https://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode961>\r\n> src/cmd/gc/walk.c:961: }\r\n> why not move the block into this switch then push the default down to\r\n> the bottom of the switch and make goto ret; unconditional.\r\n>\r\n> https://codereview.appspot.**com/6819123/diff/13001/src/**\r\n> cmd/gc/walk.c#newcode2899<https://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode2899>\r\n> src/cmd/gc/walk.c:2899: // by a constant\r\n> nit: maybe move this comment to like 2908\r\n>\r\n> https://codereview.appspot.**com/6819123/diff/13001/src/**\r\n> cmd/gc/walk.c#newcode2910<https://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode2910>\r\n> src/cmd/gc/walk.c:2910: // just sign bit\r\n> i know this came from 6g, but can the comment be improved ? ie.\r\n>\r\n> // nothing to do because divisor is larger than operand ?\r\n>\r\n> https://codereview.appspot.**com/6819123/<https://codereview.appspot.com/6819123/>\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-11-11 23:19:39.909910",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-11 11:02:49.132710",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-11 11:20:30.814120",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow. \r\n\r\nOn 11/11/2012, at 22:25, remyoudompheng@gmail.com wrote:\r\n\r\n> The latest patch adds support for the /= %= case.\r\n> Results on benchamrks from CL 6819087\r\n> \r\n> Before (arm):\r\n> BenchmarkDiv1    20000000            25.3 ns/op\r\n> BenchmarkDiv2    20000000            38.2 ns/op\r\n> BenchmarkDiv4    20000000            38.2 ns/op\r\n> BenchmarkMod1    20000000            26.5 ns/op\r\n> BenchmarkMod2    20000000            36.5 ns/op\r\n> BenchmarkMod4    20000000            36.5 ns/op\r\n> \r\n> After (arm):\r\n> BenchmarkDiv1    500000000             1.77 ns/op\r\n> BenchmarkDiv2    500000000             2.65 ns/op\r\n> BenchmarkDiv4    100000000             3.53 ns/op\r\n> BenchmarkMod1    500000000             2.06 ns/op\r\n> BenchmarkMod2    100000000             5.29 ns/op\r\n> BenchmarkMod4    100000000             7.64 ns/op\r\n> \r\n> \r\n> http://codereview.appspot.com/6819123/\r\n",
			"disapproval": false,
			"date": "2012-11-11 12:03:33.825200",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-11 13:43:07.612910",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-12 06:56:05.067380",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-11 13:08:17.504090",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-12 00:38:03.126050",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttp://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode894\nsrc/cmd/gc/walk.c:894: * on 386, rewrite float ops into l = l op r.\nI don't know.\n\nhttp://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode961\nsrc/cmd/gc/walk.c:961: }\nIt made the diff smaller. but it's weird indeed.\n\nhttp://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode2899\nsrc/cmd/gc/walk.c:2899: // by a constant\nMakes a good description for the function.\n\nhttp://codereview.appspot.com/6819123/diff/13001/src/cmd/gc/walk.c#newcode2910\nsrc/cmd/gc/walk.c:2910: // just sign bit\ni'm not even sure what it means. We could add a special treatment here.",
			"disapproval": false,
			"date": "2012-11-12 06:55:23.752960",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you, patch set #9 works well.\n\nlinux/arm:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   45683930000  46160431000   +1.04%\nBenchmarkFannkuch11     31897766000  32261871000   +1.14%\nBenchmarkGobDecode        114538550    116271950   +1.51%\nBenchmarkGobEncode         57059940     55352780   -2.99%\nBenchmarkGzip            5586822000   5547333000   -0.71%\nBenchmarkGunzip          1000793000    999066200   -0.17%\nBenchmarkJSONEncode       674365200    660949600   -1.99%\nBenchmarkJSONDecode      1574219000   1392120000  -11.57%\nBenchmarkMandelbrot200     45697620     45659180   -0.08%\nBenchmarkParse             55767820     56271380   +0.90%\nBenchmarkRevcomp          118286100    129815600   +9.75%\nBenchmarkTemplate        1715119000   1657440000   -3.36%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.70         6.60    0.99x\nBenchmarkGobEncode            13.45        13.87    1.03x\nBenchmarkGzip                  3.47         3.50    1.01x\nBenchmarkGunzip               19.39        19.42    1.00x\nBenchmarkJSONEncode            2.88         2.94    1.02x\nBenchmarkJSONDecode            1.23         1.39    1.13x\nBenchmarkParse                 1.04         1.03    0.99x\nBenchmarkRevcomp              21.49        19.58    0.91x\nBenchmarkTemplate              1.13         1.17    1.04x",
			"disapproval": false,
			"date": "2012-11-12 07:34:14.786350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Added unsigned magic multiply treatment:\n* 32-bit case is suboptimal because it needs a 32*32->64 bit multiply for which we don't have a portable AST representation (other than uint64 product) but would be faster (64bit*64bit needs 3 MUL, 32*32->64 needs one MUL).\n* 64-bit case is not implemented and left to 6g (it would need a 128-bit value).\n\nIn the benchmarks (UDiv is uint32, UDivh is uint16):\n\n386\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkUDiv10                6            3  -54.78%\nBenchmarkUDiv123456            6            6   +0.29%\nBenchmarkUDivh10               7            2  -67.00%\nBenchmarkUDivh123              7            3  -50.25%\n\narm\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkUDiv10               43           10  -74.65%\nBenchmarkUDiv123456           37           13  -64.10%\nBenchmarkUDivh10              38            9  -74.40%\nBenchmarkUDivh123             38           13  -64.66%\n\n5g generates codes like this for 16-bit division (R3 /= 10).\n\n0572 (divmul_test.go:129) MOVHU         R3,R0\n0573 (divmul_test.go:129) MOVHU         R0,R1\n0574 (divmul_test.go:129) MOVW          R1,R0\n0575 (divmul_test.go:129) MOVW          $52429,R1\n0576 (divmul_test.go:129) MULU          R1,R0,R0\n0577 (divmul_test.go:129) MOVW          R0>>19,R0\n0578 (divmul_test.go:129) MOVHU         R0,R1\n0579 (divmul_test.go:129) MOVHU         R1,R3\n\nIt could be simplified to\n  MOVHU R3, R0\n  MOVW $52429, R1\n  MULU R1, R0, R0\n  MOVW R0>>19, R0\n  MOVHU R0, R3",
			"disapproval": false,
			"date": "2012-11-11 13:17:17.438890",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Added the signed magic multiply. Feel free to benchmark. Adding support for constants in cgen64.c for OMUL could be useful to improve further.",
			"disapproval": false,
			"date": "2012-11-11 13:43:48.786120",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure why JSONDecode moves. Does it use division or is it an effect of stack size changes?",
			"disapproval": false,
			"date": "2012-11-13 06:51:30.558510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "patch set 11 fails for me on linux/386\n\n220887(~/go/src) % go run ~/go/test/ken/modconst.go \nu8 121 121 60 1\npanic: fail\n\ngoroutine 1 [running]:\nmain.u8test(0x23c7979, 0xb0bff12)\n        /home/dfc/go/test/ken/modconst.go:578 +0xee\nmain.u8run()\n        /home/dfc/go/test/ken/modconst.go:613 +0x313\nmain.main()\n        /home/dfc/go/test/ken/modconst.go:630 +0x3f\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n        /home/dfc/go/src/pkg/runtime/proc.c:225\nexit status 2",
			"disapproval": false,
			"date": "2012-11-15 11:37:56.145930",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll add in some debugging and see.\r\n\r\nAlso, https://codereview.appspot.com/6842045/\r\n\r\nOn Tue, Nov 13, 2012 at 5:51 PM,  <remyoudompheng@gmail.com> wrote:\r\n> I'm not sure why JSONDecode moves. Does it use division or is it an\r\n> effect of stack size changes?\r\n>\r\n> http://codereview.appspot.com/6819123/\r\n",
			"disapproval": false,
			"date": "2012-11-13 06:52:41.182600",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "here is an additional datapoint from linux/386\n\n220887(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    2147483647   2147483647   +0.24%\nBenchmarkFannkuch11      2147483647   2147483647   -0.84%\nBenchmarkGobDecode        108116600    108685200   +0.53%\nBenchmarkGobEncode         45225340     46541140   +2.91%\nBenchmarkGzip            2147483647   2147483647   +0.30%\nBenchmarkGunzip           603468800    600955000   -0.42%\nBenchmarkJSONEncode       421999200    765123600  +81.31%\nBenchmarkJSONDecode      1043933000   1255016000  +20.22%\nBenchmarkMandelbrot200     54298660     54281840   -0.03%\nBenchmarkParse             37363320     37803220   +1.18%\nBenchmarkRevcomp         2147483647   2147483647   +3.66%\nBenchmarkTemplate        1478883000   1601209000   +8.27%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             7.10         7.06    0.99x\nBenchmarkGobEncode            16.97        16.49    0.97x\nBenchmarkGzip                  5.83         5.81    1.00x\nBenchmarkGunzip               32.16        32.29    1.00x\nBenchmarkJSONEncode            4.60         2.54    0.55x\nBenchmarkJSONDecode            1.86         1.55    0.83x\nBenchmarkParse                 1.55         1.53    0.99x\nBenchmarkRevcomp              52.19        50.35    0.96x\nBenchmarkTemplate              1.31         1.21    0.92x\n\nPerhaps walkdiv should be skipped for 386 ?",
			"disapproval": false,
			"date": "2012-11-13 21:20:24.641940",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wonderful. Any idea why\n\nBenchmarkUint64Mod13\n\nregresses on arm and i386 ?",
			"disapproval": false,
			"date": "2012-11-17 02:59:06.393420",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, LGTM with thanks. I think it is important to wait for Ian Nigel or Russ before committing. \r\n\r\nOn 21/11/2012, at 18:28, remyoudompheng@gmail.com wrote:\r\n\r\n> I did not take a look yet. I suppose there is one more instruction or\r\n> something.\r\n> \r\n> Does it look good to you at least?\r\n> \r\n> http://codereview.appspot.com/6819123/\r\n",
			"disapproval": false,
			"date": "2012-11-21 07:33:40.766050",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I did not take a look yet. I suppose there is one more instruction or something.\n\nDoes it look good to you at least?",
			"disapproval": false,
			"date": "2012-11-21 07:28:54.454030",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The previous comment notwithstanding, the 386 regression is gone in patchset 11\n\n220887(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    2147483647   2147483647   -0.06%\nBenchmarkFannkuch11      2147483647   2147483647   -0.11%\nBenchmarkGobDecode        107863800    107488150   -0.35%\nBenchmarkGobEncode         46741000     45501680   -2.65%\nBenchmarkGzip            2147483647   2147483647   -0.11%\nBenchmarkGunzip           601875800    602400400   +0.09%\nBenchmarkJSONEncode       726187800    722774600   -0.47%\nBenchmarkJSONDecode      1154932000   1045558000   -9.47%\nBenchmarkMandelbrot200     54279720     54285060   +0.01%\nBenchmarkParse             38234860     36985280   -3.27%\nBenchmarkRevcomp         2147483647   2147483647   -3.04%\nBenchmarkTemplate        1498506000   1470787000   -1.85%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             7.12         7.14    1.00x\nBenchmarkGobEncode            16.42        16.87    1.03x\nBenchmarkGzip                  5.83         5.84    1.00x\nBenchmarkGunzip               32.24        32.21    1.00x\nBenchmarkJSONEncode            2.67         2.68    1.00x\nBenchmarkJSONDecode            1.68         1.86    1.11x\nBenchmarkParse                 1.51         1.57    1.04x\nBenchmarkRevcomp              50.79        52.39    1.03x\nBenchmarkTemplate              1.29         1.32    1.02x",
			"disapproval": false,
			"date": "2012-11-15 11:45:12.183510",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The CL now implements ARM with less instructions (using the HMUL operation).\n\nGOARCH=amd64 (Core 2 Quad)\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkUint16Div1             0            0  -30.65%\nBenchmarkUint16Div2             0            0   +0.00%\nBenchmarkUint16Div4             0            0   +0.00%\nBenchmarkUint16Div13            3            3  +12.79%\nBenchmarkUint32Div1             0            0   +0.00%\nBenchmarkUint32Div2             0            0   +0.00%\nBenchmarkUint32Div4             0            0   +0.00%\nBenchmarkUint32Div13            3            2  -15.68%\nBenchmarkUint64Div1             0            0   +0.00%\nBenchmarkUint64Div2             0            0   +0.00%\nBenchmarkUint64Div4             0            0   +0.00%\nBenchmarkUint64Div13            4            4  -10.84%\nBenchmarkInt32Div1              0            0   +0.00%\nBenchmarkInt32Div2              2            1  -34.80%\nBenchmarkInt32Div4              3            2  -11.97%\nBenchmarkInt32Div13             3            4  +12.89%\nBenchmarkUint16Mod1             0            0   +0.00%\nBenchmarkUint16Mod2             0            0   +0.00%\nBenchmarkUint16Mod4             0            0   +0.00%\nBenchmarkUint16Mod13            7            7   +4.20%\nBenchmarkUint32Mod1             0            0   +0.00%\nBenchmarkUint32Mod2             0            0   +0.00%\nBenchmarkUint32Mod4             0            0   +0.00%\nBenchmarkUint32Mod13            5            4  -13.99%\nBenchmarkUint64Mod1             0            1  +36.05%\nBenchmarkUint64Mod2             1            0  -14.00%\nBenchmarkUint64Mod4             0            0   +0.00%\nBenchmarkUint64Mod13            8            7  -10.73%\nBenchmarkInt32Mod1              0            0   +0.00%\nBenchmarkInt32Mod2              4            2  -48.80%\nBenchmarkInt32Mod4              4            2  -42.77%\nBenchmarkInt32Mod13             6            5  -11.32%\n\nGOARCH=arm (Odroid-x)\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkUint16Div1            30            3  -88.23%\nBenchmarkUint16Div2            38            3  -90.41%\nBenchmarkUint16Div4            38            3  -90.41%\nBenchmarkUint16Div13           38            9  -74.25%\nBenchmarkUint32Div1            25            1  -93.15%\nBenchmarkUint32Div2            38            2  -94.61%\nBenchmarkUint32Div4            38            2  -94.61%\nBenchmarkUint32Div13           38            4  -89.06%\nBenchmarkUint64Div1            51            1  -96.56%\nBenchmarkUint64Div2            64            3  -94.96%\nBenchmarkUint64Div4            64            3  -95.01%\nBenchmarkUint64Div13           64           64   +0.00%\nBenchmarkInt32Div1             25            1  -93.04%\nBenchmarkInt32Div2             38            2  -93.06%\nBenchmarkInt32Div4             38            3  -90.76%\nBenchmarkInt32Div13            38            5  -84.61%\nBenchmarkUint16Mod1            30            3  -87.77%\nBenchmarkUint16Mod2            38            3  -90.41%\nBenchmarkUint16Mod4            38            3  -90.41%\nBenchmarkUint16Mod13           38           17  -54.64%\nBenchmarkUint32Mod1            25            2  -92.05%\nBenchmarkUint32Mod2            35            2  -94.26%\nBenchmarkUint32Mod4            35            2  -94.26%\nBenchmarkUint32Mod13           35            7  -78.69%\nBenchmarkUint64Mod1            51            2  -96.02%\nBenchmarkUint64Mod2            64            4  -93.63%\nBenchmarkUint64Mod4            64            4  -93.63%\nBenchmarkUint64Mod13           64           72  +12.67%\nBenchmarkInt32Mod1             26            2  -92.23%\nBenchmarkInt32Mod2             36            3  -90.60%\nBenchmarkInt32Mod4             36            3  -89.18%\nBenchmarkInt32Mod13            36            9  -75.04%\n\nGOARCH=386 (Core 2 Quad)\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkUint16Div1             7            0  -94.39%\nBenchmarkUint16Div2             7            0  -88.74%\nBenchmarkUint16Div4             7            0  -88.74%\nBenchmarkUint16Div13            7            3  -58.32%\nBenchmarkUint32Div1             6            0  -93.79%\nBenchmarkUint32Div2             6            0  -87.57%\nBenchmarkUint32Div4             6            0  -87.57%\nBenchmarkUint32Div13            6            3  -51.59%\nBenchmarkUint64Div1            12            0  -93.06%\nBenchmarkUint64Div2            12            1  -87.26%\nBenchmarkUint64Div4            12            1  -87.26%\nBenchmarkUint64Div13           12           12   +0.00%\nBenchmarkInt32Div1              7            0  -93.89%\nBenchmarkInt32Div2              7            1  -75.76%\nBenchmarkInt32Div4              7            2  -61.31%\nBenchmarkInt32Div13             7            3  -45.03%\nBenchmarkUint16Mod1             7            0  -88.77%\nBenchmarkUint16Mod2             7            0  -88.77%\nBenchmarkUint16Mod4             7            0  -88.77%\nBenchmarkUint16Mod13            7            5  -31.07%\nBenchmarkUint32Mod1             6            0  -87.63%\nBenchmarkUint32Mod2             6            0  -87.66%\nBenchmarkUint32Mod4             6            0  -87.64%\nBenchmarkUint32Mod13            6            5  -27.69%\nBenchmarkUint64Mod1            12            0  -93.06%\nBenchmarkUint64Mod2            12            0  -93.06%\nBenchmarkUint64Mod4            12            0  -93.06%\nBenchmarkUint64Mod13           12           16  +31.45%\nBenchmarkInt32Mod1              7            0  -88.82%\nBenchmarkInt32Mod2              7            2  -69.40%\nBenchmarkInt32Mod4              7            2  -63.41%\nBenchmarkInt32Mod13             7            4  -35.29%",
			"disapproval": false,
			"date": "2012-11-17 00:27:01.244590",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, the latest patchset is a work in progress and it misses ARM support. It cannot work properly due to a bug in 8l. See CL 6846057.\n\nI'll upload a complete patch later.",
			"disapproval": false,
			"date": "2012-11-15 15:45:25.856330",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-17 00:21:54.983100",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "gentle ping",
			"disapproval": false,
			"date": "2012-11-20 23:26:57.455100",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/cgen.c\nFile src/cmd/5g/cgen.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/cgen.c#newcode266\nsrc/cmd/5g/cgen.c:266: case OHMUL:\nOn 2012/11/26 16:28:34, rsc wrote:\n> tab please\n\nDone.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/ggen.c\nFile src/cmd/5g/ggen.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/ggen.c#newcode478\nsrc/cmd/5g/ggen.c:478: *  res = (nl * nr) >> w\nOn 2012/11/26 16:28:34, rsc wrote:\n> s/w/wordsize/\n\nDone.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c\nFile src/cmd/6g/ggen.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode612\nsrc/cmd/6g/ggen.c:612: goto divbymul;\nOn 2012/11/26 16:28:34, rsc wrote:\n> Can delete this goto and the label.\n\nDone.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode614\nsrc/cmd/6g/ggen.c:614: divbymul:\nOn 2012/11/26 16:28:34, rsc wrote:\n> // Front end handled 32-bit division. We only need to handle 64-bit.\n\nDone.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode621\nsrc/cmd/6g/ggen.c:621: case TUINT8:\nOn 2012/11/26 16:28:34, rsc wrote:\n> delete these cases, leaving only TUINT64.\n\nDone.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode655\nsrc/cmd/6g/ggen.c:655: case TINT8:\nOn 2012/11/26 16:28:34, rsc wrote:\n> same\n\nDone.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/gc/walk.c#newcode959\nsrc/cmd/gc/walk.c:959: * rewrite div and mod into function calls\nOn 2012/11/26 16:28:34, rsc wrote:\n> rewrite 64-bit div and mod...\n\nDone.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/gc/walk.c#newcode2895\nsrc/cmd/gc/walk.c:2895: int pow; // if >= 0, nr is 1<<n\nOn 2012/11/26 16:28:34, rsc wrote:\n> 1<<pow?\n\nDone.",
			"disapproval": false,
			"date": "2012-11-26 21:18:55.417120",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you for the new comments.\n\nFor a future CL if you are looking for something fun: the unsigned magic division algorithm can be improved slightly: http://ridiculousfish.com/blog/posts/labor-of-division-episode-iii.html. Most Go code does not use unsigned integers anyway, so the benefit here is minimal.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/cgen.c\nFile src/cmd/5g/cgen.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/cgen.c#newcode266\nsrc/cmd/5g/cgen.c:266: case OHMUL:\ntab please\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/ggen.c\nFile src/cmd/5g/ggen.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/5g/ggen.c#newcode478\nsrc/cmd/5g/ggen.c:478: *  res = (nl * nr) >> w\ns/w/wordsize/\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c\nFile src/cmd/6g/ggen.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode612\nsrc/cmd/6g/ggen.c:612: goto divbymul;\nCan delete this goto and the label.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode614\nsrc/cmd/6g/ggen.c:614: divbymul:\n// Front end handled 32-bit division. We only need to handle 64-bit.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode621\nsrc/cmd/6g/ggen.c:621: case TUINT8:\ndelete these cases, leaving only TUINT64.\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/6g/ggen.c#newcode655\nsrc/cmd/6g/ggen.c:655: case TINT8:\nsame\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/gc/walk.c#newcode959\nsrc/cmd/gc/walk.c:959: * rewrite div and mod into function calls\nrewrite 64-bit div and mod...\n\nhttps://codereview.appspot.com/6819123/diff/16015/src/cmd/gc/walk.c#newcode2895\nsrc/cmd/gc/walk.c:2895: int pow; // if >= 0, nr is 1<<n\n1<<pow?",
			"disapproval": false,
			"date": "2012-11-26 16:28:34.594950",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"mtj@google.com",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8f9a26de2b20 ***\n\ncmd/gc: add division rewrite to walk pass.\n\nThis allows 5g and 8g to benefit from the rewrite as shifts\nor magic multiplies. The 64-bit arithmetic is not handled there,\nand left in 6g.\n\nUpdate issue 2230.\n\nR=golang-dev, dave, mtj, iant, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6819123",
			"disapproval": false,
			"date": "2012-11-26 22:45:29.453510",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6819123: cmd/gc: add division rewrite to walk pass.",
	"created": "2012-11-11 10:40:21.949740",
	"patchsets": [
		1,
		2001,
		1004,
		5003,
		2002,
		9001,
		13001,
		14003,
		7,
		18001,
		23001,
		26002,
		20023,
		26003,
		16015,
		22003,
		22004
	],
	"modified": "2013-07-07 20:53:19.542590",
	"closed": true,
	"issue": 6819123
}