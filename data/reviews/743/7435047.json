{
	"description": "exp/ssa/interp: uncomment tests now passing thanks to recent typechecker fixes.\n\nAlso: add support for pointer conversions, covered by one new test.",
	"cc": [
		"gri@golang.org",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-01 01:13:13.643220",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. Be aware this might cause some the arm builders to take longer\r\nto complete the test. We can't see this at the moment as they are all\r\nbroken ATM. If this does happen we'll fix it then.\r\n\r\nOn Fri, Mar 1, 2013 at 12:14 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> LGTM\r\n>\r\n>\r\n> On Thu, Feb 28, 2013 at 5:13 PM, <adonovan@google.com> wrote:\r\n>>\r\n>> Reviewers: gri,\r\n>>\r\n>> Message:\r\n>> Hello gri@golang.org (cc: golang-dev@googlegroups.com),\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go/\r\n>>\r\n>>\r\n>> Description:\r\n>> exp/ssa/interp: uncomment tests now passing thanks to recent typechecker\r\n>> fixes.\r\n>>\r\n>> Please review this at https://codereview.appspot.com/7435047/\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/exp/ssa/interp/interp_test.go\r\n>>\r\n>>\r\n>> Index: src/pkg/exp/ssa/interp/interp_test.go\r\n>> ===================================================================\r\n>> --- a/src/pkg/exp/ssa/interp/interp_test.go\r\n>> +++ b/src/pkg/exp/ssa/interp/interp_test.go\r\n>> @@ -71,43 +71,40 @@\r\n>>         \"bigmap.go\",\r\n>>         \"func.go\",\r\n>>         \"reorder2.go\",\r\n>> -       // The following tests are disabled until the typechecker supports\r\n>> shifts correctly.\r\n>> -       // They can be enabled if you patch workaround\r\n>> https://codereview.appspot.com/7312068.\r\n>> -       // \"closure.go\",\r\n>> -       // \"gc.go\",\r\n>> -       // \"goprint.go\",  // doesn't actually assert anything\r\n>> -       // \"utf.go\",\r\n>> +       \"closure.go\",\r\n>> +       \"gc.go\",\r\n>> +       \"goprint.go\", // doesn't actually assert anything\r\n>> +       \"utf.go\",\r\n>>         \"method.go\",\r\n>> -       // \"char_lit.go\",\r\n>> -       //\"env.go\",\r\n>> -       // \"int_lit.go\",\r\n>> -       // \"string_lit.go\",\r\n>> -       // \"defer.go\",\r\n>> -       // \"typeswitch.go\",\r\n>> -       // \"stringrange.go\",\r\n>> -       // \"reorder.go\",\r\n>> +       \"char_lit.go\",\r\n>> +       \"env.go\",\r\n>> +       \"int_lit.go\",\r\n>> +       \"string_lit.go\",\r\n>> +       \"defer.go\",\r\n>> +       \"typeswitch.go\",\r\n>> +       \"stringrange.go\",\r\n>> +       \"reorder.go\",\r\n>>         \"literal.go\",\r\n>> -       // \"nul1.go\",\r\n>> -       // \"zerodivide.go\",\r\n>> -       // \"convert.go\",\r\n>> +       \"nul1.go\",\r\n>> +       \"zerodivide.go\",\r\n>> +       \"convert.go\",\r\n>>         \"convT2X.go\",\r\n>> -       // \"switch.go\",\r\n>> -       // \"initialize.go\",\r\n>> -       // \"blank.go\", // partly disabled; TODO(adonovan): skip blank\r\n>> fields in struct{_} equivalence.\r\n>> -       // \"map.go\",\r\n>> -       // \"bom.go\",\r\n>> -       // \"closedchan.go\",\r\n>> -       // \"divide.go\",\r\n>> -       // \"rename.go\",\r\n>> -       // \"const3.go\",\r\n>> -       // \"nil.go\",\r\n>> -       // \"recover.go\", // partly disabled; TODO(adonovan): fix.\r\n>> +       \"initialize.go\",\r\n>> +       \"blank.go\", // partly disabled; TODO(adonovan): skip blank fields\r\n>> in struct{_} equivalence.\r\n>> +       \"map.go\",\r\n>> +       \"bom.go\",\r\n>> +       \"closedchan.go\",\r\n>> +       \"divide.go\",\r\n>> +       \"rename.go\",\r\n>> +       \"const3.go\",\r\n>> +       \"nil.go\",\r\n>> +       \"recover.go\", // partly disabled; TODO(adonovan): fix.\r\n>>         // Slow tests follow.\r\n>> -       // \"cmplxdivide.go cmplxdivide1.go\",\r\n>> -       // \"append.go\",\r\n>> -       // \"crlf.go\", // doesn't actually assert anything\r\n>> -       //\"typeswitch1.go\",\r\n>> -       // \"floatcmp.go\",\r\n>> +       \"cmplxdivide.go cmplxdivide1.go\",\r\n>> +       \"append.go\",\r\n>> +       \"crlf.go\", // doesn't actually assert anything\r\n>> +       \"typeswitch1.go\",\r\n>> +       \"floatcmp.go\",\r\n>>         \"gc1.go\",\r\n>>\r\n>>         // Working, but not worth enabling:\r\n>> @@ -119,22 +116,28 @@\r\n>>         // \"const.go\",     // works but for but one bug: constant folder\r\n>> doesn't consider representations.\r\n>>         // \"init1.go\",     // too slow (80s) and not that interesting.\r\n>> Cheats on ReadMemStats check too.\r\n>>\r\n>> +       // Typechecker failures:\r\n>> +       // \"switch.go\",    // bug re: switch ... { case 1.0:... case 1:...\r\n>> }\r\n>> +       // \"iota.go\",      // crash\r\n>> +       // \"rune.go\",      // error re: rune as index\r\n>> +       // \"64bit.go\",     // error re: comparison\r\n>> +       // \"cmp.go\",       // error re: comparison\r\n>> +       // \"rotate.go rotate0.go\", // error re: shifts\r\n>> +       // \"rotate.go rotate1.go\", // error re: shifts\r\n>> +       // \"rotate.go rotate2.go\", // error re: shifts\r\n>> +       // \"rotate.go rotate3.go\", // error re: shifts\r\n>> +       // \"run.go\",       // produces wrong constant for bufio.runeError;\r\n>> also, not really a test.\r\n>> +\r\n>>         // Broken.  TODO(adonovan): fix.\r\n>>         // ddd.go          // builder: variadic methods\r\n>>         // copy.go         // very slow; but with N=4 quickly crashes,\r\n>> slice index out of range.\r\n>>         // nilptr.go       // interp: V > uintptr not implemented. Slow\r\n>> test, lots of mem\r\n>> -       // iota.go         // typechecker: crash\r\n>> -       // rotate.go       // typechecker: shifts\r\n>> -       // rune.go         // typechecker: shifts\r\n>> -       // 64bit.go        // typechecker: shifts\r\n>> -       // cmp.go          // typechecker: comparison\r\n>>         // recover1.go     // error: \"spurious recover\"\r\n>>         // recover2.go     // panic: interface conversion: string is not\r\n>> error: missing method Error\r\n>>         // recover3.go     // logic errors: panicked with wrong Error.\r\n>>         // simassign.go    // requires support for f(f(x,y)).\r\n>>         // method3.go      // Fails dynamically; (*T).f vs (T).f are\r\n>> distinct methods.\r\n>>         // ddd2.go         // fails\r\n>> -       // run.go          // rtype.NumOut not yet implemented.  Not\r\n>> really a test though.\r\n>>         // args.go         // works, but requires specific os.Args from\r\n>> the driver.\r\n>>         // index.go        // a template, not a real test.\r\n>>         // mallocfin.go    // SetFinalizer not implemented.\r\n>> @@ -145,7 +148,7 @@\r\n>>\r\n>>  // These are files in exp/ssa/interp/testdata/.\r\n>>  var testdataTests = []string{\r\n>> -// \"coverage.go\",  // shifts\r\n>> +       \"coverage.go\",\r\n>>  }\r\n>>\r\n>>  func run(t *testing.T, dir, input string) bool {\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-01 01:31:35.082910",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thu, Feb 28, 2013 at 5:13 PM, <adonovan@google.com> wrote:\r\n\r\n> Reviewers: gri,\r\n>\r\n> Message:\r\n> Hello gri@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> exp/ssa/interp: uncomment tests now passing thanks to recent typechecker\r\n> fixes.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7435047/<https://codereview.appspot.com/7435047/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/exp/ssa/interp/interp_**test.go\r\n>\r\n>\r\n> Index: src/pkg/exp/ssa/interp/interp_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/exp/ssa/interp/**interp_test.go\r\n> +++ b/src/pkg/exp/ssa/interp/**interp_test.go\r\n> @@ -71,43 +71,40 @@\r\n>         \"bigmap.go\",\r\n>         \"func.go\",\r\n>         \"reorder2.go\",\r\n> -       // The following tests are disabled until the typechecker supports\r\n> shifts correctly.\r\n> -       // They can be enabled if you patch workaround\r\n> https://codereview.appspot.**com/7312068<https://codereview.appspot.com/7312068>\r\n> .\r\n> -       // \"closure.go\",\r\n> -       // \"gc.go\",\r\n> -       // \"goprint.go\",  // doesn't actually assert anything\r\n> -       // \"utf.go\",\r\n> +       \"closure.go\",\r\n> +       \"gc.go\",\r\n> +       \"goprint.go\", // doesn't actually assert anything\r\n> +       \"utf.go\",\r\n>         \"method.go\",\r\n> -       // \"char_lit.go\",\r\n> -       //\"env.go\",\r\n> -       // \"int_lit.go\",\r\n> -       // \"string_lit.go\",\r\n> -       // \"defer.go\",\r\n> -       // \"typeswitch.go\",\r\n> -       // \"stringrange.go\",\r\n> -       // \"reorder.go\",\r\n> +       \"char_lit.go\",\r\n> +       \"env.go\",\r\n> +       \"int_lit.go\",\r\n> +       \"string_lit.go\",\r\n> +       \"defer.go\",\r\n> +       \"typeswitch.go\",\r\n> +       \"stringrange.go\",\r\n> +       \"reorder.go\",\r\n>         \"literal.go\",\r\n> -       // \"nul1.go\",\r\n> -       // \"zerodivide.go\",\r\n> -       // \"convert.go\",\r\n> +       \"nul1.go\",\r\n> +       \"zerodivide.go\",\r\n> +       \"convert.go\",\r\n>         \"convT2X.go\",\r\n> -       // \"switch.go\",\r\n> -       // \"initialize.go\",\r\n> -       // \"blank.go\", // partly disabled; TODO(adonovan): skip blank\r\n> fields in struct{_} equivalence.\r\n> -       // \"map.go\",\r\n> -       // \"bom.go\",\r\n> -       // \"closedchan.go\",\r\n> -       // \"divide.go\",\r\n> -       // \"rename.go\",\r\n> -       // \"const3.go\",\r\n> -       // \"nil.go\",\r\n> -       // \"recover.go\", // partly disabled; TODO(adonovan): fix.\r\n> +       \"initialize.go\",\r\n> +       \"blank.go\", // partly disabled; TODO(adonovan): skip blank fields\r\n> in struct{_} equivalence.\r\n> +       \"map.go\",\r\n> +       \"bom.go\",\r\n> +       \"closedchan.go\",\r\n> +       \"divide.go\",\r\n> +       \"rename.go\",\r\n> +       \"const3.go\",\r\n> +       \"nil.go\",\r\n> +       \"recover.go\", // partly disabled; TODO(adonovan): fix.\r\n>         // Slow tests follow.\r\n> -       // \"cmplxdivide.go cmplxdivide1.go\",\r\n> -       // \"append.go\",\r\n> -       // \"crlf.go\", // doesn't actually assert anything\r\n> -       //\"typeswitch1.go\",\r\n> -       // \"floatcmp.go\",\r\n> +       \"cmplxdivide.go cmplxdivide1.go\",\r\n> +       \"append.go\",\r\n> +       \"crlf.go\", // doesn't actually assert anything\r\n> +       \"typeswitch1.go\",\r\n> +       \"floatcmp.go\",\r\n>         \"gc1.go\",\r\n>\r\n>         // Working, but not worth enabling:\r\n> @@ -119,22 +116,28 @@\r\n>         // \"const.go\",     // works but for but one bug: constant folder\r\n> doesn't consider representations.\r\n>         // \"init1.go\",     // too slow (80s) and not that interesting.\r\n> Cheats on ReadMemStats check too.\r\n>\r\n> +       // Typechecker failures:\r\n> +       // \"switch.go\",    // bug re: switch ... { case 1.0:... case 1:...\r\n> }\r\n> +       // \"iota.go\",      // crash\r\n> +       // \"rune.go\",      // error re: rune as index\r\n> +       // \"64bit.go\",     // error re: comparison\r\n> +       // \"cmp.go\",       // error re: comparison\r\n> +       // \"rotate.go rotate0.go\", // error re: shifts\r\n> +       // \"rotate.go rotate1.go\", // error re: shifts\r\n> +       // \"rotate.go rotate2.go\", // error re: shifts\r\n> +       // \"rotate.go rotate3.go\", // error re: shifts\r\n> +       // \"run.go\",       // produces wrong constant for bufio.runeError;\r\n> also, not really a test.\r\n> +\r\n>         // Broken.  TODO(adonovan): fix.\r\n>         // ddd.go          // builder: variadic methods\r\n>         // copy.go         // very slow; but with N=4 quickly crashes,\r\n> slice index out of range.\r\n>         // nilptr.go       // interp: V > uintptr not implemented. Slow\r\n> test, lots of mem\r\n> -       // iota.go         // typechecker: crash\r\n> -       // rotate.go       // typechecker: shifts\r\n> -       // rune.go         // typechecker: shifts\r\n> -       // 64bit.go        // typechecker: shifts\r\n> -       // cmp.go          // typechecker: comparison\r\n>         // recover1.go     // error: \"spurious recover\"\r\n>         // recover2.go     // panic: interface conversion: string is not\r\n> error: missing method Error\r\n>         // recover3.go     // logic errors: panicked with wrong Error.\r\n>         // simassign.go    // requires support for f(f(x,y)).\r\n>         // method3.go      // Fails dynamically; (*T).f vs (T).f are\r\n> distinct methods.\r\n>         // ddd2.go         // fails\r\n> -       // run.go          // rtype.NumOut not yet implemented.  Not\r\n> really a test though.\r\n>         // args.go         // works, but requires specific os.Args from\r\n> the driver.\r\n>         // index.go        // a template, not a real test.\r\n>         // mallocfin.go    // SetFinalizer not implemented.\r\n> @@ -145,7 +148,7 @@\r\n>\r\n>  // These are files in exp/ssa/interp/testdata/.\r\n>  var testdataTests = []string{\r\n> -// \"coverage.go\",  // shifts\r\n> +       \"coverage.go\",\r\n>  }\r\n>\r\n>  func run(t *testing.T, dir, input string) bool {\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-01 01:14:15.720860",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=af0fed2b58dc ***\n\nexp/ssa/interp: uncomment tests now passing thanks to recent typechecker fixes.\n\nAlso: add support for pointer conversions, covered by one new test.\n\nR=gri, bradfitz, dave\nCC=golang-dev\nhttps://codereview.appspot.com/7435047",
			"disapproval": false,
			"date": "2013-03-01 17:51:37.195230",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7435047: exp/ssa/interp: uncomment tests now passing thanks to r...",
	"created": "2013-02-28 23:44:30.958630",
	"patchsets": [
		1,
		2001,
		5001,
		9002
	],
	"modified": "2013-03-01 17:51:39.433630",
	"closed": true,
	"issue": 7435047
}