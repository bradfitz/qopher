{
	"description": "strings: Optimized Replace to be 2x faster.\r\n\r\nThe main idea is to avoid replace count calculation.\r\nIf len(old) <= len(new) , we make a string with 0 length and a cap of len(s), otherwise we make a string with 0 length and a cap of len(s)*1.5.\r\n\r\nThe downside is a small proportion of memory will be wasted. but if the len(old) == len(new), there would be no tradeoff at all.\r\n\r\nbenchmark                    old ns/op    new ns/op    delta\r\nBenchmarkByteByteReplaces         8480         1364  -83.92%\r\nBenchmarkReplaceByteByte         10015         3806  -62.00%\r\nBenchmarkReplaceDefault          13495         7356  -45.49%\r\nBenchmarkReplaceOldEmpty        101105        45022  -55.47%\r\n\r\nbenchmark                     old MB/s     new MB/s  speedup\r\nBenchmarkReplaceByteByte        149.77       394.09    2.63x\r\nBenchmarkReplaceDefault         111.15       203.90    1.83x\r\nBenchmarkReplaceOldEmpty         14.84        33.32    2.25x",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-03 08:41:53.533780",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with Brad. I appreciate the effort, but it's too late to be rewriting core library routines like this. It's too easy for bugs to creep in. The explode change was relatively straightforward, and it can still get finished, but let's stop there.",
			"disapproval": false,
			"date": "2013-03-04 15:28:06.940490",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go#newcode644\nsrc/pkg/strings/strings.go:644: func Replace(s, old, new string, n int) string {\nMaybe this whole function should be rewritten as:\n\nreturn NewReplacer(old, new).ReplaceN(new, n)\n\nOr at least when n == -1.\n\nBecause I feel like we've already done some of these optimizations in that code path.",
			"disapproval": false,
			"date": "2013-03-03 17:00:28.863630",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/03 17:00:28, bradfitz wrote:\n> https://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go\n> File src/pkg/strings/strings.go (right):\n> \n> https://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go#newcode644\n> src/pkg/strings/strings.go:644: func Replace(s, old, new string, n int) string {\n> Maybe this whole function should be rewritten as:\n> \n> return NewReplacer(old, new).ReplaceN(new, n)\n> \n> Or at least when n == -1.\n> \n> Because I feel like we've already done some of these optimizations in that code\n> path.\nActually I started with optimizing singleStringReplacer first, but the result is not as good, so I drop that.\n\nI think maybe because allocating a Replacer is heavy, maybe Replacer should only be used when multiple replacement on a string need to be done.",
			"disapproval": false,
			"date": "2013-03-04 01:12:48.973870",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm afraid it's probably a little too close to Go 1.1's release right now\r\nto be spending too much time optimizing library functions which don't have\r\na large and/or global effect.\r\n\r\nOptimizing strings functions more seems marginal and local at best.\r\n\r\nFeel free to file bugs, though, so this isn't forgotten for Go 1.2.  (or Go\r\n1.1, if people find time to review this, but a lot of people are busy right\r\nnow...)\r\n\r\n\r\nOn Sun, Mar 3, 2013 at 5:12 PM, <coocood@gmail.com> wrote:\r\n\r\n> On 2013/03/03 17:00:28, bradfitz wrote:\r\n>\r\n> https://codereview.appspot.**com/7432050/diff/18001/src/**\r\n> pkg/strings/strings.go<https://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go>\r\n>\r\n>> File src/pkg/strings/strings.go (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7432050/diff/18001/src/**\r\n> pkg/strings/strings.go#**newcode644<https://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go#newcode644>\r\n>\r\n>> src/pkg/strings/strings.go:**644: func Replace(s, old, new string, n\r\n>>\r\n> int) string {\r\n>\r\n>> Maybe this whole function should be rewritten as:\r\n>>\r\n>\r\n>  return NewReplacer(old, new).ReplaceN(new, n)\r\n>>\r\n>\r\n>  Or at least when n == -1.\r\n>>\r\n>\r\n>  Because I feel like we've already done some of these optimizations in\r\n>>\r\n> that code\r\n>\r\n>> path.\r\n>>\r\n> Actually I started with optimizing singleStringReplacer first, but the\r\n> result is not as good, so I drop that.\r\n>\r\n> I think maybe because allocating a Replacer is heavy, maybe Replacer\r\n> should only be used when multiple replacement on a string need to be\r\n> done.\r\n>\r\n> https://codereview.appspot.**com/7432050/<https://codereview.appspot.com/7432050/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-04 01:27:18.411120",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/04 01:12:48, Ewan Chou wrote:\n> On 2013/03/03 17:00:28, bradfitz wrote:\n> > https://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go\n> > File src/pkg/strings/strings.go (right):\n> > \n> >\n> https://codereview.appspot.com/7432050/diff/18001/src/pkg/strings/strings.go#newcode644\n> > src/pkg/strings/strings.go:644: func Replace(s, old, new string, n int) string\n> {\n> > Maybe this whole function should be rewritten as:\n> > \n> > return NewReplacer(old, new).ReplaceN(new, n)\n> > \n> > Or at least when n == -1.\n> > \n> > Because I feel like we've already done some of these optimizations in that\n> code\n> > path.\n> Actually I started with optimizing singleStringReplacer first, but the result is\n> not as good, so I drop that.\n> \n> I think maybe because allocating a Replacer is heavy, maybe Replacer should only\n> be used when multiple replacement on a string need to be done.\n\nI mean singleStringReplacer is not fast when s is short or N is small.",
			"disapproval": false,
			"date": "2013-03-04 01:28:02.074670",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Q=wait\n\nEwan, did you still want to get this in?",
			"disapproval": false,
			"date": "2013-06-17 21:19:35.626040",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/17 21:19:35, bradfitz wrote:\n> Q=wait\n> \n> Ewan, did you still want to get this in?\n\nYes, do you have time to review it now?",
			"disapproval": false,
			"date": "2013-06-17 23:34:50.433320",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is starting to overlap too much with strings.NewReplacer and its selection of an algorithm.\n\nWhatever we do in strings.Replace, it seems like there will compromises: wasted CPU before, and wasted memory with this CL.\n\nI'd rather we not change the compromises.\n\nUsers who find this to be a bottleneck can use strings.NewReplacer.\n\nPerhaps we could make strings.Replace transparently call NewReplacer and keeps its result in a timed cached.  But I think that's even overkill.  If users profile and see the problem is Replace, they can switch to NewReplacer.",
			"disapproval": false,
			"date": "2013-06-21 20:29:49.691800",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Q=wait",
			"disapproval": false,
			"date": "2013-06-21 20:30:05.259750",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/21 20:30:05, bradfitz wrote:\n> Q=wait\n\nOK, I understand, but there would be no wasted memory when the old and new string has the same length.\nHow about I change it to only optimize same length cases?",
			"disapproval": false,
			"date": "2013-06-22 00:58:38.196860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please drop this CL. This is not important enough to be worth the complexity of maintaining more code.",
			"disapproval": false,
			"date": "2013-07-02 00:52:38.015230",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/02 00:52:38, rsc wrote:\n> Please drop this CL. This is not important enough to be worth the complexity of\n> maintaining more code.\n\nYes, it is a little too complex.\nDropped.",
			"disapproval": false,
			"date": "2013-07-02 02:21:26.970960",
			"approval": false
		}
	],
	"owner_email": "coocood@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Ewan Chou",
	"subject": "code review 7432050: strings: Optimized Replace to be 2x faster.",
	"created": "2013-03-03 08:36:46.202910",
	"patchsets": [
		1,
		29001
	],
	"modified": "2013-07-02 02:21:53.536180",
	"closed": true,
	"issue": 7432050
}