{
	"description": "go/types: \"missing return\" check\n\nImplementation closely based on Russ' CL 7440047.\n\nFuture work: The error messages could be better\n(e.g., instead of \"missing return\" it might say\n\"missing return (no default in switch)\", etc.).",
	"cc": [
		"adonovan@google.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-01 22:10:30.401130",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4ec840873df1 ***\n\ngo/types: \"missing return\" check\n\nImplementation closely based on Russ' CL 7440047.\n\nFuture work: The error messages could be better\n(e.g., instead of \"missing return\" it might say\n\"missing return (no default in switch)\", etc.).\n\nR=adonovan, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7437049",
			"disapproval": false,
			"date": "2013-03-04 22:40:37.027230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One problem with the hasBreak implementation (I didn't care for my\r\nexperiment but it matters more in real library code) is that there are\r\ninputs that can make it go quadratic. Something like:\r\n\r\nL1: for {\r\nL2: for {\r\nL3: for {\r\nL4: for {\r\nL5: for {\r\nL6: for {\r\n...\r\nLn: for {\r\n...\r\nbreak L6\r\nbreak L5\r\nbreak L4\r\nbreak L3\r\nbreak L2\r\nbreak L1\r\n}\r\n...\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n\r\nwill traverse the inner most loop n times, once looking for each label. A\r\nsingle label-matching pass would give a linear time pass. So when that's\r\nhappening anyway, it will be worth reusing. :-)\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-01 22:34:47.270420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Code looks fine. It would be nice to get the spec in first.\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go\nFile src/pkg/go/types/return.go (right):\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode112\nsrc/pkg/go/types/return.go:112: func hasBreak(s ast.Stmt, label string, implicit bool) bool {\nDo you already have a pass that checks that, for example, break Foo implies that there is a label Foo attached to a break-able statement, and that if there is a label Foo then it is used somewhere? If so it might be worth recording metadata for use by hasBreak instead of making it reinvent the wheel. If not, then carry on. :-)\n\n(I do think the type checker should be doing those checks, fwiw, but I understand that you might have just not gotten to it yet.)",
			"disapproval": false,
			"date": "2013-03-01 22:25:30.202510",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, will wait with this for the spec (next on my list).\n- gri\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go\nFile src/pkg/go/types/return.go (right):\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode112\nsrc/pkg/go/types/return.go:112: func hasBreak(s ast.Stmt, label string, implicit bool) bool {\nOn 2013/03/01 22:25:30, rsc wrote:\n> Do you already have a pass that checks that, for example, break Foo implies that\n> there is a label Foo attached to a break-able statement, and that if there is a\n> label Foo then it is used somewhere? If so it might be worth recording metadata\n> for use by hasBreak instead of making it reinvent the wheel. If not, then carry\n> on. :-)\n> \n> (I do think the type checker should be doing those checks, fwiw, but I\n> understand that you might have just not gotten to it yet.)\n\nAgreed, an no, the type checker doesn't do it yet.\n\nWill adjust this once it does. Reinventing (copying, really) the wheel helped me at least understand the topic thoroughly.",
			"disapproval": false,
			"date": "2013-03-01 22:30:50.616920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease add a TODO to replace hasBreak with something that walks the tree just once.\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/testdata/stmt1.src\nFile src/pkg/go/types/testdata/stmt1.src (right):\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/testdata/stmt1.src#newcode1\nsrc/pkg/go/types/testdata/stmt1.src:1: // Copyright 2013 The Go Authors. All rights reserved.\n$GOROOT/test/return.go has an expanded set of test cases",
			"disapproval": false,
			"date": "2013-03-04 22:07:32.845450",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 22:34:47, rsc wrote:\n> One problem with the hasBreak implementation (I didn't care for my\n> experiment but it matters more in real library code) is that there are\n> inputs that can make it go quadratic. Something like:\n> \n> L1: for {\n> L2: for {\n> L3: for {\n> L4: for {\n> L5: for {\n> L6: for {\n> ...\n> Ln: for {\n> ...\n> break L6\n> break L5\n> break L4\n> break L3\n> break L2\n> break L1\n> }\n> ...\n> }\n> }\n> }\n> }\n> }\n> }\n> \n> will traverse the inner most loop n times, once looking for each label. A\n> single label-matching pass would give a linear time pass. So when that's\n> happening anyway, it will be worth reusing. :-)\n> \n> Russ",
			"disapproval": false,
			"date": "2013-03-04 20:19:59.346530",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go\nFile src/pkg/go/types/return.go (right):\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode17\nsrc/pkg/go/types/return.go:17: func (check *checker) isTerminating(s ast.Stmt, label string) bool {\nlabels are named objects (i.e. canonical) so you can just pass their addresses down the recursion, or nil in lieu of \"\".\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode17\nsrc/pkg/go/types/return.go:17: func (check *checker) isTerminating(s ast.Stmt, label string) bool {\nlabels are canonical objects so just pass the object's address and avoid string comparisons.\n\ns/s.Label.Name/s.Label/\ns/\"\"/nil/\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode50\nsrc/pkg/go/types/return.go:50: if s.Tok == token.GOTO || s.Tok == token.FALLTHROUGH {\nIs it actually necessary to check this condition?\nIf the branch is a break or continue, you wouldn't have reached this far in the recursion because the enclosing hasBranch for the loop would have pruned the search already.\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode130\nsrc/pkg/go/types/return.go:130: if s.Label.Name == label {\ns.Label == label",
			"disapproval": false,
			"date": "2013-03-04 20:20:30.415540",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go\nFile src/pkg/go/types/return.go (right):\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode17\nsrc/pkg/go/types/return.go:17: func (check *checker) isTerminating(s ast.Stmt, label string) bool {\nOn 2013/03/04 20:20:30, adonovan wrote:\n> labels are named objects (i.e. canonical) so you can just pass their addresses\n> down the recursion, or nil in lieu of \"\".\n\nYes, but we can do even better once branches/breaks are pointing to the respective statement. Leaving alone for now.\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode50\nsrc/pkg/go/types/return.go:50: if s.Tok == token.GOTO || s.Tok == token.FALLTHROUGH {\nOn 2013/03/04 20:20:30, adonovan wrote:\n> Is it actually necessary to check this condition?\n> If the branch is a break or continue, you wouldn't have reached this far in the\n> recursion because the enclosing hasBranch for the loop would have pruned the\n> search already.\n\nIt's certainly necessary to check for the GOTO since we may be in the very first call of isTerminating. I think it's also required for the FALLTHROUGH.\n\nhttps://codereview.appspot.com/7437049/diff/10001/src/pkg/go/types/return.go#newcode130\nsrc/pkg/go/types/return.go:130: if s.Label.Name == label {\nOn 2013/03/04 20:20:30, adonovan wrote:\n> s.Label == label\n\nsee comment above - will do in another CL",
			"disapproval": false,
			"date": "2013-03-04 22:04:04.598020",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 4, 2013 at 2:07 PM, <rsc@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> Please add a TODO to replace hasBreak with something that walks the tree\r\n> just once.\r\n>\r\n\r\nJust noticed that I made this change on the wrong workspace. The TODO will\r\nshow up in the next CL.\r\n- gri\r\n",
			"disapproval": false,
			"date": "2013-03-04 22:51:34.501340",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7437049: go/types: \"missing return\" check",
	"created": "2013-03-01 20:01:26.419790",
	"patchsets": [
		1,
		2001,
		3,
		5001,
		7001,
		10001,
		18001
	],
	"modified": "2013-03-04 22:43:15.246370",
	"closed": true,
	"issue": 7437049
}