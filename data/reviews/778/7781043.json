{
	"description": "misc/emacs: Add support for godef\n\ngodef[1][2] is a third party tool for printing information about\nexpressions, especially the location of their definition. This can be\nused to implement a \"jump to definition\" function. Unlike\ncross-language solutions like ctags, godef does not require an index,\noperates on the Go AST instead of symbols and works across packages,\nincluding the standard library.\n\nThis patch implements two new public functions: godef-describe (C-c\nC-d) and godef-jump (C-d C-j). godef-describe describes the expression\nat point, printing its type, and godef-jump jumps to its definition.\n\n[1]: https://code.google.com/p/rog-go/source/browse/exp/cmd/godef/\n[2]: go get code.google.com/p/rog-go/exp/cmd/godef",
	"cc": [
		"adonovan@google.com",
		"cw@f00f.org",
		"patrick.allen.higgins@gmail.com",
		"sameer@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7781043/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7781043/diff/5001/misc/emacs/go-mode.el#newcode19\nmisc/emacs/go-mode.el:19: ;;       being used\nA XEmacs developer is in the process of working around this issue. We should be able to expect a fix in a future CL.",
			"disapproval": false,
			"date": "2013-03-13 05:48:26.243180",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com, cw@f00f.org, patrick.allen.higgins@gmail.com, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-13 05:47:12.883000",
			"approval": false
		},
		{
			"sender": "patrick.allen.higgins@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI am currently using this and really enjoying it. Thanks!\n\nhttps://codereview.appspot.com/7781043/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7781043/diff/5001/misc/emacs/go-mode.el#newcode868\nmisc/emacs/go-mode.el:868: (call-process-region (point-min) (point-max) \"godef\" nil outbuf nil \"-i\" \"-t\" \"-f\" (file-truename buffer-file-name) \"-o\" (number-to-string (go--position-bytes (point))))\nIt looks like godef can deal with an offset (-o) in the middle of an identifier, or am I missing the elisp which sets point to the beginning of the identifier?",
			"disapproval": false,
			"date": "2013-03-13 16:49:48.994100",
			"approval": true
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7781043/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttps://codereview.appspot.com/7781043/diff/5001/misc/emacs/go-mode.el#newcode868\nmisc/emacs/go-mode.el:868: (call-process-region (point-min) (point-max) \"godef\" nil outbuf nil \"-i\" \"-t\" \"-f\" (file-truename buffer-file-name) \"-o\" (number-to-string (go--position-bytes (point))))\nOn 2013/03/13 16:49:49, pah wrote:\n> It looks like godef can deal with an offset (-o) in the middle of an identifier,\n> or am I missing the elisp which sets point to the beginning of the identifier?\n\ngodef deals with offsets in the middle of identifiers.",
			"disapproval": false,
			"date": "2013-03-13 16:51:59.411290",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any other comments or can we get this committed?",
			"disapproval": false,
			"date": "2013-03-18 19:20:26.073500",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/18 19:20:26, Dominik Honnef wrote:\n> Any other comments or can we get this committed?\n\nLGTM\n\nI'll submit it.\n\ncheers\nalan",
			"disapproval": false,
			"date": "2013-03-18 19:24:07.516290",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/18 19:24:07, adonovan wrote:\n> On 2013/03/18 19:20:26, Dominik Honnef wrote:\n> > Any other comments or can we get this committed?\n> \n> LGTM\n> \n> I'll submit it.\n> \n> cheers\n> alan\n\nA thought: consider writing some tests (in elisp) for the code in this file, since it is certainly above the kind of complexity for which testing is appropriate in 'production' programs, and it's impossible to remember all the odd corner cases you tested interactively each time you fix another bug.   It needn't be an automated test (you don't want to depend upon emacs,  godef, etc, from the main repo), just something you can run as 'emacs --batch go-mode-test.el'.  I don't know what exists out there to facilitate writing tests in elisp, but surely something.  As always with testing, the first one is the hardest but quickly pays for itself.",
			"disapproval": false,
			"date": "2013-03-18 19:28:35.495990",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll look into it. I do have some automated testing for the odd indentation cases, but that's on my local computer only. \n\nI'll see what I can do wrt testing the entire mode. There are some unit testing and behaviour testing packages for emacs.",
			"disapproval": false,
			"date": "2013-03-18 19:32:35.772640",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please don't wait on tests for this CL though. I'll probably need a while to get a first test suite done and I'll deliver it in a future CL.",
			"disapproval": false,
			"date": "2013-03-18 19:55:13.843450",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No, of course, that was just a general suggestion.\r\n\r\nThe reason I haven't submitted this yet is that every time I so much\r\nas look at 'hg clpatch' it fails in a new way.\r\n\r\nOn 18 March 2013 15:55,  <dominik.honnef@gmail.com> wrote:\r\n> Please don't wait on tests for this CL though. I'll probably need a\r\n> while to get a first test suite done and I'll deliver it in a future CL.\r\n>\r\n>\r\n> https://codereview.appspot.com/7781043/\r\n",
			"disapproval": false,
			"date": "2013-03-18 20:00:45.519820",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I really like this so far.\n\nLGMT",
			"disapproval": false,
			"date": "2013-03-18 21:08:30.731200",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4ad21a3b23a4 ***\n\nmisc/emacs: Add support for godef\n\ngodef[1][2] is a third party tool for printing information about\nexpressions, especially the location of their definition. This can be\nused to implement a \"jump to definition\" function. Unlike\ncross-language solutions like ctags, godef does not require an index,\noperates on the Go AST instead of symbols and works across packages,\nincluding the standard library.\n\nThis patch implements two new public functions: godef-describe (C-c\nC-d) and godef-jump (C-d C-j). godef-describe describes the expression\nat point, printing its type, and godef-jump jumps to its definition.\n\n[1]: https://code.google.com/p/rog-go/source/browse/exp/cmd/godef/\n[2]: go get code.google.com/p/rog-go/exp/cmd/godef\n\nR=adonovan, cw, patrick.allen.higgins, sameer\nCC=golang-dev\nhttps://codereview.appspot.com/7781043\n\nCommitter: Alan Donovan <adonovan@google.com>",
			"disapproval": false,
			"date": "2013-03-19 15:29:58.031200",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One suggestion: this code seems to assume that godef is on Emacs's\r\n$PATH.  It would be nice if it could use heuristics to find it\r\nrelative to your current Go workspace if you installed it with 'go\r\nget'.\r\n\r\nBut I like this feature a lot.\r\n\r\n\r\n\r\nOn 19 March 2013 11:29,  <adonovan@google.com> wrote:\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=4ad21a3b23a4 ***\r\n>\r\n>\r\n> misc/emacs: Add support for godef\r\n>\r\n> godef[1][2] is a third party tool for printing information about\r\n> expressions, especially the location of their definition. This can be\r\n> used to implement a \"jump to definition\" function. Unlike\r\n> cross-language solutions like ctags, godef does not require an index,\r\n> operates on the Go AST instead of symbols and works across packages,\r\n> including the standard library.\r\n>\r\n> This patch implements two new public functions: godef-describe (C-c\r\n> C-d) and godef-jump (C-d C-j). godef-describe describes the expression\r\n> at point, printing its type, and godef-jump jumps to its definition.\r\n>\r\n> [1]: https://code.google.com/p/rog-go/source/browse/exp/cmd/godef/\r\n> [2]: go get code.google.com/p/rog-go/exp/cmd/godef\r\n>\r\n> R=adonovan, cw, patrick.allen.higgins, sameer\r\n> CC=golang-dev\r\n> https://codereview.appspot.com/7781043\r\n>\r\n> Committer: Alan Donovan <adonovan@google.com>\r\n>\r\n>\r\n> https://codereview.appspot.com/7781043/\r\n",
			"disapproval": false,
			"date": "2013-03-19 15:32:14.382500",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"cw@f00f.org",
				"patrick.allen.higgins@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm definitely not a fan of \"heuristics\". A variable to set the path to godef might be considered, but I'm wondering what's wrong with assuming that it's in your PATH. Every binary you want to use usually has to be somewhere in your PATH, and I think most people who use Go seriously have GOPATH/bin in their PATH.\n\nOn 2013/03/19 15:32:14, adonovan wrote:\n> One suggestion: this code seems to assume that godef is on Emacs's\n> $PATH.  It would be nice if it could use heuristics to find it\n> relative to your current Go workspace if you installed it with 'go\n> get'.\n> \n> But I like this feature a lot.\n> \n> \n> \n> On 19 March 2013 11:29,  <mailto:adonovan@google.com> wrote:\n> > *** Submitted as\n> > https://code.google.com/p/go/source/detail?r=4ad21a3b23a4 ***\n> >\n> >\n> > misc/emacs: Add support for godef\n> >\n> > godef[1][2] is a third party tool for printing information about\n> > expressions, especially the location of their definition. This can be\n> > used to implement a \"jump to definition\" function. Unlike\n> > cross-language solutions like ctags, godef does not require an index,\n> > operates on the Go AST instead of symbols and works across packages,\n> > including the standard library.\n> >\n> > This patch implements two new public functions: godef-describe (C-c\n> > C-d) and godef-jump (C-d C-j). godef-describe describes the expression\n> > at point, printing its type, and godef-jump jumps to its definition.\n> >\n> > [1]: https://code.google.com/p/rog-go/source/browse/exp/cmd/godef/\n> > [2]: go get code.google.com/p/rog-go/exp/cmd/godef\n> >\n> > R=adonovan, cw, patrick.allen.higgins, sameer\n> > CC=golang-dev\n> > https://codereview.appspot.com/7781043\n> >\n> > Committer: Alan Donovan <mailto:adonovan@google.com>\n> >\n> >\n> > https://codereview.appspot.com/7781043/",
			"disapproval": false,
			"date": "2013-03-19 17:27:53.069600",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "jOn 19 March 2013 13:27,  <dominik.honnef@gmail.com> wrote:\r\n> I'm definitely not a fan of \"heuristics\". A variable to set the path to\r\n> godef might be considered, but I'm wondering what's wrong with assuming\r\n> that it's in your PATH. Every binary you want to use usually has to be\r\n> somewhere in your PATH, and I think most people who use Go seriously\r\n> have GOPATH/bin in their PATH.\r\n\r\nOk, fair enough.  I've been learning a lot about GOROOT and GOPATH in\r\nthe last 24 hours and also that perhaps my setup is overcomplicated.\r\nNever mind.\r\n",
			"disapproval": false,
			"date": "2013-03-19 18:05:23.130050",
			"approval": false
		}
	],
	"owner_email": "dominik.honnef@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dominik Honnef",
	"subject": "code review 7781043: misc/emacs: Add support for godef",
	"created": "2013-03-13 05:45:33.077670",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-03-22 02:54:10.933420",
	"closed": true,
	"issue": 7781043
}