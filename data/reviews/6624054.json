{
	"description": "text/template: add an unexported method to Node\nProtects the package a little against undesirable clients.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Fri, Oct 5, 2012 at 2:43 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> text/template: add an unexported method to Node\r\n> Protects the package a little against undesirable clients.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6624054/<http://codereview.appspot.com/6624054/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/text/template/parse/**node.go\r\n>\r\n>\r\n> Index: src/pkg/text/template/parse/**node.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/text/template/parse/**node.go\r\n> +++ b/src/pkg/text/template/parse/**node.go\r\n> @@ -13,7 +13,9 @@\r\n>         \"strings\"\r\n>  )\r\n>\r\n> -// A node is an element in the parse tree. The interface is trivial.\r\n> +// A Node is an element in the parse tree. The interface is trivial.\r\n> +// The interface contains an unexported method so that only\r\n> +// types local to this package can satisfy it.\r\n>  type Node interface {\r\n>         Type() NodeType\r\n>         String() string\r\n> @@ -22,6 +24,8 @@\r\n>         // CopyXxx methods that return *XxxNode.\r\n>         Copy() Node\r\n>         Position() Pos // byte position of start of node in full original\r\n> input string\r\n> +       // Make sure only functions in this package can create Nodes.\r\n> +       unexported()\r\n>  }\r\n>\r\n>  // NodeType identifies the type of a parse tree node.\r\n> @@ -35,6 +39,11 @@\r\n>         return p\r\n>  }\r\n>\r\n> +// unexported keeps Node implementations local to the package.\r\n> +// All implementations embed Pos, so this takes care of it.\r\n> +func (Pos) unexported() {\r\n> +}\r\n> +\r\n>  // Type returns itself and provides an easy default implementation\r\n>  // for embedding in a Node. Embedded in all non-trivial Nodes.\r\n>  func (t NodeType) Type() NodeType {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-05 22:02:39.070480",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-05 21:43:26.972530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n(This will also make cmd/api do the right thing automatically for\r\nfuture additions to the interface.)\r\n",
			"disapproval": false,
			"date": "2012-10-06 14:49:54.357710",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=30663f5bdd69 ***\n\ntext/template: add an unexported method to Node\nProtects the package a little against undesirable clients.\n\nR=golang-dev, bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6624054",
			"disapproval": false,
			"date": "2012-10-06 20:15:49.933850",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6624054: text/template: add an unexported method to Node",
	"created": "2012-10-05 21:42:48.093520",
	"patchsets": [
		1,
		4001
	],
	"modified": "2012-10-06 20:16:01.668030",
	"closed": true,
	"issue": 6624054
}