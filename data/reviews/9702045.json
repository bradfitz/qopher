{
	"description": "bytes: improve performance of buffer.grow\n\nMade during investigation of 5165.\n\nbenchmark                               old ns/op    new ns/op    delta\nBenchmarkReadString                         15134        14167   -6.39%\nBenchmarkBufferNotEmptyWriteRead          1700802      1460270  -14.14%\nBenchmarkBufferFullSmallReads              191252       194591   +1.75%\nBenchmarkIndexByte32                           11           11   -0.88%\nBenchmarkIndexByte4K                          408          409   +0.25%\nBenchmarkIndexByte4M                       717963       710508   -1.04%\nBenchmarkIndexByte64M                    12860720     11963710   -6.97%\nBenchmarkIndexBytePortable32                   64           63   -1.39%\nBenchmarkIndexBytePortable4K                 3153         3148   -0.16%\nBenchmarkIndexBytePortable4M              3313711      3301782   -0.36%\nBenchmarkIndexBytePortable64M            54149357     52911963   -2.29%\nBenchmarkEqual0                                 7            7   -2.05%\nBenchmarkEqual1                                15           15   -0.64%\nBenchmarkEqual6                                15           15   -0.64%\nBenchmarkEqual9                                10           10   +0.00%\nBenchmarkEqual15                               10           10   +0.00%\nBenchmarkEqual16                               10           10   +0.00%\nBenchmarkEqual20                               11           11   +0.00%\nBenchmarkEqual32                               12           12   +0.00%\nBenchmarkEqual4K                              408          407   -0.25%\nBenchmarkEqual4M                          1407115      1358916   -3.43%\nBenchmarkEqual64M                        23296669     22899481   -1.70%\nBenchmarkEqualPort1                             9            9   -0.55%\nBenchmarkEqualPort6                            19           18   -4.06%\nBenchmarkEqualPort32                           66           66   -0.30%\nBenchmarkEqualPort4K                         6284         6253   -0.49%\nBenchmarkEqualPortable4M                  6811391      6806812   -0.07%\nBenchmarkEqualPortable64M               109764181    112286157   +2.30%\nBenchmarkIndex32                              448          447   -0.22%\nBenchmarkIndex4K                            72320        72408   +0.12%\nBenchmarkIndex4M                         74426612     74630883   +0.27%\nBenchmarkIndex64M                      1192955002   1193758578   +0.07%\nBenchmarkIndexEasy32                           90           90   +0.44%\nBenchmarkIndexEasy4K                          482          483   +0.21%\nBenchmarkIndexEasy4M                       706678       703921   -0.39%\nBenchmarkIndexEasy64M                    11911591     11891898   -0.17%\nBenchmarkCount32                              466          466   +0.00%\nBenchmarkCount4K                            75016        74843   -0.23%\nBenchmarkCount4M                         78877615     78768833   -0.14%\nBenchmarkCount64M                      1271993340   1258829841   -1.03%\nBenchmarkCountEasy32                           90           90   -0.22%\nBenchmarkCountEasy4K                          484          488   +0.83%\nBenchmarkCountEasy4M                       709363       714083   +0.67%\nBenchmarkCountEasy64M                    11979504     11961870   -0.15%\nBenchmarkFields                          43697082     43661652   -0.08%\nBenchmarkFieldsFunc                      43491588     43466646   -0.06%\nBenchmarkTrimSpace                             78           78   +0.13%\nBenchmarkCompareBytesEqual                      9            9   +0.10%\nBenchmarkCompareBytesToNil                      9            9   +0.11%\nBenchmarkCompareBytesEmpty                      7            7   +0.26%\nBenchmarkCompareBytesIdentical                  7            7   +0.28%\nBenchmarkCompareBytesSameLength                 9            9   +1.34%\nBenchmarkCompareBytesDifferentLength            9            9   -0.21%\nBenchmarkCompareBytesBigUnaligned          264456       258502   -2.25%\nBenchmarkCompareBytesBig                   158757       149162   -6.04%\nBenchmarkCompareBytesBigIdentical               7            7   -0.39%\n\nbenchmark                         old ns/op    new ns/op    delta\nBenchmarkBinaryTree17            2147483647   2147483647   -0.21%\nBenchmarkFannkuch11              2147483647   2147483647   +0.23%\nBenchmarkFmtFprintfEmpty                160          162   +1.25%\nBenchmarkFmtFprintfString               374          370   -1.07%\nBenchmarkFmtFprintfInt                  288          286   -0.69%\nBenchmarkFmtFprintfIntInt               452          441   -2.43%\nBenchmarkFmtFprintfPrefixedInt          483          461   -4.55%\nBenchmarkFmtFprintfFloat                635          628   -1.10%\nBenchmarkFmtManyArgs                   1829         1818   -0.60%\nBenchmarkGobDecode                 14972593     14920817   -0.35%\nBenchmarkGobEncode                 16312735     16274048   -0.24%\nBenchmarkGzip                     676252126    674102621   -0.32%\nBenchmarkGunzip                   143768812    143406588   -0.25%\nBenchmarkHTTPClientServer             73250        73148   -0.14%\nBenchmarkJSONEncode                61867459     62433632   +0.92%\nBenchmarkJSONDecode               143006725    143106954   +0.07%\nBenchmarkMandelbrot200              6703186      6681213   -0.33%\nBenchmarkGoParse                    8265756      8234362   -0.38%\nBenchmarkRegexpMatchEasy0_32            208          205   -1.44%\nBenchmarkRegexpMatchEasy0_1K            496          493   -0.60%\nBenchmarkRegexpMatchEasy1_32            175          176   +0.57%\nBenchmarkRegexpMatchEasy1_1K           1398         1401   +0.21%\nBenchmarkRegexpMatchMedium_32           295          300   +1.69%\nBenchmarkRegexpMatchMedium_1K        112817       111870   -0.84%\nBenchmarkRegexpMatchHard_32            5838         5788   -0.86%\nBenchmarkRegexpMatchHard_1K          174926       174210   -0.41%\nBenchmarkRevcomp                 1046797151   1044802275   -0.19%\nBenchmarkTemplate                 188927872    188722825   -0.11%\nBenchmarkTimeParse                      675          672   -0.44%\nBenchmarkTimeFormat                     762          761   -0.13%",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"khr@google.com",
		"peter.armitage@gmail.com",
		"gustavo@niemeyer.net"
	],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-05-24 01:48:38.232900",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 24, 2013 at 10:03 AM,  <rickarnoldjr@gmail.com> wrote:\r\n> Yeah, you're right. It looks like the performance improvement was\r\n> entirely due to avoiding additional memory allocations. But since the /2\r\n> needs to stay in there's no improvement anymore. I'll abandon this CL.\r\n\r\nIt'd be nice to get the new benchmarks in at least.\r\n\r\n\r\ngustavo @ http://niemeyer.net\r\n",
			"disapproval": false,
			"date": "2013-05-24 13:29:51.916810",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, FYI the GobEncode benchmark (the subject of 5165) went from:\n\nBenchmarkGobEncode                 15641980     19580295  +25.18%\n\nwhen comparing Go 1.0 and Go 1.1 to:\n\nBenchmarkGobEncode                 15641980     16274048   +4.04%\n\nwhen comparing Go 1.0 and tip on my machine. So it seems that some other change may have already fixed it.",
			"disapproval": false,
			"date": "2013-05-24 02:25:29.982620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What is the change between 1.1 and tip?\r\n\r\nOn 24/05/2013, at 12:25, rickarnoldjr@gmail.com wrote:\r\n\r\n> Also, FYI the GobEncode benchmark (the subject of 5165) went from:\r\n> \r\n> BenchmarkGobEncode                 15641980     19580295  +25.18%\r\n> \r\n> when comparing Go 1.0 and Go 1.1 to:\r\n> \r\n> BenchmarkGobEncode                 15641980     16274048   +4.04%\r\n> \r\n> when comparing Go 1.0 and tip on my machine. So it seems that some other\r\n> change may have already fixed it.\r\n> \r\n> \r\n> https://codereview.appspot.com/9702045/\r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-05-24 02:28:01.814280",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 02:28:01, dfc wrote:\n> What is the change between 1.1 and tip?\n\nOn my machine it's:\n\nBenchmarkGobEncode                 19580295     16274048  -16.89%",
			"disapproval": false,
			"date": "2013-05-24 03:06:21.066390",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Don't get rid of the /2 in the copy-down decision.  It might make some\r\nbenchmarks faster, but it risks getting into a state where we do lots of\r\ncopying to free up only a few bytes of space.\r\n\r\nIt should be ok with just m < c/2 as the condition, that will still prevent\r\nthrashing.\r\n\r\n\r\nOn Thu, May 23, 2013 at 8:06 PM, <rickarnoldjr@gmail.com> wrote:\r\n\r\n> On 2013/05/24 02:28:01, dfc wrote:\r\n>\r\n>> What is the change between 1.1 and tip?\r\n>>\r\n>\r\n> On my machine it's:\r\n>\r\n> BenchmarkGobEncode                 19580295     16274048  -16.89%\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/9702045/<https://codereview.appspot.com/9702045/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 03:52:53.416010",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "func BenchmarkBufferCopydown(b *testing.B) {\r\n        var buf Buffer\r\n        buf.Write(make([]byte, 1024))  // cap = 1024\r\n\r\n        buf.Write(make([]byte, 1))     // cap = 2*1024+1=2049\r\n\r\nbuf.Write(make([]byte, 1024))  // cap = len = 2049\r\n\r\n        for i := 0; i < b.N; i++ {\r\n                buf.ReadByte()\r\n                buf.WriteByte(0)\r\n        }\r\n}\r\n\r\non tip (without your change), taking out the /2 goes from 18 ns/op to 378\r\nns/op.\r\n\r\nIf you'd like, include this benchmark in your change.\r\n\r\n\r\nOn Thu, May 23, 2013 at 8:52 PM, Keith Randall <khr@google.com> wrote:\r\n\r\n> Don't get rid of the /2 in the copy-down decision.  It might make some\r\n> benchmarks faster, but it risks getting into a state where we do lots of\r\n> copying to free up only a few bytes of space.\r\n>\r\n> It should be ok with just m < c/2 as the condition, that will still\r\n> prevent thrashing.\r\n>\r\n>\r\n> On Thu, May 23, 2013 at 8:06 PM, <rickarnoldjr@gmail.com> wrote:\r\n>\r\n>> On 2013/05/24 02:28:01, dfc wrote:\r\n>>\r\n>>> What is the change between 1.1 and tip?\r\n>>>\r\n>>\r\n>> On my machine it's:\r\n>>\r\n>> BenchmarkGobEncode                 19580295     16274048  -16.89%\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/9702045/<https://codereview.appspot.com/9702045/>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 04:04:04.445650",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Taking out the equals doesn't help, a slightly modified benchmark has the\r\nsame bad behavior (actually only about half as bad, but at 220 ns/op still\r\nbad):\r\n\r\nfunc BenchmarkBufferCopydown(b *testing.B) {\r\n        var buf Buffer\r\n        buf.Write(make([]byte, 1024))  // cap = 1024\r\n\r\n        buf.Write(make([]byte, 1))     // cap = 2*1024+1=2049\r\n\r\nbuf.Write(make([]byte, 1023))  // cap = 2049, len = 2048\r\n\r\n        for i := 0; i < b.N; i++ {\r\n                buf.ReadByte()\r\n                buf.WriteByte(0)\r\n        }\r\n}\r\n\r\n\r\n\r\nOn Thu, May 23, 2013 at 9:51 PM, <rickarnoldjr@gmail.com> wrote:\r\n\r\n> Thanks for the benchmark. :)\r\n>\r\n> I tried your benchmark with my code and I get 18.8 ns/op as-is vs. 18.4\r\n> ns/op if I use c/2.\r\n>\r\n> You must have left it as m+n <= c when you tested. If I do that then I\r\n> get 456 ns/op.\r\n>\r\n> Part of the performance benefit comes from taking out the \"=\" since if\r\n> you happen to hit the capacity exactly (as your benchmark does)\r\n> repeatedly, then it would keep sliding every time. I thought this might\r\n> be the reason GobEncode was slower with the original code (maybe it was\r\n> writing exactly 1/2 the capacity each time and forcing a constant slide)\r\n> but it turned out to not make a difference.\r\n>\r\n>\r\n> https://codereview.appspot.**com/9702045/<https://codereview.appspot.com/9702045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 05:17:35.659700",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the benchmark. :)\n\nI tried your benchmark with my code and I get 18.8 ns/op as-is vs. 18.4 ns/op if I use c/2.\n\nYou must have left it as m+n <= c when you tested. If I do that then I get 456 ns/op. \n\nPart of the performance benefit comes from taking out the \"=\" since if you happen to hit the capacity exactly (as your benchmark does) repeatedly, then it would keep sliding every time. I thought this might be the reason GobEncode was slower with the original code (maybe it was writing exactly 1/2 the capacity each time and forcing a constant slide) but it turned out to not make a difference.",
			"disapproval": false,
			"date": "2013-05-24 04:51:14.897280",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "BTW, the change between 1.1 and tip might be the byte copy improvements,\r\nCLs 9101048 and 9038048.\r\n\r\n\r\nOn Thu, May 23, 2013 at 10:17 PM, Keith Randall <khr@google.com> wrote:\r\n\r\n> Taking out the equals doesn't help, a slightly modified benchmark has the\r\n> same bad behavior (actually only about half as bad, but at 220 ns/op still\r\n> bad):\r\n>\r\n> func BenchmarkBufferCopydown(b *testing.B) {\r\n>         var buf Buffer\r\n>         buf.Write(make([]byte, 1024))  // cap = 1024\r\n>\r\n>         buf.Write(make([]byte, 1))     // cap = 2*1024+1=2049\r\n>\r\n>  buf.Write(make([]byte, 1023))  // cap = 2049, len = 2048\r\n>\r\n>         for i := 0; i < b.N; i++ {\r\n>                 buf.ReadByte()\r\n>                 buf.WriteByte(0)\r\n>         }\r\n> }\r\n>\r\n>\r\n>\r\n> On Thu, May 23, 2013 at 9:51 PM, <rickarnoldjr@gmail.com> wrote:\r\n>\r\n>> Thanks for the benchmark. :)\r\n>>\r\n>> I tried your benchmark with my code and I get 18.8 ns/op as-is vs. 18.4\r\n>> ns/op if I use c/2.\r\n>>\r\n>> You must have left it as m+n <= c when you tested. If I do that then I\r\n>> get 456 ns/op.\r\n>>\r\n>> Part of the performance benefit comes from taking out the \"=\" since if\r\n>> you happen to hit the capacity exactly (as your benchmark does)\r\n>> repeatedly, then it would keep sliding every time. I thought this might\r\n>> be the reason GobEncode was slower with the original code (maybe it was\r\n>> writing exactly 1/2 the capacity each time and forcing a constant slide)\r\n>> but it turned out to not make a difference.\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/9702045/<https://codereview.appspot.com/9702045/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 05:26:11.965930",
			"approval": false
		},
		{
			"sender": "peter.armitage@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it possible for the compiler to know that cap(b.buf) is invariant, and \r\navoid the need to capture it in c? Or was that a purely aesthetic change? \r\nDoes the call to b.Truncate() interfere with its analysis?\r\n\r\nOn Friday, 24 May 2013 02:48:38 UTC+1, Rick Arnold wrote:\r\n>\r\n> Reviewers: golang-dev1, \r\n>\r\n> Message: \r\n> Hello golan...@googlegroups.com <javascript:>, \r\n>\r\n> I'd like you to review this change to \r\n> https://code.google.com/p/go \r\n>\r\n>\r\n> Description: \r\n> bytes: improve performance of buffer.grow \r\n>\r\n> Made during investigation of 5165. \r\n>\r\n> benchmark                               old ns/op    new ns/op    delta \r\n> BenchmarkReadString                         15134        14167   -6.39% \r\n> BenchmarkBufferNotEmptyWriteRead          1700802      1460270  -14.14% \r\n> BenchmarkBufferFullSmallReads              191252       194591   +1.75% \r\n> BenchmarkIndexByte32                           11           11   -0.88% \r\n> BenchmarkIndexByte4K                          408          409   +0.25% \r\n> BenchmarkIndexByte4M                       717963       710508   -1.04% \r\n> BenchmarkIndexByte64M                    12860720     11963710   -6.97% \r\n> BenchmarkIndexBytePortable32                   64           63   -1.39% \r\n> BenchmarkIndexBytePortable4K                 3153         3148   -0.16% \r\n> BenchmarkIndexBytePortable4M              3313711      3301782   -0.36% \r\n> BenchmarkIndexBytePortable64M            54149357     52911963   -2.29% \r\n> BenchmarkEqual0                                 7            7   -2.05% \r\n> BenchmarkEqual1                                15           15   -0.64% \r\n> BenchmarkEqual6                                15           15   -0.64% \r\n> BenchmarkEqual9                                10           10   +0.00% \r\n> BenchmarkEqual15                               10           10   +0.00% \r\n> BenchmarkEqual16                               10           10   +0.00% \r\n> BenchmarkEqual20                               11           11   +0.00% \r\n> BenchmarkEqual32                               12           12   +0.00% \r\n> BenchmarkEqual4K                              408          407   -0.25% \r\n> BenchmarkEqual4M                          1407115      1358916   -3.43% \r\n> BenchmarkEqual64M                        23296669     22899481   -1.70% \r\n> BenchmarkEqualPort1                             9            9   -0.55% \r\n> BenchmarkEqualPort6                            19           18   -4.06% \r\n> BenchmarkEqualPort32                           66           66   -0.30% \r\n> BenchmarkEqualPort4K                         6284         6253   -0.49% \r\n> BenchmarkEqualPortable4M                  6811391      6806812   -0.07% \r\n> BenchmarkEqualPortable64M               109764181    112286157   +2.30% \r\n> BenchmarkIndex32                              448          447   -0.22% \r\n> BenchmarkIndex4K                            72320        72408   +0.12% \r\n> BenchmarkIndex4M                         74426612     74630883   +0.27% \r\n> BenchmarkIndex64M                      1192955002   1193758578   +0.07% \r\n> BenchmarkIndexEasy32                           90           90   +0.44% \r\n> BenchmarkIndexEasy4K                          482          483   +0.21% \r\n> BenchmarkIndexEasy4M                       706678       703921   -0.39% \r\n> BenchmarkIndexEasy64M                    11911591     11891898   -0.17% \r\n> BenchmarkCount32                              466          466   +0.00% \r\n> BenchmarkCount4K                            75016        74843   -0.23% \r\n> BenchmarkCount4M                         78877615     78768833   -0.14% \r\n> BenchmarkCount64M                      1271993340   1258829841   -1.03% \r\n> BenchmarkCountEasy32                           90           90   -0.22% \r\n> BenchmarkCountEasy4K                          484          488   +0.83% \r\n> BenchmarkCountEasy4M                       709363       714083   +0.67% \r\n> BenchmarkCountEasy64M                    11979504     11961870   -0.15% \r\n> BenchmarkFields                          43697082     43661652   -0.08% \r\n> BenchmarkFieldsFunc                      43491588     43466646   -0.06% \r\n> BenchmarkTrimSpace                             78           78   +0.13% \r\n> BenchmarkCompareBytesEqual                      9            9   +0.10% \r\n> BenchmarkCompareBytesToNil                      9            9   +0.11% \r\n> BenchmarkCompareBytesEmpty                      7            7   +0.26% \r\n> BenchmarkCompareBytesIdentical                  7            7   +0.28% \r\n> BenchmarkCompareBytesSameLength                 9            9   +1.34% \r\n> BenchmarkCompareBytesDifferentLength            9            9   -0.21% \r\n> BenchmarkCompareBytesBigUnaligned          264456       258502   -2.25% \r\n> BenchmarkCompareBytesBig                   158757       149162   -6.04% \r\n> BenchmarkCompareBytesBigIdentical               7            7   -0.39% \r\n>\r\n> benchmark                         old ns/op    new ns/op    delta \r\n> BenchmarkBinaryTree17            2147483647   2147483647   -0.21% \r\n> BenchmarkFannkuch11              2147483647   2147483647   +0.23% \r\n> BenchmarkFmtFprintfEmpty                160          162   +1.25% \r\n> BenchmarkFmtFprintfString               374          370   -1.07% \r\n> BenchmarkFmtFprintfInt                  288          286   -0.69% \r\n> BenchmarkFmtFprintfIntInt               452          441   -2.43% \r\n> BenchmarkFmtFprintfPrefixedInt          483          461   -4.55% \r\n> BenchmarkFmtFprintfFloat                635          628   -1.10% \r\n> BenchmarkFmtManyArgs                   1829         1818   -0.60% \r\n> BenchmarkGobDecode                 14972593     14920817   -0.35% \r\n> BenchmarkGobEncode                 16312735     16274048   -0.24% \r\n> BenchmarkGzip                     676252126    674102621   -0.32% \r\n> BenchmarkGunzip                   143768812    143406588   -0.25% \r\n> BenchmarkHTTPClientServer             73250        73148   -0.14% \r\n> BenchmarkJSONEncode                61867459     62433632   +0.92% \r\n> BenchmarkJSONDecode               143006725    143106954   +0.07% \r\n> BenchmarkMandelbrot200              6703186      6681213   -0.33% \r\n> BenchmarkGoParse                    8265756      8234362   -0.38% \r\n> BenchmarkRegexpMatchEasy0_32            208          205   -1.44% \r\n> BenchmarkRegexpMatchEasy0_1K            496          493   -0.60% \r\n> BenchmarkRegexpMatchEasy1_32            175          176   +0.57% \r\n> BenchmarkRegexpMatchEasy1_1K           1398         1401   +0.21% \r\n> BenchmarkRegexpMatchMedium_32           295          300   +1.69% \r\n> BenchmarkRegexpMatchMedium_1K        112817       111870   -0.84% \r\n> BenchmarkRegexpMatchHard_32            5838         5788   -0.86% \r\n> BenchmarkRegexpMatchHard_1K          174926       174210   -0.41% \r\n> BenchmarkRevcomp                 1046797151   1044802275   -0.19% \r\n> BenchmarkTemplate                 188927872    188722825   -0.11% \r\n> BenchmarkTimeParse                      675          672   -0.44% \r\n> BenchmarkTimeFormat                     762          761   -0.13% \r\n>\r\n> Please review this at https://codereview.appspot.com/9702045/ \r\n>\r\n> Affected files: \r\n>    M src/pkg/bytes/buffer.go \r\n>\r\n>\r\n> Index: src/pkg/bytes/buffer.go \r\n> =================================================================== \r\n> --- a/src/pkg/bytes/buffer.go \r\n> +++ b/src/pkg/bytes/buffer.go \r\n> @@ -79,24 +79,23 @@ \r\n>   // If the buffer can't grow it will panic with ErrTooLarge. \r\n>   func (b *Buffer) grow(n int) int { \r\n>           m := b.Len() \r\n> +        c := cap(b.buf) \r\n>           // If buffer is empty, reset to recover space. \r\n>           if m == 0 && b.off != 0 { \r\n>                   b.Truncate(0) \r\n>           } \r\n> -        if len(b.buf)+n > cap(b.buf) { \r\n> +        if len(b.buf)+n > c { \r\n>                   var buf []byte \r\n>                   if b.buf == nil && n <= len(b.bootstrap) { \r\n>                           buf = b.bootstrap[0:] \r\n> -                } else if m+n <= cap(b.buf)/2 { \r\n> +                } else if m+n < c { \r\n>                           // We can slide things down instead of \r\n> allocating a new \r\n> -                        // slice. We only need m+n <= cap(b.buf) to \r\n> slide, but \r\n> -                        // we instead let capacity get twice as large so \r\n> we \r\n> -                        // don't spend all our time copying. \r\n> +                        // slice. \r\n>                           copy(b.buf[:], b.buf[b.off:]) \r\n>                           buf = b.buf[:m] \r\n>                   } else { \r\n>                           // not enough space anywhere \r\n> -                        buf = makeSlice(2*cap(b.buf) + n) \r\n> +                        buf = makeSlice(2*c + n) \r\n>                           copy(buf, b.buf[b.off:]) \r\n>                   } \r\n>                   b.buf = buf \r\n>\r\n>\r\n>",
			"disapproval": false,
			"date": "2013-05-24 10:48:31.549290",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"khr@google.com",
				"peter.armitage@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 05:17:35, khr1 wrote:\n> Taking out the equals doesn't help, a slightly modified benchmark has the\n> same bad behavior (actually only about half as bad, but at 220 ns/op still\n> bad):\n\nYeah, you're right. It looks like the performance improvement was entirely due to avoiding additional memory allocations. But since the /2 needs to stay in there's no improvement anymore. I'll abandon this CL.\n\nThanks for all the time you spent reviewing it.",
			"disapproval": false,
			"date": "2013-05-24 13:03:15.501610",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"khr@google.com",
				"peter.armitage@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-05-24 13:05:07.958930",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Turns out there is already a benchmark that catches this problem,\r\nbytes/buffer_test.go:BenchmarkBufferFullSmallReads.  Very similar to mine.\r\n\r\n\r\nOn Fri, May 24, 2013 at 6:29 AM, Gustavo Niemeyer <gustavo@niemeyer.net>wrote:\r\n\r\n> On Fri, May 24, 2013 at 10:03 AM,  <rickarnoldjr@gmail.com> wrote:\r\n> > Yeah, you're right. It looks like the performance improvement was\r\n> > entirely due to avoiding additional memory allocations. But since the /2\r\n> > needs to stay in there's no improvement anymore. I'll abandon this CL.\r\n>\r\n> It'd be nice to get the new benchmarks in at least.\r\n>\r\n>\r\n> gustavo @ http://niemeyer.net\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 14:15:54.840670",
			"approval": false
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 9702045: bytes: improve performance of buffer.grow",
	"created": "2013-05-24 01:47:49.313890",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-05-24 14:15:55.042010",
	"closed": true,
	"issue": 9702045
}