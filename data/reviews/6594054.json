{
	"description": "/exp/types/staging: expression and statement type checking\n\nStill lots of pieces missing, but basic framework working.\nLots of tests.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-01 22:46:11.450690",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0a11e5a60d9c ***\n\n/exp/types/staging: expression and statement type checking\n\nStill lots of pieces missing, but basic framework working.\nLots of tests.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6594054",
			"disapproval": false,
			"date": "2012-10-08 01:01:52.833000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go\nFile src/pkg/exp/types/staging/expr.go (right):\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode79\nsrc/pkg/exp/types/staging/expr.go:79: // TODO(gri) AST may be invalid - check Unquote result\nSame above?\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode116\nsrc/pkg/exp/types/staging/expr.go:116: check.invalidOp(x.pos(), \"operator %s not defined for %s\", op, x)\nThis is a vague error message for the specific case of receiving from a send-only channel. I would suggest giving a more specific error, either by leaving that for a higher-level pass, or by handling it specially here. <-c is certainly defined in that case, it's just not allowed.\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode393\nsrc/pkg/exp/types/staging/expr.go:393: \n?\nMaybe already handled above?\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode713\nsrc/pkg/exp/types/staging/expr.go:713: if i, ok := x.val.(int64); ok && i == int64(int(i)) {\nI think you need an explicit conversion to integer here. \nvar x [1.0]int\nappears to be valid.\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/stmt.go\nFile src/pkg/exp/types/staging/stmt.go (right):\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/stmt.go#newcode16\nsrc/pkg/exp/types/staging/stmt.go:16: check.errorf(x.pos(), \"%d-valued expression %s used as single value\", len(t.list), x)\nbelow you use argument count mismatch: %d = %d for what looks like the same case?\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/testdata/decls0.src\nFile src/pkg/exp/types/staging/testdata/decls0.src (right):\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/testdata/decls0.src#newcode103\nsrc/pkg/exp/types/staging/testdata/decls0.src:103: A1 [10.0]int\nAnd yet this test case appears to work so perhaps I misunderstand the code.",
			"disapproval": false,
			"date": "2012-10-06 22:43:20.636190",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go\nFile src/pkg/exp/types/staging/expr.go (right):\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode79\nsrc/pkg/exp/types/staging/expr.go:79: // TODO(gri) AST may be invalid - check Unquote result\nOn 2012/10/06 22:43:20, rsc wrote:\n> Same above?\n\nReplaced in both places with a function extracting and checking the field tag.\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode393\nsrc/pkg/exp/types/staging/expr.go:393: \nOn 2012/10/06 22:43:20, rsc wrote:\n> ?\n> Maybe already handled above?\n\ndregs. removed.\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode713\nsrc/pkg/exp/types/staging/expr.go:713: if i, ok := x.val.(int64); ok && i == int64(int(i)) {\nOn 2012/10/06 22:43:20, rsc wrote:\n> I think you need an explicit conversion to integer here. \n> var x [1.0]int\n> appears to be valid.\n\nConstants are normalized - so 1.0 will be represented as an int64. This is correct and there's a test for it.\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/stmt.go\nFile src/pkg/exp/types/staging/stmt.go (right):\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/stmt.go#newcode16\nsrc/pkg/exp/types/staging/stmt.go:16: check.errorf(x.pos(), \"%d-valued expression %s used as single value\", len(t.list), x)\nOn 2012/10/06 22:43:20, rsc wrote:\n> below you use argument count mismatch: %d = %d for what looks like the same\n> case?\n\nI have copied the gc error message style here (\"multiple-value f() in single-value context\"). Added a TODO for later cleanup/consolidation of error messages.\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/testdata/decls0.src\nFile src/pkg/exp/types/staging/testdata/decls0.src (right):\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/testdata/decls0.src#newcode103\nsrc/pkg/exp/types/staging/testdata/decls0.src:103: A1 [10.0]int\nOn 2012/10/06 22:43:20, rsc wrote:\n> And yet this test case appears to work so perhaps I misunderstand the code.\n\nYes. See comment before.",
			"disapproval": false,
			"date": "2012-10-07 23:27:20.584500",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go\nFile src/pkg/exp/types/staging/expr.go (right):\n\nhttps://codereview.appspot.com/6594054/diff/7001/src/pkg/exp/types/staging/expr.go#newcode116\nsrc/pkg/exp/types/staging/expr.go:116: check.invalidOp(x.pos(), \"operator %s not defined for %s\", op, x)\nOn 2012/10/06 22:43:20, rsc wrote:\n> This is a vague error message for the specific case of receiving from a\n> send-only channel. I would suggest giving a more specific error, either by\n> leaving that for a higher-level pass, or by handling it specially here. <-c is\n> certainly defined in that case, it's just not allowed.\n> \n\nAdded TODO.",
			"disapproval": false,
			"date": "2012-10-08 00:19:45.238340",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6594054: /exp/types/staging: expression and statement type checking",
	"created": "2012-10-01 22:43:34.748140",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		13002,
		19001,
		8018
	],
	"modified": "2012-10-08 01:01:55.943440",
	"closed": true,
	"issue": 6594054
}