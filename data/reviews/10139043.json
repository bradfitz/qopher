{
	"description": "runtime: use persistentalloc instead of mallocgc for itab\nReduces heap size.",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-09 17:21:08.823200",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What is the order of magnitude of the savings (number of objects, size in bytes) ?",
			"disapproval": false,
			"date": "2013-06-09 17:28:32.607710",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/09 17:28:32, remyoudompheng wrote:\n> What is the order of magnitude of the savings (number of objects, size in bytes)\n> ?\n\nI am sure the savings are small (the number of interface implementations).\nBut aside from increasing load on GC, they also pin MSpan's in memory. I.e. if a MSpan is unlucky to hold 1 such object, the span will never reused or returned to OS.\nAnd on top of that, I think it's just the right way to do it -- allocate persistent objects with persistentalloc.",
			"disapproval": false,
			"date": "2013-06-09 17:36:52.444100",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Sun, Jun 9, 2013 at 7:36 PM, <dvyukov@google.com> wrote:\r\n\r\n> On 2013/06/09 17:28:32, remyoudompheng wrote:\r\n>\r\n>> What is the order of magnitude of the savings (number of objects, size\r\n>>\r\n> in bytes)\r\n>\r\n>> ?\r\n>>\r\n>\r\n> I am sure the savings are small (the number of interface\r\n> implementations).\r\n> But aside from increasing load on GC, they also pin MSpan's in memory.\r\n> I.e. if a MSpan is unlucky to hold 1 such object, the span will never\r\n> reused or returned to OS.\r\n> And on top of that, I think it's just the right way to do it -- allocate\r\n> persistent objects with persistentalloc.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/10139043/<https://codereview.appspot.com/10139043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-09 17:51:20.784330",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8257d3f823ee ***\n\nruntime: use persistentalloc instead of mallocgc for itab\nReduces heap size.\n\nR=golang-dev, remyoudompheng, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/10139043",
			"disapproval": false,
			"date": "2013-06-09 17:58:53.089170",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10139043: runtime: use persistentalloc instead of mallocgc for itab",
	"created": "2013-06-09 17:20:33.144830",
	"patchsets": [
		1,
		1001,
		4001,
		11001
	],
	"modified": "2013-06-09 17:58:54.884160",
	"closed": true,
	"issue": 10139043
}