{
	"description": "windows 7/amd64\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkSplit1     77984460     24131380  -69.06%\nBenchmarkSplit2      5222298      5802331  +11.11%\nBenchmarkSplit3      4038231      4024230   -0.35%",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"dave@cheney.net",
		"extemporalgenome@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Use \r\n\r\nhg upload 7458043\r\n\r\nTo upload a new diff. Use\r\n\r\nhg mail 7458043\r\n\r\nWhen you are ready for review. Please also provide some before/after benchmarks as evidence. You can use the test.benchmem flag to benchmark allocations per run, and the benchcmp tool to produce a delta between benchmarks.\r\n\r\nBetweeSent from my iPad\r\n \r\nOn 02/03/2013, at 2:34 AM, coocood@gmail.com wrote:\r\nAs supporting \r\n> On 2013/03/01 14:26:26, rsc wrote:\r\n>> If you write string(utf8.RuneError) you'll get rid of the remaining\r\n>> allocation too.\r\n> \r\n> This is my first time to make a CL, and I tried to change it again by\r\n> ran \"hg update 7458043\", but it only changes description, no delta is\r\n> added.\r\n> \r\n> https://codereview.appspot.com/7458043/\r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-03-01 20:51:37.413100",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh, could you please add some benchmarks as part of this CL?\r\n\r\nSent from my iPad\r\n\r\nOn 02/03/2013, at 1:33 PM, coocood@gmail.com wrote:\r\n\r\n> On 2013/03/01 19:12:38, minux wrote:\r\n>> On Fri, Mar 1, 2013 at 11:37 PM, <mailto:coocood@gmail.com> wrote:\r\n> \r\n>> > On 2013/03/01 15:34:51, Ewan Chou wrote:\r\n>> >\r\n>> >> On 2013/03/01 14:26:26, rsc wrote:\r\n>> >> > If you write string(utf8.RuneError) you'll get rid of the\r\n> remaining\r\n>> >> > allocation too.\r\n>> >>\r\n>> >\r\n>> >  This is my first time to make a CL, and I tried to change it again\r\n> by\r\n>> >>\r\n>> > ran \"hg\r\n>> >\r\n>> >> update 7458043\", but it only changes description, no delta is\r\n> added.\r\n>> >>\r\n>> >\r\n>> > it was \"hg change 7458043\" actually, sorry\r\n> \r\n>> use \"hg upload 7458043\" to upload new patchset.\r\n> \r\n>> btw, please include benchmark results in the description, the\r\n> misc/benchcmp\r\n>> script will help generate delta between benchmark results.\r\n> \r\n>> go test -bench=. strings > old.txt\r\n>> # edit your changes\r\n>> go test -bench=. strings > new.txt\r\n>> $GOROOT/misc/benchcmp old.txt new.txt\r\n> \r\n>> and paste the output into the CL description.\r\n> \r\n> benchmark result updated, but \"explode\" doesn't has benchmark function\r\n> in \"strings_test.go\" so run \"go test -bench=. strings\" doesn't show any\r\n> difference.\r\n> \r\n> https://codereview.appspot.com/7458043/\r\n",
			"disapproval": false,
			"date": "2013-03-02 02:37:22.599960",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-03-01 09:10:25.321160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you write string(utf8.RuneError) you'll get rid of the remaining\r\nallocation too.\r\n",
			"disapproval": false,
			"date": "2013-03-01 14:26:26.819580",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 14:26:26, rsc wrote:\n> If you write string(utf8.RuneError) you'll get rid of the remaining\n> allocation too.\n\nThis is my first time to make a CL, and I tried to change it again by ran \"hg update 7458043\", but it only changes description, no delta is added.",
			"disapproval": false,
			"date": "2013-03-01 15:34:51.207540",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 15:34:51, Ewan Chou wrote:\n> On 2013/03/01 14:26:26, rsc wrote:\n> > If you write string(utf8.RuneError) you'll get rid of the remaining\n> > allocation too.\n> \n> This is my first time to make a CL, and I tried to change it again by ran \"hg\n> update 7458043\", but it only changes description, no delta is added.\n\nit was \"hg change 7458043\" actually, sorry",
			"disapproval": false,
			"date": "2013-03-01 15:37:05.752940",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/04 15:05:51, rsc wrote:\n> The code looks fine to me, and the benchmarks are fine too. 5% due to code\n> moving around is sadly not uncommon. \n> \n> However, please change the allocation to make([]string, n), dropping the +1 and\n> adjusting the indices accordingly. The first entry is just wasted space, and\n> while it's small, this is library code so it's best to do things right.\n\nI created another issue to optimize Replace method, and that includes this two files too, can I update changes to that issue instead?\n\nhttps://codereview.appspot.com/7432050/",
			"disapproval": false,
			"date": "2013-03-04 15:15:33.989310",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/04 15:59:05, Ewan Chou wrote:\n> On 2013/03/04 15:43:13, Ewan Chou wrote:\n> > On 2013/03/04 15:36:20, rsc wrote:\n> > > No, see my comments on the other issue. I'm willing to get the explode\n> > > change in because it's very straightforward, but in general it's too close\n> > > to Go 1.1 to be rewriting other core pieces and possibly introducing bugs.\n> > > \n> > > Russ\n> > \n> > If I avoid the extra memory space, a compare operation have be added in the\n> > loop, I'm not sure is it really worth it.\n> \n> I fingured out how to remove the extra memory without adding compare operation.\n\nalthough I still added a assignment operation in the loop but I think the code is more straightforward now.",
			"disapproval": false,
			"date": "2013-03-04 16:59:13.223170",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 15:37:05, Ewan Chou wrote:\n> On 2013/03/01 15:34:51, Ewan Chou wrote:\n> > On 2013/03/01 14:26:26, rsc wrote:\n> > > If you write string(utf8.RuneError) you'll get rid of the remaining\n> > > allocation too.\n> > \n> > This is my first time to make a CL, and I tried to change it again by ran \"hg\n> > update 7458043\", but it only changes description, no delta is added.\n> \n> it was \"hg change 7458043\" actually, sorry\n\nfinally added new patch set by \"hg upload 7458043\"\n\nI only read http://golang.org/doc/contribute.html\n\nforgot to read \"hg help codereview\".",
			"disapproval": false,
			"date": "2013-03-01 16:16:40.459720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No, see my comments on the other issue. I'm willing to get the explode\r\nchange in because it's very straightforward, but in general it's too close\r\nto Go 1.1 to be rewriting other core pieces and possibly introducing bugs.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-04 15:36:20.185970",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 1, 2013 at 11:37 PM, <coocood@gmail.com> wrote:\r\n\r\n> On 2013/03/01 15:34:51, Ewan Chou wrote:\r\n>\r\n>> On 2013/03/01 14:26:26, rsc wrote:\r\n>> > If you write string(utf8.RuneError) you'll get rid of the remaining\r\n>> > allocation too.\r\n>>\r\n>\r\n>  This is my first time to make a CL, and I tried to change it again by\r\n>>\r\n> ran \"hg\r\n>\r\n>> update 7458043\", but it only changes description, no delta is added.\r\n>>\r\n>\r\n> it was \"hg change 7458043\" actually, sorry\r\n\r\nuse \"hg upload 7458043\" to upload new patchset.\r\n\r\nbtw, please include benchmark results in the description, the misc/benchcmp\r\nscript will help generate delta between benchmark results.\r\n\r\ngo test -bench=. strings > old.txt\r\n# edit your changes\r\ngo test -bench=. strings > new.txt\r\n$GOROOT/misc/benchcmp old.txt new.txt\r\n\r\nand paste the output into the CL description.\r\n",
			"disapproval": false,
			"date": "2013-03-01 19:12:38.586710",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 19:12:38, minux wrote:\n> On Fri, Mar 1, 2013 at 11:37 PM, <mailto:coocood@gmail.com> wrote:\n> \n> > On 2013/03/01 15:34:51, Ewan Chou wrote:\n> >\n> >> On 2013/03/01 14:26:26, rsc wrote:\n> >> > If you write string(utf8.RuneError) you'll get rid of the remaining\n> >> > allocation too.\n> >>\n> >\n> >  This is my first time to make a CL, and I tried to change it again by\n> >>\n> > ran \"hg\n> >\n> >> update 7458043\", but it only changes description, no delta is added.\n> >>\n> >\n> > it was \"hg change 7458043\" actually, sorry\n> \n> use \"hg upload 7458043\" to upload new patchset.\n> \n> btw, please include benchmark results in the description, the misc/benchcmp\n> script will help generate delta between benchmark results.\n> \n> go test -bench=. strings > old.txt\n> # edit your changes\n> go test -bench=. strings > new.txt\n> $GOROOT/misc/benchcmp old.txt new.txt\n> \n> and paste the output into the CL description.\n\nbenchmark result updated, but \"explode\" doesn't has benchmark function in \"strings_test.go\" so run \"go test -bench=. strings\" doesn't show any difference.",
			"disapproval": false,
			"date": "2013-03-02 02:33:12.815240",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you please do this to report the benchmark delta.\n\n1. go test -bench=Split > old.txt\n// apply your change\n2. go test -bench=Split > new.txt\n3. $GOROOT/misc/benchcmp {old,new}.txt \n\nDo this a few times to ensure the results are stable, then attach the output to the issue description.",
			"disapproval": false,
			"date": "2013-03-02 03:14:29.141950",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Added three benchmark functions for Split method.\n\nOn 2013/03/02 02:37:22, dfc wrote:\n> Oh, could you please add some benchmarks as part of this CL?\n> \n> Sent from my iPad\n> \n>",
			"disapproval": false,
			"date": "2013-03-02 03:08:13.543240",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/02 03:14:29, dfc wrote:\n> Can you please do this to report the benchmark delta.\n> \n> 1. go test -bench=Split > old.txt\n> // apply your change\n> 2. go test -bench=Split > new.txt\n> 3. $GOROOT/misc/benchcmp {old,new}.txt \n> \n> Do this a few times to ensure the results are stable, then attach the output to\n> the issue description.\n\nIt turns out that new explode method makes BenchmarkSplit2 about 5% slower, it's unreasonable, as explode didn't even get called.",
			"disapproval": false,
			"date": "2013-03-02 04:17:08.277090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The code looks fine to me, and the benchmarks are fine too. 5% due to code moving around is sadly not uncommon. \n\nHowever, please change the allocation to make([]string, n), dropping the +1 and adjusting the indices accordingly. The first entry is just wasted space, and while it's small, this is library code so it's best to do things right.",
			"disapproval": false,
			"date": "2013-03-04 15:05:51.904700",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/04 15:36:20, rsc wrote:\n> No, see my comments on the other issue. I'm willing to get the explode\n> change in because it's very straightforward, but in general it's too close\n> to Go 1.1 to be rewriting other core pieces and possibly introducing bugs.\n> \n> Russ\n\nIf I avoid the extra memory space, a compare operation have be added in the loop, I'm not sure is it really worth it.",
			"disapproval": false,
			"date": "2013-03-04 15:43:13.409290",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/02 04:17:08, Ewan Chou wrote:\n> On 2013/03/02 03:14:29, dfc wrote:\n> > Can you please do this to report the benchmark delta.\n> > \n> > 1. go test -bench=Split > old.txt\n> > // apply your change\n> > 2. go test -bench=Split > new.txt\n> > 3. $GOROOT/misc/benchcmp {old,new}.txt \n> > \n> > Do this a few times to ensure the results are stable, then attach the output\n> to\n> > the issue description.\n> \n> It turns out that new explode method makes BenchmarkSplit2 about 5% slower, it's\n> unreasonable, as explode didn't even get called.\n\nThis happens just randomly, after I removed \"if n == 0 {return nil}\"\nEvery Split benchmark get faster.",
			"disapproval": false,
			"date": "2013-03-02 06:36:30.173520",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What OS are you benchmarking on ?\r\n\r\nOn 02/03/2013, at 17:36, coocood@gmail.com wrote:\r\n\r\n> On 2013/03/02 04:17:08, Ewan Chou wrote:\r\n>> On 2013/03/02 03:14:29, dfc wrote:\r\n>> > Can you please do this to report the benchmark delta.\r\n>> >\r\n>> > 1. go test -bench=Split > old.txt\r\n>> > // apply your change\r\n>> > 2. go test -bench=Split > new.txt\r\n>> > 3. $GOROOT/misc/benchcmp {old,new}.txt\r\n>> >\r\n>> > Do this a few times to ensure the results are stable, then attach\r\n> the output\r\n>> to\r\n>> > the issue description.\r\n> \r\n>> It turns out that new explode method makes BenchmarkSplit2 about 5%\r\n> slower, it's\r\n>> unreasonable, as explode didn't even get called.\r\n> \r\n> This happens just randomly, after I removed \"if n == 0 {return nil}\"\r\n> Every Split benchmark get faster.\r\n> \r\n> https://codereview.appspot.com/7458043/\r\n",
			"disapproval": false,
			"date": "2013-03-02 06:51:20.270020",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/02 06:51:20, dfc wrote:\n> What OS are you benchmarking on ?\n\nWindows 7 64bit GOARCH amd64",
			"disapproval": false,
			"date": "2013-03-02 06:53:57.901790",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough, using pprof on windows is quite hard, I was going to say do a profile and see why the breakdown is. \r\n\r\nOn 02/03/2013, at 17:53, coocood@gmail.com wrote:\r\n\r\n> On 2013/03/02 06:51:20, dfc wrote:\r\n>> What OS are you benchmarking on ?\r\n> \r\n> Windows 7 64bit GOARCH amd64\r\n> \r\n> \r\n> https://codereview.appspot.com/7458043/\r\n",
			"disapproval": false,
			"date": "2013-03-02 06:56:23.324620",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/04 15:43:13, Ewan Chou wrote:\n> On 2013/03/04 15:36:20, rsc wrote:\n> > No, see my comments on the other issue. I'm willing to get the explode\n> > change in because it's very straightforward, but in general it's too close\n> > to Go 1.1 to be rewriting other core pieces and possibly introducing bugs.\n> > \n> > Russ\n> \n> If I avoid the extra memory space, a compare operation have be added in the\n> loop, I'm not sure is it really worth it.\n\nI fingured out how to remove the extra memory without adding compare operation.",
			"disapproval": false,
			"date": "2013-03-04 15:59:05.858200",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 04:46:28, rsc wrote:\n> Looks good. Please update the benchmarks.\n\nbenchmark updated, sadly 11.1% penalty for Split2 on windows.",
			"disapproval": false,
			"date": "2013-03-06 05:10:24.175020",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, minux.ma@gmail.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-05 09:54:25.146740",
			"approval": false
		},
		{
			"sender": "extemporalgenome@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I didn't actually mean \"globally\" -- just meant constant.\r\n\r\nOn Tuesday, March 5, 2013 10:50:00 PM UTC-7, extempor...@gmail.com wrote:\r\n>\r\n> Even though it's an error case, would globally setting:\r\n>\r\n> const runeErrString = string(utf8.RuneError)\r\n>\r\n> have any measurable benefit for error-laden inputs?\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 07:08:35.663580",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"extemporalgenome@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 07:08:35, extemporalgenome wrote:\n> I didn't actually mean \"globally\" -- just meant constant.\n> \n> On Tuesday, March 5, 2013 10:50:00 PM UTC-7, mailto:extempor...@gmail.com wrote:\n> >\n> > Even though it's an error case, would globally setting:\n> >\n> > const runeErrString = string(utf8.RuneError)\n> >\n> > have any measurable benefit for error-laden inputs?\n> >\n\nI think the compiler will evaluated \"string(constant)\" to constant value at compile time.",
			"disapproval": false,
			"date": "2013-03-06 08:28:02.279620",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, minux.ma@gmail.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-06 04:37:38.962230",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/amd64, tip\n\nlucky(~/go/src/pkg/strings) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkSplit1    100105364     27815460  -72.21%\nBenchmarkSplit2      6565986      6491111   -1.14%\nBenchmarkSplit3      4638642      4890052   +5.42%",
			"disapproval": false,
			"date": "2013-03-06 03:09:41.455240",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"extemporalgenome@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If I moves the declaration of \"ch\" and \"size\" into the loop, the delta drops to +5.84%.\n\nI just realized benchmark on changing unrelated code blindly is just waste of time, I would never do this again.",
			"disapproval": false,
			"date": "2013-03-06 13:04:06.156840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "While this is a great speedup in Split1 (and also a huge reduction in allocs/op), how common is split(\"\") ? We pay a 5% penalty for split(\"hello\") which is probably a more common case (not \"hello\", but maybe \"xml:\", for example).",
			"disapproval": false,
			"date": "2013-03-06 03:12:43.101300",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 03:12:43, dfc wrote:\n> While this is a great speedup in Split1 (and also a huge reduction in\n> allocs/op), how common is split(\"\") ? We pay a 5% penalty for split(\"hello\")\n> which is probably a more common case (not \"hello\", but maybe \"xml:\", for\n> example).\n\nI beleive this penalty varies on different platform.\nOn both my windows7/amd64 and ubuntu12.04/64bit(vmware) the overall benchmark result for Split2 and Split3 is better.",
			"disapproval": false,
			"date": "2013-03-06 03:32:53.708100",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 03:32:53, Ewan Chou wrote:\n> On 2013/03/06 03:12:43, dfc wrote:\n> > While this is a great speedup in Split1 (and also a huge reduction in\n> > allocs/op), how common is split(\"\") ? We pay a 5% penalty for split(\"hello\")\n> > which is probably a more common case (not \"hello\", but maybe \"xml:\", for\n> > example).\n> \n> I beleive this penalty varies on different platform.\n> On both my windows7/amd64 and ubuntu12.04/64bit(vmware) the overall benchmark\n> result for Split2 and Split3 is better.\n\nAnd on my Ubuntu 12.04 64bit Vmware, the Split2 got 10% speed up after the change.\n\nA wild guess is that this is compiler issue which can be addressed in the future.",
			"disapproval": false,
			"date": "2013-03-06 03:40:33.298220",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it is benchmarking inside a VM.\r\n\r\nOn Tue, Mar 5, 2013 at 10:40 PM,  <coocood@gmail.com> wrote:\r\n> On 2013/03/06 03:32:53, Ewan Chou wrote:\r\n>>\r\n>> On 2013/03/06 03:12:43, dfc wrote:\r\n>> > While this is a great speedup in Split1 (and also a huge reduction\r\n>\r\n> in\r\n>>\r\n>> > allocs/op), how common is split(\"\") ? We pay a 5% penalty for\r\n>\r\n> split(\"hello\")\r\n>>\r\n>> > which is probably a more common case (not \"hello\", but maybe \"xml:\",\r\n>\r\n> for\r\n>>\r\n>> > example).\r\n>\r\n>\r\n>> I beleive this penalty varies on different platform.\r\n>> On both my windows7/amd64 and ubuntu12.04/64bit(vmware) the overall\r\n>\r\n> benchmark\r\n>>\r\n>> result for Split2 and Split3 is better.\r\n>\r\n>\r\n> And on my Ubuntu 12.04 64bit Vmware, the Split2 got 10% speed up after\r\n> the change.\r\n>\r\n> A wild guess is that this is compiler issue which can be addressed in\r\n> the future.\r\n>\r\n> https://codereview.appspot.com/7458043/\r\n",
			"disapproval": false,
			"date": "2013-03-06 03:44:42.173990",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 03:44:42, dfc wrote:\n> I think it is benchmarking inside a VM.\n> \n> On Tue, Mar 5, 2013 at 10:40 PM,  <mailto:coocood@gmail.com> wrote:\n> > On 2013/03/06 03:32:53, Ewan Chou wrote:\n> >>\n> >> On 2013/03/06 03:12:43, dfc wrote:\n> >> > While this is a great speedup in Split1 (and also a huge reduction\n> >\n> > in\n> >>\n> >> > allocs/op), how common is split(\"\") ? We pay a 5% penalty for\n> >\n> > split(\"hello\")\n> >>\n> >> > which is probably a more common case (not \"hello\", but maybe \"xml:\",\n> >\n> > for\n> >>\n> >> > example).\n> >\n> >\n> >> I beleive this penalty varies on different platform.\n> >> On both my windows7/amd64 and ubuntu12.04/64bit(vmware) the overall\n> >\n> > benchmark\n> >>\n> >> result for Split2 and Split3 is better.\n> >\n> >\n> > And on my Ubuntu 12.04 64bit Vmware, the Split2 got 10% speed up after\n> > the change.\n> >\n> > A wild guess is that this is compiler issue which can be addressed in\n> > the future.\n> >\n> > https://codereview.appspot.com/7458043/\n\nSorry, that vm result shold not take into consideration, that was not Tip.",
			"disapproval": false,
			"date": "2013-03-06 03:46:55.106620",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I know some Chinese applications use explode extensively.\n\nFor none-ASCII text, there is no other better way to process it.",
			"disapproval": false,
			"date": "2013-03-06 04:02:05.787800",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 04:26:43, rsc wrote:\n> I'm sorry, but this is too much fine detail to worry about this close to a\n> release. The only truly important change here is the elimination of the\n> allocation, which can be done by starting with the original version and changing\n> \n> a[i] = string(ch)\n> \n> to\n> \n> if ch == utf8.RuneError {\n>     a[i] = string(utf8.RuneError)\n> } else {\n>     a[i] = s[cur:cur+size]\n> }\n> \n> If you want to apply that 1->5 line change in this CL, then we can move forward\n> with it and get it in before Go 1.1. The rest of the rewrites are less important\n> and more subtle than I want to review before Go 1.1. If you insist on including\n> them, then let's wait until after Go 1.1 has been released.\n> \n> Thanks.\n\nOK, I changed to \"range s\" because it get better speed, if that make the review harder, I can drop it for Go 1.1 release.",
			"disapproval": false,
			"date": "2013-03-06 04:31:59.904170",
			"approval": false
		},
		{
			"sender": "coocood@gmail.com",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 04:02:05, Ewan Chou wrote:\n> I know some Chinese applications use explode extensively.\n> \n> For none-ASCII text, there is no other better way to process it.\n\nAnd Split2 is used much more than Split3, more than 5x.",
			"disapproval": false,
			"date": "2013-03-06 04:13:03.990970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry, but this is too much fine detail to worry about this close to a release. The only truly important change here is the elimination of the allocation, which can be done by starting with the original version and changing\n\na[i] = string(ch)\n\nto\n\nif ch == utf8.RuneError {\n    a[i] = string(utf8.RuneError)\n} else {\n    a[i] = s[cur:cur+size]\n}\n\nIf you want to apply that 1->5 line change in this CL, then we can move forward with it and get it in before Go 1.1. The rest of the rewrites are less important and more subtle than I want to review before Go 1.1. If you insist on including them, then let's wait until after Go 1.1 has been released.\n\nThanks.",
			"disapproval": false,
			"date": "2013-03-06 04:26:43.250990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good. Please update the benchmarks.",
			"disapproval": false,
			"date": "2013-03-06 04:46:28.774050",
			"approval": false
		},
		{
			"sender": "extemporalgenome@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Even though it's an error case, would globally setting:\r\n\r\nconst runeErrString = string(utf8.RuneError)\r\n\r\nhave any measurable benefit for error-laden inputs?\r\n\r\nOn Tuesday, March 5, 2013 10:10:24 PM UTC-7, Ewan Chou wrote:\r\n>\r\n> On 2013/03/06 04:46:28, rsc wrote: \r\n> > Looks good. Please update the benchmarks. \r\n>\r\n> benchmark updated, sadly 11.1% penalty for Split2 on windows. \r\n>\r\n> https://codereview.appspot.com/7458043/ \r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 05:50:01.514260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nDon't worry about Split2. That's not this CL.\r\n",
			"disapproval": false,
			"date": "2013-03-06 20:21:11.617800",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"coocood@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"extemporalgenome@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d9a5413ba789 ***\n\nstrings: remove allocations in Split(s, \"\")\n\nBenchmarkSplit1     77984460     24131380  -69.06%\n\nR=golang-dev, rsc, minux.ma, dave, extemporalgenome\nCC=golang-dev\nhttps://codereview.appspot.com/7458043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-03-06 20:21:25.257420",
			"approval": false
		}
	],
	"owner_email": "coocood@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Ewan Chou",
	"subject": "code review 7458043: strings: optimized \"explode\" method to be 3 times faster.",
	"created": "2013-03-01 07:32:53.826700",
	"patchsets": [
		1,
		2001,
		9001,
		18001,
		23001,
		6002,
		30001,
		31003,
		33002,
		50001,
		53001
	],
	"modified": "2013-03-07 01:08:05.093750",
	"closed": true,
	"issue": 7458043
}