{
	"description": "json: Add HTMLEscape",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "micah.stetson@gmail.com",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-06-03 05:27:12.063389",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The signature should probably be similar to\nCompact and Indent, for consistency.\n\nfunc HTMLEscape(dst *bytes.Buffer, src []byte)\n\nHaving a destination buffer also avoids having to\nexplain when the returned byte slice is shared,\nwhen it's not, etc.\n\nAlso it's probably worth avoiding the individual\ncalls to WriteByte for every single byte.  Instead\nkeep track of the index of the first byte that needs\nto be written and write bigger slices.  See the\nimplementation of Compact.\n\nRuss\n\nOn Wed, Jun 2, 2010 at 22:27,  <micah.stetson@gmail.com> wrote:\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change.\n>\n>\n> Description:\n> json: Add HTMLEscape\n>\n> Please review this at http://codereview.appspot.com/1496042/show\n>\n> Affected files:\n> \u00a0M src/pkg/json/decode_test.go\n> \u00a0M src/pkg/json/encode.go\n>\n>\n> Index: src/pkg/json/decode_test.go\n> ===================================================================\n> --- a/src/pkg/json/decode_test.go\n> +++ b/src/pkg/json/decode_test.go\n> @@ -139,6 +139,13 @@\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0}\n>\n> +func TestHTMLEscape(t *testing.T) {\n> + \u00a0 \u00a0 \u00a0 b := HTMLEscape([]byte(`\"<>&\"`))\n> + \u00a0 \u00a0 \u00a0 if !bytes.Equal(b, []byte(`\"\\u003c\\u003e\\u0026\"`)) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.Errorf(\"Unexpected encoding of \\\"<>&\\\": %s\", b)\n> + \u00a0 \u00a0 \u00a0 }\n> +}\n> +\n> \u00a0func noSpace(c int) int {\n> \u00a0 \u00a0 \u00a0 \u00a0if isSpace(c) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return -1\n> Index: src/pkg/json/encode.go\n> ===================================================================\n> --- a/src/pkg/json/encode.go\n> +++ b/src/pkg/json/encode.go\n> @@ -76,6 +76,25 @@\n> \u00a0 \u00a0 \u00a0 \u00a0return buf.Bytes(), nil\n> \u00a0}\n>\n> +// HTMLEscape re-encodes <, >, and & characters in JSON data so\n> +// they may be safely embedded in HTML. \u00a0For historical reasons,\n> +// browsers don't honor standard HTML escaping within <script>\n> +// tags, so an alternative JSON encoding must be used.\n> +func HTMLEscape(json []byte) []byte {\n> + \u00a0 \u00a0 \u00a0 var b bytes.Buffer\n> + \u00a0 \u00a0 \u00a0 for _, c := range json {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 switch c {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case '<', '>', '&':\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.WriteString(`\\u00`)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.WriteByte(hex[c>>4])\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.WriteByte(hex[c&0xF])\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default:\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 b.WriteByte(c)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 return b.Bytes()\n> +}\n> +\n> \u00a0// Marshaler is the interface implemented by objects that\n> \u00a0// can marshal themselves into valid JSON.\n> \u00a0type Marshaler interface {\n>\n>\n>\n",
			"disapproval": false,
			"date": "2010-06-03 05:44:08.073808",
			"approval": false
		},
		{
			"sender": "micah.stetson@gmail.com",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-03 19:26:01.779148",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks good, thanks.\nSorry for the long delay.\n\nhttp://codereview.appspot.com/1496042/diff/7001/8002\nFile src/pkg/json/encode.go (right):\n\nhttp://codereview.appspot.com/1496042/diff/7001/8002#newcode91\nsrc/pkg/json/encode.go:91: // and & characters re-encoded so  they may be safely embedded\nHTMLEscape appends to dst the JSON-encoded src with <, >, and &\ncharacters inside string literals changed to \\u003c, \\u003e, \\u0026,\nso that the JSON will be safe to embed inside HTML <script> tags.\n\nhttp://codereview.appspot.com/1496042/diff/7001/8002#newcode96\nsrc/pkg/json/encode.go:96: start := 0\nbefore this line (but inside the func)\n\n    // < > & can only appear in string literals,\n    // so just scan the string one byte at a time.",
			"disapproval": false,
			"date": "2010-06-30 21:49:34.502653",
			"approval": false
		},
		{
			"sender": "micah.stetson@gmail.com",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-05 20:47:53.864155",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2010-07-12 18:16:08.547238",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"micah.stetson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=39200b93ebcc ***\n\njson: Add HTMLEscape\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/1496042\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2010-07-12 18:26:49.962677",
			"approval": false
		}
	],
	"owner_email": "micah.stetson@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mstetson",
	"subject": "code review 1496042: json: Add HTMLEscape",
	"created": "2010-06-03 05:25:30.665967",
	"patchsets": [
		1,
		2001,
		7001,
		14001
	],
	"modified": "2010-07-12 18:26:49.962677",
	"closed": false,
	"issue": 1496042
}