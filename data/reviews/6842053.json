{
	"description": "net: consoldate literal target address into IP address functions\n\nThis CL continues with introducing IPv6 scoped addressing capability\ninto the net package.\n\nUpdate issue 4234.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-26 16:28:15.147210",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 28, 2012 at 12:30 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> I was concerned about code like:\r\n>\r\n>      if _, _, err := net.SplitHostPort(inputFromUser); err != nil {\r\n>             fail\r\n>      }\r\n>      // use inputFromUser, trusting its format.\r\n>\r\n> ... and Go 1.1 then accepting a larger class of input with % and such past\r\n> such a check.\r\n>\r\n> I don't know if that's a valid fear or not.\r\n\r\nI guess such codes come from web stuff. As discussed, failed to make\r\na consensus in IETF, and is described in RFC 3986, generic syntax of\r\nURI does not support IPv6 scope zone identifiers for host part in URI.\r\n\r\nSeems a bit tough to bridge btw \"host\" of net package and host in \"URI\"\r\nof net/http, net/uri packages. Hm, perhaps it might better to leave\r\nnet.SplitHostPort for now. Let me sleep on it. Thanks.\r\n",
			"disapproval": false,
			"date": "2012-11-28 04:16:21.889060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks. Now it all makes sense to me. :-)\n\nhttps://codereview.appspot.com/6842053/diff/6004/src/pkg/net/ipraw_test.go\nFile src/pkg/net/ipraw_test.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6004/src/pkg/net/ipraw_test.go#newcode33\nsrc/pkg/net/ipraw_test.go:33: {\"l2tp:gre\", \"127.0.0.1\", nil, UnknownNetworkError(\"l2tp:gre\")},\nPlease add\n\n{\"tcp\", \"1.2.3.4:123\", nil, UnknownNetworkError(\"tcp\")},",
			"disapproval": false,
			"date": "2012-11-27 19:50:46.051700",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 28, 2012 at 11:58 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> This CL also makes net.SplitHostPort now take a superset of valid input than\r\n> it used to?\r\n\r\nIf your superset means a literal IPv6 address w/ scoped addressing\r\nzone, not yet.\r\nAn upcoming CL will support it.\r\n",
			"disapproval": false,
			"date": "2012-11-28 03:15:30.913070",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=589646797508 ***\n\nnet: consoldate literal target address into IP address functions\n\nThis CL continues with introducing IPv6 scoped addressing capability\ninto the net package.\n\nUpdate issue 4234.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6842053",
			"disapproval": false,
			"date": "2012-11-27 21:36:14.776730",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL also makes net.SplitHostPort now take a superset of valid input\r\nthan it used to?\r\n\r\n\r\nOn Tue, Nov 27, 2012 at 1:36 PM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> *** Submitted as\r\n> http://code.google.com/p/go/**source/detail?r=589646797508<http://code.google.com/p/go/source/detail?r=589646797508>***\r\n>\r\n>\r\n> net: consoldate literal target address into IP address functions\r\n>\r\n> This CL continues with introducing IPv6 scoped addressing capability\r\n> into the net package.\r\n>\r\n> Update issue 4234.\r\n>\r\n> R=rsc\r\n> CC=golang-dev\r\n> http://codereview.appspot.com/**6842053<http://codereview.appspot.com/6842053>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6842053/<http://codereview.appspot.com/6842053/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-28 02:58:11.252900",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-26 16:04:36.173290",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6842053/diff/6001/src/pkg/net/iprawsock.go\nFile src/pkg/net/iprawsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/iprawsock.go#newcode40\nsrc/pkg/net/iprawsock.go:40: return nil, &ParseError{\"IP address\", net + \" \" + addr}\nyup, that makes unnecessary confusion.\nwill drop.\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/tcpsock.go\nFile src/pkg/net/tcpsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/tcpsock.go#newcode42\nsrc/pkg/net/tcpsock.go:42: tcpa, ok := ia.(*TCPAddr)\nOn 2012/11/26 16:07:26, rsc wrote:\n> Same.\n\nDone.\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/udpsock.go\nFile src/pkg/net/udpsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/udpsock.go#newcode40\nsrc/pkg/net/udpsock.go:40: udpa, ok := ia.(*UDPAddr)\nOn 2012/11/26 16:07:26, rsc wrote:\n> Same.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-26 16:27:51.675710",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6842053/diff/6002/src/pkg/net/iprawsock.go\nFile src/pkg/net/iprawsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6002/src/pkg/net/iprawsock.go#newcode38\nsrc/pkg/net/iprawsock.go:38: return a.(*IPAddr), nil\n> I'm confused. Now if I say ResolveIPAddr(\"tcp\", \"1.2.3.4\") doesn't this panic? \n\nNo, it doesn't. It would be captured by splitHostPort.\n\n> I still want an error. Can we pass resolveInternetAddr something like \"ip\" to tell\n> it what prefix the network must have. Or pass it to parseDialNetwork?\n\nHm, will add net string check to exposed ResolveProtocolAddr APIs.",
			"disapproval": false,
			"date": "2012-11-27 00:50:44.686790",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 27, 2012 at 7:15 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On Wed, Nov 28, 2012 at 11:58 AM, Brad Fitzpatrick <bradfitz@golang.org>\r\n> wrote:\r\n>\r\n> > This CL also makes net.SplitHostPort now take a superset of valid input\r\n> than\r\n> > it used to?\r\n>\r\n> If your superset means a literal IPv6 address w/ scoped addressing\r\n> zone, not yet.\r\n> An upcoming CL will support it.\r\n>\r\n\r\nI was concerned about code like:\r\n\r\n     if _, _, err := net.SplitHostPort(inputFromUser); err != nil {\r\n            fail\r\n     }\r\n     // use inputFromUser, trusting its format.\r\n\r\n... and Go 1.1 then accepting a larger class of input with % and such past\r\nsuch a check.\r\n\r\nI don't know if that's a valid fear or not.\r\n",
			"disapproval": false,
			"date": "2012-11-28 03:30:10.098820",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6842053/diff/6001/src/pkg/net/iprawsock.go\nFile src/pkg/net/iprawsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/iprawsock.go#newcode40\nsrc/pkg/net/iprawsock.go:40: return nil, &ParseError{\"IP address\", net + \" \" + addr}\nWhy does this need a special error? What is wrong with err?\nIt sounds like maybe this is working around the network being wrong? If so maybe parseDialNetwork should be told what kind of network to expect?\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/tcpsock.go\nFile src/pkg/net/tcpsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/tcpsock.go#newcode42\nsrc/pkg/net/tcpsock.go:42: tcpa, ok := ia.(*TCPAddr)\nSame.\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/udpsock.go\nFile src/pkg/net/udpsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6001/src/pkg/net/udpsock.go#newcode40\nsrc/pkg/net/udpsock.go:40: udpa, ok := ia.(*UDPAddr)\nSame.",
			"disapproval": false,
			"date": "2012-11-26 16:07:26.560650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6842053/diff/6002/src/pkg/net/iprawsock.go\nFile src/pkg/net/iprawsock.go (right):\n\nhttps://codereview.appspot.com/6842053/diff/6002/src/pkg/net/iprawsock.go#newcode38\nsrc/pkg/net/iprawsock.go:38: return a.(*IPAddr), nil\nI'm confused. Now if I say ResolveIPAddr(\"tcp\", \"1.2.3.4\") doesn't this panic? I still want an error. Can we pass resolveInternetAddr something like \"ip\" to tell it what prefix the network must have. Or pass it to parseDialNetwork?",
			"disapproval": false,
			"date": "2012-11-26 17:09:37.372020",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-27 00:50:59.084580",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I missed this activity at 6man-wg.\r\n\r\nhttp://tools.ietf.org/html/draft-ietf-6man-uri-zoneid\r\n",
			"disapproval": false,
			"date": "2012-12-10 09:43:37.899480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Interesting. Should we make it an error (everywhere) to see a % if the\r\naddress is not in fe80::/10?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-10 14:42:41.328990",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 10, 2012 at 11:42 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Interesting. Should we make it an error (everywhere) to see a % if the\r\n> address is not in fe80::/10?\r\n\r\nI think that's application's business, not API's.\r\n\r\nAt least net API should accept both link-local unicast/multicast addresses\r\nfor signaling/routing protocols. For net/url.... not sure. If backyard/devops\r\nguys want to write their provisioning scripts in URI? hm...\r\n",
			"disapproval": false,
			"date": "2012-12-10 22:33:27.738060",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6842053: net: consoldate literal target address into IP address ...",
	"created": "2012-11-15 04:50:46.550640",
	"patchsets": [
		6001,
		6002,
		12001,
		6004,
		9005
	],
	"modified": "2012-11-28 02:58:11.345970",
	"closed": true,
	"issue": 6842053
}