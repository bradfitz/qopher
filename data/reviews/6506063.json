{
	"description": "syscall: add GetsockoptInt, GetsockoptInet4Addr for windows",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-04 03:32:49.915380",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/05 04:30:16, brainman wrote:\n\n> If it saves some code somewhere else, then I have nothing against it. But the CL\n> only adds new code that is not used anywhere in the Go tree. Perhaps, if you\n> want to make this change as part of that other bigger change, then things will\n> become clearer for reviewers.\n\nGot it, thanks for your insight and sorry for the lack of explanation.\nThis CL is a part of CL 6482044 that provides IP-level socket options \nfor IPv4 and ensures windows IP-level socket options for net and \ngo.net/ipv4 packages. Does this make sense?",
			"disapproval": false,
			"date": "2012-09-06 11:38:14.801050",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the comments.\r\n\r\nOn Wed, Sep 5, 2012 at 9:23 AM,  <alex.brainman@gmail.com> wrote:\r\n\r\n>> As same as other platforms, that function handles several\r\n>> int-type (for now 32-bit) options for both IPv4 and IPv6,\r\n>> I think so.\r\n>\r\n> I think we all agreed that syscall packages for different os platforms\r\n> do not have to look the same.\r\n\r\nYes.\r\n\r\n> I think, if you want some \"commonality\"\r\n> for os independent code, you should expose it somewhere outside of\r\n> syscall.\r\n\r\nI guess it's not commonality, I just need a sort of int-type options\r\naggregator depends on windows, so just for windows.\r\n\r\nBut... another side of me agree with you, don't mess the package\r\nsyscall anymore... hmm...\r\n\r\nIf you feel something uncomfortable on this then I will stop to consider\r\nthis approach and will re-implement those platform-dependent socket\r\noptions stuff to net, go.net/ipv4 and go.net/ipv6 perhaps or wherever\r\nappropriate packages.\r\n",
			"disapproval": false,
			"date": "2012-09-05 04:08:45.722110",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-06 11:38:39.758030",
			"approval": false
		},
		{
			"sender": "den.savichkin@gmail.com",
			"recipients": [],
			"text": "\u0443\u0430\u04354\u043f",
			"disapproval": false,
			"date": "2012-09-06 11:40:01.996100",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/07 04:01:30, mikio wrote:\n> \n> Do you have any suggestions or ideas?\n\nOnce something is in the main Go tree, it is hard to change it. I would keep everything in go.net.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-07 04:31:12.600590",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 7, 2012 at 10:55 AM,  <alex.brainman@gmail.com> wrote:\r\n\r\n> Sorry, but I still fail to see the need for these changes. Perhaps, we\r\n> could keep the test, but since I do not understand what it does, I can't\r\n> say if it is good idea or not.\r\n\r\n> otherwise it fails to build\r\n\r\noops, sorry.\r\n\r\n> I can see it is called once from ipv4/sockopt_windows.go. You might as\r\n> well implement it in go.net then.\r\n\r\nyup, looks like that's the point.\r\n\r\nI now plan to implement go.net/ipv4 and go.net/ipv6. those two will use\r\nGet/SetsockoptInt, SetsockoptIPMreq, IPv6Mreq and siblings.\r\n\r\nI think we have two options.\r\n\r\na) syscall provides Setsockopt and Getsockopt\r\nother optional thin wrappers like GetsockoptInt, SetsockoptIPMreq,\r\nIPv6Mreq, blah blah should be implemented in each package\r\n\r\nb) syscall provides a bit detailed GetsockoptInt, SetsockoptIPMreq, etc\r\n\r\n(b) works well for Unix families; BSD bros, a cousin Darwin and a second\r\ncousin Liunx but I'm not sure for Windows families including 2000, XP, Vista\r\nand newcomers.\r\n\r\nDo you have any suggestions or ideas?\r\n",
			"disapproval": false,
			"date": "2012-09-07 04:01:30.108420",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Your new test fails:\n\n--- FAIL: TestIPv4SocketOptions (0.00 seconds)\nsocket_windows_test.go:15:      syscall.Socket failed: Either the application has not called WSAStartup, or WSAStartup failed.\nFAIL\n\nAlex\n\nhttp://codereview.appspot.com/6506063/diff/3/src/pkg/syscall/socket_windows_test.go\nFile src/pkg/syscall/socket_windows_test.go (right):\n\nhttp://codereview.appspot.com/6506063/diff/3/src/pkg/syscall/socket_windows_test.go#newcode12\nsrc/pkg/syscall/socket_windows_test.go:12: func TestIPv4SocketOptions(t *testing.T) {\nI do not know what all these options do. I do not think I am qualified to review this.\n\nhttp://codereview.appspot.com/6506063/diff/3/src/pkg/syscall/socket_windows_test.go#newcode23\nsrc/pkg/syscall/socket_windows_test.go:23: syscall.SetNonblock(s, true)\nsyscall.SetNonblock is NOOP. Please, remove it.\n\nhttp://codereview.appspot.com/6506063/diff/3/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/6506063/diff/3/src/pkg/syscall/syscall_windows.go#newcode594\nsrc/pkg/syscall/syscall_windows.go:594: func GetsockoptInt(fd Handle, level, opt int) (int, error) {\nIt is 4 lines of code. Are you sure, we must have this function in syscall?\n\nhttp://codereview.appspot.com/6506063/diff/3/src/pkg/syscall/syscall_windows.go#newcode733\nsrc/pkg/syscall/syscall_windows.go:733: func GetsockoptInet4Addr(fd Handle, level, opt int) ([4]byte, error) {\nSame. And this function is new.",
			"disapproval": false,
			"date": "2012-09-04 06:50:09.880940",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, but I still fail to see the need for these changes. Perhaps, we could keep the test, but since I do not understand what it does, I can't say if it is good idea or not.\n\nAlex\n\nhttp://codereview.appspot.com/6506063/diff/8002/src/pkg/syscall/socket_windows_test.go\nFile src/pkg/syscall/socket_windows_test.go (right):\n\nhttp://codereview.appspot.com/6506063/diff/8002/src/pkg/syscall/socket_windows_test.go#newcode46\nsrc/pkg/syscall/socket_windows_test.go:46: if err := syscall.SetsockoptIPMreq(fd, syscall.IPPROTO_IP, syscall.IP_ADD_MEMBERSHIP, mreq); err != nil {\ns/fd/s/\n\notherwise it fails to build\n\n# GOOS=windows go test -c\n# syscall_test\n./socket_windows_test.go:46: undefined: fd\n\nhttp://codereview.appspot.com/6506063/diff/8002/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/6506063/diff/8002/src/pkg/syscall/syscall_windows.go#newcode712\nsrc/pkg/syscall/syscall_windows.go:712: func GetsockoptInt(fd Handle, level, opt int) (int, error) {\nThis function is not used by go.net. Why do we need to implement it?\n\nhttp://codereview.appspot.com/6506063/diff/8002/src/pkg/syscall/syscall_windows.go#newcode729\nsrc/pkg/syscall/syscall_windows.go:729: func GetsockoptInet4Addr(fd Handle, level, opt int) ([4]byte, error) {\nThis is a new function. You said that this CL simplify code in go.net, but looking there:\n\n# grep GetsockoptInet4Addr * -r                                           \nipv4/sockopt_bsd.go:    a, err := syscall.GetsockoptInet4Addr(fd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF)                                                            \nipv4/sockopt_windows.go:        a, err := syscall.GetsockoptInet4Addr(fd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF)                                                    \n#                                                                         \n\nI can see it is called once from ipv4/sockopt_windows.go. You might as well implement it in go.net then.",
			"disapproval": false,
			"date": "2012-09-07 01:55:42.124860",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your review.\n\nOn 2012/09/04 06:50:09, brainman wrote:\n\n> Your new test fails:\n> \n> --- FAIL: TestIPv4SocketOptions (0.00 seconds)\n> socket_windows_test.go:15:      syscall.Socket failed: Either the application\n> has not called WSAStartup, or WSAStartup failed.\n> FAIL\n\nah, I missed those two, also looks like procgetsockopt \ndoesn't exist in syscall entries, hmm.\n\n> src/pkg/syscall/syscall_windows.go:594: func GetsockoptInt(fd Handle, level, opt\n> int) (int, error) {\n> It is 4 lines of code. Are you sure, we must have this function in syscall?\n\nAs same as other platforms, that function handles several \nint-type (for now 32-bit) options for both IPv4 and IPv6,\nI think so.",
			"disapproval": false,
			"date": "2012-09-04 09:07:26.901150",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/04 09:07:26, mikio wrote:\n> > \n> > --- FAIL: TestIPv4SocketOptions (0.00 seconds)\n> > socket_windows_test.go:15:      syscall.Socket failed: Either the application\n> > has not called WSAStartup, or WSAStartup failed.\n> > FAIL\n> \n> ah, I missed those two, also looks like procgetsockopt \n> doesn't exist in syscall entries, hmm.\n> \n\nAs per Microsoft documentation, you must call WSAStartup before you do anything else:\n\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms742213%28v=vs.85%29.aspx\n\n\"... The WSAStartup function must be the first Windows Sockets function called by an application or DLL ...\"\n\nOur net package does call WSAStartup under the covers. So, if you move your new test there, it should avoid this problem.\n\n> As same as other platforms, that function handles several \n> int-type (for now 32-bit) options for both IPv4 and IPv6,\n> I think so.\n\nI think we all agreed that syscall packages for different os platforms do not have to look the same. I think, if you want some \"commonality\" for os independent code, you should expose it somewhere outside of syscall.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-05 00:23:42.465970",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/05 04:08:45, mikio wrote:\n> \n> I guess it's not commonality, I just need a sort of int-type options\n> aggregator depends on windows, so just for windows.\n\nI do not understand your explanation. Feel free to try again, if you like.\n\n> If you feel something uncomfortable on this then I will stop to consider\n> this approach and will re-implement those platform-dependent socket\n> options stuff to net, go.net/ipv4 and go.net/ipv6 perhaps or wherever\n> appropriate packages.\n\nIf it saves some code somewhere else, then I have nothing against it. But the CL only adds new code that is not used anywhere in the Go tree. Perhaps, if you want to make this change as part of that other bigger change, then things will become clearer for reviewers.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-05 04:30:16.982570",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-07 07:52:42.088660",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/07 04:31:12, brainman wrote:\n\n> Once something is in the main Go tree, it is hard to change it. I would keep\n> everything in http://go.net.\n\nack, thanks!",
			"disapproval": false,
			"date": "2012-09-07 06:04:22.390900",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6506063: syscall: add GetsockoptInt, GetsockoptInet4Addr for windows",
	"created": "2012-09-03 22:09:11.158040",
	"patchsets": [
		1,
		2001,
		3,
		8002
	],
	"modified": "2012-09-07 07:52:44.042450",
	"closed": true,
	"issue": 6506063
}