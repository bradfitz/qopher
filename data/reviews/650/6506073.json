{
	"description": "go.talks: add Go and the Zen of Python talk",
	"cc": [
		"r@golang.org",
		"campoy@google.com",
		"lucio.dere@gmail.com",
		"dsymonds@golang.org",
		"iant@google.com",
		"mpvl@golang.org",
		"sameer@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9/5/12, r@golang.org <r@golang.org> wrote:\r\n>\r\n> http://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode287\r\n> 2012/zen.slide:287: Go has a some built in generic data structures:\r\n> s/built in/built-in/\r\n>\r\nSurely \"Go has *a* some built-in..(my emphasis)\" does not want the \"a\" at all?\r\n\r\nLucio.\r\n",
			"disapproval": false,
			"date": "2012-09-05 13:24:21.948720",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The statement that Go has no implicit conversions is just wrong.\r\nInterface conversion can be done implicitly under assignment.\r\n\r\n  var a InterfaceType = valueImplementingInterface\r\n\r\nThat becomes even more implicit when passing\r\nvalueImplementingInterface as an argument to a function that accepts\r\nInterfaceType. Every call to Println uses this form of implicit\r\nconversion.\r\n\r\nI use the phrase that Go has no implicit numeric conversions because\r\nthat is true. It doesn't cover all the forbidden cases but it covers\r\nthe most important ones.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-05 13:48:42.447460",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"iant@google.com",
				"mpvl@golang.org",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=919f8129211b&repo=talks ***\n\ngo.talks: add Go and the Zen of Python talk\n\nR=r, campoy, lucio.dere, dsymonds, iant, mpvl, sameer\nCC=golang-dev\nhttp://codereview.appspot.com/6506073",
			"disapproval": false,
			"date": "2012-09-06 01:00:22.608780",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Sep 5, 2012 at 6:45 AM, David Symonds <dsymonds@golang.org> wrote:\r\n> On Wed, Sep 5, 2012 at 11:29 PM, Rob Pike <r@golang.org> wrote:\r\n>\r\n>> Go does not have duck typing. Stop saying that it does.\r\n>\r\n> You should post something to golang-dev. Lots of people think it does,\r\n> and I can't see from the Wikipedia page on duck typing how it doesn't.\r\n\r\nTechnically speaking, Go has a form of structural typing.  Duck typing\r\nimplies that the characteristics of the type are checked dynamically\r\nwhen used, and that is not what happens in Go.  In Go the\r\ncharacteristics are checked when assigning to an interface type.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-09-05 13:54:37.946430",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6506073/diff/2002/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode162\n2012/zen.slide:162: func (s Scalar) Abs() float64 {\nOn 2012/09/05 13:17:33, r wrote:\n> making the point aside, why not return Scalar?\n> also this is a weak example because in every other language abs would just work.\n> can we come up with a better one?\n\nA good point. I'll sleep on it.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode195\n2012/zen.slide:195: c, err := rpc.Dial(\"tcp\", addr)\nOn 2012/09/05 13:17:33, r wrote:\n> s/c/client/\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode199\n2012/zen.slide:199: return &Client{client: c}\nOn 2012/09/05 13:17:33, r wrote:\n> return &Client{client}\n> \n> simpler and maybe better for the audience?\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode237\n2012/zen.slide:237: - No implicit conversions\nOn 2012/09/05 13:17:33, r wrote:\n> s/conversions/numeric &/\n> i'm starting to get pedantic about this one\n\nHang on - we don't permit explicit string->[]byte conversions either. The only implicit conversions we allow are from untyped constants, or into/between interface values. Or am I missing something?\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode238\n2012/zen.slide:238: - Go data structures define memory layout (no hidden costs)\nOn 2012/09/05 13:17:33, r wrote:\n> well.... what's a string? a slice? a map?\n\nwell, slices and strings have well-defined properties. maps not so much... perhaps it could have a footnote?\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode272\n2012/zen.slide:272: - Packages share one name space across multiple files\nOn 2012/09/05 13:17:33, r wrote:\n> package name space is flat too\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode287\n2012/zen.slide:287: Go has a some built in generic data structures:\nOn 2012/09/05 13:17:33, r wrote:\n> s/built in/built-in/\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode303\n2012/zen.slide:303: - Many other language design decisions were made in the name of readability.\nOn 2012/09/05 13:17:33, r wrote:\n> export e.g.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-05 13:31:42.425310",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6506073/diff/2002/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttps://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode162\n2012/zen.slide:162: func (s Scalar) Abs() float64 {\nOn 2012/09/05 13:17:33, r wrote:\n> making the point aside, why not return Scalar?\n> also this is a weak example because in every other language abs would just work.\n> can we come up with a better one?\n> \n> this is ok and feel free to leave it as is, i'm just musing\n\n\"Len() int\" might be a reasonable substitute. Or \"Norm() float64\" if you wanted to stick with geometry/maths.\n\nhttps://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode172\n2012/zen.slide:172: Interfaces are just methods (no data)\nCalling out the duck typing implication here might be good for a Python audience.\n\nhttps://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode209\n2012/zen.slide:209: type Foo struct { // expored type\n\"exported\"",
			"disapproval": false,
			"date": "2012-09-05 13:25:59.202630",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"iant@google.com",
				"mpvl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6506073/diff/2005/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode174\n2012/zen.slide:174: Interfaces are implicit (no `implements` declaration)\nBut the Zen of Python says: \"Explicit is better than implicit.\"  Maybe explain why implicit is good here.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode235\n2012/zen.slide:235: - Explicit error handling (no exceptions)\nBut, this makes it easier to violate: \"Errors should never pass silently.\"  Perhaps say something about this.",
			"disapproval": false,
			"date": "2012-09-05 14:53:33.374700",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, campoy@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2012-09-05 12:54:31.978210",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Go does not have duck typing. Stop saying that it does.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-05 13:29:06.960380",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The very existence of interface types make it not duck typing. Static\r\nchecking is done to guarantee interface satisfaction. Duck typing is\r\npurely dynamic.\r\n\r\nHere it is, right out of Wikipedia:\r\n\r\nStructural type systems\r\n\r\nDuck typing is similar to but distinct from structural typing.\r\nStructural typing is a static typing system that determines type\r\ncompatibility and equivalence by a type's structure, whereas duck\r\ntyping is dynamic and determines type compatibility by only that part\r\nof a type's structure that is accessed during run time.\r\n\r\nThe OCaml, Scala, and Go languages use structural type systems.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-05 13:55:34.306570",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This wasn't intended for golang-dev, but if anyone wants to review it\r\ngo ahead. :-)\r\n",
			"disapproval": false,
			"date": "2012-09-05 12:59:02.112420",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"iant@google.com",
				"mpvl@golang.org",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6506073/diff/2005/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode191\n2012/zen.slide:191: client *rpc.Client\nToo many things called \"client\" here.\n\nReplace the outer client with some application-level concept like FileSystem or Database, perhaps.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode215\n2012/zen.slide:215: func (f Foo) quux() {} // private method\n\"private\" is misleading, since in Go this really means \"package visibility\".  Howabout:\n  // unexported method (visible within package foo)\nAnd add a package foo statement at the top.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode229\n2012/zen.slide:229: - No generators\nbut embedding+interfaces cover most uses of inheritance and make it easy to create decorators\n\n(and channels support generators and iterators but we don't encourage that, so best not to mention it...)\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode300\n2012/zen.slide:300: - The `gofmt` tool enforces \"one true style.\" (No more arguments.)\nformatting != style.  There are still arguments, but fewer dumb ones.",
			"disapproval": false,
			"date": "2012-09-05 15:41:34.401230",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6506073/diff/2002/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode162\n2012/zen.slide:162: func (s Scalar) Abs() float64 {\nmaking the point aside, why not return Scalar?\nalso this is a weak example because in every other language abs would just work. can we come up with a better one?\n\nthis is ok and feel free to leave it as is, i'm just musing\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode195\n2012/zen.slide:195: c, err := rpc.Dial(\"tcp\", addr)\ns/c/client/\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode199\n2012/zen.slide:199: return &Client{client: c}\nreturn &Client{client}\n\nsimpler and maybe better for the audience?\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode237\n2012/zen.slide:237: - No implicit conversions\ns/conversions/numeric &/\ni'm starting to get pedantic about this one\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode238\n2012/zen.slide:238: - Go data structures define memory layout (no hidden costs)\nwell.... what's a string? a slice? a map?\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode272\n2012/zen.slide:272: - Packages share one name space across multiple files\npackage name space is flat too\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode287\n2012/zen.slide:287: Go has a some built in generic data structures:\ns/built in/built-in/\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode303\n2012/zen.slide:303: - Many other language design decisions were made in the name of readability.\nexport e.g.",
			"disapproval": false,
			"date": "2012-09-05 13:17:33.577860",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This would make a good blog post.\r\n",
			"disapproval": false,
			"date": "2012-09-05 14:37:05.071470",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6506073/diff/2002/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode147\n2012/zen.slide:147: type Vector struct {\nWhy Vector and not Point2D?\nCalling this a vector is ... mathematically correct, though.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode209\n2012/zen.slide:209: type Foo struct { // expored type\ns/expored/exported/\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode238\n2012/zen.slide:238: - Go data structures define memory layout (no hidden costs)\ns/data structures/structs/\n\nI got this question in Zurich: When you say there's no hidden allocations, what about maps and slices?",
			"disapproval": false,
			"date": "2012-09-05 13:32:51.918220",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"iant@google.com",
				"mpvl@golang.org",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6506073/diff/2005/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode174\n2012/zen.slide:174: Interfaces are implicit (no `implements` declaration)\nOn 2012/09/05 14:53:33, mpvl wrote:\n> But the Zen of Python says: \"Explicit is better than implicit.\"  Maybe explain\n> why implicit is good here.\n\nI will, in person, but I don't want to clutter the slide.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode191\n2012/zen.slide:191: client *rpc.Client\nOn 2012/09/05 15:41:34, Sameer Ajmani wrote:\n> Too many things called \"client\" here.\n> \n> Replace the outer client with some application-level concept like FileSystem or\n> Database, perhaps.\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode215\n2012/zen.slide:215: func (f Foo) quux() {} // private method\nOn 2012/09/05 15:41:34, Sameer Ajmani wrote:\n> \"private\" is misleading, since in Go this really means \"package visibility\". \n> Howabout:\n>   // unexported method (visible within package foo)\n> And add a package foo statement at the top.\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode229\n2012/zen.slide:229: - No generators\nOn 2012/09/05 15:41:34, Sameer Ajmani wrote:\n> but embedding+interfaces cover most uses of inheritance and make it easy to\n> create decorators\n> \n> (and channels support generators and iterators but we don't encourage that, so\n> best not to mention it...)\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode235\n2012/zen.slide:235: - Explicit error handling (no exceptions)\nOn 2012/09/05 14:53:33, mpvl wrote:\n> But, this makes it easier to violate: \"Errors should never pass silently.\" \n> Perhaps say something about this.\n\nI will. But I don't want to get bogged down in nitpicky stuff related to the zen of python. It's already a contradictory and kinda solly document. It's just a basis from which to familiarize python programmers.\n\nhttp://codereview.appspot.com/6506073/diff/2005/2012/zen.slide#newcode300\n2012/zen.slide:300: - The `gofmt` tool enforces \"one true style.\" (No more arguments.)\nOn 2012/09/05 15:41:34, Sameer Ajmani wrote:\n> formatting != style.  There are still arguments, but fewer dumb ones.\nchanged it do \"no more stupid arguments\"",
			"disapproval": false,
			"date": "2012-09-05 22:20:12.184250",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Who knew that 11pm australian time was the best time to send out a CL?\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode172\n2012/zen.slide:172: Interfaces are just methods (no data)\nOn 2012/09/05 13:25:59, dsymonds wrote:\n> Calling out the duck typing implication here might be good for a Python\n> audience.\n\nit's structural typing you insensitive clod!\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode209\n2012/zen.slide:209: type Foo struct { // expored type\nOn 2012/09/05 13:25:59, dsymonds wrote:\n> \"exported\"\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode209\n2012/zen.slide:209: type Foo struct { // expored type\nOn 2012/09/05 13:32:52, campoy wrote:\n> s/expored/exported/\n\nDone.\n\nhttp://codereview.appspot.com/6506073/diff/2002/2012/zen.slide#newcode238\n2012/zen.slide:238: - Go data structures define memory layout (no hidden costs)\nOn 2012/09/05 13:32:52, campoy wrote:\n> s/data structures/structs/\n> \n> I got this question in Zurich: When you say there's no hidden allocations, what\n> about maps and slices? \n\nDone.",
			"disapproval": false,
			"date": "2012-09-05 13:34:20.871800",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"iant@google.com",
				"mpvl@golang.org",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, campoy@google.com, lucio.dere@gmail.com, dsymonds@golang.org, iant@google.com, mpvl@golang.org, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-05 22:20:31.788630",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, campoy@google.com, lucio.dere@gmail.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-05 13:34:37.305140",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Sep 5, 2012 at 11:29 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> Go does not have duck typing. Stop saying that it does.\r\n\r\nYou should post something to golang-dev. Lots of people think it does,\r\nand I can't see from the Wikipedia page on duck typing how it doesn't.\r\n",
			"disapproval": false,
			"date": "2012-09-05 13:45:26.823380",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"campoy@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"iant@google.com",
				"mpvl@golang.org",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6506073/diff/12001/2012/zen.slide\nFile 2012/zen.slide (right):\n\nhttp://codereview.appspot.com/6506073/diff/12001/2012/zen.slide#newcode123\n2012/zen.slide:123: * Go is zenlike\nZenlike",
			"disapproval": false,
			"date": "2012-09-05 22:42:21.965990",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To put it as simply as I can: If Go had duck typing, it wouldn't need\r\ninterface types.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-05 14:05:12.225640",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is great! I'm uninstalling Libreoffice right now!\r\n\r\nOn Thu, Sep 6, 2012 at 11:00 AM,  <adg@golang.org> wrote:\r\n> *** Submitted as\r\n> http://code.google.com/p/go/source/detail?r=919f8129211b&repo=talks ***\r\n>\r\n>\r\n> go.talks: add Go and the Zen of Python talk\r\n>\r\n> R=r, campoy, lucio.dere, dsymonds, iant, mpvl, sameer\r\n> CC=golang-dev\r\n> http://codereview.appspot.com/6506073\r\n>\r\n>\r\n> http://codereview.appspot.com/6506073/\r\n",
			"disapproval": false,
			"date": "2012-09-06 02:33:03.411570",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6506073: go.talks: add Go and the Zen of Python talk",
	"created": "2012-09-05 12:53:12.240710",
	"patchsets": [
		1,
		2001,
		2002,
		2003,
		2005,
		12001,
		3019,
		6003,
		10005
	],
	"modified": "2012-09-06 02:33:03.498850",
	"closed": true,
	"issue": 6506073
}