{
	"description": "exp/types/staging: operands, constants, and error handling\n\nMore pieces of the typechecker code:\n\n- Operands are temporary objects representing an expressions's\ntype and value (for constants). An operand is the equivalent of\nan \"attribute\" in attribute grammars except that it's not stored\nbut only passed around during type checking.\n\n- Constant operations are implemented in const.go. Constants are\nrepresented as bool (booleans), int64 and *big.Int (integers),\n*big.Rat (floats), complex (complex numbers), and string (strings).\n\n- Error reporting is consolidated in errors.go. Only the first\ndozen of lines is new code, the rest of the file contains the\nexprString and typeString functions formerly in two separate\nfiles (which have been removed).\n\nThis is a replacement CL for 6492101 (which was created without\nproper use of hg).",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-12 04:41:59.211510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Code seems fine but please document what functions and methods are intended to do.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go\nFile src/pkg/exp/types/staging/check.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode1\nsrc/pkg/exp/types/staging/check.go:1: // Copyright P011 The Go Authors. All rights reserved.\ns/P/2/\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode24\nsrc/pkg/exp/types/staging/check.go:24: func (check *checker) declare(scope *ast.Scope, kind ast.ObjKind, ident *ast.Ident, decl ast.Decl) {\nCould you add short doc comments to each of these top-level functions and methods? I can kind of guess what they're doing, but it would help to have confirmation of my guesses.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode89\nsrc/pkg/exp/types/staging/check.go:89: // TODO(gri) FIX THIS! Quadratic algorithm - just to get going for now.\nI was confused by this because the code here is not quadratic. It's the fact that it gets called in a loop that causes the problem. If you add a map[*ast.ValueSpec][]ast.Expr to the checker, you could tweak this code to record all the results on the first call and then use the map on subsequent calls.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode255\nsrc/pkg/exp/types/staging/check.go:255: if obj, local = lookup(pkg.Scope, ident.Name); obj != nil {\nI'm a little confused. Is ident.Obj not set for some reason?\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode295\nsrc/pkg/exp/types/staging/check.go:295: {\nSure, or list = make(ObjList, 0, len...) and use append.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go\nFile src/pkg/exp/types/staging/const.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode1\nsrc/pkg/exp/types/staging/const.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nNo need to update copyright years.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode66\nsrc/pkg/exp/types/staging/const.go:66: func normalizeIntConst(x *big.Int) interface{} {\nSmall doc comments on all top-level funcs and methods please.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode156\nsrc/pkg/exp/types/staging/const.go:156: return 0 <= x && x < 1<<intBits\nUse x <= 1<<intBits-1 to avoid problems when intBits = 64.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode166\nsrc/pkg/exp/types/staging/const.go:166: return 0 <= x /* && x < 1<<ptrBits */\nx <= 1<<ptrBits-1\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode176\nsrc/pkg/exp/types/staging/const.go:176: return true\nIn the doc comment please explain the possible input kinds. Seeing UntypedInt makes me wonder why UntypedFloat etc don't appear.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode181\nsrc/pkg/exp/types/staging/const.go:181: case Uint64:\nneed case Uint here too when intBits==64.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode246\nsrc/pkg/exp/types/staging/const.go:246: switch x := x.(type) {\nI wonder if some tables would simplify some of these functions. If you had a function to measure complexity (1=bool, 2=int64, 3=big.Int, 4=big.Rat, 5=complex), you could at least do\n\nif complexity(x) > complexity(y) {\n    y, x = matchConst(y, x)\n    return x, y\n}\n\nand then only need half as many cases here.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode324\nsrc/pkg/exp/types/staging/const.go:324: // Returns nil if a division-by-zero error occurs.\nDoes more than that.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/errors.go\nFile src/pkg/exp/types/staging/errors.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/errors.go#newcode20\nsrc/pkg/exp/types/staging/errors.go:20: func assert(p bool) {\nfunc/method comments\nHopefully assert is just for debugging and the eventual API will return errors always, even 'internal error' errors.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/operand.go\nFile src/pkg/exp/types/staging/operand.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/operand.go#newcode50\nsrc/pkg/exp/types/staging/operand.go:50: func (x *operand) pos() token.Pos {\nfunc/method comments\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/predicates.go\nFile src/pkg/exp/types/staging/predicates.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/predicates.go#newcode231\nsrc/pkg/exp/types/staging/predicates.go:231: unreachable()\nuntyped nil?\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/stubs.go\nFile src/pkg/exp/types/staging/stubs.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/stubs.go#newcode29\nsrc/pkg/exp/types/staging/stubs.go:29: func (check *checker) assignNtoM(lhs, rhs []ast.Expr, decl bool, iota int) {\ncomments",
			"disapproval": false,
			"date": "2012-09-17 20:28:46.795790",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go\nFile src/pkg/exp/types/staging/check.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode1\nsrc/pkg/exp/types/staging/check.go:1: // Copyright P011 The Go Authors. All rights reserved.\nOn 2012/09/17 20:28:46, rsc wrote:\n> s/P/2/\n\nDone.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode24\nsrc/pkg/exp/types/staging/check.go:24: func (check *checker) declare(scope *ast.Scope, kind ast.ObjKind, ident *ast.Ident, decl ast.Decl) {\nOn 2012/09/17 20:28:46, rsc wrote:\n> Could you add short doc comments to each of these top-level functions and\n> methods? I can kind of guess what they're doing, but it would help to have\n> confirmation of my guesses.\n\nDone.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode89\nsrc/pkg/exp/types/staging/check.go:89: // TODO(gri) FIX THIS! Quadratic algorithm - just to get going for now.\nOn 2012/09/17 20:28:46, rsc wrote:\n> I was confused by this because the code here is not quadratic. It's the fact\n> that it gets called in a loop that causes the problem. If you add a\n> map[*ast.ValueSpec][]ast.Expr to the checker, you could tweak this code to\n> record all the results on the first call and then use the map on subsequent\n> calls.\n\nModified comment.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/check.go#newcode255\nsrc/pkg/exp/types/staging/check.go:255: if obj, local = lookup(pkg.Scope, ident.Name); obj != nil {\nOn 2012/09/17 20:28:46, rsc wrote:\n> I'm a little confused. Is ident.Obj not set for some reason?\n\nIt is. I don't know what I was thinking. Adjusted.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go\nFile src/pkg/exp/types/staging/const.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode1\nsrc/pkg/exp/types/staging/const.go:1: // Copyright 2012 The Go Authors. All rights reserved.\nOn 2012/09/17 20:28:46, rsc wrote:\n> No need to update copyright years.\n\nUnderstood. This was essentially a complete rewrite. Changed back.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode66\nsrc/pkg/exp/types/staging/const.go:66: func normalizeIntConst(x *big.Int) interface{} {\nOn 2012/09/17 20:28:46, rsc wrote:\n> Small doc comments on all top-level funcs and methods please.\n\nDone.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode156\nsrc/pkg/exp/types/staging/const.go:156: return 0 <= x && x < 1<<intBits\nOn 2012/09/17 20:28:46, rsc wrote:\n> Use x <= 1<<intBits-1 to avoid problems when intBits = 64.\n\nDone.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode166\nsrc/pkg/exp/types/staging/const.go:166: return 0 <= x /* && x < 1<<ptrBits */\nOn 2012/09/17 20:28:46, rsc wrote:\n> x <= 1<<ptrBits-1\n\nDone.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode176\nsrc/pkg/exp/types/staging/const.go:176: return true\nOn 2012/09/17 20:28:46, rsc wrote:\n> In the doc comment please explain the possible input kinds. Seeing UntypedInt\n> makes me wonder why UntypedFloat etc don't appear.\n\nExpanded code (easier than special case it).\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode181\nsrc/pkg/exp/types/staging/const.go:181: case Uint64:\nOn 2012/09/17 20:28:46, rsc wrote:\n> need case Uint here too when intBits==64.\n\nDone.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode246\nsrc/pkg/exp/types/staging/const.go:246: switch x := x.(type) {\nOn 2012/09/17 20:28:46, rsc wrote:\n> I wonder if some tables would simplify some of these functions. If you had a\n> function to measure complexity (1=bool, 2=int64, 3=big.Int, 4=big.Rat,\n> 5=complex), you could at least do\n> \n> if complexity(x) > complexity(y) {\n>     y, x = matchConst(y, x)\n>     return x, y\n> }\n> \n> and then only need half as many cases here.\n\nDone. Saves about a dozen lines.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/const.go#newcode324\nsrc/pkg/exp/types/staging/const.go:324: // Returns nil if a division-by-zero error occurs.\nOn 2012/09/17 20:28:46, rsc wrote:\n> Does more than that.\n\nDone.\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/errors.go\nFile src/pkg/exp/types/staging/errors.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/errors.go#newcode20\nsrc/pkg/exp/types/staging/errors.go:20: func assert(p bool) {\nOn 2012/09/17 20:28:46, rsc wrote:\n> func/method comments\n> Hopefully assert is just for debugging and the eventual API will return errors\n> always, even 'internal error' errors.\n\nyes - but for now it's useful\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/stubs.go\nFile src/pkg/exp/types/staging/stubs.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/10010/src/pkg/exp/types/staging/stubs.go#newcode29\nsrc/pkg/exp/types/staging/stubs.go:29: func (check *checker) assignNtoM(lhs, rhs []ast.Expr, decl bool, iota int) {\nOn 2012/09/17 20:28:46, rsc wrote:\n> comments\n\nDone.",
			"disapproval": false,
			"date": "2012-09-18 23:16:11.984350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6500114/diff/16012/src/pkg/exp/types/staging/operand.go\nFile src/pkg/exp/types/staging/operand.go (right):\n\nhttp://codereview.appspot.com/6500114/diff/16012/src/pkg/exp/types/staging/operand.go#newcode75\nsrc/pkg/exp/types/staging/operand.go:75: fmt.Fprintf(&buf, \" of type %s\", typeString(x.typ))\nAha. Here it is.",
			"disapproval": false,
			"date": "2012-09-24 15:08:59.089120",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e35106c26e0b ***\n\nexp/types/staging: operands, constants, and error handling\n\nMore pieces of the typechecker code:\n\n- Operands are temporary objects representing an expressions's\ntype and value (for constants). An operand is the equivalent of\nan \"attribute\" in attribute grammars except that it's not stored\nbut only passed around during type checking.\n\n- Constant operations are implemented in const.go. Constants are\nrepresented as bool (booleans), int64 and *big.Int (integers),\n*big.Rat (floats), complex (complex numbers), and string (strings).\n\n- Error reporting is consolidated in errors.go. Only the first\ndozen of lines is new code, the rest of the file contains the\nexprString and typeString functions formerly in two separate\nfiles (which have been removed).\n\nThis is a replacement CL for 6492101 (which was created without\nproper use of hg).\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6500114",
			"disapproval": false,
			"date": "2012-09-26 00:38:31.179390",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6500114: exp/types/staging: operands, constants, and error handling",
	"created": "2012-09-12 04:36:56.496930",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		6011,
		9001,
		10010,
		14001,
		16012,
		26001,
		29001
	],
	"modified": "2012-09-26 00:38:32.224460",
	"closed": true,
	"issue": 6500114
}