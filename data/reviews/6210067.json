{
	"description": "net/http: distinguish between query string and body parameters, add a\nbody-only (POST/PUT) parameter accessor, and prioritize POST/PUT body\nover the URL query string in FormValue.\n\nFixes issue 3630.",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com",
		"rodrigo.moraes@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rodrigo.moraes@gmail.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-18 17:18:25.014135",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-18 07:06:13.790297",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/18 17:21:06, pmylund wrote:\n> FormValue will still return a query parameter value if parsing the body fails.\n> This is the current behavior, too. Should this fail?\n\nNo, that is fine. It loaded the stuff it could.",
			"disapproval": false,
			"date": "2012-05-18 20:20:14.341120",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-18 09:14:27.311146",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/18 20:20:14, rodrigo.moraes wrote:\n> On 2012/05/18 17:21:06, pmylund wrote:\n> > FormValue will still return a query parameter value if parsing the body fails.\n> > This is the current behavior, too. Should this fail?\n> \n> No, that is fine. It loaded the stuff it could.\n\nIndeed, but it presents the same security issue as prioritizing query string parameters over body ones did: an application might use a query string parameter instead of the body one it normally uses in some requests.\n\nThis one seems quite unlikely though, and probably unlikely enough to not warrant erroring out prematurely, I agree.",
			"disapproval": false,
			"date": "2012-05-18 20:25:03.402377",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/18 20:25:03, pmylund wrote:\n> Indeed, but it presents the same security issue as prioritizing query string\n> parameters over body ones did: an application might use a query string parameter\n> instead of the body one it normally uses in some requests.\n\nNo, because now PostForm will exist. :)",
			"disapproval": false,
			"date": "2012-05-18 21:06:48.243573",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-18 08:34:20.829016",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6210067/diff/11001/src/pkg/net/http/request.go\nFile src/pkg/net/http/request.go (right):\n\nhttp://codereview.appspot.com/6210067/diff/11001/src/pkg/net/http/request.go#newcode628\nsrc/pkg/net/http/request.go:628: }\nAfter this, add a \"if r.BodyForm == nil { r.BodyForm, e = url.ParseQuery(string(b)) [...] }\"\n\n(expect that BodyForm could be set already).",
			"disapproval": false,
			"date": "2012-05-18 13:55:54.358186",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/18 17:18:25, pmylund wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:dsymonds@golang.org, mailto:rodrigo.moraes@gmail.com\n> (cc: mailto:bradfitz@golang.org, mailto:golang-dev@googlegroups.com, mailto:rsc@golang.org),\n> \n> Please take another look.\n\nFormValue will still return a query parameter value if parsing the body fails. This is the current behavior, too. Should this fail?\n\nI noticed a few fringe cases where FormValue would call ParseForm twice, ParseForm wouldn't be idempotent, or ParseForm wouldn't always initialize Form/PostForm (which is the behavior the docs hint at.) I added a test for these (nil POST body and nil URL.)",
			"disapproval": false,
			"date": "2012-05-18 17:21:06.362930",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm a little split here:\n\n - req.FormValue(\"foo\") still \"just works\" (prioritizing body values)\n - Adds the body-only value accessor req.BodyFormValue(\"foo\") (necessary?)\n - BREAKS req.Form[\"foo\"] where body == foo=bar, and adds req.BodyForm[\"foo\"]\n - BREAKS req.Form[\"both\"] where query?both=x and body == both=y\n - Doesn't incur double overhead for POST requests (with a lot of data)\n\nIs it significant that you can't interchangeably use query and body params in r.Form (when FormValue still works)? Should I try not to break it? If so, would you prefer I turn it into a slice of pointers, or copy the contents (even for large POST requests)?",
			"disapproval": false,
			"date": "2012-05-18 07:08:51.337708",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 18, 2012 at 5:08 PM,  <patrick@patrickmn.com> wrote:\r\n\r\n> \u00a0- BREAKS req.Form[\"foo\"] where body == foo=bar, and adds\r\n> req.BodyForm[\"foo\"]\r\n> \u00a0- BREAKS req.Form[\"both\"] where query?both=x and body == both=y\r\n\r\nYou cannot do this. It violates the contract we made with Go 1\r\n(http://golang.org/doc/go1compat.html). This is a new feature; it may\r\nnot change the behaviour of existing code.\r\n\r\n\r\nDave.\r\n",
			"disapproval": false,
			"date": "2012-05-18 07:29:48.352722",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suspected. I'll change and resubmit. Thanks.\r\n\r\nOn Fri, May 18, 2012 at 9:29 AM, David Symonds <dsymonds@golang.org> wrote:\r\n> On Fri, May 18, 2012 at 5:08 PM, \u00a0<patrick@patrickmn.com> wrote:\r\n>\r\n>> \u00a0- BREAKS req.Form[\"foo\"] where body == foo=bar, and adds\r\n>> req.BodyForm[\"foo\"]\r\n>> \u00a0- BREAKS req.Form[\"both\"] where query?both=x and body == both=y\r\n>\r\n> You cannot do this. It violates the contract we made with Go 1\r\n> (http://golang.org/doc/go1compat.html). This is a new feature; it may\r\n> not change the behaviour of existing code.\r\n>\r\n>\r\n> Dave.\r\n",
			"disapproval": false,
			"date": "2012-05-18 07:31:09.294994",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the many submissions. Should've spotted everything now.",
			"disapproval": false,
			"date": "2012-05-20 02:18:56.014792",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This still changes the ordering of POST vs. GET values (see issue 3630.) This arguably falls under both the unspecified behavior and security categories of the compatibility contract. This _only_ breaks anything if somebody is actually counting on getting a parameter with the same name from the query string before the body.\n\nIs it worth reinventing BodyForm's url.Values to hold pointers to strings, making the behavior of Form vs. BodyForm somewhat inconsistent?",
			"disapproval": false,
			"date": "2012-05-18 08:39:21.188630",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-18 08:55:29.760702",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Quick take: http://codereview.appspot.com/6208080",
			"disapproval": false,
			"date": "2012-05-18 14:26:00.375197",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please call BodyForm PostForm.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-18 15:40:15.619731",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rodrigo.moraes@gmail.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-18 21:03:04.046875",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rodrigo.moraes@gmail.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-20 02:17:59.386669",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hey rsc,\n\nWould you like me to revise this? Move less code around? Make the test neater?\n\nP",
			"disapproval": false,
			"date": "2012-05-29 16:12:57.520706",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/29 16:19:37, rsc wrote:\n> It would be nice to have smaller diffs, yes. parsePostForm should at\n> least be moved down a function, so that the code is not moving as far.\n> \n> Also, either you are changing the meaning of the Form map, which is\n> not something we can do, or the new code in the FormValue method is\n> unnecessary. I hope it is the latter, in which case please remove it.\n> \n> Russ\n\nThe behavior does change slightly, but this arguably falls under both \"undefined\" and \"security\". The new code ensures body/post values precede query values. Could you clarify if this is desired/only a body-value accessor is needed? (ref. issue 3630)\n\nI'm already adding body values to r.Form before query values, so the FormValue addition _is_ redundant in most cases. Nevertheless, the behavior does change.",
			"disapproval": false,
			"date": "2012-05-29 16:30:22.817915",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It would be nice to have smaller diffs, yes. parsePostForm should at\r\nleast be moved down a function, so that the code is not moving as far.\r\n\r\nAlso, either you are changing the meaning of the Form map, which is\r\nnot something we can do, or the new code in the FormValue method is\r\nunnecessary. I hope it is the latter, in which case please remove it.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 16:19:37.878084",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 12:30 PM,  <patrick@patrickmn.com> wrote:\r\n> The behavior does change slightly, but this arguably falls under both\r\n> \"undefined\" and \"security\". The new code ensures body/post values\r\n> precede query values. Could you clarify if this is desired/only a\r\n> body-value accessor is needed? (ref. issue 3630)\r\n\r\nIt's okay that the order in r.Form changes (post first, then url).\r\n\r\n> I'm already adding body values to r.Form before query values, so the\r\n> FormValue addition _is_ redundant in most cases. Nevertheless, the\r\n> behavior does change.\r\n\r\nGiven that r.Form changes, I don't understand why the FormValue edit is needed.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 16:32:21.590902",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/29 16:32:21, rsc wrote:\n> On Tue, May 29, 2012 at 12:30 PM,  <mailto:patrick@patrickmn.com> wrote:\n> > The behavior does change slightly, but this arguably falls under both\n> > \"undefined\" and \"security\". The new code ensures body/post values\n> > precede query values. Could you clarify if this is desired/only a\n> > body-value accessor is needed? (ref. issue 3630)\n> \n> It's okay that the order in r.Form changes (post first, then url).\n> \n\nOk.\n\n> > I'm already adding body values to r.Form before query values, so the\n> > FormValue addition _is_ redundant in most cases. Nevertheless, the\n> > behavior does change.\n> \n> Given that r.Form changes, I don't understand why the FormValue edit is needed.\n> \n> Russ\n\nIt's not. It was to ensure \"body values precede query ones\" in corner cases e.g. someone initializes r.Form by themselves, and for clarity. But agreed, this is unnecessary.\n\nWill change to reflect. Thanks!",
			"disapproval": false,
			"date": "2012-05-29 16:50:45.516259",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rodrigo.moraes@gmail.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-30 13:57:00.227341",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry for dropping this. I think it's in good shape, just a few small things below.\n\nhttp://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go\nFile src/pkg/net/http/request.go (right):\n\nhttp://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go#newcode603\nsrc/pkg/net/http/request.go:603: func copyValues(src, dest url.Values) {\nCopy functions in Go always take dst, src, just like the = statement. Please fix this here and then update the call sites.\n\nhttp://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go#newcode604\nsrc/pkg/net/http/request.go:604: // TODO: make this smoother.\nPlease be more precise about what smoother means, or delete the comment.\n\nhttp://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go#newcode736\nsrc/pkg/net/http/request.go:736: // POST and PUT body parameters precede URL query string values.\ns/precede/take precedence over/",
			"disapproval": false,
			"date": "2012-06-26 00:14:55.154334",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rodrigo.moraes@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/26 00:14:55, rsc wrote:\n> I'm sorry for dropping this. I think it's in good shape, just a few small things\n> below.\n> \n> http://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go\n> File src/pkg/net/http/request.go (right):\n> \n> http://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go#newcode603\n> src/pkg/net/http/request.go:603: func copyValues(src, dest url.Values) {\n> Copy functions in Go always take dst, src, just like the = statement. Please fix\n> this here and then update the call sites.\n> \n> http://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go#newcode604\n> src/pkg/net/http/request.go:604: // TODO: make this smoother.\n> Please be more precise about what smoother means, or delete the comment.\n> \n> http://codereview.appspot.com/6210067/diff/24002/src/pkg/net/http/request.go#newcode736\n> src/pkg/net/http/request.go:736: // POST and PUT body parameters precede URL\n> query string values.\n> s/precede/take precedence over/\n\nNo worries. I've been kind of pondering how to make the test and the copying nicer, but couldn't come up with anything that wasn't more expensive, or less intuitive.\n\nI'll update. As for the smoother comment, I'm not totally sure either (it was there before.) I guess the whole copying aspect isn't too \"smooth\", but alas. Will remove unless Brad objects.",
			"disapproval": false,
			"date": "2012-06-26 00:22:43.943872",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"rodrigo.moraes@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: bradfitz@golang.org, dsymonds@golang.org, golang-dev@googlegroups.com, rodrigo.moraes@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-26 00:34:03.488651",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"rodrigo.moraes@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0dac18e695f3 ***\n\nnet/http: provide access to POST-only form values\n\nFixes issue 3630.\n\nR=rsc\nCC=bradfitz, dsymonds, golang-dev, rodrigo.moraes\nhttp://codereview.appspot.com/6210067\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-26 00:41:57.038230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-06-26 00:41:07.354705",
			"approval": true
		}
	],
	"owner_email": "patrick@patrickmn.com",
	"private": false,
	"base_url": "",
	"owner": "pmylund",
	"subject": "code review 6210067: net/http: distinguish between query string and body par...",
	"created": "2012-05-18 07:04:27.312851",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		8001,
		11001,
		15001,
		14002,
		17001,
		24002,
		31001
	],
	"modified": "2012-06-29 01:44:37.107717",
	"closed": true,
	"issue": 6210067
}