{
	"description": "bytes: Examples recommending bytes.Compare(a, b) rel_op 0 to test a rel_op b.",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"adg@golang.org"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-03 22:45:13.633580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Go doesn't support relational operations for slices, so\ni don't know why we mention them here.\n\nhttps://codereview.appspot.com/7042045/diff/5001/src/pkg/bytes/bytes.go\nFile src/pkg/bytes/bytes.go (right):\n\nhttps://codereview.appspot.com/7042045/diff/5001/src/pkg/bytes/bytes.go#newcode14\nsrc/pkg/bytes/bytes.go:14: // Compare returns an integer comparing two byte arrays lexicographically.\nwhile you're at here, please s/arrays/slices/",
			"disapproval": false,
			"date": "2013-01-04 20:32:07.651520",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/04 20:32:07, minux wrote:\n> Go doesn't support relational operations for slices, so\n> i don't know why we mention them here.\n\nThe Go language doesn't support rel_ops on slices, but I think it's still reasonable to logically discuss orderings on them.  E.g., Compare's raison d'\u00eatre is to define a byte-wise lexicographical ordering on byte slices, and its godoc already uses the notations \"a < b\" and \"a > b\" in reference to this ordering even though they're not syntactically valid Go expressions.\n\nThe intent of this CL is just to document that if you want to test \"x <= y\", then since the Go language doesn't allow that expression when x and y are byte slices, an idiomatic alternative would be to use \"Compare(x, y) <= 0\".  Further, this pattern holds for any rel_op.\n\nThis is an idiom I'm accustomed to from C programming for interpreting strcmp/memcmp/etc results, but it took me a moment too long of carefully considering the Compare() return values to make sure the idiom still worked here.  I couldn't find any other document (e.g., Effective Go) that suggested this idiom, so I thought a concise comment might help others and establish a consistent and easy-to-read convention.\n\nOf course, opinions may differ on whether \"Compare(a, b) == -1\" or \"Compare(a, b) < 0\" is preferable.  IMO the latter is easier to read, but I'm not a committer so I defer judgement. ;)\n\nhttps://codereview.appspot.com/7042045/diff/5001/src/pkg/bytes/bytes.go\nFile src/pkg/bytes/bytes.go (right):\n\nhttps://codereview.appspot.com/7042045/diff/5001/src/pkg/bytes/bytes.go#newcode14\nsrc/pkg/bytes/bytes.go:14: // Compare returns an integer comparing two byte arrays lexicographically.\nOn 2013/01/04 20:32:07, minux wrote:\n> while you're at here, please s/arrays/slices/\n\nI believe nigeltao intends to fix this in https://codereview.appspot.com/7028051/ (and also included my \"the\" removal), so I've reverted this part of the CL.",
			"disapproval": false,
			"date": "2013-01-04 21:33:07.704300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Instead of writing text, how about writing an ExampleCompare function\r\nshowing uses with < 0, == 0, and >0.\r\n",
			"disapproval": false,
			"date": "2013-01-04 23:31:28.186690",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7042045/diff/15002/src/pkg/bytes/example_test.go\nFile src/pkg/bytes/example_test.go (right):\n\nhttps://codereview.appspot.com/7042045/diff/15002/src/pkg/bytes/example_test.go#newcode62\nsrc/pkg/bytes/example_test.go:62: // Return needle <= haystack[i].\nPlease use haystack[i] >= needle, to match the sort.Search documentation.\n(And fix the next line and the Equal call.)\n\nThat is, sort.Search's docs say:\n\n    To complete the example above, the following code tries to find the\n    value x in an integer slice data sorted in ascending order:\n\n\tx := 23\n\ti := sort.Search(len(data), func(i int) bool { return data[i] >= x })\n\tif i < len(data) && data[i] == x {\n\t\t// x is present at data[i]\n\t} else {\n\t\t// x is not present in data,\n\t\t// but i is the index where it would be inserted.\n\t}\n\nThis should use the same comparisons and operand orders.",
			"disapproval": false,
			"date": "2013-01-07 00:26:18.313680",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-04 23:59:20.015350",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7042045/diff/17001/src/pkg/bytes/example_test.go\nFile src/pkg/bytes/example_test.go (right):\n\nhttps://codereview.appspot.com/7042045/diff/17001/src/pkg/bytes/example_test.go#newcode33\nsrc/pkg/bytes/example_test.go:33: // It's idiomatic to interpret Compare's result by comparing it to 0.\n// Interpret Compare's result by comparing it to zero.",
			"disapproval": false,
			"date": "2013-01-06 22:03:35.489260",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com, rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-06 22:48:10.630200",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-06 22:58:57.461030",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9ef7b839accd ***\n\nbytes: Examples recommending bytes.Compare(a, b) rel_op 0 to test a rel_op b.\n\nR=golang-dev, minux.ma, rsc, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7042045\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-01-06 22:59:56.559930",
			"approval": false
		}
	],
	"owner_email": "mdempsky@google.com",
	"private": false,
	"base_url": "",
	"owner": "mdempsky",
	"subject": "code review 7042045: bytes: Examples recommending bytes.Compare(a, b) rel_op...",
	"created": "2013-01-03 22:44:35.393050",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		17001,
		16002,
		15002
	],
	"modified": "2013-01-07 00:26:18.593360",
	"closed": true,
	"issue": 7042045
}