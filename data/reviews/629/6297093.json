{
	"description": "cmd/gc: inline interface generation\n\nThis CL adds infrastructure in the gc compiler for addressing the\nindividual words of an interface value.\n\nThe first project this is used for, is to inline the convT2I method\nand add a shortcut similar to the EFACE node for pointer types.\n\nThis is just an initial request for comments. Eventually I'd like to inline\nall the interface conversion methods into the compiler, but I want to make\nsure that I'm on the right track. This CL will need a lot of work before\nit's submittable.\n\nI am new to compiler work, so the code might be horrendously ugly and I\nwouldn't know it. There's one point I suspect is horrendous, which is in\nthe convas() function. It changes the target of the init list to another node.\nIt's neccesary when walking OAS2FUNC nodes, because in that case, the init\nlist is pointing to before the function call that returns the value that\nI'm converting.\n\nIf anyone knows a better way to do this, I'd love to hear it.\n\nbenchmarks:\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkConvT2ESmall             11           11   +0.89%\nBenchmarkConvT2EUintptr            0            0   +0.00%\nBenchmarkConvT2EBig               71           72   +0.97%\nBenchmarkConvT2I                  22           15  -28.18%\nBenchmarkConvT2IBig               86           84   -1.63%\nBenchmarkConvI2E                   4            4   +8.20%\nBenchmarkConvI2I                  17           16   -1.17%",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nigel is already working on this. Please discuss changes on the\r\nmailing list before sending us CLs.\r\n",
			"disapproval": false,
			"date": "2012-06-19 18:39:00.570000",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 19, 2012 at 11:38 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Nigel is already working on this. Please discuss changes on the\r\n> mailing list before sending us CLs.\r\n\r\n\r\nYour & Nigel's planned changes are also not on the mailing list.\r\n",
			"disapproval": false,
			"date": "2012-06-19 20:03:04.551791",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-19 18:37:38.922130",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 19, 2012 at 8:38 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Nigel is already working on this. Please discuss changes on the\r\n> mailing list before sending us CLs.\r\n\r\nI'm sorry. This is the second time I've sent in something that a go\r\ncore team member is already working on. I usually work on the linux\r\nkernel where any discussion without code attached is swiftly\r\ndiscarded, so it has formed at habit of getting a rough prototype\r\ngoing and use that as a discussion starter. I hope I am not being too\r\nannoying with this habit.\r\n\r\nI'll start discussion before working on my next CL.\r\n",
			"disapproval": false,
			"date": "2012-06-19 18:56:01.125646",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-06-21 18:50:45.242699",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry for the short reply earlier - I spent last week falling ever\r\nbehind on email.\r\n\r\nWe do take a different approach to open source than the Linux kernel\r\ngroup does. The primary difference is that we really do want\r\ndiscussion on the list before code arrives. We prefer to discuss plans\r\nand designs before a significant amount of code has been written, or\r\nat least without reference to the code, because the code inevitably\r\ndraws focus away from the design. A large chunk of existing code also\r\noften becomes an inertial argument against doing something different.\r\nFor both these reasons, we ask for discussion first\r\n(http://golang.org/doc/contribute.html#Design). Even if you have\r\nwritten code to explore the idea, it helps to focus first on the\r\ndesign. I have an implementation for the SetMem proposal I made last\r\nweek, but it's not in the discussion thread for those very reasons.\r\n\r\nI apologize too for the duplication of effort. One benefit of\r\ndiscussion beforehand is that we can identify those a bit earlier in\r\nthe process. The current state of the world as I understand it is that\r\nNigel is working on a sequence of optimizations relating to interface\r\nconversions, and I am trying to make escape analysis a little more\r\nprecise and also do some general analyses to eliminate bounds checks.\r\nI am unaware of any other active efforts.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-24 23:07:17.664781",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 6297093: cmd/gc: inline interface generation",
	"created": "2012-06-17 19:54:04.859634",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		4009,
		8001,
		9001
	],
	"modified": "2012-06-21 18:50:49.720659",
	"closed": true,
	"issue": 6297093
}