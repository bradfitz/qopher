{
	"description": "runtime: use uintptr where possible in malloc stats\n\nlinux/arm OMAP4 pandaboard\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   68723297000  37026214000  -46.12%\nBenchmarkFannkuch11     34962402000  35958435000   +2.85%\nBenchmarkGobDecode        137298600    124182150   -9.55%\nBenchmarkGobEncode         60717160     60006700   -1.17%\nBenchmarkGzip            5647156000   5550873000   -1.70%\nBenchmarkGunzip          1196350000   1198670000   +0.19%\nBenchmarkJSONEncode       863012800    782898000   -9.28%\nBenchmarkJSONDecode      3312989000   2781800000  -16.03%\nBenchmarkMandelbrot200     45727540     45703120   -0.05%\nBenchmarkParse             74781800     59990840  -19.78%\nBenchmarkRevcomp          140043650    139462300   -0.42%\nBenchmarkTemplate        6467682000   5832153000   -9.83%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             5.59         6.18    1.11x\nBenchmarkGobEncode            12.64        12.79    1.01x\nBenchmarkGzip                  3.44         3.50    1.02x\nBenchmarkGunzip               16.22        16.19    1.00x\nBenchmarkJSONEncode            2.25         2.48    1.10x\nBenchmarkJSONDecode            0.59         0.70    1.19x\nBenchmarkParse                 0.77         0.97    1.26x\nBenchmarkRevcomp              18.15        18.23    1.00x\nBenchmarkTemplate              0.30         0.33    1.10x\n\ndarwin/386 core duo\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   10591616577   9678245733   -8.62%\nBenchmarkFannkuch11     10758473315  10749303846   -0.09%\nBenchmarkGobDecode         34379785     34121250   -0.75%\nBenchmarkGobEncode         23523721     23475750   -0.20%\nBenchmarkGzip            2486191492   2446539568   -1.59%\nBenchmarkGunzip           444179328    444250293   +0.02%\nBenchmarkJSONEncode       221138507    219757826   -0.62%\nBenchmarkJSONDecode      1056034428   1048975133   -0.67%\nBenchmarkMandelbrot200     19862516     19868346   +0.03%\nBenchmarkRevcomp         3742610872   3724821662   -0.48%\nBenchmarkTemplate         960283112    944791517   -1.61%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            22.33        22.49    1.01x\nBenchmarkGobEncode            32.63        32.69    1.00x\nBenchmarkGzip                  7.80         7.93    1.02x\nBenchmarkGunzip               43.69        43.68    1.00x\nBenchmarkJSONEncode            8.77         8.83    1.01x\nBenchmarkJSONDecode            1.84         1.85    1.01x\nBenchmarkRevcomp              67.91        68.24    1.00x\nBenchmarkTemplate              2.02         2.05    1.01x",
	"cc": [
		"rsc@golang.org",
		"0xe2.0x9a.0x9b@gmail.com",
		"mirtchovski@gmail.com",
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode273\nsrc/pkg/runtime/malloc.h:273: struct MCache\nYou only need to check these:\n\n- local_total_alloc in function runtime\u00b7mallocgc. local_total_alloc is always the maximum value from all values in struct MCache, except local_nlookup.\n\n- local_nlookup in function runtime\u00b7mlookup\n\nIf any of these two gets greater than (1<<30), call runtime.purgecachedstats(c) like Russ suggested.",
			"disapproval": false,
			"date": "2012-06-06 16:58:02.403381",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the thorough testing. Would you be able to try with the two overflow checks removed from malloc.goc and all.bash rerun. I agree with rsc that these should not add significantly to the overhead, but it would be nice to know.  \r\n\r\nSent from my iPad\r\n\r\nOn 09/06/2012, at 8:03, andrey mirtchovski <mirtchovski@gmail.com> wrote:\r\n\r\n> just a bit more noise. I did full 25 permutations since i realized\r\n> that 'old' and 'new' are different sets. each result gives mean and\r\n> stddev of the diff % for the 25 comparisons between pre- and post- CL,\r\n> always comparing old vs new:\r\n> \r\n> linux/386, 4-core opteron 2216:\r\n> \r\n> BenchmarkBinaryTree17         5.5224         4.23802\r\n> BenchmarkFannkuch11             0.01        0.111319\r\n> BenchmarkGobDecode            7.5264        0.889871\r\n> BenchmarkGobEncode           -0.6116        0.754298\r\n> BenchmarkGunzip               0.0108       0.0651718\r\n> BenchmarkGzip                -0.0452        0.168193\r\n> BenchmarkJSONDecode          -1.6704         0.28888\r\n> BenchmarkJSONEncode            1.672        0.380967\r\n> BenchmarkMandelbrot200        0.0204       0.0650218\r\n> BenchmarkParse                1.6252         2.74243\r\n> BenchmarkRevcomp              0.0352        0.873156\r\n> BenchmarkTemplate             2.0496          1.0998\r\n> \r\n> linux/386, core2duo:\r\n> \r\n> BenchmarkBinaryTree17        -7.3452        0.167359\r\n> BenchmarkFannkuch11          -0.7848       0.0179154\r\n> BenchmarkGobDecode            0.4256        0.743048\r\n> BenchmarkGobEncode           -0.1888       0.0703886\r\n> BenchmarkGunzip               4.1372         2.11495\r\n> BenchmarkGzip                 0.2104        0.572772\r\n> BenchmarkJSONDecode          -0.4104        0.230104\r\n> BenchmarkJSONEncode          -0.1228        0.130369\r\n> BenchmarkMandelbrot200        0.0008      0.00271293\r\n> BenchmarkParse               -1.0472        0.119148\r\n> BenchmarkRevcomp             -0.0776       0.0667101\r\n> BenchmarkTemplate            -1.2672       0.0665444\r\n",
			"disapproval": false,
			"date": "2012-06-08 22:12:29.839958",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/386, core2duo, pre-patch vs CL minus malloc.cgo overflow checks:\r\n\r\nbenchmark                 old ns/op    new ns/op\r\ndeltaBenchmarkBinaryTree17    7088561000   6787030000   -4.25%\r\nBenchmarkFannkuch11      6707543000   6660017000   -0.71%\r\nBenchmarkGobDecode         24963420     25433580   +1.88%\r\nBenchmarkGobEncode         15112400     15099320   -0.09%\r\nBenchmarkGzip            1824614000   1822942000   -0.09%\r\nBenchmarkGunzip           292055600    291917200   -0.05%\r\nBenchmarkJSONEncode       152174600    151412500   -0.50%\r\nBenchmarkJSONDecode       756780400    750679600   -0.81%\r\nBenchmarkMandelbrot200     18858590     18860390   +0.01%\r\nBenchmarkParse             10527070     10497640   -0.28%\r\nBenchmarkRevcomp         2656891000   2657431000   +0.02%\r\nBenchmarkTemplate         683705400    672919800   -1.58%\r\n\r\nbenchmark                  old MB/s     new MB/s  speedup\r\nBenchmarkGobDecode            30.75        30.18    0.98x\r\nBenchmarkGobEncode            50.79        50.83    1.00x\r\nBenchmarkGzip                 10.63        10.64    1.00x\r\nBenchmarkGunzip               66.44        66.47    1.00x\r\nBenchmarkJSONEncode           12.75        12.82    1.01x\r\nBenchmarkJSONDecode            2.56         2.58    1.01x\r\nBenchmarkParse                 5.50         5.52    1.00x\r\nBenchmarkRevcomp              95.66        95.64    1.00x\r\nBenchmarkTemplate              2.84         2.88    1.01x\r\n\r\nlinux/386, core2duo, CL applied vs CL minus malloc.cgo overflow checks:\r\n\r\nbenchmark                 old ns/op    new ns/op    delta\r\nBenchmarkBinaryTree17    6552946000   6787030000   +3.57%\r\nBenchmarkFannkuch11      6653561000   6660017000   +0.10%\r\nBenchmarkGobDecode         25376790     25433580   +0.22%\r\nBenchmarkGobEncode         15073620     15099320   +0.17%\r\nBenchmarkGzip            1822452000   1822942000   +0.03%\r\nBenchmarkGunzip           306155400    291917200   -4.65%\r\nBenchmarkJSONEncode       151789000    151412500   -0.25%\r\nBenchmarkJSONDecode       753945000    750679600   -0.43%\r\nBenchmarkMandelbrot200     18859190     18860390   +0.01%\r\nBenchmarkParse             10402120     10497640   +0.92%\r\nBenchmarkRevcomp         2654264000   2657431000   +0.12%\r\nBenchmarkTemplate         675202400    672919800   -0.34%\r\n\r\nbenchmark                  old MB/s     new MB/s  speedup\r\nBenchmarkGobDecode            30.25        30.18    1.00x\r\nBenchmarkGobEncode            50.92        50.83    1.00x\r\nBenchmarkGzip                 10.65        10.64    1.00x\r\nBenchmarkGunzip               63.38        66.47    1.05x\r\nBenchmarkJSONEncode           12.78        12.82    1.00x\r\nBenchmarkJSONDecode            2.57         2.58    1.00x\r\nBenchmarkParse                 5.57         5.52    0.99x\r\nBenchmarkRevcomp              95.76        95.64    1.00x\r\nBenchmarkTemplate              2.87         2.88    1.00x\r\n\r\n\r\nlinux/386, core2duo, pre-patch vs CL minus malloc.cgo overflow checks,\r\n5 tests performed for each. this shows mean and stddev for the\r\ndifference percentage (the 'delta' value reported by benchcmp) of all\r\nthe permutations between the two sets, 25 comparisons per test.\r\n\r\nBenchmarkBinaryTree17        -4.1684        0.174417\r\nBenchmarkFannkuch11          -0.6772       0.0156256\r\nBenchmarkGobDecode            1.0524        0.519679\r\nBenchmarkGobEncode           -0.0972       0.0628344\r\nBenchmarkGunzip               0.1776        0.189658\r\nBenchmarkGzip                -0.1232          0.1576\r\nBenchmarkJSONDecode          -0.9616        0.172411\r\nBenchmarkJSONEncode          -0.6172        0.076185\r\nBenchmarkMandelbrot200         0.008      0.00748331\r\nBenchmarkParse               -0.4492       0.0889908\r\nBenchmarkRevcomp              -0.016       0.0766812\r\nBenchmarkTemplate            -1.7688         0.11194\r\n\r\nlinux/386, core2duo, CL applied vs CL minus overflow checks:\r\n\r\nBenchmarkBinaryTree17         3.4272        0.102392\r\nBenchmarkFannkuch11           0.1084      0.00783837\r\nBenchmarkGobDecode            0.6288        0.629948\r\nBenchmarkGobEncode            0.0912       0.0449284\r\nBenchmarkGunzip               -3.762         2.01043\r\nBenchmarkGzip                -0.3304        0.576989\r\nBenchmarkJSONDecode          -0.5512        0.166405\r\nBenchmarkJSONEncode          -0.4952        0.124615\r\nBenchmarkMandelbrot200        0.0052          0.0064\r\nBenchmarkParse                0.6048           0.137\r\nBenchmarkRevcomp               0.062       0.0928224\r\nBenchmarkTemplate            -0.5088        0.096263\r\n",
			"disapproval": false,
			"date": "2012-06-08 22:34:07.221683",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 7, 2012 at 7:08 AM,  <dave@cheney.net> wrote:\r\n> Hello. Thank you for your comments. I've attempted to incorporate Atom's\r\n> fast checking solution based on local_total_alloc and local_nlookup and\r\n> it appears to have no observable cost penalty (results for amd64 are\r\n> unaffected, as you would hope).\r\n\r\nLooks good to me.\r\n\r\n> Having said that, I'm concerned that I'm punching above my weight so\r\n> would ask if others with more experience would like to adopt this patch.\r\n\r\nI appreciate your caution, but the change is still quite small and\r\neasy to review. I don't think one of us needs to take it over. Please\r\nrun hg mail to send it to golang-dev.\r\n\r\nThanks!\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 12:52:44.172030",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> i'm very skeptical\r\n\r\nabout the tests or about the patch?\r\n",
			"disapproval": false,
			"date": "2012-06-08 20:11:18.127927",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-08 21:35:02.281519",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think you can do this, but it will require a few more checks. They are probably cheaper than the 64-bit math, at least on the ARM.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode276\nsrc/pkg/runtime/malloc.h:276: uintptr size;\nThis can be uintptr, since it is the number of active bytes in use.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode277\nsrc/pkg/runtime/malloc.h:277: intptr local_cachealloc;\t// bytes allocated (or freed) from cache since last lock of heap\nYou can make this intptr but only if you add code to check for overflow in mcache.c, something like\n\nstatic void\nruntime.MCache_ResetStats(MCache *c)\n{\n    runtime.lock(&mheap);\n    runtime.purgecachedstats(c);\n    runtime.unlock(&mheap);\n}\n\n...\n\nc->local_cachealloc += size;\nc->local_objects--;\nif(c->local_cachealloc > (1<<30))\n    runtime.MCache_ResetStats(c);\n\n...\n\nc->local_cachealloc -= size;\nc->local_objects++;\nif(c->local_cachealloc < (-1<<30))\n    runtime.MCache_ResetStats(c);\n\nI leave it to you to determine whether that's actually a win.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode278\nsrc/pkg/runtime/malloc.h:278: intptr local_objects;\t// objects allocated (or freed) from cache since last lock of heap\nThis can be intptr without any checks, since the total number of objects that can exist is bounded by the address size divide by the minimum block size, which is something like 4 or 8 or 16. So this can never overflow.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode279\nsrc/pkg/runtime/malloc.h:279: intptr local_alloc;\t// bytes allocated (or freed) since last lock of heap\nSame thing applies. The code that manipulates local_alloc and local_total_alloc would have to check for overflow. You should be able to check\n\nif(c->local_total_alloc > (1<<30) || c->local_alloc < (-1<<30))\n\nYou don't need to check c->local_alloc > 1<<30 because that would imply the first half of the if.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode281\nsrc/pkg/runtime/malloc.h:281: uintptr local_nmalloc;\t// number of mallocs since last lock of heap\nThis will always be smaller than local_total_alloc, so you don't have to check it explicitly, as long as you do check local_total_alloc.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode282\nsrc/pkg/runtime/malloc.h:282: uintptr local_nfree;\t// number of frees since last lock of heap\nThis probably needs an explicit check.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode283\nsrc/pkg/runtime/malloc.h:283: uintptr local_nlookup;\t// number of pointer lookups since last lock of heap\nThis changes during garbage collection and during ordinary use. In ordinary use it is bounded by local_nfree, so there's no need for a check.\nIf you call cachestats(nil) after stoptheworld in runtime.gc, then it will be zero on entry to the GC and will be unable to overflow, since each lookup corresponds to an address read from a different location in memory. So if you are already checking local_nfree and add the cachestats call, this can change to uintptr.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode287\nsrc/pkg/runtime/malloc.h:287: uintptr nmalloc;\nThis is bounded by local_nmalloc, and similarly nfree is bounded by local_nfree. If you make it safe to make those uintptr, these can be uintptr too.",
			"disapproval": false,
			"date": "2012-06-06 14:55:35.859842",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The patch seems fine. It's hard for me to believe that a new if\r\nstatement caused 6% overhead in the linux/386 benchmarks.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-08 20:35:27.359101",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think you do need to check some of the others.\r\n\r\nYou can have local_nfree == 1 but local_total_alloc == 0 if the stats\r\nare purged and then the free happens. It is possible that the frees\r\ncannot stack up significantly more than that (maybe just freeing of\r\ndefers?) but the check should be cheap.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-06 17:25:43.337853",
			"approval": false
		},
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 6, 2012 at 7:25 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I think you do need to check some of the others.\r\n>\r\n> You can have local_nfree == 1 but local_total_alloc == 0 if the stats\r\n> are purged and then the free happens. It is possible that the frees\r\n> cannot stack up significantly more than that (maybe just freeing of\r\n> defers?) but the check should be cheap.\r\n>\r\n> Russ\r\n\r\n1. Run runtime.purgecachedstats: local_nfree == local_total_alloc == 0.\r\n2. Free 0x7FFFFFFF objects: local_nfree == 0x7FFFFFFF, memory usage is zero.\r\n3. Allocate 0x7FFFFFFF objects.\r\n4. Free 0x7FFFFFFF objects: local_nfree == 0x7FFFFFFF+0x7FFFFFFF,\r\nmemory usage is zero.\r\n5. Allocate 10 objects.\r\n6. Free 10 objects: local_nfree overflows uintptr.\r\n\r\nHowever, (3) will always trigger runtime.purgecachedstats(c), so in\r\nstep (4) local_nfree == 0x7FFFFFFF. Thus local_nfree cannot overflow.\r\n",
			"disapproval": false,
			"date": "2012-06-06 20:08:39.185446",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice.\r\n",
			"disapproval": false,
			"date": "2012-06-06 20:42:35.850868",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, 0xe2.0x9a.0x9b@gmail.com (cc: golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-07 23:51:01.953404",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/386:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    9404107000   9602360000   +2.11%\nBenchmarkFannkuch11     10682824000  10813868000   +1.23%\nBenchmarkGobDecode         31227240     31397420   +0.54%\nBenchmarkGobEncode         20020010     18816970   -6.01%\nBenchmarkGzip            3284496000   3273865000   -0.32%\nBenchmarkGunzip           327753400    331800800   +1.23%\nBenchmarkJSONEncode       175218800    177365100   +1.22%\nBenchmarkJSONDecode       911270800    884113600   -2.98%\nBenchmarkMandelbrot200     14305160     14285810   -0.14%\nBenchmarkParse             11916440     12743660   +6.94%\nBenchmarkRevcomp         3063132000   3127920000   +2.12%\nBenchmarkTemplate         798228600    848137400   +6.25%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            24.58        24.45    0.99x\nBenchmarkGobEncode            38.34        40.79    1.06x\nBenchmarkGzip                  5.91         5.93    1.00x\nBenchmarkGunzip               59.21        58.48    0.99x\nBenchmarkJSONEncode           11.07        10.94    0.99x\nBenchmarkJSONDecode            2.13         2.19    1.03x\nBenchmarkParse                 4.86         4.55    0.94x\nBenchmarkRevcomp              82.98        81.26    0.98x\nBenchmarkTemplate              2.43         2.29    0.94x",
			"disapproval": false,
			"date": "2012-06-08 20:03:05.597023",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, 0xe2.0x9a.0x9b@gmail.com (cc: golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-07 13:04:58.566163",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">= in both tests please.\r\n",
			"disapproval": false,
			"date": "2012-06-07 14:36:46.615433",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To make sure I wasn't getting wild swings in test results I reran the\r\nbefore and after tests 5 times each and compared all possible\r\n2-combinations of {old, new}. the results seem statistically plausible\r\nat first glance. the widest swings are in GobDecode/GobEncode, but\r\nthere are orders of magnitude differences cropping elsewhere. The\r\nmachine isn't quiescent, the load is 0.2 currently. I can't rerun the\r\ntests on my \"quiet\" machine since it's out of order. One can discard\r\nthese if they're not representative and I'll rerun the tests if I get\r\na hold of my machine and posts the results later. sorry for the noise.\r\n\r\nlinux/386:\r\n\r\nBenchmarkBinaryTree17    9277363000   9582318000   +3.29%\r\nBenchmarkBinaryTree17    9277363000   9752558000   +5.12%\r\nBenchmarkBinaryTree17    9278767000   9582318000   +3.27%\r\nBenchmarkBinaryTree17    9301428000   9581900000   +3.02%\r\nBenchmarkBinaryTree17    9301428000   9582318000   +3.02%\r\nBenchmarkBinaryTree17    9301428000   9585110000   +3.05%\r\nBenchmarkBinaryTree17    9301428000   9752558000   +4.85%\r\nBenchmarkBinaryTree17    9317258000   9581900000   +2.84%\r\nBenchmarkBinaryTree17    9317258000   9582318000   +2.84%\r\nBenchmarkBinaryTree17    9317258000   9752558000   +4.67%\r\n\r\nBenchmarkFannkuch11     10685475000  10689056000   +0.03%\r\nBenchmarkFannkuch11     10685475000  10706592000   +0.20%\r\nBenchmarkFannkuch11     10686551000  10689056000   +0.02%\r\nBenchmarkFannkuch11     10686551000  10689520000   +0.03%\r\nBenchmarkFannkuch11     10686551000  10706592000   +0.19%\r\nBenchmarkFannkuch11     10686551000  10706815000   +0.19%\r\nBenchmarkFannkuch11     10687061000  10689056000   +0.02%\r\nBenchmarkFannkuch11     10687061000  10689520000   +0.02%\r\nBenchmarkFannkuch11     10687061000  10706592000   +0.18%\r\nBenchmarkFannkuch11     10705983000  10706592000   +0.01%\r\n\r\nBenchmarkGobDecode         29382830     31245560   +6.34%\r\nBenchmarkGobDecode         29539720     31245560   +5.77%\r\nBenchmarkGobDecode         29539720     33493600  +13.38%\r\nBenchmarkGobDecode         29540580     31018220   +5.00%\r\nBenchmarkGobDecode         29540580     31245560   +5.77%\r\nBenchmarkGobDecode         29540580     31871920   +7.89%\r\nBenchmarkGobDecode         29540580     33493600  +13.38%\r\nBenchmarkGobDecode         29672330     31018220   +4.54%\r\nBenchmarkGobDecode         29672330     31245560   +5.30%\r\nBenchmarkGobDecode         29672330     33493600  +12.88%\r\n\r\nBenchmarkGobEncode         18533560     18770980   +1.28%\r\nBenchmarkGobEncode         18533560     18813260   +1.51%\r\nBenchmarkGobEncode         18533560     18862960   +1.78%\r\nBenchmarkGobEncode         18533560     20190290   +8.94%\r\nBenchmarkGobEncode         18579000     18813260   +1.26%\r\nBenchmarkGobEncode         19017650     18813260   -1.07%\r\nBenchmarkGobEncode         19017650     20190290   +6.17%\r\nBenchmarkGobEncode         19035020     18770980   -1.39%\r\nBenchmarkGobEncode         19035020     18813260   -1.17%\r\nBenchmarkGobEncode         19035020     20190290   +6.07%\r\n\r\nBenchmarkGunzip           326639600    327246200   +0.19%\r\nBenchmarkGunzip           326639600    327850000   +0.37%\r\nBenchmarkGunzip           326643400    327165000   +0.16%\r\nBenchmarkGunzip           326643400    327246200   +0.18%\r\nBenchmarkGunzip           326643400    327850000   +0.37%\r\nBenchmarkGunzip           326643400    329895800   +1.00%\r\nBenchmarkGunzip           326747600    327165000   +0.13%\r\nBenchmarkGunzip           326747600    327246200   +0.15%\r\nBenchmarkGunzip           326747600    327850000   +0.34%\r\nBenchmarkGunzip           326898000    327850000   +0.29%\r\n\r\nBenchmarkGzip            3273516000   3281478000   +0.24%\r\nBenchmarkGzip            3273516000   3288598000   +0.46%\r\nBenchmarkGzip            3273516000   3357398000   +2.56%\r\nBenchmarkGzip            3275122000   3288598000   +0.41%\r\nBenchmarkGzip            3275906000   3281478000   +0.17%\r\nBenchmarkGzip            3275906000   3288598000   +0.39%\r\nBenchmarkGzip            3276049000   3277060000   +0.03%\r\nBenchmarkGzip            3276049000   3281478000   +0.17%\r\nBenchmarkGzip            3276049000   3288598000   +0.38%\r\nBenchmarkGzip            3276049000   3357398000   +2.48%\r\n\r\nBenchmarkJSONDecode       886322600    874272200   -1.36%\r\nBenchmarkJSONDecode       886322600    875726200   -1.20%\r\nBenchmarkJSONDecode       887249200    874272200   -1.46%\r\nBenchmarkJSONDecode       887281000    874272200   -1.47%\r\nBenchmarkJSONDecode       887281000    875726200   -1.30%\r\nBenchmarkJSONDecode       887281000    876922200   -1.17%\r\nBenchmarkJSONDecode       889470600    870878000   -2.09%\r\nBenchmarkJSONDecode       889470600    874272200   -1.71%\r\nBenchmarkJSONDecode       889470600    875726200   -1.55%\r\nBenchmarkJSONDecode       889470600    876922200   -1.41%\r\n\r\nBenchmarkJSONEncode       171035600    173433200   +1.40%\r\nBenchmarkJSONEncode       171224900    173127600   +1.11%\r\nBenchmarkJSONEncode       171224900    173433200   +1.29%\r\nBenchmarkJSONEncode       171224900    178469900   +4.23%\r\nBenchmarkJSONEncode       171224900    179335500   +4.74%\r\nBenchmarkJSONEncode       171502500    173433200   +1.13%\r\nBenchmarkJSONEncode       171502500    178469900   +4.06%\r\nBenchmarkJSONEncode       171502500    179335500   +4.57%\r\nBenchmarkJSONEncode       171614800    173433200   +1.06%\r\nBenchmarkJSONEncode       171614800    178469900   +3.99%\r\n\r\nBenchmarkMandelbrot200     14287420     14280060   -0.05%\r\nBenchmarkMandelbrot200     14287420     14284540   -0.02%\r\nBenchmarkMandelbrot200     14287420     14287830   +0.00%\r\nBenchmarkMandelbrot200     14287420     14305550   +0.13%\r\nBenchmarkMandelbrot200     14287470     14284540   -0.02%\r\nBenchmarkMandelbrot200     14287470     14287830   +0.00%\r\nBenchmarkMandelbrot200     14287470     14305550   +0.13%\r\nBenchmarkMandelbrot200     14290430     14287830   -0.02%\r\nBenchmarkMandelbrot200     14290430     14305550   +0.11%\r\nBenchmarkMandelbrot200     14292580     14305550   +0.09%\r\n\r\nBenchmarkParse             11959530     12069280   +0.92%\r\nBenchmarkParse             11959530     12075110   +0.97%\r\nBenchmarkParse             11959530     12773940   +6.81%\r\nBenchmarkParse             11986410     11776140   -1.75%\r\nBenchmarkParse             11986410     12069280   +0.69%\r\nBenchmarkParse             11986410     12075110   +0.74%\r\nBenchmarkParse             11986410     12773940   +6.57%\r\nBenchmarkParse             11993180     12069280   +0.63%\r\nBenchmarkParse             12023210     12069280   +0.38%\r\nBenchmarkParse             12023210     12075110   +0.43%\r\n\r\nBenchmarkRevcomp         3024124000   3074518000   +1.67%\r\nBenchmarkRevcomp         3024124000   3125252000   +3.34%\r\nBenchmarkRevcomp         3024124000   3127247000   +3.41%\r\nBenchmarkRevcomp         3054404000   3074518000   +0.66%\r\nBenchmarkRevcomp         3054404000   3127247000   +2.38%\r\nBenchmarkRevcomp         3055270000   3066376000   +0.36%\r\nBenchmarkRevcomp         3055270000   3074518000   +0.63%\r\nBenchmarkRevcomp         3055270000   3125252000   +2.29%\r\nBenchmarkRevcomp         3055270000   3127247000   +2.36%\r\nBenchmarkRevcomp         3062357000   3074518000   +0.40%\r\n\r\nBenchmarkTemplate         795127000    811485400   +2.06%\r\nBenchmarkTemplate         795127000    842240400   +5.93%\r\nBenchmarkTemplate         795723400    808890200   +1.65%\r\nBenchmarkTemplate         795723400    811485400   +1.98%\r\nBenchmarkTemplate         795723400    842240400   +5.85%\r\nBenchmarkTemplate         795723400    847747400   +6.54%\r\nBenchmarkTemplate         795879200    811485400   +1.96%\r\nBenchmarkTemplate         795879200    842240400   +5.83%\r\nBenchmarkTemplate         795879200    847747400   +6.52%\r\nBenchmarkTemplate         796132000    811485400   +1.93%\r\n",
			"disapproval": false,
			"date": "2012-06-08 20:46:36.008220",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On an idle Core i7,\r\n\r\nbenchmark                  old MB/s     new MB/s  speedup\r\nBenchmarkGobDecode            37.85        38.00    1.00x\r\nBenchmarkGobEncode            63.15        63.02    1.00x\r\nBenchmarkGzip                 13.45        13.61    1.01x\r\nBenchmarkGunzip               74.22        73.98    1.00x\r\nBenchmarkJSONEncode           16.53        16.53    1.00x\r\nBenchmarkJSONDecode            3.19         3.19    1.00x\r\nBenchmarkParse                 6.87         6.80    0.99x\r\nBenchmarkRevcomp             127.03       125.38    0.99x\r\nBenchmarkTemplate              3.71         3.67    0.99x\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-08 21:35:00.116165",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello. Thank you for your comments. I've attempted to incorporate Atom's fast checking solution based on local_total_alloc and local_nlookup and it appears to have no observable cost penalty (results for amd64 are unaffected, as you would hope).\n\nPlease take another look. \n\nHaving said that, I'm concerned that I'm punching above my weight so would ask if others with more experience would like to adopt this patch.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode273\nsrc/pkg/runtime/malloc.h:273: struct MCache\nOn 2012/06/06 16:58:02, atom wrote:\n> You only need to check these:\n> \n> - local_total_alloc in function runtime\u00b7mallocgc. local_total_alloc is always\n> the maximum value from all values in struct MCache, except local_nlookup.\n> \n> - local_nlookup in function runtime\u00b7mlookup\n> \n> If any of these two gets greater than (1<<30), call runtime.purgecachedstats(c)\n> like Russ suggested.\n\nDone.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode276\nsrc/pkg/runtime/malloc.h:276: uintptr size;\nOn 2012/06/06 14:55:35, rsc wrote:\n> This can be uintptr, since it is the number of active bytes in use.\n\nDone.\n\nhttp://codereview.appspot.com/6297047/diff/4001/src/pkg/runtime/malloc.h#newcode278\nsrc/pkg/runtime/malloc.h:278: intptr local_objects;\t// objects allocated (or freed) from cache since last lock of heap\nOn 2012/06/06 14:55:35, rsc wrote:\n> This can be intptr without any checks, since the total number of objects that\n> can exist is bounded by the address size divide by the minimum block size, which\n> is something like 4 or 8 or 16. So this can never overflow.\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-06-07 11:08:45.825491",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/arm GOARM=5\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17  115763682000  69593536000  -39.88%\nBenchmarkFannkuch11     64647655000  64645548000   -0.00%\nBenchmarkGobDecode        492308180    404399700  -17.86%\nBenchmarkGobEncode        178356180    175380790   -1.67%\nBenchmarkGzip           12400566000  11852504000   -4.42%\nBenchmarkGunzip          2239261800   2240632500   +0.06%\nBenchmarkJSONEncode      2333923200   2163537800   -7.30%\nBenchmarkJSONDecode      8216951000   6840673400  -16.75%\nBenchmarkMandelbrot200  13968008000  14094478000   +0.91%\nBenchmarkParse            195200060    168838930  -13.50%\nBenchmarkTemplate       11135888000   9484298600  -14.83%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             1.56         1.90    1.22x\nBenchmarkGobEncode             4.30         4.38    1.02x\nBenchmarkGzip                  1.56         1.64    1.05x\nBenchmarkGunzip                8.67         8.66    1.00x\nBenchmarkJSONEncode            0.83         0.90    1.08x\nBenchmarkJSONDecode            0.24         0.28    1.17x\nBenchmarkParse                 0.30         0.34    1.13x\nBenchmarkTemplate              0.17         0.20    1.18x",
			"disapproval": false,
			"date": "2012-06-08 04:59:22.068343",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 8, 2012 at 4:46 PM, andrey mirtchovski\n<mirtchovski@gmail.com> wrote:\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11959530 \u00a0 \u00a0 12069280 \u00a0 +0.92%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11959530 \u00a0 \u00a0 12075110 \u00a0 +0.97%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11959530 \u00a0 \u00a0 12773940 \u00a0 +6.81%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11986410 \u00a0 \u00a0 11776140 \u00a0 -1.75%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11986410 \u00a0 \u00a0 12069280 \u00a0 +0.69%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11986410 \u00a0 \u00a0 12075110 \u00a0 +0.74%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11986410 \u00a0 \u00a0 12773940 \u00a0 +6.57%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11993180 \u00a0 \u00a0 12069280 \u00a0 +0.63%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 12023210 \u00a0 \u00a0 12069280 \u00a0 +0.38%\n> BenchmarkParse \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 12023210 \u00a0 \u00a0 12075110 \u00a0 +0.43%\n\nThat's interesting.\n",
			"disapproval": false,
			"date": "2012-06-08 21:19:58.135811",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "just a bit more noise. I did full 25 permutations since i realized\r\nthat 'old' and 'new' are different sets. each result gives mean and\r\nstddev of the diff % for the 25 comparisons between pre- and post- CL,\r\nalways comparing old vs new:\r\n\r\nlinux/386, 4-core opteron 2216:\r\n\r\nBenchmarkBinaryTree17         5.5224         4.23802\r\nBenchmarkFannkuch11             0.01        0.111319\r\nBenchmarkGobDecode            7.5264        0.889871\r\nBenchmarkGobEncode           -0.6116        0.754298\r\nBenchmarkGunzip               0.0108       0.0651718\r\nBenchmarkGzip                -0.0452        0.168193\r\nBenchmarkJSONDecode          -1.6704         0.28888\r\nBenchmarkJSONEncode            1.672        0.380967\r\nBenchmarkMandelbrot200        0.0204       0.0650218\r\nBenchmarkParse                1.6252         2.74243\r\nBenchmarkRevcomp              0.0352        0.873156\r\nBenchmarkTemplate             2.0496          1.0998\r\n\r\nlinux/386, core2duo:\r\n\r\nBenchmarkBinaryTree17        -7.3452        0.167359\r\nBenchmarkFannkuch11          -0.7848       0.0179154\r\nBenchmarkGobDecode            0.4256        0.743048\r\nBenchmarkGobEncode           -0.1888       0.0703886\r\nBenchmarkGunzip               4.1372         2.11495\r\nBenchmarkGzip                 0.2104        0.572772\r\nBenchmarkJSONDecode          -0.4104        0.230104\r\nBenchmarkJSONEncode          -0.1228        0.130369\r\nBenchmarkMandelbrot200        0.0008      0.00271293\r\nBenchmarkParse               -1.0472        0.119148\r\nBenchmarkRevcomp             -0.0776       0.0667101\r\nBenchmarkTemplate            -1.2672       0.0665444\r\n",
			"disapproval": false,
			"date": "2012-06-08 22:03:44.465513",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6297047/diff/8003/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttp://codereview.appspot.com/6297047/diff/8003/src/pkg/runtime/malloc.goc#newcode76\nsrc/pkg/runtime/malloc.goc:76: if (sizeof(void*) == 4 && c->local_total_alloc > (1<<30)) {\ns/>/>=/\ns/if (/if(/\n\nhttp://codereview.appspot.com/6297047/diff/8003/src/pkg/runtime/malloc.goc#newcode181\nsrc/pkg/runtime/malloc.goc:181: if (sizeof(void*) == 4 && m->mcache->local_nlookup > (1<<30)) {\ns/>/>=/\ns/if (/if(/",
			"disapproval": false,
			"date": "2012-06-07 12:49:53.338014",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"mirtchovski@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d2d54e5b3317 ***\n\nruntime: use uintptr where possible in malloc stats\n\nlinux/arm OMAP4 pandaboard\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   68723297000  37026214000  -46.12%\nBenchmarkFannkuch11     34962402000  35958435000   +2.85%\nBenchmarkGobDecode        137298600    124182150   -9.55%\nBenchmarkGobEncode         60717160     60006700   -1.17%\nBenchmarkGzip            5647156000   5550873000   -1.70%\nBenchmarkGunzip          1196350000   1198670000   +0.19%\nBenchmarkJSONEncode       863012800    782898000   -9.28%\nBenchmarkJSONDecode      3312989000   2781800000  -16.03%\nBenchmarkMandelbrot200     45727540     45703120   -0.05%\nBenchmarkParse             74781800     59990840  -19.78%\nBenchmarkRevcomp          140043650    139462300   -0.42%\nBenchmarkTemplate        6467682000   5832153000   -9.83%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             5.59         6.18    1.11x\nBenchmarkGobEncode            12.64        12.79    1.01x\nBenchmarkGzip                  3.44         3.50    1.02x\nBenchmarkGunzip               16.22        16.19    1.00x\nBenchmarkJSONEncode            2.25         2.48    1.10x\nBenchmarkJSONDecode            0.59         0.70    1.19x\nBenchmarkParse                 0.77         0.97    1.26x\nBenchmarkRevcomp              18.15        18.23    1.00x\nBenchmarkTemplate              0.30         0.33    1.10x\n\ndarwin/386 core duo\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   10591616577   9678245733   -8.62%\nBenchmarkFannkuch11     10758473315  10749303846   -0.09%\nBenchmarkGobDecode         34379785     34121250   -0.75%\nBenchmarkGobEncode         23523721     23475750   -0.20%\nBenchmarkGzip            2486191492   2446539568   -1.59%\nBenchmarkGunzip           444179328    444250293   +0.02%\nBenchmarkJSONEncode       221138507    219757826   -0.62%\nBenchmarkJSONDecode      1056034428   1048975133   -0.67%\nBenchmarkMandelbrot200     19862516     19868346   +0.03%\nBenchmarkRevcomp         3742610872   3724821662   -0.48%\nBenchmarkTemplate         960283112    944791517   -1.61%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            22.33        22.49    1.01x\nBenchmarkGobEncode            32.63        32.69    1.00x\nBenchmarkGzip                  7.80         7.93    1.02x\nBenchmarkGunzip               43.69        43.68    1.00x\nBenchmarkJSONEncode            8.77         8.83    1.01x\nBenchmarkJSONDecode            1.84         1.85    1.01x\nBenchmarkRevcomp              67.91        68.24    1.00x\nBenchmarkTemplate              2.02         2.05    1.01x\n\nR=rsc, 0xe2.0x9a.0x9b, mirtchovski\nCC=golang-dev, minux.ma\nhttp://codereview.appspot.com/6297047\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-08 21:35:20.774185",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm very skeptical\r\n",
			"disapproval": false,
			"date": "2012-06-08 20:04:48.342824",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Russ and Andrey.\r\n\r\nOn Sat, Jun 9, 2012 at 8:43 AM, Russ Cox <rsc@golang.org> wrote:\r\n> This smells like more memory layout nonsense. The tweaks are changing\r\n> which lines of code sit where in memory and causing strange changes in\r\n> tight loops.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-06-08 23:32:27.115109",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This smells like more memory layout nonsense. The tweaks are changing\r\nwhich lines of code sit where in memory and causing strange changes in\r\ntight loops.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-08 22:43:46.308806",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6297047: runtime: use uintptr where possible in malloc stats",
	"created": "2012-06-05 23:45:27.875394",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		7002,
		5003,
		5,
		8003,
		10006,
		12001,
		9005
	],
	"modified": "2012-06-24 07:41:44.552871",
	"closed": true,
	"issue": 6297047
}