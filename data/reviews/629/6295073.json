{
	"description": "syscall: use 32 bits structure for Getrlimit/Setrlimit on 386/ARM.\n\nFixes issue 2492",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/13 23:17:48, hanwen wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nCompilation failed on linux/arm. You may need to add some code to cmd/dist to ensure zsyscall is rebuilt.\n\npando(~/go/src) % ./all.bash \n# Building C bootstrap tool.\ncmd/dist\n\n# Building compilers and Go bootstrap tool for host, linux/arm.\nlib9\nlibbio\nlibmach\nmisc/pprof\ncmd/addr2line\ncmd/cov\ncmd/nm\ncmd/objdump\ncmd/pack\ncmd/prof\ncmd/cc\ncmd/gc\ncmd/5l\ncmd/5a\ncmd/5c\ncmd/5g\npkg/runtime\npkg/errors\npkg/sync/atomic\npkg/sync\npkg/io\npkg/unicode\npkg/unicode/utf8\npkg/unicode/utf16\npkg/bytes\npkg/math\npkg/strings\npkg/strconv\npkg/bufio\npkg/sort\npkg/container/heap\npkg/encoding/base64\npkg/syscall\n/home/dfc/go/src/pkg/syscall/syscall_linux.go:107: undefined: Prlimit\n/home/dfc/go/src/pkg/syscall/syscall_linux.go:111: undefined: Prlimit\n/home/dfc/go/src/pkg/syscall/zsyscall_linux_arm.go:432: Getrlimit redeclared in this block\n        previous declaration at /home/dfc/go/src/pkg/syscall/syscall_linux.go:106\n/home/dfc/go/src/pkg/syscall/zsyscall_linux_arm.go:717: Setrlimit redeclared in this block\n        previous declaration at /home/dfc/go/src/pkg/syscall/syscall_linux.go:110\ngo tool dist: FAILED: /home/dfc/go/pkg/tool/linux_arm/5g -o $WORK/_go_.5 -p syscall /home/dfc/go/src/pkg/syscall/env_unix.go /home/dfc/go/src/pkg/syscall/exec_linux.go /home/dfc/go/src/pkg/syscall/exec_unix.go /home/dfc/go/src/pkg/syscall/lsf_linux.go /home/dfc/go/src/pkg/syscall/netlink_linux.go /home/dfc/go/src/pkg/syscall/sockcmsg_linux.go /home/dfc/go/src/pkg/syscall/sockcmsg_unix.go /home/dfc/go/src/pkg/syscall/str.go /home/dfc/go/src/pkg/syscall/syscall.go /home/dfc/go/src/pkg/syscall/syscall_linux.go /home/dfc/go/src/pkg/syscall/syscall_linux_arm.go /home/dfc/go/src/pkg/syscall/syscall_unix.go /home/dfc/go/src/pkg/syscall/zerrors_linux_arm.go /home/dfc/go/src/pkg/syscall/zsyscall_linux_arm.go /home/dfc/go/src/pkg/syscall/zsysnum_linux_arm.go /home/dfc/go/src/pkg/syscall/ztypes_linux_arm.go",
			"disapproval": false,
			"date": "2012-06-13 23:33:56.331699",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n(for some reason, a plan9 file was modified too.)\r\n\r\nOn Sat, Jun 16, 2012 at 1:50 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Sun, Jun 17, 2012 at 12:02 AM, <hanwenn@gmail.com> wrote:\r\n>>\r\n>> In general, should I include changes to the generated code (z*) in my\r\n>> changes?\r\n>\r\n> for the syscall package, yes.\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-16 17:15:44.570503",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 13, 2012 at 9:51 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n> Han-Wen Nienhuys <hanwen@google.com> writes:\r\n>\r\n>> I guess not; back to the drawing emacs.\r\n>>\r\n>> On Wed, Jun 13, 2012 at 8:59 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n>>> The prlimit system call is only available as of Linux kernel version\r\n>>> 2.6.36. \u00a0Can we really assume that everybody is running such a new\r\n>>> kernel?\r\n>\r\n> One way to handle this kind of issue is make the new system call and\r\n> check for an error return with errno set to ENOSYS. \u00a0If you get that,\r\n> use the old system call. \u00a0I don't know if this will fix the issue you\r\n> are trying to fix, though.\r\n\r\nPTAL - I introduced an rlimit32 type.\r\n\r\n> For example, see how newpollster in net/fd_linux.go uses epoll_create1\r\n> if available, and falls back to epoll_create if not.\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-15 04:08:11.761515",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Han-Wen Nienhuys <hanwen@google.com> writes:\r\n\r\n> I guess not; back to the drawing emacs.\r\n>\r\n> On Wed, Jun 13, 2012 at 8:59 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n>> The prlimit system call is only available as of Linux kernel version\r\n>> 2.6.36. \u00a0Can we really assume that everybody is running such a new\r\n>> kernel?\r\n\r\nOne way to handle this kind of issue is make the new system call and\r\ncheck for an error return with errno set to ENOSYS.  If you get that,\r\nuse the old system call.  I don't know if this will fix the issue you\r\nare trying to fix, though.\r\n\r\nFor example, see how newpollster in net/fd_linux.go uses epoll_create1\r\nif available, and falls back to epoll_create if not.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-06-14 00:52:02.776965",
			"approval": false
		},
		{
			"sender": "hanwenn@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n\r\nEm quarta-feira, 13 de junho de 2012 20h33min56s UTC-3, Dave Cheney \r\nescreveu:\r\n>\r\n> On 2012/06/13 23:17:48, hanwen wrote: \r\n> > Hello mailto:golang-dev@googlegroups.com, \r\n>\r\n> > I'd like you to review this change to \r\n> > https://code.google.com/p/go \r\n>\r\n> Compilation failed on linux/arm. You may need to add some code to \r\n> cmd/dist to ensure zsyscall is rebuilt. \r\n>\r\n\r\nIn general, should I include changes to the generated code (z*) in my \r\nchanges?\r\n\r\n>\r\n>\r\n>",
			"disapproval": false,
			"date": "2012-06-16 16:02:09.901678",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-13 23:17:48.169016",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this mean that we're locked into kernels >= Linux 2.6.36 (20 Oct\r\n2010)?  That feels too recent.\r\n\r\nOn Wed, Jun 13, 2012 at 4:17 PM, <hanwen@google.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> syscall: Implement Getrlimit/Setrlimit using Prlimit.\r\n>\r\n> Fixes issue 2492\r\n>\r\n> Please review this at http://codereview.appspot.com/**6295073/<http://codereview.appspot.com/6295073/>\r\n>\r\n> Affected files:\r\n>  M src/pkg/syscall/syscall_linux.**go\r\n>\r\n>\r\n> Index: src/pkg/syscall/syscall_linux.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/syscall_**linux.go\r\n> +++ b/src/pkg/syscall/syscall_**linux.go\r\n> @@ -103,6 +103,14 @@\r\n>        return\r\n>  }\r\n>\r\n> +func Getrlimit(resource int, rlim *Rlimit) (err error) {\r\n> +       return Prlimit(0, resource, nil, rlim)\r\n> +}\r\n> +\r\n> +func Setrlimit(resource int, rlim *Rlimit) (err error) {\r\n> +       return Prlimit(0, resource, rlim, nil)\r\n> +}\r\n> +\r\n>  func Setgroups(gids []int) (err error) {\r\n>        if len(gids) == 0 {\r\n>                return setgroups(0, nil)\r\n> @@ -823,7 +831,6 @@\r\n>  //sysnb        Getpgrp() (pid int)\r\n>  //sysnb        Getpid() (pid int)\r\n>  //sysnb        Getppid() (ppid int)\r\n> -//sysnb        Getrlimit(resource int, rlim *Rlimit) (err error)\r\n>  //sysnb        Getrusage(who int, rusage *Rusage) (err error)\r\n>  //sysnb        Gettid() (tid int)\r\n>  //sys  InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc\r\n> int, err error)\r\n> @@ -839,6 +846,7 @@\r\n>  //sys  Mknodat(dirfd int, path string, mode uint32, dev int) (err error)\r\n>  //sys  Nanosleep(time *Timespec, leftover *Timespec) (err error)\r\n>  //sys  Pause() (err error)\r\n> +//sysnb Prlimit(pid int, resource int, newlimit *Rlimit, oldlimit\r\n> *Rlimit) (err error) = SYS_PRLIMIT64\r\n>  //sys  PivotRoot(newroot string, putold string) (err error) =\r\n> SYS_PIVOT_ROOT\r\n>  //sys  Read(fd int, p []byte) (n int, err error)\r\n>  //sys  Readlink(path string, buf []byte) (n int, err error)\r\n> @@ -848,7 +856,6 @@\r\n>  //sys  Setdomainname(p []byte) (err error)\r\n>  //sys  Sethostname(p []byte) (err error)\r\n>  //sysnb        Setpgid(pid int, pgid int) (err error)\r\n> -//sysnb        Setrlimit(resource int, rlim *Rlimit) (err error)\r\n>  //sysnb        Setsid() (pid int, err error)\r\n>  //sysnb        Settimeofday(tv *Timeval) (err error)\r\n>  //sysnb        Setuid(uid int) (err error)\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-13 23:34:41.201725",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That would rule out debian 6 and rhel6, both of which use 2.6.32.\r\n\r\nOn Thu, Jun 14, 2012 at 9:34 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Does this mean that we're locked into kernels >=\u00a0Linux 2.6.36 (20 Oct 2010)?\r\n> \u00a0That feels too recent.\r\n>\r\n>\r\n> On Wed, Jun 13, 2012 at 4:17 PM, <hanwen@google.com> wrote:\r\n>>\r\n>> Reviewers: golang-dev_googlegroups.com,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> syscall: Implement Getrlimit/Setrlimit using Prlimit.\r\n>>\r\n>> Fixes issue 2492\r\n>>\r\n>> Please review this at http://codereview.appspot.com/6295073/\r\n>>\r\n>> Affected files:\r\n>> \u00a0M src/pkg/syscall/syscall_linux.go\r\n>>\r\n>>\r\n>> Index: src/pkg/syscall/syscall_linux.go\r\n>> ===================================================================\r\n>> --- a/src/pkg/syscall/syscall_linux.go\r\n>> +++ b/src/pkg/syscall/syscall_linux.go\r\n>> @@ -103,6 +103,14 @@\r\n>> \u00a0 \u00a0 \u00a0 \u00a0return\r\n>> \u00a0}\r\n>>\r\n>> +func Getrlimit(resource int, rlim *Rlimit) (err error) {\r\n>> + \u00a0 \u00a0 \u00a0 return Prlimit(0, resource, nil, rlim)\r\n>> +}\r\n>> +\r\n>> +func Setrlimit(resource int, rlim *Rlimit) (err error) {\r\n>> + \u00a0 \u00a0 \u00a0 return Prlimit(0, resource, rlim, nil)\r\n>> +}\r\n>> +\r\n>> \u00a0func Setgroups(gids []int) (err error) {\r\n>> \u00a0 \u00a0 \u00a0 \u00a0if len(gids) == 0 {\r\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return setgroups(0, nil)\r\n>> @@ -823,7 +831,6 @@\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getpgrp() (pid int)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getpid() (pid int)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getppid() (ppid int)\r\n>> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getrlimit(resource int, rlim *Rlimit) (err error)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Getrusage(who int, rusage *Rusage) (err error)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Gettid() (tid int)\r\n>> \u00a0//sys \u00a0InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc\r\n>> int, err error)\r\n>> @@ -839,6 +846,7 @@\r\n>> \u00a0//sys \u00a0Mknodat(dirfd int, path string, mode uint32, dev int) (err error)\r\n>> \u00a0//sys \u00a0Nanosleep(time *Timespec, leftover *Timespec) (err error)\r\n>> \u00a0//sys \u00a0Pause() (err error)\r\n>> +//sysnb Prlimit(pid int, resource int, newlimit *Rlimit, oldlimit\r\n>> *Rlimit) (err error) = SYS_PRLIMIT64\r\n>> \u00a0//sys \u00a0PivotRoot(newroot string, putold string) (err error) =\r\n>> SYS_PIVOT_ROOT\r\n>> \u00a0//sys \u00a0Read(fd int, p []byte) (n int, err error)\r\n>> \u00a0//sys \u00a0Readlink(path string, buf []byte) (n int, err error)\r\n>> @@ -848,7 +856,6 @@\r\n>> \u00a0//sys \u00a0Setdomainname(p []byte) (err error)\r\n>> \u00a0//sys \u00a0Sethostname(p []byte) (err error)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setpgid(pid int, pgid int) (err error)\r\n>> -//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setrlimit(resource int, rlim *Rlimit) (err error)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setsid() (pid int, err error)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Settimeofday(tv *Timeval) (err error)\r\n>> \u00a0//sysnb \u00a0 \u00a0 \u00a0 \u00a0Setuid(uid int) (err error)\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-13 23:37:14.388147",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I guess not; back to the drawing emacs.\r\n\r\nOn Wed, Jun 13, 2012 at 8:59 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n> The prlimit system call is only available as of Linux kernel version\r\n> 2.6.36. \u00a0Can we really assume that everybody is running such a new\r\n> kernel?\r\n\r\n\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-14 00:06:08.116399",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The prlimit system call is only available as of Linux kernel version\r\n2.6.36.  Can we really assume that everybody is running such a new\r\nkernel?\r\n",
			"disapproval": false,
			"date": "2012-06-13 23:59:05.522951",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jun 17, 2012 at 12:02 AM, <hanwenn@gmail.com> wrote:\r\n\r\n> In general, should I include changes to the generated code (z*) in my\r\n> changes?\r\n>\r\nfor the syscall package, yes.\r\n",
			"disapproval": false,
			"date": "2012-06-16 16:51:06.043093",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems okay but please do arm too.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-15 16:34:56.120997",
			"approval": false
		},
		{
			"sender": "hanwenn@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n\r\nEm sexta-feira, 15 de junho de 2012 13h34min35s UTC-3, rsc escreveu:\r\n>\r\n> Seems okay but please do arm too. \r\n>\r\n> Russ \r\n>\r\n\r\nPTAL.\r\n\r\n(I copy/pasted, is that ok ?)\r\n",
			"disapproval": false,
			"date": "2012-06-16 16:03:20.459800",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nBTW - is there a convenient way to use RLIM_INFINITY ?\n\nuint32(RLIM_INFINITY) doesnt compile, since -1 doesnt fit in uint32.",
			"disapproval": false,
			"date": "2012-06-26 04:32:31.222827",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"hanwen@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good, just a few small nits\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_386.go\nFile src/pkg/syscall/syscall_linux_386.go (right):\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_386.go#newcode92\nsrc/pkg/syscall/syscall_linux_386.go:92: if (rlim.Cur&^0xFFFFFFFF) != 0 || (rlim.Max&^0xFFFFFFFF) != 0 {\nA clearer way to write this is \n\nif uint64(uint32(rlim.Cur)) != rlim.Cur || uint64(uint32(rlim.Max)) != rlim.Max {\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_arm.go\nFile src/pkg/syscall/syscall_linux_arm.go (right):\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_arm.go#newcode107\nsrc/pkg/syscall/syscall_linux_arm.go:107: if (rlim.Cur&^0xFFFFFFFF) != 0 || (rlim.Max&^0xFFFFFFFF) != 0 {\nSame.\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/zsyscall_plan9_386.go\nFile src/pkg/syscall/zsyscall_plan9_386.go (left):\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/zsyscall_plan9_386.go#oldcode1\nsrc/pkg/syscall/zsyscall_plan9_386.go:1: // mksyscall.pl -l32 -plan9 syscall_plan9.go syscall_plan9_386.go\nPlease revert your changes to this file.",
			"disapproval": false,
			"date": "2012-06-26 00:25:24.132790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> BTW - is there a convenient way to use RLIM_INFINITY ?\r\n\r\n^uint32(0) or ^uint64(0) depending on which one you need.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-26 12:24:57.520635",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 26, 2012 at 9:24 AM, Russ Cox <rsc@golang.org> wrote:\r\n>> BTW - is there a convenient way to use RLIM_INFINITY ?\r\n>\r\n> ^uint32(0) or ^uint64(0) depending on which one you need.\r\n\r\nI mean, the constant RLIM_INFINITY, which is defined as -1.\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-26 13:00:02.481586",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/26 01:18:44, rsc wrote:\n> I'm not sure about this. In the 64-bit version, isn't ^uint64(0) a\n> special value (infinity)? That seems to be rejected in the new 32-bit\n> APIs. If they are all going to take the same struct, the values should\n> match too, which means that this special value needs to be translated\n> in both directions in getrlimit and setrlimit.\n> \n> Russ\n\nI think you're right; let me get to that.",
			"disapproval": false,
			"date": "2012-06-26 01:21:37.028023",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure about this. In the 64-bit version, isn't ^uint64(0) a\r\nspecial value (infinity)? That seems to be rejected in the new 32-bit\r\nAPIs. If they are all going to take the same struct, the values should\r\nmatch too, which means that this special value needs to be translated\r\nin both directions in getrlimit and setrlimit.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-26 01:18:44.904574",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_386.go\nFile src/pkg/syscall/syscall_linux_386.go (right):\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_386.go#newcode92\nsrc/pkg/syscall/syscall_linux_386.go:92: if (rlim.Cur&^0xFFFFFFFF) != 0 || (rlim.Max&^0xFFFFFFFF) != 0 {\nOn 2012/06/26 00:25:24, rsc wrote:\n> A clearer way to write this is \n> \n> if uint64(uint32(rlim.Cur)) != rlim.Cur || uint64(uint32(rlim.Max)) != rlim.Max\n> {\n\nDone.\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_arm.go\nFile src/pkg/syscall/syscall_linux_arm.go (right):\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/syscall_linux_arm.go#newcode107\nsrc/pkg/syscall/syscall_linux_arm.go:107: if (rlim.Cur&^0xFFFFFFFF) != 0 || (rlim.Max&^0xFFFFFFFF) != 0 {\nOn 2012/06/26 00:25:24, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/zsyscall_plan9_386.go\nFile src/pkg/syscall/zsyscall_plan9_386.go (left):\n\nhttp://codereview.appspot.com/6295073/diff/3002/src/pkg/syscall/zsyscall_plan9_386.go#oldcode1\nsrc/pkg/syscall/zsyscall_plan9_386.go:1: // mksyscall.pl -l32 -plan9 syscall_plan9.go syscall_plan9_386.go\nOn 2012/06/26 00:25:24, rsc wrote:\n> Please revert your changes to this file.\n\nDone.",
			"disapproval": false,
			"date": "2012-06-26 01:12:19.910013",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 26, 2012 at 8:59 AM, Han-Wen Nienhuys <hanwen@google.com> wrote:\r\n> On Tue, Jun 26, 2012 at 9:24 AM, Russ Cox <rsc@golang.org> wrote:\r\n>>> BTW - is there a convenient way to use RLIM_INFINITY ?\r\n>>\r\n>> ^uint32(0) or ^uint64(0) depending on which one you need.\r\n>\r\n> I mean, the constant RLIM_INFINITY, which is defined as -1.\r\n\r\nYes, well, they're the same thing.\r\n",
			"disapproval": false,
			"date": "2012-06-26 13:12:43.647012",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"hanwen@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1baa0597a876 ***\n\nsyscall: use 32 bits structure for Getrlimit/Setrlimit on 386/ARM.\n\nFixes issue 2492\n\nR=rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6295073\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-07-03 05:57:36.501805",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/26 13:12:43, rsc wrote:\n> On Tue, Jun 26, 2012 at 8:59 AM, Han-Wen Nienhuys <mailto:hanwen@google.com> wrote:\n> > On Tue, Jun 26, 2012 at 9:24 AM, Russ Cox <mailto:rsc@golang.org> wrote:\n> >>> BTW - is there a convenient way to use RLIM_INFINITY ?\n> >>\n> >> ^uint32(0) or ^uint64(0) depending on which one you need.\n\nping?",
			"disapproval": false,
			"date": "2012-06-29 02:37:21.002788",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "any other gophers that can review this?\r\n\r\n\r\nOn Thu, Jun 28, 2012 at 11:37 PM, <hanwen@google.com> wrote:\r\n\r\n> On 2012/06/26 13:12:43, rsc wrote:\r\n>\r\n>> On Tue, Jun 26, 2012 at 8:59 AM, Han-Wen Nienhuys\r\n>>\r\n> <mailto:hanwen@google.com> wrote:\r\n>\r\n>> > On Tue, Jun 26, 2012 at 9:24 AM, Russ Cox <mailto:rsc@golang.org>\r\n>>\r\n> wrote:\r\n>\r\n>> >>> BTW - is there a convenient way to use RLIM_INFINITY ?\r\n>> >>\r\n>> >> ^uint32(0) or ^uint64(0) depending on which one you need.\r\n>>\r\n>\r\n> ping?\r\n>\r\n> http://codereview.appspot.com/**6295073/<http://codereview.appspot.com/6295073/>\r\n>\r\n\r\n\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-07-02 17:53:20.209944",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Mon, Jul 2, 2012 at 10:52 AM, Han-Wen Nienhuys <hanwen@google.com> wrote:\r\n\r\n>\r\n> any other gophers that can review this?\r\n>\r\n>\r\n> On Thu, Jun 28, 2012 at 11:37 PM, <hanwen@google.com> wrote:\r\n>\r\n>> On 2012/06/26 13:12:43, rsc wrote:\r\n>>\r\n>>> On Tue, Jun 26, 2012 at 8:59 AM, Han-Wen Nienhuys\r\n>>>\r\n>> <mailto:hanwen@google.com> wrote:\r\n>>\r\n>>> > On Tue, Jun 26, 2012 at 9:24 AM, Russ Cox <mailto:rsc@golang.org>\r\n>>>\r\n>> wrote:\r\n>>\r\n>>> >>> BTW - is there a convenient way to use RLIM_INFINITY ?\r\n>>> >>\r\n>>> >> ^uint32(0) or ^uint64(0) depending on which one you need.\r\n>>>\r\n>>\r\n>> ping?\r\n>>\r\n>> http://codereview.appspot.com/**6295073/<http://codereview.appspot.com/6295073/>\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Han-Wen Nienhuys\r\n> Google Engineering Belo Horizonte\r\n> hanwen@google.com\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-02 18:03:27.003068",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"hanwen@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is there a reason Prlimit is exported in this CL? It's not mentioned in the description, which makes me think it is an oversight.",
			"disapproval": false,
			"date": "2012-07-29 21:56:26.019400",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jul 30, 2012 at 11:24 AM, Russ Cox <rsc@golang.org> wrote:\r\n> On Sun, Jul 29, 2012 at 5:56 PM,  <rsc@golang.org> wrote:\r\n>> Is there a reason Prlimit is exported in this CL? It's not mentioned in\r\n>> the description, which makes me think it is an oversight.\r\n>\r\n> Most importantly, it is an API change, and not one that we discussed.\r\n> You can't just do that.\r\n>\r\n> Furthermore, the discussion on this CL explicitly decided NOT to use\r\n> prlimit64, since both Brad and Ian believed that locking people into\r\n> kernels newer than 2.6.36 (20 Oct 2010) was too restrictive. The patch\r\n> set I looked at before I went away, which I said was mostly okay, had\r\n> no mention of prlimit\r\n> (http://codereview.appspot.com/download/issue6295073_3002.diff). Then\r\n> the one that you sent with your ping, that Brad submitted,\r\n> reintroduced prlimit64 and required getrlimit and setrlimit to use it,\r\n> without so much as a mention\r\n> (http://codereview.appspot.com/download/issue6295073_29001.diff). You\r\n> can't just do that either.\r\n\r\nI followed the suggestion (Ian's I believe) to use Prlimit if\r\navailable (checking ENOSYS). If you want, I can prepare a patch that\r\nunexports prlimit64.\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-07-30 16:28:02.181320",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I guess oversight in updating the description? I see no reason for\r\nPrlimit to be private.\r\n\r\nOn Sun, Jul 29, 2012 at 6:56 PM,  <rsc@golang.org> wrote:\r\n> Is there a reason Prlimit is exported in this CL? It's not mentioned in\r\n> the description, which makes me think it is an oversight.\r\n>\r\n>\r\n> http://codereview.appspot.com/6295073/\r\n\r\n\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-07-30 13:59:00.969240",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jul 29, 2012 at 5:56 PM,  <rsc@golang.org> wrote:\r\n> Is there a reason Prlimit is exported in this CL? It's not mentioned in\r\n> the description, which makes me think it is an oversight.\r\n\r\nMost importantly, it is an API change, and not one that we discussed.\r\nYou can't just do that.\r\n\r\nFurthermore, the discussion on this CL explicitly decided NOT to use\r\nprlimit64, since both Brad and Ian believed that locking people into\r\nkernels newer than 2.6.36 (20 Oct 2010) was too restrictive. The patch\r\nset I looked at before I went away, which I said was mostly okay, had\r\nno mention of prlimit\r\n(http://codereview.appspot.com/download/issue6295073_3002.diff). Then\r\nthe one that you sent with your ping, that Brad submitted,\r\nreintroduced prlimit64 and required getrlimit and setrlimit to use it,\r\nwithout so much as a mention\r\n(http://codereview.appspot.com/download/issue6295073_29001.diff). You\r\ncan't just do that either.\r\n\r\nI am going to roll back this CL.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-07-30 14:24:05.899030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why depend on Prlimit at all? What does it buy you? I see that it lets\r\nyou pass 64-bit numbers on a 32-bit machine, but since you cannot have\r\n>4GB address space in those systems anyway, I don't understand why it\r\nmatters. Why should we add the complexity here? The original CL I\r\nreviewed just fixed the struct arguments.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-07-30 18:21:30.610570",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jul 30, 2012 at 3:21 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Why depend on Prlimit at all? What does it buy you? I see that it lets\r\n> you pass 64-bit numbers on a 32-bit machine, but since you cannot have\r\n>>4GB address space in those systems anyway, I don't understand why it\r\n> matters. Why should we add the complexity here? The original CL I\r\n> reviewed just fixed the struct arguments.\r\n\r\nThe Go runtime uses 64 bit file sizes, and there are file size limits\r\nin rlimits; this is also why the scripts extract a 64 bit data\r\nstructure extracted from the libc headers.\r\n\r\n>\r\n> Russ\r\n\r\n\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-07-30 18:28:07.671980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, I will not roll this back, but please send a CL unexporting Prlimit.\r\nWe need to be careful about creating new exported symbols, since we\r\nare stuck with them forever.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-07-30 18:30:37.374190",
			"approval": false
		}
	],
	"owner_email": "hanwen@google.com",
	"private": false,
	"base_url": "",
	"owner": "hanwen",
	"subject": "code review 6295073: syscall: Implement Getrlimit/Setrlimit using Prlimit.",
	"created": "2012-06-13 03:05:50.942510",
	"patchsets": [
		1,
		2001,
		1002,
		9003,
		11001,
		14001,
		3002,
		18001,
		15003,
		29001
	],
	"modified": "2012-07-29 21:56:26.085370",
	"closed": true,
	"issue": 6295073
}