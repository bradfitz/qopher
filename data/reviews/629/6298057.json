{
	"description": "cmd/gc: show stack trace on failure\n\nI have gotten spoiled by Go's very nice printing of stack trace\ninformation for simple things like dereferencing nil.\nThis is an attempt to do the same in the gc compiler,\nespecially so that bug reports will have more information\nbut also even in ordinary debugging.\n\nIt's noisy, but only for 'internal compiler error' messages.\n\nExample all.bash output:\n\n# Building compilers and Go bootstrap tool for host, darwin/amd64.\nlib9\nlibbio\nlibmach\nmisc/pprof\ncmd/addr2line\ncmd/cov\ncmd/nm\ncmd/objdump\ncmd/pack\ncmd/prof\ncmd/cc\ncmd/gc\ncmd/6l\ncmd/6a\ncmd/6c\ncmd/6g\npkg/runtime\n/Users/rsc/g/go/src/pkg/runtime/debug.go:70: internal compiler error: fault\n\nRunning gdb to obtain backtrace.\nReading symbols for shared libraries .. done\n/Users/rsc/g/go/src/pkg/runtime/16549: No such file or directory\nAttaching to program: `/Users/rsc/g/go/pkg/tool/darwin_amd64/6g', process 16549.\nReading symbols for shared libraries . done\nReading symbols for shared libraries .......................... done\nReading symbols for shared libraries + done\n0x00007fff943c9154 in __wait4 ()\n#0  0x00007fff943c9154 in __wait4 ()\n#1  0x000000010c7cd101 in p9waitpid () at await.c:180\n#2  0x000000010c7b0589 in rungdb () at subr.c:247\n#3  0x000000010c7b06cd in fatal (fmt=0x7fff6c37b95c \"\") at subr.c:270\n#4  0x000000010c7a2ead in fault (s=-1) at lex.c:183\n#5  <signal handler called>\n#6  cgen_as (nl=0x10cefced0, nr=0x0) at gen.c:650\n#7  0x000000010c79e55a in gen (n=0x10cefd560) at gen.c:466\n#8  0x000000010c79def8 in genlist [inlined] () at /Users/rsc/g/go/src/cmd/gc/gen.c:257\n#9  0x000000010c79def8 in gen (n=0x10c8994d8) at gen.c:276\n#10 0x000000010c79e6b8 in genlist (l=Cannot access memory at address 0x0\n) at gen.c:257\n#11 0x000000010c77fa28 in compile (fn=0x7fff6c37c4a0) at pgen.c:93\n#12 0x000000010c795adb in funccompile (n=0x10c898890, isclosure=209682288) at dcl.c:1380\n#13 0x000000010c7a49d0 in p9main (argc=209662256, argv=0x10c89b560) at lex.c:403\n#14 0x000000010c7d2429 in main (argc=217068968, argv=0x0) at main.c:35\n\ngo tool dist: FAILED: /Users/rsc/g/go/pkg/tool/darwin_amd64/6g -o $WORK/_go_.6 ...",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"r@golang.org",
		"minux.ma@gmail.com",
		"iant@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 8, 2012 at 10:50 AM,  <r@golang.org> wrote:\r\n> I don't know. This feels wrong to me, too cutesy and setting a precedent\r\n> I don't want to keep.\r\n>\r\n> Yes, stack traces are nice. That's why Go has them. But I don't believe\r\n> we should be addressing their lack in C programs, especially not by\r\n> coupling ourselves to another massive and complex subsystem.\r\n\r\nIt's a fairly loose coupling. If gdb doesn't exist, that's fine.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-08 15:03:56.499247",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "careful use of the system library call would make this much easier and also more portable.\r\n\r\n-rob\r\n\r\n",
			"disapproval": false,
			"date": "2012-06-07 16:22:35.678504",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My worry is that it's a tricky step down a slippery road. Also I feel\r\nthis will cost more in maintenance than it saves in debugging\r\n(although I admit I don't deal with compiler bugs). Finally, I'd\r\nrather make it easier to debug Go programs than C programs.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-06-08 16:12:57.692905",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 8, 2012 at 11:15 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> or write out a simple non-symbolic backtrace\r\n> using only __builtin_return_address\r\n> and perhaps __builtin_frame_address?\r\n> http://gcc.gnu.org/onlinedocs/gcc/Return-Address.html\r\n>\r\non glibc systems, we have backtrace_symbols_fd(3) available,\r\nand it's symbolic (but it needs -rdynamic linker options to work\r\ncorrectly).\r\n",
			"disapproval": false,
			"date": "2012-06-08 15:20:30.781422",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-07 16:14:21.202664",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 9, 2012 at 12:04 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Fri, Jun 8, 2012 at 11:20 AM, minux <minux.ma@gmail.com> wrote:\r\n> > On Fri, Jun 8, 2012 at 11:15 PM, minux <minux.ma@gmail.com> wrote:\r\n> >>\r\n> >> or write out a simple non-symbolic backtrace\r\n> >> using only __builtin_return_address\r\n> >> and perhaps __builtin_frame_address?\r\n> >> http://gcc.gnu.org/onlinedocs/gcc/Return-Address.html\r\n> >\r\n> > on glibc systems, we have backtrace_symbols_fd(3) available,\r\n> > and it's symbolic (but it needs -rdynamic linker options to work\r\n> > correctly).\r\n>\r\n> this is a much stronger coupling. the nice thing about gdb is it's a\r\n> separate binary and doesn't affect the build system at all. if people\r\n> are against invoking a separate binary i'll just revert this. i don't\r\n> want to start depending on linking fancy libraries with 6g.\r\n\r\nthe gcc builtin ones are only dependent on gcc (and clang also supports\r\nthem; Plan 9 cc doesn't support that, but it's ok, because there isn't gdb\r\non Plan 9 either).\r\n\r\nthe glibc functions are extensions provided by glibc, and we only need a\r\npreprocessor macro detection to optional enable pretty backtrace on\r\nsystem that supports them. my last post is misleading that -rdynamic is\r\nnot required, it's a nice-to-have, because it can enable more symbol\r\nnames to be decoded.\r\n",
			"disapproval": false,
			"date": "2012-06-08 16:23:41.946394",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I started to use system, but I don't want to try to quote argv0\r\nproperly. This is already excluded on Windows due to mkstemp and most\r\npeople not having gdb, and the current code will work on all known\r\nUnixes.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 16:32:13.669331",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-06-08 16:29:10.668497",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That was actually the first thing I implemented, but shelling out to\r\ngdb worked on the Mac too.  :-)\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-08 17:16:52.915300",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't know. This feels wrong to me, too cutesy and setting a precedent I don't want to keep.\n\nYes, stack traces are nice. That's why Go has them. But I don't believe we should be addressing their lack in C programs, especially not by coupling ourselves to another massive and complex subsystem.",
			"disapproval": false,
			"date": "2012-06-08 14:50:59.383966",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 8, 2012 at 11:03 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Fri, Jun 8, 2012 at 10:50 AM,  <r@golang.org> wrote:\r\n> > I don't know. This feels wrong to me, too cutesy and setting a precedent\r\n> > I don't want to keep.\r\n> >\r\n> > Yes, stack traces are nice. That's why Go has them. But I don't believe\r\n> > we should be addressing their lack in C programs, especially not by\r\n> > coupling ourselves to another massive and complex subsystem.\r\n>\r\n> It's a fairly loose coupling. If gdb doesn't exist, that's fine.\r\n\r\ncan we write out a coredump (don't use kernel core dump mechanism for\r\nportability)? this is probably too big and unnecessary.\r\n\r\nor write out a simple non-symbolic backtrace\r\nusing only __builtin_return_address\r\nand perhaps __builtin_frame_address?\r\nhttp://gcc.gnu.org/onlinedocs/gcc/Return-Address.html\r\n",
			"disapproval": false,
			"date": "2012-06-08 15:15:31.208398",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 8, 2012 at 11:20 AM, minux <minux.ma@gmail.com> wrote:\r\n> On Fri, Jun 8, 2012 at 11:15 PM, minux <minux.ma@gmail.com> wrote:\r\n>>\r\n>> or write out a simple non-symbolic backtrace\r\n>> using\u00a0only\u00a0__builtin_return_address\r\n>> and perhaps __builtin_frame_address?\r\n>> http://gcc.gnu.org/onlinedocs/gcc/Return-Address.html\r\n>\r\n> on glibc systems, we have\u00a0backtrace_symbols_fd(3) available,\r\n> and it's symbolic (but it needs -rdynamic linker options to work\r\n> correctly).\r\n\r\nthis is a much stronger coupling. the nice thing about gdb is it's a\r\nseparate binary and doesn't affect the build system at all. if people\r\nare against invoking a separate binary i'll just revert this. i don't\r\nwant to start depending on linking fancy libraries with 6g.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-06-08 16:04:30.735900",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\r\n\r\nIf you compile with GCC, and pass the option -funwind-tables or\r\n-fasynchronous-unwind-tables, then you can use the function\r\n_Unwind_Backtrace to get the PC values on the stack.  Sample usage:\r\n\r\nhttp://gcc.gnu.org/viewcvs/trunk/libgo/runtime/go-callers.c?revision=187781&view=markup\r\n\r\n(Use -fasynchronous-unwind-tables if you want to be able to get a\r\nbacktrace through a segmentation violation.  The -funwind-tables option\r\nis limited to unwinding through function calls.)\r\n\r\nYou can then feed those PC values through a pipe to the addr2line\r\nprogram to get file/line number information.\r\n\r\nThe _Unwind_Backtrace call doesn't introduce any additional coupling.\r\nThe use of addr2line can be optional.\r\n",
			"disapproval": false,
			"date": "2012-06-08 17:12:47.878049",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6298057: cmd/gc: show stack trace on failure",
	"created": "2012-06-07 16:10:21.899133",
	"patchsets": [
		1,
		3,
		4001
	],
	"modified": "2012-06-08 17:12:47.988495",
	"closed": true,
	"issue": 6298057
}