{
	"description": "runtime: always incorporate hash seed at start of hash computation\n\nOtherwise we can get predictable collisions.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"patrick@patrickmn.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-03 21:45:38.868800",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/03 21:45:38, iant wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nPlaying the devils advocate here -- can hash collisions be exploited in the way that perl and php maps are affected? What is the worst case behaviour of the Go map implementation when presented with the same data that huts Perl/PHP ?",
			"disapproval": false,
			"date": "2013-01-04 04:55:40.722840",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=26a32c1225bf ***\n\nruntime: always incorporate hash seed at start of hash computation\n\nOtherwise we can get predictable collisions.\n\nR=golang-dev, dave, patrick, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7051043",
			"disapproval": false,
			"date": "2013-01-04 15:53:50.667830",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/04 04:55:40, dfc wrote:\n> \n> Playing the devils advocate here -- can hash collisions be exploited in the way\n> that perl and php maps are affected? What is the worst case behaviour of the Go\n> map implementation when presented with the same data that huts Perl/PHP ?\n\nWhether they can be exploited depends on how the program uses them.  If a program simply reads strings from a network connection and stores them in a map, then currently an attacker can construct a single set of strings that will always cause a runtime error \"map hash collision overflow\".  This change would make that harder--there would still be a set of strings that will cause a hash overflow, but for each run of the program it would be a different set of strings.\n\nBased on that, the worst case, for some programs, is that there is a reliable way to crash the program.  I don't know if anything worse is possible.",
			"disapproval": false,
			"date": "2013-01-04 05:53:42.414680",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"patrick@patrickmn.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Playing the devils advocate here -- can hash collisions be\n> exploited in the way that perl and php maps are affected?\n\nYes.\n\n> What is the worst case behaviour of the Go\n> map implementation when presented with the same data that\n> huts Perl/PHP ?\n\nA very inexpensive (bandwidth-wise) DoS. Offline or online compilation of colliding entries, causing neighboring linked lists/subtables with thousands of entries to make e.g. a single http.Request with a relatively small payload, e.g. a ~1MB body to incur an enormous amount of overhead. (Thousands of hours of CPU time on modern CPUs.) In Go you could cause the allocation of and iteration through a large number of subtables.\n\nPHP \"solved\" it by limiting the number of headers/queryparams to something like 1000, and Oracle claimed it wasn't a language problem. IMO, any hashmap being DoS-able without explicit custom protection is very much a language problem.\n\nSome implementations mitigate by using a BST instead of a linked list for buckets, but the best solution is to simply use a hash function where it is harder to find collisions, or alternatively to use an IV like this, so it's at least harder to find colliding entries for a given Go instance.\n\nPaper here: http://www.cs.rice.edu/~scrosby/hash/CrosbyWallach_UsenixSec2003/\n\nRecent talk that brought the topic back up after several years: http://www.youtube.com/watch?v=R2Cq3CLI6H8 (Perl were the only ones who had implemented protection against this prior to this, AFAIK. That protection was equivalent to this.) Unfortunately, this vulnerability is not so obscure anymore.",
			"disapproval": false,
			"date": "2013-01-04 06:00:36.280660",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"patrick@patrickmn.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/04 05:53:42, iant wrote:\n> On 2013/01/04 04:55:40, dfc wrote:\n> > \n> > Playing the devils advocate here -- can hash collisions be exploited in the\n> way\n> > that perl and php maps are affected? What is the worst case behaviour of the\n> Go\n> > map implementation when presented with the same data that huts Perl/PHP ?\n> \n> Whether they can be exploited depends on how the program uses them.  If a\n> program simply reads strings from a network connection and stores them in a map,\n> then currently an attacker can construct a single set of strings that will\n> always cause a runtime error \"map hash collision overflow\".  This change would\n> make that harder--there would still be a set of strings that will cause a hash\n> overflow, but for each run of the program it would be a different set of\n> strings.\n> \n> Based on that, the worst case, for some programs, is that there is a reliable\n> way to crash the program.  I don't know if anything worse is possible.\n\nYeah--or to make it simply unresponsive--a DoS. The scary thing about this attack is that it requires very, very little bandwidth from the attacker(s) compared to traditional DoS attacks. Most of the implementations (using linked lists--I admit I haven't seen this against, or benchmarked against Go) were subjected to <2MB payloads that caused the program to just burn a core for many hours.\n\nI don't know if you could perform any other attack. You could cause the allocation of a lot of memory, potentially causing problems for other programs, but nothing more serious...",
			"disapproval": false,
			"date": "2013-01-04 06:05:02.995760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Some implementations mitigate by using a BST instead of a linked list\r\n> for buckets, but the best solution is to simply use a hash function\r\n> where it is harder to find collisions, or alternatively to use an IV\r\n> like this, so it's at least harder to find colliding entries for a given\r\n> Go instance.\r\n\r\nSo, what if we just stopped storing headers in a map ?\r\n",
			"disapproval": false,
			"date": "2013-01-04 06:06:17.093040",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"patrick@patrickmn.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/04 06:06:17, dfc wrote:\n> > Some implementations mitigate by using a BST instead of a linked list\n> > for buckets, but the best solution is to simply use a hash function\n> > where it is harder to find collisions, or alternatively to use an IV\n> > like this, so it's at least harder to find colliding entries for a given\n> > Go instance.\n> \n> So, what if we just stopped storing headers in a map ?\n\nTechnically, if we wanted to follow the RFCs, this is what we're supposed to do. HTTP headers must retain their original ordering, which of course is no longer true after they're put in a map. OTOH, few apps do this as it makes everything more impractical. We could probably encapsulate most of it in url.Values, but there are probably many people out there using the req.Header field as a map[string][]string already...\n\nAn argument against lists is that a simple association list would have O(n) complexity, but I suspect that might actually be faster in many cases since most HTTP requests have few headers and the hash function is (probably) costlier than a few more comparisons. (Of course that property, too, would be exploitable.)\n\nThe Go 1 contract makes any change tricky, and the attack would be against ParseForm/ParsePostForm, so we can't really just change the implementation of FormValue/PostFormValue.\n\nIn any case, we can assume that many other protocol implementations than HTTP in net/http will use maps constructed from user input. Even if we did impose some kind of limit or alternate implementation in net/http, that would do nothing to help them.",
			"disapproval": false,
			"date": "2013-01-04 06:21:08.734010",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"patrick@patrickmn.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I had forgotten about the subtable limit, sorry Ian. But yeah, somebody could DoS almost as effectively through crashing the application.",
			"disapproval": false,
			"date": "2013-01-04 06:51:02.357710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-01-04 15:16:40.111230",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"patrick@patrickmn.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/04 06:06:17, dfc wrote:\n> \n> So, what if we just stopped storing headers in a map ?\n\nThis is a potential issue for any network connected application that stores user input in a map.  The HTTP headers are just an obvious case.\n\nAnyhow we've already decided to use random seeds to reduce the risk of precomputed attacks on maps.  This CL just makes that decision work better.",
			"disapproval": false,
			"date": "2013-01-04 14:07:53.329820",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 7051043: runtime: always incorporate hash seed at start of hash ...",
	"created": "2013-01-03 21:45:30.085880",
	"patchsets": [
		1,
		6002
	],
	"modified": "2013-01-04 15:53:53.254150",
	"closed": true,
	"issue": 7051043
}