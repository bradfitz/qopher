{
	"description": "cmd/5l, cmd/6l, cmd/8l, cmd/cc, cmd/gc: new flag parsing\n\nThis CL adds a flag parser that matches the semantics of Go's\npackage flag. It also changes the linkers and compilers to use\nthe new flag parser.\n\nCommand lines that used to work, like\n        8c -FVw\n        6c -Dfoo\n        5g -I/foo/bar\nnow need to be split into separate arguments:\n        8c -F -V -w\n        6c -D foo\n        5g -I /foo/bar\nThe new spacing will work with both old and new tools.\n\nThe new parser also allows = for arguments, as in\n        6c -D=foo\n        5g -I=/foo/bar\nbut that syntax will not work with the old tools.\n\nIn addition to matching standard Go binary flag parsing,\nthe new flag parser generates more detailed usage messages\nand opens the door to long flag names.\n\nThe recently added gc flag -= has been renamed -complete.",
	"cc": [
		"remyoudompheng@gmail.com",
		"daniel.morsing@gmail.com",
		"minux.ma@gmail.com",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-30 02:47:34.905130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Dec 30, 2012 at 4:34 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> This CL gives a bunch of errors on gcc 4.7.2, mostly because of giving\r\n> int pointers to the char elements of the debug array.\r\n\r\n\r\nin which directory? i probably forgot to put a file in the CL\r\nor it's in another pending CL of mine. i thought i changed\r\nall the debug arrays to be ints.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-12-30 15:24:49.108110",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/30 15:24:49, rsc wrote:\n> in which directory? i probably forgot to put a file in the CL\n> or it's in another pending CL of mine. i thought i changed\n> all the debug arrays to be ints.\nYou need the following change:\n--- a/src/cmd/gc/go.h   Sun Dec 30 15:40:42 2012 +1100\n+++ b/src/cmd/gc/go.h   Sun Dec 30 23:37:35 2012 +0800\n@@ -841,7 +841,7 @@\n EXTERN char    namebuf[NSYMB];\n EXTERN char    lexbuf[NSYMB];\n EXTERN char    litbuf[NSYMB];\n-EXTERN char    debug[256];\n+EXTERN int     debug[256];\n EXTERN Sym*    hash[NHASH];\n EXTERN Sym*    importmyname;   // my name for package\n EXTERN Pkg*    localpkg;       // package being compiled\n\nand you need to declare the 3rd parameter of flagint64 as vlong*:\nvoid    flagint64(char*, char*, vlong*);",
			"disapproval": false,
			"date": "2012-12-30 15:41:55.845120",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "where is vlong != int64?\r\n",
			"disapproval": false,
			"date": "2012-12-30 15:45:51.180650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c\nFile src/cmd/cc/lex.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c#newcode157\nsrc/cmd/cc/lex.c:157: flagcount(\"Y\", \"debug index generation\", &debug['Y']);\nOn 2012/12/30 18:08:36, minux wrote:\n> flagcount(\"Z\", \"cc/cc.y:138\", &debug['Z']);\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c#newcode158\nsrc/cmd/cc/lex.c:158: flagcount(\"a\", \"print acid definitions\", &debug['a']);\nOn 2012/12/30 18:08:36, minux wrote:\n> flagcount(\"c\", \"cc/pgen.c:479\", &debug['c']);\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c#newcode162\nsrc/cmd/cc/lex.c:162: flagcount(\"g\", \"debug code generation\", &debug['g']);\nOn 2012/12/30 18:08:36, minux wrote:\n> flagcount(\"h\", \"cc/sub.c:851, 5c/peep.c:827\", &debug['h']);\n\nDone. (I deleted the references to debug['h'].)",
			"disapproval": false,
			"date": "2013-01-02 20:51:21.485920",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All errors/warnings are fixed now.\n\nThis CL exposes the various debug only flags via the usage message, but I think it's ok since invoking go tool interactively isn't usually done. If not, there should probably be an extra parameter for normal flags/debug flags.\n\nDo we need to point this change out in go1.1.html for people who are using the various tools through shell scripts?",
			"disapproval": false,
			"date": "2012-12-30 16:21:39.833830",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7035043/diff/11005/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/7035043/diff/11005/doc/go1.1.html#newcode24\ndoc/go1.1.html:24: In the gc toolchain, the assemblers, compilers, and linkers now use the\nThis CL doesn't change the assemblers--is that a followup?\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/cmd/8l/obj.c\nFile src/cmd/8l/obj.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/cmd/8l/obj.c#newcode82\nsrc/cmd/8l/obj.c:82: debug['I'] = 1; // denote cmdline interpreter override\nThis function occurs three times, and could be moved into ld.\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c\nFile src/lib9/flag.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c#newcode100\nsrc/lib9/flag.c:100: *(int64*)p = strtoll(s, 0, 0);\nCheck for non-number?\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c#newcode117\nsrc/lib9/flag.c:117: *(int32*)p = strtol(s, 0, 0);\nCheck for non-number?\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c#newcode152\nsrc/lib9/flag.c:152: ((void(*)(void))p)();\nUSED(s); ?",
			"disapproval": false,
			"date": "2013-01-04 17:17:55.152400",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Dec 30, 2012 at 11:45 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> where is vlong != int64?\r\n>\r\nINITTEXT and INITDAT used to be typed vlong, and gcc 4.8.0 thinks\r\non amd64, long long != int64_t.\r\n\r\nThis is fixed in your latest patch set.\r\n",
			"disapproval": false,
			"date": "2012-12-30 15:56:15.955070",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "found three used but not declared flags in cc.\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c\nFile src/cmd/cc/lex.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c#newcode157\nsrc/cmd/cc/lex.c:157: flagcount(\"Y\", \"debug index generation\", &debug['Y']);\nflagcount(\"Z\", \"cc/cc.y:138\", &debug['Z']);\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c#newcode158\nsrc/cmd/cc/lex.c:158: flagcount(\"a\", \"print acid definitions\", &debug['a']);\nflagcount(\"c\", \"cc/pgen.c:479\", &debug['c']);\n\nhttps://codereview.appspot.com/7035043/diff/6019/src/cmd/cc/lex.c#newcode162\nsrc/cmd/cc/lex.c:162: flagcount(\"g\", \"debug code generation\", &debug['g']);\nflagcount(\"h\", \"cc/sub.c:851, 5c/peep.c:827\", &debug['h']);",
			"disapproval": false,
			"date": "2012-12-30 18:08:35.629680",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c\nFile src/cmd/5l/obj.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode104\nsrc/cmd/5l/obj.c:104: flagfn1(\"I\", \"interp: set ELF interp\", setinterp);\nThere are P and G flags in asmout (debug assembler)\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode109\nsrc/cmd/5l/obj.c:109: flagcount(\"Q\", \"debug byte-register code gen\", &debug['Q']);\nI don't see a Q flag here.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode111\nsrc/cmd/5l/obj.c:111: flagcount(\"S\", \"check type signatures\", &debug['S']);\nthere is a M flag that seems to disable software div/mod\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode111\nsrc/cmd/5l/obj.c:111: flagcount(\"S\", \"check type signatures\", &debug['S']);\nno S flag in 5l\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode128\nsrc/cmd/5l/obj.c:128: flagcount(\"n\", \"dump symbol table\", &debug['n']);\nn is before o\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/obj.c\nFile src/cmd/6l/obj.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/obj.c#newcode97\nsrc/cmd/6l/obj.c:97: flagstr(\"E\", \"sym: entry symbol\", &INITENTRY);\nE is after D (was it supposed to be sorted?)\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/obj.c#newcode123\nsrc/cmd/6l/obj.c:123: flagcount(\"n\", \"dump symbol table\", &debug['n']);\nn is before o\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/pass.c\nFile src/cmd/6l/pass.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/pass.c#newcode656\nsrc/cmd/6l/pass.c:656: if(zerostack && autoffset && !(cursym->text->from.scale&NOSPLIT)) {\nwhere does zerostack come from? it's debug['Z'] in obj.c\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c\nFile src/cmd/cc/lex.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode136\nsrc/cmd/cc/lex.c:136: flagcount(\"<\", \"debug shift\", &debug['<']);\nflag A debugs alignment\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode138\nsrc/cmd/cc/lex.c:138: flagfn1(\"D\", \"name[=value]: add #define\", dodef);\nif thechar=='5'!\n  flag C debugs constprop\n  flag H debugs shiftprop\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode148\nsrc/cmd/cc/lex.c:148: flagcount(\"T\", \"enable type signatures\", &debug['S']);\nI think you meant debug['T']\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode165\nsrc/cmd/cc/lex.c:165: flagcount(\"q\", \"print Go definitions\", &debug['q']);\nthere seems to be a 's' flag in acid.c\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/dist/build.c#newcode864\nsrc/cmd/dist/build.c:864: vadd(&compile, \"-FTVw\");\nshould this be fixed?\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/gc/lex.c\nFile src/cmd/gc/lex.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/gc/lex.c#newcode240\nsrc/cmd/gc/lex.c:240: flagcount(\"complete\", \"compiling complete package (no C or assembly)\", &pure_go);\nthe race detection flag has disappeared\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/gc/lex.c#newcode247\nsrc/cmd/gc/lex.c:247: flagcount(\"j\", \"debug runtime-initialized variables\", &debug['i']);\ndebug['j']",
			"disapproval": false,
			"date": "2012-12-30 08:37:16.061950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I cleaned out the other CLs from my client and uploaded a new one here. It\r\nshould be complete now.\r\n",
			"disapproval": false,
			"date": "2012-12-30 15:48:31.922960",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL gives a bunch of errors on gcc 4.7.2, mostly because of giving int pointers to the char elements of the debug array.",
			"disapproval": false,
			"date": "2012-12-30 09:34:18.921550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThank you for the very detailed review.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c\nFile src/cmd/5l/obj.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode104\nsrc/cmd/5l/obj.c:104: flagfn1(\"I\", \"interp: set ELF interp\", setinterp);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> There are P and G flags in asmout (debug assembler)\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode109\nsrc/cmd/5l/obj.c:109: flagcount(\"Q\", \"debug byte-register code gen\", &debug['Q']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> I don't see a Q flag here.\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode111\nsrc/cmd/5l/obj.c:111: flagcount(\"S\", \"check type signatures\", &debug['S']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> there is a M flag that seems to disable software div/mod\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode111\nsrc/cmd/5l/obj.c:111: flagcount(\"S\", \"check type signatures\", &debug['S']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> no S flag in 5l\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/5l/obj.c#newcode128\nsrc/cmd/5l/obj.c:128: flagcount(\"n\", \"dump symbol table\", &debug['n']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> n is before o\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/obj.c\nFile src/cmd/6l/obj.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/obj.c#newcode97\nsrc/cmd/6l/obj.c:97: flagstr(\"E\", \"sym: entry symbol\", &INITENTRY);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> E is after D (was it supposed to be sorted?)\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/obj.c#newcode123\nsrc/cmd/6l/obj.c:123: flagcount(\"n\", \"dump symbol table\", &debug['n']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> n is before o\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/pass.c\nFile src/cmd/6l/pass.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/6l/pass.c#newcode656\nsrc/cmd/6l/pass.c:656: if(zerostack && autoffset && !(cursym->text->from.scale&NOSPLIT)) {\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> where does zerostack come from? it's debug['Z'] in obj.c\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c\nFile src/cmd/cc/lex.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode136\nsrc/cmd/cc/lex.c:136: flagcount(\"<\", \"debug shift\", &debug['<']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> flag A debugs alignment\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode138\nsrc/cmd/cc/lex.c:138: flagfn1(\"D\", \"name[=value]: add #define\", dodef);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> if thechar=='5'!\n>   flag C debugs constprop\n>   flag H debugs shiftprop\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode148\nsrc/cmd/cc/lex.c:148: flagcount(\"T\", \"enable type signatures\", &debug['S']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> I think you meant debug['T']\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/cc/lex.c#newcode165\nsrc/cmd/cc/lex.c:165: flagcount(\"q\", \"print Go definitions\", &debug['q']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> there seems to be a 's' flag in acid.c\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/dist/build.c#newcode864\nsrc/cmd/dist/build.c:864: vadd(&compile, \"-FTVw\");\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> should this be fixed?\n\nThis is setting up for the host compiler, to build the tools. So it's okay: it's talking to the real Plan 9 compiler not the Go variant.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/gc/lex.c\nFile src/cmd/gc/lex.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/gc/lex.c#newcode240\nsrc/cmd/gc/lex.c:240: flagcount(\"complete\", \"compiling complete package (no C or assembly)\", &pure_go);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> the race detection flag has disappeared\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/1002/src/cmd/gc/lex.c#newcode247\nsrc/cmd/gc/lex.c:247: flagcount(\"j\", \"debug runtime-initialized variables\", &debug['i']);\nOn 2012/12/30 08:37:16, remyoudompheng wrote:\n> debug['j']\n\nDone.",
			"disapproval": false,
			"date": "2012-12-30 15:40:37.545670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7035043/diff/11005/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/7035043/diff/11005/doc/go1.1.html#newcode24\ndoc/go1.1.html:24: In the gc toolchain, the assemblers, compilers, and linkers now use the\nOn 2013/01/04 17:17:55, iant wrote:\n> This CL doesn't change the assemblers--is that a followup?\n\nI'm undecided. I didn't mean to write assemblers here. Removed.\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/cmd/8l/obj.c\nFile src/cmd/8l/obj.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/cmd/8l/obj.c#newcode82\nsrc/cmd/8l/obj.c:82: debug['I'] = 1; // denote cmdline interpreter override\nOn 2013/01/04 17:17:55, iant wrote:\n> This function occurs three times, and could be moved into ld.\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c\nFile src/lib9/flag.c (right):\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c#newcode100\nsrc/lib9/flag.c:100: *(int64*)p = strtoll(s, 0, 0);\nOn 2013/01/04 17:17:55, iant wrote:\n> Check for non-number?\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c#newcode117\nsrc/lib9/flag.c:117: *(int32*)p = strtol(s, 0, 0);\nOn 2013/01/04 17:17:55, iant wrote:\n> Check for non-number?\n\nDone.\n\nhttps://codereview.appspot.com/7035043/diff/11005/src/lib9/flag.c#newcode152\nsrc/lib9/flag.c:152: ((void(*)(void))p)();\nOn 2013/01/04 17:17:55, iant wrote:\n> USED(s); ?\n\nDone.",
			"disapproval": false,
			"date": "2013-01-06 20:09:16.565840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=12562bcfba22 ***\n\ncmd/5l, cmd/6l, cmd/8l, cmd/cc, cmd/gc: new flag parsing\n\nThis CL adds a flag parser that matches the semantics of Go's\npackage flag. It also changes the linkers and compilers to use\nthe new flag parser.\n\nCommand lines that used to work, like\n        8c -FVw\n        6c -Dfoo\n        5g -I/foo/bar\nnow need to be split into separate arguments:\n        8c -F -V -w\n        6c -D foo\n        5g -I /foo/bar\nThe new spacing will work with both old and new tools.\n\nThe new parser also allows = for arguments, as in\n        6c -D=foo\n        5g -I=/foo/bar\nbut that syntax will not work with the old tools.\n\nIn addition to matching standard Go binary flag parsing,\nthe new flag parser generates more detailed usage messages\nand opens the door to long flag names.\n\nThe recently added gc flag -= has been renamed -complete.\n\nR=remyoudompheng, daniel.morsing, minux.ma, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7035043",
			"disapproval": false,
			"date": "2013-01-06 20:26:27.211910",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7035043: cmd/5l, cmd/6l, cmd/8l, cmd/cc, cmd/gc: new flag parsing",
	"created": "2012-12-30 02:42:22.718050",
	"patchsets": [
		1,
		2001,
		1002,
		8001,
		4,
		6019,
		11005,
		23001
	],
	"modified": "2013-01-06 20:26:29.505010",
	"closed": true,
	"issue": 7035043
}