{
	"description": "encoding/json: add Decoder.Buffered accessor to get overread data\n\nOtherwise it's impossible to know how much data from the\njson.Decoder's underlying Reader was actually consumed.\n\nThe old fix from golang.org/issue/1955 just added docs. This\nprovides an actual mechanism.\n\nUpdate issue 1955",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go\nFile src/pkg/encoding/json/stream.go (right):\n\nhttps://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go#newcode62\nsrc/pkg/encoding/json/stream.go:62: // Remaining returns a reader of the buffered data remaining\nOn 2013/01/23 01:25:42, adg wrote:\n> s/buffered  //\n\nI dunno. That word's kinda the whole point. \"slop\", \"overread\", \"accidentally read\". I think \"buffered\" says it best.\n\nI'll let Russ pick the wording if he doesn't hate the design.\n\nI'd be happy with any solution that lets me know accurately which bytes were used and which weren't.",
			"disapproval": false,
			"date": "2013-01-23 01:27:46.552390",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go\nFile src/pkg/encoding/json/stream.go (right):\n\nhttps://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go#newcode62\nsrc/pkg/encoding/json/stream.go:62: // Remaining returns a reader of the buffered data remaining\nOn 2013/01/23 01:39:57, adg wrote:\n> On 2013/01/23 01:27:46, bradfitz wrote:\n> > On 2013/01/23 01:25:42, adg wrote:\n> > > s/buffered  //\n> > \n> > I dunno. That word's kinda the whole point. \"slop\", \"overread\", \"accidentally\n> > read\". I think \"buffered\" says it best.\n> > \n> > I'll let Russ pick the wording if he doesn't hate the design.\n> > \n> > I'd be happy with any solution that lets me know accurately which bytes were\n> > used and which weren't.\n> \n> You have \"the buffered data remaining in the Decoder's buffer.\" I suggest \"the\n> data remaining in the Decoder's buffer.\" If the data is in the buffer, it's\n> buffered no?\n> \n\noh, yeah.  sorry, i wrote this all on a bumpy bus and my brain always goes to mush.\n\nhttps://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go#newcode66\nsrc/pkg/encoding/json/stream.go:66: return io.MultiReader(bytes.NewReader(dec.buf), dec.r)\nOn 2013/01/23 01:39:57, adg wrote:\n> Another option is to let the caller do the MultiReader thing themselves. I'm in\n> two minds. This is probably cleaner for the majority case, but less flexible\n> than just returning the buffered bytes. It also hides the underlying type of the\n> original reader. Hm.\n\nI don't care about the user losing their reader's concrete type: they were the ones who provided it to us anyway with NewDecoder.\n\nAnd we could just return the buffered slop too.  I don't care.  I thought this was cuter, in that this reader could take over for the other one.",
			"disapproval": false,
			"date": "2013-01-23 01:49:49.991250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am a little confused about why what's there isn't good enough. That is,\r\nwhy not pass in an io.ByteReader like in TestLimitedBuffering?\r\n",
			"disapproval": false,
			"date": "2013-01-23 02:55:34.830920",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go\nFile src/pkg/encoding/json/stream.go (right):\n\nhttps://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go#newcode62\nsrc/pkg/encoding/json/stream.go:62: // Remaining returns a reader of the buffered data remaining\ns/buffered  //\n\nhttps://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go#newcode63\nsrc/pkg/encoding/json/stream.go:63: // in the Decoder's buffer, along with the source reader's\n\"followed by the rest of the source data.\" ?",
			"disapproval": false,
			"date": "2013-01-23 01:25:41.963540",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 January 2013 12:49, <bradfitz@golang.org> wrote:\r\n\r\n> And we could just return the buffered slop too.  I don't care.  I\r\n> thought this was cuter, in that this reader could take over for the\r\n> other one.\r\n>\r\n\r\nIt's definitely cuter. I've just never needed to do this so I'm not sure\r\nwhat the user wants.\r\n",
			"disapproval": false,
			"date": "2013-01-23 02:55:35.461860",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-23 01:08:41.930770",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go\nFile src/pkg/encoding/json/stream.go (right):\n\nhttps://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go#newcode62\nsrc/pkg/encoding/json/stream.go:62: // Remaining returns a reader of the buffered data remaining\nOn 2013/01/23 01:27:46, bradfitz wrote:\n> On 2013/01/23 01:25:42, adg wrote:\n> > s/buffered  //\n> \n> I dunno. That word's kinda the whole point. \"slop\", \"overread\", \"accidentally\n> read\". I think \"buffered\" says it best.\n> \n> I'll let Russ pick the wording if he doesn't hate the design.\n> \n> I'd be happy with any solution that lets me know accurately which bytes were\n> used and which weren't.\n\nYou have \"the buffered data remaining in the Decoder's buffer.\" I suggest \"the data remaining in the Decoder's buffer.\" If the data is in the buffer, it's buffered no?\n\nhttps://codereview.appspot.com/7181053/diff/3001/src/pkg/encoding/json/stream.go#newcode66\nsrc/pkg/encoding/json/stream.go:66: return io.MultiReader(bytes.NewReader(dec.buf), dec.r)\nAnother option is to let the caller do the MultiReader thing themselves. I'm in two minds. This is probably cleaner for the majority case, but less flexible than just returning the buffered bytes. It also hides the underlying type of the original reader. Hm.",
			"disapproval": false,
			"date": "2013-01-23 01:39:57.439560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Likely I'm stupid and missed that. Will look later.\r\n On Jan 22, 2013 6:55 PM, \"Russ Cox\" <rsc@golang.org> wrote:\r\n\r\n> I am a little confused about why what's there isn't good enough. That is,\r\n> why not pass in an io.ByteReader like in TestLimitedBuffering?\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-23 03:19:06.234560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ, there is no TestLimitedBuffering.\r\n\r\nMaybe you're referring to https://codereview.appspot.com/5623053/ which was\r\nnever submitted due to performance concerns.\r\n\r\nMy CL doesn't change the performance of the read loop.\r\n\r\nDo you want me to finish 5623053 and have two read loops, one for big reads\r\nand one for byte reads?\r\n\r\n\r\nOn Tue, Jan 22, 2013 at 7:19 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Likely I'm stupid and missed that. Will look later.\r\n>  On Jan 22, 2013 6:55 PM, \"Russ Cox\" <rsc@golang.org> wrote:\r\n>\r\n>> I am a little confused about why what's there isn't good enough. That is,\r\n>> why not pass in an io.ByteReader like in TestLimitedBuffering?\r\n>>\r\n>>\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-01-23 23:43:07.944600",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-29 00:25:24.634360",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-29 00:26:25.167370",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6ea4af4a1d5e ***\n\nencoding/json: add Decoder.Buffered accessor to get overread data\n\nOtherwise it's impossible to know how much data from the\njson.Decoder's underlying Reader was actually consumed.\n\nThe old fix from golang.org/issue/1955 just added docs. This\nprovides an actual mechanism.\n\nUpdate issue 1955\n\nR=golang-dev, adg, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7181053",
			"disapproval": false,
			"date": "2013-01-29 00:31:48.679610",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7181053: encoding/json: add Decoder.Buffered accessor to get ove...",
	"created": "2013-01-23 01:08:18.203230",
	"patchsets": [
		1,
		1001,
		3001,
		10001,
		14002
	],
	"modified": "2013-02-01 16:33:55.479520",
	"closed": true,
	"issue": 7181053
}