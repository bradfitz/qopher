{
	"description": "path/filepath, os/exec: unquote PATH elements on Windows\n\nOn Windows, directory names in PATH can be fully or partially quoted\nin double quotes ('\"'), but the path names as used by most APIs must\nbe unquoted. In addition, quoted names can contain the semicolon\n(';') character, which is otherwise used as ListSeparator.\n\nThis CL changes SplitList in path/filepath and LookPath in os/exec\nto only\ttreat unquoted semicolons as separators, and to unquote the\nseparated elements.\n\n(In addition, fix harmless test bug I introduced for LookPath on Unix.)\n\nRelated discussion thread:\nhttps://groups.google.com/d/msg/golang-nuts/PXCr10DsRb4/sawZBM7scYgJ",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"mccoyst@gmail.com",
		"alex.brainman@gmail.com",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-22 14:48:15.739760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Shouldn't it remove the quotes? I'm a bit skeptical about this. I don't\r\nwant to get into unquoting here. It's really unfortunate that Windows does\r\nthis.\r\n",
			"disapproval": false,
			"date": "2013-01-22 19:06:27.387190",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Perhaps a more succinct description of the change would be: \"on Windows,\r\nonly split at semicolons that are separators\". Splitting at semicolons that\r\nare part of a directory name is clearly always problematic.\r\n\r\nAlthough unquoting is a related issue, I think it could be considered and\r\n(if needed) addressed separately. My opinion on unquoting is that SplitList\r\nshouldn't be changed to remove quotes as the Go1 docs for it don't mention\r\nunquoting. (Even if it is considered unspecified behavior, the benefits of\r\nthe change are not obvious.)\r\n\r\nNot fixing splitting would mean that Go programs on Windows cannot use\r\nSplitList at all (in a safe manner). Not unquoting just means that Go\r\nprograms handling PATH on Windows have to do their own unquoting -- which\r\nsome may as well already be doing. (Note that although quoting is only\r\nrequired for directory names containing semicolons, I think it is much more\r\ncommonly used in other cases, often when people think directory names\r\nincluding spaces or some other perceived \"special\" characters need or\r\nshould be quoted.)\r\n\r\n\r\n\r\n\r\nOn Wed, Jan 23, 2013 at 4:06 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Shouldn't it remove the quotes? I'm a bit skeptical about this. I don't\r\n> want to get into unquoting here. It's really unfortunate that Windows does\r\n> this.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-22 23:49:34.575230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I certainly expect to be able to use the split path elements directly in\r\nconstructing path names, without further processing. There's no unquoting\r\non non-Windows systems.\r\n",
			"disapproval": false,
			"date": "2013-01-23 02:44:53.203890",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 23, 2013 at 7:49 AM, speter <speter.go1@gmail.com> wrote:\r\n\r\n> Not fixing splitting would mean that Go programs on Windows cannot use\r\n> SplitList at all (in a safe manner). Not unquoting just means that Go\r\n> programs handling PATH on Windows have to do their own unquoting -- which\r\n> some may as well already be doing. (Note that although quoting is only\r\n> required for directory names containing semicolons, I think it is much more\r\n> commonly used in other cases, often when people think directory names\r\n> including spaces or some other perceived \"special\" characters need or\r\n> should be quoted.)\r\n>\r\nboth of the cases mean that a Go user must do something specially on\r\nWindows, and\r\ni think this defeated the goal of path/filepath which serve as portable\r\nfile path handling\r\npackage.\r\n",
			"disapproval": false,
			"date": "2013-01-23 11:53:05.061030",
			"approval": false
		},
		{
			"sender": "mccoyst@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wednesday, January 23, 2013 6:52:44 AM UTC-5, minux wrote:\r\n\r\n>\r\n> On Wed, Jan 23, 2013 at 7:49 AM, speter <spete...@gmail.com <javascript:>>wrote:\r\n>\r\n>> Not fixing splitting would mean that Go programs on Windows cannot use \r\n>> SplitList at all (in a safe manner). Not unquoting just means that Go \r\n>> programs handling PATH on Windows have to do their own unquoting -- which \r\n>> some may as well already be doing. (Note that although quoting is only \r\n>> required for directory names containing semicolons, I think it is much more \r\n>> commonly used in other cases, often when people think directory names \r\n>> including spaces or some other perceived \"special\" characters need or \r\n>> should be quoted.)\r\n>>\r\n> both of the cases mean that a Go user must do something specially on \r\n> Windows, and\r\n> i think this defeated the goal of path/filepath which serve as portable \r\n> file path handling\r\n> package.\r\n>\r\n\r\nThirded. Double quotes are purely control characters in Windows's PATH and \r\nthey aren't valid inside of path or file names, so they shouldn't come out \r\nof a function like SplitList that is (potentially) interpreting them.\r\n",
			"disapproval": false,
			"date": "2013-01-23 14:23:40.120970",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I'm afraid I wasn't clear / specific enough.\r\n\r\nI agree that returning the \"bare\" (on Windows, unquoted) path elements is\r\nmore commonly needed, and that splitting and unquoting would be the more\r\ndesirable semantics when designing a new library.\r\n\r\nMy concern was that the original behavior of SplitList, i.e. splitting\r\nwithout unquoting, can also be considered a meaningful semantics (although\r\nit is useful in much fewer cases). So changing SplitList to unquote path\r\nelements on Windows has the potential to break existing valid programs that\r\nrely on the existing (non-unquoting) behavior. (Since the original docs for\r\nSplitList mention splitting but don't mention unquoting, it is not\r\nunreasonable for programs to expect non-unquoted strings.)\r\n\r\nBut in practice this is very unlikely to affect any programs in a negative\r\nway, so it is mostly a \"legal\" concern. If it is not considered to be an\r\nissue, I'm glad to update the CL to also do the unquoting in SplitList.\r\n\r\n(An example of an alternative solution to the unquoting problem that\r\ndoesn't involve what can be considered a potentially incompatible change\r\nwould be to add a new function, such as SplitListBare, and document that\r\nprograms that want to obtain the \"bare\" path elements in a portable manner\r\nshould use the new function.)\r\n",
			"disapproval": false,
			"date": "2013-01-23 14:43:30.535980",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"MccoyST@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/23 14:43:30, speter wrote:\n> \n> I agree that returning the \"bare\" (on Windows, unquoted) path elements is\n> more commonly needed, and that splitting and unquoting would be the more\n> desirable semantics when designing a new library.\n> \n\nIt looks like Windows APIs we use do not accept paths with \" in it - http://play.golang.org/p/HxFuvF_YEi outputs:\n\n2013/01/30 17:28:00 openfile(\"\\\"C:\\\\WINDOWS\\\\system32\\\\cmd.exe\\\"\"): open \"C:\\WIN\nDOWS\\system32\\cmd.exe\": The filename, directory name, or volume label syntax is\nincorrect.\nexit status 1\n\non my system. So paths with \" aren't very useful.\n\n> My concern was that the original behavior of SplitList, i.e. splitting\n> without unquoting, can also be considered a meaningful semantics (although\n> it is useful in much fewer cases). So changing SplitList to unquote path\n> elements on Windows has the potential to break existing valid programs that\n> rely on the existing (non-unquoting) behavior. (Since the original docs for\n> SplitList mention splitting but don't mention unquoting, it is not\n> unreasonable for programs to expect non-unquoted strings.)\n\nLike others said, the purpose of this package is to deal with file-paths in a portable way: you start with a string, and you end up with something that can be used to open files and navigate filesystem. In that regard, paths with \" aren't useable. It is a shortcoming on our part that we aren't removing quotes. I think we should implement and document this behavior.\n\nThat is, if Go Team considers that change not breaking Go1 \"promise\".\n\n> (An example of an alternative solution to the unquoting problem that\n> doesn't involve what can be considered a potentially incompatible change\n> would be to add a new function, such as SplitListBare, and document that\n> programs that want to obtain the \"bare\" path elements in a portable manner\n> should use the new function.)\n\nI am against creating new function. It would be hard to come-up with a good name. Also everyone is using old function already anyway, so we would have to educate users. Hopefully number of users of SplitList that need to keep quotes is small, and they can use strings.Split(path, string(ListSeparator)) instead.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-30 06:34:21.061560",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"MccoyST@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe everyone who has commented on this issue so far agrees that:\n\n1. SplitList splitting a path at semicolons that are not separators (but parts of directory names) is clearly a bug that must be fixed. \n2. Disregarding backwards compatibility, the behavior that would benefit the most users would be for SplitList to unquote list elements on Windows.\n\nBut as SplitList is part of Go 1, I don't think we can disregard backwards compatibility.\n\nMy interpretation of the situation is that:\n\"1.\" above (and the current version of this CL) is a change that fixes an implementation bug, and thus brings the implementation in line with the specification (API docs), which describe splitting on separators, but do not mention unquoting.\n\"2.\" above would be a change from one meaningful semantics to another. Although the new one would be more \"popular\", I don't think the decision on a potentially incompatible change should be made based on popularity.\n\nI'm fairly certain that changing \"1.\" doesn't break any existing (meaningful) program. On the other hand, changing \"2.\" has the potential of breaking programs that have been implemented to be consistent with the existing specification (API docs) and tested to work correctly. Note that programs can do a lot of things with the splitted path besides passing it to Go file handling API's (such as passing it to other programs that may rely on quotation being retained), so I don't think how other Go API's handle quotes should be a decisive factor in this case (although it undoubtedly affects \"popularity\" significantly).\n\nThe likelihood that such a change actually breaks some programs in practice may be quite low (although there is no way to really know), but if it is so, it is just because there are still relatively few Go users (especially on Windows). But I don't think that should be a decisive factor either. And even if no one is affected in this case, such a change could also send a negative signal regarding the protections of go1compat.html. So far my expectation has been that incompatible changes (other than clear bugfixes) are generally avoided (but the right to do so is retained for some cases, for situations when it is practically inevitable). I think that a precedent of making a potentially incompatible change based on popularity, or based on some estimation that it affects just a small minority of users (when it could be easily avoided by just adding a new function) could make many people think twice before considering Go for serious projects.\n\nBut all this is just my individual interpretation, opinion and expectation, so it in no way authoritative.\n\nCould someone from the Go Team explain how go1compat.html is intended to apply in this case?",
			"disapproval": false,
			"date": "2013-01-30 13:46:35.880060",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 30, 2013 at 5:46 AM,  <speter.go1@gmail.com> wrote:\r\n>\r\n> Could someone from the Go Team explain how go1compat.html is intended to\r\n> apply in this case?\r\n\r\nThe Go 1 compatibility rules permit us to change a library function if\r\nit does not implement its documented behaviour.  In this case the\r\ndocumented behaviour is to split a list of paths.  This function is\r\ndocumented as being OS-specific.  If a Windows path list naturally\r\nincludes quoted entries, and if the normal behaviour of a function\r\nthat splits a Windows path would include unquoting entries, then I\r\nthink it would be reasonable for this function to unquote entries.\r\nThat would be a reasonable application of the Go 1 compatibility\r\nrules.\r\n\r\nIt's worth considering what would happen to a reasonable program\r\nmoving from Go 1 to Go 1.1.  Presumably a reasonable program would\r\neither 1) ignore quoting, or 2) do the unquoting itself.  A program\r\nthat ignores unquoting would continue to work under Go 1.1, and in\r\nfact might work better.  What would happen to a program that currently\r\ndoes unquoting itself?  I don't know the quoting rules.\r\n\r\nIt's also worth considering whether we provide any facility for using\r\nSplitList to pull apart a path list, then add or remove an entry, and\r\nthen put the result back into a path list again.  As far as I know we\r\nhave no facility for that.  Any such facility would presumably need to\r\ndo quoting on Windows.  And, actually, that is a case where a Go 1\r\nprogram that ignores quoting when using SplitList would fail if\r\nSplitList is changed.\r\n\r\nAnyhow, I don't see a very strong argument, but I think there is a\r\nreasonable argument that the Go 1 rules permit us to change the\r\nfunction to do unquoting if we think it is the right thing to do.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-01-30 15:02:27.602720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If we're going to change anything on Windows, I believe the correct change\r\nis to:\r\n\r\n1. Make SplitList know about quotes _and_ do the unquoting.\r\n2. Make JoinList (when it happens) reintroduced quotes as needed.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-30 16:17:56.060060",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"MccoyST@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can see 3 choices here:\n\n1) We accept this CL as is (means no unquoting). Then we have a potential problem with go command - it uses filepath.SplitPath, and filepath.SplitPath will return quoted directory names, and these will fail to be walked (all this needs to be verified).\n\n2) We could change filepath.SplitPath to unquote.\n\n3) We accept this CL as is (means no unquoting). And we add new split-path function that does unquoting. And we use new function everywhere in go command instead of filepath.SplitPath.\n\nI think 1) is unacceptable. I think 3) is too convoluted (2 different functions to do the same thing). 2) wins for me.\n\nI do not see downside with 2). I cannot see any reasonable program that works now, but would be broken if we change as per 2). Can you?\n\nMaybe there other alternatives. What are they?\n\nAlex",
			"disapproval": false,
			"date": "2013-01-31 02:10:00.292130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with you: (2) is the right choice.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-31 02:11:06.535330",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"MccoyST@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for the comments, and apologies for the delay and the lengthy message -- I should have discussed these things before sending the CL.\n\nI did not intend the CL by itself (\"(1)\" above) to solve all related issues. And in fact I don't think (2) by itself is a solution, although it can be part of the implementation of a solution.\n\nI'd also like to clarify that in (3) above, the two functions would not be \"doing the same thing\" -- there are two different meaningful semantics. In most cases callers will need the unquoted version. But in general, if elements of a path are later used as part of a new path, it can be necessary and/or preferable to use the non-unquoted version, rather than (or in addition to) the unquoted one. Although the two functions would behave the same for non-Windows platforms, I think keeping this distinction in mind is essential for writing programs that handle paths correctly in a portable manner.\n\nI think there are several issues here, with the underlying problem being the lack of consideration for this distinction throughout the Go distribution (it was neither considered for SplitList in path/filepath, nor for the go tool). I don't think of SplitList as being the cause of issues for the go tool, but the two being occurrences of the same underlying problem -- the problem could have been discovered either by more thorough testing of SplitList or by more thorough testing of the go tool. And I've found that LookPath in os/exec also has the same issue (and a separate issue on Unix as well).\n\nI think the fundamental solution would be to review all path handling code in the Go distribution (be it using filepath.SplitList, strings.Split, strings.Index, for loop, or anything) and check at each location whether unquoting is needed or not. E.g., while it is quite possible that all calls to SplitList in the go tool need the unquoted version, I think the only way to be really certain is to actually review the code at those invocations. (And, since we can't review all code in the world that uses SplitList, users should be educated about the necessity of distinction for portable code.)\n\nThe advantage of basing the solution on (3) would be that it can be implemented in an incremental manner, assessing the concrete effects of each step while reviewing related code, and being able to ensure that changes do not affect other parts. In contrast, I think for (2) the effects can only be assessed probabilistically. When working on code that is being used in production, I generally prefer incremental changes where the concrete effects can be assessed.\n\nMore specifically, I believe (2) makes two assumptions: first that all users of SplitList also lacked the consideration for the distinction among the two semantics, and second that such users would have always intended the unquoting semantics. While I agree that both are quite likely true in the majority of cases, I prefer to avoid making changes based on such assumptions.\n\nBut I admit that these criteria are somewhat subjective, that I'm quite possibly overly cautious, and that there are other important factors. Most importantly, I agree it would be easier for those writing new code if they could use SplitList for doing split+unquote, rather than having to use a longer function name. And I also agree that the probability of issues with other approaches seems to be very low.\n\nTo summarize, I can see a range of possible approaches, all including either (2) or (3), fixing exec.LookPath, and potentially reviewing some or all related parts of the Go distribution source:\n\n(2-1)\nDo (2) above and fix exec.LookPath. Hope that everything else works out right: the change fixes the go tool, there are no other affected parts in the Go distribution, and it doesn't break any external code.\n\n(2-2)\nFirst, do (2), review / fix the go tool, and fix exec.LookPath. After these changes are committed, consider it tentatively fixed, but continue reviewing relevant code in the Go distribution to make sure there are no other affected parts. Hope that it doesn't break any external code, and that the initial change doesn't cause temporary degradation (that could be later fixed throughout the review).\n\n(2-3)\nReview all relevant code in the Go distribution. After identifying all potentially affected parts, implement and commit (2) with all relevant fixes, including for go tool and exec.LookPath. Hope that the change does not break any external code.\n\n(3-1)\nSame as (2-3) but use (3) instead of (2):\nReview all relevant code in the Go distribution. After identifying all potentially affected parts, implement and commit (3) with all relevant fixes, including for go tool and exec.LookPath. (External code is not affected.)\n\n(3-2)\nIncrementally implement (3) and continue to review and fix relevant parts of the Go distribution source step by step. This way each step fixes a specific issue and effects to other code can be assessed specifically. E.g.:\nS1: fix SplitList to not split at characters that are not separators (this CL)\nS2: add a new fuction that also unquotes list elements on Windows\nS3 onwards: review each component of the Go distribution that handles\n    paths, one by one, starting with the os/exec and the go tool;\n    decide whether the quoted or unquoted version is needed at each\n    location, and fix the implementation where necessary\n\nMy preferred one is (3-2) as it allows to fix the issues in an incremental manner and assess the concrete effect at each step. Having said that, I'm not aware of any specific issues with the other approaches. (But neither have I done a review of related code -- although I think reviewing some or all related code should be done, I realized I should confirm the preferred approach and extent first. The only part I did review was exec.LookPath, which I stumbled upon mostly by chance.)\n\nWhich of these (or what other approach) would you consider to be suitable in this case?\n\n(Sorry again for not starting with discussing these things.)\n\nPeter",
			"disapproval": false,
			"date": "2013-02-05 23:11:50.717810",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"MccoyST@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As for the quoting rules, I haven't found a definitive source but based on some experimenting the following seems to be consistent with Path behavior on Windows (XP SP3 32bit with NTFS).\n\n1. Semicolon (';') characters preceded by an even number of double quote ('\"') characters are list separators, whereas semicolons preceded by an odd number of double quotes are part of a directory name.\n2. After splitting at separators, remove all double-quote characters from the list elements.\n\nThis means that any part or parts of a list entry can be quoted, and unmatched double quote is tolerated.\n\nI will post the findings in more detail later on.\n\nPeter",
			"disapproval": false,
			"date": "2013-02-05 23:21:21.676920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"speter.go1@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows.go\nFile src/pkg/path/filepath/path_windows.go (right):\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows.go#newcode86\nsrc/pkg/path/filepath/path_windows.go:86: fp = fp + string(c)\nThis generates a quadratic amount of garbage, because if you're processing abcdefghi it has to allocate the strings a, ab, abc, abcd, abcde, abcdef, abcdefg, abcdefgh, abcdefghi. And paths do get long on Windows. Since package strings is already imported, you can do something like this:\n\n// Split path, respecting but preserving quotes.\nlist := []string{}\nstart := 0\nquo := false\nfor i := 0; i < len(path); i++ {\n    switch c := path[i]; {\n    case c == '\"':\n        quo = !quo\n    case c == ListSeparator && !quo:\n        list = append(list, path[start:i])\n        start = i+1\n    }\n}\nlist = append(list, path[start:])\n\n// Remove quotes.\nfor i, s := range list {\n    if strings.Contains(s, `\"`) {\n        list[i] = strings.Replace(s, `\"`, ``, -1)\n    }\n}\n\nreturn list",
			"disapproval": false,
			"date": "2013-02-19 15:58:10.715340",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"MccoyST@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/05 23:11:50, speter wrote:\n> ... And I've found that LookPath in os/exec also has the\n> same issue ...\n\nGood catch. I think we should fix it too.\n\n> My preferred one is (3-2) ...\n\nI prefer to do (2) above and fix exec.LookPath.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-06 06:35:14.070010",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"MccoyST@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/05 23:21:21, speter wrote:\n> As for the quoting rules, I haven't found a definitive source but based on some\n> experimenting the following seems to be consistent with Path behavior on Windows\n> ...\n\nSounds reasonable. Tests will help us clarify things.\n\n> I will post the findings in more detail later on.\n\nLooking forward to see the results. Thank you.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-06 06:39:13.363970",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nSorry for the delay again. Changes from previous version:\n- updated description and implementation based on (2) above\n- applied the same fix to LookPath in os/exec\n- moved godoc back to path.go to share documentation among platforms\n  (so that Unix users who want to write portable code are made aware\n  of the quoted/unquoted distinction on Windows)\n- fixed harmless test bug for LookPath on Unix that I introduced in\n  CL 7305053 (which fixed a related issue I found while looking into this)\n\nI also created, as a separate CL (not for submission), a validating test\nto check that the unquoting behavior, as described in the previous\ncomments and implemented in the current CL, is in fact consistent with\nthe Windows behavior: https://codereview.appspot.com/7346049/\n\nPeter",
			"disapproval": false,
			"date": "2013-02-17 16:02:30.865220",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 18, 2013 at 12:02 AM, <speter.go1@gmail.com> wrote:\r\n\r\n> I also created, as a separate CL (not for submission), a validating test\r\n> to check that the unquoting behavior, as described in the previous\r\n> comments and implemented in the current CL, is in fact consistent with\r\n> the Windows behavior: https://codereview.appspot.**com/7346049/<https://codereview.appspot.com/7346049/>\r\n\r\nhow long does this test take?\r\nit it can finish in reasonable time (a few second), i suggest we include\r\nthe test.\r\nperhaps we can only run it in short mode, but as not everybody develop\r\non Windows, making the builder test it seems worthwhile.\r\n",
			"disapproval": false,
			"date": "2013-02-17 16:08:12.297720",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nCleaned up and merged the validation test as path_windows_test.go.",
			"disapproval": false,
			"date": "2013-02-18 18:03:47.514430",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you. Most of your changes look good to me. Just test needs bit of polishing.\n\nAlex\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path.go#newcode178\nsrc/pkg/path/filepath/path.go:178: // On Windows, directory names in PATH can be fully or partially quoted in\nI think quotes / semicolons in path are exceptions. I do not think we need to describe gritty details of how this splitting works on Windows here. It provides no help to most users of this function, just makes them read more of useless text.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go\nFile src/pkg/path/filepath/path_windows_test.go (right):\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode12\nsrc/pkg/path/filepath/path_windows_test.go:12: // Validate that expected results in the tests for SplitList on Windows\nMaybe if you rename this test to TestWinSplitListTestsAreValid you will not need any comment here.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode53\nsrc/pkg/path/filepath/path_windows_test.go:53: for ti, tt := range winsplitlisttests {\nEverything inside this loop needs to go into a separate function. This will solve some of your problems:\n- \"defer os.RemoveAll(tmp)\" will actually execute after every iteration, so you won't need to delete selected files at the end;\n- you won't need \"continue outer\";\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode55\nsrc/pkg/path/filepath/path_windows_test.go:55: errFatalf(err, \"TempDir failed: %v\", err)\nPlease, do not use errFatalf. t.Fatalf will print source code line number, and that will be useless, if you insist on using errFatalf.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode58\nsrc/pkg/path/filepath/path_windows_test.go:58: err = os.Chdir(tmp)\nDo not os.Chdir. It is not safe to do in general. Your test leaves unremoved directories in TMP, because of os.Chdir. You can do everything without os.Chdir - just use full paths everywhere where it is required.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode65\nsrc/pkg/path/filepath/path_windows_test.go:65: t.Logf(\"%d,%d: already exists, skipping: %#q\", ti, i, d)\nShouldn't this be an error instead? Maybe with some exceptions when d == \"\".\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode71\nsrc/pkg/path/filepath/path_windows_test.go:71: t.Logf(\"%d,%d: %#q refers outside working directory, skipping\", ti, i, d)\nThis should be an Errorf, not Logf. I don't think we want tests that do not meet this condition.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode76\nsrc/pkg/path/filepath/path_windows_test.go:76: t.Logf(\"%d,%d: MkdirAll(%#q) failed, skipping: %v\", ti, i, d, err)\nThis should be an Errorf, not Logf.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode80\nsrc/pkg/path/filepath/path_windows_test.go:80: f, err := os.OpenFile(fn, os.O_CREATE|os.O_EXCL, perm)\nMaybe http://tip.golang.org/pkg/io/ioutil/#WriteFile\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode82\nsrc/pkg/path/filepath/path_windows_test.go:82: t.Logf(\"%d,%d: OpenFile(%#q) failed, skipping: %v\", ti, i, fn, err)\nThis should be an Errorf, not Logf.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode108\nsrc/pkg/path/filepath/path_windows_test.go:108: t.Errorf(\"%d,%d: expected %v, got %v\", ti, i, exp, out)\ns/%v/%q/\notherwise it is difficult to see the output\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode111\nsrc/pkg/path/filepath/path_windows_test.go:111: err = os.Remove(filepath.Join(d, cmdfile))\nDo you really need to do that? os.RemoveAll up above should delete everything anyway.",
			"disapproval": false,
			"date": "2013-02-19 01:38:36.282530",
			"approval": false
		},
		{
			"sender": "speter.go1@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path.go#newcode178\nsrc/pkg/path/filepath/path.go:178: // On Windows, directory names in PATH can be fully or partially quoted in\nOn 2013/02/19 01:38:36, brainman wrote:\n> I think quotes / semicolons in path are exceptions. I do not think we need to\n> describe gritty details of how this splitting works on Windows here. It provides\n> no help to most users of this function, just makes them read more of useless\n> text.\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows.go\nFile src/pkg/path/filepath/path_windows.go (right):\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows.go#newcode86\nsrc/pkg/path/filepath/path_windows.go:86: fp = fp + string(c)\nOn 2013/02/19 15:58:10, rsc wrote:\n> This generates a quadratic amount of garbage, because if you're processing\n> abcdefghi it has to allocate the strings a, ab, abc, abcd, abcde, abcdef,\n> abcdefg, abcdefgh, abcdefghi. And paths do get long on Windows. Since package\n> strings is already imported, you can do something like this:\n> \n> // Split path, respecting but preserving quotes.\n> list := []string{}\n> start := 0\n> quo := false\n> for i := 0; i < len(path); i++ {\n>     switch c := path[i]; {\n>     case c == '\"':\n>         quo = !quo\n>     case c == ListSeparator && !quo:\n>         list = append(list, path[start:i])\n>         start = i+1\n>     }\n> }\n> list = append(list, path[start:])\n> \n> // Remove quotes.\n> for i, s := range list {\n>     if strings.Contains(s, `\"`) {\n>         list[i] = strings.Replace(s, `\"`, ``, -1)\n>     }\n> }\n> \n> return list\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go\nFile src/pkg/path/filepath/path_windows_test.go (right):\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode12\nsrc/pkg/path/filepath/path_windows_test.go:12: // Validate that expected results in the tests for SplitList on Windows\nOn 2013/02/19 01:38:36, brainman wrote:\n> Maybe if you rename this test to TestWinSplitListTestsAreValid you will not need\n> any comment here.\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode53\nsrc/pkg/path/filepath/path_windows_test.go:53: for ti, tt := range winsplitlisttests {\nOn 2013/02/19 01:38:36, brainman wrote:\n> Everything inside this loop needs to go into a separate function. This will\n> solve some of your problems:\n> - \"defer os.RemoveAll(tmp)\" will actually execute after every iteration, so you\n> won't need to delete selected files at the end;\n> - you won't need \"continue outer\";\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode55\nsrc/pkg/path/filepath/path_windows_test.go:55: errFatalf(err, \"TempDir failed: %v\", err)\nOn 2013/02/19 01:38:36, brainman wrote:\n> Please, do not use errFatalf. t.Fatalf will print source code line number, and\n> that will be useless, if you insist on using errFatalf.\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode58\nsrc/pkg/path/filepath/path_windows_test.go:58: err = os.Chdir(tmp)\nOn 2013/02/19 01:38:36, brainman wrote:\n> Do not os.Chdir. It is not safe to do in general. Your test leaves unremoved\n> directories in TMP, because of os.Chdir. You can do everything without os.Chdir\n> - just use full paths everywhere where it is required.\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode65\nsrc/pkg/path/filepath/path_windows_test.go:65: t.Logf(\"%d,%d: already exists, skipping: %#q\", ti, i, d)\nOn 2013/02/19 01:38:36, brainman wrote:\n> Shouldn't this be an error instead? Maybe with some exceptions when d == \"\".\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode71\nsrc/pkg/path/filepath/path_windows_test.go:71: t.Logf(\"%d,%d: %#q refers outside working directory, skipping\", ti, i, d)\nOn 2013/02/19 01:38:36, brainman wrote:\n> This should be an Errorf, not Logf. I don't think we want tests that do not meet\n> this condition.\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode76\nsrc/pkg/path/filepath/path_windows_test.go:76: t.Logf(\"%d,%d: MkdirAll(%#q) failed, skipping: %v\", ti, i, d, err)\nOn 2013/02/19 01:38:36, brainman wrote:\n> This should be an Errorf, not Logf.\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode80\nsrc/pkg/path/filepath/path_windows_test.go:80: f, err := os.OpenFile(fn, os.O_CREATE|os.O_EXCL, perm)\nOn 2013/02/19 01:38:36, brainman wrote:\n> Maybe http://tip.golang.org/pkg/io/ioutil/#WriteFile\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode82\nsrc/pkg/path/filepath/path_windows_test.go:82: t.Logf(\"%d,%d: OpenFile(%#q) failed, skipping: %v\", ti, i, fn, err)\nOn 2013/02/19 01:38:36, brainman wrote:\n> This should be an Errorf, not Logf.\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode108\nsrc/pkg/path/filepath/path_windows_test.go:108: t.Errorf(\"%d,%d: expected %v, got %v\", ti, i, exp, out)\nOn 2013/02/19 01:38:36, brainman wrote:\n> s/%v/%q/\n> otherwise it is difficult to see the output\n\nDone.\n\nhttps://codereview.appspot.com/7181047/diff/33001/src/pkg/path/filepath/path_windows_test.go#newcode111\nsrc/pkg/path/filepath/path_windows_test.go:111: err = os.Remove(filepath.Join(d, cmdfile))\nOn 2013/02/19 01:38:36, brainman wrote:\n> Do you really need to do that? os.RemoveAll up above should delete everything\n> anyway.\nCurrent test flow requires removing cmdfile to unshadow the one in the next directory (added comment). Other potential approaches are iterating from last dir to first placing one command a time (shadowing the previous ones), or using a different command name in each dir (although this doesn't validate the order of results).",
			"disapproval": false,
			"date": "2013-02-19 17:20:10.217670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"speter.go1@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLeaving for Alex.",
			"disapproval": false,
			"date": "2013-02-19 17:22:04.497040",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-20 05:19:35.355560",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"speter.go1@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"mccoyst@gmail.com",
				"alex.brainman@gmail.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=16de2fb99862 ***\n\npath/filepath, os/exec: unquote PATH elements on Windows\n\nOn Windows, directory names in PATH can be fully or partially quoted\nin double quotes ('\"'), but the path names as used by most APIs must\nbe unquoted. In addition, quoted names can contain the semicolon\n(';') character, which is otherwise used as ListSeparator.\n\nThis CL changes SplitList in path/filepath and LookPath in os/exec\nto only\ttreat unquoted semicolons as separators, and to unquote the\nseparated elements.\n\n(In addition, fix harmless test bug I introduced for LookPath on Unix.)\n\nRelated discussion thread:\nhttps://groups.google.com/d/msg/golang-nuts/PXCr10DsRb4/sawZBM7scYgJ\n\nR=rsc, minux.ma, mccoyst, alex.brainman, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7181047\n\nCommitter: Alex Brainman <alex.brainman@gmail.com>",
			"disapproval": false,
			"date": "2013-02-20 05:20:00.121250",
			"approval": false
		}
	],
	"owner_email": "speter.go1@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "speter",
	"subject": "code review 7181047: path/filepath: SplitList shouldn't split quoted paths o...",
	"created": "2013-01-22 13:48:13.445110",
	"patchsets": [
		1,
		2001,
		5001,
		20001,
		23001,
		31001,
		33001,
		39001,
		33002
	],
	"modified": "2013-02-23 12:15:31.294780",
	"closed": true,
	"issue": 7181047
}