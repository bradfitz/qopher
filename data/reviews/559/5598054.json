{
	"description": "go/printer, gofmt: don't print incorrect programs\n\nBe careful when printing line comments with incorrect\nposition information. Maintain additional state\nimpliedSemi: when set, a comment containing a newline\nwould imply a semicolon and thus placement must be\ndelayed.\n\nPrecompute state information pertaining to the next\ncomment for faster checks (the printer is marginally\nfaster now despite additional checks for each comment).\n\nNo effect on existing src, misc sources.\n\nFixes issue 1505.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good except for the note around printer.go:881.\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go\nFile src/pkg/go/printer/printer.go (right):\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode109\nsrc/pkg/go/printer/printer.go:109: if len(text) >= 2 { // should always be the case, but be cautious\nif len(text) >= 2 && (text[1] == '/' || strings.Contains(text, \"\\n\")) {\n    return true\n}\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode794\nsrc/pkg/go/printer/printer.go:794: \nvar impliedSemi bool  // value for p.impliedSemi after this arg\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode819\nsrc/pkg/go/printer/printer.go:819: p.impliedSemi = false\nWhy is this one p.impliedSemi but all the others are impliedSemi?\nIs it a bug?  If not, comment?\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode881\nsrc/pkg/go/printer/printer.go:881: // intersperse extra newlines if present in the source\nIt seems like this might still introduce newlines where they don't belong.\nShould this be conditional on wroteNewline || !impliedSemi ?",
			"disapproval": false,
			"date": "2012-02-07 22:56:41.171898",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go\nFile src/pkg/go/printer/printer.go (right):\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode109\nsrc/pkg/go/printer/printer.go:109: if len(text) >= 2 { // should always be the case, but be cautious\nOn 2012/02/07 22:56:41, rsc wrote:\n> if len(text) >= 2 && (text[1] == '/' || strings.Contains(text, \"\\n\")) {\n>     return true\n> }\n\nsure. In general, the strings.Contains is slower, but /*-style comments are not very common.\nDone.\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode794\nsrc/pkg/go/printer/printer.go:794: \nOn 2012/02/07 22:56:41, rsc wrote:\n> var impliedSemi bool  // value for p.impliedSemi after this arg\n\nDone.\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode819\nsrc/pkg/go/printer/printer.go:819: p.impliedSemi = false\nOn 2012/02/07 22:56:41, rsc wrote:\n> Why is this one p.impliedSemi but all the others are impliedSemi?\n> Is it a bug?  If not, comment?\n> \n\nNot a bug. Newlines introduced here effect the current state (before arg), as these newlines are printed when interspersing comments. Added comment.\n\nhttp://codereview.appspot.com/5598054/diff/19001/src/pkg/go/printer/printer.go#newcode881\nsrc/pkg/go/printer/printer.go:881: // intersperse extra newlines if present in the source\nOn 2012/02/07 22:56:41, rsc wrote:\n> It seems like this might still introduce newlines where they don't belong.\n> Should this be conditional on wroteNewline || !impliedSemi ?\n\nHm, probably. I've added an if and verified that it doesn't affect anything we have.",
			"disapproval": false,
			"date": "2012-02-07 23:13:16.084922",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-07 01:41:36.338416",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-07 23:17:29.428569",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 0ff7fac59df1 ***\n\ngo/printer, gofmt: don't print incorrect programs\n\nBe careful when printing line comments with incorrect\nposition information. Maintain additional state\nimpliedSemi: when set, a comment containing a newline\nwould imply a semicolon and thus placement must be\ndelayed.\n\nPrecompute state information pertaining to the next\ncomment for faster checks (the printer is marginally\nfaster now despite additional checks for each comment).\n\nNo effect on existing src, misc sources.\n\nFixes issue 1505.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5598054",
			"disapproval": false,
			"date": "2012-02-07 23:19:56.381116",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5598054: go/printer, gofmt: don't print incorrect programs",
	"created": "2012-01-31 01:59:42.935112",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		5003,
		11001,
		13001,
		14005,
		15005,
		17005,
		19001,
		14010,
		18011
	],
	"modified": "2012-02-07 23:19:57.354938",
	"closed": true,
	"issue": 5598054
}