{
	"description": "net: replace error variable name e, errno with err",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm less sure about this one. local consistency is broken in a number of these files\n\nand why netfd->nfd?",
			"disapproval": false,
			"date": "2012-01-29 16:08:20.812028",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.  This looks reasonable.\nIf a function returns more than one non-error result,\nespecially if the multiple results are the same type,\nthen the names really help a lot and should be preserved.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_freebsd.go\nFile src/pkg/net/fd_freebsd.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_freebsd.go#newcode80\nsrc/pkg/net/fd_freebsd.go:80: func (p *pollster) WaitFD(s *pollServer, nsec int64) (int, int, error) {\nThe names were a big help here before: they made clear what\nthe function returned.  Please restore them.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_linux.go\nFile src/pkg/net/fd_linux.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_linux.go#newcode137\nsrc/pkg/net/fd_linux.go:137: func (p *pollster) WaitFD(s *pollServer, nsec int64) (int, int, error) {\nSame.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_netbsd.go\nFile src/pkg/net/fd_netbsd.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_netbsd.go#newcode80\nsrc/pkg/net/fd_netbsd.go:80: func (p *pollster) WaitFD(s *pollServer, nsec int64) (int, int, error) {\nSame.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_openbsd.go\nFile src/pkg/net/fd_openbsd.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_openbsd.go#newcode80\nsrc/pkg/net/fd_openbsd.go:80: func (p *pollster) WaitFD(s *pollServer, nsec int64) (int, int, error) {\nSame.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/interface_darwin.go\nFile src/pkg/net/interface_darwin.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/interface_darwin.go#newcode18\nsrc/pkg/net/interface_darwin.go:18: var (\nIf you're going to clean this up, please get rid of these var blocks.\nVariable declarations should be postponed until they are necessary,\nunlike in C.\n\nIn this function, that would mean using := for the two syscall calls\nand then declaring var ifmat []Addr just before the for loop.\n\nThere are others lurking: grep for 'var ('.\nThanks.",
			"disapproval": false,
			"date": "2012-01-29 17:44:45.424865",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-29 13:04:07.317301",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you fot the review.\n\n> and why netfd->nfd?\n\njust pick it from f, fd, nfd and netfd.\nchanged to netfd.\n\n> If a function returns more than one non-error result,\n> especially if the multiple results are the same type,\n> then the names really help a lot and should be preserved.\n\nagreed.\n\n> If you're going to clean this up, please get rid of these var blocks.\n> Variable declarations should be postponed until they are necessary,\n> unlike in C.\n\nwill try.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_freebsd.go\nFile src/pkg/net/fd_freebsd.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_freebsd.go#newcode80\nsrc/pkg/net/fd_freebsd.go:80: func (p *pollster) WaitFD(s *pollServer, nsec int64) (int, int, error) {\nOn 2012/01/29 17:44:45, rsc wrote:\n> The names were a big help here before: they made clear what\n> the function returned.  Please restore them.\n> \n> \n\nDone.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_linux.go\nFile src/pkg/net/fd_linux.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_linux.go#newcode137\nsrc/pkg/net/fd_linux.go:137: func (p *pollster) WaitFD(s *pollServer, nsec int64) (int, int, error) {\nOn 2012/01/29 17:44:45, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_netbsd.go\nFile src/pkg/net/fd_netbsd.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/fd_netbsd.go#newcode80\nsrc/pkg/net/fd_netbsd.go:80: func (p *pollster) WaitFD(s *pollServer, nsec int64) (int, int, error) {\nOn 2012/01/29 17:44:45, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/interface_darwin.go\nFile src/pkg/net/interface_darwin.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/4052/src/pkg/net/interface_darwin.go#newcode18\nsrc/pkg/net/interface_darwin.go:18: var (\nOn 2012/01/29 17:44:45, rsc wrote:\n> If you're going to clean this up, please get rid of these var blocks.\n> Variable declarations should be postponed until they are necessary,\n> unlike in C.\n> \n> In this function, that would mean using := for the two syscall calls\n> and then declaring var ifmat []Addr just before the for loop.\n> \n> There are others lurking: grep for 'var ('.\n> Thanks.\n\nDone.",
			"disapproval": false,
			"date": "2012-01-31 14:01:37.425505",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-31 14:02:00.565563",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5593046/diff/13002/src/pkg/net/ipsock_plan9.go\nFile src/pkg/net/ipsock_plan9.go (right):\n\nhttp://codereview.appspot.com/5593046/diff/13002/src/pkg/net/ipsock_plan9.go#newcode26\nsrc/pkg/net/ipsock_plan9.go:26: addr = IPv4zero // address contains port only\naddr := IPv4zero",
			"disapproval": false,
			"date": "2012-01-31 15:32:03.770965",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=546d24e10463 ***\n\nnet: replace error variable name e, errno with err\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5593046",
			"disapproval": false,
			"date": "2012-01-31 15:36:50.976569",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 5593046: net: replace error variable name e, errno with err",
	"created": "2012-01-28 15:15:58.826683",
	"patchsets": [
		4052,
		13002,
		6064
	],
	"modified": "2012-01-31 15:36:53.359510",
	"closed": true,
	"issue": 5593046
}