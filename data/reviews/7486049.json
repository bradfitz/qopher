{
	"description": "doc/effective_go.html: unify and expand the discussion of Sprintf and String\nIt's a common mistake to build a recursive String method; explain it well and\nshow how to avoid it.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Wed, Mar 6, 2013 at 10:56 AM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> doc/effective_go.html: unify and expand the discussion of Sprintf and\r\n> String\r\n> It's a common mistake to build a recursive String method; explain it\r\n> well and\r\n> show how to avoid it.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7486049/<https://codereview.appspot.com/7486049/>\r\n>\r\n> Affected files:\r\n>   M doc/effective_go.html\r\n>\r\n>\r\n> Index: doc/effective_go.html\r\n> ==============================**==============================**=======\r\n> --- a/doc/effective_go.html\r\n> +++ b/doc/effective_go.html\r\n> @@ -1712,8 +1712,40 @@\r\n>  </p>\r\n>  <p>\r\n>  Our <code>String</code> method is able to call <code>Sprintf</code>\r\n> because the\r\n> -print routines are fully reentrant and can be used recursively.\r\n> -We can even go one step further and pass a print routine's arguments\r\n> directly to another such routine.\r\n> +print routines are fully reentrant and can be wrapped this way.\r\n> +There is one important detail to understand, however: don't construct a\r\n> <code>String</code>\r\n> +method by calling <code>Sprintf</code> in a way that will recur into your\r\n> +<code>String</code> method indefinitely.\r\n> +This can happen if the <code>Sprintf</code> call attempts to print the\r\n> receiver directly as\r\n> +a string, which in turn will invoke the method again.\r\n> +It's a common and easy mistake to make, as this example shows.\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +type MyString string\r\n> +func (m MyString) String() string {\r\n> +    return fmt.Sprintf(\"MyString=%s\", m) // Error: will recur forever.\r\n> +}\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +It's also easy to fix: convert the argument to the basic string type,\r\n> which does not have the\r\n> +method.\r\n> +</p>\r\n> +\r\n> +<pre>\r\n> +type MyString string\r\n> +func (m MyString) String() string {\r\n> +    return fmt.Sprintf(\"MyString=%s\", string(m)) // OK: note conversion.\r\n> +}\r\n> +</pre>\r\n> +\r\n> +<p>\r\n> +In the <a href=\"#initialization\">**initialization section</a> we'll see\r\n> another technique that avoids this recursion.\r\n> +</p>\r\n> +\r\n> +<p>\r\n> +Another printing technique is to pass a print routine's arguments\r\n> directly to another such routine.\r\n>  The signature of <code>Printf</code> uses the type\r\n> <code>...interface{}</code>\r\n>  for its final argument to specify that an arbitrary number of parameters\r\n> (of arbitrary type)\r\n>  can appear after the format.\r\n> @@ -1857,13 +1889,13 @@\r\n>  </p>\r\n>\r\n>  <p>\r\n> -Note that it's fine to call <code>Sprintf</code> and friends in the\r\n> -implementation of <code>String</code> methods, but beware of\r\n> -recurring into the <code>String</code> method through the nested\r\n> -<code>Sprintf</code> call using a string format\r\n> -(<code>%s</code>, <code>%q</code>, <code>%v</code>, <code>%x</code> or\r\n> <code>%X</code>).\r\n> -The <code>ByteSize</code> implementation of <code>String</code> is safe\r\n> -because it calls <code>Sprintf</code> with <code>%f</code>.\r\n> +The use here of <code>Sprintf</code>\r\n> +to implement <code>ByteSize</code>'s <code>String</code> method is safe\r\n> +(avoids recurring indefinitely) not because of a conversion but\r\n> +because it calls <code>Sprintf</code> with <code>%f</code>,\r\n> +which is not a string format: <code>Sprintf</code> will only call\r\n> +the <code>String</code> method when it wants a string, and <code>%f</code>\r\n> +wants a floating-point value.\r\n>  </p>\r\n>\r\n>  <h3 id=\"variables\">Variables</h3>\r\n> @@ -2022,10 +2054,8 @@\r\n>  }\r\n>  </pre>\r\n>  <p>\r\n> -The conversion causes <code>s</code> to be treated as an ordinary slice\r\n> -and therefore receive the default formatting.\r\n> -Without the conversion, <code>Sprint</code> would find the\r\n> -<code>String</code> method of <code>Sequence</code> and recur\r\n> indefinitely.\r\n> +This method is another example of the conversion technique for calling\r\n> +<code>Sprintf</code> safely from a <code>String</code> method.\r\n>  Because the two types (<code>Sequence</code> and <code>[]int</code>)\r\n>  are the same if we ignore the type name, it's legal to convert between\r\n> them.\r\n>  The conversion doesn't create a new value, it just temporarily acts\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 19:18:35.006160",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-06 18:56:16.946020",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7486049/diff/1/doc/effective_go.html\nFile doc/effective_go.html (right):\n\nhttps://codereview.appspot.com/7486049/diff/1/doc/effective_go.html#newcode1716\ndoc/effective_go.html:1716: There is one important detail to understand, however: don't construct a <code>String</code>\nshould this sentence begin a new paragraph? (a paragraph about the important detail)\n\nhttps://codereview.appspot.com/7486049/diff/1/doc/effective_go.html#newcode1726\ndoc/effective_go.html:1726: func (m MyString) String() string {\nput a blank line between the two declarations; that's the gofmt style",
			"disapproval": false,
			"date": "2013-03-06 23:35:37.641400",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after those fixes",
			"disapproval": false,
			"date": "2013-03-06 23:46:09.620000",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d7af5bb3b6ca ***\n\ndoc/effective_go.html: unify and expand the discussion of Sprintf and String\nIt's a common mistake to build a recursive String method; explain it well and\nshow how to avoid it.\n\nR=golang-dev, bradfitz, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7486049",
			"disapproval": false,
			"date": "2013-03-06 23:47:54.974730",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7486049: doc/effective_go.html: unify and expand the discussion ...",
	"created": "2013-03-06 18:56:12.040080",
	"patchsets": [
		1,
		4002
	],
	"modified": "2013-03-06 23:47:55.984300",
	"closed": true,
	"issue": 7486049
}