{
	"description": "net/http: support multiple byte ranges in ServeContent\n\nFixes issue 3784",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-29 13:45:00.766929",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=adg or rsc or whoever likes/knows this sort of stuff.\r\n\r\nOn Thu, Jun 28, 2012 at 5:52 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net/http: support multiple byte ranges in ServeContent\r\n>\r\n> Fixes issue 3784\r\n>\r\n> Please review this at http://codereview.appspot.com/**6351052/<http://codereview.appspot.com/6351052/>\r\n>\r\n> Affected files:\r\n>  M src/pkg/net/http/fs.go\r\n>  M src/pkg/net/http/fs_test.go\r\n>  M src/pkg/net/http/range_test.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-29 00:53:40.179986",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-29 00:52:44.983295",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nOn Thu, Jun 28, 2012 at 10:36 PM, <adg@golang.org> wrote:\r\n\r\n>\r\n> http://codereview.appspot.com/**6351052/diff/5001/src/pkg/net/**http/fs.go<http://codereview.appspot.com/6351052/diff/5001/src/pkg/net/http/fs.go>\r\n> File src/pkg/net/http/fs.go (right):\r\n>\r\n> http://codereview.appspot.com/**6351052/diff/5001/src/pkg/net/**\r\n> http/fs.go#newcode200<http://codereview.appspot.com/6351052/diff/5001/src/pkg/net/http/fs.go#newcode200>\r\n> src/pkg/net/http/fs.go:200: return\r\n> do you really want to just throw these errors away?\r\n>\r\n\r\nFixed.  They're now propagate up, where io.Copy will now throw them away.\r\n I could log if the io.Seeker doesn't seek, maybe (it's documented that it\r\nmust work), but the other errors shouldn't log.\r\n\r\nat the top of this func, you could have\r\n>\r\n> var readErr error\r\n> defer pw.CloseWithError(readErr)\r\n>\r\n> and then here\r\n>\r\n> readErr = err\r\n>\r\n\r\ndefer evaluates its arguments immediately.  would need to be defer func() {\r\n.... }()\r\n\r\nI've restructured it differently.\r\n",
			"disapproval": false,
			"date": "2012-06-29 13:47:04.256706",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6351052/diff/5001/src/pkg/net/http/fs.go\nFile src/pkg/net/http/fs.go (right):\n\nhttp://codereview.appspot.com/6351052/diff/5001/src/pkg/net/http/fs.go#newcode200\nsrc/pkg/net/http/fs.go:200: return\ndo you really want to just throw these errors away?\n\nat the top of this func, you could have\n\nvar readErr error\ndefer pw.CloseWithError(readErr)\n\nand then here\n\nreadErr = err\nreturn\n\nwith the same for CopyN (and for the CreatePart call, too, although I don't think it's actually necessary)",
			"disapproval": false,
			"date": "2012-06-29 05:36:49.714308",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6351052/diff/1002/src/pkg/net/http/fs_test.go\nFile src/pkg/net/http/fs_test.go (right):\n\nhttp://codereview.appspot.com/6351052/diff/1002/src/pkg/net/http/fs_test.go#newcode125\nsrc/pkg/net/http/fs_test.go:125: t.Errorf(\"range=%q content-type = %q; lacks boundary\", rt.r, ct)\ncontinue?\n\nhttp://codereview.appspot.com/6351052/diff/1002/src/pkg/net/http/fs_test.go#newcode128\nsrc/pkg/net/http/fs_test.go:128: t.Errorf(\"range=%q Content-Length = %d; want %d\", rt.r, g, w)\ncontinue?\n\nhttp://codereview.appspot.com/6351052/diff/1002/src/pkg/net/http/fs_test.go#newcode134\nsrc/pkg/net/http/fs_test.go:134: t.Fatalf(\"range=%q, reading part index %d: %v\", rt.r, ri, err)\nwhy fatal?\n\nhttp://codereview.appspot.com/6351052/diff/1002/src/pkg/net/http/fs_test.go#newcode138\nsrc/pkg/net/http/fs_test.go:138: t.Fatalf(\"range=%q, reading part index %d body: %v\", rt.r, ri, err)\nwhy fatal?\n\nhttp://codereview.appspot.com/6351052/diff/1002/src/pkg/net/http/fs_test.go#newcode146\nsrc/pkg/net/http/fs_test.go:146: t.Errorf(\"range=%q: part Content-Range = %q; want %q\", rt.r, g, w)\ncontinue?",
			"disapproval": false,
			"date": "2012-07-03 16:53:04.592079",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn 2012/06/29 13:47:04, bradfitz wrote:\n> Fixed.  They're now propagate up, where io.Copy will now throw them away.\n>  I could log if the io.Seeker doesn't seek, maybe (it's documented that it\n> must work), but the other errors shouldn't log.\n\nHm. Not a blocker for this CL, but let's chat about logging. Seems weird to me that there's no way to see the read error here.\n\nhttp://codereview.appspot.com/6351052/diff/3004/src/pkg/net/http/fs.go\nFile src/pkg/net/http/fs.go (right):\n\nhttp://codereview.appspot.com/6351052/diff/3004/src/pkg/net/http/fs.go#newcode436\nsrc/pkg/net/http/fs.go:436: // rangesMIMESize returns the nunber of bytes it'll take to encode the\ns/it'll take/it takes/",
			"disapproval": false,
			"date": "2012-06-29 14:38:43.162761",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=070604630d24 ***\n\nnet/http: support multiple byte ranges in ServeContent\n\nFixes issue 3784\n\nR=golang-dev, adg\nCC=golang-dev\nhttp://codereview.appspot.com/6351052",
			"disapproval": false,
			"date": "2012-06-29 14:44:11.489154",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6351052: net/http: support multiple byte ranges in ServeContent",
	"created": "2012-06-29 00:51:57.799538",
	"patchsets": [
		1,
		2001,
		5001,
		3004,
		1002
	],
	"modified": "2012-07-03 16:53:04.761116",
	"closed": true,
	"issue": 6351052
}