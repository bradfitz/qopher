{
	"description": "cmd/go: go get should fail if GOPATH is not set\n\nCorrectly exporting GOPATH is an issue that comes up on IRC\nfrequently. This proposal causes go get to abort if GOPATH\nis not set.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm unsure about this generally and in particular. I'd like some time to\r\nthink about the consequences.\r\n\r\n\r\nOn Mon, Jul 16, 2012 at 6:14 PM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> cmd/go: go get should fail if GOPATH is not set\r\n>\r\n> Correctly exporting GOPATH is an issue that comes up on IRC\r\n> frequently. This proposal causes go get to abort if GOPATH\r\n> is not set.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6397048/<http://codereview.appspot.com/6397048/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/go/doc.go\r\n>   M src/cmd/go/get.go\r\n>   M src/cmd/go/help.go\r\n>   M src/cmd/go/test.bash\r\n>\r\n>\r\n> Index: src/cmd/go/doc.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/doc.go\r\n> +++ b/src/cmd/go/doc.go\r\n> @@ -445,7 +445,7 @@\r\n>  On Windows, the value is a semicolon-separated string.\r\n>  On Plan 9, the value is a list.\r\n>\r\n> -GOPATH must be set to build and install packages outside the\r\n> +GOPATH must be set to get, build and install packages outside the\r\n>  standard Go tree.\r\n>\r\n>  Each directory listed in GOPATH must have a prescribed structure:\r\n> Index: src/cmd/go/get.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/get.go\r\n> +++ b/src/cmd/go/get.go\r\n> @@ -62,6 +62,12 @@\r\n>  }\r\n>\r\n>  func runGet(cmd *Command, args []string) {\r\n> +       // Check GOPATH is valid\r\n> +       if gopath := os.Getenv(\"GOPATH\"); gopath == \"\" {\r\n> +               errorf(\"GOPATH is not set. Consult go help gopath for more\r\n> details.\")\r\n> +       }\r\n> +       exitIfErrors()\r\n> +\r\n>         // Phase 1.  Download/update.\r\n>         var stk importStack\r\n>         for _, arg := range downloadPaths(args) {\r\n> Index: src/cmd/go/help.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/help.go\r\n> +++ b/src/cmd/go/help.go\r\n> @@ -186,7 +186,7 @@\r\n>  On Windows, the value is a semicolon-separated string.\r\n>  On Plan 9, the value is a list.\r\n>\r\n> -GOPATH must be set to build and install packages outside the\r\n> +GOPATH must be set to get, build and install packages outside the\r\n>  standard Go tree.\r\n>\r\n>  Each directory listed in GOPATH must have a prescribed structure:\r\n> Index: src/cmd/go/test.bash\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/test.bash\r\n> +++ b/src/cmd/go/test.bash\r\n> @@ -119,6 +119,15 @@\r\n>         ok=false\r\n>  fi\r\n>\r\n> +# Test that without GOPATH set, go get should fail\r\n> +d=$(mktemp -d)\r\n> +mkdir -p $d/src/pkg\r\n> +if ( unset GOPATH ; export GOROOT=$d ; ./testgo get -d\r\n> code.google.com/p/go.**codereview/cmd/hgpatch<http://code.google.com/p/go.codereview/cmd/hgpatch>2>&1 | grep -v -q 'GOPATH is not set' ); then\r\n> +       echo \"go get get code.google.com/p/go.**codereview/cmd/hgpatch<http://code.google.com/p/go.codereview/cmd/hgpatch>should not succeed with GOPATH unset\"\r\n> +       ok=false\r\n> +fi\r\n> +rm -rf $d\r\n> +\r\n>  if $ok; then\r\n>         echo PASS\r\n>  else\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-17 02:07:10.961570",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-17 01:14:50.042150",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/17 02:07:10, r2 wrote:\n> I'm unsure about this generally and in particular. I'd like some time to\n> think about the consequences.\n\nUnderstood. For the record here is the link to the proposal, https://groups.google.com/d/topic/golang-dev/RA1epLmPeaQ/discussion",
			"disapproval": false,
			"date": "2012-07-17 02:10:35.280520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I replied to the other thread. I don't like this proposal. I would\r\nrather see something like a warning printed when the Go command finds\r\nmultiple possible sources for a given package path.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-07-29 23:01:36.973870",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough, thanks for your review.",
			"disapproval": false,
			"date": "2012-07-30 02:32:56.161510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-07-30 02:35:19.094990",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "At the risk of beating a dead horse the problem of failing to set\r\nGOPATH correct (or at all) continues to be a stumbling block for new\r\nGo users. This then leads them into more destructive behaviour like\r\nchmod a+w /usr/local/go, or running go get as root. While this\r\nsolution may not be correct, could I ask that we reopen the discussion\r\nof the logic of allowing go get to work without GOPATH set.\r\n\r\nCheers\r\n\r\nDave\r\n\r\nOn Mon, Jul 30, 2012 at 12:35 PM,  <dave@cheney.net> wrote:\r\n> *** Abandoned ***\r\n>\r\n> http://codereview.appspot.com/6397048/\r\n",
			"disapproval": false,
			"date": "2012-09-29 02:45:27.218370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe we should. Please file an issue so we remember. Thanks.\r\n",
			"disapproval": false,
			"date": "2012-10-01 19:11:13.053590",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6397048: cmd/go: go get should fail if GOPATH is not set",
	"created": "2012-07-16 04:05:49.377200",
	"patchsets": [
		1,
		2001,
		3003,
		7001,
		8001,
		7
	],
	"modified": "2012-07-30 02:35:23.495390",
	"closed": true,
	"issue": 6397048
}