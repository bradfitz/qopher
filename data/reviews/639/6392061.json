{
	"description": "bytes.Buffer: export the Grow method\nAllows a client to pre-allocate buffer space that is known to be necessary,\navoiding expensive reallocations.",
	"cc": [
		"gri@google.com",
		"gri@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nsome comment that you may want to address\n\nhttp://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer.go\nFile src/pkg/bytes/buffer.go (right):\n\nhttp://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer.go#newcode102\nsrc/pkg/bytes/buffer.go:102: // Grow grows the buffer, if necessary, to guarantee space for\ns/buffer/buffer's capacity/ ?\n\nhttp://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer.go#newcode108\nsrc/pkg/bytes/buffer.go:108: if n <= 0 {\nif n > 0 {\n   ...\n}\n\nand get rid of the return?\n\nhttp://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer_test.go\nFile src/pkg/bytes/buffer_test.go (right):\n\nhttp://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer_test.go#newcode388\nsrc/pkg/bytes/buffer_test.go:388: if startLen > len(tmp) {\ndon't do this test and use the result of buf.Read as as readBytes?\n\nreadBytes, _ := buf.Read(tmp) ?\n\nhttp://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer_test.go#newcode399\nsrc/pkg/bytes/buffer_test.go:399: if runtime.GOMAXPROCS(-1) == 1 && m1 != m2 {\njust compare TotalAlloc?\n\nm1.TotalAlloc != m2.TotalAlloc\n\n(couldn't there be a GC but no allocation?)",
			"disapproval": false,
			"date": "2012-07-12 18:34:25.966780",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-12 18:08:52.741290",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer_test.go\nFile src/pkg/bytes/buffer_test.go (right):\n\nhttp://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer_test.go#newcode388\nsrc/pkg/bytes/buffer_test.go:388: if startLen > len(tmp) {\nDo you need this test? if startLen < len(tmp), wouldn't it just read fewer bytes?\n\nAnd if you keep the test, shouldn't it be: startLen >= len(tmp) ?\n\nhttp://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer_test.go#newcode398\nsrc/pkg/bytes/buffer_test.go:398: if runtime.GOMAXPROCS(-1) == 1 && m1.Mallocs != m2.Mallocs {\nwhy is it Malloc rather than TotalAlloc?",
			"disapproval": false,
			"date": "2012-07-12 20:12:37.099230",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer.go\nFile src/pkg/bytes/buffer.go (right):\n\nhttp://codereview.appspot.com/6392061/diff/2001/src/pkg/bytes/buffer.go#newcode105\nsrc/pkg/bytes/buffer.go:105: // If n is negative, Grow does nothing.\nCurious about this choice. Why not panic? Seems like a programmer error on the order of using a negative array index.",
			"disapproval": false,
			"date": "2012-07-12 19:22:21.475370",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer.go\nFile src/pkg/bytes/buffer.go (right):\n\nhttp://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer.go#newcode108\nsrc/pkg/bytes/buffer.go:108: if n < 0 {\ndo you want to put in the short path for n == 0 ?",
			"disapproval": false,
			"date": "2012-07-12 20:11:51.093460",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer.go\nFile src/pkg/bytes/buffer.go (right):\n\nhttp://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer.go#newcode108\nsrc/pkg/bytes/buffer.go:108: if n < 0 {\nOn 2012/07/12 20:11:51, adg wrote:\n> do you want to put in the short path for n == 0 ?\n\nno, because if n is zero and we're growing, it's worth truncating the buffer.\n\nhttp://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer_test.go\nFile src/pkg/bytes/buffer_test.go (right):\n\nhttp://codereview.appspot.com/6392061/diff/4003/src/pkg/bytes/buffer_test.go#newcode398\nsrc/pkg/bytes/buffer_test.go:398: if runtime.GOMAXPROCS(-1) == 1 && m1.Mallocs != m2.Mallocs {\nOn 2012/07/12 20:12:37, gri wrote:\n> why is it Malloc rather than TotalAlloc?\n\nMalloc is the number of allocations. why is that a bad thing to check to see if the total number of allocations has changed?",
			"disapproval": false,
			"date": "2012-07-12 20:15:32.471110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@google.com, gri@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-12 20:15:40.476290",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@google.com, gri@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-07-12 20:04:39.363500",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-07-12 20:30:08.357510",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@google.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ed493c4bb3e0 ***\n\nbytes.Buffer: export the Grow method\nAllows a client to pre-allocate buffer space that is known to be necessary,\navoiding expensive reallocations.\n\nR=gri, gri, adg\nCC=golang-dev\nhttp://codereview.appspot.com/6392061",
			"disapproval": false,
			"date": "2012-07-13 03:52:38.011860",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6392061: bytes.Buffer: export the Grow method",
	"created": "2012-07-12 18:08:49.753450",
	"patchsets": [
		1,
		2001,
		4003,
		2003,
		4004
	],
	"modified": "2012-07-13 20:10:34.574930",
	"closed": true,
	"issue": 6392061
}