{
	"description": "unicode/utf8: reject out-of-range runes.\nSurrogates are still admitted, but I have sent mail to golang-dev on that topic.\n\nFixes issue 3785.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rogpeppe@gmail.com",
		"iant@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-16 23:09:32.253060",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6398049/diff/6003/src/pkg/unicode/utf8/utf8.go\nFile src/pkg/unicode/utf8/utf8.go (right):\n\nhttp://codereview.appspot.com/6398049/diff/6003/src/pkg/unicode/utf8/utf8.go#newcode105\nsrc/pkg/unicode/utf8/utf8.go:105: if r <= rune3Max || MaxRune < r {\nOn 2012/07/19 09:38:29, rog wrote:\n> i had to think a moment here - i'd find this easier\n> to read if it was r > MaxRune.\n\nIt's a stylistic thing for me. The layout implies 'if r is outside this range'.\nConsider these forms:\n\nr < 'a' || 'z' < r\n'a' <= r && r <= 'z'\n\nI admit this instance looks a little funny because rune3Max and MaxRune look unrelated, but it's the same idea.",
			"disapproval": false,
			"date": "2012-07-19 18:58:14.391900",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Jul 19, 2012 7:58 PM, <r@golang.org> wrote:\r\n>\r\n>\r\n>\r\nhttp://codereview.appspot.com/6398049/diff/6003/src/pkg/unicode/utf8/utf8.go\r\n> File src/pkg/unicode/utf8/utf8.go (right):\r\n>\r\n>\r\nhttp://codereview.appspot.com/6398049/diff/6003/src/pkg/unicode/utf8/utf8.go#newcode105\r\n> src/pkg/unicode/utf8/utf8.go:105: if r <= rune3Max || MaxRune < r {\r\n>\r\n> On 2012/07/19 09:38:29, rog wrote:\r\n>>\r\n>> i had to think a moment here - i'd find this easier\r\n>> to read if it was r > MaxRune.\r\n>\r\n>\r\n> It's a stylistic thing for me. The layout implies 'if r is outside this\r\n> range'.\r\n> Consider these forms:\r\n>\r\n> r < 'a' || 'z' < r\r\n> 'a' <= r && r <= 'z'\r\n>\r\n> I admit this instance looks a little funny because rune3Max and MaxRune\r\n> look unrelated, but it's the same idea.\r\n\r\nI'm familiar with the second form above, but hadn't seen the first before,\r\nalthough I realised that's what you were doing. Perhaps I'll get to like it.\r\n\r\n>\r\n> http://codereview.appspot.com/6398049/\r\n",
			"disapproval": false,
			"date": "2012-07-19 22:31:35.970980",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6398049/diff/6003/src/pkg/unicode/utf8/utf8.go\nFile src/pkg/unicode/utf8/utf8.go (right):\n\nhttp://codereview.appspot.com/6398049/diff/6003/src/pkg/unicode/utf8/utf8.go#newcode105\nsrc/pkg/unicode/utf8/utf8.go:105: if r <= rune3Max || MaxRune < r {\ni had to think a moment here - i'd find this easier\nto read if it was r > MaxRune.\n\nhttp://codereview.appspot.com/6398049/diff/6003/src/pkg/unicode/utf8/utf8.go#newcode180\nsrc/pkg/unicode/utf8/utf8.go:180: if r <= rune3Max || MaxRune < r {\nditto",
			"disapproval": false,
			"date": "2012-07-19 09:38:29.606850",
			"approval": true
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nIan\r\n\r\nOn Mon, Jul 16, 2012 at 4:09 PM,  <r@golang.org> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> unicode/utf8: reject out-of-range runes.\r\n> Surrogates are still admitted, but I have sent mail to golang-dev on\r\n> that topic.\r\n>\r\n> Please review this at http://codereview.appspot.com/6398049/\r\n>\r\n> Affected files:\r\n>   M src/pkg/unicode/utf8/utf8.go\r\n>   M src/pkg/unicode/utf8/utf8_test.go\r\n>\r\n>\r\n> Index: src/pkg/unicode/utf8/utf8.go\r\n> ===================================================================\r\n> --- a/src/pkg/unicode/utf8/utf8.go\r\n> +++ b/src/pkg/unicode/utf8/utf8.go\r\n> @@ -102,7 +102,7 @@\r\n>         // 4-byte, 21-bit sequence?\r\n>         if c0 < t5 {\r\n>                 r = rune(c0&mask4)<<18 | rune(c1&maskx)<<12 |\r\n> rune(c2&maskx)<<6 | rune(c3&maskx)\r\n> -               if r <= rune3Max {\r\n> +               if r <= rune3Max || MaxRune < r {\r\n>                         return RuneError, 1, false\r\n>                 }\r\n>                 return r, 4, false\r\n> @@ -177,7 +177,7 @@\r\n>         // 4-byte, 21-bit sequence?\r\n>         if c0 < t5 {\r\n>                 r = rune(c0&mask4)<<18 | rune(c1&maskx)<<12 |\r\n> rune(c2&maskx)<<6 | rune(c3&maskx)\r\n> -               if r <= rune3Max {\r\n> +               if r <= rune3Max || MaxRune < r {\r\n>                         return RuneError, 1, false\r\n>                 }\r\n>                 return r, 4, false\r\n> @@ -202,6 +202,9 @@\r\n>\r\n>  // DecodeRune unpacks the first UTF-8 encoding in p and returns the rune\r\n> and its width in bytes.\r\n>  // If the encoding is invalid, it returns (RuneError, 1), an impossible\r\n> result for correct UTF-8.\r\n> +// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is\r\n> +// out of range, or is not the shortest possible UTF-8 encoding for the\r\n> +// value. No other validation is performed.\r\n>  func DecodeRune(p []byte) (r rune, size int) {\r\n>         r, size, _ = decodeRuneInternal(p)\r\n>         return\r\n> @@ -209,6 +212,9 @@\r\n>\r\n>  // DecodeRuneInString is like DecodeRune but its input is a string.\r\n>  // If the encoding is invalid, it returns (RuneError, 1), an impossible\r\n> result for correct UTF-8.\r\n> +// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is\r\n> +// out of range, or is not the shortest possible UTF-8 encoding for the\r\n> +// value. No other validation is performed.\r\n>  func DecodeRuneInString(s string) (r rune, size int) {\r\n>         r, size, _ = decodeRuneInStringInternal(s)\r\n>         return\r\n> @@ -216,6 +222,9 @@\r\n>\r\n>  // DecodeLastRune unpacks the last UTF-8 encoding in p and returns the rune\r\n> and its width in bytes.\r\n>  // If the encoding is invalid, it returns (RuneError, 1), an impossible\r\n> result for correct UTF-8.\r\n> +// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is\r\n> +// out of range, or is not the shortest possible UTF-8 encoding for the\r\n> +// value. No other validation is performed.\r\n>  func DecodeLastRune(p []byte) (r rune, size int) {\r\n>         end := len(p)\r\n>         if end == 0 {\r\n> @@ -250,6 +259,9 @@\r\n>\r\n>  // DecodeLastRuneInString is like DecodeLastRune but its input is a string.\r\n>  // If the encoding is invalid, it returns (RuneError, 1), an impossible\r\n> result for correct UTF-8.\r\n> +// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is\r\n> +// out of range, or is not the shortest possible UTF-8 encoding for the\r\n> +// value. No other validation is performed.\r\n>  func DecodeLastRuneInString(s string) (r rune, size int) {\r\n>         end := len(s)\r\n>         if end == 0 {\r\n> Index: src/pkg/unicode/utf8/utf8_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/unicode/utf8/utf8_test.go\r\n> +++ b/src/pkg/unicode/utf8/utf8_test.go\r\n> @@ -311,6 +311,11 @@\r\n>         {string([]byte{66, 250}), false},\r\n>         {string([]byte{66, 250, 67}), false},\r\n>         {\"a\\uFFFDb\", true},\r\n> +       {string(\"\\xF7\\xBF\\xBF\\xBF\"), true },    // U+1FFFFF\r\n> +       {string(\"\\xFB\\xBF\\xBF\\xBF\\xBF\"), false },       // 0x3FFFFFF; out of\r\n> range\r\n> +       {string(\"\\xc0\\x80\"), false },   // U+0000 encoded in two bytes:\r\n> incorrect\r\n> +       // TODO {string(\"\\xed\\xa0\\x80\"), false },       // U+D800 low\r\n> surrogate\r\n> +       // TODO {string(\"\\xed\\xbf\\xbf\"), false },       // U+DBFFF high\r\n> surrogate\r\n>  }\r\n>\r\n>  func TestValid(t *testing.T) {\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-19 13:44:34.020840",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a9262e3456ff ***\n\nunicode/utf8: reject out-of-range runes.\nSurrogates are still admitted, but I have sent mail to golang-dev on that topic.\n\nFixes issue 3785.\n\nR=golang-dev, rogpeppe, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6398049",
			"disapproval": false,
			"date": "2012-07-19 18:58:17.357080",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6398049: unicode/utf8: reject out-of-range runes.",
	"created": "2012-07-16 23:09:29.846400",
	"patchsets": [
		1,
		3001,
		4003,
		7001,
		6003,
		13002
	],
	"modified": "2012-07-19 18:58:18.569220",
	"closed": true,
	"issue": 6398049
}