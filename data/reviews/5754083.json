{
	"description": "os, syscall: windows really isn't posix compliant, fix os.IsExist()",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"alex.brainman@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-12 06:03:56.781675",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 12, 2012 at 12:51 PM, <minux.ma@gmail.com> wrote:\n\n> On 2012/03/12 17:00:45, bradfitz wrote:\n>\n>> Again we have documentation duplicated in multiple files.  :-/\n>>\n> Oh, this is a concern to me too.\n>\n> Should I move all documentation to error.go, and make wrapper functions\n> in error.go calling the actual implementation in error_plan9.go,\n> error_posix.go\n> and error_windows.go??\n>\n> I really think we need a way to force inline of wrapper functions like\n> these.\n> (If the compiler can inline them, I will make this change without any\n> hesitation.)\n>\n\nNot worth worrying about now.  I'm just complaining.\n\nWe can also make a tool later to check that documentation stays in sync\nwhen duplicated.\n",
			"disapproval": false,
			"date": "2012-03-12 19:55:35.760507",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=90d7825be7c2 ***\n\nos, syscall: windows really isn't posix compliant, fix os.IsExist()\n\nR=golang-dev, rsc, bradfitz, alex.brainman\nCC=golang-dev\nhttp://codereview.appspot.com/5754083\n\nCommitter: Alex Brainman <alex.brainman@gmail.com>",
			"disapproval": false,
			"date": "2012-03-13 01:50:11.268888",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but please wait for Alex to okay it too.\n",
			"disapproval": false,
			"date": "2012-03-12 16:59:12.868181",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Again we have documentation duplicated in multiple files.  :-/\n\nOn Sun, Mar 11, 2012 at 11:03 PM, <minux.ma@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> os, syscall: windows really isn't posix compliant, fix os.IsExist()\n>\n> Please review this at http://codereview.appspot.com/**5754083/<http://codereview.appspot.com/5754083/>\n>\n> Affected files:\n>  M src/pkg/os/error_posix.go\n>  A src/pkg/os/error_windows.go\n>  M src/pkg/syscall/ztypes_**windows.go\n>\n>\n> Index: src/pkg/os/error_posix.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/error_posix.go\n> +++ b/src/pkg/os/error_posix.go\n> @@ -2,7 +2,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// +build darwin freebsd linux netbsd openbsd windows\n> +// +build darwin freebsd linux netbsd openbsd\n>\n>  package os\n>\n> Index: src/pkg/os/error_windows.go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/src/pkg/os/error_windows.go\n> @@ -0,0 +1,35 @@\n> +// Copyright 2012 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +package os\n> +\n> +import \"syscall\"\n> +\n> +// IsExist returns whether the error is known to report that a file\n> already exists.\n> +// It is satisfied by ErrExist as well as some syscall errors.\n> +func IsExist(err error) bool {\n> +       if pe, ok := err.(*PathError); ok {\n> +               err = pe.Err\n> +       }\n> +       return err == syscall.EEXIST || err ==\n> syscall.ERROR_ALREADY_EXISTS ||\n> +               err == syscall.ERROR_FILE_EXISTS || err == ErrExist\n> +}\n> +\n> +// IsNotExist returns whether the error is known to report that a file\n> does not exist.\n> +// It is satisfied by ErrNotExist as well as some syscall errors.\n> +func IsNotExist(err error) bool {\n> +       if pe, ok := err.(*PathError); ok {\n> +               err = pe.Err\n> +       }\n> +       return err == syscall.ENOENT || err == ErrNotExist\n> +}\n> +\n> +// IsPermission returns whether the error is known to report that\n> permission is denied.\n> +// It is satisfied by ErrPermission as well as some syscall errors.\n> +func IsPermission(err error) bool {\n> +       if pe, ok := err.(*PathError); ok {\n> +               err = pe.Err\n> +       }\n> +       return err == syscall.EACCES || err == syscall.EPERM || err ==\n> ErrPermission\n> +}\n> Index: src/pkg/syscall/ztypes_**windows.go\n> ==============================**==============================**=======\n> --- a/src/pkg/syscall/ztypes_**windows.go\n> +++ b/src/pkg/syscall/ztypes_**windows.go\n> @@ -10,11 +10,13 @@\n>        ERROR_PATH_NOT_FOUND      Errno = 3\n>        ERROR_ACCESS_DENIED       Errno = 5\n>        ERROR_NO_MORE_FILES       Errno = 18\n> +       ERROR_FILE_EXISTS         Errno = 80\n>        ERROR_BROKEN_PIPE         Errno = 109\n>        ERROR_BUFFER_OVERFLOW     Errno = 111\n>        ERROR_INSUFFICIENT_BUFFER Errno = 122\n>        ERROR_MOD_NOT_FOUND       Errno = 126\n>        ERROR_PROC_NOT_FOUND      Errno = 127\n> +       ERROR_ALREADY_EXISTS      Errno = 183\n>        ERROR_ENVVAR_NOT_FOUND    Errno = 203\n>        ERROR_OPERATION_ABORTED   Errno = 995\n>        ERROR_IO_PENDING          Errno = 997\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-12 17:00:45.331884",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/12 17:00:45, bradfitz wrote:\n> Again we have documentation duplicated in multiple files.  :-/\nOh, this is a concern to me too.\n\nShould I move all documentation to error.go, and make wrapper functions\nin error.go calling the actual implementation in error_plan9.go, error_posix.go\nand error_windows.go??\n\nI really think we need a way to force inline of wrapper functions like these.\n(If the compiler can inline them, I will make this change without any hesitation.)",
			"disapproval": false,
			"date": "2012-03-12 19:51:57.502792",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 13, 2012 at 3:55 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n>\n> We can also make a tool later to check that documentation stays in sync\n> when duplicated.\n>\nGood idea. I guess govet should check this sort of things in the future.\n(But this still looks\nsub-optimal to me...)\n\nI think we could just improve the gc compiler's pclntab implementation to\nsupport inlining broader\nranges of functions, so that we don't need to worry about documentation\nduplication again.\nOf course, until after Go 1.\n",
			"disapproval": false,
			"date": "2012-03-12 20:13:31.583782",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you.\n\nI will submit it now.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-13 01:49:28.924315",
			"approval": true
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5754083: os, syscall: windows really isn't posix compliant, fix ...",
	"created": "2012-03-12 05:46:28.291975",
	"patchsets": [
		1,
		2001,
		3,
		6001
	],
	"modified": "2012-03-13 05:28:59.277916",
	"closed": true,
	"issue": 5754083
}