{
	"description": "go.crypto/scrypt: add package",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, thanks!\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go\nFile scrypt/scrypt.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go#newcode22\nscrypt/scrypt.go:22: func blockCopy(dst, src []byte, n int) {\nI wonder that this function may be too short to justify its existence. Maybe just call copy() instead? Up to you.\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go#newcode80\nscrypt/scrypt.go:80: // N is a CPU/memory cost parameter, must be a power of two greater than 1.\ns/, /, which /\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go#newcode97\nscrypt/scrypt.go:97: return nil, errors.New(\"scrypt: parameters are too big\")\n\"scrypt: cost parameters too large\"\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go\nFile scrypt/scrypt_test.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode91\nscrypt/scrypt_test.go:91: for _, v := range good {\nfor i, v := range good {\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode94\nscrypt/scrypt_test.go:94: t.Errorf(\"got unexpected error: %s\", err)\nt.Errorf(\"%d: got unexpected error: %s\", i, err)\ncontinue\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode97\nscrypt/scrypt_test.go:97: t.Errorf(\"expected %x, got %x\", v.output, k)\nt.Errorf(\"%d: expected %x, got %x\", i, v.output, k)\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode100\nscrypt/scrypt_test.go:100: for _, v := range bad {\nfor i, v := range bad {\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode103\nscrypt/scrypt_test.go:103: t.Errorf(\"expected error, got nil\")\nt.Errorf(\"%d: expected error, got nil\", i)",
			"disapproval": false,
			"date": "2012-09-18 12:55:20.474630",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nleaving for agl",
			"disapproval": false,
			"date": "2012-09-18 15:41:21.081620",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ad8a96e038bb&repo=crypto ***\n\ngo.crypto/scrypt: add package\n\nR=golang-dev, agl, r\nCC=golang-dev\nhttp://codereview.appspot.com/6535043\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-09-18 20:59:59.402140",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-09-18 12:34:56.793110",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go\nFile scrypt/scrypt.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go#newcode53\nscrypt/scrypt.go:53: func integerify(b []byte, r int) uint64 {\nOn 2012/09/18 15:20:48, r wrote:\n> i don't mind this function; it captures some clumsy math. but i would like a\n> name change. the connection to the paper doesn't need to be slavish.\n\nDone. (integer)",
			"disapproval": false,
			"date": "2012-09-18 15:27:17.478740",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go\nFile scrypt/scrypt_test.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode91\nscrypt/scrypt_test.go:91: for _, v := range good {\nOn 2012/09/18 12:55:20, agl1 wrote:\n> for i, v := range good {\n\nDone.\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode94\nscrypt/scrypt_test.go:94: t.Errorf(\"got unexpected error: %s\", err)\nOn 2012/09/18 12:55:20, agl1 wrote:\n> t.Errorf(\"%d: got unexpected error: %s\", i, err)\n> continue\n\nDone.\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode97\nscrypt/scrypt_test.go:97: t.Errorf(\"expected %x, got %x\", v.output, k)\nOn 2012/09/18 12:55:20, agl1 wrote:\n> t.Errorf(\"%d: expected %x, got %x\", i, v.output, k)\n\nDone.\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode100\nscrypt/scrypt_test.go:100: for _, v := range bad {\nOn 2012/09/18 12:55:20, agl1 wrote:\n> for i, v := range bad {\n\nDone.\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt_test.go#newcode103\nscrypt/scrypt_test.go:103: t.Errorf(\"expected error, got nil\")\nOn 2012/09/18 12:55:20, agl1 wrote:\n> t.Errorf(\"%d: expected error, got nil\", i)\n\nDone.",
			"disapproval": false,
			"date": "2012-09-18 13:04:56.578260",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go\nFile scrypt/scrypt.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go#newcode53\nscrypt/scrypt.go:53: func integerify(b []byte, r int) uint64 {\ni don't mind this function; it captures some clumsy math. but i would like a name change. the connection to the paper doesn't need to be slavish.",
			"disapproval": false,
			"date": "2012-09-18 15:20:48.665010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You don't need math for MaxInt32. Just do the obvious adjustment:\r\n\r\nconst maxInt32 = int32(^uint32(0)>>1)\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-18 17:57:13.748600",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/18 17:51:57, agl1 wrote:\n> https://codereview.appspot.com/6535043/diff/10003/scrypt/scrypt.go\n> File scrypt/scrypt.go (right):\n> \n> https://codereview.appspot.com/6535043/diff/10003/scrypt/scrypt.go#newcode19\n> scrypt/scrypt.go:19: const maxInt = int(^uint(0) >> 1)\n> The size of uint is implementation specific, therefore the behaviour of this\n> package varies based on implementation.\n> \n> That seem unfortunate and I wonder whether we shouldn't import \"math\" and\n> s/maxInt/math.MaxInt32/.\n> \n> If you agree, I can make that change when landing.\n\nI specifically made it depend on the size of int, because this constant is used to decide how much memory we can allocate with make(). However, once we make int 64-bit, we can allocate much more memory (in theory), so scrypt will continue working (and accepting higher memory cost) without changing the code.",
			"disapproval": false,
			"date": "2012-09-18 19:55:55.400620",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/18 19:55:55, dchest wrote:\n> On 2012/09/18 17:51:57, agl1 wrote:\n> > https://codereview.appspot.com/6535043/diff/10003/scrypt/scrypt.go\n> > File scrypt/scrypt.go (right):\n> > \n> > https://codereview.appspot.com/6535043/diff/10003/scrypt/scrypt.go#newcode19\n> > scrypt/scrypt.go:19: const maxInt = int(^uint(0) >> 1)\n> > The size of uint is implementation specific, therefore the behaviour of this\n> > package varies based on implementation.\n> > \n> > That seem unfortunate and I wonder whether we shouldn't import \"math\" and\n> > s/maxInt/math.MaxInt32/.\n> > \n> > If you agree, I can make that change when landing.\n> \n> I specifically made it depend on the size of int, because this constant is used\n> to decide how much memory we can allocate with make(). However, once we make int\n> 64-bit, we can allocate much more memory (in theory), so scrypt will continue\n> working (and accepting higher memory cost) without changing the code.\n\nTo elaborate, the caller must ensure that the maximum parameter for N is acceptable for their hardware setup anyway (that is, if they have only 512 MB of RAM available, they can't pass N=1048576, because it will try to allocate 1 GiB), just like users of PBKDF2 or bcrypt must not call them with the cost too high for their CPUs to process in reasonable time. I see no reason to limit scrypt to 2 GiB if the hardware and Go will allow for more in the future.",
			"disapproval": false,
			"date": "2012-09-18 20:07:23.604250",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6535043/diff/10003/scrypt/scrypt.go\nFile scrypt/scrypt.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/10003/scrypt/scrypt.go#newcode19\nscrypt/scrypt.go:19: const maxInt = int(^uint(0) >> 1)\nThe size of uint is implementation specific, therefore the behaviour of this package varies based on implementation.\n\nThat seem unfortunate and I wonder whether we shouldn't import \"math\" and s/maxInt/math.MaxInt32/.\n\nIf you agree, I can make that change when landing.",
			"disapproval": false,
			"date": "2012-09-18 17:51:57.251030",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go\nFile scrypt/scrypt.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go#newcode7\nscrypt/scrypt.go:7: // Functions\".\nOn 2012/09/18 14:50:41, r wrote:\n> can you link or at least provide a more detailed reference?\n> looks like this works:\n> http://www.bsdcan.org/2009/schedule/attachments/87_scrypt.pdf\n> maybe there's a more definitive location\n\nDone.\n\nhttps://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go#newcode53\nscrypt/scrypt.go:53: func integerify(b []byte, r int) uint64 {\nOn 2012/09/18 14:50:41, r wrote:\n> ugly word. \"integer\" is fine - think of it like a conversion.\n> another choice would be toUint64\n\nI tried to follow function names specified in paper.\n\nAlternatively, I can just get rid of this function entirely, since \"binary.LittleEndian.Uint64\" already says what it does.",
			"disapproval": false,
			"date": "2012-09-18 15:03:35.967060",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go\nFile scrypt/scrypt.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go#newcode22\nscrypt/scrypt.go:22: func blockCopy(dst, src []byte, n int) {\nOn 2012/09/18 12:55:20, agl1 wrote:\n> I wonder that this function may be too short to justify its existence. Maybe\n> just call copy() instead? Up to you.\n\nI tried that, but the code becomes uglier: we need to limit the second slice, so instead of:\n\n   blockCopy(b[(i+r)*64:], y[(i*2+1)*64:], 64)\n\nwe get:\n\n  copy(b[(i+r)*64:], y[(i*2+1)*64:(i*2+1)*64 + 64])\n\nPlus, it indicates that scrypt works in \"blocks\", and blockCopy and blockXOR are related.\n\nThe compiler inlines this function anyway.\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go#newcode80\nscrypt/scrypt.go:80: // N is a CPU/memory cost parameter, must be a power of two greater than 1.\nOn 2012/09/18 12:55:20, agl1 wrote:\n> s/, /, which /\n\nDone.\n\nhttps://codereview.appspot.com/6535043/diff/4001/scrypt/scrypt.go#newcode97\nscrypt/scrypt.go:97: return nil, errors.New(\"scrypt: parameters are too big\")\nOn 2012/09/18 12:55:20, agl1 wrote:\n> \"scrypt: cost parameters too large\"\n\nDone.",
			"disapproval": false,
			"date": "2012-09-18 13:03:12.477570",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go\nFile scrypt/scrypt.go (right):\n\nhttps://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go#newcode7\nscrypt/scrypt.go:7: // Functions\".\ncan you link or at least provide a more detailed reference?\nlooks like this works: http://www.bsdcan.org/2009/schedule/attachments/87_scrypt.pdf\nmaybe there's a more definitive location\n\nhttps://codereview.appspot.com/6535043/diff/9002/scrypt/scrypt.go#newcode53\nscrypt/scrypt.go:53: func integerify(b []byte, r int) uint64 {\nugly word. \"integer\" is fine - think of it like a conversion.\nanother choice would be toUint64",
			"disapproval": false,
			"date": "2012-09-18 14:50:41.538880",
			"approval": false
		}
	],
	"owner_email": "dchest@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "dchest",
	"subject": "code review 6535043: go.crypto/scrypt: add package",
	"created": "2012-09-18 12:30:28.726560",
	"patchsets": [
		1,
		2001,
		4001,
		5004,
		9002,
		4002,
		10003
	],
	"modified": "2012-09-19 06:12:58.028360",
	"closed": true,
	"issue": 6535043
}