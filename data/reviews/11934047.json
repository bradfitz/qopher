{
	"description": "go.tools/go/types: added missing implicit conversion checks",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adonovan@google.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-27 00:21:56.142070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-27 01:16:18.838400",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0f885b62815f&repo=tools ***\n\ngo.tools/go/types: added missing implicit conversion checks\n\nR=adonovan, r\nCC=golang-dev\nhttps://codereview.appspot.com/11934047",
			"disapproval": false,
			"date": "2013-07-27 01:21:17.554670",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/27 01:16:18, r wrote:\n> LGTM\n\nThanks. In the meantime I have also added corresponding tests.",
			"disapproval": false,
			"date": "2013-07-27 01:21:38.379130",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11934047/diff/13005/go/types/expr.go\nFile go/types/expr.go (right):\n\nhttps://codereview.appspot.com/11934047/diff/13005/go/types/expr.go#newcode160\ngo/types/expr.go:160: f, _ := exact.Float64Val(x)\nYou need to check the second (exact) result; if it's false, then the first result is undefined---which means it could be zero or another legal float32 value, meaning you'll return the wrong answer.\n\nhttps://codereview.appspot.com/11934047/diff/13005/go/types/expr.go#newcode168\ngo/types/expr.go:168: f, _ := exact.Float64Val(x)\nDitto.",
			"disapproval": false,
			"date": "2013-07-27 01:46:58.672220",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11934047/diff/13005/go/types/expr.go\nFile go/types/expr.go (right):\n\nhttps://codereview.appspot.com/11934047/diff/13005/go/types/expr.go#newcode160\ngo/types/expr.go:160: f, _ := exact.Float64Val(x)\nOn 2013/07/27 01:46:58, adonovan wrote:\n> You need to check the second (exact) result; if it's false, then the first\n> result is undefined---which means it could be zero or another legal float32\n> value, meaning you'll return the wrong answer.\n\nOk. The documentation for Float64Val is not clear: So exact doesn't mean that the floating-point value was representable w/o any loss of precision?",
			"disapproval": false,
			"date": "2013-07-27 03:09:20.923530",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/27 03:09:20, gri wrote:\n> https://codereview.appspot.com/11934047/diff/13005/go/types/expr.go\n> File go/types/expr.go (right):\n> \n> https://codereview.appspot.com/11934047/diff/13005/go/types/expr.go#newcode160\n> go/types/expr.go:160: f, _ := exact.Float64Val(x)\n> On 2013/07/27 01:46:58, adonovan wrote:\n> > You need to check the second (exact) result; if it's false, then the first\n> > result is undefined---which means it could be zero or another legal float32\n> > value, meaning you'll return the wrong answer.\n> \n> Ok. The documentation for Float64Val is not clear: So exact doesn't mean that\n> the floating-point value was representable w/o any loss of precision?\n\nAfter reading the big.Rat.Float64 code I think this is correct: Float64 internally also uses math.IsInf - it sets exact to false (if it isn't already), if the number didn't fit. So if the result !IsInf, then the number did fit (potentially with loss of precision, i.e., exact may be false, but that's ok here).",
			"disapproval": false,
			"date": "2013-07-27 05:49:10.370200",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/27 05:49:10, gri wrote:\n> On 2013/07/27 03:09:20, gri wrote:\n> > https://codereview.appspot.com/11934047/diff/13005/go/types/expr.go\n> > File go/types/expr.go (right):\n> > \n> > https://codereview.appspot.com/11934047/diff/13005/go/types/expr.go#newcode160\n> > go/types/expr.go:160: f, _ := exact.Float64Val(x)\n> > On 2013/07/27 01:46:58, adonovan wrote:\n> > > You need to check the second (exact) result; if it's false, then the first\n> > > result is undefined---which means it could be zero or another legal float32\n> > > value, meaning you'll return the wrong answer.\n> > \n> > Ok. The documentation for Float64Val is not clear: So exact doesn't mean that\n> > the floating-point value was representable w/o any loss of precision?\n> \n> After reading the big.Rat.Float64 code I think this is correct: Float64\n> internally also uses math.IsInf - it sets exact to false (if it isn't already),\n> if the number didn't fit. So if the result !IsInf, then the number did fit\n> (potentially with loss of precision, i.e., exact may be false, but that's ok\n> here).\n\nI think the implementations of the three relevant functions are correct, but my point is that the spec of exact.Float64Val doesn't entitle you to assume anything about the float64 value if !exact.  Perhaps you should add a stronger postcondition to that function.",
			"disapproval": false,
			"date": "2013-07-29 19:14:42.405870",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/29 19:14:42, adonovan wrote:\n> On 2013/07/27 05:49:10, gri wrote:\n> > On 2013/07/27 03:09:20, gri wrote:\n> > > https://codereview.appspot.com/11934047/diff/13005/go/types/expr.go\n> > > File go/types/expr.go (right):\n> > > \n> > >\n> https://codereview.appspot.com/11934047/diff/13005/go/types/expr.go#newcode160\n> > > go/types/expr.go:160: f, _ := exact.Float64Val(x)\n> > > On 2013/07/27 01:46:58, adonovan wrote:\n> > > > You need to check the second (exact) result; if it's false, then the first\n> > > > result is undefined---which means it could be zero or another legal\n> float32\n> > > > value, meaning you'll return the wrong answer.\n> > > \n> > > Ok. The documentation for Float64Val is not clear: So exact doesn't mean\n> that\n> > > the floating-point value was representable w/o any loss of precision?\n> > \n> > After reading the big.Rat.Float64 code I think this is correct: Float64\n> > internally also uses math.IsInf - it sets exact to false (if it isn't\n> already),\n> > if the number didn't fit. So if the result !IsInf, then the number did fit\n> > (potentially with loss of precision, i.e., exact may be false, but that's ok\n> > here).\n> \n> I think the implementations of the three relevant functions are correct, but my\n> point is that the spec of exact.Float64Val doesn't entitle you to assume\n> anything about the float64 value if !exact.  Perhaps you should add a stronger\n> postcondition to that function.",
			"disapproval": false,
			"date": "2013-07-29 19:15:25.329020",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n[Premature send,  x 2.  grrr.]\r\n\r\nNever mind... I was reading the spec of the wrong function: the exact.Value\r\ninteger accessors say \"If the result is not exact, its value is undefined\",\r\nbut for floats you always get the nearest.\r\n",
			"disapproval": false,
			"date": "2013-07-29 19:17:21.288420",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11934047: go.tools/go/types: added missing implicit conversion checks",
	"created": "2013-07-27 00:18:54.305910",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		12001,
		13005
	],
	"modified": "2013-07-29 19:17:21.403790",
	"closed": true,
	"issue": 11934047
}