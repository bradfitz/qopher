{
	"description": "6cov: working again on amd64\n\nget8() returns a pc that points after the syscall made by runtime.exit,\ndo not attempt to uncover() after runtime.exit has been called.\nFixes Issue 1319.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Let me take care of this.  I have a working cov.\nIt required a couple changes to libmach.  On the\nplus side it now works on 386 and amd64 (at least\non Linux).\n\nI'll send a CL for review in a little while after\nI remove all my debugging code.\n\n  Anthony\n",
			"disapproval": false,
			"date": "2011-06-23 00:15:40.709255",
			"approval": false
		},
		{
			"sender": "sven@engelhardt.to",
			"recipients": [
				"sven@engelhardt.to",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> But more substantially, I'm confused.\n> If the process has exited, how can there be another\n> iteration?  Shouldn't the get8 and put8 be failing?\n\nthe final pc is runtime.exit+10 (after pc--). Not quite sure what this means, as that would be the 2nd byte of the syscall instruction, but get8/put8 dont fail for me).",
			"disapproval": false,
			"date": "2011-06-22 23:57:23.866553",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Anthony Martin <ality@pbrane.org> once said:\n> Code that uses cgo will fail because 6cov doesn't\n> (and can't) cover dynamic sections with breakpoints.\n> I should probably just change it to notice when the\n> PC is outside the text section and act accordingly.\n\nScratch that.  It should work fine as long as the\ndynamic libraries don't clone or fork.  I was mixing\nup this with another bug I was seeing last night.\n\nI should hack my email client to refuse sending\nout mails when I haven't had enough sleep.\n\nCheers,\n  Anthony\n \n",
			"disapproval": false,
			"date": "2011-06-23 14:17:03.568075",
			"approval": false
		},
		{
			"sender": "sven@engelhardt.to",
			"recipients": [
				"sven@engelhardt.to",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-22 23:22:22.013337",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"sven@engelhardt.to",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4662042/diff/4001/src/cmd/cov/main.c\nFile src/cmd/cov/main.c (right):\n\nhttp://codereview.appspot.com/4662042/diff/4001/src/cmd/cov/main.c#newcode193\nsrc/cmd/cov/main.c:193: if(pc <= s.value+14) {\nIf you say so.  I'd have to count.\n\nhttp://codereview.appspot.com/4662042/diff/4001/src/cmd/cov/main.c#newcode322\nsrc/cmd/cov/main.c:322: if (strcmp(lastfn, \"runtime.exit\") == 0) {\nPlease make this code look like the code around it.\nNo space after if.\nUse tabs.\n\nhttp://codereview.appspot.com/4662042/diff/4001/src/cmd/cov/main.c#newcode338\nsrc/cmd/cov/main.c:338: if(substring == nil || strstr(buf, substring) || strstr(s.name, substring) || (strcmp(s.name, \"runtime.exit\") == 0))\nPlease make this code look like the code around it.\nNo unnecessary paren around ==.\n\nhttp://codereview.appspot.com/4662042/diff/4001/src/cmd/cov/main.c#newcode430\nsrc/cmd/cov/main.c:430: if ( !exited ) {\nPlease make this code look like the code around it.\nMany fewer spaces.\n\nBut more substantially, I'm confused.\nIf the process has exited, how can there be another\niteration?  Shouldn't the get8 and put8 be failing?",
			"disapproval": false,
			"date": "2011-06-22 23:30:29.234457",
			"approval": false
		},
		{
			"sender": "sven@engelhardt.to",
			"recipients": [
				"sven@engelhardt.to",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-22 23:57:57.005450",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I'll give this a try on my Linux box later.\nIf you have one handy please compile\n\npackage main\nfunc main() {}\n\nand then see what\n\nstrace -e ptrace -f 6cov 6.out\n\nprints\n",
			"disapproval": false,
			"date": "2011-06-23 00:08:17.837678",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> once said:\n> Thanks.  I think Anthony's patch fixes 6cov!\n\nIt fixes it for most code in the tree but not all.\n\nCode that uses cgo will fail because 6cov doesn't\n(and can't) cover dynamic sections with breakpoints.\nI should probably just change it to notice when the\nPC is outside the text section and act accordingly.\n\nAlso, code that uses goroutines (or anything that\ncalls clone or fork) will fail because we only step\nthrough the parent thread.  This would not be too\ndifficult to fix: 6prof already does it.\n\n  Anthony\n",
			"disapproval": false,
			"date": "2011-06-23 14:01:44.374343",
			"approval": false
		},
		{
			"sender": "sven@engelhardt.to",
			"recipients": [
				"sven@engelhardt.to",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "root@gallifrey:/home/sven/gd/tests# strace -e ptrace -f ../bin/6cov 6.out\nProcess 2191 attached\nProcess 2190 suspended\n[pid  2191] ptrace(PTRACE_TRACEME, 0, 0, 0) = -1 EPERM (Operation not permitted)\n../bin/6cov: ctlproc hang: Operation not permitted\nProcess 2190 resumed\nProcess 2191 detached\n--- SIGCHLD (Child exited) @ 0 (0) ---\nwaitpid 2191: status=-0x1 not stopped\n../bin/6cov: attach 2191 6.out: Success",
			"disapproval": false,
			"date": "2011-06-23 10:26:43.770918",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks.  I think Anthony's patch fixes 6cov!\n\nOn Thu, Jun 23, 2011 at 06:26,  <sven@engelhardt.to> wrote:\n> root@gallifrey:/home/sven/gd/tests# strace -e ptrace -f ../bin/6cov\n> 6.out\n> Process 2191 attached\n> Process 2190 suspended\n> [pid \u00a02191] ptrace(PTRACE_TRACEME, 0, 0, 0) = -1 EPERM (Operation not\n> permitted)\n> ../bin/6cov: ctlproc hang: Operation not permitted\n> Process 2190 resumed\n> Process 2191 detached\n> --- SIGCHLD (Child exited) @ 0 (0) ---\n> waitpid 2191: status=-0x1 not stopped\n> ../bin/6cov: attach 2191 6.out: Success\n>\n>\n> http://codereview.appspot.com/4662042/\n>\n",
			"disapproval": false,
			"date": "2011-06-23 13:33:14.973001",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"sven@engelhardt.to",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:51:45.938512",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"sven@engelhardt.to",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 07:17:51.323870",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"sven@engelhardt.to",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:28:41.676010",
			"approval": false
		}
	],
	"owner_email": "sven@engelhardt.to",
	"private": false,
	"base_url": "",
	"owner": "fiber",
	"subject": "code review 4662042: 6cov: working again on amd64",
	"created": "2011-06-22 23:21:29.237766",
	"patchsets": [
		1,
		2001,
		4001,
		1003
	],
	"modified": "2013-07-20 21:28:41.783470",
	"closed": false,
	"issue": 4662042
}