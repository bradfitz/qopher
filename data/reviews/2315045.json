{
	"description": "\tbig: add random number generation\n\n        Adds func (z *Int) RandIntn(src rand.Source,n *Int) *Int",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@google.com",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "To send us the CL again use\n\nhg gofmt\nhg mail 2315045\n\nso that we get email saying it's waiting.\n(I just happened to find it in my to-do list on the web.)\n\nThanks.\nRuss\n\nhttp://codereview.appspot.com/2315045/diff/1/src/pkg/big/Makefile\nFile src/pkg/big/Makefile (right):\n\nhttp://codereview.appspot.com/2315045/diff/1/src/pkg/big/Makefile#newcode14\nsrc/pkg/big/Makefile:14: rand.go\\\nmove up one line so the list remains sorted\n\nhttp://codereview.appspot.com/2315045/diff/1/src/pkg/big/rand.go\nFile src/pkg/big/rand.go (right):\n\nhttp://codereview.appspot.com/2315045/diff/1/src/pkg/big/rand.go#newcode5\nsrc/pkg/big/rand.go:5: //This file implements random multi-precision integer generation\ncan delete this comment.\nin fact, can probably just move the code to int.go.\n\nhttp://codereview.appspot.com/2315045/diff/1/src/pkg/big/rand.go#newcode24\nsrc/pkg/big/rand.go:24: func (r *Rand) Intn(n *Int) (*Int) {\nIt's probably not worth having the Rand type for a single method.\n\nInstead, I would add the method to Int itself.\n\n// Rand sets z to a pseudo-random number in [0,n) and returns z.\nfunc (z *Int) Rand(rand *rand.Rand, n *Int) *Int {\n...\n}\n\nThen you should be able to wrap random instead of\nmaking a new random2.",
			"disapproval": false,
			"date": "2010-10-12 14:04:28.258335",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com, gri),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-10-12 18:00:28.424971",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Sorry, I should have added that you now need to run \"hg change 2315045\"\nand edit the list of files.  You'll want to add int.go (assuming that's where\nyou put the changes) and delete the Makefile and rand.go.  Write out the\nchange and then run hg mail again to re-upload and mail.\nhttp://golang.org/doc/contribute.html has more about the CL process.\n\nThen\n\n   hg revert rand.go Makefile\n   rm rand.go\n\n(just to clean up your client).\n\nRuss\n",
			"disapproval": false,
			"date": "2010-10-12 18:34:14.749041",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Sorry, I misunderstood your mail. I replied to one of your comments. If you still don't agree with the idea of a rand.Rand I will implement it your way. I will send a revised version anyway since that random2() thing clearly wasn't a good idea.\n\nKind regards,\nFlorian\n\nhttp://codereview.appspot.com/2315045/diff/1/src/pkg/big/rand.go\nFile src/pkg/big/rand.go (right):\n\nhttp://codereview.appspot.com/2315045/diff/1/src/pkg/big/rand.go#newcode24\nsrc/pkg/big/rand.go:24: func (r *Rand) Intn(n *Int) (*Int) {\nOn 2010/10/12 14:04:28, rsc1 wrote:\n> It's probably not worth having the Rand type for a single method.\n> \n> Instead, I would add the method to Int itself.\n> \n> // Rand sets z to a pseudo-random number in [0,n) and returns z.\n> func (z *Int) Rand(rand *rand.Rand, n *Int) *Int {\n> ...\n> }\n> \nI agree that its probably not worth having this type for one method, but I thought that there might be a demand for other distributions (Exponential distribution/Geometric distribution) or some methods returning rational numbers. And a Rand.ProbablyPrime(...) method could be implemented for those who want to use their own source of numbers.\n\nAnd I would rather use a rand.Source than a rand.Rand to allow people to use their own sources without importing the rand package and wrapping their source. Even if we drop the big.Rand type (func (z *Int) Rand(rand rand.Source, n *Int) *Int {...}). A rand.Rand can be used either way since rand.Rand implements rand.Source (doesn't it?).\n\n> Then you should be able to wrap random instead of\n> making a new random2.\n\nSorry, I should have done that anyway. It occured to me that maybe nat.random(...) should use a rand.Source directly instead of rand.Rand, but I now realize that this should be discussed seperately from this issue.",
			"disapproval": false,
			"date": "2010-10-16 23:35:27.060320",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "In practice, every bignum library I know of only gives you\nthe \"random integer from 0 to n\" primitive.  The others are\nfar less common, and I don't believe it's worth all the complexity\nof copying all of package rand into package big.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-10-17 14:59:18.855232",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "In fact it might make more sense to avoid rand entirely\nand make the function take an io.Reader that returns\nrandom bytes.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-10-17 15:00:55.059567",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/10/17 14:59:18, rsc wrote:\n> In practice, every bignum library I know of only gives you\n> the \"random integer from 0 to n\" primitive.  The others are\n> far less common, and I don't believe it's worth all the complexity\n> of copying all of package rand into package big.\n> \n> Russ\n\nI don't think it's that complex to add one type and 3 methods (New(), Seed(), Intn()), but I will send a revised version only adding func (z *Int) RandIntn(rand rand.Source, n *Int).\n\nFlorian",
			"disapproval": false,
			"date": "2010-10-17 16:48:31.924010",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/10/17 15:00:55, rsc wrote:\n> In fact it might make more sense to avoid rand entirely\n> and make the function take an io.Reader that returns\n> random bytes.\n> \n> Russ\n\nWouldn't that require some additional methods/functions/types somewhere else (rand?), providing this writer, to be usable. Or am I missing something that already exists.\nIf we use rand.Source instead of rand.Rand the user can avoid rand by supplieing his own source.\n\nFlorian",
			"disapproval": false,
			"date": "2010-10-17 17:03:19.168890",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com, gri),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-10-17 21:47:10.651242",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks pretty good.\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go\nFile src/pkg/big/int.go (right):\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go#newcode10\nsrc/pkg/big/int.go:10: import \"rand\"\nfactor imports\n\nimport (\n    \"fmt\"\n    \"rand\"\n)\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go#newcode548\nsrc/pkg/big/int.go:548: // Intn returns, as an *Int, a non-negative pseudo-random number in [0,n).\ns/Intn/Rand/\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go#newcode549\nsrc/pkg/big/int.go:549: func (z *Int) RandIntn(src rand.Source, n *Int) *Int {\ns/RandIntn/Rand/\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go#newcode550\nsrc/pkg/big/int.go:550: z.neg=false\nhg gofmt; hg upload\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go#newcode555\nsrc/pkg/big/int.go:555: z.abs = z.abs.random(rand.New(src), n.abs, n.abs.bitLen())\nThe caller can call rand.New.  That's why I suggested\npassing *rand.Rand.  A caller that needs more than one\nrandom number can then make a single call to rand.New\ninstead of one per call.",
			"disapproval": false,
			"date": "2010-10-18 15:39:01.722998",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "It looks like you still need to complete the CLA\nas described at http://golang.org/doc/contribute.html#copyright .\n\nPlease do so.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2010-10-18 15:39:52.146895",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "I will send a revised (and formatted) version as soon as I got an answer if I should deal with the rand.Rand vs. rand.Source issue in random now or later.\n\nThe CLA should be signed now.\n\nFlorian\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go\nFile src/pkg/big/int.go (right):\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go#newcode550\nsrc/pkg/big/int.go:550: z.neg=false\nOn 2010/10/18 15:39:01, rsc1 wrote:\n> hg gofmt; hg upload\n\nsorry forgot that one, should have been more carefully\n\nhttp://codereview.appspot.com/2315045/diff/16001/src/pkg/big/int.go#newcode555\nsrc/pkg/big/int.go:555: z.abs = z.abs.random(rand.New(src), n.abs, n.abs.bitLen())\nOn 2010/10/18 15:39:01, rsc1 wrote:\n> The caller can call rand.New.  That's why I suggested\n> passing *rand.Rand.  A caller that needs more than one\n> random number can then make a single call to rand.New\n> instead of one per call.\n\nI would prefer to have the choice to pass a *rand.Rand or anything else implementing rand.Source. To prevent calling rand.New every time a number is generated it would be sufficient to change random to take any rand.Source instead of *rand.Rand. which is no problem (take look at random2 in the first Patchset for an implementation). The changes to probablyPrime are simple. I don't really like the Idea of constraining or complicating the usage of high level functions because of implementation details which can be resolved.\nShell I make the changes to random now or in a different commit after this one passed the revision process.",
			"disapproval": false,
			"date": "2010-10-18 16:09:27.592322",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please make it take a *rand.Rand for now.\n\nThe next change, I think, will be to make it\ntake an io.Reader that is a source of random bytes,\nlike crypto/rand's Reader.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-10-18 16:10:29.461958",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com, gri),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-10-18 16:24:34.394141",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/2315045/diff/25001/src/pkg/big/int.go\nFile src/pkg/big/int.go (right):\n\nhttp://codereview.appspot.com/2315045/diff/25001/src/pkg/big/int.go#newcode550\nsrc/pkg/big/int.go:550: // Rand returns, as an *Int, a non-negative pseudo-random number in [0,n).\nSorry for not noticing this before, but this comment is from package rand\nand doesn't fit the pattern of comments for methods on Int.  It should say\n\n// Rand sets z to a pseudo-random number in [0, n) and returns z.\n\nnon-negative is implied by [0,n), and *Int is explicitly stated in the function type.",
			"disapproval": false,
			"date": "2010-10-18 16:31:27.686309",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com, gri),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-10-18 16:46:10.063674",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"f1@uekermann-online.de",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as 721e204b1c38 ***\n\nbig: add random number generation\n\nAdds func (z *Int) RandIntn(src rand.Source,n *Int) *Int\n\nR=rsc\nCC=golang-dev, gri\nhttp://codereview.appspot.com/2315045\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2010-10-18 18:09:23.790612",
			"approval": false
		}
	],
	"owner_email": "f1@uekermann-online.de",
	"private": false,
	"base_url": "",
	"owner": "Florian Uekermann",
	"subject": "code review 2315045: \tbig: add random number generation",
	"created": "2010-10-08 19:15:40.736505",
	"patchsets": [
		1,
		5001,
		16001,
		25001,
		14002
	],
	"modified": "2010-10-18 18:09:23.790612",
	"closed": false,
	"issue": 2315045
}