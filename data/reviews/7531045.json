{
	"description": "cmd/vet: add assembly checker\n\nFixes issue 5036.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/test_asm.go\nFile src/cmd/vet/test_asm.go (right):\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/test_asm.go#newcode24\nsrc/cmd/vet/test_asm.go:24: func returnnamed(x byte) (r1 int, r2 int16, r3 string, r4 byte)\nOn 2013/03/22 17:00:21, r wrote:\n> there are no methods here. i think you need to test a method (because i don't\n> think the code works for them)\n\nIt is not possible to implement methods in assembly.\n\nThe notation TEXT \u00b7foo(SB) matches func foo here. The regexp looking for TEXT lines has the \u00b7 in that case.",
			"disapproval": false,
			"date": "2013-03-22 17:27:25.344460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go\nFile src/cmd/vet/asmdecl.go (right):\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode79\nsrc/cmd/vet/asmdecl.go:79: func hasSuffix(pkg *Package, suffix string) bool {\nOn 2013/03/22 18:37:59, r wrote:\n> move this to main.go and make it a method of Package. it might be useful to\n> others.\n\nDone.\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode158\nsrc/cmd/vet/asmdecl.go:158: warnf(\"wrong argument size %d; expected $...-%d\", size, fn.size)\nOn 2013/03/22 18:37:59, r wrote:\n> should this be a warn or an error? it's bad.\n\nThey're all bad. In vet error means \"print and exit immediately\". It's not that bad.\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode163\nsrc/cmd/vet/asmdecl.go:163: // function, but not an exported one, so stop checking\nOn 2013/03/22 18:37:59, r wrote:\n> why is export relevant to whether we check?\n\nunfortunate wording. changed to\n\n// function, but not visible from Go (didn't match asmTEXT), so stop checking\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode450\nsrc/cmd/vet/asmdecl.go:450: if fn.arch.name != \"arm\" {\nOn 2013/03/22 18:37:59, r wrote:\n> i'd prefer you wrote what it is rather than what it isn't - safer that way\n\nDone.",
			"disapproval": false,
			"date": "2013-03-22 19:07:07.041890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-22 16:46:28.260470",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i don't see the code to associated a.b with a\u00b7b in the assembler.\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go\nFile src/cmd/vet/asmdecl.go (right):\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go#newcode21\nsrc/cmd/vet/asmdecl.go:21: // These special kinds are not valid sizes.\nweird? it sounds like you're introducing a type but it's just a convention and is unrelated to the const decl following. it's just a naming convention used far from here\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go#newcode48\nsrc/cmd/vet/asmdecl.go:48: kind  int\nhere it is!\n(is it worth making it a type?)\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go#newcode85\nsrc/cmd/vet/asmdecl.go:85: goto HaveAsm\nyou can do this without a goto easily enough. please don't add one to a program that doesn't have one already\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/test_asm.go\nFile src/cmd/vet/test_asm.go (right):\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/test_asm.go#newcode24\nsrc/cmd/vet/test_asm.go:24: func returnnamed(x byte) (r1 int, r2 int16, r3 string, r4 byte)\nthere are no methods here. i think you need to test a method (because i don't think the code works for them)",
			"disapproval": false,
			"date": "2013-03-22 17:00:21.327240",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go\nFile src/cmd/vet/asmdecl.go (right):\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go#newcode21\nsrc/cmd/vet/asmdecl.go:21: // These special kinds are not valid sizes.\nOn 2013/03/22 17:00:21, r wrote:\n> weird? it sounds like you're introducing a type but it's just a convention and\n> is unrelated to the const decl following. it's just a naming convention used far\n> from here\n\nDone.\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go#newcode48\nsrc/cmd/vet/asmdecl.go:48: kind  int\nOn 2013/03/22 17:00:21, r wrote:\n> here it is!\n> (is it worth making it a type?)\n\nDone.\n\nhttps://codereview.appspot.com/7531045/diff/5001/src/cmd/vet/asmdecl.go#newcode85\nsrc/cmd/vet/asmdecl.go:85: goto HaveAsm\nOn 2013/03/22 17:00:21, r wrote:\n> you can do this without a goto easily enough. please don't add one to a program\n> that doesn't have one already\n\nDone.",
			"disapproval": false,
			"date": "2013-03-22 17:26:38.699200",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM although i suspect this will evolve some.\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go\nFile src/cmd/vet/asmdecl.go (right):\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode79\nsrc/cmd/vet/asmdecl.go:79: func hasSuffix(pkg *Package, suffix string) bool {\nmove this to main.go and make it a method of Package. it might be useful to others.\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode158\nsrc/cmd/vet/asmdecl.go:158: warnf(\"wrong argument size %d; expected $...-%d\", size, fn.size)\nshould this be a warn or an error? it's bad.\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode163\nsrc/cmd/vet/asmdecl.go:163: // function, but not an exported one, so stop checking\nwhy is export relevant to whether we check?\n\nhttps://codereview.appspot.com/7531045/diff/11001/src/cmd/vet/asmdecl.go#newcode450\nsrc/cmd/vet/asmdecl.go:450: if fn.arch.name != \"arm\" {\ni'd prefer you wrote what it is rather than what it isn't - safer that way",
			"disapproval": false,
			"date": "2013-03-22 18:37:59.716750",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e0a30ff5c961 ***\n\ncmd/vet: add assembly checker\n\nFixes issue 5036.\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7531045",
			"disapproval": false,
			"date": "2013-03-22 19:14:47.756490",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7531045: cmd/vet: add assembly checker",
	"created": "2013-03-22 16:40:15.273080",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		1002
	],
	"modified": "2013-03-22 19:14:48.799580",
	"closed": true,
	"issue": 7531045
}