{
	"description": "runtime: distinct panic message for call of nil func value",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-01-10 19:27:43.425760",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Tue, Jan 10, 2012 at 11:27 AM,  <rsc@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> runtime: distinct panic message for call of nil func value\n>\n> Please review this at http://codereview.appspot.com/5531062/\n>\n> Affected files:\n> \u00a0M src/pkg/runtime/thread_darwin.c\n> \u00a0M src/pkg/runtime/thread_freebsd.c\n> \u00a0M src/pkg/runtime/thread_linux.c\n> \u00a0M src/pkg/runtime/thread_netbsd.c\n> \u00a0M src/pkg/runtime/thread_openbsd.c\n> \u00a0M src/pkg/runtime/thread_windows.c\n>\n>\n> Index: src/pkg/runtime/thread_darwin.c\n> ===================================================================\n> --- a/src/pkg/runtime/thread_darwin.c\n> +++ b/src/pkg/runtime/thread_darwin.c\n> @@ -382,13 +382,19 @@\n> \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0switch(g->sig) {\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGBUS:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGSEGV:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGFPE:\n> Index: src/pkg/runtime/thread_freebsd.c\n> ===================================================================\n> --- a/src/pkg/runtime/thread_freebsd.c\n> +++ b/src/pkg/runtime/thread_freebsd.c\n> @@ -128,13 +128,19 @@\n> \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0switch(g->sig) {\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGBUS:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGSEGV:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGFPE:\n> Index: src/pkg/runtime/thread_linux.c\n> ===================================================================\n> --- a/src/pkg/runtime/thread_linux.c\n> +++ b/src/pkg/runtime/thread_linux.c\n> @@ -184,13 +184,19 @@\n> \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0switch(g->sig) {\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGBUS:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGSEGV:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGFPE:\n> Index: src/pkg/runtime/thread_netbsd.c\n> ===================================================================\n> --- a/src/pkg/runtime/thread_netbsd.c\n> +++ b/src/pkg/runtime/thread_netbsd.c\n> @@ -175,13 +175,19 @@\n> \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0switch(g->sig) {\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGBUS:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGSEGV:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGFPE:\n> Index: src/pkg/runtime/thread_openbsd.c\n> ===================================================================\n> --- a/src/pkg/runtime/thread_openbsd.c\n> +++ b/src/pkg/runtime/thread_openbsd.c\n> @@ -175,13 +175,19 @@\n> \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0switch(g->sig) {\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGBUS:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode0 == BUS_ADRERR && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGSEGV:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((g->sigcode0 == 0 || g->sigcode0 == SEGV_MAPERR ||\n> g->sigcode0 == SEGV_ACCERR) && g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case SIGFPE:\n> Index: src/pkg/runtime/thread_windows.c\n> ===================================================================\n> --- a/src/pkg/runtime/thread_windows.c\n> +++ b/src/pkg/runtime/thread_windows.c\n> @@ -270,8 +270,11 @@\n> \u00a0{\n> \u00a0 \u00a0 \u00a0 \u00a0switch(g->sig) {\n> \u00a0 \u00a0 \u00a0 \u00a0case EXCEPTION_ACCESS_VIOLATION:\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode1 < 0x1000)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigcode1 < 0x1000) {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(g->sigpc == 0)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runtime\u00b7panicstring(\"call of nil func\n> value\");\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7panicstring(\"invalid memory address or nil\n> pointer dereference\");\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7printf(\"unexpected fault address %p\\n\", g->sigcode1);\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime\u00b7throw(\"fault\");\n> \u00a0 \u00a0 \u00a0 \u00a0case EXCEPTION_INT_DIVIDE_BY_ZERO:\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-10 19:32:10.590375",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as c59e44d5c566 ***\n\nruntime: distinct panic message for call of nil func value\n\nR=golang-dev, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5531062",
			"disapproval": false,
			"date": "2012-01-10 19:47:01.617180",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5531062: runtime: distinct panic message for call of nil func value",
	"created": "2012-01-10 19:27:30.112607",
	"patchsets": [
		1,
		1001,
		2007,
		10
	],
	"modified": "2012-01-10 19:47:03.191175",
	"closed": true,
	"issue": 5531062
}