{
	"description": "cmd/gc: fix detection of initialization loop.\n\nThe compiler computes initialization order by finding\na spanning tree between a package's global variables.\nBut it does so by walking both variables and functions\nand stops detecting cycles between variables when they\nmix with a cycle of mutually recursive functions.\n\nFixes issue 4847.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The error message is a bit ugly but can be improved separately:\n\nissue4847.go:20: initialization loop:\n\tissue4847.go:18 foo refers to\n\tissue4847.go:16 matchList refers to\n\tissue4847.go:22 matchAnyFn refers to\n\tissue4847.go:20 matchAny refers to\n\tissue4847.go:16 matchList refers to\n\tissue4847.go:22 matchAnyFn refers to\n\tissue4847.go:20 matchAny\n\nIt should only say:\n\nissue4847.go:20: initialization loop:\n\tissue4847.go:20 matchAny refers to\n\tissue4847.go:16 matchList refers to\n\tissue4847.go:22 matchAnyFn refers to\n\tissue4847.go:20 matchAny",
			"disapproval": false,
			"date": "2013-05-27 06:11:32.918660",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-27 06:10:04.400510",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nCL description is a bit weird near the end.",
			"disapproval": false,
			"date": "2013-05-27 07:29:40.365850",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/27 07:29:40, DMorsing wrote:\n> LGTM.\n> \n> CL description is a bit weird near the end.\n\nI'll try to make the description readable.\n\nIf no-one objects I would like to submit this in a few hours.",
			"disapproval": false,
			"date": "2013-05-29 21:44:26.803890",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/29 21:44:26, remyoudompheng wrote:\n> I'll try to make the description readable.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-30 06:10:49.966380",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nI am a bit worried by the quadratic complexity. By compiling a dummy file containing \n\nvar i1 = i2\nvar i2 = i3\n...\nvar iN = i(N+1)\n\nI see a quite small overhead for 5000 variables (3.4s vs 3.1s), a large one for 10000 variables (22s vs 14s).\n\nI think the overhead is acceptable for most ordinary programs, what do you think?",
			"disapproval": false,
			"date": "2013-05-30 06:22:43.831950",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/30 06:22:43, remyoudompheng wrote:\n> Please take another look.\n> \n> I am a bit worried by the quadratic complexity. By compiling a dummy file\n> containing \n> \n> var i1 = i2\n> var i2 = i3\n> ...\n> var iN = i(N+1)\n> \n> I see a quite small overhead for 5000 variables (3.4s vs 3.1s), a large one for\n> 10000 variables (22s vs 14s).\n> \n> I think the overhead is acceptable for most ordinary programs, what do you\n> think?\n\nYou could push the functions marked by the walk onto a list and use that list to clear their pending flags.",
			"disapproval": false,
			"date": "2013-05-30 06:28:46.373060",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/30 06:28:46, DMorsing wrote:\n> On 2013/05/30 06:22:43, remyoudompheng wrote:\n> > Please take another look.\n> > \n> > I am a bit worried by the quadratic complexity. By compiling a dummy file\n> > containing \n> > \n> > var i1 = i2\n> > var i2 = i3\n> > ...\n> > var iN = i(N+1)\n> > \n> > I see a quite small overhead for 5000 variables (3.4s vs 3.1s), a large one\n> for\n> > 10000 variables (22s vs 14s).\n> > \n> > I think the overhead is acceptable for most ordinary programs, what do you\n> > think?\n> \n> You could push the functions marked by the walk onto a list and use that list to\n> clear their pending flags.\n\nIt still looks quadratic to me in the following context:\n\nN variables: v_1, ..., v_N\nN functions: f_1, ..., f_N\n\nEach f_i refers to v_i.\nEach f_i refers to f_{i+1} in a cyclic way.\n\nMaybe rsc has an opinion? I'm not sure it's worth writing the actual proper algorithm.",
			"disapproval": false,
			"date": "2013-06-01 08:43:57.194830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would like to avoid quadratic algorithms in general. I don't understand this well enough yet to say whether it's okay here.\n\nAs I said in the other CL, I might just not remember enough of this code to understand what's going on.\n\nWhy do functions have to be revisited? I would hope that checking foo would find the cycle shown in your first message, without having to reset for the checking of matchAnyFn.",
			"disapproval": false,
			"date": "2013-06-10 20:44:22.480050",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/10 20:44:22, rsc wrote:\n> I would like to avoid quadratic algorithms in general. I don't understand this\n> well enough yet to say whether it's okay here.\n> \n> As I said in the other CL, I might just not remember enough of this code to\n> understand what's going on.\n> \n> Why do functions have to be revisited? I would hope that checking foo would find\n> the cycle shown in your first message, without having to reset for the checking\n> of matchAnyFn.\n\nFunctions are allowed to refer to themselves in cycles. So to accept this and avoid infintie recursion we don't go through the same function body twice.\n\nYou arrive through a function F1, reach a variable V, that refers to F1: should you visit F1 again? Should you complain for an init cycle? why?\n\nActually, you can already complain by looking at the initlist: when I encounter a function I have already seen\n- if it is in the initlist stack, then there should be no variable appearing in between (otherwise the variable is referring to itself), otherwise it is safe to ignore (it's just mutually recursive functions).\n- if it is not on my stack, it was visited through another path, everything referenced by it has been visited, so skipping it is safe.\n\nThe problem we need to solve is: check that in the graph of variables and functions, any cycle must consist exclusively of functions.",
			"disapproval": false,
			"date": "2013-06-11 06:01:08.676600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the description - I understand the problem now.\r\nIsn't there some sub-quadratic way to do this?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-21 19:43:35.427280",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-14 22:03:17.197750",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/14 22:03:17, remyoudompheng wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:daniel.morsing@gmail.com, mailto:rsc@golang.org (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nThe error message is better than in the first version:\n\n% bin/go tool 6g test/fixedbugs/issue4847.go\ntest/fixedbugs/issue4847.go:22: initialization loop:\n\ttest/fixedbugs/issue4847.go:22 matchAny refers to\n\ttest/fixedbugs/issue4847.go:18 matchList refers to\n\ttest/fixedbugs/issue4847.go:24 matchAnyFn refers to\n\ttest/fixedbugs/issue4847.go:22 matchAny\n\nand the algorithm should be quadratic anymore. Feel free to try breaking it by writing nasty initialization loops mixed with mutually recursive functions.",
			"disapproval": false,
			"date": "2013-08-14 22:05:04.930740",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 9663047: cmd/gc: fix detection of initialization loop.",
	"created": "2013-05-27 06:08:25.155890",
	"patchsets": [
		1,
		1002,
		4001,
		10001,
		13001,
		23001
	],
	"modified": "2013-08-14 22:05:05.440090",
	"closed": false,
	"issue": 9663047
}