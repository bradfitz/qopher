{
	"description": "net: add LookupNS(domain string)\nFixes issue 4224.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"mikioh.mikioh@gmail.com",
		"alex.brainman@gmail.com",
		"rsc@golang.org",
		"herbert.fischer@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6675043/diff/5001/src/pkg/net/dnsclient.go\nFile src/pkg/net/dnsclient.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/5001/src/pkg/net/dnsclient.go#newcode230\nsrc/pkg/net/dnsclient.go:230: // An NS represents a single DNS NS record.\nplease move this struct to the end of file to keep definition of struct\nMX close to type byPref and its methods.\n\nhttps://codereview.appspot.com/6675043/diff/5001/src/pkg/net/lookup.go\nFile src/pkg/net/lookup.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/5001/src/pkg/net/lookup.go#newcode51\nsrc/pkg/net/lookup.go:51: func LookupNS(name string) (mx []*NS, err error) {\ns/mx/ns/",
			"disapproval": false,
			"date": "2012-10-13 08:03:06.721330",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup.go\nFile src/pkg/net/lookup.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup.go#newcode50\nsrc/pkg/net/lookup.go:50: // LookupNS returns the DNS NS records for the given domain name\nOn 2012/10/13 16:11:09, mikio wrote:\n> full stop.\n\nAddressed.\n\nhttps://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup_test.go\nFile src/pkg/net/lookup_test.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup_test.go#newcode60\nsrc/pkg/net/lookup_test.go:60: mx, err := LookupMX(\"gmail.com\")\nOn 2012/10/13 16:11:09, mikio wrote:\n> LookupNS?\n\nGood point. Updated.",
			"disapproval": false,
			"date": "2012-10-14 20:28:51.433240",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/14 16:47:15, minux wrote:\n> For windows, you need to do more, as syscall doesn't define\n> syscall.DNSNSData, you need to use syscall.DNSPTRData directly.\n> Take lookupCNAME as an example.\n\nI tried to bring parity with lookupCNAME. From my inspection of DNSPTRData and DnsQuery it seems I may be closer.",
			"disapproval": false,
			"date": "2012-10-14 20:32:52.196640",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/15 04:04:33, smcquay wrote:\n> ...\n> I believe I've filled it out before, but just did for good measure. How \n> can I figure out if it's been recorded?\n> \n\nI do not see these myself. Only golang team gophers do. But, do not worry, we will find your record once we are ready to submit.\n\nAlex",
			"disapproval": false,
			"date": "2012-10-15 04:08:00.127930",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please add lookupNS func for plan9, windows too.\n\nhttps://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup.go\nFile src/pkg/net/lookup.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup.go#newcode50\nsrc/pkg/net/lookup.go:50: // LookupNS returns the DNS NS records for the given domain name\nfull stop.\n\nhttps://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup_test.go\nFile src/pkg/net/lookup_test.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/6005/src/pkg/net/lookup_test.go#newcode60\nsrc/pkg/net/lookup_test.go:60: mx, err := LookupMX(\"gmail.com\")\nLookupNS?",
			"disapproval": false,
			"date": "2012-10-13 16:11:08.940210",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Oct 14, 2012 at 01:46:15PM +1100, Dave Cheney wrote:\r\n>Lucio and Alex/Mikio can help with plan9 / windows respectively.\r\n\r\nIf it helps, I have been using the following command to test things:\r\n\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"net\"\r\n\t\"os\"\r\n)\r\n\r\nconst usage = \"main <hostname>\\n\"\r\n\r\nfunc main() {\r\n\tif len(os.Args) != 2 {\r\n\t\tfmt.Fprintf(os.Stderr, usage)\r\n\t\tos.Exit(1)\r\n\t}\r\n\tn, _ := net.LookupNS(os.Args[1])\r\n\tfor i, v := range n {\r\n\t\tfmt.Printf(\"%v %v %v\\n\", i, v, v.Host)\r\n\t}\r\n}\r\n\r\nAnd I compare with the output for dig against gmail.com, mcquay.me, yahoo.com.\r\n\r\nThanks,\r\n\r\n-- \r\nStephen M. McQuay\r\nhttp://mcquay.me/vcf\r\n",
			"disapproval": false,
			"date": "2012-10-14 03:03:54.305800",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes issue 4224.\r\n\r\nOn Sat, Oct 13, 2012 at 3:10 PM,  <stephen@mcquay.me> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: Add function to expose NS records for a domain\r\n>\r\n>     Fixes issue 4424.\r\n>\r\n> Please review this at http://codereview.appspot.com/6675043/\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/dnsclient.go\r\n>   M src/pkg/net/lookup.go\r\n>   M src/pkg/net/lookup_test.go\r\n>   M src/pkg/net/lookup_unix.go\r\n>\r\n>\r\n> Index: src/pkg/net/dnsclient.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/dnsclient.go\r\n> +++ b/src/pkg/net/dnsclient.go\r\n> @@ -227,6 +227,11 @@\r\n>         Pref uint16\r\n>  }\r\n>\r\n> +// An NS represents a single DNS NS record.\r\n> +type NS struct {\r\n> +       Host string\r\n> +}\r\n> +\r\n>  // byPref implements sort.Interface to sort MX records by preference\r\n>  type byPref []*MX\r\n>\r\n> Index: src/pkg/net/lookup.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/lookup.go\r\n> +++ b/src/pkg/net/lookup.go\r\n> @@ -47,6 +47,11 @@\r\n>         return lookupMX(name)\r\n>  }\r\n>\r\n> +// LookupNS returns the DNS NS records for the given domain name\r\n> +func LookupNS(name string) (mx []*NS, err error) {\r\n> +       return lookupNS(name)\r\n> +}\r\n> +\r\n>  // LookupTXT returns the DNS TXT records for the given domain name.\r\n>  func LookupTXT(name string) (txt []string, err error) {\r\n>         return lookupTXT(name)\r\n> Index: src/pkg/net/lookup_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/lookup_test.go\r\n> +++ b/src/pkg/net/lookup_test.go\r\n> @@ -52,6 +52,20 @@\r\n>         }\r\n>  }\r\n>\r\n> +func TestGmailNS(t *testing.T) {\r\n> +       if testing.Short() || !*testExternal {\r\n> +               t.Logf(\"skipping test to avoid external network\")\r\n> +               return\r\n> +       }\r\n> +       mx, err := LookupMX(\"gmail.com\")\r\n> +       if err != nil {\r\n> +               t.Errorf(\"failed: %s\", err)\r\n> +       }\r\n> +       if len(mx) == 0 {\r\n> +               t.Errorf(\"no results\")\r\n> +       }\r\n> +}\r\n> +\r\n>  func TestGmailTXT(t *testing.T) {\r\n>         if testing.Short() || !*testExternal {\r\n>                 t.Logf(\"skipping test to avoid external network\")\r\n> Index: src/pkg/net/lookup_unix.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/lookup_unix.go\r\n> +++ b/src/pkg/net/lookup_unix.go\r\n> @@ -119,6 +119,19 @@\r\n>         return\r\n>  }\r\n>\r\n> +func lookupNS(name string) (ns []*NS, err error) {\r\n> +       _, records, err := lookup(name, dnsTypeNS)\r\n> +       if err != nil {\r\n> +               return\r\n> +       }\r\n> +       ns = make([]*NS, len(records))\r\n> +       for i, r := range records {\r\n> +               r := r.(*dnsRR_NS)\r\n> +               ns[i] = &NS{r.Ns}\r\n> +       }\r\n> +       return\r\n> +}\r\n> +\r\n>  func lookupTXT(name string) (txt []string, err error) {\r\n>         _, records, err := lookup(name, dnsTypeTXT)\r\n>         if err != nil {\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-13 04:20:21.423320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Lucio and Alex/Mikio can help with plan9 / windows respectively.\r\n\r\nPlease correct the issue fixed in the description (hg change).\r\n\r\nOn Sun, Oct 14, 2012 at 1:40 PM,  <stephen@mcquay.me> wrote:\r\n> Hello golang-dev@googlegroups.com, dave@cheney.net, minux.ma@gmail.com,\r\n> mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/6675043/\r\n",
			"disapproval": false,
			"date": "2012-10-14 02:46:16.166890",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-13 04:10:11.336550",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-13 14:45:33.163090",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/13 16:11:08, mikio wrote:\n> please add lookupNS func for plan9, windows too.\n\nI did my best to implement the func for plan9 and windows, but don't have access to either os to test things.\n\nWhat do people usually do in my circumstance?",
			"disapproval": false,
			"date": "2012-10-14 02:30:09.906840",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You'd better simplify the description a bit, i suggest this:\nnet: add LookupNS(domain string)\nFixes issue 4224.\n\nFor windows, you need to do more, as syscall doesn't define\nsyscall.DNSNSData, you need to use syscall.DNSPTRData directly.\nTake lookupCNAME as an example.",
			"disapproval": false,
			"date": "2012-10-14 16:47:15.470450",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, minux.ma@gmail.com, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-14 02:26:10.762560",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, minux.ma@gmail.com, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-14 02:40:52.764960",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nNicely done. Thank you.\n\nYou are creating some new public names. Lets leave it for a few days to give Go team members chance to comment.\n\nYou need to sign the agreement http://golang.org/doc/contribute.html#copyright before you change can be submitted.\n\nAlex\n\nhttps://codereview.appspot.com/6675043/diff/11007/src/pkg/net/lookup_test.go\nFile src/pkg/net/lookup_test.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/11007/src/pkg/net/lookup_test.go#newcode60\nsrc/pkg/net/lookup_test.go:60: mx, err := LookupNS(\"gmail.com\")\ns/mx/ns/\n\nSame everywhere.",
			"disapproval": false,
			"date": "2012-10-15 03:24:37.296980",
			"approval": true
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6675043/diff/11007/src/pkg/net/lookup_test.go\nFile src/pkg/net/lookup_test.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/11007/src/pkg/net/lookup_test.go#newcode60\nsrc/pkg/net/lookup_test.go:60: mx, err := LookupNS(\"gmail.com\")\nOn 2012/10/15 03:24:37, brainman wrote:\n> s/mx/ns/\n> \n> Same everywhere.\n\nAddressed.",
			"disapproval": false,
			"date": "2012-10-15 04:47:54.558270",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Oct 15, 2012 at 03:24:37AM +0000, alex.brainman@gmail.com wrote:\r\n>LGTM\r\n>\r\n>Nicely done. Thank you.\r\n\r\nThanks!\r\n\r\n\r\n>You are creating some new public names. Lets leave it for a few days to\r\n>give Go team members chance to comment.\r\n\r\nSounds reasonable.\r\n\r\n\r\n>You need to sign the agreement \r\n>http://golang.org/doc/contribute.html#copyright before you change can \r\n>be submitted.\r\n\r\nI believe I've filled it out before, but just did for good measure. How \r\ncan I figure out if it's been recorded?\r\n\r\nThanks, Alex,\r\n\r\n\r\n-- \r\nStephen M. McQuay\r\nhttp://mcquay.me/vcf\r\n",
			"disapproval": false,
			"date": "2012-10-15 04:04:33.525970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for being late to this game, but why is this useful?\n\nLookupMX returns an address you can use with smtp.Dial.\nLookupNS returns an address that can't be used by any standard API that I'm aware of.",
			"disapproval": false,
			"date": "2012-10-15 17:43:20.953240",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "rsc --\r\n\r\nOn Mon, Oct 15, 2012 at 05:43:21PM +0000, rsc@golang.org wrote:\r\n>Sorry for being late to this game, but why is this useful?\r\n\r\nYou'll have to forgive my enthusiasm; I saw an issue (4224) that \r\nI thought I could knock out and hacked it up before I put much thought \r\ninto the 'why useful'.\r\n\r\n\r\n>LookupMX returns an address you can use with smtp.Dial.\r\n>LookupNS returns an address that can't be used by any standard API that\r\n>I'm aware of.\r\n\r\nI found in my tests that the Host field of the NS struct can be used in \r\ncalls to Lookup*, for what it's worth. Also, when I've needed NS info in \r\nthe past, I run dig and the string hostname is typically what I'm after.\r\n\r\nI am guessing that the reporter had reason to post, and would be happy \r\nto follow up in the issue's comments.\r\n\r\nRespectfully,\r\n\r\n-- \r\nStephen M. McQuay\r\nhttp://mcquay.me/vcf\r\n",
			"disapproval": false,
			"date": "2012-10-15 18:25:00.339180",
			"approval": false
		},
		{
			"sender": "herbert.fischer@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"herbert.fischer@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/15 18:25:00, smcquay wrote:\n\n> I am guessing that the reporter had reason to post, and would be happy \n> to follow up in the issue's comments.\n\nHi,\n\nI am the reporter of the issue 4224.\n\nI issued this when starting to develop something that depends on checking the DNS status headers of a domain (NOERROR, NXDOMAIN, etc) by querying it's NS. Something able to get information like the \"dig\" command does.\n\n I've ended up using a 3rd party lib for now, but I think some of the DNS internal functions in Go's net pkg could solve my problem if they were exported.\n\nIMHO I should note that I net.Lookup* functions is a strange mix of simple basic/general resolv/DNS functions (LookupAddr, LookupHost, LookupIP) and more DNS specific functions (LookupCNAME, ...MX, ...SRV, ...TXT), but this set of specific functions is incomplete. Maybe Go should have a net/dns package with these features in it, maybe not. Maybe Go could have some way to return DNS headers of each query. I'm not sure what is the best approach.\n\nThank you all!",
			"disapproval": false,
			"date": "2012-10-15 23:38:36.504170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"herbert.fischer@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks for the explanation. Leaving for Mikio.",
			"disapproval": false,
			"date": "2012-10-16 17:39:17.360810",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"herbert.fischer@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6675043/diff/12022/src/pkg/net/lookup_test.go\nFile src/pkg/net/lookup_test.go (right):\n\nhttps://codereview.appspot.com/6675043/diff/12022/src/pkg/net/lookup_test.go#newcode60\nsrc/pkg/net/lookup_test.go:60: mx, err := LookupNS(\"gmail.com\")\ns/mx/ns/\n\nhttps://codereview.appspot.com/6675043/diff/12022/src/pkg/net/lookup_test.go#newcode64\nsrc/pkg/net/lookup_test.go:64: if len(mx) == 0 {\ns/mx/ns/",
			"disapproval": false,
			"date": "2012-10-18 00:42:49.670260",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"herbert.fischer@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=eb854c88d4a6 ***\n\nnet: add LookupNS(domain string)\nFixes issue 4224.\n\nR=golang-dev, dave, minux.ma, mikioh.mikioh, alex.brainman, rsc, herbert.fischer\nCC=golang-dev\nhttp://codereview.appspot.com/6675043\n\nCommitter: Mikio Hara <mikioh.mikioh@gmail.com>",
			"disapproval": false,
			"date": "2012-10-18 06:39:26.285570",
			"approval": false
		},
		{
			"sender": "stephen@mcquay.me",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"herbert.fischer@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I should've caught these; changed.",
			"disapproval": false,
			"date": "2012-10-18 03:06:09.996550",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"stephen@mcquay.me",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"herbert.fischer@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-18 06:38:47.167540",
			"approval": true
		}
	],
	"owner_email": "stephen@mcquay.me",
	"private": false,
	"base_url": "",
	"owner": "smcquay",
	"subject": "code review 6675043: net: Add function to expose NS records for a domain",
	"created": "2012-10-12 21:08:38.449540",
	"patchsets": [
		2001,
		5001,
		6005,
		5002,
		5003,
		9005,
		2003,
		6010,
		7015,
		9012,
		3012,
		11007,
		12022,
		20001
	],
	"modified": "2012-10-18 12:52:54.062500",
	"closed": true,
	"issue": 6675043
}