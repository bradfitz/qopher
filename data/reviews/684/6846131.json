{
	"description": "exp/types: checking of type switches and range clauses\n\nAlso:\n- better handling of type assertions\n- implemented built-in error type\n- first cut at handling variadic function signatures\n- several bug fixes",
	"cc": [
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6846131/diff/7002/src/pkg/exp/types/stmt.go\nFile src/pkg/exp/types/stmt.go (right):\n\nhttps://codereview.appspot.com/6846131/diff/7002/src/pkg/exp/types/stmt.go#newcode531\nsrc/pkg/exp/types/stmt.go:531: lhs.Type = typ\ndoesn't this end up with the AST holding invalid types in all clauses but the last one?\n\ni suspect that if i typechecked this code and looked at the Object pointed to by the t argument to foo, i'd find it was string.\n\n  switch t := interface{}(5).(type) {\n  case int:\n       foo(t)\n  case string:\n       bar(t)\n  }",
			"disapproval": false,
			"date": "2012-11-30 12:14:35.779180",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-30 04:06:23.938260",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6846131/diff/7002/src/pkg/exp/types/stmt.go\nFile src/pkg/exp/types/stmt.go (right):\n\nhttps://codereview.appspot.com/6846131/diff/7002/src/pkg/exp/types/stmt.go#newcode531\nsrc/pkg/exp/types/stmt.go:531: lhs.Type = typ\nOn 2012/11/30 12:14:35, rog wrote:\n> doesn't this end up with the AST holding invalid types in all clauses but the\n> last one?\n> \n> i suspect that if i typechecked this code and looked at the Object pointed to by\n> the t argument to foo, i'd find it was string.\n> \n>   switch t := interface{}(5).(type) {\n>   case int:\n>        foo(t)\n>   case string:\n>        bar(t)\n>   }\n\nThat's correct - I was thinking about that last night. At the moment there's only one t object associated with all identifiers t. One could change that at the cost of an extra walk. However, the types associated with expressions as reported with the function f passed into types.Check is still correct (test needs to be added).\n\nI'm going to set the type to nil for now so that it cannot be used by mistake, and added a comment.\n\nIn hindsight it would be better to not augment the AST at all (it leads to a cumbersome split between work done by the parser and work done here), and instead do it all in the type checker. It will be cleaner and lead to a leaner AST as well. It would also not raise questions as to what happens with scopes, objects, etc. if one manipulates the AST manually. It's best to rely on the results reported by the type checker if one is interested in the types. This will permit cleaning up the AST in a next phase (i.e., moving augmentation out).",
			"disapproval": false,
			"date": "2012-11-30 17:55:54.377960",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-01 01:24:41.046550",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-03 03:54:13.167050",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-05 06:47:08.449440",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=78f62d4f67a9 ***\n\nexp/types: checking of type switches and range clauses\n\nAlso:\n- better handling of type assertions\n- implemented built-in error type\n- first cut at handling variadic function signatures\n- several bug fixes\n\nR=rsc, rogpeppe\nCC=golang-dev\nhttps://codereview.appspot.com/6846131",
			"disapproval": false,
			"date": "2012-12-06 17:21:50.870960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:24:26.579660",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6846131: exp/types: checking of type switches and range clauses",
	"created": "2012-11-30 01:52:22.839700",
	"patchsets": [
		1,
		2001,
		1002,
		7001,
		7002,
		7003,
		8006,
		2012,
		1008,
		6007,
		2013,
		12012,
		15001,
		20002,
		20003,
		18002,
		23003,
		18014,
		17025,
		29001,
		21014,
		17026,
		25026,
		20027,
		30001,
		34001
	],
	"modified": "2012-12-07 17:43:00.443830",
	"closed": true,
	"issue": 6846131
}