{
	"description": "exp/cookiejar: implement MemStorage.\n\nUpdate issue 1960.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"dr.volker.dobler@gmail.com"
	],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, dr.volker.dobler@gmail.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-29 04:52:39.465550",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am feeling more and more uncomfortable with the\ncurrent Storage, I am afraid it might be at the\nborder of becoming javaesque over-engineered with\ntoo many abstractions and generalizations just\nbecause one might want to do something without an\nactual need to do so. \n\nCounter-proposal: http://codereview.appspot.com/6854114/\nbased on your counter-proposal.\n\nRational:\nThe API of Storage should serve the needs of\nCookies and SetCookies well, while being simple to\nimplement. Thus: How about disallowing the filter\nfunctions in Entries and Keys to call other methods?\nWhat exactly would be lost, except generality?\nA generality which won't be used anyway?\n\nIf we take the idea of a dumb, simple to implement,\nstorage abstraction serious we should drop all this\nfanciness, maybe not even keeping LastAccess.\nThis would make cookie retrieval much slower, but\nthat might be fine: For an all in-memory storage it\nmight still be much faster than the actual HTTP\nrequest and disc or DB based storages will need a\nmemory cache anyway to be useful.\n\nIf this is seems too radical I see several valid\noptions:\n - Expose full cookie life-cycle in Entry, that is\n   Creation, LastAccess, and Expires and require\n   Storage to handle the life-cycle of a cookie\n   properly. (Which borders at the last option...)\n - Make memStorage a \"friend of Jar\" with knowledge\n   about an entry's data internals and typeswitch \n   in Jar if its Storage is a memStorage and have\n   memStorage do more or extra work via additonal\n   methods. (A hack.)\n - Do as browsers do: Keep cookies in memory and\n   asynchronously inform a backend about changes.\n   (I still find this attractive. Any counter-arguments?)\n\nhttps://codereview.appspot.com/6846125/diff/5001/src/pkg/exp/cookiejar/storage.go\nFile src/pkg/exp/cookiejar/storage.go (right):\n\nhttps://codereview.appspot.com/6846125/diff/5001/src/pkg/exp/cookiejar/storage.go#newcode51\nsrc/pkg/exp/cookiejar/storage.go:51: // f may call a Storage's Add and Delete methods. Modification during\nI always wondered why? Do you have a clever implementation\nfor Jar lying around somewhere which benefits from allowing\nf to call other methods?\n\nPersonally I'd prefer to disallow f to call any other\nmethods and keep Entries and Keys simple. If this\ncomplicates other functions except SetCookies and Cookies:\nI am fine with that. E.g. a two pass scanning with\ncalling Entries twice seems okay for me in specialized\nmethods of Jar or functions operating on Storage like\ne.g. limiting numbers of cookies stored.\n\nhttps://codereview.appspot.com/6846125/diff/5001/src/pkg/exp/cookiejar/storage.go#newcode153\nsrc/pkg/exp/cookiejar/storage.go:153: entry.Creation = old.Creation\nThat is broken if old is an expired cookie: If old is\nexpired you should actually set a new cookie with\na new Creation time.\nPossible solutions:\nA) Remove Creation from Entry (and encode in Data).\n   Scan m.m[key] first with Entries and find the\n   proper Creation time when adding/updating cookies\n   from within SetCookies\n   Pros: Entry gets opaquer. Cons: Two passes needed\nB) Move Expires to Entry.\n   Require Add to check Expires before reusing old\n   Creation time.\n   Pros: No need for SetCookies to scan first.\n   Cons: More logic and potential bugs in types\n   implementing Storage",
			"disapproval": false,
			"date": "2012-11-29 13:37:26.877290",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that this storage API is way more complicated than I was expecting\r\nto find when I opened the CL.\r\n\r\nI haven't been following the last few rounds of email on this, though, so\r\nI'm not sure which requirements dictate its complexity.\r\n\r\nOn Wed, Nov 28, 2012 at 8:52 PM, <nigeltao@golang.org> wrote:\r\n\r\n> Reviewers: bradfitz, volker.dobler,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org, dr.volker.dobler@gmail.com (cc:\r\n> golang-dev@googlegroups.com, rsc@golang.org),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> exp/cookiejar: implement MemStorage.\r\n>\r\n> Update issue 1960.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6846125/<http://codereview.appspot.com/6846125/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/exp/cookiejar/storage.**go\r\n>   M src/pkg/exp/cookiejar/storage_**test.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-29 19:50:41.790540",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 30, 2012 at 6:50 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I agree that this storage API is way more complicated than I was expecting\r\n> to find when I opened the CL.\r\n\r\nI have yet another proposal, this time one in which Storage is very\r\ndumb and only deals with opaque []byte values. A Jar primarily keeps\r\nits cookies in memory; it's been a while since we had this\r\nconversation but I believe that Volker would describe this as similar\r\nto what Chromium / Firefox does:\r\nhttps://codereview.appspot.com/6996044\r\n",
			"disapproval": false,
			"date": "2012-12-21 00:17:39.452920",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-01-29 00:36:20.312070",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-02-01 00:54:02.551000",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6846125: exp/cookiejar: implement MemStorage.",
	"created": "2012-11-29 04:49:57.945260",
	"patchsets": [
		1,
		2001,
		5001,
		6004
	],
	"modified": "2013-02-01 00:54:02.551000",
	"closed": true,
	"issue": 6846125
}