{
	"description": "regexp: add simple package-level example\n\nUpdate issue 4125",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-13 11:53:05.143840",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-13 15:54:46.977000",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6846045/diff/1/src/pkg/regexp/example_test.go\nFile src/pkg/regexp/example_test.go (right):\n\nhttp://codereview.appspot.com/6846045/diff/1/src/pkg/regexp/example_test.go#newcode9\nsrc/pkg/regexp/example_test.go:9: // Compile the expression once, usually at init time.\n// Use raw strings to avoid having to quote the backslashes.\n\nhttp://codereview.appspot.com/6846045/diff/1/src/pkg/regexp/example_test.go#newcode10\nsrc/pkg/regexp/example_test.go:10: var validUser = regexp.MustCompile(`^[A-Za-z0-9-]+$`)\nuse a pattern with a backslash.",
			"disapproval": false,
			"date": "2012-11-13 15:26:03.364960",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cbb5a28097e9 ***\n\nregexp: add simple package-level example\n\nUpdate issue 4125\n\nR=golang-dev, r\nCC=golang-dev\nhttp://codereview.appspot.com/6846045",
			"disapproval": false,
			"date": "2012-11-14 09:43:27.076430",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6846045/diff/1/src/pkg/regexp/example_test.go\nFile src/pkg/regexp/example_test.go (right):\n\nhttps://codereview.appspot.com/6846045/diff/1/src/pkg/regexp/example_test.go#newcode9\nsrc/pkg/regexp/example_test.go:9: // Compile the expression once, usually at init time.\nOn 2012/11/13 15:26:03, r wrote:\n> // Use raw strings to avoid having to quote the backslashes.\n\nDone.\n\nhttps://codereview.appspot.com/6846045/diff/1/src/pkg/regexp/example_test.go#newcode10\nsrc/pkg/regexp/example_test.go:10: var validUser = regexp.MustCompile(`^[A-Za-z0-9-]+$`)\nOn 2012/11/13 15:26:03, r wrote:\n> use a pattern with a backslash.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-13 15:54:48.052570",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-13 17:15:43.329040",
			"approval": true
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6846045: regexp: add simple package-level example",
	"created": "2012-11-13 11:53:01.203650",
	"patchsets": [
		1,
		5001,
		9002
	],
	"modified": "2012-11-14 09:43:28.415520",
	"closed": true,
	"issue": 6846045
}