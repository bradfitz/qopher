{
	"description": "debug/elf: do not skip first symbol in the symbol table\n\nDo not skip the first symbol in the symbol table. Any other indexes\ninto the symbol table (for example, indexes in relocation entries)\nwill now refer to the symbol following the one that was intended.\n\nAdd an object that contains debug relocations, which debug/dwarf\nfailed to decode correctly. Extend the relocation tests to cover\nthis case.\n\nNote that the existing tests passed since the symbol following the\nsymbol that required relocation is also of type STT_SECTION.\n\nFixes issue 4107.",
	"cc": [
		"golang-dev@googlegroups.com",
		"mikioh.mikioh@gmail.com",
		"iant@google.com",
		"iant@golang.org"
	],
	"reviewers": [
		"rsc@golang.org",
		"mtj@google.com"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks! it also passes on freebsd.",
			"disapproval": false,
			"date": "2012-11-13 14:30:57.312730",
			"approval": true
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"iant@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9ea9e7e6e0c8 ***\n\ndebug/elf: do not skip first symbol in the symbol table\n\nDo not skip the first symbol in the symbol table. Any other indexes\ninto the symbol table (for example, indexes in relocation entries)\nwill now refer to the symbol following the one that was intended.\n\nAdd an object that contains debug relocations, which debug/dwarf\nfailed to decode correctly. Extend the relocation tests to cover\nthis case.\n\nNote that the existing tests passed since the symbol following the\nsymbol that required relocation is also of type STT_SECTION.\n\nFixes issue 4107.\n\nR=golang-dev, mikioh.mikioh, iant, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6848044",
			"disapproval": false,
			"date": "2012-11-14 15:27:16.981390",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-13 13:49:24.020820",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 14 November 2012 01:33, Ian Lance Taylor <iant@google.com> wrote:\r\n> This is going to change the behaviour of the Symbols function in\r\n> debug/elf and potentially break any current users.  I don't know if\r\n> that is a good idea.  Certainly any change would need to be documented\r\n> in doc/go1.1.html.\r\n\r\nIndeed. As I've noted in the issue, there are two obvious fixes - stop\r\nskipping the first symbol, or adjust the symbol index in the\r\nrelocation code. While the second of these avoids a change in existing\r\nbehaviour, I think the first option is more \"correct\" since we expose\r\nthe ELF and DWARF data. Anyone using these packages is currently\r\nexpected to know that an index into the symbol table needs to be\r\nadjusted to account for the fact that debug/elf is discarding the\r\nfirst symbol.\r\n",
			"disapproval": false,
			"date": "2012-11-13 15:15:41.034390",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/13 16:46:32, iant2 wrote:\n> On Tue, Nov 13, 2012 at 7:15 AM, Joel Sing <mailto:jsing@google.com> wrote:\n> > On 14 November 2012 01:33, Ian Lance Taylor <mailto:iant@google.com> wrote:\n> >> This is going to change the behaviour of the Symbols function in\n> >> debug/elf and potentially break any current users.  I don't know if\n> >> that is a good idea.  Certainly any change would need to be documented\n> >> in doc/go1.1.html.\n> >\n> > Indeed. As I've noted in the issue, there are two obvious fixes - stop\n> > skipping the first symbol, or adjust the symbol index in the\n> > relocation code. While the second of these avoids a change in existing\n> > behaviour, I think the first option is more \"correct\" since we expose\n> > the ELF and DWARF data. Anyone using these packages is currently\n> > expected to know that an index into the symbol table needs to be\n> > adjusted to account for the fact that debug/elf is discarding the\n> > first symbol.\n> \n> Makes sense to me.  Can you please add a change to go1.1.html to this\n> CL?  Thanks.\n\nDone. PTAL.",
			"disapproval": false,
			"date": "2012-11-14 10:35:34.054770",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is going to change the behaviour of the Symbols function in\r\ndebug/elf and potentially break any current users.  I don't know if\r\nthat is a good idea.  Certainly any change would need to be documented\r\nin doc/go1.1.html.\r\n\r\nIan\r\n\r\nOn Tue, Nov 13, 2012 at 5:49 AM,  <jsing@google.com> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> debug/elf: do not skip first symbol in the symbol table\r\n>\r\n> Do not skip the first symbol in the symbol table. Any other indexes\r\n> into the symbol table (for example, indexes in relocation entries)\r\n> will now refer to the symbol following the one that was intended.\r\n>\r\n> Add an object that contains debug relocations, which debug/dwarf\r\n> failed to decode correctly. Extend the relocation tests to cover\r\n> this case.\r\n>\r\n> Note that the existing tests passed since the symbol following the\r\n> symbol that required relocation is also of type STT_SECTION.\r\n>\r\n> Fixes issue 4107.\r\n>\r\n> Please review this at http://codereview.appspot.com/6848044/\r\n>\r\n> Affected files:\r\n>   M src/pkg/debug/elf/file.go\r\n>   M src/pkg/debug/elf/file_test.go\r\n>   A src/pkg/debug/elf/testdata/gcc-amd64-openbsd-debug-with-rela.obj\r\n>\r\n>\r\n> Index: src/pkg/debug/elf/file.go\r\n> ===================================================================\r\n> --- a/src/pkg/debug/elf/file.go\r\n> +++ b/src/pkg/debug/elf/file.go\r\n> @@ -417,10 +417,6 @@\r\n>                 return nil, nil, errors.New(\"cannot load string table\r\n> section\")\r\n>         }\r\n>\r\n> -       // The first entry is all zeros.\r\n> -       var skip [Sym32Size]byte\r\n> -       symtab.Read(skip[0:])\r\n> -\r\n>         symbols := make([]Symbol, symtab.Len()/Sym32Size)\r\n>\r\n>         i := 0\r\n> @@ -460,10 +456,6 @@\r\n>                 return nil, nil, errors.New(\"cannot load string table\r\n> section\")\r\n>         }\r\n>\r\n> -       // The first entry is all zeros.\r\n> -       var skip [Sym64Size]byte\r\n> -       symtab.Read(skip[0:])\r\n> -\r\n>         symbols := make([]Symbol, symtab.Len()/Sym64Size)\r\n>\r\n>         i := 0\r\n> Index: src/pkg/debug/elf/file_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/debug/elf/file_test.go\r\n> +++ b/src/pkg/debug/elf/file_test.go\r\n> @@ -175,23 +175,41 @@\r\n>         }\r\n>  }\r\n>\r\n> +type relocationTestEntry struct {\r\n> +       entryNumber int\r\n> +       entry       *dwarf.Entry\r\n> +}\r\n> +\r\n>  type relocationTest struct {\r\n> -       file       string\r\n> -       firstEntry *dwarf.Entry\r\n> +       file    string\r\n> +       entries []relocationTestEntry\r\n>  }\r\n>\r\n>  var relocationTests = []relocationTest{\r\n>         {\r\n>                 \"testdata/go-relocation-test-gcc441-x86-64.obj\",\r\n> -               &dwarf.Entry{Offset: 0xb, Tag: dwarf.TagCompileUnit,\r\n> Children: true, Field: []dwarf.Field{{Attr: dwarf.AttrProducer, Val: \"GNU C\r\n> 4.4.1\"}, {Attr: dwarf.AttrLanguage, Val: int64(1)}, {Attr: dwarf.AttrName,\r\n> Val: \"go-relocation-test.c\"}, {Attr: dwarf.AttrCompDir, Val: \"/tmp\"}, {Attr:\r\n> dwarf.AttrLowpc, Val: uint64(0x0)}, {Attr: dwarf.AttrHighpc, Val:\r\n> uint64(0x6)}, {Attr: dwarf.AttrStmtList, Val: int64(0)}}},\r\n> +               []relocationTestEntry{\r\n> +                       {0, &dwarf.Entry{Offset: 0xb, Tag:\r\n> dwarf.TagCompileUnit, Children: true, Field: []dwarf.Field{{Attr:\r\n> dwarf.AttrProducer, Val: \"GNU C 4.4.1\"}, {Attr: dwarf.AttrLanguage, Val:\r\n> int64(1)}, {Attr: dwarf.AttrName, Val: \"go-relocation-test.c\"}, {Attr:\r\n> dwarf.AttrCompDir, Val: \"/tmp\"}, {Attr: dwarf.AttrLowpc, Val: uint64(0x0)},\r\n> {Attr: dwarf.AttrHighpc, Val: uint64(0x6)}, {Attr: dwarf.AttrStmtList, Val:\r\n> int64(0)}}}},\r\n> +               },\r\n>         },\r\n>         {\r\n>                 \"testdata/go-relocation-test-gcc441-x86.obj\",\r\n> -               &dwarf.Entry{Offset: 0xb, Tag: dwarf.TagCompileUnit,\r\n> Children: true, Field: []dwarf.Field{{Attr: dwarf.AttrProducer, Val: \"GNU C\r\n> 4.4.1\"}, {Attr: dwarf.AttrLanguage, Val: int64(1)}, {Attr: dwarf.AttrName,\r\n> Val: \"t.c\"}, {Attr: dwarf.AttrCompDir, Val: \"/tmp\"}, {Attr: dwarf.AttrLowpc,\r\n> Val: uint64(0x0)}, {Attr: dwarf.AttrHighpc, Val: uint64(0x5)}, {Attr:\r\n> dwarf.AttrStmtList, Val: int64(0)}}},\r\n> +               []relocationTestEntry{\r\n> +                       {0, &dwarf.Entry{Offset: 0xb, Tag:\r\n> dwarf.TagCompileUnit, Children: true, Field: []dwarf.Field{{Attr:\r\n> dwarf.AttrProducer, Val: \"GNU C 4.4.1\"}, {Attr: dwarf.AttrLanguage, Val:\r\n> int64(1)}, {Attr: dwarf.AttrName, Val: \"t.c\"}, {Attr: dwarf.AttrCompDir,\r\n> Val: \"/tmp\"}, {Attr: dwarf.AttrLowpc, Val: uint64(0x0)}, {Attr:\r\n> dwarf.AttrHighpc, Val: uint64(0x5)}, {Attr: dwarf.AttrStmtList, Val:\r\n> int64(0)}}}},\r\n> +               },\r\n>         },\r\n>         {\r\n>                 \"testdata/go-relocation-test-gcc424-x86-64.obj\",\r\n> -               &dwarf.Entry{Offset: 0xb, Tag: dwarf.TagCompileUnit,\r\n> Children: true, Field: []dwarf.Field{{Attr: dwarf.AttrProducer, Val: \"GNU C\r\n> 4.2.4 (Ubuntu 4.2.4-1ubuntu4)\"}, {Attr: dwarf.AttrLanguage, Val: int64(1)},\r\n> {Attr: dwarf.AttrName, Val: \"go-relocation-test-gcc424.c\"}, {Attr:\r\n> dwarf.AttrCompDir, Val: \"/tmp\"}, {Attr: dwarf.AttrLowpc, Val: uint64(0x0)},\r\n> {Attr: dwarf.AttrHighpc, Val: uint64(0x6)}, {Attr: dwarf.AttrStmtList, Val:\r\n> int64(0)}}},\r\n> +               []relocationTestEntry{\r\n> +                       {0, &dwarf.Entry{Offset: 0xb, Tag:\r\n> dwarf.TagCompileUnit, Children: true, Field: []dwarf.Field{{Attr:\r\n> dwarf.AttrProducer, Val: \"GNU C 4.2.4 (Ubuntu 4.2.4-1ubuntu4)\"}, {Attr:\r\n> dwarf.AttrLanguage, Val: int64(1)}, {Attr: dwarf.AttrName, Val:\r\n> \"go-relocation-test-gcc424.c\"}, {Attr: dwarf.AttrCompDir, Val: \"/tmp\"},\r\n> {Attr: dwarf.AttrLowpc, Val: uint64(0x0)}, {Attr: dwarf.AttrHighpc, Val:\r\n> uint64(0x6)}, {Attr: dwarf.AttrStmtList, Val: int64(0)}}}},\r\n> +               },\r\n> +       },\r\n> +       {\r\n> +               \"testdata/gcc-amd64-openbsd-debug-with-rela.obj\",\r\n> +               []relocationTestEntry{\r\n> +                       {203, &dwarf.Entry{Offset: 0xc62, Tag:\r\n> dwarf.TagMember, Children: false, Field: []dwarf.Field{{Attr:\r\n> dwarf.AttrName, Val: \"it_interval\"}, {Attr: dwarf.AttrDeclFile, Val:\r\n> int64(7)}, {Attr: dwarf.AttrDeclLine, Val: int64(236)}, {Attr:\r\n> dwarf.AttrType, Val: dwarf.Offset(0xb7f)}, {Attr: dwarf.AttrDataMemberLoc,\r\n> Val: []byte{0x23, 0x0}}}}},\r\n> +                       {204, &dwarf.Entry{Offset: 0xc70, Tag:\r\n> dwarf.TagMember, Children: false, Field: []dwarf.Field{{Attr:\r\n> dwarf.AttrName, Val: \"it_value\"}, {Attr: dwarf.AttrDeclFile, Val: int64(7)},\r\n> {Attr: dwarf.AttrDeclLine, Val: int64(237)}, {Attr: dwarf.AttrType, Val:\r\n> dwarf.Offset(0xb7f)}, {Attr: dwarf.AttrDataMemberLoc, Val: []byte{0x23,\r\n> 0x10}}}}},\r\n> +               },\r\n>         },\r\n>  }\r\n>\r\n> @@ -207,20 +225,24 @@\r\n>                         t.Error(err)\r\n>                         continue\r\n>                 }\r\n> -               reader := dwarf.Reader()\r\n> -               // Checking only the first entry is sufficient since it has\r\n> -               // many different strings. If the relocation had failed, all\r\n> -               // the string offsets would be zero and all the strings\r\n> would\r\n> -               // end up being the same.\r\n> -               firstEntry, err := reader.Next()\r\n> -               if err != nil {\r\n> -                       t.Error(err)\r\n> -                       continue\r\n> -               }\r\n> -\r\n> -               if !reflect.DeepEqual(test.firstEntry, firstEntry) {\r\n> -                       t.Errorf(\"#%d: mismatch: got:%#v want:%#v\", i,\r\n> firstEntry, test.firstEntry)\r\n> -                       continue\r\n> +               for _, testEntry := range test.entries {\r\n> +                       reader := dwarf.Reader()\r\n> +                       for j := 0; j < testEntry.entryNumber; j++ {\r\n> +                               entry, err := reader.Next()\r\n> +                               if entry == nil || err != nil {\r\n> +                                       t.Errorf(\"Failed to skip to entry\r\n> %d: %v\", testEntry.entryNumber, err)\r\n> +                                       continue\r\n> +                               }\r\n> +                       }\r\n> +                       entry, err := reader.Next()\r\n> +                       if err != nil {\r\n> +                               t.Error(err)\r\n> +                               continue\r\n> +                       }\r\n> +                       if !reflect.DeepEqual(testEntry.entry, entry) {\r\n> +                               t.Errorf(\"#%d/%d: mismatch: got:%#v\r\n> want:%#v\", i, testEntry.entryNumber, entry, testEntry.entry)\r\n> +                               continue\r\n> +                       }\r\n>                 }\r\n>         }\r\n>  }\r\n> Index: src/pkg/debug/elf/testdata/gcc-amd64-openbsd-debug-with-rela.obj\r\n> ===================================================================\r\n> new file mode 100644\r\n> index\r\n> 0000000000000000000000000000000000000000..f62b1ea1cada83530e45320cc58394933753dddb\r\n> GIT binary patch\r\n> literal 6544\r\n> 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\r\n> G=l=(aF1s24\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-13 14:33:27.845260",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 13, 2012 at 7:15 AM, Joel Sing <jsing@google.com> wrote:\r\n> On 14 November 2012 01:33, Ian Lance Taylor <iant@google.com> wrote:\r\n>> This is going to change the behaviour of the Symbols function in\r\n>> debug/elf and potentially break any current users.  I don't know if\r\n>> that is a good idea.  Certainly any change would need to be documented\r\n>> in doc/go1.1.html.\r\n>\r\n> Indeed. As I've noted in the issue, there are two obvious fixes - stop\r\n> skipping the first symbol, or adjust the symbol index in the\r\n> relocation code. While the second of these avoids a change in existing\r\n> behaviour, I think the first option is more \"correct\" since we expose\r\n> the ELF and DWARF data. Anyone using these packages is currently\r\n> expected to know that an index into the symbol table needs to be\r\n> adjusted to account for the fact that debug/elf is discarding the\r\n> first symbol.\r\n\r\nMakes sense to me.  Can you please add a change to go1.1.html to this\r\nCL?  Thanks.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-11-13 16:46:32.472500",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"iant@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with one change.\n\nhttps://codereview.appspot.com/6848044/diff/10001/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/6848044/diff/10001/doc/go1.1.html#newcode71\ndoc/go1.1.html:71: processes the symbol table returned from debug/elf may need to be adjusted to\ns|processes the symbol table returned from debug/elf|calls the debug/elf functions Symbols or ImportedSymbols|",
			"disapproval": false,
			"date": "2012-11-14 14:19:36.185800",
			"approval": true
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"iant@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/14 14:19:36, iant wrote:\n> LGTM with one change.\n> \n> https://codereview.appspot.com/6848044/diff/10001/doc/go1.1.html\n> File doc/go1.1.html (right):\n> \n> https://codereview.appspot.com/6848044/diff/10001/doc/go1.1.html#newcode71\n> doc/go1.1.html:71: processes the symbol table returned from debug/elf may need\n> to be adjusted to\n> s|processes the symbol table returned from debug/elf|calls the debug/elf\n> functions Symbols or ImportedSymbols|\n\nDone.",
			"disapproval": false,
			"date": "2012-11-14 15:22:31.578930",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jsing@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"iant@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Old CL, but I found this via the Go 1.1 release notes. I am concerned about the API change here, even though it does not manifest in a Go signature change. Is there something wrong with requiring people to write -1 when indexing into the symbol list? I am concerned that people who have already written the -1 in Go 1.0 will now have to take it out in Go 1.1. This seems to me a violation of the Go 1 compatibility promise.",
			"disapproval": false,
			"date": "2013-03-19 23:28:25.767410",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "why not replicate the first element and give an address of array[1]\r\n\r\n\r\nOn Tue, Mar 19, 2013 at 4:28 PM, <rsc@golang.org> wrote:\r\n\r\n> Old CL, but I found this via the Go 1.1 release notes. I am concerned\r\n> about the API change here, even though it does not manifest in a Go\r\n> signature change. Is there something wrong with requiring people to\r\n> write -1 when indexing into the symbol list? I am concerned that people\r\n> who have already written the -1 in Go 1.0 will now have to take it out\r\n> in Go 1.1. This seems to me a violation of the Go 1 compatibility\r\n> promise.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6848044/<https://codereview.appspot.com/6848044/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-19 23:44:06.487830",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"iant@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/19 23:28:25, rsc wrote:\n> Old CL, but I found this via the Go 1.1 release notes. I am concerned about the\n> API change here, even though it does not manifest in a Go signature change. Is\n> there something wrong with requiring people to write -1 when indexing into the\n> symbol list? I am concerned that people who have already written the -1 in Go\n> 1.0 will now have to take it out in Go 1.1. This seems to me a violation of the\n> Go 1 compatibility promise.\n\nAs discussed at the time of the CL, we already expose the ELF and DWARF data, some of which specify indexes into the symbol table. All of these indexes are now incorrect since we've silently dropped a symbol. I agree that this changes the behaviour of debug/elf between Go 1.0 and Go 1.1, however the counter argument is that previously you had to know that you needed to subtract one when indexing into the slice returned by Symbols. I do not believe this was documented anywhere, so if people are using this code for Go 1.0 they have already read well beyond the documentation. Given the amount of time and effort that it took me to debug the problem that this was causing (a missing -1 in our own standard library), I am strongly in favour of returning the full and correct symbol table. Another option would be to add a new function that returns all of the symbols, and leave Symbols with the broken Go 1.0 behaviour.",
			"disapproval": false,
			"date": "2013-03-20 03:21:22.863340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jsing@google.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"iant@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Rereading the review, Ian had the same reaction I did. The fact is, it is possible to write correct code with the Go 1.0 interface, so the Go 1.1 interface should not change. Yes, it means that people have to subtract 1 to index into the symbols list, and yes, if we were starting from scratch we probably wouldn't make that decision, but we did promise not to change the semantics of existing code unnecessarily, and this seems unnecessary.\n\nI will send a CL to revert to the old behavior and fix the relocation indices.",
			"disapproval": false,
			"date": "2013-03-21 20:31:31.052520",
			"approval": false
		}
	],
	"owner_email": "jsing@google.com",
	"private": false,
	"base_url": "",
	"owner": "jsing",
	"subject": "code review 6848044: debug/elf: do not skip first symbol in the symbol table",
	"created": "2012-11-13 13:36:02.063840",
	"patchsets": [
		1,
		2001,
		4001,
		10001,
		9006,
		1006
	],
	"modified": "2013-03-21 20:31:31.134900",
	"closed": true,
	"issue": 6848044
}