{
	"description": "cmd/gc: do not overflow parser stack on a long chain of else if.\n\nFixes issue 2615.",
	"cc": [
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"iant@golang.org",
		"daniel.morsing@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you Ian, I withdraw my previous objection.\r\nOn 22 Nov 2012 01:28, <iant@golang.org> wrote:\r\n\r\n> I agree that this patch is OK with respect to licensing.  The file is\r\n> already GPLv2 + exception, this changes it to GPLv3 + exception.  That\r\n> is OK.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6847078/<https://codereview.appspot.com/6847078/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-21 21:03:43.813790",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/21 07:28:00, remyoudompheng wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nNOT LGTM. \n\nThank you for fixing this longstanding issue but I am concerned that some files have switched to GPLv3",
			"disapproval": true,
			"date": "2012-11-21 07:32:13.549970",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about the patch contents?",
			"disapproval": false,
			"date": "2012-11-21 21:05:58.878280",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6847078/diff/4006/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/6847078/diff/4006/src/cmd/gc/go.y#newcode680\nsrc/cmd/gc/go.y:680: else:\nA few lines above we have caseblock and then caseblock_list, isn't it consistent to do the same?\n\nhttp://codereview.appspot.com/6847078/diff/4006/src/cmd/gc/go.y#newcode705\nsrc/cmd/gc/go.y:705: node = mal(sizeof *node);\nOn 2012/11/22 17:26:21, DMorsing wrote:\n> Use list() here\n\nlist flattens OBLOCK nodes, which is not correct here.",
			"disapproval": false,
			"date": "2012-11-23 20:44:04.077340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this.\n\nhttps://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttps://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y#newcode693\nsrc/cmd/gc/go.y:693: elseifblock_list:\nOn 2012/11/23 22:27:40, DMorsing wrote:\n> Name is getting a bit verbose. Shorten to just elseif_list.\n\nAgreed.\n\nhttps://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y#newcode708\nsrc/cmd/gc/go.y:708: NodeList *node;\n$$ = list1($2) no?\n\nhttps://codereview.appspot.com/6847078/diff/8002/test/fixedbugs/issue2615.go\nFile test/fixedbugs/issue2615.go (right):\n\nhttps://codereview.appspot.com/6847078/diff/8002/test/fixedbugs/issue2615.go#newcode1\ntest/fixedbugs/issue2615.go:1: // compile\nMake this a 'run' test and check that it actually compiles correctly.\nTo do that you will probably have to rewrite the conditions so that they overlap more.\n\nI suggest:\n\nfunc test(x [4]uint64) int {\n    if x[0]&(1<<0) != 0 {\n        return 0\n    } else if x[0]&(1<<1) != 0 {\n        return 1\n    } else ...\n    } else if x[3]&(1<<7) != 0 {\n        return 199\n    } else {\n        return 200\n    }\n    panic(\"unreachable\")\n}\n\nThis function is a terrible way to find the index of the least significant 1 bit in the 256-bit input (you could extend it if you wanted).\n\nIf you test with ^0, ^(1<<0), ^(1<<1), ^(1<<2), and so on, getting the right answer will confirm that the tests are executed in order.\n\nRuss",
			"disapproval": false,
			"date": "2012-11-26 16:44:22.453460",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that this patch is OK with respect to licensing.  The file is already GPLv2 + exception, this changes it to GPLv3 + exception.  That is OK.",
			"disapproval": false,
			"date": "2012-11-21 14:28:47.180790",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6847078/diff/4006/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttps://codereview.appspot.com/6847078/diff/4006/src/cmd/gc/go.y#newcode680\nsrc/cmd/gc/go.y:680: else:\nReorder the rules so that elseblock_list is first, then the rules for else. It's quite confusing to read about the subelements of a rule before the rule has been introduced.\n\nhttps://codereview.appspot.com/6847078/diff/4006/src/cmd/gc/go.y#newcode681\nsrc/cmd/gc/go.y:681: LELSE LIF\nThis grammar allows for code like:\n\nif true {\n} else {\n} else {\n}\n\nThere should be a check for this somewhere, but I'm not sure where it should be.\n\nhttps://codereview.appspot.com/6847078/diff/4006/src/cmd/gc/go.y#newcode705\nsrc/cmd/gc/go.y:705: node = mal(sizeof *node);\nUse list() here",
			"disapproval": false,
			"date": "2012-11-22 17:26:21.856120",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-21 07:28:00.777170",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/21 07:32:13, dfc wrote:\n> Thank you for fixing this longstanding issue but I am concerned that some files\n> have switched to GPLv3\nit's ok because there is a exception clause in bison output files.\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */",
			"disapproval": false,
			"date": "2012-11-21 07:35:40.966720",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, minux.ma@gmail.com, iant@golang.org, daniel.morsing@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-23 21:08:52.124210",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttps://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y#newcode693\nsrc/cmd/gc/go.y:693: elseifblock_list:\nName is getting a bit verbose. Shorten to just elseif_list.",
			"disapproval": false,
			"date": "2012-11-23 22:27:40.548010",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, minux.ma@gmail.com, iant@golang.org, daniel.morsing@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-03 13:17:55.539600",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttps://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y#newcode693\nsrc/cmd/gc/go.y:693: elseifblock_list:\nOn 2012/11/26 16:44:23, rsc wrote:\n> On 2012/11/23 22:27:40, DMorsing wrote:\n> > Name is getting a bit verbose. Shorten to just elseif_list.\n> \n> Agreed.\n\nDone.\n\nhttps://codereview.appspot.com/6847078/diff/8002/src/cmd/gc/go.y#newcode708\nsrc/cmd/gc/go.y:708: NodeList *node;\nI cannot do list1 because it flattens OBLOCK nodes, and compound_stmt is almost(?) always a OBLOCK. \n\nDo you think I should introduce a version of list1 that preserve the node's content, or is it OK as is?\n\nhttps://codereview.appspot.com/6847078/diff/8002/test/fixedbugs/issue2615.go\nFile test/fixedbugs/issue2615.go (right):\n\nhttps://codereview.appspot.com/6847078/diff/8002/test/fixedbugs/issue2615.go#newcode1\ntest/fixedbugs/issue2615.go:1: // compile\nOn 2012/11/26 16:44:23, rsc wrote:\n> Make this a 'run' test and check that it actually compiles correctly.\n> To do that you will probably have to rewrite the conditions so that they overlap\n> more.\n> \n> I suggest:\n> \n> func test(x [4]uint64) int {\n>     if x[0]&(1<<0) != 0 {\n>         return 0\n>     } else if x[0]&(1<<1) != 0 {\n>         return 1\n>     } else ...\n>     } else if x[3]&(1<<7) != 0 {\n>         return 199\n>     } else {\n>         return 200\n>     }\n>     panic(\"unreachable\")\n> }\n> \n> This function is a terrible way to find the index of the least significant 1 bit\n> in the 256-bit input (you could extend it if you wanted).\n> \n> If you test with ^0, ^(1<<0), ^(1<<1), ^(1<<2), and so on, getting the right\n> answer will confirm that the tests are executed in order.\n> \n> Russ\n\nDone.",
			"disapproval": false,
			"date": "2012-12-03 13:18:43.197420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM w/ the test change passing\n\nhttps://codereview.appspot.com/6847078/diff/14001/test/fixedbugs/issue2615.go\nFile test/fixedbugs/issue2615.go (right):\n\nhttps://codereview.appspot.com/6847078/diff/14001/test/fixedbugs/issue2615.go#newcode534\ntest/fixedbugs/issue2615.go:534: bits[i/64] &= ^(1 << (uint(i) & 63))\nThis is only testing the first two cases. The rest of the if sequence could be lost and the test would still pass. Let's test all the branches:\n\n// clear bottom i bits\nbits[i/64] ^= 1<<(uint(i)&63 + 1) - 1\nfor j := i/64 - 1; j >= 0; j-- {\n    bits[j] = 0\n}\n\nk := test(bits)\nif k != i {\n    print(\"test(bits)=\", k, \" want \", i, \"\\n\")\n    panic(\"failed\")\n}",
			"disapproval": false,
			"date": "2012-12-06 04:50:18.832190",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=52c9c412f1f2 ***\n\ncmd/gc: do not overflow parser stack on a long chain of else if.\n\nFixes issue 2615.\n\nR=dave, minux.ma, iant, daniel.morsing, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6847078",
			"disapproval": false,
			"date": "2012-12-06 07:09:24.826030",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, minux.ma@gmail.com, iant@golang.org, daniel.morsing@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-06 07:08:04.961990",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6847078: cmd/gc: do not overflow parser stack on a long chain of...",
	"created": "2012-11-21 07:27:21.033760",
	"patchsets": [
		1,
		2001,
		4006,
		8002,
		14001,
		23001,
		26002
	],
	"modified": "2012-12-06 07:12:35.280460",
	"closed": true,
	"issue": 6847078
}