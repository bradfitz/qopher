{
	"description": "cmd/gc: fix export data for aggressive inlining.\n\nExport data was broken after revision 6b602ab487d6\nwhen -l is specified at least 3 times: it makes the compiler\nwrite out func (*T).Method() declarations in export data, which\nis not supported.\n\nAlso fix the formatting of recover() in export data. It was\nnot treated like panic() and was rendered as \"<node RECOVER>\".",
	"cc": [
		"golang-dev@googlegroups.com",
		"lvd@gmail.com",
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"lvd@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The following code fails with -l -l -l:\n\n$ cat waitgroup.go\n\npackage sync\n\ntype WaitGroup struct {\n\tm       Mutex\n\tsema    *uint32\n}\n\nfunc (wg *WaitGroup) Add(delta int) {\n\twg.m.Lock()\n\twg.m.Unlock()\n}\n\nfunc (wg *WaitGroup) Done() {\n\twg.Add(-1)\n}\n\ntype Mutex struct {\n\tstate int32\n}\n\nfunc (m *Mutex) Lock() {\n}\n\nfunc (m *Mutex) Unlock() {\n      old := int32(0)\n\tfor {\n\t\told = m.state\n\t}\n      _ = old\n}\n\n$ cat plouf\npackage main\n\nimport _ \"./sync\"\n\n$ go tool 6g -l -l -l -l -o sync.6 waitgroup.go\n$ go tool 6g -l -l -l plouf\nplouf:3: syntax error: unexpected (, expecting name\ngo tool 6g: exit status 1",
			"disapproval": false,
			"date": "2013-01-09 19:00:48.824540",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-07 23:41:17.273210",
			"approval": false
		},
		{
			"sender": "lvd@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "tests are tricky since you can't trigger this without -lll (one of the\r\nreasons we have -lll to begin with) but we don't want to run tests with\r\n-lll because random other things may break that we really don't want to\r\nfix.  (i.e. inlining a function that does recover is going to require quite\r\na bit of plumbing to ever work at all).\r\n\r\nI trust the recover fix to fmt.c is correct and i'm happy if the comment\r\nexplains the new if/break.\r\n\r\n\r\nOn Tue, Jan 8, 2013 at 10:12 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> tests?\r\n",
			"disapproval": false,
			"date": "2013-01-08 09:21:00.100180",
			"approval": false
		},
		{
			"sender": "lvd@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7067051/diff/4001/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (right):\n\nhttps://codereview.appspot.com/7067051/diff/4001/src/cmd/gc/export.c#newcode109\nsrc/cmd/gc/export.c:109: // For some reason, the T.Method nodes may have multiple\nfuture readers would like to know for what reason, otherwise s/For some reason,//",
			"disapproval": false,
			"date": "2013-01-08 08:17:10.559920",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "tests?\r\n",
			"disapproval": false,
			"date": "2013-01-08 09:12:35.786650",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"lvd@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, lvd@gmail.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-16 21:57:30.613180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"lvd@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-30 16:34:19.579910",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"lvd@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=52940b70c0cd ***\n\ncmd/gc: fix export data for aggressive inlining.\n\nExport data was broken after revision 6b602ab487d6\nwhen -l is specified at least 3 times: it makes the compiler\nwrite out func (*T).Method() declarations in export data, which\nis not supported.\n\nAlso fix the formatting of recover() in export data. It was\nnot treated like panic() and was rendered as \"<node RECOVER>\".\n\nR=golang-dev, lvd, minux.ma, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7067051",
			"disapproval": false,
			"date": "2013-01-30 20:15:23.810900",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7067051: cmd/gc: fix export data for aggressive inlining.",
	"created": "2013-01-07 23:40:40.886680",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		18002
	],
	"modified": "2013-01-30 20:15:26.701250",
	"closed": true,
	"issue": 7067051
}