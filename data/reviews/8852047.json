{
	"description": "runtime: do hashmap grow work during reads.\n\nBefore this change, grow work was done only\nduring map writes to ensure multithreaded safety.\nThis can lead to maps remaining in a partially\ngrown state for a long time, potentially forever.\nThis change allows grow work to happen during reads,\nwhich will lead to grow work finishing sooner, making\nthe resulting map smaller and faster.\n\nGrow work is not done in parallel.  Reads can\nhappen in parallel while grow work is happening.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"khr@google.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-23 22:17:54.649370",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttps://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c#newcode447\nsrc/pkg/runtime/hashmap.c:447: h->nevacuate = n + 1;\nplease use atomicstorep() to release the lock\n\nhttps://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c#newcode448\nsrc/pkg/runtime/hashmap.c:448: if(n + 1 == noldbuckets) {\nh->B can not change while we are here, right?\notherwise here would be a subtle race if checked against wrong (smaller) h->B",
			"disapproval": false,
			"date": "2013-05-24 08:22:33.871860",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 24, 2013 at 1:22 AM, <dvyukov@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/8852047/diff/19003/src/**\r\n> pkg/runtime/hashmap.c<https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c>\r\n> File src/pkg/runtime/hashmap.c (right):\r\n>\r\n> https://codereview.appspot.**com/8852047/diff/19003/src/**\r\n> pkg/runtime/hashmap.c#**newcode447<https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c#newcode447>\r\n> src/pkg/runtime/hashmap.c:447: h->nevacuate = n + 1;\r\n> please use atomicstorep() to release the lock\r\n>\r\n\r\nDone\r\n\r\n>\r\n> https://codereview.appspot.**com/8852047/diff/19003/src/**\r\n> pkg/runtime/hashmap.c#**newcode448<https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c#newcode448>\r\n> src/pkg/runtime/hashmap.c:448: if(n + 1 == noldbuckets) {\r\n> h->B can not change while we are here, right?\r\n> otherwise here would be a subtle race if checked against wrong (smaller)\r\n> h->B\r\n>\r\n\r\nRight, while we're inside grow_work_read, we're guaranteed that no one is\r\nwriting the hashtable, so no one is calling hash_grow, which is the only\r\nthing that changes B.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/8852047/<https://codereview.appspot.com/8852047/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-24 13:28:14.404430",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 13:28:14, khr1 wrote:\n> On Fri, May 24, 2013 at 1:22 AM, <mailto:dvyukov@google.com> wrote:\n> \n> >\n> > https://codereview.appspot.**com/8852047/diff/19003/src/**\n> >\n> pkg/runtime/hashmap.c<https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c>\n> > File src/pkg/runtime/hashmap.c (right):\n> >\n> > https://codereview.appspot.**com/8852047/diff/19003/src/**\n> >\n> pkg/runtime/hashmap.c#**newcode447<https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c#newcode447>\n> > src/pkg/runtime/hashmap.c:447: h->nevacuate = n + 1;\n> > please use atomicstorep() to release the lock\n> >\n> \n> Done\n\n\nYou seem to forget to upload the new version.",
			"disapproval": false,
			"date": "2013-05-31 04:15:47.296560",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry about that, it's up now.\r\n\r\n\r\nOn Thu, May 30, 2013 at 9:15 PM, <dvyukov@google.com> wrote:\r\n\r\n> On 2013/05/24 13:28:14, khr1 wrote:\r\n>\r\n>> On Fri, May 24, 2013 at 1:22 AM, <mailto:dvyukov@google.com> wrote:\r\n>>\r\n>\r\n>  >\r\n>> > https://codereview.appspot.****com/8852047/diff/19003/src/**\r\n>> >\r\n>>\r\n>\r\n> pkg/runtime/hashmap.c<https://**codereview.appspot.com/**\r\n> 8852047/diff/19003/src/pkg/**runtime/hashmap.c<https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c>\r\n> >\r\n>\r\n>> > File src/pkg/runtime/hashmap.c (right):\r\n>> >\r\n>> > https://codereview.appspot.****com/8852047/diff/19003/src/**\r\n>> >\r\n>>\r\n>\r\n> pkg/runtime/hashmap.c#****newcode447<https://codereview.**\r\n> appspot.com/8852047/diff/**19003/src/pkg/runtime/hashmap.**c#newcode447<https://codereview.appspot.com/8852047/diff/19003/src/pkg/runtime/hashmap.c#newcode447>\r\n> >\r\n>\r\n>  > src/pkg/runtime/hashmap.c:447: h->nevacuate = n + 1;\r\n>> > please use atomicstorep() to release the lock\r\n>> >\r\n>>\r\n>\r\n>  Done\r\n>>\r\n>\r\n>\r\n> You seem to forget to upload the new version.\r\n>\r\n> https://codereview.appspot.**com/8852047/<https://codereview.appspot.com/8852047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-31 04:27:45.545240",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nI never looked at hashmap code closely before, so I am not skilled to review this in all details. But I understand what you are doing.\nIf you are sure in this and all.bash passes, I think you can submit. Or otherwise wait for another review.",
			"disapproval": false,
			"date": "2013-05-31 05:31:08.984280",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"khr@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8852047/diff/27001/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttps://codereview.appspot.com/8852047/diff/27001/src/pkg/runtime/hashmap.c#newcode120\nsrc/pkg/runtime/hashmap.c:120: CanFreeBucket = 16, // ok to free buckets\nAs far as I can tell the CanFreeBucket flag is no longer used.  It seems that the code never free buckets and always relies on the GC.  Which is fine.\n\nhttps://codereview.appspot.com/8852047/diff/27001/src/pkg/runtime/hashmap.c#newcode407\nsrc/pkg/runtime/hashmap.c:407: // Ensure that bucket has been evacuated from oldbucket so that we can modify it.\ns/oldbucket/oldbuckets/ ?",
			"disapproval": false,
			"date": "2013-06-01 00:05:41.993700",
			"approval": true
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 31, 2013 at 5:05 PM, <iant@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n>\r\n> https://codereview.appspot.**com/8852047/diff/27001/src/**\r\n> pkg/runtime/hashmap.c<https://codereview.appspot.com/8852047/diff/27001/src/pkg/runtime/hashmap.c>\r\n> File src/pkg/runtime/hashmap.c (right):\r\n>\r\n> https://codereview.appspot.**com/8852047/diff/27001/src/**\r\n> pkg/runtime/hashmap.c#**newcode120<https://codereview.appspot.com/8852047/diff/27001/src/pkg/runtime/hashmap.c#newcode120>\r\n> src/pkg/runtime/hashmap.c:120: CanFreeBucket = 16, // ok to free buckets\r\n> As far as I can tell the CanFreeBucket flag is no longer used.  It seems\r\n> that the code never free buckets and always relies on the GC.  Which is\r\n> fine.\r\n>\r\n>\r\nYes, I added a TODO to clean this up.\r\n\r\n\r\n> https://codereview.appspot.**com/8852047/diff/27001/src/**\r\n> pkg/runtime/hashmap.c#**newcode407<https://codereview.appspot.com/8852047/diff/27001/src/pkg/runtime/hashmap.c#newcode407>\r\n> src/pkg/runtime/hashmap.c:407: // Ensure that bucket has been evacuated\r\n> from oldbucket so that we can modify it.\r\n> s/oldbucket/oldbuckets/ ?\r\n>\r\n>\r\nDone.\r\n\r\n\r\n> https://codereview.appspot.**com/8852047/<https://codereview.appspot.com/8852047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-01 03:55:41.904240",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"khr@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=26a3b2e4cdfe ***\n\nruntime: do hashmap grow work during reads.\n\nBefore this change, grow work was done only\nduring map writes to ensure multithreaded safety.\nThis can lead to maps remaining in a partially\ngrown state for a long time, potentially forever.\nThis change allows grow work to happen during reads,\nwhich will lead to grow work finishing sooner, making\nthe resulting map smaller and faster.\n\nGrow work is not done in parallel.  Reads can\nhappen in parallel while grow work is happening.\n\nR=golang-dev, dvyukov, khr, iant\nCC=golang-dev\nhttps://codereview.appspot.com/8852047",
			"disapproval": false,
			"date": "2013-06-01 03:58:34.917330",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 8852047: runtime: do hashmap grow work during reads.",
	"created": "2013-04-27 05:41:04.349090",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		17001,
		19003,
		27001,
		34001,
		34002
	],
	"modified": "2013-06-02 20:59:40.185080",
	"closed": true,
	"issue": 8852047
}