{
	"description": "runtime: inline calls to notok\n\nWhen a very low-level system call that should never fail\ndoes fail, we call notok, which crashes the program.\nOften, we are then left with only the program counter as\ninformation about the crash, and it is in notok.\nInstead, inline calls to notok (it is just one instruction\non most systems) so that the program counter will\ntell us which system call is unhappy.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"minux.ma@gmail.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-03-08 18:46:06.886863",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I assume all the 2(PC) etc are still the right sizes?\n\nOn Thu, Mar 8, 2012 at 10:35 AM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> runtime: inline calls to notok\n>\n> When a very low-level system call that should never fail\n> does fail, we call notok, which crashes the program.\n> Often, we are then left with only the program counter as\n> information about the crash, and it is in notok.\n> Instead, inline calls to notok (it is just one instruction\n> on most systems) so that the program counter will\n> tell us which system call is unhappy.\n>\n> Please review this at http://codereview.appspot.com/**5792048/<http://codereview.appspot.com/5792048/>\n>\n> Affected files:\n>  M src/pkg/runtime/asm_amd64.s\n>  M src/pkg/runtime/sys_darwin_**386.s\n>  M src/pkg/runtime/sys_darwin_**amd64.s\n>  M src/pkg/runtime/sys_freebsd_**386.s\n>  M src/pkg/runtime/sys_freebsd_**amd64.s\n>  M src/pkg/runtime/sys_linux_**amd64.s\n>  M src/pkg/runtime/sys_linux_arm.**s\n>  M src/pkg/runtime/sys_netbsd_**386.s\n>  M src/pkg/runtime/sys_netbsd_**amd64.s\n>  M src/pkg/runtime/sys_openbsd_**386.s\n>  M src/pkg/runtime/sys_openbsd_**amd64.s\n>  M src/pkg/runtime/sys_windows_**amd64.s\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-08 18:59:00.145846",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 10:59 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Mar 8, 2012 at 13:58, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > I assume all the 2(PC) etc are still the right sizes?\n>\n> Yes, 2(PC) means 2 instructions after the current one.\n>\n\nAh. Thought it was size of instructions. If you need me, I'll be up in http\nland.\n",
			"disapproval": false,
			"date": "2012-03-08 19:02:46.868271",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 8, 2012 at 13:58, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I assume all the\u00a02(PC) etc are still the right sizes?\n\nYes, 2(PC) means 2 instructions after the current one.\n",
			"disapproval": false,
			"date": "2012-03-08 18:59:32.986758",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-08 18:35:05.646303",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6c3cab48b9e3 ***\n\nruntime: inline calls to notok\n\nWhen a very low-level system call that should never fail\ndoes fail, we call notok, which crashes the program.\nOften, we are then left with only the program counter as\ninformation about the crash, and it is in notok.\nInstead, inline calls to notok (it is just one instruction\non most systems) so that the program counter will\ntell us which system call is unhappy.\n\nR=golang-dev, gri, minux.ma, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5792048",
			"disapproval": false,
			"date": "2012-03-08 19:03:59.814539",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n- some // crash comments are not aligned (don't care too much)\n- isn't there a panic or the like opcode on x86? (0xcc opcode)\n- I would add a panic pseudo assembly instruction to the compiler which could do the right thing for each architecture\n\nhttp://codereview.appspot.com/5792048/diff/2013/src/pkg/runtime/asm_amd64.s\nFile src/pkg/runtime/asm_amd64.s (right):\n\nhttp://codereview.appspot.com/5792048/diff/2013/src/pkg/runtime/asm_amd64.s#newcode67\nsrc/pkg/runtime/asm_amd64.s:67: PUSHQ\t$runtime\u00b7main(SB)\t\t// entry\nalign comment ?\n\nhttp://codereview.appspot.com/5792048/diff/2013/src/pkg/runtime/asm_amd64.s#newcode76\nsrc/pkg/runtime/asm_amd64.s:76: MOVL\t$0xf1, 0xf1  // crash\nalign comment?",
			"disapproval": false,
			"date": "2012-03-08 18:43:59.279074",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.\n\nOn Thu, Mar 8, 2012 at 13:43,  <gri@golang.org> wrote:\n> - isn't there a panic or the like opcode on x86? (0xcc opcode)\n> - I would add a panic pseudo assembly instruction to the compiler which\n> could do the right thing for each architecture\n\n0xcc is breakpoint.  It's not clear if we want that or not.\nFor now I am happy with commented instructions.\nI'm just trying to make bug reports a little easier to read.\nWe could make more sweeping changes after Go 1.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-08 18:55:56.874377",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/08 18:43:59, gri wrote:\n> - isn't there a panic or the like opcode on x86? (0xcc opcode)\n0xcc (int 3) will trigger SIGTRAP and its default behavior is SigThrow, not SigPanic.\n> - I would add a panic pseudo assembly instruction to the compiler which could do\n> the right thing for each architecture\nThis is a good idea.",
			"disapproval": false,
			"date": "2012-03-08 18:57:25.863859",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5792048: runtime: inline calls to notok",
	"created": "2012-03-08 18:32:54.892849",
	"patchsets": [
		1,
		1002,
		2013,
		2014
	],
	"modified": "2012-03-08 19:04:01.327197",
	"closed": true,
	"issue": 5792048
}