{
	"description": "FAQ: many small fixes and adjustments",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-20 01:36:02.433657",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Feb 20, 2012 at 12:36 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> FAQ: many small fixes and adjustments\n>\n> Please review this at http://codereview.appspot.com/**5685048/<http://codereview.appspot.com/5685048/>\n>\n> Affected files:\n>  M doc/go_faq.html\n>\n>\n> Index: doc/go_faq.html\n> ==============================**==============================**=======\n> --- a/doc/go_faq.html\n> +++ b/doc/go_faq.html\n> @@ -485,6 +485,7 @@\n>  image files.  All these ideas stem from a single interface\n>  (<code>io.Writer</code>) representing a single method\n>  (<code>Write</code>).  And that's only scratching the surface.\n> +Go's interfaces have a profound influence on how programs are structured.\n>  </p>\n>\n>  <p>\n> @@ -840,12 +841,12 @@\n>  value comparison, how to deal with recursive types, and so on.\n>  We may revisit this issue&mdash;and implementing equality for slices\n>  will not invalidate any existing programs&mdash;but without a clear idea\n> of what\n> -equality of structs and arrays should mean, it was simpler to leave it\n> out for now.\n> +equality of slices should mean, it was simpler to leave it out for now.\n>  </p>\n>\n>  <p>\n> -In Go 1, equality is defined for structs and arrays, so such\n> -types can be used as map keys, but slices still do not have a definition\n> of equality.\n> +In Go 1, unlike prior releases, equality is defined for structs and\n> arrays, so such\n> +types can be used as map keys. Slices still do not have a definition of\n> equality, though.\n>  </p>\n>\n>  <h3 id=\"references\">\n> @@ -941,7 +942,7 @@\n>  For programmers unaccustomed to pointers, the distinction between these\n>  two examples can be confusing, but the situation is actually very simple.\n>  When defining a method on a type, the receiver (<code>s</code> in the\n> above\n> -example) behaves exactly as if it were an argument to the method.\n> +examples) behaves exactly as if it were an argument to the method.\n>  Whether to define the receiver as a value or as a pointer is the same\n>  question, then, as whether a function argument should be a value or\n>  a pointer.\n> @@ -1082,15 +1083,15 @@\n>  Why doesn't my multi-goroutine program use multiple CPUs?</h3>\n>\n>  <p>\n> -You must set <code>GOMAXPROCS</code> to allow the\n> +You must set the <code>GOMAXPROCS</code> shell environment variable\n> +or use the similarly-named <a href=\"/pkg/runtime/#**\n> GOMAXPROCS\"><code>function</**code></a>\n> +of the runtime package to allow the\n>  run-time support to utilize more than one OS thread.\n>  </p>\n>\n>  <p>\n>  Programs that perform parallel computation should benefit from an\n> increase in\n> -<code>GOMAXPROCS</code>. (See the <a\n> -href=\"http://golang.org/pkg/**runtime/#GOMAXPROCS<http://golang.org/pkg/runtime/#GOMAXPROCS>\n> \"><code>**runtime</code> package's\n> -documentation</a>.)\n> +<code>GOMAXPROCS</code>.\n>  </p>\n>\n>  <h3 id=\"Why_GOMAXPROCS\">\n> @@ -1148,7 +1149,10 @@\n>  </p>\n>\n>  <p>\n> -If not for this restriction, this code:\n> +Even in cases where the compiler could take the address of a value\n> +to pass to the method, if the method modifies the value the changes\n> +will be lost in the caller.\n> +As a common example, this code:\n>  </p>\n>\n>  <pre>\n> @@ -1174,7 +1178,7 @@\n>  func main() {\n>     done := make(chan bool)\n>\n> -    values := []string{ \"a\", \"b\", \"c\" }\n> +    values := []string{\"a\", \"b\", \"c\"}\n>     for _, v := range values {\n>         go func() {\n>             fmt.Println(v)\n> @@ -1268,18 +1272,21 @@\n>  </pre>\n>\n>  <p>\n> -Run <code>gotest</code> in that directory.\n> +Run <code>go test</code> in that directory.\n>  That script finds the <code>Test</code> functions,\n>  builds a test binary, and runs it.\n>  </p>\n>\n> -<p>See the <a href=\"/doc/code.html\">How to Write Go Code</a> document for\n> more details.</p>\n> +<p>See the <a href=\"/doc/code.html\">How to Write Go Code</a> document,\n> +the <a href=\"/pkg/testing/\"><code>**testing</code></a> package\n> +and the <a href=\"/cmd/go/#Test_packages\">**<code>go test</code></a>\n> subcommand for more details.\n> +</p>\n>\n>  <h3 id=\"testing_framework\">\n>  Where is my favorite helper function for testing?</h3>\n>\n>  <p>\n> -Go's standard <code>testing</code> package makes it easy to write unit\n> tests, but it lacks\n> +Go's standard <a href=\"/pkg/testing/\"><code>**testing</code></a> package\n> makes it easy to write unit tests, but it lacks\n>  features provided in other language's testing frameworks such as\n> assertion functions.\n>  An <a href=\"#assertions\">earlier section</a> of this document explained\n> why Go\n>  doesn't have assertions, and\n> @@ -1371,9 +1378,9 @@\n>\n>  <p>\n>  A trivial C \"hello, world\" program compiled and linked statically using\n> gcc\n> -on Linux is around 750 kB.  An equivalent Go program is around 1.1 MB, but\n> -that includes more powerful run-time support.  We believe that with some\n> effort\n> -the size of Go binaries can be reduced.\n> +on Linux is around 750 kB.  An equivalent Go program using\n> <code>fmt.Printf</code>\n> +is around 1.3 MB, but\n> +that includes more powerful run-time support.\n>  </p>\n>\n>  <h3 id=\"unused_variables_and_**imports\">\n> @@ -1438,7 +1445,7 @@\n>  <p>\n>  One of Go's design goals is to approach the performance of C for\n> comparable\n>  programs, yet on some benchmarks it does quite poorly, including several\n> -in <a href=\"/test/bench/\">test/**bench</a>. The slowest depend on\n> libraries\n> +in <a href=\"/test/bench/shootout/\">**test/bench/shootout</a>. The\n> slowest depend on libraries\n>  for which versions of comparable performance are not available in Go.\n>  For instance, <a href=\"/test/bench/shootout/**\n> pidigits.go\">pidigits.go</a>\n>  depends on a multi-precision math package, and the C\n> @@ -1467,7 +1474,10 @@\n>  </p>\n>\n>  <p>\n> -In any case, Go can often be very competitive. See the blog post about\n> +In any case, Go can often be very competitive.\n> +There has been significant improvement in the performance of many programs\n> +as the language and tools have developed.\n> +See the blog post about\n>  <a href=\"http://blog.golang.org/**2011/06/profiling-go-programs.**html<http://blog.golang.org/2011/06/profiling-go-programs.html>\n> \">profiling\n>  Go programs</a> for an informative example.\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-20 01:38:41.666823",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 8759e83c1b14 ***\n\nFAQ: many small fixes and adjustments\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5685048",
			"disapproval": false,
			"date": "2012-02-20 01:42:56.056163",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5685048: FAQ: many small fixes and adjustments",
	"created": "2012-02-20 01:35:52.965855",
	"patchsets": [
		1,
		3
	],
	"modified": "2012-02-20 01:42:58.429042",
	"closed": true,
	"issue": 5685048
}