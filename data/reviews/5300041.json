{
	"description": "html: parse raw text and RCDATA elements\n\nIn the contents of elements such as <script> and <title>,\ninterpret everything as text except the element's end tag.\n\nPass tests1.dat, test 26:\n#data\n<script><div></script></div><title><p></title><p><p>\n#document\n| <html>\n|   <head>\n|     <script>\n|       \"<div>\"\n|     <title>\n|       \"<p>\"\n|   <body>\n|     <p>\n|     <p>",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nigeltao@golang.org"
	],
	"messages": [
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please review these changes.\n\n(I'm having some trouble with the codereview tool, so I'm sending this message manually.)",
			"disapproval": false,
			"date": "2011-10-18 03:44:41.913099",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-18 15:27:35.367888",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-18 03:46:57.380696",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I'm not convinced about the changes to token.go. It goes against the (again, unwritten) model where Next updates the tokenizer state for the current token, and possibly trashes any buffers for the previous token. By having Next look at the previous token's Data, you're trusting that the caller hasn't overwritten that buffer for their own purpose. I also don't like how it requires TagName to be idempotent, unlike Text or TagAttr.\n\nInstead, I would prefer internal state to stay internal. I've done this and added some more tests in http://codereview.appspot.com/5301042. WDYT?\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/parse.go\nFile src/pkg/html/parse.go (right):\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/parse.go#newcode219\nsrc/pkg/html/parse.go:219: if p.originalMode == delegate {\nI don't see where this happens either in html5lib or in the spec http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#using-the-rules-for\n\nI could just be dumb here -- html5lib doesn't have a useTheRulesFor helper method. Can you clarify?\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/parse.go#newcode584\nsrc/pkg/html/parse.go:584: // Section 13.2.5.4.8.\nAh, the numbering has changed since this file was created. Can you s/13/11/ for now? A future change can fix s/11/13/ for the whole file, similar to http://codereview.appspot.com/4699048/.\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/parse_test.go\nFile src/pkg/html/parse_test.go (right):\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/parse_test.go#newcode89\nsrc/pkg/html/parse_test.go:89: fmt.Fprintf(w, \"<!DOCTYPE %s>\", EscapeString(n.Data))\nYou might as well delete the EscapeString here too.\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/render.go#newcode114\nsrc/pkg/html/render.go:114: case \"script\", \"style\", \"noembed\", \"noframes\", \"noscript\":\nWhat about \"textarea\" and \"title\"?\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/render.go#newcode119\nsrc/pkg/html/render.go:119: _, err := w.WriteString(c.Data)\nI'd join this line and the next one:\nif _, err := w.WriteString(c.Data); err != nil {\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/token.go\nFile src/pkg/html/token.go (right):\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/token.go#newcode516\nsrc/pkg/html/token.go:516: if c != tag[i] {\nI think that this needs to be a case-insensitive comparison.",
			"disapproval": false,
			"date": "2011-10-18 07:22:05.769331",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 18 October 2011 18:22,  <nigeltao@golang.org> wrote:\n> I'm not convinced about the changes to token.go. It goes against the\n> (again, unwritten) model where Next updates the tokenizer state for the\n> current token, and possibly trashes any buffers for the previous token.\n> By having Next look at the previous token's Data, you're trusting that\n> the caller hasn't overwritten that buffer for their own purpose.\n\nTo clarify, the mental model is that inside Next, the buffers belong\nto the tokenizer. Outside Next, i.e. after Next returns and before the\nsubsequent call to Next, the buffers belong to the caller, in that\nthey can overwrite the buffers' contents (but not increase their len\ntowards cap) if they want to.\n",
			"disapproval": false,
			"date": "2011-10-18 07:46:14.242449",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5300041/diff/8001/src/pkg/html/parse.go\nFile src/pkg/html/parse.go (right):\n\nhttp://codereview.appspot.com/5300041/diff/8001/src/pkg/html/parse.go#newcode219\nsrc/pkg/html/parse.go:219: if p.originalMode == delegate {\nOn 2011/10/18 07:22:05, nigeltao wrote:\n> I don't see where this happens either in html5lib or in the spec\n> http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#using-the-rules-for\n> \n> I could just be dumb here -- html5lib doesn't have a useTheRulesFor helper\n> method. Can you clarify?\n\nThe original insertion mode needs to be the actual current insertion mode, not the delegate.\n\nFor example, a script tag in the body is supposed to be parsed using the rules for \"in head\". (I don't think we've implemented this yet.) inHeadIM would set the original insertion mode to inHeadIM, but this would not be right. So useTheRulesFor would need to change it to inBodyIM.\n\nAnother alternative would be to have a field in the parser for the current (actual) insertion mode, which gets updated by the main loop. Then that could simply be copied to originalMode as needed.",
			"disapproval": false,
			"date": "2011-10-18 15:25:22.030927",
			"approval": false
		}
	],
	"owner_email": "andybalholm@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andybalholm",
	"subject": "code review 5300041: html: parse raw text and RCDATA elements",
	"created": "2011-10-18 03:28:33.112138",
	"patchsets": [
		1,
		2001,
		6001,
		8001
	],
	"modified": "2011-10-18 15:27:38.850586",
	"closed": true,
	"issue": 5300041
}