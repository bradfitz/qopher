{
	"description": "spec: disallow recursive embedded interfaces\n\nFixes issue 1814.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5647054/diff/3001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5647054/diff/3001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of February 6, 2012\"\ns/6/8/\n\nhttp://codereview.appspot.com/5647054/diff/3001/doc/go_spec.html#newcode1138\ndoc/go_spec.html:1138: An interface definition for type <code>T</code> may not embed itself,\ns/may/must/ ?\n\nhttp://codereview.appspot.com/5647054/diff/3001/doc/go_spec.html#newcode1145\ndoc/go_spec.html:1145: Bad\nmaybe put the // illegal comment on this line and be specific:\n\n   Bad             // illegal: interface must not embed itself\n\nhttp://codereview.appspot.com/5647054/diff/3001/doc/go_spec.html#newcode1150\ndoc/go_spec.html:1150: Bad2\n     Bad2          // illegal: interface must not embed itself through Bad2",
			"disapproval": false,
			"date": "2012-02-08 18:36:02.318307",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 15:24,  <r@golang.org> wrote:\n> what does indirectly mean?\n\nit means that the Bad1 -> Bad2 -> Bad3 -> Bad1 case is not allowed either.\ni will drop indirectly under the assumption that that's clear.\n",
			"disapproval": false,
			"date": "2012-02-08 20:25:57.590132",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2b67c250bb95 ***\n\nspec: disallow recursive embedded interfaces\n\nFixes issue 1814.\n\nR=golang-dev, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5647054",
			"disapproval": false,
			"date": "2012-02-08 19:35:02.899259",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5647054/diff/5002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5647054/diff/5002/doc/go_spec.html#newcode1145\ndoc/go_spec.html:1145: nor any interface type that embeds <code>T</code> directly or indirectly.\nthe \"nor\" is fussy and a little confusing.\n\ns/, nor/or/ is fine and clear\n\nwhat does indirectly mean? there is no indirection",
			"disapproval": false,
			"date": "2012-02-08 20:24:18.725381",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-08 18:20:12.573201",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5647054/diff/5002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5647054/diff/5002/doc/go_spec.html#newcode1125\ndoc/go_spec.html:1125: The effect, called embedding an interface,\nembed is used sparingly in the doc - its only prior use was a parenthetical remark that contained the adverb \"colloquially\".\nthe usage here should be consistent.\ni suggest changing 900-902 from\n\nA field declared with a type but no explicit field name is an <i>anonymous field</i>\n(colloquially called an embedded field).\nSuch a field type must be specified as\n\nto\n\n\nA field declared with a type but no explicit field name is an <i>anonymous field</i>;\nalso called an <i>embedded</i> field or an embedding of the type in the struct.\nAn embedded type must be specified as",
			"disapproval": false,
			"date": "2012-02-08 20:22:06.044968",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5647054: spec: disallow recursive embedded interfaces",
	"created": "2012-02-08 18:19:46.335779",
	"patchsets": [
		1,
		1002,
		3001,
		5002
	],
	"modified": "2012-02-08 20:24:19.212904",
	"closed": true,
	"issue": 5647054
}