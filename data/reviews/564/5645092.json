{
	"description": "strings: more examples",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"reviewers": [
		"rogpeppe@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go\nFile src/pkg/strings/example_test.go (right):\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode33\nsrc/pkg/strings/example_test.go:33: fmt.Println(strings.ContainsAny(\"seafood\", \"foo\"))\nAll this seafood is making me queasy.\n\nLet's pick some more illustrative examples:\n\n\"team\", \"I\", false\n\"team\", \"me\", true\n\"something\", \"\", false\n\"\", \"\", false\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode43\nsrc/pkg/strings/example_test.go:43: fmt.Println(strings.Count(\"seafood\", \"o\"))\n\"cheese\", \"e\", 2\n\"five\", \"\", 5\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode55\nsrc/pkg/strings/example_test.go:55: fmt.Println(strings.Index(\"seafood\", \"foo\"))\n\"chicken\", \"ken\", 4\n\"chicken\", \"dmr\", -1\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode63\nsrc/pkg/strings/example_test.go:63: fmt.Println(\"first o:\", strings.Index(\"seafood\", \"o\"))\n\"go gopher\", \"go\", 0\nlast \"go gopher\", \"go\", 3\n\"go gopher\", \"rodent\", -1\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode82\nsrc/pkg/strings/example_test.go:82: fmt.Println(strings.Replace(\"bar bar bar bar\", \"bar\", \"foo\", 2))\n\"oink oink oink\", \"k\", \"ky\", 2, \"oinky oinky oink\"\n\"oink oink oink\", \"oink\", \"moo\", -1, \"moo moo moo\"\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode89\nsrc/pkg/strings/example_test.go:89: fmt.Printf(\"%q\\n\", strings.Split(\"a,b,c\", \",\"))\nmaybe a single example would suffice:\n\"a man a plan a canal panama\", \"a \", [\"\", \"man\", \"plan\", \"canal panama\"]\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode105\nsrc/pkg/strings/example_test.go:105: fmt.Println(strings.Title(\"foo bar baz\"))\n\"her royal highness\"\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode111\nsrc/pkg/strings/example_test.go:111: fmt.Println(strings.ToTitle(\"foo bar baz\"))\n\"loud noises\"\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode117\nsrc/pkg/strings/example_test.go:117: fmt.Println(strings.Trim(\" !!! Notice !!! \", \"! \"))\nACHTUNG\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode122\nsrc/pkg/strings/example_test.go:122: fmt.Println(strings.TrimSpace(\" \\t\\n foo \\n\\t\\r\\n\"))\ns/foo/a lone gopher/\n\n(shows that spaces inside are not trimmed)",
			"disapproval": false,
			"date": "2012-02-13 00:23:37.654814",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-13 00:43:09.070625",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go\nFile src/pkg/strings/example_test.go (right):\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode33\nsrc/pkg/strings/example_test.go:33: fmt.Println(strings.ContainsAny(\"seafood\", \"foo\"))\nOn 2012/02/13 00:23:37, adg wrote:\n> All this seafood is making me queasy.\n> \n> Let's pick some more illustrative examples:\n> \n> \"team\", \"I\", false\n> \"team\", \"me\", true\n> \"something\", \"\", false\n> \"\", \"\", false\n\nDone.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode43\nsrc/pkg/strings/example_test.go:43: fmt.Println(strings.Count(\"seafood\", \"o\"))\nOn 2012/02/13 00:23:37, adg wrote:\n> \"cheese\", \"e\", 2\n> \"five\", \"\", 5\n\nDone.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode55\nsrc/pkg/strings/example_test.go:55: fmt.Println(strings.Index(\"seafood\", \"foo\"))\nOn 2012/02/13 00:23:37, adg wrote:\n> \"chicken\", \"ken\", 4\n> \"chicken\", \"dmr\", -1\n\nDone.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode63\nsrc/pkg/strings/example_test.go:63: fmt.Println(\"first o:\", strings.Index(\"seafood\", \"o\"))\nOn 2012/02/13 00:23:37, adg wrote:\n> \"go gopher\", \"go\", 0\n> last \"go gopher\", \"go\", 3\n> \"go gopher\", \"rodent\", -1\n> \n\nDone.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode82\nsrc/pkg/strings/example_test.go:82: fmt.Println(strings.Replace(\"bar bar bar bar\", \"bar\", \"foo\", 2))\nOn 2012/02/13 00:23:37, adg wrote:\n> \"oink oink oink\", \"k\", \"ky\", 2, \"oinky oinky oink\"\n> \"oink oink oink\", \"oink\", \"moo\", -1, \"moo moo moo\" \n\nDone.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode89\nsrc/pkg/strings/example_test.go:89: fmt.Printf(\"%q\\n\", strings.Split(\"a,b,c\", \",\"))\nOn 2012/02/13 00:23:37, adg wrote:\n> maybe a single example would suffice:\n> \"a man a plan a canal panama\", \"a \", [\"\", \"man\", \"plan\", \"canal panama\"]\n\nadded that one because it's fun, but didn't remove others which are easier to read quickly.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode105\nsrc/pkg/strings/example_test.go:105: fmt.Println(strings.Title(\"foo bar baz\"))\nOn 2012/02/13 00:23:37, adg wrote:\n> \"her royal highness\"\n\nDone.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode111\nsrc/pkg/strings/example_test.go:111: fmt.Println(strings.ToTitle(\"foo bar baz\"))\nOn 2012/02/13 00:23:37, adg wrote:\n> \"loud noises\"\n\nDone.\n\nhttp://codereview.appspot.com/5645092/diff/2001/src/pkg/strings/example_test.go#newcode117\nsrc/pkg/strings/example_test.go:117: fmt.Println(strings.Trim(\" !!! Notice !!! \", \"! \"))\nOn 2012/02/13 00:23:37, adg wrote:\n> ACHTUNG\n\nDone.",
			"disapproval": false,
			"date": "2012-02-13 00:42:58.437183",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-12 23:59:11.463787",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5645092/diff/3/src/pkg/strings/example_test.go\nFile src/pkg/strings/example_test.go (right):\n\nhttp://codereview.appspot.com/5645092/diff/3/src/pkg/strings/example_test.go#newcode34\nsrc/pkg/strings/example_test.go:34: fmt.Println(strings.ContainsAny(\"team\", \"me\"))\nRob's suggested \"failure\", \"ui\" is probably better",
			"disapproval": false,
			"date": "2012-02-13 01:39:53.992863",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=98b6d9db715a ***\n\nstrings: more examples\n\nR=golang-dev, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5645092",
			"disapproval": false,
			"date": "2012-02-13 03:06:04.537553",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'd like to see an example that demonstrates that Split(\"\", anything)\nreturns a slice with one element, which is non-obvious (to me, at any\nrate) from the documentation.\n\nOn 13 February 2012 03:06,  <bradfitz@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=98b6d9db715a ***\n>\n> strings: more examples\n>\n> R=golang-dev, adg\n> CC=golang-dev\n> http://codereview.appspot.com/5645092\n>\n>\n> http://codereview.appspot.com/5645092/\n",
			"disapproval": false,
			"date": "2012-02-13 16:42:23.250268",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 13, 2012 at 11:42, roger peppe <rogpeppe@gmail.com> wrote:\n> i'd like to see an example that demonstrates that Split(\"\", anything)\n> returns a slice with one element, which is non-obvious (to me, at any\n> rate) from the documentation.\n\nplease send one in.\n",
			"disapproval": false,
			"date": "2012-02-14 16:15:28.656615",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5645092: strings: more examples",
	"created": "2012-02-12 23:58:16.790772",
	"patchsets": [
		1,
		2001,
		3,
		4005
	],
	"modified": "2012-02-14 16:15:28.812369",
	"closed": true,
	"issue": 5645092
}