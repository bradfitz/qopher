{
	"description": "os: talk about errors and PathError in the package documentation\n\nFixes issue 2383.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"adg@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/09 02:06:25, bradfitz wrote:\n> LGTM Nice addition to the overview, but doesn't address the newbie question\n> of \"does the file exist or not?\" on Open/Stat error.\n\nThis would make a good example function.",
			"disapproval": false,
			"date": "2012-02-09 02:51:16.629612",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-02-09 05:52:17.170682",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1edfcf8258af ***\n\nos: talk about errors and PathError in the package documentation\n\nFixes issue 2383.\n\nR=golang-dev, bradfitz, adg, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5641061",
			"disapproval": false,
			"date": "2012-02-09 05:55:42.801688",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM Nice addition to the overview, but doesn't address the newbie question\nof \"does the file exist or not?\" on Open/Stat error.\n\nUsing Create as an example of when a file doesn't exist is a little\nmisleading (ENOENT really then means a path component of the directory, but\nthat gets too wordy, so I'd just omit mention of Create)\n\n\nOn Wed, Feb 8, 2012 at 5:00 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> os: talk about errors in the package doc\n>\n> Fixes issue 2383.\n>\n> Please review this at http://codereview.appspot.com/**5641061/<http://codereview.appspot.com/5641061/>\n>\n> Affected files:\n>  M src/pkg/os/file.go\n>\n>\n> Index: src/pkg/os/file.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/file.go\n> +++ b/src/pkg/os/file.go\n> @@ -3,7 +3,14 @@\n>  // license that can be found in the LICENSE file.\n>\n>  // Package os provides a platform-independent interface to operating\n> system\n> -// functionality.  The design is Unix-like.\n> +// functionality. The design is Unix-like, although the error handling is\n> +// Go-like; failing calls return values of type error rather than error\n> numbers.\n> +// Often, more information is available within the error. For example,\n> +// if a file does not exist in a call to Open, Create, Stat, and so on,\n> +// the error will include the name of the missing file when printed.\n> +// It will often be of type *os.PathError and may be unpacked for more\n> +// information.\n> +//\n>  // The os interface is intended to be uniform across all operating\n> systems.\n>  // Features not generally available appear in the system-specific package\n> syscall.\n>  package os\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-09 02:06:25.363698",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-09 01:00:32.305640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Wed, Feb 8, 2012 at 6:31 PM, <r@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5641061/<http://codereview.appspot.com/5641061/>\n>\n",
			"disapproval": false,
			"date": "2012-02-09 05:44:56.905899",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-09 02:31:07.533256",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 6:51 PM, <adg@golang.org> wrote:\n\n> On 2012/02/09 02:06:25, bradfitz wrote:\n>\n>> LGTM Nice addition to the overview, but doesn't address the newbie\n>>\n> question\n>\n>> of \"does the file exist or not?\" on Open/Stat error.\n>>\n>\n> This would make a good example function.\n>\n\nMaybe. Or it's misleading. Rob makes a good point that it's often wrong to\nlook for that error explicitly.\n\nI could only think up rather sophisticated valid uses.\n",
			"disapproval": false,
			"date": "2012-02-09 05:44:25.992491",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5641061: os: talk about errors and PathError in the package docu...",
	"created": "2012-02-09 01:00:23.454916",
	"patchsets": [
		1,
		3001,
		4010
	],
	"modified": "2012-02-09 05:55:45.273640",
	"closed": true,
	"issue": 5641061
}