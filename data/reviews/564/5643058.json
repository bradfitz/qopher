{
	"description": "encoding/json: document buffering\n\nFixes issue 1955.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-08 15:23:09.481955",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Never mind. Just seen the other mail.\nLGTM.\n- gri\n\nOn Wed, Feb 8, 2012 at 9:08 AM, Robert Griesemer <gri@golang.org> wrote:\n> What about not reading too much if the reader is a ByteReader instead?\n> - gri\n>\n> On Wed, Feb 8, 2012 at 7:23 AM, \u00a0<rsc@golang.org> wrote:\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com,\n>>\n>> I'd like you to review this change to\n>> https://code.google.com/p/go/\n>>\n>>\n>> Description:\n>> encoding/json: document buffering\n>>\n>> Fixes issue 1955.\n>>\n>> Please review this at http://codereview.appspot.com/5643058/\n>>\n>> Affected files:\n>> \u00a0M src/pkg/encoding/json/stream.go\n>>\n>>\n>> Index: src/pkg/encoding/json/stream.go\n>> ===================================================================\n>> --- a/src/pkg/encoding/json/stream.go\n>> +++ b/src/pkg/encoding/json/stream.go\n>> @@ -19,6 +19,9 @@\n>> \u00a0}\n>>\n>> \u00a0// NewDecoder returns a new decoder that reads from r.\n>> +//\n>> +// The decoder introduces its own buffering and may\n>> +// read data from r beyond the JSON values requested.\n>> \u00a0func NewDecoder(r io.Reader) *Decoder {\n>> \u00a0 \u00a0 \u00a0 \u00a0return &Decoder{r: r}\n>> \u00a0}\n>>\n>>\n",
			"disapproval": false,
			"date": "2012-02-08 17:09:23.714670",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about not reading too much if the reader is a ByteReader instead?\n- gri\n\nOn Wed, Feb 8, 2012 at 7:23 AM,  <rsc@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> encoding/json: document buffering\n>\n> Fixes issue 1955.\n>\n> Please review this at http://codereview.appspot.com/5643058/\n>\n> Affected files:\n> \u00a0M src/pkg/encoding/json/stream.go\n>\n>\n> Index: src/pkg/encoding/json/stream.go\n> ===================================================================\n> --- a/src/pkg/encoding/json/stream.go\n> +++ b/src/pkg/encoding/json/stream.go\n> @@ -19,6 +19,9 @@\n> \u00a0}\n>\n> \u00a0// NewDecoder returns a new decoder that reads from r.\n> +//\n> +// The decoder introduces its own buffering and may\n> +// read data from r beyond the JSON values requested.\n> \u00a0func NewDecoder(r io.Reader) *Decoder {\n> \u00a0 \u00a0 \u00a0 \u00a0return &Decoder{r: r}\n> \u00a0}\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-08 17:08:40.949526",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8969fb908048 ***\n\nencoding/json: document buffering\n\nFixes issue 1955.\n\nR=golang-dev, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5643058",
			"disapproval": false,
			"date": "2012-02-08 18:48:06.340240",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5643058: encoding/json: document buffering",
	"created": "2012-02-08 15:22:26.010004",
	"patchsets": [
		1,
		1002,
		3001,
		2002
	],
	"modified": "2012-02-08 18:48:07.218706",
	"closed": true,
	"issue": 5643058
}