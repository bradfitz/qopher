{
	"description": "encoding/xml: fix documentation for Decoder.Skip\n\nFixes issue 2850.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-07 03:40:33.421779",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=62b53dd27272 ***\n\nencoding/xml: fix documentation for Decoder.Skip\n\nFixes issue 2850.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5645043",
			"disapproval": false,
			"date": "2012-02-07 05:15:42.065412",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nOn Feb 6, 2012 7:40 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> encoding/xml: fix documentation for Decoder.Skip\n>\n> Fixes issue 2850.\n>\n> Please review this at http://codereview.appspot.com/**5645043/<http://codereview.appspot.com/5645043/>\n>\n> Affected files:\n>  M src/pkg/encoding/xml/read.go\n>\n>\n> Index: src/pkg/encoding/xml/read.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/xml/read.go\n> +++ b/src/pkg/encoding/xml/read.go\n> @@ -542,10 +542,12 @@\n>        panic(\"unreachable\")\n>  }\n>\n> -// Have already read a start element.\n> -// Read tokens until we find the end element.\n> -// Token is taking care of making sure the\n> -// end element matches the start element we saw.\n> +// Skip reads tokens until it has consumed the end element\n> +// matching the most recent start element already consumed.\n> +// It recurs if it encounters a start element, so it can be used to\n> +// skip nested structures.\n> +// It returns nil if it finds an end element matching the start\n> +// element; otherwise it returns an error describing the problem.\n>  func (d *Decoder) Skip() error {\n>        for {\n>                tok, err := d.Token()\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-07 04:06:49.428770",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5645043: encoding/xml: fix documentation for Decoder.Skip",
	"created": "2012-02-07 03:40:26.303273",
	"patchsets": [
		1,
		3002
	],
	"modified": "2012-02-07 05:15:43.894840",
	"closed": true,
	"issue": 5645043
}