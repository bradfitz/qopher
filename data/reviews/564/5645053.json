{
	"description": "go/doc: Handle recursive embedded types.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for finding this!\n\nPlease make the suggested adjustments.\n- gri\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go#newcode546\nsrc/pkg/go/doc/reader.go:546: func (r *reader) collectEmbeddedMethods(mset methodSet, typ *namedType, recvTypeName string, embeddedIsPtr bool, level int, visited []*namedType) {\nplease make this a map:\n\nvisited map[*namedType]bool\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go#newcode547\nsrc/pkg/go/doc/reader.go:547: for _, v := range visited {\nget rid of the for loop\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go#newcode552\nsrc/pkg/go/doc/reader.go:552: visited = append(visited, typ)\nvisited[typ] = true\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go#newcode566\nsrc/pkg/go/doc/reader.go:566: r.collectEmbeddedMethods(mset, embedded, recvTypeName, thisEmbeddedIsPtr, level+1, visited)\nif !visited[embedded] {\n   r.collectEmbeddedMethods...\n}\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go#newcode577\nsrc/pkg/go/doc/reader.go:577: r.collectEmbeddedMethods(t.methods, t, t.name, false, 1, make([]*namedType, 0, 8))\nmake(map[*namedType]bool)\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go\nFile src/pkg/go/doc/testdata/e.go (right):\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go#newcode82\nsrc/pkg/go/doc/testdata/e.go:82: // Handle recursion\nChange to:\n\nRecursive type declarations must not lead to endless recursion.\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go#newcode84\nsrc/pkg/go/doc/testdata/e.go:84: type T6 struct {\nPlease add also a test case of self-recursion (before the others), as well as a recursive test case w/ non-exported types.\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go#newcode88\nsrc/pkg/go/doc/testdata/e.go:88: func (*T6) M() {}\nPlease add comments to the methods in the style used above:\n// T6.M should appear as method of ...",
			"disapproval": false,
			"date": "2012-02-08 17:49:04.829315",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I found this bug by parsing 600+ packages found in the wild.\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go#newcode546\nsrc/pkg/go/doc/reader.go:546: func (r *reader) collectEmbeddedMethods(mset methodSet, typ *namedType, recvTypeName string, embeddedIsPtr bool, level int, visited []*namedType) {\nOn 2012/02/08 17:49:05, gri wrote:\n> please make this a map:\n> \n> visited map[*namedType]bool\n\nI rejected using map[*namedType]bool because it does not handle the case where a type appears at different levels in different branches of the embedding hierarchy. I added type V1 to testdata/e.go to cover this scenario.\n\nI updated the code to use map[*namedType]int where the value in the map the highest visited level for the type. It's a slight improvement over my original code because it skips a type if the type was ever visited at a higher level in the tree.  It's also shorter than my original code.\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/reader.go#newcode547\nsrc/pkg/go/doc/reader.go:547: for _, v := range visited {\nOn 2012/02/08 17:49:05, gri wrote:\n> get rid of the for loop\n\nDone.\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go\nFile src/pkg/go/doc/testdata/e.go (right):\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go#newcode82\nsrc/pkg/go/doc/testdata/e.go:82: // Handle recursion\nOn 2012/02/08 17:49:05, gri wrote:\n> Change to:\n> \n> Recursive type declarations must not lead to endless recursion.\n\nDone.\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go#newcode84\nsrc/pkg/go/doc/testdata/e.go:84: type T6 struct {\nOn 2012/02/08 17:49:05, gri wrote:\n> Please add also a test case of self-recursion (before the others), as well as a\n> recursive test case w/ non-exported types.\n\nDone.\n\nhttp://codereview.appspot.com/5645053/diff/1002/src/pkg/go/doc/testdata/e.go#newcode88\nsrc/pkg/go/doc/testdata/e.go:88: func (*T6) M() {}\nOn 2012/02/08 17:49:05, gri wrote:\n> Please add comments to the methods in the style used above:\n> // T6.M should appear as method of ...\n\nDone.",
			"disapproval": false,
			"date": "2012-02-08 21:32:11.026756",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-08 06:47:02.850575",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I missed a delete() call in my previous feedback. See below.\n\nOverall this looks good, but the comments need some polishing.\n\nhttp://codereview.appspot.com/5645053/diff/5006/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5645053/diff/5006/src/pkg/go/doc/reader.go#newcode564\nsrc/pkg/go/doc/reader.go:564: }\nYou can leave map[*namedType]bool, you just need to add:\n\ndelete(visited, typ)\n\nhere (the visited map must apply to one depth-first traversal only, not to all of them). I forgot to add this statement before.\n\nThis is simpler to understand then the level logic.\n\nhttp://codereview.appspot.com/5645053/diff/5006/src/pkg/go/doc/testdata/e.go\nFile src/pkg/go/doc/testdata/e.go (right):\n\nhttp://codereview.appspot.com/5645053/diff/5006/src/pkg/go/doc/testdata/e.go#newcode117\nsrc/pkg/go/doc/testdata/e.go:117: // Higher-level method M in hiearchy wins over wins over lower-level\ns/hiearchy/hierarchy/\ns/wins over wins over/wins over/\n\nBut I think the comment is misleading: The logic for higher-level methods is already present elsewhere, and - while this is overlapping functionality in some sense - what you are testing here is that a higher-level embedded class (V6 and its method M) is not excluded because of the lower-level embedded class V6.\n\nHow about:\n\n// A higher-level embedded type (and its methods) wins over the same type (and its methods)\n// embedded at a lower level.\n\nhttp://codereview.appspot.com/5645053/diff/5006/src/pkg/go/doc/testdata/e.go#newcode143\nsrc/pkg/go/doc/testdata/e.go:143: // V4.M should appear as a method on V2 and V3 if AllMethods is set.\ns/as a/as/\ns/on/of/\n\nlike elsewhere\n\nhttp://codereview.appspot.com/5645053/diff/5006/src/pkg/go/doc/testdata/e.go#newcode146\nsrc/pkg/go/doc/testdata/e.go:146: // V6.M should appear as a method on V1 and V5 if AllMethods is set.\nditto",
			"disapproval": false,
			"date": "2012-02-08 22:45:05.199177",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as b9ae3df7a5e7 ***\n\ngo/doc: Handle recursive embedded types.\n\nR=golang-dev, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5645053\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2012-02-09 00:54:50.389946",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-09 00:51:05.042042",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks!\n- gri\n\nOn Wed, Feb 8, 2012 at 4:51 PM,  <gary.burd@gmail.com> wrote:\n> Hello golang-dev@googlegroups.com, gri@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/5645053/\n",
			"disapproval": false,
			"date": "2012-02-09 00:53:58.747339",
			"approval": true
		}
	],
	"owner_email": "gary.burd@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "gburd",
	"subject": "code review 5645053: go/doc: Handle recursive embedded types.",
	"created": "2012-02-08 06:37:28.806743",
	"patchsets": [
		1,
		1002,
		4,
		5006,
		2009
	],
	"modified": "2012-02-09 01:15:15.163178",
	"closed": true,
	"issue": 5645053
}