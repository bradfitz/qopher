{
	"description": "doc: add Game of Life to playground toys",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-03 04:50:58.548450",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9961043/diff/2002/doc/play/life.go\nFile doc/play/life.go (right):\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode11\ndoc/play/life.go:11: // Field represents a two-dimensional field of cells.\ns/field/grid/ ?\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode17\ndoc/play/life.go:17: // NewField returns an zeroed field of the specified width and height.\ns/zeroed/empty/ ?\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode21\ndoc/play/life.go:21: s[i] = make([]bool, w)\nI wonder if the field should be a single contiguous allocation of w*h elements, since you have that all abstracted and do the relevant maths anyway.\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode112\ndoc/play/life.go:112: fmt.Print(\"\\x0c\", l)\nline comment here would be useful.",
			"disapproval": false,
			"date": "2013-06-03 05:53:20.545040",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go\nFile doc/play/life.go (right):\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode11\ndoc/play/life.go:11: // Field represents a two-dimensional field of cells.\nOn 2013/06/03 05:53:20, dsymonds wrote:\n> s/field/grid/ ?\n\nnope\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode17\ndoc/play/life.go:17: // NewField returns an zeroed field of the specified width and height.\nOn 2013/06/03 05:53:20, dsymonds wrote:\n> s/zeroed/empty/ ?\n\nDone.\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode21\ndoc/play/life.go:21: s[i] = make([]bool, w)\nOn 2013/06/03 05:53:20, dsymonds wrote:\n> I wonder if the field should be a single contiguous allocation of w*h elements,\n> since you have that all abstracted and do the relevant maths anyway.\n\nNah, it's a nice example of allocating a 2d slice\n\nhttps://codereview.appspot.com/9961043/diff/2002/doc/play/life.go#newcode112\ndoc/play/life.go:112: fmt.Print(\"\\x0c\", l)\nOn 2013/06/03 05:53:20, dsymonds wrote:\n> line comment here would be useful.\n\nDone.",
			"disapproval": false,
			"date": "2013-06-03 06:01:56.017390",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9961043/diff/7001/doc/play/life.go\nFile doc/play/life.go (right):\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode34\ndoc/play/life.go:34: func (f *Field) State(x, y int) bool {\ni would call this function Alive\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode40\ndoc/play/life.go:40: }\nthis can be done without for loops. two ways:\n\nx %= f.w\nif x < 0 {\n  x += f.w\n}\n\nthat always works. but you can be smarter in this case and avoid the if, since you know it will never be smaller than -f.w\n\nx += f.w\nx %= f.w\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode55\ndoc/play/life.go:55: // Return next state as per the game rules:\n\"per\" is Latin\nReturn the next state according to the game's rules:\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode57\ndoc/play/life.go:57: //   exactly 2 neighbors on: maintain current state,\n-,.s/ on://",
			"disapproval": false,
			"date": "2013-06-03 21:00:19.722780",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go\nFile doc/play/life.go (right):\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode34\ndoc/play/life.go:34: func (f *Field) State(x, y int) bool {\nOn 2013/06/03 21:00:19, r wrote:\n> i would call this function Alive\n\nDone.\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode40\ndoc/play/life.go:40: }\nOn 2013/06/03 21:00:19, r wrote:\n> this can be done without for loops. two ways:\n> \n> x %= f.w\n> if x < 0 {\n>   x += f.w\n> }\n> \n> that always works. but you can be smarter in this case and avoid the if, since\n> you know it will never be smaller than -f.w\n> \n> x += f.w\n> x %= f.w\n> \n\nDone.\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode55\ndoc/play/life.go:55: // Return next state as per the game rules:\nOn 2013/06/03 21:00:19, r wrote:\n> \"per\" is Latin\n> Return the next state according to the game's rules:\n\nDone.\n\nhttps://codereview.appspot.com/9961043/diff/7001/doc/play/life.go#newcode57\ndoc/play/life.go:57: //   exactly 2 neighbors on: maintain current state,\nOn 2013/06/03 21:00:19, r wrote:\n> -,.s/ on://\n\nDone.",
			"disapproval": false,
			"date": "2013-06-03 23:51:30.340720",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-04 00:20:25.953290",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-04 00:51:43.772620",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f809e1e845c4 ***\n\ndoc: add Game of Life to playground toys\n\nR=golang-dev, dsymonds, r\nCC=golang-dev\nhttps://codereview.appspot.com/9961043",
			"disapproval": false,
			"date": "2013-06-04 02:59:32.975710",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 9961043: doc: add Game of Life to playground toys",
	"created": "2013-06-03 04:50:48.429940",
	"patchsets": [
		1,
		2002,
		7001,
		15001,
		20002
	],
	"modified": "2013-06-04 02:59:35.366250",
	"closed": true,
	"issue": 9961043
}