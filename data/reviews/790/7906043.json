{
	"description": "reflect: implement method values\n\nFixes issue 1517.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-20 21:38:31.365600",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go#newcode570\nsrc/pkg/reflect/value.go:570: panic(\"reflect: broken Value\")\ncould this be more informative? all it says, really, is \"panic: broken\".\nmaybe panic(\"reflect: method index out of range doing \" + op)?\nsuggestions welcome\n\nhttps://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go#newcode600\nsrc/pkg/reflect/value.go:600: // for a function of the given type. The rcvr bool specifes whether\nspecifIes\n\nhttps://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go#newcode601\nsrc/pkg/reflect/value.go:601: // a one-word receiver should be included in the overall total.\ns/overall//",
			"disapproval": false,
			"date": "2013-03-20 21:59:17.266150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go#newcode570\nsrc/pkg/reflect/value.go:570: panic(\"reflect: broken Value\")\nOn 2013/03/20 21:59:17, r wrote:\n> could this be more informative? all it says, really, is \"panic: broken\".\n> maybe panic(\"reflect: method index out of range doing \" + op)?\n> suggestions welcome\n\nThis code was moved from elsewhere in the file. It's not supposed to be able to happen. I'll change it to\n reflect: internal error: invalid method index.\n\nhttps://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go#newcode600\nsrc/pkg/reflect/value.go:600: // for a function of the given type. The rcvr bool specifes whether\nOn 2013/03/20 21:59:17, r wrote:\n> specifIes\n\nDone.\n\nhttps://codereview.appspot.com/7906043/diff/5001/src/pkg/reflect/value.go#newcode601\nsrc/pkg/reflect/value.go:601: // a one-word receiver should be included in the overall total.\nOn 2013/03/20 21:59:17, r wrote:\n> s/overall//\n\nDone.",
			"disapproval": false,
			"date": "2013-03-21 15:32:39.058210",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/all_test.go#newcode1573\nsrc/pkg/reflect/all_test.go:1573: t.Errorf(\"Value Method returned %d; want 250\", i)\nfor another CL maybe: all these things callling the same method and returning the same value weakens the test. the same issue occurs elsewhere in this file\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/all_test.go#newcode1610\nsrc/pkg/reflect/all_test.go:1610: }{p}\nvar x interface{Dist(int) int} = p\npv = reflect.ValueOf(&x).Elem()\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/makefunc.go#newcode96\nsrc/pkg/reflect/makefunc.go:96: // actual code address. (A Go func is a pointer\ns/func/func value/\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode574\nsrc/pkg/reflect/value.go:574: panic(op + \" of unexported method\")\nput \"reflect: \" on the beginning of the op panics\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode617\nsrc/pkg/reflect/value.go:617: total = (total + ptrSize - 1) &^ (ptrSize - 1)\nthis tricky burst appears 4 times and probably more elsewhere. would be nice as a separate function, one that would probably inline.\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode636\nsrc/pkg/reflect/value.go:636: // round to pointer total\nbut only this one deserves a comment?\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode637\nsrc/pkg/reflect/value.go:637: total = (total + ptrSize - 1) &^ (ptrSize - 1)\nthis could be in an else.",
			"disapproval": false,
			"date": "2013-03-21 16:24:03.883680",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/all_test.go#newcode1573\nsrc/pkg/reflect/all_test.go:1573: t.Errorf(\"Value Method returned %d; want 250\", i)\nOn 2013/03/21 16:24:03, r wrote:\n> for another CL maybe: all these things callling the same method and returning\n> the same value weakens the test. the same issue occurs elsewhere in this file\n\nDone. Found a bug in the test.\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/all_test.go#newcode1610\nsrc/pkg/reflect/all_test.go:1610: }{p}\nOn 2013/03/21 16:24:03, r wrote:\n> var x interface{Dist(int) int} = p\n> pv = reflect.ValueOf(&x).Elem()\n\nDone.\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/makefunc.go#newcode96\nsrc/pkg/reflect/makefunc.go:96: // actual code address. (A Go func is a pointer\nOn 2013/03/21 16:24:03, r wrote:\n> s/func/func value/\n\nDone.\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode574\nsrc/pkg/reflect/value.go:574: panic(op + \" of unexported method\")\nOn 2013/03/21 16:24:03, r wrote:\n> put \"reflect: \" on the beginning of the op panics\n\nDone.\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode617\nsrc/pkg/reflect/value.go:617: total = (total + ptrSize - 1) &^ (ptrSize - 1)\nOn 2013/03/21 16:24:03, r wrote:\n> this tricky burst appears 4 times and probably more elsewhere. would be nice as\n> a separate function, one that would probably inline. \n\nDone.\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode636\nsrc/pkg/reflect/value.go:636: // round to pointer total\nOn 2013/03/21 16:24:03, r wrote:\n> but only this one deserves a comment?\n\nDone.\n\nhttps://codereview.appspot.com/7906043/diff/14001/src/pkg/reflect/value.go#newcode637\nsrc/pkg/reflect/value.go:637: total = (total + ptrSize - 1) &^ (ptrSize - 1)\nOn 2013/03/21 16:24:03, r wrote:\n> this could be in an else.\n\nI'd rather not tie the two.",
			"disapproval": false,
			"date": "2013-03-21 20:58:17.733030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=150c2fdf0c5e ***\n\nreflect: implement method values\n\nFixes issue 1517.\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7906043",
			"disapproval": false,
			"date": "2013-03-21 20:59:19.750150",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7906043: reflect: implement method values",
	"created": "2013-03-19 15:34:53.254450",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		14001,
		23001,
		26001
	],
	"modified": "2013-03-21 20:59:20.557840",
	"closed": true,
	"issue": 7906043
}