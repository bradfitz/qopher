{
	"description": "sync, sync/atomic: do not corrupt race detector after a nil dereference.\n\nThe race detector uses a global lock to analyze atomic\noperations. A panic in the middle of the code leaves the\nlock acquired.\n\nSimilarly, the sync package may leave the race detectro\ninconsistent when methods are called on nil pointers.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"minux.ma@gmail.com",
		"dvyukov@google.com",
		"rsc@golang.org",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-22 23:14:46.828310",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "They might in-line already, but should it be done by hand anyway? You'd could have more accurate messages with less overhead",
			"disapproval": false,
			"date": "2013-03-23 00:27:30.560420",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "check for <4096 doesn't solve the general\npeoblem of a bad pointer passed in.\n\nwhy not just use defer to release the mtx?",
			"disapproval": false,
			"date": "2013-03-23 07:31:17.590510",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/23 07:31:17, minux wrote:\n> check for <4096 doesn't solve the general\n> peoblem of a bad pointer passed in.\n> \n> why not just use defer to release the mtx?\n\nIt seems a naive approach usingdefers is not enough to leave the race detector in a consistent state. Maybe dmitry can shed a light on this.",
			"disapproval": false,
			"date": "2013-03-23 08:18:07.369900",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/23 08:18:07, remyoudompheng wrote:\n> On 2013/03/23 07:31:17, minux wrote:\n> > check for <4096 doesn't solve the general\n> > peoblem of a bad pointer passed in.\n> > \n> > why not just use defer to release the mtx?\n> \n> It seems a naive approach usingdefers is not enough to leave the race detector\n> in a consistent state. Maybe dmitry can shed a light on this.\n\nYes, it's quite possible that SIGSEGV leaves internal race detector state in an inconsistent state.",
			"disapproval": false,
			"date": "2013-03-25 14:00:48.301720",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7981043/diff/5001/src/pkg/sync/atomic/race.go\nFile src/pkg/sync/atomic/race.go (right):\n\nhttps://codereview.appspot.com/7981043/diff/5001/src/pkg/sync/atomic/race.go#newcode25\nsrc/pkg/sync/atomic/race.go:25: panic(\"nil pointer dereference in atomic operation\")\nthrow the same \"invalid memory address or nil pointer dereference\", somebody can be checking for this particular string",
			"disapproval": false,
			"date": "2013-03-25 14:00:54.197140",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-25 14:01:05.983580",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/23 00:27:30, r wrote:\n> They might in-line already, but should it be done by hand anyway? You'd could\n> have more accurate messages with less overhead\n\nI would prefer exactly the same message as runtime throws on nil deref -- \"invalid memory address or nil pointer dereference\". The race detector should try hard to preserve visible program behavior.",
			"disapproval": false,
			"date": "2013-03-25 14:02:34.645940",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 25, 2013 at 7:02 AM,  <dvyukov@google.com> wrote:\r\n> On 2013/03/23 00:27:30, r wrote:\r\n>>\r\n>> They might in-line already, but should it be done by hand anyway?\r\n>\r\n> You'd could\r\n>>\r\n>> have more accurate messages with less overhead\r\n>\r\n>\r\n> I would prefer exactly the same message as runtime throws on nil deref\r\n> -- \"invalid memory address or nil pointer dereference\". The race\r\n> detector should try hard to preserve visible program behavior.\r\n\r\nThat's a fine counterargument.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-25 15:55:46.839580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/25 14:00:48, dvyukov wrote:\n> Yes, it's quite possible that SIGSEGV leaves internal race detector state in an\n> inconsistent state.\ncan we fix that instead? Go program is unlike C where the SIGSEGV handler could\ndo arbitrary things.\nI still feel unsure about the check for 4096 here, for example, people might\nactually map a page at address 0 for compatibility reasons.",
			"disapproval": false,
			"date": "2013-03-25 19:49:19.859200",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It would be better to dereference the pointer, so that the runtime can\r\ntrigger the panic itself. The panic string may match but the panic value\r\ndiffers here.\r\n\r\n_ = *addr\r\nor\r\nx := *addr\r\n_ = x\r\n\r\nseems like it should be enough.\r\n",
			"disapproval": false,
			"date": "2013-03-25 19:58:22.892290",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/25 19:58:22, rsc wrote:\n> It would be better to dereference the pointer, so that the runtime can\n> trigger the panic itself. The panic string may match but the panic value\n> differs here.\n> \n> _ = *addr\n> or\n> x := *addr\n> _ = x\n> \n> seems like it should be enough.\n\nAgree",
			"disapproval": false,
			"date": "2013-03-26 06:34:48.577030",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/25 19:49:19, minux wrote:\n> On 2013/03/25 14:00:48, dvyukov wrote:\n> > Yes, it's quite possible that SIGSEGV leaves internal race detector state in\n> an\n> > inconsistent state.\n> can we fix that instead? Go program is unlike C where the SIGSEGV handler could\n> do arbitrary things.\n\nThere are 2 reasons I do not want to do this:\n1. Importing new race runtime at this stage is risky (similar to rewriting goroutine scheduler).\n2. I will do the same in race runtime, but with higher chances of being inconsistent with Go runtime. We don't have any kind of exceptions/unwind/signal handler/etc.\n\n\n> I still feel unsure about the check for 4096 here, for example, people might\n> actually map a page at address 0 for compatibility reasons.\n\nThis should be fine. First, it won't trigger paging fault then. Second, this check matches runtime check, so it is not worse.\n\nBut Russ' suggestion to actually trigger SIGSEGV is better. Note that it actually introduces the data race, but this file is not instrumented, so it won't be reported.",
			"disapproval": false,
			"date": "2013-03-26 06:40:40.511480",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, minux.ma@gmail.com, dvyukov@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-28 19:46:17.400790",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Similar fixes were needed in the sync package to avoid corruptions.\n\nI was not aware that the sync packages were not instrumented. It simplifies things a lot and the simple dereference at top of functions is OK.",
			"disapproval": false,
			"date": "2013-03-28 19:47:09.555310",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7981043/diff/22001/src/pkg/sync/mutex.go\nFile src/pkg/sync/mutex.go (right):\n\nhttps://codereview.appspot.com/7981043/diff/22001/src/pkg/sync/mutex.go#newcode84\nsrc/pkg/sync/mutex.go:84: _ = m.state\nIs it actually necessary?\n\nI would expect that this trick for atomics is enough.\n\nCurrently mutex.Lock() crashes in atomic operation:\n\nProgram received signal SIGSEGV, Segmentation fault.\nsync/atomic.CompareAndSwapUint32 (fp=void, val=0x0, old=0, new=1, swapped=false) at 4/src/pkg/sync/atomic/race.go:32\n32\t\tif *val == old {\n(gdb) bt\n#0  sync/atomic.CompareAndSwapUint32 (fp=void, val=0x0, old=0, new=1, swapped=false) at 4/src/pkg/sync/atomic/race.go:32\n#1  0x000000000041b8f3 in sync/atomic.CompareAndSwapInt32 (fp=void, val=0x0, old=0, new=1, ~anon3=223) at 4/src/pkg/sync/atomic/race.go:24\n#2  0x000000000041b3e3 in sync.(*Mutex).Lock (fp=void, m=0x0) at 4/src/pkg/sync/mutex.go:43\n#3  0x0000000000400cf2 in main.main (fp=void) at /tmp/mtc.go:18",
			"disapproval": false,
			"date": "2013-03-29 08:08:48.837720",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems necessary because of the racedisable/raceenable thing. The\r\nsequence must be correct even if a segfault happens in between.\r\nMaybe there is something I don't understand , but otherwise the race\r\ntests in sync-test.go fail in totally strange ways.\r\n\r\n\r\n2013/3/29, dvyukov@google.com <dvyukov@google.com>:\r\n>\r\n> https://codereview.appspot.com/7981043/diff/22001/src/pkg/sync/mutex.go\r\n> File src/pkg/sync/mutex.go (right):\r\n>\r\n> https://codereview.appspot.com/7981043/diff/22001/src/pkg/sync/mutex.go#newcode84\r\n> src/pkg/sync/mutex.go:84: _ = m.state\r\n> Is it actually necessary?\r\n>\r\n> I would expect that this trick for atomics is enough.\r\n>\r\n> Currently mutex.Lock() crashes in atomic operation:\r\n>\r\n> Program received signal SIGSEGV, Segmentation fault.\r\n> sync/atomic.CompareAndSwapUint32 (fp=void, val=0x0, old=0, new=1,\r\n> swapped=false) at 4/src/pkg/sync/atomic/race.go:32\r\n> 32\t\tif *val == old {\r\n> (gdb) bt\r\n> #0  sync/atomic.CompareAndSwapUint32 (fp=void, val=0x0, old=0, new=1,\r\n> swapped=false) at 4/src/pkg/sync/atomic/race.go:32\r\n> #1  0x000000000041b8f3 in sync/atomic.CompareAndSwapInt32 (fp=void,\r\n> val=0x0, old=0, new=1, ~anon3=223) at 4/src/pkg/sync/atomic/race.go:24\r\n> #2  0x000000000041b3e3 in sync.(*Mutex).Lock (fp=void, m=0x0) at\r\n> 4/src/pkg/sync/mutex.go:43\r\n> #3  0x0000000000400cf2 in main.main (fp=void) at /tmp/mtc.go:18\r\n>\r\n> https://codereview.appspot.com/7981043/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 08:22:23.896410",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 29, 2013 at 12:22 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> It seems necessary because of the racedisable/raceenable thing. The\r\n\r\nIsn't it always called with defer? Defers should be called on SIGSEGV, right?\r\nI would like understand why we are doing this.\r\n\r\n\r\n> sequence must be correct even if a segfault happens in between.\r\n> Maybe there is something I don't understand , but otherwise the race\r\n> tests in sync-test.go fail in totally strange ways.\r\n>\r\n>\r\n> 2013/3/29, dvyukov@google.com <dvyukov@google.com>:\r\n>>\r\n>> https://codereview.appspot.com/7981043/diff/22001/src/pkg/sync/mutex.go\r\n>> File src/pkg/sync/mutex.go (right):\r\n>>\r\n>> https://codereview.appspot.com/7981043/diff/22001/src/pkg/sync/mutex.go#newcode84\r\n>> src/pkg/sync/mutex.go:84: _ = m.state\r\n>> Is it actually necessary?\r\n>>\r\n>> I would expect that this trick for atomics is enough.\r\n>>\r\n>> Currently mutex.Lock() crashes in atomic operation:\r\n>>\r\n>> Program received signal SIGSEGV, Segmentation fault.\r\n>> sync/atomic.CompareAndSwapUint32 (fp=void, val=0x0, old=0, new=1,\r\n>> swapped=false) at 4/src/pkg/sync/atomic/race.go:32\r\n>> 32            if *val == old {\r\n>> (gdb) bt\r\n>> #0  sync/atomic.CompareAndSwapUint32 (fp=void, val=0x0, old=0, new=1,\r\n>> swapped=false) at 4/src/pkg/sync/atomic/race.go:32\r\n>> #1  0x000000000041b8f3 in sync/atomic.CompareAndSwapInt32 (fp=void,\r\n>> val=0x0, old=0, new=1, ~anon3=223) at 4/src/pkg/sync/atomic/race.go:24\r\n>> #2  0x000000000041b3e3 in sync.(*Mutex).Lock (fp=void, m=0x0) at\r\n>> 4/src/pkg/sync/mutex.go:43\r\n>> #3  0x0000000000400cf2 in main.main (fp=void) at /tmp/mtc.go:18\r\n>>\r\n>> https://codereview.appspot.com/7981043/\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-03-29 08:39:45.993500",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/29 08:39:45, dvyukov wrote:\n> On Fri, Mar 29, 2013 at 12:22 PM, R\u00e9my Oudompheng\n> <mailto:remyoudompheng@gmail.com> wrote:\n> > It seems necessary because of the racedisable/raceenable thing. The\n> \n> Isn't it always called with defer? Defers should be called on SIGSEGV, right?\n> I would like understand why we are doing this.\n\nI haven't seen defers in the sync code. We could use defer, but some operations seem to do complex bookkeeping and the pointer dereference makes it simple and uniform.\n\nWhat do you think? Maybe I missed something obvious? I'm totally in favour of better ideas.",
			"disapproval": false,
			"date": "2013-04-02 06:42:51.934980",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, now I see the problem. Defer is used only in WaitGroup. Panic in most primitives can lead to disabled race detection or something else.\n\nLGTM",
			"disapproval": false,
			"date": "2013-04-07 21:32:29.883120",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this okay for Go 1.1 ?",
			"disapproval": false,
			"date": "2013-04-08 07:05:10.597060",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/4/8 Andrew Gerrand <adg@golang.org> wrote:\r\n> I want to only include critical fixes from now on.\r\n>\r\n> It doesn't seem critical to me. What do you think?\r\n>\r\n> How often does the situation that this fix addresses arise?\r\n\r\nIn presence of a nil Mutex, the nil pointer dereference that happens\r\nusually, is transformed under the race detector into a hang, which is\r\nnot the same behaviour.\r\n\r\nI think it's not an exceptional situation, especially during\r\ndegugging, do you agree?\r\n\r\nThe fix is indeed only for the race detector.\r\n",
			"disapproval": false,
			"date": "2013-04-08 07:15:53.517790",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I want to only include critical fixes from now on.\r\n\r\nIt doesn't seem critical to me. What do you think?\r\n\r\nHow often does the situation that this fix addresses arise?\r\n\r\n\r\n\r\nOn 8 April 2013 17:05, <remyoudompheng@gmail.com> wrote:\r\n\r\n> Is this okay for Go 1.1 ?\r\n>\r\n>\r\n> https://codereview.appspot.**com/7981043/<https://codereview.appspot.com/7981043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-08 07:09:06.601720",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay. I am fine with this going into 1.1, seeing as the race detector is a\r\nsignificant new feature in the release.\r\n\r\n\r\nOn 8 April 2013 17:15, R\u00e9my Oudompheng <remyoudompheng@gmail.com> wrote:\r\n\r\n> On 2013/4/8 Andrew Gerrand <adg@golang.org> wrote:\r\n> > I want to only include critical fixes from now on.\r\n> >\r\n> > It doesn't seem critical to me. What do you think?\r\n> >\r\n> > How often does the situation that this fix addresses arise?\r\n>\r\n> In presence of a nil Mutex, the nil pointer dereference that happens\r\n> usually, is transformed under the race detector into a hang, which is\r\n> not the same behaviour.\r\n>\r\n> I think it's not an exceptional situation, especially during\r\n> degugging, do you agree?\r\n>\r\n> The fix is indeed only for the race detector.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-08 07:20:54.335350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0a4f1eb9372f ***\n\nsync, sync/atomic: do not corrupt race detector after a nil dereference.\n\nThe race detector uses a global lock to analyze atomic\noperations. A panic in the middle of the code leaves the\nlock acquired.\n\nSimilarly, the sync package may leave the race detectro\ninconsistent when methods are called on nil pointers.\n\nR=golang-dev, r, minux.ma, dvyukov, rsc, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7981043",
			"disapproval": false,
			"date": "2013-04-08 21:46:59.535860",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7981043: sync, sync/atomic: do not corrupt race detector after a...",
	"created": "2013-03-22 23:14:36.020890",
	"patchsets": [
		1,
		2001,
		5001,
		22001,
		33001,
		39001
	],
	"modified": "2013-04-08 21:47:01.424170",
	"closed": true,
	"issue": 7981043
}