{
	"description": "go/types: fix sizeof computations\n\nContext.Alignof/Offsetsof/Sizeof now provide means\nto customize the type checker for a given platform.\n\n- provide Context.Offsetsof to specify the\n  offsets of struct fields\n- use the correct sizes for ints, uint, uintptrs\n  in constant computations\n- moved all size computations into separate file\n  (sizes.go)\n- fixed a bug with string constant slicing",
	"cc": [
		"adonovan@google.com",
		"axwalk@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the careful review.\n- gri\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/api.go\nFile src/pkg/go/types/api.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/api.go#newcode64\nsrc/pkg/go/types/api.go:64: // of the given struct fields, in bytes. Otherwise DefaultOffsetof\nOn 2013/02/26 05:02:09, axw wrote:\n> s/DefaultOffsetof/DefaultOffsetsof/\n\nDone.\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/builtins.go\nFile src/pkg/go/types/builtins.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/builtins.go#newcode343\nsrc/pkg/go/types/builtins.go:343: check.invalidArg(x.pos(), \"field %s is embedded via a pointer in %s\", sel, x)\nOn 2013/02/26 05:02:09, axw wrote:\n> This makes sense, but gc allows this. gc seems to be giving the offset relative\n> to the embedded field's address; bug?\n\nYes, it's a gc bug - filed today: issue 4909; see also issues 4905, 4911\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/sizes.go\nFile src/pkg/go/types/sizes.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/sizes.go#newcode111\nsrc/pkg/go/types/sizes.go:111: // DefaultOffsetsof is implements the default field offset computation\nOn 2013/02/26 05:02:09, axw wrote:\n> s/is implements/implements/\n\nDone.\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/sizes.go#newcode141\nsrc/pkg/go/types/sizes.go:141: return DefaultSizeof(t.Elt) * t.Len // may be 0\nOn 2013/02/26 05:02:09, axw wrote:\n> Is DefaultSizeof expected to operate the same as gc? If so, there should be\n> padding here.\n\nIt's not, but I'll add alignment of the elements; makes sense.\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/types.go\nFile src/pkg/go/types/types.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/types.go#newcode125\nsrc/pkg/go/types/types.go:125: offsets []int64 // field offsets in bytes, lazily computde\nOn 2013/02/26 05:02:09, axw wrote:\n> s/computde/computed/\n\nDone.\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/types.go#newcode125\nsrc/pkg/go/types/types.go:125: offsets []int64 // field offsets in bytes, lazily computde\nOn 2013/02/26 05:02:09, axw wrote:\n> s/computde/computed/\n\nDone.",
			"disapproval": false,
			"date": "2013-02-26 06:00:12.178170",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com, axwalk@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-25 22:36:25.229590",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/types.go\nFile src/pkg/go/types/types.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/types.go#newcode125\nsrc/pkg/go/types/types.go:125: offsets []int64 // field offsets in bytes, lazily computde\n\"computed\"",
			"disapproval": false,
			"date": "2013-02-26 04:56:49.209310",
			"approval": true
		},
		{
			"sender": "axwalk@gmail.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A few quibbles, but otherwise LGTM.\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/api.go\nFile src/pkg/go/types/api.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/api.go#newcode64\nsrc/pkg/go/types/api.go:64: // of the given struct fields, in bytes. Otherwise DefaultOffsetof\ns/DefaultOffsetof/DefaultOffsetsof/\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/builtins.go\nFile src/pkg/go/types/builtins.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/builtins.go#newcode343\nsrc/pkg/go/types/builtins.go:343: check.invalidArg(x.pos(), \"field %s is embedded via a pointer in %s\", sel, x)\nThis makes sense, but gc allows this. gc seems to be giving the offset relative to the embedded field's address; bug?\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/sizes.go\nFile src/pkg/go/types/sizes.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/sizes.go#newcode111\nsrc/pkg/go/types/sizes.go:111: // DefaultOffsetsof is implements the default field offset computation\ns/is implements/implements/\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/sizes.go#newcode141\nsrc/pkg/go/types/sizes.go:141: return DefaultSizeof(t.Elt) * t.Len // may be 0\nIs DefaultSizeof expected to operate the same as gc? If so, there should be padding here.\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/types.go\nFile src/pkg/go/types/types.go (right):\n\nhttps://codereview.appspot.com/7363054/diff/17001/src/pkg/go/types/types.go#newcode125\nsrc/pkg/go/types/types.go:125: offsets []int64 // field offsets in bytes, lazily computde\ns/computde/computed/",
			"disapproval": false,
			"date": "2013-02-26 05:02:09.558700",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=512627a9cdb8 ***\n\ngo/types: fix sizeof computations\n\nContext.Alignof/Offsetsof/Sizeof now provide means\nto customize the type checker for a given platform.\n\n- provide Context.Offsetsof to specify the\n  offsets of struct fields\n- use the correct sizes for ints, uint, uintptrs\n  in constant computations\n- moved all size computations into separate file\n  (sizes.go)\n- fixed a bug with string constant slicing\n\nR=adonovan, axwalk\nCC=golang-dev\nhttps://codereview.appspot.com/7363054",
			"disapproval": false,
			"date": "2013-02-26 06:07:13.883300",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7363054: go/types: fix sizeof computations",
	"created": "2013-02-25 05:54:51.789640",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		11001,
		14001,
		17001,
		11
	],
	"modified": "2013-02-26 06:07:15.458320",
	"closed": true,
	"issue": 7363054
}