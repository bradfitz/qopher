{
	"description": "net/http, net/url: deal with URL.Opaque beginning with //\n\nUpdate issue 4860",
	"cc": [
		"adg@golang.org",
		"rsc@golang.org",
		"campoy@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-21 04:20:05.198140",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7369045/diff/2001/src/pkg/net/http/requestwrite_test.go\nFile src/pkg/net/http/requestwrite_test.go (right):\n\nhttps://codereview.appspot.com/7369045/diff/2001/src/pkg/net/http/requestwrite_test.go#newcode390\nsrc/pkg/net/http/requestwrite_test.go:390: WantWrite: \"GET http://y.google.com/%2F/%2F/ HTTP/1.1\\r\\n\" +\nwow, this is correct?",
			"disapproval": false,
			"date": "2013-02-21 04:33:13.952770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 20, 2013 at 8:33 PM, <adg@golang.org> wrote:\r\n\r\n>\r\n> http://y.google.com/%2F/%2F/ HTTP/1.1\\r\\n\" +\r\n> wow, this is correct?\r\n>\r\n\r\nThat's up for debate.\r\n\r\nArguably, it's what the user told us they wanted (they gave us conflicting\r\ninformation), and it's easier to do what they asked for, rather than try to\r\ninvent heuristics and precedence rules.  I don't really want to be parsing\r\ntheir Opaque value and trying to match it against Host, and I don't want\r\nthe HTTP layer to use req.URL.Host sometimes but use\r\nparseHostOutOf(req.URL.Opaque) in other cases.  Seems best to do what we're\r\ntold if they're getting this low-level.\r\n\r\nThe only thing this attempts to do is follow the docs on\r\n(*net.URL).RequestURI, which says it returns what you need to write to do\r\nan HTTP request.\r\n\r\nGiven that you can't do an HTTP request with \"//foo\" (see RFC 2616 5.1.2\r\nRequest-URI), it seems best to prepend the scheme to make it an absoluteURI.\r\n",
			"disapproval": false,
			"date": "2013-02-21 04:42:23.838410",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nShrug.\r\n\r\n\r\nOn 21 February 2013 15:42, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n>\r\n>\r\n> On Wed, Feb 20, 2013 at 8:33 PM, <adg@golang.org> wrote:\r\n>\r\n>>\r\n>> http://y.google.com/%2F/%2F/ HTTP/1.1\\r\\n\" +\r\n>> wow, this is correct?\r\n>>\r\n>\r\n> That's up for debate.\r\n>\r\n> Arguably, it's what the user told us they wanted (they gave us conflicting\r\n> information), and it's easier to do what they asked for, rather than try to\r\n> invent heuristics and precedence rules.  I don't really want to be parsing\r\n> their Opaque value and trying to match it against Host, and I don't want\r\n> the HTTP layer to use req.URL.Host sometimes but use\r\n> parseHostOutOf(req.URL.Opaque) in other cases.  Seems best to do what we're\r\n> told if they're getting this low-level.\r\n>\r\n> The only thing this attempts to do is follow the docs on\r\n> (*net.URL).RequestURI, which says it returns what you need to write to do\r\n> an HTTP request.\r\n>\r\n> Given that you can't do an HTTP request with \"//foo\" (see RFC 2616 5.1.2\r\n> Request-URI), it seems best to prepend the scheme to make it an\r\n> absoluteURI.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-21 04:44:09.350750",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can wait for another shrug. :)\r\nOn Feb 20, 2013 8:44 PM, \"Andrew Gerrand\" <adg@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> Shrug.\r\n>\r\n>\r\n> On 21 February 2013 15:42, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>>\r\n>>\r\n>> On Wed, Feb 20, 2013 at 8:33 PM, <adg@golang.org> wrote:\r\n>>\r\n>>>\r\n>>> http://y.google.com/%2F/%2F/ HTTP/1.1\\r\\n\" +\r\n>>> wow, this is correct?\r\n>>>\r\n>>\r\n>> That's up for debate.\r\n>>\r\n>> Arguably, it's what the user told us they wanted (they gave us\r\n>> conflicting information), and it's easier to do what they asked for, rather\r\n>> than try to invent heuristics and precedence rules.  I don't really want to\r\n>> be parsing their Opaque value and trying to match it against Host, and I\r\n>> don't want the HTTP layer to use req.URL.Host sometimes but use\r\n>> parseHostOutOf(req.URL.Opaque) in other cases.  Seems best to do what we're\r\n>> told if they're getting this low-level.\r\n>>\r\n>> The only thing this attempts to do is follow the docs on\r\n>> (*net.URL).RequestURI, which says it returns what you need to write to do\r\n>> an HTTP request.\r\n>>\r\n>> Given that you can't do an HTTP request with \"//foo\" (see RFC 2616 5.1.2\r\n>> Request-URI), it seems best to prepend the scheme to make it an\r\n>> absoluteURI.\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-21 04:55:24.884600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Still not sure about the motivation, even after rereading the thread and\r\nthe issue, but I suggest that instead people can just set Opaque = \"\r\nhttp://y.google.com/asdf\" if that's what they want the GET to say.\r\n",
			"disapproval": false,
			"date": "2013-02-21 18:46:37.460530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what's the motivation for case #2?\n\nhttps://codereview.appspot.com/7369045/diff/2001/src/pkg/net/http/requestwrite_test.go\nFile src/pkg/net/http/requestwrite_test.go (right):\n\nhttps://codereview.appspot.com/7369045/diff/2001/src/pkg/net/http/requestwrite_test.go#newcode383\nsrc/pkg/net/http/requestwrite_test.go:383: Opaque: \"//y.google.com/%2F/%2F/\",\nNot at all sure about this. I think Opaque should be used as is. Otherwise it's not \"opaque\".",
			"disapproval": false,
			"date": "2013-02-21 18:43:15.998040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 21, 2013 at 11:29 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Why not &net.URL{Scheme:\"http\", Host:\"foo.com\", Opaque:\"http://fo.com/\"} ?\r\n>\r\n> The scheme and host are needed for Get to know who to dial and how. The\r\n> opaque is the GET line.\r\n>\r\n\r\nBecause:\r\n\r\nhttp://play.golang.org/p/IYexHouPVH\r\n\r\n  u := &url.URL{Scheme:\"http\", Host:\"foo.com\", Opaque:\"http://foo.com/%2F/\"}\r\nprintln(u.String())\r\n\r\n\"http:http://foo.com/%2F/\"\r\n\r\nThat's why it's failing on App Engine.\r\n",
			"disapproval": false,
			"date": "2013-02-21 19:39:48.511270",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 21, 2013 at 10:46 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Still not sure about the motivation, even after rereading the thread and\r\n> the issue, but I suggest that instead people can just set Opaque = \"\r\n> http://y.google.com/asdf\" if that's what they want the GET to say.\r\n>\r\n\r\nOh, without a Scheme.  Hm, that could work.  Just &net.URL{Opaque: \"\r\nhttp://foo.com/\"}.\r\n\r\nThe original motivation was that we thought there existed no *net.URL using\r\nOpaque (to contain %2F) which would work with both App Engine (which uses\r\n(*URL).String) and net/http.Transport, which uses (*net.URL).RequestURI().\r\n So I made RequestURI return something valid for that case.\r\n\r\nI still think this CL makes sense, since RequestURI is documented to return\r\nsomething for an HTTP Request-URI line, and // isn't valid.  But if a\r\njust-Opaque URL works, I care less.\r\n\r\nFrancesc, want to try?\r\n",
			"disapproval": false,
			"date": "2013-02-21 18:54:04.169200",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd rather document that RequestURI returns Opaque unmodified if set. That\r\ngives people complete control and keeps us out of the business of looking\r\nat ostensibly opaque fields.\r\n",
			"disapproval": false,
			"date": "2013-02-21 18:55:56.506130",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 21, 2013 at 10:54 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> On Thu, Feb 21, 2013 at 10:46 AM, Russ Cox <rsc@golang.org> wrote:\r\n>\r\n>> Still not sure about the motivation, even after rereading the thread and\r\n>> the issue, but I suggest that instead people can just set Opaque = \"\r\n>> http://y.google.com/asdf\" if that's what they want the GET to say.\r\n>>\r\n>\r\n> Oh, without a Scheme.  Hm, that could work.  Just &net.URL{Opaque: \"\r\n> http://foo.com/\"}.\r\n>\r\n\r\nActually that doesn't work.\r\n\r\nThe *http.Transport refuses it:\r\n\r\n        ts := httptest.NewServer(http.HandlerFunc(func(w\r\nhttp.ResponseWriter, r *http.Request) {\r\n                log.Printf(\"Got request for %q\", r.RequestURI)\r\n        }))\r\n        defer ts.Close()\r\n        req, _ := http.NewRequest(\"GET\", ts.URL, nil)\r\n        *req.URL = url.URL{Opaque: ts.URL + \"/why-hello-there/%2F/%2F/%2F/\"}\r\n        _, err = http.DefaultClient.Do(req)\r\n        ....\r\n\r\nDo: Get http://127.0.0.1:42887/why-hello-there/%2F/%2F/%2F/: unsupported\r\nprotocol scheme \"\"\r\n",
			"disapproval": false,
			"date": "2013-02-21 19:13:41.711460",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi team,\r\n\r\nI'm not sure I fully understand the subtle differences between RequestURI\r\nand String.\r\n\r\nMy only concern here is to be able to make APIs needing \"%2F\" in the URLs\r\nthey request work both on and off App Engine.\r\n\r\nThe fix I added on the App Engine side solves the problem in a pretty\r\nstraight forward way.\r\n\r\nI'm not sure changing the behavior of the url.URL methods is a good idea.\r\nWouldn't that be a non backward compatible change? It sounds dangerous to\r\nme.\r\n\r\n Francesc Campoy Flores | Go Developer Relations | campoy@google.com |\r\n 415-990-4126\r\n\r\n\r\nOn Thu, Feb 21, 2013 at 10:55 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I'd rather document that RequestURI returns Opaque unmodified if set. That\r\n> gives people complete control and keeps us out of the business of looking\r\n> at ostensibly opaque fields.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-21 19:29:14.831250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why not &net.URL{Scheme:\"http\", Host:\"foo.com\", Opaque:\"http://fo.com/\"} ?\r\n\r\nThe scheme and host are needed for Get to know who to dial and how. The\r\nopaque is the GET line.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-21 19:29:33.232270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nSorry, I thought the general form was {scheme}://{host}{opaque}, but I reread the docs and see that it is {scheme}:{opaque}. This CL seems fine now. Weird, but fine.",
			"disapproval": false,
			"date": "2013-02-21 19:45:42.680000",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=67ff484a1801 ***\n\nnet/http, net/url: deal with URL.Opaque beginning with //\n\nUpdate issue 4860\n\nR=adg, rsc, campoy\nCC=golang-dev\nhttps://codereview.appspot.com/7369045",
			"disapproval": false,
			"date": "2013-02-21 20:01:50.143000",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7369045: net/http, net/url: deal with URL.Opaque beginning with //",
	"created": "2013-02-21 04:19:45.944450",
	"patchsets": [
		1,
		2001,
		12002
	],
	"modified": "2013-02-22 00:20:16.175690",
	"closed": true,
	"issue": 7369045
}