{
	"description": "net: never return -1 bytes read from netFD.Read\n\nIf the a network read would block, and a packet arrived just before the timeout expired, then the number of bytes from the previous (blocking) read, -1, would be returned.\n\nThis change restores the previous logic, where n would be unconditionally set to 0 if err != nil, but was skipped due to a change in CL 6851096.\n\nThe test for this change is CL 6851061.",
	"cc": [
		"bradfitz@golang.org",
		"mikioh.mikioh@gmail.com",
		"dvyukov@google.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, mikioh.mikioh@gmail.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-25 11:43:18.018950",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=03a6b8c9c396 ***\n\nnet: never return -1 bytes read from netFD.Read\n\nIf the a network read would block, and a packet arrived just before the timeout expired, then the number of bytes from the previous (blocking) read, -1, would be returned.\n\nThis change restores the previous logic, where n would be unconditionally set to 0 if err != nil, but was skipped due to a change in CL 6851096.\n\nThe test for this change is CL 6851061.\n\nR=bradfitz, mikioh.mikioh, dvyukov, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6852085",
			"disapproval": false,
			"date": "2012-11-25 23:59:51.795430",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-25 16:18:11.235170",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nnice, thanks!\r\n\r\n\r\nOn Sun, Nov 25, 2012 at 3:43 AM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: bradfitz, mikio, dvyukov,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org, mikioh.mikioh@gmail.com, dvyukov@google.com\r\n> (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: never return -1 bytes read from netFD.Read\r\n>\r\n> If the a network read would block, and a packet arrived just before the\r\n> timeout expired, then the number of bytes from the previous (blocking)\r\n> read, -1, would be returned.\r\n>\r\n> This change restores the previous logic, where n would be\r\n> unconditionally set to 0 if err != nil, but was skipped due to a change\r\n> in CL 6851096.\r\n>\r\n> The test for this change is CL 6851061.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6852085/<http://codereview.appspot.com/6852085/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/fd_unix.go\r\n>\r\n>\r\n> Index: src/pkg/net/fd_unix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/fd_unix.go\r\n> +++ b/src/pkg/net/fd_unix.go\r\n> @@ -431,6 +431,7 @@\r\n>                 }\r\n>                 n, err = syscall.Read(int(fd.sysfd), p)\r\n>                 if err == syscall.EAGAIN {\r\n> +                       n = 0\r\n>                         err = errTimeout\r\n>                         if fd.rdeadline >= 0 {\r\n>                                 if err = fd.pollServer.WaitRead(fd); err\r\n> == nil {\r\n> @@ -467,6 +468,7 @@\r\n>                 }\r\n>                 n, sa, err = syscall.Recvfrom(fd.sysfd, p, 0)\r\n>                 if err == syscall.EAGAIN {\r\n> +                       n = 0\r\n>                         err = errTimeout\r\n>                         if fd.rdeadline >= 0 {\r\n>                                 if err = fd.pollServer.WaitRead(fd); err\r\n> == nil {\r\n> @@ -501,6 +503,7 @@\r\n>                 }\r\n>                 n, oobn, flags, sa, err = syscall.Recvmsg(fd.sysfd, p,\r\n> oob, 0)\r\n>                 if err == syscall.EAGAIN {\r\n> +                       n = 0\r\n>                         err = errTimeout\r\n>                         if fd.rdeadline >= 0 {\r\n>                                 if err = fd.pollServer.WaitRead(fd); err\r\n> == nil {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-25 17:19:17.308710",
			"approval": true
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6852085: net: never return -1 bytes read from netFD.Read",
	"created": "2012-11-25 11:41:23.860780",
	"patchsets": [
		1,
		2001,
		5001,
		9002
	],
	"modified": "2012-11-25 23:59:53.854960",
	"closed": true,
	"issue": 6852085
}