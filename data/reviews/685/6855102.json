{
	"description": "database/sql: expose DB.MaxIdleConns and add DB.SetMaxIdleConns\r\n\r\nThe purpose of this patch is to allow for significant improvements in concurrent database access using the standard database/sql pool. As evidenced by work derived from the Boundary \"Go vs. Java\" blog post, the current concurent performance is limited for certain use cases (such as net/http serving data from bmizerany/pq)[1]. Additional changes from the original blog post, including benchmarking using more modern tools is also available on GitHub[2], some results are included[3].\r\n\r\nAdditional notes:\r\n\r\n * The current code defaults to 2 \"idle connections\". In reality this equates to 2 \"active connections\" for various reasons. This default value is continued only such that users would not be subject to unexpected semantic changes.\r\n * There is no maximum limit implemented. While not the subject of this problem or patch, this should be implemented.\r\n * The immediate close behavior (something I am tempted to consider a bug) has not been altered. This point may become more of a philosophical discussion. In my experience, it's better to handle bursts with grace where possible. This would also relieve the scheduler.\r\n * It may make sense to move the mutex in database/sql to a RW variant with a persistent store of Conn objects and a free / use list (with a slow garbage collector). This would also simplify the Close anti-race logic.\r\n * The second comment on Open suggests that drivers will implement an Open that returns a *DB. This is no longer the case, and this comment should be removed.\r\n * The default value should be documented somewhere.\r\n\r\n[1] http://boundary.com/blog/2012/09/17/comparing-go-and-java-part-2-performance/\r\n[2] https://github.com/raggi/go-and-java\r\n[3] https://github.com/raggi/go-and-java/blob/master/README.md#example-results",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"google@julienschmidt.com"
	],
	"messages": [
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The purpose of this patch is to allow for significant improvements in concurrent\ndatabase access using the standard database/sql pool. As evidenced by work\nderived from the Boundary \"Go vs. Java\" blog post, the current concurent\nperformance is limited for certain use cases (such as net/http serving data from\nbmizerany/pq)[1]. Additional changes from the original blog post, including\nbenchmarking using more modern tools is also available on GitHub[2], some\nresults are included[3].\n\nAdditional notes:\n\n * The current code defaults to 2 \"idle connections\". In reality this equates to\n2 \"active connections\" for various reasons. This default value is continued only\nsuch that users would not be subject to unexpected semantic changes.\n * There is no maximum limit implemented. While not the subject of this problem\nor patch, this should be implemented.\n * The immediate close behavior (something I am tempted to consider a bug) has\nnot been altered. This point may become more of a philosophical discussion. In\nmy experience, it's better to handle bursts with grace where possible. This\nwould also relieve the scheduler.\n * It may make sense to move the mutex in database/sql to a RW variant with a\npersistent store of Conn objects and a free / use list (with a slow garbage\ncollector). This would also simplify the Close anti-race logic.\n * The second comment on Open suggests that drivers will implement an Open that\nreturns a *DB. This is no longer the case, and this comment should be removed.\n * The default value should be documented somewhere.\n\n[1]\nhttp://boundary.com/blog/2012/09/17/comparing-go-and-java-part-2-performance/\n[2] https://github.com/raggi/go-and-java\n[3] https://github.com/raggi/go-and-java/blob/master/README.md#example-results",
			"disapproval": false,
			"date": "2012-11-30 02:27:54.103690",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-01-20 22:41:24.741430",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The purpose of this patch is to allow for significant improvements in concurrent\ndatabase access using the standard database/sql pool. As evidenced by work\nderived from the Boundary \"Go vs. Java\" blog post, the current concurent\nperformance is limited for certain use cases (such as net/http serving data from\nbmizerany/pq)[1]. Additional changes from the original blog post, including\nbenchmarking using more modern tools is also available on GitHub[2], some\nresults are included[3].\n\nAdditional notes:\n\n * The current code defaults to 2 \"idle connections\". In reality this equates to\n2 \"active connections\" for various reasons. This default value is continued only\nsuch that users would not be subject to unexpected semantic changes.\n * There is no maximum limit implemented. While not the subject of this problem\nor patch, this should be implemented.\n * The immediate close behavior (something I am tempted to consider a bug) has\nnot been altered. This point may become more of a philosophical discussion. In\nmy experience, it's better to handle bursts with grace where possible. This\nwould also relieve the scheduler.\n * It may make sense to move the mutex in database/sql to a RW variant with a\npersistent store of Conn objects and a free / use list (with a slow garbage\ncollector). This would also simplify the Close anti-race logic.\n * The second comment on Open suggests that drivers will implement an Open that\nreturns a *DB. This is no longer the case, and this comment should be removed.\n * The default value should be documented somewhere.\n\n[1]\nhttp://boundary.com/blog/2012/09/17/comparing-go-and-java-part-2-performance/\n[2] https://github.com/raggi/go-and-java\n[3] https://github.com/raggi/go-and-java/blob/master/README.md#example-results",
			"disapproval": false,
			"date": "2013-02-04 02:30:20.699000",
			"approval": false
		},
		{
			"sender": "raggi@google.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "database/sql: expose DB.MaxIdleConns and add DB.SetMaxIdleConns\n\nThe purpose of this patch is to allow for significant improvements in concurrent\ndatabase access using the standard database/sql pool. As evidenced by work\nderived from the Boundary \"Go vs. Java\" blog post, the current concurent\nperformance is limited for certain use cases (such as net/http serving data from\nbmizerany/pq)[1]. Additional changes from the original blog post, including\nbenchmarking using more modern tools is also available on GitHub[2], some\nresults are included[3].\n\nAdditional notes:\n\n * The current code defaults to 2 \"idle connections\". In reality this equates to\n2 \"active connections\" for various reasons. This default value is continued only\nsuch that users would not be subject to unexpected semantic changes.\n * There is no maximum limit implemented. While not the subject of this problem\nor patch, this should be implemented.\n * The immediate close behavior (something I am tempted to consider a bug) has\nnot been altered. This point may become more of a philosophical discussion. In\nmy experience, it's better to handle bursts with grace where possible. This\nwould also relieve the scheduler.\n * It may make sense to move the mutex in database/sql to a RW variant with a\npersistent store of Conn objects and a free / use list (with a slow garbage\ncollector). This would also simplify the Close anti-race logic.\n * The second comment on Open suggests that drivers will implement an Open that\nreturns a *DB. This is no longer the case, and this comment should be removed.\n * The default value should be documented somewhere.\n\n[1] http://boundary.com/blog/2012/09/17/comparing-go-and-java-part-2-performance/\n[2] https://github.com/raggi/go-and-java\n[3] https://github.com/raggi/go-and-java/blob/master/README.md#example-results",
			"disapproval": false,
			"date": "2013-03-08 02:16:43.714310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "comments and thoughts ...\n\nhttps://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go#newcode228\nsrc/pkg/database/sql/sql.go:228: // Adjust the maximum number of permanently retained database connections. This\nSee next comment.\n\n// SetMaxIdleConns sets ...\n\nhttps://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go#newcode229\nsrc/pkg/database/sql/sql.go:229: // defaults to 2 for historical reasons. N.B. This is not the maximum number of\nI think we should instead make an exported constant for 2 (DefaultMaxIdleConns) and reference that.  No need to say \"for historical reasons\".  Drop the \"N.B.\", as good as the note is.  We avoid e.g. i.e. n.b.\n\nhttps://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go#newcode239\nsrc/pkg/database/sql/sql.go:239: // The current maximum number of idle database connections allowed. See\nGo comment style is to start sentences with the name of the thing being described. They have to stand alone.\n\n// MaxIdleConns returns the ....\n\nhttps://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go#newcode242\nsrc/pkg/database/sql/sql.go:242: // TODO(bradfitz): ask driver, if supported, for its default preference\nprobably not here anymore.  Probably only once the driver is opened (where you have the 2 now).\n\nyou should probably have a func like:\n\nfunc initialMaxIdleConns(db *DB) int {\n   if di, ok := db.driver.(driver.MaxIdleConner); ok {\n        if v, ok := di.MaxIdleConns(db.dsn); ok {\n            return v\n        }\n   }\n   return DefaultMaxIdleConns\n}\n\nand then call that from Open.\n\nBut rather than a proliferation of small preferred-config interfaces like that in the driver package, perhaps we should just have an alternate Open interface that returns that config from the dsn once.\n\nImagine, in the driver package:\n\ntype DriverConfig struct [\n   MaxIdleConns int\n\n   // future stuff\n\n   NewConn func() (Conn, Error)\n}\n\nAnd then we add:\n\npackage driver\ntype DriverConfig interface {\n    OpenConfig(dsn string) (*DriverConfig, error)\n}\n\nAnd we prefer to use that if it exists, else falling back to driver.Driver's Open instead.\n\nThat seems more extensible.\n\nThoughts?\n\nhttps://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go#newcode293\nsrc/pkg/database/sql/sql.go:293: maxIdle := db.MaxIdleConns()\nthis is grabbing a lock and unlocking it, even though you grab the same lock on the next line.\n\nYou can just use db.maxIdleConns directly once you're holding the lock.",
			"disapproval": false,
			"date": "2013-03-08 22:40:08.290660",
			"approval": false
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"raggi@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"google@julienschmidt.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/6855102/diff/2001/src/pkg/database/sql/sql.go#newcode242\nsrc/pkg/database/sql/sql.go:242: // TODO(bradfitz): ask driver, if supported, for its default preference\nI like the idea of a config struct ( like I did here https://codereview.appspot.com/7365049/ ;) ) but I don't think we need 3 Open functions. It might be a good idea to combine this with http://code.google.com/p/go/issues/detail?id=4804 .\nThe \"NewConn\" function would also go well together with the \"clone\" function (driver side) I suggested in the last comment.\n\nIf you agree, I try to sent out a CL for the new Open function ASAP.\n\nOn 2013/03/08 22:40:08, bradfitz wrote:\n> But rather than a proliferation of small preferred-config interfaces like that\n> in the driver package, perhaps we should just have an alternate Open interface\n> that returns that config from the dsn once.\n> \n> Imagine, in the driver package:\n> \n> type DriverConfig struct [\n>    MaxIdleConns int\n> \n>    // future stuff\n> \n>    NewConn func() (Conn, Error)\n> }\n> \n> And then we add:\n> \n> package driver\n> type DriverConfig interface {\n>     OpenConfig(dsn string) (*DriverConfig, error)\n> }\n> \n> And we prefer to use that if it exists, else falling back to driver.Driver's\n> Open instead.\n> \n> That seems more extensible.\n> \n> Thoughts?",
			"disapproval": false,
			"date": "2013-03-09 02:10:02.927830",
			"approval": false
		}
	],
	"owner_email": "raggi@google.com",
	"private": false,
	"base_url": "",
	"owner": "raggi",
	"subject": "database/sql: expose DB.MaxIdleConns and add DB.SetMaxIdleConns",
	"created": "2012-11-27 04:54:50.072970",
	"patchsets": [
		1,
		2001
	],
	"modified": "2013-04-05 05:03:24.170310",
	"closed": true,
	"issue": 6855102
}