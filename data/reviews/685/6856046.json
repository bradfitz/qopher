{
	"description": "syscall: fix data races in LazyDLL/LazyProc\nReincarnation of http://codereview.appspot.com/6817086 (sent from another account).\nIt is ugly because sync.Once will cause allocation of a closure.\nFixes issue 4343.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"alex.brainman@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: alex.brainman@gmail.com),\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-15 18:24:29.274660",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6856046/diff/7002/src/pkg/syscall/dll_windows.go\nFile src/pkg/syscall/dll_windows.go (right):\n\nhttps://codereview.appspot.com/6856046/diff/7002/src/pkg/syscall/dll_windows.go#newcode226\nsrc/pkg/syscall/dll_windows.go:226: // Race-detector-friendly version of\nThis wording halfway suggests it's a workaround of an race-detector inadequacy, but it's actually the correct version.\n\n// Non-racy version of:\n// if p.proc == nil {\n\n?",
			"disapproval": false,
			"date": "2012-11-15 19:36:53.848220",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2012-11-16 01:43:04.065170",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=659f7a1810dd ***\n\nsyscall: fix data races in LazyDLL/LazyProc\nReincarnation of http://codereview.appspot.com/6817086 (sent from another account).\nIt is ugly because sync.Once will cause allocation of a closure.\nFixes issue 4343.\n\nR=golang-dev, bradfitz, alex.brainman\nCC=golang-dev\nhttp://codereview.appspot.com/6856046",
			"disapproval": false,
			"date": "2012-11-16 08:08:25.975750",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/15 18:24:29, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:alex.brainman@gmail.com),\n> \n> I'd like you to review this change to\n> https://dvyukov%2540google.com%40code.google.com/p/go/\n\nAlex, I do not have access to a Windows machine right now. But I believe all races must be fixed with this change.",
			"disapproval": false,
			"date": "2012-11-15 18:25:19.586430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Could you keep the old wrong versions as comments after the new line noise\r\nversions?\r\n\r\nOn Thu, Nov 15, 2012 at 10:24 AM, <dvyukov@google.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: alex.brainman@gmail.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@**code.google.com/p/go/<http://40google.com@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> syscall: fix data races in LazyDLL/LazyProc\r\n> Reincarnation of http://codereview.appspot.com/**6817086<http://codereview.appspot.com/6817086>(sent from\r\n> another account).\r\n> It is ugly because sync.Once will cause allocation of a closure.\r\n> Fixes issue 4343.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6856046/<http://codereview.appspot.com/6856046/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/syscall/dll_windows.go\r\n>\r\n>\r\n> Index: src/pkg/syscall/dll_windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/dll_windows.**go\r\n> +++ b/src/pkg/syscall/dll_windows.**go\r\n> @@ -6,6 +6,8 @@\r\n>\r\n>  import (\r\n>         \"sync\"\r\n> +       \"sync/atomic\"\r\n> +       \"unsafe\"\r\n>  )\r\n>\r\n>  // DLLError describes reasons for DLL load failures.\r\n> @@ -166,7 +168,7 @@\r\n>  // Load loads DLL file d.Name into memory. It returns an error if fails.\r\n>  // Load will not try to load DLL, if it is already loaded into memory.\r\n>  func (d *LazyDLL) Load() error {\r\n> -       if d.dll == nil {\r\n> +       if atomic.LoadPointer((*unsafe.**Pointer)(unsafe.Pointer(&d.**dll)))\r\n> == nil {\r\n>                 d.mu.Lock()\r\n>                 defer d.mu.Unlock()\r\n>                 if d.dll == nil {\r\n> @@ -174,7 +176,7 @@\r\n>                         if e != nil {\r\n>                                 return e\r\n>                         }\r\n> -                       d.dll = dll\r\n> +                       atomic.StorePointer((*unsafe.**\r\n> Pointer)(unsafe.Pointer(&d.**dll)), unsafe.Pointer(dll))\r\n>                 }\r\n>         }\r\n>         return nil\r\n> @@ -217,7 +219,7 @@\r\n>  // an error if search fails. Find will not search procedure,\r\n>  // if it is already found and loaded into memory.\r\n>  func (p *LazyProc) Find() error {\r\n> -       if p.proc == nil {\r\n> +       if atomic.LoadPointer((*unsafe.**Pointer)(unsafe.Pointer(&p.**proc)))\r\n> == nil {\r\n>                 p.mu.Lock()\r\n>                 defer p.mu.Unlock()\r\n>                 if p.proc == nil {\r\n> @@ -229,7 +231,7 @@\r\n>                         if e != nil {\r\n>                                 return e\r\n>                         }\r\n> -                       p.proc = proc\r\n> +                       atomic.StorePointer((*unsafe.**\r\n> Pointer)(unsafe.Pointer(&p.**proc)), unsafe.Pointer(proc))\r\n>                 }\r\n>         }\r\n>         return nil\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-15 18:47:51.584320",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/15 18:47:51, bradfitz wrote:\n> Could you keep the old wrong versions as comments after the new line noise\n> versions?\n\n\nDone. PTAL.",
			"disapproval": false,
			"date": "2012-11-15 19:02:13.540040",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/15 19:36:53, bradfitz wrote:\n> LGTM\n> \n> https://codereview.appspot.com/6856046/diff/7002/src/pkg/syscall/dll_windows.go\n> File src/pkg/syscall/dll_windows.go (right):\n> \n> https://codereview.appspot.com/6856046/diff/7002/src/pkg/syscall/dll_windows.go#newcode226\n> src/pkg/syscall/dll_windows.go:226: // Race-detector-friendly version of\n> This wording halfway suggests it's a workaround of an race-detector inadequacy,\n> but it's actually the correct version.\n> \n> // Non-racy version of:\n> // if p.proc == nil {\n> \n> ?\n\nDone. Thanks!",
			"disapproval": false,
			"date": "2012-11-16 08:06:19.083280",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6856046: syscall: fix data races in LazyDLL/LazyProc",
	"created": "2012-11-15 18:17:34.116190",
	"patchsets": [
		1,
		2001,
		3,
		7002,
		10002,
		1005
	],
	"modified": "2012-11-16 08:08:27.175060",
	"closed": true,
	"issue": 6856046
}