{
	"description": "crypto/md5: add arm to md5block special case\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes         4159         3346  -19.55%\nBenchmarkHash1K            24571        11755  -52.16%\nBenchmarkHash8K           166339        70581  -57.57%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         1.92         2.39    1.24x\nBenchmarkHash1K            41.67        87.11    2.09x\nBenchmarkHash8K            49.25       116.06    2.36x",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-11-15 07:27:10.119890",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/14 00:06:03, r wrote:\n> http://codereview.appspot.com/6850043/diff/5001/src/pkg/crypto/md5/md5block.go\n> File src/pkg/crypto/md5/md5block.go (right):\n> \n> http://codereview.appspot.com/6850043/diff/5001/src/pkg/crypto/md5/md5block.go#newcode24\n> src/pkg/crypto/md5/md5block.go:24: X = (*[16]uint32)(unsafe.Pointer(&p[0]))\n> can an ARM do unaligned fetches?\n\nI checked /proc/cpu/alignment and there were no unaligned accesses, but this was an arm7 cpu. I will try on arm5",
			"disapproval": false,
			"date": "2012-11-14 00:07:00.221600",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6850043/diff/5001/src/pkg/crypto/md5/md5block.go\nFile src/pkg/crypto/md5/md5block.go (right):\n\nhttp://codereview.appspot.com/6850043/diff/5001/src/pkg/crypto/md5/md5block.go#newcode24\nsrc/pkg/crypto/md5/md5block.go:24: X = (*[16]uint32)(unsafe.Pointer(&p[0]))\ncan an ARM do unaligned fetches?",
			"disapproval": false,
			"date": "2012-11-14 00:06:03.279770",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thursday, November 15, 2012, wrote:\r\n\r\n> On 2012/11/14 11:44:20, minux wrote:\r\n>\r\n>> On Wed, Nov 14, 2012 at 8:07 AM, <mailto:dave@cheney.net> wrote:\r\n>>\r\n>\r\n>  > On 2012/11/14 00:06:03, r wrote:\r\n>> >\r\n>> >> can an ARM do unaligned fetches?\r\n>> >>\r\n>> >\r\n>> > I checked /proc/cpu/alignment and there were no unaligned accesses,\r\n>>\r\n> but\r\n>\r\n>> > this was an arm7 cpu. I will try on arm5\r\n>> >\r\n>> please apply this cl https://codereview.appspot.**com/6782072/<https://codereview.appspot.com/6782072/>\r\n>> and re-test on ARM.\r\n>>\r\n>\r\n>  Curiously the test passes with your CL, but I was surprised it did.\r\n>\r\nit depends on your /proc/cpu/alignment setting.\r\n0 (ignore), 1(warn), 2 (fixup), 3 (fix+warn) will work as expected.\r\n\r\nhowever, 4 (signal) won't.\r\n",
			"disapproval": false,
			"date": "2012-11-15 03:50:20.992210",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/14 11:44:20, minux wrote:\n> On Wed, Nov 14, 2012 at 8:07 AM, <mailto:dave@cheney.net> wrote:\n> \n> > On 2012/11/14 00:06:03, r wrote:\n> >\n> >> can an ARM do unaligned fetches?\n> >>\n> >\n> > I checked /proc/cpu/alignment and there were no unaligned accesses, but\n> > this was an arm7 cpu. I will try on arm5\n> >\n> please apply this cl https://codereview.appspot.com/6782072/\n> and re-test on ARM.\n\n Curiously the test passes with your CL, but I was surprised it did.",
			"disapproval": false,
			"date": "2012-11-15 01:04:25.044390",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you, your additional test fails on ARMv5.\n\n=== RUN TestGolden\n--- FAIL: TestGolden (0.00 seconds)\nmd5_test.go:73:         md5[3](For every action there is an equal and opposite government program.) = c2df9afe383d86de9a7f165785085737 want 637d2fe925c07c113800509964fb0e06\n=== RUN: ExampleNew\n--- PASS: ExampleNew (0.00 seconds)",
			"disapproval": false,
			"date": "2012-11-15 07:26:10.451500",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-13 23:55:22.358670",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 14, 2012 at 8:07 AM, <dave@cheney.net> wrote:\r\n\r\n> On 2012/11/14 00:06:03, r wrote:\r\n>\r\n>> can an ARM do unaligned fetches?\r\n>>\r\n>\r\n> I checked /proc/cpu/alignment and there were no unaligned accesses, but\r\n> this was an arm7 cpu. I will try on arm5\r\n>\r\nplease apply this cl https://codereview.appspot.com/6782072/\r\nand re-test on ARM.\r\n",
			"disapproval": false,
			"date": "2012-11-14 11:44:20.649230",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. I think this pattern is also valid for other hashes in the tree. \r\n\r\nOn 15/11/2012, at 18:36, minux <minux.ma@gmail.com> wrote:\r\n\r\n> However, i think you can do something like this to speed up the common case where the buffer\r\n> does align to 4-byte boundary:\r\n> \r\n> diff -r 591fc8a0131a src/pkg/crypto/md5/md5block.go\r\n> --- a/src/pkg/crypto/md5/md5block.go    Wed Nov 14 22:04:03 2012 -0800\r\n> +++ b/src/pkg/crypto/md5/md5block.go    Thu Nov 15 15:32:51 2012 +0800\r\n> @@ -22,6 +22,8 @@\r\n>                         // less code and run 1.3x faster if we take advantage of that.\r\n>                         // My apologies.\r\n>                         X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n> +               } else if uintptr(unsafe.Pointer(&p[0])) & 3 == 0 {\r\n> +                       X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n>                 } else {\r\n>                         X = &xbuf\r\n>                         j := 0\r\n> diff -r 591fc8a0131a src/pkg/crypto/md5/gen.go\r\n> --- a/src/pkg/crypto/md5/gen.go Wed Nov 14 22:04:03 2012 -0800\r\n> +++ b/src/pkg/crypto/md5/gen.go Thu Nov 15 15:32:51 2012 +0800\r\n> @@ -203,6 +203,8 @@\r\n>                         // less code and run 1.3x faster if we take advantage of that.\r\n>                         // My apologies.\r\n>                         X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n> +               } else if uintptr(unsafe.Pointer(&p[0])) & 3 == 0 {\r\n> +                       X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n>                 } else {\r\n>                         X = &xbuf\r\n>                         j := 0\r\n> \r\n> Just don't forget to change gen.go.\r\n> I think we can get the same nice benchmark numbers this way\r\n> However, I propose we also add a benchmark for unaligned writes,\r\n> what do you think?\r\n",
			"disapproval": false,
			"date": "2012-11-15 07:44:41.932060",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, i've been checking that, I can't run my pandaboard on setting 4\r\n(the kernel wont' let me) but I see no alignment failures in user\r\nmode.\r\n\r\nOn Thu, Nov 15, 2012 at 2:50 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Thursday, November 15, 2012, wrote:\r\n>>\r\n>> On 2012/11/14 11:44:20, minux wrote:\r\n>>>\r\n>>> On Wed, Nov 14, 2012 at 8:07 AM, <mailto:dave@cheney.net> wrote:\r\n>>\r\n>>\r\n>>> > On 2012/11/14 00:06:03, r wrote:\r\n>>> >\r\n>>> >> can an ARM do unaligned fetches?\r\n>>> >>\r\n>>> >\r\n>>> > I checked /proc/cpu/alignment and there were no unaligned accesses,\r\n>>\r\n>> but\r\n>>>\r\n>>> > this was an arm7 cpu. I will try on arm5\r\n>>> >\r\n>>> please apply this cl https://codereview.appspot.com/6782072/\r\n>>> and re-test on ARM.\r\n>>\r\n>>\r\n>>  Curiously the test passes with your CL, but I was surprised it did.\r\n>\r\n> it depends on your /proc/cpu/alignment setting.\r\n> 0 (ignore), 1(warn), 2 (fixup), 3 (fix+warn) will work as expected.\r\n>\r\n> however, 4 (signal) won't.\r\n",
			"disapproval": false,
			"date": "2012-11-15 04:19:19.473330",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "However, i think you can do something like this to speed up the common case\r\nwhere the buffer\r\ndoes align to 4-byte boundary:\r\n\r\ndiff -r 591fc8a0131a src/pkg/crypto/md5/md5block.go\r\n--- a/src/pkg/crypto/md5/md5block.go    Wed Nov 14 22:04:03 2012 -0800\r\n+++ b/src/pkg/crypto/md5/md5block.go    Thu Nov 15 15:32:51 2012 +0800\r\n@@ -22,6 +22,8 @@\r\n                        // less code and run 1.3x faster if we take\r\nadvantage of that.\r\n                        // My apologies.\r\n                        X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n+               } else if uintptr(unsafe.Pointer(&p[0])) & 3 == 0 {\r\n+                       X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n                } else {\r\n                        X = &xbuf\r\n                        j := 0\r\ndiff -r 591fc8a0131a src/pkg/crypto/md5/gen.go\r\n--- a/src/pkg/crypto/md5/gen.go Wed Nov 14 22:04:03 2012 -0800\r\n+++ b/src/pkg/crypto/md5/gen.go Thu Nov 15 15:32:51 2012 +0800\r\n@@ -203,6 +203,8 @@\r\n                        // less code and run 1.3x faster if we take\r\nadvantage of that.\r\n                        // My apologies.\r\n                        X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n+               } else if uintptr(unsafe.Pointer(&p[0])) & 3 == 0 {\r\n+                       X = (*[16]uint32)(unsafe.Pointer(&p[0]))\r\n                } else {\r\n                        X = &xbuf\r\n                        j := 0\r\n\r\nJust don't forget to change gen.go.\r\nI think we can get the same nice benchmark numbers this way\r\nHowever, I propose we also add a benchmark for unaligned writes,\r\nwhat do you think?\r\n",
			"disapproval": false,
			"date": "2012-11-15 07:36:25.761200",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6850043: crypto/md5: add arm to md5block special case",
	"created": "2012-11-13 10:16:07.383050",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-11-15 07:27:12.344280",
	"closed": true,
	"issue": 6850043
}