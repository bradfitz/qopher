{
	"description": "cmd/gc: Make sure bools lose idealness when used with logical operators.\n\nBools from comparisons can be assigned to all bool types, but this idealness would propagate through logical operators when the result should have been lowered to a non-ideal form.\n\nFixes issue 3924.",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"r@golang.org",
		"rsc@golang.org",
		"mtj@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/20 17:30:45, remyoudompheng wrote:\n> On 2012/11/20 16:09:01, DMorsing wrote:\n> > On Mon, Nov 19, 2012 at 2:31 PM, Russ Cox <mailto:rsc@golang.org> wrote:\n> > > I am quite confused about whether this is the behavior we want. The\n> > > distinction about which computed bools are 'ideal' and which are not\n> > > seems too unpredictable. There are other open issues about bools too.\n> > > I wonder if we should reexamine what the rules are.\n> > >\n> > > Russ\n> > \n> > Would there be any adverse effects by defining logical operations as\n> > having the convertible bool result? I'm struggling to see where that\n> > would be a problem.\n> \n> Yes: if a and b have type MyBool, a && b should have type MyBool. I would tend\n> to have the following rules.\n\nThis is the status quo for gc. All that's needed is a clarification in the specification.\n\nHowever, I don't think we need to add the concept of \"untyped bool\" to the spec. I'd much rather have the current wording (results from comparisons can be assigned to any bool type) and add a caveat in the section about logical operators. Something to the tune of \"If both operands are results from comparisons, the result of the logical operator is assignable to any bool type\".\n\nWe still need to figure out what the situation is with gccgo. I'm not sure how consistent the 2 implementations are with how they handle booleans.",
			"disapproval": false,
			"date": "2012-11-20 17:58:06.486930",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "...and maybe add the missing boolean operations & and | friends?\r\n\r\nOn Mon, Nov 19, 2012 at 5:31 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I am quite confused about whether this is the behavior we want. The\r\n> distinction about which computed bools are 'ideal' and which are not\r\n> seems too unpredictable. There are other open issues about bools too.\r\n> I wonder if we should reexamine what the rules are.\r\n>\r\n> Russ\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-11-19 14:01:39.013710",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/19 Rob Pike <r@golang.org> wrote:\r\n> Here's the relevant sentence from the spec:\r\n>\r\n> Logical operators apply to boolean values and yield a result of the\r\n> same type as the operands.\r\n>\r\n> Given that sentence and the examples in the provided test program,\r\n> this CL looks right to me. I am not qualified to comment on the\r\n> compiler change however.\r\n\r\nThen I am confused by the subtle distinction between:\r\n* untyped non-constant boolean resulting from a comparison\r\n* untyped constant boolean used in constant expressions.\r\n\r\nIn the first case, using a logical operator will coerce the operands\r\nto their typed flavours. In the second case, the result of a logical\r\noperation remains an untyped boolean.\r\n\r\nIt feels like that distinction introduces a notion of untyped\r\nnon-constant value, which doesn't exist elsewhere in the spec. Maybe I\r\njust have a twisted mind and I should rather think that the result of\r\na comparison is \"bool except when it is immediately assigned to a\r\nvariable of any boolean type, in which case the assignment is legal\".\r\n\r\nIn the sentence \"The result of a comparison can be assigned to any\r\nboolean type. If the context does not demand a specific boolean type,\r\nthe result has type bool.\", the word context is vague and can suggest\r\nthe code in the CL test case is valid.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2012-11-19 01:19:12.944110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am quite confused about whether this is the behavior we want. The\r\ndistinction about which computed bools are 'ideal' and which are not\r\nseems too unpredictable. There are other open issues about bools too.\r\nI wonder if we should reexamine what the rules are.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-11-19 13:31:08.228860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought this CL was making gc consistent with gccgo?\r\nWhat's inconsistent still?\r\n",
			"disapproval": false,
			"date": "2012-11-26 21:16:40.008920",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 19, 2012 at 2:31 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I am quite confused about whether this is the behavior we want. The\r\n> distinction about which computed bools are 'ideal' and which are not\r\n> seems too unpredictable. There are other open issues about bools too.\r\n> I wonder if we should reexamine what the rules are.\r\n>\r\n> Russ\r\n\r\nWould there be any adverse effects by defining logical operations as\r\nhaving the convertible bool result? I'm struggling to see where that\r\nwould be a problem.\r\n",
			"disapproval": false,
			"date": "2012-11-20 16:09:01.850690",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"mtj@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=81b14ef2226a ***\n\ncmd/gc: Make sure bools lose idealness when used with logical operators.\n\nBools from comparisons can be assigned to all bool types, but this idealness would propagate through logical operators when the result should have been lowered to a non-ideal form.\n\nFixes issue 3924.\n\nR=golang-dev, remyoudompheng, r, rsc, mtj\nCC=golang-dev\nhttp://codereview.appspot.com/6855061",
			"disapproval": false,
			"date": "2012-11-26 21:23:18.083740",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-18 18:16:46.330910",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 26, 2012 at 10:16 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I thought this CL was making gc consistent with gccgo?\r\n> What's inconsistent still?\r\n\r\nIssue 3923 and 3915\r\n",
			"disapproval": false,
			"date": "2012-11-26 21:21:08.979220",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand why the comparison result should be lowered to a concrete type before being assigned to a variable.",
			"disapproval": false,
			"date": "2012-11-18 23:04:27.847430",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/20 16:09:01, DMorsing wrote:\n> On Mon, Nov 19, 2012 at 2:31 PM, Russ Cox <mailto:rsc@golang.org> wrote:\n> > I am quite confused about whether this is the behavior we want. The\n> > distinction about which computed bools are 'ideal' and which are not\n> > seems too unpredictable. There are other open issues about bools too.\n> > I wonder if we should reexamine what the rules are.\n> >\n> > Russ\n> \n> Would there be any adverse effects by defining logical operations as\n> having the convertible bool result? I'm struggling to see where that\n> would be a problem.\n\nYes: if a and b have type MyBool, a && b should have type MyBool. I would tend to have the following rules.\n\nA boolean value may be typed or untyped.\n* An untyped boolean constant is untyped.\n* The result of a comparison (==, !=, <=, >=, <, >) is untyped.\n\nA boolean value is assignable to type T:\n* if T is an interface type. If the value is untyped, it is converted to bool.\n* if T is a boolean type and the value is untyped.\n* if T is a boolean type and the value has type T.\n\nDeclaration-assignment of a variable with an untyped boolean value has type bool.\n\nThe result of a logical operation (&&, ||, !):\n* has type T if one of its operands has type T. The operation is illegal if the other operand is not assignable to T.\n* is untyped when both operands are untyped\n\nSomething I don't like with these rules is that if a and b have boolean type T1, and T2 is a boolean type distinct from T1, a == b and a != b are assignable to T2. I would naively interpret a != b as \"a XOR b\" and it would be a typed value of type T1. But I prefer to have consistency with numeric types and arithmetic operators.",
			"disapproval": false,
			"date": "2012-11-20 17:30:45.613400",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI think the spec might be helped by some tweaks, but this matches the\r\nspec so it should go in.\r\n",
			"disapproval": false,
			"date": "2012-11-26 19:01:04.774350",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/18 23:04:27, remyoudompheng wrote:\n> I don't understand why the comparison result should be lowered to a concrete\n> type before being assigned to a variable.\n\n&& and || are logical operators. Their results are not supposed to be ideal. Before this fix, they would become ideal if both operands were.\n\nYou could stretch the wording of the spec a bit and say that the idealness is part of the resulting type. I think the wording about context means that they should be lowered to a bool when used as both operands to a logical operator.",
			"disapproval": false,
			"date": "2012-11-18 23:23:10.093920",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here's the relevant sentence from the spec:\r\n\r\nLogical operators apply to boolean values and yield a result of the\r\nsame type as the operands.\r\n\r\nGiven that sentence and the examples in the provided test program,\r\nthis CL looks right to me. I am not qualified to comment on the\r\ncompiler change however.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-11-18 23:35:23.537660",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 26, 2012 at 8:01 PM, Russ Cox <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n> I think the spec might be helped by some tweaks, but this matches the\r\n> spec so it should go in.\r\n\r\nI'm committing this for now, but I think we need to reevaluate the\r\nhandling of bools. Right now the spec is vague, and the\r\nimplementations are inconsistent on how they handle them.\r\n",
			"disapproval": false,
			"date": "2012-11-26 21:16:04.734110",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 6855061: cmd/gc: Make sure bools lose idealness when used with l...",
	"created": "2012-11-18 18:14:38.742910",
	"patchsets": [
		1,
		2001,
		5001,
		11002
	],
	"modified": "2012-11-26 21:23:19.744020",
	"closed": true,
	"issue": 6855061
}