{
	"description": "encoding/xml: Allow user type specific XML encoders\n\nNo pointer receivers, yet. Need help here.\nNo decoders, yet. Need feedback first.\n\nCustom encoders allow to change some properties like precision\nor calculate some values like checksums on the fly.\n\nThis is work in progress, I just want feedback.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"n13m3y3r@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-11-25 16:16:40.449300",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-25 03:54:03.852800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6858067/diff/3004/src/pkg/encoding/xml/typeinfo.go\nFile src/pkg/encoding/xml/typeinfo.go (right):\n\nhttps://codereview.appspot.com/6858067/diff/3004/src/pkg/encoding/xml/typeinfo.go#newcode51\nsrc/pkg/encoding/xml/typeinfo.go:51: // XmlCodec is the interface describing data that provides its own\nThis should probably be split - many people are only doing one or the other operation. Also, we've cleaned up this package once to have an API paralleling encoding/json. We should probably follow it here too, so this would be two types Marshaler and Unmarshaler with methods MarshalXML and UnmarshalXML.\n\nProbably the methods need to be passed a flag saying whether to expect/produce an attribute string or a real XML value. There is also a detail about the outer tag to consider.",
			"disapproval": false,
			"date": "2012-12-11 18:34:15.412490",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6858067/diff/3004/src/pkg/encoding/xml/typeinfo.go\nFile src/pkg/encoding/xml/typeinfo.go (right):\n\nhttps://codereview.appspot.com/6858067/diff/3004/src/pkg/encoding/xml/typeinfo.go#newcode51\nsrc/pkg/encoding/xml/typeinfo.go:51: // XmlCodec is the interface describing data that provides its own\nOn 2012/12/11 18:34:15, rsc wrote:\n> [...] so this would be two types\n> Marshaler and Unmarshaler with methods MarshalXML and UnmarshalXML.\n\nDone.\n \n> Probably the methods need to be passed a flag saying whether to expect/produce\n> an attribute string or a real XML value.\n\nActually this would be \"chardata\", \"innerxml\", \"attr\" and even \"comment\". They need to marshal very different and the implementer usually only needs one of them.\n\nSo I see two solutions:\na) Use four interfaces\nb) Pass along an exported version field mode (fAttr, fChardata, etc) and define an error type to report, that we cannot encode our field this way.\n\nCurrently implemented is \"innerxml\".\n\n> There is also a detail about the outer\n> tag to consider.\n\nCould you be a bit more specific here?",
			"disapproval": false,
			"date": "2012-12-11 21:55:56.020650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's pass a string instead of a flag or exported enum. The string can be \"attr\", \"chardata\", etc. \n\nWhat I meant about the outer element is we have to define whether the marshaler is in control of the name of the element it fills in. Is it in charge of writing the outer <name> and </name> or not? Probably not, although that limits what can be done to some extent. You can't simulate a slice, for example.",
			"disapproval": false,
			"date": "2012-12-17 16:22:55.566600",
			"approval": false
		}
	],
	"owner_email": "nightlyone@googlemail.com",
	"private": false,
	"base_url": "",
	"owner": "ioe",
	"subject": "code review 6858067: encoding/xml: Allow user type specific XML encoders",
	"created": "2012-11-25 03:37:47.939850",
	"patchsets": [
		1,
		2001,
		3004,
		10001
	],
	"modified": "2012-12-17 16:22:55.566600",
	"closed": false,
	"issue": 6858067
}