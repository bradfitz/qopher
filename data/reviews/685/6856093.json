{
	"description": "net: always set n to zero on netFD read/recv errors\n\nAlways set n to zero on netFD read/recv errors - this achieves the\nsame behaviour as is currently implemented, however is more readable.\n\nAvoid returning n == -1 from ReadMsg on syscall.Recvmsg error.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"mikioh.mikioh@gmail.com",
		"bradfitz@golang.org",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Counter proposal https://codereview.appspot.com/6850110/",
			"disapproval": false,
			"date": "2012-11-27 04:47:05.090620",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-26 13:17:05.205570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd really like to see all this net poll code be better tested.  This adds\r\nno tests and doesn't claim to fix anything.\r\n\r\nDoes this CL conflict with Dave Cheney's current work?\r\n\r\n\r\nOn Mon, Nov 26, 2012 at 5:17 AM, <jsing@google.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net: always set n to zero on netFD read/recv errors\r\n>\r\n> Always set n to zero on netFD read/recv errors - this achieves the\r\n> same behaviour as is currently implemented, however is more readable.\r\n>\r\n> Avoid returning n == -1 from ReadMsg on syscall.Recvmsg error.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6856093/<http://codereview.appspot.com/6856093/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/fd_unix.go\r\n>\r\n>\r\n> Index: src/pkg/net/fd_unix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/fd_unix.go\r\n> +++ b/src/pkg/net/fd_unix.go\r\n> @@ -430,8 +430,10 @@\r\n>                         }\r\n>                 }\r\n>                 n, err = syscall.Read(int(fd.sysfd), p)\r\n> +               if err != nil {\r\n> +                       n = 0\r\n> +               }\r\n>                 if err == syscall.EAGAIN {\r\n> -                       n = 0\r\n>                         err = errTimeout\r\n>                         if fd.rdeadline >= 0 {\r\n>                                 if err = fd.pollServer.WaitRead(fd); err\r\n> == nil {\r\n> @@ -439,9 +441,7 @@\r\n>                                 }\r\n>                         }\r\n>                 }\r\n> -               if err != nil {\r\n> -                       n = 0\r\n> -               } else if n == 0 && err == nil && fd.sotype !=\r\n> syscall.SOCK_DGRAM {\r\n> +               if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM\r\n> {\r\n>                         err = io.EOF\r\n>                 }\r\n>                 break\r\n> @@ -467,8 +467,10 @@\r\n>                         }\r\n>                 }\r\n>                 n, sa, err = syscall.Recvfrom(fd.sysfd, p, 0)\r\n> +               if err != nil {\r\n> +                       n = 0\r\n> +               }\r\n>                 if err == syscall.EAGAIN {\r\n> -                       n = 0\r\n>                         err = errTimeout\r\n>                         if fd.rdeadline >= 0 {\r\n>                                 if err = fd.pollServer.WaitRead(fd); err\r\n> == nil {\r\n> @@ -476,9 +478,6 @@\r\n>                                 }\r\n>                         }\r\n>                 }\r\n> -               if err != nil {\r\n> -                       n = 0\r\n> -               }\r\n>                 break\r\n>         }\r\n>         if err != nil && err != io.EOF {\r\n> @@ -502,8 +501,10 @@\r\n>                         }\r\n>                 }\r\n>                 n, oobn, flags, sa, err = syscall.Recvmsg(fd.sysfd, p,\r\n> oob, 0)\r\n> +               if err != nil {\r\n> +                       n = 0\r\n> +               }\r\n>                 if err == syscall.EAGAIN {\r\n> -                       n = 0\r\n>                         err = errTimeout\r\n>                         if fd.rdeadline >= 0 {\r\n>                                 if err = fd.pollServer.WaitRead(fd); err\r\n> == nil {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-26 16:23:03.682120",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6856093/diff/5001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttp://codereview.appspot.com/6856093/diff/5001/src/pkg/net/fd_unix.go#newcode434\nsrc/pkg/net/fd_unix.go:434: n = 0\nis it guaranteed that you can discard the  value of n in case of error?\nThe new code is not equivalent to the old one.",
			"disapproval": false,
			"date": "2012-11-26 13:34:48.064020",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856093/diff/5001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6856093/diff/5001/src/pkg/net/fd_unix.go#newcode444\nsrc/pkg/net/fd_unix.go:444: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nsotype == syscall.SOCK_STREAM ?\n\nhttps://codereview.appspot.com/6856093/diff/5001/src/pkg/net/fd_unix.go#newcode483\nsrc/pkg/net/fd_unix.go:483: if err != nil && err != io.EOF {\ndoes io.EOF case really happen?\nperhaps we need if err == nil && n == 0 stmt in Recvfrom loop?",
			"disapproval": false,
			"date": "2012-11-26 13:53:12.472860",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-11-27 16:08:11.462990",
			"approval": false
		}
	],
	"owner_email": "jsing@google.com",
	"private": false,
	"base_url": "",
	"owner": "jsing",
	"subject": "code review 6856093: net: always set n to zero on netFD read/recv errors",
	"created": "2012-11-26 11:20:57.927410",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-11-27 16:08:14.323650",
	"closed": true,
	"issue": 6856093
}