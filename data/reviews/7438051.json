{
	"description": "encoding/xml: Marshal/Escape allows invalid characters\n\nFixes issue 4235.",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"r@golang.org",
		"dr.volker.dobler@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-01 01:56:47.433430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"osaingre@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 01:56:47, osaingre wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\n\nThank you for this proposal. Can you provide any benchmark details to assert the cost of this additional checking ?",
			"disapproval": false,
			"date": "2013-03-02 02:01:59.289700",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/02 02:01:59, dfc wrote:\n> On 2013/03/01 01:56:47, osaingre wrote:\n> > Hello mailto:golang-dev@googlegroups.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> > \n> > I'd like you to review this change to\n> > https://code.google.com/p/go\n> \n> \n> Thank you for this proposal. Can you provide any benchmark details to assert the\n> cost of this additional checking ?\n\nBenchmarkMarshal marshals a single struct to XML. It runs 7% slower after the patch.\n\nBefore:\nBenchmarkMarshal          100000             26231 ns/op\nAfter:\nBenchmarkMarshal          100000             28058 ns/op",
			"disapproval": false,
			"date": "2013-03-03 19:56:24.404870",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/03 19:56:24, osaingre wrote:\n> On 2013/03/02 02:01:59, dfc wrote:\n> > On 2013/03/01 01:56:47, osaingre wrote:\n> > > Hello mailto:golang-dev@googlegroups.com (cc:\n> > mailto:golang-dev@googlegroups.com),\n> > > \n> > > I'd like you to review this change to\n> > > https://code.google.com/p/go\n> > \n> > \n> > Thank you for this proposal. Can you provide any benchmark details to assert\n> the\n> > cost of this additional checking ?\n> \n> BenchmarkMarshal marshals a single struct to XML. It runs 7% slower after the\n> patch.\n> \n> Before:\n> BenchmarkMarshal          100000             26231 ns/op\n> After:\n> BenchmarkMarshal          100000             28058 ns/op\n\nPing :-)",
			"disapproval": false,
			"date": "2013-03-08 10:07:25.967430",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"osaingre@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is an inefficient implementation. It adds another scan over the data, plus some allocation through bytes.Map. It's possible to do this much more efficiently.\n\nI suggest starting over with an implementation that incorporates the error check into the escape processing loop that's already there.\n\nThat said, there's no rush. I doubt this will make it into Go 1.1.",
			"disapproval": false,
			"date": "2013-03-08 21:03:34.017250",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/08 21:03:34, r wrote:\n> This is an inefficient implementation. It adds another scan over the data, plus\n> some allocation through bytes.Map. It's possible to do this much more\n> efficiently.\n> \n> I suggest starting over with an implementation that incorporates the error check\n> into the escape processing loop that's already there.\n> \n> That said, there's no rush. I doubt this will make it into Go 1.1.\n\nOk thanks, I'll look into it.",
			"disapproval": false,
			"date": "2013-03-08 22:03:00.450640",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1725\nsrc/pkg/encoding/xml/xml.go:1725: func isInvalidChar(r rune) bool {\nThis function is redundant.  You may use the existing\nisInCharacterRange from line 1002.\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1743\nsrc/pkg/encoding/xml/xml.go:1743: return '\\uFFFD'\nInstead of '\\uFFFD' you might want to use\nutf8.RuneError which might be clearer, even without\nthe comment.",
			"disapproval": false,
			"date": "2013-03-11 12:10:55.563240",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL can be made simple enough that I would like to see this fix go into Go 1.1. See below. Thanks.\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1737\nsrc/pkg/encoding/xml/xml.go:1737: // Returns a byte slice in which all non XML 1.0 compliant runes\nhttp://golang.org/doc/effective_go.html#commentary\n\n// fixRune converts an invalid rune to the Unicode replacement character.\nfunc fixRune(r rune) rune {\n    if isInCharacterRange(r) {\n        return r\n    }\n    return '\\uFFFD'\n}\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1754\nsrc/pkg/encoding/xml/xml.go:1754: func escape(w io.Writer, s []byte, strictCharset bool) error {\nPlease make this EscapeText, drop strictCharset (assume it is always true) and restore the original doc comment.\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1755\nsrc/pkg/encoding/xml/xml.go:1755: if i := bytes.IndexFunc(s, isInvalidChar); i != -1 {\nbytes.Map is going to do this anyway. It's not worth doing twice.\n\ns = bytes.Map(fixRune, s)\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1809\nsrc/pkg/encoding/xml/xml.go:1809: escape(w, s, false)\nPlease restore this to just EscapeText(w, s).\nThe only difference between Escape and EscapeText should concern the returned error, as it says in the doc comment; there should not be additional changes like Escape returns invalid XML and EscapeText returns valid XML.",
			"disapproval": false,
			"date": "2013-03-12 19:51:37.214960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1782\nsrc/pkg/encoding/xml/xml.go:1782: default:\nActually, you can just skip the whole bytes.Map thing entirely by making this:\n\ndefault:\n    if !isInCharacterRange(c) {\n        esc = esc_fffd\n        break\n    }\n    continue\n\nwith esc_fffd = []byte(\"\\uFFFD\") above.",
			"disapproval": false,
			"date": "2013-03-12 19:54:07.673680",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\nI made the suggested changes. Benchmark is as follows:\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkMarshal          25989        31170  +19.94%\nOlivier\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1725\nsrc/pkg/encoding/xml/xml.go:1725: func isInvalidChar(r rune) bool {\nOn 2013/03/11 12:10:55, volker.dobler wrote:\n> This function is redundant.  You may use the existing\n> isInCharacterRange from line 1002.\n\nDone.\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1737\nsrc/pkg/encoding/xml/xml.go:1737: // Returns a byte slice in which all non XML 1.0 compliant runes\nOn 2013/03/12 19:51:37, rsc wrote:\n> http://golang.org/doc/effective_go.html#commentary\n> \n> // fixRune converts an invalid rune to the Unicode replacement character.\n> func fixRune(r rune) rune {\n>     if isInCharacterRange(r) {\n>         return r\n>     }\n>     return '\\uFFFD'\n> }\n> \n\nDone.\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1754\nsrc/pkg/encoding/xml/xml.go:1754: func escape(w io.Writer, s []byte, strictCharset bool) error {\nOn 2013/03/12 19:51:37, rsc wrote:\n> Please make this EscapeText, drop strictCharset (assume it is always true) and\n> restore the original doc comment.\n> \n\nDone.\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1755\nsrc/pkg/encoding/xml/xml.go:1755: if i := bytes.IndexFunc(s, isInvalidChar); i != -1 {\nOn 2013/03/12 19:51:37, rsc wrote:\n> bytes.Map is going to do this anyway. It's not worth doing twice.\n> \n> s = bytes.Map(fixRune, s)\n\nDone.\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1782\nsrc/pkg/encoding/xml/xml.go:1782: default:\nOn 2013/03/12 19:54:07, rsc wrote:\n> Actually, you can just skip the whole bytes.Map thing entirely by making this:\n> \n> default:\n>     if !isInCharacterRange(c) {\n>         esc = esc_fffd\n>         break\n>     }\n>     continue\n> \n> with esc_fffd = []byte(\"\\uFFFD\") above.\n\nI feel I can't do that unless I iterate on the runes. Am I missing something?\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1809\nsrc/pkg/encoding/xml/xml.go:1809: escape(w, s, false)\nOn 2013/03/12 19:51:37, rsc wrote:\n> Please restore this to just EscapeText(w, s).\n> The only difference between Escape and EscapeText should concern the returned\n> error, as it says in the doc comment; there should not be additional changes\n> like Escape returns invalid XML and EscapeText returns valid XML.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-13 01:07:28.937590",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1782\nsrc/pkg/encoding/xml/xml.go:1782: default:\ns is a slice of bytes, so you need to be a little smarter but yes, you can.\n\nthe loop needs to extract the next utf-8-encoded rune, using utf8.DecodeRune. that's what bytes.Map is doing anyway, so it won't cost more than you have now and will iterate over the slice only once.\n\nr, width := utf8.DecodeRune(s)\nswitch r {\n...\ndefault:\n  if isInvalidChar(r) {\n   ..\n  }\n}\netc.",
			"disapproval": false,
			"date": "2013-03-13 01:27:04.170340",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/13 01:27:04, r wrote:\n> https://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go\n> File src/pkg/encoding/xml/xml.go (right):\n> \n> https://codereview.appspot.com/7438051/diff/5001/src/pkg/encoding/xml/xml.go#newcode1782\n> src/pkg/encoding/xml/xml.go:1782: default:\n> s is a slice of bytes, so you need to be a little smarter but yes, you can.\n> \n> the loop needs to extract the next utf-8-encoded rune, using utf8.DecodeRune.\n> that's what bytes.Map is doing anyway, so it won't cost more than you have now\n> and will iterate over the slice only once.\n> \n> r, width := utf8.DecodeRune(s)\n> switch r {\n> ...\n> default:\n>   if isInvalidChar(r) {\n>    ..\n>   }\n> }\n> etc.\nOk. That's what I intended to do in the first place when I say your remark last week.  I got confused when I saw the latest suggestions.\nI'll do that.",
			"disapproval": false,
			"date": "2013-03-13 08:34:51.831540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Did that affect the benchmark?\r\n",
			"disapproval": false,
			"date": "2013-03-13 22:13:35.258320",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I removed the call to bytes.Map(). PTAL.\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkMarshal          25833        29745  +15.14%",
			"disapproval": false,
			"date": "2013-03-13 21:59:36.734320",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7438051/diff/25001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/7438051/diff/25001/src/pkg/encoding/xml/xml.go#newcode1737\nsrc/pkg/encoding/xml/xml.go:1737: esc_fffd := []byte(\"\\uFFFD\")\nOn 2013/03/13 22:02:30, rsc wrote:\n> Please put this into the var block above so that it is only done once instead of\n> being allocated on every call to EscapeText.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-13 22:10:00.413830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7438051/diff/25001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/7438051/diff/25001/src/pkg/encoding/xml/xml.go#newcode1737\nsrc/pkg/encoding/xml/xml.go:1737: esc_fffd := []byte(\"\\uFFFD\")\nPlease put this into the var block above so that it is only done once instead of being allocated on every call to EscapeText.",
			"disapproval": false,
			"date": "2013-03-13 22:02:30.541750",
			"approval": false
		},
		{
			"sender": "osaingre@gmail.com",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/13 22:13:35, rsc wrote:\n> Did that affect the benchmark?\n\nYes indeed. After moving esc_fffd:\n\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkMarshal          25741        28539  +10.87%\nbenchmark            old allocs   new allocs    delta\nBenchmarkMarshal             26           26    0.00%\nbenchmark             old bytes    new bytes    delta\nBenchmarkMarshal           5429         5429    0.00%\n\nbefore:\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkMarshal          25741        29827  +15.87%\nbenchmark            old allocs   new allocs    delta\nBenchmarkMarshal             26           40   53.85%\nbenchmark             old bytes    new bytes    delta\nBenchmarkMarshal           5429         5542    2.08%\n\nI'll keep that in mind.",
			"disapproval": false,
			"date": "2013-03-13 22:23:53.550420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks for iterating with us.",
			"disapproval": false,
			"date": "2013-03-14 03:24:26.469710",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"osaingre@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"r@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=62c96dd0ddc3 ***\n\nencoding/xml: rewrite invalid code points to U+FFFD in Marshal, Escape\n\nFixes issue 4235.\n\nR=rsc, dave, r, dr.volker.dobler\nCC=golang-dev\nhttps://codereview.appspot.com/7438051\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-03-14 03:26:09.063190",
			"approval": false
		}
	],
	"owner_email": "osaingre@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "osaingre",
	"subject": "code review 7438051: encoding/xml: Marshal/Escape allows invalid characters",
	"created": "2013-03-01 01:55:53.739130",
	"patchsets": [
		1,
		2001,
		5001,
		17001,
		25001,
		31001
	],
	"modified": "2013-03-14 03:26:09.063190",
	"closed": false,
	"issue": 7438051
}