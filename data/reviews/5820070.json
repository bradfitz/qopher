{
	"description": "build: catch API changes during build\n\nAdds new file api/go1.txt, locking down the current API.\nAny changes to the API will need to update that file.\n\nrun.bash (but not make.bash, or Windows) will check for\naccidental API changes.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-15 22:59:03.967230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hah, the API is too large:\n\n$ hg mail 5820070\nIssue updated. URL: http://codereview.appspot.com/5820070\nNot uploading the patch for api/go1.txt because the file is too large.\nUploading patch for src/cmd/api/goapi.go\nUploading patch for src/run.bash\n\nYou can look at it yourself with:\n\n$ mkdir $GOROOT/api\n$ go tool api > $GOROOT/api/go1.txt\n\n\nOn Thu, Mar 15, 2012 at 3:59 PM, <bradfitz@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> build: catch API changes during build\n>\n> Adds new file api/go1.txt, locking down the current API.\n> Any changes to the API will need to update that file.\n>\n> run.bash (but not make.bash, or Windows) will check for\n> accidental API changes.\n>\n> Please review this at http://codereview.appspot.com/**5820070/<http://codereview.appspot.com/5820070/>\n>\n> Affected files:\n>  M src/cmd/api/goapi.go\n>  M src/run.bash\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-15 23:00:08.902181",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5820070/diff/5001/src/run.bash\nFile src/run.bash (right):\n\nhttp://codereview.appspot.com/5820070/diff/5001/src/run.bash#newcode94\nsrc/run.bash:94: go tool api -c $GOROOT/api/go1.txt || echo $?\nshouldn't that be \"exit $?\". We want the build to fail if this doesn't pass, right?\n\nBut this script has \"set -e\" up top, so I think you can just s/||.*$//.",
			"disapproval": false,
			"date": "2012-03-15 23:36:51.634044",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 15, 2012 at 23:24, David Symonds <dsymonds@golang.org> wrote:\n> Yes, and in the presence of set -e these are all equivalent:\n> \u00a0cmd\n> \u00a0(cmd)\n> \u00a0cmd || exit $?\n> \u00a0(cmd) || exit $?\n>\n>> Also we have a long history of\n>> build failures suggesting that it is working just fine.\n>\n> I didn't say it was breaking anything. It's just not adding anything.\n\nIt certainly added something when I put it in originally.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-16 03:28:49.635910",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 15, 2012 at 4:36 PM, <dsymonds@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5820070/diff/5001/src/run.bash<http://codereview.appspot.com/5820070/diff/5001/src/run.bash>\n> File src/run.bash (right):\n>\n> http://codereview.appspot.com/**5820070/diff/5001/src/run.**bash#newcode94<http://codereview.appspot.com/5820070/diff/5001/src/run.bash#newcode94>\n> src/run.bash:94: go tool api -c $GOROOT/api/go1.txt || echo $?\n> shouldn't that be \"exit $?\". We want the build to fail if this doesn't\n> pass, right?\n>\n\nwhoops, typo.\n\n\n> But this script has \"set -e\" up top, so I think you can just s/||.*$//\n\n\nyeah, but the rest of this file does || checks anyway, so I'm being\nconsistent.\n\nPTAL\n",
			"disapproval": false,
			"date": "2012-03-16 00:41:36.585924",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 16, 2012 at 2:10 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Mar 15, 2012 at 22:56, David Symonds <dsymonds@golang.org> wrote:\n>> Even there I don't think they are working as one would expect.\n>>\n>> The result of a subprocess invocation is the result of its last\n>> command. If you run\n>> \u00a0#!/bin/bash\n>> \u00a0set -e\n>> \u00a0(false)\n>> \u00a0echo \"ok\"\n>> then you won't get the \"ok\". The \"|| exit $?\" isn't doing *anything*\n>> in run.bash, because run.bash would have exited anyway.\n>\n> This at least is not true. \u00a0A command used on the left of an || or &&\n> is exempt from set -e processing.\n\nYes, and in the presence of set -e these are all equivalent:\n  cmd\n  (cmd)\n  cmd || exit $?\n  (cmd) || exit $?\n\n> Also we have a long history of\n> build failures suggesting that it is working just fine.\n\nI didn't say it was breaking anything. It's just not adding anything.\n\n> Please DO NOT TOUCH the subshell invocations.\n> They are working as is. \u00a0After Go 1, if someone wants to sort this\n> out (and no doubt break the build scripts on some system or other),\n> that's fine. \u00a0But not before.\n\nI agree. I was not suggesting they were broken, just misleading. I am\nfine with waiting.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-03-16 03:24:47.541972",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-16 00:41:10.975776",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-16 02:01:08.812813",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please drop the || exit $?.\n\nThe rest of the file only does them in places\nwhere they are not implied by set -e\n(in ( ) subprocess invocations).\n",
			"disapproval": false,
			"date": "2012-03-16 02:47:31.429857",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Except for line 77, which would be great to fix too.\n",
			"disapproval": false,
			"date": "2012-03-16 02:48:05.095097",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 15, 2012 at 22:56, David Symonds <dsymonds@golang.org> wrote:\n> Even there I don't think they are working as one would expect.\n>\n> The result of a subprocess invocation is the result of its last\n> command. If you run\n> \u00a0#!/bin/bash\n> \u00a0set -e\n> \u00a0(false)\n> \u00a0echo \"ok\"\n> then you won't get the \"ok\". The \"|| exit $?\" isn't doing *anything*\n> in run.bash, because run.bash would have exited anyway.\n\nThis at least is not true.  A command used on the left of an || or &&\nis exempt from set -e processing.  Also we have a long history of\nbuild failures suggesting that it is working just fine.\n\nI do not want to change this today.  This is incredibly subtle and\nvaries from bash implementation to bash implementation.  It is\nentirely possible that you get different results from different versions.\nI do know that originally I did not write the || exit $? and the shell\nscript was not exiting when it should have.  Adding the || exit $?\nfor the subshells fixed that.\n\nAll I am asking is that we take it off the single commands\n(lines 77, 86, and the new line 94), to match the other\nsingle commands (lines 26, 30, 34).\n\nPlease DO NOT TOUCH the subshell invocations.\nThey are working as is.  After Go 1, if someone wants to sort this\nout (and no doubt break the build scripts on some system or other),\nthat's fine.  But not before.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-16 03:10:32.579673",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 16, 2012 at 1:47 PM, Russ Cox <rsc@golang.org> wrote:\n\n> The rest of the file only does them in places\n> where they are not implied by set -e\n> (in ( ) subprocess invocations).\n\nEven there I don't think they are working as one would expect.\n\nThe result of a subprocess invocation is the result of its last\ncommand. If you run\n  #!/bin/bash\n  set -e\n  (false)\n  echo \"ok\"\nthen you won't get the \"ok\". The \"|| exit $?\" isn't doing *anything*\nin run.bash, because run.bash would have exited anyway.\n\nThe tricky thing with \"set -e\" and subprocess invocation is that the\n\"set -e\" doesn't propagate inside it, so subprocess invocations with\nmultiple commands won't exit early if one of their commands fails.\n\nSo, instead of line 88-90 looking like\n (xcd ../test\n time go run run.go\n ) || exit $?\nit could just be\n  (xcd ../test\n  time go run run.go)\nor\n  (xcd ../test; time go run run.go)\nor\n  (xcd ../test && time go run run.go)\n",
			"disapproval": false,
			"date": "2012-03-16 02:56:18.933261",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b15d9965bcd8 ***\n\nbuild: catch API changes during build\n\nAdds new file api/go1.txt, locking down the current API.\nAny changes to the API will need to update that file.\n\nrun.bash (but not make.bash, or Windows) will check for\naccidental API changes.\n\nR=golang-dev, dsymonds, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5820070",
			"disapproval": false,
			"date": "2012-03-17 18:21:03.423346",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5820070: build: catch API changes during build",
	"created": "2012-03-15 22:58:16.816061",
	"patchsets": [
		1,
		1002,
		5001,
		8001,
		13002
	],
	"modified": "2012-03-17 18:21:05.181973",
	"closed": true,
	"issue": 5820070
}