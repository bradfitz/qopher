{
	"description": "net/http: add Next Protocol Negotation upgrade support to the Server\n\nThis provides the mechanism to connect SPDY support to the http\npackage, without pulling SPDY into the standard library.",
	"cc": [
		"rsc@golang.org",
		"agl@golang.org",
		"mikioh.mikioh@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with nits.\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/npn_test.go\nFile src/pkg/net/http/npn_test.go (right):\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/npn_test.go#newcode27\nsrc/pkg/net/http/npn_test.go:27: NextProtos: []string{\"unhandled-proto\", \"tls-0.9\"},\nIf this is the server config, then it's probably a better test to remove \"unhandled-proto\" from the server config - the client can always request a protocol that the server didn't offer.\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/server.go#newcode770\nsrc/pkg/net/http/server.go:770: case \"\", \"http/1.1\", \"http/1.0\":\nThis is actually a blacklist of protocols that you won't let be overridden, right? The comment doesn't make sense to me because I don't know what makes a protocol `valid' here.",
			"disapproval": false,
			"date": "2013-02-04 15:08:46.876360",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 21:26:27.379980",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI also made the Handler given to the NPN handler auto-initialize certain fields of the *Request.\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/npn_test.go\nFile src/pkg/net/http/npn_test.go (right):\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/npn_test.go#newcode27\nsrc/pkg/net/http/npn_test.go:27: NextProtos: []string{\"unhandled-proto\", \"tls-0.9\"},\nOn 2013/02/04 15:08:46, agl1 wrote:\n> If this is the server config, then it's probably a better test to remove\n> \"unhandled-proto\" from the server config - the client can always request a\n> protocol that the server didn't offer.\n\nI've changed the test and behavior to just hang up on the connection if the server's TLS listener advertised it but the HTTP package was never told how to handle it.\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/7287045/diff/10001/src/pkg/net/http/server.go#newcode770\nsrc/pkg/net/http/server.go:770: case \"\", \"http/1.1\", \"http/1.0\":\nOn 2013/02/04 15:08:46, agl1 wrote:\n> This is actually a blacklist of protocols that you won't let be overridden,\n> right? The comment doesn't make sense to me because I don't know what makes a\n> protocol `valid' here.\n\nUpdated the comment.",
			"disapproval": false,
			"date": "2013-02-04 21:28:38.062130",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-03 21:29:32.655760",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 05:04:19.042270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7287045/diff/7002/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/7287045/diff/7002/src/pkg/net/http/server.go#newcode1245\nsrc/pkg/net/http/server.go:1245: // name negotiated. The provided Handler should be used to\ns/provided Handler/Handler argument/\n\nhttps://codereview.appspot.com/7287045/diff/7002/src/pkg/net/http/server.go#newcode1246\nsrc/pkg/net/http/server.go:1246: // handle requests. The connection is automatically closed\ns/handle/handle HTTP/",
			"disapproval": false,
			"date": "2013-02-04 05:13:07.698860",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nI took a different approach now, passing the NPN handler the http.Handler\r\nto use, rather than saying to use the *Server.  The (*Server).ServeHTTP is\r\nnow gone.\r\n\r\nThe code movement and (*Server).ServeHTTP were both for the same reason: I\r\nwas concerned about a future where SPDY was prevalent and much HTTP policy\r\nwas handled outside of net/http.  The \"OPTIONS *\" request handling was one\r\nsuch place that could be easily overlooked by other implementations, but\r\nwho knows what else there will be.  I'd like to still keep net/http\r\ninvolved in the process.  I couldn't see how to keep automatic Expect\r\n100-continue handling involved (since it involved writing to the bare\r\nnet.Conn), but who knows what else there will be in the future.\r\n\r\n\r\nOn Sun, Feb 3, 2013 at 8:11 PM, <rsc@golang.org> wrote:\r\n\r\n> The new map is fine. I'm confused by the new ServeHTTP method.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7287045/diff/4001/src/pkg/**\r\n> net/http/server.go<https://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go>\r\n> File src/pkg/net/http/server.go (left):\r\n>\r\n> https://codereview.appspot.**com/7287045/diff/4001/src/pkg/**\r\n> net/http/server.go#oldcode829<https://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go#oldcode829>\r\n> src/pkg/net/http/server.go:**829: handler := c.server.Handler\r\n> Why does this code move? It seems unrelated, and it makes for a\r\n> confusing comment.\r\n>\r\n> https://codereview.appspot.**com/7287045/diff/4001/src/pkg/**\r\n> net/http/server.go<https://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go>\r\n> File src/pkg/net/http/server.go (right):\r\n>\r\n> https://codereview.appspot.**com/7287045/diff/4001/src/pkg/**\r\n> net/http/server.go#newcode1242<https://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go#newcode1242>\r\n> src/pkg/net/http/server.go:**1242: // TLSNextProtoHandler optionally\r\n> specifies a function to take over\r\n> Can probably s/Handler//.\r\n> If we got rid of the ServeHTTP thing, I think this could simplify to:\r\n>\r\n> // TLSNextProto specifies a handler to use for TLS next-protocol\r\n> negotiation (NPN).\r\n> // After an NPN protocol upgrade, the server looks in the map using the\r\n> // protocol name as the key and calls that handler, if present. The\r\n> server\r\n> // closes the TLS connection when the handler returns.\r\n>\r\n> https://codereview.appspot.**com/7287045/diff/4001/src/pkg/**\r\n> net/http/server.go#newcode1251<https://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go#newcode1251>\r\n> src/pkg/net/http/server.go:**1251: // ServeHTTP delegates to either\r\n> srv.Handler or DefaultServeMux and\r\n> I'm at a loss for why this is necessary. It's also strange, because I\r\n> don't think of a Server as a http.Handler.\r\n>\r\n> https://codereview.appspot.**com/7287045/<https://codereview.appspot.com/7287045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-04 05:07:23.346280",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"agl@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7287045/diff/14002/src/pkg/net/http/npn_test.go\nFile src/pkg/net/http/npn_test.go (right):\n\nhttps://codereview.appspot.com/7287045/diff/14002/src/pkg/net/http/npn_test.go#newcode89\nsrc/pkg/net/http/npn_test.go:89: \nunnecessary blank line",
			"disapproval": false,
			"date": "2013-02-04 21:51:21.916010",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The new map is fine. I'm confused by the new ServeHTTP method.\n\nhttps://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (left):\n\nhttps://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go#oldcode829\nsrc/pkg/net/http/server.go:829: handler := c.server.Handler\nWhy does this code move? It seems unrelated, and it makes for a confusing comment.\n\nhttps://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go#newcode1242\nsrc/pkg/net/http/server.go:1242: // TLSNextProtoHandler optionally specifies a function to take over\nCan probably s/Handler//.\nIf we got rid of the ServeHTTP thing, I think this could simplify to:\n\n// TLSNextProto specifies a handler to use for TLS next-protocol negotiation (NPN).\n// After an NPN protocol upgrade, the server looks in the map using the\n// protocol name as the key and calls that handler, if present. The server\n// closes the TLS connection when the handler returns.\n\nhttps://codereview.appspot.com/7287045/diff/4001/src/pkg/net/http/server.go#newcode1251\nsrc/pkg/net/http/server.go:1251: // ServeHTTP delegates to either srv.Handler or DefaultServeMux and\nI'm at a loss for why this is necessary. It's also strange, because I don't think of a Server as a http.Handler.",
			"disapproval": false,
			"date": "2013-02-04 04:11:36.691310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 05:15:02.806770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done.\r\n\r\nI'll wait ~24 hours to submit, or until enough SPDY-inclined people are\r\nhappy with it.\r\n\r\n\r\nOn Sun, Feb 3, 2013 at 9:15 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7287045/<https://codereview.appspot.com/7287045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-04 05:15:56.008840",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"agl@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5bc517167a08 ***\n\nnet/http: add Next Protocol Negotation upgrade support to the Server\n\nThis provides the mechanism to connect SPDY support to the http\npackage, without pulling SPDY into the standard library.\n\nR=rsc, agl, mikioh.mikioh\nCC=golang-dev\nhttps://codereview.appspot.com/7287045",
			"disapproval": false,
			"date": "2013-02-04 21:55:39.985960",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7287045: net/http: add Next Protocol Negotation upgrade support ...",
	"created": "2013-02-03 21:29:18.676580",
	"patchsets": [
		1,
		2001,
		4001,
		7002,
		10001,
		14002,
		5006
	],
	"modified": "2013-02-04 21:55:41.486610",
	"closed": true,
	"issue": 7287045
}