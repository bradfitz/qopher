{
	"description": "runtime: save LR to stack when panicking to handle leaf function traceback",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7289047/diff/2001/src/pkg/runtime/signal_linux_arm.c\nFile src/pkg/runtime/signal_linux_arm.c (right):\n\nhttps://codereview.appspot.com/7289047/diff/2001/src/pkg/runtime/signal_linux_arm.c#newcode80\nsrc/pkg/runtime/signal_linux_arm.c:80: // probably a call to a nil func: the old link register\nHave you tested this case (calling a nil func)? I worry that the unwinder will get out of sync if we don't set the pc to 0 here.",
			"disapproval": false,
			"date": "2013-02-04 04:04:33.204650",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i will write a few tests in the runtime package to verify that the backtracer\ndoes a decent job.\n\nmy few thoughts:\n0. normal panics (*nilptr = 0)\n1. calling nil functions (zero.go below)\n(the line number for the top most frame is wrong, but\ni don't understand why)\n2. panics in sync/atomic\nany others?\n\nsuggestions welcome.\n\nhttps://codereview.appspot.com/7289047/diff/2001/src/pkg/runtime/signal_linux_arm.c\nFile src/pkg/runtime/signal_linux_arm.c (right):\n\nhttps://codereview.appspot.com/7289047/diff/2001/src/pkg/runtime/signal_linux_arm.c#newcode80\nsrc/pkg/runtime/signal_linux_arm.c:80: // probably a call to a nil func: the old link register\nOn 2013/02/04 04:04:33, rsc wrote:\n> Have you tested this case (calling a nil func)? I worry that the unwinder will\n> get out of sync if we don't set the pc to 0 here.\nYes, i had tested with the following program.\n\n$ cat zero.go\u00a0\npackage main\nvar f func() int\nfunc nest(i int) {\n\tif i == 0 {\n\t\tf()\n\t}\n\tnest(i-1)\n}\nfunc main() {\n\tnest(5)\n}\n$ go run zero.go\npanic: runtime error: call of nil func value\n[signal 0xb code=0x1 addr=0x0 pc=0x0]\n\ngoroutine 1 [running]:\nmain.nest(0x0, 0x10c48)\n\t/root/fast/go.hg/src/zero.go:9 +0x38\nmain.nest(0x1, 0x10c48)\n\t/root/fast/go.hg/src/zero.go:9 +0x48\nmain.nest(0x2, 0x10c48)\n\t/root/fast/go.hg/src/zero.go:9 +0x48\nmain.nest(0x3, 0x10c7c)\n\t/root/fast/go.hg/src/zero.go:9 +0x48\nmain.nest(0x4, 0x1c984)\n\t/root/fast/go.hg/src/zero.go:9 +0x48\nmain.nest(0x5, 0x1ca54)\n\t/root/fast/go.hg/src/zero.go:9 +0x48\nmain.main()\n\t/root/fast/go.hg/src/zero.go:13 +0x28\nexit status 2",
			"disapproval": false,
			"date": "2013-02-04 21:43:03.217700",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-03 20:02:09.789330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-02-05 12:00:09.197580",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8f547c432c68 ***\n\nruntime: save LR to stack when panicking to handle leaf function traceback\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7289047",
			"disapproval": false,
			"date": "2013-02-05 17:19:53.738850",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7289047: runtime: save LR on stack when panicking to handle leaf...",
	"created": "2013-02-03 20:00:24.981460",
	"patchsets": [
		1,
		2001,
		9001,
		10003,
		14001
	],
	"modified": "2013-02-05 17:19:58.370880",
	"closed": true,
	"issue": 7289047
}