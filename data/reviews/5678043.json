{
	"description": "sync/atomic: say that operations imply full memory barriers",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-19 14:52:51.766474",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not sure I want to put this sentence in the package doc.\nThe memory model document is out of date but it's really the\nright place for this to go.\n\nI also want to think very carefully about exactly what we should\nbe promising here.  It is unclear to me that we want to be making\nsuch strong guarantees.  I would rather leave this undocumented\nfor now.\n",
			"disapproval": false,
			"date": "2012-02-19 18:19:31.854009",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 19, 2012 at 10:19 PM, Russ Cox <rsc@golang.org> wrote:\n\n> I am not sure I want to put this sentence in the package doc.\n> The memory model document is out of date but it's really the\n> right place for this to go.\n>\n\nEven if we provide a detailed description in the MM doc, the package should\nalso say at least something short on this. It is where I will look for\nsemantics of atomics in the first place.\n\n\nI also want to think very carefully about exactly what we should\n> be promising here.  It is unclear to me that we want to be making\n> such strong guarantees.  I would rather leave this undocumented\n> for now.\n>\n\nThe problem is that the package is basically useless if it does provide any\nmemory ordering guarantees. I think even if we provide a more relaxed\natomics, we still must keep the sequentially consistent ones. So what is\nthe problem with saying that these ones are sequentially consistent, and\nthen adding a more relaxed ones (like StoreRelease) if we decide to?\n",
			"disapproval": false,
			"date": "2012-02-20 05:59:38.491601",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 20, 2012 at 00:59, Dmitry Vyukov <dvyukov@google.com> wrote:\n> The problem is that the package is basically useless if it does provide any\n> memory ordering guarantees. I think even if we provide a more relaxed\n> atomics, we still must keep the sequentially consistent ones. So what is the\n> problem with saying that these ones are sequentially consistent, and then\n> adding a more relaxed ones (like StoreRelease) if we decide to?\n\nThe main problem is the use of terms like memory ordering\nguarantees and sequentially consistent that are meaningful to you\nbut are not defined in Go.\n\nIt might be the case that we promise that for any set of atomic\nfunctions executed on a single address, there is an execution order\nF1, F2, ..., Fn such that F1 happens before F2 happens before ...\nhappens before Fn.  Or it might be that we want to promise something\nweaker.  I don't really want to puzzle through exactly what we want to\npromise here, right now.  Getting this stuff right is very very difficult,\nand it is critical that we do not overpromise.  I was very careful in the\nmemory model to underpromise, and I want to keep doing that.\nI don't believe we have to nail this down for Go 1.  That will mean that\nusing sync/atomic is a little more sketchy than it might be, but so be it.\n\nOnce Go 1 is out I would be happy to have a leisurely discussion\nabout this, including consideration of what the recent C and C++\nmodels have promised.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-22 17:34:55.669094",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5678043: sync/atomic: say that operations imply full memory barriers",
	"created": "2012-02-19 14:52:11.444539",
	"patchsets": [
		1,
		2001,
		3002
	],
	"modified": "2012-05-19 16:55:06.597360",
	"closed": true,
	"issue": 5678043
}