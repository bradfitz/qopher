{
	"description": "cmd/go: fix cgo linking on netbsd\n\nNetBSD's built-in linker script for 'ld -r' does not provide a\nSEARCH_DIR. As a result libgcc.a is not found when -lgcc is used.\n\nWork around this by determining the path to libgcc (by invoking\ngcc with the -print-libgcc-file-name option) and explicitly\nreferencing the resulting library.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"aram@mgk.ro",
		"lucio.dere@gmail.com",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"aram@mgk.ro",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/17 18:47:34, iant wrote:\n> Interesting.\n> \n> The problem I see with adding an explicit /usr/lib is that it fail badly if\n> using a cross-compiler.  One possibility would to change \"-lgcc\" to the output\n> of \"gcc -print-libgcc-file-name\".\n\n-L$(dirname $(gcc -print-libgcc-file-name)) ??\n\nIt seems to me that we need an optional argument somewhere. That would work on all architectures, but would it be OK for cross-compilation?\n\nLucio",
			"disapproval": false,
			"date": "2012-08-18 05:00:03.659480",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"aram@mgk.ro",
				"lucio.dere@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "two things:\n1. i think you can just use the output of 'gcc -print-libgcc-file-name' as first\nentry of staticLibs (using -L isn't necessary as we specifically want to link ligcc.a)\n2. if you're worried about possible waste of multiple gcc invocations, you\ncan make staticLibs a global and using sync.Once to guard it. even we don't\nenable this step for other OSes, i think we still need to invoke it several times\nif we compile several cgo packages/commands at a time.\n\nps: i should've have done 2, but i overlooked it. now that getting staticLibs\nis more expensive, i think we need to make sure it's only done once.\nalso, i think we don't need to special case netbsd.",
			"disapproval": false,
			"date": "2012-08-20 16:15:53.082930",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/17 17:59:03, iant wrote:\n> Oh, I see, it's ld -r.  Argh.\n> \n> I forget: did we try \"gcc -Wl,-r -nostdlib\"?\n\nI believe that is how it is currently being invoked. The same result occurs on NetBSD:\n\n$ gcc -Wl,-r -nostdlib -lgcc test.o -o test\nld: cannot find -lgcc\n\nThe key difference with -r is the change in the built-in linker script:\n\n$ gcc -Wl,-r,--verbose -nostdlib -lgcc test.o -o test | grep SEARCH_DIR\nld: cannot find -lgcc\n$ gcc -Wl,--verbose -nostdlib -lgcc | grep SEARCH_DIR\nSEARCH_DIR(\"/usr/lib\")\nld: warning: cannot find entry symbol _start; defaulting to 4000b0",
			"disapproval": false,
			"date": "2012-08-17 18:20:54.146430",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Saturday, August 18, 2012, wrote:\r\n>\r\n> The problem I see with adding an explicit /usr/lib is that it fail badly\r\n> if using a cross-compiler.  One possibility would to change \"-lgcc\" to\r\n> the output of \"gcc -print-libgcc-file-name\".\r\n>\r\nI vote for this approach.\r\n\r\nAnd I think NetBSD should fix its -r linker script.\r\n",
			"disapproval": false,
			"date": "2012-08-18 05:07:52.518510",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-08-17 17:41:40.357040",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This doesn't look right to me.  We should not be linking by invoking ld directly.  We should be invoking gcc.  And gcc should pass -L /usr/lib when it invokes ld.",
			"disapproval": false,
			"date": "2012-08-17 17:57:25.923270",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh, I see, it's ld -r.  Argh.\n\nI forget: did we try \"gcc -Wl,-r -nostdlib\"?",
			"disapproval": false,
			"date": "2012-08-17 17:59:03.954100",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Interesting.\n\nThe problem I see with adding an explicit /usr/lib is that it fail badly if using a cross-compiler.  One possibility would to change \"-lgcc\" to the output of \"gcc -print-libgcc-file-name\".",
			"disapproval": false,
			"date": "2012-08-17 18:47:34.060920",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"aram@mgk.ro",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "An explicit /usr/lib is not good because I might want to use a\ndifferent gcc.  This is very likely on NetBSD where people generally\nuse the gcc from ports and the system gcc is only used for building\nthe system.\n\nIt also can't work with a cross compiler.",
			"disapproval": false,
			"date": "2012-08-17 19:13:11.355420",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"aram@mgk.ro",
				"lucio.dere@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/17 18:47:34, iant wrote:\n> Interesting.\n> \n> The problem I see with adding an explicit /usr/lib is that it fail badly if\n> using a cross-compiler.  One possibility would to change \"-lgcc\" to the output\n> of \"gcc -print-libgcc-file-name\".\n\nGood point and an oversight on my part. I've changed it so that on NetBSD we add a search directory for the path returned by \"gcc -print-libgcc-file-name\". This solves the issue, should work with non-system compilers and avoids an additional gcc invocation on other platforms. Alternatively I can change it to your suggestion above and reference the library directly.\n\nPTAL.",
			"disapproval": false,
			"date": "2012-08-20 15:33:33.387180",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"aram@mgk.ro",
				"lucio.dere@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/08/20 16:15:53, minux wrote:\n> two things:\n> 1. i think you can just use the output of 'gcc -print-libgcc-file-name' as first\n> entry of staticLibs (using -L isn't necessary as we specifically want to link\n> ligcc.a)\n> 2. if you're worried about possible waste of multiple gcc invocations, you\n> can make staticLibs a global and using sync.Once to guard it. even we don't\n> enable this step for other OSes, i think we still need to invoke it several\n> times\n> if we compile several cgo packages/commands at a time.\n> \n> ps: i should've have done 2, but i overlooked it. now that getting staticLibs\n> is more expensive, i think we need to make sure it's only done once.\n> also, i think we don't need to special case netbsd.\n\nI've modified this change to do (1) - PTAL. If we want to optimise it, we can do it in a later change.",
			"disapproval": false,
			"date": "2012-08-21 17:40:34.602260",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"aram@mgk.ro",
				"lucio.dere@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=865991cd86fb ***\n\ncmd/go: fix cgo linking on netbsd\n\nNetBSD's built-in linker script for 'ld -r' does not provide a\nSEARCH_DIR. As a result libgcc.a is not found when -lgcc is used.\n\nWork around this by determining the path to libgcc (by invoking\ngcc with the -print-libgcc-file-name option) and explicitly\nreferencing the resulting library.\n\nR=golang-dev, iant, aram, lucio.dere, minux.ma\nCC=golang-dev\nhttp://codereview.appspot.com/6470044",
			"disapproval": false,
			"date": "2012-08-22 12:23:35.907170",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"aram@mgk.ro",
				"lucio.dere@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-08-22 09:32:18.121820",
			"approval": true
		}
	],
	"owner_email": "jsing@google.com",
	"private": false,
	"base_url": "",
	"owner": "jsing",
	"subject": "code review 6470044: cmd/go: fix cgo linking on netbsd",
	"created": "2012-08-17 17:38:05.200020",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		12001,
		10002,
		17001
	],
	"modified": "2012-08-22 12:23:42.417100",
	"closed": true,
	"issue": 6470044
}