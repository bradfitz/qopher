{
	"description": "net: add IP-level socket option helpers for Unix variants\n\nAlso reorganize socket options stuff but there are no API behavioral\nchanges.",
	"cc": [
		"rsc@golang.org",
		"fullung@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-19 02:44:30.225264",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 19, 2011 at 7:00 PM,  <fullung@gmail.com> wrote:\n\n> http://codereview.appspot.com/5494067/diff/5082/src/pkg/net/sockoptip_linux.go#newcode29\n> src/pkg/net/sockoptip_linux.go:29: if ifi != nil {\n> What's the reason for this nil check here?\n\nAh, it's just the way how to set ifindex to zero value (any, all or\nset in-kernel value to zero?).\n",
			"disapproval": false,
			"date": "2011-12-19 10:13:36.555357",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Note that this CL requires CL 5489062 (net, syscall: interface address\nand mask).\n\nOn Mon, Dec 19, 2011 at 11:44 AM,  <mikioh.mikioh@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com, albert.strasheim,\n>\n> Message:\n> Hello golang-dev@googlegroups.com, fullung@gmail.com (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> net: add IP-level socket option helpers for Unix variants\n>\n> Also reorganizes socket options stuff but there are no API behavioral\n> changes.\n>\n> Please review this at http://codereview.appspot.com/5494067/\n>\n> Affected files:\n> \u00a0M src/pkg/net/Makefile\n> \u00a0M src/pkg/net/multicast_test.go\n> \u00a0M src/pkg/net/sock.go\n> \u00a0M src/pkg/net/sockopt.go\n> \u00a0M src/pkg/net/sockopt_bsd.go\n> \u00a0M src/pkg/net/sockopt_linux.go\n> \u00a0M src/pkg/net/sockopt_windows.go\n> \u00a0A src/pkg/net/sockoptip.go\n> \u00a0A src/pkg/net/sockoptip_bsd.go\n> \u00a0A src/pkg/net/sockoptip_darwin.go\n> \u00a0A src/pkg/net/sockoptip_freebsd.go\n> \u00a0A src/pkg/net/sockoptip_linux.go\n> \u00a0A src/pkg/net/sockoptip_openbsd.go\n> \u00a0A src/pkg/net/sockoptip_windows.go\n> \u00a0M src/pkg/net/sockoptso.go\n> \u00a0M src/pkg/net/udpsock_posix.go\n>\n>\n",
			"disapproval": false,
			"date": "2011-12-19 02:46:13.541174",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 19, 2011 at 7:00 PM,  <fullung@gmail.com> wrote:\n\n> you haven't implemented the public API yet\n\nYup, because you've already submitted the public API CL.\n",
			"disapproval": false,
			"date": "2011-12-19 10:15:20.973465",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Except for the one question, LGTM.\n\nhttp://codereview.appspot.com/5494067/diff/5082/src/pkg/net/sockoptip_linux.go\nFile src/pkg/net/sockoptip_linux.go (right):\n\nhttp://codereview.appspot.com/5494067/diff/5082/src/pkg/net/sockoptip_linux.go#newcode29\nsrc/pkg/net/sockoptip_linux.go:29: if ifi != nil {\nWhat's the reason for this nil check here? If I understand correctly, you haven't implemented the public API yet, but I'm guessing that if a nil interface value makes it this far, it's better to just panic. The public interface will probably check for ifi==nil and return EINVAL?",
			"disapproval": false,
			"date": "2011-12-19 10:00:23.732295",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "general outline looks good.\nvarious small things below\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go\nFile src/pkg/net/sockopt.go (right):\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode25\nsrc/pkg/net/sockopt.go:25: func ipv4AddrToInterface(a []byte) (*Interface, error) {\ns/[]byte/IP/\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode51\nsrc/pkg/net/sockopt.go:51: return nil, os.ENOENT\nWe should only use os.E errors when forced by\na system call or other external constraint.\nOtherwise let's define more specific errors\n\nYou can have a global\n\nvar errNoInterface = errors.New(\"no interface with the given address\")\n\nand return (and check for, if necessary) that error.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode54\nsrc/pkg/net/sockopt.go:54: func interfaceToIPv4Addr(ifi *Interface) ([]byte, error) {\ns/[]byte/IP/\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode90\nsrc/pkg/net/sockopt.go:90: break\nAre you trying to break the loop?  You need to label it, like\n\nInterfaces:\n   for _, ifa := ...\n\nbreak Interfaces\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode100\nsrc/pkg/net/sockopt.go:100: return os.EINVAL\nvar errNotMulticast = errors.New(\"non-multicast interface\")\n\nor whatever the problem is.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockoptso.go\nFile src/pkg/net/sockoptso.go (right):\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockoptso.go#newcode8\nsrc/pkg/net/sockoptso.go:8: \nHow is this file different from sockopt.go?",
			"disapproval": false,
			"date": "2011-12-21 04:27:50.457140",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-22 09:08:09.198052",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go\nFile src/pkg/net/sockopt.go (right):\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode25\nsrc/pkg/net/sockopt.go:25: func ipv4AddrToInterface(a []byte) (*Interface, error) {\nOn 2011/12/21 04:27:50, rsc wrote:\n> s/[]byte/IP/\n\nDone.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode51\nsrc/pkg/net/sockopt.go:51: return nil, os.ENOENT\nOn 2011/12/21 04:27:50, rsc wrote:\n> We should only use os.E errors when forced by\n> a system call or other external constraint.\n> Otherwise let's define more specific errors\n> \n> You can have a global\n> \n> var errNoInterface = errors.New(\"no interface with the given address\")\n> \n> and return (and check for, if necessary) that error.\n\nDone.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode54\nsrc/pkg/net/sockopt.go:54: func interfaceToIPv4Addr(ifi *Interface) ([]byte, error) {\nOn 2011/12/21 04:27:50, rsc wrote:\n> s/[]byte/IP/\n\nDone.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode90\nsrc/pkg/net/sockopt.go:90: break\nOn 2011/12/21 04:27:50, rsc wrote:\n> Are you trying to break the loop?  You need to label it, like\n> \n> Interfaces:\n>    for _, ifa := ...\n> \n> break Interfaces\n\noops, thx.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode90\nsrc/pkg/net/sockopt.go:90: break\nOn 2011/12/21 04:27:50, rsc wrote:\n> Are you trying to break the loop?  You need to label it, like\n> \n> Interfaces:\n>    for _, ifa := ...\n> \n> break Interfaces\n\nDone.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockopt.go#newcode100\nsrc/pkg/net/sockopt.go:100: return os.EINVAL\nOn 2011/12/21 04:27:50, rsc wrote:\n> var errNotMulticast = errors.New(\"non-multicast interface\")\n> \n> or whatever the problem is.\n\nDone.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockoptso.go\nFile src/pkg/net/sockoptso.go (right):\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockoptso.go#newcode8\nsrc/pkg/net/sockoptso.go:8: \nOn 2011/12/21 04:27:50, rsc wrote:\n> How is this file different from sockopt.go?\n\nwill merge.\n\nhttp://codereview.appspot.com/5494067/diff/8001/src/pkg/net/sockoptso.go#newcode8\nsrc/pkg/net/sockoptso.go:8: \nOn 2011/12/21 04:27:50, rsc wrote:\n> How is this file different from sockopt.go?\n\nDone.",
			"disapproval": false,
			"date": "2011-12-22 09:07:48.075369",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-06 00:38:55.279749",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your review.\n\nOn Fri, Jan 6, 2012 at 5:06 PM,  <fullung@gmail.com> wrote:\n\n> While you're in there, how about also adding the few bits from\n>\n> http://codereview.appspot.com/5487075/\n>\n> or do you want to add new public API in a separate CL?\n\nI'd prefer a separate public API CL but I have no good picture\nfor that right now, so I'm happy if you can proceed with 5487075.\n",
			"disapproval": false,
			"date": "2012-01-06 08:54:24.215121",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 6, 2012 at 6:08 PM, Albert Strasheim <fullung@gmail.com> wrote:\n\n> Now that I think about it, what should the MulticastInterface and\n> MulticastLoopback public API do?\n\nI can see several aspects regarding to IP-level socket\noptions like following:\n- socket sticky basis or per-packet (w/ ancillary) basis,\n- IPv4 or IPv6.\n\nI hope that new API consolidates above toggles and would\nbe nicely simple API.\n\n> Can you think of any situation where users might want to do different\n> things for the IPv4 and IPv6 loopback or interface settings of a\n> single socket?\n\nNo, I think IP-level net API should avoid such situation.\nPerhaps existing c.JoinGroup should be replaced with c.JoinIPv4Group\nand c.JoinIPv6Group to avoid confusion.\n",
			"disapproval": false,
			"date": "2012-01-06 09:55:04.062553",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/06 00:38:55, mikioh wrote:\n> Hello mailto:rsc@golang.org, mailto:fullung@gmail.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nJust took a quick look, but looks good.\n\nWhile you're in there, how about also adding the few bits from\n\nhttp://codereview.appspot.com/5487075/\n\nor do you want to add new public API in a separate CL?\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2012-01-06 08:06:06.220180",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn Fri, Jan 6, 2012 at 10:54 AM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\n> Thank you for your review.\n> On Fri, Jan 6, 2012 at 5:06 PM, \u00a0<fullung@gmail.com> wrote:\n>> While you're in there, how about also adding the few bits from\n>> http://codereview.appspot.com/5487075/\n>> or do you want to add new public API in a separate CL?\n> I'd prefer a separate public API CL but I have no good picture\n> for that right now, so I'm happy if you can proceed with 5487075.\n\nNow that I think about it, what should the MulticastInterface and\nMulticastLoopback public API do?\n\nShould they call both setIPv4MulticastInterface and\nsetIPv6MulticastInterface, and setIPv4MulticastLoopback and\nsetIPv6MulticastLoopback?\n\nIf so, is there a chance that the IPv6 setsockopts could fail on\nmachines that have IPv6 disabled? I see there's a supportsIPv6 bool in\nthe net package, so maybe that just needs to be checked before calling\nthe IPv6 versions.\n\nCan you think of any situation where users might want to do different\nthings for the IPv4 and IPv6 loopback or interface settings of a\nsingle socket?\n\nRegards\n\nAlbert\n",
			"disapproval": false,
			"date": "2012-01-06 09:08:30.379933",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 10, 2012 at 6:09 PM,  <fullung@gmail.com> wrote:\n\n> This patch doesn't apply for me against tip. Do I need any other CLs?\n\nNo, but this CL includes copy ops, e.g., copy from sock.go to sockopt.go,\nso please try hg clpatch 5494067.\n",
			"disapproval": false,
			"date": "2012-01-10 09:29:29.651809",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-10 00:36:58.032156",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2012/01/10 00:36:58, mikioh wrote:\n> Hello mailto:rsc@golang.org, mailto:fullung@gmail.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nThis patch doesn't apply for me against tip. Do I need any other CLs?\n\n$ hg identify\n7677bf602bf2 tip\n\n$ wget http://codereview.appspot.com/download/issue5494067_27001.diff\n\n$ hg patch --no-commit issue5494067_27001.diff\napplying issue5494067_27001.diff\napplied to working directory\napplied to working directory\napplied to working directory\npatching file src/pkg/net/sock.go\nHunk #1 FAILED at 3\nHunk #2 FAILED at 22\nHunk #3 FAILED at 107\nHunk #4 FAILED at 139\n4 out of 4 hunks FAILED -- saving rejects to file src/pkg/net/sock.go.rej\nabort: patch failed to apply\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2012-01-10 09:09:26.561446",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 10, 2012 at 8:26 PM,  <fullung@gmail.com> wrote:\n\n> By the way, this CL fixes a bug in the existing code here that was\n> introduced when Addrs was changed to return IPNets.\n\nMy bad.\n\nThis is a follow-up CL of <http://codereview.appspot.com/5489062>\nbut took a bit long time.\n",
			"disapproval": false,
			"date": "2012-01-10 13:14:13.717841",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thanks for the help with clpatch.\n\nhttp://codereview.appspot.com/5494067/diff/27001/src/pkg/net/udpsock_posix.go\nFile src/pkg/net/udpsock_posix.go (left):\n\nhttp://codereview.appspot.com/5494067/diff/27001/src/pkg/net/udpsock_posix.go#oldcode305\nsrc/pkg/net/udpsock_posix.go:305: if x := ifa.(*IPAddr).IP.To4(); x != nil {\nBy the way, this CL fixes a bug in the existing code here that was introduced when Addrs was changed to return IPNets.",
			"disapproval": false,
			"date": "2012-01-10 11:26:18.208828",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e1ed4e6723eb ***\n\nnet: add IP-level socket option helpers for Unix variants\n\nAlso reorganize socket options stuff but there are no API behavioral\nchanges.\n\nR=rsc, fullung\nCC=golang-dev\nhttp://codereview.appspot.com/5494067",
			"disapproval": false,
			"date": "2012-01-11 00:53:42.411270",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 5494067: net: add IP-level socket option helpers for Unix variants",
	"created": "2011-12-18 09:51:19.770304",
	"patchsets": [
		68,
		5082,
		8001,
		12042,
		15001,
		15006,
		27001,
		23021
	],
	"modified": "2012-01-11 00:54:08.126630",
	"closed": true,
	"issue": 5494067
}