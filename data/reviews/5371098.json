{
	"description": "reflect: avoid allocation during Type.Field\n\nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkCodeEncoder            54459459     53357932   -2.02%\nBenchmarkCodeMarshal            56237601     55004241   -2.19%\nBenchmarkCodeDecoder           127630262    126423185   -0.95%\nBenchmarkCodeUnmarshal         128767843    125555821   -2.49%\nBenchmarkCodeUnmarshalReuse    123195734    122623580   -0.46%\nBenchmarkUnmarshalString             911          901   -1.10%\nBenchmarkUnmarshalFloat64            822          830   +0.97%\nBenchmarkUnmarshalInt64              748          748   +0.00%\nBenchmarkSkipValue               1938584      1965871   +1.41%\n\nbenchmark                       old MB/s     new MB/s  speedup\nBenchmarkCodeEncoder               35.63        36.37    1.02x\nBenchmarkCodeMarshal               34.50        35.28    1.02x\nBenchmarkCodeDecoder               15.20        15.35    1.01x\nBenchmarkCodeUnmarshal             15.07        15.46    1.03x\nBenchmarkSkipValue                113.75       112.17    0.99x\n\nFixes issue 2320.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"iant@golang.org",
		"r@golang.org",
		"r@google.com",
		"remyoudompheng@gmail.com",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 15, 2011, at 9:19 AM, Russ Cox wrote:\n\n> On Tue, Nov 15, 2011 at 12:17, Rob 'Commander' Pike <r@google.com> wrote:\n>> compromise: why not create seq in go code?\n> \n> i don't have a way to define read-only data in go code.\n> i can create read-write data and hope that people won't\n> edit f.Index, but that's a little fragile.  not unsafe, but fragile.\n> i'll put it aside and circle back once other bottlenecks are\n> gone.  ultimately i think we need to have the compiler give\n> reflect a little more help with things like the accessible\n> embedded fields.\n\ni understand. it won't be read only but it will be allocated only once. maybe safety considerations are too important. i'm not sure.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-15 17:22:02.521567",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Nov 15, 2011 at 12:07,  <r@golang.org> wrote:\n> this is above my gross-out threshold. since the measured gain is so\n> modest, i suggest waiting for a better solution.\n\nokay.  the measured gain will get bigger as other\nbottlenecks disappear.  i will push this aside for now.\n",
			"disapproval": false,
			"date": "2011-11-15 17:13:32.644989",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Nov 15, 2011 at 12:17, Rob 'Commander' Pike <r@google.com> wrote:\n> compromise: why not create seq in go code?\n\ni don't have a way to define read-only data in go code.\ni can create read-write data and hope that people won't\nedit f.Index, but that's a little fragile.  not unsafe, but fragile.\ni'll put it aside and circle back once other bottlenecks are\ngone.  ultimately i think we need to have the compiler give\nreflect a little more help with things like the accessible\nembedded fields.\n",
			"disapproval": false,
			"date": "2011-11-15 17:20:01.045392",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "this is above my gross-out threshold. since the measured gain is so modest, i suggest waiting for a better solution.",
			"disapproval": false,
			"date": "2011-11-15 17:07:19.833695",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "compromise: why not create seq in go code?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-15 17:17:31.524977",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello iant, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-15 17:02:12.136098",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI would like a decision about whether we care about this anymore.\n\nSince last we visited this issue, the compiler has added a pragma, making it possible for us to write the sequence table in C rather than assembly.\n\nHowever, the garbage collector has also gotten faster. Whereas before the speedup was about 7%, now the speedup is only about 2%. And the code still has the drawback of introducing the possibility of an unrecoverably panic. To date I don't believe we've ever made writable pointers to read-only memory visible in user code.\n\nI am inclined not to do this, and to close the issue working as intended. \n\nThoughts?",
			"disapproval": false,
			"date": "2013-03-11 20:45:01.106570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2 cents: I'd still like to see this on principle, to get rid of allocations.\r\n\r\nOn Mon, Mar 11, 2013 at 1:45 PM, <rsc@golang.org> wrote:\r\n\r\n> PTAL\r\n>\r\n> I would like a decision about whether we care about this anymore.\r\n>\r\n> Since last we visited this issue, the compiler has added a pragma,\r\n> making it possible for us to write the sequence table in C rather than\r\n> assembly.\r\n>\r\n> However, the garbage collector has also gotten faster. Whereas before\r\n> the speedup was about 7%, now the speedup is only about 2%. And the code\r\n> still has the drawback of introducing the possibility of an\r\n> unrecoverably panic. To date I don't believe we've ever made writable\r\n> pointers to read-only memory visible in user code.\r\n>\r\n> I am inclined not to do this, and to close the issue working as\r\n> intended.\r\n>\r\n> Thoughts?\r\n>\r\n> https://codereview.appspot.**com/5371098/<https://codereview.appspot.com/5371098/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-11 20:47:27.060980",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am in favor of an allocation-free solution if available, but this implementation has bothered me from the beginning. Happy to see it abandoned.",
			"disapproval": false,
			"date": "2013-03-11 20:47:29.536340",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/11 20:45:01, rsc wrote:\n> However, the garbage collector has also gotten faster. Whereas before the\n> speedup was about 7%, now the speedup is only about 2%. And the code still has\n> the drawback of introducing the possibility of an unrecoverably panic. To date I\n> don't believe we've ever made writable pointers to read-only memory visible in\n> user code.\n> \n> I am inclined not to do this, and to close the issue working as intended. \n> \n> Thoughts?\n\nI think writable poitners to read-only memory are a bad idea. The best idea I can have is make StructField.Index a slice of a hidden StructField.index [4]int so that it doesn't escape and cover most cases.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2013-03-11 20:48:43.851960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 11, 2013 at 4:48 PM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> On 2013/03/11 20:45:01, rsc wrote:\r\n>\r\n>> However, the garbage collector has also gotten faster. Whereas before\r\n>>\r\n> the\r\n>\r\n>> speedup was about 7%, now the speedup is only about 2%. And the code\r\n>>\r\n> still has\r\n>\r\n>> the drawback of introducing the possibility of an unrecoverably panic.\r\n>>\r\n> To date I\r\n>\r\n>> don't believe we've ever made writable pointers to read-only memory\r\n>>\r\n> visible in\r\n>\r\n>> user code.\r\n>>\r\n>\r\n>  I am inclined not to do this, and to close the issue working as\r\n>>\r\n> intended.\r\n>\r\n>  Thoughts?\r\n>>\r\n>\r\n> I think writable poitners to read-only memory are a bad idea. The best\r\n> idea I can have is make StructField.Index a slice of a hidden\r\n> StructField.index [4]int so that it doesn't escape and cover most cases.\r\n>\r\n\r\nThis doesn't work: assignment of a StructField value will not update the\r\nslice, and now you have a slice pointing back into the original StructField.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-11 20:49:47.231510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Alternate proposal: https://codereview.appspot.com/7730043 (variation on an\r\nearlier attempt)\r\n\r\nNo read-only memory in this case, but a small race window if somebody does\r\nmodify the slice.  I wouldn't be surprised if Dmitry had some crazy fix for\r\nthat.\r\n\r\nOn Mon, Mar 11, 2013 at 1:45 PM, <rsc@golang.org> wrote:\r\n\r\n> PTAL\r\n>\r\n> I would like a decision about whether we care about this anymore.\r\n>\r\n> Since last we visited this issue, the compiler has added a pragma,\r\n> making it possible for us to write the sequence table in C rather than\r\n> assembly.\r\n>\r\n> However, the garbage collector has also gotten faster. Whereas before\r\n> the speedup was about 7%, now the speedup is only about 2%. And the code\r\n> still has the drawback of introducing the possibility of an\r\n> unrecoverably panic. To date I don't believe we've ever made writable\r\n> pointers to read-only memory visible in user code.\r\n>\r\n> I am inclined not to do this, and to close the issue working as\r\n> intended.\r\n>\r\n> Thoughts?\r\n>\r\n> https://codereview.appspot.**com/5371098/<https://codereview.appspot.com/5371098/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-11 22:03:14.393830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's drop this please.\r\n",
			"disapproval": false,
			"date": "2013-03-11 22:03:31.476030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"r@google.com",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-03-11 22:03:38.002640",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5371098: reflect: avoid allocation during Type.Field",
	"created": "2011-11-15 16:07:15.798326",
	"patchsets": [
		1,
		2001,
		2002,
		6002,
		13006,
		16006
	],
	"modified": "2013-03-11 22:03:39.845710",
	"closed": true,
	"issue": 5371098
}