{
	"description": "net: add ParseMAC function\r\n\r\nParseMAC parses a string representing MAC-48, EUI-48, or EUI-64 into\r\na HardwareAddr.",
	"cc": [
		"rsc@golang.org",
		"fshahriar@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "borman@google.com",
			"recipients": [
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-08-23 20:30:31.642444",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go\nFile src/pkg/net/interface.go (right):\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go#newcode38\nsrc/pkg/net/interface.go:38: var ok bool\nMove down to where you use it (inside the two for loops).\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go#newcode39\nsrc/pkg/net/interface.go:39: const errstr = \": invalid MAC address\"\nYou can just inline this where you need it.\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go#newcode84\nsrc/pkg/net/interface.go:84: return nil, os.NewError(s + errstr)\nreturn nil, os.NewError(\"invalid MAC address: \" + s)\nFor clarity, text you don't have control over comes last.\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface_test.go\nFile src/pkg/net/interface_test.go (right):\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface_test.go#newcode102\nsrc/pkg/net/interface_test.go:102: \nfunc match(s string, err os.Error) bool {\n    if s == \"\" {\n        return err == nil\n    }\n    return err != nil && strings.Contains(err.String(), s)\n}\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface_test.go#newcode106\nsrc/pkg/net/interface_test.go:106: if e != nil {\nout, err := ParseMAC(tt.in)\nif !reflect.DeepEqual(out, tt.out) || !match(err, tt.err) {\n    t.Errorf(\"ParseMAC(%q) = %v, %v, want %v, %v\", tt.in, out, err, tt.out, tt.err)\n}",
			"disapproval": false,
			"date": "2011-08-23 20:42:03.511687",
			"approval": false
		},
		{
			"sender": "fshahriar@gmail.com",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"fshahriar@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-08-24 02:37:02.660150",
			"approval": true
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go\nFile src/pkg/net/interface.go (right):\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go#newcode38\nsrc/pkg/net/interface.go:38: var ok bool\nOn 2011/08/23 20:42:03, rsc wrote:\n> Move down to where you use it (inside the two for loops).\n\nDone.\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go#newcode39\nsrc/pkg/net/interface.go:39: const errstr = \": invalid MAC address\"\nOn 2011/08/23 20:42:03, rsc wrote:\n> You can just inline this where you need it.\n\nOh, good catch.  It made more sense  before I put the goto's in.  But certainly not now.\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface.go#newcode84\nsrc/pkg/net/interface.go:84: return nil, os.NewError(s + errstr)\nOn 2011/08/23 20:42:03, rsc wrote:\n> return nil, os.NewError(\"invalid MAC address: \" + s)\n> For clarity, text you don't have control over comes last.\n> \n\nYes, that would read better.  Thanks.\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface_test.go\nFile src/pkg/net/interface_test.go (right):\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface_test.go#newcode102\nsrc/pkg/net/interface_test.go:102: \nOn 2011/08/23 20:42:03, rsc wrote:\n> func match(s string, err os.Error) bool {\n>     if s == \"\" {\n>         return err == nil\n>     }\n>     return err != nil && strings.Contains(err.String(), s)\n> }\n\nDone.\n\nhttp://codereview.appspot.com/4922048/diff/8001/src/pkg/net/interface_test.go#newcode106\nsrc/pkg/net/interface_test.go:106: if e != nil {\nOn 2011/08/23 20:42:03, rsc wrote:\n> out, err := ParseMAC(tt.in)\n> if !reflect.DeepEqual(out, tt.out) || !match(err, tt.err) {\n>     t.Errorf(\"ParseMAC(%q) = %v, %v, want %v, %v\", tt.in, out, err, tt.out,\n> tt.err)\n> }\n\nThanks.  Much nicer.",
			"disapproval": false,
			"date": "2011-08-23 22:51:31.917694",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-08-23 22:51:47.119059",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nvery nice",
			"disapproval": false,
			"date": "2011-08-24 02:06:57.854373",
			"approval": true
		},
		{
			"sender": "fshahriar@gmail.com",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"fshahriar@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4922048/diff/11002/src/pkg/net/interface.go\nFile src/pkg/net/interface.go (right):\n\nhttp://codereview.appspot.com/4922048/diff/11002/src/pkg/net/interface.go#newcode86\nsrc/pkg/net/interface.go:86: // xtoi2 converts the next to hex digits of s into a byte.\ns/ to/ two/\n\nhttp://codereview.appspot.com/4922048/diff/11002/src/pkg/net/interface.go#newcode89\nsrc/pkg/net/interface.go:89: // does not match e false is returned.\ns/match/match,/",
			"disapproval": false,
			"date": "2011-08-24 02:19:25.023270",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"fshahriar@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, fshahriar@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-08-24 02:22:09.370598",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"borman@google.com",
				"rsc@golang.org",
				"fshahriar@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b41082a22169 ***\n\nnet: add ParseMAC function\n\nParseMAC parses a string representing MAC-48, EUI-48, or EUI-64 into\na HardwareAddr.\n\nR=rsc, fshahriar\nCC=golang-dev\nhttp://codereview.appspot.com/4922048\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-08-24 02:38:48.440628",
			"approval": false
		}
	],
	"owner_email": "borman@google.com",
	"private": false,
	"base_url": "",
	"owner": "borman",
	"subject": "code review 4922048: net: add ParseMAC function",
	"created": "2011-08-23 20:28:39.782293",
	"patchsets": [
		1,
		2001,
		5002,
		8001,
		11002,
		8004
	],
	"modified": "2011-09-21 22:29:49.965424",
	"closed": true,
	"issue": 4922048
}