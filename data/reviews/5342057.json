{
	"description": "exp/ssh: Add support for (most) of the ciphers from RFC4253, RFC4344 and RFC4345.",
	"cc": [
		"dave@cheney.net",
		"agl@golang.org",
		"taruti@taruti.net",
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: dave@cheney.net, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-09 02:43:08.442004",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/4001/src/pkg/Makefile\nFile src/pkg/Makefile (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/Makefile#newcode89\nsrc/pkg/Makefile:89: exp/ssh\\\nI'm unsure if I should add this or not as part of this change. Was there a reason it was not added already?",
			"disapproval": false,
			"date": "2011-11-09 02:45:06.676194",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/Makefile\nFile src/pkg/exp/ssh/Makefile (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/Makefile#newcode15\nsrc/pkg/exp/ssh/Makefile:15: transport.go\\\nOn 2011/11/09 08:52:58, dfc wrote:\n> Could you please move transport to it's correct place in the sequence. \n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go#newcode52\nsrc/pkg/exp/ssh/cipher.go:52: return fmt.Sprintf(\"bad crypt direction: %d\", cryptDirection(err))\nOn 2011/11/09 08:52:58, dfc wrote:\n> Maybe add a String method on cryptDirection?\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go#newcode236\nsrc/pkg/exp/ssh/cipher.go:236: // minus algorithms that are not implemented.\nOn 2011/11/09 08:52:58, dfc wrote:\n> for consistency with the rest of the package, include a ref. to the RFC?\n\nThe set and order of algorithms here is from OpenSSH rather than an RFC. Is there an RFC with a suggested set/order in that I could use and cite instead?\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/client.go#newcode306\nsrc/pkg/exp/ssh/client.go:306: // The allowed cipher algorithms. If unspecified then a default order is used.\nOn 2011/11/09 08:52:58, dfc wrote:\n> Maybe mention where the default order is listed in the RFC.\n\nIt isn't... that I know of. Maybe I should expose or otherwise advertise the contents of the default order variable in the docs, as well as citing OpenSSH?\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/server.go\nFile src/pkg/exp/ssh/server.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/server.go#newcode44\nsrc/pkg/exp/ssh/server.go:44: // The allowed cipher algorithms. If unspecified then a default order is used.\nOn 2011/11/09 08:52:58, dfc wrote:\n> Same as client.go\n\nI'll do some refactoring to make it common, putting this in a new, commonly-used-struct, that will specify crypto algorithms to be used. I intend to be filling in some others, later (such as MAC algorithm).\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go\nFile src/pkg/exp/ssh/transport.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go#newcode21\nsrc/pkg/exp/ssh/transport.go:21: minPacketSizeMultiple = 8 // TODO(dfc) does this need to be configurable?\nOn 2011/11/09 08:52:58, dfc wrote:\n> I guess it doesn't need to be configurable, can you please remove the TODO.\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go#newcode287\nsrc/pkg/exp/ssh/transport.go:287: func (c *common) setupKeys(d direction, cd cryptDirection, K, H, sessionId []byte, hashFunc crypto.Hash) error {\nOn 2011/11/09 08:52:58, dfc wrote:\n> This function declaration is getting to be a whopper. Is there anything that can\n> be done to simplify it ?\n\nI have made an attempt at this, moving K, H and hashFunc into a \"kexResult\" struct type that is returned from the kexDH methods, as they are all determined by the key-exchange algorithm, ultimately.\n\nsessionId doesn't fit in there too logically, as it comes from the first H value, but stays constant across subsequent key-re-exchanges (not that those are implemented yet, although they should be for longer-lived connections).\n\nNot sure that I'm 100% happy with the change, but maybe it's an improvement.",
			"disapproval": false,
			"date": "2011-11-09 12:12:32.236518",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This patch still has too much code: the concept of a blocksize appears repeatedly, but everything supported is a stream cipher and there's a lot of non-idiomatic code.\n\nI think that starting with a smaller change would be very beneficial.\n\nCheers\n\nAGL\n\nhttp://codereview.appspot.com/5342057/diff/10024/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/10024/src/pkg/exp/ssh/cipher.go#newcode19\nsrc/pkg/exp/ssh/cipher.go:19: type keySizeError struct {\npanic takes a string, these Error structs aren't needed.",
			"disapproval": false,
			"date": "2011-11-14 17:34:27.888015",
			"approval": false
		},
		{
			"sender": "taruti@taruti.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, 10 Nov 2011 02:04:37 +0000, huin@google.com wrote:\n> I've removed 3DES ciphers (as that's well known as broken, pretty much\n> only put it in as it was marked as required in RFC4253), and also\n> removed CAST5 based ciphers, as its removal from the standard library is\n> a good case to remove it here, also.\n> \n> As for the rest, are there strong arguments against supporting CBC mode\n> and Blowfish/Twofish based ciphers? At this point their implementations\n> are essentially just items in a table in cipher.go.\n\niirc CBC-mode is broken for ssh for all ciphers.\n\nhttp://www.kb.cert.org/vuls/id/958563\n\nCurrently the practise is to use CTR-mode.\n\n- Taru Karttunen\n",
			"disapproval": false,
			"date": "2011-11-10 10:06:19.560352",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/14 11:03:00, huin-google wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:dave@cheney.net, mailto:agl@golang.org,\n> mailto:taruti@taruti.net, mailto:rsc@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nThis latest change strips down to simply aes*-ctr and arcfour* ciphers. I've removed the crypt direction enumeration for now, as it's only strictly needed by CBC cipher mode.\n\nI plan to write another CL to open up the API to allow people to implement their own ciphers which will re-introduce the crypt direction.",
			"disapproval": false,
			"date": "2011-11-14 11:06:41.633526",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Re: the default algo list, after I made that comment I went looking and realized that there isn't one specified in the rfc. I think it's fine to say we follow the default OpenSSH list, or possibly put the list in a comment at the top of cipher.go. I think godoc will pick it up if you follow the same format as doc.go.\n\nRe: the size of setupkeys, if it makes the intent of the code less clear then feel free to ignore m y suggestion, I was just overreacting to the size of the method prototype. \n\nSent from my iPad\n\nOn 09/11/2011, at 23:12, huin@google.com wrote:\n\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/Makefile\n> File src/pkg/exp/ssh/Makefile (right):\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/Makefile#newcode15\n> src/pkg/exp/ssh/Makefile:15: transport.go\\\n> On 2011/11/09 08:52:58, dfc wrote:\n>> Could you please move transport to it's correct place in the sequence.\n> \n> \n> Done.\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go\n> File src/pkg/exp/ssh/cipher.go (right):\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go#newcode52\n> src/pkg/exp/ssh/cipher.go:52: return fmt.Sprintf(\"bad crypt direction:\n> %d\", cryptDirection(err))\n> On 2011/11/09 08:52:58, dfc wrote:\n>> Maybe add a String method on cryptDirection?\n> \n> Done.\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go#newcode236\n> src/pkg/exp/ssh/cipher.go:236: // minus algorithms that are not\n> implemented.\n> On 2011/11/09 08:52:58, dfc wrote:\n>> for consistency with the rest of the package, include a ref. to the\n> RFC?\n> \n> The set and order of algorithms here is from OpenSSH rather than an RFC.\n> Is there an RFC with a suggested set/order in that I could use and cite\n> instead?\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/client.go\n> File src/pkg/exp/ssh/client.go (right):\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/client.go#newcode306\n> src/pkg/exp/ssh/client.go:306: // The allowed cipher algorithms. If\n> unspecified then a default order is used.\n> On 2011/11/09 08:52:58, dfc wrote:\n>> Maybe mention where the default order is listed in the RFC.\n> \n> It isn't... that I know of. Maybe I should expose or otherwise advertise\n> the contents of the default order variable in the docs, as well as\n> citing OpenSSH?\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/server.go\n> File src/pkg/exp/ssh/server.go (right):\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/server.go#newcode44\n> src/pkg/exp/ssh/server.go:44: // The allowed cipher algorithms. If\n> unspecified then a default order is used.\n> On 2011/11/09 08:52:58, dfc wrote:\n>> Same as client.go\n> \n> I'll do some refactoring to make it common, putting this in a new,\n> commonly-used-struct, that will specify crypto algorithms to be used. I\n> intend to be filling in some others, later (such as MAC algorithm).\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go\n> File src/pkg/exp/ssh/transport.go (right):\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go#newcode21\n> src/pkg/exp/ssh/transport.go:21: minPacketSizeMultiple = 8 // TODO(dfc)\n> does this need to be configurable?\n> On 2011/11/09 08:52:58, dfc wrote:\n>> I guess it doesn't need to be configurable, can you please remove the\n> TODO.\n> \n> Done.\n> \n> http://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go#newcode287\n> src/pkg/exp/ssh/transport.go:287: func (c *common) setupKeys(d\n> direction, cd cryptDirection, K, H, sessionId []byte, hashFunc\n> crypto.Hash) error {\n> On 2011/11/09 08:52:58, dfc wrote:\n>> This function declaration is getting to be a whopper. Is there\n> anything that can\n>> be done to simplify it ?\n> \n> I have made an attempt at this, moving K, H and hashFunc into a\n> \"kexResult\" struct type that is returned from the kexDH methods, as they\n> are all determined by the key-exchange algorithm, ultimately.\n> \n> sessionId doesn't fit in there too logically, as it comes from the first\n> H value, but stays constant across subsequent key-re-exchanges (not that\n> those are implemented yet, although they should be for longer-lived\n> connections).\n> \n> Not sure that I'm 100% happy with the change, but maybe it's an\n> improvement.\n> \n> http://codereview.appspot.com/5342057/\n",
			"disapproval": false,
			"date": "2011-11-09 12:46:22.757602",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org, taruti@taruti.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-15 15:26:41.651456",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/server.go\nFile src/pkg/exp/ssh/server.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/server.go#newcode44\nsrc/pkg/exp/ssh/server.go:44: // Cryptographic-related conifguration.\nTODO: Correct spelling.",
			"disapproval": false,
			"date": "2011-11-09 13:36:52.945909",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I've removed 3DES ciphers (as that's well known as broken, pretty much only put it in as it was marked as required in RFC4253), and also removed CAST5 based ciphers, as its removal from the standard library is a good case to remove it here, also.\n\nAs for the rest, are there strong arguments against supporting CBC mode and Blowfish/Twofish based ciphers? At this point their implementations are essentially just items in a table in cipher.go.\n\nThere are probably arguments for their inclusion for both compatibility, and people who like to use slightly more obscure/less-used algorithms, which would seem to be a matter of taste rather than something I'd want to force.\n\nI'd be happier about removing more of these algorithms if I also make provision for people to supply their own CryptoConfig cipherMap to augment/override those in cipher.go - which is another change I have in mind, but didn't want to include in the public interface in a first pass.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/Makefile\nFile src/pkg/Makefile (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/Makefile#newcode89\nsrc/pkg/Makefile:89: exp/ssh\\\nOn 2011/11/09 14:51:08, agl1 wrote:\n> Not in this change please.\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode27\nsrc/pkg/exp/ssh/cipher.go:27: cryptDirectionEncrypt = cryptDirection(iota)\nOn 2011/11/09 14:51:08, agl1 wrote:\n> can these just be named \"encrypt\" and \"decrypt\"?\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode31\nsrc/pkg/exp/ssh/cipher.go:31: func (cd cryptDirection) String() string {\nOn 2011/11/09 14:51:08, agl1 wrote:\n> I feel that this is excessive, although I haven't reached any uses of it yet.\n\nThere aren't any. It was suggested for addition, although I'll happily remove it as dead code.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode42\nsrc/pkg/exp/ssh/cipher.go:42: Expected int\nOn 2011/11/09 14:51:08, agl1 wrote:\n> since the struct is private, any reason why the members are public?\n> \n> expected, actual int\n\nDone. Same for ivSizeError.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode66\nsrc/pkg/exp/ssh/cipher.go:66: type cipherFactory interface {\nOn 2011/11/09 14:51:08, agl1 wrote:\n> Might this just be a struct so that keySize and ivSize were just int members?\n\nNo, there are two implementations of cipherFactory: *streamCipherFactory and *blockCipherFactory.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode75\nsrc/pkg/exp/ssh/cipher.go:75: CreateCipher(key []byte, iv []byte, direction cryptDirection) (blk cipher.BlockMode, err error)\nOn 2011/11/09 14:51:08, agl1 wrote:\n> I don't think that naming the return values adds anything.\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode75\nsrc/pkg/exp/ssh/cipher.go:75: CreateCipher(key []byte, iv []byte, direction cryptDirection) (blk cipher.BlockMode, err error)\nOn 2011/11/09 14:51:08, agl1 wrote:\n> key, iv []byte\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode90\nsrc/pkg/exp/ssh/cipher.go:90: func (c noneCipher) CreateCipher(key []byte, iv []byte, direction cryptDirection) (cipher.BlockMode, error) {\nOn 2011/11/09 14:51:08, agl1 wrote:\n> key, iv []byte\n\nDone, and elsewhere.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode122\nsrc/pkg/exp/ssh/cipher.go:122: return nil, keySizeError{factory.keySize, len(key)}\nOn 2011/11/09 14:51:08, agl1 wrote:\n> These errors indicate a bug in this package, no? It's up to use to generate\n> enough key material for the ciphersuite. Thus a panic would seem to be more\n> suitable.\n\nChanged to a panic. Is it reasonable to panic with an error?\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode138\nsrc/pkg/exp/ssh/cipher.go:138: // The keystream bits written to streamDump are sensitive, and should be\nOn 2011/11/09 14:51:08, agl1 wrote:\n> They're not really that sensitive when you consider that the cipher's internal\n> state is kept in the same address space.\n\nTrue. I was thinking that key material should be wiped (.Reset methods on various cipher types) at some point, but given how much this data is passed around it hardly seems worth it.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode211\nsrc/pkg/exp/ssh/cipher.go:211: return nil, badCryptDirectionError(direction)\nOn 2011/11/09 14:51:08, agl1 wrote:\n> again, this is an internal error.\n\nChanged to a panic.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode334\nsrc/pkg/exp/ssh/cipher.go:334: \"aes128-ctr\": &blockCipherFactory{\nOn 2011/11/09 14:32:29, huin-google wrote:\n> It turns out that the aes*-ctr ciphers still retain the output block size of 16\n> bytes for packetization, despite the effective streaming of CTR mode. Similar\n> for twofish and blowfish.\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/config.go\nFile src/pkg/exp/ssh/config.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/config.go#newcode1\nsrc/pkg/exp/ssh/config.go:1: // Copyright 2011 Google Inc. All Rights Reserved.\nOn 2011/11/09 14:51:08, agl1 wrote:\n> It doesn't seem that this file justifies itself yet. Maybe in a later change\n> several config structures could be moved but just this one doesn't seem to be\n> enough.\n\nIndeed not. I actually wanted to move the Rand io.Reader in here as well, but ran into some subtle issues that seemed to break. I'll move this type into common.go for now, for want of a better place.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/server.go\nFile src/pkg/exp/ssh/server.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/server.go#newcode44\nsrc/pkg/exp/ssh/server.go:44: // Cryptographic-related conifguration.\nOn 2011/11/09 13:36:52, huin-google wrote:\n> TODO: Correct spelling.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-10 02:04:36.985692",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This is really nice. Thank you for this. I can't comment on the crypto changes with any great authority, so I've looped in agl.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/Makefile\nFile src/pkg/Makefile (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/Makefile#newcode89\nsrc/pkg/Makefile:89: exp/ssh\\\nI think you're probably right, but it's probably a call for the core commiters.\n\nOn 2011/11/09 02:45:06, huin-google wrote:\n> I'm unsure if I should add this or not as part of this change. Was there a\n> reason it was not added already?\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/Makefile\nFile src/pkg/exp/ssh/Makefile (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/Makefile#newcode15\nsrc/pkg/exp/ssh/Makefile:15: transport.go\\\nCould you please move transport to it's correct place in the sequence.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go#newcode52\nsrc/pkg/exp/ssh/cipher.go:52: return fmt.Sprintf(\"bad crypt direction: %d\", cryptDirection(err))\nMaybe add a String method on cryptDirection?\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/cipher.go#newcode236\nsrc/pkg/exp/ssh/cipher.go:236: // minus algorithms that are not implemented.\nfor consistency with the rest of the package, include a ref. to the RFC?\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/client.go#newcode306\nsrc/pkg/exp/ssh/client.go:306: // The allowed cipher algorithms. If unspecified then a default order is used.\nMaybe mention where the default order is listed in the RFC.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/server.go\nFile src/pkg/exp/ssh/server.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/server.go#newcode44\nsrc/pkg/exp/ssh/server.go:44: // The allowed cipher algorithms. If unspecified then a default order is used.\nSame as client.go\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go\nFile src/pkg/exp/ssh/transport.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go#newcode21\nsrc/pkg/exp/ssh/transport.go:21: minPacketSizeMultiple = 8 // TODO(dfc) does this need to be configurable?\nI guess it doesn't need to be configurable, can you please remove the TODO.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go#newcode257\nsrc/pkg/exp/ssh/transport.go:257: cipher: noneCipher{},\nThis is great. I had hoped it would be possible to remove the conditional logic in writePacket with an empty cipher. Thank you.\n\nhttp://codereview.appspot.com/5342057/diff/4001/src/pkg/exp/ssh/transport.go#newcode287\nsrc/pkg/exp/ssh/transport.go:287: func (c *common) setupKeys(d direction, cd cryptDirection, K, H, sessionId []byte, hashFunc crypto.Hash) error {\nThis function declaration is getting to be a whopper. Is there anything that can be done to simplify it ?",
			"disapproval": false,
			"date": "2011-11-09 08:52:58.077741",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode334\nsrc/pkg/exp/ssh/cipher.go:334: \"aes128-ctr\": &blockCipherFactory{\nIt turns out that the aes*-ctr ciphers still retain the output block size of 16 bytes for packetization, despite the effective streaming of CTR mode. Similar for twofish and blowfish.",
			"disapproval": false,
			"date": "2011-11-09 14:32:29.069328",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 02:05:44.898470",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please delete twofish and blowfish.\nThe implementations are more than a table item.\nThey introduce dependencies on those libraries\nfor anyone using exp/ssh.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-10 15:40:23.237808",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/14 17:34:27, agl1 wrote:\n> This patch still has too much code: the concept of a blocksize appears\n> repeatedly, but everything supported is a stream cipher and there's a lot of\n> non-idiomatic code.\n> \n> I think that starting with a smaller change would be very beneficial.\n> \n> Cheers\n> \n> AGL\n> \n> http://codereview.appspot.com/5342057/diff/10024/src/pkg/exp/ssh/cipher.go\n> File src/pkg/exp/ssh/cipher.go (right):\n> \n> http://codereview.appspot.com/5342057/diff/10024/src/pkg/exp/ssh/cipher.go#newcode19\n> src/pkg/exp/ssh/cipher.go:19: type keySizeError struct {\n> panic takes a string, these Error structs aren't needed.\n\nI can see about stripping this down some more - I can certainly see that this can be done now that the set of ciphers is so specific compared to the original patch.\n\nI would appreciate specifics on what is non-idiomatic, otherwise I cannot address that point.",
			"disapproval": false,
			"date": "2011-11-14 17:54:07.626760",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/10 10:06:19, taruti wrote:\n> On Thu, 10 Nov 2011 02:04:37 +0000, mailto:huin@google.com wrote:\n> > I've removed 3DES ciphers (as that's well known as broken, pretty much\n> > only put it in as it was marked as required in RFC4253), and also\n> > removed CAST5 based ciphers, as its removal from the standard library is\n> > a good case to remove it here, also.\n> > \n> > As for the rest, are there strong arguments against supporting CBC mode\n> > and Blowfish/Twofish based ciphers? At this point their implementations\n> > are essentially just items in a table in cipher.go.\n> \n> iirc CBC-mode is broken for ssh for all ciphers.\n> \n> http://www.kb.cert.org/vuls/id/958563\n> \n> Currently the practise is to use CTR-mode.\n> \n> - Taru Karttunen\n\nOkay, that seems like a good reason to discard the CBC modes (at least in the default cipher suite). Although it's interesting that OpenSSH still includes CBC ciphers in its default cipher suite.",
			"disapproval": false,
			"date": "2011-11-10 13:00:38.878447",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-09 12:12:15.064635",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "My suggestion for this CL is to try and drastically simplify it and make it do less.\n\nIf there's a significant population of SSH servers/clients that we can't talk to without some of these ciphersuites, then that's a good argument for including them. But we shouldn't try to support anything. CAST5 will probably be removed from the standard library soon and, otherwise, I think anything outside of AES-CTR and RC4 is probably too much.\n\n\nCheers\n\nAGL\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/Makefile\nFile src/pkg/Makefile (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/Makefile#newcode89\nsrc/pkg/Makefile:89: exp/ssh\\\nNot in this change please.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode27\nsrc/pkg/exp/ssh/cipher.go:27: cryptDirectionEncrypt = cryptDirection(iota)\ncan these just be named \"encrypt\" and \"decrypt\"?\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode31\nsrc/pkg/exp/ssh/cipher.go:31: func (cd cryptDirection) String() string {\nI feel that this is excessive, although I haven't reached any uses of it yet.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode42\nsrc/pkg/exp/ssh/cipher.go:42: Expected int\nsince the struct is private, any reason why the members are public?\n\nexpected, actual int\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode66\nsrc/pkg/exp/ssh/cipher.go:66: type cipherFactory interface {\nMight this just be a struct so that keySize and ivSize were just int members?\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode75\nsrc/pkg/exp/ssh/cipher.go:75: CreateCipher(key []byte, iv []byte, direction cryptDirection) (blk cipher.BlockMode, err error)\nI don't think that naming the return values adds anything.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode75\nsrc/pkg/exp/ssh/cipher.go:75: CreateCipher(key []byte, iv []byte, direction cryptDirection) (blk cipher.BlockMode, err error)\nkey, iv []byte\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode90\nsrc/pkg/exp/ssh/cipher.go:90: func (c noneCipher) CreateCipher(key []byte, iv []byte, direction cryptDirection) (cipher.BlockMode, error) {\nkey, iv []byte\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode122\nsrc/pkg/exp/ssh/cipher.go:122: return nil, keySizeError{factory.keySize, len(key)}\nThese errors indicate a bug in this package, no? It's up to use to generate enough key material for the ciphersuite. Thus a panic would seem to be more suitable.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode138\nsrc/pkg/exp/ssh/cipher.go:138: // The keystream bits written to streamDump are sensitive, and should be\nThey're not really that sensitive when you consider that the cipher's internal state is kept in the same address space.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/cipher.go#newcode211\nsrc/pkg/exp/ssh/cipher.go:211: return nil, badCryptDirectionError(direction)\nagain, this is an internal error.\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/config.go\nFile src/pkg/exp/ssh/config.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/11002/src/pkg/exp/ssh/config.go#newcode1\nsrc/pkg/exp/ssh/config.go:1: // Copyright 2011 Google Inc. All Rights Reserved.\nIt doesn't seem that this file justifies itself yet. Maybe in a later change several config structures could be moved but just this one doesn't seem to be enough.",
			"disapproval": false,
			"date": "2011-11-09 14:51:08.548646",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, agl@golang.org, taruti@taruti.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-14 11:03:00.997848",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode14\nsrc/pkg/exp/ssh/cipher.go:14: // Used to dump the initial keystream for stream ciphers, and otherwise act as\nFull sentences, please.\nhttp://golang.org/doc/effective_go.html#commentary\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode19\nsrc/pkg/exp/ssh/cipher.go:19: // A cipherFactory creates instances of ciphers that implement cipher.BlockMode.\nI think this code is far more general than it needs to be.\n\ntype cipherMode struct {\n    key int\n    iv int\n    skip int\n    new func(key, iv []byte) (cipher.Stream, error)\n}\n\nfunc newAESCTR(key, iv []byte) (cipher.Stream, error) {\n    c, err := aes.NewCipher(key)\n    if err != nil {\n        return nil, err\n    }\n    return cipher.NewCTR(c, iv)\n}\n\nfunc newRC4(key, iv []byte) (cipher.Stream, error) {\n    return rc4.NewCipher(key)\n}\n\nvar cipherModes = map[string]*cipherMode{\n    \"aes128-ctr\": &cipherMode{16, aes.BlockSize, 0, newAESCTR},\n    \"arcfour256\": &cipherMode{32, 0, 1536, newRC4},\n}\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode32\nsrc/pkg/exp/ssh/cipher.go:32: // noneCipher implements cipher.BlockMode.\nThis appears to be unused.\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode128\nsrc/pkg/exp/ssh/cipher.go:128: return streamBlock{\nreturn &streamBlock",
			"disapproval": false,
			"date": "2011-11-16 21:53:17.503377",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 16:58, Russ Cox <rsc@golang.org> wrote:\n> Also, is anyone running servers that refuse AES but accept RC4?\n> My understanding was that, as it says at the bottom of godoc\n> crypto/rc4:\n\nRC4 is in common use but has design weaknesses that make\nit a poor choice for new protocols.\n",
			"disapproval": false,
			"date": "2011-11-16 21:58:47.398197",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Also, is anyone running servers that refuse AES but accept RC4?\nMy understanding was that, as it says at the bottom of godoc\ncrypto/rc4:\n",
			"disapproval": false,
			"date": "2011-11-16 21:58:33.984468",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode14\nsrc/pkg/exp/ssh/cipher.go:14: // Used to dump the initial keystream for stream ciphers, and otherwise act as\nOn 2011/11/16 21:53:17, rsc wrote:\n> Full sentences, please.\n> http://golang.org/doc/effective_go.html#commentary\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode19\nsrc/pkg/exp/ssh/cipher.go:19: // A cipherFactory creates instances of ciphers that implement cipher.BlockMode.\nOn 2011/11/16 21:53:17, rsc wrote:\n> I think this code is far more general than it needs to be.\n> \n> type cipherMode struct {\n>     key int\n>     iv int\n>     skip int\n>     new func(key, iv []byte) (cipher.Stream, error)\n> }\n> \n> func newAESCTR(key, iv []byte) (cipher.Stream, error) {\n>     c, err := aes.NewCipher(key)\n>     if err != nil {\n>         return nil, err\n>     }\n>     return cipher.NewCTR(c, iv)\n> }\n> \n> func newRC4(key, iv []byte) (cipher.Stream, error) {\n>     return rc4.NewCipher(key)\n> }\n> \n> var cipherModes = map[string]*cipherMode{\n>     \"aes128-ctr\": &cipherMode{16, aes.BlockSize, 0, newAESCTR},\n>     \"arcfour256\": &cipherMode{32, 0, 1536, newRC4},\n> }\n\nI will go along with this, but:\n\nThis code does not report the cipher's effective block size which is required by the transport layer. The transport can assume an effective block size of 16 always, but this is wasteful of entropy for padding (and minimally for bandwidth) in the case of the arcfour cipher which only needs an effective block size of 8 (rfc4253 section 6). The block size could be stored in the cipherMode structure, but it has then become separated from the cipher in use, and the transport will have to keep track of it separately. For this change I think things will have to be kept simple and for the transport to assume an effective block size of 16.\n\nMy next intended change was to open up the cipher factory API to allow users of exp/ssh to supply their own ciphers. Maybe I'm thinking too far ahead with this generalised code (which is the remnants of a much fuller cipher suite). The assumptions that can be made with a stream cipher cannot be made with block ciphers, but the assumptions can be made in the opposite direction. I will roll the generalization of block ciphers out of this patch, but they'd have to be rolled back in for the next intended one.\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode32\nsrc/pkg/exp/ssh/cipher.go:32: // noneCipher implements cipher.BlockMode.\nOn 2011/11/16 21:53:17, rsc wrote:\n> This appears to be unused.\n\nIt is used in the transport as the initial cipher, which discards special-case handling in the transport layer in initial key-exchange.\n\nhttp://codereview.appspot.com/5342057/diff/9022/src/pkg/exp/ssh/cipher.go#newcode128\nsrc/pkg/exp/ssh/cipher.go:128: return streamBlock{\nOn 2011/11/16 21:53:17, rsc wrote:\n> return &streamBlock\n\nDone, and the receiver argument for streamBlock is now a pointer to match here and in arcfour.",
			"disapproval": false,
			"date": "2011-11-17 10:40:11.940957",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, agl@golang.org, taruti@taruti.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-17 10:32:44.338059",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/16 21:58:47, rsc wrote:\n> On Wed, Nov 16, 2011 at 16:58, Russ Cox <mailto:rsc@golang.org> wrote:\n> > Also, is anyone running servers that refuse AES but accept RC4?\n> > My understanding was that, as it says at the bottom of godoc\n> > crypto/rc4:\n> \n> RC4 is in common use but has design weaknesses that make\n> it a poor choice for new protocols.\n\nMy intent for this patch was twofold:\n\n1. Compatibility. As you observe, it's most likely that most servers support aes*-ctr, so the addition of arcfour-based ciphers are unlikely to be of great benefit in this regard.\n\n2. Choice. It's up to the user to decide which ciphers are applicable for their use case. As one example: I believe that arcfour is desireable in cases where privacy of the stream via the cipher is not paramount, and the greater concern is to achieve greater throughput by using a more CPU-efficient cipher where the transport layer is CPU-bound instead of network-bound. RFC4345 addresses some of the concerns of arcfour weaknesses.\n\nI do not believe it is our place to decide what ciphers a user can and cannot use, but rather only to provide sensible recommendations/defaults.",
			"disapproval": false,
			"date": "2011-11-17 10:39:48.877467",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks.  I'm much more comfortable with this change now.\nI'd like Adam to look at the crypto.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-17 21:54:53.381910",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 2:09 PM, Russ Cox <rsc@golang.org> wrote:\n> Thanks. \u00a0I'm much more comfortable with this change now.\n> I'd like Adam to look at the crypto.\n\nThe codereview site is read-only for maintenance at the moment, but\nI'll reply when it's back.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2011-11-17 22:10:59.254241",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with these small changes.\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher.go#newcode47\nsrc/pkg/exp/ssh/cipher.go:47: panic(fmt.Sprintf(\"cipher requires %d bytes for key but got %d bytes\", c.keySize, len(key)))\npanic(\"ssh: key length too small for cipher\")\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher.go#newcode50\nsrc/pkg/exp/ssh/cipher.go:50: panic(fmt.Sprintf(\"cipher requires %d bytes for IV but got %d bytes\", c.ivSize, len(iv)))\npanic(\"ssh: iv too small for cipher\")\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go\nFile src/pkg/exp/ssh/cipher_test.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode22\nsrc/pkg/exp/ssh/cipher_test.go:22: t.Logf(\"Test cipher %q...\", name)\nWe don't generally use t.Logf for context. (`grep t.Logf -r .` in src/pkg to get a feel for it.)\n\nWhich means...\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode26\nsrc/pkg/exp/ssh/cipher_test.go:26: t.Error(\"  creating encryptor: \", err.Error())\nThat the Error calls should be something like:\n\nt.Errorf(\"failed to create encryptor for %q: %s\", name, err)",
			"disapproval": false,
			"date": "2011-11-18 16:10:43.205875",
			"approval": true
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher.go\nFile src/pkg/exp/ssh/cipher.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher.go#newcode47\nsrc/pkg/exp/ssh/cipher.go:47: panic(fmt.Sprintf(\"cipher requires %d bytes for key but got %d bytes\", c.keySize, len(key)))\nOn 2011/11/18 16:10:43, agl1 wrote:\n> panic(\"ssh: key length too small for cipher\")\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher.go#newcode50\nsrc/pkg/exp/ssh/cipher.go:50: panic(fmt.Sprintf(\"cipher requires %d bytes for IV but got %d bytes\", c.ivSize, len(iv)))\nOn 2011/11/18 16:10:43, agl1 wrote:\n> panic(\"ssh: iv too small for cipher\")\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go\nFile src/pkg/exp/ssh/cipher_test.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode22\nsrc/pkg/exp/ssh/cipher_test.go:22: t.Logf(\"Test cipher %q...\", name)\nOn 2011/11/18 16:10:43, agl1 wrote:\n> We don't generally use t.Logf for context. (`grep t.Logf -r .` in src/pkg to get\n> a feel for it.)\n> \n> Which means...\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode24\nsrc/pkg/exp/ssh/cipher_test.go:24: encryptor, err := cipherMode.createCipher(testKey, testIv)\nOn 2011/11/18 16:25:59, r wrote:\n> encrypter not encryptor\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode26\nsrc/pkg/exp/ssh/cipher_test.go:26: t.Error(\"  creating encryptor: \", err.Error())\nOn 2011/11/18 16:10:43, agl1 wrote:\n> That the Error calls should be something like:\n> \n> t.Errorf(\"failed to create encryptor for %q: %s\", name, err)\n\nDone.\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode29\nsrc/pkg/exp/ssh/cipher_test.go:29: decryptor, err := cipherMode.createCipher(testKey, testIv)\nOn 2011/11/18 16:25:59, r wrote:\n> decrypter not decryptor\n\nDone.",
			"disapproval": false,
			"date": "2011-11-18 16:37:31.111693",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go\nFile src/pkg/exp/ssh/cipher_test.go (right):\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode24\nsrc/pkg/exp/ssh/cipher_test.go:24: encryptor, err := cipherMode.createCipher(testKey, testIv)\nencrypter not encryptor\n\nhttp://codereview.appspot.com/5342057/diff/18001/src/pkg/exp/ssh/cipher_test.go#newcode29\nsrc/pkg/exp/ssh/cipher_test.go:29: decryptor, err := cipherMode.createCipher(testKey, testIv)\ndecrypter not decryptor",
			"disapproval": false,
			"date": "2011-11-18 16:25:59.427263",
			"approval": false
		},
		{
			"sender": "huin@google.com",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, agl@golang.org, taruti@taruti.net, rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-18 16:37:00.744627",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"huin@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"taruti@taruti.net",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=76e734d187df ***\n\nexp/ssh: Add support for (most) of the ciphers from RFC4253, RFC4344 and RFC4345.\n\nR=dave, agl, taruti, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5342057\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2011-11-18 17:57:03.438160",
			"approval": false
		}
	],
	"owner_email": "huin@google.com",
	"private": false,
	"base_url": "",
	"owner": "huin-google",
	"subject": "code review 5342057: exp/ssh: Add support for (most) of the ciphers from RFC...",
	"created": "2011-11-09 02:29:40.359819",
	"patchsets": [
		1,
		2001,
		4001,
		10003,
		11002,
		13012,
		10024,
		9022,
		18001,
		23002
	],
	"modified": "2011-11-21 09:15:07.539016",
	"closed": true,
	"issue": 5342057
}