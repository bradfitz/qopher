{
	"description": "cmd/gc: use bit-fields for variables in struct Node\n\nThis changes sizeof(Node) from 212 to 204 bytes on i386.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-12 16:59:44.424560",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6650054/diff/1/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttps://codereview.appspot.com/6650054/diff/1/src/cmd/gc/go.h#newcode260\nsrc/cmd/gc/go.h:260: schar\tlikely; // likeliness of if statement\ni think you can use the remaining 2 bit to save likely.\nso that we can save more on 386.\n\nin fact, likely has only 3 meaningful states:\n-1 for unlikely\n0 for unsure\n+1 for likely",
			"disapproval": false,
			"date": "2012-10-12 17:08:44.902830",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-12 17:51:19.683370",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Please wait for rsc to sign off.",
			"disapproval": false,
			"date": "2012-10-12 18:04:57.204870",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry, but we're not going to use bitfields here. They have a long history of problems and complications, and I'd prefer that we keep them out of this code base.\n\nI have no problem collapsing the fields into a uint64 flag or something like that, which can be tested with if(n->flag & Whatever) etc.\n\nI'm a little surprised that these 6 bytes are the main memory overhead. Removing even a single pointer field, such as by making Val val into Val *val, allocated as needed, seems like it would have a larger effect.\n\nI think there's interesting work to be done here but I would prefer it to be driven by profiling data.",
			"disapproval": false,
			"date": "2012-10-12 18:35:23.508810",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/12 18:35:23, rsc wrote:\n> I'm sorry, but we're not going to use bitfields here. They have a long history\n> of problems and complications, and I'd prefer that we keep them out of this code\n> base.\n\nThe bitfields were part of CL 6345044. I will delete them from 6345044.\n \n> I have no problem collapsing the fields into a uint64 flag or something like\n> that, which can be tested with if(n->flag & Whatever) etc.\n> \n> I'm a little surprised that these 6 bytes are the main memory overhead.\n\nIt is true that there exist larger memory overheads.\n\n> Removing\n> even a single pointer field, such as by making Val val into Val *val, allocated\n> as needed, seems like it would have a larger effect.\n\nsizeof(Val) is just 2 pointers, so the effect of replacing it with Val* is of the same order as the effect of collapsing the 6 bytes in this CL.\n\nThe code in src/cmd/gc/walk.c seems incorrect (uchar may overflow?), so at the very least we could merge src/cmd/gc/walk.c\n\n> I think there's interesting work to be done here but I would prefer it to be\n> driven by profiling data.",
			"disapproval": false,
			"date": "2012-10-12 20:27:11.502290",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6650054: cmd/gc: use bit-fields for variables in struct Node",
	"created": "2012-10-12 16:59:39.061130",
	"patchsets": [
		1,
		3001
	],
	"modified": "2012-10-27 11:12:49.878350",
	"closed": true,
	"issue": 6650054
}