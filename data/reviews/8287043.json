{
	"description": "cmd/gc: fix Offsetof computation.\n\nThe offset of an embedded field s.X must be relative to s\nand not to the implicit s.Field of which X is a direct field.\nMoreover, no indirections may happen on the path.\n\nFixes issue 4909.",
	"cc": [
		"nigeltao@golang.org",
		"ality@pbrane.org",
		"daniel.morsing@gmail.com",
		"iant@golang.org",
		"gri@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nsince this is a small bug fix to a core component that has been reviewed by several people, feel free to check it in. thanks.",
			"disapproval": false,
			"date": "2013-04-05 19:22:14.910930",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-04-02 21:56:55.959930",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8287043/diff/5001/test/fixedbugs/issue4909.go\nFile test/fixedbugs/issue4909.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/5001/test/fixedbugs/issue4909.go#newcode35\ntest/fixedbugs/issue4909.go:35: const N6 = unsafe.Offsetof(tp.Method) // ERROR \"method value\"\nThis says:\n\nfixedbugs/issue4909.go:30: selector t.B.X involves embedded pointer field t.B\nfixedbugs/issue4909.go:31: selector tp.B.X involves embedded pointer field tp.B\nfixedbugs/issue4909.go:34: invalid expression unsafe.Offsetof(t.Method): argument is a method value\nfixedbugs/issue4909.go:35: invalid expression unsafe.Offsetof(tp.Method): argument is a method value\n\nFeel free to suggest a wording you like better.",
			"disapproval": false,
			"date": "2013-04-02 21:59:06.295930",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why are you surpsrised for t.P.B?\r\n\r\nThe spec says that Offsetof argument is a selector s.f where s is some\r\nexpression and that the result if the offset of s.f in s (or *s if s\r\nis a pointer).\r\n\r\nHere s is t.P and f is B. It is not possible to interpret it as s\r\nbeing t and f being 'P.B' (which is not a field name identifier)\r\n\r\n2013/4/4, nigeltao@golang.org <nigeltao@golang.org>:\r\n> Please rename issue4909.go to issue4909a.go.\r\n>\r\n>\r\n> https://codereview.appspot.com/8287043/diff/11005/test/sizeof.go\r\n> File test/sizeof.go (right):\r\n>\r\n> https://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode130\r\n> test/sizeof.go:130: Dummy int\r\n> s/int/int32/\r\n>\r\n> https://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode143\r\n> test/sizeof.go:143: case unsafe.Offsetof(t.P.B) != 4:\r\n> I am somewhat surprised that the right answer here is 4 and not ERROR\r\n> \"indirection\" (as P is a pointer). Let's see what gri (and others)\r\n> reckon.\r\n>\r\n> https://codereview.appspot.com/8287043/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-04 07:35:46.903640",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-03 21:14:35.838280",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can this be fixed for Go 1.1?",
			"disapproval": false,
			"date": "2013-04-03 21:14:48.600170",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure the issue was demoted, other than perhaps it is such a\r\nlow-priority one.\r\n\r\nStill, it is a bug whose fix looks like it is very unlikely to break\r\nanything vital.  If it is carefully reviewed by multiple people, we\r\ncan consider it for Go 1.1.\r\n",
			"disapproval": false,
			"date": "2013-04-03 21:19:50.873830",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nige, would you mind taking a look at this?",
			"disapproval": false,
			"date": "2013-04-03 22:58:03.219090",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM aside from comment below.\n\nhttps://codereview.appspot.com/8287043/diff/13001/src/cmd/gc/unsafe.c\nFile src/cmd/gc/unsafe.c (right):\n\nhttps://codereview.appspot.com/8287043/diff/13001/src/cmd/gc/unsafe.c#newcode70\nsrc/cmd/gc/unsafe.c:70: typecheck(&r, Erv);\nIs there a reason this is called after the switch?\nIt doesn't seem necessary.",
			"disapproval": false,
			"date": "2013-04-04 01:44:53.580440",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8287043/diff/13001/test/fixedbugs/issue4909.go\nFile test/fixedbugs/issue4909.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/fixedbugs/issue4909.go#newcode28\ntest/fixedbugs/issue4909.go:28: var tp *T\nRename tp to p?\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/sizeof.go\nFile test/sizeof.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/sizeof.go#newcode30\ntest/sizeof.go:30: var tp2 *T2\nRename tp2 to p2?\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/sizeof.go#newcode38\ntest/sizeof.go:38: // Test correctness of Offsetof with respect to embedded fields (issue 4909).\nI'd like some more tests: triply-nested structs, embedded and non-embedded fields, and going through a pointer field: something like unsafe.Offsetof(t2.P.C) if T2 was\n\ntype T2 struct {\n  // etc\n  P *U2\n}",
			"disapproval": false,
			"date": "2013-04-04 06:00:55.282750",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, ality@pbrane.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-04 07:00:35.195310",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8287043/diff/13001/src/cmd/gc/unsafe.c\nFile src/cmd/gc/unsafe.c (right):\n\nhttps://codereview.appspot.com/8287043/diff/13001/src/cmd/gc/unsafe.c#newcode70\nsrc/cmd/gc/unsafe.c:70: typecheck(&r, Erv);\nOn 2013/04/04 01:44:53, ality wrote:\n> Is there a reason this is called after the switch?\n> It doesn't seem necessary.\n\nIndeed, it was there is the old code. I removed it.\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/fixedbugs/issue4909.go\nFile test/fixedbugs/issue4909.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/fixedbugs/issue4909.go#newcode28\ntest/fixedbugs/issue4909.go:28: var tp *T\nOn 2013/04/04 06:00:55, nigeltao wrote:\n> Rename tp to p?\n\nDone.\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/sizeof.go\nFile test/sizeof.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/sizeof.go#newcode30\ntest/sizeof.go:30: var tp2 *T2\nOn 2013/04/04 06:00:55, nigeltao wrote:\n> Rename tp2 to p2?\n\nDone.\n\nhttps://codereview.appspot.com/8287043/diff/13001/test/sizeof.go#newcode38\ntest/sizeof.go:38: // Test correctness of Offsetof with respect to embedded fields (issue 4909).\nOn 2013/04/04 06:00:55, nigeltao wrote:\n> I'd like some more tests: triply-nested structs, embedded and non-embedded\n> fields, and going through a pointer field: something like\n> unsafe.Offsetof(t2.P.C) if T2 was\n> \n> type T2 struct {\n>   // etc\n>   P *U2\n> }\n\nI have added a more exhaustive errorcheck test.",
			"disapproval": false,
			"date": "2013-04-04 07:02:59.367590",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please rename issue4909.go to issue4909a.go.\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go\nFile test/sizeof.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode130\ntest/sizeof.go:130: Dummy int\ns/int/int32/\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode143\ntest/sizeof.go:143: case unsafe.Offsetof(t.P.B) != 4:\nI am somewhat surprised that the right answer here is 4 and not ERROR \"indirection\" (as P is a pointer). Let's see what gri (and others) reckon.",
			"disapproval": false,
			"date": "2013-04-04 07:18:44.504730",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"gri@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nThe gc code is a bit subtle. Maybe add some comments about why r->left is typechecked before r is.",
			"disapproval": false,
			"date": "2013-04-04 11:13:07.935350",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"gri@golang.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go\nFile test/sizeof.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode143\ntest/sizeof.go:143: case unsafe.Offsetof(t.P.B) != 4:\nOn 2013/04/04 07:18:44, nigeltao wrote:\n> I am somewhat surprised that the right answer here is 4 and not ERROR\n> \"indirection\" (as P is a pointer). Let's see what gri (and others) reckon.\n\nI agree with R\u00e9my: this is the offset of B in t.P, so it is valid.",
			"disapproval": false,
			"date": "2013-04-04 13:53:44.584070",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8287043/diff/11005/test/sizeof.go\nFile test/sizeof.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode143\ntest/sizeof.go:143: case unsafe.Offsetof(t.P.B) != 4:\nOn 2013/04/04 13:53:44, iant wrote:\n> I agree with R\u00e9my: this is the offset of B in t.P, so it is valid.\n\nFair enough. My other requests (s/issue4909.go/issue4909a.go/ and s/int/int32/) still stand.",
			"disapproval": false,
			"date": "2013-04-04 21:53:49.652010",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, ality@pbrane.org, daniel.morsing@gmail.com, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-04 22:45:36.266150",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8287043/diff/11005/test/sizeof.go\nFile test/sizeof.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode130\ntest/sizeof.go:130: Dummy int\nOn 2013/04/04 07:18:44, nigeltao wrote:\n> s/int/int32/\n\nDone. But I'm not sure what you meant.",
			"disapproval": false,
			"date": "2013-04-04 22:45:48.358930",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/04 11:13:07, DMorsing wrote:\n> LGTM.\n> \n> The gc code is a bit subtle. Maybe add some comments about why r->left is\n> typechecked before r is.\n\nI have enriched it a bit.",
			"disapproval": false,
			"date": "2013-04-04 22:51:02.123520",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just FYI.\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go\nFile test/sizeof.go (right):\n\nhttps://codereview.appspot.com/8287043/diff/11005/test/sizeof.go#newcode143\ntest/sizeof.go:143: case unsafe.Offsetof(t.P.B) != 4:\nOn 2013/04/04 07:18:44, nigeltao wrote:\n> I am somewhat surprised that the right answer here is 4 and not ERROR\n> \"indirection\" (as P is a pointer). Let's see what gri (and others) reckon.\n\nThis is correct. The selector expression is of the form (t.P).B where B is properly embedded in T1 (via A).",
			"disapproval": false,
			"date": "2013-04-05 00:16:31.282910",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-04-05 04:30:52.435530",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"nigeltao@golang.org",
				"ality@pbrane.org",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b32ab1e2e6df ***\n\ncmd/gc: fix Offsetof computation.\n\nThe offset of an embedded field s.X must be relative to s\nand not to the implicit s.Field of which X is a direct field.\nMoreover, no indirections may happen on the path.\n\nFixes issue 4909.\n\nR=nigeltao, ality, daniel.morsing, iant, gri, r\nCC=golang-dev\nhttps://codereview.appspot.com/8287043",
			"disapproval": false,
			"date": "2013-04-05 19:24:21.551000",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 8287043: cmd/gc: fix Offsetof computation.",
	"created": "2013-04-02 21:56:22.907370",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		13001,
		11005,
		32001,
		36001,
		45001
	],
	"modified": "2013-04-05 19:24:23.779980",
	"closed": true,
	"issue": 8287043
}