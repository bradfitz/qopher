{
	"description": "sort: fixed bug in (Float64Slice) Less; NaN less than anything else\n\nPreviously comparisons with NaN led to contradictory results if it was\ncompared to anything not NaN, since Less always returned false, thus\nbreaking monotonicity of ordering.\nThis fix makes NaN less than anything else and adds NaN and (+-)Inf to\ntestcases.\n\nFixes issue 2092.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"rsc@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/07/23 03:06:34, rsc wrote:\n> okay, then i guess the simplest possible is\n> \n> return a < b || math.IsNaN(a) && !math.IsNaN(b)\n\nyes I guess it is, putting it in one line is probably nicer, will do that.\n\nnot that it matters anymore, but I looked through the code a bit, and I think the working but wrong solution breaks IsSorted anyway, so there was no choice",
			"disapproval": false,
			"date": "2011-07-23 03:12:27.478454",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/07/23 02:57:18, rsc wrote:\n> On Fri, Jul 22, 2011 at 22:50,  <mailto:f1@uekermann-online.de> wrote:\n> > So we agree that its wrong for Less?\n> \n> it's wrong but i don't think it's wrong enough to break sort.\n\nIf you only consider the current implementation inside the package yes, but its a public function for a public interface... ...i thought of something similar before I sent the CL, but I feared to get crucified for this. Thats a bad thing to do, in other implementations it could easily lead to infinite loops.",
			"disapproval": false,
			"date": "2011-07-23 03:05:18.197336",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "maybe not.\n\nisn't it worth doing the other comparison (b < a after a < b) before calling out to a function, inlined or not?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-07-23 02:22:48.131570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "okay, then i guess the simplest possible is\n\nreturn a < b || math.IsNaN(a) && !math.IsNaN(b)\n",
			"disapproval": false,
			"date": "2011-07-23 03:06:34.099409",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-07-22 21:43:19.911480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Jul 22, 2011 at 22:50,  <f1@uekermann-online.de> wrote:\n> So we agree that its wrong for Less?\n\nit's wrong but i don't think it's wrong enough to break sort.\n",
			"disapproval": false,
			"date": "2011-07-23 02:57:18.324133",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "For some reason gotest now fails to start the tests for the sort package with the error below. I have no idea what I did wrong since everything compiles nicely and the my testprograms work fine. Reverting the changes in the files I edited also doesn't fix things. I sent the CL anyway since I am stuck here, I don't know how to debug this, I am not even sure if something wrong with the CL or if I broke something else... ...I am bit confused.\n\nflorian@FlorianLaptop:~/goupstream/go/src/pkg/sort$ gotest\nrm -f _test/sort.a\nrm -f _test/sort.a\ngopack grc _test/sort.a _gotest_.6 \nthrow: recursive call during initialization - linker skew\n\nruntime.throw+0x40 /home/florian/goupstream/go/src/pkg/runtime/runtime.c:102\n\truntime.throw(0x508ab5, 0x7f7e00000010)\nruntime.throwinit+0x25 /home/florian/goupstream/go/src/pkg/runtime/runtime.c:93\n\truntime.throwinit()\ntesting.init+0x36 /home/florian/goupstream/go/src/pkg/testing/testing.go:298\n\ttesting.init()\nsort.init+0x52 /home/florian/goupstream/go/src/pkg/sort/search_test.go:15\n\tsort.init()\npath/filepath.init+0x57 /home/florian/goupstream/go/src/pkg/path/filepath/path_unix.go:23\n\tpath/filepath.init()\nio/ioutil.init+0x48 /home/florian/goupstream/go/src/pkg/io/ioutil/tempfile.go:91\n\tio/ioutil.init()\ntime.init+0x43 /home/florian/goupstream/go/src/pkg/time/zoneinfo_unix.go:213\n\ttime.init()\ntesting.init+0x52 /home/florian/goupstream/go/src/pkg/testing/testing.go:298\n\ttesting.init()\nmain.init+0x4d /home/florian/goupstream/go/src/pkg/sort/_testmain.go:21\n\tmain.init()\nruntime.mainstart+0x5 /home/florian/goupstream/go/src/pkg/runtime/amd64/asm.s:76\n\truntime.mainstart()\nruntime.goexit /home/florian/goupstream/go/src/pkg/runtime/proc.c:244\n\truntime.goexit()\n----- goroutine created by -----\n_rt0_amd64+0xc9 /home/florian/goupstream/go/src/pkg/runtime/amd64/asm.s:65\ngotest: \"./6.out\" failed: exit status 2",
			"disapproval": false,
			"date": "2011-07-22 22:34:51.957802",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "you've added a dependency, which means the problem is likely that you've created a dependency cycle, probably in the test binary. notice the path\n\ntesting\ntime\nio\npath\nsort\ntesting\n\nin the trace.\n\nhowever, i tried adding a math dependency to my test_sort without problems. try a clean.bash and then all.bash. if you still see this, you have a cycle; if not, it's \"linker skew\".\n\n-rob\n\nOn 23/07/2011, at 8:34 AM, f1@uekermann-online.de wrote:\n\n> For some reason gotest now fails to start the tests for the sort package\n> with the error below. I have no idea what I did wrong since everything\n> compiles nicely and the my testprograms work fine. Reverting the changes\n> in the files I edited also doesn't fix things. I sent the CL anyway\n> since I am stuck here, I don't know how to debug this, I am not even\n> sure if something wrong with the CL or if I broke something else... ...I\n> am bit confused.\n> \n> florian@FlorianLaptop:~/goupstream/go/src/pkg/sort$ gotest\n> rm -f _test/sort.a\n> rm -f _test/sort.a\n> gopack grc _test/sort.a _gotest_.6\n> throw: recursive call during initialization - linker skew\n> \n> runtime.throw+0x40\n> /home/florian/goupstream/go/src/pkg/runtime/runtime.c:102\n> \truntime.throw(0x508ab5, 0x7f7e00000010)\n> runtime.throwinit+0x25\n> /home/florian/goupstream/go/src/pkg/runtime/runtime.c:93\n> \truntime.throwinit()\n> testing.init+0x36\n> /home/florian/goupstream/go/src/pkg/testing/testing.go:298\n> \ttesting.init()\n> sort.init+0x52\n> /home/florian/goupstream/go/src/pkg/sort/search_test.go:15\n> \tsort.init()\n> path/filepath.init+0x57\n> /home/florian/goupstream/go/src/pkg/path/filepath/path_unix.go:23\n> \tpath/filepath.init()\n> io/ioutil.init+0x48\n> /home/florian/goupstream/go/src/pkg/io/ioutil/tempfile.go:91\n> \tio/ioutil.init()\n> time.init+0x43\n> /home/florian/goupstream/go/src/pkg/time/zoneinfo_unix.go:213\n> \ttime.init()\n> testing.init+0x52\n> /home/florian/goupstream/go/src/pkg/testing/testing.go:298\n> \ttesting.init()\n> main.init+0x4d /home/florian/goupstream/go/src/pkg/sort/_testmain.go:21\n> \tmain.init()\n> runtime.mainstart+0x5\n> /home/florian/goupstream/go/src/pkg/runtime/amd64/asm.s:76\n> \truntime.mainstart()\n> runtime.goexit /home/florian/goupstream/go/src/pkg/runtime/proc.c:244\n> \truntime.goexit()\n> ----- goroutine created by -----\n> _rt0_amd64+0xc9\n> /home/florian/goupstream/go/src/pkg/runtime/amd64/asm.s:65\n> gotest: \"./6.out\" failed: exit status 2\n> \n> \n> http://codereview.appspot.com/4805051/\n\n",
			"disapproval": false,
			"date": "2011-07-22 22:42:23.332643",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "So we agree that its wrong for Less?\n\nOn 2011/07/23 02:44:55, r2 wrote:\n> On 23/07/2011, at 12:36 PM, mailto:f1@uekermann-online.de wrote:\n> \n> > isn't that true for two NaNs?\n> \n> sigh, yes.\n> \n> package main\n> \n> import \"fmt\"\n> import \"math\"\n> \n> func main() {\n> \ta := math.NaN()\n> \tb := math.NaN()\n> \tfmt.Println(a < b, !(b >= a), a < b || !(b >= a))\n> }\n> \n> false true true\n>",
			"disapproval": false,
			"date": "2011-07-23 02:50:27.670449",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-07-23 19:44:42.480131",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This is a real, preexisting cycle.\nYou're just hitting now because the runtime\ndoesn't catch cycles involving packages\nwith no init.\n\nI sent out a CL fixing sort and\nanother CL making the linker find these.\nsort is the only one in the tree.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-07-23 00:43:54.695305",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Ah I see... ...wrong packagename + no init/missing check.\n\nAfter pulling the changes everything works fine.\n\nI forgot to check the alphabetical ordering of imports (somehow I feel like I read somewhere that gofmt learned to do that on its own). Should I just send another CL that fixes the import ordering or are there comments on this?\n\nOn 2011/07/23 00:43:54, rsc wrote:\n> This is a real, preexisting cycle.\n> You're just hitting now because the runtime\n> doesn't catch cycles involving packages\n> with no init.\n> \n> I sent out a CL fixing sort and\n> another CL making the linker find these.\n> sort is the only one in the tree.\n> \n> Russ",
			"disapproval": false,
			"date": "2011-07-23 01:35:37.317107",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4805051/diff/3001/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttp://codereview.appspot.com/4805051/diff/3001/src/pkg/sort/sort.go#newcode9\nsrc/pkg/sort/sort.go:9: import \"math\"\nthe current logic is better :\n1 comparison for normal true without NaN\n2 comparisons for normal false\n2 comparisons for false with NaN as second value\n3 comparisons for anything with NaN as first value\n\n(imho) your suggestion would result in:\n1 comparison for normal true without NaN\n2 comparisons for normal false without NaN (<= instead of <)\n3 comparisons for true with NaN as first value\n4 comparisons for NaN as second (true) or NaN for both (false)\n\nProbably made a mistake or two in the listing above, but I think the idea is clear, the current code is easier and faster.\n\nBut getting rid of the math dependency is easy anyway, I could manually inline IsNan (a!=a), but I guess the compiler will learn that as well at some point.\n\nI don't like it, because the code is easier to read with IsNaN and math doesn't add dependencies anyway (it only depends on unsafe), so there is no real benefit.\nBut I don't care much, I made my point, now you choose what you would like to have :).",
			"disapproval": false,
			"date": "2011-07-23 02:22:34.888533",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn 23/07/2011, at 12:27 PM, Russ Cox wrote:\n\n> what about\n> \n> a < b || !(b >= a)\n> \n> with a good comment?\n> that's worst case 2 all the time\n> and might even work.\n\nthat's what i'm trying to say, unsuccessfully.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-07-23 02:30:19.451763",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ca14957bb4f3 ***\n\nsort: fixed bug in (Float64Slice) Less; NaN less than anything else\n\nPreviously comparisons with NaN led to contradictory results if it was\ncompared to anything not NaN, since Less always returned false, thus\nbreaking monotonicity of ordering.\nThis fix makes NaN less than anything else and adds NaN and (+-)Inf to\ntestcases.\n\nFixes issue 2092.\n\nR=golang-dev, r, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/4805051\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-07-23 19:47:09.638640",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4805051/diff/3001/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttp://codereview.appspot.com/4805051/diff/3001/src/pkg/sort/sort.go#newcode9\nsrc/pkg/sort/sort.go:9: import \"math\"\ndependency cycles aside, it's kind of a shame to add an import to a package that was once a leaf. is there a clean yet efficient way to avoid that?\n\ni think you can do something like\n\nif a < b return true\nif b < a return false\n\nthen do the a < a check for NaN\n\ni hate NaNs with a deep-seated passion.",
			"disapproval": false,
			"date": "2011-07-23 01:41:42.651846",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn 23/07/2011, at 12:36 PM, f1@uekermann-online.de wrote:\n\n> isn't that true for two NaNs?\n\nsigh, yes.\n\npackage main\n\nimport \"fmt\"\nimport \"math\"\n\nfunc main() {\n\ta := math.NaN()\n\tb := math.NaN()\n\tfmt.Println(a < b, !(b >= a), a < b || !(b >= a))\n}\n\nfalse true true\n\n",
			"disapproval": false,
			"date": "2011-07-23 02:44:55.260840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> dependency cycles aside, it's kind of a shame to add an import to a\n> package that was once a leaf. is there a clean yet efficient way to\n> avoid that?\n>\n> i think you can do something like\n>\n> if a < b return true\n> if b < a return false\n>\n> then do the a < a check for NaN\n>\n> i hate NaNs with a deep-seated passion.\n\nI'd prefer to see IsNaN in the code to make it clearer.\nmath is a leaf too, and once inlining works you won't\neven see a reference to math in the generated code.\nSo the import is not a problem.\n",
			"disapproval": false,
			"date": "2011-07-23 01:49:52.690605",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "its not much of a function its just a!=a, thats it, just one comparison",
			"disapproval": false,
			"date": "2011-07-23 02:28:07.107526",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i give up. leaving for rsc.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-07-23 01:57:43.513793",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "what about\n\na < b || !(b >= a)\n\nwith a good comment?\nthat's worst case 2 all the time\nand might even work.\n",
			"disapproval": false,
			"date": "2011-07-23 02:28:00.557079",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "isn't that true for two NaNs?\n\nOn 2011/07/23 02:30:19, r2 wrote:\n> On 23/07/2011, at 12:27 PM, Russ Cox wrote:\n> \n> > what about\n> > \n> > a < b || !(b >= a)\n> > \n> > with a good comment?\n> > that's worst case 2 all the time\n> > and might even work.\n> \n> that's what i'm trying to say, unsuccessfully.\n> \n> -rob\n>",
			"disapproval": false,
			"date": "2011-07-23 02:36:39.254920",
			"approval": false
		},
		{
			"sender": "f1@uekermann-online.de",
			"recipients": [
				"f1@uekermann-online.de",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@google.com, rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-07-23 03:24:35.349913",
			"approval": false
		}
	],
	"owner_email": "f1@uekermann-online.de",
	"private": false,
	"base_url": "",
	"owner": "Florian Uekermann",
	"subject": "code review 4805051: sort: fixed bug in (Float64Slice) Less; NaN less than a...",
	"created": "2011-07-22 21:37:11.255623",
	"patchsets": [
		1,
		1002,
		3001,
		17001
	],
	"modified": "2011-07-23 03:24:35.349913",
	"closed": false,
	"issue": 4805051
}