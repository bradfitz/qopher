{
	"description": "runtime: allow cgo callbacks on non-Go threads\n\nFixes issue 4435.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"minux.ma@gmail.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com",
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-18 17:42:56.801860",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this breaks ARM builds, I don't yet know why\nperhaps I made a wrong assumption somewhere,\nfeel free to submit when it's ready.\ni will hunt the ARM bug.\n\n# ../misc/cgo/test\npanic: runtime error: call of nil func value [recovered]\n\tpanic: runtime error: call of nil func value\n[signal 0xb code=0x1 addr=0x0 pc=0x0]\n\ngoroutine 13 [running]:\ntesting.func\u00b7004(0x40051fd4, 0x1026a100)\n\t/home/minux/go.hg/src/pkg/testing/testing.go:310 +0x148\ncreated by testing.RunTests\n\t/home/minux/go.hg/src/pkg/testing/testing.go:430 +0x6d4\n\ngoroutine 1 [chan receive]:\ntesting.RunTests(0x10c00, 0x19e578, 0x1b, 0x1b, 0x1, ...)\n\t/home/minux/go.hg/src/pkg/testing/testing.go:431 +0x6f4\ntesting.Main(0x10c00, 0x19e578, 0x1b, 0x1b, 0x19bb70, ...)\n\t/home/minux/go.hg/src/pkg/testing/testing.go:327 +0x68\nmain.main()\n\t_/home/minux/go.hg/misc/cgo/test/_test/_testmain.go:97 +0x94\nexit status 2\nFAIL\t_/home/minux/go.hg/misc/cgo/test\t0.033s\nCommand exited with non-zero status 1\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_arm.s\nFile src/pkg/runtime/asm_arm.s (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_arm.s#newcode376\nsrc/pkg/runtime/asm_arm.s:376: CALL\t(R0)\ns/CALL/BL/\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/proc.c#newcode904\nsrc/pkg/runtime/proc.c:904: // is - once it has installed its own m so that ican do things like\ns/ican/it can/",
			"disapproval": false,
			"date": "2013-02-19 20:40:08.153840",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7304104/diff/2001/misc/cgo/test/cthread.c\nFile misc/cgo/test/cthread.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/misc/cgo/test/cthread.c#newcode28\nmisc/cgo/test/cthread.c:28: pthread_create(&thread_id[i], &attr, addThread, &max);\nWhy bother with attr and pthread_attr_init?  Since you aren't changing any values, you may as well pass NULL to pthread_create.\n\nhttps://codereview.appspot.com/7304104/diff/2001/misc/cgo/test/cthread.c#newcode28\nmisc/cgo/test/cthread.c:28: pthread_create(&thread_id[i], &attr, addThread, &max);\ncheck that nthread <= nelem(thread_id) ?\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_386.s#newcode498\nsrc/pkg/runtime/asm_386.s:498: MOVL\tm(CX), BP\nYou can move the MOVL m(CX),BP line before the havem label.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_amd64.s\nFile src/pkg/runtime/asm_amd64.s (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_amd64.s#newcode531\nsrc/pkg/runtime/asm_amd64.s:531: MOVQ\tm(CX), BP\nYou can move the MOVQ m(CX),BP before the havem label.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_amd64.s#newcode597\nsrc/pkg/runtime/asm_amd64.s:597: MOVQ\t$runtime\u00b7dropm(SB), AX\nWhat will happen if C code calls Go code with no m, and the Go code calls panic?\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/cgocall.c\nFile src/pkg/runtime/cgocall.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/cgocall.c#newcode220\nsrc/pkg/runtime/cgocall.c:220: m->needextram = 1;\nSeems like needextram is already 1, not sure why you are setting it to 1.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/proc.c#newcode998\nsrc/pkg/runtime/proc.c:998: // to release the m on thread exit. With this approach we cannot in\nSeems like you could use pthread_key_create to allocate a slot for the m, and also use the TLS variable m that we are already using.  That would give you the convenient destructor without requiring you to change any of the existing code.  Ordinary Go threads would not need to call pthread_setspecific for this key, as they would never exit; only threads we first see for a callback would need to.",
			"disapproval": false,
			"date": "2013-02-18 20:10:50.326460",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Your test fails on windows.\n\n# ..\\misc\\cgo\\test\n# _/C_/go/root/misc/cgo/test\n..\\misc\\cgo\\test\\cthread.c:5:21: fatal error: pthread.h: No such file or directory\ncompilation terminated.\nFAIL    _/C_/go/root/misc/cgo/test [build failed]\n\nAlex\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/thread_windows.c\nFile src/pkg/runtime/thread_windows.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/thread_windows.c#newcode217\nsrc/pkg/runtime/thread_windows.c:217: {\nUSED(p);USED(n);",
			"disapproval": false,
			"date": "2013-02-18 22:33:14.919410",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/18 22:33:14, brainman wrote:\n> USED(p);USED(n);\n\nShould do the same to thread_plan9.c.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-18 22:33:59.385640",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks for all the feedback. \n\nAlex, I split cthread.c into cthread_unix.c and cthread_windows.c. I attempted to write cthread_windows.c but I haven't tested on Windows (that laptop had to be reformatted a while back and I haven't recreated it).\n\nMinux, I have a Chromebook I can test the arm code on, but not with me today. I'll try to do that later this week, but if you have time to poke at why arm doesn't work, that'd be great.\n\nRuss\n\nhttps://codereview.appspot.com/7304104/diff/2001/misc/cgo/test/cthread.c\nFile misc/cgo/test/cthread.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/misc/cgo/test/cthread.c#newcode28\nmisc/cgo/test/cthread.c:28: pthread_create(&thread_id[i], &attr, addThread, &max);\nOn 2013/02/18 20:10:50, iant wrote:\n> Why bother with attr and pthread_attr_init?  Since you aren't changing any\n> values, you may as well pass NULL to pthread_create.\n\nI just copy and paste code when I need to create a pthread. Done.\n\nhttps://codereview.appspot.com/7304104/diff/2001/misc/cgo/test/cthread.c#newcode28\nmisc/cgo/test/cthread.c:28: pthread_create(&thread_id[i], &attr, addThread, &max);\nOn 2013/02/18 20:10:50, iant wrote:\n> check that nthread <= nelem(thread_id) ?\n\nDone.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_386.s#newcode498\nsrc/pkg/runtime/asm_386.s:498: MOVL\tm(CX), BP\nOn 2013/02/18 20:10:50, iant wrote:\n> You can move the MOVL m(CX),BP line before the havem label.\n\nDone.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_amd64.s\nFile src/pkg/runtime/asm_amd64.s (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_amd64.s#newcode531\nsrc/pkg/runtime/asm_amd64.s:531: MOVQ\tm(CX), BP\nOn 2013/02/18 20:10:50, iant wrote:\n> You can move the MOVQ m(CX),BP before the havem label.\n\nDone.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_amd64.s#newcode597\nsrc/pkg/runtime/asm_amd64.s:597: MOVQ\t$runtime\u00b7dropm(SB), AX\nOn 2013/02/18 20:10:50, iant wrote:\n> What will happen if C code calls Go code with no m, and the Go code calls panic?\n\nI think it all works, because while the Go code is executing there is an m. The test has an implicit (nil deref) panic and recover in the called Go code. Is there a specific reason you are worried?\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_arm.s\nFile src/pkg/runtime/asm_arm.s (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/asm_arm.s#newcode376\nsrc/pkg/runtime/asm_arm.s:376: CALL\t(R0)\nOn 2013/02/19 20:40:08, minux wrote:\n> s/CALL/BL/\n\nDone.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/cgocall.c\nFile src/pkg/runtime/cgocall.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/cgocall.c#newcode220\nsrc/pkg/runtime/cgocall.c:220: m->needextram = 1;\nOn 2013/02/18 20:10:50, iant wrote:\n> Seems like needextram is already 1, not sure why you are setting it to 1.\n\nOops, that's supposed to be a 0. :-)\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/proc.c#newcode904\nsrc/pkg/runtime/proc.c:904: // is - once it has installed its own m so that ican do things like\nOn 2013/02/19 20:40:08, minux wrote:\n> s/ican/it can/\n\nDone.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/proc.c#newcode998\nsrc/pkg/runtime/proc.c:998: // to release the m on thread exit. With this approach we cannot in\nOn 2013/02/18 20:10:50, iant wrote:\n> Seems like you could use pthread_key_create to allocate a slot for the m, and\n> also use the TLS variable m that we are already using.  That would give you the\n> convenient destructor without requiring you to change any of the existing code. \n> Ordinary Go threads would not need to call pthread_setspecific for this key, as\n> they would never exit; only threads we first see for a callback would need to.\n\nThanks. I really like this suggestion. Not much here changes, we just call dropm from a different place. I'd like to push forward with the current version and do the pthread destructor in a separate CL, as a performance optimization.\n\nI've updated the comment.\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/thread_windows.c\nFile src/pkg/runtime/thread_windows.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/2001/src/pkg/runtime/thread_windows.c#newcode217\nsrc/pkg/runtime/thread_windows.c:217: {\nOn 2013/02/18 22:33:15, brainman wrote:\n> USED(p);USED(n);\n\nDone.",
			"disapproval": false,
			"date": "2013-02-19 20:59:38.829020",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "windows/386 problems:\n\nThis is the end of the build:\n\n...\n\n# ..\\misc\\cgo\\stdio\n\n# ..\\misc\\cgo\\test\n# _/C_/go/root/misc/cgo/test\n..\\misc\\cgo\\test\\cthread_windows.c: In function 'addThread':\n..\\misc\\cgo\\test\\cthread_windows.c:18:2: warning: 'return' with a value, in function returning void\n..\\misc\\cgo\\test\\cthread_windows.c: In function 'doAdd':\n..\\misc\\cgo\\test\\cthread_windows.c:31:3: warning: passing argument 3 of '_beginthreadex' from incompatible pointer type\nc:\\go\\mingw\\bin\\../lib/gcc/mingw32/4.5.2/../../../../include/process.h:100:2: note: expected 'unsigned int (*)(void *)' but argument is of type 'void (*)(void *)'\nok      _/C_/go/root/misc/cgo/test      19.469s\n\n# ..\\doc\\progs\n\n# ..\\test\n\n# Checking API compatibility.\n+pkg go/types, method (*Const) GetPkg() *Package\n+pkg go/types, method (*Func) GetPkg() *Package\n+pkg go/types, method (*Package) GetPkg() *Package\n+pkg go/types, method (*TypeName) GetPkg() *Package\n+pkg go/types, method (*Var) GetPkg() *Package\n+pkg go/types, type Const struct, Pkg *Package\n+pkg go/types, type Func struct, Pkg *Package\n+pkg go/types, type Object interface, GetPkg() *Package\n+pkg go/types, type TypeName struct, Pkg *Package\n+pkg go/types, type Var struct, Pkg *Package\n~pkg net, func ListenUnixgram(string, *UnixAddr) (*UDPConn, error)\n~pkg text/template/parse, type DotNode bool\n~pkg text/template/parse, type Node interface { Copy, String, Type }\n\u00b1pkg go/types, type Importer func(imports map[string]*Package, path string) (pkg\n *Package, err error)\n\nALL TESTS PASSED\n\n...\n\nSo, there are some compiler warnings. But misc\\cgo\\test test executable also crashes. You don't get to see the crash, because, my \"system debugger\" is started to handle the exception, and I had to take some manual options to kill the bugger. I think it is because your new C threads don't set any exception handler. Our builder won't be able to do what I did, so we have to be careful.\n\nI tried to poke at it:\n\nC:\\go\\root\\misc\\cgo\\test>gdb test.test.exe\nGNU gdb (GDB) 7.2\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"mingw32\".\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>...\nReading symbols from C:\\go\\root\\misc\\cgo\\test/test.test.exe...done.\n(gdb) r\nStarting program: C:\\go\\root\\misc\\cgo\\test/test.test.exe\n[New Thread 6492.0xe08]\n[New Thread 6492.0x1da8]\n[New Thread 6492.0x1eec]\nscatter = 0042D268\nhello from C\n[New Thread 6492.0x178c]\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 6492.0x178c]\nruntime.cgocallback (fn=void, frame=void, framesize=void)\n    at C:/go/root/src/pkg/runtime/asm_386.s:485\n485             MOVL    m(CX), BP\n(gdb) bt\n#0  runtime.cgocallback (fn=void, frame=void, framesize=void)\n    at C:/go/root/src/pkg/runtime/asm_386.s:485\n#1  0x0042c500 in _cgoexp_e9125f37873d_Add (a=void, n=void)\n    at C:/DOCUME~1/brainman/LOCALS~1/Temp/go-build214494323/_/C_/go/root/misc/cgo/test/_test/_cgo_defun.c:321\n#2  0x004805f6 in ?? ()\n#3  0x0042ca5b in ?? ()\n#4  0x0042d3dc in ?? ()\n#5  0x77c3a3b0 in msvcrt!_endthreadex () from C:\\WINDOWS\\system32\\msvcrt.dll\n#6  0x7c80b729 in KERNEL32!GetModuleFileNameA ()\n   from C:\\WINDOWS\\system32\\kernel32.dll\n#7  0x00000000 in ?? ()\n(gdb) info reg\neax            0x4      4\necx            0x0      0\nedx            0xad0608 11339272\nebx            0x0      0\nesp            0x3152fefc       0x3152fefc\nebp            0x3152ff30       0x3152ff30\nesi            0xa      10\nedi            0x0      0\neip            0x41c4ca 0x41c4ca <runtime.cgocallback+10>\neflags         0x10216  [ PF AF IF RF ]\ncs             0x1b     27\nss             0x23     35\nds             0x23     35\nes             0x23     35\nfs             0x3b     59\ngs             0x0      0\n\nBut, I don't know what I am looking for.\n\nThe windows/amd64 didn't get very far either:\n\npkg/go/doc\npkg/go/build\ncmd/go\nlockextra: nosplit stack overflow\n        120     assumed on entry to lockextra\n        88      after lockextra uses 32\n        80      on entry to runtime.osyield\n        56      after runtime.osyield uses 24\n        48      on entry to runtime.stdcall\n        -16     after runtime.stdcall uses 64\ngo tool dist: FAILED: c:\\MinGW64\\go\\pkg\\tool\\windows_amd64\\6l -o c:\\MinGW64\\go\\pkg\\tool\\windows_amd64\\go_bootstrap.exe C:\\Users\\brainman\\AppData\\Local\\Temp\\goEC42.tmp\\_go_.6\n\nAlex",
			"disapproval": false,
			"date": "2013-02-20 00:21:42.236070",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 19, 2013 at 12:59 PM,  <rsc@golang.org> wrote:\r\n>>\r\n>> What will happen if C code calls Go code with no m, and the Go code\r\n>\r\n> calls panic?\r\n>\r\n> I think it all works, because while the Go code is executing there is an\r\n> m. The test has an implicit (nil deref) panic and recover in the called\r\n> Go code. Is there a specific reason you are worried?\r\n\r\nI was worried that perhaps nothing would call dropm in that case.\r\n\r\nIf you switch to the pthread_key_create destructor this is clearly a\r\nnon-issue (and it may be a non-issue anyhow, I'm not sure).\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-20 02:01:28.768500",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-20 02:56:54.575350",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7304104/diff/44001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/44001/src/pkg/runtime/proc.c#newcode944\nsrc/pkg/runtime/proc.c:944: runtime\u00b7minit();\npart of the problem was here\nminit() allocated gsignal, but we've not yet called exitsyscall() so we are potentially running concurrently with GC\n\nit seems to be fixed by mpreinit() patch\nbut I still observe some crashes on linux on misc/cgo/test\nstill looks like corrupted heap",
			"disapproval": false,
			"date": "2013-02-21 15:45:45.615090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1d5a80b07916 ***\n\nruntime: allow cgo callbacks on non-Go threads\n\nFixes issue 4435.\n\nR=golang-dev, iant, alex.brainman, minux.ma, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/7304104",
			"disapproval": false,
			"date": "2013-02-20 22:48:27.278630",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7304104/diff/6002/misc/cgo/test/cthread.go\nFile misc/cgo/test/cthread.go (right):\n\nhttps://codereview.appspot.com/7304104/diff/6002/misc/cgo/test/cthread.go#newcode21\nmisc/cgo/test/cthread.go:21: func Add(x int) {\nalso call runtime.Gosched() just in case\n\nhttps://codereview.appspot.com/7304104/diff/6002/misc/cgo/test/cthread.go#newcode32\nmisc/cgo/test/cthread.go:32: func testCthread(t *testing.T) {\nrun it with GOMAXPROCS>1 as well\nwhen GOMAXPROCS=1 threads do not actually collide in Add(), so no goroutines block on the sum mutex\n\nhttps://codereview.appspot.com/7304104/diff/6002/misc/cgo/test/cthread.go#newcode33\nmisc/cgo/test/cthread.go:33: C.doAdd(10, 6)\nit makes sense to use more iterations, so that the threads actually collide at the callback\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode807\nsrc/pkg/runtime/proc.c:807: runtime\u00b7newextram();\nif(runtime\u00b7iscgo)?\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode940\nsrc/pkg/runtime/proc.c:940: runtime\u00b7setmg(mp, mp->g0);\nWhy is it running on g0?\nruntime.gosched() will throw if called on g0.\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode945\nsrc/pkg/runtime/proc.c:945: runtime\u00b7minit();\nWhat about asminit()?\nasm_386 switch FPU to a different mode. This means that Go code will behave differently depending on how it is called.\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode1004\nsrc/pkg/runtime/proc.c:1004: // but without pthreads, like Windows.\nFYI: Windows also has thread completion notifications if you do something along the lines of:\n\nvoid __stdcall on_tls_callback(void* hinst, unsigned long reason, void* unused)\n{\n    (void)hinst;\n    (void)unused;\n    if (reason == 3)\n        tss_dtor();\n}\n\n#pragma data_seg(push, old_seg)\n#ifdef RL_M32\n#   pragma data_seg(\".CRT$XLB\")\n#else\n#   pragma const_seg(\".CRT$XLB\")\n#endif\n__declspec(dllexport) void (__stdcall * volatile p_on_tls_callback)(void*, unsigned long, void*) = on_tls_callback;\n#pragma data_seg(pop, old_seg)\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode1011\nsrc/pkg/runtime/proc.c:1011: runtime\u00b7setprof(false);\nIt's already disabled by entersyscall.",
			"disapproval": false,
			"date": "2013-02-20 07:45:35.039790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 19, 2013 at 9:01 PM, Ian Lance Taylor <iant@golang.org> wrote:\r\n\r\n> On Tue, Feb 19, 2013 at 12:59 PM,  <rsc@golang.org> wrote:\r\n> >>\r\n> >> What will happen if C code calls Go code with no m, and the Go code\r\n> >\r\n> > calls panic?\r\n> >\r\n> > I think it all works, because while the Go code is executing there is an\r\n> > m. The test has an implicit (nil deref) panic and recover in the called\r\n> > Go code. Is there a specific reason you are worried?\r\n>\r\n> I was worried that perhaps nothing would call dropm in that case.\r\n>\r\n> If you switch to the pthread_key_create destructor this is clearly a\r\n> non-issue (and it may be a non-issue anyhow, I'm not sure).\r\n>\r\n\r\nI think panic is fine. Since we're entering on a brand new m, there are no\r\ndeferred recovers on entry. If a recover deferred within the callback stops\r\nthe panic, as in the test, then things work fine, because the callback\r\nreturns normally. If not, then the whole process will exit after printing\r\nthe usual goroutine dump, so that should be fine too.\r\n\r\nIf the callback into Go calls into C and then C calls pthread_exit, then we\r\nwill indeed leak the m, but that's true of ordinary Go threads too. (And\r\nworse things probably happen too, since Go thinks the m and the thread\r\nstill exist. I'm not too worried about that case, at least today.)\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-20 15:17:48.799010",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I guess we need to mark usleep/osyield as #pragma textflag,7 (no split stack).\r\n\r\n\r\nOn Thu, Feb 21, 2013 at 3:49 AM,  <alex.brainman@gmail.com> wrote:\r\n> misc/cgo/test crashes sometimes. Perhaps, this will help you:\r\n>\r\n> (gdb) disas\r\n> Dump of assembler code for function runtime.usleep:\r\n>    0x00416680 <+0>:     mov    %fs:0x14,%ecx\r\n> => 0x00416687 <+7>:     mov    (%ecx),%ecx\r\n>    0x00416689 <+9>:     cmp    (%ecx),%esp\r\n>    0x0041668b <+11>:    ja     0x416699 <runtime.usleep+25>\r\n>    0x0041668d <+13>:    xor    %edx,%edx\r\n>    0x0041668f <+15>:    mov    $0x4,%eax\r\n>    0x00416694 <+20>:    call   0x41c470 <runtime.morestack>\r\n>    0x00416699 <+25>:    sub    $0xc,%esp\r\n>    0x0041669c <+28>:    mov    0x10(%esp),%ecx\r\n>    0x004166a0 <+32>:    mov    $0x10624dd3,%eax\r\n>    0x004166a5 <+37>:    mul    %ecx\r\n>    0x004166a7 <+39>:    shr    $0x6,%edx\r\n>    0x004166aa <+42>:    mov    %edx,%ecx\r\n>    0x004166ac <+44>:    cmp    $0x0,%edx\r\n>    0x004166af <+47>:    jne    0x4166b6 <runtime.usleep+54>\r\n>    0x004166b1 <+49>:    mov    $0x1,%ecx\r\n>    0x004166b6 <+54>:    mov    0x58a0c4,%eax\r\n>    0x004166bc <+60>:    mov    %eax,(%esp)\r\n>    0x004166bf <+63>:    mov    $0x1,%eax\r\n>    0x004166c4 <+68>:    mov    %eax,0x4(%esp)\r\n>    0x004166c8 <+72>:    mov    %ecx,0x8(%esp)\r\n>    0x004166cc <+76>:    call   0x416ad0 <runtime.stdcall>\r\n>    0x004166d1 <+81>:    add    $0xc,%esp\r\n>    0x004166d4 <+84>:    ret\r\n> End of assembler dump.\r\n> (gdb) info r\r\n> eax            0x1      1\r\n> ecx            0x0      0\r\n> edx            0x0      0\r\n> ebx            0x0      0\r\n> esp            0x3182fecc       0x3182fecc\r\n> ebp            0x3182ff30       0x3182ff30\r\n> esi            0xa      10\r\n> edi            0x0      0\r\n> eip            0x416687 0x416687 <runtime.usleep+7>\r\n> eflags         0x10246  [ PF ZF IF RF ]\r\n> cs             0x1b     27\r\n> ss             0x23     35\r\n> ds             0x23     35\r\n> es             0x23     35\r\n> fs             0x3b     59\r\n> gs             0x0      0\r\n> (gdb) bt\r\n> #0  0x00416687 in runtime.usleep (us=void)\r\n>     at C:/go/root/src/pkg/runtime/thread_windows.c:146\r\n> #1  0x004121bd in lockextra (nilokay=void)\r\n>     at C:/go/root/src/pkg/runtime/proc.c:1044\r\n> #2  0x00411fbc in runtime.needm (x=void)\r\n>     at C:/go/root/src/pkg/runtime/proc.c:915\r\n> #3  0x0041c70c in runtime.cgocallback (fn=void, frame=void,\r\n> framesize=void)\r\n>     at C:/go/root/src/pkg/runtime/asm_386.s:495\r\n> #4  0x0042c780 in _cgoexp_e9125f37873d_Add (a=void, n=void)\r\n>     at\r\n> C:/DOCUME~1/brainman/LOCALS~1/Temp/go-build908326399/_/C_/go/root/misc/cgo/test/_test/_cgo_defun.c:321\r\n> #5  0x00480836 in ?? ()\r\n> #6  0x0042ccdb in ?? ()\r\n> #7  0x0042d65c in ?? ()\r\n> #8  0x77c3a3b0 in msvcrt!_endthreadex () from\r\n> C:\\WINDOWS\\system32\\msvcrt.dll\r\n> #9  0x7c80b729 in KERNEL32!GetModuleFileNameA ()\r\n>    from C:\\WINDOWS\\system32\\kernel32.dll\r\n> #10 0x00000000 in ?? ()\r\n> (gdb)\r\n>\r\n>\r\n> https://codereview.appspot.com/7304104/\r\n",
			"disapproval": false,
			"date": "2013-02-21 05:04:32.601780",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 19, 2013 at 7:21 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> Program received signal SIGSEGV, Segmentation fault.\r\n> [Switching to Thread 6492.0x178c]\r\n> runtime.cgocallback (fn=void, frame=void, framesize=void)\r\n>     at C:/go/root/src/pkg/runtime/**asm_386.s:485\r\n> 485             MOVL    m(CX), BP\r\n> (gdb) bt\r\n>\r\n\r\nThanks for this information. I believe the problem is that 0x14(FS) (now\r\nCX) is nil here, so in addition to setting m and g we need to set the\r\n14(FS) space. On Darwin and OS X there is not this extra indirect. The code\r\nhere needs to test whether CX is zero and handle that, but then setmg needs\r\nto initialize it too. And probably it has to be preserved the same way that\r\nexternalthreadhandler does today.\r\n\r\nI will set up a Windows laptop to try this out.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-20 15:25:29.629990",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/21 16:40:28, dvyukov wrote:\n> https://codereview.appspot.com/7304104/diff/44001/src/pkg/runtime/proc.c\n> File src/pkg/runtime/proc.c (right):\n> \n> https://codereview.appspot.com/7304104/diff/44001/src/pkg/runtime/proc.c#newcode944\n> src/pkg/runtime/proc.c:944: runtime\u00b7minit();\n> On 2013/02/21 15:45:45, dvyukov wrote:\n> > part of the problem was here\n> > minit() allocated gsignal, but we've not yet called exitsyscall() so we are\n> > potentially running concurrently with GC\n> > \n> > it seems to be fixed by mpreinit() patch\n> > but I still observe some crashes on linux on misc/cgo/test\n> > still looks like corrupted heap\n> \n> I've noticed that if I set GOGC=off the crash goes away, and if I set GOGC=1 it\n> crashes more reliably.\n> It probably means that we either allocate some memory concurrently with GC or\n> some memory is not reachable.\n\nOK, mystery solved. I will send a CL.",
			"disapproval": false,
			"date": "2013-02-21 16:55:08.999490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode807\nsrc/pkg/runtime/proc.c:807: runtime\u00b7newextram();\nOn 2013/02/20 07:45:35, dvyukov wrote:\n> if(runtime\u00b7iscgo)?\n\nDone.\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode940\nsrc/pkg/runtime/proc.c:940: runtime\u00b7setmg(mp, mp->g0);\nOn 2013/02/20 07:45:35, dvyukov wrote:\n> Why is it running on g0?\n> runtime.gosched() will throw if called on g0.\n\nAt this point we're in the system thread, so we're running on the system thread goroutine, which is m->g0. When needm returns, the code will jump into cgocallbackg, which will switch us off m->g0 onto m->curg in order to run the actual callback.\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode945\nsrc/pkg/runtime/proc.c:945: runtime\u00b7minit();\nOn 2013/02/20 07:45:35, dvyukov wrote:\n> What about asminit()?\n> asm_386 switch FPU to a different mode. This means that Go code will behave\n> differently depending on how it is called.\n\nDone.\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode1004\nsrc/pkg/runtime/proc.c:1004: // but without pthreads, like Windows.\nThanks. I would never have come up with that. :-)\n\nhttps://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode1011\nsrc/pkg/runtime/proc.c:1011: runtime\u00b7setprof(false);\nOn 2013/02/20 07:45:35, dvyukov wrote:\n> It's already disabled by entersyscall.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-20 15:28:20.295910",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/20 15:28:20, rsc wrote:\n\n> https://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode940\n> src/pkg/runtime/proc.c:940: runtime\u00b7setmg(mp, mp->g0);\n> On 2013/02/20 07:45:35, dvyukov wrote:\n> > Why is it running on g0?\n> > runtime.gosched() will throw if called on g0.\n> \n> At this point we're in the system thread, so we're running on the system thread\n> goroutine, which is m->g0. When needm returns, the code will jump into\n> cgocallbackg, which will switch us off m->g0 onto m->curg in order to run the\n> actual callback.\n\nAh, I see.\n\n> https://codereview.appspot.com/7304104/diff/6002/src/pkg/runtime/proc.c#newcode945\n> src/pkg/runtime/proc.c:945: runtime\u00b7minit();\n> On 2013/02/20 07:45:35, dvyukov wrote:\n> > What about asminit()?\n> > asm_386 switch FPU to a different mode. This means that Go code will behave\n> > differently depending on how it is called.\n> \n> Done.\n\nHowever, then we change behavior of the C code on that thread...",
			"disapproval": false,
			"date": "2013-02-20 15:31:49.525990",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/21 05:04:32, dvyukov wrote:\n> I guess we need to mark usleep/osyield as #pragma textflag,7 (no split stack).\n> \n\nDoes not help. Same problem at different place:\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 6988.0x12c4]\nruntime.asmcgocall (fn=void, arg=void)\n    at c:/go/root/src/pkg/runtime/asm_386.s:450\n450             MOVL    m(CX), BP\n(gdb) disas\nDump of assembler code for function runtime.asmcgocall:\n   0x0041c670 <+0>:     mov    0x4(%esp),%eax\n   0x0041c674 <+4>:     mov    0x8(%esp),%ebx\n   0x0041c678 <+8>:     mov    %esp,%edx\n   0x0041c67a <+10>:    mov    %fs:0x14,%ecx\n=> 0x0041c681 <+17>:    mov    0x4(%ecx),%ebp\n   0x0041c684 <+20>:    mov    0x0(%ebp),%esi\n   0x0041c687 <+23>:    mov    (%ecx),%edi\n   0x0041c689 <+25>:    cmp    %edi,%esi\n   0x0041c68b <+27>:    je     0x41c69f <runtime.asmcgocall+47>\n   0x0041c68d <+29>:    mov    %esp,0x10(%edi)\n   0x0041c690 <+32>:    movl   $0x41c660,0x14(%edi)\n   0x0041c697 <+39>:    mov    %edi,0x18(%edi)\n   0x0041c69a <+42>:    mov    %esi,(%ecx)\n   0x0041c69c <+44>:    mov    0x10(%esi),%esp\n   0x0041c69f <+47>:    sub    $0x20,%esp\n   0x0041c6a2 <+50>:    and    $0xfffffff0,%esp\n   0x0041c6a5 <+53>:    mov    %edi,0x8(%esp)\n   0x0041c6a9 <+57>:    mov    %edx,0x4(%esp)\n   0x0041c6ad <+61>:    mov    %ebx,(%esp)\n   0x0041c6b0 <+64>:    call   *%eax\n   0x0041c6b2 <+66>:    mov    %fs:0x14,%ecx\n   0x0041c6b9 <+73>:    mov    0x8(%esp),%edi\n   0x0041c6bd <+77>:    mov    %edi,(%ecx)\n   0x0041c6bf <+79>:    mov    0x4(%esp),%esp\n   0x0041c6c3 <+83>:    ret\nEnd of assembler dump.\n(gdb) info r\neax            0x41c8e0 4311264\necx            0x0      0\nedx            0x3192fe98       831717016\nebx            0x3192fea4       831717028\nesp            0x3192fe98       0x3192fe98\nebp            0x3192ff30       0x3192ff30\nesi            0xa      10\nedi            0x0      0\neip            0x41c681 0x41c681 <runtime.asmcgocall+17>\neflags         0x10206  [ PF IF RF ]\ncs             0x1b     27\nss             0x23     35\nds             0x23     35\nes             0x23     35\nfs             0x3b     59\ngs             0x0      0\n(gdb) bt\n#0  runtime.asmcgocall (fn=void, arg=void)\n    at c:/go/root/src/pkg/runtime/asm_386.s:450\n#1  0x00416ae0 in runtime.stdcall (fn=void, count=void)\n    at c:/go/root/src/pkg/runtime/thread_windows.c:257\n#2  0x004166b8 in runtime.usleep (us=void)\n    at c:/go/root/src/pkg/runtime/thread_windows.c:152\n#3  0x004121bd in lockextra (nilokay=void)\n    at c:/go/root/src/pkg/runtime/proc.c:1044\n#4  0x00411fbc in runtime.needm (x=void)\n    at c:/go/root/src/pkg/runtime/proc.c:915\n#5  0x0041c6ec in runtime.cgocallback (fn=void, frame=void, framesize=void)\n    at c:/go/root/src/pkg/runtime/asm_386.s:495\n#6  0x0042c760 in _cgoexp_15d16e9ca10b_Add (a=void, n=void)\n    at C:/DOCUME~1/brainman/LOCALS~1/Temp/go-build788492787/_/C_/go/root/misc/cgo/test/_test/_cgo_defun.c:321\n#7  0x00480816 in ?? ()\n#8  0x0042ccbb in ?? ()\n#9  0x0042d63c in ?? ()\n#10 0x77c3a3b0 in msvcrt!_endthreadex () from C:\\WINDOWS\\system32\\msvcrt.dll\n#11 0x7c80b729 in KERNEL32!GetModuleFileNameA ()\n   from C:\\WINDOWS\\system32\\kernel32.dll\n#12 0x00000000 in ?? ()\n(gdb)\n\nAlex",
			"disapproval": false,
			"date": "2013-02-21 06:02:19.405500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 20, 2013 at 10:31 AM, <dvyukov@google.com> wrote:\r\n\r\n> However, then we change behavior of the C code on that thread...\r\n>\r\n\r\nIf it had better manners, the C thread would thank us.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-20 15:36:37.187160",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is still crashing in misc/cgo/test on windows/386. But I have nothing to report yet.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-20 22:43:30.435390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The current version of the CL has been revised and tested to work on:\r\n\r\ndarwin/386\r\ndarwin/amd64\r\nlinux/386\r\nlinux/amd64\r\nlinux/arm*\r\nwindows/386\r\n windows/amd64\r\n\r\nThe test is flaky (fails <10% of the time) on arm. I don't know what's\r\nwrong. It could be general memory corruption unrelated to this CL.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-20 22:02:11.368690",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 20, 2013 at 5:43 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> It is still crashing in misc/cgo/test on windows/386. But I have nothing\r\n> to report yet.\r\n>\r\n\r\nLet me know if what I just submitted is crashing for you. I had the test\r\npassing while testing on a Windows machine, but I might have messed up\r\ncopying the changes back to my local machine.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-20 22:50:03.588480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I played some more with ARM and got nowhere. Disabling the test on ARM and\r\nsubmitting. Maybe someone else can poke at the ARM problems.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-20 22:41:57.725350",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "misc/cgo/test crashes sometimes. Perhaps, this will help you:\n\n(gdb) disas\nDump of assembler code for function runtime.usleep:\n   0x00416680 <+0>:     mov    %fs:0x14,%ecx\n=> 0x00416687 <+7>:     mov    (%ecx),%ecx\n   0x00416689 <+9>:     cmp    (%ecx),%esp\n   0x0041668b <+11>:    ja     0x416699 <runtime.usleep+25>\n   0x0041668d <+13>:    xor    %edx,%edx\n   0x0041668f <+15>:    mov    $0x4,%eax\n   0x00416694 <+20>:    call   0x41c470 <runtime.morestack>\n   0x00416699 <+25>:    sub    $0xc,%esp\n   0x0041669c <+28>:    mov    0x10(%esp),%ecx\n   0x004166a0 <+32>:    mov    $0x10624dd3,%eax\n   0x004166a5 <+37>:    mul    %ecx\n   0x004166a7 <+39>:    shr    $0x6,%edx\n   0x004166aa <+42>:    mov    %edx,%ecx\n   0x004166ac <+44>:    cmp    $0x0,%edx\n   0x004166af <+47>:    jne    0x4166b6 <runtime.usleep+54>\n   0x004166b1 <+49>:    mov    $0x1,%ecx\n   0x004166b6 <+54>:    mov    0x58a0c4,%eax\n   0x004166bc <+60>:    mov    %eax,(%esp)\n   0x004166bf <+63>:    mov    $0x1,%eax\n   0x004166c4 <+68>:    mov    %eax,0x4(%esp)\n   0x004166c8 <+72>:    mov    %ecx,0x8(%esp)\n   0x004166cc <+76>:    call   0x416ad0 <runtime.stdcall>\n   0x004166d1 <+81>:    add    $0xc,%esp\n   0x004166d4 <+84>:    ret\nEnd of assembler dump.\n(gdb) info r\neax            0x1      1\necx            0x0      0\nedx            0x0      0\nebx            0x0      0\nesp            0x3182fecc       0x3182fecc\nebp            0x3182ff30       0x3182ff30\nesi            0xa      10\nedi            0x0      0\neip            0x416687 0x416687 <runtime.usleep+7>\neflags         0x10246  [ PF ZF IF RF ]\ncs             0x1b     27\nss             0x23     35\nds             0x23     35\nes             0x23     35\nfs             0x3b     59\ngs             0x0      0\n(gdb) bt\n#0  0x00416687 in runtime.usleep (us=void)\n    at C:/go/root/src/pkg/runtime/thread_windows.c:146\n#1  0x004121bd in lockextra (nilokay=void)\n    at C:/go/root/src/pkg/runtime/proc.c:1044\n#2  0x00411fbc in runtime.needm (x=void)\n    at C:/go/root/src/pkg/runtime/proc.c:915\n#3  0x0041c70c in runtime.cgocallback (fn=void, frame=void, framesize=void)\n    at C:/go/root/src/pkg/runtime/asm_386.s:495\n#4  0x0042c780 in _cgoexp_e9125f37873d_Add (a=void, n=void)\n    at C:/DOCUME~1/brainman/LOCALS~1/Temp/go-build908326399/_/C_/go/root/misc/cgo/test/_test/_cgo_defun.c:321\n#5  0x00480836 in ?? ()\n#6  0x0042ccdb in ?? ()\n#7  0x0042d65c in ?? ()\n#8  0x77c3a3b0 in msvcrt!_endthreadex () from C:\\WINDOWS\\system32\\msvcrt.dll\n#9  0x7c80b729 in KERNEL32!GetModuleFileNameA ()\n   from C:\\WINDOWS\\system32\\kernel32.dll\n#10 0x00000000 in ?? ()\n(gdb)",
			"disapproval": false,
			"date": "2013-02-20 23:49:50.863350",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7304104/diff/44001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7304104/diff/44001/src/pkg/runtime/proc.c#newcode944\nsrc/pkg/runtime/proc.c:944: runtime\u00b7minit();\nOn 2013/02/21 15:45:45, dvyukov wrote:\n> part of the problem was here\n> minit() allocated gsignal, but we've not yet called exitsyscall() so we are\n> potentially running concurrently with GC\n> \n> it seems to be fixed by mpreinit() patch\n> but I still observe some crashes on linux on misc/cgo/test\n> still looks like corrupted heap\n\nI've noticed that if I set GOGC=off the crash goes away, and if I set GOGC=1 it crashes more reliably.\nIt probably means that we either allocate some memory concurrently with GC or some memory is not reachable.",
			"disapproval": false,
			"date": "2013-02-21 16:40:28.851000",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7304104: runtime: allow cgo callbacks on non-Go threads",
	"created": "2013-02-18 16:48:43.843090",
	"patchsets": [
		1,
		2001,
		12003,
		6002,
		29001,
		30001,
		33001,
		27014,
		38001,
		34019,
		44001
	],
	"modified": "2013-02-25 17:19:27.701590",
	"closed": true,
	"issue": 7304104
}