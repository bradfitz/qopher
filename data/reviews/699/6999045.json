{
	"description": "go.net/publicsuffix: tighten the encoding from 8 bytes per node to 4.\n\nOn the full list (running gen.go with -subset=false):\n\nBefore, there were 6086 nodes (at 8 bytes per node) before. After,\nthere were 6086 nodes (at 4 bytes per node) plus 354 children entries\n(at 4 bytes per node). The difference is 22928 bytes.\n\nIn comparison, the (crushed) text is 21082 bytes, and for the curious,\nthe longest label is 36 bytes: \"xn--correios-e-telecomunicaes-ghc29a\".\n\nAll 32 bits in the nodes table are used, but there's wiggle room to\naccomodate future changes to effective_tld_names.dat:\n\nThe largest children index is 353 (in 9 bits, so max is 511).\nThe largest node type is 2 (in 2 bits, so max is 3).\nThe largest text offset is 21080 (in 15 bits, so max is 32767).\nThe largest text length is 36 (in 6 bits, so max is 63).\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkPublicSuffix        19948        19744   -1.02%",
	"cc": [
		"dr.volker.dobler@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dr.volker.dobler@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2012-12-21 10:03:35.391570",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go\nFile publicsuffix/gen.go (right):\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode271\npublicsuffix/gen.go:271: // Nodes is the list of nodes. Each node is represented as a uint32, which\ns/Nodes/nodes/\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode295\npublicsuffix/gen.go:295: // Children is the list of nodes' children, and the wildcard bit. If a node\ns/Children/children/\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode308\npublicsuffix/gen.go:308: for i, c := range childrenEncoding {\nThis range childrenEncoding bugged me several minutes:\nchildrenEncoding has just 2 elements when declared but\ngets filled during printNode which isn't obvious from\nthe functions name.  Maybe filling childrenEncoding\nin the style of line 267 like\n  n.walk(w, constructChildrenEncoding)\nand pulling the childrenEncoding stuff from printNode\nto constructChildrenEncoding might be a bit clearer.\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode309\npublicsuffix/gen.go:309: s, wildcardStr := \"---------------\", ' '\nwildcardStr is actually a char. Maybe just s/Str//\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode400\npublicsuffix/gen.go:400: if len(c.children) != 0 {\nThis blocks function (filling the global childrenEncoding)\ndoesn't belong into a function whose name suggests just\noutput. (See above.)\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/list_test.go\nFile publicsuffix/list_test.go (right):\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/list_test.go#newcode216\npublicsuffix/list_test.go:216: for _, tc := range publicSuffixTestCases {\nJust a remark: publicSuffixTestCases contains lots of\n\"interesting\" test cases, but it might not represent the\naverage use. It is good if looking up www.city.kobe.jp\nis fast, but the more common case will be lookups for\n.com or .org domains.  Maybe the benchmarks should contain\nat least as many simple www.google.com and golang.org\ntest cases as it contains test for fancy rules. Otherwise\na degradation for common cases might be overlooked too\neasy.",
			"disapproval": false,
			"date": "2012-12-21 22:36:54.695380",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Submitting...\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go\nFile publicsuffix/gen.go (right):\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode271\npublicsuffix/gen.go:271: // Nodes is the list of nodes. Each node is represented as a uint32, which\nOn 2012/12/21 22:36:54, volker.dobler wrote:\n> s/Nodes/nodes/\n\nDone.\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode295\npublicsuffix/gen.go:295: // Children is the list of nodes' children, and the wildcard bit. If a node\nOn 2012/12/21 22:36:54, volker.dobler wrote:\n> s/Children/children/\n\nDone.\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode308\npublicsuffix/gen.go:308: for i, c := range childrenEncoding {\nOn 2012/12/21 22:36:54, volker.dobler wrote:\n> This range childrenEncoding bugged me several minutes:\n> childrenEncoding has just 2 elements when declared but\n> gets filled during printNode which isn't obvious from\n> the functions name.  Maybe filling childrenEncoding\n> in the style of line 267 like\n>   n.walk(w, constructChildrenEncoding)\n> and pulling the childrenEncoding stuff from printNode\n> to constructChildrenEncoding might be a bit clearer.\n\nchildrenEncoding is now constructed during assignIndexes.\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode309\npublicsuffix/gen.go:309: s, wildcardStr := \"---------------\", ' '\nOn 2012/12/21 22:36:54, volker.dobler wrote:\n> wildcardStr is actually a char. Maybe just s/Str//\n\nPulled out a helper function.\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/gen.go#newcode400\npublicsuffix/gen.go:400: if len(c.children) != 0 {\nOn 2012/12/21 22:36:54, volker.dobler wrote:\n> This blocks function (filling the global childrenEncoding)\n> doesn't belong into a function whose name suggests just\n> output. (See above.)\n\nDone.\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/list_test.go\nFile publicsuffix/list_test.go (right):\n\nhttps://codereview.appspot.com/6999045/diff/3/publicsuffix/list_test.go#newcode216\npublicsuffix/list_test.go:216: for _, tc := range publicSuffixTestCases {\nOn 2012/12/21 22:36:54, volker.dobler wrote:\n> Just a remark: publicSuffixTestCases contains lots of\n> \"interesting\" test cases, but it might not represent the\n> average use. It is good if looking up http://www.city.kobe.jp\n> is fast, but the more common case will be lookups for\n> .com or .org domains.  Maybe the benchmarks should contain\n> at least as many simple http://www.google.com and http://golang.org\n> test cases as it contains test for fancy rules. Otherwise\n> a degradation for common cases might be overlooked too\n> easy.\n\nYeah, a representative sample would be nice, but I don't have one. This is really just for a sanity check; I don't imagine that this would be the bottleneck of a network-intensive program.",
			"disapproval": false,
			"date": "2012-12-22 01:01:02.212370",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3d9483b02eb3&repo=net ***\n\ngo.net/publicsuffix: tighten the encoding from 8 bytes per node to 4.\n\nOn the full list (running gen.go with -subset=false):\n\nBefore, there were 6086 nodes (at 8 bytes per node) before. After,\nthere were 6086 nodes (at 4 bytes per node) plus 354 children entries\n(at 4 bytes per node). The difference is 22928 bytes.\n\nIn comparison, the (crushed) text is 21082 bytes, and for the curious,\nthe longest label is 36 bytes: \"xn--correios-e-telecomunicaes-ghc29a\".\n\nAll 32 bits in the nodes table are used, but there's wiggle room to\naccomodate future changes to effective_tld_names.dat:\n\nThe largest children index is 353 (in 9 bits, so max is 511).\nThe largest node type is 2 (in 2 bits, so max is 3).\nThe largest text offset is 21080 (in 15 bits, so max is 32767).\nThe largest text length is 36 (in 6 bits, so max is 63).\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkPublicSuffix        19948        19744   -1.02%\n\nR=dr.volker.dobler\nCC=golang-dev\nhttps://codereview.appspot.com/6999045",
			"disapproval": false,
			"date": "2012-12-22 01:11:01.949460",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6999045: go.net/publicsuffix: tighten the encoding from 8 bytes ...",
	"created": "2012-12-21 10:02:25.359490",
	"patchsets": [
		1,
		2001,
		3,
		7001,
		1004
	],
	"modified": "2012-12-22 01:11:05.122570",
	"closed": true,
	"issue": 6999045
}