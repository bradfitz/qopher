{
	"description": "exp/template/html: moved error docs out of package docs onto error codes\n\nThis replaces the errStr & errLine members of context with a single err\n*Error, and introduces a number of const error codes, one per\nescape-time failure mode, that can be separately documented.\n\nThe changes to the error documentation moved from doc.go to error.go\nare cosmetic.",
	"cc": [
		"r@golang.org",
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-15 00:50:33.926359",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode20\nsrc/pkg/exp/template/html/error.go:20: s string\nYou might as well export all the fields: s/s/Description/.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode24\nsrc/pkg/exp/template/html/error.go:24: type ErrorCode uint8\nI'd s/uint8/int/. The space saving isn't important.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode185\nsrc/pkg/exp/template/html/error.go:185: return fmt.Sprintf(\"%s:%d: %s\", e.Name, e.Line, e.s)\nI'd like to see the package name in here somewhere.\nhttp://golang.org/doc/effective_go.html#errors\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/escape.go#newcode35\nsrc/pkg/exp/template/html/escape.go:35: func EscapeSet(s *template.Set, names ...string) (*template.Set, *Error) {\nI'd return an os.Error, not an *Error.\n\nNote that a nil *Error is a non-nil os.Error. With what you have here, people could do\nfunc foo() os.Error {\n  _, err := html.EscapeSet(etc)\n  return err\n}\nand wonder why their os.Error is non-nil.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/escape.go#newcode484\nsrc/pkg/exp/template/html/escape.go:484: func (e *escaper) errorf(f string, k ErrorCode, line int, args ...interface{}) *Error {\nWhy is this a method of escaper? I'd make it a function and move it to error.go.\n\nI'd also order the arguments (e ErrorCode, lint int, format string, args ...interface{}).\n\nWhat you have now looks weird at the call site where the format has one \"%s\", say, but three args after it.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/transition.go\nFile src/pkg/exp/template/html/transition.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/transition.go#newcode210\nsrc/pkg/exp/template/html/transition.go:210: err:   &Error{ErrorCode: ErrSlashAmbig, s: fmt.Sprintf(\"'/' could start div or regexp: %.32q\", s[i:])},\nUse errorf?",
			"disapproval": false,
			"date": "2011-09-15 08:28:42.800693",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go#newcode35\nsrc/pkg/exp/template/html/error.go:35: //   it from filtering.\ni filed a bug with godoc. once it's fixed this comment will appear in godoc output.\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go#newcode62\nsrc/pkg/exp/template/html/error.go:62: //   run-time value of {{.C}}.\ndidn't i have a much shorter version of this? this is too long.\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/escape.go#newcode480\nsrc/pkg/exp/template/html/escape.go:480: args, f = append([]interface{}{e.name, line}, args...), \"%s:%d: \"+f\nyou don't need this; it's easy:\nreturn fmt.Errorf(\"%s:%d: \"+f, e.name, line, args...)",
			"disapproval": false,
			"date": "2011-09-15 01:03:45.005006",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think that the ErrXxx types need to be a non-interface type (i.e. a struct or string), otherwise you can't reliably type switch between them.\n\nSee the coincidentally recent \"question about switch on (type)\" thread on golang-nuts:\nhttp://groups.google.com/group/golang-nuts/browse_thread/thread/b0fe1cc338f4317c\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go#newcode52\nsrc/pkg/exp/template/html/error.go:52: ErrAmbigContext os.Error\nI'm coming in late to this CL, and I don't know how it plays with godoc, but I'd add a blank line afterwards to break up this enormous chunk of text. Similarly after each type below.",
			"disapproval": false,
			"date": "2011-09-15 01:33:31.943663",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/15 01:50:05, nigeltao wrote:\n> One possibility is\n> \n> type Error struct {\n>   ErrorCode ErrorCode\n\nI like this.  Latest snapshot does not have it but will implement.\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go#newcode52\nsrc/pkg/exp/template/html/error.go:52: ErrAmbigContext os.Error\nOn 2011/09/15 01:33:32, nigeltao wrote:\n> I'm coming in late to this CL, and I don't know how it plays with godoc, but I'd\n> add a blank line afterwards to break up this enormous chunk of text. Similarly\n> after each type below.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go#newcode62\nsrc/pkg/exp/template/html/error.go:62: //   run-time value of {{.C}}.\nOn 2011/09/15 01:03:45, r wrote:\n> didn't i have a much shorter version of this? this is too long.\n\nYou did,  I misinterpreted\n\n\"[r: i think this is too much detail. i\u2019ve distilled it up top but left this here for reference\"\n\nand left the bracketed content in.  Removed.\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go#newcode105\nsrc/pkg/exp/template/html/error.go:105: ErrBranchEnd os.Error\nOn 2011/09/15 01:43:11, r wrote:\n> ack! yes. i missed this, conflating these with the JS and CSS things. you can't\n> type switch usefully on interface types. (see my recent blog post on\n> http://golang.org). these need to be concrete types. they can be just strings, as long\n> as they implement String()\n> \n> thinking out loud and maybe stupidly, you could do\n> \n> type errBase string\n> func (e ErrBase) String() string {\n>    return string(e)\n> }\n> \n> and then\n> \n> type ErrBranchEnd struct { errBase }\n> \n> that saves writing out the String method each time, but it's hardly a major\n> saving. they could just be strings too.\n\nI just made them a string.\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/escape.go#newcode480\nsrc/pkg/exp/template/html/escape.go:480: args, f = append([]interface{}{e.name, line}, args...), \"%s:%d: \"+f\nOn 2011/09/15 01:03:45, r wrote:\n> you don't need this; it's easy:\n> return fmt.Errorf(\"%s:%d: \"+f, e.name, line, args...)\n\nThat doesn't seem to work.\n\nescape.go:480: too many arguments in call to fmt.Errorf",
			"disapproval": false,
			"date": "2011-09-15 01:54:43.065798",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/5001/src/pkg/exp/template/html/error.go#newcode105\nsrc/pkg/exp/template/html/error.go:105: ErrBranchEnd os.Error\nack! yes. i missed this, conflating these with the JS and CSS things. you can't type switch usefully on interface types. (see my recent blog post on golang.org). these need to be concrete types. they can be just strings, as long as they implement String()\n\nthinking out loud and maybe stupidly, you could do\n\ntype errBase string\nfunc (e ErrBase) String() string {\n   return string(e)\n}\n\nand then\n\ntype ErrBranchEnd struct { errBase }\n\nthat saves writing out the String method each time, but it's hardly a major saving. they could just be strings too.",
			"disapproval": false,
			"date": "2011-09-15 01:43:11.762183",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "A broader question is why are these errors separate types? It's not like a user of this package is going to do different things depending on whether the error return is an ErrPartialCharset or an ErrPartialEscape. Either way, the template is not HTML-escapable, and the reason why is already captured by err.String().\n\nI think it's perfectly laudable to make the package's error messages consistent, and well documented, but I don't think that that requires a separate Go type for each type of error. Instead, have all of the error messages look like \"htmltemplate: partial charset: foobar\" and have the string \"partial charset\" in the error section of the package documentation.\n\nThis is just my immediate reaction, though. I might need to think a bit more about it.",
			"disapproval": false,
			"date": "2011-09-15 01:44:03.337483",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "One possibility is\n\ntype Error struct {\n  ErrorCode ErrorCode\n  Line      int\n  Detail    string\n}\n\nfunc (e *Error) String() {\n  return fmt.Sprintf(\"htmltemplate: %v at line %d: %s\", e.ErrorCode, e.Line, e.Detail)\n}\n\ntype ErrorCode int\n\nconst (\n  OK ErrorCode = iota\n  ErrAmbiguousContext\n  ErrBranchEnd\n  ErrEndContext\n)\n\nfunc (e ErrorCode) String() {\n  // look up a [...]\n}",
			"disapproval": false,
			"date": "2011-09-15 01:50:05.818350",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/15 01:50:05, nigeltao wrote:\n> One possibility is\n> \n> type Error struct {\n>   ErrorCode ErrorCode\n>   Line      int\n>   Detail    string\n> }\n> \n> func (e *Error) String() {\n>   return fmt.Sprintf(\"htmltemplate: %v at line %d: %s\", e.ErrorCode, e.Line,\n> e.Detail)\n> }\n> \n> type ErrorCode int\n> \n> const (\n>   OK ErrorCode = iota\n>   ErrAmbiguousContext\n>   ErrBranchEnd\n>   ErrEndContext\n> )\n> \n> func (e ErrorCode) String() {\n>   // look up a [...]\n> }\n\nDone.  ErrorCode is called ErrorKind because I saw that name in another package I think.",
			"disapproval": false,
			"date": "2011-09-15 02:17:47.879833",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> Done.  ErrorCode is called ErrorKind because I saw that name in another package\n> I think.\n\ngrep says I was wrong.\nRenamed ErrorKind -> ErrorCode.",
			"disapproval": false,
			"date": "2011-09-15 03:17:38.016713",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/doc.go\nFile src/pkg/exp/template/html/doc.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/doc.go#newcode72\nsrc/pkg/exp/template/html/doc.go:72: Source file error.go contains error types and each type's documentation is\nit's odd to mention a source file here.  maybe just\n\nThe various error conditions are illustrated by an example....\n\nthat's a sufficient cross reference.  (look at the godoc output to see how it stitches together. remember these comments are for people reading godoc more than for people reading the code.)\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode27\nsrc/pkg/exp/template/html/error.go:27: // this package may also fail at runtime, or panic.\ncalls to Escape or EscapeSet may also panic when given certain forms of invalid input, documented below.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode88\nsrc/pkg/exp/template/html/error.go:88: //   Templates that end without closing tags will trigger this warning.\ns/warning/error/\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode112\nsrc/pkg/exp/template/html/error.go:112: //  whole comment as a type string (see below).\ntype string?\nand what does 'below' refer to? don't depend on ordering of output in godoc.",
			"disapproval": false,
			"date": "2011-09-15 13:02:10.245107",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nleaving for nigeltao\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/doc.go\nFile src/pkg/exp/template/html/doc.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/doc.go#newcode73\nsrc/pkg/exp/template/html/doc.go:73: explanation of the problem.\nSee the documentation of ErrorCode for details.\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/doc.go#newcode82\nsrc/pkg/exp/template/html/doc.go:82: \ndelete at least one of these blank lines.\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/error.go#newcode11\nsrc/pkg/exp/template/html/error.go:11: // Error is a problem encountered during template Escaping.\ns/is/describes/ ?",
			"disapproval": false,
			"date": "2011-09-15 19:33:14.366093",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/doc.go\nFile src/pkg/exp/template/html/doc.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/doc.go#newcode72\nsrc/pkg/exp/template/html/doc.go:72: Source file error.go contains error types and each type's documentation is\nOn 2011/09/15 13:02:10, r wrote:\n> it's odd to mention a source file here.  maybe just\n> \n> The various error conditions are illustrated by an example....\n> \n> that's a sufficient cross reference.  (look at the godoc output to see how it\n> stitches together. remember these comments are for people reading godoc more\n> than for people reading the code.)\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode20\nsrc/pkg/exp/template/html/error.go:20: s string\nOn 2011/09/15 08:28:42, nigeltao wrote:\n> You might as well export all the fields: s/s/Description/.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode24\nsrc/pkg/exp/template/html/error.go:24: type ErrorCode uint8\nOn 2011/09/15 08:28:42, nigeltao wrote:\n> I'd s/uint8/int/. The space saving isn't important.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode27\nsrc/pkg/exp/template/html/error.go:27: // this package may also fail at runtime, or panic.\nOn 2011/09/15 13:02:10, r wrote:\n> calls to Escape or EscapeSet may also panic when given certain forms of invalid\n> input, documented below.\n\nRewrote.  Did not use that text as there are no panics left.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode88\nsrc/pkg/exp/template/html/error.go:88: //   Templates that end without closing tags will trigger this warning.\nOn 2011/09/15 13:02:10, r wrote:\n> s/warning/error/\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode112\nsrc/pkg/exp/template/html/error.go:112: //  whole comment as a type string (see below).\nOn 2011/09/15 13:02:10, r wrote:\n> type string?\n> and what does 'below' refer to? don't depend on ordering of output in godoc.\n\nRewrote.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/error.go#newcode185\nsrc/pkg/exp/template/html/error.go:185: return fmt.Sprintf(\"%s:%d: %s\", e.Name, e.Line, e.s)\nOn 2011/09/15 08:28:42, nigeltao wrote:\n> I'd like to see the package name in here somewhere.\n> http://golang.org/doc/effective_go.html#errors\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/escape.go#newcode35\nsrc/pkg/exp/template/html/escape.go:35: func EscapeSet(s *template.Set, names ...string) (*template.Set, *Error) {\nOn 2011/09/15 08:28:42, nigeltao wrote:\n> I'd return an os.Error, not an *Error.\n> \n> Note that a nil *Error is a non-nil os.Error. With what you have here, people\n> could do\n> func foo() os.Error {\n>   _, err := html.EscapeSet(etc)\n>   return err\n> }\n> and wonder why their os.Error is non-nil.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/escape.go#newcode484\nsrc/pkg/exp/template/html/escape.go:484: func (e *escaper) errorf(f string, k ErrorCode, line int, args ...interface{}) *Error {\nOn 2011/09/15 08:28:42, nigeltao wrote:\n> Why is this a method of escaper? I'd make it a function and move it to error.go.\n\nDone.  I originally had it as a method of escaper because escaper was carrying name information but now it uses nothing from escaper.\n\n> I'd also order the arguments (e ErrorCode, lint int, format string, args\n> ...interface{}).\n> \n> What you have now looks weird at the call site where the format has one \"%s\",\n> say, but three args after it.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/transition.go\nFile src/pkg/exp/template/html/transition.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/15003/src/pkg/exp/template/html/transition.go#newcode210\nsrc/pkg/exp/template/html/transition.go:210: err:   &Error{ErrorCode: ErrSlashAmbig, s: fmt.Sprintf(\"'/' could start div or regexp: %.32q\", s[i:])},\nOn 2011/09/15 08:28:42, nigeltao wrote:\n> Use errorf?\n\nDone here and elsewhere within this file.",
			"disapproval": false,
			"date": "2011-09-15 15:59:53.437624",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Incremental diffs at http://codereview.appspot.com/5026041/diff2/11003:28001/src/pkg/exp/template/html/doc.go\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/doc.go\nFile src/pkg/exp/template/html/doc.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/doc.go#newcode73\nsrc/pkg/exp/template/html/doc.go:73: explanation of the problem.\nOn 2011/09/15 19:33:14, r wrote:\n> See the documentation of ErrorCode for details.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/doc.go#newcode82\nsrc/pkg/exp/template/html/doc.go:82: \nOn 2011/09/15 19:33:14, r wrote:\n> delete at least one of these blank lines.\n\nDone.  Only two blank lines before section headers now.\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/11003/src/pkg/exp/template/html/error.go#newcode11\nsrc/pkg/exp/template/html/error.go:11: // Error is a problem encountered during template Escaping.\nOn 2011/09/15 19:33:14, r wrote:\n> s/is/describes/ ?\n\nDone.",
			"disapproval": false,
			"date": "2011-09-15 20:13:49.728160",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5381c9668045 ***\n\nexp/template/html: moved error docs out of package docs onto error codes\n\nThis replaces the errStr & errLine members of context with a single err\n*Error, and introduces a number of const error codes, one per\nescape-time failure mode, that can be separately documented.\n\nThe changes to the error documentation moved from doc.go to error.go\nare cosmetic.\n\nR=r, nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5026041\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go#newcode26\nsrc/pkg/exp/template/html/error.go:26: // We define types for each error that manifests while escaping templates, but\nOn 2011/09/16 00:46:18, nigeltao wrote:\n> s/types/codes/.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go#newcode29\nsrc/pkg/exp/template/html/error.go:29: // Error: \"ZgotmplZ\"\nOn 2011/09/16 00:46:18, nigeltao wrote:\n> This isn't really an error, though, in that html.EscapeSet will return a nil\n> os.Error. Maybe reword this section so that that's clearer. I might take a crack\n> at that in a separate CL.\n\nReworded.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go#newcode143\nsrc/pkg/exp/template/html/error.go:143: // Error: \"unfinished JS regexp charset in ...\"\nOn 2011/09/16 00:46:18, nigeltao wrote:\n> s/Error/ErrPartialCharset/. Similarly at line 151.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/escape.go#newcode292\nsrc/pkg/exp/template/html/escape.go:292: func (e *escaper) join(a, b context, line int, nodeName string) context {\nOn 2011/09/16 00:46:18, nigeltao wrote:\n> join no longer needs to be a method of escaper.\n\nDone.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/escape.go#newcode340\nsrc/pkg/exp/template/html/escape.go:340: c0.err.Description, c0.err.Line = fmt.Sprintf(\"on range loop re-entry: %s\", c0.err.Description), n.Line\nOn 2011/09/16 00:46:18, nigeltao wrote:\n> I'd split these two assignments over two lines.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-16 02:05:40.238388",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"r@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go\nFile src/pkg/exp/template/html/error.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go#newcode26\nsrc/pkg/exp/template/html/error.go:26: // We define types for each error that manifests while escaping templates, but\ns/types/codes/.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go#newcode29\nsrc/pkg/exp/template/html/error.go:29: // Error: \"ZgotmplZ\"\nThis isn't really an error, though, in that html.EscapeSet will return a nil os.Error. Maybe reword this section so that that's clearer. I might take a crack at that in a separate CL.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/error.go#newcode143\nsrc/pkg/exp/template/html/error.go:143: // Error: \"unfinished JS regexp charset in ...\"\ns/Error/ErrPartialCharset/. Similarly at line 151.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/escape.go#newcode292\nsrc/pkg/exp/template/html/escape.go:292: func (e *escaper) join(a, b context, line int, nodeName string) context {\njoin no longer needs to be a method of escaper.\n\nhttp://codereview.appspot.com/5026041/diff/28001/src/pkg/exp/template/html/escape.go#newcode340\nsrc/pkg/exp/template/html/escape.go:340: c0.err.Description, c0.err.Line = fmt.Sprintf(\"on range loop re-entry: %s\", c0.err.Description), n.Line\nI'd split these two assignments over two lines.",
			"disapproval": false,
			"date": "2011-09-16 00:46:18.455780",
			"approval": true
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 5026041: exp/template/html: moved error docs out of package docs...",
	"created": "2011-09-15 00:46:16.838523",
	"patchsets": [
		1,
		2001,
		5001,
		4008,
		16001,
		13002,
		15003,
		15004,
		27001,
		11003,
		28001,
		30002,
		24003,
		6008,
		31002,
		23017
	],
	"modified": "2011-09-16 02:05:41.738197",
	"closed": true,
	"issue": 5026041
}