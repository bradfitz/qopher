{
	"description": "database/sql: Add SetMaxOpenConns(), the chan based alternative\n\nUpdate issue 4805\n\nAdd the ability to set an open connection limit.\nFixed case where the Conn finalCloser was being called with db.mu locked.\nAdded seperate benchmarks for each path for Exec and Query.\nReplaced slice based idle pool with list based idle pool.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.\r\n\r\nWhat's the status on this?\r\n\r\nDo you still want to finish it?  Go 1.2 draws ever nearer and I'd like to\r\nget this in.\r\n\r\n\r\n\r\n\r\nOn Wed, Jul 3, 2013 at 12:30 AM, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n> pkg/database/sql/list.go<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go>\r\n> File src/pkg/database/sql/list.go (right):\r\n>\r\n> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n> pkg/database/sql/list.go#**newcode3<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode3>\r\n> src/pkg/database/sql/list.go:**3: type list struct {\r\n> document what this file and/or this type is.\r\n>\r\n> if it's just a list, the language has slices.  so explain what you're\r\n> trying to implement.  (It's even possible you implemented it correctly,\r\n> but you never say what it is)\r\n>\r\n> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n> pkg/database/sql/list.go#**newcode17<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode17>\r\n> src/pkg/database/sql/list.go:**17: node_data() *listNodeData\r\n> no underscores. nodeData.\r\n>\r\n> https://codereview.appspot.**com/10726044/<https://codereview.appspot.com/10726044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-18 03:50:22.966000",
			"approval": false
		},
		{
			"sender": "Tad.Glines@gmail.com",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go\nFile src/pkg/database/sql/list.go (right):\n\nhttps://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode3\nsrc/pkg/database/sql/list.go:3: type list struct {\nOn 2013/07/02 14:30:20, bradfitz wrote:\n> document what this file and/or this type is.\n> \n> if it's just a list, the language has slices.  so explain what you're trying to\n> implement.  (It's even possible you implemented it correctly, but you never say\n> what it is)\n\nI've added some comments that, I hope, are sufficient.\n\nWhen implementing the connection request queue I wanted the requests to handled in FIFO order. Doing this with a slice would have made the remove operation O(n). I changed freeConn to a list as well so that the connIfFree operation could also be an O(1) instead of O(n) operation.\n\nI could have used containers/list, but by using a composeable listNodeData we save on allocation/garbage collection costs.\n\nhttps://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode17\nsrc/pkg/database/sql/list.go:17: node_data() *listNodeData\nOn 2013/07/02 14:30:20, bradfitz wrote:\n> no underscores. nodeData.\n\nDone",
			"disapproval": false,
			"date": "2013-07-18 15:44:37.781170",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I sympathize with your quest to eliminate garbage and improve performance,\r\nbut can we keep this CL about one thing at a time?\r\n\r\nHow do you feel about getting this in with container/list first, and then\r\ndoing list.go in a separate CL, with its own benchcmp performance numbers\r\nin the CL description?  I would rather ignore all that discussion right now\r\nand only focus on the database/sql issues.\r\n\r\nThanks for continuing to work on this.  I want to get it in.\r\n\r\n\r\n\r\n\r\nOn Thu, Jul 18, 2013 at 8:44 AM, <Tad.Glines@gmail.com> wrote:\r\n\r\n> Reviewers: bradfitz,\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n> pkg/database/sql/list.go<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go>\r\n> File src/pkg/database/sql/list.go (right):\r\n>\r\n> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n> pkg/database/sql/list.go#**newcode3<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode3>\r\n> src/pkg/database/sql/list.go:**3: type list struct {\r\n> On 2013/07/02 14:30:20, bradfitz wrote:\r\n>\r\n>> document what this file and/or this type is.\r\n>>\r\n>\r\n>  if it's just a list, the language has slices.  so explain what you're\r\n>>\r\n> trying to\r\n>\r\n>> implement.  (It's even possible you implemented it correctly, but you\r\n>>\r\n> never say\r\n>\r\n>> what it is)\r\n>>\r\n>\r\n> I've added some comments that, I hope, are sufficient.\r\n>\r\n> When implementing the connection request queue I wanted the requests to\r\n> handled in FIFO order. Doing this with a slice would have made the\r\n> remove operation O(n). I changed freeConn to a list as well so that the\r\n> connIfFree operation could also be an O(1) instead of O(n) operation.\r\n>\r\n> I could have used containers/list, but by using a composeable\r\n> listNodeData we save on allocation/garbage collection costs.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n> pkg/database/sql/list.go#**newcode17<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode17>\r\n> src/pkg/database/sql/list.go:**17: node_data() *listNodeData\r\n> On 2013/07/02 14:30:20, bradfitz wrote:\r\n>\r\n>> no underscores. nodeData.\r\n>>\r\n>\r\n> Done\r\n>\r\n> Description:\r\n> database/sql: Add SetMaxOpenConns(), the chan based alternative\r\n>\r\n> Add the ability to set an open connection limit.\r\n> Fixed case where the Conn finalCloser was being called with db.mu\r\n> locked.\r\n> Added seperate benchmarks for each path for Exec and Query.\r\n> Replaced slice based idle pool with list based idle pool.\r\n>\r\n> Please review this at https://codereview.appspot.**com/10726044/<https://codereview.appspot.com/10726044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/database/sql/fakedb_**test.go\r\n>   A src/pkg/database/sql/list.go\r\n>   A src/pkg/database/sql/list_**test.go\r\n>   M src/pkg/database/sql/sql.go\r\n>   M src/pkg/database/sql/sql_test.**go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-22 20:29:51.978040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, add to this CL's description, on its own line:\r\n\r\nUpdate issue 4805\r\n\r\n\r\n\r\nOn Mon, Jul 22, 2013 at 1:29 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> I sympathize with your quest to eliminate garbage and improve performance,\r\n> but can we keep this CL about one thing at a time?\r\n>\r\n> How do you feel about getting this in with container/list first, and then\r\n> doing list.go in a separate CL, with its own benchcmp performance numbers\r\n> in the CL description?  I would rather ignore all that discussion right now\r\n> and only focus on the database/sql issues.\r\n>\r\n> Thanks for continuing to work on this.  I want to get it in.\r\n>\r\n>\r\n>\r\n>\r\n> On Thu, Jul 18, 2013 at 8:44 AM, <Tad.Glines@gmail.com> wrote:\r\n>\r\n>> Reviewers: bradfitz,\r\n>>\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n>> pkg/database/sql/list.go<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go>\r\n>> File src/pkg/database/sql/list.go (right):\r\n>>\r\n>> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n>> pkg/database/sql/list.go#**newcode3<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode3>\r\n>> src/pkg/database/sql/list.go:**3: type list struct {\r\n>> On 2013/07/02 14:30:20, bradfitz wrote:\r\n>>\r\n>>> document what this file and/or this type is.\r\n>>>\r\n>>\r\n>>  if it's just a list, the language has slices.  so explain what you're\r\n>>>\r\n>> trying to\r\n>>\r\n>>> implement.  (It's even possible you implemented it correctly, but you\r\n>>>\r\n>> never say\r\n>>\r\n>>> what it is)\r\n>>>\r\n>>\r\n>> I've added some comments that, I hope, are sufficient.\r\n>>\r\n>> When implementing the connection request queue I wanted the requests to\r\n>> handled in FIFO order. Doing this with a slice would have made the\r\n>> remove operation O(n). I changed freeConn to a list as well so that the\r\n>> connIfFree operation could also be an O(1) instead of O(n) operation.\r\n>>\r\n>> I could have used containers/list, but by using a composeable\r\n>> listNodeData we save on allocation/garbage collection costs.\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/10726044/diff/3001/src/**\r\n>> pkg/database/sql/list.go#**newcode17<https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode17>\r\n>> src/pkg/database/sql/list.go:**17: node_data() *listNodeData\r\n>> On 2013/07/02 14:30:20, bradfitz wrote:\r\n>>\r\n>>> no underscores. nodeData.\r\n>>>\r\n>>\r\n>> Done\r\n>>\r\n>> Description:\r\n>> database/sql: Add SetMaxOpenConns(), the chan based alternative\r\n>>\r\n>> Add the ability to set an open connection limit.\r\n>> Fixed case where the Conn finalCloser was being called with db.mu\r\n>> locked.\r\n>> Added seperate benchmarks for each path for Exec and Query.\r\n>> Replaced slice based idle pool with list based idle pool.\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/10726044/<https://codereview.appspot.com/10726044/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/database/sql/fakedb_**test.go\r\n>>   A src/pkg/database/sql/list.go\r\n>>   A src/pkg/database/sql/list_**test.go\r\n>>   M src/pkg/database/sql/sql.go\r\n>>   M src/pkg/database/sql/sql_test.**go\r\n>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-22 20:31:30.608760",
			"approval": false
		},
		{
			"sender": "Tad.Glines@gmail.com",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/22 20:31:30, bradfitz wrote:\n> Also, add to this CL's description, on its own line:\n> \n> Update issue 4805\n\nDone.\n\n> On Mon, Jul 22, 2013 at 1:29 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n> \n> > I sympathize with your quest to eliminate garbage and improve performance,\n> > but can we keep this CL about one thing at a time?\n> >\n> > How do you feel about getting this in with container/list first, and then\n> > doing list.go in a separate CL, with its own benchcmp performance numbers\n> > in the CL description?  I would rather ignore all that discussion right now\n> > and only focus on the database/sql issues.\n> >\n> > Thanks for continuing to work on this.  I want to get it in.\n\nDone.",
			"disapproval": false,
			"date": "2013-07-22 21:29:20.068610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode197\nsrc/pkg/database/sql/sql.go:197: freeConn     *list.List\n*list.List // of type *foo\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode198\nsrc/pkg/database/sql/sql.go:198: connRequests *list.List\n*list.List // of type *foo\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode201\nsrc/pkg/database/sql/sql.go:201: openerCh     chan struct{}\nadd a comment above this saying what it's for. who sends and who receives? is it ever closed?\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode226\nsrc/pkg/database/sql/sql.go:226: listElem   *list.Element\nof what? What is its Value interface{} type?\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode414\nsrc/pkg/database/sql/sql.go:414: openerCh: make(chan struct{}, 1000), // This constant needs to be re-considered\nI'd pull the constant out into a named private constant, with a big comment before it. Why does it need to be re-considered? Can it deadlock? etc.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode554\nsrc/pkg/database/sql/sql.go:554: for {\nwhy not just:\n\nfor _ = range db.openerCh {\n    db.openNewConnection()\n}\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode567\nsrc/pkg/database/sql/sql.go:567: var dc *driverConn = nil\ndrop = nil\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode593\nsrc/pkg/database/sql/sql.go:593: ch chan interface{} // takes either a *driverConn or an error\nmake this be a send-only channel:\n\nch chan<- interface{} // takes either a *driverConn or an error\n\nmakes the intention of the type more clear.\n\ncould also just be:\n\ntype connRequest chan<- interface{}\n\nbut struct is fine too.  you wanted fewer allocations, though.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode608\nsrc/pkg/database/sql/sql.go:608: req.ch = make(chan interface{}, 1)\nadd a little comment to explain why this is buffered.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode612\nsrc/pkg/database/sql/sql.go:612: ret, ok := <-req.ch\nhow does this work if the putConnDBLocked is also holding db.mu.Lock while we're holding it here? seems like this starves the goroutine trying to give us the data we asked for?\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode614\nsrc/pkg/database/sql/sql.go:614: return nil, errors.New(\"sql: database is closed\")\nisn't there an errDBClosed variabled? there should be, if not, and use it everywhere.",
			"disapproval": false,
			"date": "2013-07-22 21:48:32.779430",
			"approval": false
		},
		{
			"sender": "Tad.Glines@gmail.com",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode197\nsrc/pkg/database/sql/sql.go:197: freeConn     *list.List\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> *list.List // of type *foo\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode198\nsrc/pkg/database/sql/sql.go:198: connRequests *list.List\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> *list.List // of type *foo\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode201\nsrc/pkg/database/sql/sql.go:201: openerCh     chan struct{}\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> add a comment above this saying what it's for. who sends and who receives? is it\n> ever closed?\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode226\nsrc/pkg/database/sql/sql.go:226: listElem   *list.Element\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> of what? What is its Value interface{} type?\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode414\nsrc/pkg/database/sql/sql.go:414: openerCh: make(chan struct{}, 1000), // This constant needs to be re-considered\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> I'd pull the constant out into a named private constant, with a big comment\n> before it. Why does it need to be re-considered? Can it deadlock? etc.\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode554\nsrc/pkg/database/sql/sql.go:554: for {\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> why not just:\n> \n> for _ = range db.openerCh {\n>     db.openNewConnection()\n> }\n\nRight. I keep forgetting that range ends when the chan is closed.\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode567\nsrc/pkg/database/sql/sql.go:567: var dc *driverConn = nil\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> drop = nil\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode608\nsrc/pkg/database/sql/sql.go:608: req.ch = make(chan interface{}, 1)\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> add a little comment to explain why this is buffered.\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode612\nsrc/pkg/database/sql/sql.go:612: ret, ok := <-req.ch\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> how does this work if the putConnDBLocked is also holding db.mu.Lock while we're\n> holding it here? seems like this starves the goroutine trying to give us the\n> data we asked for?\n\nI'm not sure what you are asking here. The db.mu lock is unlocked before reading from the chan (see previous line).\n\nhttps://codereview.appspot.com/10726044/diff/17001/src/pkg/database/sql/sql.go#newcode614\nsrc/pkg/database/sql/sql.go:614: return nil, errors.New(\"sql: database is closed\")\nOn 2013/07/22 21:48:33, bradfitz wrote:\n> isn't there an errDBClosed variabled? there should be, if not, and use it\n> everywhere.\n\nDone.",
			"disapproval": false,
			"date": "2013-07-22 22:52:01.074470",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looking better.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode197\nsrc/pkg/database/sql/sql.go:197: freeConn     *list.List // or driverConn\n// of *driverConn\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode198\nsrc/pkg/database/sql/sql.go:198: connRequests *list.List // connRequest\n// of connRequest\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode527\nsrc/pkg/database/sql/sql.go:527: // that this instance of *DB can maintain.\ns/this instance of *DB/db/\n\nOr just:\n\n// SetMaxOpenConns sets the maximum number of open connections to the database.\n//\n// If ...\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode531\nsrc/pkg/database/sql/sql.go:531: // MaxOpenConns limit\nend in period\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode575\nsrc/pkg/database/sql/sql.go:575: var dc *driverConn\ncan you move this down to when you actually need it?\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode585\nsrc/pkg/database/sql/sql.go:585: if err == nil {\nmaybe:\n\ndb.pendingOpens--\nif err != nil {\n    db.putConnDBLocked(nil, err)\n    return\n}\ndc := &driverConn{\n   ...\n}\ndb.addDepLocked(dc, dc)\ndb.numOpen++\ndb.putConnDBLocked(dc, nil)\n\n\n?\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode598\nsrc/pkg/database/sql/sql.go:598: // When there are no idle connections available, conn() will create\nDB.conn (drop the parens)\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode600\nsrc/pkg/database/sql/sql.go:600: type connRequest chan interface{} // takes either a *driverConn or an error\nwhy not chan<- interface{} ?\n\nSee http://play.golang.org/p/CplZu95RIQ\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode620\nsrc/pkg/database/sql/sql.go:620: db.mu.Unlock()\nah, I missed this line before. gotcha.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode762\nsrc/pkg/database/sql/sql.go:762: // Satisfy a connRequest or put the driverConn in the idle pool and return true\nWrite this as a complete sentence (with subject \"putConnDBLocked\" first) and mention what dc and err mean and when/whether they can be nil.",
			"disapproval": false,
			"date": "2013-07-23 00:05:19.104190",
			"approval": false
		},
		{
			"sender": "Tad.Glines@gmail.com",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode197\nsrc/pkg/database/sql/sql.go:197: freeConn     *list.List // or driverConn\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> // of *driverConn\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode198\nsrc/pkg/database/sql/sql.go:198: connRequests *list.List // connRequest\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> // of connRequest\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode527\nsrc/pkg/database/sql/sql.go:527: // that this instance of *DB can maintain.\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> s/this instance of *DB/db/\n> \n> Or just:\n> \n> // SetMaxOpenConns sets the maximum number of open connections to the database.\n> //\n> // If ...\n> \n> \n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode531\nsrc/pkg/database/sql/sql.go:531: // MaxOpenConns limit\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> end in period\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode585\nsrc/pkg/database/sql/sql.go:585: if err == nil {\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> maybe:\n> \n> db.pendingOpens--\n> if err != nil {\n>     db.putConnDBLocked(nil, err)\n>     return\n> }\n> dc := &driverConn{\n>    ...\n> }\n> db.addDepLocked(dc, dc)\n> db.numOpen++\n> db.putConnDBLocked(dc, nil)\n> \n> \n> ?\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode598\nsrc/pkg/database/sql/sql.go:598: // When there are no idle connections available, conn() will create\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> DB.conn (drop the parens)\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode600\nsrc/pkg/database/sql/sql.go:600: type connRequest chan interface{} // takes either a *driverConn or an error\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> why not chan<- interface{} ?\n> \n> See http://play.golang.org/p/CplZu95RIQ\n\nDone.\n\nhttps://codereview.appspot.com/10726044/diff/31001/src/pkg/database/sql/sql.go#newcode762\nsrc/pkg/database/sql/sql.go:762: // Satisfy a connRequest or put the driverConn in the idle pool and return true\nOn 2013/07/23 00:05:19, bradfitz wrote:\n> Write this as a complete sentence (with subject \"putConnDBLocked\" first) and\n> mention what dc and err mean and when/whether they can be nil.\n\nDone.",
			"disapproval": false,
			"date": "2013-07-23 01:32:17.861770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL continues to scare me.\n\nI worry that it will be a maintenance nightmare.",
			"disapproval": false,
			"date": "2013-08-02 17:24:27.986650",
			"approval": false
		},
		{
			"sender": "Tad.Glines@gmail.com",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/02 17:24:27, bradfitz wrote:\n> This CL continues to scare me.\n> \n> I worry that it will be a maintenance nightmare.\n\nWhat, specifically, worries you about this CL?\n\nAre there parts of the code that seem difficult to comprehend?\nAre you concerned about some unexpected code interaction or unintended behavioral consequence?\nI can add more comments if needed, though I'm loth to comment that which seems fairly obvious to me.",
			"disapproval": false,
			"date": "2013-08-02 19:33:50.254770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"Tad.Glines@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go\nFile src/pkg/database/sql/list.go (right):\n\nhttps://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode3\nsrc/pkg/database/sql/list.go:3: type list struct {\ndocument what this file and/or this type is.\n\nif it's just a list, the language has slices.  so explain what you're trying to implement.  (It's even possible you implemented it correctly, but you never say what it is)\n\nhttps://codereview.appspot.com/10726044/diff/3001/src/pkg/database/sql/list.go#newcode17\nsrc/pkg/database/sql/list.go:17: node_data() *listNodeData\nno underscores. nodeData.",
			"disapproval": false,
			"date": "2013-07-02 14:30:20.606150",
			"approval": false
		}
	],
	"owner_email": "Tad.Glines@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Tad Glines",
	"subject": "database/sql: Add SetMaxOpenConns(), the chan based alt...",
	"created": "2013-06-28 01:52:00.852390",
	"patchsets": [
		1,
		3001,
		9001,
		17001,
		21001,
		31001,
		38001
	],
	"modified": "2013-08-02 19:33:50.985270",
	"closed": false,
	"issue": 10726044
}