{
	"description": "runtime: fix CPU underutilization\nruntime.newproc/ready are deliberately sloppy about waking new M's,\nthey only ensure that there is at least 1 spinning M.\nCurrently to compensate for that, schedule() checks if the current P\nhas local work and there are no spinning M's, it wakes up another one.\nIt does not work if goroutines do not call schedule.\nWith this change a spinning M wakes up another M when it finds work to do.\nIt's also not ideal, but it fixes the underutilization.\nA proper check would require to know the exact number of runnable G's,\nbut it's too expensive to maintain.\nFixes issue 5586.\nThis is reincarnation of cl/9776044 with the bug fixed.\nThe bug was due to code added after cl/9776044 was created:\nif(tick - (((uint64)tick*0x4325c53fu)>>36)*61 == 0 && runtime\u00b7sched.runqsize > 0) {\n        runtime\u00b7lock(&runtime\u00b7sched);\n        gp = globrunqget(m->p, 1);\n        runtime\u00b7unlock(&runtime\u00b7sched);\n}\nIf M gets gp from global runq here, it does not reset m->spinning.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-28 17:29:20.373720",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10743044/diff/6001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/10743044/diff/6001/src/pkg/runtime/proc.c#newcode1207\nsrc/pkg/runtime/proc.c:1207: resetspinning();\nin the previous version m->spinning was not reset on this path",
			"disapproval": false,
			"date": "2013-06-28 17:29:50.540970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-11 19:50:28.028360",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=417ffa35197c ***\n\nruntime: fix CPU underutilization\nruntime.newproc/ready are deliberately sloppy about waking new M's,\nthey only ensure that there is at least 1 spinning M.\nCurrently to compensate for that, schedule() checks if the current P\nhas local work and there are no spinning M's, it wakes up another one.\nIt does not work if goroutines do not call schedule.\nWith this change a spinning M wakes up another M when it finds work to do.\nIt's also not ideal, but it fixes the underutilization.\nA proper check would require to know the exact number of runnable G's,\nbut it's too expensive to maintain.\nFixes issue 5586.\nThis is reincarnation of cl/9776044 with the bug fixed.\nThe bug was due to code added after cl/9776044 was created:\nif(tick - (((uint64)tick*0x4325c53fu)>>36)*61 == 0 && runtime\u00b7sched.runqsize > 0) {\n        runtime\u00b7lock(&runtime\u00b7sched);\n        gp = globrunqget(m->p, 1);\n        runtime\u00b7unlock(&runtime\u00b7sched);\n}\nIf M gets gp from global runq here, it does not reset m->spinning.\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/10743044\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-07-11 19:57:39.346250",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI. This makes runtime test run longer on my windows/386:\n\nFrom\n\nC:\\>go test runtime -short -timeout=240s -cpu=1,2,4\nok      runtime 36.125s\n\nTo\n\nC:\\>go test runtime -short -timeout=240s -cpu=1,2,4\nok      runtime 47.032s\n\n\nThe test runs on windows/386 builder for too long now (with minimal activity on the system):\n\nc:\\>go test runtime -short -timeout=240s -cpu=1,2,4\nok      runtime 222.492s\n\nwindows/386 builder fails with \"timeout\" on this test now. I see no other way, but to increase timeout in make.bat. I will sent a CL.\n\nAlex",
			"disapproval": false,
			"date": "2013-07-12 02:14:59.873940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dmitriy should be back next week. Maybe he can tell us what's going on.\r\nHow many CPUs do the machines you're using have?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-12 02:20:44.985750",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/12 02:20:44, rsc wrote:\n> Dmitriy should be back next week. Maybe he can tell us what's going on.\n\nShould I create an issue? But I am not sure what to report.\n\n> How many CPUs do the machines you're using have?\n> \n\nMine has 2 CPUs. It is quite beefy machine, but my standarts are low :-).\n\nwindows/386 builder is vm with 1 CPU. It is described here: https://code.google.com/p/go-wiki/wiki/DashboardBuilders\n\nAlex\n\nPS: https://codereview.appspot.com/11064044/ to fix builders.",
			"disapproval": false,
			"date": "2013-07-12 02:24:18.729980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I created issue 5872.\r\n",
			"disapproval": false,
			"date": "2013-07-12 02:30:48.754270",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/12 02:30:48, rsc wrote:\n> I created issue 5872.\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2013-07-12 02:32:01.682460",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10743044: runtime: fix CPU underutilization",
	"created": "2013-06-28 17:00:22.108510",
	"patchsets": [
		1,
		3001,
		6001,
		8001
	],
	"modified": "2013-07-12 02:32:02.163420",
	"closed": false,
	"issue": 10743044
}