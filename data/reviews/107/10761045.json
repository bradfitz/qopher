{
	"description": "reflect: add Value.Slice3 and Value.SetCap methods, to match x[i:j:k]\n\nDesign doc at golang.org/s/go12slice.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"nightlyone@googlemail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-28 23:29:19.192200",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go#newcode1604\nsrc/pkg/reflect/value.go:1604: // It panics if v's Kind is not Array or Slice, or if v is an unaddressable array.\nor if the indexes are out of bounds.\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go#newcode1635\nsrc/pkg/reflect/value.go:1635: // Declare slice so that gc can see the base pointer in it.\ns/gc/garbage collector/ or s/gc/compiler/? i honestly am unsure, although i think it's collector.",
			"disapproval": false,
			"date": "2013-07-01 16:54:46.895570",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Only have feedback about the naming.\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go#newcode1605\nsrc/pkg/reflect/value.go:1605: func (v Value) Slice3(i, j, k int) Value {\nCould we get a better name? e.g. CappedSlice. \n\nSlice3 sounds like SliceEx2: a deduplicated name without adding meaning)",
			"disapproval": false,
			"date": "2013-07-01 20:44:34.515560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go#newcode1604\nsrc/pkg/reflect/value.go:1604: // It panics if v's Kind is not Array or Slice, or if v is an unaddressable array.\nOn 2013/07/01 16:54:47, r wrote:\n> or if the indexes are out of bounds.\n\nDone.\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go#newcode1605\nsrc/pkg/reflect/value.go:1605: func (v Value) Slice3(i, j, k int) Value {\nOn 2013/07/01 20:44:34, ioe wrote:\n> Could we get a better name? e.g. CappedSlice. \n> \n> Slice3 sounds like SliceEx2: a deduplicated name without adding meaning)\n\nIt adds meaning; it's the 3-index form.\n\nhttps://codereview.appspot.com/10761045/diff/7003/src/pkg/reflect/value.go#newcode1635\nsrc/pkg/reflect/value.go:1635: // Declare slice so that gc can see the base pointer in it.\nOn 2013/07/01 16:54:47, r wrote:\n> s/gc/garbage collector/ or s/gc/compiler/? i honestly am unsure, although i\n> think it's collector.\n\nDone.",
			"disapproval": false,
			"date": "2013-07-01 21:24:39.221250",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM as an experiment\n\nno idea why the remaining comment wasn't in the previous mail - i wrote it ages ago\n\nhttps://codereview.appspot.com/10761045/diff/14001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/10761045/diff/14001/src/pkg/reflect/value.go#newcode1549\nsrc/pkg/reflect/value.go:1549: // or if the indices are out of bounds.\ngarner calls \"indices\" pretentious and hifalutin. i tend to agree. my suggestion used indexes. but if you want to stick, i won't resist further.",
			"disapproval": false,
			"date": "2013-07-01 23:53:41.457330",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e3e17bf6b1fc ***\n\nreflect: add Value.Slice3 and Value.SetCap methods, to match x[i:j:k]\n\nDesign doc at golang.org/s/go12slice.\n\nR=golang-dev, r, nightlyone\nCC=golang-dev\nhttps://codereview.appspot.com/10761045",
			"disapproval": false,
			"date": "2013-07-02 00:32:57.376080",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Others settled. I did not. But the spec did, so I guess it's\r\n\"indices\". We're playing by Swiss rules. Apologies for the\r\ndistraction.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-07-02 00:11:55.390980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I prefer indexes too, but I was trying to conform to previous discussions\r\nthat had settled on indices. Will change back to indexes.\r\n",
			"disapproval": false,
			"date": "2013-07-01 23:58:07.592320",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 10761045: reflect: add Value.Slice3 and Value.SetCap methods, to ...",
	"created": "2013-06-28 23:25:59.880930",
	"patchsets": [
		1,
		3001,
		5001,
		7003,
		14001,
		22001
	],
	"modified": "2013-07-02 00:33:00.286020",
	"closed": true,
	"issue": 10761045
}