{
	"description": "runtime: more reliable preemption\r\nCurrently preemption signal g->stackguard0==StackPreempt\r\ncan be lost if it is received when preemption is disabled\r\n(e.g. m->lock!=0). This change duplicates the preemption\r\nsignal in g->preempt and restores g->stackguard0\r\nwhen preemption is enabled.\r\nUpdate issue 543.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-29 17:58:59.076140",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c\nFile src/pkg/runtime/lock_futex.c (right):\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c#newcode103\nsrc/pkg/runtime/lock_futex.c:103: if(g->preempt)  // restore the preemption request in case we've cleared it in newstack\nOn 2013/07/01 21:39:56, rsc wrote:\n> if(m->locks == 0 && g->preempt)\n\nIf we want to restore g->stackguard0 = StackPreempt exactly when preemption is possible then the full condition should be along the lines of:\nif(g->preempt && g->status == Grunning && m->locks == 0 && m->mallocing == 0 && m->gcing == 0)\nI do not think it's worth it. We do not have deep lock/mallocing nesting, so the current check should be a good approximation.",
			"disapproval": false,
			"date": "2013-07-16 17:11:46.378730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/16 17:11:46, dvyukov wrote:\n> https://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c\n> File src/pkg/runtime/lock_futex.c (right):\n> \n> https://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c#newcode103\n> src/pkg/runtime/lock_futex.c:103: if(g->preempt)  // restore the preemption\n> request in case we've cleared it in newstack\n> On 2013/07/01 21:39:56, rsc wrote:\n> > if(m->locks == 0 && g->preempt)\n> \n> If we want to restore g->stackguard0 = StackPreempt exactly when preemption is\n> possible then the full condition should be along the lines of:\n> if(g->preempt && g->status == Grunning && m->locks == 0 && m->mallocing == 0 &&\n> m->gcing == 0)\n> I do not think it's worth it. We do not have deep lock/mallocing nesting, so the\n> current check should be a good approximation.\n\nTypically the preempt is set when only one of those conditions failed. You might as well check the condition you just changed (namely m->locks).",
			"disapproval": false,
			"date": "2013-07-16 17:39:13.347110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-16 17:39:53.925580",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/16 17:39:13, rsc wrote:\n> On 2013/07/16 17:11:46, dvyukov wrote:\n> > https://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c\n> > File src/pkg/runtime/lock_futex.c (right):\n> > \n> >\n> https://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c#newcode103\n> > src/pkg/runtime/lock_futex.c:103: if(g->preempt)  // restore the preemption\n> > request in case we've cleared it in newstack\n> > On 2013/07/01 21:39:56, rsc wrote:\n> > > if(m->locks == 0 && g->preempt)\n> > \n> > If we want to restore g->stackguard0 = StackPreempt exactly when preemption is\n> > possible then the full condition should be along the lines of:\n> > if(g->preempt && g->status == Grunning && m->locks == 0 && m->mallocing == 0\n> &&\n> > m->gcing == 0)\n> > I do not think it's worth it. We do not have deep lock/mallocing nesting, so\n> the\n> > current check should be a good approximation.\n> \n> Typically the preempt is set when only one of those conditions failed. You might\n> as well check the condition you just changed (namely m->locks).\n\ndone\nptal",
			"disapproval": false,
			"date": "2013-07-17 09:34:33.941230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-17 09:34:17.460190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-07-17 16:48:39.937550",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4b1bbdfe7413 ***\n\nruntime: more reliable preemption\nCurrently preemption signal g->stackguard0==StackPreempt\ncan be lost if it is received when preemption is disabled\n(e.g. m->lock!=0). This change duplicates the preemption\nsignal in g->preempt and restores g->stackguard0\nwhen preemption is enabled.\nUpdate issue 543.\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/10792043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-07-17 16:52:40.513600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c\nFile src/pkg/runtime/lock_futex.c (right):\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_futex.c#newcode103\nsrc/pkg/runtime/lock_futex.c:103: if(g->preempt)  // restore the preemption request in case we've cleared it in newstack\nif(m->locks == 0 && g->preempt)\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_sema.c\nFile src/pkg/runtime/lock_sema.c (right):\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/lock_sema.c#newcode116\nsrc/pkg/runtime/lock_sema.c:116: if(g->preempt)  // restore the preemption request in case we've cleared it in newstack\nif(m->locks == 0 && g->preempt)\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/proc.c#newcode297\nsrc/pkg/runtime/proc.c:297: if(g->preempt)  // restore the preemption request in case we've cleared it in newstack\nif(m->locks == 0 && g->preempt)\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/proc.c#newcode479\nsrc/pkg/runtime/proc.c:479: m->locks--;\nif(m->locks == 0 && g->preempt)\n\nhttps://codereview.appspot.com/10792043/diff/6001/src/pkg/runtime/proc.c#newcode1621\nsrc/pkg/runtime/proc.c:1621: if(g->preempt)  // restore the preemption request in case we've cleared it in newstack\nif(m->locks == 0 && g->preempt)",
			"disapproval": false,
			"date": "2013-07-01 21:39:55.877190",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10792043: runtime: more reliable preemption",
	"created": "2013-06-29 17:21:20.415870",
	"patchsets": [
		1,
		3001,
		6001,
		17001,
		20001
	],
	"modified": "2013-08-08 15:16:43.488780",
	"closed": true,
	"issue": 10792043
}