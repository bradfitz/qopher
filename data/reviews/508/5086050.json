{
	"description": "syscall: mark stdin, stdout and stderr as non-inheritable by child process\n\nFixes issue 2250.",
	"cc": [
		"golang-dev@googlegroups.com",
		"hectorchu@gmail.com",
		"vincent.vanackere@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"hectorchu@gmail.com",
				"vincent.vanackere@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5086050/diff/5001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/5086050/diff/5001/src/pkg/syscall/syscall_windows.go#newcode282\nsrc/pkg/syscall/syscall_windows.go:282: h, e := CreateFile(StringToUTF16Ptr(path), access, sharemode, nil, createmode, FILE_ATTRIBUTE_NORMAL, 0)\nWe don't need to remove this, the caller can use O_CLOEXEC if it needs to (which os.OpenFile does).\n\nhttp://codereview.appspot.com/5086050/diff/5001/src/pkg/syscall/syscall_windows.go#newcode425\nsrc/pkg/syscall/syscall_windows.go:425: e := CreatePipe(&r, &w, nil, 0)\nWe don't need to remove this either, the caller can use CloseOnExec if it needs to (which os.Pipe does).",
			"disapproval": false,
			"date": "2011-09-22 13:46:53.559005",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"vincent.vanackere@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, hectorchu@gmail.com (cc: golang-dev@googlegroups.com, vincent.vanackere@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-23 07:54:04.822344",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"hectorchu@gmail.com",
				"vincent.vanackere@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5086050/diff/5001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/5086050/diff/5001/src/pkg/syscall/syscall_windows.go#newcode282\nsrc/pkg/syscall/syscall_windows.go:282: h, e := CreateFile(StringToUTF16Ptr(path), access, sharemode, nil, createmode, FILE_ATTRIBUTE_NORMAL, 0)\nOn 2011/09/22 13:46:53, hector wrote:\n> We don't need to remove this, the caller can use O_CLOEXEC if it needs to (which\n> os.OpenFile does).\n\nPerhaps I am mistaken, but reading comment for os.ProcAttr.Files:\n\n// Files specifies the open files inherited by the new process.  The\n// first three entries correspond to standard input, standard output, and\n// standard error.  An implementation may support additional entries,\n// depending on the underlying operating system.  A nil entry corresponds\n// to that file being closed when the process starts.\n\nMy interpretation for windows is, we must supply at most 3 first file handles and that is it. No?",
			"disapproval": false,
			"date": "2011-09-23 05:46:52.962920",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "It's only to match the default in Unix.  As I said in a previous\nemail, os.Pipe immediately sets it to close-on-exec so the default for\nmost people will be non-inheritable.\n\nOn 23 September 2011 08:39,  <alex.brainman@gmail.com> wrote:\n> On 2011/09/23 07:16:48, hector wrote:\n>>\n>> ... I am suggesting we leave around\n>> this functionality in syscall in case we or others need it in the\n>\n> future.\n>\n> OK. But why did you make CreatePipe handles inheritable by default.\n> Wouldn't we have problems similar to this one?\n>\n> Alex\n>\n> http://codereview.appspot.com/5086050/\n>\n",
			"disapproval": false,
			"date": "2011-09-23 07:52:28.009355",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"hectorchu@gmail.com",
				"vincent.vanackere@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: hectorchu@gmail.com, vincent.vanackere@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-22 09:01:53.133916",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sep 23, 2011 6:46 AM, <alex.brainman@gmail.com> wrote:\n> Perhaps I am mistaken, but reading comment for os.ProcAttr.Files:\n>\n> // Files specifies the open files inherited by the new process.  The\n> // first three entries correspond to standard input, standard output,\n> and\n> // standard error.  An implementation may support additional entries,\n> // depending on the underlying operating system.  A nil entry\n> corresponds\n> // to that file being closed when the process starts.\n>\n> My interpretation for windows is, we must supply at most 3 first file\n> handles and that is it. No?\n\nWindows handle inheritance is more general than just the standard io\nhandles. For example the Microsoft C runtime library uses inherited handles\nto implement file descriptor inheritance. Inherited handles will have the\nsame value in the child as in the parent. I am suggesting we leave around\nthis functionality in syscall in case we or others need it in the future.\n",
			"disapproval": false,
			"date": "2011-09-23 07:16:48.664546",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"hectorchu@gmail.com",
				"vincent.vanackere@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/23 07:16:48, hector wrote:\n> ... I am suggesting we leave around\n> this functionality in syscall in case we or others need it in the future.\n\nOK. But why did you make CreatePipe handles inheritable by default. Wouldn't we have problems similar to this one?\n\nAlex",
			"disapproval": false,
			"date": "2011-09-23 07:39:07.702155",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOn 23 September 2011 08:54,  <alex.brainman@gmail.com> wrote:\n> Hello golang-dev@googlegroups.com, hectorchu@gmail.com (cc:\n> golang-dev@googlegroups.com, vincent.vanackere@gmail.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/5086050/\n>\n",
			"disapproval": false,
			"date": "2011-09-23 07:55:43.321137",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"hectorchu@gmail.com",
				"vincent.vanackere@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=086dc976137c ***\n\nsyscall: mark stdin, stdout and stderr as non-inheritable by child process\n\nFixes issue 2250.\n\nR=golang-dev, hectorchu\nCC=golang-dev, vincent.vanackere\nhttp://codereview.appspot.com/5086050",
			"disapproval": false,
			"date": "2011-09-23 08:16:22.082089",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5086050: syscall: mark stdin, stdout and stderr as non-inheritab...",
	"created": "2011-09-22 08:57:41.588393",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		4004
	],
	"modified": "2011-09-23 08:16:25.543504",
	"closed": true,
	"issue": 5086050
}