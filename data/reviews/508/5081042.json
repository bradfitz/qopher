{
	"description": "strings: add Replacer, NewReplacer\n\nThis is just a new API to do many replacements at once.\n\nWhile the point of this API is to be faster than doing replacements one\nat a time, the implementation in this CL has the optimizations removed\nand may actually be slower.\n\nFuture CLs will bring back & add optimizations.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 20 September 2011 15:27, Russ Cox <rsc@golang.org> wrote:\n> \u00a0 \u00a0 \u00a0 \u00a0func NewReplacer(args ...string) *Replacer\n> \u00a0 \u00a0 \u00a0 \u00a0func Replace(s string) string\n> \u00a0 \u00a0 \u00a0 \u00a0func ReplaceBytes(b []byte) []byte\n> \u00a0 \u00a0 \u00a0 \u00a0func RewriteBytes(b []byte)\n> \u00a0 \u00a0 \u00a0 \u00a0func WriteString(w io.Writer, s string) (n int, err os.Error)\n> \u00a0 \u00a0 \u00a0 \u00a0func WriteBytes(w io.Writer, b []byte) (n int, err os.Error)\n\nwould this be part of the strings package, the bytes package,\nsplit into each, or in its own package?\n",
			"disapproval": false,
			"date": "2011-09-20 14:56:42.183549",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i was looking at ReplaceBytes, WriteBytes, etc which\nare more byte oriented.\n\nthe WriteBytes and WriteString methods make me feel\nslightly uncomfortable, although i can't think of another\nway of nicely optimising the no-replace case, which is\npresumably why they're there.\n\nOn 20 September 2011 16:18, Russ Cox <rsc@golang.org> wrote:\n> On Tue, Sep 20, 2011 at 10:56, roger peppe <rogpeppe@gmail.com> wrote:\n>> would this be part of the strings package, the bytes package,\n>> split into each, or in its own package?\n>\n> strings only.\n> it is a string replacer.\n>\n",
			"disapproval": false,
			"date": "2011-09-20 15:57:22.552628",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 19, 2011 at 4:49 PM, <r@golang.org> wrote:\n\n> there's a lot of stuff here, and it needs to be done for bytes as well.\n> i wonder if it would be better to do it there, and have string wrap it.\n>\n\nMaybe, but I'm skeptical.\n\nThat negates the point of it being for speed, having to do needless copies.\n\n(looks at calendar to decide whether it's been too soon since I last\ngrumbled about string vs []byte....)\n",
			"disapproval": false,
			"date": "2011-09-19 23:56:49.345358",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-19 23:38:50.340128",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 20, 2011 at 7:53 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Tue, Sep 20, 2011 at 10:50, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > How should RewriteBytes works if it doesn't return []byte? What if it\n> needs\n> > to grow?\n>\n> Sorry, I realized after sending that it needed to return []byte\n> and also that in some cases it would still need to reallocate.\n> It's not clear how worthwhile it is.  I'd drop it from this round.\n>\n> In fact I'd drop all the cleverness from this round and just\n> do the simple loop over a list of pairs.  It would be a lot\n> easier to do algorithms in a separate CL.\n>\n\nWorks for me.  Should NewReplacer return an os.Error() then for unsupported\nreplacement pairs?  Or panic?  If the latter, should it be named \"Must\"\nsomehow?\n",
			"disapproval": false,
			"date": "2011-09-20 14:56:57.168031",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 20, 2011 at 10:50, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> How should\u00a0RewriteBytes works if it doesn't return []byte? What if it needs\n> to grow?\n\nSorry, I realized after sending that it needed to return []byte\nand also that in some cases it would still need to reallocate.\nIt's not clear how worthwhile it is.  I'd drop it from this round.\n\nIn fact I'd drop all the cleverness from this round and just\ndo the simple loop over a list of pairs.  It would be a lot\neasier to do algorithms in a separate CL.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-20 14:54:18.304024",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "there's a lot of stuff here, and it needs to be done for bytes as well. i wonder if it would be better to do it there, and have string wrap it.\n\nhttp://codereview.appspot.com/5081042/diff/5001/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5081042/diff/5001/src/pkg/strings/replace.go#newcode25\nsrc/pkg/strings/replace.go:25: anyMultiByte := false\nyou don't need the flag. just return inside the loop and outside\n\nhttp://codereview.appspot.com/5081042/diff/5001/src/pkg/strings/replace.go#newcode42\nsrc/pkg/strings/replace.go:42: //\nd\n\nhttp://codereview.appspot.com/5081042/diff/5001/src/pkg/strings/replace.go#newcode86\nsrc/pkg/strings/replace.go:86: // TODO(bradfitz): this isn't optimized like byteKeyReplace is\ns/like/as/\n\nhttp://codereview.appspot.com/5081042/diff/5001/src/pkg/strings/replace.go#newcode122\nsrc/pkg/strings/replace.go:122: // byteKeyReplace implements Replace for ReplacementMaps which have\ns/which/that/",
			"disapproval": false,
			"date": "2011-09-19 23:49:43.395476",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "the map only needs to exist in one place. strings can have a map that\njust embeds the bytes one. although that dependency arc does not exist\ntoday, i think it's ok.\n\nall the code can be in bytes (so they're methods on ReplacementMap);\nthe strings package can wrap them trivially for clean access. there's\nno extra copying called for.\n\n(also i need to warm to the idea in general;this is a lot of mechanism\nfor something very simple in principle.)\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-20 00:01:32.044484",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "you're right. i'm lacking my first coffee.\n\ni was thinking of just making Replace be a variadic function. even simpler.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-20 14:58:13.414172",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 20 September 2011 17:24, Russ Cox <rsc@golang.org> wrote:\n> On Tue, Sep 20, 2011 at 11:57, roger peppe <rogpeppe@gmail.com> wrote:\n>> the WriteBytes and WriteString methods make me feel\n>> slightly uncomfortable, although i can't think of another\n>> way of nicely optimising the no-replace case, which is\n>> presumably why they're there.\n>\n> they are there so that they can use multiple Write calls\n> and zero allocations.\n\nah, interesting. i'd assumed that they'd each do a single Write.\n",
			"disapproval": false,
			"date": "2011-09-20 16:29:04.130687",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 19, 2011 at 5:01 PM, Rob 'Commander' Pike <r@golang.org> wrote:\n\n> the map only needs to exist in one place. strings can have a map that\n> just embeds the bytes one. although that dependency arc does not exist\n> today, i think it's ok.\n>\n> all the code can be in bytes (so they're methods on ReplacementMap);\n> the strings package can wrap them trivially for clean access. there's\n> no extra copying called for.\n>\n\nOkay.  Considering the pushback I got on\nhttp://codereview.appspot.com/4969049/ (bytes.EqualsString), I would've\nthought bytes/strings mixing was verboten.\n\n\n> (also i need to warm to the idea in general;this is a lot of mechanism\n> for something very simple in principle.)\n>\n\nFWIW, I also tried with both of exp/regexp's Replace*Func but it was very\nmuch slower.  Something like 15000 ns.\n",
			"disapproval": false,
			"date": "2011-09-20 00:06:35.845339",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This is more complex than using strings.Replace\nand yet still not the fastest possible way to write\nthe code (which would be a loop, and preferably something\nthat didn't return a string, like template.HTMLEscape).\nThat is, it's not simplest and not fastest.  That makes\nme wonder where it would make sense to use.\n\nIn http, sanitizeName, sanitizeValue, and WriteSubset\ndon't need this: they should be using strings.Map\ninstead of multiple Replace calls.  I would be interested\nto see a comparison of the speed of strings.Map for\nthose cases vs this code.\n\nThat leaves http.htmlEscape and multipart.escapeQuotes.\nIt's hard to believe that either really needs the speed here,\nso I think the replacement has to compete on simplicity.\nThe current escapeQuotes is (or should be):\n\n\tfunc escapeQuotes(s string) string {\n\t\ts = strings.Replace(s, `\\`, `\\\\`, -1)\n\t\ts = strings.Replace(s, `\"`, `\\\"`, -1)\n\t\treturn s\n\t}\n\nThe replacement is:\n\n\tvar quoteEscapeMap = strings.NewReplacementMap(map[string]string{\n\t\t`\\`: `\\\\`,\n\t\t`\"`: `\\\"`,\n\t})\n\tfunc escapeQuotes(s string) string {\n\t\treturn quoteEscapeMap.Replace(s, -1)\n\t}\n\nSo far, it's not much simpler.  If we could cut it to:\n\n\tvar quoteEscaper = strings.NewReplacer(`\\`, `\\\\`, `\"`, `\\\"`)\n\n\tfunc escapeQuotes(s string) string {\n\t\treturn quoteEscaper.Replace(s)\n\t}\n\nthen I think it's a more compelling story.  Even more\ncompelling would be if the API were:\n\n\tfunc NewReplacer(args ...string) *Replacer\n\tfunc Replace(s string) string\n\tfunc ReplaceBytes(b []byte) []byte\n\tfunc RewriteBytes(b []byte)\n\tfunc WriteString(w io.Writer, s string) (n int, err os.Error)\n\tfunc WriteBytes(w io.Writer, b []byte) (n int, err os.Error)\n\nbecause then you could rewrite template's:\n\n\n\tvar (\n\t\thtmlQuot = []byte(\"&#34;\") // shorter than \"&quot;\"\n\t\thtmlApos = []byte(\"&#39;\") // shorter than \"&apos;\"\n\t\thtmlAmp  = []byte(\"&amp;\")\n\t\thtmlLt   = []byte(\"&lt;\")\n\t\thtmlGt   = []byte(\"&gt;\")\n\t)\n\t\n\tfunc HTMLEscape(w io.Writer, b []byte) {\n\t\tlast := 0\n\t\tfor i, c := range b {\n\t\t\tvar html []byte\n\t\t\tswitch c {\n\t\t\tcase '\"':\n\t\t\t\thtml = htmlQuot\n\t\t\tcase '\\'':\n\t\t\t\thtml = htmlApos\n\t\t\tcase '&':\n\t\t\t\thtml = htmlAmp\n\t\t\tcase '<':\n\t\t\t\thtml = htmlLt\n\t\t\tcase '>':\n\t\t\t\thtml = htmlGt\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tw.Write(b[last:i])\n\t\t\tw.Write(html)\n\t\t\tlast = i + 1\n\t\t}\n\t\tw.Write(b[last:])\n\t}\n\ninto\n\n\tvar htmlEscaper = strings.Replacer(`\"`, `&#34;`, `'`, `&#39;`, `&`,\n`&amp;`, `<`, `&lt;`, `>`, `&gt;`)\n\t\n\tfunc HTMLEscape(w io.Writer, b []byte) {\n\t\thtmlEscaper.WriteBytes(w, b)\n\t}\n\nwithout loss of speed.  If we can get there, then that's interesting.\nCan we get there?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-20 14:27:35.923099",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I like that API proposal.  I should've flagged my CL as \"for discussion\".\n In any case, your proposal is consistent with where I wanted to get to:\n call sites that passed their whole intent down to the strings package where\nthe execution strategy could be optimized better (even if not necessarily\ntoday), rather than callers doing stuff in multiple steps where there's no\nhope of an ideal plan.\n\nHow should RewriteBytes works if it doesn't return []byte? What if it needs\nto grow?\n\nOn Tue, Sep 20, 2011 at 7:27 AM, Russ Cox <rsc@golang.org> wrote:\n\n> This is more complex than using strings.Replace\n> and yet still not the fastest possible way to write\n> the code (which would be a loop, and preferably something\n> that didn't return a string, like template.HTMLEscape).\n> That is, it's not simplest and not fastest.  That makes\n> me wonder where it would make sense to use.\n>\n> In http, sanitizeName, sanitizeValue, and WriteSubset\n> don't need this: they should be using strings.Map\n> instead of multiple Replace calls.  I would be interested\n> to see a comparison of the speed of strings.Map for\n> those cases vs this code.\n>\n> That leaves http.htmlEscape and multipart.escapeQuotes.\n> It's hard to believe that either really needs the speed here,\n> so I think the replacement has to compete on simplicity.\n> The current escapeQuotes is (or should be):\n>\n>        func escapeQuotes(s string) string {\n>                s = strings.Replace(s, `\\`, `\\\\`, -1)\n>                s = strings.Replace(s, `\"`, `\\\"`, -1)\n>                return s\n>        }\n>\n> The replacement is:\n>\n>        var quoteEscapeMap = strings.NewReplacementMap(map[string]string{\n>                `\\`: `\\\\`,\n>                `\"`: `\\\"`,\n>        })\n>        func escapeQuotes(s string) string {\n>                return quoteEscapeMap.Replace(s, -1)\n>        }\n>\n> So far, it's not much simpler.  If we could cut it to:\n>\n>        var quoteEscaper = strings.NewReplacer(`\\`, `\\\\`, `\"`, `\\\"`)\n>\n>        func escapeQuotes(s string) string {\n>                return quoteEscaper.Replace(s)\n>        }\n>\n> then I think it's a more compelling story.  Even more\n> compelling would be if the API were:\n>\n>        func NewReplacer(args ...string) *Replacer\n>        func Replace(s string) string\n>        func ReplaceBytes(b []byte) []byte\n>        func RewriteBytes(b []byte)\n>        func WriteString(w io.Writer, s string) (n int, err os.Error)\n>        func WriteBytes(w io.Writer, b []byte) (n int, err os.Error)\n>\n> because then you could rewrite template's:\n>\n>\n>        var (\n>                htmlQuot = []byte(\"&#34;\") // shorter than \"&quot;\"\n>                htmlApos = []byte(\"&#39;\") // shorter than \"&apos;\"\n>                htmlAmp  = []byte(\"&amp;\")\n>                htmlLt   = []byte(\"&lt;\")\n>                htmlGt   = []byte(\"&gt;\")\n>        )\n>\n>        func HTMLEscape(w io.Writer, b []byte) {\n>                last := 0\n>                for i, c := range b {\n>                        var html []byte\n>                        switch c {\n>                        case '\"':\n>                                html = htmlQuot\n>                        case '\\'':\n>                                html = htmlApos\n>                        case '&':\n>                                html = htmlAmp\n>                        case '<':\n>                                html = htmlLt\n>                        case '>':\n>                                html = htmlGt\n>                        default:\n>                                continue\n>                        }\n>                        w.Write(b[last:i])\n>                        w.Write(html)\n>                        last = i + 1\n>                }\n>                w.Write(b[last:])\n>        }\n>\n> into\n>\n>        var htmlEscaper = strings.Replacer(`\"`, `&#34;`, `'`, `&#39;`, `&`,\n> `&amp;`, `<`, `&lt;`, `>`, `&gt;`)\n>\n>        func HTMLEscape(w io.Writer, b []byte) {\n>                htmlEscaper.WriteBytes(w, b)\n>        }\n>\n> without loss of speed.  If we can get there, then that's interesting.\n> Can we get there?\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-09-20 14:50:48.930685",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "interesting. russ came up with the same API i was about to suggest. it\nloses the ability to store state under a set of substitutions, but at\nleast they can be grouped into a slice and passed with ...\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-20 14:52:20.835627",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 20, 2011 at 7:52 AM, Rob 'Commander' Pike <r@golang.org> wrote:\n\n> interesting. russ came up with the same API i was about to suggest. it\n> loses the ability to store state under a set of substitutions, but at\n> least they can be grouped into a slice and passed with ...\n\n\nWhy can't I store state?\n\nFrom Russ' proposal:\n\nfunc NewReplacer(args ...string) *Replacer\n\nI could do:\n\ntype Replacer struct {\n   ...state...\n}\n",
			"disapproval": false,
			"date": "2011-09-20 14:55:05.736908",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 20, 2011 at 10:56, roger peppe <rogpeppe@gmail.com> wrote:\n> would this be part of the strings package, the bytes package,\n> split into each, or in its own package?\n\nstrings only.\nit is a string replacer.\n",
			"disapproval": false,
			"date": "2011-09-20 15:19:01.219832",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5081042/diff/5003/src/pkg/http/cookie.go\nFile src/pkg/http/cookie.go (right):\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/http/cookie.go#newcode210\nsrc/pkg/http/cookie.go:210: var nameReplacer = strings.NewReplacer(\"\\n\", \"-\", \"\\r\", \"-\")\nI still think these should be using strings.Map.\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/http/header.go\nFile src/pkg/http/header.go (right):\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/http/header.go#newcode50\nsrc/pkg/http/header.go:50: var newlinesToSpaces = strings.NewReplacer(\"\\n\", \" \", \"\\r\", \" \")\nstrings.Map.",
			"disapproval": false,
			"date": "2011-09-20 21:30:50.394147",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Sep 20, 2011 at 11:57, roger peppe <rogpeppe@gmail.com> wrote:\n> the WriteBytes and WriteString methods make me feel\n> slightly uncomfortable, although i can't think of another\n> way of nicely optimising the no-replace case, which is\n> presumably why they're there.\n\nthey are there so that they can use multiple Write calls\nand zero allocations.\n\nruss\n",
			"disapproval": false,
			"date": "2011-09-20 16:24:18.509047",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, rsc@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-20 21:29:09.824377",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5081042/diff/5003/src/pkg/http/cookie.go\nFile src/pkg/http/cookie.go (right):\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/http/cookie.go#newcode210\nsrc/pkg/http/cookie.go:210: var nameReplacer = strings.NewReplacer(\"\\n\", \"-\", \"\\r\", \"-\")\nOn 2011/09/20 21:30:50, rsc wrote:\n> I still think these should be using strings.Map.\n\nI like Replacer here (and below).\n\nstrings.Map is an implementation.\n\nstrings.NewReplacer specifies a goal.\n\nThe returned Replacer can be implemented in terms of Map if that's the best implementation.\n\nIn this case, Replacer can notice that that all the inputs (and outputs!) are single ASCII bytes and avoid anything having to do with runes or even being UTF-8 aware.\n\nUsing strings.Map, you'd have to do at least two passes over the input string to know the final size and fill it, or allocate some slack / use append.  With Replacer, this could be one pass and 1 exactly-sized allocation.",
			"disapproval": false,
			"date": "2011-09-20 21:49:40.053377",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "ping\n\nOn Tue, Sep 20, 2011 at 2:49 PM, <bradfitz@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5081042/diff/5003/src/pkg/**http/cookie.go<http://codereview.appspot.com/5081042/diff/5003/src/pkg/http/cookie.go>\n> File src/pkg/http/cookie.go (right):\n>\n> http://codereview.appspot.com/**5081042/diff/5003/src/pkg/**\n> http/cookie.go#newcode210<http://codereview.appspot.com/5081042/diff/5003/src/pkg/http/cookie.go#newcode210>\n> src/pkg/http/cookie.go:210: var nameReplacer = strings.NewReplacer(\"\\n\",\n> \"-\", \"\\r\", \"-\")\n> On 2011/09/20 21:30:50, rsc wrote:\n>\n>> I still think these should be using strings.Map.\n>>\n>\n> I like Replacer here (and below).\n>\n> strings.Map is an implementation.\n>\n> strings.NewReplacer specifies a goal.\n>\n> The returned Replacer can be implemented in terms of Map if that's the\n> best implementation.\n>\n> In this case, Replacer can notice that that all the inputs (and\n> outputs!) are single ASCII bytes and avoid anything having to do with\n> runes or even being UTF-8 aware.\n>\n> Using strings.Map, you'd have to do at least two passes over the input\n> string to know the final size and fill it, or allocate some slack / use\n> append.  With Replacer, this could be one pass and 1 exactly-sized\n> allocation.\n>\n> http://codereview.appspot.com/**5081042/<http://codereview.appspot.com/5081042/>\n>\n",
			"disapproval": false,
			"date": "2011-09-28 15:42:49.641737",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nPlease revert the uses for now, until it's fast.\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go#newcode28\nsrc/pkg/strings/replace.go:28: // NewReplacer returns a new Replacer from a list of old and new strings.\ns/old and new strings/old, new string pairs.\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go#newcode29\nsrc/pkg/strings/replace.go:29: // Replacements are performed in order, without overlapping matches.\nwe'll need to be more specific about the semantics\nbut it can wait.  i don't have any good sentences now.\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go#newcode32\nsrc/pkg/strings/replace.go:32: panic(\"odd number of elements\")\npanic(\"strings.NewReplacer: odd argument count\")\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go#newcode60\nsrc/pkg/strings/replace.go:60: // WriteString writes s to  w with all replacements performed.\ntwo spaces before w (should be one)",
			"disapproval": false,
			"date": "2011-09-28 16:17:59.308706",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9a44dedca5dd ***\n\nstrings: add Replacer, NewReplacer\n\nThis is just a new API to do many replacements at once.\n\nWhile the point of this API is to be faster than doing replacements one\nat a time, the implementation in this CL has the optimizations removed\nand may actually be slower.\n\nFuture CLs will bring back & add optimizations.\n\nR=r, rsc, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/5081042\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go#newcode28\nsrc/pkg/strings/replace.go:28: // NewReplacer returns a new Replacer from a list of old and new strings.\nOn 2011/09/28 16:17:59, rsc wrote:\n> s/old and new strings/old, new string pairs.\n\nDone.\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go#newcode32\nsrc/pkg/strings/replace.go:32: panic(\"odd number of elements\")\nOn 2011/09/28 16:17:59, rsc wrote:\n> panic(\"strings.NewReplacer: odd argument count\")\n\nDone.\n\nhttp://codereview.appspot.com/5081042/diff/5003/src/pkg/strings/replace.go#newcode60\nsrc/pkg/strings/replace.go:60: // WriteString writes s to  w with all replacements performed.\nOn 2011/09/28 16:17:59, rsc wrote:\n> two spaces before w (should be one)\n\nDone.",
			"disapproval": false,
			"date": "2011-09-28 16:34:31.602808",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5081042: strings: add Replacer, NewReplacer",
	"created": "2011-09-19 23:38:06.156503",
	"patchsets": [
		1,
		2001,
		5001,
		5003,
		21001
	],
	"modified": "2011-09-28 16:34:33.161282",
	"closed": true,
	"issue": 5081042
}