{
	"description": "exp/template/html: allow quotes on either side of conditionals and dynamic HTML names\n\nThis addresses several use cases:\n\n(1) <h{{.HeaderLevel}}> used to build hierarchical documents.\n(2) <input on{{.EventType}}=...> used in widgets.\n(3) <div {{\" dir=ltr\"}}> used to embed bidi-hints.\n\nIt also makes sure that we treat the two templates below the same:\n\n<img src={{if .Avatar}}\"{{.Avatar}}\"{{else}}\"anonymous.png\"{{end}}>\n<img src=\"{{if .Avatar}}{{.Avatar}}{{else}}anonymous.png{{end}}\">\n\nThis splits up tTag into a number of sub-states and adds testcases.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Incremental diffs at http://codereview.appspot.com/5043042/diff2/3:4/src/pkg/exp/template/html/content.go\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/content.go#newcode28\nsrc/pkg/exp/template/html/content.go:28: // for example: dir=\"ltr\".\nOn 2011/09/18 02:42:12, nigeltao wrote:\n> Enclose the example in `` quotes.\n\nDone.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode302\nsrc/pkg/exp/template/html/escape.go:302: // forceEpsilon takes a context and returns the context\nOn 2011/09/18 02:42:12, nigeltao wrote:\n> Unfinished comment. The \"takes a context\" language may or may not read better if\n> this was a method, instead of a function with one arg.\n\nRenamed nudge per your later comment.\n\nIn general, do you prefer methods or functions.  I could change join & nudge to be methods.\n\n// nudge returns the context that would result from following empty string\n// transitions from the input context.\n// For example, parsing:\n//     `<a href=`\n// will end in context{stateBeforeValue, attrURL}, but parsing one extra rune:\n//     `<a href=x`\n// will end in context{stateURL, delimSpaceOrTagEnd, ...}.\n// There are two transitions that happen when the 'x' is seen:\n// (1) Transition from a before value to a start of value state without\n//     consuming any character.\n// (2) Consume 'x' and transition past the first value character.\n// In this case, nudging produces the context after (1) happens.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode358\nsrc/pkg/exp/template/html/escape.go:358: if e.eq(c) {\nThis case is unnecessary.  The nudge below handles it.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode364\nsrc/pkg/exp/template/html/escape.go:364: // This concludes that\nOn 2011/09/18 02:42:12, nigeltao wrote:\n> s/concludes/means/?\n\nDone.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode365\nsrc/pkg/exp/template/html/escape.go:365: //   foo={{if .C}}{{.}}{{end}}\nOn 2011/09/18 02:42:12, nigeltao wrote:\n> Maybe s/foo/<p foo/ to emphasize that this is for a tag attribute.\n\nDone.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape_test.go#newcode38\nsrc/pkg/exp/template/html/escape_test.go:38: tests := []struct {\nOn 2011/09/18 02:42:12, nigeltao wrote:\n> It's outside the scope of this CL, but it occurred to me that it might be\n> worthwhile for these tests to be defined in a \".dat\" file, instead of in Go\n> code, so that it was possible to check that this Go implementation performed\n> identically to a C++ or JavaScript implementation, say. This would be similar to\n> the WebKit HTML parse tests that are copied to\n> $GOROOT/src/pkg/html/testdata/webkit/*.dat.\n> \n> I'm happy to try extracting this myself, but (1) I'll wait while you're still\n> working on adding features / bug fixes, and (2) let me know if you've already\n> got something similar.\n> \n> OTOH, if Go's template syntax isn't exactly the same as e.g. jstemplate's\n> syntax, then I'm not sure if it's worth worrying about for now.\n\nIt would be great maintenance-wise, but every template language I've mucked with has just enough minor syntactic differences that a common test-suite would probably require writing tests in some kind of template language that the testrunner translates into the language under test.",
			"disapproval": false,
			"date": "2011-09-18 20:01:30.952472",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e357d4d799ec ***\n\nexp/template/html: allow quotes on either side of conditionals and dynamic HTML names\n\nThis addresses several use cases:\n\n(1) <h{{.HeaderLevel}}> used to build hierarchical documents.\n(2) <input on{{.EventType}}=...> used in widgets.\n(3) <div {{\" dir=ltr\"}}> used to embed bidi-hints.\n\nIt also makes sure that we treat the two templates below the same:\n\n<img src={{if .Avatar}}\"{{.Avatar}}\"{{else}}\"anonymous.png\"{{end}}>\n<img src=\"{{if .Avatar}}{{.Avatar}}{{else}}anonymous.png{{end}}\">\n\nThis splits up tTag into a number of sub-states and adds testcases.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5043042",
			"disapproval": false,
			"date": "2011-09-19 02:10:20.259519",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-17 02:14:47.917386",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/content.go#newcode28\nsrc/pkg/exp/template/html/content.go:28: // for example: dir=\"ltr\".\nEnclose the example in `` quotes.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode302\nsrc/pkg/exp/template/html/escape.go:302: // forceEpsilon takes a context and returns the context\nUnfinished comment. The \"takes a context\" language may or may not read better if this was a method, instead of a function with one arg.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode358\nsrc/pkg/exp/template/html/escape.go:358: if e.eq(c) {\nWhy isn't this just \"d.eq(c)\", or \"c.eq(d)\"?\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode364\nsrc/pkg/exp/template/html/escape.go:364: // This concludes that\ns/concludes/means/?\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape.go#newcode365\nsrc/pkg/exp/template/html/escape.go:365: //   foo={{if .C}}{{.}}{{end}}\nMaybe s/foo/<p foo/ to emphasize that this is for a tag attribute.\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/3/src/pkg/exp/template/html/escape_test.go#newcode38\nsrc/pkg/exp/template/html/escape_test.go:38: tests := []struct {\nIt's outside the scope of this CL, but it occurred to me that it might be worthwhile for these tests to be defined in a \".dat\" file, instead of in Go code, so that it was possible to check that this Go implementation performed identically to a C++ or JavaScript implementation, say. This would be similar to the WebKit HTML parse tests that are copied to $GOROOT/src/pkg/html/testdata/webkit/*.dat.\n\nI'm happy to try extracting this myself, but (1) I'll wait while you're still working on adding features / bug fixes, and (2) let me know if you've already got something similar.\n\nOTOH, if Go's template syntax isn't exactly the same as e.g. jstemplate's syntax, then I'm not sure if it's worth worrying about for now.",
			"disapproval": false,
			"date": "2011-09-18 02:42:12.867419",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/context.go\nFile src/pkg/exp/template/html/context.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/context.go#newcode315\nsrc/pkg/exp/template/html/context.go:315: return fmt.Sprintf(\"illegal attr %d\", a)\nOn 2011/09/19 01:10:43, nigeltao wrote:\n> I think you need to change the final \"a\" to \"int(a)\". While you're here, please\n> fix for the other types in this file.\n\nDone.\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go#newcode311\nsrc/pkg/exp/template/html/escape.go:311: // (1) Transition from a before value to a start of value state without\nOn 2011/09/19 01:10:43, nigeltao wrote:\n> Maybe put \"\" quotes around \"before value\" and \"start of value\", or add dashes to\n> write it as \"from a before-value to a start-of-value state\".\n\nhyphenated.\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go#newcode361\nsrc/pkg/exp/template/html/escape.go:361: if c.state < b.state {\nOn 2011/09/19 01:10:43, nigeltao wrote:\n> It's odd to compare c to b. Either compare a to b, or compare c to d.\n> \n> Also, please add a little comment on why the swap is needed.\n> \n> As it's evolved, each individual line of this join function still makes sense,\n> but I think I'm losing the overall picture a little.\n\nThe swap is no longer needed.  It thought it was needed to compare stateTag and stateBeforeValue but that's handled by the below.\nI got rid of the swap.\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go#newcode370\nsrc/pkg/exp/template/html/escape.go:370: if c, d := nudge(a), nudge(b); !(c.eq(a) && d.eq(b)) {\nOn 2011/09/19 01:10:43, nigeltao wrote:\n> s/nudge(a)/nudge(c)/ ??\n\nNope, the swap was vestigial.\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape_test.go#newcode450\nsrc/pkg/exp/template/html/escape_test.go:450: `<img on{{\"load\"}}=\"alert({{\"loaded\"}})\">`,\nOn 2011/09/19 01:10:43, nigeltao wrote:\n> Say, do we have a TestErrors test for `<img {{\"onload\"}}={{.X}}`? Escape has to\n> reject this, right?\n\nYep.  And <img {{\"style\"}}>.\nIIRC, those are in the testsuite I'm porting, but are not in this CL.",
			"disapproval": false,
			"date": "2011-09-19 01:53:46.852620",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thinking out loud: \"nudge\" is shorter than \"forceEpsilon\", and might\nwork just as well. Or it might not.\n",
			"disapproval": false,
			"date": "2011-09-18 09:19:01.062038",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nAs for functions vs methods, there's no big difference either way. What you have now reads fine.\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/context.go\nFile src/pkg/exp/template/html/context.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/context.go#newcode315\nsrc/pkg/exp/template/html/context.go:315: return fmt.Sprintf(\"illegal attr %d\", a)\nI think you need to change the final \"a\" to \"int(a)\". While you're here, please fix for the other types in this file.\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go#newcode311\nsrc/pkg/exp/template/html/escape.go:311: // (1) Transition from a before value to a start of value state without\nMaybe put \"\" quotes around \"before value\" and \"start of value\", or add dashes to write it as \"from a before-value to a start-of-value state\".\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go#newcode361\nsrc/pkg/exp/template/html/escape.go:361: if c.state < b.state {\nIt's odd to compare c to b. Either compare a to b, or compare c to d.\n\nAlso, please add a little comment on why the swap is needed.\n\nAs it's evolved, each individual line of this join function still makes sense, but I think I'm losing the overall picture a little.\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape.go#newcode370\nsrc/pkg/exp/template/html/escape.go:370: if c, d := nudge(a), nudge(b); !(c.eq(a) && d.eq(b)) {\ns/nudge(a)/nudge(c)/ ??\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/5043042/diff/4/src/pkg/exp/template/html/escape_test.go#newcode450\nsrc/pkg/exp/template/html/escape_test.go:450: `<img on{{\"load\"}}=\"alert({{\"loaded\"}})\">`,\nSay, do we have a TestErrors test for `<img {{\"onload\"}}={{.X}}`? Escape has to reject this, right?",
			"disapproval": false,
			"date": "2011-09-19 01:10:42.913894",
			"approval": true
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 5043042: exp/template/html: allow quotes on either side of condi...",
	"created": "2011-09-17 02:07:00.474717",
	"patchsets": [
		1,
		2001,
		4001,
		3,
		4,
		6008,
		2009
	],
	"modified": "2011-09-19 02:10:21.261307",
	"closed": true,
	"issue": 5043042
}