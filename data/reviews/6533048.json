{
	"description": "compress/flate: move the history buffer out of the decompressor struct.\n\nI'm not exactly sure why there's a performance gain, but it seems like\nan easy win. Maybe it's a cache line thing. Maybe it's that\nunsafe.Sizeof(decompressor{}) drops to below unmappedzero, so that\ncheckref/checkoffset don't need to insert TESTB instructions. Maybe\nit's less noise for the conservative garbage collector. Maybe it's\nsomething else.\n\ncompress/flate benchmarks:\nBenchmarkDecodeDigitsSpeed1e4          378628       349906   -7.59%\nBenchmarkDecodeDigitsSpeed1e5         3481976      3204898   -7.96%\nBenchmarkDecodeDigitsSpeed1e6        34419500     31750660   -7.75%\nBenchmarkDecodeDigitsDefault1e4        362317       335562   -7.38%\nBenchmarkDecodeDigitsDefault1e5       3290032      3107624   -5.54%\nBenchmarkDecodeDigitsDefault1e6      30542540     28937480   -5.26%\nBenchmarkDecodeDigitsCompress1e4       362803       335158   -7.62%\nBenchmarkDecodeDigitsCompress1e5      3294512      3114526   -5.46%\nBenchmarkDecodeDigitsCompress1e6     30514940     28927090   -5.20%\nBenchmarkDecodeTwainSpeed1e4           412818       389521   -5.64%\nBenchmarkDecodeTwainSpeed1e5          3475780      3288908   -5.38%\nBenchmarkDecodeTwainSpeed1e6         33629640     31931420   -5.05%\nBenchmarkDecodeTwainDefault1e4         369736       348850   -5.65%\nBenchmarkDecodeTwainDefault1e5        2861050      2721383   -4.88%\nBenchmarkDecodeTwainDefault1e6       27120120     25862050   -4.64%\nBenchmarkDecodeTwainCompress1e4        372057       350822   -5.71%\nBenchmarkDecodeTwainCompress1e5       2855109      2718664   -4.78%\nBenchmarkDecodeTwainCompress1e6      26987010     26336030   -2.41%\n\nimage/png benchmarks:\nBenchmarkDecodeGray               1841839      1802251   -2.15%\nBenchmarkDecodeNRGBAGradient      7115318      6933280   -2.56%\nBenchmarkDecodeNRGBAOpaque        6135892      6013284   -2.00%\nBenchmarkDecodePaletted           1153313      1114302   -3.38%\nBenchmarkDecodeRGB                5619404      5511190   -1.93%",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(as an array again)",
			"disapproval": false,
			"date": "2012-09-19 03:00:38.995960",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 19 September 2012 13:00,  <r@golang.org> wrote:\r\n> i'd be curious how it compares if the buffer was the last field of the\r\n> struct\r\n\r\nYeah, I tried that: the speed-up was about half as good (i.e. 2-3%\r\ninstead of 5-7%) as the indirect through a pointer.\r\n",
			"disapproval": false,
			"date": "2012-09-19 03:09:25.470670",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-19 02:56:05.250870",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'd be curious how it compares if the buffer was the last field of the struct",
			"disapproval": false,
			"date": "2012-09-19 03:00:18.503140",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3d7777fe2e8a ***\n\ncompress/flate: move the history buffer out of the decompressor struct.\n\nI'm not exactly sure why there's a performance gain, but it seems like\nan easy win. Maybe it's a cache line thing. Maybe it's that\nunsafe.Sizeof(decompressor{}) drops to below unmappedzero, so that\ncheckref/checkoffset don't need to insert TESTB instructions. Maybe\nit's less noise for the conservative garbage collector. Maybe it's\nsomething else.\n\ncompress/flate benchmarks:\nBenchmarkDecodeDigitsSpeed1e4          378628       349906   -7.59%\nBenchmarkDecodeDigitsSpeed1e5         3481976      3204898   -7.96%\nBenchmarkDecodeDigitsSpeed1e6        34419500     31750660   -7.75%\nBenchmarkDecodeDigitsDefault1e4        362317       335562   -7.38%\nBenchmarkDecodeDigitsDefault1e5       3290032      3107624   -5.54%\nBenchmarkDecodeDigitsDefault1e6      30542540     28937480   -5.26%\nBenchmarkDecodeDigitsCompress1e4       362803       335158   -7.62%\nBenchmarkDecodeDigitsCompress1e5      3294512      3114526   -5.46%\nBenchmarkDecodeDigitsCompress1e6     30514940     28927090   -5.20%\nBenchmarkDecodeTwainSpeed1e4           412818       389521   -5.64%\nBenchmarkDecodeTwainSpeed1e5          3475780      3288908   -5.38%\nBenchmarkDecodeTwainSpeed1e6         33629640     31931420   -5.05%\nBenchmarkDecodeTwainDefault1e4         369736       348850   -5.65%\nBenchmarkDecodeTwainDefault1e5        2861050      2721383   -4.88%\nBenchmarkDecodeTwainDefault1e6       27120120     25862050   -4.64%\nBenchmarkDecodeTwainCompress1e4        372057       350822   -5.71%\nBenchmarkDecodeTwainCompress1e5       2855109      2718664   -4.78%\nBenchmarkDecodeTwainCompress1e6      26987010     26336030   -2.41%\n\nimage/png benchmarks:\nBenchmarkDecodeGray               1841839      1802251   -2.15%\nBenchmarkDecodeNRGBAGradient      7115318      6933280   -2.56%\nBenchmarkDecodeNRGBAOpaque        6135892      6013284   -2.00%\nBenchmarkDecodePaletted           1153313      1114302   -3.38%\nBenchmarkDecodeRGB                5619404      5511190   -1.93%\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6533048",
			"disapproval": false,
			"date": "2012-09-24 07:58:18.863360",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6533048: compress/flate: move the history buffer out of the deco...",
	"created": "2012-09-19 02:55:23.614970",
	"patchsets": [
		1,
		2001,
		4002,
		8001
	],
	"modified": "2012-09-24 07:58:21.050480",
	"closed": true,
	"issue": 6533048
}