{
	"description": "\t\tFix client code to insert spaces into keys per new spec, eliminating\n    condition of leading and trailing spaces that confuse the HTTP\n    header parsing routines.",
	"cc": [
		"rsc@golang.org",
		"ukai@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "wcn@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-07-25 15:00:32.481654",
			"approval": false
		},
		{
			"sender": "wcn@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I think the issues are even more unclear with the websocket header. Since\nthe spec dictates that the entire key has to fit on a single line followed\nby the CRLF, that is providing a contradicting definition on what RFC 2616\nsays is allowed. This could cause problems if the header went through a\nproxy, and the proxy decided to rewrite the header using line continuation.\nThat is allowed within the scope of RFC 2616, but the proxy has no awareness\nof websocket, but it would result in a header that is no longer websocket\ncompliant.\n\n\nOn Mon, Jul 26, 2010 at 6:47 AM, Russ Cox <rsc@golang.org> wrote:\n\n> actually adding ukai this time; not just talk.\n>\n> On Sun, Jul 25, 2010 at 14:46, Russ Cox <rsc@golang.org> wrote:\n> > adding ukai\n> >\n> > On Sun, Jul 25, 2010 at 14:40, Russ Cox <rsc@golang.org> wrote:\n> >> What if key1 or key2 contains a \" character?\n> >> It looks like it can happen: basically every\n> >> printable character except digits and space\n> >> are in the set of possible inserted characters.\n> >\n> > it looks like strconv.Quote will do the right thing:\n> > the only relevant characters in the string are \" and \\\n> > and it will convert them to \\\" and \\\\ as expected by http.\n> > i can't tell from the http rfc (2616) whether getting\n> > \"abc\" and abc should be the same (i.e. whether the\n> > http package should be the one escaping or unescaping\n> > these things) but for now let's assume it is the app's job.\n> >\n> > russ\n> >\n>\n",
			"disapproval": false,
			"date": "2010-07-25 22:19:00.177784",
			"approval": false
		},
		{
			"sender": "wcn@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, ukai (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-30 04:17:53.792186",
			"approval": false
		},
		{
			"sender": "wcn@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-25 15:05:33.991086",
			"approval": false
		},
		{
			"sender": "wcn@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-26 02:00:43.109440",
			"approval": false
		},
		{
			"sender": "ukai@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1669056/diff/15001/16001\nFile src/pkg/websocket/client.go (right):\n\nhttp://codereview.appspot.com/1669056/diff/15001/16001#newcode137\nsrc/pkg/websocket/client.go:137: //     positions.\npositions other than the start or end of the string.\n\nhttp://codereview.appspot.com/1669056/diff/15001/16002\nFile src/pkg/websocket/websocket_test.go (right):\n\nhttp://codereview.appspot.com/1669056/diff/15001/16002#newcode149\nsrc/pkg/websocket/websocket_test.go:149: // The last runs of this create keys with trailing spaces that need to be\n.. trailing spaces that should not be generated by the client (?)",
			"disapproval": false,
			"date": "2010-07-26 05:46:46.802625",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "What if key1 or key2 contains a \" character?\nIt looks like it can happen: basically every\nprintable character except digits and space\nare in the set of possible inserted characters.\n\nYou have to wonder what the websocket\nauthors were taking.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-07-25 21:40:20.190896",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "adding ukai\n\nOn Sun, Jul 25, 2010 at 14:40, Russ Cox <rsc@golang.org> wrote:\n> What if key1 or key2 contains a \" character?\n> It looks like it can happen: basically every\n> printable character except digits and space\n> are in the set of possible inserted characters.\n\nit looks like strconv.Quote will do the right thing:\nthe only relevant characters in the string are \" and \\\nand it will convert them to \\\" and \\\\ as expected by http.\ni can't tell from the http rfc (2616) whether getting\n\"abc\" and abc should be the same (i.e. whether the\nhttp package should be the one escaping or unescaping\nthese things) but for now let's assume it is the app's job.\n\nruss\n",
			"disapproval": false,
			"date": "2010-07-25 21:46:51.463600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "actually adding ukai this time; not just talk.\n\nOn Sun, Jul 25, 2010 at 14:46, Russ Cox <rsc@golang.org> wrote:\n> adding ukai\n>\n> On Sun, Jul 25, 2010 at 14:40, Russ Cox <rsc@golang.org> wrote:\n>> What if key1 or key2 contains a \" character?\n>> It looks like it can happen: basically every\n>> printable character except digits and space\n>> are in the set of possible inserted characters.\n>\n> it looks like strconv.Quote will do the right thing:\n> the only relevant characters in the string are \" and \\\n> and it will convert them to \\\" and \\\\ as expected by http.\n> i can't tell from the http rfc (2616) whether getting\n> \"abc\" and abc should be the same (i.e. whether the\n> http package should be the one escaping or unescaping\n> these things) but for now let's assume it is the app's job.\n>\n> russ\n>\n",
			"disapproval": false,
			"date": "2010-07-25 21:47:09.545530",
			"approval": false
		},
		{
			"sender": "ukai@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks good go me.",
			"disapproval": false,
			"date": "2010-07-26 05:44:43.749349",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM with ukai's suggestions",
			"disapproval": false,
			"date": "2010-07-29 01:27:27.427290",
			"approval": true
		},
		{
			"sender": "wcn@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, ukai (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-29 14:30:35.987388",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1669056/diff/21001/22001\nFile src/pkg/websocket/client.go (right):\n\nhttp://codereview.appspot.com/1669056/diff/21001/22001#newcode128\nsrc/pkg/websocket/client.go:128: //     positions other than the start or end of the string.\ni think you put this comment on the wrong code.\nit belongs on step 22",
			"disapproval": false,
			"date": "2010-07-30 03:39:09.792173",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"wcn@google.com",
				"rsc@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2ccf0549da35 ***\n\nwebsocket: fix bug involving spaces in header keys\n\nR=rsc, ukai\nCC=golang-dev\nhttp://codereview.appspot.com/1669056\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2010-07-30 19:27:05.802345",
			"approval": false
		}
	],
	"owner_email": "wcn@google.com",
	"private": false,
	"base_url": "",
	"owner": "Bill Neubauer",
	"subject": "code review 1669056: \t\tFix client code to insert spaces into keys per new sp...",
	"created": "2010-07-25 14:59:50.748251",
	"patchsets": [
		1,
		2001,
		6001,
		15001,
		21001,
		27001
	],
	"modified": "2010-07-30 19:27:05.802345",
	"closed": false,
	"issue": 1669056
}