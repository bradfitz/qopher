{
	"description": "cmd/go: new cgo build procedure\n   This CL adds a step to the build procedure for cgo programs. It uses 'ld -r'\nto combine all gcc compiled object file and generate a relocatable object file\nfor our ld. Additionally, this linking step will combine some static linking\ngcc library into the relocatable object file, so that we can use libgcc, \nlibmingwex and libmingw32 without problem.\n\n   Fixes issue 3261.\n   Fixes issue 1741.\n   Added a testcase for linking in libgcc.\n\nTODO: \n1. still need to fix the INDIRECT_SYMBOL_LOCAL problem on Darwin/386.\n2. still need to enable the libgcc test on Linux/ARM, because 5l can't deal\nwith thumb libgcc.\n\nTested on Darwin/amd64, Darwin/386, FreeBSD/amd64, FreeBSD/386, Linux/amd64,\nLinux/386, Linux/ARM, Windows/amd64, Windows/386",
	"cc": [
		"iant@golang.org",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"coldredlemur@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM once the prerequisites are settled.\n\nThanks.",
			"disapproval": false,
			"date": "2012-03-16 18:01:20.839884",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-16 10:32:17.412634",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for iant",
			"disapproval": false,
			"date": "2012-03-16 16:25:16.225801",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To be safe, I retested all three CLs on all systems I can access:\n\nOn Darwin/386, I got (but not on Darwin/amd64):\n# ../misc/cgo/test\n# testmain\n/var/tmp/go-build23/_/Users/minux/work/go/go.hg/misc/cgo/test/_test/_/Users/minux/work/go/go.hg/misc/: \nmalformed mach-o file: invalid scattered relocat\nFAIL\t_/Users/minux/work/go/go.hg/misc/cgo/test [build failed]\n\nAlso, some ld warning during make.bash:\n\n# crypto/x509\nld: warning: unexpected dylib (/System/Library/Frameworks//CoreFoundation.framework/CoreFoundation) on link line\nld: warning: unexpected dylib (/System/Library/Frameworks//Security.framework/Security) on link line\n\nI will address these issues before go on.",
			"disapproval": false,
			"date": "2012-04-17 19:15:30.506054",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not a Darwin user.  How would you change the test to avoid the \"scattered relocation\" problem?",
			"disapproval": false,
			"date": "2012-04-19 21:10:17.383944",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/17 19:15:30, minux wrote:\n> To be safe, I retested all three CLs on all systems I can access:\nI've tested on FreeBSD, Linux, Darwin, Windows. Only Darwin/386 fails.\n \n> On Darwin/386, I got (but not on Darwin/amd64):\n> # ../misc/cgo/test\n> # testmain\n> /var/tmp/go-build23/_/Users/minux/work/go/go.hg/misc/cgo/test/_test/_/Users/minux/work/go/go.hg/misc/:\n> \n> malformed mach-o file: invalid scattered relocat\nThis has something to do with INDIRECT_SYMBOL_LOCAL, which is a different\nproblem. I would prefer changing the libgcc test so that it won't involve this\nkind of indirect symbol, and fix this problem in a later CL. What do you think?\n \n> Also, some ld warning during make.bash: \n> # crypto/x509\n> ld: warning: unexpected dylib\n> (/System/Library/Frameworks//CoreFoundation.framework/CoreFoundation) on link\n> line\nwe need to filter '-framework X' on Darwin, this is done.",
			"disapproval": false,
			"date": "2012-04-19 20:52:56.687988",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I changed src/cmd/go/build.go and misc/cgo/test/issue3261.go.\n\nOn 2012/04/19 21:10:17, iant wrote:\n> I'm not a Darwin user.  How would you change the test to avoid the \"scattered\n> relocation\" problem?\nthe INDIRECT_SYMBOL_LOCAL problem only happens when some functions in libgcc\ninvolves some local scoped table.\nI changed to use __clzsi, and I think it could fix the problem.\n(Am I right that we need to call __clzsi directly or gcc might inline it on\narchitectures that support clz instructions? Do you have any suggestions\non which libgcc function to use to avoid any static table on all architectures?)",
			"disapproval": false,
			"date": "2012-04-20 09:21:29.577952",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThe libgcc interface is fixed for a given architecture, but the libgcc code is not.  It is of course possible that any libgcc function may use a static table.  But the problem seems to point to a bug in 8l/6l, and I don't know if we need to worry about that for this CL.\n\n__clzsi does actually a static table on some architectures, but on x86 it uses the bsr or lzcnt instruction.\n\nThere are certainly other libgcc functions that are likely to avoid static tables, e.g., __addvsi3.",
			"disapproval": false,
			"date": "2012-04-20 20:38:48.193055",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-05-03 21:59:24.675467",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This wouldn't help for Windows necessarily, but one thing we have been\r\nconsidering in an attempt to make fancy C objects and especially C++\r\nobjects work well would be to give 6l and 8l a mode where they write a\r\n.o file instead of an executable, and then invoke gcc to link that .o\r\nfile with the various other ELF objects found during the link, instead\r\nof trying to do the linking themselves.  I don't know how much work\r\nthat would entail.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-03 22:01:15.072831",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 4, 2012 at 6:00 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> This wouldn't help for Windows necessarily, but one thing we have been\r\n> considering in an attempt to make fancy C objects and especially C++\r\n> objects work well would be to give 6l and 8l a mode where they write a\r\n> .o file instead of an executable, and then invoke gcc to link that .o\r\n> file with the various other ELF objects found during the link, instead\r\n> of trying to do the linking themselves.  I don't know how much work\r\n> that would entail.\r\n\r\nI think the major linker work lies in generating the required relocations.\r\nLinked by gcc means we will be linked with normal gcc startup routines\r\n(crt0.o\r\nand the like), thus we need to change runtime so that our entry point is\r\nmain().\r\n\r\nThis ability is directly related to issue 256: generating .so from Go code.\r\n",
			"disapproval": false,
			"date": "2012-05-04 17:00:29.036303",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 4, 2012 at 1:00 PM, minux <minux.ma@gmail.com> wrote:\r\n> I think the major linker work lies in generating the required relocations.\r\n> Linked by gcc means we will be linked with normal gcc startup routines\r\n> (crt0.o\r\n> and the like), thus we need to change runtime so that our entry point\u00a0is\r\n> main().\r\n>\r\n> This ability is directly related to issue 256: generating .so from Go code.\r\n\r\nYes and no.  We can generate a .o file instead of a .so file,\r\nand that should be at least a little less work.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-04 17:03:20.596650",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, May 5, 2012 at 1:02 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Fri, May 4, 2012 at 1:00 PM, minux <minux.ma@gmail.com> wrote:\r\n> > I think the major linker work lies in generating the required\r\n> relocations.\r\n> > Linked by gcc means we will be linked with normal gcc startup routines\r\n> > (crt0.o\r\n> > and the like), thus we need to change runtime so that our entry point is\r\n> > main().\r\n> >\r\n> > This ability is directly related to issue 256: generating .so from Go\r\n> code.\r\n>\r\n> Yes and no.  We can generate a .o file instead of a .so file,\r\n> and that should be at least a little less work.\r\n\r\nI will try tackling this.\r\nWe can continue discussion at\r\nhttp://code.google.com/p/go/issues/detail?id=3591.\r\n",
			"disapproval": false,
			"date": "2012-05-04 17:24:05.092833",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 4, 2012 at 1:23 PM, minux <minux.ma@gmail.com> wrote:\r\n> I will try tackling this.\r\n\r\nThanks!\r\n",
			"disapproval": false,
			"date": "2012-05-04 17:25:45.966938",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have a order problem here.\nOnce I submit this CL and its prerequisite, Linux/ARM build will be broken.\nBecause the builder's OS uses thumb libgcc, and cgo doesn't support thumb\nlibrary yet.\n\nI do figure out a workaround, but it must change some part of code that is\nchanged in this CL series. Should I submit these CL first, and then prepare\nthe workaround CL or get the workaround in first and modify again these\nthree CL?",
			"disapproval": false,
			"date": "2012-05-18 22:06:36.986865",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Keeping build green seems preferred.\r\n\r\nI don't want to become a project that accepts red builds as normal.\r\nOn May 18, 2012 3:06 PM, <minux.ma@gmail.com> wrote:\r\n\r\n> I have a order problem here.\r\n> Once I submit this CL and its prerequisite, Linux/ARM build will be\r\n> broken.\r\n> Because the builder's OS uses thumb libgcc, and cgo doesn't support\r\n> thumb\r\n> library yet.\r\n>\r\n> I do figure out a workaround, but it must change some part of code that\r\n> is\r\n> changed in this CL series. Should I submit these CL first, and then\r\n> prepare\r\n> the workaround CL or get the workaround in first and modify again these\r\n> three CL?\r\n>\r\n> http://codereview.appspot.com/**5822049/<http://codereview.appspot.com/5822049/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-18 23:11:41.865639",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 18, 2012 at 6:06 PM,  <minux.ma@gmail.com> wrote:\r\n> Once I submit this CL and its prerequisite, Linux/ARM build will be\r\n> broken.\r\n> Because the builder's OS uses thumb libgcc, and cgo doesn't support\r\n> thumb\r\n> library yet.\r\n>\r\n> I do figure out a workaround, but it must change some part of code that\r\n> is\r\n> changed in this CL series. Should I submit these CL first, and then\r\n> prepare\r\n> the workaround CL or get the workaround in first and modify again these\r\n> three CL?\r\n\r\nIf you have three CLs that will go in one after the other and (say) the middle\r\none breaks the build but the final one fixes it, that's fine with me.\r\n\r\nAnything that keeps the build broken for any period of time is not fine.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-21 17:19:13.466610",
			"approval": false
		},
		{
			"sender": "coldredlemur@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"coldredlemur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch makes the build of the go repository hang at \"net/rpc/jsonrpc\". Top shows two 6l processes at 100% CPU. This is run against changeset 13431:9b455eb64690 and patch set 16. Linux/x64.",
			"disapproval": false,
			"date": "2012-06-06 07:28:33.683556",
			"approval": false
		},
		{
			"sender": "coldredlemur@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"coldredlemur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Using gdb, it seems to be spinning at src/cmd/ld/data.c:1094",
			"disapproval": false,
			"date": "2012-06-06 08:58:36.538354",
			"approval": false
		},
		{
			"sender": "coldredlemur@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"coldredlemur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nevermind - I wasn't on tip. Sorry.",
			"disapproval": false,
			"date": "2012-06-06 09:29:07.823812",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"coldredlemur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5334356f42b3 ***\n\ncmd/go: new cgo build procedure\n   This CL adds a step to the build procedure for cgo programs. It uses 'ld -r'\nto combine all gcc compiled object file and generate a relocatable object file\nfor our ld. Additionally, this linking step will combine some static linking\ngcc library into the relocatable object file, so that we can use libgcc, \nlibmingwex and libmingw32 without problem.\n\n   Fixes issue 3261.\n   Fixes issue 1741.\n   Added a testcase for linking in libgcc.\n\nTODO: \n1. still need to fix the INDIRECT_SYMBOL_LOCAL problem on Darwin/386.\n2. still need to enable the libgcc test on Linux/ARM, because 5l can't deal\nwith thumb libgcc.\n\nTested on Darwin/amd64, Darwin/386, FreeBSD/amd64, FreeBSD/386, Linux/amd64,\nLinux/386, Linux/ARM, Windows/amd64, Windows/386\n\nR=iant, rsc, bradfitz, coldredlemur\nCC=golang-dev\nhttp://codereview.appspot.com/5822049",
			"disapproval": false,
			"date": "2012-08-16 19:43:04.027450",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5822049: cmd/go: new cgo build procedure",
	"created": "2012-03-14 17:39:29.106144",
	"patchsets": [
		1,
		3,
		4001,
		1002,
		7001,
		8001,
		11001,
		11008,
		11009,
		9007,
		16001,
		21001,
		26001,
		26002,
		34001,
		39001,
		56001,
		58007,
		58008,
		58009,
		67001,
		59002,
		59003,
		58010,
		72001,
		62002
	],
	"modified": "2012-08-16 19:43:13.016820",
	"closed": true,
	"issue": 5822049
}