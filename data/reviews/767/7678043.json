{
	"description": "net/http: add additional status codes defined in RFC 6585\n\n428 Precondition Required\n429 Too Many Requests\n431 Request Header Fields Too Large\n511 Network Authentication Required",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-10 03:09:04.045450",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this all done going through standardization?  I see it's still a\r\nproposed standard, not a \"draft standard\" like 2616.\r\n\r\nOnce we add this, we can't remove it, so it'd be a pity if this proposal is\r\nstill in flux.\r\n\r\nI see lots of patches online for other web frameworks and languages,\r\nsuggestion perhaps that this is a done deal, but maybe they don't have as\r\nstrict of API guarantees.  I don't know.\r\n\r\nOn Sat, Mar 9, 2013 at 7:09 PM, <jonathan@titanous.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> net/http: Add additional status codes defined in RFC 6585\r\n>\r\n> 428 Precondition Required\r\n> 429 Too Many Requests\r\n> 431 Request Header Fields Too Large\r\n> 511 Network Authentication Required\r\n>\r\n> Please review this at https://codereview.appspot.**com/7678043/<https://codereview.appspot.com/7678043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/status.go\r\n>\r\n>\r\n> Index: src/pkg/net/http/status.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/status.go\r\n> +++ b/src/pkg/net/http/status.go\r\n> @@ -44,13 +44,17 @@\r\n>         StatusRequestedRangeNotSatisfi**able = 416\r\n>         StatusExpectationFailed            = 417\r\n>         StatusTeapot                       = 418\r\n> +       StatusPreconditionRequired         = 428\r\n> +       StatusTooManyRequests              = 429\r\n> +       StatusRequestHeaderFieldsTooLa**rge  = 431\r\n>\r\n> -       StatusInternalServerError     = 500\r\n> -       StatusNotImplemented          = 501\r\n> -       StatusBadGateway              = 502\r\n> -       StatusServiceUnavailable      = 503\r\n> -       StatusGatewayTimeout          = 504\r\n> -       StatusHTTPVersionNotSupported = 505\r\n> +       StatusInternalServerError           = 500\r\n> +       StatusNotImplemented                = 501\r\n> +       StatusBadGateway                    = 502\r\n> +       StatusServiceUnavailable            = 503\r\n> +       StatusGatewayTimeout                = 504\r\n> +       StatusHTTPVersionNotSupported       = 505\r\n> +       StatusNetworkAuthenticationReq**uired = 511\r\n>  )\r\n>\r\n>  var statusText = map[int]string{\r\n> @@ -92,13 +96,17 @@\r\n>         StatusRequestedRangeNotSatisfi**able: \"Requested Range Not\r\n> Satisfiable\",\r\n>         StatusExpectationFailed:            \"Expectation Failed\",\r\n>         StatusTeapot:                       \"I'm a teapot\",\r\n> +       StatusPreconditionRequired:         \"Precondition Required\",\r\n> +       StatusTooManyRequests:              \"Too Many Requests\",\r\n> +       StatusRequestHeaderFieldsTooLa**rge:  \"Request Header Fields Too\r\n> Large\",\r\n>\r\n> -       StatusInternalServerError:     \"Internal Server Error\",\r\n> -       StatusNotImplemented:          \"Not Implemented\",\r\n> -       StatusBadGateway:              \"Bad Gateway\",\r\n> -       StatusServiceUnavailable:      \"Service Unavailable\",\r\n> -       StatusGatewayTimeout:          \"Gateway Timeout\",\r\n> -       StatusHTTPVersionNotSupported: \"HTTP Version Not Supported\",\r\n> +       StatusInternalServerError:           \"Internal Server Error\",\r\n> +       StatusNotImplemented:                \"Not Implemented\",\r\n> +       StatusBadGateway:                    \"Bad Gateway\",\r\n> +       StatusServiceUnavailable:            \"Service Unavailable\",\r\n> +       StatusGatewayTimeout:                \"Gateway Timeout\",\r\n> +       StatusHTTPVersionNotSupported:       \"HTTP Version Not Supported\",\r\n> +       StatusNetworkAuthenticationReq**uired: \"Network Authentication\r\n> Required\",\r\n>  }\r\n>\r\n>  // StatusText returns a text for the HTTP status code. It returns the\r\n> empty\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-10 15:35:50.779860",
			"approval": false
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/10 15:35:50, bradfitz wrote:\n> Is this all done going through standardization?  I see it's still a\n> proposed standard, not a \"draft standard\" like 2616.\n> \n> Once we add this, we can't remove it, so it'd be a pity if this proposal is\n> still in flux.\n> \n> I see lots of patches online for other web frameworks and languages,\n> suggestion perhaps that this is a done deal, but maybe they don't have as\n> strict of API guarantees.  I don't know.\n\nThe RFC has been untouched for about a year, no errata exist, and I can't find any recent IETF mailing list comments about it. It does seem like a done deal to me.\n\nThat in mind, here's what RFC 2026 has to say about this:\n\n   A Proposed Standard specification is generally stable, has resolved\n   known design choices, is believed to be well-understood, has received\n   significant community review, and appears to enjoy enough community\n   interest to be considered valuable.  However, further experience\n   might result in a change or even retraction of the specification\n   before it advances.\n\nbut it does warn:\n\n   Implementors should treat Proposed Standards as immature\n   specifications.  It is desirable to implement them in order to gain\n   experience and to validate, test, and clarify the specification.\n   However, since the content of Proposed Standards may be changed if\n   problems are found or better solutions are identified, deploying\n   implementations of such standards into a disruption-sensitive\n   environment is not recommended.",
			"disapproval": false,
			"date": "2013-03-10 15:55:19.256310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One might consider the Go 1 API promise as a \"disruption-sensitive\r\nenvironment\".\r\n\r\nConsidering that these are just integers and people can just type the three\r\ndigits in their client applications, I'm inclined to say no for now, moreso\r\ndue to golang.org/s/go11freeze (not that this is prone to breaking\r\nanything, but because we're trying to reduce noise and focus on the finish\r\nline)\r\n\r\nOn Sun, Mar 10, 2013 at 8:55 AM, <jonathan@titanous.com> wrote:\r\n\r\n> On 2013/03/10 15:35:50, bradfitz wrote:\r\n>\r\n>> Is this all done going through standardization?  I see it's still a\r\n>> proposed standard, not a \"draft standard\" like 2616.\r\n>>\r\n>\r\n>  Once we add this, we can't remove it, so it'd be a pity if this\r\n>>\r\n> proposal is\r\n>\r\n>> still in flux.\r\n>>\r\n>\r\n>  I see lots of patches online for other web frameworks and languages,\r\n>> suggestion perhaps that this is a done deal, but maybe they don't have\r\n>>\r\n> as\r\n>\r\n>> strict of API guarantees.  I don't know.\r\n>>\r\n>\r\n> The RFC has been untouched for about a year, no errata exist, and I\r\n> can't find any recent IETF mailing list comments about it. It does seem\r\n> like a done deal to me.\r\n>\r\n> That in mind, here's what RFC 2026 has to say about this:\r\n>\r\n>    A Proposed Standard specification is generally stable, has resolved\r\n>    known design choices, is believed to be well-understood, has received\r\n>    significant community review, and appears to enjoy enough community\r\n>    interest to be considered valuable.  However, further experience\r\n>    might result in a change or even retraction of the specification\r\n>    before it advances.\r\n>\r\n> but it does warn:\r\n>\r\n>    Implementors should treat Proposed Standards as immature\r\n>    specifications.  It is desirable to implement them in order to gain\r\n>    experience and to validate, test, and clarify the specification.\r\n>    However, since the content of Proposed Standards may be changed if\r\n>    problems are found or better solutions are identified, deploying\r\n>    implementations of such standards into a disruption-sensitive\r\n>    environment is not recommended.\r\n>\r\n> https://codereview.appspot.**com/7678043/<https://codereview.appspot.com/7678043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-10 15:59:48.596480",
			"approval": false
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/10 15:59:48, bradfitz wrote:\n> One might consider the Go 1 API promise as a \"disruption-sensitive\n> environment\".\n> \n> Considering that these are just integers and people can just type the three\n> digits in their client applications, I'm inclined to say no for now, moreso\n> due to golang.org/s/go11freeze (not that this is prone to breaking\n> anything, but because we're trying to reduce noise and focus on the finish\n> line)\n\nTotally understandable. I'm currently using a few of these codes in my applications. The name of the code isn't showing up, and there's no way to specify it currently. Should I file an issue about this?\n\n    HTTP/1.1 429 status code 429",
			"disapproval": false,
			"date": "2013-03-10 16:12:23.871470",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 10, 2013 at 9:12 AM, <jonathan@titanous.com> wrote:\r\n\r\n> On 2013/03/10 15:59:48, bradfitz wrote:\r\n>\r\n>> One might consider the Go 1 API promise as a \"disruption-sensitive\r\n>> environment\".\r\n>>\r\n>\r\n>  Considering that these are just integers and people can just type the\r\n>>\r\n> three\r\n>\r\n>> digits in their client applications, I'm inclined to say no for now,\r\n>>\r\n> moreso\r\n>\r\n>> due to golang.org/s/go11freeze (not that this is prone to breaking\r\n>> anything, but because we're trying to reduce noise and focus on the\r\n>>\r\n> finish\r\n>\r\n>> line)\r\n>>\r\n>\r\n> Totally understandable. I'm currently using a few of these codes in my\r\n> applications. The name of the code isn't showing up, and there's no way\r\n> to specify it currently. Should I file an issue about this?\r\n>\r\n>     HTTP/1.1 429 status code 429\r\n>\r\n\r\nHow about this: update this CL and put all the new status codes grouped\r\ntogether with a comment above like,\r\n\r\n  // New HTTP status codes from RFC 6585. Not being exported yet in Go 1.1.\r\n  // See discussion at\r\nhttps://codereview.appspot.**com/7678043/<https://codereview.appspot.com/7678043/>\r\n  statusFoo = 412\r\n  statusBar = 539\r\n\r\n(note lowercase)\r\n\r\nThen make the new map entries lowercase too.  So http.StatusText(429) will\r\nreturn the correct text, but we won't expand the Go 1.1 API yet.\r\n",
			"disapproval": false,
			"date": "2013-03-11 00:44:49.312050",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-11 01:56:26.435170",
			"approval": true
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-11 01:00:15.923820",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=09424e87ff73 ***\n\nnet/http: add additional status codes defined in RFC 6585\n\n428 Precondition Required\n429 Too Many Requests\n431 Request Header Fields Too Large\n511 Network Authentication Required\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7678043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-03-11 14:43:59.481400",
			"approval": false
		}
	],
	"owner_email": "jonathan@titanous.com",
	"private": false,
	"base_url": "",
	"owner": "titanous",
	"subject": "code review 7678043: net/http: add additional status codes defined in RFC 6585",
	"created": "2013-03-10 03:07:40.377870",
	"patchsets": [
		1,
		2001,
		6001,
		14001,
		17001,
		20001
	],
	"modified": "2013-03-11 14:45:02.767810",
	"closed": true,
	"issue": 7678043
}