{
	"description": "exp/html: Convert \\r and \\r\\n to \\n when tokenizing\n\nAlso escape \"\\r\" as \"&#13;\" when rendering HTML.\n\nPass 2 additional tests.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/escape.go\nFile src/pkg/exp/html/escape.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/escape.go#newcode195\nsrc/pkg/exp/html/escape.go:195: const escapedChars = `&'<>\"` + \"\\r\"\nMake the RHS string \"&'<>\\\"\\r\"\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go\nFile src/pkg/exp/html/token.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode701\nsrc/pkg/exp/html/token.go:701: func convertNewlines(s []byte) []byte {\nThis func needs its own test.\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode703\nsrc/pkg/exp/html/token.go:703: if c == '\\r' {\nThere would be less indentation if you re-order your code:\n\nif c != '\\r' {\n  continue\n}\nsrc := i + 1\nif src >= len(s) || s[src] != '\\n' {\n  s[i] = '\\n'\n  continue\n}\ndst := i\nfor src < len(s) {\n  // etc\n}\nreturn s[:dst]\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode709\nsrc/pkg/exp/html/token.go:709: if src < len(s)-1 && s[src+1] == '\\n' {\nChange \"src < len(s)-1\" to \"src+1 < len(s)\".\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode739\nsrc/pkg/exp/html/token.go:739: \nDelete the blank line.",
			"disapproval": false,
			"date": "2012-05-29 06:45:29.275102",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, please \"hg sync\" before you next \"hg upload\", as I've just submitted an exp/html change.",
			"disapproval": false,
			"date": "2012-05-30 03:02:52.312839",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/escape.go\nFile src/pkg/exp/html/escape.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/escape.go#newcode195\nsrc/pkg/exp/html/escape.go:195: const escapedChars = `&'<>\"` + \"\\r\"\nOn 2012/05/29 06:45:29, nigeltao wrote:\n> Make the RHS string \"&'<>\\\"\\r\"\n\nDone.\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go\nFile src/pkg/exp/html/token.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode701\nsrc/pkg/exp/html/token.go:701: func convertNewlines(s []byte) []byte {\nOn 2012/05/29 06:45:29, nigeltao wrote:\n> This func needs its own test.\n\nDone.\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode703\nsrc/pkg/exp/html/token.go:703: if c == '\\r' {\nOn 2012/05/29 06:45:29, nigeltao wrote:\n> There would be less indentation if you re-order your code:\n> \n> if c != '\\r' {\n>   continue\n> }\n> src := i + 1\n> if src >= len(s) || s[src] != '\\n' {\n>   s[i] = '\\n'\n>   continue\n> }\n> dst := i\n> for src < len(s) {\n>   // etc\n> }\n> return s[:dst]\n\nDone.\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode709\nsrc/pkg/exp/html/token.go:709: if src < len(s)-1 && s[src+1] == '\\n' {\nOn 2012/05/29 06:45:29, nigeltao wrote:\n> Change \"src < len(s)-1\" to \"src+1 < len(s)\".\n\nDone.\n\nhttp://codereview.appspot.com/6260046/diff/5001/src/pkg/exp/html/token.go#newcode739\nsrc/pkg/exp/html/token.go:739: \nOn 2012/05/29 06:45:29, nigeltao wrote:\n> Delete the blank line.\n\nDone.",
			"disapproval": false,
			"date": "2012-05-29 15:13:51.582629",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/6260046/diff/8001/src/pkg/exp/html/token_test.go\nFile src/pkg/exp/html/token_test.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/8001/src/pkg/exp/html/token_test.go#newcode593\nsrc/pkg/exp/html/token_test.go:593: var newlineTests = []tokenTest{\nOn 2012/05/30 01:23:50, nigeltao wrote:\n> Please also test these inputs:\n> \"\"\n> \"\\n\"\n> \"\\n\\r\"\n> \"\\r\"\n> \"\\r\\n\"\n> \"\\r\\n\\n\"\n> \"\\r\\n\\r\"\n> \"\\r\\n\\r\\n\"\n> \"\\r\\r\"\n> \"\\r\\r\\n\"\n> \"\\r\\r\\n\\n\"\n> \"\\r\\r\\r\\n\"\n> \"\\r \\n\"  // Note the space.\n> \"xyz\"\n\nDone\n\n> var testCases := []struct{\n>   in, want string\n> }\n\nI used a map, because it makes the code look cleaner (to me, at least). I don't think the indeterminate iteration order should be a problem.",
			"disapproval": false,
			"date": "2012-05-30 04:09:36.436079",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-29 04:27:28.428309",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6260046/diff/8001/src/pkg/exp/html/token_test.go\nFile src/pkg/exp/html/token_test.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/8001/src/pkg/exp/html/token_test.go#newcode593\nsrc/pkg/exp/html/token_test.go:593: var newlineTests = []tokenTest{\nPlease also test these inputs:\n\"\"\n\"\\n\"\n\"\\n\\r\"\n\"\\r\"\n\"\\r\\n\"\n\"\\r\\n\\n\"\n\"\\r\\n\\r\"\n\"\\r\\n\\r\\n\"\n\"\\r\\r\"\n\"\\r\\r\\n\"\n\"\\r\\r\\n\\n\"\n\"\\r\\r\\r\\n\"\n\"\\r \\n\"  // Note the space.\n\"xyz\"\n\nI wouldn't bother with a description for each test. The input (formatted as %q) should be sufficient:\n\nvar testCases := []struct{\n  in, want string\n}{\n  \"\",\n  \"\\n\",\n  // etc.\n}\nfor _, tc := range testCases {\n  if got := string(convertNewLines([]byte(tc.in))); got != test.want {\n    t.Errorf(\"input %q: got %q, want %q\", tc.in, got, tc.want)\n  }\n}",
			"disapproval": false,
			"date": "2012-05-30 01:23:50.022293",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nI'll fix the test placement, and submit.\n\nhttp://codereview.appspot.com/6260046/diff/8001/src/pkg/exp/html/token_test.go\nFile src/pkg/exp/html/token_test.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/8001/src/pkg/exp/html/token_test.go#newcode593\nsrc/pkg/exp/html/token_test.go:593: var newlineTests = []tokenTest{\nOn 2012/05/30 04:09:36, andybalholm wrote:\n> I used a map, because it makes the code look cleaner (to me, at least). I don't\n> think the indeterminate iteration order should be a problem.\n\nNice.\n\nhttp://codereview.appspot.com/6260046/diff/8002/src/pkg/exp/html/token_test.go\nFile src/pkg/exp/html/token_test.go (right):\n\nhttp://codereview.appspot.com/6260046/diff/8002/src/pkg/exp/html/token_test.go#newcode658\nsrc/pkg/exp/html/token_test.go:658: func TestConvertNewlines(t *testing.T) {\nMove the tests up above the benchmarks.",
			"disapproval": false,
			"date": "2012-05-30 05:47:00.839850",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f5bb195f88cf ***\n\nexp/html: Convert \\r and \\r\\n to \\n when tokenizing\n\nAlso escape \"\\r\" as \"&#13;\" when rendering HTML.\n\nPass 2 additional tests.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/6260046\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2012-05-30 05:50:26.456490",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For the record, the before/after benchmarks:\r\n\r\nBenchmarkParser      500       4626146 ns/op      16.90 MB/s\r\nBenchmarkRawLevelTokenizer      2000        894498 ns/op      87.38 MB/s\r\nBenchmarkLowLevelTokenizer      2000       1118470 ns/op      69.88 MB/s\r\nBenchmarkHighLevelTokenizer     1000       2006670 ns/op      38.95 MB/s\r\n\r\nBenchmarkParser      500       4839040 ns/op      16.15 MB/s\r\nBenchmarkRawLevelTokenizer      2000        904150 ns/op      86.45 MB/s\r\nBenchmarkLowLevelTokenizer      2000       1260548 ns/op      62.01 MB/s\r\nBenchmarkHighLevelTokenizer     1000       2175799 ns/op      35.92 MB/s\r\n\r\nPerformance is not the priority at the moment; correctness is. This is\r\njust a data point.\r\n",
			"disapproval": false,
			"date": "2012-05-30 05:53:27.370852",
			"approval": false
		}
	],
	"owner_email": "andybalholm@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andybalholm",
	"subject": "code review 6260046: exp/html: Convert \\r and \\r\\n to \\n when tokenizing",
	"created": "2012-05-29 04:25:54.355447",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		8002
	],
	"modified": "2012-05-30 05:53:27.370852",
	"closed": false,
	"issue": 6260046
}