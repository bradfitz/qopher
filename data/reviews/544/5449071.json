{
	"description": "various: shorten composite literal field values",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"dave@cheney.net",
		"gri@golang.org",
		"bradfitz@golang.org",
		"gustavo@niemeyer.net",
		"r@google.com",
		"adg@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"gri@golang.org",
				"bradfitz@golang.org",
				"gustavo@niemeyer.net",
				"r@google.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-05 19:03:58.108201",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LVGTM\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/ssh/transport.go\nFile src/pkg/exp/ssh/transport.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/ssh/transport.go#newcode224\nsrc/pkg/exp/ssh/transport.go:224: reader: {\nExcellent.",
			"disapproval": false,
			"date": "2011-12-02 20:49:41.409158",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 2, 2011 at 16:23, Robert Griesemer <gri@golang.org> wrote:\n> I may be the only one here, but I am not really liking these changes.\n> I am all for eliminating duplication of the same type name in the\n> slice outside and inside a literal, but these keyed struct fields now\n> become hard to read in my mind. I would not make these changes.\n\nNone of them?\n",
			"disapproval": false,
			"date": "2011-12-02 21:24:48.433834",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"gri@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI.\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/archive/zip/writer.go\nFile src/pkg/archive/zip/writer.go (left):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/archive/zip/writer.go#oldcode35\nsrc/pkg/archive/zip/writer.go:35: return &Writer{countWriter: &countWriter{w: bufio.NewWriter(w)}}\nI'd leave this file alone - no real win\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (left):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/encoding/xml/xml.go#oldcode1039\nsrc/pkg/encoding/xml/xml.go:1039: R16: []unicode.Range16{\nI'd leave this file alone - no real win\n\nthis is useful info and tiny compared to the size of the tables\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/norm/readwriter.go\nFile src/pkg/exp/norm/readwriter.go (left):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/norm/readwriter.go#oldcode67\nsrc/pkg/exp/norm/readwriter.go:67: wr := &normWriter{rb: reorderBuffer{}, w: w}\nI'd leave this file alone - no real win\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/sql/sql.go\nFile src/pkg/exp/sql/sql.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/sql/sql.go#newcode198\nsrc/pkg/exp/sql/sql.go:198: css:   {{ci, si}},\ndefinitively unreadable\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/ssh/transport.go\nFile src/pkg/exp/ssh/transport.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/ssh/transport.go#newcode224\nsrc/pkg/exp/ssh/transport.go:224: reader: {\nno benefit in my mind\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/go/build/build.go\nFile src/pkg/go/build/build.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/go/build/build.go#newcode291\nsrc/pkg/go/build/build.go:291: Args:   {\"mkdir\", \"-p\", name},\nI think these are fine because the elements are basic literals, and so the type of the composite is clear ([]string, or perhaps []interface{}).\n\nBut I see that it's not the case below. I would probably leave the []string.\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/html/parse.go\nFile src/pkg/html/parse.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/html/parse.go#newcode1564\nsrc/pkg/html/parse.go:1564: doc: {\nI'd leave this file alone - no real win\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/html/template/escape.go\nFile src/pkg/html/template/escape.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/html/template/escape.go#newcode320\nsrc/pkg/html/template/escape.go:320: Args:     {parse.NewIdentifier(identifier)},\nI'd leave this file alone - no real win\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/math/big/rat.go\nFile src/pkg/math/big/rat.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/math/big/rat.go#newcode139\nsrc/pkg/math/big/rat.go:139: return &Int{abs: {1}}\nI'd leave this file alone - no real win\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/old/netchan/export.go\nFile src/pkg/old/netchan/export.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/old/netchan/export.go#newcode287\nsrc/pkg/old/netchan/export.go:287: clientSet: {\nI'd leave this file alone - no real win\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/testing/benchmark.go\nFile src/pkg/testing/benchmark.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/testing/benchmark.go#newcode236\nsrc/pkg/testing/benchmark.go:236: b := &B{benchmark: {\"\", f}}\nI'd leave this file alone - no real win\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttp://codereview.appspot.com/5449071/diff/5001/src/pkg/text/template/exec.go#newcode107\nsrc/pkg/text/template/exec.go:107: vars: {{\"$\", value}},\nunreadable",
			"disapproval": false,
			"date": "2011-12-02 23:04:18.187955",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> This new ability allows code to be more concise but not always more readable. I'm bothered by our confusion on its merits.\n\nThe conversation feels somewhat expected so far. I personally can't\nyet distinguish whether it's simply me being used to the status quo.\n\nI wasn't around at the time, but it occurs to me that this is very\nsimilar to implementing inference of typing on return values. I'm sure\nsomeone complained about the code being less readable at the time too.\n\nObserve the difference between:\n\n    x := page.Top()\n\nand:\n\n    Page{\n        Top: {Color: v}\n    }\n\nBoth the lack of information and the availability of hints towards\nwhat's the type, and even the way to figure what the type actually is,\nare very analogous.\n\nAre we uncomfortable simply because we're used to reading more? Is it\nreally a problem to look for the type definition as we do in function\ncalls, when we want to learn about the type?\n\nThen, there are parts of the change that feel like easy wins because\nthere is still duplication of typing involved. E.g.:\n\n    []*Page{{Top: r}, {Top: s}, {Top: t}}\n\nThis feels like an obvious and uncontroversial win.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-03 14:11:13.456507",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I may be the only one here, but I am not really liking these changes.\nI am all for eliminating duplication of the same type name in the\nslice outside and inside a literal, but these keyed struct fields now\nbecome hard to read in my mind. I would not make these changes.\n- gri\n\nOn Fri, Dec 2, 2011 at 12:49 PM,  <dave@cheney.net> wrote:\n> LVGTM\n>\n>\n> http://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/ssh/transport.go\n> File src/pkg/exp/ssh/transport.go (right):\n>\n> http://codereview.appspot.com/5449071/diff/5001/src/pkg/exp/ssh/transport.go#newcode224\n> src/pkg/exp/ssh/transport.go:224: reader: {\n> Excellent.\n>\n> http://codereview.appspot.com/5449071/\n",
			"disapproval": false,
			"date": "2011-12-02 21:23:25.479821",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This new ability allows code to be more concise but not always more readable. I'm bothered by our confusion on its merits.\n\nThe case for eliding types from structure literals is clearly less compelling than for slice and array literals, which is in part why it hasn't been pushed already. We see similar weirdnesses for slices of slices defined by profusions of anonymous braces.\n\nSo, I'm on the fence. On the one hand, concision can be convenient; on the other, it can be obscure. In some cases, such as protocol buffer literals, it could be a real boon, but the cost will always be less comprehensibility for a human reader.\n\nSince this was intended as an experiment and misgivings are arising, I suggest we hold off for now. This sort of change is much harder to undo than to do, and holding off breaks no existing code. If we can find a stylistic convention or principle to guide us on when the readability cost of elision is offset by the code quality, we can revisit.\n\nFurther discussion is certainly welcome; I am just suggesting caution.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-03 05:39:15.398606",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 3 December 2011 16:39, Rob 'Commander' Pike <r@google.com> wrote:\n> This new ability allows code to be more concise but not always more readable. I'm bothered by our confusion on its merits.\n\nMy reservation is that this change introduces another potential style\nquibble. How many times are we going to see either \"you should elide\nthe type here,\" or \"please put the type name here,\" in code reviews?\n\nOne of the things I like about Go is that its syntax is simple so\u00a0that\nit doesn't let you make a lot of choices. This change seems like a\nstep back in that respect.\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-12-03 21:56:59.751776",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 3, 2011, at 1:56 PM, Andrew Gerrand wrote:\n\n> On 3 December 2011 16:39, Rob 'Commander' Pike <r@google.com> wrote:\n>> This new ability allows code to be more concise but not always more readable. I'm bothered by our confusion on its merits.\n> \n> My reservation is that this change introduces another potential style\n> quibble. How many times are we going to see either \"you should elide\n> the type here,\" or \"please put the type name here,\" in code reviews?\n> \n> One of the things I like about Go is that its syntax is simple so that\n> it doesn't let you make a lot of choices. This change seems like a\n> step back in that respect.\n\nAgreed; that's why I said we may need stylistic rules to accept this change.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-03 22:00:08.496485",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-02 20:01:22.592859",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-02 20:47:15.675560",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 2, 2011 at 3:11 PM, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> I've been going through the list too, separating readable from\n> unreadable entries. It seems very clear that there's one specific kind\n> of change that looks consistently bad: the ones involving struct\n> literals with field names. Those are things like:\n>\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 compCount: &countWriter{w: w},\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 compCount: {w: w},\n\n+1\n\nI am wondering if we really should permit this kind of shortcut at all\nnow. As a reader of somebody else's code, I am not convinced of the\nbenefit anymore.\n\n- gri\n",
			"disapproval": false,
			"date": "2011-12-03 01:31:50.029421",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 2, 2011 at 23:31, Robert Griesemer <gri@golang.org> wrote:\n> +1\n>\n> I am wondering if we really should permit this kind of shortcut at all\n> now. As a reader of somebody else's code, I am not convinced of the\n> benefit anymore.\n\nThe only readable cases I've found where this was helpful is when the\nfield name was very close to the actual type name. E.g.:\n\n    URL: {Path: \"/foo\"}\n\nThis is fine. I'm not sure if that would be enough of a benefit to\njustify the bad cases, though. There's certainly a difference between\nreading\n\n    Top: {color: \"red\"},\n\nand\n\n    Top: Banner{color: red},\n\nThe top isn't red.. the banner at the top is red.\n\nAnother problematic one regards the difference between slices and\nstructs. It used to be unambiguous, but now this:\n\n    Top: {\"red\", \"blue\"},\n\ndoesn't make clear if Top is taking struct with two fields, or is a\nslice of strings. This could be relieved a bit by spelling implicit\nslices as []{...} rather than {...}. So, e.g.:\n\n    Top: []{\"red\", \"blue\"},\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-03 02:32:00.222034",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Personally, I like fixing the ones were the type is obvious:\n\n-               Args:   []string{\"mkdir\", \"-p\", name},\n+               Args:   {\"mkdir\", \"-p\", name},\n\nOr the ones where it's either stuttery and/or has really long type names\n(e.g. repeated slices in protos)\n\nBut if it's just one short type name and doesn't stutter, I like the\nreadability of seeing the type.  But I might be more aggressive in eliding\nthem in code I know well.  When reading other people's code, the types\nserve as reminders.  *shrug*\n\n\nOn Fri, Dec 2, 2011 at 1:24 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Fri, Dec 2, 2011 at 16:23, Robert Griesemer <gri@golang.org> wrote:\n> > I may be the only one here, but I am not really liking these changes.\n> > I am all for eliminating duplication of the same type name in the\n> > slice outside and inside a literal, but these keyed struct fields now\n> > become hard to read in my mind. I would not make these changes.\n>\n> None of them?\n>\n",
			"disapproval": false,
			"date": "2011-12-02 21:53:10.595065",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> I may be the only one here, but I am not really liking these changes.\n>> I am all for eliminating duplication of the same type name in the\n>> slice outside and inside a literal, but these keyed struct fields now\n>> become hard to read in my mind. I would not make these changes.\n>\n> None of them?\n\nI've been going through the list too, separating readable from\nunreadable entries. It seems very clear that there's one specific kind\nof change that looks consistently bad: the ones involving struct\nliterals with field names. Those are things like:\n\n-\t\tcompCount: &countWriter{w: w},\n+\t\tcompCount: {w: w},\n\nThe rest looks generally like a good improvement, with few exceptions.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-02 23:11:46.460226",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Another problematic one regards the difference between slices and\n> structs. It used to be unambiguous, but now this:\n\nSorry, I realized this isn't entirely true. We already have the\npossibility of saying:\n\n    type ColorPair []Color\n\nor\n\n    type ColorPair struct{ Fore, Back Color }\n\nWhich means this:\n\n    Top: ColorPair{\"red\", \"blue\"},\n\nis already ambiguous for the first time reader, so the point may be moot.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-03 02:40:44.342260",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5449071: various: shorten composite literal field values",
	"created": "2011-12-02 19:58:06.536842",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2011-12-05 19:03:59.564782",
	"closed": true,
	"issue": 5449071
}