{
	"description": "spec: additional composite literal shortenings per Go 1 plan",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"r@golang.org",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 2, 2011, at 11:07 AM, Russ Cox wrote:\n\n>> http://codereview.appspot.com/5449067/diff/1002/doc/go_spec.html#newcode2124\n>> doc/go_spec.html:2124: but not to unkeyed values.\n>> the term 'keyed' literal does not appear in the spec.\n>> \n>> The same elisions may be applied to struct literal elements, but only if\n>> they are keyed by struct field name <section reference>.\n> \n> It's hard to see in the raw html but the reference\n> would be the current section, since this is the\n> section that describes the key: value form in\n> composite literals.  Rewritten to:\n> \n>    The same elisions may be applied to field values within a struct literal,\n>    but only if the value has a field name key.\n\nLGTM\n\n",
			"disapproval": false,
			"date": "2011-12-02 19:09:06.561469",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cc2107d49e88 ***\n\nspec: additional composite literal shortenings per Go 1 plan\n\nR=golang-dev, gri, r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5449067",
			"disapproval": false,
			"date": "2011-12-02 19:12:59.163145",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-02 18:22:56.788488",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nleaving for r\n\nhttp://codereview.appspot.com/5449067/diff/1002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5449067/diff/1002/doc/go_spec.html#newcode2130\ndoc/go_spec.html:2130: [...]Point{{1.5, -3.5}, {0, 0}}  // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}}\nI'd keep these three comments aligned , maybe even all of them (that way they are a separate \"graphical element\" and the code - which is of primary concern - becomes more visible)",
			"disapproval": false,
			"date": "2011-12-02 18:30:12.148929",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5449067/diff/1002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5449067/diff/1002/doc/go_spec.html#newcode2124\ndoc/go_spec.html:2124: but not to unkeyed values.\nthe term 'keyed' literal does not appear in the spec.\n\nThe same elisions may be applied to struct literal elements, but only if they are keyed by struct field name <section reference>.",
			"disapproval": false,
			"date": "2011-12-02 18:59:15.988324",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> http://codereview.appspot.com/5449067/diff/1002/doc/go_spec.html#newcode2124\n> doc/go_spec.html:2124: but not to unkeyed values.\n> the term 'keyed' literal does not appear in the spec.\n>\n> The same elisions may be applied to struct literal elements, but only if\n> they are keyed by struct field name <section reference>.\n\nIt's hard to see in the raw html but the reference\nwould be the current section, since this is the\nsection that describes the key: value form in\ncomposite literals.  Rewritten to:\n\n    The same elisions may be applied to field values within a struct literal,\n    but only if the value has a field name key.\n\n?\n",
			"disapproval": false,
			"date": "2011-12-02 19:07:11.827693",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5449067: spec: additional composite literal shortenings per Go 1 plan",
	"created": "2011-12-02 18:22:39.236676",
	"patchsets": [
		1,
		2001,
		1002,
		1004,
		1005
	],
	"modified": "2011-12-02 19:13:00.627602",
	"closed": true,
	"issue": 5449067
}