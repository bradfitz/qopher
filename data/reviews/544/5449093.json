{
	"description": "strconv: 34% to 63% faster conversions\n\n(Note that the Int and Uint benchmarks use different test sets\nand thus cannot be compared against each other. Int and Uint\nconversions are approximately the same speed).\n\nBefore (best of 3 runs):\nstrconv_test.BenchmarkFormatInt    100000    15636 ns/op\nstrconv_test.BenchmarkAppendInt    100000    18930 ns/op\nstrconv_test.BenchmarkFormatUint   500000     4392 ns/op\nstrconv_test.BenchmarkAppendUint   500000     5152 ns/op\n\nAfter (best of 3 runs):\n\nstrconv_test.BenchmarkFormatInt    200000    10070 ns/op (-36%)\nstrconv_test.BenchmarkAppendInt    200000     7097 ns/op (-63%)\nstrconv_test.BenchmarkFormatUint  1000000     2893 ns/op (-34%)\nstrconv_test.BenchmarkAppendUint   500000     2462 ns/op (-52%)",
	"cc": [
		"r@google.com",
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-06 13:52:10.612081",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-05 21:55:18.092874",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa.go#newcode48\nsrc/pkg/strconv/itoa.go:48: func formatBits(dst []byte, u uint64, base int, signed, append_ bool) (d []byte, s string) {\nthis is such a strange and complex signature it deserves a comment\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa.go#newcode82\nsrc/pkg/strconv/itoa.go:82: // base is power of 2: use shift and masks instead of / and %\ns/shift/&s/",
			"disapproval": false,
			"date": "2011-12-05 23:38:51.835179",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go\nFile src/pkg/strconv/itoa_test.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go#newcode138\nsrc/pkg/strconv/itoa_test.go:138: var dst []byte\nOn 2011/12/05 22:50:32, rsc wrote:\n> Even better, move \n> \n> dst := make([]byte, 0, 30)\n> \n> outside the loop\n\nI think you missed this one.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go#newcode155\nsrc/pkg/strconv/itoa_test.go:155: var dst []byte\nOn 2011/12/05 22:50:32, rsc wrote:\n> Same.\n\nSame.",
			"disapproval": false,
			"date": "2011-12-05 23:22:47.552981",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=501442b88381 ***\n\nstrconv: 34% to 63% faster conversions\n\n(Note that the Int and Uint benchmarks use different test sets\nand thus cannot be compared against each other. Int and Uint\nconversions are approximately the same speed).\n\nBefore (best of 3 runs):\nstrconv_test.BenchmarkFormatInt    100000    15636 ns/op\nstrconv_test.BenchmarkAppendInt    100000    18930 ns/op\nstrconv_test.BenchmarkFormatUint   500000     4392 ns/op\nstrconv_test.BenchmarkAppendUint   500000     5152 ns/op\n\nAfter (best of 3 runs):\n\nstrconv_test.BenchmarkFormatInt    200000    10070 ns/op (-36%)\nstrconv_test.BenchmarkAppendInt    200000     7097 ns/op (-63%)\nstrconv_test.BenchmarkFormatUint  1000000     2893 ns/op (-34%)\nstrconv_test.BenchmarkAppendUint   500000     2462 ns/op (-52%)\n\nR=r, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5449093",
			"disapproval": false,
			"date": "2011-12-06 16:15:49.308918",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 5, 2011 at 18:19,  <gri@golang.org> wrote:\n> I am not sure what you mean with \"the benchmark fixed\". The current\n> benchmarks are simply the test cases.\n\nI mean moving dst out of the loop and initializing it,\nso that no calls to AppendX allocate.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-05 23:21:44.690273",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 5, 2011, at 1:55 PM, gri@golang.org wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n> \n> Message:\n> Hello golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n> \n> \n> Description:\n> strconv: 35% to 58% faster conversions\n> \n> (Note that the Int and Uint benchmarks use different test sets\n> and thus cannot be compared against each other. Int and Uint\n> conversions are approximately the same speed).\n> \n> Before (best of 3 runs):\n> strconv_test.BenchmarkFormatInt    100000    15613 ns/op\n> strconv_test.BenchmarkAppendInt    100000    23921 ns/op\n> strconv_test.BenchmarkFormatUint   500000     4389 ns/op\n> strconv_test.BenchmarkAppendUint   500000     5820 ns/op\n> \n> After (best of 3 runs):\n> strconv_test.BenchmarkFormatInt    200000    10036 ns/op (-36%)\n> strconv_test.BenchmarkAppendInt    200000    10049 ns/op (-58%)\n> strconv_test.BenchmarkFormatUint  1000000     2870 ns/op (-35%)\n> strconv_test.BenchmarkAppendUint  1000000     2884 ns/op (-50%)\n> \n> Please review this at http://codereview.appspot.com/5449093/\n> \n> Affected files:\n>  M src/pkg/strconv/itoa.go\n>  M src/pkg/strconv/itoa_test.go\n\nin another CL, not this one:\n\n- add a floating-point benchmark to fmt (note to self, really)\n- made the int and uint times comparable in the strconv benchmarks. it's confusing that they differ\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-05 21:56:35.841754",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ah, good point. fix forthcoming.\n- gri\n\nOn Mon, Dec 5, 2011 at 1:59 PM, Russ Cox <rsc@golang.org> wrote:\n> Does this work with AppendInt(nil, ...)?\n",
			"disapproval": false,
			"date": "2011-12-05 22:00:44.537175",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "With the benchmark fixed you should get much better than 58% I would think.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode21\nsrc/pkg/strconv/itoa.go:21: _, s := formatBits(nil, uint64(i), 10, true, false)\nreturn FormatInt(int64(i), 10) seems fine here and matches the comment.\nI doubt it matters for performance but even if so, inlining will do it.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode43\nsrc/pkg/strconv/itoa.go:43: func init() {\nIt would be nice if strconv didn't have any runtime init cost.\nIn this case it is easy to fix:\n\nvar shifts = [len(digits)+1]uint{\n    1<<1: 1,\n    1<<2: 2,\n    1<<3: 3,\n    1<<4: 4,\n    1<<5: 5,\n}\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode75\nsrc/pkg/strconv/itoa.go:75: // common case: use constant 10 for / and %\n// because the compiler can optimize it into a multiply+shift.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode84\nsrc/pkg/strconv/itoa.go:84: m := uint64(1)<<s - 1\nIf we're going for all out speed, I'd convert to uint32 or uintptr here,\nto avoid using a uint64 mask on a 32-bit platform.\n   m := uintptr(1)<<s - 1\n   ... a[i] = digits[uintptr(u)&m]\n\n(The mask can't be bigger than 0x1F anyway.)\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go\nFile src/pkg/strconv/itoa_test.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go#newcode138\nsrc/pkg/strconv/itoa_test.go:138: var dst []byte\nEven better, move \n\ndst := make([]byte, 0, 30)\n\noutside the loop\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go#newcode155\nsrc/pkg/strconv/itoa_test.go:155: var dst []byte\nSame.",
			"disapproval": false,
			"date": "2011-12-05 22:50:32.741531",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-05 23:33:26.917595",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this work with AppendInt(nil, ...)?\n",
			"disapproval": false,
			"date": "2011-12-05 21:59:13.686587",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI am not sure what you mean with \"the benchmark fixed\". The current benchmarks are simply the test cases.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode21\nsrc/pkg/strconv/itoa.go:21: _, s := formatBits(nil, uint64(i), 10, true, false)\nOn 2011/12/05 22:50:32, rsc wrote:\n> return FormatInt(int64(i), 10) seems fine here and matches the comment.\n> I doubt it matters for performance but even if so, inlining will do it.\n\nDone.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode43\nsrc/pkg/strconv/itoa.go:43: func init() {\nOn 2011/12/05 22:50:32, rsc wrote:\n> It would be nice if strconv didn't have any runtime init cost.\n> In this case it is easy to fix:\n> \n> var shifts = [len(digits)+1]uint{\n>     1<<1: 1,\n>     1<<2: 2,\n>     1<<3: 3,\n>     1<<4: 4,\n>     1<<5: 5,\n> }\n\nDone. Perhaps iota should work in var declarations...\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode75\nsrc/pkg/strconv/itoa.go:75: // common case: use constant 10 for / and %\nOn 2011/12/05 22:50:32, rsc wrote:\n> // because the compiler can optimize it into a multiply+shift.\n\nDone.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa.go#newcode84\nsrc/pkg/strconv/itoa.go:84: m := uint64(1)<<s - 1\nOn 2011/12/05 22:50:32, rsc wrote:\n> If we're going for all out speed, I'd convert to uint32 or uintptr here,\n> to avoid using a uint64 mask on a 32-bit platform.\n>    m := uintptr(1)<<s - 1\n>    ... a[i] = digits[uintptr(u)&m]\n> \n> (The mask can't be bigger than 0x1F anyway.)\n> \n\nDone.",
			"disapproval": false,
			"date": "2011-12-05 23:19:19.394902",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa_test.go\nFile src/pkg/strconv/itoa_test.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa_test.go#newcode137\nsrc/pkg/strconv/itoa_test.go:137: var dst []byte\nThis is still allocating on every call.  You have to give it something to write to.\n\ndst := make([]byte, 0, 30)\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa_test.go#newcode154\nsrc/pkg/strconv/itoa_test.go:154: var dst []byte\nSame.",
			"disapproval": false,
			"date": "2011-12-05 23:34:34.867548",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nUpdated benchmark numbers.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go\nFile src/pkg/strconv/itoa_test.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go#newcode138\nsrc/pkg/strconv/itoa_test.go:138: var dst []byte\nOn 2011/12/05 23:22:47, rsc wrote:\n> On 2011/12/05 22:50:32, rsc wrote:\n> > Even better, move \n> > \n> > dst := make([]byte, 0, 30)\n> > \n> > outside the loop\n> \n> I think you missed this one.\n\nDone.\n\nhttp://codereview.appspot.com/5449093/diff/9004/src/pkg/strconv/itoa_test.go#newcode155\nsrc/pkg/strconv/itoa_test.go:155: var dst []byte\nOn 2011/12/05 23:22:47, rsc wrote:\n> On 2011/12/05 22:50:32, rsc wrote:\n> > Same.\n> \n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa.go#newcode48\nsrc/pkg/strconv/itoa.go:48: func formatBits(dst []byte, u uint64, base int, signed, append_ bool) (d []byte, s string) {\nOn 2011/12/05 23:38:51, r wrote:\n> this is such a strange and complex signature it deserves a comment\n\nDone.\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa.go#newcode82\nsrc/pkg/strconv/itoa.go:82: // base is power of 2: use shift and masks instead of / and %\nOn 2011/12/05 23:38:51, r wrote:\n> s/shift/&s/\n\nDone.\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa_test.go\nFile src/pkg/strconv/itoa_test.go (right):\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa_test.go#newcode137\nsrc/pkg/strconv/itoa_test.go:137: var dst []byte\nOn 2011/12/05 23:34:35, rsc wrote:\n> This is still allocating on every call.  You have to give it something to write\n> to.\n> \n> dst := make([]byte, 0, 30)\n\nDone.\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa_test.go#newcode140\nsrc/pkg/strconv/itoa_test.go:140: AppendInt(dst, test.in, test.base)\nI could write back to dst. Not sure it make the benchmark more relevant.\n\nhttp://codereview.appspot.com/5449093/diff/7009/src/pkg/strconv/itoa_test.go#newcode154\nsrc/pkg/strconv/itoa_test.go:154: var dst []byte\nOn 2011/12/05 23:34:35, rsc wrote:\n> Same.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-06 00:11:21.670121",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\n- gri\n\nOn Mon, Dec 5, 2011 at 2:00 PM, Robert Griesemer <gri@golang.org> wrote:\n> ah, good point. fix forthcoming.\n> - gri\n>\n> On Mon, Dec 5, 2011 at 1:59 PM, Russ Cox <rsc@golang.org> wrote:\n>> Does this work with AppendInt(nil, ...)?\n",
			"disapproval": false,
			"date": "2011-12-05 22:10:21.269000",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5449093: strconv: 35% to 51% faster conversions",
	"created": "2011-12-05 21:34:49.123251",
	"patchsets": [
		1,
		2001,
		4001,
		7002,
		6003,
		5007,
		9004,
		5010,
		8005,
		1003,
		7008,
		7009,
		4012,
		6015
	],
	"modified": "2011-12-12 18:56:41.526833",
	"closed": true,
	"issue": 5449093
}