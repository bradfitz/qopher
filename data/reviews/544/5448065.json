{
	"description": "Add a []byte argument to hash.Hash to allow an allocation to be saved.\n\nThis is the result of running `gofix -r hashsum` over the tree, changing\nthe hash function implementations by hand and then fixing a couple of\ninstances where gofix didn't catch something.\n\nThe changed implementations are as simple as possible while still\nworking: I'm not trying to optimise in this CL.",
	"cc": [
		"rsc@golang.org",
		"cw@f00f.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 1, 2011 at 1:14 AM,  <cw@f00f.org> wrote:\n> What about having the Sum() only be valid immediately after it's called\n> and embedding the allocation in the hash?\n\nI considered this but, in many cases, returning a new []byte is\nactually what the caller wants, so all those callers would have to\ncall append() to make a copy. It's also a sharp edge, not to mention\nthat changing the semantics without changing the API is going to cause\nsome people problems.\n\nFor the cases where the caller is hashing a lot, Sum([]byte) and a Sum\nthat returns an internal buffer is about the same. So, on balance, I\nwent with the Sum([]byte).\n\nBut I'm not committed either way if people prefer the returning an\ninternal buffer.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2011-12-01 16:01:27.460075",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> But I'm not committed either way if people prefer the returning an\n> internal buffer.\n\ni wanted this some time ago when doing a hand tuned md5 (porting\nsomeone elses code) and an internal buffer seemed to match that better\nthen but i didn't consider passing []byte\n\ni suspect the performance difference won't be that noticable (md5 even\nwhen tuned is going to be quite slow and a 16-byte copy shouldn't be\nthat bad)\n",
			"disapproval": false,
			"date": "2011-12-01 16:05:50.206192",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-30 21:03:10.029334",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about having the Sum() only be valid immediately after it's called and embedding the allocation in the hash?",
			"disapproval": false,
			"date": "2011-12-01 06:14:21.099727",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "that would mean that concurrent use of Sum would be inherently unsafe.\n\nOn 1 December 2011 06:14,  <cw@f00f.org> wrote:\n> What about having the Sum() only be valid immediately after it's called\n> and embedding the allocation in the hash?\n>\n> http://codereview.appspot.com/5448065/\n",
			"disapproval": false,
			"date": "2011-12-01 09:31:35.310070",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought some more about this on the way in.\nI think the appending really makes more sense.\nIt gives the caller control over memory in a way\nthat the shared buffer does not, for all the reasons\nthat Adam outlined.  The only other API I can think\nof that behaves like Chris's suggestion is bufio's\nReadSlice and that has confused nearly everyone\nwho looked at it.\n\nLet's stick with Adam's appending API.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-01 16:47:54.181750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nFor my own curiosity, what didn't gofix fix?\n\nhttp://codereview.appspot.com/5448065/diff/2002/src/pkg/hash/hash.go\nFile src/pkg/hash/hash.go (right):\n\nhttp://codereview.appspot.com/5448065/diff/2002/src/pkg/hash/hash.go#newcode16\nsrc/pkg/hash/hash.go:16: // Sum appends the current hash in the same manner as append(), without\ns/in/dst/\n\n// Sum returns the result of appending the current hash to dst, without ...",
			"disapproval": false,
			"date": "2011-11-30 21:19:40.161767",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 30, 2011 at 4:19 PM,  <rsc@golang.org> wrote:\n> For my own curiosity, what didn't gofix fix?\n\nIt missed the crypto.MD5.New stuff, because I hadn't written that in\ngofix at the time that I ran it. I believe that it would have caught\nthat now.\n\nOther than that, it only missed cases where I had written hash.Hash\nimplementations and forgotten about them. (i.e. the truncating hash in\nexp/ssh.) However, those require more intervention than an automated\ntool is going to manage.\n\nWill land things now.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2011-12-01 17:19:15.298117",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"cw@f00f.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8f5131d7848e ***\n\nAdd a []byte argument to hash.Hash to allow an allocation to be saved.\n\nThis is the result of running `gofix -r hashsum` over the tree, changing\nthe hash function implementations by hand and then fixing a couple of\ninstances where gofix didn't catch something.\n\nThe changed implementations are as simple as possible while still\nworking: I'm not trying to optimise in this CL.\n\nR=rsc, cw, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/5448065",
			"disapproval": false,
			"date": "2011-12-01 17:35:45.086478",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 5448065: Add a []byte argument to hash.Hash to allow an allocati...",
	"created": "2011-11-30 20:58:06.041083",
	"patchsets": [
		1,
		2001,
		3,
		2002,
		2004
	],
	"modified": "2011-12-01 17:35:46.118011",
	"closed": true,
	"issue": 5448065
}