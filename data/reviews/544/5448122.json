{
	"description": "strconv: faster float conversion\n\n- added AppendFloatX benchmarks\n- 2% to 13% better performance\n- check for illegal bitSize\n\nbenchmark                                   old ns/op    new ns/op    delta\nstrconv_test.BenchmarkFormatFloatDecimal         2993         2733   -8.69%\nstrconv_test.BenchmarkFormatFloat                3384         3141   -7.18%\nstrconv_test.BenchmarkFormatFloatExp             9192         9010   -1.98%\nstrconv_test.BenchmarkFormatFloatBig             3279         3207   -2.20%\nstrconv_test.BenchmarkAppendFloatDecimal         2837         2478  -12.65%\nstrconv_test.BenchmarkAppendFloat                3196         2928   -8.39%\nstrconv_test.BenchmarkAppendFloatExp             9028         8773   -2.82%\nstrconv_test.BenchmarkAppendFloatBig             3151         2782  -11.71%",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-06 21:49:54.118798",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa.go#newcode58\nsrc/pkg/strconv/ftoa.go:58: func genericFtoa(val float64, fmt byte, prec, bitSize int) []byte {\nOn 2011/12/06 21:59:01, rsc wrote:\n> If you insert a new first argument dst []byte and make\n> the formatters below all take such an argument too\n> (for appending), I think you will get a much larger speedup.\n> I believe it should be possible to get AppendFloat down to\n> zero allocations.\n\nDone.\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa.go#newcode69\nsrc/pkg/strconv/ftoa.go:69: panic(\"illegal bitSize\")\nOn 2011/12/06 21:59:01, rsc wrote:\n> panic(\"strconv: illegal AppendFloat/FormatFloat bitSize\")\n\nDone.\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa_test.go\nFile src/pkg/strconv/ftoa_test.go (right):\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa_test.go#newcode177\nsrc/pkg/strconv/ftoa_test.go:177: dst := make([]byte, 30)\nOn 2011/12/06 21:59:01, rsc wrote:\n> s/30/0, 30/\n> same below\n> \n\nDone.",
			"disapproval": false,
			"date": "2011-12-06 23:59:49.769824",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=65221f097b81 ***\n\nstrconv: faster float conversion\n\n- added AppendFloatX benchmarks\n- 2% to 13% better performance\n- check for illegal bitSize\n\nbenchmark                                   old ns/op    new ns/op    delta\nstrconv_test.BenchmarkFormatFloatDecimal         2993         2733   -8.69%\nstrconv_test.BenchmarkFormatFloat                3384         3141   -7.18%\nstrconv_test.BenchmarkFormatFloatExp             9192         9010   -1.98%\nstrconv_test.BenchmarkFormatFloatBig             3279         3207   -2.20%\nstrconv_test.BenchmarkAppendFloatDecimal         2837         2478  -12.65%\nstrconv_test.BenchmarkAppendFloat                3196         2928   -8.39%\nstrconv_test.BenchmarkAppendFloatExp             9028         8773   -2.82%\nstrconv_test.BenchmarkAppendFloatBig             3151         2782  -11.71%\n\nR=rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5448122",
			"disapproval": false,
			"date": "2011-12-07 18:30:30.370142",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for cleaning this up.\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa.go\nFile src/pkg/strconv/ftoa.go (right):\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa.go#newcode58\nsrc/pkg/strconv/ftoa.go:58: func genericFtoa(val float64, fmt byte, prec, bitSize int) []byte {\nIf you insert a new first argument dst []byte and make\nthe formatters below all take such an argument too\n(for appending), I think you will get a much larger speedup.\nI believe it should be possible to get AppendFloat down to\nzero allocations.\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa.go#newcode69\nsrc/pkg/strconv/ftoa.go:69: panic(\"illegal bitSize\")\npanic(\"strconv: illegal AppendFloat/FormatFloat bitSize\")\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa_test.go\nFile src/pkg/strconv/ftoa_test.go (right):\n\nhttp://codereview.appspot.com/5448122/diff/5001/src/pkg/strconv/ftoa_test.go#newcode177\nsrc/pkg/strconv/ftoa_test.go:177: dst := make([]byte, 30)\ns/30/0, 30/\nsame below",
			"disapproval": false,
			"date": "2011-12-06 21:59:01.568094",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI:\n\nbenchmark                                   old ns/op    new ns/op    delta\nstrconv_test.BenchmarkFormatFloatDecimal         2993         2733   -8.69%\nstrconv_test.BenchmarkFormatFloat                3384         3141   -7.18%\nstrconv_test.BenchmarkFormatFloatExp             9192         9010   -1.98%\nstrconv_test.BenchmarkFormatFloatBig             3279         3207   -2.20%\nstrconv_test.BenchmarkAppendFloatDecimal         2837         2478  -12.65%\nstrconv_test.BenchmarkAppendFloat                3196         2928   -8.39%\nstrconv_test.BenchmarkAppendFloatExp             9028         8773   -2.82%\nstrconv_test.BenchmarkAppendFloatBig             3151         2782  -11.71%\n\n(with a fix to benchcmp).\n- gri\n\nOn Tue, Dec 6, 2011 at 1:53 PM, Russ Cox <rsc@golang.org> wrote:\n> Can you run\n>\n> misc/benchcmp old.txt new.txt ?\n>\n> It will generate the percentages for you\n> but also combine the two so that readers\n> don't have to scan back and forth.\n",
			"disapproval": false,
			"date": "2011-12-07 00:22:33.371692",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Btw, I just benchmarked tip vs tip + my json change + this CL and it's not\nany faster.\n\nConsidering that the original version of 5411052 made json's encoding\nbenchmark 10% faster, I suspect we're still allocating here.  Will profile\nlater.\n\n\nOn Tue, Dec 6, 2011 at 4:22 PM, Robert Griesemer <gri@golang.org> wrote:\n\n> FYI:\n>\n> benchmark                                   old ns/op    new ns/op    delta\n> strconv_test.BenchmarkFormatFloatDecimal         2993         2733   -8.69%\n> strconv_test.BenchmarkFormatFloat                3384         3141   -7.18%\n> strconv_test.BenchmarkFormatFloatExp             9192         9010   -1.98%\n> strconv_test.BenchmarkFormatFloatBig             3279         3207   -2.20%\n> strconv_test.BenchmarkAppendFloatDecimal         2837         2478  -12.65%\n> strconv_test.BenchmarkAppendFloat                3196         2928   -8.39%\n> strconv_test.BenchmarkAppendFloatExp             9028         8773   -2.82%\n> strconv_test.BenchmarkAppendFloatBig             3151         2782  -11.71%\n>\n> (with a fix to benchcmp).\n> - gri\n>\n> On Tue, Dec 6, 2011 at 1:53 PM, Russ Cox <rsc@golang.org> wrote:\n> > Can you run\n> >\n> > misc/benchcmp old.txt new.txt ?\n> >\n> > It will generate the percentages for you\n> > but also combine the two so that readers\n> > don't have to scan back and forth.\n>\n",
			"disapproval": false,
			"date": "2011-12-07 00:50:22.645722",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you run\n\nmisc/benchcmp old.txt new.txt ?\n\nIt will generate the percentages for you\nbut also combine the two so that readers\ndon't have to scan back and forth.\n",
			"disapproval": false,
			"date": "2011-12-06 21:53:29.781828",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nFine if you want to submit, but there are definitely bigger\nwins to be had lurking here.\n",
			"disapproval": false,
			"date": "2011-12-07 18:15:34.664522",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 7, 2011 at 10:15 AM, Russ Cox <rsc@golang.org> wrote:\n> LGTM\n>\n> Fine if you want to submit, but there are definitely bigger\n> wins to be had lurking here.\n\nI'm sure of that. It's a reasonable snapshot.\n- gr\n",
			"disapproval": false,
			"date": "2011-12-07 18:29:31.496607",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5448122: strconv: minor performance tweaks to float conversion",
	"created": "2011-12-06 21:44:27.384180",
	"patchsets": [
		1,
		2001,
		4001,
		5001,
		2003,
		3007,
		7007,
		7008,
		8001,
		4009,
		2009
	],
	"modified": "2011-12-07 18:30:31.671203",
	"closed": true,
	"issue": 5448122
}