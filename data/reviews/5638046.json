{
	"description": "regexp: allow substitutions in Replace, ReplaceString\nAdd Expand, ExpandString for access to the substitution functionality.\n\nFixes issue 2736.",
	"cc": [
		"r@golang.org",
		"bradfitz@golang.org",
		"r@google.com",
		"rogpeppe@gmail.com",
		"n13m3y3r@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure about this.\n\nFirst, I can't protect a $, which means that it's hard to get $1 into the output as a literal and that the Replace functions are subject to failure if the replacement text is programmatic rather than literal.\n\nSecond, this is an API change. It may be one people expect, but it's a change nonetheless.  How can I get the old behavior?\n\nIn short, intricate as this interface is, it might still be too simple.",
			"disapproval": false,
			"date": "2012-02-06 20:53:54.647668",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 6, 2012 at 15:53,  <r@golang.org> wrote:\n> First, I can't protect a $, which means that it's hard to get $1 into\n> the output as a literal and that the Replace functions are subject to\n> failure if the replacement text is programmatic rather than literal.\n\nFair enough.  I added $$ meaning $.\n\n> Second, this is an API change. It may be one people expect, but it's a\n> change nonetheless. \u00a0How can I get the old behavior?\n\nYes; it was on the Go 1 list so that we can make the change\nwithout breaking programs later.\n\nIf you want a literal string, you can either s/$/$$/ beforehand\nor you can use ReplaceAllFunc(src, func([]byte)[]byte{ return repl }).\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-06 21:02:40.598188",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-06 20:40:21.769858",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 07/02/2012, at 8:51 AM, Russ Cox wrote:\n\n> On Mon, Feb 6, 2012 at 16:14, Rob 'Commander' Pike <r@google.com> wrote:\n>> Can I have that one-liner as a predefined helper please? I'll use a security argument: It needs to be easy to be safe.\n> \n> Sure.  What API did you have in mind?\n\nIt doesn't need to be elegant, just simple. I was thinking of something prolix like:\n\nfunc (re *Regexp) ReplaceAllLiteral(src, repl []byte) []byte\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-06 21:53:28.026873",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 6, 2012 at 16:14, Rob 'Commander' Pike <r@google.com> wrote:\n> Can I have that one-liner as a predefined helper please? I'll use a security argument: It needs to be easy to be safe.\n\nSure.  What API did you have in mind?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-06 21:51:30.151984",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was also just wondering about a literal $.  What do other languages do\nabout that?\n\nI also think that this CL could use some Examples.  But I think our docs as\na whole could use a ton, so not needed in this one necessarily.\n\nOn Mon, Feb 6, 2012 at 12:53 PM, <r@golang.org> wrote:\n\n> I'm not sure about this.\n>\n> First, I can't protect a $, which means that it's hard to get $1 into\n> the output as a literal and that the Replace functions are subject to\n> failure if the replacement text is programmatic rather than literal.\n>\n> Second, this is an API change. It may be one people expect, but it's a\n> change nonetheless.  How can I get the old behavior?\n>\n> In short, intricate as this interface is, it might still be too simple.\n>\n>\n> http://codereview.appspot.com/**5638046/<http://codereview.appspot.com/5638046/>\n>\n",
			"disapproval": false,
			"date": "2012-02-06 20:56:12.777721",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-06 21:02:50.989690",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can I have that one-liner as a predefined helper please? I'll use a security argument: It needs to be easy to be safe.\n\nAlso maybe a quoter to turn $ into $$, but then I ask, why does quoting replacement text have a different convention than quoting pattern text?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-06 21:14:56.401102",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/all_test.go\nFile src/pkg/regexp/all_test.go (right):\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/all_test.go#newcode192\nsrc/pkg/regexp/all_test.go:192: {\"(?P<x>hi)|(?P<x>bye)\", \"hello $$x\", \"hi\", \"hello $x\"},\nwhat happens with replacement text \"$\"? \"$x$\"? what if i say (?P<$>hi), stupid though that is? \n\nwhat about $3 where there is only 1 submatch?\nis $1x $1 followed by x or ${1x}?\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode434\nsrc/pkg/regexp/regexp.go:434: // Regexp have been replaced by the return value of of function repl (whose\ns/of of/of/\nbut it's a complex construction. rewrite it to say what the function does instead of how it does it. ditto for the previous function. how about this approach:\n\nReplaceAllString returns a copy of src, replacing matches of the Regexp with the replacement string repl.  Inside repl, $ signs are interpreted as in Expand, so for instance $1 represents the text of the first submatch.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode524\nsrc/pkg/regexp/regexp.go:524: // is not expanded further (such as by using Expand).\nrewrite for simplicity.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode537\nsrc/pkg/regexp/regexp.go:537: // QuoteMeta returns a string that quotes all regular expression metacharacters\nthis function and its support elements are out of place in the file now.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode702\nsrc/pkg/regexp/regexp.go:702: // returned by FindSubmatchIndex.  In the template, $$ is replaced with a single $.\nwhat if it's not?\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode703\nsrc/pkg/regexp/regexp.go:703: // A purely numeric name, like $1, refers to the submatch with\ns/,//\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode710\nsrc/pkg/regexp/regexp.go:710: // ExpandString is like Expand but takes a string template and string matches.\nhard to read\nExpandString is like Expand but the template and source are strings.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode780\nsrc/pkg/regexp/regexp.go:780: if !unicode.IsLetter(rune) && !unicode.IsDigit(rune) && rune != '_' {\nsee tests. what is the right definition for a name? should 1x be a valid name?",
			"disapproval": false,
			"date": "2012-02-07 00:37:51.301163",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i vote for the use of \\ as a quoting character\nfor Expand. then QuoteMeta could be used to\nquote both patterns and replacement text.\n\ni've no idea what the precedents are though.\n\nOn 7 February 2012 00:37,  <r@golang.org> wrote:\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/all_test.go\n> File src/pkg/regexp/all_test.go (right):\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/all_test.go#newcode192\n> src/pkg/regexp/all_test.go:192: {\"(?P<x>hi)|(?P<x>bye)\", \"hello $$x\",\n> \"hi\", \"hello $x\"},\n> what happens with replacement text \"$\"? \"$x$\"? what if i say (?P<$>hi),\n> stupid though that is?\n>\n> what about $3 where there is only 1 submatch?\n> is $1x $1 followed by x or ${1x}?\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go\n> File src/pkg/regexp/regexp.go (right):\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode434\n> src/pkg/regexp/regexp.go:434: // Regexp have been replaced by the return\n> value of of function repl (whose\n> s/of of/of/\n> but it's a complex construction. rewrite it to say what the function\n> does instead of how it does it. ditto for the previous function. how\n> about this approach:\n>\n> ReplaceAllString returns a copy of src, replacing matches of the Regexp\n> with the replacement string repl. \u00a0Inside repl, $ signs are interpreted\n> as in Expand, so for instance $1 represents the text of the first\n> submatch.\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode524\n> src/pkg/regexp/regexp.go:524: // is not expanded further (such as by\n> using Expand).\n> rewrite for simplicity.\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode537\n> src/pkg/regexp/regexp.go:537: // QuoteMeta returns a string that quotes\n> all regular expression metacharacters\n> this function and its support elements are out of place in the file now.\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode702\n> src/pkg/regexp/regexp.go:702: // returned by FindSubmatchIndex. \u00a0In the\n> template, $$ is replaced with a single $.\n> what if it's not?\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode703\n> src/pkg/regexp/regexp.go:703: // A purely numeric name, like $1, refers\n> to the submatch with\n> s/,//\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode710\n> src/pkg/regexp/regexp.go:710: // ExpandString is like Expand but takes a\n> string template and string matches.\n> hard to read\n> ExpandString is like Expand but the template and source are strings.\n>\n> http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode780\n> src/pkg/regexp/regexp.go:780: if !unicode.IsLetter(rune) &&\n> !unicode.IsDigit(rune) && rune != '_' {\n> see tests. what is the right definition for a name? should 1x be a valid\n> name?\n>\n> http://codereview.appspot.com/5638046/\n",
			"disapproval": false,
			"date": "2012-02-07 12:06:23.204635",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 07/02/2012, at 11:06 PM, roger peppe wrote:\n\n> i vote for the use of \\ as a quoting character\n> for Expand. then QuoteMeta could be used to\n> quote both patterns and replacement text.\n> \n> i've no idea what the precedents are though.\n\nwe talked about this today and decided to stick with $, with $$ to quote it. it's the real precedent. even with \\, QuoteMeta would be wrong for this since it will quote other things that are irrelevant to replacement processing. also, in effect, it makes \\( mean (, for instance, and that's not what you want \\( to be in a replacement string. we also considered \\ as the substitution character (\\1), since it's familiar from the ed(1) line, but that has the disadvantage that in patterns \\ quotes while in replacements its sometimes quotes and sometimes magicizes.\n\nit's not a completely one-sided argument but $ and $$ win. as usual in modern computing, the true unix way loses.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-07 12:25:28.957022",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 7 February 2012 12:25, Rob 'Commander' Pike <r@google.com> wrote:\n> we talked about this today and decided to stick with $, with $$ to quote it. it's the real precedent.\n\ni hadn't encountered the $ notation before, but it looks like\nthat's what's used by perl, so i guess that's the precedent.\na little experimentation shows that perl uses \\$ not $$.\n\n> in effect, it makes \\( mean (, for instance, and that's not what you want \\(\n> to be in a replacement string\n\ni'm quite happy for \\x to mean x for any character x.\ni don't generally mind if more characters get quoted than are necessary,\nbut i wouldn't mind having two Quote functions either.\n",
			"disapproval": false,
			"date": "2012-02-07 13:08:19.524527",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"rogpeppe@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5638046/diff/14001/src/pkg/regexp/all_test.go\nFile src/pkg/regexp/all_test.go (right):\n\nhttp://codereview.appspot.com/5638046/diff/14001/src/pkg/regexp/all_test.go#newcode196\nsrc/pkg/regexp/all_test.go:196: {\"a+\", \"${oops\", \"aaa\", \"${oops\"},\n{\"a+\", \"$\", \"aaa\", \"$\"},",
			"disapproval": false,
			"date": "2012-02-08 04:44:14.650051",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"rogpeppe@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as e3cab3dc2d31 ***\n\nregexp: allow substitutions in Replace, ReplaceString\nAdd Expand, ExpandString for access to the substitution functionality.\n\nFixes issue 2736.\n\nR=r, bradfitz, r, rogpeppe, n13m3y3r\nCC=golang-dev\nhttp://codereview.appspot.com/5638046",
			"disapproval": false,
			"date": "2012-02-08 04:46:54.277378",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The precedents are ultimately not that important, but if you\nwant one, Python's regexp replace uses $$ to escape $.\n\nIf you use \\ to escape the $s, then you have to explain\nwhy there are two different kinds of escape characters.\n\nIf you use \\ instead of $ entirely, then \\{name} has a\nspecial meaning, so QuoteMeta fails, because it violates\nthe widespread convention that \\c for a punctuation\ncharacter c always means the literal c.\n\nThese expansion templates are at least self-contained:\n$ is the only special character, creating an escaped\nversion is trivial (s/$/$$/g), and there will be literal\n(no expansion) methods too.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-07 14:43:22.148666",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"rogpeppe@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/all_test.go\nFile src/pkg/regexp/all_test.go (right):\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/all_test.go#newcode192\nsrc/pkg/regexp/all_test.go:192: {\"(?P<x>hi)|(?P<x>bye)\", \"hello $$x\", \"hi\", \"hello $x\"},\nOn 2012/02/07 00:37:51, r wrote:\n> what happens with replacement text \"$\"? \"$x$\"? what if i say (?P<$>hi), stupid\n> though that is? \n> \n> what about $3 where there is only 1 submatch?\n> is $1x $1 followed by x or ${1x}?\n\nAdded tests and rewrote the comment:\n\n// Expand appends template to dst and returns the result; during the\n// append, Expand replaces variables in the template with corresponding\n// matches drawn from src.  The match slice should have been returned by\n// FindSubmatchIndex.\n// \n// In the template, a variable is denoted by a substring of the form\n// $name or ${name}, where name is a non-empty sequence of letters,\n// digits, and underscores.  A purely numeric name, like $1, refers to\n// the submatch with the corresponding index; other names refer to\n// capturing parentheses named with the (?P<name>...) syntax.  A\n// reference to an out of range or unmatched index or a name that is not\n// present in the regular expression is replaced with an empty string.\n// \n// In the $name form, name is taken to be as long as possible: $1x is\n// equivalent to ${1x}, not ${1}x, and, $10 is equivalent to ${10}, not ${1}0.\n// \n// To insert a literal $ in the output, use $$ in the template.\n\nTherefore:\n\"$\" does not contain a substring of that form, so it passes through.\n\"$x$\" contains only one substring of that form: \"$x\".  The final \"$\" passes through.\n\"$1x\" is \"${1x}\".\n\nBelieve it or not, (?P<$>hi) is not a valid regular expression:\nthe name in (?P<name> is required by regexp/parse to be identifier-like\n(alphanumeric + underscore).  In fact, the name is also required to be\nASCII, but I imagine that might be relaxed some day, and I've defined\n$name here to be compatible with such a future change.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode537\nsrc/pkg/regexp/regexp.go:537: // QuoteMeta returns a string that quotes all regular expression metacharacters\nOn 2012/02/07 00:37:51, r wrote:\n> this function and its support elements are out of place in the file now.\n\nAre you asking me to move QuoteMeta somewhere else in the file?\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode702\nsrc/pkg/regexp/regexp.go:702: // returned by FindSubmatchIndex.  In the template, $$ is replaced with a single $.\nOn 2012/02/07 00:37:51, r wrote:\n> what if it's not?\n\nRewrote.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode703\nsrc/pkg/regexp/regexp.go:703: // A purely numeric name, like $1, refers to the submatch with\nOn 2012/02/07 00:37:51, r wrote:\n> s/,//\n\nDone.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode710\nsrc/pkg/regexp/regexp.go:710: // ExpandString is like Expand but takes a string template and string matches.\nOn 2012/02/07 00:37:51, r wrote:\n> hard to read\n> ExpandString is like Expand but the template and source are strings.\n\nDone.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode780\nsrc/pkg/regexp/regexp.go:780: if !unicode.IsLetter(rune) && !unicode.IsDigit(rune) && rune != '_' {\nOn 2012/02/07 00:37:51, r wrote:\n> see tests. what is the right definition for a name? should 1x be a valid name?\n\nIt is accepted by regexp/syntax.\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode791\nsrc/pkg/regexp/regexp.go:791: if i >= len(str) && str[i] != '}' {\nOn 2012/02/07 16:22:36, niemeyer wrote:\n> s/&&/||/\n\nOuch, thanks.",
			"disapproval": false,
			"date": "2012-02-07 21:29:13.355244",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 7 February 2012 14:43, Russ Cox <rsc@golang.org> wrote:\n> The precedents are ultimately not that important, but if you\n> want one, Python's regexp replace uses $$ to escape $.\n>\n> If you use \\ to escape the $s, then you have to explain\n> why there are two different kinds of escape characters.\n\ni'd class $ as a metacharacter rather than an escape character,\nso i think it's odd to have two kinds of escape character in the\ncurrent proposal ($ for replacement and \\ for matching)\n\nthat said, i appreciate the python precedent too, and i don't\nmind $$ much.\n\n> If you use \\ instead of $ entirely, then \\{name} has a\n> special meaning, so QuoteMeta fails, because it violates\n> the widespread convention that \\c for a punctuation\n> character c always means the literal c.\n\nagreed, though i wasn't suggesting that.\n\n> These expansion templates are at least self-contained:\n> $ is the only special character, creating an escaped\n> version is trivial (s/$/$$/g), and there will be literal\n> (no expansion) methods too.\n\ni'm ok with it.\n",
			"disapproval": false,
			"date": "2012-02-07 15:15:31.653960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"rogpeppe@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, bradfitz@golang.org, r@google.com, rogpeppe@gmail.com, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-07 21:29:01.253680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n",
			"disapproval": false,
			"date": "2012-02-08 04:32:55.174994",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"rogpeppe@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's quite useful, thanks.\n\nMake is also a precedent for the $$ as escaping.\n\nJust a trivial:\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttp://codereview.appspot.com/5638046/diff/4004/src/pkg/regexp/regexp.go#newcode791\nsrc/pkg/regexp/regexp.go:791: if i >= len(str) && str[i] != '}' {\ns/&&/||/",
			"disapproval": false,
			"date": "2012-02-07 16:22:36.258924",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5638046: regexp: allow substitutions in Replace, ReplaceString",
	"created": "2012-02-06 20:39:09.845924",
	"patchsets": [
		1,
		2001,
		1003,
		6,
		4004,
		11002,
		14001,
		12004
	],
	"modified": "2012-02-08 04:46:55.866865",
	"closed": true,
	"issue": 5638046
}