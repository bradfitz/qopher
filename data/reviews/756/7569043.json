{
	"description": "runtime: integrated network poller for darwin\nvs tip:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCP4Persistent                 67786        33175  -51.06%\nBenchmarkTCP4Persistent-2               49085        31227  -36.38%\nBenchmarkTCP4PersistentTimeout          69265        32565  -52.98%\nBenchmarkTCP4PersistentTimeout-2        49217        32588  -33.79%\n\nvs old scheduler:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCP4Persistent                 63517        33175  -47.77%\nBenchmarkTCP4Persistent-2               54760        31227  -42.97%\nBenchmarkTCP4PersistentTimeout          63234        32565  -48.50%\nBenchmarkTCP4PersistentTimeout-2        56956        32588  -42.78%",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"devon.odell@gmail.com",
		"mikioh.mikioh@gmail.com",
		"iant@golang.org",
		"rsc@golang.org",
		"pabuhr@google.com"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/12 20:17:48, dvyukov wrote:\n> Addressed all comments, except autogenerated defs (need darwin machine for\n> that).\n> Please take a look at all other files except defs.\n\nAlso I will need to carefully check build tags because I am testing on several OSes and there are cross-CL files.",
			"disapproval": false,
			"date": "2013-03-12 20:20:02.267870",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/07 23:49:36, bradfitz wrote:\n> This will be useful for everybody who runs servers on Macs.\n\nLocal godoc will be blazingly fast as well :)\n\nSeriously, the idea was to test common code with both epoll and kqueue, see what's common and what's different, and whether is can work with anything different than epoll. The next change will do the same for linux/epoll. + I suspect kqueue impl can be reused by *BSD, and in the end only 3 functions are kqueue-specific.",
			"disapproval": false,
			"date": "2013-03-07 23:56:16.290630",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c\nFile src/pkg/runtime/netpoll.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode14\nsrc/pkg/runtime/netpoll.c:14: // and associate fd with PollFD.\nWhat is fd in this comment?\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode15\nsrc/pkg/runtime/netpoll.c:15: // An implementation must call the following function to denote that an fd become ready.\ns/become/is/\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode26\nsrc/pkg/runtime/netpoll.c:26: PollFD* link;\t// in s.cache\nProtected by s.Lock, I assume.\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode62\nsrc/pkg/runtime/netpoll.c:62: net\u00b7runtime_pollServerInit(void)\nWhy not make this netpoll.goc and put it in package net?\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode68\nsrc/pkg/runtime/netpoll.c:68: net\u00b7runtime_pollOpen(intgo intfd, PollFD *fd, intgo errno)\nThis is confusing.  In the net package, this function returns a pollServer.  Here it returns a PollFD.  We should use the same name in both places.\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode70\nsrc/pkg/runtime/netpoll.c:70: fd = allocFD();\nI find this naming a bit confusing, as in this directory fd normally denotes a file descriptor.  Perhaps pfd?\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode227\nsrc/pkg/runtime/netpoll.c:227: G **gp;\nIn this directory gp is normally G*, not G**.  Perhaps gpp?\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode262\nsrc/pkg/runtime/netpoll.c:262: void\nI'm finding the gp argument to this function rather cryptic. Suggest a comment here or above.\n\nAlso gp is normally a G*, but here it is a G**.  Suggest a different name, e.g., gpp.\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll_kqueue.c#newcode48\nsrc/pkg/runtime/netpoll_kqueue.c:48: return 14;  // EFAULT just to mark out from other errors\nCan we make this actually EFAULT rather than 14?\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll_kqueue.c#newcode59\nsrc/pkg/runtime/netpoll_kqueue.c:59: runtime\u00b7netpoll(bool block)\nWhat calls this?",
			"disapproval": false,
			"date": "2013-03-12 13:55:24.179380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-07 23:41:59.427160",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's faster due to several reasons:\n1. Uses edge-triggered notifications, arm kevent only once per fd.\n2. Uses more efficient heap-based runtime timers.\n3. No global mutex, no global hashmap, uses direct context pointers.\n4. Does not use 8 dedicated polling goroutines that call enter/exitsyscall, instead worker threads poll when idle (unique to runtime).\n5. Injects batches of newly runnable goroutines directly into scheduler (unique to runtime).\n6. Lighter-weight goroutine parking/unparking on binary semaphores (unique to runtime).",
			"disapproval": false,
			"date": "2013-03-07 23:48:47.705440",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This will be useful for everybody who runs servers on Macs.\r\n\r\nOn Thu, Mar 7, 2013 at 3:41 PM, <dvyukov@google.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@**code.google.com/p/go/<http://40google.com@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> runtime: integrated network poller for darwin\r\n> vs tip:\r\n> benchmark                           old ns/op    new ns/op    delta\r\n> BenchmarkTCP4Persistent                 67786        33175  -51.06%\r\n> BenchmarkTCP4Persistent-2               49085        31227  -36.38%\r\n> BenchmarkTCP4PersistentTimeout          69265        32565  -52.98%\r\n> BenchmarkTCP4PersistentTimeout**-2        49217        32588  -33.79%\r\n>\r\n> vs old scheduler:\r\n> benchmark                           old ns/op    new ns/op    delta\r\n> BenchmarkTCP4Persistent                 63517        33175  -47.77%\r\n> BenchmarkTCP4Persistent-2               54760        31227  -42.97%\r\n> BenchmarkTCP4PersistentTimeout          63234        32565  -48.50%\r\n> BenchmarkTCP4PersistentTimeout**-2        56956        32588  -42.78%\r\n>\r\n> Please review this at https://codereview.appspot.**com/7569043/<https://codereview.appspot.com/7569043/>\r\n>\r\n> Affected files:\r\n>   R src/pkg/net/fd_darwin.go\r\n>   A src/pkg/net/fd_poll_runtime.go\r\n>   M src/pkg/net/fd_poll_unix.go\r\n>   M src/pkg/runtime/defs_darwin_**386.h\r\n>   M src/pkg/runtime/defs_darwin_**amd64.h\r\n>   A src/pkg/runtime/netpoll.c\r\n>   A src/pkg/runtime/netpoll_**kqueue.c\r\n>   M src/pkg/runtime/sys_darwin_**386.s\r\n>   M src/pkg/runtime/sys_darwin_**amd64.s\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-07 23:49:36.047220",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 7, 2013 at 3:56 PM, <dvyukov@google.com> wrote:\r\n\r\n> On 2013/03/07 23:49:36, bradfitz wrote:\r\n>\r\n>> This will be useful for everybody who runs servers on Macs.\r\n>>\r\n>\r\n> Local godoc will be blazingly fast as well :)\r\n>\r\n> Seriously, the idea was to test common code with both epoll and kqueue,\r\n> see what's common and what's different, and whether is can work with\r\n> anything different than epoll.\r\n\r\n\r\nYeah, I figured.  And it really will be nice for people who run servers on\r\nMacs, even if there are only 4 of them.\r\n\r\n\r\n> The next change will do the same for\r\n> linux/epoll.\r\n\r\n\r\nyay!\r\n\r\n\r\n> + I suspect kqueue impl can be reused by *BSD, and in the\r\n> end only 3 functions are kqueue-specific.\r\n\r\n\r\nnice.\r\n",
			"disapproval": false,
			"date": "2013-03-07 23:59:25.503520",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Platform-specific part is quite small, see the similar change for linux:\nhttps://codereview.appspot.com/7579044/diff/2001/src/pkg/runtime/netpoll_linux.c",
			"disapproval": false,
			"date": "2013-03-07 23:59:56.369650",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Peter, can you take a look at this?",
			"disapproval": false,
			"date": "2013-03-08 17:25:20.136380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/08 17:25:20, dvyukov wrote:\n> Peter, can you take a look at this?\n\nIt depends on https://codereview.appspot.com/7448048/ which plugs netpoll() into scheduler.",
			"disapproval": false,
			"date": "2013-03-08 17:25:56.095620",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/3/7  <dvyukov@google.com>:\r\n> On 2013/03/07 23:49:36, bradfitz wrote:\r\n>>\r\n>> This will be useful for everybody who runs servers on Macs.\r\n>\r\n> Local godoc will be blazingly fast as well :)\r\n>\r\n> Seriously, the idea was to test common code with both epoll and kqueue,\r\n> see what's common and what's different, and whether is can work with\r\n> anything different than epoll. The next change will do the same for\r\n> linux/epoll. + I suspect kqueue impl can be reused by *BSD, and in the\r\n> end only 3 functions are kqueue-specific.\r\n\r\nI don't think this is going to change much for the different BSDs,\r\nprobably some differences in syscall numbers, but I think the rest\r\n'just works.' Are you intending to submit a CL to implement this on\r\nthe BSDs?\r\n\r\n--dho\r\n",
			"disapproval": false,
			"date": "2013-03-08 17:39:25.226970",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 8, 2013 at 9:39 PM, Devon H. O'Dell <devon.odell@gmail.com> wrote:\r\n> 2013/3/7  <dvyukov@google.com>:\r\n>> On 2013/03/07 23:49:36, bradfitz wrote:\r\n>>>\r\n>>> This will be useful for everybody who runs servers on Macs.\r\n>>\r\n>> Local godoc will be blazingly fast as well :)\r\n>>\r\n>> Seriously, the idea was to test common code with both epoll and kqueue,\r\n>> see what's common and what's different, and whether is can work with\r\n>> anything different than epoll. The next change will do the same for\r\n>> linux/epoll. + I suspect kqueue impl can be reused by *BSD, and in the\r\n>> end only 3 functions are kqueue-specific.\r\n>\r\n> I don't think this is going to change much for the different BSDs,\r\n> probably some differences in syscall numbers, but I think the rest\r\n> 'just works.' Are you intending to submit a CL to implement this on\r\n> the BSDs?\r\n\r\nWhen at least 1 OS is in, I will ask platform maintainers to port it\r\nto BSD/Windows/Plan9.\r\nYes, for BSD it can be as simple as implementing necessary syscalls and testing.\r\n",
			"disapproval": false,
			"date": "2013-03-08 17:43:28.078970",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/3/8 Dmitry Vyukov <dvyukov@google.com>:\r\n> On Fri, Mar 8, 2013 at 9:39 PM, Devon H. O'Dell <devon.odell@gmail.com> wrote:\r\n>> 2013/3/7  <dvyukov@google.com>:\r\n>>> On 2013/03/07 23:49:36, bradfitz wrote:\r\n>>>>\r\n>>>> This will be useful for everybody who runs servers on Macs.\r\n>>>\r\n>>> Local godoc will be blazingly fast as well :)\r\n>>>\r\n>>> Seriously, the idea was to test common code with both epoll and kqueue,\r\n>>> see what's common and what's different, and whether is can work with\r\n>>> anything different than epoll. The next change will do the same for\r\n>>> linux/epoll. + I suspect kqueue impl can be reused by *BSD, and in the\r\n>>> end only 3 functions are kqueue-specific.\r\n>>\r\n>> I don't think this is going to change much for the different BSDs,\r\n>> probably some differences in syscall numbers, but I think the rest\r\n>> 'just works.' Are you intending to submit a CL to implement this on\r\n>> the BSDs?\r\n>\r\n> When at least 1 OS is in, I will ask platform maintainers to port it\r\n> to BSD/Windows/Plan9.\r\n> Yes, for BSD it can be as simple as implementing necessary syscalls and testing.\r\n\r\nCool! This looks really great, looking forward to getting the rest working :D\r\n\r\n--dho\r\n",
			"disapproval": false,
			"date": "2013-03-08 17:46:12.201330",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "go1.0.3 vs. tip w/ CL 7569043+7448048 on darwin/amd64:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCP4OneShot-2                7759750      7637668   -1.57%\nBenchmarkTCP4OneShotTimeout-2         7713735      7588605   -1.62%\nBenchmarkTCP4Persistent-2               51776        27071  -47.72%\nBenchmarkTCP4PersistentTimeout-2        51556        27615  -46.44%\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/net/fd_poll_runtime.go\nFile src/pkg/net/fd_poll_runtime.go (right):\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/net/fd_poll_runtime.go#newcode15\nsrc/pkg/net/fd_poll_runtime.go:15: func runtime_pollServerInit()\nnet.runtime_PollServerInit\n  vs.\nnet.runtimePollServerInit\n  vs.\nnet.runtime_pollserverinit\n\nhm, the second one might be better?\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/runtime/netpoll_kqueue.c#newcode15\nsrc/pkg/runtime/netpoll_kqueue.c:15: runtime\u00b7netpollinit(void)\ncan we have netpoll.h that contains those prototypes?",
			"disapproval": false,
			"date": "2013-03-09 04:44:48.897430",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 9, 2013 at 8:44 AM,  <mikioh.mikioh@gmail.com> wrote:\r\n> go1.0.3 vs. tip w/ CL 7569043+7448048 on darwin/amd64:\r\n>\r\n> benchmark                           old ns/op    new ns/op    delta\r\n> BenchmarkTCP4OneShot-2                7759750      7637668   -1.57%\r\n> BenchmarkTCP4OneShotTimeout-2         7713735      7588605   -1.62%\r\n> BenchmarkTCP4Persistent-2               51776        27071  -47.72%\r\n> BenchmarkTCP4PersistentTimeout-2        51556        27615  -46.44%\r\n\r\nTCP connection creation seems to be slow on darwin for some OS internal reasons.\r\nOn Linux I see significant speedup on OneShot benchmarks as well.\r\nI mean that the problem is in the OS, not in our tcp stack.\r\n",
			"disapproval": false,
			"date": "2013-03-09 11:34:13.885930",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/22001/src/pkg/net/fd_poll_runtime.go\nFile src/pkg/net/fd_poll_runtime.go (right):\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/net/fd_poll_runtime.go#newcode15\nsrc/pkg/net/fd_poll_runtime.go:15: func runtime_pollServerInit()\nOn 2013/03/09 04:44:49, mikio wrote:\n> net.runtime_PollServerInit\n>   vs.\n> net.runtimePollServerInit\n>   vs.\n> net.runtime_pollserverinit\n> \n> hm, the second one might be better?\n\nruntime_ is the convention used in other places.\nIn package net it's called as runtime_fooBar(), and so it's clear that it is different and comes from runtime package.\nSee:\nzsema_darwin_386.c:sync\u00b7runtime_Semacquire(uint32* addr)\nruntime.c:runtime\u2215pprof\u00b7runtime_cyclesPerSecond(int64 res)\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/runtime/netpoll_kqueue.c#newcode15\nsrc/pkg/runtime/netpoll_kqueue.c:15: runtime\u00b7netpollinit(void)\nOn 2013/03/09 04:44:49, mikio wrote:\n> can we have netpoll.h that contains those prototypes?\n\n\nAt some point I've put them into netpoll.h, but there was only 3 or 4 functions, so I just moved it into runtime.h.\nHow strong do you feel about it?",
			"disapproval": false,
			"date": "2013-03-09 11:40:08.100550",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/22001/src/pkg/net/fd_poll_runtime.go\nFile src/pkg/net/fd_poll_runtime.go (right):\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/net/fd_poll_runtime.go#newcode15\nsrc/pkg/net/fd_poll_runtime.go:15: func runtime_pollServerInit()\nah, understood. thx.\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/22001/src/pkg/runtime/netpoll_kqueue.c#newcode15\nsrc/pkg/runtime/netpoll_kqueue.c:15: runtime\u00b7netpollinit(void)\nfine with runtime.h.",
			"disapproval": false,
			"date": "2013-03-09 12:23:40.413230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\nthis holds another big piece of changes for soaking",
			"disapproval": false,
			"date": "2013-03-12 08:13:42.261490",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c\nFile src/pkg/runtime/netpoll.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode62\nsrc/pkg/runtime/netpoll.c:62: net\u00b7runtime_pollServerInit(void)\nOn 2013/03/12 13:55:24, iant wrote:\n> Why not make this netpoll.goc and put it in package net?\n\nDo you mean that it will just #include \"../runtime/runtime.h\"?\nI did not think about such possibility. Will it work? I will try.\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode68\nsrc/pkg/runtime/netpoll.c:68: net\u00b7runtime_pollOpen(intgo intfd, PollFD *fd, intgo errno)\nOn 2013/03/12 13:55:24, iant wrote:\n> This is confusing.  In the net package, this function returns a pollServer. \n> Here it returns a PollFD.  We should use the same name in both places.\n\nYes, it is confusing.\nI would like to pass opaque 'uintptr ctx' (the memory is not garbage-collected, so it's fine for Go to hold uintptr). But I reuse netFD.pollServer var for it, so the types become inconsistent. I don't want to name fd descriptor pollServer here as well.\n\nI can add additional var to netFD, then pollServer will be used in fd_poll_unix.go and this new var 'uintptr pfd' will be used in fd_poll_runtime.go.\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode70\nsrc/pkg/runtime/netpoll.c:70: fd = allocFD();\nOn 2013/03/12 13:55:24, iant wrote:\n> I find this naming a bit confusing, as in this directory fd normally denotes a\n> file descriptor.  Perhaps pfd?\n\nWill fix\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll_kqueue.c#newcode59\nsrc/pkg/runtime/netpoll_kqueue.c:59: runtime\u00b7netpoll(bool block)\nOn 2013/03/12 13:55:24, iant wrote:\n> What calls this?\n\nIt's called from not yet submitted https://codereview.appspot.com/7448048/\n(I am forced to use double buffering)\nThere it's called by worked threads looking for work",
			"disapproval": false,
			"date": "2013-03-12 16:32:18.122030",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/12 16:36:25, rsc wrote:\n\n> By \"put it in package net\" I believe Ian meant writing 'package net' in the\n> .goc file. You cannot put a .goc file in the net directory. See time.goc\n> for an example.\n\nYes.\n\nIan",
			"disapproval": false,
			"date": "2013-03-12 16:37:55.526940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The overall structure seems fine. I agree with Ian's comments about names.\nPlease update defs_darwin.go and regenerate the header files using the recipe.\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/defs_darwin_386.h\nFile src/pkg/runtime/defs_darwin_386.h (right):\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/defs_darwin_386.h#newcode1\nsrc/pkg/runtime/defs_darwin_386.h:1: // Created by cgo -cdefs - DO NOT EDIT\nI don't see any corresponding changes to defs_darwin.go in this CL.\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c\nFile src/pkg/runtime/netpoll.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode47\nsrc/pkg/runtime/netpoll.c:47: } s;\nHow about calling this pollcache?\nlock(&pollcache) looks better than lock(&s);\n\nThe field can be named 'first' or something like that.",
			"disapproval": false,
			"date": "2013-03-12 16:50:51.823630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 12, 2013 at 12:32 PM, <dvyukov@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7569043/diff/40001/src/**\r\n> pkg/runtime/netpoll.c<https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c>\r\n> File src/pkg/runtime/netpoll.c (right):\r\n>\r\n> https://codereview.appspot.**com/7569043/diff/40001/src/**\r\n> pkg/runtime/netpoll.c#**newcode62<https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode62>\r\n> src/pkg/runtime/netpoll.c:62: net\u00b7runtime_pollServerInit(**void)\r\n> On 2013/03/12 13:55:24, iant wrote:\r\n>\r\n>> Why not make this netpoll.goc and put it in package net?\r\n>>\r\n>\r\n> Do you mean that it will just #include \"../runtime/runtime.h\"?\r\n> I did not think about such possibility. Will it work? I will try.\r\n\r\n\r\nBy \"put it in package net\" I believe Ian meant writing 'package net' in the\r\n.goc file. You cannot put a .goc file in the net directory. See time.goc\r\nfor an example.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-12 16:36:25.520370",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c\nFile src/pkg/runtime/netpoll.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode68\nsrc/pkg/runtime/netpoll.c:68: net\u00b7runtime_pollOpen(intgo intfd, PollFD *fd, intgo errno)\nOn 2013/03/12 16:32:18, dvyukov wrote:\n> On 2013/03/12 13:55:24, iant wrote:\n> > This is confusing.  In the net package, this function returns a pollServer. \n> > Here it returns a PollFD.  We should use the same name in both places.\n> \n> Yes, it is confusing.\n> I would like to pass opaque 'uintptr ctx' (the memory is not garbage-collected,\n> so it's fine for Go to hold uintptr). But I reuse netFD.pollServer var for it,\n> so the types become inconsistent. I don't want to name fd descriptor pollServer\n> here as well.\n\nWell, why not?  It's a pollserver or it isn't.  Either you are obscuring matters in the net package or you are obscuring them here.\n\nPerhaps we should pick a new name and use it in the net package and here.",
			"disapproval": false,
			"date": "2013-03-12 16:40:12.771840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 12, 2013 at 8:40 PM,  <iant@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c\r\n> File src/pkg/runtime/netpoll.c (right):\r\n>\r\n> https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode68\r\n> src/pkg/runtime/netpoll.c:68: net\u00b7runtime_pollOpen(intgo intfd, PollFD\r\n> *fd, intgo errno)\r\n> On 2013/03/12 16:32:18, dvyukov wrote:\r\n>>\r\n>> On 2013/03/12 13:55:24, iant wrote:\r\n>> > This is confusing.  In the net package, this function returns a\r\n>\r\n> pollServer.\r\n>>\r\n>> > Here it returns a PollFD.  We should use the same name in both\r\n>\r\n> places.\r\n>\r\n>> Yes, it is confusing.\r\n>> I would like to pass opaque 'uintptr ctx' (the memory is not\r\n>\r\n> garbage-collected,\r\n>>\r\n>> so it's fine for Go to hold uintptr). But I reuse netFD.pollServer var\r\n>\r\n> for it,\r\n>>\r\n>> so the types become inconsistent. I don't want to name fd descriptor\r\n>\r\n> pollServer\r\n>>\r\n>> here as well.\r\n>\r\n>\r\n> Well, why not?  It's a pollserver or it isn't.  Either you are obscuring\r\n> matters in the net package or you are obscuring them here.\r\n>\r\n> Perhaps we should pick a new name and use it in the net package and\r\n> here.\r\n\r\n\r\nI will look into this.\r\n\r\nnetFD contains the following fileds that are used only in\r\nfd_poll_unix.go but not used in fd_poll_runtine.go:\r\n        // read and write deadlines\r\n        rdeadline, wdeadline deadline\r\n        // owned by fd wait server\r\n        ncr, ncw int\r\n\r\nSo my plain is to make:\r\ntype netFD struct {\r\n  ...\r\n  pd pollDesc\r\n}\r\n\r\nand then define pollDesc in fd_poll_unix.go and in fd_poll_runtine.go\r\ndifferently.\r\n",
			"disapproval": false,
			"date": "2013-03-12 16:47:41.151530",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 12, 2013 at 8:47 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Tue, Mar 12, 2013 at 8:40 PM,  <iant@golang.org> wrote:\r\n>>\r\n>> https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c\r\n>> File src/pkg/runtime/netpoll.c (right):\r\n>>\r\n>> https://codereview.appspot.com/7569043/diff/40001/src/pkg/runtime/netpoll.c#newcode68\r\n>> src/pkg/runtime/netpoll.c:68: net\u00b7runtime_pollOpen(intgo intfd, PollFD\r\n>> *fd, intgo errno)\r\n>> On 2013/03/12 16:32:18, dvyukov wrote:\r\n>>>\r\n>>> On 2013/03/12 13:55:24, iant wrote:\r\n>>> > This is confusing.  In the net package, this function returns a\r\n>>\r\n>> pollServer.\r\n>>>\r\n>>> > Here it returns a PollFD.  We should use the same name in both\r\n>>\r\n>> places.\r\n>>\r\n>>> Yes, it is confusing.\r\n>>> I would like to pass opaque 'uintptr ctx' (the memory is not\r\n>>\r\n>> garbage-collected,\r\n>>>\r\n>>> so it's fine for Go to hold uintptr). But I reuse netFD.pollServer var\r\n>>\r\n>> for it,\r\n>>>\r\n>>> so the types become inconsistent. I don't want to name fd descriptor\r\n>>\r\n>> pollServer\r\n>>>\r\n>>> here as well.\r\n>>\r\n>>\r\n>> Well, why not?  It's a pollserver or it isn't.  Either you are obscuring\r\n>> matters in the net package or you are obscuring them here.\r\n>>\r\n>> Perhaps we should pick a new name and use it in the net package and\r\n>> here.\r\n>\r\n>\r\n> I will look into this.\r\n>\r\n> netFD contains the following fileds that are used only in\r\n> fd_poll_unix.go but not used in fd_poll_runtine.go:\r\n>         // read and write deadlines\r\n>         rdeadline, wdeadline deadline\r\n>         // owned by fd wait server\r\n>         ncr, ncw int\r\n>\r\n> So my plain is to make:\r\n> type netFD struct {\r\n>   ...\r\n>   pd pollDesc\r\n> }\r\n>\r\n> and then define pollDesc in fd_poll_unix.go and in fd_poll_runtine.go\r\n> differently.\r\n\r\n\r\nSent https://codereview.appspot.com/7762044 separately with this refactoring.\r\nAfter that CL, this CL will contain:\r\n\r\ntype pollDesc struct {\r\n    runtimeCtx uintptr\r\n}\r\n",
			"disapproval": false,
			"date": "2013-03-12 18:32:22.429910",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/12 16:50:51, rsc wrote:\n> The overall structure seems fine. I agree with Ian's comments about names.\n> Please update defs_darwin.go and regenerate the header files using the recipe.\n\n\nWhen I do:\n\n--- a/src/pkg/runtime/defs1_linux.go\tTue Mar 12 21:14:26 2013 +0400\n+++ b/src/pkg/runtime/defs1_linux.go\tTue Mar 12 23:53:12 2013 +0400\n@@ -15,12 +15,29 @@\n /*\n #include <ucontext.h>\n #include <fcntl.h>\n+#include <errno.h>\n+#include <sys/epoll.h>\n */\n import \"C\"\n \n const (\n+\tEINTR\t\t= C.EINTR\n+\tEAGAIN\t\t= C.EAGAIN\n+\tENOMEM\t\t= C.ENOMEM\n+\n \tO_RDONLY  = C.O_RDONLY\n \tO_CLOEXEC = C.O_CLOEXEC\n+\n+\tEPOLLIN\t\t= C.EPOLLIN\n+\tEPOLLOUT\t= C.EPOLLOUT\n+\tEPOLLERR\t= C.EPOLLERR\n+\tEPOLLHUP\t= C.EPOLLHUP\n+\tEPOLLRDHUP\t= C.EPOLLRDHUP\n+\tEPOLLET\t\t= C.EPOLLET\n+\tEPOLL_CLOEXEC\t= C.EPOLL_CLOEXEC\n+\tEPOLL_CTL_ADD\t= C.EPOLL_CTL_ADD\n+\tEPOLL_CTL_DEL\t= C.EPOLL_CTL_DEL\n+\tEPOLL_CTL_MOD\t= C.EPOLL_CTL_MOD\n )\n \n type Usigset C.__sigset_t\n@@ -35,3 +52,4 @@\n type Mcontext C.mcontext_t\n type Ucontext C.ucontext_t\n type Sigcontext C.struct_sigcontext\n+type EpollEvent C.epoll_event\n\n\nIt says:\n$ GOARCH=amd64 go tool cgo -cdefs defs1_linux.go\n1: error: 'epoll_event' undeclared (first use in this function)\n1: note: each undeclared identifier is reported only once for each function it appears in\n\nwhile the struct is there:\n\ntypedef union epoll_data\n{\n  void *ptr;\n  int fd;\n  uint32_t u32;\n  uint64_t u64;\n} epoll_data_t;\n\nstruct epoll_event\n{\n  uint32_t events;      /* Epoll events */\n  epoll_data_t data;    /* User data variable */\n} __attribute__ ((__packed__));",
			"disapproval": false,
			"date": "2013-03-12 19:54:32.007790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Try C.struct_epoll_event.\r\n",
			"disapproval": false,
			"date": "2013-03-12 19:58:02.315360",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Addressed all comments, except autogenerated defs (need darwin machine for that).\nPlease take a look at all other files except defs.",
			"disapproval": false,
			"date": "2013-03-12 20:17:48.832740",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/59001/src/pkg/net/fd_poll_unix.go\nFile src/pkg/net/fd_poll_unix.go (right):\n\nhttps://codereview.appspot.com/7569043/diff/59001/src/pkg/net/fd_poll_unix.go#newcode5\nsrc/pkg/net/fd_poll_unix.go:5: // +build darwin freebsd netbsd openbsd\nIs this +build line right?\n\nhttps://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll.c\nFile src/pkg/runtime/netpoll.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll.c#newcode57\nsrc/pkg/runtime/netpoll.c:57: void\nThis is still not netpoll.goc.\n\nhttps://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll_kqueue.c#newcode68\nsrc/pkg/runtime/netpoll_kqueue.c:68: tp = nil;\nIf block is true, we will block forever.  But what if there is some goroutine waiting on a timer?  What is going to get that goroutine to run if there is no network I/O, when GOMAXPROCS == 1?",
			"disapproval": false,
			"date": "2013-03-12 20:52:06.811380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll_kqueue.c#newcode68\nsrc/pkg/runtime/netpoll_kqueue.c:68: tp = nil;\nOn 2013/03/12 20:52:06, iant wrote:\n> If block is true, we will block forever.  But what if there is some goroutine\n> waiting on a timer?  What is going to get that goroutine to run if there is no\n> network I/O, when GOMAXPROCS == 1?\n\nnetpoll is running outside of G and w/o P, it is called by otherwise idle worker threads or by sysmon thread.\nso it timer G exits from the sleep, it can acquire a spare P and continue running Go code",
			"disapproval": false,
			"date": "2013-03-13 12:04:24.266510",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/12 20:52:06, iant wrote:\n> https://codereview.appspot.com/7569043/diff/59001/src/pkg/net/fd_poll_unix.go#newcode5\n> src/pkg/net/fd_poll_unix.go:5: // +build darwin freebsd netbsd openbsd\n> Is this +build line right?\n\n\nNo, it is not\n\n\n> https://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll.c\n> File src/pkg/runtime/netpoll.c (right):\n> \n> https://codereview.appspot.com/7569043/diff/59001/src/pkg/runtime/netpoll.c#newcode57\n> src/pkg/runtime/netpoll.c:57: void\n> This is still not netpoll.goc.\n\n\nYeah, sorry",
			"disapproval": false,
			"date": "2013-03-13 13:39:40.745560",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nbut see if rsc has any comments.\n\nhttps://codereview.appspot.com/7569043/diff/84001/src/pkg/runtime/netpoll.goc\nFile src/pkg/runtime/netpoll.goc (right):\n\nhttps://codereview.appspot.com/7569043/diff/84001/src/pkg/runtime/netpoll.goc#newcode147\nsrc/pkg/runtime/netpoll.goc:147: pd->rt.arg.type = (Type*)pd->seq;\nThis needs a comment.\n\nhttps://codereview.appspot.com/7569043/diff/84001/src/pkg/runtime/netpoll.goc#newcode274\nsrc/pkg/runtime/netpoll.goc:274: seq = (uint32)(uintptr)arg.type;\nThis needs a comment.\nWhy cast to uint32?  The type of pd->seq is uintptr.",
			"disapproval": false,
			"date": "2013-03-13 13:54:07.484410",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI've fixed all the comments\nnetpoll now goc\nbuild tags are fixed\ndefs are generated",
			"disapproval": false,
			"date": "2013-03-13 13:41:18.276400",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after fixes below\n\nhttps://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc\nFile src/pkg/runtime/netpoll.goc (right):\n\nhttps://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc#newcode99\nsrc/pkg/runtime/netpoll.goc:99: return;\nBecause of the way that goc2c works, you cannot return in the middle of a function that has return values. The flushing of the return values only happens at the closing } of the function. So this needs to be goto ret;, with a ret: label at the bottom of the function. Or better you could goto unlock and put the label before the unlock call.\n\nhttps://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc#newcode113\nsrc/pkg/runtime/netpoll.goc:113: return;\nThis too.\n\nhttps://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc#newcode124\nsrc/pkg/runtime/netpoll.goc:124: return;\nThis is fine because there are no return values.",
			"disapproval": false,
			"date": "2013-03-13 16:52:56.937130",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/13 13:54:07, iant wrote:\n> LGTM\n> \n> but see if rsc has any comments.\n> \n> https://codereview.appspot.com/7569043/diff/84001/src/pkg/runtime/netpoll.goc\n> File src/pkg/runtime/netpoll.goc (right):\n> \n> https://codereview.appspot.com/7569043/diff/84001/src/pkg/runtime/netpoll.goc#newcode147\n> src/pkg/runtime/netpoll.goc:147: pd->rt.arg.type = (Type*)pd->seq;\n> This needs a comment.\n> \n> https://codereview.appspot.com/7569043/diff/84001/src/pkg/runtime/netpoll.goc#newcode274\n> src/pkg/runtime/netpoll.goc:274: seq = (uint32)(uintptr)arg.type;\n> This needs a comment.\n> Why cast to uint32?  The type of pd->seq is uintptr.\n\nDone\nThanks!",
			"disapproval": false,
			"date": "2013-03-13 14:37:15.728080",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/13 16:52:56, rsc wrote:\n> LGTM after fixes below\n> \n> https://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc\n> File src/pkg/runtime/netpoll.goc (right):\n> \n> https://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc#newcode99\n> src/pkg/runtime/netpoll.goc:99: return;\n> Because of the way that goc2c works, you cannot return in the middle of a\n> function that has return values. The flushing of the return values only happens\n> at the closing } of the function. So this needs to be goto ret;, with a ret:\n> label at the bottom of the function. Or better you could goto unlock and put the\n> label before the unlock call.\n> \n> https://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc#newcode113\n> src/pkg/runtime/netpoll.goc:113: return;\n> This too.\n> \n> https://codereview.appspot.com/7569043/diff/93013/src/pkg/runtime/netpoll.goc#newcode124\n> src/pkg/runtime/netpoll.goc:124: return;\n> This is fine because there are no return values.\n\nDone.\nI've fixed the third case as well for consistency.",
			"disapproval": false,
			"date": "2013-03-14 06:38:11.145500",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5af2130aec77 ***\n\nruntime: integrated network poller for darwin\nvs tip:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCP4Persistent                 67786        33175  -51.06%\nBenchmarkTCP4Persistent-2               49085        31227  -36.38%\nBenchmarkTCP4PersistentTimeout          69265        32565  -52.98%\nBenchmarkTCP4PersistentTimeout-2        49217        32588  -33.79%\n\nvs old scheduler:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCP4Persistent                 63517        33175  -47.77%\nBenchmarkTCP4Persistent-2               54760        31227  -42.97%\nBenchmarkTCP4PersistentTimeout          63234        32565  -48.50%\nBenchmarkTCP4PersistentTimeout-2        56956        32588  -42.78%\n\nR=golang-dev, bradfitz, devon.odell, mikioh.mikioh, iant, rsc\nCC=golang-dev, pabuhr\nhttps://codereview.appspot.com/7569043",
			"disapproval": false,
			"date": "2013-03-14 06:48:14.475360",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"devon.odell@gmail.com",
				"mikioh.mikioh@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"pabuhr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7569043/diff/104001/src/pkg/runtime/netpoll_kqueue.c\nFile src/pkg/runtime/netpoll_kqueue.c (right):\n\nhttps://codereview.appspot.com/7569043/diff/104001/src/pkg/runtime/netpoll_kqueue.c#newcode40\nsrc/pkg/runtime/netpoll_kqueue.c:40: ev[0].flags = EV_ADD|EV_RECEIPT|EV_CLEAR;\nOf all the *BSDs out there, only FreeBSD and Darwin support EV_RECEIPT,\nand on platform without such support, if we want to split registering\nevents and waiting for them into two kevent calls, we can't check for\nerrors (as if we provide non-nil eventlist to kevent, it will wait for\nthose events).\n\nPS: \nI looked at several cross platform event handling libraries with kqueue\nsupport, and all of them are managing array of (networking) kevent in\nuser space and register them at the same time waiting for them.\n\nperhaps we should adopt a similar way for portability between *BSDs.",
			"disapproval": false,
			"date": "2013-03-17 21:24:28.658860",
			"approval": false
		},
		{
			"sender": "pabuhr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "    Peter, can you take a look at this?\r\n\r\nHey Dmitry, I did see this message go by about a week ago, but I though you\r\nwere\r\nreferring to the other \"Peter\" on the Go team. So I ignored it. ;-)\r\n\r\nI'm still learning a LOT about stuff here at Google and with the Go team. I\r\nknow it's late,\r\nbut I'll try to look through the code this week, and see if I can generate\r\nany useful comments.\r\n\r\nSorry about the misunderstanding, and thank you can asking me to look at\r\nthe code.\r\n\r\n\r\nOn Fri, Mar 8, 2013 at 9:25 AM, <dvyukov@google.com> wrote:\r\n\r\n> Peter, can you take a look at this?\r\n>\r\n> https://codereview.appspot.**com/7569043/<https://codereview.appspot.com/7569043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-18 03:20:42.847700",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 18, 2013 at 7:20 AM, Peter Buhr <pabuhr@google.com> wrote:\r\n>     Peter, can you take a look at this?\r\n>\r\n> Hey Dmitry, I did see this message go by about a week ago, but I though you\r\n> were\r\n> referring to the other \"Peter\" on the Go team. So I ignored it. ;-)\r\n>\r\n> I'm still learning a LOT about stuff here at Google and with the Go team. I\r\n> know it's late,\r\n> but I'll try to look through the code this week, and see if I can generate\r\n> any useful comments.\r\n>\r\n> Sorry about the misunderstanding, and thank you can asking me to look at the\r\n> code.\r\n\r\n\r\nUseful comments are never late :)\r\n\r\nThere are still some open questions:\r\n- whether kqueue needs explicit fd unregistration (as epoll)?\r\n- how to port kqueue to darwin/freebsd/netbsd/openbsd?\r\n- is edge-triggered IO a good idea here?\r\n- why my rblock idea\r\n(https://codereview.appspot.com/7326051/diff/10002/src/pkg/net/fd_linux_amd64.go\r\nline 260) does not work on linux in some conditions?\r\n",
			"disapproval": false,
			"date": "2013-03-18 04:10:37.035170",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 7569043: runtime: integrated network poller for darwin",
	"created": "2013-03-07 13:40:34.660700",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		9001,
		11001,
		14001,
		16001,
		22001,
		40001,
		56001,
		59001,
		64001,
		68001,
		70001,
		73001,
		50002,
		84001,
		36014,
		95001,
		93013,
		28002,
		104001
	],
	"modified": "2013-03-17 21:24:29.071750",
	"closed": true,
	"issue": 7569043
}