{
	"description": "cmd/gc, runtime: use reflection to instrument struct slice operations.\n\nInstrumentation of embedded fields is not supported.\n\nUpdate issue 4453",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-28 22:11:18.058660",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe this is just getting ridiculously complicated. Treating everything as slices of bytes would be marginally less effective and cover all cases (slice of structs, slice of arrays, slice of structs of arrays, slice of arrays of structs with embedded arrays, and so on).\n\nA less drastic method would be to instrument with granularity 1/2/4/8 bytes depending on the type components.",
			"disapproval": false,
			"date": "2013-03-28 22:18:08.329530",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/28 22:18:08, remyoudompheng wrote:\n> Maybe this is just getting ridiculously complicated. Treating everything as\n> slices of bytes would be marginally less effective and cover all cases (slice of\n> structs, slice of arrays, slice of structs of arrays, slice of arrays of structs\n> with embedded arrays, and so on).\n> \n> A less drastic method would be to instrument with granularity 1/2/4/8 bytes\n> depending on the type components.\n\nThanks!\n\nI won't be able to review this right now.\nAnd I would like Russ to also take a look.",
			"disapproval": false,
			"date": "2013-03-29 06:48:16.655240",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping.\n\nWhat's the status of this? Please close if it's no longer relevant.",
			"disapproval": false,
			"date": "2013-06-04 22:16:09.255840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/04 22:16:09, bradfitz wrote:\n> ping.\n> \n> What's the status of this? Please close if it's no longer relevant.\n\nIt's still relevant.\nI will take a look soon.",
			"disapproval": false,
			"date": "2013-06-05 08:17:20.155760",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL won't be needed when https://codereview.appspot.com/10082043/ is landed. With that revision race detector runtime processes all bytes within the range, so the 'step' argument is ignored and it can catch a race on any byte in the range.",
			"disapproval": false,
			"date": "2013-06-06 15:54:37.735120",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, that looks very nice: could we remove the step thing from the\r\nruntime and runtime/race in a separate patch?\r\n\r\n2013/6/6, dvyukov@google.com <dvyukov@google.com>:\r\n> This CL won't be needed when https://codereview.appspot.com/10082043/ is\r\n> landed. With that revision race detector runtime processes all bytes\r\n> within the range, so the 'step' argument is ignored and it can catch a\r\n> race on any byte in the range.\r\n>\r\n>\r\n> https://codereview.appspot.com/7566046/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-06 16:01:52.831390",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 6, 2013 at 8:01 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> Thanks, that looks very nice: could we remove the step thing from the\r\n> runtime and runtime/race in a separate patch?\r\n\r\nSure.\r\n\r\nThis also means that when we need to instrument struct/array access\r\ninside the compiler, we can just emit rangeread/rangewrite w/o\r\nbothering about the exact layout.\r\n\r\n\r\n\r\n> 2013/6/6, dvyukov@google.com <dvyukov@google.com>:\r\n>> This CL won't be needed when https://codereview.appspot.com/10082043/ is\r\n>> landed. With that revision race detector runtime processes all bytes\r\n>> within the range, so the 'step' argument is ignored and it can catch a\r\n>> race on any byte in the range.\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/7566046/\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-06-06 16:05:34.699910",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-06-07 11:11:00.695060",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 6, 2013 at 8:01 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> Thanks, that looks very nice: could we remove the step thing from the\r\n> runtime and runtime/race in a separate patch?\r\n\r\nMailed https://codereview.appspot.com/10259043\r\n\r\n\r\n> 2013/6/6, dvyukov@google.com <dvyukov@google.com>:\r\n>> This CL won't be needed when https://codereview.appspot.com/10082043/ is\r\n>> landed. With that revision race detector runtime processes all bytes\r\n>> within the range, so the 'step' argument is ignored and it can catch a\r\n>> race on any byte in the range.\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/7566046/\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-06-13 12:21:51.096020",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7566046: cmd/gc, runtime: use reflection to instrument struct sl...",
	"created": "2013-03-27 21:03:35.406610",
	"patchsets": [
		1,
		2001,
		10001,
		13001
	],
	"modified": "2013-06-13 12:21:51.287730",
	"closed": true,
	"issue": 7566046
}