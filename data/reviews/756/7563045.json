{
	"description": "cmd/ld: steps toward 386 host linking\n\n- Introduce MaxAlign constant and use in data layout\nand ELF section header.\n\n- Allow up to 16-byte alignment for large objects\n(will help Keith's hash changes).\n\n- Emit ELF symbol for .rathole (global /dev/null used by 8c).\n\n- Invoke gcc with -m32/-m64 as appropriate.\n\n- Don't invoke gcc if writing the .o file failed.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-03-07 18:01:59.250400",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7563045/diff/6008/src/cmd/8l/l.h\nFile src/cmd/8l/l.h (right):\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/8l/l.h#newcode45\nsrc/cmd/8l/l.h:45: MaxAlign = 16,\t// max data alignment\nWhy use 16 for 8l and 8 for 6l?  Shouldn't they be the same?\n\nNote that there are now AVX instructions (vmovaps and friends) that require alignment to a 32-byte boundary.\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c#newcode886\nsrc/cmd/ld/data.c:886: if(t >= 16 && MaxAlign >= 16)\nAdd a line for 32 to handle vmovaps.  It will only affect arrays.\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c#newcode893\nsrc/cmd/ld/data.c:893: return rnd(datsize, 4);\nWhy put a 2 byte value at a 4-byte alignment?\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c#newcode1015\nsrc/cmd/ld/data.c:1015: datsize = rnd(datsize, MaxAlign);\nDon't you need to check s->align here?  You need to honor the ELF section requested alignment even if it is larger than MaxAlign.\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/elf.c\nFile src/cmd/ld/elf.c (right):\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/elf.c#newcode765\nsrc/cmd/ld/elf.c:765: sh->addralign = MaxAlign;\nWe should really be recording the maximum alignment that we see in the section and storing it in a new field in Section and using it here.",
			"disapproval": false,
			"date": "2013-03-07 19:27:23.908830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/8l/l.h\nFile src/cmd/8l/l.h (right):\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/8l/l.h#newcode45\nsrc/cmd/8l/l.h:45: MaxAlign = 16,\t// max data alignment\nOn 2013/03/07 19:27:24, iant wrote:\n> Why use 16 for 8l and 8 for 6l?  Shouldn't they be the same?\n> \n> Note that there are now AVX instructions (vmovaps and friends) that require\n> alignment to a 32-byte boundary.\n\nDone.\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c#newcode886\nsrc/cmd/ld/data.c:886: if(t >= 16 && MaxAlign >= 16)\nOn 2013/03/07 19:27:24, iant wrote:\n> Add a line for 32 to handle vmovaps.  It will only affect arrays.\n\nDone.\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c#newcode893\nsrc/cmd/ld/data.c:893: return rnd(datsize, 4);\nOn 2013/03/07 19:27:24, iant wrote:\n> Why put a 2 byte value at a 4-byte alignment?\n\nI have no idea. That's what alignsymsize used to do. Removed.\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/data.c#newcode1015\nsrc/cmd/ld/data.c:1015: datsize = rnd(datsize, MaxAlign);\nOn 2013/03/07 19:27:24, iant wrote:\n> Don't you need to check s->align here?  You need to honor the ELF section\n> requested alignment even if it is larger than MaxAlign.\n\nDone.\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/elf.c\nFile src/cmd/ld/elf.c (right):\n\nhttps://codereview.appspot.com/7563045/diff/6008/src/cmd/ld/elf.c#newcode765\nsrc/cmd/ld/elf.c:765: sh->addralign = MaxAlign;\nOn 2013/03/07 19:27:24, iant wrote:\n> We should really be recording the maximum alignment that we see in the section\n> and storing it in a new field in Section and using it here.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-07 20:53:54.301170",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-07 22:03:34.654830",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bb71b657b5bc ***\n\ncmd/ld: steps toward 386 host linking\n\n- Introduce MaxAlign constant and use in data layout\nand ELF section header.\n\n- Allow up to 16-byte alignment for large objects\n(will help Keith's hash changes).\n\n- Emit ELF symbol for .rathole (global /dev/null used by 8c).\n\n- Invoke gcc with -m32/-m64 as appropriate.\n\n- Don't invoke gcc if writing the .o file failed.\n\nR=golang-dev, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7563045",
			"disapproval": false,
			"date": "2013-03-08 03:57:27.221480",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7563045: cmd/ld: steps toward 386 host linking",
	"created": "2013-03-07 16:46:43.335340",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		6008,
		15001,
		17001,
		25001
	],
	"modified": "2013-03-08 03:57:28.103900",
	"closed": true,
	"issue": 7563045
}