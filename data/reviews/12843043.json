{
	"description": "net: fix dial to raw IP networks on Windows\n\nAlso adds -rawip flag to enable raw IP facility access tests on Windows.\n\nFixes issue 6122.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com",
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-13 07:01:05.698430",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I have no windows stuff; didn't test this CL on windows.\r\nI'm happy if you have a spare time to run \"go test -rawip\" w/ Windows\r\nspecial priv., thanks.\r\nAlso I expect that some tests, multicast related stuff, will fail on\r\nsome versions, but it's fine for now.\r\n\r\nOn Tue, Aug 13, 2013 at 4:01 PM,  <mikioh.mikioh@gmail.com> wrote:\r\n> Reviewers: brainman, dvyukov,\r\n>\r\n> Message:\r\n> Hello alex.brainman@gmail.com, dvyukov@google.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: fix dial to raw IP networks on Windows\r\n>\r\n> Also adds -rawip flag to enable raw IP facility access tests on Windows.\r\n>\r\n> Fixes issue 6122.\r\n>\r\n> Please review this at https://codereview.appspot.com/12843043/\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/fd_windows.go\r\n>   M src/pkg/net/ipraw_test.go\r\n>   M src/pkg/net/multicast_test.go\r\n>   M src/pkg/net/packetconn_test.go\r\n>   M src/pkg/net/protoconn_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/fd_windows.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/fd_windows.go\r\n> +++ b/src/pkg/net/fd_windows.go\r\n> @@ -72,7 +72,8 @@\r\n>  }\r\n>\r\n>  func canUseConnectEx(net string) bool {\r\n> -       if net == \"udp\" || net == \"udp4\" || net == \"udp6\" {\r\n> +       switch net {\r\n> +       case \"udp\", \"udp4\", \"udp6\", \"ip\", \"ip4\", \"ip6\":\r\n>                 // ConnectEx windows API does not support connectionless\r\n> sockets.\r\n>                 return false\r\n>         }\r\n> Index: src/pkg/net/ipraw_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/ipraw_test.go\r\n> +++ b/src/pkg/net/ipraw_test.go\r\n> @@ -7,13 +7,17 @@\r\n>  import (\r\n>         \"bytes\"\r\n>         \"errors\"\r\n> +       \"flag\"\r\n>         \"fmt\"\r\n>         \"os\"\r\n>         \"reflect\"\r\n> +       \"runtime\"\r\n>         \"testing\"\r\n>         \"time\"\r\n>  )\r\n>\r\n> +var testRawIP = flag.Bool(\"rawip\", false, \"run test requires raw IP\r\n> facility access privilege\")\r\n> +\r\n>  type resolveIPAddrTest struct {\r\n>         net     string\r\n>         litAddr string\r\n> @@ -72,8 +76,13 @@\r\n>  }\r\n>\r\n>  func TestConnICMPEcho(t *testing.T) {\r\n> -       if os.Getuid() != 0 {\r\n> -               t.Skip(\"skipping test; must be root\")\r\n> +       switch runtime.GOOS {\r\n> +       case \"plan9\":\r\n> +               t.Skipf(\"skipping test on %q\", runtime.GOOS)\r\n> +       default:\r\n> +               if !*testRawIP {\r\n> +                       t.Skip(\"test disabled; use -rawip to enable\")\r\n> +               }\r\n>         }\r\n>\r\n>         for i, tt := range icmpEchoTests {\r\n> @@ -139,8 +148,13 @@\r\n>  }\r\n>\r\n>  func TestPacketConnICMPEcho(t *testing.T) {\r\n> -       if os.Getuid() != 0 {\r\n> -               t.Skip(\"skipping test; must be root\")\r\n> +       switch runtime.GOOS {\r\n> +       case \"plan9\":\r\n> +               t.Skipf(\"skipping test on %q\", runtime.GOOS)\r\n> +       default:\r\n> +               if !*testRawIP {\r\n> +                       t.Skip(\"test disabled; use -rawip to enable\")\r\n> +               }\r\n>         }\r\n>\r\n>         for i, tt := range icmpEchoTests {\r\n> @@ -337,8 +351,13 @@\r\n>  }\r\n>\r\n>  func TestIPConnLocalName(t *testing.T) {\r\n> -       if os.Getuid() != 0 {\r\n> -               t.Skip(\"skipping test; must be root\")\r\n> +       switch runtime.GOOS {\r\n> +       case \"plan9\":\r\n> +               t.Skipf(\"skipping test on %q\", runtime.GOOS)\r\n> +       default:\r\n> +               if !*testRawIP {\r\n> +                       t.Skip(\"test disabled; use -rawip to enable\")\r\n> +               }\r\n>         }\r\n>\r\n>         for _, tt := range ipConnLocalNameTests {\r\n> @@ -354,8 +373,13 @@\r\n>  }\r\n>\r\n>  func TestIPConnRemoteName(t *testing.T) {\r\n> -       if os.Getuid() != 0 {\r\n> -               t.Skip(\"skipping test; must be root\")\r\n> +       switch runtime.GOOS {\r\n> +       case \"plan9\":\r\n> +               t.Skipf(\"skipping test on %q\", runtime.GOOS)\r\n> +       default:\r\n> +               if !*testRawIP {\r\n> +                       t.Skip(\"test disabled; use -rawip to enable\")\r\n> +               }\r\n>         }\r\n>\r\n>         raddr := &IPAddr{IP: IPv4(127, 0, 0, 10).To4()}\r\n> Index: src/pkg/net/multicast_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/multicast_test.go\r\n> +++ b/src/pkg/net/multicast_test.go\r\n> @@ -6,7 +6,6 @@\r\n>\r\n>  import (\r\n>         \"fmt\"\r\n> -       \"os\"\r\n>         \"runtime\"\r\n>         \"testing\"\r\n>  )\r\n> @@ -95,13 +94,14 @@\r\n>         switch runtime.GOOS {\r\n>         case \"plan9\", \"solaris\":\r\n>                 t.Skipf(\"skipping test on %q\", runtime.GOOS)\r\n> +       default:\r\n> +               if !*testRawIP {\r\n> +                       t.Skip(\"test disabled; use -rawip to enable\")\r\n> +               }\r\n>         }\r\n>         if !supportsIPv6 {\r\n>                 t.Skip(\"ipv6 is not supported\")\r\n>         }\r\n> -       if os.Getuid() != 0 {\r\n> -               t.Skip(\"skipping test; must be root\")\r\n> -       }\r\n>\r\n>         closer := func(cs []*UDPConn) {\r\n>                 for _, c := range cs {\r\n> Index: src/pkg/net/packetconn_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/packetconn_test.go\r\n> +++ b/src/pkg/net/packetconn_test.go\r\n> @@ -51,9 +51,11 @@\r\n>                         switch runtime.GOOS {\r\n>                         case \"plan9\":\r\n>                                 continue\r\n> -                       }\r\n> -                       if os.Getuid() != 0 {\r\n> -                               continue\r\n> +                       default:\r\n> +                               if !*testRawIP {\r\n> +                                       t.Log(\"test disabled; use -rawip to\r\n> enable\")\r\n> +                                       continue\r\n> +                               }\r\n>                         }\r\n>                         var err error\r\n>                         wb, err = (&icmpMessage{\r\n> @@ -134,9 +136,11 @@\r\n>                         switch runtime.GOOS {\r\n>                         case \"plan9\":\r\n>                                 continue\r\n> -                       }\r\n> -                       if os.Getuid() != 0 {\r\n> -                               continue\r\n> +                       default:\r\n> +                               if !*testRawIP {\r\n> +                                       t.Log(\"test disabled; use -rawip to\r\n> enable\")\r\n> +                                       continue\r\n> +                               }\r\n>                         }\r\n>                         var err error\r\n>                         wb, err = (&icmpMessage{\r\n> Index: src/pkg/net/protoconn_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/net/protoconn_test.go\r\n> +++ b/src/pkg/net/protoconn_test.go\r\n> @@ -167,9 +167,10 @@\r\n>         switch runtime.GOOS {\r\n>         case \"plan9\":\r\n>                 t.Skipf(\"skipping test on %q\", runtime.GOOS)\r\n> -       }\r\n> -       if os.Getuid() != 0 {\r\n> -               t.Skipf(\"skipping test; must be root\")\r\n> +       default:\r\n> +               if !*testRawIP {\r\n> +                       t.Skip(\"test disabled; use -rawip to enable\")\r\n> +               }\r\n>         }\r\n>\r\n>         la, err := ResolveIPAddr(\"ip4\", \"127.0.0.1\")\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 07:08:07.764270",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/13 07:08:07, mikio wrote:\n> Sorry, I have no windows stuff; didn't test this CL on windows.\n> I'm happy if you have a spare time to run \"go test -rawip\" w/ Windows\n> special priv., thanks.\n> Also I expect that some tests, multicast related stuff, will fail on\n> some versions, but it's fine for now.\n> \n\nG:\\src\\pkg\\net>net.test.exe -rawip\n--- FAIL: TestConnICMPEcho (0.00 seconds)\n        ipraw_test.go:125: Conn.Read failed: WSARecv ip4 127.0.0.1: More data is available.\n--- FAIL: TestPacketConnICMPEcho (0.00 seconds)\n        ipraw_test.go:201: PacketConn.ReadFrom failed: WSARecvFrom ip4 0.0.0.0: More data is available.\n--- FAIL: TestIPConnLocalName (0.00 seconds)\n        ipraw_test.go:370: IPConn.LocalAddr failed\n--- FAIL: TestIPConnRemoteName (0.00 seconds)\n        ipraw_test.go:388: DialIP failed: dial ip 127.0.0.10: bind: An invalid argument was supplied.\nFAIL\n\nWhat should we do now?\n\nAlex",
			"disapproval": false,
			"date": "2013-08-13 07:16:43.012070",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. Wow, looks like,\r\n\r\n- I/O thru PacketConn: okay\r\n- I/O thru Conn: ng\r\n- Endpoint property: ng\r\n\r\nHm, I'll try MSDN tomorrow.\r\n\r\nOn Tue, Aug 13, 2013 at 4:16 PM,  <alex.brainman@gmail.com> wrote:\r\n> On 2013/08/13 07:08:07, mikio wrote:\r\n>>\r\n>> Sorry, I have no windows stuff; didn't test this CL on windows.\r\n>> I'm happy if you have a spare time to run \"go test -rawip\" w/ Windows\r\n>> special priv., thanks.\r\n>> Also I expect that some tests, multicast related stuff, will fail on\r\n>> some versions, but it's fine for now.\r\n>\r\n>\r\n>\r\n> G:\\src\\pkg\\net>net.test.exe -rawip\r\n> --- FAIL: TestConnICMPEcho (0.00 seconds)\r\n>         ipraw_test.go:125: Conn.Read failed: WSARecv ip4 127.0.0.1: More\r\n> data is available.\r\n> --- FAIL: TestPacketConnICMPEcho (0.00 seconds)\r\n>         ipraw_test.go:201: PacketConn.ReadFrom failed: WSARecvFrom ip4\r\n> 0.0.0.0: More data is available.\r\n> --- FAIL: TestIPConnLocalName (0.00 seconds)\r\n>         ipraw_test.go:370: IPConn.LocalAddr failed\r\n> --- FAIL: TestIPConnRemoteName (0.00 seconds)\r\n>         ipraw_test.go:388: DialIP failed: dial ip 127.0.0.10: bind: An\r\n> invalid argument was supplied.\r\n> FAIL\r\n>\r\n> What should we do now?\r\n>\r\n> Alex\r\n>\r\n> https://codereview.appspot.com/12843043/\r\n",
			"disapproval": false,
			"date": "2013-08-13 07:21:40.207940",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My previous post was on windows-386 Windows XP.\n\nThe following is windows-amd64 Windows 7 Pro:\n\nG:\\src\\pkg\\net>net.test.exe -rawip\n--- FAIL: TestConnICMPEcho (0.00 seconds)\n        ipraw_test.go:125: Conn.Read failed: WSARecv ip4 127.0.0.1: A message sent on a datagram socket was larger than the internal message buffer or some other network limit, or the buffer used to receive a datagram into was smaller than the datagram itself.\n--- FAIL: TestPacketConnICMPEcho (0.00 seconds)\n        ipraw_test.go:201: PacketConn.ReadFrom failed: WSARecvFrom ip4 0.0.0.0: A message sent on a datagram socket was larger than the internal message buffer or some other network limit, or the buffer used to receive a datagram into was smaller than the datagram itself.\n--- FAIL: TestIPConnLocalName (0.00 seconds)\n        ipraw_test.go:370: IPConn.LocalAddr failed\n--- FAIL: TestIPConnRemoteName (0.00 seconds)\n        ipraw_test.go:388: DialIP failed: dial ip 127.0.0.10: bind: An invalid argument was supplied.\nFAIL",
			"disapproval": false,
			"date": "2013-08-13 07:27:26.822780",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sobbing...\r\n\r\nOn Tue, Aug 13, 2013 at 4:27 PM,  <alex.brainman@gmail.com> wrote:\r\n> My previous post was on windows-386 Windows XP.\r\n>\r\n> The following is windows-amd64 Windows 7 Pro:\r\n>\r\n>\r\n> G:\\src\\pkg\\net>net.test.exe -rawip\r\n> --- FAIL: TestConnICMPEcho (0.00 seconds)\r\n>         ipraw_test.go:125: Conn.Read failed: WSARecv ip4 127.0.0.1: A\r\n> message sent on a datagram socket was larger than the internal message\r\n> buffer or some other network limit, or the buffer used to receive a\r\n> datagram into was smaller than the datagram itself.\r\n>\r\n> --- FAIL: TestPacketConnICMPEcho (0.00 seconds)\r\n>         ipraw_test.go:201: PacketConn.ReadFrom failed: WSARecvFrom ip4\r\n> 0.0.0.0: A message sent on a datagram socket was larger than the\r\n> internal message buffer or some other network limit, or the buffer used\r\n> to receive a datagram into was smaller than the datagram itself.\r\n>\r\n> --- FAIL: TestIPConnLocalName (0.00 seconds)\r\n>         ipraw_test.go:370: IPConn.LocalAddr failed\r\n> --- FAIL: TestIPConnRemoteName (0.00 seconds)\r\n>         ipraw_test.go:388: DialIP failed: dial ip 127.0.0.10: bind: An\r\n> invalid argument was supplied.\r\n> FAIL\r\n>\r\n>\r\n> https://codereview.appspot.com/12843043/\r\n",
			"disapproval": false,
			"date": "2013-08-13 07:31:37.229020",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 12843043: net: fix dial to raw IP networks on Windows",
	"created": "2013-08-13 06:56:33.275230",
	"patchsets": [
		1,
		3001,
		6001
	],
	"modified": "2013-08-13 07:31:37.456410",
	"closed": false,
	"issue": 12843043
}