{
	"description": "cmd/gc: initialize t->width in dgcsym() if required\n\nUpdate issue 5291.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"iant@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/24 13:45:19, iant wrote:\n> On 2013/04/24 11:09:28, DMorsing wrote:\n> > Which types are getting through to reflect without valid widths? I think this\n> is\n> > a bug elsewhere in gc and this is just a bandaid.\n> > \n> > GC type gen is after function compilation, so any type without a valid width\n> > will have been miscompiled anyway.\n> \n> You can clpatch 8607045 to get a test case that shows the problem.\n\nIn fact, that test case ought to be part of this CL.",
			"disapproval": false,
			"date": "2013-04-24 13:45:43.625190",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: iant@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-24 09:55:49.152030",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/24 11:09:28, DMorsing wrote:\n> Which types are getting through to reflect without valid widths? I think this is\n> a bug elsewhere in gc and this is just a bandaid.\n> \n> GC type gen is after function compilation, so any type without a valid width\n> will have been miscompiled anyway.\n\nYou can clpatch 8607045 to get a test case that shows the problem.",
			"disapproval": false,
			"date": "2013-04-24 13:45:19.394790",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Which types are getting through to reflect without valid widths? I think this is a bug elsewhere in gc and this is just a bandaid.\n\nGC type gen is after function compilation, so any type without a valid width will have been miscompiled anyway.",
			"disapproval": false,
			"date": "2013-04-24 11:09:28.875570",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/24 11:09:28, DMorsing wrote:\n> Which types are getting through to reflect without valid widths? I think this is\n> a bug elsewhere in gc and this is just a bandaid.\n> \n> GC type gen is after function compilation, so any type without a valid width\n> will have been miscompiled anyway.\n\nCalls to dowidth(Type*) are distributed over multiple places in src/cmd/gc/*.c and the rule seems to be that it is called to initialize struct Type before accessing certain fields of the struct.\n\nIt would be clearer to compute all widths in one pass and one place, but this doesn't seem to be the case in the current implementation. \n\nAlternatively, one could introduce an accessor function such as getwidth(Type* t). This would be safer to use that accessing t->width directly.",
			"disapproval": false,
			"date": "2013-04-24 11:47:53.130990",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/24 11:47:53, atom wrote:\n> On 2013/04/24 11:09:28, DMorsing wrote:\n> > Which types are getting through to reflect without valid widths? I think this\n> is\n> > a bug elsewhere in gc and this is just a bandaid.\n> > \n> > GC type gen is after function compilation, so any type without a valid width\n> > will have been miscompiled anyway.\n> \n> Calls to dowidth(Type*) are distributed over multiple places in src/cmd/gc/*.c\n> and the rule seems to be that it is called to initialize struct Type before\n> accessing certain fields of the struct.\n> \n\nThat is correct, but all those calls happen before or during codegen. If the width of a type isn't set after codegen, there's a good chance we're miscompiling code using that type.",
			"disapproval": false,
			"date": "2013-04-24 12:57:44.548010",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM when the test has been added.\n\nWe're not miscompiling things. The problem is that we don't calculate the width of types from other packages if we don't reference them in our code, but the .gc section might still reference them.\n\nhttps://codereview.appspot.com/8663052/diff/3/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttps://codereview.appspot.com/8663052/diff/3/src/cmd/gc/reflect.c#newcode1147\nsrc/cmd/gc/reflect.c:1147: if(t->width == BADWIDTH)\ns/width/type->width/",
			"disapproval": false,
			"date": "2013-04-24 14:53:20.143650",
			"approval": true
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8663052/diff/3/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttps://codereview.appspot.com/8663052/diff/3/src/cmd/gc/reflect.c#newcode1147\nsrc/cmd/gc/reflect.c:1147: if(t->width == BADWIDTH)\nOn 2013/04/24 14:53:20, DMorsing wrote:\n> s/width/type->width/\n\nDone.",
			"disapproval": false,
			"date": "2013-04-24 16:03:37.117160",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/24 13:45:43, iant wrote:\n> On 2013/04/24 13:45:19, iant wrote:\n> > On 2013/04/24 11:09:28, DMorsing wrote:\n> > > Which types are getting through to reflect without valid widths? I think\n> this\n> > is\n> > > a bug elsewhere in gc and this is just a bandaid.\n> > > \n> > > GC type gen is after function compilation, so any type without a valid width\n> > > will have been miscompiled anyway.\n> > \n> > You can clpatch 8607045 to get a test case that shows the problem.\n> \n> In fact, that test case ought to be part of this CL.\n\nDone.",
			"disapproval": false,
			"date": "2013-04-24 16:04:03.489420",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch looks good, test case needs a bit of cleanup.\n\nThanks.\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/pkg1.go\nFile test/fixedbugs/issue5291.dir/pkg1.go (right):\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/pkg1.go#newcode1\ntest/fixedbugs/issue5291.dir/pkg1.go:1: package pkg1\nNeeds a copyright header.  Sorry.\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/pkg1.go#newcode18\ntest/fixedbugs/issue5291.dir/pkg1.go:18: fmt.Println(\"Iteration\", count)\nLet's not bother to print this, I don't think it affects whether the bug hits or not.\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/prog.go\nFile test/fixedbugs/issue5291.dir/prog.go (right):\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/prog.go#newcode1\ntest/fixedbugs/issue5291.dir/prog.go:1: package main\nNeeds a copyright header.\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.out\nFile test/fixedbugs/issue5291.out (right):\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.out#newcode1\ntest/fixedbugs/issue5291.out:1: Iteration 0\nIf you remove the fmt.Print in pkg1.go then you don't need this file.",
			"disapproval": false,
			"date": "2013-04-25 00:43:12.618320",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1d079908dd84 ***\n\ncmd/gc: initialize t->width in dgcsym() if required\n\nUpdate issue 5291.\n\nR=golang-dev, daniel.morsing, iant, r\nCC=golang-dev\nhttps://codereview.appspot.com/8663052\n\nhttps://codereview.appspot.com/8663052/diff/23001/test/fixedbugs/issue5291.dir/pkg1.go\nFile test/fixedbugs/issue5291.dir/pkg1.go (right):\n\nhttps://codereview.appspot.com/8663052/diff/23001/test/fixedbugs/issue5291.dir/pkg1.go#newcode17\ntest/fixedbugs/issue5291.dir/pkg1.go:17: func Crashcall() (err error) {\nOn 2013/04/25 15:10:23, r wrote:\n> CrashCall please\n\nDone.",
			"disapproval": false,
			"date": "2013-04-25 16:47:21.394440",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/pkg1.go\nFile test/fixedbugs/issue5291.dir/pkg1.go (right):\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/pkg1.go#newcode1\ntest/fixedbugs/issue5291.dir/pkg1.go:1: package pkg1\nOn 2013/04/25 00:43:12, iant wrote:\n> Needs a copyright header.  Sorry.\n\nDone.\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/pkg1.go#newcode18\ntest/fixedbugs/issue5291.dir/pkg1.go:18: fmt.Println(\"Iteration\", count)\nOn 2013/04/25 00:43:12, iant wrote:\n> Let's not bother to print this, I don't think it affects whether the bug hits or\n> not.\n\nDone.\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/prog.go\nFile test/fixedbugs/issue5291.dir/prog.go (right):\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.dir/prog.go#newcode1\ntest/fixedbugs/issue5291.dir/prog.go:1: package main\nOn 2013/04/25 00:43:12, iant wrote:\n> Needs a copyright header.\n\nDone.\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.out\nFile test/fixedbugs/issue5291.out (right):\n\nhttps://codereview.appspot.com/8663052/diff/15001/test/fixedbugs/issue5291.out#newcode1\ntest/fixedbugs/issue5291.out:1: Iteration 0\nOn 2013/04/25 00:43:12, iant wrote:\n> If you remove the fmt.Print in pkg1.go then you don't need this file.\n\nDone.",
			"disapproval": false,
			"date": "2013-04-25 07:29:17.849640",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nWait for r.",
			"disapproval": false,
			"date": "2013-04-25 14:36:37.215110",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8663052/diff/23001/test/fixedbugs/issue5291.dir/pkg1.go\nFile test/fixedbugs/issue5291.dir/pkg1.go (right):\n\nhttps://codereview.appspot.com/8663052/diff/23001/test/fixedbugs/issue5291.dir/pkg1.go#newcode17\ntest/fixedbugs/issue5291.dir/pkg1.go:17: func Crashcall() (err error) {\nCrashCall please",
			"disapproval": false,
			"date": "2013-04-25 15:10:22.885260",
			"approval": true
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 8663052: cmd/gc: initialize t->width in dgcsym() if required",
	"created": "2013-04-24 09:21:19.765420",
	"patchsets": [
		1,
		2001,
		5001,
		3,
		15001,
		23001,
		30001,
		33001,
		36001
	],
	"modified": "2013-04-25 16:47:22.739610",
	"closed": true,
	"issue": 8663052
}