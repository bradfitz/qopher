{
	"description": "code.google.com/p/go.exp/go/types/typemap: a generic map whose keys are types.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"gri@golang.org",
		"seb.binet@gmail.com"
	],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp",
			"disapproval": false,
			"date": "2013-04-11 15:07:56.226350",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11 April 2013 17:50, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> You can have the fingerprint idea and still have memo(r)ization. You just\r\n> need to use the same fingerprinter. So the property is the fingerprint(typ)\r\n> is 1:1 with typ for a given fingerprinter. That should be fine.\r\n>\r\n> Here's a brute force approach: The fingerprinter keeps a list of all types\r\n> it ever saw. Each time it needs to fingerprint a new type, it compares it\r\n> (using IsIdentical) against all other types seen so far. It it is found,\r\n> the fingerprinter returns that type's index. Otherwise, it returns the list\r\n> length, and adds the type to the list...\r\n>\r\n> This can easily be sped up by having lists for each class of type, and\r\n> then further subdivided as necessary.\r\n>\r\n\r\nYou're right, we could add memoization to the fingerprinter if desired.\r\n\r\n\r\n> But what really should happen: go/types should provide an increasing\r\n> number for all types and objects created. That way this fingerprinter is\r\n> not needed. This needs to be done also for the AST eventually, because it's\r\n> the only way for fast mapping of nodes if one is not able to add additional\r\n> links to an existing node.\r\n>\r\n\r\nOther than being dense, what properties does a sequence number provide that\r\nthe address of the object does not?   Unlike fingerprints, neither is\r\ncanonical, i.e. two distinct Type objects x and y such that IsIdentical(x,\r\ny) would have different addresses and different sequence numbers---but the\r\nsame fingerprint.\r\n",
			"disapproval": false,
			"date": "2013-04-11 22:00:26.960280",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just a prelim. comment. More to come.\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go\nFile go/types/typemap/typemap.go (right):\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode1\ngo/types/typemap/typemap.go:1: // typemap defines type T, a hash-table-based mapping from Type keys\n// package typemap ...\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode1\ngo/types/typemap/typemap.go:1: // typemap defines type T, a hash-table-based mapping from Type keys\ns/Type keys/types/ ?\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode4\ngo/types/typemap/typemap.go:4: // additional work is required to build a map whose keys are types.\nMaybe there should just be a single function that takes as argument a Type t and that returns as result a unique value k so that there is a 1:1 relationship between t and k, and k can be used as map key?\n\nThat would have the significant advantage of being able to declare fully typed (values, at least) maps.",
			"disapproval": false,
			"date": "2013-04-11 18:28:10.263370",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go\nFile go/types/typemap/typemap.go (right):\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode1\ngo/types/typemap/typemap.go:1: // typemap defines type T, a hash-table-based mapping from Type keys\nOn 2013/04/11 18:28:10, gri wrote:\n> s/Type keys/types/ ?\n\nDone.\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode1\ngo/types/typemap/typemap.go:1: // typemap defines type T, a hash-table-based mapping from Type keys\nOn 2013/04/11 18:28:10, gri wrote:\n> // package typemap ...\n\nDone.\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode4\ngo/types/typemap/typemap.go:4: // additional work is required to build a map whose keys are types.\nOn 2013/04/11 18:28:10, gri wrote:\n> Maybe there should just be a single function that takes as argument a Type t and\n> that returns as result a unique value k so that there is a 1:1 relationship\n> between t and k, and k can be used as map key?\n> \n> That would have the significant advantage of being able to declare fully typed\n> (values, at least) maps.\n\nThis is an interesting idea.  I used the String() method as a fingerprinting function for some time until I realised that it isn't actually injective.  For example, it includes field names, which are not part of the equivalence relation of tuples (types.Result).  Also, it doesn't package-qualify unexported field/method names.\n\nIt's unclear which scheme is more efficient: your scheme increases the cost of hash computation since it is not memoized, but it decreases the cost of key equivalence testing since just a string comparison.  \n\nA downside of the approach is that fingerprints might not be human-readable, especially if optimised, so maps that use them would be unintelligible during debugging.  Perhaps this just means we should choose a human-readable encoding (like the JVM does for method signatures).\n\nI've implemented a quick draft in CL 8687043.  I haven't benchmarked either approach yet.",
			"disapproval": false,
			"date": "2013-04-11 21:29:01.975970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You can have the fingerprint idea and still have memo(r)ization. You just\r\nneed to use the same fingerprinter. So the property is the fingerprint(typ)\r\nis 1:1 with typ for a given fingerprinter. That should be fine.\r\n\r\nHere's a brute force approach: The fingerprinter keeps a list of all types\r\nit ever saw. Each time it needs to fingerprint a new type, it compares it\r\n(using IsIdentical) against all other types seen so far. It it is found,\r\nthe fingerprinter returns that type's index. Otherwise, it returns the list\r\nlength, and adds the type to the list...\r\n\r\nThis can easily be sped up by having lists for each class of type, and then\r\nfurther subdivided as necessary.\r\n\r\nBut what really should happen: go/types should provide an increasing number\r\nfor all types and objects created. That way this fingerprinter is not\r\nneeded. This needs to be done also for the AST eventually, because it's the\r\nonly way for fast mapping of nodes if one is not able to add additional\r\nlinks to an existing node.\r\n\r\n- gri\r\n\r\n\r\nOn Thu, Apr 11, 2013 at 2:29 PM, <adonovan@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/8665044/diff/8002/go/**\r\n> types/typemap/typemap.go<https://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go>\r\n> File go/types/typemap/typemap.go (right):\r\n>\r\n> https://codereview.appspot.**com/8665044/diff/8002/go/**\r\n> types/typemap/typemap.go#**newcode1<https://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode1>\r\n> go/types/typemap/typemap.go:1: // typemap defines type T, a\r\n> hash-table-based mapping from Type keys\r\n> On 2013/04/11 18:28:10, gri wrote:\r\n>\r\n>> s/Type keys/types/ ?\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8665044/diff/8002/go/**\r\n> types/typemap/typemap.go#**newcode1<https://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode1>\r\n> go/types/typemap/typemap.go:1: // typemap defines type T, a\r\n> hash-table-based mapping from Type keys\r\n> On 2013/04/11 18:28:10, gri wrote:\r\n>\r\n>> // package typemap ...\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8665044/diff/8002/go/**\r\n> types/typemap/typemap.go#**newcode4<https://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode4>\r\n> go/types/typemap/typemap.go:4: // additional work is required to build a\r\n> map whose keys are types.\r\n> On 2013/04/11 18:28:10, gri wrote:\r\n>\r\n>> Maybe there should just be a single function that takes as argument a\r\n>>\r\n> Type t and\r\n>\r\n>> that returns as result a unique value k so that there is a 1:1\r\n>>\r\n> relationship\r\n>\r\n>> between t and k, and k can be used as map key?\r\n>>\r\n>\r\n>  That would have the significant advantage of being able to declare\r\n>>\r\n> fully typed\r\n>\r\n>> (values, at least) maps.\r\n>>\r\n>\r\n> This is an interesting idea.  I used the String() method as a\r\n> fingerprinting function for some time until I realised that it isn't\r\n> actually injective.  For example, it includes field names, which are not\r\n> part of the equivalence relation of tuples (types.Result).  Also, it\r\n> doesn't package-qualify unexported field/method names.\r\n>\r\n> It's unclear which scheme is more efficient: your scheme increases the\r\n> cost of hash computation since it is not memoized, but it decreases the\r\n> cost of key equivalence testing since just a string comparison.\r\n>\r\n> A downside of the approach is that fingerprints might not be\r\n> human-readable, especially if optimised, so maps that use them would be\r\n> unintelligible during debugging.  Perhaps this just means we should\r\n> choose a human-readable encoding (like the JVM does for method\r\n> signatures).\r\n>\r\n> I've implemented a quick draft in CL 8687043.  I haven't benchmarked\r\n> either approach yet.\r\n>\r\n> https://codereview.appspot.**com/8665044/<https://codereview.appspot.com/8665044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-11 21:50:50.357260",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, I should have mentioned that it would require type objects to be\r\nunique. But then the discussion is mute.\r\n\r\nIn fact, with the move to accessor methods (soonish), go/types has control\r\nover the construction of new types and in fact could make them unique. How\r\nabout that?\r\n\r\n- gri\r\n\r\n\r\nOn Thu, Apr 11, 2013 at 3:00 PM, Alan Donovan <adonovan@google.com> wrote:\r\n\r\n> On 11 April 2013 17:50, Robert Griesemer <gri@golang.org> wrote:\r\n>\r\n>> You can have the fingerprint idea and still have memo(r)ization. You just\r\n>> need to use the same fingerprinter. So the property is the fingerprint(typ)\r\n>> is 1:1 with typ for a given fingerprinter. That should be fine.\r\n>>\r\n>> Here's a brute force approach: The fingerprinter keeps a list of all\r\n>> types it ever saw. Each time it needs to fingerprint a new type, it\r\n>> compares it (using IsIdentical) against all other types seen so far. It it\r\n>> is found, the fingerprinter returns that type's index. Otherwise, it\r\n>> returns the list length, and adds the type to the list...\r\n>>\r\n>> This can easily be sped up by having lists for each class of type, and\r\n>> then further subdivided as necessary.\r\n>>\r\n>\r\n> You're right, we could add memoization to the fingerprinter if desired.\r\n>\r\n>\r\n>> But what really should happen: go/types should provide an increasing\r\n>> number for all types and objects created. That way this fingerprinter is\r\n>> not needed. This needs to be done also for the AST eventually, because it's\r\n>> the only way for fast mapping of nodes if one is not able to add additional\r\n>> links to an existing node.\r\n>>\r\n>\r\n> Other than being dense, what properties does a sequence number provide\r\n> that the address of the object does not?   Unlike fingerprints, neither is\r\n> canonical, i.e. two distinct Type objects x and y such that IsIdentical(x,\r\n> y) would have different addresses and different sequence numbers---but the\r\n> same fingerprint.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-11 23:46:13.992130",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11 April 2013 19:46, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> Yes, I should have mentioned that it would require type objects to be\r\n> unique. But then the discussion is mute.\r\n>\r\n> In fact, with the move to accessor methods (soonish), go/types has control\r\n> over the construction of new types and in fact could make them unique. How\r\n> about that?\r\n>\r\n\r\nThat's a major change!  It would require either thread-safe access to the\r\ntype intern pool.  exp/ssa constructs Types concurrently, for example.\r\n\r\nI think I suggested doing this some months back and you dismissed it as\r\nunnecessary or non-Go-like.  Have we really swapped seats? :)\r\n",
			"disapproval": false,
			"date": "2013-04-12 00:18:30.714420",
			"approval": false
		},
		{
			"sender": "seb.binet@gmail.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"seb.binet@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "just a few typos...\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go\nFile go/types/typemap/typemap.go (right):\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode49\ngo/types/typemap/typemap.go:49: // computation.  If hasher if nil, the type map will create a private\n-If hasher if nil\n+If hasher is nil\n\nhttps://codereview.appspot.com/8665044/diff/8002/go/types/typemap/typemap.go#newcode65\ngo/types/typemap/typemap.go:65: // Delete panics is m is nil.\n-Delete panics is m is nil.\n+Delete panics if m is nil.",
			"disapproval": false,
			"date": "2013-04-12 10:47:59.976250",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"seb.binet@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-05-17 21:16:53.215930",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 8665044: code.google.com/p/go.exp/go/types/typemap: a generic ma...",
	"created": "2013-04-11 15:04:36.490590",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		8002
	],
	"modified": "2013-05-17 21:16:54.566140",
	"closed": true,
	"issue": 8665044
}