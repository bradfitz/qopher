{
	"description": "net: add more tests for protocol specific methods",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-09 12:22:41.948630",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6821100/diff/3002/src/pkg/net/protoconn_test.go\nFile src/pkg/net/protoconn_test.go (right):\n\nhttps://codereview.appspot.com/6821100/diff/3002/src/pkg/net/protoconn_test.go#newcode26\nsrc/pkg/net/protoconn_test.go:26: ln.SetDeadline(time.Now().Add(100 * time.Millisecond))\ncan you make this faster or make this test be skipped in -short mode?\n\nhttps://codereview.appspot.com/6821100/diff/3002/src/pkg/net/protoconn_test.go#newcode32\nsrc/pkg/net/protoconn_test.go:32: if f, err := ln.File(); err == nil {\nis this just clean-up, or do you care about the err != nil case here too for failing this test?  it's not clear.\n\nhttps://codereview.appspot.com/6821100/diff/3002/src/pkg/net/protoconn_test.go#newcode64\nsrc/pkg/net/protoconn_test.go:64: c.WriteMsgUDP(wb, nil, c.LocalAddr().(*net.UDPAddr))\nI guess I don't understand the point of these tests, calling methods and ignoring their results.\n\nJust testing that it compiles so the API exists?  Seems like goapi does that.",
			"disapproval": false,
			"date": "2012-11-09 15:54:54.151220",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6821100/diff/11001/src/pkg/net/protoconn_test.go\nFile src/pkg/net/protoconn_test.go (right):\n\nhttps://codereview.appspot.com/6821100/diff/11001/src/pkg/net/protoconn_test.go#newcode16\nsrc/pkg/net/protoconn_test.go:16: func notImplementedYet() bool {\nall the call sites look like double negative not not implemented yet, which reads like \"if implemented yet\", which is kinda weird.\n\nwhat if this were instead:\n\nvar condFatalf = func() func (*testing.T, string, ...interface{}) {\n   // A few APIs are not implemented yet on both Plan 9 and Windows.\n   switch runtime.GOOS {\n   case \"plan9\", \"windows\":\n       return (*testing.T).Logf // or your own function, prepending the error text with \"Expected failure: \"\n   }\n   return (*testing.T).Fatalf\n}()\n\n\nthen\n\ncondFatalf(t, \"net.TCPListener.File failed: %v\", err)\ncondFatalf(t, \"net.TCPListener.File failed: %v\", err)\n\nsince it's not a wrapper function, you should still get the proper line numbers in errors too from runtime.Caller.",
			"disapproval": false,
			"date": "2012-11-10 04:03:21.256080",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-10 04:54:57.807980",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-10 05:27:25.197380",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Nov 10, 2012 at 12:54 AM,  <bradfitz@golang.org> wrote:\r\n\r\n> https://codereview.appspot.com/6821100/diff/3002/src/pkg/net/protoconn_test.go#newcode26\r\n> src/pkg/net/protoconn_test.go:26: ln.SetDeadline(time.Now().Add(100 *\r\n> time.Millisecond))\r\n> can you make this faster or make this test be skipped in -short mode?\r\n\r\nsure, will do.\r\n\r\n> https://codereview.appspot.com/6821100/diff/3002/src/pkg/net/protoconn_test.go#newcode32\r\n> src/pkg/net/protoconn_test.go:32: if f, err := ln.File(); err == nil {\r\n> is this just clean-up, or do you care about the err != nil case here too\r\n> for failing this test?  it's not clear.\r\n\r\nit's just kinda insurance. tests on the net package consume\r\nsockets which consists of file descriptors and ephemeral ports.\r\ncurrently a single net.test process takes all test cases. that\r\nmeans that we can't rely on the platform's resource cleanup for\r\nnow.\r\n\r\n> https://codereview.appspot.com/6821100/diff/3002/src/pkg/net/protoconn_test.go#newcode64\r\n> src/pkg/net/protoconn_test.go:64: c.WriteMsgUDP(wb, nil,\r\n> c.LocalAddr().(*net.UDPAddr))\r\n> I guess I don't understand the point of these tests, calling methods and\r\n> ignoring their results.\r\n>\r\n> Just testing that it compiles so the API exists?  Seems like goapi does\r\n> that.\r\n\r\nyes, and call them then see whether they crash.\r\nwill add simple use cases later, in another CL.\r\n",
			"disapproval": false,
			"date": "2012-11-09 17:56:31.726990",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks for the comment. PTAL.\n\nhttps://codereview.appspot.com/6821100/diff/8002/src/pkg/net/protoconn_test.go\nFile src/pkg/net/protoconn_test.go (right):\n\nhttps://codereview.appspot.com/6821100/diff/8002/src/pkg/net/protoconn_test.go#newcode46\nsrc/pkg/net/protoconn_test.go:46: case \"plan9\", \"windows\":\nOn 2012/11/10 02:41:45, bradfitz wrote:\n> are these TODOs or intentional?  add a comment either way.\n\nDone.\n\nhttps://codereview.appspot.com/6821100/diff/8002/src/pkg/net/protoconn_test.go#newcode97\nsrc/pkg/net/protoconn_test.go:97: switch runtime.GOOS {\nOn 2012/11/10 02:41:45, bradfitz wrote:\n> lot of repetition.\n> \n> can't you just put this at some point:\n> \n> // The following tests aren't expected to pass (just compile)\n> // on windows and plan9.\n> if runtime.GOOS == \"windows\" || runtime.GOOS == \"plan9\" {\n>       return\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-11-10 03:12:36.497700",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-09 14:05:50.713930",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=90e59cec3396 ***\n\nnet: add more tests for protocol specific methods\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6821100",
			"disapproval": false,
			"date": "2012-11-10 05:34:43.195950",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-10 02:36:17.709460",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-10 05:29:15.875880",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6821100/diff/8002/src/pkg/net/protoconn_test.go\nFile src/pkg/net/protoconn_test.go (right):\n\nhttps://codereview.appspot.com/6821100/diff/8002/src/pkg/net/protoconn_test.go#newcode46\nsrc/pkg/net/protoconn_test.go:46: case \"plan9\", \"windows\":\nare these TODOs or intentional?  add a comment either way.\n\nhttps://codereview.appspot.com/6821100/diff/8002/src/pkg/net/protoconn_test.go#newcode97\nsrc/pkg/net/protoconn_test.go:97: switch runtime.GOOS {\nlot of repetition.\n\ncan't you just put this at some point:\n\n// The following tests aren't expected to pass (just compile)\n// on windows and plan9.\nif runtime.GOOS == \"windows\" || runtime.GOOS == \"plan9\" {\n      return\n}",
			"disapproval": false,
			"date": "2012-11-10 02:41:45.340010",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Nov 10, 2012 at 1:03 PM,  <bradfitz@golang.org> wrote:\r\n\r\n> what if this were instead:\r\n\r\nnice! thanks.\r\n\r\n> since it's not a wrapper function, you should still get the proper line\r\n> numbers in errors too from runtime.Caller.\r\n\r\ni miss a sort of test mock which fills up platform, feature gaps.\r\n",
			"disapproval": false,
			"date": "2012-11-10 05:26:49.825320",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6821100: net: add more tests for protocol specific methods",
	"created": "2012-11-09 12:21:46.567770",
	"patchsets": [
		1,
		1001,
		4001,
		3002,
		8002,
		11001,
		9002,
		2004,
		11002
	],
	"modified": "2012-11-10 05:34:45.095270",
	"closed": true,
	"issue": 6821100
}