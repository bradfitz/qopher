{
	"description": "go.tools/go/types: support for Context.ImplicitObj callbacks\n\nAlso:\n- more cleanup of new identifier resolution code\n- removed residue Object.Pos() code\n- two separate, equally formatted error messages for redeclaration\n  errors for easier tool support\n- initial support for labels\n- enabled several disabled tests\n\nThic CL will break go.tools/ssa/interp, but the pending\nCL 9863045 fixes that.\n\nFixes issue 5504.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-05-30 00:29:54.944460",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/api.go\nFile go/types/api.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/api.go#newcode6\ngo/types/api.go:6: // Go types and implements typechecking of package files.\n\"Package types declares the data structures and implements the algorithms for name resolution, constant folding and type checking of Go package files.\n\nName resolution determines, for each identifier (ast.Ident) in the program, the identity of the object (Object) it declares or refers to.  The results of resolution are provided to the client via the Context.Ident and Context.ImplicitObj callback. \n\nConstant folding computes, for every expression (ast.Expr) that is a compile-time constant, the exact value (exact.Value) of that constant.  The results of constant folding are provided to the client via the Context.Expr(x, _, val) callback.\n\nType checking computes the type (interface Type) of every named entity (Object) and every expression (ast.Expr) in the program.  The results of type checking are delivered to the client via the Context.Expr(x, typ, _) callback for expressions, and via the Object.Type() method for named entities.\"\n\nPerhaps also mention that these phases are not as separable as it first appears, with reference to the T{s:0} example.  (Is T a map or a struct type?)\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/api.go#newcode59\ngo/types/api.go:59: // in brek, continue, or goto statements.\ns/brek/break/\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/objects.go#newcode15\ngo/types/objects.go:15: // TODO(gri) All objects looks very similar now. Maybe just have single Object struct with an object kind?\nSounds good.  Clients rarely contain type-asserts from Object to a concrete type (ssa contains exactly one in TypeInfo.isPackageRef).\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/stmt.go\nFile go/types/stmt.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/stmt.go#newcode400\ngo/types/stmt.go:400: var tmp Object = obj\nThis looks wrong.  Don't we want the lhs[i]=obj statement on line 410 to use tmp instead?  (i.e. you could eliminate tmp and just rebind obj to alt)\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/stmt.go#newcode681\ngo/types/stmt.go:681: // In clauses with a case listing exactly one type, the variable has that type.\nMore concisely:\n// A single-type case clause implicitly declares a new variable shadowing lhs.\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/decls0.src\nFile go/types/testdata/decls0.src (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/decls0.src#newcode72\ngo/types/testdata/decls0.src:72: a /* ERROR \"redeclared\" */ int\nNice.\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/stmt0.src\nFile go/types/testdata/stmt0.src (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/stmt0.src#newcode193\ngo/types/testdata/stmt0.src:193: // declared by the type switch.\nLink to https://code.google.com/p/go/issues/detail?id=5504 ?\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/types.go#newcode248\ngo/types/types.go:248: // NewSignature returns a new function type for the given receiver, parameters,\nThere's an important piece of documentation missing that explains that the public constructor functions only permit clients to construct \"typechecker objects\", but not \"resolver objects\" (the scope, labels fields are inaccessible) and the consequences of this restriction.",
			"disapproval": false,
			"date": "2013-05-30 14:52:46.032560",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9839045/diff/19001/go/types/api.go\nFile go/types/api.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/api.go#newcode6\ngo/types/api.go:6: // Go types and implements typechecking of package files.\nOn 2013/05/30 14:52:46, adonovan wrote:\n> \"Package types declares the data structures and implements the algorithms for\n> name resolution, constant folding and type checking of Go package files.\n> \n> Name resolution determines, for each identifier (ast.Ident) in the program, the\n> identity of the object (Object) it declares or refers to.  The results of\n> resolution are provided to the client via the Context.Ident and\n> Context.ImplicitObj callback. \n> \n> Constant folding computes, for every expression (ast.Expr) that is a\n> compile-time constant, the exact value (exact.Value) of that constant.  The\n> results of constant folding are provided to the client via the Context.Expr(x,\n> _, val) callback.\n> \n> Type checking computes the type (interface Type) of every named entity (Object)\n> and every expression (ast.Expr) in the program.  The results of type checking\n> are delivered to the client via the Context.Expr(x, typ, _) callback for\n> expressions, and via the Object.Type() method for named entities.\"\n> \n> Perhaps also mention that these phases are not as separable as it first appears,\n> with reference to the T{s:0} example.  (Is T a map or a struct type?)\n\nThanks. Sounds good. Slightly adjusted.\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/api.go#newcode59\ngo/types/api.go:59: // in brek, continue, or goto statements.\nOn 2013/05/30 14:52:46, adonovan wrote:\n> s/brek/break/\n\nDone.\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/objects.go#newcode15\ngo/types/objects.go:15: // TODO(gri) All objects looks very similar now. Maybe just have single Object struct with an object kind?\nOn 2013/05/30 14:52:46, adonovan wrote:\n> Sounds good.  Clients rarely contain type-asserts from Object to a concrete type\n> (ssa contains exactly one in TypeInfo.isPackageRef).\n\nACK\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/stmt.go\nFile go/types/stmt.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/stmt.go#newcode400\ngo/types/stmt.go:400: var tmp Object = obj\nOn 2013/05/30 14:52:46, adonovan wrote:\n> This looks wrong.  Don't we want the lhs[i]=obj statement on line 410 to use tmp\n> instead?  (i.e. you could eliminate tmp and just rebind obj to alt)\n\ngood catch! thanks.\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/stmt.go#newcode681\ngo/types/stmt.go:681: // In clauses with a case listing exactly one type, the variable has that type.\nOn 2013/05/30 14:52:46, adonovan wrote:\n> More concisely:\n> // A single-type case clause implicitly declares a new variable shadowing lhs.\n\nDone.\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/decls0.src\nFile go/types/testdata/decls0.src (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/decls0.src#newcode72\ngo/types/testdata/decls0.src:72: a /* ERROR \"redeclared\" */ int\nOn 2013/05/30 14:52:46, adonovan wrote:\n> Nice.\n\nACK\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/stmt0.src\nFile go/types/testdata/stmt0.src (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/testdata/stmt0.src#newcode193\ngo/types/testdata/stmt0.src:193: // declared by the type switch.\nOn 2013/05/30 14:52:46, adonovan wrote:\n> Link to https://code.google.com/p/go/issues/detail?id=5504 ?\n\nDone.\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/9839045/diff/19001/go/types/types.go#newcode248\ngo/types/types.go:248: // NewSignature returns a new function type for the given receiver, parameters,\nOn 2013/05/30 14:52:46, adonovan wrote:\n> There's an important piece of documentation missing that explains that the\n> public constructor functions only permit clients to construct \"typechecker\n> objects\", but not \"resolver objects\" (the scope, labels fields are inaccessible)\n> and the consequences of this restriction.\n\nActually, these factory functions need to be revisited, and possibly have additional parameters.\nAdded TODO.",
			"disapproval": false,
			"date": "2013-05-30 16:03:13.619820",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=97f6219d395a&repo=tools ***\n\ngo.tools/go/types: support for Context.ImplicitObj callbacks\n\nAlso:\n- more cleanup of new identifier resolution code\n- removed residue Object.Pos() code\n- two separate, equally formatted error messages for redeclaration\n  errors for easier tool support\n- initial support for labels\n- enabled several disabled tests\n\nThic CL will break go.tools/ssa/interp, but the pending\nCL 9863045 fixes that.\n\nFixes issue 5504.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/9839045",
			"disapproval": false,
			"date": "2013-05-30 16:50:58.379360",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 9839045: go.tools/go/types: support for Context.ImplicitObj callbacks",
	"created": "2013-05-29 00:53:06.543100",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		10001,
		12001,
		15001,
		3,
		19001,
		28001
	],
	"modified": "2013-05-30 16:51:00.878710",
	"closed": true,
	"issue": 9839045
}