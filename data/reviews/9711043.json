{
	"description": "ssh: add Output and CombinedOutput helpers",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net"
	],
	"reviewers": [
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-24 02:14:34.908060",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2013-05-23 23:37:48.185050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks kr. The code looks good, could I ask you to try adding a test to session_test.go. It should be possible to defined your own serverType handler (look at what the dial function takes) which outputs some text to both stdout and stderr, then closes the connection. In the Output case, the stderr text should be discaded, in the Combined they should be both present.",
			"disapproval": false,
			"date": "2013-05-23 23:52:27.784260",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/24 02:14:34, kr wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:dave@cheney.net (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nInterestingly, there might be a data race here.\n\nWARNING: DATA RACE\nRead by goroutine 62:\n  bytes.(*Buffer).ReadFrom()\n      /home/dfc/go/src/pkg/bytes/buffer.go:153 +0x9c\n  io.Copy()\n      /home/dfc/go/src/pkg/io/io.go:340 +0xb3\n  code.google.com/p/go.crypto/ssh.func\u00b7009()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:500 +0xde\n  code.google.com/p/go.crypto/ssh.func\u00b7006()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:366 +0x37\n  gosched0()\n      /home/dfc/go/src/pkg/runtime/proc.c:1218 +0x9f\n\nPrevious write by goroutine 61:\n  bytes.(*Buffer).Truncate()\n      /home/dfc/go/src/pkg/bytes/buffer.go:70 +0x118\n  bytes.(*Buffer).ReadFrom()\n      /home/dfc/go/src/pkg/bytes/buffer.go:154 +0xd2\n  io.Copy()\n      /home/dfc/go/src/pkg/io/io.go:340 +0xb3\n  code.google.com/p/go.crypto/ssh.func\u00b7008()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:487 +0xde\n  code.google.com/p/go.crypto/ssh.func\u00b7006()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:366 +0x37\n  gosched0()\n      /home/dfc/go/src/pkg/runtime/proc.c:1218 +0x9f\n\nGoroutine 62 (running) created at:\n  code.google.com/p/go.crypto/ssh.(*Session).start()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:367 +0x303\n  code.google.com/p/go.crypto/ssh.(*Session).Start()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:274 +0x3c9\n  code.google.com/p/go.crypto/ssh.(*Session).Run()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:290 +0x46\n  code.google.com/p/go.crypto/ssh.(*Session).CombinedOutput()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:320 +0x354\n  code.google.com/p/go.crypto/ssh.TestSessionCombinedOutput()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session_test.go:176 +0x20f\n  testing.tRunner()\n      /home/dfc/go/src/pkg/testing/testing.go:353 +0x12f\n  gosched0()\n      /home/dfc/go/src/pkg/runtime/proc.c:1218 +0x9f\n\nGoroutine 61 (finished) created at:\n  code.google.com/p/go.crypto/ssh.(*Session).start()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:367 +0x303\n  code.google.com/p/go.crypto/ssh.(*Session).Start()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:274 +0x3c9\n  code.google.com/p/go.crypto/ssh.(*Session).Run()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:290 +0x46\n  code.google.com/p/go.crypto/ssh.(*Session).CombinedOutput()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session.go:320 +0x354\n  code.google.com/p/go.crypto/ssh.TestSessionCombinedOutput()\n      /home/dfc/src/code.google.com/p/go.crypto/ssh/session_test.go:176 +0x20f\n  testing.tRunner()\n      /home/dfc/go/src/pkg/testing/testing.go:353 +0x12f\n  gosched0()\n      /home/dfc/go/src/pkg/runtime/proc.c:1218 +0x9f",
			"disapproval": false,
			"date": "2013-05-25 02:44:48.571580",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/25 02:44:48, dfc wrote:\n> Interestingly, there might be a data race here.\n\nI get similar results from tip.\n\nDo we need to put this CL on hold until the race\nis fixed (or determined not to exist)?",
			"disapproval": false,
			"date": "2013-05-25 06:25:03.511480",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW:\n\n$ go test -race -v\n...\n=== RUN TestInvalidServerMessage\n==================\nWARNING: DATA RACE\nWrite by goroutine 20:\n  code.google.com/p/go.crypto/ssh.(*clientChan).waitForChannelOpenResponse()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/channel.go:482 +0x250\n  code.google.com/p/go.crypto/ssh.(*ClientConn).NewSession()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/session.go:538 +0x1f5\n  code.google.com/p/go.crypto/ssh.TestInvalidServerMessage()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/session_test.go:287 +0xb0\n  testing.tRunner()\n      /usr/local/go/src/pkg/testing/testing.go:353 +0x12f\n  gosched0()\n      /usr/local/go/src/pkg/runtime/proc.c:1218 +0x9f\n\nPrevious read by goroutine 22:\n  code.google.com/p/go.crypto/ssh.(*channel).sendClose()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/channel.go:105 +0x3f\n  code.google.com/p/go.crypto/ssh.(*clientChan).Close()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/channel.go:499 +0x16d\n  code.google.com/p/go.crypto/ssh.(*chanList).closeAll()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:510 +0xe9\n  code.google.com/p/go.crypto/ssh.func\u00b7005()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:198 +0xab\n  code.google.com/p/go.crypto/ssh.(*ClientConn).mainLoop()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:203 +0xfb\n  gosched0()\n      /usr/local/go/src/pkg/runtime/proc.c:1218 +0x9f\n\nGoroutine 20 (running) created at:\n  testing.RunTests()\n      /usr/local/go/src/pkg/testing/testing.go:433 +0xaef\n  testing.Main()\n      /usr/local/go/src/pkg/testing/testing.go:365 +0xab\n  main.main()\n      code.google.com/p/go.crypto/ssh/_test/_testmain.go:125 +0xda\n  runtime.main()\n      /usr/local/go/src/pkg/runtime/proc.c:182 +0x91\n\nGoroutine 22 (finished) created at:\n  code.google.com/p/go.crypto/ssh.Client()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:47 +0x3b9\n  code.google.com/p/go.crypto/ssh.Dial()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:431 +0xa7\n  code.google.com/p/go.crypto/ssh.dial()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/session_test.go:75 +0x549\n  code.google.com/p/go.crypto/ssh.TestInvalidServerMessage()\n      /Users/kr/src/code.google.com/p/go.crypto/ssh/session_test.go:285 +0x45\n  testing.tRunner()\n      /usr/local/go/src/pkg/testing/testing.go:353 +0x12f\n  gosched0()\n      /usr/local/go/src/pkg/runtime/proc.c:1218 +0x9f\n\n==================\n--- PASS: TestInvalidServerMessage (0.23 seconds)\n...",
			"disapproval": false,
			"date": "2013-05-25 06:32:26.133320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, that is a fair call. I think @fullung found another race in the\r\nssh package, which hasn't been addressed yet.\r\n\r\nI'm also concerned that this code was copied (with the best of\r\nintentions) from the os/exec package, so probably means that\r\ncmd.CombinedOutput has a race as well.\r\n\r\nI don't want to block this CL but currently the -race build is not\r\nunhappy, so I don't want to upset it. What about introducing a wrapper\r\naround bytes.Buffer with a Mutex to prevent concurrent writes ?\r\n\r\nOn Sat, May 25, 2013 at 4:32 PM,  <kr@xph.us> wrote:\r\n> FWIW:\r\n>\r\n> $ go test -race -v\r\n> ...\r\n> === RUN TestInvalidServerMessage\r\n> ==================\r\n> WARNING: DATA RACE\r\n> Write by goroutine 20:\r\n>\r\n> code.google.com/p/go.crypto/ssh.(*clientChan).waitForChannelOpenResponse()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/channel.go:482\r\n> +0x250\r\n>   code.google.com/p/go.crypto/ssh.(*ClientConn).NewSession()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/session.go:538\r\n> +0x1f5\r\n>   code.google.com/p/go.crypto/ssh.TestInvalidServerMessage()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/session_test.go:287\r\n> +0xb0\r\n>   testing.tRunner()\r\n>       /usr/local/go/src/pkg/testing/testing.go:353 +0x12f\r\n>   gosched0()\r\n>       /usr/local/go/src/pkg/runtime/proc.c:1218 +0x9f\r\n>\r\n> Previous read by goroutine 22:\r\n>   code.google.com/p/go.crypto/ssh.(*channel).sendClose()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/channel.go:105 +0x3f\r\n>   code.google.com/p/go.crypto/ssh.(*clientChan).Close()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/channel.go:499\r\n> +0x16d\r\n>   code.google.com/p/go.crypto/ssh.(*chanList).closeAll()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:510 +0xe9\r\n>   code.google.com/p/go.crypto/ssh.func\u00b7005()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:198 +0xab\r\n>   code.google.com/p/go.crypto/ssh.(*ClientConn).mainLoop()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:203 +0xfb\r\n>   gosched0()\r\n>       /usr/local/go/src/pkg/runtime/proc.c:1218 +0x9f\r\n>\r\n> Goroutine 20 (running) created at:\r\n>   testing.RunTests()\r\n>       /usr/local/go/src/pkg/testing/testing.go:433 +0xaef\r\n>   testing.Main()\r\n>       /usr/local/go/src/pkg/testing/testing.go:365 +0xab\r\n>   main.main()\r\n>       code.google.com/p/go.crypto/ssh/_test/_testmain.go:125 +0xda\r\n>   runtime.main()\r\n>       /usr/local/go/src/pkg/runtime/proc.c:182 +0x91\r\n>\r\n> Goroutine 22 (finished) created at:\r\n>   code.google.com/p/go.crypto/ssh.Client()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:47 +0x3b9\r\n>   code.google.com/p/go.crypto/ssh.Dial()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/client.go:431 +0xa7\r\n>   code.google.com/p/go.crypto/ssh.dial()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/session_test.go:75\r\n> +0x549\r\n>   code.google.com/p/go.crypto/ssh.TestInvalidServerMessage()\r\n>       /Users/kr/src/code.google.com/p/go.crypto/ssh/session_test.go:285\r\n> +0x45\r\n>   testing.tRunner()\r\n>       /usr/local/go/src/pkg/testing/testing.go:353 +0x12f\r\n>   gosched0()\r\n>       /usr/local/go/src/pkg/runtime/proc.c:1218 +0x9f\r\n>\r\n> ==================\r\n> --- PASS: TestInvalidServerMessage (0.23 seconds)\r\n> ...\r\n>\r\n>\r\n> https://codereview.appspot.com/9711043/\r\n",
			"disapproval": false,
			"date": "2013-05-27 10:45:48.422560",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2013-05-28 23:40:48.067780",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Adding a mutex, as you suggested, makes the race detector happy.\n\nBut I'm still a little concerned, because it seems reasonable for\nusers of this package to do something similar to what this patch\noriginally did. They'll be surprised when they use a single io.Writer\nfor stdout and stderr and it ends up being called concurrently.",
			"disapproval": false,
			"date": "2013-05-29 01:58:04.015070",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah. I'm also concerned that this pattern is being used inside\r\nos/exec, and when I took a look last night there wasn't a test that\r\ncovered cmd.CombinedOutput so there might be a race there.\r\n\r\nwrt/ people home brewing this solution themselves, I can see how that\r\ncould happen and be confusing. I'd like to address this once I know\r\nhow os/exec.Command.CombinedOutput handles, or will handle, this\r\nsituation as they are the mode the ssh package follows. Does that\r\nsound like a reasonable approach ?\r\n\r\n+agl for his views, i'll commit this patch after work tonight if there\r\nare no other comments.\r\n\r\nOn Wed, May 29, 2013 at 11:58 AM,  <kr@xph.us> wrote:\r\n> Adding a mutex, as you suggested, makes the race detector happy.\r\n>\r\n> But I'm still a little concerned, because it seems reasonable for\r\n> users of this package to do something similar to what this patch\r\n> originally did. They'll be surprised when they use a single io.Writer\r\n> for stdout and stderr and it ends up being called concurrently.\r\n>\r\n> https://codereview.appspot.com/9711043/\r\n",
			"disapproval": false,
			"date": "2013-05-29 02:10:01.614230",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/29 02:10:01, dfc wrote:\n> wrt/ people home brewing this solution themselves, I can see how that\n> could happen and be confusing. I'd like to address this once I know\n> how os/exec.Command.CombinedOutput handles, or will handle, this\n> situation as they are the mode the ssh package follows. Does that\n> sound like a reasonable approach ?\n\nSure.\n\nos/exec says \"If Stdout and Stderr are the same writer, at most one goroutine at\na time will call Write.\" It explicitly checks for equality in Cmd.stderr and\nreturns the same fd in that case, also avoiding creating another c.goroutine.\nIn ssh it would have to avoid creating another s.copyFuncs entry.",
			"disapproval": false,
			"date": "2013-05-29 05:14:54.283580",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=273987d8ccbc&repo=crypto ***\n\nssh: add Output and CombinedOutput helpers\n\nR=golang-dev, dave\nCC=golang-dev\nhttps://codereview.appspot.com/9711043\n\nCommitter: Dave Cheney <dave@cheney.net>",
			"disapproval": false,
			"date": "2013-05-29 06:06:35.648090",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. I did not want to block this CL any further. Now we have a\r\ntest case that will trigger the race detector I have raised\r\nhttps://code.google.com/p/go/issues/detail?id=5582, to address the\r\nunderlying problem. Then we can remove the singleWriter shim.\r\n\r\nOn Wed, May 29, 2013 at 4:06 PM,  <dave@cheney.net> wrote:\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=273987d8ccbc&repo=crypto\r\n> ***\r\n>\r\n>\r\n> ssh: add Output and CombinedOutput helpers\r\n>\r\n> R=golang-dev, dave\r\n> CC=golang-dev\r\n> https://codereview.appspot.com/9711043\r\n>\r\n> Committer: Dave Cheney <dave@cheney.net>\r\n>\r\n>\r\n> https://codereview.appspot.com/9711043/\r\n",
			"disapproval": false,
			"date": "2013-05-29 06:11:32.489520",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"kr@xph.us",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/29 06:11:32, dfc wrote:\n> On Wed, May 29, 2013 at 4:06 PM,  <mailto:dave@cheney.net> wrote:\n> > *** Submitted as\n> > https://code.google.com/p/go/source/detail?r=273987d8ccbc&repo=crypto\n> > ***\n> > ssh: add Output and CombinedOutput helpers\n\nThis test is flaky:\n\n--- FAIL: TestSessionCombinedOutput-96 (0.08 seconds)\nsession_test.go:183: Remote command did not return expected string:\nsession_test.go:184: want \"this-is-stdout.this-is-stderr.\"\nsession_test.go:185: got  \"this-is-stderr.this-is-stdout.\"",
			"disapproval": false,
			"date": "2013-05-30 06:33:04.591940",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was afraid of that, I will make a note to submit a small patch to\r\ntry both variations.\r\n\r\nOn Thu, May 30, 2013 at 4:33 PM,  <fullung@gmail.com> wrote:\r\n> On 2013/05/29 06:11:32, dfc wrote:\r\n>\r\n>> On Wed, May 29, 2013 at 4:06 PM,  <mailto:dave@cheney.net> wrote:\r\n>> > *** Submitted as\r\n>> >\r\n>\r\n> https://code.google.com/p/go/source/detail?r=273987d8ccbc&repo=crypto\r\n>>\r\n>> > ***\r\n>> > ssh: add Output and CombinedOutput helpers\r\n>\r\n>\r\n> This test is flaky:\r\n>\r\n> --- FAIL: TestSessionCombinedOutput-96 (0.08 seconds)\r\n> session_test.go:183: Remote command did not return expected string:\r\n> session_test.go:184: want \"this-is-stdout.this-is-stderr.\"\r\n> session_test.go:185: got  \"this-is-stderr.this-is-stdout.\"\r\n>\r\n> https://codereview.appspot.com/9711043/\r\n",
			"disapproval": false,
			"date": "2013-05-30 06:33:52.503110",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sent https://codereview.appspot.com/9921044/\r\n\r\nOn Thu, May 30, 2013 at 4:33 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> I was afraid of that, I will make a note to submit a small patch to\r\n> try both variations.\r\n>\r\n> On Thu, May 30, 2013 at 4:33 PM,  <fullung@gmail.com> wrote:\r\n>> On 2013/05/29 06:11:32, dfc wrote:\r\n>>\r\n>>> On Wed, May 29, 2013 at 4:06 PM,  <mailto:dave@cheney.net> wrote:\r\n>>> > *** Submitted as\r\n>>> >\r\n>>\r\n>> https://code.google.com/p/go/source/detail?r=273987d8ccbc&repo=crypto\r\n>>>\r\n>>> > ***\r\n>>> > ssh: add Output and CombinedOutput helpers\r\n>>\r\n>>\r\n>> This test is flaky:\r\n>>\r\n>> --- FAIL: TestSessionCombinedOutput-96 (0.08 seconds)\r\n>> session_test.go:183: Remote command did not return expected string:\r\n>> session_test.go:184: want \"this-is-stdout.this-is-stderr.\"\r\n>> session_test.go:185: got  \"this-is-stderr.this-is-stdout.\"\r\n>>\r\n>> https://codereview.appspot.com/9711043/\r\n",
			"disapproval": false,
			"date": "2013-06-01 00:06:43.371720",
			"approval": false
		}
	],
	"owner_email": "kr@xph.us",
	"private": false,
	"base_url": "",
	"owner": "kr",
	"subject": "code review 9711043: ssh: add Output and CombinedOutput helpers",
	"created": "2013-05-23 23:35:04.737590",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		10001,
		13001,
		19001
	],
	"modified": "2013-06-01 00:06:43.548010",
	"closed": true,
	"issue": 9711043
}