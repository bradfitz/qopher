{
	"description": "doc/go1: add justification discussions to major changes\n\nFixes issue 3086.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"r@google.com",
		"kevlar@google.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-24 23:35:22.229056",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-25 00:16:39.780871",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-02-26 18:10:13.524488",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl\nFile doc/go1.tmpl (right):\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode138\ndoc/go1.tmpl:138: if another package might want to use the library during initialization, the library\ns/might want/wanted/\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode167\ndoc/go1.tmpl:167: the old language because the <code>int</code> type was used to hold Unicode code points: each code point would waste an extra 32 bits of storage if <code>int</code> grew from 32 bits to 64.\ns/used/also used/ (?)\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode231\ndoc/go1.tmpl:231: It required passing a value (usually ignored) that is evaluated but discarded,\ns/is/was/\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode232\ndoc/go1.tmpl:232: plus a boolean that is nearly always the constant <code>false</code>.\ns/is/was/\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode367\ndoc/go1.tmpl:367: plus  the implementations of <code>copy</code> and <code>append</code> have never honored the restriction.\ns/plus /and/\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode427\ndoc/go1.tmpl:427: Function equality was problematic from an implementation standpoint\nI wouldn't emphasize the implementation here - I don't think they are hard (only unfortunate) given a definition of equality. I think the issue is what the correct definition is (when are two closures identical?). Maybe:\n\nFunction equality was problematic in the presence of closures (when are two closures equal?), while map equality ...\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode438\ndoc/go1.tmpl:438: provided they are composed from fields on which equality is also defined,\ns/fields/fields and elements/ (?)\n\nhttp://codereview.appspot.com/5700067/diff/1/doc/go1.tmpl#newcode447\ndoc/go1.tmpl:447: which means that closures can be implemented more efficiently.\nI don't understand how this has any bearing on closures' efficiency. As is, every time we create a closure we create a new piece of stub code, so they were all different (one way of defining closures); if we move to a two-pointer representation (context + function) for closures and functions, the same comparison would be possible (comparing context + function), but also a different comparison (just comparing function). Either way, it's fairly efficient. It is true, that with the current implementation, comparing closures based on function body only, would be expensive.\n\nJust leave away this part?",
			"disapproval": false,
			"date": "2012-02-25 00:04:21.975339",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 25/02/2012, at 11:04 AM, gri@golang.org wrote:\n\n> I don't understand how this has any bearing on closures' efficiency. As\n> is, every time we create a closure we create a new piece of stub code,\n> so they were all different (one way of defining closures); if we move to\n> a two-pointer representation (context + function) for closures and\n> functions, the same comparison would be possible (comparing context +\n> function), but also a different comparison (just comparing function).\n> Either way, it's fairly efficient. It is true, that with the current\n> implementation, comparing closures based on function body only, would be\n> expensive.\n\nmy understanding is that it affects the need to allocate when building closures. maybe the way to say it is that the need to define equality constrains the implementation of closures.\n\n\n",
			"disapproval": false,
			"date": "2012-02-25 00:11:06.101174",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@google.com",
				"kevlar@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d2aa5ae49ea2 ***\n\ndoc/go1: add justification discussions to major changes\n\nFixes issue 3086.\n\nR=golang-dev, gri, r, kevlar\nCC=golang-dev\nhttp://codereview.appspot.com/5700067",
			"disapproval": false,
			"date": "2012-02-26 20:31:41.838825",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 25/02/2012, at 11:37 AM, gri@golang.org wrote:\n\n> LGTM\n> \n\ni'll leave this for a while in case others have comments\n\n",
			"disapproval": false,
			"date": "2012-02-25 00:40:02.564694",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5700067/diff/5/doc/go1.tmpl\nFile doc/go1.tmpl (right):\n\nhttp://codereview.appspot.com/5700067/diff/5/doc/go1.tmpl#newcode438\ndoc/go1.tmpl:438: provided they are composed from elements on which equality is also defined,\ns/on/for/ ?",
			"disapproval": false,
			"date": "2012-02-25 00:37:38.112244",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@google.com",
				"kevlar@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Until I got to the tmpl file I didn't realize I'd been commenting on the html file; sorry.\n\nhttp://codereview.appspot.com/5700067/diff/5004/doc/go1.html\nFile doc/go1.html (right):\n\nhttp://codereview.appspot.com/5700067/diff/5004/doc/go1.html#newcode351\ndoc/go1.html:351: The language specification guarantees that in assignments\nThe old language?\n\nhttp://codereview.appspot.com/5700067/diff/5004/doc/go1.html#newcode523\ndoc/go1.html:523: Finally, Map equality is gone too, also except for comparison with <code>nil</code>,\ns/Map/map/\n\nhttp://codereview.appspot.com/5700067/diff/5004/doc/go1.html#newcode524\ndoc/go1.html:524: although it may return one day in a more intuitive form.\nDelete.  (I don't believe we want to be making statements about future changes.)\n\nhttp://codereview.appspot.com/5700067/diff/5004/doc/go1.html#newcode1128\ndoc/go1.html:1128: <a href=\"/pkg/encoding/xml/#Encoder\"><code>Encoder</code></a> type was also     introduced.\nWhy all the spaces here?  Is Rietveld lying to me?",
			"disapproval": false,
			"date": "2012-02-28 15:56:41.806873",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5700067: doc/go1: add justification discussions to major changes",
	"created": "2012-02-24 23:35:13.555386",
	"patchsets": [
		1,
		5,
		5001,
		1005,
		5004
	],
	"modified": "2012-02-28 15:56:42.267605",
	"closed": true,
	"issue": 5700067
}