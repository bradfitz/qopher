{
	"description": "go/doc: Detect headings in comments and format them as h3 in html.\n\nTo structure larger sections of comments in html output headings\nare detected in comments and formated as h3 in the generated html.\nA simple heuristic is used to detect headings in comments:\nA heading is a non-blank, non-indented line preceded by a blank\nline. It is followed by a blank and a non-blank, non-indented line.\nA heading must start with an uppercase letter and end with a letter,\ndigit or a colon.  A heading may not contain punctuation characters.",
	"cc": [
		"jan.mercl@nic.cz",
		"gri@golang.org",
		"adg@golang.org",
		"rsc@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, jan.mercl@nic.cz, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-28 00:01:51.506008",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jan.mercl@nic.cz, gri@golang.org, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-29 22:14:03.218678",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jan.mercl@nic.cz, gri@golang.org, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-30 22:49:37.695735",
			"approval": false
		},
		{
			"sender": "jan.mercl@nic.cz",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"jan.mercl@nic.cz",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/24 11:57:26, volker.dobler wrote:\n> I'd like you to review this change to\n\nExcerpts from the discussion[1] (predating this CL) about the idea:\n\n----\nAndrew Gerrand, Nov 23 (1 day ago)\n\nWe have deliberately avoided creating some kind of markup language for godoc comments.\n----\nr, Nov 23 (1 day ago)\n\nI'd rather not complicate the formatting any more. Automatic detection of hyperlinks is about as far as I'd go.\n----\nr, Nov 23 (1 day ago)\n\nI speak from long experience when I say that if you give people formatting tools, they will concentrate on the formatting rather than the quality of their prose.\n----\n\n[1] https://groups.google.com/d/topic/golang-nuts/iC77ywOFpe0/discussion",
			"disapproval": false,
			"date": "2011-11-24 18:13:14.778953",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode282\nsrc/pkg/go/doc/comment.go:282: switch s[len(s)-2] {\nOn 2011/11/25 20:41:11, gri wrote:\n> The function needs a comment stating that s is at least 2 bytes long. Better\n> would be to just be safe and check for it (this is unlikely to have an impact on\n> overall performance).\n> \n> if len(s) < 2 {\n>    return false\n> }\n> // len(s) >= 2\n> \n> at the beginning of the function body\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode296\nsrc/pkg/go/doc/comment.go:296: if c == 32 {\nOn 2011/11/25 20:41:11, gri wrote:\n> s/32/' '/\n> \n> what about tabs? should have at least a comment\n\nDone. Tab treated as space.\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode297\nsrc/pkg/go/doc/comment.go:297: if n == 4 {\nOn 2011/11/25 20:41:11, gri wrote:\n> make 5 a constant and use an expression here - makes the connection between 5\n> and 4 clear\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode377\nsrc/pkg/go/doc/comment.go:377: if blanks == 2 && len(lines) > i+2 && isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\nOn 2011/11/25 20:41:11, gri wrote:\n> section could use a comment (just before if statement)\n\nDone.",
			"disapproval": false,
			"date": "2011-11-28 00:04:30.039334",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hold on, please. I am not yet convinced. The heuristic as is leads people to format for it, instead of the heuristic doing the right thing automatically.\n\nPlease apply the following changes.\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode174\nsrc/pkg/go/doc/comment.go:174: html_h      = []byte(\"<h3>\")\nI think h3 is too large. I tried to this on my system and the headings (e.g. text/template) scream at me. h4 seems good. It also matches the size of the \"Package files\" section.\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode372\nsrc/pkg/go/doc/comment.go:372: if blanks == 2 && len(lines) >= i+2 && isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\nI think this (2) is too high. I cannot make this work with many of the existing comments w/o reformatting them and inserting two empty lines before a heading. While I personally don't mind that style, it's not the prevalent style especially now that we have at most one empty line in code. I think it should be one.",
			"disapproval": false,
			"date": "2011-11-28 22:52:48.342801",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode372\nsrc/pkg/go/doc/comment.go:372: if blanks == 2 && len(lines) >= i+2 && isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\nOn 2011/11/28 22:52:48, gri wrote:\n> I think this (2) is too high. I cannot make this work with many of the existing\n> comments w/o reformatting them and inserting two empty lines before a heading.\n> While I personally don't mind that style, it's not the prevalent style\n> especially now that we have at most one empty line in code. I think it should be\n> one.\n\nI think this heuristic is a reasonable expectation. We already require people to indent to achieve fixed formatting. I think it's okay to expect two blank lines before a heading. It looks nicer as a plain comment, too.\n\nThese are the matches with only one blank line. As you can see, there are many cases where this is problematic.\n\n2011/11/29 09:59:59 cmd/cgo: <h3>Usage: cgo [compiler options] file.go</h3>\n2011/11/29 09:59:59 cmd/gofmt: <h3>Examples</h3>\n2011/11/29 09:59:59 cmd/goinstall: <h3>Another common idiom is to use</h3>\n2011/11/29 09:59:59 cmd/goinstall: <h3>Remote Repositories</h3>\n2011/11/29 09:59:59 cmd/goinstall: <h3>For code hosted on other servers, goinstall recognizes the general form</h3>\n2011/11/29 09:59:59 cmd/goinstall: <h3>The GOPATH Environment Variable</h3>\n2011/11/29 09:59:59 pkg/archive/zip: <h3>See: http://www.pkware.com/documents/casestudies/APPNOTE.TXT</h3>\n2011/11/29 10:00:00 pkg/encoding/csv: <h3>Newlines and commas may be included in a quoted-field</h3>\n2011/11/29 10:00:00 pkg/encoding/gob: <h3>In summary, a gob stream looks like</h3>\n2011/11/29 10:00:00 pkg/exp/gotype: <h3>Examples</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>Introduction</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>Example</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>Contexts</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>Errors</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>A fuller picture</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>Contexts</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>Typed Strings</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>The template</h3>\n2011/11/29 10:00:01 pkg/html/template: <h3>Security Model</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Actions</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Arguments</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Pipelines</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Variables</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Examples</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Functions</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Associated templates</h3>\n2011/11/29 10:00:03 pkg/text/template: <h3>Nested template definitions</h3>",
			"disapproval": false,
			"date": "2011-11-28 23:01:54.899108",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-24 11:57:26.692814",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some comments. But I like to think about this some more before we are going ahead with it.\n- gri\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode282\nsrc/pkg/go/doc/comment.go:282: switch s[len(s)-2] {\nThe function needs a comment stating that s is at least 2 bytes long. Better would be to just be safe and check for it (this is unlikely to have an impact on overall performance).\n\nif len(s) < 2 {\n   return false\n}\n// len(s) >= 2\n\nat the beginning of the function body\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode296\nsrc/pkg/go/doc/comment.go:296: if c == 32 {\ns/32/' '/\n\nwhat about tabs? should have at least a comment\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode297\nsrc/pkg/go/doc/comment.go:297: if n == 4 {\nmake 5 a constant and use an expression here - makes the connection between 5 and 4 clear\n\nhttp://codereview.appspot.com/5437056/diff/5001/src/pkg/go/doc/comment.go#newcode377\nsrc/pkg/go/doc/comment.go:377: if blanks == 2 && len(lines) > i+2 && isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\nsection could use a comment (just before if statement)",
			"disapproval": false,
			"date": "2011-11-25 20:41:11.086047",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode275\nsrc/pkg/go/doc/comment.go:275: const maxWordsInHeading = 5 // a heading has at most that many words\nI don't think we need this heuristic. I can't think of a correctly-formatted single line that the other heuristics would not catch.\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode283\nsrc/pkg/go/doc/comment.go:283: func isHeading(s []byte) bool {\ns/s/line/\nto make it clear what the function expects\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode287\nsrc/pkg/go/doc/comment.go:287: // len(s) >= 2\ndrop this comment\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode322\nsrc/pkg/go/doc/comment.go:322: // Enclose headings into <h3> tags.\ns/into/with/\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode386\nsrc/pkg/go/doc/comment.go:386: if blanks == 2 && len(lines) > i+2 && isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\ns/>/>=/\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode392\nsrc/pkg/go/doc/comment.go:392: template.HTMLEscape(w, line)\nJust to make the output a bit nicer, please put the \\n into html_endh and make this:\n  template.HTMLEscape(w, line[:len(line)-1])\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment_test.go\nFile src/pkg/go/doc/comment_test.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment_test.go#newcode11\nsrc/pkg/go/doc/comment_test.go:11: func TestIsHeading(t *testing.T) {\nIt'd be cool to add a test for ToHTML also.",
			"disapproval": false,
			"date": "2011-11-28 05:33:44.460581",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was wondering wether src/pkg/gp/doc was the right\nplace for the headscan tool.  But it seems as if there\nare other executables located in the src/pkg tree.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode276\nsrc/pkg/go/doc/comment.go:276: // Check if line passes the heuristics for a valid heading.\nOn 2011/11/30 20:13:54, gri wrote:\n> just:\n> \n> // heading returns the (possibly trimmed) line if it passes as a valid section\n> heading;\n> // otherwise it returns nil.\n> \n> Leave the rest of the comment away: 1) there is detailed comments on these\n> requirements in the code, 2) this is not an exported functions, and 3) the\n> heuristic may change over time and this comment is likely to get out of sync.\n> \n> I would also leave the TODO away. Over time we will see if adjustments are\n> needed and we will just make them.\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode296\nsrc/pkg/go/doc/comment.go:296: // starts with uppercase letter\nOn 2011/11/30 20:13:54, gri wrote:\n> // a heading must start with an uppercase letter\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode302\nsrc/pkg/go/doc/comment.go:302: // ends in a letter or digit\nOn 2011/11/30 20:13:54, gri wrote:\n> // it must end in a letter, digit, or ':'\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode308\nsrc/pkg/go/doc/comment.go:308: // strip trailing : (which is allowed)\nOn 2011/11/30 20:13:54, gri wrote:\n> more direct and faster, since we have r already:\n> \n> // strip trailing ':', if any\n> if r == ':' {\n>    line = line[0 : len(line)-1]\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode311\nsrc/pkg/go/doc/comment.go:311: // contains no punctuation, and special charaters\nOn 2011/11/30 20:13:54, gri wrote:\n> // exclude lines with illegal characters\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode316\nsrc/pkg/go/doc/comment.go:316: // allow ' as possessive 's only\nOn 2011/11/30 20:13:54, gri wrote:\n> s/as/for/\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode320\nsrc/pkg/go/doc/comment.go:320: if i == -1 {\nOn 2011/11/30 20:13:54, gri wrote:\n> if i < 0 {\n>    break\n> }\n> \n> this doesn't rely on a specific (-1) result value but only on the fact that\n> there is no legal (>= 0) index\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode323\nsrc/pkg/go/doc/comment.go:323: if i == len(b)-1 {\nOn 2011/11/30 20:13:54, gri wrote:\n> if i+1 >= len(b) || b[i+1] != 's' || (i+2 < len(b) && b[i+2] != ' ') {\n>     return nil // not followed by \"'s\"\n> }\n> \n> and remove the next 2 if's\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode411\nsrc/pkg/go/doc/comment.go:411: if lastWasBlank && !lastNonblankWasHeading && len(lines) >= i+2 &&\nOn 2011/11/30 20:13:54, gri wrote:\n> if lastWasBlank && !lastNonblankWasHeading && i+2 < len(lines) &&\n> isBlank(lines[i+1] && !isBlank(lines[i+1]) && indentLen(lines[i+2]) == 0 {\n>   // ...\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode415\nsrc/pkg/go/doc/comment.go:415: // and the next non-blank lines isn't indented: this\nOn 2011/11/30 20:13:54, gri wrote:\n> s/lines/line/\n> s/isn't/is not/\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode425\nsrc/pkg/go/doc/comment.go:425: } else {\nOn 2011/11/30 20:13:54, gri wrote:\n> }\n> \n> and remove the else part\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode441\nsrc/pkg/go/doc/comment.go:441: // TODO: remove in prod\nOn 2011/11/30 20:13:54, gri wrote:\n> just remove this\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go\nFile src/pkg/go/doc/comment_test.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode11\nsrc/pkg/go/doc/comment_test.go:11: var isHeadingTests = []struct {\nOn 2011/11/30 20:13:54, gri wrote:\n> s/isHeadingTests/tests/\n\nMmmh. \"isHeadingTest\" as well as \"in\" and \"out\" where\nsuggestions made by Russ. \nSee http://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment_test.go#newcode12\n\nI'll s/isHeading/heading/ as this reflects the current\nnaming.  Andrew asked for tests for ToHTML() which I'd\nlike to provide (in the near future) so keeping the type\nof test seems resonable.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode12\nsrc/pkg/go/doc/comment_test.go:12: in  string\nOn 2011/11/30 20:13:54, gri wrote:\n> s/in/line/\n> \n> (match use in actual code)\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode13\nsrc/pkg/go/doc/comment_test.go:13: out bool\nOn 2011/11/30 20:13:54, gri wrote:\n> s/out/ok/\n\nDone. Especially as it is no longer the output of \nheading() itself.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode22\nsrc/pkg/go/doc/comment_test.go:22: {\"\u03b4 is Greek\", false},\nOn 2011/11/30 20:13:54, gri wrote:\n> This should probably be legal, but it's tricky. Add a comment next to line:\n> \n> // TODO: consider allowing this\nDone. Just to know: Why should this be legal? Just\nbecause it is Greek?  A German heading may not start\nwith \u00e4 also...\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode25\nsrc/pkg/go/doc/comment_test.go:25: {\"Fermat's\", true},\nOn 2011/11/30 20:13:54, gri wrote:\n> add a test with \"'sX\"\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode34\nsrc/pkg/go/doc/comment_test.go:34: if h := heading([]byte(tt.in)); (h == nil) == tt.out {\nOn 2011/11/30 20:13:54, gri wrote:\n> I would write:\n> \n> (h != nil) != tt.ok\n> \n> since the emphasis is on it not being ok\n\nDone.",
			"disapproval": false,
			"date": "2011-11-30 22:42:35.461918",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go\nFile src/pkg/go/doc/headscan.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go#newcode39\nsrc/pkg/go/doc/headscan.go:39: i := bytes.Index(b, []byte(\"<h3>\"))\nIf you use <h4> now then this won't work anymore.",
			"disapproval": false,
			"date": "2011-11-30 23:06:46.776053",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\nThanks for bearing w/ me.\n- gri",
			"disapproval": false,
			"date": "2011-12-01 17:45:18.426819",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode287\nsrc/pkg/go/doc/comment.go:287: // len(s) >= 2\nOn 2011/11/28 05:33:44, adg wrote:\n> drop this comment\n\nJust saw that gri asked you to put it there. It's his code, please leave it.",
			"disapproval": false,
			"date": "2011-11-28 05:34:41.083196",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode275\nsrc/pkg/go/doc/comment.go:275: const maxWordsInHeading = 5 // a heading has at most that many words\nOn 2011/11/28 05:33:44, adg wrote:\n> I don't think we need this heuristic. I can't think of a correctly-formatted\n> single line that the other heuristics would not catch.\n\nI added this heuristic to prevent what some people where\nafraid of:  Suddenly lots of unwanted, stray headings\njust because a newline slipt into the comment or someone\nwas not aware of the \"invisible\" markup used for detecting\nheadings.\n\nI personally would go even further: A maximum of 3 words,\nor the full line is capitalized (with the usual exemptions\nlike a, it, and, ...) just to be perfectly safe, but\nrequiering capitalization looks like markup which is\nof limits.\n\nEven if it is not needed: It doesn't hurt to check and\nit adds IMHO additional safety in case of a uncorrectly\nformatted single line to the heuristics.\n\nReally remove? Or mabye just relax to 6 or even 7 words?\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode283\nsrc/pkg/go/doc/comment.go:283: func isHeading(s []byte) bool {\nOn 2011/11/28 05:33:44, adg wrote:\n> s/s/line/\n> to make it clear what the function expects\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode287\nsrc/pkg/go/doc/comment.go:287: // len(s) >= 2\nOn 2011/11/28 05:34:41, adg wrote:\n> On 2011/11/28 05:33:44, adg wrote:\n> > drop this comment\n> \n> Just saw that gri asked you to put it there. It's his code, please leave it.\n\nIMHO it is overkill: The if is just three lines away\nand in the absence of operator overloading it's clear\nin any case that not(n < 2)  <==>  n >= 2. (Even with\noperator overloading as len() returns an int).\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode322\nsrc/pkg/go/doc/comment.go:322: // Enclose headings into <h3> tags.\nOn 2011/11/28 05:33:44, adg wrote:\n> s/into/with/\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode386\nsrc/pkg/go/doc/comment.go:386: if blanks == 2 && len(lines) > i+2 && isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\nOn 2011/11/28 05:33:44, adg wrote:\n> s/>/>=/\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode392\nsrc/pkg/go/doc/comment.go:392: template.HTMLEscape(w, line)\nOn 2011/11/28 05:33:44, adg wrote:\n> Just to make the output a bit nicer, please put the \\n into html_endh and make\n> this:\n>   template.HTMLEscape(w, line[:len(line)-1])\n\nDone.",
			"disapproval": false,
			"date": "2011-11-28 09:02:24.571794",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 28 November 2011 20:02,  <dr.volker.dobler@gmail.com> wrote:\n>\n> http://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go\n> File src/pkg/go/doc/comment.go (right):\n>\n> http://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode275\n> src/pkg/go/doc/comment.go:275: const maxWordsInHeading = 5 // a heading\n> has at most that many words\n> On 2011/11/28 05:33:44, adg wrote:\n>>\n>> I don't think we need this heuristic. I can't think of a\n>\n> correctly-formatted\n>>\n>> single line that the other heuristics would not catch.\n>\n> I added this heuristic to prevent what some people where\n> afraid of: \u00a0Suddenly lots of unwanted, stray headings\n> just because a newline slipt into the comment or someone\n> was not aware of the \"invisible\" markup used for detecting\n> headings.\n\nI don't think it's a significant risk.\n\nTo test it, I wrote a tool to scan a go source tree for headings that\nmatch the heuristic. Build the attached program and run it in the\ndirectory you want to scan.\n\nHere's it's output on the Go tree:\n\n2011/11/28 20:39:40 src/cmd/goinstall: <h3>Remote Repositories</h3>\n2011/11/28 20:39:40 src/cmd/goinstall: <h3>The GOPATH Environment Variable</h3>\n2011/11/28 20:39:40 src/cmd/prof: <h3>Usage: prof -p pid [-t\ntotal_secs] [-d delta_msec] [6.out args ...]</h3>\n2011/11/28 20:39:41 src/pkg/exp/gotype: <h3>Examples</h3>\n2011/11/28 20:39:42 src/pkg/html/template: <h3>Introduction</h3>\n2011/11/28 20:39:42 src/pkg/html/template: <h3>Contexts</h3>\n2011/11/28 20:39:42 src/pkg/html/template: <h3>Errors</h3>\n2011/11/28 20:39:42 src/pkg/html/template: <h3>A fuller picture</h3>\n2011/11/28 20:39:42 src/pkg/html/template: <h3>Contexts</h3>\n2011/11/28 20:39:42 src/pkg/html/template: <h3>Typed Strings</h3>\n2011/11/28 20:39:42 src/pkg/html/template: <h3>Security Model</h3>\n\nThe only mismatch is the usage line in cmd/pprof. Note that if the\nusage line was shorter it would fall inside a 5-word limit, and that\n\"The GOPATH Environment Variable\" does not fall inside your preferred\n3-word limit.\n\nHere's what I got for my $GOPATH tree:\n\n2011/11/28 20:41:48 src/appengine/datastore: <h3>Basic Operations</h3>\n2011/11/28 20:41:48 src/appengine/datastore: <h3>Properties</h3>\n2011/11/28 20:41:48 src/appengine/datastore: <h3>Queries</h3>\n2011/11/28 20:41:48 src/appengine/datastore: <h3>Transactions</h3>\n\nOnly correct matches over dozens of packages.\n\nTo fix the pprof usage situation, we should discard all\u00a0lines that end\nin non-alpha/non-whitespace characters. I think that would suffice.\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-11-28 09:44:41.689063",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do you have some examples of before/after HTML that we can view?\n\nThanks.\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go#newcode70\nsrc/pkg/go/doc/comment.go:70: // interior blank lines to at most two blank lines.\nWhy is it necessary to change this?\nI'd prefer not to.\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go#newcode293\nsrc/pkg/go/doc/comment.go:293: if !(unicode.IsLetter(r) || unicode.IsDigit(r)) {\npush the ! through.\nif !unicode.IsLetter(r) && !unicode.IsDigit(r)\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go#newcode373\nsrc/pkg/go/doc/comment.go:373: // current line is nonempty, preceeded by two blank\ns/ee/e/\n\nOne blank line seems fine.\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment_test.go\nFile src/pkg/go/doc/comment_test.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment_test.go#newcode12\nsrc/pkg/go/doc/comment_test.go:12: for _, heading := range []string{\"Section\", \"A typical usage\", \"\u0394\u039b\u039e is Greek\", \"Foo 42\"} {\nplease make this look like the other table-driven tests in the tree.\n\nat top level\nvar isHeadingTests = []struct {\n    in string\n    out bool\n}{\n    {\"Section\", true},\n    {\"A typical usage\", true},\n...\n}\n\nthen here\n\nfor _, tt := range isHeadingTests {\n    if out := isHeading([]byte(tt.in)); out != tt.out {\n        t.Errorf(\"isHeading(%q) = %v, want %v\", tt.in, out, tt.out)\n    }\n}",
			"disapproval": false,
			"date": "2011-11-28 17:15:53.060069",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Much better. This heuristic can be relatively easily refined as necessary.\n\nAndrew's headscan file is missing. Regarding testing: We don't want to have to update a file with rejected or accepted headings when new sources are added ot existing sources are modified. Incorrect formatting is not breaking the build, and we will just fix it when we see it. The headscan tool is useful to test tweaks to the algorithm though, and we want to have it available.\n\nSome nitpicks and some suggestions for simplifications.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/Makefile\nFile src/pkg/go/doc/Makefile (right):\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/Makefile#newcode19\nsrc/pkg/go/doc/Makefile:19: headscan.$O: headscan.go\nheadscan.go is missing from this CL\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode276\nsrc/pkg/go/doc/comment.go:276: // Check if line passes the heuristics for a valid heading.\njust:\n\n// heading returns the (possibly trimmed) line if it passes as a valid section heading;\n// otherwise it returns nil.\n\nLeave the rest of the comment away: 1) there is detailed comments on these requirements in the code, 2) this is not an exported functions, and 3) the heuristic may change over time and this comment is likely to get out of sync.\n\nI would also leave the TODO away. Over time we will see if adjustments are needed and we will just make them.\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode296\nsrc/pkg/go/doc/comment.go:296: // starts with uppercase letter\n// a heading must start with an uppercase letter\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode302\nsrc/pkg/go/doc/comment.go:302: // ends in a letter or digit\n// it must end in a letter, digit, or ':'\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode308\nsrc/pkg/go/doc/comment.go:308: // strip trailing : (which is allowed)\nmore direct and faster, since we have r already:\n\n// strip trailing ':', if any\nif r == ':' {\n   line = line[0 : len(line)-1]\n}\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode311\nsrc/pkg/go/doc/comment.go:311: // contains no punctuation, and special charaters\n// exclude lines with illegal characters\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode316\nsrc/pkg/go/doc/comment.go:316: // allow ' as possessive 's only\ns/as/for/\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode320\nsrc/pkg/go/doc/comment.go:320: if i == -1 {\nif i < 0 {\n   break\n}\n\nthis doesn't rely on a specific (-1) result value but only on the fact that there is no legal (>= 0) index\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode323\nsrc/pkg/go/doc/comment.go:323: if i == len(b)-1 {\nif i+1 >= len(b) || b[i+1] != 's' || (i+2 < len(b) && b[i+2] != ' ') {\n    return nil // not followed by \"'s\"\n}\n\nand remove the next 2 if's\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode411\nsrc/pkg/go/doc/comment.go:411: if lastWasBlank && !lastNonblankWasHeading && len(lines) >= i+2 &&\nif lastWasBlank && !lastNonblankWasHeading && i+2 < len(lines) && isBlank(lines[i+1] && !isBlank(lines[i+1]) && indentLen(lines[i+2]) == 0 {\n  // ...\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode415\nsrc/pkg/go/doc/comment.go:415: // and the next non-blank lines isn't indented: this\ns/lines/line/\ns/isn't/is not/\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode425\nsrc/pkg/go/doc/comment.go:425: } else {\n}\n\nand remove the else part\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode441\nsrc/pkg/go/doc/comment.go:441: // TODO: remove in prod\njust remove this\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go\nFile src/pkg/go/doc/comment_test.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode11\nsrc/pkg/go/doc/comment_test.go:11: var isHeadingTests = []struct {\ns/isHeadingTests/tests/\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode12\nsrc/pkg/go/doc/comment_test.go:12: in  string\ns/in/line/\n\n(match use in actual code)\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode13\nsrc/pkg/go/doc/comment_test.go:13: out bool\ns/out/ok/\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode22\nsrc/pkg/go/doc/comment_test.go:22: {\"\u03b4 is Greek\", false},\nThis should probably be legal, but it's tricky. Add a comment next to line:\n\n// TODO: consider allowing this\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode25\nsrc/pkg/go/doc/comment_test.go:25: {\"Fermat's\", true},\nadd a test with \"'sX\"\n\nhttp://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode34\nsrc/pkg/go/doc/comment_test.go:34: if h := heading([]byte(tt.in)); (h == nil) == tt.out {\nI would write:\n\n(h != nil) != tt.ok\n\nsince the emphasis is on it not being ok",
			"disapproval": false,
			"date": "2011-11-30 20:13:54.223681",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go#newcode276\nsrc/pkg/go/doc/comment.go:276: // eading returns the (possibly trimmed) line if it passes as a valid section\nOn 2011/11/30 23:24:23, gri wrote:\n> s/eading/heading/\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go#newcode396\nsrc/pkg/go/doc/comment.go:396: isBlank(lines[i+1]) && !isBlank(lines[i+1]) && indentLen(lines[i+2]) == 0 {\nOn 2011/11/30 23:24:23, gri wrote:\n> this should be \n> \n> !isBlank(lines[i+2])\n> \n> otherwise it won't work\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment_test.go\nFile src/pkg/go/doc/comment_test.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment_test.go#newcode22\nsrc/pkg/go/doc/comment_test.go:22: {\"\u03b4 is Greek\", false}, // TODO: consider allowing this\nOn 2011/11/30 23:24:23, gri wrote:\n> To answer your question.\n> \n> Not sure we should allow it, but lower-case greek letters can make sense. E.g.,\n> I can imagine a title (making something up here):\n> \n> \u03b4-distribution flags\n> \n> bla bla bla ...\n> \n> (i.e., a technical term may use a lower-case Greek letter and just making it\n> upper-case may make the technical term unrecognizable). But it's speculation,\n> which is why there's just a TODO.\n\nI understand. Personaly I would require a reformulation\nof the heading in the sens of: Just dont' write\n  \u03b4-function\nbut\n  The \u03b4-function\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go\nFile src/pkg/go/doc/headscan.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go#newcode53\nsrc/pkg/go/doc/headscan.go:53: /*\nOn 2011/11/30 23:24:23, gri wrote:\n> remove this code - it's dead\n\nDone.",
			"disapproval": false,
			"date": "2011-12-01 09:03:49.608913",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=deeec5c15f88 ***\n\ngo/doc: Detect headings in comments and format them as h3 in html.\n\nTo structure larger sections of comments in html output headings\nare detected in comments and formated as h3 in the generated html.\nA simple heuristic is used to detect headings in comments:\nA heading is a non-blank, non-indented line preceded by a blank\nline. It is followed by a blank and a non-blank, non-indented line.\nA heading must start with an uppercase letter and end with a letter,\ndigit or a colon.  A heading may not contain punctuation characters.\n\nR=jan.mercl, gri, adg, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5437056\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2011-12-01 17:50:01.853507",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, jan.mercl@nic.cz, gri@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-28 09:01:16.148298",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jan.mercl@nic.cz, gri@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-28 11:07:22.036187",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also please update the CL description to reflect the decisions made. (hg change 5437056)",
			"disapproval": false,
			"date": "2011-11-28 22:47:47.828953",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 29, 2011 at 1:17 AM, Robert Griesemer <gri@golang.org> wrote:\n\n> Here's a summary of a longer discussion between Andrew and me:\n>\n> We both agree that the comments look nicer and are more readable with\n> slightly (h4 I think) highlighted section headers. This is mainly\n> important for the long documentation of tools.\n>\n> Unfortunately, as it is, the highlighting won't work on most (all?)\n> existing code because headers don't have two empty lines before them.\n>\n> I strongly disagree with the requirement of 2 empty lines before a\n> section header - it will inevitably lead to many CLs \"fixing\" existing\n> comments to make use of the new \"feature\". This is a very slippery\n> slope. There are many such \"features\" that could be introduced for\n> \"nicer\" comments (italics, colors, etc.) and they all might \"improve\"\n> comments. But they all add extra rules, and they all detract from the\n> main concern which is to write concise, clear, and correct comments.\n> Experience shows that those concerns will take a backseat in favor of\n> \"nice\" formatting.\n>\n> Andrew correctly points out that w/o the 2-line rule, we get several\n> false positives. I believe that if we are to introduce a heuristic for\n> nicer comment formatting, it has to \"just work\" w/o the author having\n> to worry about formatting rules. gofmt (and thus godoc) have\n> significant amounts of heuristic for good comment formatting already,\n> and we have spent much time to make them just work and the mechanisms\n> behind it are effectively invisible.\n>\n> I propose the following change to the current heuristic:\n>\n> 1) one empty line before and after a header - this is a minimum\n> requirement that is already followed and authors tend to do naturally\n> 2) no special chars in a header (exactly what this means is tbd, but\n> we can fine-tune) - this will exclude several cases that now are false\n> positives. after all a header is a title - it should be clean and\n> devoid of excess punctuation\n> 3) no header if it is immediately followed by an indented section\n> (formatted as <pre>) - this will exclude the remaining false positives\n>\n> 1) and 2) are trivial changes to the current CL. 3) may require a bit more\n> work.\n>\n> I want the mechanism to work really well on existing code w/o any\n> changes and thus be \"invisible\" to the author of comments. Even if\n> that means that the heuristic is a bit more complex.\n>\n> If we cannot make this work well, I am against this CL.\n> - gri\n>\n\nThat sounds very reasonable and I'll implement and try it out.\nThis may take some time.\n\nRegarding the h4 vs h3? Shouldn't just the CSS for h3 changed to\nsmaller size? Normally you try to keep the hierarchy and\nnot skip headings like\n<h2>Overview</h2>\nText\n<h4>Some Heading</h4>\n\nVolker\n\n\n>\n>\n>\n>\n> On Mon, Nov 28, 2011 at 3:01 PM,  <adg@golang.org> wrote:\n> >\n> >\n> http://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go\n> > File src/pkg/go/doc/comment.go (right):\n> >\n> >\n> http://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode372\n> > src/pkg/go/doc/comment.go:372: if blanks == 2 && len(lines) >= i+2 &&\n> > isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\n> > On 2011/11/28 22:52:48, gri wrote:\n> >>\n> >> I think this (2) is too high. I cannot make this work with many of the\n> >\n> > existing\n> >>\n> >> comments w/o reformatting them and inserting two empty lines before a\n> >\n> > heading.\n> >>\n> >> While I personally don't mind that style, it's not the prevalent style\n> >> especially now that we have at most one empty line in code. I think it\n> >\n> > should be\n> >>\n> >> one.\n> >\n> > I think this heuristic is a reasonable expectation. We already require\n> > people to indent to achieve fixed formatting. I think it's okay to\n> > expect two blank lines before a heading. It looks nicer as a plain\n> > comment, too.\n> >\n> > These are the matches with only one blank line. As you can see, there\n> > are many cases where this is problematic.\n> >\n> > 2011/11/29 09:59:59 cmd/cgo: <h3>Usage: cgo [compiler options]\n> > file.go</h3>\n> > 2011/11/29 09:59:59 cmd/gofmt: <h3>Examples</h3>\n> > 2011/11/29 09:59:59 cmd/goinstall: <h3>Another common idiom is to\n> > use</h3>\n> > 2011/11/29 09:59:59 cmd/goinstall: <h3>Remote Repositories</h3>\n> > 2011/11/29 09:59:59 cmd/goinstall: <h3>For code hosted on other servers,\n> > goinstall recognizes the general form</h3>\n> > 2011/11/29 09:59:59 cmd/goinstall: <h3>The GOPATH Environment\n> > Variable</h3>\n> > 2011/11/29 09:59:59 pkg/archive/zip: <h3>See:\n> > http://www.pkware.com/documents/casestudies/APPNOTE.TXT</h3>\n> > 2011/11/29 10:00:00 pkg/encoding/csv: <h3>Newlines and commas may be\n> > included in a quoted-field</h3>\n> > 2011/11/29 10:00:00 pkg/encoding/gob: <h3>In summary, a gob stream looks\n> > like</h3>\n> > 2011/11/29 10:00:00 pkg/exp/gotype: <h3>Examples</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>Introduction</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>Example</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>Contexts</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>Errors</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>A fuller picture</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>Contexts</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>Typed Strings</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>The template</h3>\n> > 2011/11/29 10:00:01 pkg/html/template: <h3>Security Model</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Actions</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Arguments</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Pipelines</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Variables</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Examples</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Functions</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Associated templates</h3>\n> > 2011/11/29 10:00:03 pkg/text/template: <h3>Nested template\n> > definitions</h3>\n> >\n> > http://codereview.appspot.com/5437056/\n> >\n>\n\n\n\n-- \nDr. Volker Dobler\n",
			"disapproval": false,
			"date": "2011-11-29 05:54:33.898031",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 9:54 PM, Volker Dobler\n<dr.volker.dobler@gmail.com> wrote:\n> Regarding the h4 vs h3? Shouldn't just the CSS for h3 changed to\n> smaller size? Normally you try to keep the hierarchy and\n> not skip headings like\n> <h2>Overview</h2>\n> Text\n> <h4>Some Heading</h4>\n\nAgreed. I am just observing that at the moment h4 looks better then\nh3. Maybe it's the CSS that's wrong.\n\nThere's no rush on this CL. It would be good to include Andrew's\nscript in some form so it's easy to experiment down the road if\nchanges are necessary.\n\n- gri\n",
			"disapproval": false,
			"date": "2011-11-29 06:00:04.341667",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/28 09:44:41, adg wrote:\n> On 28 November 2011 20:02,  <mailto:dr.volker.dobler@gmail.com> wrote:\n> >\n> > http://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go\n> > File src/pkg/go/doc/comment.go (right):\n> >\n> >\n> http://codereview.appspot.com/5437056/diff/3005/src/pkg/go/doc/comment.go#newcode275\n> > src/pkg/go/doc/comment.go:275: const maxWordsInHeading = 5 // a heading\n> > has at most that many words\n> > On 2011/11/28 05:33:44, adg wrote:\n> >>\n> >> I don't think we need this heuristic. I can't think of a\n> >\n> > correctly-formatted\n> >>\n> >> single line that the other heuristics would not catch.\n> >\n> > I added this heuristic to prevent what some people where\n> > afraid of: &nbsp;Suddenly lots of unwanted, stray headings\n> > just because a newline slipt into the comment or someone\n> > was not aware of the \"invisible\" markup used for detecting\n> > headings.\n> \n> I don't think it's a significant risk.\n> \n> To test it, I wrote a tool to scan a go source tree for headings that\n> match the heuristic. Build the attached program and run it in the\n> directory you want to scan.\n> \n> Here's it's output on the Go tree:\n> \n> 2011/11/28 20:39:40 src/cmd/goinstall: <h3>Remote Repositories</h3>\n> 2011/11/28 20:39:40 src/cmd/goinstall: <h3>The GOPATH Environment Variable</h3>\n> 2011/11/28 20:39:40 src/cmd/prof: <h3>Usage: prof -p pid [-t\n> total_secs] [-d delta_msec] [6.out args ...]</h3>\n> 2011/11/28 20:39:41 src/pkg/exp/gotype: <h3>Examples</h3>\n> 2011/11/28 20:39:42 src/pkg/html/template: <h3>Introduction</h3>\n> 2011/11/28 20:39:42 src/pkg/html/template: <h3>Contexts</h3>\n> 2011/11/28 20:39:42 src/pkg/html/template: <h3>Errors</h3>\n> 2011/11/28 20:39:42 src/pkg/html/template: <h3>A fuller picture</h3>\n> 2011/11/28 20:39:42 src/pkg/html/template: <h3>Contexts</h3>\n> 2011/11/28 20:39:42 src/pkg/html/template: <h3>Typed Strings</h3>\n> 2011/11/28 20:39:42 src/pkg/html/template: <h3>Security Model</h3>\n> \n> The only mismatch is the usage line in cmd/pprof. Note that if the\n> usage line was shorter it would fall inside a 5-word limit, and that\n> \"The GOPATH Environment Variable\" does not fall inside your preferred\n> 3-word limit.\n> \n> Here's what I got for my $GOPATH tree:\n> \n> 2011/11/28 20:41:48 src/appengine/datastore: <h3>Basic Operations</h3>\n> 2011/11/28 20:41:48 src/appengine/datastore: <h3>Properties</h3>\n> 2011/11/28 20:41:48 src/appengine/datastore: <h3>Queries</h3>\n> 2011/11/28 20:41:48 src/appengine/datastore: <h3>Transactions</h3>\n> \n> Only correct matches over dozens of packages.\n> \n> To fix the pprof usage situation, we should discard all&nbsp;lines that end\n> in non-alpha/non-whitespace characters. I think that would suffice.\n> \n> Andrew\n\nMeasurement always wins :-)\nRemoved and replaced with a \"last is letter\" check.\nVolker",
			"disapproval": false,
			"date": "2011-11-28 10:01:06.589153",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 14:20,  <dr.volker.dobler@gmail.com> wrote:\n> Keeping two lines here helps detecting headings reliable.\n> These two blank lines will appear in the output of godocs\n> text version which is nicer for headings anyway.\n\nOkay.  Can you run this over the package docs for the tree\nand make a list of the headings it identifiers?\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2011-11-28 19:23:30.789141",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/8001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/8001/src/pkg/go/doc/comment.go#newcode173\nsrc/pkg/go/doc/comment.go:173: html_h      = []byte(\"<h3>\") // \"Overview\", \"Constants\", function and types are h2\nI think you can leave this comment out.\n\nhttp://codereview.appspot.com/5437056/diff/8001/src/pkg/go/doc/comment.go#newcode278\nsrc/pkg/go/doc/comment.go:278: // The heuristics assumes that a heading:\ndon't forget to amend this comment\n\nhttp://codereview.appspot.com/5437056/diff/8001/src/pkg/go/doc/comment.go#newcode284\nsrc/pkg/go/doc/comment.go:284: if len(line) < 2 {\nThe body of this function could now be:\n\n        s := utf8.NewString(string(bytes.TrimSpace(line)))\n        if s.RuneCount() == 0 {\n                return false\n        }\n\n        // starts with uppercase letter\n        if r := s.At(0); !unicode.IsLetter(r) || !unicode.IsUpper(r) {\n                return false\n        }\n\n        // ends with a letter or digit\n        if r := s.At(s.RuneCount()-1); !unicode.IsLetter(r) && !unicode.IsDigit(r) {\n                return false\n        }\n\n        return true",
			"disapproval": false,
			"date": "2011-11-28 10:01:17.717214",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go#newcode285\nsrc/pkg/go/doc/comment.go:285: line = line[:len(line)-1]\nOn 2011/11/28 10:04:10, adg wrote:\n> What you've done here is probably faster than what I suggested (using\n> unicode.String).\n> \n> But at the top of the function, do:\n>   line = bytes.TrimSpace(line)\n>   if len(line) == 0 { return false }\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go#newcode295\nsrc/pkg/go/doc/comment.go:295: if !unicode.IsLetter(r) {\nOn 2011/11/28 10:04:10, adg wrote:\n> also test for a digit\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go#newcode375\nsrc/pkg/go/doc/comment.go:375: // current line is nonempyt, preceeded by two blank lines and\nOn 2011/11/28 10:02:07, adg wrote:\n> s/nonempyt/nonempty/\n> \n> please wrap the comment at 80 columns\n\nDone.",
			"disapproval": false,
			"date": "2011-11-28 11:07:42.048236",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11/28/11, rsc@golang.org <rsc@golang.org> wrote:\n> Do you have some examples of before/after HTML that we can view?\n\nPlease see the attached screenshot.\n",
			"disapproval": false,
			"date": "2011-11-28 19:19:43.608450",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode308\nsrc/pkg/go/doc/comment.go:308: // Enclose headings with <h3> tags.\ns/<h3>/header/\n\nso the comment is not dependent of the value of the constants\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode373\nsrc/pkg/go/doc/comment.go:373: // current line is nonempty, preceded by two blank\none blank line",
			"disapproval": false,
			"date": "2011-11-28 22:57:08.196919",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jan.mercl@nic.cz, gri@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-28 09:57:50.973780",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go#newcode375\nsrc/pkg/go/doc/comment.go:375: // current line is nonempyt, preceeded by two blank lines and\ns/nonempyt/nonempty/\n\nplease wrap the comment at 80 columns",
			"disapproval": false,
			"date": "2011-11-28 10:02:07.484866",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go#newcode285\nsrc/pkg/go/doc/comment.go:285: line = line[:len(line)-1]\nWhat you've done here is probably faster than what I suggested (using unicode.String).\n\nBut at the top of the function, do:\n  line = bytes.TrimSpace(line)\n  if len(line) == 0 { return false }\n\nhttp://codereview.appspot.com/5437056/diff/11001/src/pkg/go/doc/comment.go#newcode295\nsrc/pkg/go/doc/comment.go:295: if !unicode.IsLetter(r) {\nalso test for a digit",
			"disapproval": false,
			"date": "2011-11-28 10:04:10.544948",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looking good. One last thing.\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode374\nsrc/pkg/go/doc/comment.go:374: // lines and followed by a non-blank line: this might\nThis comment is incorrect.\n\nCurrent line is non-blank, preceded by two blanks, and followed by a blank and a non-blank.",
			"disapproval": false,
			"date": "2011-11-28 22:47:04.873522",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jan.mercl@nic.cz, gri@golang.org, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-28 18:59:26.337857",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go#newcode70\nsrc/pkg/go/doc/comment.go:70: // interior blank lines to at most two blank lines.\nOn 2011/11/28 17:15:53, rsc wrote:\n> Why is it necessary to change this?\n> I'd prefer not to.\n\nIf this additional blank line is not preserved\nhere it cannot be used below to determine headings.\nDetermination of heading based on the content only of \na single line (as implemented in isHeading()) would\nfalsely identify in (html/template/doc.go#L143)\n// \n// The template\n//\n//   Hello, {{.}}!\n//\n// can be invoked with\n\"The template\" as a heading which it isn't.\n\nIf only one blank line is kept than the heuristic\nfor headings must be strengthened e.g. by requiring\ncaptitalization (\"The Template\") which (a) has the\nsemll of markup and (b) is hard to do right as articles\nand short prepositions (in, at, on, ...) and conjuctions\n(and, as, ...) should not be not capitalized in headings.\n\nKeeping two lines here helps detecting headings reliable.\nThese two blank lines will appear in the output of godocs\ntext version which is nicer for headings anyway.\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go#newcode293\nsrc/pkg/go/doc/comment.go:293: if !(unicode.IsLetter(r) || unicode.IsDigit(r)) {\nOn 2011/11/28 17:15:53, rsc wrote:\n> push the ! through.\n> if !unicode.IsLetter(r) && !unicode.IsDigit(r)\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment.go#newcode373\nsrc/pkg/go/doc/comment.go:373: // current line is nonempty, preceeded by two blank\nOn 2011/11/28 17:15:53, rsc wrote:\n> s/ee/e/\nDone\n \n> One blank line seems fine.\nSee above.\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment_test.go\nFile src/pkg/go/doc/comment_test.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/11004/src/pkg/go/doc/comment_test.go#newcode12\nsrc/pkg/go/doc/comment_test.go:12: for _, heading := range []string{\"Section\", \"A typical usage\", \"\u0394\u039b\u039e is Greek\", \"Foo 42\"} {\nOn 2011/11/28 17:15:53, rsc wrote:\n> please make this look like the other table-driven tests in the tree.\n> \n> at top level\n> var isHeadingTests = []struct {\n>     in string\n>     out bool\n> }{\n>     {\"Section\", true},\n>     {\"A typical usage\", true},\n> ...\n> }\n> \n> then here\n> \n> for _, tt := range isHeadingTests {\n>     if out := isHeading([]byte(tt.in)); out != tt.out {\n>         t.Errorf(\"isHeading(%q) = %v, want %v\", tt.in, out, tt.out)\n>     }\n> }\n> \n\nDone.",
			"disapproval": false,
			"date": "2011-11-28 19:20:32.967999",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just running Andrew's script (tmp/headscan) produces:\n\nvolker@linuxvm:~/go/src $ ../../tmp/headscan\n2011/11/28 20:32:35 cmd/goinstall: <h3>Remote Repositories</h3>\n2011/11/28 20:32:35 cmd/goinstall: <h3>The GOPATH Environment Variable</h3>\n2011/11/28 20:32:36 pkg/exp/gotype: <h3>Examples</h3>\n2011/11/28 20:32:37 pkg/html/template: <h3>Introduction</h3>\n2011/11/28 20:32:37 pkg/html/template: <h3>Contexts</h3>\n2011/11/28 20:32:37 pkg/html/template: <h3>Errors</h3>\n2011/11/28 20:32:37 pkg/html/template: <h3>A fuller picture</h3>\n2011/11/28 20:32:37 pkg/html/template: <h3>Contexts</h3>\n2011/11/28 20:32:37 pkg/html/template: <h3>Typed Strings</h3>\n2011/11/28 20:32:37 pkg/html/template: <h3>Security Model</h3>\n\nWhich is (mod prof) the same list as Andrew generated: Not that much\nand no obviuos false positives.\n\n\nOn 11/28/11, Russ Cox <rsc@golang.org> wrote:\n> On Mon, Nov 28, 2011 at 14:20,  <dr.volker.dobler@gmail.com> wrote:\n>> Keeping two lines here helps detecting headings reliable.\n>> These two blank lines will appear in the output of godocs\n>> text version which is nicer for headings anyway.\n>\n> Okay.  Can you run this over the package docs for the tree\n> and make a list of the headings it identifiers?\n>\n> Thanks.\n> Russ\n>\n\n\n-- \nDr. Volker Dobler\n",
			"disapproval": false,
			"date": "2011-11-28 19:36:18.827421",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, seems reasonable to me.\nLeaving for Andrew.\n",
			"disapproval": false,
			"date": "2011-11-28 19:38:01.251679",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here's a summary of a longer discussion between Andrew and me:\n\nWe both agree that the comments look nicer and are more readable with\nslightly (h4 I think) highlighted section headers. This is mainly\nimportant for the long documentation of tools.\n\nUnfortunately, as it is, the highlighting won't work on most (all?)\nexisting code because headers don't have two empty lines before them.\n\nI strongly disagree with the requirement of 2 empty lines before a\nsection header - it will inevitably lead to many CLs \"fixing\" existing\ncomments to make use of the new \"feature\". This is a very slippery\nslope. There are many such \"features\" that could be introduced for\n\"nicer\" comments (italics, colors, etc.) and they all might \"improve\"\ncomments. But they all add extra rules, and they all detract from the\nmain concern which is to write concise, clear, and correct comments.\nExperience shows that those concerns will take a backseat in favor of\n\"nice\" formatting.\n\nAndrew correctly points out that w/o the 2-line rule, we get several\nfalse positives. I believe that if we are to introduce a heuristic for\nnicer comment formatting, it has to \"just work\" w/o the author having\nto worry about formatting rules. gofmt (and thus godoc) have\nsignificant amounts of heuristic for good comment formatting already,\nand we have spent much time to make them just work and the mechanisms\nbehind it are effectively invisible.\n\nI propose the following change to the current heuristic:\n\n1) one empty line before and after a header - this is a minimum\nrequirement that is already followed and authors tend to do naturally\n2) no special chars in a header (exactly what this means is tbd, but\nwe can fine-tune) - this will exclude several cases that now are false\npositives. after all a header is a title - it should be clean and\ndevoid of excess punctuation\n3) no header if it is immediately followed by an indented section\n(formatted as <pre>) - this will exclude the remaining false positives\n\n1) and 2) are trivial changes to the current CL. 3) may require a bit more work.\n\nI want the mechanism to work really well on existing code w/o any\nchanges and thus be \"invisible\" to the author of comments. Even if\nthat means that the heuristic is a bit more complex.\n\nIf we cannot make this work well, I am against this CL.\n- gri\n\n\n\n\n\n\nOn Mon, Nov 28, 2011 at 3:01 PM,  <adg@golang.org> wrote:\n>\n> http://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go\n> File src/pkg/go/doc/comment.go (right):\n>\n> http://codereview.appspot.com/5437056/diff/13002/src/pkg/go/doc/comment.go#newcode372\n> src/pkg/go/doc/comment.go:372: if blanks == 2 && len(lines) >= i+2 &&\n> isBlank(lines[i+1]) && !isBlank(lines[i+2]) {\n> On 2011/11/28 22:52:48, gri wrote:\n>>\n>> I think this (2) is too high. I cannot make this work with many of the\n>\n> existing\n>>\n>> comments w/o reformatting them and inserting two empty lines before a\n>\n> heading.\n>>\n>> While I personally don't mind that style, it's not the prevalent style\n>> especially now that we have at most one empty line in code. I think it\n>\n> should be\n>>\n>> one.\n>\n> I think this heuristic is a reasonable expectation. We already require\n> people to indent to achieve fixed formatting. I think it's okay to\n> expect two blank lines before a heading. It looks nicer as a plain\n> comment, too.\n>\n> These are the matches with only one blank line. As you can see, there\n> are many cases where this is problematic.\n>\n> 2011/11/29 09:59:59 cmd/cgo: <h3>Usage: cgo [compiler options]\n> file.go</h3>\n> 2011/11/29 09:59:59 cmd/gofmt: <h3>Examples</h3>\n> 2011/11/29 09:59:59 cmd/goinstall: <h3>Another common idiom is to\n> use</h3>\n> 2011/11/29 09:59:59 cmd/goinstall: <h3>Remote Repositories</h3>\n> 2011/11/29 09:59:59 cmd/goinstall: <h3>For code hosted on other servers,\n> goinstall recognizes the general form</h3>\n> 2011/11/29 09:59:59 cmd/goinstall: <h3>The GOPATH Environment\n> Variable</h3>\n> 2011/11/29 09:59:59 pkg/archive/zip: <h3>See:\n> http://www.pkware.com/documents/casestudies/APPNOTE.TXT</h3>\n> 2011/11/29 10:00:00 pkg/encoding/csv: <h3>Newlines and commas may be\n> included in a quoted-field</h3>\n> 2011/11/29 10:00:00 pkg/encoding/gob: <h3>In summary, a gob stream looks\n> like</h3>\n> 2011/11/29 10:00:00 pkg/exp/gotype: <h3>Examples</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>Introduction</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>Example</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>Contexts</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>Errors</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>A fuller picture</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>Contexts</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>Typed Strings</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>The template</h3>\n> 2011/11/29 10:00:01 pkg/html/template: <h3>Security Model</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Actions</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Arguments</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Pipelines</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Variables</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Examples</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Functions</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Associated templates</h3>\n> 2011/11/29 10:00:03 pkg/text/template: <h3>Nested template\n> definitions</h3>\n>\n> http://codereview.appspot.com/5437056/\n>\n",
			"disapproval": false,
			"date": "2011-11-29 00:17:19.578016",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Almost there. Some minor issues and a bug.\n- gri\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go\nFile src/pkg/go/doc/comment.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go#newcode276\nsrc/pkg/go/doc/comment.go:276: // eading returns the (possibly trimmed) line if it passes as a valid section\ns/eading/heading/\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go#newcode396\nsrc/pkg/go/doc/comment.go:396: isBlank(lines[i+1]) && !isBlank(lines[i+1]) && indentLen(lines[i+2]) == 0 {\nthis should be \n\n!isBlank(lines[i+2])\n\notherwise it won't work\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment_test.go\nFile src/pkg/go/doc/comment_test.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment_test.go#newcode22\nsrc/pkg/go/doc/comment_test.go:22: {\"\u03b4 is Greek\", false}, // TODO: consider allowing this\nTo answer your question.\n\nNot sure we should allow it, but lower-case greek letters can make sense. E.g., I can imagine a title (making something up here):\n\n\u03b4-distribution flags\n\nbla bla bla ...\n\n(i.e., a technical term may use a lower-case Greek letter and just making it upper-case may make the technical term unrecognizable). But it's speculation, which is why there's just a TODO.\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go\nFile src/pkg/go/doc/headscan.go (right):\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go#newcode39\nsrc/pkg/go/doc/headscan.go:39: i := bytes.Index(b, []byte(\"<h3>\"))\nOn 2011/11/30 23:06:46, adg wrote:\n> If you use <h4> now then this won't work anymore.\n\nDone.\n\nhttp://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go#newcode53\nsrc/pkg/go/doc/headscan.go:53: /*\nremove this code - it's dead",
			"disapproval": false,
			"date": "2011-11-30 23:24:23.286363",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jan.mercl@nic.cz, gri@golang.org, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-01 09:03:41.290424",
			"approval": false
		},
		{
			"sender": "jan.mercl@nic.cz",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/01 16:54:17, r2 wrote:\n> Gri and I had a long talk about it and agreed that if a design comes that\n> doesn't break existing comments and doesn't require extra formatting and doesn't\n> encourage more formatting suggestions, we'd consider it.\n\nThanks for letting me know. Full respect.\n\n-jnml",
			"disapproval": false,
			"date": "2011-12-01 17:05:21.708979",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jan.mercl@nic.cz, gri@golang.org, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-30 22:50:26.185453",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 30, 2011 at 3:06 PM,  <adg@golang.org> wrote:\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go#newcode39\n> src/pkg/go/doc/headscan.go:39: i := bytes.Index(b, []byte(\"<h3>\"))\n> If you use <h4> now then this won't work anymore.\n\nit's <h3> still - should be fine\n- gri\n",
			"disapproval": false,
			"date": "2011-11-30 23:12:45.917573",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also: Please fix headscan.go - it doesn't compile anymore (still uses\nthe old-style os.FileInfo).\n- gri\n\nOn Wed, Nov 30, 2011 at 3:24 PM,  <gri@golang.org> wrote:\n> Almost there. Some minor issues and a bug.\n> - gri\n>\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go\n> File src/pkg/go/doc/comment.go (right):\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go#newcode276\n> src/pkg/go/doc/comment.go:276: // eading returns the (possibly trimmed)\n> line if it passes as a valid section\n> s/eading/heading/\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment.go#newcode396\n> src/pkg/go/doc/comment.go:396: isBlank(lines[i+1]) &&\n> !isBlank(lines[i+1]) && indentLen(lines[i+2]) == 0 {\n> this should be\n>\n> !isBlank(lines[i+2])\n>\n> otherwise it won't work\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment_test.go\n> File src/pkg/go/doc/comment_test.go (right):\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/comment_test.go#newcode22\n> src/pkg/go/doc/comment_test.go:22: {\"\u03b4 is Greek\", false}, // TODO:\n> consider allowing this\n> To answer your question.\n>\n> Not sure we should allow it, but lower-case greek letters can make\n> sense. E.g., I can imagine a title (making something up here):\n>\n> \u03b4-distribution flags\n>\n> bla bla bla ...\n>\n> (i.e., a technical term may use a lower-case Greek letter and just\n> making it upper-case may make the technical term unrecognizable). But\n> it's speculation, which is why there's just a TODO.\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go\n> File src/pkg/go/doc/headscan.go (right):\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go#newcode39\n> src/pkg/go/doc/headscan.go:39: i := bytes.Index(b, []byte(\"<h3>\"))\n> On 2011/11/30 23:06:46, adg wrote:\n>>\n>> If you use <h4> now then this won't work anymore.\n>\n> Done.\n>\n> http://codereview.appspot.com/5437056/diff/6/src/pkg/go/doc/headscan.go#newcode53\n> src/pkg/go/doc/headscan.go:53: /*\n> remove this code - it's dead\n>\n> http://codereview.appspot.com/5437056/\n>\n",
			"disapproval": false,
			"date": "2011-11-30 23:26:33.821725",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 1, 2011, at 12:32 AM, jan.mercl@nic.cz wrote:\n\n> On 2011/11/30 23:24:23, gri wrote:\n>> Almost there. Some minor issues and a bug.\n> \n> Is there any chance to know Rob's stance on this CL?\n\nGri and I had a long talk about it and agreed that if a design comes that doesn't break existing comments and doesn't require extra formatting and doesn't encourage more formatting suggestions, we'd consider it.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-12-01 16:54:17.507603",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Agreed. I think the current CL is close: It just does the right thing\nw/o the comment author having to know extra rules.\n- gri\n\nOn Thu, Dec 1, 2011 at 9:01 AM, Russ Cox <rsc@golang.org> wrote:\n> Just to add to what Rob said, the key point about Go comments\n> in contrast to Javadoc or Pydoc or whatever is that the goal is\n> that they look like comments, not markup. \u00a0It is okay to take\n> advantage of conventions that already exist as hints to how to\n> make them HTML, but not okay to force new conventions.\n> I was skeptical of this CL but it really does seem to be converging\n> on the former, which is great.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-12-01 17:04:42.986980",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PS: Please also update the CL description (remove the paragraph \"Review Note\").\n- gri\n\nOn Wed, Nov 30, 2011 at 12:13 PM,  <gri@golang.org> wrote:\n> Much better. This heuristic can be relatively easily refined as\n> necessary.\n>\n> Andrew's headscan file is missing. Regarding testing: We don't want to\n> have to update a file with rejected or accepted headings when new\n> sources are added ot existing sources are modified. Incorrect formatting\n> is not breaking the build, and we will just fix it when we see it. The\n> headscan tool is useful to test tweaks to the algorithm though, and we\n> want to have it available.\n>\n> Some nitpicks and some suggestions for simplifications.\n>\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/Makefile\n> File src/pkg/go/doc/Makefile (right):\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/Makefile#newcode19\n> src/pkg/go/doc/Makefile:19: headscan.$O: headscan.go\n> headscan.go is missing from this CL\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go\n> File src/pkg/go/doc/comment.go (right):\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode276\n> src/pkg/go/doc/comment.go:276: // Check if line passes the heuristics\n> for a valid heading.\n> just:\n>\n> // heading returns the (possibly trimmed) line if it passes as a valid\n> section heading;\n> // otherwise it returns nil.\n>\n> Leave the rest of the comment away: 1) there is detailed comments on\n> these requirements in the code, 2) this is not an exported functions,\n> and 3) the heuristic may change over time and this comment is likely to\n> get out of sync.\n>\n> I would also leave the TODO away. Over time we will see if adjustments\n> are needed and we will just make them.\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode296\n> src/pkg/go/doc/comment.go:296: // starts with uppercase letter\n> // a heading must start with an uppercase letter\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode302\n> src/pkg/go/doc/comment.go:302: // ends in a letter or digit\n> // it must end in a letter, digit, or ':'\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode308\n> src/pkg/go/doc/comment.go:308: // strip trailing : (which is allowed)\n> more direct and faster, since we have r already:\n>\n> // strip trailing ':', if any\n> if r == ':' {\n> \u00a0 line = line[0 : len(line)-1]\n> }\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode311\n> src/pkg/go/doc/comment.go:311: // contains no punctuation, and special\n> charaters\n> // exclude lines with illegal characters\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode316\n> src/pkg/go/doc/comment.go:316: // allow ' as possessive 's only\n> s/as/for/\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode320\n> src/pkg/go/doc/comment.go:320: if i == -1 {\n> if i < 0 {\n> \u00a0 break\n> }\n>\n> this doesn't rely on a specific (-1) result value but only on the fact\n> that there is no legal (>= 0) index\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode323\n> src/pkg/go/doc/comment.go:323: if i == len(b)-1 {\n> if i+1 >= len(b) || b[i+1] != 's' || (i+2 < len(b) && b[i+2] != ' ') {\n> \u00a0 \u00a0return nil // not followed by \"'s\"\n> }\n>\n> and remove the next 2 if's\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode411\n> src/pkg/go/doc/comment.go:411: if lastWasBlank &&\n> !lastNonblankWasHeading && len(lines) >= i+2 &&\n> if lastWasBlank && !lastNonblankWasHeading && i+2 < len(lines) &&\n> isBlank(lines[i+1] && !isBlank(lines[i+1]) && indentLen(lines[i+2]) == 0\n> {\n> \u00a0// ...\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode415\n> src/pkg/go/doc/comment.go:415: // and the next non-blank lines isn't\n> indented: this\n> s/lines/line/\n> s/isn't/is not/\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode425\n> src/pkg/go/doc/comment.go:425: } else {\n> }\n>\n> and remove the else part\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment.go#newcode441\n> src/pkg/go/doc/comment.go:441: // TODO: remove in prod\n> just remove this\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go\n> File src/pkg/go/doc/comment_test.go (right):\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode11\n> src/pkg/go/doc/comment_test.go:11: var isHeadingTests = []struct {\n> s/isHeadingTests/tests/\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode12\n> src/pkg/go/doc/comment_test.go:12: in \u00a0string\n> s/in/line/\n>\n> (match use in actual code)\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode13\n> src/pkg/go/doc/comment_test.go:13: out bool\n> s/out/ok/\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode22\n> src/pkg/go/doc/comment_test.go:22: {\"\u03b4 is Greek\", false},\n> This should probably be legal, but it's tricky. Add a comment next to\n> line:\n>\n> // TODO: consider allowing this\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode25\n> src/pkg/go/doc/comment_test.go:25: {\"Fermat's\", true},\n> add a test with \"'sX\"\n>\n> http://codereview.appspot.com/5437056/diff/15001/src/pkg/go/doc/comment_test.go#newcode34\n> src/pkg/go/doc/comment_test.go:34: if h := heading([]byte(tt.in)); (h ==\n> nil) == tt.out {\n> I would write:\n>\n> (h != nil) != tt.ok\n>\n> since the emphasis is on it not being ok\n>\n> http://codereview.appspot.com/5437056/\n>\n",
			"disapproval": false,
			"date": "2011-11-30 20:28:12.994523",
			"approval": false
		},
		{
			"sender": "jan.mercl@nic.cz",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"jan.mercl@nic.cz",
				"gri@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/30 23:24:23, gri wrote:\n> Almost there. Some minor issues and a bug.\n\nIs there any chance to know Rob's stance on this CL?\n\nI'm disappointed by the fact that the proposal was rejected in the discussion in the mailing list by development team members involved - but the CL was \"pushed\" anyway regardless their verdict.\n\nI share the opposing opinions about this idea as cited earlier in this thread.\n\n-jnml",
			"disapproval": false,
			"date": "2011-12-01 08:32:34.799501",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 1, 2011 at 9:32 AM, <jan.mercl@nic.cz> wrote:\n\n>\n> Is there any chance to know Rob's stance on this CL?\n>\n> I'm disappointed by the fact that the proposal was rejected in the\n> discussion in the mailing list by development team members involved -\n> but the CL was \"pushed\" anyway regardless their verdict.\n>\n> I share the opposing opinions about this idea as cited earlier in this\n> thread.\n>\n>\nI am not sure if the proposal itself was rejected. But you are\nright that there was a controversial discussion whether detection\nof headings is worth the effort, can be done without markup,\nwould distract from writing good docs, solves a problem that\ndoes not exist or simply is not needed.\n\nAs I understood the discussion (being biased of course):\n - Lots of people are missing headings in longer doc.\n - Almost everyone was afraid that it couldn't be done\n   properly without additional markup.\n\nThis CL was to explore what can and cannot be done in this\narea, how complex the solution would be and check the impact\non existing documentation.\n\nIMHO the current state is:\n - Headings detection works reliable on existing code\n   i.e. no false positives and no false negatives.\n - The complexity (in code and runtime) is low.\n - Additional markup is not needed.\n\nIt is up to Russ, Andrew, Robert or Rob to decide how to proceed.\n\nVolker\n\nhttp://codereview.appspot.com/**5437056/<http://codereview.appspot.com/5437056/>\n>\n",
			"disapproval": false,
			"date": "2011-12-01 09:27:04.986200",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just to add to what Rob said, the key point about Go comments\nin contrast to Javadoc or Pydoc or whatever is that the goal is\nthat they look like comments, not markup.  It is okay to take\nadvantage of conventions that already exist as hints to how to\nmake them HTML, but not okay to force new conventions.\nI was skeptical of this CL but it really does seem to be converging\non the former, which is great.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-01 17:01:06.448101",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 5437056: go/doc: Detect headings in comments and format them as ...",
	"created": "2011-11-24 10:59:19.162567",
	"patchsets": [
		1,
		2001,
		5001,
		3005,
		8001,
		11001,
		11004,
		13002,
		15001,
		19001,
		6,
		19007
	],
	"modified": "2011-12-02 10:17:18.570684",
	"closed": true,
	"issue": 5437056
}