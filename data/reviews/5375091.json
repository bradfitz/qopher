{
	"description": "fmt: distinguish empty vs nil slice/map in %#v\n\nAlso update Scanf tests to cope with DeepEqual\ndistinguishing empty vs nil slice.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-14 20:16:34.857200",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Nov 14, 2011 at 12:16 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> fmt: distinguish empty vs nil slice/map in %#v\n>\n> Also update Scanf tests to cope with DeepEqual\n> distinguishing empty vs nil slice.\n>\n> Please review this at http://codereview.appspot.com/**5375091/<http://codereview.appspot.com/5375091/>\n>\n> Affected files:\n>  M src/pkg/fmt/fmt_test.go\n>  M src/pkg/fmt/print.go\n>  M src/pkg/fmt/scan_test.go\n>\n>\n> Index: src/pkg/fmt/fmt_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/fmt/fmt_test.go\n> +++ b/src/pkg/fmt/fmt_test.go\n> @@ -357,6 +357,11 @@\n>        {\"%#v\", map[string]B{\"a\": {1, 2}}, `map[string]\n> fmt_test.B{\"a\":fmt_test.B{I:1, j:2}}`},\n>        {\"%#v\", []string{\"a\", \"b\"}, `[]string{\"a\", \"b\"}`},\n>        {\"%#v\", SI{}, `fmt_test.SI{I:interface {}(nil)}`},\n> +       {\"%#v\", []int(nil), `[]int(nil)`},\n> +       {\"%#v\", []int{}, `[]int{}`},\n> +       {\"%#v\", map[int]byte(nil), `map[int] uint8(nil)`},\n> +       {\"%#v\", map[int]byte{}, `map[int] uint8{}`},\n> +\n>\n>        // slices with other formats\n>        {\"%#x\", []int{1, 2, 15}, `[0x1 0x2 0xf]`},\n> Index: src/pkg/fmt/print.go\n> ==============================**==============================**=======\n> --- a/src/pkg/fmt/print.go\n> +++ b/src/pkg/fmt/print.go\n> @@ -795,6 +795,10 @@\n>        case reflect.Map:\n>                if goSyntax {\n>                        p.buf.WriteString(f.Type().**String())\n> +                       if f.IsNil() {\n> +                               p.buf.WriteString(\"(nil)\")\n> +                               break\n> +                       }\n>                        p.buf.WriteByte('{')\n>                } else {\n>                        p.buf.Write(mapBytes)\n> @@ -873,6 +877,10 @@\n>                }\n>                if goSyntax {\n>                        p.buf.WriteString(value.Type()**.String())\n> +                       if f.IsNil() {\n> +                               p.buf.WriteString(\"(nil)\")\n> +                               break\n> +                       }\n>                        p.buf.WriteByte('{')\n>                } else {\n>                        p.buf.WriteByte('[')\n> Index: src/pkg/fmt/scan_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/fmt/scan_test.go\n> +++ b/src/pkg/fmt/scan_test.go\n> @@ -324,7 +324,7 @@\n>  var z IntString\n>\n>  var multiTests = []ScanfMultiTest{\n> -       {\"\", \"\", nil, nil, \"\"},\n> +       {\"\", \"\", []interface{}{}, []interface{}{}, \"\"},\n>        {\"%d\", \"23\", args(&i), args(23), \"\"},\n>        {\"%2s%3s\", \"22333\", args(&s, &t), args(\"22\", \"333\"), \"\"},\n>        {\"%2d%3d\", \"44555\", args(&i, &j), args(44, 555), \"\"},\n> @@ -378,7 +378,7 @@\n>                }\n>                val := v.Interface()\n>                if !reflect.DeepEqual(val, test.out) {\n> -                       t.Errorf(\"%s scanning %q: expected %v got %v, type\n> %T\", name, test.text, test.out, val, val)\n> +                       t.Errorf(\"%s scanning %q: expected %#v got %#v,\n> type %T\", name, test.text, test.out, val, val)\n>                }\n>        }\n>  }\n> @@ -417,7 +417,7 @@\n>                }\n>                val := v.Interface()\n>                if !reflect.DeepEqual(val, test.out) {\n> -                       t.Errorf(\"scanning (%q, %q): expected %v got %v,\n> type %T\", test.format, test.text, test.out, val, val)\n> +                       t.Errorf(\"scanning (%q, %q): expected %#v got %#v,\n> type %T\", test.format, test.text, test.out, val, val)\n>                }\n>        }\n>  }\n> @@ -520,7 +520,7 @@\n>                }\n>                result := resultVal.Interface()\n>                if !reflect.DeepEqual(result, test.out) {\n> -                       t.Errorf(\"scanning (%q, %q): expected %v got %v\",\n> test.format, test.text, test.out, result)\n> +                       t.Errorf(\"scanning (%q, %q): expected %#v got\n> %#v\", test.format, test.text, test.out, result)\n>                }\n>        }\n>  }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-14 21:10:27.283388",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=656d4907eebd ***\n\nfmt: distinguish empty vs nil slice/map in %#v\n\nAlso update Scanf tests to cope with DeepEqual\ndistinguishing empty vs nil slice.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5375091",
			"disapproval": false,
			"date": "2011-11-14 21:11:01.549705",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5375091: fmt: distinguish empty vs nil slice/map in %#v",
	"created": "2011-11-14 20:12:58.153138",
	"patchsets": [
		1,
		2001,
		2002,
		4001
	],
	"modified": "2011-11-14 21:11:02.677473",
	"closed": true,
	"issue": 5375091
}