{
	"description": "cmd/gc: apply escape analysis results to closures.\n\nThis avoids an allocation when closures are used\nas \"macros\", in Walk idioms, or as argument to defer.\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkSearchWrappers       1171          354  -69.77%\nBenchmarkCallClosure             3            3  -12.54%\nBenchmarkCallClosure1          119            7  -93.95%\nBenchmarkCallClosure2          183           74  -59.18%\nBenchmarkCallClosure3          187           75  -59.57%\nBenchmarkCallClosure4          187           76  -58.98%\n\nCompared to Go 1:\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkSearchWrappers         3208          354  -88.97%\n\nFixes issue 3520.",
	"cc": [
		"daniel.morsing@gmail.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com",
		"dave@cheney.net",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nOn 2013/02/24 16:54:52, bradfitz wrote:\n> Nice. Could you include a Go test using testing.AllocsPerRun so this can't\n> silently regress?\n\nDone.\n\nOn 2013/02/24 16:56:12, minux wrote:\n> https://codereview.appspot.com/7397056/diff/5001/src/pkg/sort/search_test.go\n> File src/pkg/sort/search_test.go (right):\n> \n> https://codereview.appspot.com/7397056/diff/5001/src/pkg/sort/search_test.go#newcode120\n> src/pkg/sort/search_test.go:120: func BenchmarkSearchWrappers(b *testing.B) {\n> b.ReportAllocs() ?\n\nI think it would pollute the ouptut to print zeroes if there is already a test, since people can use -benchmem if needed.",
			"disapproval": false,
			"date": "2013-02-24 17:13:34.104970",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/24 17:17:24, DMorsing wrote:\n> New patch set has chunk mismatch.\n\nReuploaded.",
			"disapproval": false,
			"date": "2013-02-24 21:39:31.696580",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=37a172cbde23 ***\n\ncmd/gc: apply escape analysis results to closures.\n\nThis avoids an allocation when closures are used\nas \"macros\", in Walk idioms, or as argument to defer.\n\nbenchmark                old ns/op    new ns/op    delta\nBenchmarkSearchWrappers       1171          354  -69.77%\nBenchmarkCallClosure             3            3  -12.54%\nBenchmarkCallClosure1          119            7  -93.95%\nBenchmarkCallClosure2          183           74  -59.18%\nBenchmarkCallClosure3          187           75  -59.57%\nBenchmarkCallClosure4          187           76  -58.98%\n\nCompared to Go 1:\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkSearchWrappers         3208          354  -88.97%\n\nFixes issue 3520.\n\nR=daniel.morsing, bradfitz, minux.ma, dave, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7397056",
			"disapproval": false,
			"date": "2013-02-25 23:40:41.995010",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-24 10:09:21.663990",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-24 12:19:51.440840",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-25 16:33:44.469300",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice. Could you include a Go test using testing.AllocsPerRun so this can't\r\nsilently regress?\r\n\r\nOn Sun, Feb 24, 2013 at 2:09 AM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: apply escape analysis results to closures.\r\n>\r\n> This avoids an allocation when closures are used\r\n> as \"macros\", in Walk idioms, or as argument to defer.\r\n>\r\n> benchmark                old ns/op    new ns/op    delta\r\n> BenchmarkSearchWrappers       1171          354  -69.77%\r\n> BenchmarkCallClosure             3            3  -12.54%\r\n> BenchmarkCallClosure1          119            7  -93.95%\r\n> BenchmarkCallClosure2          183           74  -59.18%\r\n> BenchmarkCallClosure3          187           75  -59.57%\r\n> BenchmarkCallClosure4          187           76  -58.98%\r\n>\r\n> Compared to Go 1:\r\n> benchmark                  old ns/op    new ns/op    delta\r\n> BenchmarkSearchWrappers         3208          354  -88.97%\r\n>\r\n> Fixes issue 3520.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7397056/<https://codereview.appspot.com/7397056/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/gc/closure.c\r\n>   M src/pkg/sort/search_test.go\r\n>\r\n>\r\n> Index: src/cmd/gc/closure.c\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/gc/closure.c\r\n> +++ b/src/cmd/gc/closure.c\r\n> @@ -241,14 +241,18 @@\r\n>         }\r\n>\r\n>         clos = nod(OCOMPLIT, N, nod(OIND, typ, N));\r\n> +       clos->esc = func->esc;\r\n>         clos->right->implicit = 1;\r\n>         clos->list = concat(list1(nod(OCFUNC, func->closure->nname, N)),\r\n> func->enter);\r\n>\r\n>         // Force type conversion from *struct to the func type.\r\n>         clos = nod(OCONVNOP, clos, N);\r\n>         clos->type = func->type;\r\n> -\r\n> +\r\n>         typecheck(&clos, Erv);\r\n> +       // typecheck will insert a PTRLIT node under CONVNOP,\r\n> +       // tag it with escape analysis result.\r\n> +       clos->left->esc = func->esc;\r\n>         walkexpr(&clos, init);\r\n>\r\n>         return clos;\r\n> Index: src/pkg/sort/search_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/sort/search_test.go\r\n> +++ b/src/pkg/sort/search_test.go\r\n> @@ -117,6 +117,17 @@\r\n>         }\r\n>  }\r\n>\r\n> +func BenchmarkSearchWrappers(b *testing.B) {\r\n> +       for i := 0; i < b.N; i++ {\r\n> +               SearchInts(data, 11)\r\n> +               SearchFloat64s(fdata, 2.1)\r\n> +               SearchStrings(sdata, \"\")\r\n> +               IntSlice(data).Search(0)\r\n> +               Float64Slice(fdata).Search(2.**0)\r\n> +               StringSlice(sdata).Search(\"x\")\r\n> +       }\r\n> +}\r\n> +\r\n>  // Abstract exhaustive test: all sizes up to 100,\r\n>  // all possible return values.  If there are any small\r\n>  // corner cases, this test exercises them.\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-24 16:54:52.328140",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7397056/diff/5001/src/pkg/sort/search_test.go\nFile src/pkg/sort/search_test.go (right):\n\nhttps://codereview.appspot.com/7397056/diff/5001/src/pkg/sort/search_test.go#newcode120\nsrc/pkg/sort/search_test.go:120: func BenchmarkSearchWrappers(b *testing.B) {\nb.ReportAllocs() ?",
			"disapproval": false,
			"date": "2013-02-24 16:56:12.362830",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I checked the Rietveld issue tracker a few weeks back but found no issue relating to this. Is anyone aware of an issue that the Rietveld folks are working on, or should I raise one ?\r\n\r\nOn 25/02/2013, at 4:17, daniel.morsing@gmail.com wrote:\r\n\r\n> New patch set has chunk mismatch.\r\n> \r\n> Didn't someone put in a check for that in the hg util a while back?\r\n> \r\n> https://codereview.appspot.com/7397056/\r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-02-24 21:52:57.252880",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes. folks do work on Rietveld, mainly people from the Go and Chromium projects. You can mail codereview-discuss@ if you want to ask if anyone has any ideas. You can also mail code reviews there, but CC me too.\n\nThanks.\nRuss",
			"disapproval": false,
			"date": "2013-02-25 16:31:42.631880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM on Go part.\r\n\r\nThanks.\r\n\r\nOn Sun, Feb 24, 2013 at 9:13 AM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> Please take another look.\r\n>\r\n>\r\n> On 2013/02/24 16:54:52, bradfitz wrote:\r\n>\r\n>> Nice. Could you include a Go test using testing.AllocsPerRun so this\r\n>>\r\n> can't\r\n>\r\n>> silently regress?\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> On 2013/02/24 16:56:12, minux wrote:\r\n>\r\n> https://codereview.appspot.**com/7397056/diff/5001/src/pkg/**\r\n> sort/search_test.go<https://codereview.appspot.com/7397056/diff/5001/src/pkg/sort/search_test.go>\r\n>\r\n>> File src/pkg/sort/search_test.go (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7397056/diff/5001/src/pkg/**\r\n> sort/search_test.go#newcode120<https://codereview.appspot.com/7397056/diff/5001/src/pkg/sort/search_test.go#newcode120>\r\n>\r\n>> src/pkg/sort/search_test.go:**120: func BenchmarkSearchWrappers(b\r\n>>\r\n> *testing.B) {\r\n>\r\n>> b.ReportAllocs() ?\r\n>>\r\n>\r\n> I think it would pollute the ouptut to print zeroes if there is already\r\n> a test, since people can use -benchmem if needed.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7397056/<https://codereview.appspot.com/7397056/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-24 17:17:14.732060",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Folks work on Rietveld?\r\n On Feb 24, 2013 1:52 PM, \"Dave Cheney\" <dave@cheney.net> wrote:\r\n\r\n> I checked the Rietveld issue tracker a few weeks back but found no issue\r\n> relating to this. Is anyone aware of an issue that the Rietveld folks are\r\n> working on, or should I raise one ?\r\n>\r\n> On 25/02/2013, at 4:17, daniel.morsing@gmail.com wrote:\r\n>\r\n> > New patch set has chunk mismatch.\r\n> >\r\n> > Didn't someone put in a check for that in the hg util a while back?\r\n> >\r\n> > https://codereview.appspot.com/7397056/\r\n> >\r\n> > --\r\n> >\r\n> > ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> > To unsubscribe from this group and stop receiving emails from it, send\r\n> an email to golang-dev+unsubscribe@googlegroups.com.\r\n> > For more options, visit https://groups.google.com/groups/opt_out.\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-24 22:54:36.828910",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "New patch set has chunk mismatch.\n\nDidn't someone put in a check for that in the hg util a while back?",
			"disapproval": false,
			"date": "2013-02-24 17:17:24.468100",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7397056: cmd/gc: apply escape analysis results to closures.",
	"created": "2013-02-24 10:05:15.018800",
	"patchsets": [
		1,
		2001,
		5001,
		8002,
		29001,
		32001
	],
	"modified": "2013-02-25 23:40:43.426250",
	"closed": true,
	"issue": 7397056
}