{
	"description": "path/filepath: use windows GetShortPathName api to force GetLongPathName to do its work",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@google.com"
	],
	"reviewers": [
		"hcwfrichter@gmail.com",
		"aram@mgk.ro",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-03-27 04:51:31.026533",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/27 04:59:55, frichter wrote:\n> ... depending on how your CWD is set.\n> \n\nWhat does CWD mean?\n\nAlex",
			"disapproval": false,
			"date": "2012-03-27 05:04:28.328875",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/27 05:34:21, frichter wrote:\n> \n> Anyway, os.Getwd() does return the lower case drive letter for me, when I'm on\n> d:\n\nI do not doubt. I will investigate it later. Thank you for bringing it to my attention.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-27 05:36:15.461523",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"aram@mgk.ro",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "GetShortPathName fails if short names are disabled on a volume. This is more common than you expect and it's becoming more common every day, for example exFAT doesn't have short names at all.\n\nGetCurrentDirectory returns what SetCurrentDirectory sets. If SetCurrentDirectory is called with a lower case path, GetCurrentDirectory will return the lower case path. This is the only way it could work, regardless of what they say, Windows is case sensitive but it tries real hard to give the illusion that it is case-insensitive.\n\nTry it out (the paths probably need to be on a different drive):\n\n  #include <Windows.h>\n  #include <tchar.h>\n\n  int\n  main(void) {\n      TCHAR buf[100];\n      LPCTSTR Dir = _T(\"C:\\\\acme\");\n      LPCTSTR DIR = _T(\"Q:\\\\ACME\");\n      LPCTSTR dir = _T(\"z:\\\\acme\");\n\n      SetCurrentDirectory(Dir);\n      GetCurrentDirectory(100, buf);\n      _tprintf(_T(\"%s\\n\"), buf);\n\n      SetCurrentDirectory(DIR);\n      GetCurrentDirectory(100, buf);\n      _tprintf(_T(\"%s\\n\"), buf);\n\n      SetCurrentDirectory(dir);\n      GetCurrentDirectory(100, buf);\n      _tprintf(_T(\"%s\\n\"), buf);\n\n      return 0;\n  }\n\nI'm very much against this change, I believe it's broken in the current form because short names might not exist and because the assumption that drive letters can be normalized to a single case is incorrect.",
			"disapproval": false,
			"date": "2012-03-27 10:46:34.698922",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 27, 2012 at 08:42,  <aram@mgk.ro> wrote:\n> No, I should have finished my sentence with \"IFF we don't make the\n> change for os.Getwd as well\".\n>\n> I was worried the assumption that GetCurrentDirectory returns a\n> consistent case for the drive letter is used elsewhere. Specifically, I\n> was worried that we canonicalize filepath.EvalSymlinks but we don't do\n> anything for os.Getwd.\n\nNo, that's okay.  We accept that except for EvalSymlinks\nall returned paths may not be in the \"canonical\" form.\nIf you want to canonicalize you call EvalSymlinks\n(which maybe some day we will rename).\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-27 13:29:29.404113",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-27 04:44:29.337431",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Large change. I hope it works. :-)\n\nAlex",
			"disapproval": false,
			"date": "2012-03-27 04:45:05.227823",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=bf61af5627ba ***\n\npath/filepath: use windows GetShortPathName api to force GetLongPathName to do its work\n\nR=golang-dev, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5928043",
			"disapproval": false,
			"date": "2012-03-27 04:53:15.043641",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/27 05:11:13, frichter wrote:\n> \n> For example:\n> D:\\go_fred\\src>c:\n> C:\\>cd d:\\\n> C:\\>d:\n> d:\\>cd go_fred\\src\n> d:\\go_fred\\src>\n> \n\nThis works differently for me:\n\nU:\\aa>c:\nC:\\>cd u:\\\nC:\\>u:\nU:\\>cd aa\nU:\\aa>\n\nAlex",
			"disapproval": false,
			"date": "2012-03-27 05:20:48.663413",
			"approval": false
		},
		{
			"sender": "hcwfrichter@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minor point; the comment in symlink_windows.go:58  \"Make drive letter upper case. This matches what os.Getwd returns.\"  os.Getwd can return upper or lower case drive names, depending on how your CWD is set.\n\nDoes not affect the patch, but could be misleading down the road.",
			"disapproval": false,
			"date": "2012-03-27 04:59:55.935748",
			"approval": false
		},
		{
			"sender": "hcwfrichter@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, Current working directory\n\nFor example:\nD:\\go_fred\\src>c:\nC:\\>cd d:\\\nC:\\>d:\nd:\\>cd go_fred\\src\nd:\\go_fred\\src>\n\n\nOn Tuesday, March 27, 2012 1:04:28 AM UTC-4, brainman wrote:\n>\n> On 2012/03/27 04:59:55, frichter wrote:\n> > ... depending on how your CWD is set.\n>\n>\n> What does CWD mean?\n>\n> Alex\n>\n> http://codereview.appspot.com/5928043/\n>\n>",
			"disapproval": false,
			"date": "2012-03-27 05:11:13.557743",
			"approval": false
		},
		{
			"sender": "hcwfrichter@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, odd, but it is Windows :-)\n\nThis machine is Vista-32 if it matters; maybe I will try some others tomorrow.\n\nAnyway, os.Getwd() does return the lower case drive letter for me, when I'm on d:",
			"disapproval": false,
			"date": "2012-03-27 05:34:21.218360",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 27, 2012 at 06:46,  <aram@mgk.ro> wrote:\n> I'm very much against this change, I believe it's broken in the current\n> form because short names might not exist\n\nWhat happens in that case?  I assume they don't get shortened,\nwhich would be fine.\n\n> and because the assumption that\n> drive letters can be normalized to a single case is incorrect.\n\nReally?  Can you have different meanings for C: and c: ?\n\nThe normalization is not trying to come up with the only name\nfor a file.  It is merely trying to come up with a canonical name\nfor a file, so that you can take two paths, canonicalize them,\nand then do meaningful comparisons.  I'd be happy to hear about\nconcrete counterexamples.  The hope is that if you ask the\noperating system to return the canonical name, it actually will.\n\nRight now this is a rarely used function, so I am not too worried\nif it doesn't handle an uncommon case here or there.  It is important\non Windows basically only for the go command, which needs to\nbe able to tell whether, for example, the current directory is a subdirectory\nof %GOROOT%.  To do that, it canonicalizes the paths and then\nuses string comparisons.\n\nAlso of note: as used in the go command, we never show these\ncanonicalized paths to the user.  They only exist during comparisons,\nso at some level the choice doesn't matter as long as it is consistent.\nAs long as C: and c: must have the same meaning, it doesn't matter\nwhich we use as our \"canonical\" form.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-27 10:58:41.341750",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"alex.brainman@gmail.com",
				"hcwfrichter@gmail.com",
				"aram@mgk.ro",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/27 10:58:41, rsc wrote:\n> What happens in that case?  I assume they don't get shortened,\n> which would be fine.\n\nCorrect, I was wrong about this, GetShortPathName doesn't fail if short names don't exist, it returns the long name which is fine. Sorry.\n\n> Really?  Can you have different meanings for C: and c: ?\n\nNo, I should have finished my sentence with \"IFF we don't make the change for os.Getwd as well\".\n\nI was worried the assumption that GetCurrentDirectory returns a consistent case for the drive letter is used elsewhere. Specifically, I was worried that we canonicalize filepath.EvalSymlinks but we don't do anything for os.Getwd.",
			"disapproval": false,
			"date": "2012-03-27 12:42:25.253152",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5928043: path/filepath: use windows GetShortPathName api to forc...",
	"created": "2012-03-27 04:36:33.833690",
	"patchsets": [
		1,
		2001,
		4006,
		7001
	],
	"modified": "2012-03-27 12:42:25.454916",
	"closed": true,
	"issue": 5928043
}