{
	"description": "go spec: define make() restrictions as for index expressions\n\nThis is a language change: Until now, the spec required run-\ntime panics for some of these errors. Note that gc and gccgo\nimplemented this inconsistently, and that both compilers already\nreported compile-time errors in some cases. This change makes\nmake() behave along the same vein as index expressions.\n\nThis addresses the spec aspect of issue 4085.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-17 18:46:04.860370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6725053/diff/1002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6725053/diff/1002/doc/go_spec.html#newcode4928\ndoc/go_spec.html:4928: a <a href=\"#Run_time_panics\">run-time panic</a> occurs.\nthis is a good example of what i was talking about yesterday. adding language about run time prevents the compiler from complaining about\nmake([]byte, 10, 0)\n\nthe previous sentence has the vague \"must hold\". i think it should be clear the the compiler might complain. for one thing, this is an easy error to make, forgetting the order of len and cap. i've made it myself.\n\ni'm starting to think the spec should shy away from saying when the error is detected, that it should be the implementer's decision between compiler and run-time, if even both exist.\n\nmaybe something as simple as this is all you need:\n\nIt is an error if n > m or if either value is negative.\n\nthis gives the compiler, if there is one, the freedom to reject the program, but guarantees that if not, the run-time implementation will catch it.",
			"disapproval": false,
			"date": "2012-10-17 22:17:32.112420",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-17 18:48:23.414950",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You have a valid concern and I voiced the same worry before.\n\nI have convinced myself that what we have so far is still ok: In Go, we have an explicit and precisely defined notion of what a constant is, and constants are exact. Thus, arguably, constants are a part of the type system (in fact, they mix with \"pure\" types with array declarations, for instance). Both the type system and our \"constant system\" is decidable (well, mostly), by design. We rely on the compiler checking our types for correctness. It can't do so everywhere, which is why we have run-time type assertions. I think the same is true for constants. The compiler does check constant expressions, and it can check several things with index and slice expressions. It should do the same here.\n\n- gri\n\nhttps://codereview.appspot.com/6725053/diff/1002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6725053/diff/1002/doc/go_spec.html#newcode4928\ndoc/go_spec.html:4928: a <a href=\"#Run_time_panics\">run-time panic</a> occurs.\nOn 2012/10/17 22:17:32, r wrote:\n> this is a good example of what i was talking about yesterday. adding language\n> about run time prevents the compiler from complaining about\n> make([]byte, 10, 0)\n\nThe language used here is the same as for index expressions. We try to state conditions that must be satisfied universally (at all times).\n\nThe additional phrase \"at run-time\" is used to for conditions than cannot necessarily be checked before run-time, by any system (compiler, interpreter, just-in-time system, etc.)\n\n> \n> the previous sentence has the vague \"must hold\". i think it should be clear the\n> the compiler might complain. for one thing, this is an easy error to make,\n> forgetting the order of len and cap. i've made it myself.\n\nIt now uses similar phrasing as for index expressions.\n\n> \n> i'm starting to think the spec should shy away from saying when the error is\n> detected, that it should be the implementer's decision between compiler and\n> run-time, if even both exist.\n> \n> maybe something as simple as this is all you need:\n> \n> It is an error if n > m or if either value is negative.\n\nThe problem with this approach is that we can have legal programs that are accepted by some compilers and not by others. That seems problematic.\n\n> \n> this gives the compiler, if there is one, the freedom to reject the program, but\n> guarantees that if not, the run-time implementation will catch it.",
			"disapproval": false,
			"date": "2012-10-18 18:36:12.902530",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nweasely but sure, let's go with that",
			"disapproval": false,
			"date": "2012-10-19 03:27:02.732160",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-18 18:36:38.651390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-19 17:09:15.771130",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fcfd4ff9b973 ***\n\ngo spec: define make() restrictions as for index expressions\n\nThis is a language change: Until now, the spec required run-\ntime panics for some of these errors. Note that gc and gccgo\nimplemented this inconsistently, and that both compilers already\nreported compile-time errors in some cases. This change makes\nmake() behave along the same vein as index expressions.\n\nThis addresses the spec aspect of issue 4085.\n\nR=r, rsc, iant, ken\nCC=golang-dev\nhttp://codereview.appspot.com/6725053",
			"disapproval": false,
			"date": "2012-10-19 17:11:13.327440",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6725053: go spec: define make() restrictions as for index expressions",
	"created": "2012-10-17 18:40:03.270710",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		10001,
		13001,
		17001,
		19001
	],
	"modified": "2012-10-19 17:11:14.924310",
	"closed": true,
	"issue": 6725053
}