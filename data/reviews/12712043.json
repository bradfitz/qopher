{
	"description": "misc/emacs: add support for mode=count coverage\n\nUse the same algorithm that go tool cover uses when producing HTML\noutput to render coverage intensity.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-09 21:21:19.049990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nAlan can do more thorough review maybe when he returns.\r\n\r\n\r\n\r\nOn Fri, Aug 9, 2013 at 2:21 PM, <dominik.honnef@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> misc/emacs: add support for mode=count coverage\r\n>\r\n> Use the same algorithm that go tool cover uses when producing HTML\r\n> output to render coverage intensity.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12712043/<https://codereview.appspot.com/12712043/>\r\n>\r\n> Affected files:\r\n>   M misc/emacs/go-mode.el\r\n>\r\n>\r\n> Index: misc/emacs/go-mode.el\r\n> ==============================**==============================**=======\r\n> --- a/misc/emacs/go-mode.el\r\n> +++ b/misc/emacs/go-mode.el\r\n> @@ -153,17 +153,56 @@\r\n>    \"Coverage color of untracked code.\"\r\n>    :group 'go-cover)\r\n>\r\n> +(defface go-coverage-0\r\n> +  '((t (:foreground \"#c00000\")))\r\n> +  \"Coverage color for uncovered code.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-1\r\n> +  '((t (:foreground \"#808080\")))\r\n> +  \"Coverage color for covered code with weight 1.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-2\r\n> +  '((t (:foreground \"#748c83\")))\r\n> +  \"Coverage color for covered code with weight 2.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-3\r\n> +  '((t (:foreground \"#689886\")))\r\n> +  \"Coverage color for covered code with weight 3.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-4\r\n> +  '((t (:foreground \"#5ca489\")))\r\n> +  \"Coverage color for covered code with weight 4.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-5\r\n> +  '((t (:foreground \"#50b08c\")))\r\n> +  \"Coverage color for covered code with weight 5.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-6\r\n> +  '((t (:foreground \"#44bc8f\")))\r\n> +  \"Coverage color for covered code with weight 6.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-7\r\n> +  '((t (:foreground \"#38c892\")))\r\n> +  \"Coverage color for covered code with weight 7.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-8\r\n> +  '((t (:foreground \"#2cd495\")))\r\n> +  \"Coverage color for covered code with weight 8.\r\n> +For mode=set, all covered lines will have this weight.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-9\r\n> +  '((t (:foreground \"#20e098\")))\r\n> +  \"Coverage color for covered code with weight 9.\"\r\n> +  :group 'go-cover)\r\n> +(defface go-coverage-10\r\n> +  '((t (:foreground \"#14ec9b\")))\r\n> +  \"Coverage color for covered code with weight 10.\"\r\n> +  :group 'go-cover)\r\n>  (defface go-coverage-covered\r\n>    '((t (:foreground \"#2cd495\")))\r\n>    \"Coverage color of covered code.\"\r\n>    :group 'go-cover)\r\n>\r\n> -(defface go-coverage-uncovered\r\n> -  '((t (:foreground \"#c00000\")))\r\n> -  \"Coverage color of uncovered code.\"\r\n> -  :group 'go-cover)\r\n> -\r\n> -\r\n>  (defvar go-mode-syntax-table\r\n>    (let ((st (make-syntax-table)))\r\n>      (modify-syntax-entry ?+  \".\" st)\r\n> @@ -960,7 +999,7 @@\r\n>      (point)))\r\n>\r\n>  (defstruct go--covered\r\n> -  start-line start-column end-line end-column covered)\r\n> +  start-line start-column end-line end-column covered count)\r\n>\r\n>  (defun go-coverage (input)\r\n>    \"Open a clone of the current buffer and overlay it with\r\n> @@ -968,7 +1007,9 @@\r\n>    (interactive \"fCoverage file: \")\r\n>    (let ((ranges '())\r\n>          (file-name (file-name-nondirectory (buffer-file-name)))\r\n> -        (gocov-buffer-name (concat (buffer-name) \"<gocov>\")))\r\n> +        (gocov-buffer-name (concat (buffer-name) \"<gocov>\"))\r\n> +        (max-count 0)\r\n> +        divisor)\r\n>\r\n>      (with-temp-buffer\r\n>        (insert-file-contents input)\r\n> @@ -982,6 +1023,9 @@\r\n>                (start-line start-column end-line end-column num count)\r\n>                (mapcar 'string-to-number rest)\r\n>\r\n> +            (if (> count max-count)\r\n> +                (setq max-count count))\r\n> +\r\n>              (if (and (string= (file-name-nondirectory file) file-name))\r\n>                  (push\r\n>                   (make-go--covered\r\n> @@ -989,10 +1033,14 @@\r\n>                    :start-column start-column\r\n>                    :end-line end-line\r\n>                    :end-column end-column\r\n> -                  :covered (/= count 0))\r\n> +                  :covered (/= count 0)\r\n> +                  :count count)\r\n>                   ranges)))\r\n>\r\n> -          (forward-line))))\r\n> +          (forward-line)))\r\n> +\r\n> +      (if (> max-count 0)\r\n> +          (setq divisor (log max-count))))\r\n>\r\n>      (with-current-buffer (or\r\n>                            (get-buffer gocov-buffer-name)\r\n> @@ -1006,15 +1054,26 @@\r\n>           'face 'go-coverage-untracked)\r\n>\r\n>          (dolist (range ranges)\r\n> -          (overlay-put\r\n> -           (make-overlay\r\n> -            (go--line-column-to-point\r\n> -             (go--covered-start-line range)\r\n> -             (go--covered-start-column range))\r\n> -            (go--line-column-to-point\r\n> -             (go--covered-end-line range)\r\n> -             (go--covered-end-column range)))\r\n> -           'face (if (go--covered-covered range) 'go-coverage-covered\r\n> 'go-coverage-uncovered))))\r\n> +          (let* ((count (go--covered-count range))\r\n> +                 (norm (cond\r\n> +                        ((= count 0)\r\n> +                         -0.1)\r\n> +                        ((= max-count 1)\r\n> +                         0.8)\r\n> +                        (t\r\n> +                         (/ (log count) divisor))))\r\n> +                 (n (1+ (floor (* norm 9))))\r\n> +                 (face (concat \"go-coverage-\" (number-to-string n)))\r\n> +                 (ov (make-overlay\r\n> +                      (go--line-column-to-point\r\n> +                       (go--covered-start-line range)\r\n> +                       (go--covered-start-column range))\r\n> +                      (go--line-column-to-point\r\n> +                       (go--covered-end-line range)\r\n> +                       (go--covered-end-column range)))))\r\n> +\r\n> +            (overlay-put ov 'face face)\r\n> +            (overlay-put ov 'help-echo (format \"Count: %d\" count)))))\r\n>\r\n>        (display-buffer (current-buffer) 'display-buffer-reuse-window))**))\r\n>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-09 21:42:38.472950",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b933767c389f ***\n\nmisc/emacs: add support for mode=count coverage\n\nUse the same algorithm that go tool cover uses when producing HTML\noutput to render coverage intensity.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12712043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-08-09 21:42:47.956640",
			"approval": false
		}
	],
	"owner_email": "dominik.honnef@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dominik Honnef",
	"subject": "code review 12712043: misc/emacs: add support for mode=count coverage",
	"created": "2013-08-09 21:19:34.362260",
	"patchsets": [
		1,
		3001,
		6001
	],
	"modified": "2013-08-10 17:13:46.085130",
	"closed": true,
	"issue": 12712043
}