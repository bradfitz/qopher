{
	"description": "go_spec: composite literals are addressable",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "stephenm@golang.org",
			"recipients": [
				"stephenm@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-09-24 03:28:48.833197",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> go_spec: composite literals are addressable\n\nThey're not, really.  Addressable means more than you\ncan take & of them.  It means you can assign to one\nor make a method call on one, and neither of those is true.\n\nFor example,\n\n    [2]int{1,2}[0] = 3\n\nis illegal.  The &composite-literal syntax is a special\ncase documented in the composite literal section:\n\n    Taking the address of a composite literal\n    (\u00a7Address operators) generates a unique pointer\n    to an instance of the literal's value.\n\nIt should probably be mentioned in the Address operators\nsection too, but they're not generally addressable.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-09-24 04:14:37.540802",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"stephenm@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "assuming abandoned",
			"disapproval": false,
			"date": "2010-11-01 20:45:00.678005",
			"approval": false
		}
	],
	"owner_email": "stephenm@golang.org",
	"private": false,
	"base_url": "",
	"owner": "stephenm",
	"subject": "code review 2258044: go_spec: composite literals are addressable",
	"created": "2010-09-24 03:27:20.407516",
	"patchsets": [
		1,
		2001
	],
	"modified": "2010-11-01 20:45:00.678313",
	"closed": false,
	"issue": 2258044
}