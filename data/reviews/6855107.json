{
	"description": "ssh: add functions for public keys in wire & auth keys format.\n\nThis allows easy import/export of public keys in the format\nexpected by OpenSSH for authorized_keys files, as well as\nallowing comparisons with ServerConfig's PublickeyCallback.\nFixes issue 3908.",
	"cc": [
		"agl@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"agl@chromium.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"dayveday@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: agl@chromium.org, dayveday@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-11-27 18:48:09.948020",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855107/diff/4004/ssh/keys.go\nFile ssh/keys.go (right):\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode124\nssh/keys.go:124: // ParseAuthorizedKeys parses a protocol 2 entry from an\ns/protocol 2 entry/public key/\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode125\nssh/keys.go:125: // authorized_keys file used in OpenSSH\nShould reference \"sshd(8) manual page\"\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode126\nssh/keys.go:126: func ParseAuthorizedKeys(in []byte) (out interface{}, comment []byte, options [][]byte, rest []byte, ok bool) {\nThe function only parses a single key so probably shouldn't have a plural name.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode130\nssh/keys.go:130: return nil, nil, nil, nil, false\ncan just be \"return\"\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode136\nssh/keys.go:136: rest = bytes.TrimSpace(in[end:])\nthat's an odd `rest' return value because it won't include any trailing space and it might start with a '\\n'.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode141\nssh/keys.go:141: goto startOfEntry\nlooks like there's a for loop in here.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode152\nssh/keys.go:152: case hostAlgoRSA, hostAlgoDSA:\nThis list is already incomplete in more recent OpenSSH versions. It looks like a better way to figure out whether fields[0] is a key type or options is the presence of an '='.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode178\nssh/keys.go:178: func MarshalAuthorizedKeys(key interface{}) []byte {\nlikewise about the plural function name.",
			"disapproval": false,
			"date": "2012-11-29 21:15:22.003980",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855107/diff/6001/ssh/keys.go\nFile ssh/keys.go (right):\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode125\nssh/keys.go:125: // authorized_keys2 files for OpenSSH\nauthorized_keys2 has been replaced by plain authorized_keys these days I thought.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode136\nssh/keys.go:136: out, rest, ok = parsePubKey(key)\nA `rest' output would typically receive the remainder of the input after processing. But here it receives the remainder of the base64 data.\n\nI would expect this function to find the first '\\n' in |in| and assign rest to everything after that. Then remove any trailing '\\r'. Then attempt to process a key. Possibly it should skip lines until it finds a valid key.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode155\nssh/keys.go:155: \nremove extra blank line.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode164\nssh/keys.go:164: b64Key := base64.StdEncoding.EncodeToString(keyData)\nIf you're going to use a bytes.Buffer, it would seem better to do:\n\nencoder := base64.NewEncoder(base64.StdEncoding, b)\nencoder.Write(serializePublickey(key))\nencoder.Close()\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode165\nssh/keys.go:165: b.WriteString(\" \")\nb.WriteByte(' ')\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode167\nssh/keys.go:167: return b.Bytes()\nb.WriteByte('\\n')\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/test/keys_test.go\nFile ssh/test/keys_test.go (right):\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/test/keys_test.go#newcode14\nssh/test/keys_test.go:14: \nremove blank line.",
			"disapproval": false,
			"date": "2012-11-27 21:10:45.666820",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I cleaned up the whole CRLF parsing and added to and cleaned up the tests.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go\nFile ssh/keys.go (right):\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode124\nssh/keys.go:124: // ParseAuthorizedKeys parses a protocol 2 entry from an\nOn 2012/11/29 21:15:22, agl1 wrote:\n> s/protocol 2 entry/public key/\n\nI said protocol 2 because I'm explicitly ignoring protocol 1 keys here. Do I need to actually account for them and process them here, or are the deprecated enough to not worry about?\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode125\nssh/keys.go:125: // authorized_keys file used in OpenSSH\nOn 2012/11/29 21:15:22, agl1 wrote:\n> Should reference \"sshd(8) manual page\"\n\nDone.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode126\nssh/keys.go:126: func ParseAuthorizedKeys(in []byte) (out interface{}, comment []byte, options [][]byte, rest []byte, ok bool) {\nOn 2012/11/29 21:15:22, agl1 wrote:\n> The function only parses a single key so probably shouldn't have a plural name.\n\nDone.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode152\nssh/keys.go:152: case hostAlgoRSA, hostAlgoDSA:\nOn 2012/11/29 21:15:22, agl1 wrote:\n> This list is already incomplete in more recent OpenSSH versions. It looks like a\n> better way to figure out whether fields[0] is a key type or options is the\n> presence of an '='.\n\nThere are a couple non-'=' options (cert-authority, no-pty), so it can't be that. The man page mentions that options never start with a number and to use that, but none of the keytypes start with a number either, so I'm not sure how to deal with it from that approach.\n\nI've added the other ECDSA keytypes but panic (or should they return !ok ?) for now.\n\nhttps://codereview.appspot.com/6855107/diff/4004/ssh/keys.go#newcode178\nssh/keys.go:178: func MarshalAuthorizedKeys(key interface{}) []byte {\nOn 2012/11/29 21:15:22, agl1 wrote:\n> likewise about the plural function name.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-30 02:41:03.619900",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"dayveday@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net, golang-dev@googlegroups.com (cc: agl@chromium.org, dayveday@gmail.com, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-27 18:49:17.510760",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Forgot to hg upload?",
			"disapproval": false,
			"date": "2012-11-30 16:21:05.053100",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net, golang-dev@googlegroups.com (cc: agl@chromium.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-28 02:10:18.803470",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net, golang-dev@googlegroups.com (cc: agl@chromium.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-30 17:54:17.496660",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855107/diff/6001/ssh/keys.go\nFile ssh/keys.go (right):\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode125\nssh/keys.go:125: // authorized_keys2 files for OpenSSH\nOn 2012/11/27 21:10:45, agl1 wrote:\n> authorized_keys2 has been replaced by plain authorized_keys these days I\n> thought.\n\nyou're right; removed.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode136\nssh/keys.go:136: out, rest, ok = parsePubKey(key)\nOn 2012/11/27 21:10:45, agl1 wrote:\n> A `rest' output would typically receive the remainder of the input after\n> processing. But here it receives the remainder of the base64 data.\n> \n> I would expect this function to find the first '\\n' in |in| and assign rest to\n> everything after that. Then remove any trailing '\\r'. Then attempt to process a\n> key. Possibly it should skip lines until it finds a valid key.\n\nAt the last minute I changed this to capture the comment, but didn't add a test. I guess I have an issue now. Originally I used serializePublickey to do comparisons in ServerConfig's PublickeyCallback member; but its useful also are serializing/parsing authorized_keys files, so I wrote these functions to perform that, unfortunately now closing off the functionality I was originally after. I've rewritten these functions so I can do that while still exporting the original functions I need.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode155\nssh/keys.go:155: \nOn 2012/11/27 21:10:45, agl1 wrote:\n> remove extra blank line.\n\nDone.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode164\nssh/keys.go:164: b64Key := base64.StdEncoding.EncodeToString(keyData)\nOn 2012/11/27 21:10:45, agl1 wrote:\n> If you're going to use a bytes.Buffer, it would seem better to do:\n> \n> encoder := base64.NewEncoder(base64.StdEncoding, b)\n> encoder.Write(serializePublickey(key))\n> encoder.Close()\n\nDone.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode165\nssh/keys.go:165: b.WriteString(\" \")\nOn 2012/11/27 21:10:45, agl1 wrote:\n> b.WriteByte(' ')\n\nDone.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/keys.go#newcode167\nssh/keys.go:167: return b.Bytes()\nOn 2012/11/27 21:10:45, agl1 wrote:\n> b.WriteByte('\\n')\n\nDone.\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/test/keys_test.go\nFile ssh/test/keys_test.go (right):\n\nhttps://codereview.appspot.com/6855107/diff/6001/ssh/test/keys_test.go#newcode14\nssh/test/keys_test.go:14: \nOn 2012/11/27 21:10:45, agl1 wrote:\n> remove blank line.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-28 02:09:02.667880",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6855107/diff/3003/ssh/keys.go\nFile ssh/keys.go (right):\n\nhttps://codereview.appspot.com/6855107/diff/3003/ssh/keys.go#newcode16\nssh/keys.go:16: // Keytypes supported by OpenSSH 1.5.9\n1.5.9? Maybe 5.9?\n\nhttps://codereview.appspot.com/6855107/diff/3003/ssh/keys.go#newcode152\nssh/keys.go:152: if len(in) != 0 && !bytes.HasPrefix(in, []byte(\"#\")) {\nreplace\n  !bytes.HasPrefix(in, []byte(\"#\"))\nwith\n  in[0] != '#'\n\nhttps://codereview.appspot.com/6855107/diff/3003/ssh/keys.go#newcode172\nssh/keys.go:172: panic(\"unexpected key type\")\nI think a panic is too much.\n\nIdeally we would continue to the next line, which suggests that all this should be in the for loop.\n\nhttps://codereview.appspot.com/6855107/diff/3003/ssh/keys.go#newcode174\nssh/keys.go:174: options = strings.Split(string(fields[0]), \",\")\nWhat if the options contain a space in a quoted value?\n\nI'm afraid that I think this parser needs to be significantly more complex in order to have similar behaviour to the parser in OpenSSH's auth2-pubkey.c.\n\nPlease see https://codereview.appspot.com/6855115\n\nThat would be my suggestion. I'd strongly suggesting copying the keys_test.go file over after reviewing it as it contains cases that I think this code will fail on.\n\nYou may wish to start iterating on the keys.go, in which case it would be good to copy it over, do an hg upload and then start changing things. (So that the inter-patchset diffs work in the codereview tool.)",
			"disapproval": false,
			"date": "2012-11-30 22:36:45.441880",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"agl@chromium.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=159cc2447982&repo=crypto ***\n\nssh: add functions for public keys in wire & auth keys format.\n\nThis allows easy import/export of public keys in the format\nexpected by OpenSSH for authorized_keys files, as well as\nallowing comparisons with ServerConfig's PublickeyCallback.\nFixes issue 3908.\n\nR=agl, dave, golang-dev, bradfitz\nCC=agl, golang-dev\nhttps://codereview.appspot.com/6855107\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-12-10 22:43:26.907310",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Pulled your changes in, caught one change needed in parser for backslashed quotes, added more test cases.\n\nPTAL.",
			"disapproval": false,
			"date": "2012-12-04 18:14:54.836490",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, this got washed away by other stuff last week. There's a couple of things I might fix up when landing, but I think this is basically good to go.\n\nHave you signed the ICLA? http://golang.org/doc/contribute.html#copyright",
			"disapproval": false,
			"date": "2012-12-10 16:11:52.423620",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 10, 2012 at 11:21 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> He's @google.com, so no CLA needed.\r\n\r\nOh, good point. Sending out CONTRIBUTORS change now.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-12-10 17:21:17.303750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "He's @google.com, so no CLA needed.\r\n\r\nOn Mon, Dec 10, 2012 at 11:11 AM, <agl@golang.org> wrote:\r\n\r\n> Sorry, this got washed away by other stuff last week. There's a couple\r\n> of things I might fix up when landing, but I think this is basically\r\n> good to go.\r\n>\r\n> Have you signed the ICLA?\r\n> http://golang.org/doc/**contribute.html#copyright<http://golang.org/doc/contribute.html#copyright>\r\n>\r\n> https://codereview.appspot.**com/6855107/<https://codereview.appspot.com/6855107/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-10 16:27:20.486150",
			"approval": false
		}
	],
	"owner_email": "sledbetter@google.com",
	"private": false,
	"base_url": "",
	"owner": "sledbetter",
	"subject": "code review 6855107: ssh: add functions for public keys in wire & auth keys ...",
	"created": "2012-11-27 18:41:41.835910",
	"patchsets": [
		1,
		1002,
		3001,
		6001,
		4004,
		3003,
		12001,
		15002
	],
	"modified": "2012-12-10 16:27:20.486150",
	"closed": false,
	"issue": 6855107
}