{
	"description": "sort: add an example showing sorting struct by different keys",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org"
	],
	"reviewers": [
		"adg@golang.org",
		"mtj@google.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 26, 2013 at 6:14 PM, Michael Jones <mtj@google.com> wrote:\r\n> Might there be a clever way to chain these for multiple keys? (by X and then\r\n> by Y)\r\n\r\nI'm sure there is.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-02-27 04:53:18.703900",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-26 23:25:39.940970",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-26 23:40:43.663990",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's a lot of boilerplate. I was trying to write something small and\r\npretty. Let me think about it some more.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-02-26 23:52:23.267820",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7376058/diff/3001/src/pkg/sort/example_keys_test.go\nFile src/pkg/sort/example_keys_test.go (right):\n\nhttps://codereview.appspot.com/7376058/diff/3001/src/pkg/sort/example_keys_test.go#newcode49\nsrc/pkg/sort/example_keys_test.go:49: s.planets = planets\nsplitting this setup seems a little odd, and means you can't use Sort\nconcurrently, nor even call String before sorting. The simplest solution would\nbe two types (a func and a func+slice).",
			"disapproval": false,
			"date": "2013-02-26 23:45:13.225560",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Might there be a clever way to chain these for multiple keys? (by X and\r\nthen by Y)\r\n\r\nOn Tue, Feb 26, 2013 at 9:05 PM, <adg@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7376058/diff/14001/src/**\r\n> pkg/sort/example_keys_test.go<https://codereview.appspot.com/7376058/diff/14001/src/pkg/sort/example_keys_test.go>\r\n> File src/pkg/sort/example_keys_**test.go (right):\r\n>\r\n> https://codereview.appspot.**com/7376058/diff/14001/src/**\r\n> pkg/sort/example_keys_test.go#**newcode63<https://codereview.appspot.com/7376058/diff/14001/src/pkg/sort/example_keys_test.go#newcode63>\r\n> src/pkg/sort/example_keys_**test.go:63: // ExampleSortKeys demonstrates a\r\n> technique for sorting a struct type using programmable sort criteria.\r\n> Example_SortKeys ?\r\n>\r\n> https://codereview.appspot.**com/7376058/diff/14001/src/**\r\n> pkg/sort/example_keys_test.go#**newcode64<https://codereview.appspot.com/7376058/diff/14001/src/pkg/sort/example_keys_test.go#newcode64>\r\n> src/pkg/sort/example_keys_**test.go:64: func Example_sortKeys() {\r\n> capital S?\r\n>\r\n>\r\n> https://codereview.appspot.**com/7376058/<https://codereview.appspot.com/7376058/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-02-27 02:15:28.308170",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand your proposal.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-02-26 23:47:38.223810",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "According to package testing, it must be lower case or godoc will\r\ninsist it be an exported identifier in the package.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-02-27 02:12:32.118260",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-26 23:50:56.111230",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 27, 2013 at 10:47 AM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I don't understand your proposal.\r\n\r\nHave\r\n  type planetComparer func(p1, p2 *Planet) bool\r\nwhich is returned by the By function. It has a Sort method that takes\r\na []Planet as you currently have it, but then uses a second type,\r\nsomething like\r\n  type planetSorter struct {\r\n    less func(p1, p2 *Planet) bool\r\n    s []Planet\r\n  }\r\non which the Len/Less/Swap methods are hung. The Sort method creates a\r\nnew instance of that struct each call, and passes it to sort.Sort to\r\ndo the work.\r\n",
			"disapproval": false,
			"date": "2013-02-26 23:51:34.495340",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd use a slice of functions, and call the next element of the slice\r\nonly if the first function claims equality. An exercise for the reader\r\nto construct.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-02-27 07:22:54.134370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-27 00:45:42.797070",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 27 February 2013 18:22, Rob Pike <r@golang.org> wrote:\r\n\r\n> the first function claims equality.\r\n\r\n\r\nHow does that work? !fn(a, b) && !fn(b, a) ?\r\n",
			"disapproval": false,
			"date": "2013-02-27 21:29:43.532570",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think I semi-independently came up with your approach, and it's\r\nslightly more magical but a good example.\r\nPlus methods on functions are always fun.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-02-27 00:46:43.189590",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nthat's nicer.",
			"disapproval": false,
			"date": "2013-02-27 01:02:19.693900",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=2bf8d07c14c1 ***\n\nsort: add an example showing sorting struct by different keys\n\nR=golang-dev, dsymonds\nCC=golang-dev\nhttps://codereview.appspot.com/7376058",
			"disapproval": false,
			"date": "2013-02-27 01:17:53.444850",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7376058/diff/14001/src/pkg/sort/example_keys_test.go\nFile src/pkg/sort/example_keys_test.go (right):\n\nhttps://codereview.appspot.com/7376058/diff/14001/src/pkg/sort/example_keys_test.go#newcode63\nsrc/pkg/sort/example_keys_test.go:63: // ExampleSortKeys demonstrates a technique for sorting a struct type using programmable sort criteria.\nExample_SortKeys ?\n\nhttps://codereview.appspot.com/7376058/diff/14001/src/pkg/sort/example_keys_test.go#newcode64\nsrc/pkg/sort/example_keys_test.go:64: func Example_sortKeys() {\ncapital S?",
			"disapproval": false,
			"date": "2013-02-27 02:05:20.478060",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I forgot about that.\r\n\r\n\r\nOn 27 February 2013 13:12, Rob Pike <r@golang.org> wrote:\r\n\r\n> According to package testing, it must be lower case or godoc will\r\n> insist it be an exported identifier in the package.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-27 02:15:49.559910",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The dataset doesn't really lend itself to being sorted in multiple\r\ndimensions because none of rows have common values in any field.\r\n\r\n\r\nOn 27 February 2013 16:03, Michael Jones <mtj@google.com> wrote:\r\n\r\n> Ooh, so that should be in the example. ;-)\r\n>\r\n>\r\n> On Tue, Feb 26, 2013 at 11:59 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n>>\r\n>> On 27 February 2013 13:14, Michael Jones <mtj@google.com> wrote:\r\n>>\r\n>>> Might there be a clever way to chain these for multiple keys? (by X and\r\n>>> then by Y)\r\n>>\r\n>>\r\n>> Sure:\r\n>>\r\n>> nameAndDistance := func(p1, p2 *Planet) bool {\r\n>>   if p1.name == p2.name {\r\n>>     return distance(p1, p2)\r\n>>   }\r\n>>   return name(p1, p2)\r\n>> }\r\n>>\r\n>>\r\n>\r\n>\r\n> --\r\n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n> 650-335-5765\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-27 05:12:58.014050",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 27 February 2013 13:14, Michael Jones <mtj@google.com> wrote:\r\n\r\n> Might there be a clever way to chain these for multiple keys? (by X and\r\n> then by Y)\r\n\r\n\r\nSure:\r\n\r\nnameAndDistance := func(p1, p2 *Planet) bool {\r\n  if p1.name == p2.name {\r\n    return distance(p1, p2)\r\n  }\r\n  return name(p1, p2)\r\n}\r\n",
			"disapproval": false,
			"date": "2013-02-27 04:59:48.331220",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ooh, so that should be in the example. ;-)\r\n\r\nOn Tue, Feb 26, 2013 at 11:59 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n>\r\n> On 27 February 2013 13:14, Michael Jones <mtj@google.com> wrote:\r\n>\r\n>> Might there be a clever way to chain these for multiple keys? (by X and\r\n>> then by Y)\r\n>\r\n>\r\n> Sure:\r\n>\r\n> nameAndDistance := func(p1, p2 *Planet) bool {\r\n>   if p1.name == p2.name {\r\n>     return distance(p1, p2)\r\n>   }\r\n>   return name(p1, p2)\r\n> }\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-02-27 05:04:02.730120",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*a == *b sounds fine to me in this case, but that would work too.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-02-27 21:31:32.264760",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7376058: sort: add an example showing sorting struct by differen...",
	"created": "2013-02-26 23:25:36.523160",
	"patchsets": [
		1,
		3001,
		6002,
		14001,
		3002,
		21001
	],
	"modified": "2013-02-27 18:38:52.581380",
	"closed": true,
	"issue": 7376058
}