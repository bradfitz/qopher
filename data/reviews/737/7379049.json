{
	"description": "xml: support for xml.Unmarshaler",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nightlyone@googlemail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Tests will come soon.\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/read.go#newcode230\nsrc/pkg/encoding/xml/read.go:230: var ok bool\nOn 2013/02/24 11:12:37, ioe wrote:\n> no need for this declaration, if you write\n> if p.unmarshaler, ok := v.Interface().(Unmarshaler); !ok {\n> ...\n> } else {\n> ...\n> }\n\nok is modified in the !ok&&v.CanAddr(), so an if-else construction will not pick cases where the concrete type is not an Unmarshaler but the pointer is. Using an else here I think would make the code less clear. Also, `:=` cannot be used when a multiple assignment includes a struct field.\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/read.go#newcode234\nsrc/pkg/encoding/xml/read.go:234: if ok {\nOn 2013/02/24 11:12:37, ioe wrote:\n> } else {\n> \n> like mentioned above.\n\nAs above.\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/typeinfo.go\nFile src/pkg/encoding/xml/typeinfo.go (right):\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/typeinfo.go#newcode36\nsrc/pkg/encoding/xml/typeinfo.go:36: fInterface\nOn 2013/02/24 11:12:37, ioe wrote:\n> fUnmarshaler instead? \n> \n> Rationale we will have a Marshaler and an Unmarshaler and the tinfoMap is a\n> global variable shared between Encoders and Decoders. \n> \n> Easy to fix with gofmt -w -r \"fInterface -> fUnmarshaler\" :-)\n\nDone.",
			"disapproval": false,
			"date": "2013-02-24 22:39:25.694010",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks quite good. \n\nI'am just unhappy with fInterface as a name. See comments for details.\n\nDo you mind sharing your test cases? Perhaps adding them to the existing test suite in src/pkg/encoding/xml/marshal_test.go to the \"marshalTests\"? \n\nYou can mark the cases \"UnmarshalOnly: true\" to test your changes and keep them integrated with upstream.\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/read.go#newcode230\nsrc/pkg/encoding/xml/read.go:230: var ok bool\nno need for this declaration, if you write\nif p.unmarshaler, ok := v.Interface().(Unmarshaler); !ok {\n...\n} else {\n...\n}\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/read.go#newcode234\nsrc/pkg/encoding/xml/read.go:234: if ok {\n} else {\n\nlike mentioned above.\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/typeinfo.go\nFile src/pkg/encoding/xml/typeinfo.go (right):\n\nhttps://codereview.appspot.com/7379049/diff/5001/src/pkg/encoding/xml/typeinfo.go#newcode36\nsrc/pkg/encoding/xml/typeinfo.go:36: fInterface\nfUnmarshaler instead? \n\nRationale we will have a Marshaler and an Unmarshaler and the tinfoMap is a global variable shared between Encoders and Decoders. \n\nEasy to fix with gofmt -w -r \"fInterface -> fUnmarshaler\" :-)",
			"disapproval": false,
			"date": "2013-02-24 11:12:37.618390",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Still have one problem: Top level Unmarshalers are not called. I'm not sure how to deal with this.",
			"disapproval": false,
			"date": "2013-02-25 02:20:53.403800",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7379049/diff/19001/src/pkg/encoding/xml/read_test.go\nFile src/pkg/encoding/xml/read_test.go (right):\n\nhttps://codereview.appspot.com/7379049/diff/19001/src/pkg/encoding/xml/read_test.go#newcode659\nsrc/pkg/encoding/xml/read_test.go:659: {Value: \"F\", Attr1: \"X\"},\nThis test currently fails with the first element of the slice not being filled. unmarshal appends, but the Unmarshaler is not called to unmarshal the XML element.",
			"disapproval": false,
			"date": "2013-02-28 06:07:15.819530",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 00:14:14, kortschak wrote:\n> Hello mailto:nightlyone@googlemail.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nNote outstanding failing case. I can see why it happens, but cannot figure out how to resolve this. It may be a deal breaker for my approach.",
			"disapproval": false,
			"date": "2013-03-01 00:17:20.658990",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nightlyone@googlemail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-01 00:14:14.870060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am sad to say it, but I think we will have to postpone XML work until after Go 1.1. \n\nI regret that we didn't have more time to make encoding/xml better, but given the tradeoff I think focusing on core performance and implementation pieces for this final release push is probably the right choice. Unlike most of the performance and other stuff we're trying to shake out right now, functionality such as XML parsing can be provided by go get-able libraries as a stopgap until Go 1.2.\n\nReplying specifically to this CL, I think there are lots of design questions still open. This Unmarshaler interface is similar in some ways to what we had before Go 1 (and pulled out because we knew it wasn't flexible enough and didn't want to lock it in). It doesn't provide an easy way to distinguish attributes from inner element structure from plain cdata, and it doesn't provide access to the underlying XML stream to make parsing rich data easier.\n\nGiven all these questions, I think we have little choice but to postpone the XML API work. I know you were looking forward to it, and I apologize that we won't get there. I encourage you to put your copy of the library in a go get-able repository so that others who are interested can use the extensions.\n\nThanks.\nRuss",
			"disapproval": false,
			"date": "2013-03-12 03:25:04.164950",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No worries and thanks.\n\nThe code is go getable from code.google.com/p/biogo.ncbi/xml\n\nNote for others, there is still an outstanding failing test. This is not a deal breaker for use for us (yet) but may well be for others. When the time comes that it becomes significant for our use, I will work on it further. Until then, people (after recovery from Go1.1) are welcome to submit a fix.",
			"disapproval": false,
			"date": "2013-03-12 03:30:52.086230",
			"approval": false
		}
	],
	"owner_email": "dan.kortschak@adelaide.edu.au",
	"private": false,
	"base_url": "",
	"owner": "kortschak",
	"subject": "code review 7379049: xml: support for xml.Unmarshaler",
	"created": "2013-02-23 23:46:08.995140",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		7005,
		2002,
		10002,
		19001,
		24001,
		19002
	],
	"modified": "2013-04-18 01:18:05.955980",
	"closed": true,
	"issue": 7379049
}