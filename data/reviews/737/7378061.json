{
	"description": "cmd/vet: check argument types in printf formats\nFixes issue 4404.",
	"cc": [
		"gri@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-23 18:12:26.108430",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you care.\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go\nFile src/cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode18\nsrc/cmd/vet/print.go:18: \"unsafe\" // just for test case printing unsafe.Pointer\nIf you move this into a separate print_bad.go file with a // +build ignore tag, you can keep it from being required for building vet.",
			"disapproval": false,
			"date": "2013-02-23 18:28:54.729960",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go\nFile src/cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode110\nsrc/cmd/vet/print.go:110: func (f *File) checkPrintf(call *ast.CallExpr, name string, skip int) {\nOn 2013/02/23 18:51:12, gri wrote:\n> Can we rename skip - I find it confusing here. It seems like argNo would be\n> clearer.\n\nDone.\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode316\nsrc/cmd/vet/print.go:316: case types.Uint, types.Uint8, types.Uint16, types.Uint32, types.Uint64, types.Uintptr:\nOn 2013/02/23 18:51:12, gri wrote:\n> 2 lines instead of two cases? fallthrough? (see comment below as well)\nsee below, although here (unlike with the type switch) i can use a fallthrough.\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode334\nsrc/cmd/vet/print.go:334: case uint, uint8, uint16, uint32, uint64:\ndone, but i like keeping int and uint separately like this. makes it easier for me to see i have all the cases.\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode337\nsrc/cmd/vet/print.go:337: if integral {\nOn 2013/02/23 18:51:12, gri wrote:\n> can go into the switch\n\nDone.\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode540\nsrc/cmd/vet/print.go:540: // TODO\nadded a couple. there are plenty of printf tests here.",
			"disapproval": false,
			"date": "2013-02-23 19:08:17.208180",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-23 18:43:11.823720",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-23 18:51:29.521860",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go\nFile src/cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode18\nsrc/cmd/vet/print.go:18: \"unsafe\" // just for test case printing unsafe.Pointer\nOn 2013/02/23 18:28:54, rsc wrote:\n> If you move this into a separate print_bad.go file with a // +build ignore tag,\n> you can keep it from being required for building vet.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-23 18:44:00.016790",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/atomic.go\nFile src/cmd/vet/atomic.go (right):\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/atomic.go#newcode13\nsrc/cmd/vet/atomic.go:13: // checkAtomicAssignment walks the assignment statement checking for common\ncomomon is cute, though\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go\nFile src/cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode110\nsrc/cmd/vet/print.go:110: func (f *File) checkPrintf(call *ast.CallExpr, name string, skip int) {\nCan we rename skip - I find it confusing here. It seems like argNo would be clearer.\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode111\nsrc/cmd/vet/print.go:111: if len(call.Args) <= skip {\nif argNo >= len(call.Args) {\n   return\n}\n\nseems clearer\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode316\nsrc/cmd/vet/print.go:316: case types.Uint, types.Uint8, types.Uint16, types.Uint32, types.Uint64, types.Uintptr:\n2 lines instead of two cases? fallthrough? (see comment below as well)\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode334\nsrc/cmd/vet/print.go:334: case uint, uint8, uint16, uint32, uint64:\njust use a 2nd line rather than a 2nd case? then you don't need the integral bit either, you can just do the return. Alternative, use a fallthrough and return.\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode337\nsrc/cmd/vet/print.go:337: if integral {\ncan go into the switch\n\nhttps://codereview.appspot.com/7378061/diff/2001/src/cmd/vet/print.go#newcode540\nsrc/cmd/vet/print.go:540: // TODO\nadd some random strings as well  - all these cases are very regular. empty format string?",
			"disapproval": false,
			"date": "2013-02-23 18:51:12.921790",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-23 19:08:29.567330",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go\nFile src/cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go#newcode80\nsrc/cmd/vet/print.go:80: lit.Value = strconv.Quote(x + y)\nyou are changing the literal in place in the AST here - not very clean. would be better to create a new literal\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go#newcode108\nsrc/cmd/vet/print.go:108: func (f *File) checkPrintf(call *ast.CallExpr, name string, formatIndex int) {\nmuch better\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go#newcode123\nsrc/cmd/vet/print.go:123: if err != nil {\nthat should never happen if the parser returned no errors\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go#newcode126\nsrc/cmd/vet/print.go:126: firstArg := formatIndex + 1\nadd a comment?\n\n// format arguments follow the format immediately",
			"disapproval": false,
			"date": "2013-02-23 19:29:39.962880",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8eb896294200 ***\n\ncmd/vet: check argument types in printf formats\nFixes issue 4404.\n\nR=gri, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7378061\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go\nFile src/cmd/vet/print.go (right):\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go#newcode123\nsrc/cmd/vet/print.go:123: if err != nil {\nOn 2013/02/23 19:29:40, gri wrote:\n> that should never happen if the parser returned no errors\n\nDone.\n\nhttps://codereview.appspot.com/7378061/diff/15001/src/cmd/vet/print.go#newcode126\nsrc/cmd/vet/print.go:126: firstArg := formatIndex + 1\nOn 2013/02/23 19:29:40, gri wrote:\n> add a comment?\n> \n> // format arguments follow the format immediately\n\nDone.",
			"disapproval": false,
			"date": "2013-02-23 23:08:41.986080",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7378061: cmd/vet: check argument types in printf formats",
	"created": "2013-02-23 18:12:20.954770",
	"patchsets": [
		1,
		2001,
		6001,
		10001,
		13001,
		15001,
		16006
	],
	"modified": "2013-02-23 23:08:43.394850",
	"closed": true,
	"issue": 7378061
}