{
	"description": "test: more systematic shift tests\n\nTo be submitted once gc agrees.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-15 22:51:17.451450",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7861045/diff/7001/test/shift1.go\nFile test/shift1.go (right):\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go#newcode153\ntest/shift1.go:153: _ = float32(1.)       // ERROR \"shift of type float32\"\nI don't think line 153 is an error.",
			"disapproval": false,
			"date": "2013-03-15 23:49:39.570110",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7861045/diff/7001/test/shift1.go\nFile test/shift1.go (right):\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go#newcode143\ntest/shift1.go:143: _ = a[1.<<s]\nrsc says that this is invalid on issue 4813, you seem to disagree.\n\nI can't manage to say what  to think of it: 1.<<s should be typed as 1. in a[1.], but indexes can be untyped, what is the type of 1. in a[1.], can you confirm?\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go#newcode168\ntest/shift1.go:168: //_ = complex(1.1<<s, 0) // ERROR \"shift of type float64\"\nthe crash has been fixed by revision 7861045",
			"disapproval": false,
			"date": "2013-03-15 23:43:45.633440",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go\nFile test/shift1.go (right):\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go#newcode143\ntest/shift1.go:143: _ = a[1.<<s]\nOn 2013/03/15 23:43:45, remyoudompheng wrote:\n> rsc says that this is invalid on issue 4813, you seem to disagree.\n> \n> I can't manage to say what  to think of it: 1.<<s should be typed as 1. in\n> a[1.], but indexes can be untyped, what is the type of 1. in a[1.], can you\n> confirm?\n\nI think we agreed that a[1.] is valid (at least r, iant, and I think it should be so).\n\nI understand rsc's comment #13 in issue 4813. I think rsc is correct in the sense that the spec does not explicitly require a specific type for the index, and with that argument, the a[1.<<s] would indeed be incorrect (because the 1.<<s defaults to the default type for the untyped constant 1.0 which is float64, now that the special int rule has gone).\n\nI am not sure that is what we want. The spec is sufficiently clear in saying that an untyped index value that can be represented as an integer type is ok, and since 1. satisfies that requirement, 1.<<s does as well, and so this should be valid.\n\nThat said, I think the spec is just not clear enough. Personally I would vote to make it legal, but it's always easier to leave it illegal and change it later (the other way round is not possible in a backward compatible way).\n\nI have some ideas to tie this down once and for all in the spec by introducing the notion of a \"context type\" (analogous to, but different from the notion of static and dynamic type): The context type only matters for untyped values and it is the type such values assume when used in the respective context. The usual errors are reported if an untyped value cannot be represented as a value of context type.\n\nWe do this already but we don't say it very clearly. Using a context type in the explanations would make this much simpler to understand (and would also more directly match a type-checker's implementation). For instance, the context type in a variable declaration that also defines a type is that type. The context type in a variable declaration that doesn't specify a type is the default type of the initialization expression (i.e., the type of the expression, or the respective default type for constants). The context type for x in a conversion T(x) is T. And so forth.\n\nWith such a notion, we can simply say, that the ctype for x in a[x] is the element type of a (the key type for maps, or \"int\" for arrays and slices).\n\nI'll try to float a respective CL in the next few days. For now, I'll just disable these tests.\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go#newcode153\ntest/shift1.go:153: _ = float32(1.)       // ERROR \"shift of type float32\"\nOn 2013/03/15 23:49:39, remyoudompheng wrote:\n> I don't think line 153 is an error.\n\nof course not - copy-paste error. fixed.",
			"disapproval": false,
			"date": "2013-03-16 00:38:50.723640",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n(concrete error messages may need to be adjusted).\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go\nFile test/shift1.go (right):\n\nhttps://codereview.appspot.com/7861045/diff/7001/test/shift1.go#newcode143\ntest/shift1.go:143: _ = a[1.<<s]\nOn 2013/03/15 23:43:45, remyoudompheng wrote:\n> rsc says that this is invalid on issue 4813, you seem to disagree.\n> \n> I can't manage to say what  to think of it: 1.<<s should be typed as 1. in\n> a[1.], but indexes can be untyped, what is the type of 1. in a[1.], can you\n> confirm?\n\nrsc thinks that we should leave this alone for now in the spec. Thus, a[1.] is valid, but a[1.<<s] is not. I do think it is inconsistent, but at the same time both compilers reject this and so let's leave it at that for Go 1.1, unless everybody else changes their mind.",
			"disapproval": false,
			"date": "2013-03-18 21:12:18.149160",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7861045/diff/22001/test/shift1.go\nFile test/shift1.go (right):\n\nhttps://codereview.appspot.com/7861045/diff/22001/test/shift1.go#newcode147\ntest/shift1.go:147: _ = a[1.]\nCL7613046 makes all test pass except this one, so no need to adjust messages.\n\nUnmatched Errors:\nshift1.go:147: non-integer slice index 1\n\nhttps://codereview.appspot.com/7861045/diff/22001/test/shift1.go#newcode159\ntest/shift1.go:159: _ = float32(1.)       // ERROR \"shift of type float32\"\nstill an extra error here.",
			"disapproval": false,
			"date": "2013-03-18 22:43:03.682560",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7861045/diff/22001/test/shift1.go\nFile test/shift1.go (right):\n\nhttps://codereview.appspot.com/7861045/diff/22001/test/shift1.go#newcode147\ntest/shift1.go:147: _ = a[1.]\nOn 2013/03/18 22:43:03, remyoudompheng wrote:\n> CL7613046 makes all test pass except this one, so no need to adjust messages.\n> \n> Unmatched Errors:\n> shift1.go:147: non-integer slice index 1\n\nAdded error for now. The spec is clear that this should be allowed. But that can be another CL.\n\nhttps://codereview.appspot.com/7861045/diff/22001/test/shift1.go#newcode159\ntest/shift1.go:159: _ = float32(1.)       // ERROR \"shift of type float32\"\nOn 2013/03/18 22:43:03, remyoudompheng wrote:\n> still an extra error here.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-18 22:53:34.780570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-19 19:05:52.109350",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/19 19:05:52, rsc wrote:\n> LGTM\n\ngc is now ready for these tests.",
			"disapproval": false,
			"date": "2013-03-21 23:47:07.518390",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4dceacf2d92c ***\n\ntest: more systematic shift tests\n\nTo be submitted once gc agrees.\n\nR=rsc, iant, remyoudompheng\nCC=golang-dev\nhttps://codereview.appspot.com/7861045",
			"disapproval": false,
			"date": "2013-03-21 23:57:19.005350",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7861045: test: more systematic shift tests",
	"created": "2013-03-15 22:47:48.428170",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		5002,
		15001,
		17001,
		20001,
		22001,
		8002,
		29001,
		37001
	],
	"modified": "2013-03-21 23:57:22.142940",
	"closed": true,
	"issue": 7861045
}