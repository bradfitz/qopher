{
	"description": "text/template: fix bug in evaluating a chain starting with a function.",
	"cc": [
		"golang-dev@googlegroups.com",
		"alberto.garcia.hierro@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: alberto.garcia.hierro@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-27 20:02:27.287090",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I really think this a design/usability mistake. The documentation on text/template and html/template is very sparse and most users will learn by trying different things until they work, so the syntax should be as intuitive as possible.\n\nAs I previously said in https://codereview.appspot.com/7712050/ requiring parenthesis for (fn).field1.field2 but not requiring them for .field1.fn.field2 is completely inconsistent and anything but intuitive (specially with method values coming in Go1.1).\n\nI understand that there's exactly one case which could cause confusion: assigning a function to a variable. In that case, the ambiguity could be resolved by using parenthesis AFTER the function name, just like in Go code, not surrounding the function. e.g. $x := f assigns f to x while $x := f() assigns the value returned by f. However, if the function/method name is followed by a dot there's no ambiguity at all because functions don't have any attributes so $x := f().field1 should yield the same result as $x := f.field1.\n\nLong story short: Any expression involving a niladic function should auto evaluate it and use its result, except when assigning the function to a variable. To assign the result of evaluating the function one should use $x := f().\n\nFurthermore, the error message added in this patch is quite an anti pattern. If you're sure enough about what the user wants to do, just do it, don't tell him how to do it.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-03-27 22:03:38.554900",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alberto.garcia.hierro@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-27 22:42:44.266050",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, less code is always better.",
			"disapproval": false,
			"date": "2013-03-27 22:53:34.620120",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not changing the behavior of the template system, certainly not\r\nwith Go 1.1 around the corner. This CL is a bug fix that protects\r\nagainst the nil pointer dereference and that is the only change I will\r\naccept, at least for now.\r\n\r\nYour \"long story short\" argues persuasively only for the trivial case.\r\nAs described in the issues and previous discussions about this topic,\r\nthings are not nearly that simple in the general case. There are far\r\nmore than \"one case\" that can cause confusion, and the others all\r\nbehave like this. The particular problem you encountered was\r\nintroduced by the Chain node, a Go 1.1 feature, and has been fixed so\r\nall is safe and consistent with the rest of the package.\r\n\r\nPlease drop this for now. I have shown you how to achieve what you\r\nwant with the code as it stands.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:11:34.146450",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/27 22:35:18, r wrote:\n> It is your change but a much simpler test.\n> \n> -rob\n\nCool, thanks!",
			"disapproval": false,
			"date": "2013-03-27 22:37:28.785610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alberto.garcia.hierro@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-27 22:22:57.902130",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, alberto.garcia.hierro@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-27 22:21:56.300080",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh hell, you've talked me into it.\r\n\r\nPTAL.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:21:56.552360",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not proposing you make all those changes now, I understand some of them are not backwards compatible and Go 1.x is supposed to keep compatibility. However, dropping the requirement to enclose the function call in parenthesis won't break any templates and would certainly make things more intuitive.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-03-27 22:31:56.103270",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Rob,\n\nYou're a fast typer! I was typing my previous reply while you already had sent 2 more. The code looks good to me. In fact, I think it's more or less the patch I had initially submitted. The test case looks good too.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-03-27 22:34:53.034280",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is your change but a much simpler test.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:35:18.091090",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"alberto.garcia.hierro@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8039bd09662b ***\n\ntext/template: fix bug in evaluating a chain starting with a function.\n\nR=golang-dev, alberto.garcia.hierro\nCC=golang-dev\nhttps://codereview.appspot.com/7861046",
			"disapproval": false,
			"date": "2013-03-27 23:31:18.069700",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7861046: text/template: fix bug in evaluating a chain starting w...",
	"created": "2013-03-27 20:02:23.872900",
	"patchsets": [
		1,
		5001,
		9001,
		11003,
		14002
	],
	"modified": "2013-03-27 23:31:19.390280",
	"closed": true,
	"issue": 7861046
}