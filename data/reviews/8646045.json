{
	"description": "bufio/Scan: fix error handling at EOF\nFixes issue 5268.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8646045/diff/6001/src/pkg/bufio/scan_test.go\nFile src/pkg/bufio/scan_test.go (right):\n\nhttps://codereview.appspot.com/8646045/diff/6001/src/pkg/bufio/scan_test.go#newcode373\nsrc/pkg/bufio/scan_test.go:373: type alwaysError int\ns/int/struct{}/ seems more clear.\n\nhttps://codereview.appspot.com/8646045/diff/6001/src/pkg/bufio/scan_test.go#newcode380\nsrc/pkg/bufio/scan_test.go:380: scanner := NewScanner(new(alwaysError))\nalwaysError{}",
			"disapproval": false,
			"date": "2013-04-11 03:27:12.281610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-11 02:37:51.755430",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-04-11 03:12:53.774470",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this is right yet.\r\n\r\nsetErr(io.EOF) will shadow the previous real error, won't it?\r\n\r\n\r\n\r\nOn Wed, Apr 10, 2013 at 7:37 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> bufio/Scan: fix error handling at EOF\r\n> Fixes issue 5268.\r\n>\r\n> Please review this at https://codereview.appspot.**com/8646045/<https://codereview.appspot.com/8646045/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/bufio/scan.go\r\n>   M src/pkg/bufio/scan_test.go\r\n>\r\n>\r\n> Index: src/pkg/bufio/scan.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/bufio/scan.go\r\n> +++ b/src/pkg/bufio/scan.go\r\n> @@ -164,7 +164,7 @@\r\n>                         s.setErr(err)\r\n>                 }\r\n>                 if n == 0 { // Don't loop forever if Reader doesn't\r\n> deliver EOF.\r\n> -                       s.err = io.EOF\r\n> +                       s.setErr(err)\r\n>                 }\r\n>                 s.end += n\r\n>         }\r\n> Index: src/pkg/bufio/scan_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/bufio/scan_test.go\r\n> +++ b/src/pkg/bufio/scan_test.go\r\n> @@ -368,3 +368,21 @@\r\n>                 t.Fatal(\"wrong error:\", s.Err())\r\n>         }\r\n>  }\r\n> +\r\n> +// Test for issue 5268.\r\n> +type alwaysError int\r\n> +\r\n> +func (alwaysError) Read(p []byte) (int, error) {\r\n> +       return 0, io.ErrUnexpectedEOF\r\n> +}\r\n> +\r\n> +func TestNonEOFWithEmptyRead(t *testing.T) {\r\n> +       scanner := NewScanner(new(alwaysError))\r\n> +       for scanner.Scan() {\r\n> +               t.Fatal(\"read should fail\")\r\n> +       }\r\n> +       err := scanner.Err()\r\n> +       if err != io.ErrUnexpectedEOF {\r\n> +               t.Errorf(\"unexpected error: %v\", err)\r\n> +       }\r\n> +}\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-11 03:17:23.483600",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f75c3bb36dc0 ***\n\nbufio/Scan: fix error handling at EOF\nFixes issue 5268.\n\nR=golang-dev, dsymonds, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/8646045",
			"disapproval": false,
			"date": "2013-04-11 03:58:27.255110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh, nevermind, I missed a \"s.\" in my reading of setErr's implementation.\r\n\r\nLGTM\r\n\r\n\r\n\r\nOn Wed, Apr 10, 2013 at 8:17 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> I don't think this is right yet.\r\n>\r\n> setErr(io.EOF) will shadow the previous real error, won't it?\r\n>\r\n>\r\n>\r\n> On Wed, Apr 10, 2013 at 7:37 PM, <r@golang.org> wrote:\r\n>\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go/\r\n>>\r\n>>\r\n>> Description:\r\n>> bufio/Scan: fix error handling at EOF\r\n>> Fixes issue 5268.\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/8646045/<https://codereview.appspot.com/8646045/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/bufio/scan.go\r\n>>   M src/pkg/bufio/scan_test.go\r\n>>\r\n>>\r\n>> Index: src/pkg/bufio/scan.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/bufio/scan.go\r\n>> +++ b/src/pkg/bufio/scan.go\r\n>> @@ -164,7 +164,7 @@\r\n>>                         s.setErr(err)\r\n>>                 }\r\n>>                 if n == 0 { // Don't loop forever if Reader doesn't\r\n>> deliver EOF.\r\n>> -                       s.err = io.EOF\r\n>> +                       s.setErr(err)\r\n>>                 }\r\n>>                 s.end += n\r\n>>         }\r\n>> Index: src/pkg/bufio/scan_test.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/bufio/scan_test.go\r\n>> +++ b/src/pkg/bufio/scan_test.go\r\n>> @@ -368,3 +368,21 @@\r\n>>                 t.Fatal(\"wrong error:\", s.Err())\r\n>>         }\r\n>>  }\r\n>> +\r\n>> +// Test for issue 5268.\r\n>> +type alwaysError int\r\n>> +\r\n>> +func (alwaysError) Read(p []byte) (int, error) {\r\n>> +       return 0, io.ErrUnexpectedEOF\r\n>> +}\r\n>> +\r\n>> +func TestNonEOFWithEmptyRead(t *testing.T) {\r\n>> +       scanner := NewScanner(new(alwaysError))\r\n>> +       for scanner.Scan() {\r\n>> +               t.Fatal(\"read should fail\")\r\n>> +       }\r\n>> +       err := scanner.Err()\r\n>> +       if err != io.ErrUnexpectedEOF {\r\n>> +               t.Errorf(\"unexpected error: %v\", err)\r\n>> +       }\r\n>> +}\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-11 03:19:34.869450",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 8646045: bufio/Scan: fix error handling at EOF",
	"created": "2013-04-11 02:37:46.386810",
	"patchsets": [
		1,
		3001,
		6001,
		13001
	],
	"modified": "2013-04-11 03:58:28.807670",
	"closed": true,
	"issue": 8646045
}