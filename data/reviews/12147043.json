{
	"description": "go.tools/ssa: extend debug information to arbitrary ast.Exprs.\n\nCanonicalPos was inadequate since many pairs of instruction share the same pos (e.g. Allocs and Phis).  Instead, we generalize the DebugRef instruction to associate not just Idents but Exprs with ssa.Values.  \n\nWe no longer store any DebugRefs for constant expressions, to save space.  (The type and value of such expressions can be obtained by other means, at a cost in complexity.)\n\nFunction.ValueForExpr queries the DebugRef info to return the ssa.Value of a given Expr.\n\nAdded tests.\n\nAlso:\n- the DebugInfo flag is now per package, not global.  \n   It must be set between Create and Build phases if desired.\n- {Value,Instruction}.Pos() documentation updated: we still maintain\n  this information in the instruction stream even in non-debug mode,\n  but we make fewer claims about its invariants.\n- Go and Defer instructions can now use their respective go/defer\n   token positions (not the call's lparen), so they do.\n- SelectState:\n     Posn token.Pos indicates the <- position\n     DebugNode ast.Expr is the send stmt or receive expr.\n- In building SelectStmt, we introduce extra temporaries in debug\n   mode to hold the result of the receive in 'case <-ch' even though\n   this value isn't ordinarily needed.\n- Use *SelectState (indirectly) since the struct is getting bigger.\n- Document some missing instructions in doc.go.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ad296b71409a&repo=tools ***\n\ngo.tools/ssa: extend debug information to arbitrary ast.Exprs.\n\nCanonicalPos was inadequate since many pairs of instruction share the same pos (e.g. Allocs and Phis).  Instead, we generalize the DebugRef instruction to associate not just Idents but Exprs with ssa.Values.  \n\nWe no longer store any DebugRefs for constant expressions, to save space.  (The type and value of such expressions can be obtained by other means, at a cost in complexity.)\n\nFunction.ValueForExpr queries the DebugRef info to return the ssa.Value of a given Expr.\n\nAdded tests.\n\nAlso:\n- the DebugInfo flag is now per package, not global.  \n   It must be set between Create and Build phases if desired.\n- {Value,Instruction}.Pos() documentation updated: we still maintain\n  this information in the instruction stream even in non-debug mode,\n  but we make fewer claims about its invariants.\n- Go and Defer instructions can now use their respective go/defer\n   token positions (not the call's lparen), so they do.\n- SelectState:\n     Posn token.Pos indicates the <- position\n     DebugNode ast.Expr is the send stmt or receive expr.\n- In building SelectStmt, we introduce extra temporaries in debug\n   mode to hold the result of the receive in 'case <-ch' even though\n   this value isn't ordinarily needed.\n- Use *SelectState (indirectly) since the struct is getting bigger.\n- Document some missing instructions in doc.go.\n\nR=gri\nCC=golang-dev\nhttps://codereview.appspot.com/12147043",
			"disapproval": false,
			"date": "2013-07-31 17:13:07.439720",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-31 16:31:22.207970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source.go\nFile ssa/source.go (right):\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source.go#newcode140\nssa/source.go:140: e = unparen(e)\ndo this inside the if?\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source_test.go\nFile ssa/source_test.go (right):\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source_test.go#newcode192\nssa/source_test.go:192: t.Errorf(\"parse error: %s\", err)\njust t.Error(err)\n\nthen you get the position information first - it's clear that it's a parse error\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source_test.go#newcode240\nssa/source_test.go:240: } else {\nno else\n\nyou have a continue before",
			"disapproval": false,
			"date": "2013-07-31 16:42:05.869890",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12147043/diff/8001/ssa/source.go\nFile ssa/source.go (right):\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source.go#newcode140\nssa/source.go:140: e = unparen(e)\nOn 2013/07/31 16:42:06, gri wrote:\n> do this inside the if?\n\nDone.\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source_test.go\nFile ssa/source_test.go (right):\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source_test.go#newcode192\nssa/source_test.go:192: t.Errorf(\"parse error: %s\", err)\nOn 2013/07/31 16:42:06, gri wrote:\n> just t.Error(err)\n> \n> then you get the position information first - it's clear that it's a parse error\n\nDone, here and elsewhere.\n\nhttps://codereview.appspot.com/12147043/diff/8001/ssa/source_test.go#newcode240\nssa/source_test.go:240: } else {\nOn 2013/07/31 16:42:06, gri wrote:\n> no else\n> \n> you have a continue before\n\nYes, but target is local to the if statement.",
			"disapproval": false,
			"date": "2013-07-31 17:10:47.355400",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 12147043: go.tools/ssa: extend debug information to arbitrary ast...",
	"created": "2013-07-31 06:21:51.515460",
	"patchsets": [
		1,
		3001,
		5001,
		8001,
		16001,
		19001
	],
	"modified": "2013-07-31 17:13:08.468040",
	"closed": true,
	"issue": 12147043
}