{
	"description": "mime/multipart: allow unescaped newlines through in quoted-printable\n\nThis makes Go's quoted-printable decoder more like other\npopular ones, allowing through a bare \\r or \\n, and also\npasses through \\r\\n which looked like a real bug before.\n\nFixes issue 4771",
	"cc": [
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-11 22:52:49.606810",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-19 18:11:00.188180",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go\nFile src/pkg/mime/multipart/quotedprintable.go (right):\n\nhttps://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go#newcode5\nsrc/pkg/mime/multipart/quotedprintable.go:5: // The file define a quoted-printable decoder, as specified in RFC 2045.\nwe should document this:\n// Deviations:\n// 1. in addition to \"=\\r\\n\", \"=\\n\" is also treated as soft line break.\n// 2. it will pass \"\\r\" and \"\\n\" not preceded by \"=\" through as some\n// broken encoders do this.\n\nhttps://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go#newcode85\nsrc/pkg/mime/multipart/quotedprintable.go:85: if bytes.HasSuffix(q.line, softSuffix) {\nthis will treat =\\r\\r\\r\\n as soft line break.\nwhatever our choice, we should document at the start of this file.",
			"disapproval": false,
			"date": "2013-02-20 17:21:35.493750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 00:33:15.876870",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go\nFile src/pkg/mime/multipart/quotedprintable.go (right):\n\nhttps://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go#newcode5\nsrc/pkg/mime/multipart/quotedprintable.go:5: // The file define a quoted-printable decoder, as specified in RFC 2045.\nOn 2013/02/20 17:21:35, minux wrote:\n> we should document this:\n> // Deviations:\n> // 1. in addition to \"=\\r\\n\", \"=\\n\" is also treated as soft line break.\n> // 2. it will pass \"\\r\" and \"\\n\" not preceded by \"=\" through as some\n> // broken encoders do this.\n\nDone.\n\nhttps://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go#newcode85\nsrc/pkg/mime/multipart/quotedprintable.go:85: if bytes.HasSuffix(q.line, softSuffix) {\nOn 2013/02/20 17:21:35, minux wrote:\n> this will treat =\\r\\r\\r\\n as soft line break.\n> whatever our choice, we should document at the start of this file.\n\nFixed, with new tests.",
			"disapproval": false,
			"date": "2013-02-21 00:39:57.167640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\r\n\r\nOn Wed, Feb 20, 2013 at 4:39 PM, <bradfitz@golang.org> wrote:\r\n\r\n> PTAL\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7300092/diff/16001/src/**\r\n> pkg/mime/multipart/**quotedprintable.go<https://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go>\r\n> File src/pkg/mime/multipart/**quotedprintable.go (right):\r\n>\r\n> https://codereview.appspot.**com/7300092/diff/16001/src/**\r\n> pkg/mime/multipart/**quotedprintable.go#newcode5<https://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go#newcode5>\r\n> src/pkg/mime/multipart/**quotedprintable.go:5: // The file define a\r\n> quoted-printable decoder, as specified in RFC 2045.\r\n> On 2013/02/20 17:21:35, minux wrote:\r\n>\r\n>> we should document this:\r\n>> // Deviations:\r\n>> // 1. in addition to \"=\\r\\n\", \"=\\n\" is also treated as soft line\r\n>>\r\n> break.\r\n>\r\n>> // 2. it will pass \"\\r\" and \"\\n\" not preceded by \"=\" through as some\r\n>> // broken encoders do this.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7300092/diff/16001/src/**\r\n> pkg/mime/multipart/**quotedprintable.go#newcode85<https://codereview.appspot.com/7300092/diff/16001/src/pkg/mime/multipart/quotedprintable.go#newcode85>\r\n> src/pkg/mime/multipart/**quotedprintable.go:85: if bytes.HasSuffix(q.line,\r\n> softSuffix) {\r\n> On 2013/02/20 17:21:35, minux wrote:\r\n>\r\n>> this will treat =\\r\\r\\r\\n as soft line break.\r\n>> whatever our choice, we should document at the start of this file.\r\n>>\r\n>\r\n> Fixed, with new tests.\r\n>\r\n> https://codereview.appspot.**com/7300092/<https://codereview.appspot.com/7300092/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-22 07:38:27.264640",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nThis is more complex than I though, but ok, we can optimize\nit later if needed.",
			"disapproval": false,
			"date": "2013-02-22 08:29:27.494340",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b3bb265bfecf ***\n\nmime/multipart: allow unescaped newlines through in quoted-printable\n\nThis makes Go's quoted-printable decoder more like other\npopular ones, allowing through a bare \\r or \\n, and also\npasses through \\r\\n which looked like a real bug before.\n\nFixes issue 4771\n\nR=minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7300092",
			"disapproval": false,
			"date": "2013-02-22 18:40:27.281110",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7300092: mime/multipart: allow unescaped newlines through in quo...",
	"created": "2013-02-11 22:51:21.430580",
	"patchsets": [
		1,
		1001,
		4001,
		1002,
		9001,
		12001,
		14001,
		16001,
		21001,
		22004
	],
	"modified": "2013-02-26 16:09:40.843720",
	"closed": true,
	"issue": 7300092
}