{
	"description": "net/http: more request benchmarks\n\nAdd benchmarks for common http benchmarking tools. The intent is to catch optimisations which favor synthetic benchmarks that do not show improvements for real clients like Chrome.\n\nBenchmarkReadRequestChrome        200000             10133 ns/op          60.29 MB/s        3148 B/op         32 allocs/op\nBenchmarkReadRequestCurl          500000              4314 ns/op          18.08 MB/s         905 B/op         15 allocs/op\nBenchmarkReadRequestApachebench   500000              4363 ns/op          18.79 MB/s         956 B/op         16 allocs/op\nBenchmarkReadRequestSiege         500000              6408 ns/op          24.19 MB/s        1397 B/op         22 allocs/op\nBenchmarkReadRequestWrk          1000000              2838 ns/op          14.09 MB/s         757 B/op         11 allocs/op",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"haimuiba@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"haimuiba@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To give some back story here, most of the benchmarking tools appear to use requests that are much smaller and simpler than a real world example. Wrk is the worst, with only a Host: header.\n\nConsider this, https://codereview.appspot.com/7306073/ which shows an 8% improvement in parsing for Chrome, but 19% regression for Wrk.",
			"disapproval": false,
			"date": "2013-02-09 00:37:49.502470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"haimuiba@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com, haimuiba@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-09 07:55:58.008760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"haimuiba@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: haimuiba@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-09 00:31:09.093100",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nSure.  I'd drop the \"const request\" and inline the string literal. And drop\r\nthe double \\n\\n suffix from them and add it in the helper.\r\n\r\nOn Fri, Feb 8, 2013 at 4:31 PM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: haimuiba@gmail.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net/http: more request benchmarks\r\n>\r\n> Add benchmarks for common http benchmarking tools. The intent is to\r\n> catch optimisations which favor synthetic benchmarks that do not show\r\n> improvements for real clients like Chrome.\r\n>\r\n> BenchmarkReadRequestChrome        200000             10133 ns/op\r\n>  60.29 MB/s        3148 B/op         32 allocs/op\r\n> BenchmarkReadRequestCurl          500000              4314 ns/op\r\n>  18.08 MB/s         905 B/op         15 allocs/op\r\n> BenchmarkReadRequestApachebenc**h   500000              4363 ns/op\r\n>  18.79 MB/s         956 B/op         16 allocs/op\r\n> BenchmarkReadRequestSiege         500000              6408 ns/op\r\n>  24.19 MB/s        1397 B/op         22 allocs/op\r\n> BenchmarkReadRequestWrk          1000000              2838 ns/op\r\n>  14.09 MB/s         757 B/op         11 allocs/op\r\n>\r\n> Please review this at https://codereview.appspot.**com/7300075/<https://codereview.appspot.com/7300075/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/request_test.**go\r\n>\r\n>\r\n> Index: src/pkg/net/http/request_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/request_**test.go\r\n> +++ b/src/pkg/net/http/request_**test.go\r\n> @@ -403,6 +403,7 @@\r\n>  `\r\n>\r\n>  func benchmarkReadRequest(b *testing.B, request string) {\r\n> +       request = strings.Replace(request, \"\\n\", \"\\r\\n\", -1)\r\n>         b.SetBytes(int64(len(request))**)\r\n>         r := bufio.NewReader(&**infiniteReader{buf: []byte(request)})\r\n>         b.ReportAllocs()\r\n> @@ -435,7 +436,7 @@\r\n>         return a\r\n>  }\r\n>\r\n> -func BenchmarkReadRequest(b *testing.B) {\r\n> +func BenchmarkReadRequestChrome(b *testing.B) {\r\n>         // https://github.com/felixge/**node-http-perf/blob/master/**\r\n> fixtures/get.http<https://github.com/felixge/node-http-perf/blob/master/fixtures/get.http>\r\n>         const request = `GET / HTTP/1.1\r\n>  Host: localhost:8080\r\n> @@ -448,5 +449,49 @@\r\n>  Cookie: __utma=1.1978842379.**1323102373.1323102373.**1323102373.1;\r\n> EPi:NumberOfVisits=1,2012-02-**28T13:42:18; CrmSession=**\r\n> 5b707226b9563e1bc69084d07a107c**98; plushContainerWidth=100%25;\r\n> plushNoTopMenu=0; hudson_auto_refresh=false\r\n>\r\n>  `\r\n> -       benchmarkReadRequest(b, strings.Replace(request, \"\\n\", \"\\r\\n\", -1))\r\n> +       benchmarkReadRequest(b, request)\r\n>  }\r\n> +\r\n> +func BenchmarkReadRequestCurl(b *testing.B) {\r\n> +       // curl http://localhost:8080/\r\n> +       const request = `GET / HTTP/1.1\r\n> +User-Agent: curl/7.27.0\r\n> +Host: localhost:8080\r\n> +Accept: */*\r\n> +\r\n> +`\r\n> +       benchmarkReadRequest(b, request)\r\n> +}\r\n> +\r\n> +func BenchmarkReadRequestApachebenc**h(b *testing.B) {\r\n> +       // ab -n 1 -c 1 http://localhost:8080/\r\n> +       const request = `GET / HTTP/1.0\r\n> +Host: localhost:8080\r\n> +User-Agent: ApacheBench/2.3\r\n> +Accept: */*\r\n> +\r\n> +`\r\n> +       benchmarkReadRequest(b, request)\r\n> +}\r\n> +\r\n> +func BenchmarkReadRequestSiege(b *testing.B) {\r\n> +       // siege -r 1 -c 1 http://localhost:8080/\r\n> +       const request = `GET / HTTP/1.1\r\n> +Host: localhost:8080\r\n> +Accept: */*\r\n> +Accept-Encoding: gzip\r\n> +User-Agent: JoeDog/1.00 [en] (X11; I; Siege 2.70)\r\n> +Connection: keep-alive....\r\n> +\r\n> +`\r\n> +       benchmarkReadRequest(b, request)\r\n> +}\r\n> +\r\n> +func BenchmarkReadRequestWrk(b *testing.B) {\r\n> +       // wrk -t 1 -r 1 -c 1 http://localhost:8080/\r\n> +       const request = `GET / HTTP/1.1\r\n> +Host: localhost:8080\r\n> +\r\n> +`\r\n> +       benchmarkReadRequest(b, request)\r\n> +}\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-09 01:14:09.952000",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"haimuiba@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5c213525c4b5 ***\n\nnet/http: more request benchmarks\n\nAdd benchmarks for common http benchmarking tools. The intent is to catch optimisations which favor synthetic benchmarks that do not show improvements for real clients like Chrome.\n\nBenchmarkReadRequestChrome        200000             10133 ns/op          60.29 MB/s        3148 B/op         32 allocs/op\nBenchmarkReadRequestCurl          500000              4314 ns/op          18.08 MB/s         905 B/op         15 allocs/op\nBenchmarkReadRequestApachebench   500000              4363 ns/op          18.79 MB/s         956 B/op         16 allocs/op\nBenchmarkReadRequestSiege         500000              6408 ns/op          24.19 MB/s        1397 B/op         22 allocs/op\nBenchmarkReadRequestWrk          1000000              2838 ns/op          14.09 MB/s         757 B/op         11 allocs/op\n\nR=golang-dev, bradfitz\nCC=golang-dev, haimuiba\nhttps://codereview.appspot.com/7300075",
			"disapproval": false,
			"date": "2013-02-09 21:18:25.501000",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 7300075: net/http: more request benchmarks",
	"created": "2013-02-09 00:28:28.750550",
	"patchsets": [
		1,
		1002,
		4001,
		7001,
		1003,
		5
	],
	"modified": "2013-02-09 21:18:28.310630",
	"closed": true,
	"issue": 7300075
}