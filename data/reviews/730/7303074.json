{
	"description": "exp/ssa: special-case 'range' loops based on type of range expression.\n\nThe lowering of ast.RangeStmt now has three distinct cases:\n\n1) rangeIter for maps and strings; approximately:\n    it = range x\n    for {\n      k, v, ok = next it\n      if !ok { break }\n      ...\n    }\n   The Range instruction and the interpreter's \"iter\"\n   datatype are now restricted to these types.\n\n2) rangeChan for channels; approximately:\n    for {\n      k, ok = <-x\n      if !ok { break }\n      ...\n    }\n\n3) rangeIndexed for slices, arrays, and *array; approximately:\n    for k, l = 0, len(x); k < l; k++ {\n      v = x[k]\n      ...\n    }\n\nIn all cases we now evaluate the side effects of the range expression\nexactly once, per comments on http://code.google.com/p/go/issues/detail?id=4644.\n\nHowever the exact spec wording is still being discussed in\nhttps://codereview.appspot.com/7307083/.  Further (small)\nchanges may be required once the dust settles.",
	"cc": [
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-12 00:50:08.596630",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bae765178262 ***\n\nexp/ssa: special-case 'range' loops based on type of range expression.\n\nThe lowering of ast.RangeStmt now has three distinct cases:\n\n1) rangeIter for maps and strings; approximately:\n    it = range x\n    for {\n      k, v, ok = next it\n      if !ok { break }\n      ...\n    }\n   The Range instruction and the interpreter's \"iter\"\n   datatype are now restricted to these types.\n\n2) rangeChan for channels; approximately:\n    for {\n      k, ok = <-x\n      if !ok { break }\n      ...\n    }\n\n3) rangeIndexed for slices, arrays, and *array; approximately:\n    for k, l = 0, len(x); k < l; k++ {\n      v = x[k]\n      ...\n    }\n\nIn all cases we now evaluate the side effects of the range expression\nexactly once, per comments on http://code.google.com/p/go/issues/detail?id=4644.\n\nHowever the exact spec wording is still being discussed in\nhttps://codereview.appspot.com/7307083/.  Further (small)\nchanges may be required once the dust settles.\n\nR=iant\nCC=golang-dev\nhttps://codereview.appspot.com/7303074",
			"disapproval": false,
			"date": "2013-02-12 03:13:01.017500",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-11 22:58:21.007440",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7303074: exp/ssa: special-case 'range' loops based on type of ra...",
	"created": "2013-02-11 19:46:22.332250",
	"patchsets": [
		1,
		2001,
		1002,
		1003,
		2006,
		8001,
		6005,
		7005
	],
	"modified": "2013-02-12 03:13:01.748240",
	"closed": true,
	"issue": 7303074
}