{
	"description": "go/parser: stop ParseFile after ten errors.\n\nThere wil be a panic if more than ten errors are encountered. ParseFile\nwill recover and return the ErrorList.\n\nFixes issue 3943.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/interface.go\nFile src/pkg/go/parser/interface.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/interface.go#newcode85\nsrc/pkg/go/parser/interface.go:85: defer func() {\nOn 2013/02/11 22:42:57, gri wrote:\n> move this past the readSource code - the defer is not needed until later\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/interface.go#newcode87\nsrc/pkg/go/parser/interface.go:87: err = e.(scanner.ErrorList) // re-panics if it's not an ErrorList\nDoes this mean that a user who was supplying SpuriousErrors before now needs to supply SpuriousErrors|AllErrors to get the same effect?\n\nOn 2013/02/11 22:42:57, gri wrote:\n> This is not quite correct: Now, if we have a bailout, the result is the\n> ErrorList content, unsorted, and without multiples removed. We cannot easily\n> remove multiples at this point because we might  return less then 10 errors even\n> if there are more (because we count multiples).\n> \n> But we also lose the sorting.\n> \n> I propose:\n> \n> 1) Instead of panicking with the error list, introduce a special type 'bailout':\n> \n> // A bailout panic is raised to indicate early termination.\n> type bailout struct{}\n> \n> Then, exit early with panic(bailout{}). That also makes is more clearly in the\n> code what the panic is for.\n> \n> 2) Here, if we have a panic and we don't have a bailout, re-panic. This is a\n> real error in the parser and should never happen.\n> \n> 3) In all other case, do what ParseFile is doing now at the end. That is, use\n> the deferred function to assign the error result in all cases (but the very\n> first, readSource, which is not using the error list).\n> \n> I am thinking that in case of the limit to 10 errors, we probably don't want to\n> remove the SpuriousErrors (no RemoveMultiples). In the other case, leave it as\n> is for the same behavior, i.e., the SpuriousErrors flag only makes sense if\n> AllErrors is set.",
			"disapproval": false,
			"date": "2013-02-13 15:25:01.638540",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-14 16:10:17.286580",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/interface.go\nFile src/pkg/go/parser/interface.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/interface.go#newcode61\nsrc/pkg/go/parser/interface.go:61: SpuriousErrors                     // report all (not just the first) errors per line\nDone.\n\nThe tests still pass. Should any of them fail?\n\nOn 2013/02/10 06:25:04, gri wrote:\n> Please add an AllErrors flag as in the original CL. Some tests rely on getting\n> all errors, and w/o a flag the original behavior cannot be obtained anymore.\n> \n> I also suggest you run sh run.bash in src to verify all tests still pass...\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/interface.go#newcode90\nsrc/pkg/go/parser/interface.go:90: defer handlePanic(&err)\nOn 2013/02/10 06:25:04, gri wrote:\n> use a closure here instead, then you don't need to pass in &err\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/parser.go#newcode344\nsrc/pkg/go/parser/parser.go:344: if p.errors.Len() > 10 {\nOn 2013/02/10 06:25:04, gri wrote:\n> this needs to be guarded by a flag\n\nDone.",
			"disapproval": false,
			"date": "2013-02-10 07:04:34.631930",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/interface.go\nFile src/pkg/go/parser/interface.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/interface.go#newcode85\nsrc/pkg/go/parser/interface.go:85: defer func() {\nmove this past the readSource code - the defer is not needed until later\n\nhttps://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/interface.go#newcode87\nsrc/pkg/go/parser/interface.go:87: err = e.(scanner.ErrorList) // re-panics if it's not an ErrorList\nThis is not quite correct: Now, if we have a bailout, the result is the ErrorList content, unsorted, and without multiples removed. We cannot easily remove multiples at this point because we might  return less then 10 errors even if there are more (because we count multiples).\n\nBut we also lose the sorting.\n\nI propose:\n\n1) Instead of panicking with the error list, introduce a special type 'bailout':\n\n// A bailout panic is raised to indicate early termination.\ntype bailout struct{}\n\nThen, exit early with panic(bailout{}). That also makes is more clearly in the code what the panic is for.\n\n2) Here, if we have a panic and we don't have a bailout, re-panic. This is a real error in the parser and should never happen.\n\n3) In all other case, do what ParseFile is doing now at the end. That is, use the deferred function to assign the error result in all cases (but the very first, readSource, which is not using the error list).\n\nI am thinking that in case of the limit to 10 errors, we probably don't want to remove the SpuriousErrors (no RemoveMultiples). In the other case, leave it as is for the same behavior, i.e., the SpuriousErrors flag only makes sense if AllErrors is set.\n\nhttps://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/7003/src/pkg/go/parser/parser.go#newcode344\nsrc/pkg/go/parser/parser.go:344: if p.mode&AllErrors == 0 && p.errors.Len() > 10 {\ns/>/>=/ otherwise you'll return 11 errors.",
			"disapproval": false,
			"date": "2013-02-11 22:42:57.825290",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-10 07:03:57.347840",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-10 04:12:42.321330",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/interface.go\nFile src/pkg/go/parser/interface.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/interface.go#newcode61\nsrc/pkg/go/parser/interface.go:61: SpuriousErrors                     // report all (not just the first) errors per line\nPlease add an AllErrors flag as in the original CL. Some tests rely on getting all errors, and w/o a flag the original behavior cannot be obtained anymore.\n\nI also suggest you run sh run.bash in src to verify all tests still pass...\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/interface.go#newcode90\nsrc/pkg/go/parser/interface.go:90: defer handlePanic(&err)\nuse a closure here instead, then you don't need to pass in &err\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/4001/src/pkg/go/parser/parser.go#newcode344\nsrc/pkg/go/parser/parser.go:344: if p.errors.Len() > 10 {\nthis needs to be guarded by a flag",
			"disapproval": false,
			"date": "2013-02-10 06:25:04.652910",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go\nFile src/pkg/go/parser/interface.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode60\nsrc/pkg/go/parser/interface.go:60: SpuriousErrors                     // report all (not just the first) errors per line when AllErrors set\nOn 2013/02/14 06:55:56, gri wrote:\n> see the comment below for an explanation, but I suggest to change this to:\n> \n> SpuriousErrors                   // same as AllErrors, for\n> backward-compatibility\n> AllErrors = SpuriousErrors // report all (not just the first 10) errors per file\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode91\nsrc/pkg/go/parser/interface.go:91: \nOn 2013/02/14 06:55:56, gri wrote:\n> remove this empty line\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode97\nsrc/pkg/go/parser/interface.go:97: // sort errors\nOn 2013/02/14 06:55:56, gri wrote:\n> hm, i'm not sure this is quite correct\n> \n> You are right that AllErrors interferes in unhappy ways with SpuriousErrors.\n> Unfortunately we cannot change the API (say, remove SpuriousErrors). Basically,\n> in case of a bailout we want the errors sorted. We could do RemoveMultiples, but\n> then we may end up with even less then 10 reported errors, which seems a bit\n> odd. However, we do know that a bailout can only happen if AllErrors is not set.\n> \n> That all said, I've changed my mind a bit: I think the AllErrors flag as\n> proposed so far makes things more complicated. Basically we want as default\n> behavior max. 10 errors reported with the flags people have been setting so far.\n> \n> How about this: We \"repurpose\" the SpuriousErrors flag to also mean AllErrors\n> (we still have AllErrors because it's the right name, but it will have the same\n> value as SpuriousErrors so far). It's never set, so the default will be max. 10\n> errors (even if they were \"spurious\" by the old definition). If it is set, all\n> errors (incl. spurious errors are shown). That doesn't remove anything from the\n> API, we get the new behavior (max 10 errors by default), and when AllErrors (or\n> SpuriousErrors) is set, we get all errors. We lose the RemoveMultiples() call,\n> but it might be fine. If it's a problem we can revisit.\n> \n> So this code can be simplified to:\n> \n>    if e := recover(); ... {\n>       ...\n>    }\n> \n>    // set result values\n>    if f == nil {\n>       ... (see my comment below)\n>    }\n> \n>    p.errors.Sort()\n>    err = p.errors.Err()\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode110\nsrc/pkg/go/parser/interface.go:110: if f == nil {\nOn 2013/02/14 06:55:56, gri wrote:\n> This check now also needs to be done in the deferred function. Otherwise, if\n> there's a bailout, f will be nil and the resulting f is nil, contrary to what\n> the API description says.\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode120\nsrc/pkg/go/parser/interface.go:120: return f, err\nOn 2013/02/14 06:55:56, gri wrote:\n> just:\n> \n> return\n> \n> no need to provide values; they will be set in the deferred function\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/parser.go#newcode347\nsrc/pkg/go/parser/parser.go:347: if p.mode&AllErrors == 0 && p.errors.Len() > 10 {\nOn 2013/02/14 06:55:56, gri wrote:\n> s/AllErrors/SpuriousErrors/\n> \n> (see my larger comment in ParseFile)\n\nDone.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/parser.go#newcode347\nsrc/pkg/go/parser/parser.go:347: if p.mode&AllErrors == 0 && p.errors.Len() > 10 {\nOn 2013/02/14 06:55:56, gri wrote:\n> s/>/>=/\n> \n> You want to bail out if this is called and we have 10 errors already (i.e., this\n> is the 11th time, error is called).\n\nDone.",
			"disapproval": false,
			"date": "2013-02-14 16:10:21.531260",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-13 15:24:51.863090",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is essentially what we want but in retrospect I think maybe we can simplify the flag handling and code a bit by re-interpreting the SpuriousErrors flag.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go\nFile src/pkg/go/parser/interface.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode60\nsrc/pkg/go/parser/interface.go:60: SpuriousErrors                     // report all (not just the first) errors per line when AllErrors set\nsee the comment below for an explanation, but I suggest to change this to:\n\nSpuriousErrors                   // same as AllErrors, for backward-compatibility\nAllErrors = SpuriousErrors // report all (not just the first 10) errors per file\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode91\nsrc/pkg/go/parser/interface.go:91: \nremove this empty line\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode97\nsrc/pkg/go/parser/interface.go:97: // sort errors\nhm, i'm not sure this is quite correct\n\nYou are right that AllErrors interferes in unhappy ways with SpuriousErrors. Unfortunately we cannot change the API (say, remove SpuriousErrors). Basically, in case of a bailout we want the errors sorted. We could do RemoveMultiples, but then we may end up with even less then 10 reported errors, which seems a bit odd. However, we do know that a bailout can only happen if AllErrors is not set.\n\nThat all said, I've changed my mind a bit: I think the AllErrors flag as proposed so far makes things more complicated. Basically we want as default behavior max. 10 errors reported with the flags people have been setting so far.\n\nHow about this: We \"repurpose\" the SpuriousErrors flag to also mean AllErrors (we still have AllErrors because it's the right name, but it will have the same value as SpuriousErrors so far). It's never set, so the default will be max. 10 errors (even if they were \"spurious\" by the old definition). If it is set, all errors (incl. spurious errors are shown). That doesn't remove anything from the API, we get the new behavior (max 10 errors by default), and when AllErrors (or SpuriousErrors) is set, we get all errors. We lose the RemoveMultiples() call, but it might be fine. If it's a problem we can revisit.\n\nSo this code can be simplified to:\n\n   if e := recover(); ... {\n      ...\n   }\n\n   // set result values\n   if f == nil {\n      ... (see my comment below)\n   }\n\n   p.errors.Sort()\n   err = p.errors.Err()\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode110\nsrc/pkg/go/parser/interface.go:110: if f == nil {\nThis check now also needs to be done in the deferred function. Otherwise, if there's a bailout, f will be nil and the resulting f is nil, contrary to what the API description says.\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/interface.go#newcode120\nsrc/pkg/go/parser/interface.go:120: return f, err\njust:\n\nreturn\n\nno need to provide values; they will be set in the deferred function\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/parser.go#newcode347\nsrc/pkg/go/parser/parser.go:347: if p.mode&AllErrors == 0 && p.errors.Len() > 10 {\ns/>/>=/\n\nYou want to bail out if this is called and we have 10 errors already (i.e., this is the 11th time, error is called).\n\nhttps://codereview.appspot.com/7307085/diff/10001/src/pkg/go/parser/parser.go#newcode347\nsrc/pkg/go/parser/parser.go:347: if p.mode&AllErrors == 0 && p.errors.Len() > 10 {\ns/AllErrors/SpuriousErrors/\n\n(see my larger comment in ParseFile)",
			"disapproval": false,
			"date": "2013-02-14 06:55:56.204680",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nthanks!",
			"disapproval": false,
			"date": "2013-02-14 19:20:12.608950",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e5cc27ee25e3 ***\n\ngo/parser: stop ParseFile after ten errors.\n\nThere wil be a panic if more than ten errors are encountered. ParseFile\nwill recover and return the ErrorList.\n\nFixes issue 3943.\n\nR=golang-dev, gri\nCC=golang-dev\nhttps://codereview.appspot.com/7307085\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2013-02-14 19:26:54.252140",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 10:18:55.459120",
			"approval": false
		}
	],
	"owner_email": "matloob@google.com",
	"private": false,
	"base_url": "",
	"owner": "matloob",
	"subject": "code review 7307085: go/parser: stop ParseFile after ten errors.",
	"created": "2013-02-10 04:10:29.583530",
	"patchsets": [
		1,
		2001,
		4001,
		7003,
		10001,
		15001
	],
	"modified": "2013-07-21 10:18:55.577140",
	"closed": false,
	"issue": 7307085
}