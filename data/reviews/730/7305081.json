{
	"description": "net: add test for Dial and Listen arguments",
	"cc": [
		"dave@cheney.net",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=535d6d34eb93 ***\n\nnet: add test for Dial and Listen arguments\n\nR=dave, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7305081",
			"disapproval": false,
			"date": "2013-02-13 22:02:41.395230",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 13, 2013 at 1:36 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> The flag change seems unrelated.\r\n\r\nyup, separated.\r\n",
			"disapproval": false,
			"date": "2013-02-12 22:03:16.395200",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-12 22:04:20.802310",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-12 11:35:42.493350",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The flag change seems unrelated.\r\n\r\nOn Tue, Feb 12, 2013 at 3:35 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Reviewers: dfc,\r\n>\r\n> Message:\r\n> Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: add test for Dial and Listen arguments\r\n>\r\n> Please review this at https://codereview.appspot.**com/7305081/<https://codereview.appspot.com/7305081/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/dial_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/dial_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/dial_test.go\r\n> +++ b/src/pkg/net/dial_test.go\r\n> @@ -9,6 +9,7 @@\r\n>         \"fmt\"\r\n>         \"io\"\r\n>         \"os\"\r\n> +       \"reflect\"\r\n>         \"regexp\"\r\n>         \"runtime\"\r\n>         \"testing\"\r\n> @@ -144,15 +145,13 @@\r\n>         }\r\n>  }\r\n>\r\n> -var runErrorTest = flag.Bool(\"run_error_test\", false, \"let TestDialError\r\n> check for dns errors\")\r\n> +var testDialError = flag.Bool(\"dialerror\", false, \"let TestDialError\r\n> check for DNS errors\")\r\n>\r\n> -type DialErrorTest struct {\r\n> -       Net     string\r\n> -       Raddr   string\r\n> -       Pattern string\r\n> -}\r\n> -\r\n> -var dialErrorTests = []DialErrorTest{\r\n> +var dialErrorTests = []struct {\r\n> +       net     string\r\n> +       raddr   string\r\n> +       pattern string\r\n> +}{\r\n>         {\r\n>                 \"datakit\", \"mh/astro/r70\",\r\n>                 \"dial datakit mh/astro/r70: unknown network datakit\",\r\n> @@ -198,23 +197,23 @@\r\n>  var duplicateErrorPattern = `dial (.*) dial (.*)`\r\n>\r\n>  func TestDialError(t *testing.T) {\r\n> -       if !*runErrorTest {\r\n> +       if !*testDialError {\r\n>                 t.Logf(\"test disabled; use -run_error_test to enable\")\r\n>                 return\r\n>         }\r\n>         for i, tt := range dialErrorTests {\r\n> -               c, err := Dial(tt.Net, tt.Raddr)\r\n> +               c, err := Dial(tt.net, tt.raddr)\r\n>                 if c != nil {\r\n>                         c.Close()\r\n>                 }\r\n>                 if err == nil {\r\n> -                       t.Errorf(\"#%d: nil error, want match for %#q\", i,\r\n> tt.Pattern)\r\n> +                       t.Errorf(\"#%d: nil error, want match for %#q\", i,\r\n> tt.pattern)\r\n>                         continue\r\n>                 }\r\n>                 s := err.Error()\r\n> -               match, _ := regexp.MatchString(tt.Pattern, s)\r\n> +               match, _ := regexp.MatchString(tt.pattern, s)\r\n>                 if !match {\r\n> -                       t.Errorf(\"#%d: %q, want match for %#q\", i, s,\r\n> tt.Pattern)\r\n> +                       t.Errorf(\"#%d: %q, want match for %#q\", i, s,\r\n> tt.pattern)\r\n>                 }\r\n>                 match, _ = regexp.MatchString(**duplicateErrorPattern, s)\r\n>                 if match {\r\n> @@ -223,6 +222,31 @@\r\n>         }\r\n>  }\r\n>\r\n> +var invalidDialAndListenArgTests = []struct {\r\n> +       net  string\r\n> +       addr string\r\n> +       err  error\r\n> +}{\r\n> +       {\"foo\", \"bar\", &OpError{Op: \"dial\", Net: \"foo\", Addr: nil, Err:\r\n> UnknownNetworkError(\"foo\")}},\r\n> +       {\"baz\", \"\", &OpError{Op: \"listen\", Net: \"baz\", Addr: nil, Err:\r\n> UnknownNetworkError(\"baz\")}},\r\n> +       {\"tcp\", \"\", &OpError{Op: \"dial\", Net: \"tcp\", Addr: nil, Err:\r\n> errMissingAddress}},\r\n> +}\r\n> +\r\n> +func TestInvalidDialAndListenArgs(t *testing.T) {\r\n> +       for _, tt := range invalidDialAndListenArgTests {\r\n> +               var err error\r\n> +               switch tt.err.(*OpError).Op {\r\n> +               case \"dial\":\r\n> +                       _, err = Dial(tt.net, tt.addr)\r\n> +               case \"listen\":\r\n> +                       _, err = Listen(tt.net, tt.addr)\r\n> +               }\r\n> +               if !reflect.DeepEqual(tt.err, err) {\r\n> +                       t.Fatalf(\"got %#v; expected %#v\", err, tt.err)\r\n> +               }\r\n> +       }\r\n> +}\r\n> +\r\n>  func TestDialTimeoutFDLeak(t *testing.T) {\r\n>         if runtime.GOOS != \"linux\" {\r\n>                 // TODO(bradfitz): test on other platforms\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-12 16:36:18.556670",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I *think* these error messages are the same on Win32/Plan9.",
			"disapproval": false,
			"date": "2013-02-12 22:10:41.734330",
			"approval": true
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 7305081: net: add test for Dial and Listen arguments",
	"created": "2013-02-12 11:34:31.121490",
	"patchsets": [
		1,
		2001,
		4002,
		9001,
		8002,
		8004
	],
	"modified": "2013-02-13 22:02:44.087980",
	"closed": true,
	"issue": 7305081
}