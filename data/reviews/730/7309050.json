{
	"description": "net: do not use RLock around Accept\n\nIt might be non-blocking, but it also might be blocking.\nCannot take the chance, as Accept might block indefinitely\nand make it impossible to acquire ForkLock exclusively\n(during fork+exec).\n\nFixes issue 4737.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"iant@golang.org",
		"mikioh.mikioh@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Your comment about kernels < 2.6.28 is relevant. Maybe it is time to bite\r\nthe bullet and say that Go 1.1 really won't work on RHEL5.\r\nOn 6 Feb 2013 07:31, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg\r\n>\r\n>\r\n> Description:\r\n> net: do not use RLock around Accept\r\n>\r\n> It might be non-blocking, but it also might be blocking.\r\n> Cannot take the chance, as Accept might block indefinitely\r\n> and make it impossible to acquire ForkLock exclusively\r\n> (during fork+exec).\r\n>\r\n> Fixes issue 4737.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7309050/<https://codereview.appspot.com/7309050/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/sock_cloexec.go\r\n>   M src/pkg/net/sys_cloexec.go\r\n>\r\n>\r\n> Index: src/pkg/net/sock_cloexec.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/sock_cloexec.go\r\n> +++ b/src/pkg/net/sock_cloexec.go\r\n> @@ -50,14 +50,14 @@\r\n>         }\r\n>\r\n>         // See ../syscall/exec_unix.go for description of ForkLock.\r\n> -       // It is okay to hold the lock across syscall.Accept\r\n> +       // It is probably okay to hold the lock across syscall.Accept\r\n>         // because we have put fd.sysfd into non-blocking mode.\r\n> -       syscall.ForkLock.RLock()\r\n> +       // However, a call to the File method will put it back into\r\n> +       // blocking mode. We can't take that risk, so no use of ForkLock\r\n> here.\r\n>         nfd, sa, err = syscall.Accept(fd)\r\n>         if err == nil {\r\n>                 syscall.CloseOnExec(nfd)\r\n>         }\r\n> -       syscall.ForkLock.RUnlock()\r\n>         if err != nil {\r\n>                 return -1, nil, err\r\n>         }\r\n> Index: src/pkg/net/sys_cloexec.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/sys_cloexec.go\r\n> +++ b/src/pkg/net/sys_cloexec.go\r\n> @@ -35,14 +35,14 @@\r\n>  // descriptor as nonblocking and close-on-exec.\r\n>  func accept(fd int) (int, syscall.Sockaddr, error) {\r\n>         // See ../syscall/exec_unix.go for description of ForkLock.\r\n> -       // It is okay to hold the lock across syscall.Accept\r\n> +       // It is probably okay to hold the lock across syscall.Accept\r\n>         // because we have put fd.sysfd into non-blocking mode.\r\n> -       syscall.ForkLock.RLock()\r\n> +       // However, a call to the File method will put it back into\r\n> +       // blocking mode. We can't take that risk, so no use of ForkLock\r\n> here.\r\n>         nfd, sa, err := syscall.Accept(fd)\r\n>         if err == nil {\r\n>                 syscall.CloseOnExec(nfd)\r\n>         }\r\n> -       syscall.ForkLock.RUnlock()\r\n>         if err != nil {\r\n>                 return -1, nil, err\r\n>         }\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-05 20:36:10.009460",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-05 22:04:17.850140",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-05 20:40:34.893020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-02-05 20:31:32.405790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a33346cdc901 ***\n\nnet: do not use RLock around Accept\n\nIt might be non-blocking, but it also might be blocking.\nCannot take the chance, as Accept might block indefinitely\nand make it impossible to acquire ForkLock exclusively\n(during fork+exec).\n\nFixes issue 4737.\n\nR=golang-dev, dave, iant, mikioh.mikioh\nCC=golang-dev\nhttps://codereview.appspot.com/7309050",
			"disapproval": false,
			"date": "2013-02-08 03:45:22.226130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The CL is still necessary on all the BSDs, so I don't see the point to\r\ndropping support for <2.6.28 kernels.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-05 20:38:22.277360",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure. I was not clear in my previous reply. I was not proposing we drop support for RHEL5 in Go 1.1, because it wasn't properly supported in Go 1.0. As time goes on \"not supported\" moves from a quirk to downright annoying for those who want to keep trying to use 2.6.18 kernels.  \r\n\r\nOn 06/02/2013, at 7:38, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> The CL is still necessary on all the BSDs, so I don't see the point to dropping support for <2.6.28 kernels.\r\n> \r\n> Russ\r\n> \r\n",
			"disapproval": false,
			"date": "2013-02-05 20:55:56.385910",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-08 03:16:46.040390",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7309050: net: do not use RLock around Accept",
	"created": "2013-02-05 20:31:08.468920",
	"patchsets": [
		1,
		2001,
		5001,
		7003,
		4004
	],
	"modified": "2013-02-14 15:01:56.135250",
	"closed": true,
	"issue": 7309050
}