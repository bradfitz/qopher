{
	"description": "runtime: precise garbage collection of channels\n\nThis changeset adds a mostly-precise garbage collection of channels.\nThe garbage collection support code in the linker isn't recognizing\nchannel types yet.\n\nFixes issue http://stackoverflow.com/questions/14712586/memory-consumption-skyrocket",
	"cc": [
		"dvyukov@google.com",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 19, 2013 at 1:15 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/02/19 21:07:54, bradfitz wrote:\r\n>\r\n>> On Tue, Feb 19, 2013 at 1:05 PM, <mailto:0xE2.0x9A.0x9B@gmail.**com<0xE2.0x9A.0x9B@gmail.com>\r\n>> >\r\n>>\r\n> wrote:\r\n>\r\n>  > Cannot test package \"net\" on linux/amd64 due to limited permissions.\r\n>> > Tests that aren't limited by permissions complete ok.\r\n>> >\r\n>>\r\n>\r\n>  I don't understand.  Which permissions?  I don't run as root.\r\n>>\r\n>\r\n> The linux/amd64 machine is a virtualized host (AWS).\r\n>\r\n\r\nSo are most of the builders at http://build.golang.org/\r\n\r\nWhat fails for you on AWS that doesn't fail for us?\r\n",
			"disapproval": false,
			"date": "2013-02-19 21:26:15.757460",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: rsc, dfc, dvyukov, minux, remyoudompheng),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-10 11:01:33.205080",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 19, 2013 at 1:05 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> Cannot test package \"net\" on linux/amd64 due to limited permissions.\r\n> Tests that aren't limited by permissions complete ok.\r\n>\r\n\r\nI don't understand.  Which permissions?  I don't run as root.\r\n",
			"disapproval": false,
			"date": "2013-02-19 21:07:54.002820",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/chan.c#newcode117\nsrc/pkg/runtime/chan.c:117: runtime\u00b7settype(c, (uintptr)t | TypeInfo_Chan);\nthe Hchan itself does not contain interesting pointers, so if element type does not contain pointers, you can mark the whole block as no-pointers.\nAnd add a comment before Hchan.\nsee:\nhttps://codereview.appspot.com/5250069/diff/4001/src/pkg/runtime/chan.c\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode914\nsrc/pkg/runtime/mgc0.c:914: *objbufpos++ = (Obj){(byte*)chan, Hchansize, (uintptr)defaultProg};\nthere are no interesting pointers",
			"disapproval": false,
			"date": "2013-02-10 11:14:57.997640",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/chan.c#newcode117\nsrc/pkg/runtime/chan.c:117: runtime\u00b7settype(c, (uintptr)t | TypeInfo_Chan);\nOn 2013/02/10 11:14:58, dvyukov wrote:\n> the Hchan itself does not contain interesting pointers, so if element type does\n> not contain pointers, you can mark the whole block as no-pointers.\n> And add a comment before Hchan.\n> see:\n> https://codereview.appspot.com/5250069/diff/4001/src/pkg/runtime/chan.c\n\nIn my opinion it would be more transparent from code maintenance viewpoint for mgc0.c to use type hchan (defined in zruntime_defs_linux_386.go on my machine).\n\nThis would make GC slower compared to marking the whole block as no-pointers, but it is faster and more precise than defaultProg.\n\nI suggest for the usage of type hchan to be a separate CL.\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode914\nsrc/pkg/runtime/mgc0.c:914: *objbufpos++ = (Obj){(byte*)chan, Hchansize, (uintptr)defaultProg};\nOn 2013/02/10 11:14:58, dvyukov wrote:\n> there are no interesting pointers\n\nMaybe a separate CL: utilize type hchan instead of defaultProg.",
			"disapproval": false,
			"date": "2013-02-10 14:20:28.715340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode914\nsrc/pkg/runtime/mgc0.c:914: *objbufpos++ = (Obj){(byte*)chan, Hchansize, (uintptr)defaultProg};\nIs there a noPointersProg that we could use here instead?\nUsing type hchan will still introduce more pointers to be scanned unnecessarily.\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode920\nsrc/pkg/runtime/mgc0.c:920: // TODO(atom): replace n-Hchansize by the actual number of elements in the buffer.\nFor what it's worth, since it is a circular buffer, that will in general require queueing two different entries.",
			"disapproval": false,
			"date": "2013-02-14 21:46:49.795150",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode914\nsrc/pkg/runtime/mgc0.c:914: *objbufpos++ = (Obj){(byte*)chan, Hchansize, (uintptr)defaultProg};\nOn 2013/02/14 21:46:49, rsc wrote:\n> Is there a noPointersProg that we could use here instead?\n> Using type hchan will still introduce more pointers to be scanned unnecessarily.\n\nIf it is acceptable to make the same assumptions as in Dmitry's CL (https://codereview.appspot.com/5250069) then this line can be simply deleted.\n\nhttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode920\nsrc/pkg/runtime/mgc0.c:920: // TODO(atom): replace n-Hchansize by the actual number of elements in the buffer.\nOn 2013/02/14 21:46:49, rsc wrote:\n> For what it's worth, since it is a circular buffer, that will in general require\n> queueing two different entries.\n\nTrue.",
			"disapproval": false,
			"date": "2013-02-15 09:40:53.637400",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 15, 2013 at 4:40 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n>\r\n> https://codereview.appspot.**com/7307086/diff/1/src/pkg/**runtime/mgc0.c<https://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c>\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.**com/7307086/diff/1/src/pkg/**\r\n> runtime/mgc0.c#newcode914<https://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode914>\r\n> src/pkg/runtime/mgc0.c:914: *objbufpos++ = (Obj){(byte*)chan, Hchansize,\r\n> (uintptr)defaultProg};\r\n> On 2013/02/14 21:46:49, rsc wrote:\r\n>\r\n>> Is there a noPointersProg that we could use here instead?\r\n>> Using type hchan will still introduce more pointers to be scanned\r\n>>\r\n> unnecessarily.\r\n>\r\n> If it is acceptable to make the same assumptions as in Dmitry's CL\r\n> (https://codereview.appspot.**com/5250069<https://codereview.appspot.com/5250069>)\r\n> then this line can be simply\r\n> deleted.\r\n\r\n\r\nThat sounds fine to me. Dmitriy never mailed that CL so I've never seen it\r\nbefore.\r\n\r\nWhat is left for the precise garbage collection once channels are in? Is it\r\ncomplete at that point? I understand there might be performance\r\noptimizations left, but as far as correctness?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-19 18:29:13.338090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7307086/diff/10001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/7307086/diff/10001/src/pkg/runtime/runtime.h#newcode593\nsrc/pkg/runtime/runtime.h:593: extern\tuint32\tHchansize;\nThis needs to be runtime.Hchansize, to avoid conflict with a C symbol named Hchansize when using cgo.",
			"disapproval": false,
			"date": "2013-02-19 19:29:03.004230",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Forgot to say I am using darwin/amd64 on OS X 10.8.2.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-19 20:41:05.428710",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org (cc: dave@cheney.net, golang-dev@googlegroups.com, minux.ma@gmail.com, remyoudompheng@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-19 19:15:04.854690",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 18:29:13, rsc wrote:\n> On Fri, Feb 15, 2013 at 4:40 AM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> >\n> >\n> https://codereview.appspot.**com/7307086/diff/1/src/pkg/**runtime/mgc0.c%3Chttps://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c>\n> > File src/pkg/runtime/mgc0.c (right):\n> >\n> > https://codereview.appspot.**com/7307086/diff/1/src/pkg/**\n> >\n> runtime/mgc0.c#newcode914<https://codereview.appspot.com/7307086/diff/1/src/pkg/runtime/mgc0.c#newcode914>\n> > src/pkg/runtime/mgc0.c:914: *objbufpos++ = (Obj){(byte*)chan, Hchansize,\n> > (uintptr)defaultProg};\n> > On 2013/02/14 21:46:49, rsc wrote:\n> >\n> >> Is there a noPointersProg that we could use here instead?\n> >> Using type hchan will still introduce more pointers to be scanned\n> >>\n> > unnecessarily.\n> >\n> > If it is acceptable to make the same assumptions as in Dmitry's CL\n> >\n> (https://codereview.appspot.**com/5250069%3Chttps://codereview.appspot.com/5250069>)\n> > then this line can be simply\n> > deleted.\n> \n> \n> That sounds fine to me. Dmitriy never mailed that CL so I've never seen it\n> before.\n> \n> What is left for the precise garbage collection once channels are in? Is it\n> complete at that point? I understand there might be performance\n> optimizations left, but as far as correctness?\n> \n> Thanks.\n> Russ\n\nHandling of channels by the garbage collector completes the modifications I planned to contribute as far as precision is concerned. The next CL will fill in the GC_REGION case in mgc0.c, which is just a couple of lines of code. There is unsubmitted code left in CL 6114046, but it isn't related to precision.",
			"disapproval": false,
			"date": "2013-02-19 19:16:22.547640",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 22:10:47, bradfitz wrote:\n> On Tue, Feb 19, 2013 at 1:33 PM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> \n> > >  > Cannot test package \"net\" on linux/amd64 due to limited\n> >>\n> > permissions.\n> >\n> >> >> > Tests that aren't limited by permissions complete ok.\n> >> >> >\n> >> >>\n> >> >\n> >> >  I don't understand.  Which permissions?  I don't run as root.\n> >> >>\n> >> >\n> >> > The linux/amd64 machine is a virtualized host (AWS).\n> >> >\n> >>\n> >\n> >  So are most of the builders at http://build.golang.org/\n> >>\n> >\n> >  What fails for you on AWS that doesn't fail for us?\n> >>\n> >\n> > [golang-symbol.rhcloud.com net]\\> ./net.test -test.short\n> > --- FAIL: TestConnAndListener-2 (0.00 seconds)\n> > conn_test.go:42:        net.Listen failed: listen tcp 127.0.0.1:0:\n> > permission denied\n> >\n> \n> I think that's your distro doing that, not AWS.\n> \n> I just built tip & ran the net tests on AWS on a linux-amd64 Ubuntu Precise\n> instance.  It passes.\n> \n> Are you running some \"security-hardened\" distro+kernel which is paranoid\n> about things like grabbing free ports for listening without saying 'pretty\n> please' first?\n\nOpenShift appears to be based on selinux.",
			"disapproval": false,
			"date": "2013-02-19 22:31:23.308430",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, rsc@golang.org (cc: dave@cheney.net, golang-dev@googlegroups.com, minux.ma@gmail.com, remyoudompheng@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-19 19:35:39.110490",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307086/diff/10001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/7307086/diff/10001/src/pkg/runtime/runtime.h#newcode593\nsrc/pkg/runtime/runtime.h:593: extern\tuint32\tHchansize;\nOn 2013/02/19 19:29:03, rsc wrote:\n> This needs to be runtime.Hchansize, to avoid conflict with a C symbol named\n> Hchansize when using cgo.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-19 20:02:39.449330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I patched this into my client in preparation for submitting it, but\r\nall.bash failed. On further investigation it seems like running 'go test\r\n-short net' fails about 20% of the time with seg faults.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-19 20:29:49.133090",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 20:29:49, rsc wrote:\n> I patched this into my client in preparation for submitting it, but\n> all.bash failed. On further investigation it seems like running 'go test\n> -short net' fails about 20% of the time with seg faults.\n> \n> Russ\n\nI am unable to reproduce the failure on linux/386.\n\nCannot test package \"net\" on linux/amd64 due to limited permissions. Tests that aren't limited by permissions complete ok.",
			"disapproval": false,
			"date": "2013-02-19 21:05:55.958040",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 21:07:54, bradfitz wrote:\n> On Tue, Feb 19, 2013 at 1:05 PM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> \n> > Cannot test package \"net\" on linux/amd64 due to limited permissions.\n> > Tests that aren't limited by permissions complete ok.\n> >\n> \n> I don't understand.  Which permissions?  I don't run as root.\n\nThe linux/amd64 machine is a virtualized host (AWS).",
			"disapproval": false,
			"date": "2013-02-19 21:15:32.831260",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 21:26:15, bradfitz wrote:\n> On Tue, Feb 19, 2013 at 1:15 PM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> \n> > On 2013/02/19 21:07:54, bradfitz wrote:\n> >\n> >> On Tue, Feb 19, 2013 at 1:05 PM,\n> <mailto:0xE2.0x9A.0x9B@gmail.**com<0xE2.0x9A.0x9B@gmail.com>\n> >> >\n> >>\n> > wrote:\n> >\n> >  > Cannot test package \"net\" on linux/amd64 due to limited permissions.\n> >> > Tests that aren't limited by permissions complete ok.\n> >> >\n> >>\n> >\n> >  I don't understand.  Which permissions?  I don't run as root.\n> >>\n> >\n> > The linux/amd64 machine is a virtualized host (AWS).\n> >\n> \n> So are most of the builders at http://build.golang.org/\n> \n> What fails for you on AWS that doesn't fail for us?\n\n[golang-symbol.rhcloud.com net]\\> ./net.test -test.short\n--- FAIL: TestConnAndListener-2 (0.00 seconds)\nconn_test.go:42:        net.Listen failed: listen tcp 127.0.0.1:0: permission denied",
			"disapproval": false,
			"date": "2013-02-19 21:33:48.297990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 19, 2013 at 1:33 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> >  > Cannot test package \"net\" on linux/amd64 due to limited\r\n>>\r\n> permissions.\r\n>\r\n>> >> > Tests that aren't limited by permissions complete ok.\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> >  I don't understand.  Which permissions?  I don't run as root.\r\n>> >>\r\n>> >\r\n>> > The linux/amd64 machine is a virtualized host (AWS).\r\n>> >\r\n>>\r\n>\r\n>  So are most of the builders at http://build.golang.org/\r\n>>\r\n>\r\n>  What fails for you on AWS that doesn't fail for us?\r\n>>\r\n>\r\n> [golang-symbol.rhcloud.com net]\\> ./net.test -test.short\r\n> --- FAIL: TestConnAndListener-2 (0.00 seconds)\r\n> conn_test.go:42:        net.Listen failed: listen tcp 127.0.0.1:0:\r\n> permission denied\r\n>\r\n\r\nI think that's your distro doing that, not AWS.\r\n\r\nI just built tip & ran the net tests on AWS on a linux-amd64 Ubuntu Precise\r\ninstance.  It passes.\r\n\r\nAre you running some \"security-hardened\" distro+kernel which is paranoid\r\nabout things like grabbing free ports for listening without saying 'pretty\r\nplease' first?\r\n",
			"disapproval": false,
			"date": "2013-02-19 22:10:47.757430",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 21:33:48, atom wrote:\n> On 2013/02/19 21:26:15, bradfitz wrote:\n> > On Tue, Feb 19, 2013 at 1:15 PM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> > \n> > > On 2013/02/19 21:07:54, bradfitz wrote:\n> > >\n> > >> On Tue, Feb 19, 2013 at 1:05 PM,\n> > <mailto:0xE2.0x9A.0x9B@gmail.**com<0xE2.0x9A.0x9B@gmail.com>\n> > >> >\n> > >>\n> > > wrote:\n> > >\n> > >  > Cannot test package \"net\" on linux/amd64 due to limited permissions.\n> > >> > Tests that aren't limited by permissions complete ok.\n> > >> >\n> > >>\n> > >\n> > >  I don't understand.  Which permissions?  I don't run as root.\n> > >>\n> > >\n> > > The linux/amd64 machine is a virtualized host (AWS).\n> > >\n> > \n> > So are most of the builders at http://build.golang.org/\n> > \n> > What fails for you on AWS that doesn't fail for us?\n> \n> [golang-symbol.rhcloud.com net]\\> ./net.test -test.short\n> --- FAIL: TestConnAndListener-2 (0.00 seconds)\n> conn_test.go:42:        net.Listen failed: listen tcp 127.0.0.1:0: permission\n> denied\n\nThe solution is to replace 127.0.0.1 with the value of OPENSHIFT_INTERNAL_IP.",
			"disapproval": false,
			"date": "2013-02-20 10:46:04.598920",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 20:29:49, rsc wrote:\n> I patched this into my client in preparation for submitting it, but\n> all.bash failed. On further investigation it seems like running 'go test\n> -short net' fails about 20% of the time with seg faults.\n> \n> Russ\n\nI am unable to reproduce the failure (go test -short net) on linux/amd64.",
			"disapproval": false,
			"date": "2013-02-20 10:54:08.141740",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 20, 2013 at 2:46 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/02/19 21:33:48, atom wrote:\r\n>\r\n>> On 2013/02/19 21:26:15, bradfitz wrote:\r\n>> > On Tue, Feb 19, 2013 at 1:15 PM, <mailto:0xE2.0x9A.0x9B@gmail.**com<0xE2.0x9A.0x9B@gmail.com>\r\n>> >\r\n>>\r\n> wrote:\r\n>\r\n>> >\r\n>> > > On 2013/02/19 21:07:54, bradfitz wrote:\r\n>> > >\r\n>> > >> On Tue, Feb 19, 2013 at 1:05 PM,\r\n>> > <mailto:0xE2.0x9A.0x9B@gmail.****com<0xE2.0x9A.0x9B@gmail.com>\r\n>>\r\n>> > >> >\r\n>> > >>\r\n>> > > wrote:\r\n>> > >\r\n>> > >  > Cannot test package \"net\" on linux/amd64 due to limited\r\n>>\r\n> permissions.\r\n>\r\n>> > >> > Tests that aren't limited by permissions complete ok.\r\n>> > >> >\r\n>> > >>\r\n>> > >\r\n>> > >  I don't understand.  Which permissions?  I don't run as root.\r\n>> > >>\r\n>> > >\r\n>> > > The linux/amd64 machine is a virtualized host (AWS).\r\n>> > >\r\n>> >\r\n>> > So are most of the builders at http://build.golang.org/\r\n>> >\r\n>> > What fails for you on AWS that doesn't fail for us?\r\n>>\r\n>\r\n>  [golang-symbol.rhcloud.com net]\\> ./net.test -test.short\r\n>> --- FAIL: TestConnAndListener-2 (0.00 seconds)\r\n>> conn_test.go:42:        net.Listen failed: listen tcp 127.0.0.1:0:\r\n>>\r\n> permission\r\n>\r\n>> denied\r\n>>\r\n>\r\n> The solution is to replace 127.0.0.1 with the value of\r\n> OPENSHIFT_INTERNAL_IP.\r\n>\r\n\r\nWow:\r\nhttps://openshift.redhat.com/community/page/openshift-environment-variables\r\n\r\nYou should probably develop Go on a general-purpose Linux distro (there are\r\na few), not one geared towards running \"apps\".\r\n",
			"disapproval": false,
			"date": "2013-02-20 15:20:20.131150",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/19 20:29:49, rsc wrote:\n> I patched this into my client in preparation for submitting it, but\n> all.bash failed. On further investigation it seems like running 'go test\n> -short net' fails about 20% of the time with seg faults.\n> \n> Russ\n\nDoes the failure occur if GOMAXPROCS=1?",
			"disapproval": false,
			"date": "2013-02-22 16:37:23.132530",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/22 16:51:56, rsc wrote:\n> Yes. I always run with GOMAXPROCS unset, so it should be 1 already. Sorry I\n> haven't had a chance to debug this yet. Trying to get the func stuff moved\n> along and then I will.\n> \n> Russ\n\nThe net package is calling function runtime.GOMAXPROCS(). Therefore the garbage collector sometimes runs with multiple threads while testing the net package. It is necessary to explicitly set GOMAXPROCS to 1.\n\nI came across a test case indicating that it may be possible for sweepspan() to start running in some OS thread before the last scanblock() has terminated.",
			"disapproval": false,
			"date": "2013-02-22 17:13:24.220710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes. I always run with GOMAXPROCS unset, so it should be 1 already. Sorry I\r\nhaven't had a chance to debug this yet. Trying to get the func stuff moved\r\nalong and then I will.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-22 16:51:56.631840",
			"approval": false
		},
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 22, 2013 at 7:23 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Fri, Feb 22, 2013 at 12:13 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n>\r\n>> The net package is calling function runtime.GOMAXPROCS(). Therefore the\r\n>> garbage collector sometimes runs with multiple threads while testing the\r\n>> net package. It is necessary to explicitly set GOMAXPROCS to 1.\r\n>>\r\n>\r\n> Do you mean by editing the net test? I don't see how the environment\r\n> variable GOMAXPROCS=1 is different from unset.\r\n>\r\n\r\nYou are right, there is no difference.\r\n\r\nGarbage collector errors have been very subtle so far. I wonder what kind\r\nof error it is this time.\r\n",
			"disapproval": false,
			"date": "2013-02-22 19:20:02.568070",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 22, 2013 at 9:13 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/02/22 16:51:56, rsc wrote:\r\n>\r\n>> Yes. I always run with GOMAXPROCS unset, so it should be 1 already.\r\n>>\r\n> Sorry I\r\n>\r\n>> haven't had a chance to debug this yet. Trying to get the func stuff\r\n>>\r\n> moved\r\n>\r\n>> along and then I will.\r\n>>\r\n>\r\n>  Russ\r\n>>\r\n>\r\n> The net package is calling function runtime.GOMAXPROCS(). Therefore the\r\n> garbage collector sometimes runs with multiple threads while testing the\r\n> net package. It is necessary to explicitly set GOMAXPROCS to 1.\r\n>\r\n> I came across a test case indicating that it may be possible for\r\n> sweepspan() to start running in some OS thread before the last\r\n> scanblock() has terminated.\r\n>\r\n\r\n\r\n\r\nWhat do you mean?\r\nscnablock() returns only when all blocks are completely scanned.\r\n",
			"disapproval": false,
			"date": "2013-02-22 17:17:31.430960",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/22 17:17:31, dvyukov wrote:\n> On Fri, Feb 22, 2013 at 9:13 PM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> \n> > On 2013/02/22 16:51:56, rsc wrote:\n> >\n> >> Yes. I always run with GOMAXPROCS unset, so it should be 1 already.\n> >>\n> > Sorry I\n> >\n> >> haven't had a chance to debug this yet. Trying to get the func stuff\n> >>\n> > moved\n> >\n> >> along and then I will.\n> >>\n> >\n> >  Russ\n> >>\n> >\n> > The net package is calling function runtime.GOMAXPROCS(). Therefore the\n> > garbage collector sometimes runs with multiple threads while testing the\n> > net package. It is necessary to explicitly set GOMAXPROCS to 1.\n> >\n> > I came across a test case indicating that it may be possible for\n> > sweepspan() to start running in some OS thread before the last\n> > scanblock() has terminated.\n> >\n> \n> \n> \n> What do you mean?\n> scnablock() returns only when all blocks are completely scanned.\n\nI am not sure. Maybe I made an error while figuring out how to interpret a certain bug in my code (the code isn't related to this CL).",
			"disapproval": false,
			"date": "2013-02-22 17:30:33.163830",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/22 17:30:33, atom wrote:\n> On 2013/02/22 17:17:31, dvyukov wrote:\n> > On Fri, Feb 22, 2013 at 9:13 PM, <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> > \n> > > On 2013/02/22 16:51:56, rsc wrote:\n> > >\n> > >> Yes. I always run with GOMAXPROCS unset, so it should be 1 already.\n> > >>\n> > > Sorry I\n> > >\n> > >> haven't had a chance to debug this yet. Trying to get the func stuff\n> > >>\n> > > moved\n> > >\n> > >> along and then I will.\n> > >>\n> > >\n> > >  Russ\n> > >>\n> > >\n> > > The net package is calling function runtime.GOMAXPROCS(). Therefore the\n> > > garbage collector sometimes runs with multiple threads while testing the\n> > > net package. It is necessary to explicitly set GOMAXPROCS to 1.\n> > >\n> > > I came across a test case indicating that it may be possible for\n> > > sweepspan() to start running in some OS thread before the last\n> > > scanblock() has terminated.\n> > >\n> > \n> > \n> > \n> > What do you mean?\n> > scnablock() returns only when all blocks are completely scanned.\n> \n> I am not sure. Maybe I made an error while figuring out how to interpret a\n> certain bug in my code (the code isn't related to this CL).\n\nIndeed. I made a mistake while decoding the meaning of my code. Thanks.",
			"disapproval": false,
			"date": "2013-02-22 18:12:55.864640",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Update: I fixed the bug we hit a few weeks ago (issue 4907) but that did\r\nnot fix the channel crash on my Mac. That's up next.\r\n",
			"disapproval": false,
			"date": "2013-02-25 17:18:11.392350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 22, 2013 at 12:13 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> The net package is calling function runtime.GOMAXPROCS(). Therefore the\r\n> garbage collector sometimes runs with multiple threads while testing the\r\n> net package. It is necessary to explicitly set GOMAXPROCS to 1.\r\n>\r\n\r\nDo you mean by editing the net test? I don't see how the environment\r\nvariable GOMAXPROCS=1 is different from unset.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-22 18:23:23.691300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The tree with this CL patched in did not crash reliably for me on Linux,\r\nonly on OS X.\r\n\r\nHowever, if you also apply https://codereview.appspot.com/7364048 and then\r\ndo\r\n\r\ncd $GOROOT/src/pkg/net\r\nexport GOGC=1\r\ngo test -short\r\ngo test -short\r\ngo test -short\r\n\r\nthen it crashes for me more than half the time.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-25 18:36:46.478910",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "With and also without CL\u00a07364048 I am getting SIGSEGV in gdb on linux/386.\n\n$ hg identify\n408b088723fd+ tip\n\n$ gdb ./net.test\n(gdb) set args -test.short\n(gdb) run\n...\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0xb5effb40 (LWP 29586)]\n0x08053d08 in scanblock (wbuf=void, wp=void, nobj=void, keepworking=void) at src/pkg/runtime/mgc0.c:755\n755 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t = iface->tab->type;\n(gdb) bt\n#0 \u00a00x08053d08 in scanblock (wbuf=void, wp=void, nobj=void, keepworking=void) at src/pkg/runtime/mgc0.c:755\n#1 \u00a00x08054591 in markroot (i=void) at src/pkg/runtime/mgc0.c:1122\n#2 \u00a00x08058ca8 in runtime.parfordo (desc=void) at src/pkg/runtime/parfor.c:116\n#3 \u00a00x08055278 in runtime.gchelper () at src/pkg/runtime/mgc0.c:1588\n#4 \u00a00x0805a82f in nextgandunlock () at src/pkg/runtime/proc.c:663\n#5 \u00a00x0805b235 in schedule (gp=void) at src/pkg/runtime/proc.c:1181\n#6 \u00a00x08064e15 in runtime.mcall (fn=void) at src/pkg/runtime/asm_386.s:195\n#7 \u00a00x18399000 in ?? ()\n\nOn 2013/02/25 18:36:46, rsc wrote:\n> The tree with this CL patched in did not crash reliably for me on Linux,\n> only on OS X.\n> \n> However, if you also apply https://codereview.appspot.com/7364048 and then\n> do\n> \n> cd $GOROOT/src/pkg/net\n> export GOGC=1\n> go test -short\n> go test -short\n> go test -short\n> \n> then it crashes for me more than half the time.\n> \n> Russ",
			"disapproval": false,
			"date": "2013-02-25 19:32:19.415290",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Found it. The block size known to the garbage collector may be larger than\r\nthe block size requested by the allocation of the channel. For an\r\nunbuffered channel on amd64, it turns out to be 8 bytes larger. The buffer\r\nis assumed to be the rest of the block, but the element size may not neatly\r\ndivide this leftover. Again on amd64, the problem happens with a chan of\r\ninterface values and 8 bytes left over. The \"second\" word of the interface\r\nis really some other piece of memory, and if it is non-zero then the\r\ncollector assumes the first word can be dereferenced using iface->tab->type.\r\n\r\nI changed the GC_CHAN case to:\r\n\r\n// There are no heap pointers in struct Hchan,\r\n// so we can ignore the leading sizeof(Hchan) bytes.\r\nif(!(chantype->elem->kind & KindNoPointers)) {\r\n// Channel's buffer follows Hchan immediately in memory.\r\n// Size of buffer (cap(c)) is second int in the chan struct.\r\nn = ((uintgo*)chan)[1];\r\nif(n > 0) {\r\n// TODO(atom): split into two chunks so that only the\r\n// in-use part of the circular buffer is scanned.\r\n// (Channel routines zero the unused part, so the current\r\n// code does not lead to leaks, it's just a little inefficient.)\r\n*objbufpos++ = (Obj){(byte*)chan+runtime\u00b7Hchansize, n*chantype->elem->size,\r\n(uintptr)chantype->elem->gc | PRECISE | LOOP};\r\nif(objbufpos == objbuf_end)\r\nflushobjbuf(objbuf, &objbufpos, &wp, &wbuf, &nobj);\r\n}\r\n}\r\ngoto next_block;\r\n\r\n(the difference is the computation of the size to use in the new (Obj)\r\nbeing queued), and now the net test is passing repeatedly.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-25 20:54:32.092290",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all.bash is happy now. Submitting, and on to the next bug.\r\n",
			"disapproval": false,
			"date": "2013-02-25 20:57:58.309590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1c50db40d078 ***\n\nruntime: precise garbage collection of channels\n\nThis changeset adds a mostly-precise garbage collection of channels.\nThe garbage collection support code in the linker isn't recognizing\nchannel types yet.\n\nFixes issue http://stackoverflow.com/questions/14712586/memory-consumption-skyrocket\n\nR=dvyukov, rsc, bradfitz\nCC=dave, golang-dev, minux.ma, remyoudompheng\nhttps://codereview.appspot.com/7307086\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-02-25 20:58:26.503110",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/25 20:54:32, rsc wrote:\n> Found it. The block size known to the garbage collector may be larger than\n> the block size requested by the allocation of the channel.\n\nThat is so obvious after giving a thought. Sorry for the inconvenience.\n\n> For an\n> unbuffered channel on amd64, it turns out to be 8 bytes larger. The buffer\n> is assumed to be the rest of the block, but the element size may not neatly\n> divide this leftover. Again on amd64, the problem happens with a chan of\n> interface values and 8 bytes left over. The \"second\" word of the interface\n> is really some other piece of memory, and if it is non-zero then the\n> collector assumes the first word can be dereferenced using iface->tab->type.\n> \n> I changed the GC_CHAN case to:\n> \n> // There are no heap pointers in struct Hchan,\n> // so we can ignore the leading sizeof(Hchan) bytes.\n> if(!(chantype->elem->kind & KindNoPointers)) {\n> // Channel's buffer follows Hchan immediately in memory.\n> // Size of buffer (cap(c)) is second int in the chan struct.\n> n = ((uintgo*)chan)[1];\n> if(n > 0) {\n> // TODO(atom): split into two chunks so that only the\n> // in-use part of the circular buffer is scanned.\n> // (Channel routines zero the unused part, so the current\n> // code does not lead to leaks, it's just a little inefficient.)\n> *objbufpos++ = (Obj){(byte*)chan+runtime\u00b7Hchansize, n*chantype->elem->size,\n> (uintptr)chantype->elem->gc | PRECISE | LOOP};\n> if(objbufpos == objbuf_end)\n> flushobjbuf(objbuf, &objbufpos, &wp, &wbuf, &nobj);\n> }\n> }\n> goto next_block;\n> \n> (the difference is the computation of the size to use in the new (Obj)\n> being queued), and now the net test is passing repeatedly.\n> \n> Russ",
			"disapproval": false,
			"date": "2013-02-25 21:14:35.363750",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 7307086: runtime: precise garbage collection of channels",
	"created": "2013-02-10 11:01:18.833320",
	"patchsets": [
		1,
		10001,
		13002
	],
	"modified": "2013-02-25 21:46:58.197120",
	"closed": true,
	"issue": 7307086
}