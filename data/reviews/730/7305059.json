{
	"description": "crypto/md5: fix for big-endian processors",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"agl@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-02-07 20:44:27.643900",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-07 20:46:24.099330",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c123597b7faa ***\n\ncrypto/md5: fix for big-endian processors\n\nR=golang-dev, minux.ma, agl\nCC=golang-dev\nhttps://codereview.appspot.com/7305059",
			"disapproval": false,
			"date": "2013-02-07 21:31:59.304170",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go\nFile src/pkg/crypto/md5/md5block.go (right):\n\nhttps://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go#newcode11\nsrc/pkg/crypto/md5/md5block.go:11: littleEndian := *(*uint32)(unsafe.Pointer(&x[0])) == 0x04030201\nthis still assumes [4]byte{} is 4-byte aligned.\n\ni think this is safer:\nx := uint32(0x04030201)\ny := [4]byte{0x1, 0x2, 0x3, 0x4}\nlittleEndian := *(*[4]byte)(unsafe.Pointer(&x)) == y;\n\nyeah, i agree we'd better put it in an init() block.\n\nhttps://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go#newcode22\nsrc/pkg/crypto/md5/md5block.go:22: if x86 {\nx86 should be const instead of a variable.",
			"disapproval": false,
			"date": "2013-02-07 20:12:15.827230",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-07 19:07:08.715550",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7305059/diff/1/src/pkg/crypto/md5/md5block.go\nFile src/pkg/crypto/md5/md5block.go (right):\n\nhttps://codereview.appspot.com/7305059/diff/1/src/pkg/crypto/md5/md5block.go#newcode25\nsrc/pkg/crypto/md5/md5block.go:25: } else if runtime.GOARCH == \"arm\" && uintptr(unsafe.Pointer(&p[0]))&(unsafe.Alignof(uint32(0))-1) == 0 {\ncould we test for little-endian here?\n\nas there are big-endian ARM variants.",
			"disapproval": false,
			"date": "2013-02-07 19:11:49.385360",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go\nFile src/pkg/crypto/md5/md5block.go (right):\n\nhttps://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go#newcode9\nsrc/pkg/crypto/md5/md5block.go:9: x86 := runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"386\"\nCan these variables be set in an init() to avoid evaluating them for every block?",
			"disapproval": false,
			"date": "2013-02-07 20:04:48.913690",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks for the suggestions.\n\nhttps://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go\nFile src/pkg/crypto/md5/md5block.go (right):\n\nhttps://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go#newcode9\nsrc/pkg/crypto/md5/md5block.go:9: x86 := runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"386\"\nOn 2013/02/07 20:04:48, agl1 wrote:\n> Can these variables be set in an init() to avoid evaluating them for every\n> block?\n\nDone.\n\nhttps://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go#newcode11\nsrc/pkg/crypto/md5/md5block.go:11: littleEndian := *(*uint32)(unsafe.Pointer(&x[0])) == 0x04030201\nOn 2013/02/07 20:12:15, minux wrote:\n> this still assumes [4]byte{} is 4-byte aligned.\n> \n> i think this is safer:\n> x := uint32(0x04030201)\n> y := [4]byte{0x1, 0x2, 0x3, 0x4}\n> littleEndian := *(*[4]byte)(unsafe.Pointer(&x)) == y;\n> \n> yeah, i agree we'd better put it in an init() block.\n\nDone.\n\nhttps://codereview.appspot.com/7305059/diff/4001/src/pkg/crypto/md5/md5block.go#newcode22\nsrc/pkg/crypto/md5/md5block.go:22: if x86 {\nOn 2013/02/07 20:12:15, minux wrote:\n> x86 should be const instead of a variable.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-07 20:41:46.454840",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nFair enough, if we're going to do this sort of horrible thing let's do it right.",
			"disapproval": false,
			"date": "2013-02-07 20:01:20.353000",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 7305059: crypto/md5: fix for big-endian processors",
	"created": "2013-02-07 19:07:03.075300",
	"patchsets": [
		1,
		4001,
		7001,
		6003
	],
	"modified": "2013-02-07 21:32:00.998880",
	"closed": true,
	"issue": 7305059
}