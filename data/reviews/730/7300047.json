{
	"description": "syscall, net: Fix unix socket autobind on Linux.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"mikioh.mikioh@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2013/02/05 18:55:35, iant wrote:\n> https://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go\n> File src/pkg/net/linux_test.go (right):\n> \n> https://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode1\n> src/pkg/net/linux_test.go:1: // Copyright 2013 The Go Authors.  All rights\n> reserved.\n> I don't think \"linux_test.go\" is a good name for this test.  How about\n> autobind_test.go?\n\nDone.\n \n> https://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode17\n> src/pkg/net/linux_test.go:17: t.Errorf(\"ListenUnixgram failed: %v\", err)\n> s/Errorf/Fatalf/\n\nDone.\n\n> https://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode21\n> src/pkg/net/linux_test.go:21: if len(s) != 6 {\n> I'm not sure I see the point of testing the name like this.  The code will work\n> fine if the name has a different length or a different format.  I think the only\n> important point is that the length > 1 and it starts with '@'.\n\nThe manual page explicitly says:\n\n\"The address consists of a null byte followed by 5 bytes in the character set [0-9a-f].\"\n\nso I figured I'd test for that. I can drop it if you prefer. If you decide we should keep it, should these be Fatalf or Errorf?\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-02-05 19:29:50.697490",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-06 14:44:25.442250",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go\nFile src/pkg/net/linux_test.go (right):\n\nhttps://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode1\nsrc/pkg/net/linux_test.go:1: // Copyright 2013 The Go Authors.  All rights reserved.\nI don't think \"linux_test.go\" is a good name for this test.  How about autobind_test.go?\n\nhttps://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode17\nsrc/pkg/net/linux_test.go:17: t.Errorf(\"ListenUnixgram failed: %v\", err)\ns/Errorf/Fatalf/\n\nhttps://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode21\nsrc/pkg/net/linux_test.go:21: if len(s) != 6 {\nI'm not sure I see the point of testing the name like this.  The code will work fine if the name has a different length or a different format.  I think the only important point is that the length > 1 and it starts with '@'.",
			"disapproval": false,
			"date": "2013-02-05 18:55:35.921730",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Howdy\r\n\r\nOn Tue, Feb 5, 2013 at 10:28 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> On Wed, Feb 6, 2013 at 4:49 AM,  <iant@golang.org> wrote:\r\n>> What does seem useful, on the other hand, would be trying to connect to\r\n>> that socket using the name we get back.  Want to extend the test to do\r\n>> that?\r\n> I agree with Ian.\r\n\r\nWill do.\r\n\r\n> Also we already have unix_test.go, please use it.\r\n\r\nunix_test.go is currently:\r\n\r\n// +build !plan9,!windows\r\n\r\nI poked around, as far as I can tell this autobind business might be\r\nLinux-only. Do you have other info?\r\n\r\nCheers\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2013-02-05 23:17:39.604670",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-06 14:45:47.024600",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=59fb68816436 ***\n\nsyscall, net: Fix unix socket autobind on Linux.\n\nR=rsc, iant, mikioh.mikioh\nCC=golang-dev\nhttps://codereview.appspot.com/7300047\n\nCommitter: Ian Lance Taylor <iant@golang.org>",
			"disapproval": false,
			"date": "2013-02-06 14:46:05.525140",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-05 18:45:32.451070",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good, a few nits\n\nhttps://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go\nFile src/pkg/net/unix_test.go (right):\n\nhttps://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go#newcode132\nsrc/pkg/net/unix_test.go:132: l, err := ListenUnixgram(\"unixgram\", laddr)\nI'd prefer c instead of l, because it returns a Conn variable.\nAlso ln might be better than l for Listener variables. (1 or l ?)\n\nhttps://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go#newcode150\nsrc/pkg/net/unix_test.go:150: t.Fatalf(\"Dial failed: %v\", err)\ns/Dial/DialUnix/\n\nhttps://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go#newcode155\nsrc/pkg/net/unix_test.go:155: if *autoAddr != *remoteAddr {\nreflect.DeepEqual?",
			"disapproval": false,
			"date": "2013-02-06 11:17:33.483180",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 6, 2013 at 4:49 AM,  <iant@golang.org> wrote:\r\n\r\n> What does seem useful, on the other hand, would be trying to connect to\r\n> that socket using the name we get back.  Want to extend the test to do\r\n> that?\r\n\r\nI agree with Ian.\r\nAlso we already have unix_test.go, please use it.\r\n",
			"disapproval": false,
			"date": "2013-02-05 20:28:23.341100",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/05 19:29:50, albert.strasheim wrote:\n> https://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode21\n> > src/pkg/net/linux_test.go:21: if len(s) != 6 {\n> > I'm not sure I see the point of testing the name like this.  The code will\n> work\n> > fine if the name has a different length or a different format.  I think the\n> only\n> > important point is that the length > 1 and it starts with '@'.\n> \n> The manual page explicitly says:\n> \n> \"The address consists of a null byte followed by 5 bytes in the character set\n> [0-9a-f].\"\n> \n> so I figured I'd test for that. I can drop it if you prefer. If you decide we\n> should keep it, should these be Fatalf or Errorf?\n\nWe're not writing a kernel test here.  We're writing a Go test.  My opinion is that we test what matters for Go programs.  And it seems to me that what matters for Go programs is that they can autobind a unix domain socket, and get back a string that they can use to then connect to that socket.  The details of the string really don't matter for a typical Go program.  So testing the details doesn't seem useful.\n\nWhat does seem useful, on the other hand, would be trying to connect to that socket using the name we get back.  Want to extend the test to do that?\n\nAs far as Errorf vs. Fatalf, the only question is whether the test can continue to run.  If creating the socket fails, the rest of the test will simply crash, so better to use Fatalf.",
			"disapproval": false,
			"date": "2013-02-05 19:49:00.098090",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Albert,\n\n> I poked around, as far as I can tell this autobind business might be\n> Linux-only. Do you have other info?\n\nswitch runtime.GOOS {\ncase \"linux\"*\ndefault:\n   t.Skipf(*...\")\n}",
			"disapproval": false,
			"date": "2013-02-05 23:49:53.569490",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2013/02/05 23:49:53, mikio wrote:\n> switch runtime.GOOS {\n> case \"linux\"*\n> default:\n>    t.Skipf(*...\")\n> }\n\ndid it with an if",
			"disapproval": false,
			"date": "2013-02-06 07:27:00.697390",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2013/02/06 11:17:33, mikio wrote:\n> looks good, a few nits\n> \n> https://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go\n> File src/pkg/net/unix_test.go (right):\n> \n> https://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go#newcode132\n> src/pkg/net/unix_test.go:132: l, err := ListenUnixgram(\"unixgram\", laddr)\n> I'd prefer c instead of l, because it returns a Conn variable.\n> Also ln might be better than l for Listener variables. (1 or l ?)\n\nmade it c1 and c2.\n\n> https://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go#newcode150\n> src/pkg/net/unix_test.go:150: t.Fatalf(\"Dial failed: %v\", err)\n> s/Dial/DialUnix/\n\nfixed.\n \n> https://codereview.appspot.com/7300047/diff/5004/src/pkg/net/unix_test.go#newcode155\n> src/pkg/net/unix_test.go:155: if *autoAddr != *remoteAddr {\n> reflect.DeepEqual?\n\nfixed.",
			"disapproval": false,
			"date": "2013-02-06 14:18:07.320680",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2013/02/05 19:49:00, iant wrote:\n> On 2013/02/05 19:29:50, albert.strasheim wrote:\n> >\n> https://codereview.appspot.com/7300047/diff/3003/src/pkg/net/linux_test.go#newcode21\n> > > src/pkg/net/linux_test.go:21: if len(s) != 6 {\n> > > I'm not sure I see the point of testing the name like this.  The code will\n> > work\n> > > fine if the name has a different length or a different format.  I think the\n> > only\n> > > important point is that the length > 1 and it starts with '@'.\n> > The manual page explicitly says:\n> > \"The address consists of a null byte followed by 5 bytes in the character set\n> > [0-9a-f].\"\n> > so I figured I'd test for that. I can drop it if you prefer. If you decide we\n> > should keep it, should these be Fatalf or Errorf?\n> We're not writing a kernel test here.  We're writing a Go test.  My opinion is\n> that we test what matters for Go programs.  And it seems to me that what matters\n> for Go programs is that they can autobind a unix domain socket, and get back a\n> string that they can use to then connect to that socket.  The details of the\n> string really don't matter for a typical Go program.  So testing the details\n> doesn't seem useful.\n\nCool. Checking now for that length is at least 2 bytes.\n\n> What does seem useful, on the other hand, would be trying to connect to that\n> socket using the name we get back.  Want to extend the test to do that?\n\nAdded a connect test.\n \n> As far as Errorf vs. Fatalf, the only question is whether the test can continue\n> to run.  If creating the socket fails, the rest of the test will simply crash,\n> so better to use Fatalf.\n\nFatalf all the way.\n\nThe test is still in autobind_test.go because unix_test.go is for all the Unixen and I'm pretty sure this stuff is Linux only.\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2013-02-05 23:43:58.394860",
			"approval": false
		}
	],
	"owner_email": "fullung@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "albert.strasheim",
	"subject": "code review 7300047: syscall, net: Fix unix socket autobind on Linux.",
	"created": "2013-02-05 18:39:59.083130",
	"patchsets": [
		1,
		2001,
		5001,
		3003,
		4008,
		1002,
		5004,
		7003
	],
	"modified": "2013-03-30 16:30:00.092590",
	"closed": true,
	"issue": 7300047
}