{
	"description": "exp/template/html: tolerate '/' ambiguity in JS when it doesn't matter.\n\nOften, division/regexp ambiguity doesn't matter in JS because the next\ntoken is not a slash.\n\nFor example, in\n\n  <script>var global{{if .InitVal}} = {{.InitVal}}{{end}}</script>\n\nWhen there is an initial value, the {{if}} ends with jsCtxDivOp\nsince a '/' following {{.InitVal}} would be a division operator.\nWhen there is none, the empty {{else}} branch ends with jsCtxRegexp\nsince a '/' would start a regular expression.  A '/' could result\nin a valid program if it were on a new line to allow semicolon\ninsertion to terminate the VarDeclaration.\n\nThere is no '/' though, so we can ignore the ambiguity.\n\nThere are cases where a missing semi can result in ambiguity that\nwe should report.\n\n  <script>\n  {{if .X}}var x = {{.X}}{{end}}\n  /...{{.Y}}\n  </script>\n\nwhere ... could be /foo/.test(bar) or /divisor.  Disambiguating in\nthis case is hard and is required to sanitize {{.Y}}.\n\nNote, that in the case where there is a '/' in the script tail but it\nis not followed by any interpolation, we already don't care.  So we\nare already tolerant of\n\n<script>{{if .X}}var x = {{.X}}{{end}}/a-bunch-of-text</script>\n\nbecause tJS checks for </script> before looking in /a-bunch-of-text.\n\nThis CL\n- Adds a jsCtx value: jsCtxUnknown\n- Changes joinContext to join contexts that only differ by jsCtx.\n- Changes tJS to return an error when a '/' is seen in jsCtxUnknown.\n- Adds tests for both the happy and sad cases.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-12 21:36:34.334355",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/4956077/diff/6001/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/4956077/diff/6001/src/pkg/exp/template/html/escape_test.go#newcode491\nsrc/pkg/exp/template/html/escape_test.go:491: // It is ambiguous whether 1.5 should be 1\\.5 or 1.5.\nHey, nice party trick.",
			"disapproval": false,
			"date": "2011-09-12 23:29:20.978423",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1e1f4e543a20 ***\n\nexp/template/html: tolerate '/' ambiguity in JS when it doesn't matter.\n\nOften, division/regexp ambiguity doesn't matter in JS because the next\ntoken is not a slash.\n\nFor example, in\n\n  <script>var global{{if .InitVal}} = {{.InitVal}}{{end}}</script>\n\nWhen there is an initial value, the {{if}} ends with jsCtxDivOp\nsince a '/' following {{.InitVal}} would be a division operator.\nWhen there is none, the empty {{else}} branch ends with jsCtxRegexp\nsince a '/' would start a regular expression.  A '/' could result\nin a valid program if it were on a new line to allow semicolon\ninsertion to terminate the VarDeclaration.\n\nThere is no '/' though, so we can ignore the ambiguity.\n\nThere are cases where a missing semi can result in ambiguity that\nwe should report.\n\n  <script>\n  {{if .X}}var x = {{.X}}{{end}}\n  /...{{.Y}}\n  </script>\n\nwhere ... could be /foo/.test(bar) or /divisor.  Disambiguating in\nthis case is hard and is required to sanitize {{.Y}}.\n\nNote, that in the case where there is a '/' in the script tail but it\nis not followed by any interpolation, we already don't care.  So we\nare already tolerant of\n\n<script>{{if .X}}var x = {{.X}}{{end}}/a-bunch-of-text</script>\n\nbecause tJS checks for </script> before looking in /a-bunch-of-text.\n\nThis CL\n- Adds a jsCtx value: jsCtxUnknown\n- Changes joinContext to join contexts that only differ by jsCtx.\n- Changes tJS to return an error when a '/' is seen in jsCtxUnknown.\n- Adds tests for both the happy and sad cases.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/4956077",
			"disapproval": false,
			"date": "2011-09-12 23:37:06.885229",
			"approval": false
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 4956077: exp/template/html: tolerate '/' ambiguity in JS when it...",
	"created": "2011-09-12 21:30:33.268734",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		4003,
		12001
	],
	"modified": "2011-09-12 23:37:07.834461",
	"closed": true,
	"issue": 4956077
}