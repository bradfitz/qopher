{
	"description": "path/filepath: make UNC file names work\n\nFixes issue 2201",
	"cc": [
		"golang-dev@googlecode.com",
		"r@google.com",
		"rsc@golang.org",
		"alex.brainman@gmail.com",
		"robert.hencke@gmail.com",
		"jp@webmaster.ms",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I am concerned about the precedent set by\nputting windows-specific function names\nin the filepath package.  We definitely want\nthe packages to have a consistent API\nacross all platforms, but we also don't want\nthem to have every possible function from\nevery possible operating system.\n\nWindows paths are certainly messy.\nIs it enough to just have IsAbs return\ntrue for UNC paths and drop IsUNC?\n",
			"disapproval": false,
			"date": "2011-08-31 21:49:59.205957",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/8003/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/8003/src/pkg/path/filepath/path_test.go#newcode5\nsrc/pkg/path/filepath/path_test.go:5: package filepath\nNo, isUNC is needed.\n\nVolumeName(`c:/foo`) should return `c:`.\nVolumeName(`\\\\host\\share\\foo`) should return `\\\\host\\server`.\n\nThus, isUNC whether the path is formated as \\\\host\\share.\n\n\n\nOn 2011/09/06 07:07:18, brainman wrote:\n> Please, do not change package. Do not worry about testing isUNC, I don't think\n> it is important. Test exported functions instead. Add UNC paths samples to\n> TestClean, TestJoin and TestIsAbs. Add UNC and \"drive letter\" samples to\n> TestSplit, we don't test these, but we should. Add new test for VolumeName, we\n> should test it too.\n> \n> I think, you should create tests first. Once you run these, you will see what\n> needs to change to make them work. You might find you do not need isUNC at all.\n> \n> Feel free to show us your tests first. I am not 100% sure, what these tests will\n> look like. We can all discuss them before you try and implement them.\n\nMost of test was already exists in TestUNC, however you are right.\n\nI splited the tests to TestClean, TestJoin, TestAbs... etc.",
			"disapproval": false,
			"date": "2011-09-06 07:59:19.092848",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ah, very strange english.\n\nisUNC is used for whether \"/\" is needed at leader of the path for UNC.\nAnd it can't check that the path is UNC with VolumeName(path) is empty or \nnot.\n\nOn Tuesday, September 6, 2011 4:59:19 PM UTC+9, mattn wrote:\n>\n>\n>\n> http://codereview.appspot.com/4950051/diff/8003/src/pkg/path/filepath/path_test.go\n> File src/pkg/path/filepath/path_test.go (right):\n>\n>\n> http://codereview.appspot.com/4950051/diff/8003/src/pkg/path/filepath/path_test.go#newcode5\n> src/pkg/path/filepath/path_test.go:5: package filepath\n> No, isUNC is needed.\n>\n> VolumeName(`c:/foo`) should return `c:`.\n> VolumeName(`\\\\host\\share\\foo`) should return `\\\\host\\server`.\n>\n> Thus, isUNC whether the path is formated as \\\\host\\share.\n>\n> On 2011/09/06 07:07:18, brainman wrote:\n> > Please, do not change package. Do not worry about testing isUNC, I\n> don't think\n> > it is important. Test exported functions instead. Add UNC paths\n> samples to\n> > TestClean, TestJoin and TestIsAbs. Add UNC and \"drive letter\" samples\n> to\n> > TestSplit, we don't test these, but we should. Add new test for\n> VolumeName, we\n> > should test it too.\n>\n> > I think, you should create tests first. Once you run these, you will\n> see what\n> > needs to change to make them work. You might find you do not need\n> isUNC at all.\n>\n> > Feel free to show us your tests first. I am not 100% sure, what these\n> tests will\n> > look like. We can all discuss them before you try and implement them.\n>\n> Most of test was already exists in TestUNC, however you are right.\n>\n> I splited the tests to TestClean, TestJoin, TestAbs... etc.\n>\n> http://codereview.appspot.com/4950051/\n>\n>",
			"disapproval": false,
			"date": "2011-09-06 08:29:24.960060",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> \n> //a/b/../c is not UNC. Then it should be /a/c.\n\nWhy?\n\nC:\\>dir \\\\i\\c$\\..\\Windows | head\n Volume in drive \\\\i\\c$ has no label.\n Volume Serial Number is CC70-3998\n\n Directory of \\\\i\\c$\\Windows\n\n09/06/2011  10:15 PM    <DIR>          .\n09/06/2011  10:15 PM    <DIR>          ..\n05/06/2011  12:06 AM                 3 7Loader.TAG\n07/14/2009  09:32 AM    <DIR>          addins\n07/14/2009  07:20 AM    <DIR>          AppCompat",
			"disapproval": false,
			"date": "2011-09-08 07:42:35.541530",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=bcd8c31b8a8d ***\n\npath/filepath: make UNC file names work\n\nFixes issue 2201\n\nR=golang-dev, r, rsc, alex.brainman, robert.hencke, jp\nCC=golang-dev\nhttp://codereview.appspot.com/4950051\n\nCommitter: Alex Brainman <alex.brainman@gmail.com>",
			"disapproval": false,
			"date": "2011-09-09 07:38:38.848455",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 06:07:25, mattn wrote:\n> I can't read/understand the english well.\n\nThat makes 2 of us :-)\nI think we understand each other fine.\n\nI am not certain what the rules about UNC should be. Just go ahead with what you think is right, and we will correct you.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 06:29:01.047280",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com, r@google.com, rsc@golang.org, alex.brainman@gmail.com, robert.hencke@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-06 00:41:14.730463",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "c:\\..\\c     equals to  c:\\c\n\\\\a\\b\\..\\c  equals to  \\\\a\\b\\c\n\njust try \"dir c:\\..\\c\"\nit does not fail\n\nOn 2011/09/08 06:32:25, mattn wrote:\n> http://codereview.appspot.com/4950051/diff/9009/src/pkg/path/filepath/path_test.go\n> File src/pkg/path/filepath/path_test.go (right):\n> \n> http://codereview.appspot.com/4950051/diff/9009/src/pkg/path/filepath/path_test.go#newcode80\n> src/pkg/path/filepath/path_test.go:80: {`//host/share/foo/../baz`,\n> `\\\\host\\share\\baz`},\n> \"\\\\\\\\a\\\\b\\\\\" in \"\\\\\\\\a\\\\b\\\\..\\\\c\" is meaning volume name.\n> so this is meaning\n> \n> c:\\..\\c\n> \n> I think this should be failed.\n> \n> On 2011/09/08 06:25:41, brainman wrote:\n> > I have added this extra test\n> > {`\\\\a\\b\\..\\c`, `\\a\\c`},\n> > but it fails with\n> > Clean(\"\\\\\\\\a\\\\b\\\\..\\\\c\") = \"\\\\\\\\a\\\\c\", want \"\\\\a\\\\c\"\n> > \n> > Don't you think it should work?",
			"disapproval": false,
			"date": "2011-09-08 07:40:44.229925",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 04:47:11, mattn wrote:\n> \n> ... Is this ok?\n> \n\nI don't know what the right treatment here is. But I think anything less then \\\\server\\share\\ (I mean \\\\, \\\\server, \\\\server\\share) should be treated as file or directory names without any UNC prefix. Therefore, none of these \\\\, \\\\server, \\\\server\\share, should have \\\\ at the front after they are cleaned, but \\ instead.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 04:55:59.081869",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Great, Thanks!\n\n",
			"disapproval": false,
			"date": "2011-09-03 12:42:06.499839",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_plan9.go\nFile src/pkg/path/filepath/path_plan9.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_plan9.go#newcode10\nsrc/pkg/path/filepath/path_plan9.go:10: func isUNC(path string) (b bool) {\nOn 2011/09/09 07:22:37, brainman wrote:\n> Revert this.\n\nDone.\n\nhttp://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_unix.go\nFile src/pkg/path/filepath/path_unix.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_unix.go#newcode10\nsrc/pkg/path/filepath/path_unix.go:10: func isUNC(path string) (b bool) {\nOn 2011/09/09 07:22:37, brainman wrote:\n> Revert this.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-09 07:35:28.075791",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-08-30 06:33:31.403250",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/5001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/5001/src/pkg/path/filepath/path.go#newcode61\nsrc/pkg/path/filepath/path.go:61: vol = string(Separator)\nI'll add comment \"workaround\" in this part .",
			"disapproval": false,
			"date": "2011-08-30 06:37:26.743392",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Can a UNC path use \"/\" as well as \"\\\"? I thought it could.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-08-30 07:23:00.528284",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "os.IsPathSeparator is checking \"\\\" or \"/\" in os/path_windows.go\n\n",
			"disapproval": false,
			"date": "2011-08-31 05:00:24.908252",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 06:35:42, mattn wrote:\n> \n> I uploaded new changes.\n> \n\nBut you didn't change VolumeName.\n\nI would expect filepath.VolumeName(`\\\\server\\share\\a\\b\\c`) to return `\\\\server\\share`. Wouldn't you?\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 06:39:34.430968",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Yes, for example, type in your command prompt\n\nC:\\>dir \"//host/share/\"\n\nNote to add quote to avoid that dir treat \"/\" as leading of option.\n\nOn Tuesday, August 30, 2011 4:22:50 PM UTC+9, r wrote:\n>\n> Can a UNC path use \"/\" as well as \"\\\"? I thought it could.\n>\n> -rob\n>\n>",
			"disapproval": false,
			"date": "2011-08-30 07:27:44.475439",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I can't read/understand the english well.\nPlease show me as test case.\nI don't mind that is not code.\n\nSorry...\n\n",
			"disapproval": false,
			"date": "2011-09-02 06:07:25.041978",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM after you revert all unnecessary changes.\n\nhttp://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_plan9.go\nFile src/pkg/path/filepath/path_plan9.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_plan9.go#newcode10\nsrc/pkg/path/filepath/path_plan9.go:10: func isUNC(path string) (b bool) {\nRevert this.\n\nhttp://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_unix.go\nFile src/pkg/path/filepath/path_unix.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/5009/src/pkg/path/filepath/path_unix.go#newcode10\nsrc/pkg/path/filepath/path_unix.go:10: func isUNC(path string) (b bool) {\nRevert this.",
			"disapproval": false,
			"date": "2011-09-09 07:22:37.088425",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "But I don't see code for \"/\" in your implementation of IsUNC.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-08-31 04:53:11.014624",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "oops. plz wait.",
			"disapproval": false,
			"date": "2011-09-02 06:40:59.291301",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This is putting a Windows concept and name into the general API, which doesn't seem necessary. Isn't it sufficient to embed the concept in the Windows implementation of IsAbs?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-08-31 21:49:56.858183",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think we are getting somewhere!\n\nPlease, change CL description to something simpler, like:\n\n>>>\npath/filepath: make UNC file names work\n\nFixes issue 2201\n<<<\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go#newcode45\nsrc/pkg/path/filepath/path.go:45: if unc {\nLets get rid of isUNC alltogether. Just do\n\nif len(vol) > 0 && vol[1] != ':' {\n  ...\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go\nFile src/pkg/path/filepath/path_windows.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode21\nsrc/pkg/path/filepath/path_windows.go:21: }\nDo not need these lines. Your tests still pass.\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode33\nsrc/pkg/path/filepath/path_windows.go:33: func uncVolumeName(path string) string {\nI don't think you need a separate function for UNC, just put it all inside VolumeName with a small comment.\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode35\nsrc/pkg/path/filepath/path_windows.go:35: os.IsPathSeparator(path[0]) && os.IsPathSeparator(path[1]) &&\nI don't think you need os package here. Just create:\n\nfunc isSlash(c uint8) bool {\n  return c == '\\\\' || c == '/'\n}\n\nand use it everywhere. Also, please replace\n\nreturn path[0] == '/' || path[0] == '\\\\'\n\nin IsAbs then. Make it all the same.\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode70\nsrc/pkg/path/filepath/path_windows.go:70: unc := uncVolumeName(path)\nPlease, move this \"is it UNC\" code after \"drive letter\" code. uncVolumeName code will take longer to run, lets try \"drive letter\" scenario first in the hope that it will succeed and we won't need to check for UNC paths.",
			"disapproval": false,
			"date": "2011-09-09 06:20:59.492932",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I renamed IsUNC to isUNC. and uploaded.\n\n> Windows paths are certainly messy.\n> Is it enough to just have IsAbs return\n> true for UNC paths and drop IsUNC?\n\nisUNC is used from Clean. Clean is normalizing paths like //foo/bar/baz to \n\\foo\\bar\\baz\nAnd if isUNC return true, Clean add \\ to the top: \\\\foo\\bar\\baz\n\nHowever, ///foo/bar/baz, //foo/bar, //foo/ and //foo must not be treated as \nUNC paths.\nisUNC is used for checking this.\n\nThanks.\n- mattn\n\n",
			"disapproval": false,
			"date": "2011-08-31 23:59:43.097107",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think you need to fix filepath.Split and filepath.VolumeName as well:\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"path/filepath\"\n)\n\nfunc testIt(path string) {\n\tfmt.Printf(\"\\n:path=%s\\n\", path)\n\td, f := filepath.Split(path)\n\tfmt.Printf(\"filepath.Split(%s) = (dir=%s file=%s)\\n\", path, d, f)\n\tfmt.Printf(\"filepath.VolumeName(%s) = (vol=%s)\\n\", path, filepath.VolumeName(path))\n}\n\nfunc main() {\n\ttestIt(`\\a\\b\\c`)\n\ttestIt(`c:\\a\\b\\c`)\n\ttestIt(`\\\\server\\share\\a\\b\\c`)\n\ttestIt(`\\\\server\\share\\a`)\n\ttestIt(`\\\\server\\share\\`)\n\ttestIt(`\\\\server\\share`)\n\ttestIt(`\\\\server\\`)\n\ttestIt(`\\\\server`)\n}\n\nprints\n\nC:\\>\\\\sos\\pub\\test\n\n:path=\\a\\b\\c\nfilepath.Split(\\a\\b\\c) = (dir=\\a\\b\\ file=c)\nfilepath.VolumeName(\\a\\b\\c) = (vol=)\n\n:path=c:\\a\\b\\c\nfilepath.Split(c:\\a\\b\\c) = (dir=c:\\a\\b\\ file=c)\nfilepath.VolumeName(c:\\a\\b\\c) = (vol=c:)\n\n:path=\\\\server\\share\\a\\b\\c\nfilepath.Split(\\\\server\\share\\a\\b\\c) = (dir=\\\\server\\share\\a\\b\\ file=c)\nfilepath.VolumeName(\\\\server\\share\\a\\b\\c) = (vol=)\n\n:path=\\\\server\\share\\a\nfilepath.Split(\\\\server\\share\\a) = (dir=\\\\server\\share\\ file=a)\nfilepath.VolumeName(\\\\server\\share\\a) = (vol=)\n\n:path=\\\\server\\share\\\nfilepath.Split(\\\\server\\share\\) = (dir=\\\\server\\share\\ file=)\nfilepath.VolumeName(\\\\server\\share\\) = (vol=)\n\n:path=\\\\server\\share\nfilepath.Split(\\\\server\\share) = (dir=\\\\server\\ file=share)\nfilepath.VolumeName(\\\\server\\share) = (vol=)\n\n:path=\\\\server\\\nfilepath.Split(\\\\server\\) = (dir=\\\\server\\ file=)\nfilepath.VolumeName(\\\\server\\) = (vol=)\n\n:path=\\\\server\nfilepath.Split(\\\\server) = (dir=\\\\ file=server)\nfilepath.VolumeName(\\\\server) = (vol=)\n\nC:\\>\n\nI would expect filepath.VolumeName(`\\\\server\\share\\a\\b\\c`) to return `\\\\server\\share`. Wouldn't you?\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 02:22:30.097722",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 06:46:00, mattn wrote:\n> Have a good time! :)\n\nSame to you.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 06:46:48.445497",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/9009/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/9009/src/pkg/path/filepath/path_test.go#newcode80\nsrc/pkg/path/filepath/path_test.go:80: {`//host/share/foo/../baz`, `\\\\host\\share\\baz`},\nI have added this extra test\n{`\\\\a\\b\\..\\c`, `\\a\\c`},\nbut it fails with\nClean(\"\\\\\\\\a\\\\b\\\\..\\\\c\") = \"\\\\\\\\a\\\\c\", want \"\\\\a\\\\c\"\n\nDon't you think it should work?",
			"disapproval": false,
			"date": "2011-09-08 06:25:41.780697",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/08 07:18:32, brainman wrote:\n> What about //a/b/../c? I think this could be interpreted as file or directory\n> /a/c.\n\nWindows can use slash for UNC paths like //a/b . for example try following.\n\nC:\\>dir \"//host/service\"\n\nNote to add quote to avoid that slash is treated as leader of options like \"dir /s\".\n\n> Clean does not fail. There is no error to return.\n> \n> I am not sure what to do.\n\nYes, not fail. I mean that tests you added should be failed. \nIf IsUNC(path) return false, Clean() treat the path as absolute path with leading slash.\n\n//a/b/../c is not UNC. Then it should be /a/c.",
			"disapproval": false,
			"date": "2011-09-08 07:31:40.156782",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "There are some invalids: \\\\i\\..\\c$ and \\\\i\\..\\i\\c$\nShould they panic or be leaved unchanged ?",
			"disapproval": false,
			"date": "2011-09-08 08:29:02.568483",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go#newcode114\nsrc/pkg/path/filepath/path.go:114: }\nIf path as \"C:\", This part won't be passed.\n\nOn 2011/09/08 08:54:56, jp wrote:\n> It can result in \"C:.\" which is not correct (one of the symlink test cases has\n> such result)\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go#newcode205\nsrc/pkg/path/filepath/path.go:205: i := strings.IndexRune(path, Separator)\nThis part won't be passed on windows. see above.\n\nOn 2011/09/08 08:54:56, jp wrote:\n> Should search for both '/' and '\\\\'\n> http://codereview.appspot.com/4984050/patch/2019/14017",
			"disapproval": false,
			"date": "2011-09-08 09:17:58.781193",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go#newcode45\nsrc/pkg/path/filepath/path.go:45: if unc {\nOn 2011/09/09 06:20:59, brainman wrote:\n> Lets get rid of isUNC alltogether. Just do\n> \n> if len(vol) > 0 && vol[1] != ':' {\n>   ...\n\nDone.\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go\nFile src/pkg/path/filepath/path_windows.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode21\nsrc/pkg/path/filepath/path_windows.go:21: }\nOn 2011/09/09 06:20:59, brainman wrote:\n> Do not need these lines. Your tests still pass.\n\nDone.\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode33\nsrc/pkg/path/filepath/path_windows.go:33: func uncVolumeName(path string) string {\nOn 2011/09/09 06:20:59, brainman wrote:\n> I don't think you need a separate function for UNC, just put it all inside\n> VolumeName with a small comment.\n\nDone.\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode35\nsrc/pkg/path/filepath/path_windows.go:35: os.IsPathSeparator(path[0]) && os.IsPathSeparator(path[1]) &&\nOn 2011/09/09 06:20:59, brainman wrote:\n> I don't think you need os package here. Just create:\n> \n> func isSlash(c uint8) bool {\n>   return c == '\\\\' || c == '/'\n> }\n> \n> and use it everywhere. Also, please replace\n> \n> return path[0] == '/' || path[0] == '\\\\'\n> \n> in IsAbs then. Make it all the same.\n\nDone.\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path_windows.go#newcode70\nsrc/pkg/path/filepath/path_windows.go:70: unc := uncVolumeName(path)\nOn 2011/09/09 06:20:59, brainman wrote:\n> Please, move this \"is it UNC\" code after \"drive letter\" code. uncVolumeName code\n> will take longer to run, lets try \"drive letter\" scenario first in the hope that\n> it will succeed and we won't need to check for UNC paths.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-09 06:41:17.370375",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "ok, what a point of fixing about Split() ?\n\n",
			"disapproval": false,
			"date": "2011-09-02 04:33:18.600618",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 04:33:18, mattn wrote:\n> ok, what a point of fixing about Split() ?\n> \n\nfilepath.Split(\\\\server\\share\\) = (dir=\\\\server\\share\\ file=)\nfilepath.Split(\\\\server\\share) = (dir=\\\\server\\ file=share)\nfilepath.Split(\\\\server\\) = (dir=\\\\server\\ file=)\nfilepath.Split(\\\\server) = (dir=\\\\ file=server)\n\nFirst one, I think, is good, but the rest don't look right to me. Perhaps\n\nfilepath.Split(\\\\server\\share) = (dir=\\server\\ file=share)\nfilepath.Split(\\\\server\\) = (dir=\\server\\ file=)\nfilepath.Split(\\\\server) = (dir=\\ file=server)\n\nbut I am not sure if this will cause other problems.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 04:40:09.387799",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ah, my patch don't treat them as UNC\n\nC:\\>dir \\\\foo\nThe filename, directory name, or volume label syntax is incorrect.\n\nC:\\>dir \\\\foo\\\nThe filename, directory name, or volume label syntax is incorrect.\n\nC:\\>dir \\\\foo\\bar\nAccess is denied.\n\nSo, UNC's minimal spec is \\\\foo\\bar.\nMy patch's one is \\\\foo\\bar\\\n\nI'll fix this. Is this ok?\n\n",
			"disapproval": false,
			"date": "2011-09-02 04:47:11.151641",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 06:40:59, mattn wrote:\n> oops. plz wait.\n\nSorry, no, it is beer time. Let's leave it till next week. Please.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 06:43:03.868056",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/9009/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/9009/src/pkg/path/filepath/path_test.go#newcode80\nsrc/pkg/path/filepath/path_test.go:80: {`//host/share/foo/../baz`, `\\\\host\\share\\baz`},\n\"\\\\\\\\a\\\\b\\\\\" in \"\\\\\\\\a\\\\b\\\\..\\\\c\" is meaning volume name.\nso this is meaning\n\nc:\\..\\c\n\nI think this should be failed.\n\nOn 2011/09/08 06:25:41, brainman wrote:\n> I have added this extra test\n> {`\\\\a\\b\\..\\c`, `\\a\\c`},\n> but it fails with\n> Clean(\"\\\\\\\\a\\\\b\\\\..\\\\c\") = \"\\\\\\\\a\\\\c\", want \"\\\\a\\\\c\"\n> \n> Don't you think it should work?",
			"disapproval": false,
			"date": "2011-09-08 06:32:25.854839",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ok, I'm only thinking that go keep the spec of UNC.\n\nBut I can't find the spec from MSDN.\nSo far as checking of output from 'dir', it seems\n\n\\\\share => not UNC\n\\\\share\\ => not UNC\n\\\\share\\a => UNC\n\nI uploaded new changes.\n\n",
			"disapproval": false,
			"date": "2011-09-02 06:35:42.262833",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Have a good time! :)",
			"disapproval": false,
			"date": "2011-09-02 06:46:00.809138",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 06:35:42, mattn wrote:\n> Ok, I'm only thinking that go keep the spec of UNC.\n> \n> But I can't find the spec from MSDN.\n> So far as checking of output from 'dir', it seems\n> \n> \\\\share => not UNC\n> \\\\share\\ => not UNC\n> \\\\share\\a => UNC\n> \n> I uploaded new changes.\n> \n\nmattn, does this help?\nhttp://msdn.microsoft.com/en-us/library/62e862f4-2a51-452e-8eeb-dc4ff5ee33cc(PROT.10).aspx",
			"disapproval": false,
			"date": "2011-09-02 13:49:38.145493",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/8003/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/8003/src/pkg/path/filepath/path_test.go#newcode5\nsrc/pkg/path/filepath/path_test.go:5: package filepath\nPlease, do not change package. Do not worry about testing isUNC, I don't think it is important. Test exported functions instead. Add UNC paths samples to TestClean, TestJoin and TestIsAbs. Add UNC and \"drive letter\" samples to TestSplit, we don't test these, but we should. Add new test for VolumeName, we should test it too.\n\nI think, you should create tests first. Once you run these, you will see what needs to change to make them work. You might find you do not need isUNC at all.\n\nFeel free to show us your tests first. I am not 100% sure, what these tests will look like. We can all discuss them before you try and implement them.",
			"disapproval": false,
			"date": "2011-09-06 07:07:18.699343",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/08 06:32:25, mattn wrote:\n> \"\\\\\\\\a\\\\b\\\\\" in \"\\\\\\\\a\\\\b\\\\..\\\\c\" is meaning volume name.\n\nWhat about //a/b/../c? I think this could be interpreted as file or directory /a/c.\n\n> \n> I think this should be failed.\n> \n\nClean does not fail. There is no error to return.\n\nI am not sure what to do.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-08 07:18:32.150815",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/08 08:29:02, jp wrote:\n> There are some invalids: \\\\i\\..\\c$ and \\\\i\\..\\i\\c$\n> Should they panic or be leaved unchanged ?\n\nFixed it and added test case.\nThanks.",
			"disapproval": false,
			"date": "2011-09-08 08:45:33.201629",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Done.\n\nOn 2011/09/08 07:42:35, jp wrote:\n> > \n> > //a/b/../c is not UNC. Then it should be /a/c.\n> \n> Why?\n> \n> C:\\>dir \\\\i\\c$\\..\\Windows | head\n>  Volume in drive \\\\i\\c$ has no label.\n>  Volume Serial Number is CC70-3998\n> \n>  Directory of \\\\i\\c$\\Windows\n> \n> 09/06/2011  10:15 PM    <DIR>          .\n> 09/06/2011  10:15 PM    <DIR>          ..\n> 05/06/2011  12:06 AM                 3 7Loader.TAG\n> 07/14/2009  09:32 AM    <DIR>          addins\n> 07/14/2009  07:20 AM    <DIR>          AppCompat",
			"disapproval": false,
			"date": "2011-09-08 08:17:55.538508",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com, r@google.com, rsc@golang.org, alex.brainman@gmail.com, robert.hencke@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-08 02:49:03.527359",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2011-09-08 08:18:03.648934",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@google.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"robert.hencke@gmail.com",
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go#newcode114\nsrc/pkg/path/filepath/path.go:114: }\nIt can result in \"C:.\" which is not correct (one of the symlink test cases has such result)\n\nhttp://codereview.appspot.com/4950051/diff/14011/src/pkg/path/filepath/path.go#newcode205\nsrc/pkg/path/filepath/path.go:205: i := strings.IndexRune(path, Separator)\nShould search for both '/' and '\\\\'\nhttp://codereview.appspot.com/4984050/patch/2019/14017",
			"disapproval": false,
			"date": "2011-09-08 08:54:56.321864",
			"approval": false
		}
	],
	"owner_email": "mattn.jp@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mattn",
	"subject": "code review 4950051: path/filepath: filepath.Clean mangles UNC paths on Windows",
	"created": "2011-08-30 06:12:08.676501",
	"patchsets": [
		1,
		2001,
		5001,
		9002,
		18001,
		6006,
		19002,
		3,
		8003,
		22001,
		1003,
		4011,
		22012,
		9009,
		24006,
		14011,
		5009,
		19009
	],
	"modified": "2011-09-09 07:46:23.302471",
	"closed": true,
	"issue": 4950051
}