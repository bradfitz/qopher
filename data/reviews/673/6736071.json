{
	"description": "spec: clarify returns, defer statements, and panics\n\nThis is an attempt at making the interaction between\nthese three constructs clearer. Specifically:\n\n- return statements terminate a function, execute deferred\n  functions, return to the caller, and then execution\n  continues after the call\n\n- panic calls terminate a function, execute deferred\n  functions, return to the caller, and then re-panic\n\n- deferred functions are executed before a function _returns_\n  to its caller\n\nThe hope is that with this change it becomes clear when a\ndeferred function is executed (when a function returns),\nand when it is not (when a program exits).",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-23 22:40:57.517930",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4547\ndoc/go_spec.html:4547: continues with the statement immediately following the call of <code>F</code>.\nExecution continues in a more complex way, because a function call may occur in the middle of an expression.  It might be simpler to omit the final clause starting with \"where execution.\"  I'm not sure offhand how to write it correctly.\n\nhttps://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4617\ndoc/go_spec.html:4617: Regardless of how they are declared, all the result values are initialized to the zero values for their type (\u00a7<a href=\"#The_zero_value\">The zero value</a>) upon entry to the function, and they are set by the \"return\" statement before deferred functions are executed, if any.\nNot that it matters, but this line is quite long.\n\nI think I would put the new subordinate clause in a different sentence.  And maybe make it conditional, as in \"A return statement that returns any values sets the result parameters before any deferred functions are executed.\"\n\nhttps://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4746\ndoc/go_spec.html:4746: function returns, either because the surrrounding function executed a <a href=\"#Return_statements\">return statement</a>,\ns/rrr/rr/",
			"disapproval": false,
			"date": "2012-10-23 23:14:58.202130",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Oct 23, 2012 at 4:31 PM,  <gri@golang.org> wrote:\r\n>\r\n>\r\n> https://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4617\r\n> doc/go_spec.html:4617: Regardless of how they are declared, all the\r\n> result values are initialized to the zero values for their type (\u00a7<a\r\n> href=\"#The_zero_value\">The zero value</a>) upon entry to the function,\r\n> and they are set by the \"return\" statement before deferred functions are\r\n> executed, if any.\r\n> On 2012/10/23 23:14:58, iant wrote:\r\n>>\r\n>> Not that it matters, but this line is quite long.\r\n>\r\n>\r\n>> I think I would put the new subordinate clause in a different\r\n>\r\n> sentence.  And\r\n>>\r\n>> maybe make it conditional, as in \"A return statement that returns any\r\n>\r\n> values\r\n>>\r\n>> sets the result parameters before any deferred functions are\r\n>\r\n> executed.\"\r\n>\r\n> Weird. Not sure how this happened. Fixed.\r\n\r\nI think you did the first part (long line) but not the second.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-10-23 23:38:15.557540",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6736071/diff/16001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6736071/diff/16001/doc/go_spec.html#newcode4618\ndoc/go_spec.html:4618: function. A \"return\" statement that specifies results sets the result parameters before\nOn 2012/10/24 00:08:26, iant wrote:\n> Link to Return_statements section.\n\nWe _are_ in the return statements section.",
			"disapproval": false,
			"date": "2012-10-24 00:10:52.929000",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6736071/diff/16001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6736071/diff/16001/doc/go_spec.html#newcode4618\ndoc/go_spec.html:4618: function. A \"return\" statement that specifies results sets the result parameters before\nLink to Return_statements section.",
			"disapproval": false,
			"date": "2012-10-24 00:08:26.199150",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4547\ndoc/go_spec.html:4547: continues with the statement immediately following the call of <code>F</code>.\nOn 2012/10/23 23:14:58, iant wrote:\n> Execution continues in a more complex way, because a function call may occur in\n> the middle of an expression.  It might be simpler to omit the final clause\n> starting with \"where execution.\"  I'm not sure offhand how to write it\n> correctly.\n\nDone.\n\nhttps://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4617\ndoc/go_spec.html:4617: Regardless of how they are declared, all the result values are initialized to the zero values for their type (\u00a7<a href=\"#The_zero_value\">The zero value</a>) upon entry to the function, and they are set by the \"return\" statement before deferred functions are executed, if any.\nOn 2012/10/23 23:14:58, iant wrote:\n> Not that it matters, but this line is quite long.\n> \n> I think I would put the new subordinate clause in a different sentence.  And\n> maybe make it conditional, as in \"A return statement that returns any values\n> sets the result parameters before any deferred functions are executed.\"\n\nWeird. Not sure how this happened. Fixed.\n\nhttps://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4746\ndoc/go_spec.html:4746: function returns, either because the surrrounding function executed a <a href=\"#Return_statements\">return statement</a>,\nOn 2012/10/23 23:14:58, iant wrote:\n> s/rrr/rr/\n\nDone.",
			"disapproval": false,
			"date": "2012-10-23 23:31:15.777360",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. Done.\r\nPTAL.\r\n- gri\r\n\r\n\r\nOn Tue, Oct 23, 2012 at 4:38 PM, Ian Lance Taylor <iant@google.com> wrote:\r\n\r\n> On Tue, Oct 23, 2012 at 4:31 PM,  <gri@golang.org> wrote:\r\n> >\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6736071/diff/4001/doc/go_spec.html#newcode4617\r\n> > doc/go_spec.html:4617: Regardless of how they are declared, all the\r\n> > result values are initialized to the zero values for their type (\u00a7<a\r\n> > href=\"#The_zero_value\">The zero value</a>) upon entry to the function,\r\n> > and they are set by the \"return\" statement before deferred functions are\r\n> > executed, if any.\r\n> > On 2012/10/23 23:14:58, iant wrote:\r\n> >>\r\n> >> Not that it matters, but this line is quite long.\r\n> >\r\n> >\r\n> >> I think I would put the new subordinate clause in a different\r\n> >\r\n> > sentence.  And\r\n> >>\r\n> >> maybe make it conditional, as in \"A return statement that returns any\r\n> >\r\n> > values\r\n> >>\r\n> >> sets the result parameters before any deferred functions are\r\n> >\r\n> > executed.\"\r\n> >\r\n> > Weird. Not sure how this happened. Fixed.\r\n>\r\n> I think you did the first part (long line) but not the second.\r\n>\r\n> Ian\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-23 23:52:34.890230",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-26 16:28:39.999350",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-11-01 16:25:42.724270",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=632ca9d98436 ***\n\nspec: clarify returns, defer statements, and panics\n\nThis is an attempt at making the interaction between\nthese three constructs clearer. Specifically:\n\n- return statements terminate a function, execute deferred\n  functions, return to the caller, and then execution\n  continues after the call\n\n- panic calls terminate a function, execute deferred\n  functions, return to the caller, and then re-panic\n\n- deferred functions are executed before a function _returns_\n  to its caller\n\nThe hope is that with this change it becomes clear when a\ndeferred function is executed (when a function returns),\nand when it is not (when a program exits).\n\nR=r, rsc, iant, ken, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6736071",
			"disapproval": false,
			"date": "2012-11-01 17:13:50.989580",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6736071: spec: clarify returns, defer statements, and panics",
	"created": "2012-10-23 22:38:28.165860",
	"patchsets": [
		1,
		2001,
		4001,
		9001,
		12001,
		16001,
		19001,
		23001,
		23002,
		20003
	],
	"modified": "2012-11-01 17:13:53.137260",
	"closed": true,
	"issue": 6736071
}