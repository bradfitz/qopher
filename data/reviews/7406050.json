{
	"description": "syscall: fix FD passing on FreeBSD and NetBSD\n\nFixes issue 3348.",
	"cc": [
		"devon.odell@gmail.com",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"mdempsky@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test also passes on NetBSD/amd64 and NetBSD/386.\r\n(I re-imaged my RPi, so I can't test there for now)\r\n\r\nNetBSD/amd64 needs the fix to sockcmsg_unix.go.\r\n",
			"disapproval": false,
			"date": "2013-02-26 16:02:28.733300",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch makes the test pass on OpenBSD/amd64:\r\ndiff -r 512627a9cdb8 src/pkg/syscall/sockcmsg_unix.go\r\n--- a/src/pkg/syscall/sockcmsg_unix.go Mon Feb 25 22:06:58 2013 -0800\r\n+++ b/src/pkg/syscall/sockcmsg_unix.go Wed Feb 27 00:17:55 2013 +0800\r\n@@ -57,7 +57,7 @@\r\n  }\r\n  m := SocketControlMessage{Header: *h, Data:\r\ndbuf[:int(h.Len)-cmsgAlignOf(SizeofCmsghdr)]}\r\n  msgs = append(msgs, m)\r\n- b = b[cmsgAlignOf(int(h.Len)):]\r\n+ b = b[h.Len:]\r\n  }\r\n  return msgs, nil\r\n }\r\n\r\nIt doesn't affect Darwin/amd64, FreeBSD/amd64, NetBSD/amd64 and NetBSD/386.\r\n",
			"disapproval": false,
			"date": "2013-02-26 16:25:38.751510",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/26 21:47:39, dfc wrote:\n> Is anyone able to test on netbsd or openbsd before I commit ?\n\nSure, I'll test on OpenBSD.",
			"disapproval": false,
			"date": "2013-02-26 21:48:35.202560",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hm, still slice bounds out of range on OpenBSD:\n\n=== RUN TestPassFD\n--- PASS: TestPassFD (0.02 seconds)\npanic: runtime error: slice bounds out of range [recovered]\n        panic: runtime error: slice bounds out of range\n\ngoroutine 3 [running]:\ntesting.func\u00b7004()\n        /tmp/go/src/pkg/testing/testing.go:341 +0xbc\nsyscall.ParseSocketControlMessage(0xc200058640, 0x14, 0x20, 0x20, 0xc200058640, ...)\n        /tmp/go/src/pkg/syscall/sockcmsg_unix.go:60 +0x277\nsyscall_test.TestPassFD(0xc200000090)\n        /tmp/go/src/pkg/syscall/passfd_test.go:80 +0xa29\ntesting.tRunner(0xc200000090, 0x61b618)\n        /tmp/go/src/pkg/testing/testing.go:346 +0x8a\ncreated by testing.RunTests\n        /tmp/go/src/pkg/testing/testing.go:426 +0x86b\n\ngoroutine 1 [chan receive]:\ntesting.RunTests(0x56a890, 0x61b618, 0x1, 0x1, 0x1, ...)\n        /tmp/go/src/pkg/testing/testing.go:427 +0x88e\ntesting.Main(0x56a890, 0x61b618, 0x1, 0x1, 0x624b28, ...)\n        /tmp/go/src/pkg/testing/testing.go:358 +0x8a\nmain.main()\n        syscall/_test/_testmain.go:43 +0x9a\n\ngoroutine 0 [syscall]:\n\ngoroutine 5 [syscall]:\nsyscall.Syscall6()\n        /tmp/go/src/pkg/syscall/asm_openbsd_amd64.s:38 +0x5\nsyscall.kevent(0x8, 0x0, 0x0, 0xc200096288, 0xa, ...)\n        /tmp/go/src/pkg/syscall/zsyscall_openbsd_amd64.go:199 +0x83\nsyscall.Kevent(0x8, 0x0, 0x0, 0x0, 0xc200096288, ...)\n        /tmp/go/src/pkg/syscall/syscall_bsd.go:554 +0x9b\nnet.(*pollster).WaitFD(0xc200096280, 0xc200076840, 0x0, 0xc200076660, 0xc2000772a0, ...)\n        /tmp/go/src/pkg/net/fd_bsd.go:98 +0x1af\nnet.(*pollServer).Run(0xc200076840)\n        /tmp/go/src/pkg/net/fd_unix.go:212 +0x10a\ncreated by net.newPollServer\n        /tmp/go/src/pkg/net/newpollserver_unix.go:33 +0x2d5\nexit status 2\nFAIL    syscall 0.028s",
			"disapproval": false,
			"date": "2013-02-26 21:56:30.737560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello devon.odell@gmail.com, minux.ma@gmail.com, bradfitz@golang.org, mdempsky@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-26 21:41:27.601520",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/26 21:43:45, mdempsky wrote:\n> LGTM\n\nOk, i'll suck in my gut and commit this in a few mins. A quick survey of the builders says that netbsd will be able to test this before hitting, http://build.golang.org/log/32413119bb1ba5867462d83f5c35240d007b73c3, openbsd is similar, but broken at a different point.\n\nIs anyone able to test on netbsd or openbsd before I commit ?",
			"disapproval": false,
			"date": "2013-02-26 21:47:39.338500",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello devon.odell@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-26 12:08:33.696550",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 26, 2013 at 8:10 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Tested on freebsd/amd64 and freebsd/arm, also linux/amd64. Can someone\r\n> please test on openbsd/*\r\n\r\nOn OpenBSD/amd64:\r\n=== RUN TestPassFD\r\n--- PASS: TestPassFD (0.02 seconds)\r\npanic: runtime error: slice bounds out of range [recovered]\r\npanic: runtime error: slice bounds out of range\r\n\r\ngoroutine 3 [running]:\r\ntesting.func\u00b7004()\r\n/home/minux/go.hg/src/pkg/testing/testing.go:341 +0xbc\r\nsyscall.ParseSocketControlMessage(0xc200056500, 0x14, 0x20, 0x20,\r\n0xc200056500, ...)\r\n /home/minux/go.hg/src/pkg/syscall/sockcmsg_unix.go:60 +0x277\r\nsyscall_test.TestPassFD(0xc200000090)\r\n/home/minux/go.hg/src/pkg/syscall/passfd_test.go:80 +0xa29\r\ntesting.tRunner(0xc200000090, 0x61b618)\r\n/home/minux/go.hg/src/pkg/testing/testing.go:346 +0x8a\r\ncreated by testing.RunTests\r\n/home/minux/go.hg/src/pkg/testing/testing.go:426 +0x86b\r\n\r\ngoroutine 1 [chan receive]:\r\ntesting.RunTests(0x56a820, 0x61b618, 0x1, 0x1, 0x1, ...)\r\n/home/minux/go.hg/src/pkg/testing/testing.go:427 +0x88e\r\ntesting.Main(0x56a820, 0x61b618, 0x1, 0x1, 0x624b28, ...)\r\n/home/minux/go.hg/src/pkg/testing/testing.go:358 +0x8a\r\nmain.main()\r\n syscall/_test/_testmain.go:43 +0x9a\r\n\r\ngoroutine 0 [syscall]:\r\n\r\ngoroutine 5 [syscall]:\r\nsyscall.Syscall6()\r\n /home/minux/go.hg/src/pkg/syscall/asm_openbsd_amd64.s:38 +0x5\r\nsyscall.kevent(0x8, 0x0, 0x0, 0xc200094148, 0xa, ...)\r\n/home/minux/go.hg/src/pkg/syscall/zsyscall_openbsd_amd64.go:199 +0x83\r\nsyscall.Kevent(0x8, 0x0, 0x0, 0x0, 0xc200094148, ...)\r\n/home/minux/go.hg/src/pkg/syscall/syscall_bsd.go:554 +0x9b\r\nnet.(*pollster).WaitFD(0xc200094140, 0xc2000748a0, 0x0, 0xc200074690,\r\n0xc2000752a0, ...)\r\n /home/minux/go.hg/src/pkg/net/fd_bsd.go:98 +0x1af\r\nnet.(*pollServer).Run(0xc2000748a0)\r\n/home/minux/go.hg/src/pkg/net/fd_unix.go:212 +0x10a\r\ncreated by net.newPollServer\r\n/home/minux/go.hg/src/pkg/net/newpollserver_unix.go:33 +0x2d5\r\nexit status 2\r\nFAIL syscall 0.876s\r\n",
			"disapproval": false,
			"date": "2013-02-26 12:30:03.096970",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-26 21:42:03.005870",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Tested on freebsd/amd64 and freebsd/arm, also linux/amd64. Can someone\r\nplease test on openbsd/*\r\n\r\nOn Tue, Feb 26, 2013 at 11:08 PM,  <dave@cheney.net> wrote:\r\n> Reviewers: dho,\r\n>\r\n> Message:\r\n> Hello devon.odell@gmail.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> syscall: fix FD passing on FreeBSD and OpenBSD\r\n>\r\n> Fixes issue 3348.\r\n> Fixes issue 3349.\r\n>\r\n> Please review this at https://codereview.appspot.com/7406050/\r\n>\r\n> Affected files:\r\n>   M src/pkg/syscall/passfd_test.go\r\n>   M src/pkg/syscall/sockcmsg_unix.go\r\n>\r\n>\r\n> Index: src/pkg/syscall/passfd_test.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/passfd_test.go\r\n> +++ b/src/pkg/syscall/passfd_test.go\r\n> @@ -2,7 +2,7 @@\r\n>  // Use of this source code is governed by a BSD-style\r\n>  // license that can be found in the LICENSE file.\r\n>\r\n> -// +build linux darwin\r\n> +// +build linux darwin freebsd openbsd\r\n>\r\n>  package syscall_test\r\n>\r\n> @@ -90,7 +90,7 @@\r\n>                 t.Fatalf(\"syscall.ParseUnixRights: %v\", err)\r\n>         }\r\n>         if len(gotFds) != 1 {\r\n> -               t.Fatalf(\"wanted 1 fd; got %#v\", gotFds)\r\n> +               t.Errorf(\"wanted 1 fd; got %#v\", gotFds)\r\n>         }\r\n>\r\n>         f := os.NewFile(uintptr(gotFds[0]), \"fd-from-child\")\r\n> Index: src/pkg/syscall/sockcmsg_unix.go\r\n> ===================================================================\r\n> --- a/src/pkg/syscall/sockcmsg_unix.go\r\n> +++ b/src/pkg/syscall/sockcmsg_unix.go\r\n> @@ -79,7 +79,7 @@\r\n>         h.Level = SOL_SOCKET\r\n>         h.Type = SCM_RIGHTS\r\n>         h.SetLen(CmsgLen(datalen))\r\n> -       data := uintptr(cmsgData(h))\r\n> +       data := uintptr(cmsgAlignOf(int(uintptr(cmsgData(h)))))\r\n>         for _, fd := range fds {\r\n>                 *(*int32)(unsafe.Pointer(data)) = int32(fd)\r\n>                 data += 4\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 12:10:57.366860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK, thanks, I'll update the description and leave the OpenBSD issue open.\r\nOn 26 Feb 2013 23:30, \"minux\" <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Tue, Feb 26, 2013 at 8:10 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>\r\n>> Tested on freebsd/amd64 and freebsd/arm, also linux/amd64. Can someone\r\n>> please test on openbsd/*\r\n>\r\n> On OpenBSD/amd64:\r\n> === RUN TestPassFD\r\n> --- PASS: TestPassFD (0.02 seconds)\r\n> panic: runtime error: slice bounds out of range [recovered]\r\n> panic: runtime error: slice bounds out of range\r\n>\r\n> goroutine 3 [running]:\r\n> testing.func\u00b7004()\r\n> /home/minux/go.hg/src/pkg/testing/testing.go:341 +0xbc\r\n> syscall.ParseSocketControlMessage(0xc200056500, 0x14, 0x20, 0x20,\r\n> 0xc200056500, ...)\r\n>  /home/minux/go.hg/src/pkg/syscall/sockcmsg_unix.go:60 +0x277\r\n> syscall_test.TestPassFD(0xc200000090)\r\n> /home/minux/go.hg/src/pkg/syscall/passfd_test.go:80 +0xa29\r\n> testing.tRunner(0xc200000090, 0x61b618)\r\n> /home/minux/go.hg/src/pkg/testing/testing.go:346 +0x8a\r\n> created by testing.RunTests\r\n> /home/minux/go.hg/src/pkg/testing/testing.go:426 +0x86b\r\n>\r\n> goroutine 1 [chan receive]:\r\n> testing.RunTests(0x56a820, 0x61b618, 0x1, 0x1, 0x1, ...)\r\n> /home/minux/go.hg/src/pkg/testing/testing.go:427 +0x88e\r\n> testing.Main(0x56a820, 0x61b618, 0x1, 0x1, 0x624b28, ...)\r\n> /home/minux/go.hg/src/pkg/testing/testing.go:358 +0x8a\r\n> main.main()\r\n>  syscall/_test/_testmain.go:43 +0x9a\r\n>\r\n> goroutine 0 [syscall]:\r\n>\r\n> goroutine 5 [syscall]:\r\n> syscall.Syscall6()\r\n>  /home/minux/go.hg/src/pkg/syscall/asm_openbsd_amd64.s:38 +0x5\r\n> syscall.kevent(0x8, 0x0, 0x0, 0xc200094148, 0xa, ...)\r\n> /home/minux/go.hg/src/pkg/syscall/zsyscall_openbsd_amd64.go:199 +0x83\r\n> syscall.Kevent(0x8, 0x0, 0x0, 0x0, 0xc200094148, ...)\r\n> /home/minux/go.hg/src/pkg/syscall/syscall_bsd.go:554 +0x9b\r\n> net.(*pollster).WaitFD(0xc200094140, 0xc2000748a0, 0x0, 0xc200074690,\r\n> 0xc2000752a0, ...)\r\n>  /home/minux/go.hg/src/pkg/net/fd_bsd.go:98 +0x1af\r\n> net.(*pollServer).Run(0xc2000748a0)\r\n> /home/minux/go.hg/src/pkg/net/fd_unix.go:212 +0x10a\r\n> created by net.newPollServer\r\n> /home/minux/go.hg/src/pkg/net/newpollserver_unix.go:33 +0x2d5\r\n> exit status 2\r\n> FAIL syscall 0.876s\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-26 12:58:46.034990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM once you're happy with your testing.",
			"disapproval": false,
			"date": "2013-02-26 15:43:52.784360",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> We probably should create more tests for the control message parsing stuff.\n\n@minux, I agree. I am concerned that the we are passing fd's, which are size_t types between processes, but always casting them to int32s. This might be wrong and being happily covered up by the fact the parsing at the other side always assumes int32's.",
			"disapproval": false,
			"date": "2013-02-26 21:43:52.081420",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does it work with b[cmsgAlignOf(h.Len):]? This stuff is\r\n(unfortunately) really sensitive to alignment and sizing issues. The\r\nint cast might be the problem.\r\n\r\n2013/2/26 minux <minux.ma@gmail.com>:\r\n> This patch makes the test pass on OpenBSD/amd64:\r\n> diff -r 512627a9cdb8 src/pkg/syscall/sockcmsg_unix.go\r\n> --- a/src/pkg/syscall/sockcmsg_unix.go Mon Feb 25 22:06:58 2013 -0800\r\n> +++ b/src/pkg/syscall/sockcmsg_unix.go Wed Feb 27 00:17:55 2013 +0800\r\n> @@ -57,7 +57,7 @@\r\n>   }\r\n>   m := SocketControlMessage{Header: *h, Data:\r\n> dbuf[:int(h.Len)-cmsgAlignOf(SizeofCmsghdr)]}\r\n>   msgs = append(msgs, m)\r\n> - b = b[cmsgAlignOf(int(h.Len)):]\r\n> + b = b[h.Len:]\r\n>   }\r\n>   return msgs, nil\r\n>  }\r\n>\r\n> It doesn't affect Darwin/amd64, FreeBSD/amd64, NetBSD/amd64 and NetBSD/386.\r\n",
			"disapproval": false,
			"date": "2013-02-26 16:42:33.029220",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 27, 2013 at 12:42 AM, Devon H. O'Dell <devon.odell@gmail.com>wrote:\r\n\r\n> Does it work with b[cmsgAlignOf(h.Len):]? This stuff is\r\n> (unfortunately) really sensitive to alignment and sizing issues. The\r\n> int cast might be the problem.\r\n>\r\nWhen the out-of-bound error happens:\r\nh.Len = 20\r\ncmsgAlignOf(h.Len) = 24\r\nlen(b) = 20\r\n\r\nWe probably should create more tests for the control message parsing stuff.\r\n",
			"disapproval": false,
			"date": "2013-02-26 16:49:14.763350",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7406050/diff/4006/src/pkg/syscall/sockcmsg_unix.go\nFile src/pkg/syscall/sockcmsg_unix.go (right):\n\nhttps://codereview.appspot.com/7406050/diff/4006/src/pkg/syscall/sockcmsg_unix.go#newcode82\nsrc/pkg/syscall/sockcmsg_unix.go:82: data := uintptr(cmsgAlignOf(int(uintptr(cmsgData(h)))))\nShouldn't instead cmsgData be fixed instead to return a properly aligned pointer?  E.g., the macro on OpenBSD for CMSG_DATA is:\n\n/* given pointer to struct cmsghdr, return pointer to data */\n#define CMSG_DATA(cmsg) \\\n        ((u_char *)(cmsg) + _ALIGN(sizeof(struct cmsghdr)))\n\nWhich means on amd64 (where _ALIGN rounds to a multiple of 8), then CMSG_DATA() starts 16 bytes after cmsg, not 12 bytes like on i386.",
			"disapproval": false,
			"date": "2013-02-26 18:50:29.902120",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you to all who tested this patch, @mdempsky is correct, the fix should go in cmsgData() and match the original macro, which I have now done. \n\nI have also expanded the // +build tag to include netbsd, as it _should_ work on this platform as well.",
			"disapproval": false,
			"date": "2013-02-26 21:40:29.271280",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ahh, that was my misunderstanding, I was working from the definition\r\nof most fds passed into functions like mmap, which is size_t. In that\r\ncase, please ignore my incorrect concerns.\r\n\r\nOn Wed, Feb 27, 2013 at 8:48 AM,  <mdempsky@google.com> wrote:\r\n>> I am concerned that the we are passing fd's, which are size_t\r\n>> types between processes\r\n>\r\n>\r\n> What do you mean?  POSIX guarantees that fds fit in a C int, and all\r\n> POSIX systems I know of have 32-bit ints.\r\n>\r\n> https://codereview.appspot.com/7406050/\r\n",
			"disapproval": false,
			"date": "2013-02-26 21:49:11.261120",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-26 21:43:45.197860",
			"approval": true
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I am concerned that the we are passing fd's, which are size_t\n> types between processes\n\nWhat do you mean?  POSIX guarantees that fds fit in a C int, and all POSIX systems I know of have 32-bit ints.",
			"disapproval": false,
			"date": "2013-02-26 21:48:06.931790",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/26 21:56:30, mdempsky wrote:\n> Hm, still slice bounds out of range on OpenBSD:\n\n(And that's OpenBSD/amd64 to clarify.)",
			"disapproval": false,
			"date": "2013-02-26 21:56:50.553180",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I'll reduce the scope of this CL to freebsd and netbsd, and leave\r\nissue 3349 open.\r\n\r\nOn Wed, Feb 27, 2013 at 8:56 AM,  <mdempsky@google.com> wrote:\r\n> On 2013/02/26 21:56:30, mdempsky wrote:\r\n>>\r\n>> Hm, still slice bounds out of range on OpenBSD:\r\n>\r\n>\r\n> (And that's OpenBSD/amd64 to clarify.)\r\n>\r\n> https://codereview.appspot.com/7406050/\r\n",
			"disapproval": false,
			"date": "2013-02-26 22:01:23.797260",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"devon.odell@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=cb5b97738c48 ***\n\nsyscall: fix FD passing on FreeBSD and NetBSD\n\nFixes issue 3348.\n\nR=devon.odell, minux.ma, bradfitz, mdempsky\nCC=golang-dev\nhttps://codereview.appspot.com/7406050",
			"disapproval": false,
			"date": "2013-02-26 22:13:29.607560",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 7406050: syscall: fix FD passing on FreeBSD, NetBSD and OpenBSD",
	"created": "2013-02-26 12:02:47.437360",
	"patchsets": [
		1,
		2001,
		5001,
		4003,
		4006,
		18001,
		20001,
		25001,
		23002
	],
	"modified": "2013-02-27 03:57:22.138320",
	"closed": true,
	"issue": 7406050
}