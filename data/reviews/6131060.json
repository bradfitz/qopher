{
	"description": "cgo: rename C names for Go types to avoid conflicting with package\n\nFixes issue 3371.",
	"cc": [
		"rsc@golang.org",
		"bsiegert@gmail.com",
		"r@google.com",
		"mtj@google.com",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-01 00:06:46.448075",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Tue, May 1, 2012 at 10:05,  <iant@golang.org> wrote:\r\n> Just using \"int\", etc., will break when and if we switch to 64-bit int.\r\n> Also there are 64-bit systems that use 64-bit int. \u00a0Personally I think\r\n> that using Go names makes sense.\r\n\r\nI don't understand this comment given the current code, which says\r\n\r\ntypedef int GoInt32;\r\n\r\nbut I agree that it can wait until we hit a system with 64-bit 'int' in C.\r\n(If a system does that, how do you get a 32-bit int?  Surely not 'short'?)\r\n\r\nDoes cgo still work if we delete:\r\n       \"int\":        {Size: 4, Align: 4, C: c(\"GoInt\")},\r\n       \"uint\":       {Size: 4, Align: 4, C: c(\"GoUint\")},\r\nfrom the map?  I suspect it will, because I don't think the cgo\r\ncode generator ever chooses to refer to an unsized int.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-01 14:12:03.555840",
			"approval": true
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "These typedefs Look Gross To Me.\r\n\r\n--Benny.\r\n",
			"disapproval": false,
			"date": "2012-05-01 09:43:58.114011",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it feasible to write C that looks like C any more? I guess that ship has sailed.\r\n\r\n-rob\r\n\r\n",
			"disapproval": false,
			"date": "2012-05-01 10:05:07.041559",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "...and Steve Bourne was its captain.\r\n\r\nOn Tue, May 1, 2012 at 6:05 AM, Rob 'Commander' Pike <r@google.com> wrote:\r\n> Is it feasible to write C that looks like C any more? I guess that ship has sailed.\r\n>\r\n> -rob\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-05-01 11:42:58.509938",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 1, 2012 at 9:42 PM, Michael Jones <mtj@google.com> wrote:\r\n> ...and Steve Bourne was its captain.\r\n\r\nThat's incorrect. Bourne's version of C was Algol-68. Gcc's version\r\nis.... a lot of underscores on things.\r\n\r\nBy the way, srb took the macros out, well before Unix v8. I worked on\r\nthe shell after that, adding things he'd planned and doing some things\r\non my list too. In doing that work, I learned that underneath the\r\npeculiar macros of the original was one of the cleanest, best-written\r\nC programs I'd ever seen, before and since. It's a shame the macros\r\nare all people know about that code.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-05-01 11:54:58.327712",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I did not say that he besmirched C, or that his code is bad, only that\r\nhe is famous as the Algol-68 compiler writer who brought his preferred\r\nmental environment to the sh task via the flexible C/cpp environment.\r\nI'm unaware of any dismissive or pejorative view, only my memory of\r\nlooking at the code. Do I remember correctly that there was:\r\n\r\n#define EVER ;;\r\n\r\nand\r\n\r\nfor (EVER) {\r\n:\r\n}\r\n\r\n? Maybe it was 'forever' as one chunk.\r\n\r\nI'm actually a huge fan of this kind of emacs-of-language scheme where\r\nyou define the language that makes sense for your code. To quote John\r\nLee Hooker's House Rent Blues, \"it don't confront me none.\"\r\n\r\nOn Tue, May 1, 2012 at 7:54 AM, Rob 'Commander' Pike <r@google.com> wrote:\r\n> On Tue, May 1, 2012 at 9:42 PM, Michael Jones <mtj@google.com> wrote:\r\n>> ...and Steve Bourne was its captain.\r\n>\r\n> That's incorrect. Bourne's version of C was Algol-68. Gcc's version\r\n> is.... a lot of underscores on things.\r\n>\r\n> By the way, srb took the macros out, well before Unix v8. I worked on\r\n> the shell after that, adding things he'd planned and doing some things\r\n> on my list too. In doing that work, I learned that underneath the\r\n> peculiar macros of the original was one of the cleanest, best-written\r\n> C programs I'd ever seen, before and since. It's a shame the macros\r\n> are all people know about that code.\r\n>\r\n> -rob\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-05-01 12:06:15.735120",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"r@google.com",
				"mtj@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6131060/diff/1/src/cmd/cgo/out.go\nFile src/cmd/cgo/out.go (right):\n\nhttp://codereview.appspot.com/6131060/diff/1/src/cmd/cgo/out.go#newcode453\nsrc/cmd/cgo/out.go:453: switch unsafe.Sizeof(0) {\nThis assumes that the cgo binary is built for the same architecture as it is building for.  Can we do this a different way?  There is already ptrSizeMap[goarch] for the pointer size.\n\nSeparately, perhaps we do not need this section at all.  I do not remember cgo emitting code that used an unsized int.  What breaks if we just omit the \"int\" and \"uint\" entries from the table?\n\nhttp://codereview.appspot.com/6131060/diff/1/src/cmd/cgo/out.go#newcode943\nsrc/cmd/cgo/out.go:943: typedef int          GoInt8   __attribute__ ((mode (QI)));\nIssue 3371 is mainly concerned, I believe, with the names of the typedefs, not their definitions.  Maybe instead of emitting typedefs at all we should change the names in the map above to say 'unsigned char' instead of 'uchar', etc.\n\nThe specific definitions I chose - being careful to avoid long - work on every 32-bit and 64-bit system I am aware of.  Is it necessary to add the attributes?  That is, is there some system being fixed by this beyond issue 3371?\n\nIf we fix the map above to use full names (\"unsigned int\", \"signed char\", \"long long\" instead of \"uint32\", \"int8\", \"int64\") then all that should be necessary here is the uintptr, which we can call GoUintptr.",
			"disapproval": false,
			"date": "2012-05-01 13:56:04.238124",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "...oh, and to be clear, the lore is fascinating! Thanks!\r\n\r\nOn Tue, May 1, 2012 at 8:05 AM, Michael Jones <mtj@google.com> wrote:\r\n> I did not say that he besmirched C, or that his code is bad, only that\r\n> he is famous as the Algol-68 compiler writer who brought his preferred\r\n> mental environment to the sh task via the flexible C/cpp environment.\r\n> I'm unaware of any dismissive or pejorative view, only my memory of\r\n> looking at the code. Do I remember correctly that there was:\r\n>\r\n> #define EVER ;;\r\n>\r\n> and\r\n>\r\n> for (EVER) {\r\n> :\r\n> }\r\n>\r\n> ? Maybe it was 'forever' as one chunk.\r\n>\r\n> I'm actually a huge fan of this kind of emacs-of-language scheme where\r\n> you define the language that makes sense for your code. To quote John\r\n> Lee Hooker's House Rent Blues, \"it don't confront me none.\"\r\n>\r\n> On Tue, May 1, 2012 at 7:54 AM, Rob 'Commander' Pike <r@google.com> wrote:\r\n>> On Tue, May 1, 2012 at 9:42 PM, Michael Jones <mtj@google.com> wrote:\r\n>>> ...and Steve Bourne was its captain.\r\n>>\r\n>> That's incorrect. Bourne's version of C was Algol-68. Gcc's version\r\n>> is.... a lot of underscores on things.\r\n>>\r\n>> By the way, srb took the macros out, well before Unix v8. I worked on\r\n>> the shell after that, adding things he'd planned and doing some things\r\n>> on my list too. In doing that work, I learned that underneath the\r\n>> peculiar macros of the original was one of the cleanest, best-written\r\n>> C programs I'd ever seen, before and since. It's a shame the macros\r\n>> are all people know about that code.\r\n>>\r\n>> -rob\r\n>\r\n>\r\n>\r\n> --\r\n> Michael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\r\n> 650-335-5765\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-05-01 12:07:30.425338",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Rob 'Commander' Pike <r@google.com> writes:\r\n\r\n> Is it feasible to write C that looks like C any more? I guess that ship has sailed.\r\n\r\nWhat we need here is not ordinary C, but the C types that precisely\r\ncorrespond to Go types.  Go types have precise sizes and C types do not.\r\nGCC provides extensions to C to get types with precise sizes, and that's\r\nwhat I'm using here.\r\n\r\nThis does have the drawback that it will only be portable to compilers\r\nthat support these GCC extensions.  Perhaps I should put this code in\r\n#ifdef __GNUC__ and use the old guesses for other compilers.\r\n\r\nWe could also use <inttype.h>/<stdint.h>, but I'm concerned that that\r\nwill break some user packages as in issue 3371, albeit in a different\r\nway.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-05-01 13:19:49.008194",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"r@google.com",
				"mtj@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Before I read the last comment I realized that the attribute stuff is irrelevant for this issue, so I just dropped it.  Switching to that can be a different CL.\n\nJust using \"int\", etc., will break when and if we switch to 64-bit int.  Also there are 64-bit systems that use 64-bit int.  Personally I think that using Go names makes sense.",
			"disapproval": false,
			"date": "2012-05-01 14:05:22.892776",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"r@google.com",
				"mtj@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d063a7844d48 ***\n\ncgo: rename C names for Go types to avoid conflicting with package\n\nFixes issue 3371.\n\nR=rsc, bsiegert, r, mtj, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6131060",
			"disapproval": false,
			"date": "2012-05-01 16:04:25.420701",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\r\n\r\n> LGTM\r\n>\r\n> On Tue, May 1, 2012 at 10:05,  <iant@golang.org> wrote:\r\n>> Just using \"int\", etc., will break when and if we switch to 64-bit int.\r\n>> Also there are 64-bit systems that use 64-bit int. \u00a0Personally I think\r\n>> that using Go names makes sense.\r\n>\r\n> I don't understand this comment given the current code, which says\r\n>\r\n> typedef int GoInt32;\r\n\r\nI postponed the issue of ensuring that we have the correct type sizes\r\nfor a different CL.\r\n\r\n\r\n> but I agree that it can wait until we hit a system with 64-bit 'int' in C.\r\n> (If a system does that, how do you get a 32-bit int?  Surely not 'short'?)\r\n\r\nint32_t, I suppose.  In principle portable C code isn't supposed to\r\nworry about the exact sizes of types.  I don't know of a system on which\r\nshort is not 16 bits (except for AVR where in some compilation modes\r\nshort and int are both 8 bits).\r\n\r\n\r\n> Does cgo still work if we delete:\r\n>        \"int\":        {Size: 4, Align: 4, C: c(\"GoInt\")},\r\n>        \"uint\":       {Size: 4, Align: 4, C: c(\"GoUint\")},\r\n> from the map?  I suspect it will, because I don't think the cgo\r\n> code generator ever chooses to refer to an unsized int.\r\n\r\nNo, it fails.  In misc/cgo/test I get\r\n\r\nexports.go:10:23: unrecognized Go type int\r\nexports.go:10:23: unrecognized Go type int\r\nissue1560.go:30:24: unrecognized Go type int\r\nissue1560.go:30:24: unrecognized Go type int\r\nissue2462.go:30:18: unrecognized Go type int\r\nissue2462.go:30:18: unrecognized Go type int\r\nissue2462.go:35:19: unrecognized Go type uint\r\nissue2462.go:35:19: unrecognized Go type uint\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-05-01 16:00:05.996429",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 1, 2012 at 12:00, Ian Lance Taylor <iant@google.com> wrote:\r\n> No, it fails. \u00a0In misc/cgo/test I get\r\n>\r\n> exports.go:10:23: unrecognized Go type int\r\n> exports.go:10:23: unrecognized Go type int\r\n> issue1560.go:30:24: unrecognized Go type int\r\n> issue1560.go:30:24: unrecognized Go type int\r\n> issue2462.go:30:18: unrecognized Go type int\r\n> issue2462.go:30:18: unrecognized Go type int\r\n> issue2462.go:35:19: unrecognized Go type uint\r\n> issue2462.go:35:19: unrecognized Go type uint\r\n\r\nThanks.  I created issue 3585 so I remember to come back and understand this.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-01 16:24:15.681696",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 6131060: cgo: rename C names for Go types to avoid conflicting w...",
	"created": "2012-05-01 00:06:39.979654",
	"patchsets": [
		1,
		8001,
		12001
	],
	"modified": "2012-05-01 16:04:38.215343",
	"closed": true,
	"issue": 6131060
}