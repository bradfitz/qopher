{
	"description": "runtime: struct Obj in mgc0.c and buffers in scanblock()\n\nDetails:\n\n- This CL is the conceptual skeleton of code found in CL 6114046\n\n- The garbage collector uses struct Obj to specify memory blocks\n\n- scanblock() is putting found memory blocks into an intermediate buffer\n  (xbuf) before adding/flushing them to the main work buffer (wbuf)\n\n- The main loop in scanblock() is replaced with a skeleton code that\n  in the future will be able to recognize the type of objects and\n  thus will improve the garbage collector's precision.\n  For now, all objects are simply sequences of pointers so\n  the precision of the garbage collector remains unchanged.\n\n- The code plugs .gcdata and .gcbss sections into the garbage collector.\n  scanblock() in this CL is unable to make any use of this.",
	"cc": [
		"rsc@golang.org",
		"dvyukov@google.com",
		"remyoudompheng@gmail.com",
		"dave@cheney.net",
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: dave@cheney.net, dvyukov@google.com, golang-dev@googlegroups.com, minux.ma@gmail.com, remyoudompheng@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-30 08:31:31.514770",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am somewhat busy right now. I will try to take a look next week. I can just do post review.",
			"disapproval": false,
			"date": "2012-11-30 09:18:12.380890",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode91\nsrc/pkg/runtime/mgc0.c:91: uint8   _padding[2*PageSize-sizeof(LFNode)-sizeof(uintptr) - ((2*PageSize-sizeof(LFNode)-sizeof(uintptr))/sizeof(Obj)-1)*sizeof(Obj)];\nplease make 2*PageSize-sizeof(LFNode)-sizeof(uintptr) a separate constant with some name, and use\n\nObj   obj[C / sizeof(Obj)]\nuint8 _padding[C % sizeof(Obj)]\n\nI don't understand the purpose of the -1.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode183\nsrc/pkg/runtime/mgc0.c:183: flushxbuf(struct X *xbuf, uintptr n, Obj **_wp, Workbuf **_wbuf, uintptr *_nobj, struct Y *ybuf)\nI don't understand what flush means, nor what X is.\nCan you explain:\n* what this function does\n* what is the input, and what is the output\n\nI also suggest not calling the things X and Y. It seems like this function is marking blocks, so if it is the case, I suggest calling it \"markblocks\".\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode319\nsrc/pkg/runtime/mgc0.c:319: if(sizeof(void*) == 8)\nI wonder if it should be a macro. Inlining everything to avoid function calls looks wrong.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode575\nsrc/pkg/runtime/mgc0.c:575: // Marks the object, without appending it to any buffer if the object wasn't already marked.\nthis sentence is difficult to parse.\n\nI suggest:\n\n// markonly marks an object and returns true if it is not\n// yet marked, and false otherwise.\n// It is not thread-safe and doesn't append the object to\n// any buffer.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode646\nsrc/pkg/runtime/mgc0.c:646: // Append obj to the buffer.\nplease explain what is an argument and what is a return value of this function.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode701\nsrc/pkg/runtime/mgc0.c:701: markroot(ParFor *desc, uint32 i)\nwhat is the purpose of this function?\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode1356\nsrc/pkg/runtime/mgc0.c:1356: m->locks++;\t// disable gc during mallocs in parforalloc\nwhy did this move?",
			"disapproval": false,
			"date": "2012-12-02 16:29:45.990460",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode91\nsrc/pkg/runtime/mgc0.c:91: uint8   _padding[2*PageSize-sizeof(LFNode)-sizeof(uintptr) - ((2*PageSize-sizeof(LFNode)-sizeof(uintptr))/sizeof(Obj)-1)*sizeof(Obj)];\nOn 2012/12/02 16:29:46, remyoudompheng wrote:\n> please make 2*PageSize-sizeof(LFNode)-sizeof(uintptr) a separate constant with\n> some name, and use\n> \n> Obj   obj[C / sizeof(Obj)]\n> uint8 _padding[C % sizeof(Obj)]\n\nDone.\n\n> \n> I don't understand the purpose of the -1.\n\nThe purpose of -1 is to prevent the size of _padding to be 0 (by accident). The C compiler cannot handle \"uint _padding[0]\".\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode183\nsrc/pkg/runtime/mgc0.c:183: flushxbuf(struct X *xbuf, uintptr n, Obj **_wp, Workbuf **_wbuf, uintptr *_nobj, struct Y *ybuf)\nOn 2012/12/02 16:29:46, remyoudompheng wrote:\n> I don't understand what flush means, nor what X is.\n> Can you explain:\n> * what this function does\n> * what is the input, and what is the output\n\nI added a simple comment to the function.\n\n> I also suggest not calling the things X and Y. It seems like this function is\n> marking blocks, so if it is the case, I suggest calling it \"markblocks\".\n\nI would like to keep the X and Y names.\n\nI would also like to keep the word \"flush\" in the name because that is what the function is doing (under a particular interpretation). The purpose of the function is to move (flush) data from xbuf to Workbuf. The constraints put on data in xbuf and Workbuf explain the meaning of the function.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode319\nsrc/pkg/runtime/mgc0.c:319: if(sizeof(void*) == 8)\nOn 2012/12/02 16:29:46, remyoudompheng wrote:\n> I wonder if it should be a macro. Inlining everything to avoid function calls\n> looks wrong.\n\nSimilar code is already in tip.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode575\nsrc/pkg/runtime/mgc0.c:575: // Marks the object, without appending it to any buffer if the object wasn't already marked.\nOn 2012/12/02 16:29:46, remyoudompheng wrote:\n> this sentence is difficult to parse.\n> \n> I suggest:\n> \n> // markonly marks an object and returns true if it is not\n> // yet marked, and false otherwise.\n> // It is not thread-safe and doesn't append the object to\n> // any buffer.\n\nDone.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode646\nsrc/pkg/runtime/mgc0.c:646: // Append obj to the buffer.\nOn 2012/12/02 16:29:46, remyoudompheng wrote:\n> please explain what is an argument and what is a return value of this function.\n\nDone.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode701\nsrc/pkg/runtime/mgc0.c:701: markroot(ParFor *desc, uint32 i)\nOn 2012/12/02 16:29:46, remyoudompheng wrote:\n> what is the purpose of this function?\n\nThe purpose is the same as in tip of the Go repository.\n\nhttps://codereview.appspot.com/6856121/diff/5001/src/pkg/runtime/mgc0.c#newcode1356\nsrc/pkg/runtime/mgc0.c:1356: m->locks++;\t// disable gc during mallocs in parforalloc\nOn 2012/12/02 16:29:46, remyoudompheng wrote:\n> why did this move?\n\nThe main reason is that there is no memory allocation in runtime\u00b7parforsetup().\n\nCL 6114046 contains the debugging variable runtime\u00b7gcing - this adds one more  reason to move the code. I haven't decided yet whether to submit runtime\u00b7gcing, I used the variable for debugging purposes only. I will try to move the variable into if(Debug){...} and submit the code in a next CL.",
			"disapproval": false,
			"date": "2012-12-03 18:00:13.305580",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dvyukov@google.com, remyoudompheng@gmail.com (cc: dave@cheney.net, golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-03 18:00:04.560790",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/11001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/11001/src/pkg/runtime/mgc0.c#newcode195\nsrc/pkg/runtime/mgc0.c:195: // ybuf holds temporary data generated by this function.\nI think actually everything would be clearer if a little drawing explained how the todo-list moves from a structure to another.\nI have the feeling it works like this:\n\n    scanblock\n (find pointers)\n  Obj ------> X (pointer targets)\n   ^          |\n   |          | flushxbuf (1st part,\n   |          | find block start)\n   |          v\n   `--------  Y (whole objects)\nflushxbuf\n(2nd part, mark and enqueue)\n\nObjs are held in Workbufs. X and Y's are held in BufferLists.\nIf my drawing is correct, feel free to use it to document the workflow.",
			"disapproval": false,
			"date": "2012-12-03 19:08:58.971320",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/11001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/11001/src/pkg/runtime/mgc0.c#newcode195\nsrc/pkg/runtime/mgc0.c:195: // ybuf holds temporary data generated by this function.\nOn 2012/12/03 19:08:59, remyoudompheng wrote:\n> I think actually everything would be clearer if a little drawing explained how\n> the todo-list moves from a structure to another.\n> I have the feeling it works like this:\n> \n>     scanblock\n>  (find pointers)\n>   Obj ------> X (pointer targets)\n>    ^          |\n>    |          | flushxbuf (1st part,\n>    |          | find block start)\n>    |          v\n>    `--------  Y (whole objects)\n> flushxbuf\n> (2nd part, mark and enqueue)\n\nI used it to document function flushxbuf. Thanks.\n\n> Objs are held in Workbufs.\n\nThis isn't entirely correct (next CL). Struct Obj is just an abstract data structure and if the data at hand matches it then the code is putting data in struct Obj. If it doesn't match, a different data structure is used.\n\n> X and Y's are held in BufferLists.\n> If my drawing is correct, feel free to use it to document the workflow.",
			"disapproval": false,
			"date": "2012-12-04 15:06:32.675030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for this. It's a good intermediate step. Please don't worry about absolute garbage collector performance yet. Let's get the structure right and then worry about nanoseconds.\n\nI will wait until Dmitriy is happy but it seems fine to me.\n\nPlease rename xbuf ybuf etc when you rename X and Y. ptrbuf and objbuf would be good.\n\nhttps://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c#newcode161\nsrc/pkg/runtime/mgc0.c:161: // X and Y are structures used by intermediate buffers.\nCan we please use more descriptive names here? :-)\n\nPtrTarget and ObjTarget perhaps?\n\nhttps://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c#newcode848\nsrc/pkg/runtime/mgc0.c:848: addroot((Obj){data, edata - data, (uintptr)gcdata});\nThis needs to compile with gccgo too. Does gcc support (Obj){...} yet? I am not sure.",
			"disapproval": false,
			"date": "2012-12-11 17:27:40.561780",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dvyukov@google.com, remyoudompheng@gmail.com (cc: dave@cheney.net, golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-04 15:04:39.887050",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping? dvyukov?",
			"disapproval": false,
			"date": "2012-12-09 20:19:11.489820",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode81\nsrc/pkg/runtime/mgc0.c:81: uintptr\tgc;\t// type info\nCan we call it ti/typ/tinfo?\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode88\nsrc/pkg/runtime/mgc0.c:88: #define SIZE (2*PageSize-sizeof(LFNode)-sizeof(uintptr))\nIt was 2/4K, and now it's 8K, right? Why?\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode176\nsrc/pkg/runtime/mgc0.c:176: uintptr gc;\nCan we call it ti/typ/tinfo?\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode892\nsrc/pkg/runtime/mgc0.c:892: if(!markonly(sp))\nThis this marking is required now? Is here a bug now?\nWhat is it !markonly? It would expect adding a root if it is marked.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode926\nsrc/pkg/runtime/mgc0.c:926: addroot((Obj){bss, ebss - bss, (uintptr)gcbss});\nIt was split into smaller blocks for load-balancing purposes. It should not be submitted as a single block.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode939\nsrc/pkg/runtime/mgc0.c:939: if(!markonly((byte*)&s->types.data))\nIs it really !markonly?",
			"disapproval": false,
			"date": "2012-12-10 07:39:32.073260",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode210\nsrc/pkg/runtime/mgc0.c:210: flushxbuf(struct X *xbuf, uintptr n, Obj **_wp, Workbuf **_wbuf, uintptr *_nobj, struct Y *ybuf)\nCan't the ybuf just be a local object of this function?\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode426\nsrc/pkg/runtime/mgc0.c:426: xbuf = &scanbuffers->x[0];\nCan't the xbuf just be a local object of this function?\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode510\nsrc/pkg/runtime/mgc0.c:510: PREFETCH(b);\nI guess it makes little sense to prefetch right before dereference. Does it provide any gain here?\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode741\nsrc/pkg/runtime/mgc0.c:741: scanblock(&wp, &wbuf, &nobj, false);\nWhy wp, wbuf, nobj become output parameters? It seems they are not used after calling scanblock.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode938\nsrc/pkg/runtime/mgc0.c:938: case MTypes_Bytes:\nWhy MTypes_Bytes is limited to at most 7 types? Why not 255?\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode940\nsrc/pkg/runtime/mgc0.c:940: addroot((Obj){(byte*)&s->types.data, sizeof(void*), 0});\ncan't we add directly data instead of &data?",
			"disapproval": false,
			"date": "2012-12-10 08:19:36.430220",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am a bit concerned about additional overheads, mutexes, indirections and load balancing. Are there any performance measurements? I am especially interested in high thread counts (8/16)?",
			"disapproval": false,
			"date": "2012-12-10 08:20:52.849670",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 10, 2012 at 12:19 PM,  <dvyukov@google.com> wrote:\r\n>\r\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode210\r\n> src/pkg/runtime/mgc0.c:210: flushxbuf(struct X *xbuf, uintptr n, Obj\r\n>\r\n> **_wp, Workbuf **_wbuf, uintptr *_nobj, struct Y *ybuf)\r\n> Can't the ybuf just be a local object of this function?\r\n>\r\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode426\r\n> src/pkg/runtime/mgc0.c:426: xbuf = &scanbuffers->x[0];\r\n> Can't the xbuf just be a local object of this function?\r\n>\r\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode510\r\n> src/pkg/runtime/mgc0.c:510: PREFETCH(b);\r\n> I guess it makes little sense to prefetch right before dereference. Does\r\n> it provide any gain here?\r\n>\r\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode741\r\n> src/pkg/runtime/mgc0.c:741: scanblock(&wp, &wbuf, &nobj, false);\r\n> Why wp, wbuf, nobj become output parameters? It seems they are not used\r\n> after calling scanblock.\r\n>\r\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode938\r\n> src/pkg/runtime/mgc0.c:938: case MTypes_Bytes:\r\n> Why MTypes_Bytes is limited to at most 7 types? Why not 255?\r\n\r\n\r\nI think we want GC bitmap to eventually live there (not in this CL, of course).\r\n\r\n>\r\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode940\r\n> src/pkg/runtime/mgc0.c:940: addroot((Obj){(byte*)&s->types.data,\r\n> sizeof(void*), 0});\r\n> can't we add directly data instead of &data?\r\n>\r\n> https://codereview.appspot.com/6856121/\r\n",
			"disapproval": false,
			"date": "2012-12-11 10:01:48.646370",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/11 10:01:48, dvyukov wrote:\n> On Mon, Dec 10, 2012 at 12:19 PM,  <mailto:dvyukov@google.com> wrote:\n> >\n> https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode938\n> > src/pkg/runtime/mgc0.c:938: case MTypes_Bytes:\n> > Why MTypes_Bytes is limited to at most 7 types? Why not 255?\n> \n> \n> I think we want GC bitmap to eventually live there (not in this CL, of course).\n\nI think this may slow down the garbage collector.",
			"disapproval": false,
			"date": "2012-12-11 10:58:14.104820",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c#newcode88\nsrc/pkg/runtime/mgc0.c:88: #define SIZE (2*PageSize-sizeof(LFNode)-sizeof(uintptr))\nOn 2012/12/12 06:10:19, dvyukov wrote:\n> I think C requires # to be the first char of line.\n\nDone.\n\nhttps://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c#newcode161\nsrc/pkg/runtime/mgc0.c:161: // X and Y are structures used by intermediate buffers.\nOn 2012/12/11 17:27:40, rsc wrote:\n> Can we please use more descriptive names here? :-)\n> \n> PtrTarget and ObjTarget perhaps?\n\nX renamed to PtrTarget.\n\nobjbuf is used as a name in CL 6114046, so I renamed Y to BitTarget.\n\nhttps://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c#newcode848\nsrc/pkg/runtime/mgc0.c:848: addroot((Obj){data, edata - data, (uintptr)gcdata});\nOn 2012/12/11 17:27:40, rsc wrote:\n> This needs to compile with gccgo too. Does gcc support (Obj){...} yet? I am not\n> sure.\n\nIt does.",
			"disapproval": false,
			"date": "2012-12-12 10:47:09.547260",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dvyukov@google.com, remyoudompheng@gmail.com (cc: dave@cheney.net, golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-11 10:23:49.741740",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-12 06:10:10.505650",
			"approval": true
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode81\nsrc/pkg/runtime/mgc0.c:81: uintptr\tgc;\t// type info\nOn 2012/12/10 07:39:32, dvyukov wrote:\n> Can we call it ti/typ/tinfo?\n\nRenamed to \"ti\".\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode88\nsrc/pkg/runtime/mgc0.c:88: #define SIZE (2*PageSize-sizeof(LFNode)-sizeof(uintptr))\nOn 2012/12/10 07:39:32, dvyukov wrote:\n> It was 2/4K, and now it's 8K, right? Why?\n\nsizeof(Obj) is bigger than sizeof(byte*). I tried to keep the number of elements about the same.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode176\nsrc/pkg/runtime/mgc0.c:176: uintptr gc;\nOn 2012/12/10 07:39:32, dvyukov wrote:\n> Can we call it ti/typ/tinfo?\n\nDone.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode210\nsrc/pkg/runtime/mgc0.c:210: flushxbuf(struct X *xbuf, uintptr n, Obj **_wp, Workbuf **_wbuf, uintptr *_nobj, struct Y *ybuf)\nOn 2012/12/10 08:19:36, dvyukov wrote:\n> Can't the ybuf just be a local object of this function?\n\nIt may result in too many calls to runtime\u00b7newstack().\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode426\nsrc/pkg/runtime/mgc0.c:426: xbuf = &scanbuffers->x[0];\nOn 2012/12/10 08:19:36, dvyukov wrote:\n> Can't the xbuf just be a local object of this function?\n\nThe increased stack size may cause too many stack reallocations in functions called from scanblock(). runtime\u00b7gc() sets the stack size to StackBig.\n\nIt would be possible to use local objects and avoid stack reallocations if we preallocate 4*StackBig or more.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode510\nsrc/pkg/runtime/mgc0.c:510: PREFETCH(b);\nOn 2012/12/10 08:19:36, dvyukov wrote:\n> I guess it makes little sense to prefetch right before dereference. Does it\n> provide any gain here?\n\nMoved to flushxbuf().\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode741\nsrc/pkg/runtime/mgc0.c:741: scanblock(&wp, &wbuf, &nobj, false);\nOn 2012/12/10 08:19:36, dvyukov wrote:\n> Why wp, wbuf, nobj become output parameters? It seems they are not used after\n> calling scanblock.\n\nThe unnecessary indirection has been removed.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode892\nsrc/pkg/runtime/mgc0.c:892: if(!markonly(sp))\nOn 2012/12/10 07:39:32, dvyukov wrote:\n> This this marking is required now? Is here a bug now?\n> What is it !markonly? It would expect adding a root if it is marked.\n\nThe line has been removed.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode926\nsrc/pkg/runtime/mgc0.c:926: addroot((Obj){bss, ebss - bss, (uintptr)gcbss});\nOn 2012/12/10 07:39:32, dvyukov wrote:\n> It was split into smaller blocks for load-balancing purposes. It should not be\n> submitted as a single block.\n\nComputing the splitpoints is complicated. It requires changes to the linker (src/cmd/ld). I added a TODO to this line.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode938\nsrc/pkg/runtime/mgc0.c:938: case MTypes_Bytes:\nOn 2012/12/10 08:19:36, dvyukov wrote:\n> Why MTypes_Bytes is limited to at most 7 types? Why not 255?\n\n255 types requires 1 kilobyte more memory.\n\nThere is a linear search which goes through the 7 types. 255 types would mean that the search needs to complete in O(log N), which means a different search and insertion algorithm.\n\n7 types per MSpan seems to be a fairly good match for the programs I tested. 255 distinct types in a MSpan is virtually impossible.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode939\nsrc/pkg/runtime/mgc0.c:939: if(!markonly((byte*)&s->types.data))\nOn 2012/12/10 07:39:32, dvyukov wrote:\n> Is it really !markonly?\n\nThe line has been removed.\n\nhttps://codereview.appspot.com/6856121/diff/16001/src/pkg/runtime/mgc0.c#newcode940\nsrc/pkg/runtime/mgc0.c:940: addroot((Obj){(byte*)&s->types.data, sizeof(void*), 0});\nOn 2012/12/10 08:19:36, dvyukov wrote:\n> can't we add directly data instead of &data?\n\nNo.",
			"disapproval": false,
			"date": "2012-12-11 10:25:54.380380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/6856121/diff/26001/src/pkg/runtime/mgc0.c#newcode88\nsrc/pkg/runtime/mgc0.c:88: #define SIZE (2*PageSize-sizeof(LFNode)-sizeof(uintptr))\nI think C requires # to be the first char of line.",
			"disapproval": false,
			"date": "2012-12-12 06:10:19.404170",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dvyukov@google.com, remyoudompheng@gmail.com (cc: dave@cheney.net, golang-dev@googlegroups.com, minux.ma@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-12 10:47:06.135190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-16 23:46:46.241460",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=87637f1ff532 ***\n\nruntime: struct Obj in mgc0.c and buffers in scanblock()\n\nDetails:\n\n- This CL is the conceptual skeleton of code found in CL 6114046\n\n- The garbage collector uses struct Obj to specify memory blocks\n\n- scanblock() is putting found memory blocks into an intermediate buffer\n  (xbuf) before adding/flushing them to the main work buffer (wbuf)\n\n- The main loop in scanblock() is replaced with a skeleton code that\n  in the future will be able to recognize the type of objects and\n  thus will improve the garbage collector's precision.\n  For now, all objects are simply sequences of pointers so\n  the precision of the garbage collector remains unchanged.\n\n- The code plugs .gcdata and .gcbss sections into the garbage collector.\n  scanblock() in this CL is unable to make any use of this.\n\nR=rsc, dvyukov, remyoudompheng\nCC=dave, golang-dev, minux.ma\nhttps://codereview.appspot.com/6856121\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-12-17 00:32:10.375390",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/17 00:32:10, rsc wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=87637f1ff532 ***\n> \n> runtime: struct Obj in mgc0.c and buffers in scanblock()\n> \n> Details:\n> \n> - This CL is the conceptual skeleton of code found in CL 6114046\n> \n> - The garbage collector uses struct Obj to specify memory blocks\n> \n> - scanblock() is putting found memory blocks into an intermediate buffer\n>   (xbuf) before adding/flushing them to the main work buffer (wbuf)\n\nI forgot to replace (xbuf) with (ptrbuf) in the comment of this CL.\n\n> - The main loop in scanblock() is replaced with a skeleton code that\n>   in the future will be able to recognize the type of objects and\n>   thus will improve the garbage collector's precision.\n>   For now, all objects are simply sequences of pointers so\n>   the precision of the garbage collector remains unchanged.\n> \n> - The code plugs .gcdata and .gcbss sections into the garbage collector.\n>   scanblock() in this CL is unable to make any use of this.\n> \n> R=rsc, dvyukov, remyoudompheng\n> CC=dave, golang-dev, minux.ma\n> https://codereview.appspot.com/6856121\n> \n> Committer: Russ Cox <mailto:rsc@golang.org>",
			"disapproval": false,
			"date": "2012-12-17 07:09:57.559290",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6856121: runtime: struct Obj in mgc0.c and buffers in scanblock()",
	"created": "2012-11-30 08:29:42.562500",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		16001,
		26001,
		32001
	],
	"modified": "2012-12-17 11:43:28.053090",
	"closed": true,
	"issue": 6856121
}