{
	"description": "gc: generate garbage collection info for types",
	"cc": [
		"rsc@golang.org",
		"nigeltao@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"devon.odell@gmail.com",
		"remyoudompheng@gmail.com",
		"bobbypowers@gmail.com"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-04 12:38:49.362227",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-04 13:04:22.840578",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-18 13:42:39.263844",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would like to obtain information about the progress of this code review.",
			"disapproval": false,
			"date": "2012-07-26 11:05:53.580020",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/26 11:05:53, atom wrote:\n> I would like to obtain information about the progress of this code review.\n\nSummer vacations delay reviews.\n\nPeter",
			"disapproval": false,
			"date": "2012-07-26 15:54:50.684730",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not really qualified to review this change, but can you give an example .go file that defines a bunch of types, and a list of the DATA directives that are generated by this change? That would help me understand it.\n\nApologies if you've already described this on go-dev. I did a quick scan of the mailing list but didn't find anything.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1032\nsrc/cmd/gc/reflect.c:1032: // struct { str *byte; int32 len; }\nbyte* str\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1135\nsrc/cmd/gc/reflect.c:1135: if(0) {\nDelete?",
			"disapproval": false,
			"date": "2012-07-27 06:49:26.119910",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/26 11:05:53, atom wrote:\n> I would like to obtain information about the progress of this code review.\n\nI have been offline on vacation for a few weeks and then it took me a few weeks to get caught up. I have about 100 threads in my rsc@golang.org mailbox that need attention, and this is one of them. I am planning to work through them in the next week or so.",
			"disapproval": false,
			"date": "2012-07-30 01:52:28.962210",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode971\nsrc/cmd/gc/reflect.c:971: if( t->align > 0 && ((*off) % t->align) != 0 )\nOn 2012/08/05 22:00:56, rsc wrote:\n> s/( /(/\n> s/ )/)/\n> \n> No need for parens around unary operator *off.\n> s/(*off)/*off/\n> Same below.\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode998\nsrc/cmd/gc/reflect.c:998: if(t->type->etype == TANY || t->type->etype == TUINT8) {\nOn 2012/08/05 22:00:56, rsc wrote:\n> Can merge with next if condition too, right? Also, how can == TANY happen here?\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1032\nsrc/cmd/gc/reflect.c:1032: // struct { str *byte; int32 len; }\nOn 2012/07/27 06:49:26, nigeltao wrote:\n> byte* str\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1037\nsrc/cmd/gc/reflect.c:1037: ot = duintptr(s, ot, (*off)+0);\nOn 2012/08/05 22:00:56, rsc wrote:\n> s/(*off)+0/*off/\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1069\nsrc/cmd/gc/reflect.c:1069: ot = duintptr(s, ot, (*off)+0);\nOn 2012/08/05 22:00:56, rsc wrote:\n> s/(*off)+0/*off/\n> More below.\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1084\nsrc/cmd/gc/reflect.c:1084: for(a=0; a<t->bound; a++) {\nOn 2012/08/05 22:00:56, rsc wrote:\n> What if we get here with stack_size >= GC_STACK_CAPACITY? Then t->bound could be\n> arbitrarily large, and this will generate an unbounded amount of extra gc info.\n> Should this case be a compile error instead?\n\nYes, in this case t->bound can be arbitrarily large but the probability of this causing issues is very small.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1106\nsrc/cmd/gc/reflect.c:1106: fatal(\"dgcsym1: unexpected type %T\", t);\nOn 2012/08/05 22:00:56, rsc wrote:\n> If you make this the default case in the switch ,then you can use break in a lot\n> of places in the switch to reduce the large amount of nesting; there would be a\n> return ot here instead.\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1135\nsrc/cmd/gc/reflect.c:1135: if(0) {\nOn 2012/07/27 06:49:26, nigeltao wrote:\n> Delete?\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/pkg/runtime/mgc0.h\nFile src/pkg/runtime/mgc0.h (right):\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/pkg/runtime/mgc0.h#newcode6\nsrc/pkg/runtime/mgc0.h:6: \nOn 2012/08/05 22:00:56, rsc wrote:\n> Please add a large comment explaining the format of the byte code sequences and\n> the meaning of each of these instructions.\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/pkg/runtime/mgc0.h#newcode24\nsrc/pkg/runtime/mgc0.h:24: GC_STACK_CAPACITY = 8-2,\nOn 2012/08/05 22:00:56, rsc wrote:\n> Also the meaning of this constant.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-08 09:42:22.312330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode971\nsrc/cmd/gc/reflect.c:971: if( t->align > 0 && ((*off) % t->align) != 0 )\ns/( /(/\ns/ )/)/\n\nNo need for parens around unary operator *off.\ns/(*off)/*off/\nSame below.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode998\nsrc/cmd/gc/reflect.c:998: if(t->type->etype == TANY || t->type->etype == TUINT8) {\nCan merge with next if condition too, right? Also, how can == TANY happen here?\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1037\nsrc/cmd/gc/reflect.c:1037: ot = duintptr(s, ot, (*off)+0);\ns/(*off)+0/*off/\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1069\nsrc/cmd/gc/reflect.c:1069: ot = duintptr(s, ot, (*off)+0);\ns/(*off)+0/*off/\nMore below.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1084\nsrc/cmd/gc/reflect.c:1084: for(a=0; a<t->bound; a++) {\nWhat if we get here with stack_size >= GC_STACK_CAPACITY? Then t->bound could be arbitrarily large, and this will generate an unbounded amount of extra gc info. Should this case be a compile error instead?\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/cmd/gc/reflect.c#newcode1106\nsrc/cmd/gc/reflect.c:1106: fatal(\"dgcsym1: unexpected type %T\", t);\nIf you make this the default case in the switch ,then you can use break in a lot of places in the switch to reduce the large amount of nesting; there would be a return ot here instead.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/pkg/runtime/mgc0.h\nFile src/pkg/runtime/mgc0.h (right):\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/pkg/runtime/mgc0.h#newcode6\nsrc/pkg/runtime/mgc0.h:6: \nPlease add a large comment explaining the format of the byte code sequences and the meaning of each of these instructions.\n\nhttp://codereview.appspot.com/6290043/diff/8001/src/pkg/runtime/mgc0.h#newcode24\nsrc/pkg/runtime/mgc0.h:24: GC_STACK_CAPACITY = 8-2,\nAlso the meaning of this constant.",
			"disapproval": false,
			"date": "2012-08-05 22:00:56.473040",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/30001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/30001/src/cmd/gc/reflect.c#newcode1134\nsrc/cmd/gc/reflect.c:1134: ot = duintptr(s, ot, GC_END);\nOn 2012/08/16 01:05:09, nigeltao wrote:\n> Move this up a few lines? Otherwise it looks like the position of the GC_END\n> depends on the rounding.\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/30001/src/pkg/runtime/mgc0.h\nFile src/pkg/runtime/mgc0.h (right):\n\nhttp://codereview.appspot.com/6290043/diff/30001/src/pkg/runtime/mgc0.h#newcode15\nsrc/pkg/runtime/mgc0.h:15: //   size     Size of an array\nOn 2012/08/16 01:05:09, nigeltao wrote:\n> How about\n> //   len      Length (number of elements) of an array\n> since size is confusable for number of bytes.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-16 16:19:19.705530",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1074\nsrc/cmd/gc/reflect.c:1074: } else {\nMake this an \"else if\" and outdent lines 1076-1092?\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1084\nsrc/cmd/gc/reflect.c:1084: *off += t->bound * t->type->width;\nIs this just the same as\n*off += t->width;\nor should line 1091 instead be\n*off += t->bound * t->type->width;\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1100\nsrc/cmd/gc/reflect.c:1100: *off += (fieldoffset - o);\nUnnecessary parens.\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1104\nsrc/cmd/gc/reflect.c:1104: *off += (t->width - o);\nUnnecessary parens.\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/pkg/runtime/mgc0.h\nFile src/pkg/runtime/mgc0.h (right):\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/pkg/runtime/mgc0.h#newcode23\nsrc/pkg/runtime/mgc0.h:23: GC_CALL,        // Call a subroutine. Args: (off, objgc)\nIs this unused? Or does a follow-up patch use GC_CALL?",
			"disapproval": false,
			"date": "2012-08-09 06:54:33.641500",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1074\nsrc/cmd/gc/reflect.c:1074: } else {\nOn 2012/08/09 06:54:33, nigeltao wrote:\n> Make this an \"else if\" and outdent lines 1076-1092?\n\nThe current indentation corresponds to:\n\nif(isslice(t)) {\n  HANDLE SLICE\n} else {\n  HANDLE ARRAY\n}\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1084\nsrc/cmd/gc/reflect.c:1084: *off += t->bound * t->type->width;\nOn 2012/08/09 06:54:33, nigeltao wrote:\n> Is this just the same as\n> *off += t->width;\n> or should line 1091 instead be\n> *off += t->bound * t->type->width;\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1100\nsrc/cmd/gc/reflect.c:1100: *off += (fieldoffset - o);\nOn 2012/08/09 06:54:33, nigeltao wrote:\n> Unnecessary parens.\n\nDone.\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/cmd/gc/reflect.c#newcode1104\nsrc/cmd/gc/reflect.c:1104: *off += (t->width - o);\nOn 2012/08/09 06:54:33, nigeltao wrote:\n> Unnecessary parens.\n\nDone.",
			"disapproval": false,
			"date": "2012-08-10 11:00:34.477430",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/20001/src/pkg/runtime/mgc0.h\nFile src/pkg/runtime/mgc0.h (right):\n\nhttp://codereview.appspot.com/6290043/diff/20001/src/pkg/runtime/mgc0.h#newcode23\nsrc/pkg/runtime/mgc0.h:23: GC_CALL,        // Call a subroutine. Args: (off, objgc)\nOn 2012/08/09 06:54:33, nigeltao wrote:\n> Is this unused? Or does a follow-up patch use GC_CALL?\nit's used in http://codereview.appspot.com/6281048/",
			"disapproval": false,
			"date": "2012-08-09 07:14:24.803600",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-15 15:35:35.050920",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-16 16:19:35.323870",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm happy with this change, but let rsc give the definitive LGTM.\n\nhttp://codereview.appspot.com/6290043/diff/30001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/30001/src/cmd/gc/reflect.c#newcode1134\nsrc/cmd/gc/reflect.c:1134: ot = duintptr(s, ot, GC_END);\nMove this up a few lines? Otherwise it looks like the position of the GC_END depends on the rounding.\n\nhttp://codereview.appspot.com/6290043/diff/30001/src/pkg/runtime/mgc0.h\nFile src/pkg/runtime/mgc0.h (right):\n\nhttp://codereview.appspot.com/6290043/diff/30001/src/pkg/runtime/mgc0.h#newcode15\nsrc/pkg/runtime/mgc0.h:15: //   size     Size of an array\nHow about\n//   len      Length (number of elements) of an array\nsince size is confusable for number of bytes.",
			"disapproval": false,
			"date": "2012-08-16 01:05:09.582470",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow. I suppose it is an irrelevant detail, but what is the\r\ncorresponding size increase of binaries generated with this change?\r\nType information is a somewhat large part of the executables.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2012-09-12 20:12:18.415460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/38001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/38001/src/cmd/gc/reflect.c#newcode1094\nsrc/cmd/gc/reflect.c:1094: ot = duintptr(s, ot, GC_REGION);\nThis is fine. I'd like to test it if possible. Doesn't something like: [2][2][2][2][2][2][2][2][2][2]*int run into this?\n\nRuss",
			"disapproval": false,
			"date": "2012-09-10 15:20:27.417860",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sweet! Great work!\r\n\r\n2012/9/12 Russ Cox <rsc@golang.org>:\r\n> LGTM\r\n>\r\n> Thanks very much for your patience. On to the next one.\r\n",
			"disapproval": false,
			"date": "2012-09-12 16:18:36.534870",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would like to obtain information about the progress of this code review.",
			"disapproval": false,
			"date": "2012-09-01 10:30:52.409020",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6290043/diff/18002/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttps://codereview.appspot.com/6290043/diff/18002/src/cmd/gc/reflect.c#newcode1086\nsrc/cmd/gc/reflect.c:1086: for(a=0; a<t->bound; a++) {\nOn 2012/09/01 17:13:12, rsc wrote:\n> This still bothers me (for t->bound >= 2). I would rather make this a\n> compile-time error than emit an object file of arbitrarily large size. That will\n> keep us honest. How about this:\n> \n> if(t->bound < 1 || !haspointers(t->type)) {\n>     *off += t->width;\n> } else if(t->bound == 1) {\n>     ot = dgcsym1(s, ot, t->type, off, stack_size);\n> } else {\n>     if(stack_size >= GC_STACK_CAPACITY)\n>         yyerror(\"arrays too deeply nested for garbage collection\");\n>     ... GC_ARRAY_START ... GC_ARRAY_NEXT\n> }\n> \n> \n\nA new GC_REGION instruction has been added, although the problem is that according to my knowledge no actual Go program in existence can cause the compiler to reach the codepath in reflect.c which uses GC_REGION. So, this codepath is not testable - if this is undesirable I can create a test case for this, or undo GC_REGION and call yyerror() like you suggested.",
			"disapproval": false,
			"date": "2012-09-03 14:33:16.572690",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Sep 1, 2012 at 6:30 AM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> I would like to obtain information about the progress of this code\r\n> review.\r\n\r\nI have just yesterday gotten back to code reviews after an unplanned\r\nabsence. I handled a bunch of easy ones yesterday, and I plan to look\r\nat your garbage collection CLs and Mikio's networking CLs next week.\r\nThey are significantly less easy so I saved them for a second pass.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-01 14:06:32.378840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6290043/diff/18002/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/6290043/diff/18002/src/cmd/gc/reflect.c#newcode1086\nsrc/cmd/gc/reflect.c:1086: for(a=0; a<t->bound; a++) {\nThis still bothers me (for t->bound >= 2). I would rather make this a compile-time error than emit an object file of arbitrarily large size. That will keep us honest. How about this:\n\nif(t->bound < 1 || !haspointers(t->type)) {\n    *off += t->width;\n} else if(t->bound == 1) {\n    ot = dgcsym1(s, ot, t->type, off, stack_size);\n} else {\n    if(stack_size >= GC_STACK_CAPACITY)\n        yyerror(\"arrays too deeply nested for garbage collection\");\n    ... GC_ARRAY_START ... GC_ARRAY_NEXT\n}",
			"disapproval": false,
			"date": "2012-09-01 17:13:12.430670",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-03 14:25:11.374440",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"devon.odell@gmail.com",
				"remyoudompheng@gmail.com",
				"bobbypowers@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/12 20:12:18, remyoudompheng wrote:\n> Wow. I suppose it is an irrelevant detail, but what is the\n> corresponding size increase of binaries generated with this change?\n> Type information is a somewhat large part of the executables.\n> \n> R\u00e9my.\n\nThere is an additional increase introduced by https://codereview.appspot.com/6281048/. 6281048 is the next change to be merged. The total increase in size is about 5% on average.",
			"disapproval": false,
			"date": "2012-09-13 11:24:16.255460",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-11 08:25:56.037890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThanks very much for your patience. On to the next one.\r\n",
			"disapproval": false,
			"date": "2012-09-12 16:08:40.928640",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=56f5a223dcd7 ***\n\ngc: generate garbage collection info for types\n\nR=rsc, nigeltao, minux.ma\nCC=golang-dev\nhttp://codereview.appspot.com/6290043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-09-12 16:08:32.888640",
			"approval": false
		},
		{
			"sender": "bobbypowers@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For my application there is a 4% increase in size, from 4.6 to 4.8 MB.\r\n\r\nOn Wed, Sep 12, 2012 at 4:12 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> Wow. I suppose it is an irrelevant detail, but what is the\r\n> corresponding size increase of binaries generated with this change?\r\n> Type information is a somewhat large part of the executables.\r\n>\r\n> R\u00e9my.\r\n",
			"disapproval": false,
			"date": "2012-09-13 02:53:21.931460",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6290043: gc: generate garbage collection info for types",
	"created": "2012-06-04 12:38:42.911620",
	"patchsets": [
		1,
		3001,
		8001,
		20001,
		27001,
		30001,
		18002,
		38001,
		42001
	],
	"modified": "2012-09-13 11:24:16.703000",
	"closed": true,
	"issue": 6290043
}