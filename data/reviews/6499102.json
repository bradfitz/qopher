{
	"description": "go/build: reject empty strings in Import\n\nFixes issue 3889.",
	"cc": [
		"rsc@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> Functions that return errors usually do that in preference to panicking.\r\n>\r\n> Do they? I have seen both in practice, and my understanding is that\r\n> inputs that are just plain wrong should cause a panic.\r\n\r\nWe panic in functions that get plain wrong inputs only when there is\r\nno way to return an error. For example os.Open(\"\") does not panic. As\r\nanother example, we just changed syscall.StringBytePtr to panic on an\r\ninvalid input, but only because we had no way to return an error from\r\nit in the current API. But we also introduced BytePtrFromString which\r\ndoes return an error, and then we deprecated StringBytePtr in favor of\r\nit.\r\n\r\nIf you know of a function with an error return that panics instead of\r\nusing the error return, please point it out. We should fix it.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-13 14:22:57.823990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-13 14:24:28.503510",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6499102/diff/7002/src/pkg/go/build/build.go\nFile src/pkg/go/build/build.go (right):\n\nhttp://codereview.appspot.com/6499102/diff/7002/src/pkg/go/build/build.go#newcode352\nsrc/pkg/go/build/build.go:352: panic(`Can't import \"\".`)\npanic(`go/build: tried to Import invalid path \"\"`)",
			"disapproval": false,
			"date": "2012-09-13 00:35:34.183990",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/13 00:35:34, adg wrote:\n> http://codereview.appspot.com/6499102/diff/7002/src/pkg/go/build/build.go\n> File src/pkg/go/build/build.go (right):\n> \n> http://codereview.appspot.com/6499102/diff/7002/src/pkg/go/build/build.go#newcode352\n> src/pkg/go/build/build.go:352: panic(`Can't import \"\".`)\n> panic(`go/build: tried to Import invalid path \"\"`)\n\nactually, a simpler message:\n\npanic(`go/build: cannot import empty path`)",
			"disapproval": false,
			"date": "2012-09-13 00:37:05.422820",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-13 13:49:53.864580",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=77aaafa3b2e2 ***\n\ngo/build: reject empty strings in Import\n\nFixes issue 3889.\n\nR=rsc, adg\nCC=golang-dev\nhttp://codereview.appspot.com/6499102\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-09-13 14:26:15.626100",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My intuition suggests that this should probably be a panic instead of\r\nan error return.\r\n",
			"disapproval": false,
			"date": "2012-09-12 23:36:58.599840",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-12 20:24:31.616050",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-13 00:30:20.015960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/12 23:36:58, adg wrote:\n> My intuition suggests that this should probably be a panic instead of\n> an error return.\n\nCan you explain why? I would have expected\n\nreturn p, fmt.Errorf(\"import %q: invalid import path\", path)\n\nFunctions that return errors usually do that in preference to panicking.",
			"disapproval": false,
			"date": "2012-09-13 03:10:19.836330",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 13 September 2012 13:10,  <rsc@golang.org> wrote:\r\n> On 2012/09/12 23:36:58, adg wrote:\r\n>>\r\n>> My intuition suggests that this should probably be a panic instead of\r\n>> an error return.\r\n>\r\n>\r\n> Can you explain why? I would have expected\r\n>\r\n> return p, fmt.Errorf(\"import %q: invalid import path\", path)\r\n>\r\n> Functions that return errors usually do that in preference to panicking.\r\n\r\nDo they? I have seen both in practice, and my understanding is that\r\ninputs that are just plain wrong should cause a panic.\r\n\r\nBut I'm on the fence in this particular case, so I'll defer to your judgement.\r\n",
			"disapproval": false,
			"date": "2012-09-13 03:18:08.928120",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Sep 12, 2012 at 8:36 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n> My intuition suggests that this should probably be a panic instead of\r\n> an error return.\r\n\r\nIndeed. One tool that uses this function is godoc. This is how it's\r\naffected by issue 3889:\r\n\r\nNo panic:\r\n\r\n% godoc \"\"\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xb code=0x1 addr=0x8 pc=0x1d22e]\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/Users/f/lib/go/src/cmd/godoc/main.go:353 +0x340e\r\n\r\ngoroutine 2 [syscall]:\r\ncreated by runtime.main\r\n\t/Users/f/lib/go/src/pkg/runtime/proc.c:220\r\n\r\ngoroutine 14 [runnable]:\r\ntext/template/parse.lexText(0xf840185070, 0x1c1da0, 0x397e0, 0xf840185070)\r\n\t/Users/f/lib/go/src/pkg/text/template/parse/lex.go:227 +0x345\r\ntext/template/parse.(*lexer).run(0xf840185070, 0x0)\r\n\t/Users/f/lib/go/src/pkg/text/template/parse/lex.go:197 +0x3b\r\ncreated by text/template/parse.lex\r\n\t/Users/f/lib/go/src/pkg/text/template/parse/lex.go:190 +0x113\r\n\r\nWith panic:\r\n\r\n% godoc \"\"\r\npanic: Can't import \"\".\r\n\r\ngoroutine 1 [running]:\r\ngo/build.(*Context).Import(0x5e9050, 0x7fff5fbffa5e, 0xf800000000,\r\n0x3cb95c, 0xf800000000, ...)\r\n\t/Users/f/lib/go/src/pkg/go/build/build.go:352 +0x63\r\n----- stack segment boundary -----\r\ngo/build.Import(0x7fff5fbffa5e, 0x7fff00000000, 0x3cb95c, 0x0,\r\n0xf800000001, ...)\r\n\t/Users/f/lib/go/src/pkg/go/build/build.go:658 +0x5d\r\nmain.main()\r\n\t/Users/f/lib/go/src/cmd/godoc/main.go:353 +0x33f9\r\n\r\nWe also could fix godoc to stop ignoring errors returned by\r\nbuild.Import, but panicking fits too.\r\n",
			"disapproval": false,
			"date": "2012-09-13 00:30:57.633740",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/13 03:18:08, adg wrote:\n> On 13 September 2012 13:10,  <mailto:rsc@golang.org> wrote:\n> > On 2012/09/12 23:36:58, adg wrote:\n> >>\n> >> My intuition suggests that this should probably be a panic instead of\n> >> an error return.\n> >\n> >\n> > Can you explain why? I would have expected\n> >\n> > return p, fmt.Errorf(\"import %q: invalid import path\", path)\n> >\n> > Functions that return errors usually do that in preference to panicking.\n> \n> Do they? I have seen both in practice, and my understanding is that\n> inputs that are just plain wrong should cause a panic.\n> \n> But I'm on the fence in this particular case, so I'll defer to your judgement.\n\nThinking again about it, I realize that it should be an error return. go/build is a package, a library, that provides an exported function with the signature: Import(string, string, ImportMode) (*Package, error).\n\nIf someone writes a program that can handle errors returned by Import, and continue to run or even give a better error message for the user (like godoc should do), the package function should return an error, not an unrecovered panic.\n\nAs discussed in go-nuts multiple times, a library should not issue an unrecovered panic. One exception is regexp.MustCompile, because it receives a constant defined by the developer (like Import would do, in the normal case). If I'd write a command line tool that compiles regular expressions, I would prefer regexp.Compile over regexp.MustCompile.\n\nFor build.Import, having a `MustImport` doesn't make sense, just `Import` that returns a non-nil error in case of failures.",
			"disapproval": false,
			"date": "2012-09-13 13:49:22.521620",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nhttps://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go\nFile src/pkg/go/build/build_test.go (right):\n\nhttps://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go#newcode67\nsrc/pkg/go/build/build_test.go:67: t.Fatal(\"Import should not accept empty strings.\")\nOn 2012/09/13 14:05:51, rsc wrote:\n> Use Go syntax to explain what happened.\n> \n> t.Fatalf(`Import(\"\") returned nil error`)\n\nDone.\n\nhttps://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go#newcode70\nsrc/pkg/go/build/build_test.go:70: t.Fatal(\"Import should return non-nil package containing partial information.\")\nOn 2012/09/13 14:05:51, rsc wrote:\n> t.Fatal(`Import(\"\") returned nil Package`)\n\nDone.\n\nhttps://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go#newcode73\nsrc/pkg/go/build/build_test.go:73: t.Fatalf(`Wrong import path, want \"\", got %s.`, p.ImportPath)\nOn 2012/09/13 14:05:51, rsc wrote:\n> Please reverse the message to print in the same order you wrote the if\n> statement.\n> \n> t.Fatalf(\"ImportPath=%q, want %q\", p.ImportPath, \"\")\n\nDone.",
			"disapproval": false,
			"date": "2012-09-13 14:09:41.004550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good except for test nits. Thanks.\n\nhttp://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go\nFile src/pkg/go/build/build_test.go (right):\n\nhttp://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go#newcode67\nsrc/pkg/go/build/build_test.go:67: t.Fatal(\"Import should not accept empty strings.\")\nUse Go syntax to explain what happened.\n\nt.Fatalf(`Import(\"\") returned nil error`)\n\nhttp://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go#newcode70\nsrc/pkg/go/build/build_test.go:70: t.Fatal(\"Import should return non-nil package containing partial information.\")\nt.Fatal(`Import(\"\") returned nil Package`)\n\nhttp://codereview.appspot.com/6499102/diff/5003/src/pkg/go/build/build_test.go#newcode73\nsrc/pkg/go/build/build_test.go:73: t.Fatalf(`Wrong import path, want \"\", got %s.`, p.ImportPath)\nPlease reverse the message to print in the same order you wrote the if statement.\n\nt.Fatalf(\"ImportPath=%q, want %q\", p.ImportPath, \"\")",
			"disapproval": false,
			"date": "2012-09-13 14:05:51.222500",
			"approval": false
		}
	],
	"owner_email": "franciscossouza@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "fss",
	"subject": "code review 6499102: go/build: reject empty strings in Import",
	"created": "2012-09-12 20:23:32.381050",
	"patchsets": [
		1,
		2001,
		5001,
		6004,
		7002,
		5002,
		5003,
		14002
	],
	"modified": "2012-09-13 14:27:08.670790",
	"closed": true,
	"issue": 6499102
}