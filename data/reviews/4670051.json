{
	"description": "crypto/openpgp: use new(bytes.Buffer) where possible",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "m@capitanio.org",
			"recipients": [
				"agl@golang.org",
				"bradfitz@golang.org",
				"m@capitanio.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\ngofix?\ngofmt -s?\n\ngit grep \"NewBuffer(nil)\"\npkg/asn1/marshal.go:    return &forkableWriter{bytes.NewBuffer(nil), nil, nil}\npkg/bufio/bufio_test.go:        l, _ := NewReaderSize(bytes.NewBuffer(nil), 10)\npkg/compress/flate/deflate_test.go:     buffer := bytes.NewBuffer(nil)\npkg/compress/lzw/reader_test.go:        b := bytes.NewBuffer(nil)\npkg/compress/lzw/reader_test.go:        compressed := bytes.NewBuffer(nil)\npkg/compress/zlib/writer_test.go:       buf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/armor/armor_test.go: buf = bytes.NewBuffer(nil)\npkg/crypto/openpgp/canonical_text_test.go:      r := recordingHash{bytes.NewBuffer(nil)}\npkg/crypto/openpgp/packet/packet_test.go:       b = bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/packet_test.go:               buf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/packet_test.go:       buf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/packet_test.go:       copyBuf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/private_key.go:       buf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/private_key.go:       privateKeyBuf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/public_key_test.go:           serializeBuf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/symmetric_key_encrypted_test.go:      buf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/symmetrically_encrypted_test.go:      buf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/packet/symmetrically_encrypted_test.go:      contentsCopy := bytes.NewBuffer(nil)\npkg/crypto/openpgp/s2k/s2k_test.go:     buf := bytes.NewBuffer(nil)\npkg/crypto/openpgp/write_test.go:       out := bytes.NewBuffer(nil)\npkg/crypto/openpgp/write_test.go:       out := bytes.NewBuffer(nil)\npkg/crypto/openpgp/write_test.go:       out := bytes.NewBuffer(nil)\npkg/crypto/openpgp/write_test.go:       w := bytes.NewBuffer(nil)\npkg/crypto/openpgp/write_test.go:       w = bytes.NewBuffer(nil)\npkg/crypto/openpgp/write_test.go:       messageBuf := bytes.NewBuffer(nil)\npkg/encoding/hex/hex.go:        buf := bytes.NewBuffer(nil)\npkg/encoding/hex/hex_test.go:           out := bytes.NewBuffer(nil)\npkg/encoding/pem/pem.go:        buf := bytes.NewBuffer(nil)\npkg/encoding/pem/pem_test.go:           buf := bytes.NewBuffer(nil)\npkg/encoding/pem/pem_test.go:           buf := bytes.NewBuffer(nil)\npkg/html/escape.go:     buf := bytes.NewBuffer(nil)\npkg/html/parse_test.go: b := bytes.NewBuffer(nil)\npkg/html/token.go:      buf := bytes.NewBuffer(nil)\npkg/html/token_test.go: result := bytes.NewBuffer(nil)\npkg/image/jpeg/writer_test.go:          buf := bytes.NewBuffer(nil)\npkg/image/png/writer_test.go:   b := bytes.NewBuffer(nil)\npkg/template/template_test.go:                  buf := bytes.NewBuffer(nil)\npkg/xml/marshal_test.go:                buf := bytes.NewBuffer(nil)\npkg/xml/marshal_test.go:                buf := bytes.NewBuffer(nil)\npkg/xml/marshal_test.go:        buf := bytes.NewBuffer(nil)",
			"disapproval": false,
			"date": "2011-07-09 09:23:14.971199",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-07-08 13:57:06.623015",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOn Fri, Jul 8, 2011 at 6:57 AM, <agl@golang.org> wrote:\n\n> Reviewers: bradfitz,\n>\n> Message:\n> Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> crypto/openpgp: use new(bytes.Buffer) where possible\n>\n> Please review this at http://codereview.appspot.com/**4670051/<http://codereview.appspot.com/4670051/>\n>\n> Affected files:\n>  M src/pkg/crypto/openpgp/**canonical_text_test.go\n>  M src/pkg/crypto/openpgp/packet/**packet_test.go\n>  M src/pkg/crypto/openpgp/packet/**private_key.go\n>  M src/pkg/crypto/openpgp/packet/**public_key_test.go\n>  M src/pkg/crypto/openpgp/packet/**symmetrically_encrypted_test.**go\n>  M src/pkg/crypto/openpgp/write_**test.go\n>\n>\n> Index: src/pkg/crypto/openpgp/**canonical_text_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/openpgp/**canonical_text_test.go\n> +++ b/src/pkg/crypto/openpgp/**canonical_text_test.go\n> @@ -32,7 +32,7 @@\n>\n>\n>  func testCanonicalText(t *testing.T, input, expected string) {\n> -       r := recordingHash{bytes.NewBuffer(**nil)}\n> +       r := recordingHash{new(bytes.**Buffer)}\n>        c := NewCanonicalTextHash(r)\n>        c.Write([]byte(input))\n>        result := c.Sum()\n> Index: src/pkg/crypto/openpgp/packet/**packet_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/openpgp/**packet/packet_test.go\n> +++ b/src/pkg/crypto/openpgp/**packet/packet_test.go\n> @@ -30,7 +30,7 @@\n>                t.Errorf(\"partial read failed n:%d err:%s\", n, err)\n>        }\n>\n> -       b = bytes.NewBuffer(nil)\n> +       b = new(bytes.Buffer)\n>        n, err = readFull(b, out[:3])\n>        if n != 0 || err != io.ErrUnexpectedEOF {\n>                t.Errorf(\"empty read failed n:%d err:%s\", n, err)\n> @@ -196,7 +196,7 @@\n>        lengths := []int{0, 1, 2, 64, 192, 193, 8000, 8384, 8385, 10000}\n>\n>        for _, length := range lengths {\n> -               buf := bytes.NewBuffer(nil)\n> +               buf := new(bytes.Buffer)\n>                serializeHeader(buf, tag, length)\n>                tag2, length2, _, err := readHeader(buf)\n>                if err != nil {\n> @@ -212,7 +212,7 @@\n>  }\n>\n>  func TestPartialLengths(t *testing.T) {\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        w := new(partialLengthWriter)\n>        w.w = noOpCloser{buf}\n>\n> @@ -236,7 +236,7 @@\n>        w.Close()\n>\n>        want := (maxChunkSize * (maxChunkSize + 1)) / 2\n> -       copyBuf := bytes.NewBuffer(nil)\n> +       copyBuf := new(bytes.Buffer)\n>        r := &partialLengthReader{buf, 0, true}\n>        m, err := io.Copy(copyBuf, r)\n>        if m != int64(want) {\n> Index: src/pkg/crypto/openpgp/packet/**private_key.go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/openpgp/**packet/private_key.go\n> +++ b/src/pkg/crypto/openpgp/**packet/private_key.go\n> @@ -113,14 +113,14 @@\n>\n>  func (pk *PrivateKey) Serialize(w io.Writer) (err os.Error) {\n>        // TODO(agl): support encrypted private keys\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        err = pk.PublicKey.**serializeWithoutHeaders(buf)\n>        if err != nil {\n>                return\n>        }\n>        buf.WriteByte(0 /* no encryption */ )\n>\n> -       privateKeyBuf := bytes.NewBuffer(nil)\n> +       privateKeyBuf := new(bytes.Buffer)\n>\n>        switch priv := pk.PrivateKey.(type) {\n>        case *rsa.PrivateKey:\n> Index: src/pkg/crypto/openpgp/packet/**public_key_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/openpgp/**packet/public_key_test.go\n> +++ b/src/pkg/crypto/openpgp/**packet/public_key_test.go\n> @@ -69,7 +69,7 @@\n>                        t.Errorf(\"#%d: failed to parse, got: %#v\", i,\n> packet)\n>                        continue\n>                }\n> -               serializeBuf := bytes.NewBuffer(nil)\n> +               serializeBuf := new(bytes.Buffer)\n>                err = pk.Serialize(serializeBuf)\n>                if err != nil {\n>                        t.Errorf(\"#%d: failed to serialize: %s\", i, err)\n> Index: src/pkg/crypto/openpgp/packet/**symmetrically_encrypted_test.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/openpgp/**packet/symmetrically_**encrypted_test.go\n> +++ b/src/pkg/crypto/openpgp/**packet/symmetrically_**encrypted_test.go\n> @@ -79,7 +79,7 @@\n>  const mdcPlaintextHex = \"**a302789c3b2d93c4e0eb9aba222835**\n> 39b3203335af44a134afb800c849cb**4c4de10200aff40b45d31432c80cb3**\n> 84299a0655966d6939dfdeed1dddf9**80\"\n>\n>  func TestSerialize(t *testing.T) {\n> -       buf := bytes.NewBuffer(nil)\n> +       buf := new(bytes.Buffer)\n>        c := CipherAES128\n>        key := make([]byte, c.KeySize())\n>\n> @@ -112,7 +112,7 @@\n>                return\n>        }\n>\n> -       contentsCopy := bytes.NewBuffer(nil)\n> +       contentsCopy := new(bytes.Buffer)\n>        _, err = io.Copy(contentsCopy, r)\n>        if err != nil {\n>                t.Errorf(\"error from io.Copy: %s\", err)\n> Index: src/pkg/crypto/openpgp/write_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/openpgp/**write_test.go\n> +++ b/src/pkg/crypto/openpgp/**write_test.go\n> @@ -16,7 +16,7 @@\n>\n>  func TestSignDetached(t *testing.T) {\n>        kring, _ := ReadKeyRing(readerFromHex(**testKeys1And2PrivateHex))\n> -       out := bytes.NewBuffer(nil)\n> +       out := new(bytes.Buffer)\n>        message := bytes.NewBufferString(**signedInput)\n>        err := DetachSign(out, kring[0], message)\n>        if err != nil {\n> @@ -28,7 +28,7 @@\n>\n>  func TestSignTextDetached(t *testing.T) {\n>        kring, _ := ReadKeyRing(readerFromHex(**testKeys1And2PrivateHex))\n> -       out := bytes.NewBuffer(nil)\n> +       out := new(bytes.Buffer)\n>        message := bytes.NewBufferString(**signedInput)\n>        err := DetachSignText(out, kring[0], message)\n>        if err != nil {\n> @@ -40,7 +40,7 @@\n>\n>  func TestSignDetachedDSA(t *testing.T) {\n>        kring, _ := ReadKeyRing(readerFromHex(**dsaTestKeyPrivateHex))\n> -       out := bytes.NewBuffer(nil)\n> +       out := new(bytes.Buffer)\n>        message := bytes.NewBufferString(**signedInput)\n>        err := DetachSign(out, kring[0], message)\n>        if err != nil {\n> @@ -61,7 +61,7 @@\n>                return\n>        }\n>\n> -       w := bytes.NewBuffer(nil)\n> +       w := new(bytes.Buffer)\n>        if err := e.SerializePrivate(w); err != nil {\n>                t.Errorf(\"failed to serialize entity: %s\", err)\n>                return\n> @@ -78,7 +78,7 @@\n>                t.Errorf(\"wrong number of entities found, got %d, want 1\",\n> len(el))\n>        }\n>\n> -       w = bytes.NewBuffer(nil)\n> +       w = new(bytes.Buffer)\n>        if err := e.SerializePrivate(w); err != nil {\n>                t.Errorf(\"failed to serialize entity second time: %s\", err)\n>                return\n> @@ -112,7 +112,7 @@\n>        if err != nil {\n>                t.Errorf(\"error rereading message: %s\", err)\n>        }\n> -       messageBuf := bytes.NewBuffer(nil)\n> +       messageBuf := new(bytes.Buffer)\n>        _, err = io.Copy(messageBuf, md.UnverifiedBody)\n>        if err != nil {\n>                t.Errorf(\"error rereading message: %s\", err)\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-07-08 14:54:57.278851",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Almost all the\n\nbuf := bytes.NewBuffer(nil)\n\nare better as\n\nvar buf bytes.Buffer\n\nand then pass &buf in the one or two places it matters.\nAvoids thinking about new entirely.\n",
			"disapproval": false,
			"date": "2011-07-11 06:35:55.520733",
			"approval": false
		},
		{
			"sender": "m@capitanio.org",
			"recipients": [
				"agl@golang.org",
				"bradfitz@golang.org",
				"m@capitanio.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thinking is good. I'd prefer new where it's shorter.",
			"disapproval": false,
			"date": "2011-07-11 14:44:05.483523",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "openpgp is gone from this repository, thank god",
			"disapproval": false,
			"date": "2012-06-03 04:52:50.721992",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 10:13:19.836380",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 4670051: crypto/openpgp: use new(bytes.Buffer) where possible",
	"created": "2011-07-08 13:56:16.508614",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2013-07-21 10:13:20.068990",
	"closed": false,
	"issue": 4670051
}