{
	"description": "go.tools/pointer: inclusion-based pointer analysis for Go.\r\n\r\nSuggested reading order:\r\n- doc.go\r\n- api.go, analysis.go, callgraph.go, labels.go\r\n- print.go, util.go\r\n- gen.go\r\n- solve.go\r\n- pointer_test.go, testdata/*\r\n- intrinsics.go (none are implemented yet)",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dannyb@google.com",
		"gri@golang.org",
		"crawshaw@google.com"
	],
	"messages": [
		{
			"sender": "dannyb@google.com",
			"recipients": [
				"adonovan@google.com",
				"dannyb@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I didn't comment on the solver since I expect it will change dramatically :)\nLooks like a good start to me.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/TODO\nFile pointer/TODO (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/TODO#newcode24\npointer/TODO:24: (insertion order with fast membership test)\nFWIW: We tried almost all of these.\n\nFDLL is something many have used before, but it's overkill and underkill at the same time.\n \nIf you want fast membership testing, it's 100x faster to use just a regular bitmap as a side structure.\n\nSince your id's are integers, there is basically never a good reason to use hash sets.\n\nGCC's solver keeps the list of changed variables as a bitmap, visited variables as a bitmap, and the worklist as a vector.\n\nSince the topo order of the variables  may change on each iteration, we compute it on each iteration.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/analysis.go\nFile pointer/analysis.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/analysis.go#newcode34\npointer/analysis.go:34: size uint32\nEventually you are likely to want to linked list these nodes together.\nThis also, btw, saves you from having to keep the node ids in order.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/api.go\nFile pointer/api.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/api.go#newcode125\npointer/api.go:125: // Scan back to the previous object start.\nI can't read Go well enough to understand what this is trying to do :)\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/doc.go\nFile pointer/doc.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/doc.go#newcode108\npointer/doc.go:108: optimisation redundant.\nPresolving will detect these for you\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/gen.go\nFile pointer/gen.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/gen.go#newcode118\npointer/gen.go:118: a.addNodes(sig.Results(), \"func.results\")\nHow are varargs handled?\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/gen.go#newcode974\npointer/gen.go:974: // sound/efficient/useful design choices here.\nFWIW: It's roughly impossible to get any precision int he real world from external function calls, unless you have annotations or precomputations (like the papers talk about).",
			"disapproval": false,
			"date": "2013-06-27 17:24:17.111710",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"dannyb@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dannyb@google.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-30 20:06:27.979070",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"dannyb@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Danny.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/TODO\nFile pointer/TODO (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/TODO#newcode24\npointer/TODO:24: (insertion order with fast membership test)\nOn 2013/06/27 17:24:17, dannyb wrote:\n> FWIW: We tried almost all of these.\n> \n> FDLL is something many have used before, but it's overkill and underkill at the\n> same time.\n>  \n> If you want fast membership testing, it's 100x faster to use just a regular\n> bitmap as a side structure.\n> \n> Since your id's are integers, there is basically never a good reason to use hash\n> sets.\n> \n> GCC's solver keeps the list of changed variables as a bitmap, visited variables\n> as a bitmap, and the worklist as a vector.\n> \n> Since the topo order of the variables  may change on each iteration, we compute\n> it on each iteration.\n\nThanks.  I've noted your recommendation.  I have a sparse bitmap in a followup CL.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/analysis.go\nFile pointer/analysis.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/analysis.go#newcode34\npointer/analysis.go:34: size uint32\nOn 2013/06/27 17:24:17, dannyb wrote:\n> Eventually you are likely to want to linked list these nodes together.\n> This also, btw, saves you from having to keep the node ids in order.\n\nYep, this will come with the presolver.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/api.go\nFile pointer/api.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/api.go#newcode125\npointer/api.go:125: // Scan back to the previous object start.\nOn 2013/06/27 17:24:17, dannyb wrote:\n> I can't read Go well enough to understand what this is trying to do :)\n\nGiven a node, it searches for the preceding node with the object flag set (i.e. its containing allocation) then uses the type of the allocation to compute an access path expression.  e.g. given the node for a.b[0].c it computes the pair (a, \"a.b[*].c\").\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/doc.go\nFile pointer/doc.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/doc.go#newcode108\npointer/doc.go:108: optimisation redundant.\nOn 2013/06/27 17:24:17, dannyb wrote:\n> Presolving will detect these for you\n\nThat's what I hoped.  Removed.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/gen.go\nFile pointer/gen.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/gen.go#newcode118\npointer/gen.go:118: a.addNodes(sig.Results(), \"func.results\")\nOn 2013/06/27 17:24:17, dannyb wrote:\n> How are varargs handled?\n\nThey're desugared during SSA construction into explicit slice (think: list) construction, so they don't exist at this level.\n\nhttps://codereview.appspot.com/10618043/diff/22001/pointer/gen.go#newcode974\npointer/gen.go:974: // sound/efficient/useful design choices here.\nOn 2013/06/27 17:24:17, dannyb wrote:\n> FWIW: It's roughly impossible to get any precision int he real world from\n> external function calls, unless you have annotations or precomputations (like\n> the papers talk about). \n\nAs I feared.  Still, your (offline) testimony about k x 10^7 LOC C++ programs has convinced me that whole (Go) program analysis is not crazy.",
			"disapproval": false,
			"date": "2013-07-30 20:14:29.944190",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"dannyb@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For now just some comments on the documentation.\n\nThis is way too much to absorb in one CL. Also, I am not familiar with the respective algorithms. We need to find a different way to review this.\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/analysis.go\nFile pointer/analysis.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/analysis.go#newcode18\npointer/analysis.go:18: // - they are smaller.\n- they are smaller on 64bit systems\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/analysis.go#newcode24\npointer/analysis.go:24: ntObject    = 1 << iota // start of an object (addressible memory location)\naddressable\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/api.go\nFile pointer/api.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/api.go#newcode25\npointer/api.go:25: // call-graph is multigraph over CallGraphNodes with edges\nis a\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/api.go#newcode54\npointer/api.go:54: // which points its methods provide access to the analysis\npoint\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/api.go#newcode131\npointer/api.go:131: // key type, the corresponding map value is set of pointer\nis a\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/callgraph.go\nFile pointer/callgraph.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/callgraph.go#newcode13\npointer/callgraph.go:13: // the callgraph.  In other words, two distinct\ntwo distinct ?\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/callgraph.go#newcode14\npointer/callgraph.go:14: // have multiple nodes representing the same *Function, dependending\ndepending\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/callgraph.go#newcode15\npointer/callgraph.go:15: // on the context from which it was called.  The identity of the node\nit or they ?\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/doc.go\nFile pointer/doc.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/doc.go#newcode40\npointer/doc.go:40: (For example parameter passing consists of generating n parallel\nFor example, passing n parameters consists of ...\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/doc.go#newcode51\npointer/doc.go:51: out into a sequential list of scalar component types.\nwhat about large arrays, say with 1e5 elements?\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/doc.go#newcode61\npointer/doc.go:61: An \"object\" is a contiguous sequence of nodes denoting an addressible\naddressable\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/doc.go#newcode101\npointer/doc.go:101: Currently all fields of a type, including non-pointer basic types\nunclear - basic types are atomic (no fields)\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/doc.go#newcode113\npointer/doc.go:113: All other basic types are ignored.  Expressions of these types are\nare have ?\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/doc.go#newcode234\npointer/doc.go:234: thus equivalent to a pointer to its first element.  Similarly, a\nseems like structs are already mentioned above for basic types\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/testdata/finalizer.go\nFile pointer/testdata/finalizer.go (right):\n\nhttps://codereview.appspot.com/10618043/diff/33001/pointer/testdata/finalizer.go#newcode3\npointer/testdata/finalizer.go:3: //\ndregg?",
			"disapproval": false,
			"date": "2013-08-13 22:39:34.237660",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 10618043: go.tools/pointer: inclusion-based pointer analysis for Go.",
	"created": "2013-06-26 15:48:23.488150",
	"patchsets": [
		1,
		3001,
		17001,
		20001,
		22001,
		29001,
		33001,
		42001
	],
	"modified": "2013-08-15 20:40:02.284650",
	"closed": false,
	"issue": 10618043
}