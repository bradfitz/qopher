{
	"description": "net/http: server optimization; reduce GCs, generate ~half the garbage\n\nThere was another bufio.Writer not being reused, found with\nGOGC=off and -test.memprofile.\n\nbenchmark                               old ns/op    new ns/op    delta\nBenchmarkServerFakeConnWithKeepAlive        18270        16046  -12.17%\n\nbenchmark                              old allocs   new allocs    delta\nBenchmarkServerFakeConnWithKeepAlive           38           36   -5.26%\n\nbenchmark                               old bytes    new bytes    delta\nBenchmarkServerFakeConnWithKeepAlive         4598         2488  -45.89%\n\nUpdate issue 5100",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [
		"adg@google.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-27 06:32:30.525660",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nbut i am not familiar with the details",
			"disapproval": false,
			"date": "2013-03-27 17:58:25.386870",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6fa8c13f4f93 ***\n\nnet/http: server optimization; reduce GCs, generate ~half the garbage\n\nThere was another bufio.Writer not being reused, found with\nGOGC=off and -test.memprofile.\n\nbenchmark                               old ns/op    new ns/op    delta\nBenchmarkServerFakeConnWithKeepAlive        18270        16046  -12.17%\n\nbenchmark                              old allocs   new allocs    delta\nBenchmarkServerFakeConnWithKeepAlive           38           36   -5.26%\n\nbenchmark                               old bytes    new bytes    delta\nBenchmarkServerFakeConnWithKeepAlive         4598         2488  -45.89%\n\nUpdate issue 5100\n\nR=golang-dev, gri\nCC=golang-dev\nhttps://codereview.appspot.com/8038047",
			"disapproval": false,
			"date": "2013-03-27 20:35:51.264690",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\nOn 27 Mar 2013 17:32, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net/http: server optimization; reduce GCs, generate ~half the garbage\r\n>\r\n> There was another bufio.Writer not being reused, found with\r\n> GOGC=off and -test.memprofile.\r\n>\r\n> benchmark                               old ns/op    new ns/op    delta\r\n> BenchmarkServerFakeConnWithKee**pAlive        18270        16046  -12.17%\r\n>\r\n> benchmark                              old allocs   new allocs    delta\r\n> BenchmarkServerFakeConnWithKee**pAlive           38           36   -5.26%\r\n>\r\n> benchmark                               old bytes    new bytes    delta\r\n> BenchmarkServerFakeConnWithKee**pAlive         4598         2488  -45.89%\r\n>\r\n> Update issue 5100\r\n>\r\n> Please review this at https://codereview.appspot.**com/8038047/<https://codereview.appspot.com/8038047/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/server.go\r\n>\r\n>\r\n> Index: src/pkg/net/http/server.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/server.go\r\n> +++ b/src/pkg/net/http/server.go\r\n> @@ -281,6 +281,7 @@\r\n>\r\n>         w  *bufio.Writer // buffers output in chunks to chunkWriter\r\n>         cw *chunkWriter\r\n> +       sw *switchWriter // of the bufio.Writer, for return to\r\n> putBufioWriter\r\n>\r\n>         // handlerHeader is the Header that Handlers get access to,\r\n>         // which may be retained and mutated even after WriteHeader.\r\n> @@ -381,7 +382,7 @@\r\n>         c.sr = liveSwitchReader{r: c.rwc}\r\n>         c.lr = io.LimitReader(&c.sr, noLimit).(*io.LimitedReader)\r\n>         br, sr := newBufioReader(c.lr)\r\n> -       bw, sw := newBufioWriter(c.rwc)\r\n> +       bw, sw := newBufioWriterSize(c.rwc, 4<<10)\r\n>         c.buf = bufio.NewReadWriter(br, bw)\r\n>         c.bufswr = sr\r\n>         c.bufsww = sw\r\n> @@ -402,10 +403,21 @@\r\n>\r\n>  // TODO: use a sync.Cache instead\r\n>  var (\r\n> -       bufioReaderCache = make(chan bufioReaderPair, 4)\r\n> -       bufioWriterCache = make(chan bufioWriterPair, 4)\r\n> +       bufioReaderCache   = make(chan bufioReaderPair, 4)\r\n> +       bufioWriterCache2k = make(chan bufioWriterPair, 4)\r\n> +       bufioWriterCache4k = make(chan bufioWriterPair, 4)\r\n>  )\r\n>\r\n> +func bufioWriterCache(size int) chan bufioWriterPair {\r\n> +       switch size {\r\n> +       case 2 << 10:\r\n> +               return bufioWriterCache2k\r\n> +       case 4 << 10:\r\n> +               return bufioWriterCache4k\r\n> +       }\r\n> +       return nil\r\n> +}\r\n> +\r\n>  func newBufioReader(r io.Reader) (*bufio.Reader, *switchReader) {\r\n>         select {\r\n>         case p := <-bufioReaderCache:\r\n> @@ -429,14 +441,14 @@\r\n>         }\r\n>  }\r\n>\r\n> -func newBufioWriter(w io.Writer) (*bufio.Writer, *switchWriter) {\r\n> +func newBufioWriterSize(w io.Writer, size int) (*bufio.Writer,\r\n> *switchWriter) {\r\n>         select {\r\n> -       case p := <-bufioWriterCache:\r\n> +       case p := <-bufioWriterCache(size):\r\n>                 p.sw.Writer = w\r\n>                 return p.bw, p.sw\r\n>         default:\r\n>                 sw := &switchWriter{w}\r\n> -               return bufio.NewWriter(sw), sw\r\n> +               return bufio.NewWriterSize(sw, size), sw\r\n>         }\r\n>  }\r\n>\r\n> @@ -454,7 +466,7 @@\r\n>         }\r\n>         sw.Writer = nil\r\n>         select {\r\n> -       case bufioWriterCache <- bufioWriterPair{bw, sw}:\r\n> +       case bufioWriterCache(bw.Available(**)) <- bufioWriterPair{bw,\r\n> sw}:\r\n>         default:\r\n>         }\r\n>  }\r\n> @@ -540,7 +552,7 @@\r\n>                 cw:            new(chunkWriter),\r\n>         }\r\n>         w.cw.res = w\r\n> -       w.w = bufio.NewWriterSize(w.cw, bufferBeforeChunkingSize)\r\n> +       w.w, w.sw = newBufioWriterSize(w.cw, bufferBeforeChunkingSize)\r\n>         return w, nil\r\n>  }\r\n>\r\n> @@ -802,6 +814,7 @@\r\n>         }\r\n>\r\n>         w.w.Flush()\r\n> +       putBufioWriter(w.w, w.sw)\r\n>         w.cw.close()\r\n>         w.conn.buf.Flush()\r\n>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:13:27.048060",
			"approval": true
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8038047: net/http: server optimization; reduce GCs, generate ~ha...",
	"created": "2013-03-27 06:32:16.946250",
	"patchsets": [
		1,
		2001,
		5001,
		10001
	],
	"modified": "2013-03-27 23:09:46.893880",
	"closed": true,
	"issue": 8038047
}