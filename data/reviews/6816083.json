{
	"description": "exp/types: fixed field/method lookup\n\nalso:\n\n- composite literal checking close to complete\n- cleaned up parameter, method, field checking\n- don't let panics escape type checker\n- more TODOs eliminated",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the current reflect library has the same problem at the moment, see http://code.google.com/p/go/issues/detail?id=4355 .\n\nUpdate forthcoming.\n\nhttps://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/operand.go\nFile src/pkg/exp/types/operand.go (right):\n\nhttps://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/operand.go#newcode127\nsrc/pkg/exp/types/operand.go:127: \nOn 2012/11/06 19:34:31, rsc wrote:\n> // TODO(gri): distinguish pointer and non-pointer receivers?\n\nDone.\n\nhttps://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/operand.go#newcode326\nsrc/pkg/exp/types/operand.go:326: visited[typ] = res.mode != invalid\nOn 2012/11/06 19:34:31, rsc wrote:\n> I still think you need full counts (well, 0, 1, 2) here. The type might contain\n> a match but not at this level.\n\nSigh. Yes, I believe you are correct.",
			"disapproval": false,
			"date": "2012-11-06 22:22:24.649640",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-02 23:27:39.050450",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-06 01:02:52.395940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/operand.go\nFile src/pkg/exp/types/operand.go (right):\n\nhttps://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/operand.go#newcode127\nsrc/pkg/exp/types/operand.go:127: \n// TODO(gri): distinguish pointer and non-pointer receivers?\n\nhttps://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/operand.go#newcode326\nsrc/pkg/exp/types/operand.go:326: visited[typ] = res.mode != invalid\nI still think you need full counts (well, 0, 1, 2) here. The type might contain a match but not at this level.\n\nhttps://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/testdata/decls3.src\nFile src/pkg/exp/types/testdata/decls3.src (right):\n\nhttps://codereview.appspot.com/6816083/diff/1002/src/pkg/exp/types/testdata/decls3.src#newcode27\nsrc/pkg/exp/types/testdata/decls3.src:27: T4 struct { T2; T3 } // X is embedded twice at the same level via T2->T1->X, T3->T1->X\nI think if you add a test with\n\ntype (\n    T1 struct {X int}\n    T2 struct {T1}\n    T3 struct {T2}\n    T4 struct {T2}\n    T5 struct {T3; T4}\n)\n\nit will not be detected because of the lack of counts.",
			"disapproval": false,
			"date": "2012-11-06 19:34:31.258000",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-10 00:59:15.856650",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-07 17:44:44.579240",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=aa5d8b37ad24 ***\n\nexp/types: fixed field/method lookup\n\nalso:\n\n- composite literal checking close to complete\n- cleaned up parameter, method, field checking\n- don't let panics escape type checker\n- more TODOs eliminated\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6816083",
			"disapproval": false,
			"date": "2012-11-26 20:49:08.453500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM assuming test passes",
			"disapproval": false,
			"date": "2012-11-26 19:13:07.786240",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6816083: exp/types: fixed field/method lookup",
	"created": "2012-11-02 23:17:44.795090",
	"patchsets": [
		1,
		1001,
		4001,
		6001,
		6010,
		9001,
		1002,
		13001,
		2010,
		12003,
		6013,
		1019,
		5010,
		5011,
		5012,
		4010,
		16001,
		19001,
		16002
	],
	"modified": "2012-11-26 20:49:09.898770",
	"closed": true,
	"issue": 6816083
}