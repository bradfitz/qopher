{
	"description": "encoding/json: support encoding.TextMarshaler, encoding.TextUnmarshaler",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-09 19:09:44.803780",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12703043/diff/6001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/12703043/diff/6001/src/pkg/encoding/json/encode.go#newcode847\nsrc/pkg/encoding/json/encode.go:847: func (e *encodeState) stringBytes(s []byte) (int, error) {\nthis is sad, that we have two giant copies of a non-trivial function that don't differ at all.\n\nand that you just fixed a bug in both of them.\n\nat least they're adjacent, but could you add a warning comment above both of them to keep the in sync?  or better: add a test that they're always equivalent for a large set of test cases?",
			"disapproval": false,
			"date": "2013-08-09 20:04:16.208560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nI added a test for the two functions being in sync.\r\n",
			"disapproval": false,
			"date": "2013-08-14 04:32:27.654330",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12703043/diff/10001/src/pkg/encoding/json/decode_test.go\nFile src/pkg/encoding/json/decode_test.go (right):\n\nhttps://codereview.appspot.com/12703043/diff/10001/src/pkg/encoding/json/decode_test.go#newcode79\nsrc/pkg/encoding/json/decode_test.go:79: *u = unmarshalerText{true} // All we need to see that UnmarshalJson is called.\ns/Json/JSON/",
			"disapproval": false,
			"date": "2013-08-14 18:04:53.872920",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=117ed8ab3db0 ***\n\nencoding/json: support encoding.TextMarshaler, encoding.TextUnmarshaler\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12703043",
			"disapproval": false,
			"date": "2013-08-14 18:56:10.110580",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 12703043: encoding/json: support encoding.TextMarshaler, encoding...",
	"created": "2013-08-09 19:08:35.453190",
	"patchsets": [
		1,
		2001,
		6001,
		10001,
		15001
	],
	"modified": "2013-08-14 18:56:11.497010",
	"closed": true,
	"issue": 12703043
}