{
	"description": "syscall: dll function load and calling changes\n\nNew DLL and Proc types to manage and call dll functions. These were\nused to simplify syscall tests in runtime package. They were also\nused to implement LazyDLL and LazyProc.\n\nLazyProc, like Proc, now have Call function, that just a wrapper for\nSyscallN. It is not as efficient as Syscall, but easier to use.\n\nNewLazyDLL now supports non-ascii filenames.\n\nLazyDLL and LazyProc now have Load and Find methods. These can be used\nduring runtime to discover if some dll functions are not present.\n\nAll dll functions now return errors that fit os.Error interface. They\nalso contain Windows error number.\n\nSome of these changes are suggested by jp.",
	"cc": [
		"golang-dev@googlegroups.com",
		"jp@webmaster.ms",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jp@webmaster.ms",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9e73a59f386c ***\n\nsyscall: dll function load and calling changes\n\nNew DLL and Proc types to manage and call dll functions. These were\nused to simplify syscall tests in runtime package. They were also\nused to implement LazyDLL and LazyProc.\n\nLazyProc, like Proc, now have Call function, that just a wrapper for\nSyscallN. It is not as efficient as Syscall, but easier to use.\n\nNewLazyDLL now supports non-ascii filenames.\n\nLazyDLL and LazyProc now have Load and Find methods. These can be used\nduring runtime to discover if some dll functions are not present.\n\nAll dll functions now return errors that fit os.Error interface. They\nalso contain Windows error number.\n\nSome of these changes are suggested by jp.\n\nR=golang-dev, jp, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5272042\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/runtime/windows/syscall.goc\nFile src/pkg/runtime/windows/syscall.goc (right):\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/runtime/windows/syscall.goc#newcode10\nsrc/pkg/runtime/windows/syscall.goc:10: func loadlibrary(filename uintptr) (handle uintptr, err uintptr) {\nOn 2011/10/13 13:08:31, jp wrote:\n> Maybe func loadlibrary(filename *uint16) ?\n> It will remove 2 extra castings at the call point.\n\nDone.\n\n> \n> And returns (handle syscall.Handle, err syscall.Errno)\n> Not sure if it possible in cgo to specify such a type.\n\nI don't think it is possible too.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/runtime/windows/syscall.goc#newcode24\nsrc/pkg/runtime/windows/syscall.goc:24: func getprocaddress(handle uintptr, procname uintptr) (proc uintptr, err uintptr) {\nOn 2011/10/13 13:08:31, jp wrote:\n> same: procname *uint8\n\nDone.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go\nFile src/pkg/syscall/dll_windows.go (right):\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode18\nsrc/pkg/syscall/dll_windows.go:18: type Errno uint64\nOn 2011/10/13 13:08:31, jp wrote:\n> uint32.\n> Even on Win64.\n\nI copied this from os package. I expect this to be temporary. We will change it once os.Errno will move to syscall package. Then we could decide what the value of it should be.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode48\nsrc/pkg/syscall/dll_windows.go:48: if e != 0 {\nOn 2011/10/13 13:08:31, jp wrote:\n> h, e := loadlibrary(StringToUTF16Ptr(name)) /* if loadlibrary would accept\n> *uint16 */\n\nDone.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode52\nsrc/pkg/syscall/dll_windows.go:52: Msg:     \"Failed to load \" + name + \": \" + Errstr(int(e)),\nOn 2011/10/13 13:08:31, jp wrote:\n> /* if loadlibrary would return syscall.Errno */\n\nIt would not.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode74\nsrc/pkg/syscall/dll_windows.go:74: a, e := getprocaddress(uintptr(d.Handle), uintptr(unsafe.Pointer(StringBytePtr(name))))\nOn 2011/10/13 13:08:31, jp wrote:\n> a, e := getprocaddress(uintptr(d.Handle), StringBytePtr(name)) /* if\n> getprocaddress would accept *uint8 */\n\nDone.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode79\nsrc/pkg/syscall/dll_windows.go:79: Msg:     \"Failed to find \" + name + \" procedure in \" + d.Name + \": \" + Errstr(int(e)),\nOn 2011/10/13 13:08:31, jp wrote:\n> /* if getprocaddrress would return syscall.Errno */\n\nIt would not.",
			"disapproval": false,
			"date": "2011-10-15 06:30:05.261301",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jp@webmaster.ms",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: jp@webmaster.ms),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-13 12:25:16.241393",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jp@webmaster.ms",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5272042/diff/5001/src/pkg/runtime/windows/syscall.goc\nFile src/pkg/runtime/windows/syscall.goc (right):\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/runtime/windows/syscall.goc#newcode10\nsrc/pkg/runtime/windows/syscall.goc:10: func loadlibrary(filename uintptr) (handle uintptr, err uintptr) {\nMaybe func loadlibrary(filename *uint16) ?\nIt will remove 2 extra castings at the call point.\n\nAnd returns (handle syscall.Handle, err syscall.Errno)\nNot sure if it possible in cgo to specify such a type.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/runtime/windows/syscall.goc#newcode24\nsrc/pkg/runtime/windows/syscall.goc:24: func getprocaddress(handle uintptr, procname uintptr) (proc uintptr, err uintptr) {\nsame: procname *uint8\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go\nFile src/pkg/syscall/dll_windows.go (right):\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode18\nsrc/pkg/syscall/dll_windows.go:18: type Errno uint64\nuint32.\nEven on Win64.\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode48\nsrc/pkg/syscall/dll_windows.go:48: if e != 0 {\nh, e := loadlibrary(StringToUTF16Ptr(name)) /* if loadlibrary would accept *uint16 */\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode52\nsrc/pkg/syscall/dll_windows.go:52: Msg:     \"Failed to load \" + name + \": \" + Errstr(int(e)),\nErrno:   e,\nObjName: name,\nMsg:     \"Failed to load \" + name + \": \" + e.String()\n/* if loadlibrary would return syscall.Errno */\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode74\nsrc/pkg/syscall/dll_windows.go:74: a, e := getprocaddress(uintptr(d.Handle), uintptr(unsafe.Pointer(StringBytePtr(name))))\na, e := getprocaddress(uintptr(d.Handle), StringBytePtr(name)) /* if getprocaddress would accept *uint8 */\n\nhttp://codereview.appspot.com/5272042/diff/5001/src/pkg/syscall/dll_windows.go#newcode79\nsrc/pkg/syscall/dll_windows.go:79: Msg:     \"Failed to find \" + name + \" procedure in \" + d.Name + \": \" + Errstr(int(e)),\nErrno:   e,\nObjName: name,\nMsg:     \"Failed to find \" + name + \" procedure in \" + d.Name + \": \" + e.String(),\n/* if getprocaddrress would return syscall.Errno */",
			"disapproval": false,
			"date": "2011-10-13 13:08:31.513068",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThe sentences that say \"Returns error...\" should be \"It returns an error...\".\n",
			"disapproval": false,
			"date": "2011-10-13 16:52:18.196720",
			"approval": true
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5272042: syscall: dll function load and calling changes",
	"created": "2011-10-13 12:20:39.244135",
	"patchsets": [
		1,
		2001,
		5001,
		4008
	],
	"modified": "2011-10-15 06:30:07.715419",
	"closed": true,
	"issue": 5272042
}