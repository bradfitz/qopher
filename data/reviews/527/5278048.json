{
	"description": "gc: treat uintptr as potentially containing a pointer\nFixes issue 2376",
	"cc": [
		"golang-dev@googlegroups.com",
		"lvd@google.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Oct 17, 2011 at 09:19, <dvyukov@google.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> gc: treat uintptr as potentially containing a pointer\n>\n> Please review this at http://codereview.appspot.com/**5278048/<http://codereview.appspot.com/5278048/>\n>\n> Affected files:\n>  M src/cmd/gc/reflect.c\n>\n>\nthis negatively affects the precision of escape analysis.\n\n\n>\n> Index: src/cmd/gc/reflect.c\n> ==============================**==============================**=======\n> --- a/src/cmd/gc/reflect.c\n> +++ b/src/cmd/gc/reflect.c\n> @@ -516,7 +516,6 @@\n>        case TUINT32:\n>        case TINT64:\n>        case TUINT64:\n> -       case TUINTPTR:\n>        case TFLOAT32:\n>        case TFLOAT64:\n>        case TBOOL:\n> @@ -534,6 +533,7 @@\n>        case TPTR32:\n>        case TPTR64:\n>        case TUNSAFEPTR:\n> +       case TUINTPTR:\n>        case TINTER:\n>        case TCHAN:\n>        case TMAP:\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-17 10:43:26.058454",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-17 07:19:20.696064",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/17 10:46:11, lvd wrote:\n> correction, it just causes some unnecessary work and parameter tagging.\n>  still i think it's undesirable.\n\nHummm... but uintptr effectively haspointers. Can't dirty tricks with uintptr break esc analysis as well? If not, then I am curious what condition do you need in esc analysis? If you simply consider any cast to unsafe.Pointer as escape, then you don't need to consider unsafe.Pointer as haspointers as well.",
			"disapproval": false,
			"date": "2011-10-17 11:24:49.780749",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Oct 17, 2011 at 12:43, Luuk van Dijk <lvd@google.com> wrote:\n\n>\n>\n> On Mon, Oct 17, 2011 at 09:19, <dvyukov@google.com> wrote:\n>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg/\n>>\n>>\n>> Description:\n>> gc: treat uintptr as potentially containing a pointer\n>>\n>> Please review this at http://codereview.appspot.com/**5278048/<http://codereview.appspot.com/5278048/>\n>>\n>> Affected files:\n>>  M src/cmd/gc/reflect.c\n>>\n>>\n> this negatively affects the precision of escape analysis.\n>\n\ncorrection, it just causes some unnecessary work and parameter tagging.\n still i think it's undesirable.\n\n\n>\n>\n>>\n>> Index: src/cmd/gc/reflect.c\n>> ==============================**==============================**=======\n>> --- a/src/cmd/gc/reflect.c\n>> +++ b/src/cmd/gc/reflect.c\n>> @@ -516,7 +516,6 @@\n>>        case TUINT32:\n>>        case TINT64:\n>>        case TUINT64:\n>> -       case TUINTPTR:\n>>        case TFLOAT32:\n>>        case TFLOAT64:\n>>        case TBOOL:\n>> @@ -534,6 +533,7 @@\n>>        case TPTR32:\n>>        case TPTR64:\n>>        case TUNSAFEPTR:\n>> +       case TUINTPTR:\n>>        case TINTER:\n>>        case TCHAN:\n>>        case TMAP:\n>>\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2011-10-17 10:46:11.237205",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/17 11:24:49, dvyukov wrote:\n> On 2011/10/17 10:46:11, lvd wrote:\n> > correction, it just causes some unnecessary work and parameter tagging.\n> >  still i think it's undesirable.\n> \n> Hummm... but uintptr effectively haspointers. Can't dirty tricks with uintptr\n> break esc analysis as well? If not, then I am curious what condition do you need\n> in esc analysis? If you simply consider any cast to unsafe.Pointer as escape,\n> then you don't need to consider unsafe.Pointer as haspointers as well.\n\nI see, you ignore all conversions. Then I would expect that you either need or don't need both unsafe.Pointer and uintptr.",
			"disapproval": false,
			"date": "2011-10-17 11:28:16.931708",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "to get back to the original issue, i don't think marking the type uintptr as\nsomething that contains a pointer is the correct way of dealing with the\nproblem. somehow, keeping track of where pointers go has to happen when you\ndo the unsafe conversion from a real pointer to an integer value.  Go\npromises 'no dangling pointers' as long as you have pointers, not as long as\nyou can unsafely concoct one.  you could store all bits of the uintptr in a\nseparate bool, discard the uintptr, have the memory gc'ed and reconstruct\nthat pointer from your 32 or 64 bools.  that doesn't mean we should now mark\nbools as potentially having pointers either.\n\n/L\n\nOn Mon, Oct 17, 2011 at 13:34, Luuk van Dijk <lvd@google.com> wrote:\n\n>\n>\n> On Mon, Oct 17, 2011 at 13:30, <dvyukov@google.com> wrote:\n>\n>> On 2011/10/17 11:28:16, dvyukov wrote:\n>>\n>>> On 2011/10/17 11:24:49, dvyukov wrote:\n>>> > On 2011/10/17 10:46:11, lvd wrote:\n>>> > > correction, it just causes some unnecessary work and parameter\n>>>\n>> tagging.\n>>\n>>> > >  still i think it's undesirable.\n>>> >\n>>> > Hummm... but uintptr effectively haspointers. Can't dirty tricks\n>>>\n>> with uintptr\n>>\n>>> > break esc analysis as well? If not, then I am curious what condition\n>>>\n>> do you\n>>\n>>> need\n>>> > in esc analysis? If you simply consider any cast to unsafe.Pointer\n>>>\n>> as escape,\n>>\n>>> > then you don't need to consider unsafe.Pointer as haspointers as\n>>>\n>> well.\n>>\n>>  I see, you ignore all conversions. Then I would expect that you either\n>>>\n>> need or\n>>\n>>> don't need both unsafe.Pointer and uintptr.\n>>>\n>>\n>> Btw, why does it say\n>>\n>> func foobar(p *int) *int {\n>>        return p\n>> }\n>> func main() {\n>>        i := 42\n>>        foobar(&i)\n>>        println(i)\n>> }\n>> tst.go:13: moved to heap: i\n>> tst.go:6: leaking param: p\n>> tst.go:15: &i escapes to heap\n>> ?\n>>\n>> Why p escapes from foobar?\n>>\n>\n> because you use it as a return value.\n>\n>\n>\n>>\n>> http://codereview.appspot.com/**5278048/<http://codereview.appspot.com/5278048/>\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-17 11:39:54.192706",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/17 11:28:16, dvyukov wrote:\n> On 2011/10/17 11:24:49, dvyukov wrote:\n> > On 2011/10/17 10:46:11, lvd wrote:\n> > > correction, it just causes some unnecessary work and parameter tagging.\n> > >  still i think it's undesirable.\n> > \n> > Hummm... but uintptr effectively haspointers. Can't dirty tricks with uintptr\n> > break esc analysis as well? If not, then I am curious what condition do you\n> need\n> > in esc analysis? If you simply consider any cast to unsafe.Pointer as escape,\n> > then you don't need to consider unsafe.Pointer as haspointers as well.\n> \n> I see, you ignore all conversions. Then I would expect that you either need or\n> don't need both unsafe.Pointer and uintptr.\n\nBtw, why does it say\n\nfunc foobar(p *int) *int {\n\treturn p\n}\nfunc main() {\n\ti := 42\n\tfoobar(&i)\n\tprintln(i)\n}\ntst.go:13: moved to heap: i\ntst.go:6: leaking param: p\ntst.go:15: &i escapes to heap\n?\n\nWhy p escapes from foobar?",
			"disapproval": false,
			"date": "2011-10-17 11:30:06.939199",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=bdd5d1a91f43 ***\n\ngc: treat uintptr as potentially containing a pointer\nFixes issue 2376\n\nR=golang-dev, lvd, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5278048\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-10-17 19:14:10.623024",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Oct 17, 2011 at 13:30, <dvyukov@google.com> wrote:\n\n> On 2011/10/17 11:28:16, dvyukov wrote:\n>\n>> On 2011/10/17 11:24:49, dvyukov wrote:\n>> > On 2011/10/17 10:46:11, lvd wrote:\n>> > > correction, it just causes some unnecessary work and parameter\n>>\n> tagging.\n>\n>> > >  still i think it's undesirable.\n>> >\n>> > Hummm... but uintptr effectively haspointers. Can't dirty tricks\n>>\n> with uintptr\n>\n>> > break esc analysis as well? If not, then I am curious what condition\n>>\n> do you\n>\n>> need\n>> > in esc analysis? If you simply consider any cast to unsafe.Pointer\n>>\n> as escape,\n>\n>> > then you don't need to consider unsafe.Pointer as haspointers as\n>>\n> well.\n>\n>  I see, you ignore all conversions. Then I would expect that you either\n>>\n> need or\n>\n>> don't need both unsafe.Pointer and uintptr.\n>>\n>\n> Btw, why does it say\n>\n> func foobar(p *int) *int {\n>        return p\n> }\n> func main() {\n>        i := 42\n>        foobar(&i)\n>        println(i)\n> }\n> tst.go:13: moved to heap: i\n> tst.go:6: leaking param: p\n> tst.go:15: &i escapes to heap\n> ?\n>\n> Why p escapes from foobar?\n>\n\nbecause you use it as a return value.\n\n\n\n>\n> http://codereview.appspot.com/**5278048/<http://codereview.appspot.com/5278048/>\n>\n",
			"disapproval": false,
			"date": "2011-10-17 11:34:28.427626",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nWhile this may reduce the effectiveness of escape analysis\nin hypothetical cases, it doesn't have any effect on our\nactual test suite.\n",
			"disapproval": false,
			"date": "2011-10-17 19:00:15.657474",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5278048: gc: treat uintptr as potentially containing a pointer",
	"created": "2011-10-17 07:11:11.510456",
	"patchsets": [
		1,
		2001,
		3001,
		6001,
		8001
	],
	"modified": "2011-10-26 12:29:18.410730",
	"closed": true,
	"issue": 5278048
}