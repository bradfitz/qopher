{
	"description": "go.tools/go/types: provide package for imported methods\n\nFixes issue 5815.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-29 20:01:56.716780",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12048043/diff/8001/go/types/gcimporter.go\nFile go/types/gcimporter.go (right):\n\nhttps://codereview.appspot.com/12048043/diff/8001/go/types/gcimporter.go#newcode431\ngo/types/gcimporter.go:431: // sole purpose of providing a package path. Fake packages are created\nThese presumably leak outside of the API. Isn't that a problem?\n\nhttps://codereview.appspot.com/12048043/diff/8001/go/types/issues_test.go\nFile go/types/issues_test.go (right):\n\nhttps://codereview.appspot.com/12048043/diff/8001/go/types/issues_test.go#newcode93\ngo/types/issues_test.go:93: if tname, _ := obj.(*TypeName); tname != nil {\nIt might be good to generalize this assertion to all objects (except labels, universals, and a few others) and, rather than plying it to a single input, run it as a sanity check over all objects generated by the typechecker on a substantial input such as $GOROOT.  I think there may be a number of API invariants you'll want to check in such fashion.",
			"disapproval": false,
			"date": "2013-07-29 20:05:46.695860",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12048043/diff/8001/go/types/gcimporter.go\nFile go/types/gcimporter.go (right):\n\nhttps://codereview.appspot.com/12048043/diff/8001/go/types/gcimporter.go#newcode431\ngo/types/gcimporter.go:431: // sole purpose of providing a package path. Fake packages are created\nOn 2013/07/29 20:05:46, adonovan wrote:\n> These presumably leak outside of the API. Isn't that a problem?\n\nYes - don't know that it's a problem - but there's no much I can do about it at the moment. Unfortunately, gc export data is not very well specified and had do be somewhat reverse-engineered. Eventually we need a better approach.\n\nhttps://codereview.appspot.com/12048043/diff/8001/go/types/issues_test.go\nFile go/types/issues_test.go (right):\n\nhttps://codereview.appspot.com/12048043/diff/8001/go/types/issues_test.go#newcode93\ngo/types/issues_test.go:93: if tname, _ := obj.(*TypeName); tname != nil {\nOn 2013/07/29 20:05:46, adonovan wrote:\n> It might be good to generalize this assertion to all objects (except labels,\n> universals, and a few others) and, rather than plying it to a single input, run\n> it as a sanity check over all objects generated by the typechecker on a\n> substantial input such as $GOROOT.  I think there may be a number of API\n> invariants you'll want to check in such fashion.\n\nSure. I am thinking of having a \"verify\" pass over all data structures generated as a result of calling Check, and basically invoke verify in debug mode. This test is somewhat specific to issue 5818 so I'll leave it at that.",
			"disapproval": false,
			"date": "2013-07-29 20:21:11.810490",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7d693a7abc53&repo=tools ***\n\ngo.tools/go/types: provide package for imported methods\n\nFixes issue 5815.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/12048043",
			"disapproval": false,
			"date": "2013-07-29 20:22:48.764390",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 12048043: go.tools/go/types: provide package for imported methods",
	"created": "2013-07-29 18:48:18.631550",
	"patchsets": [
		1,
		3001,
		5001,
		8001,
		15001
	],
	"modified": "2013-07-29 20:22:50.602530",
	"closed": true,
	"issue": 12048043
}